
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 97 fc 00 00       	call   c000fcb7 <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 53 8e 02 00       	call   c0028e78 <_init>
c0000025:	c3                   	ret    
c0000026:	bb 0e 9b 02 c0       	mov    ebx,0xc0029b0e
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb 1c 9b 02 c0    	cmp    ebx,0xc0029b1c
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 f8 e3 02 c0       	mov    eax,0xc002e3f8
c0000049:	3d f8 e3 02 c0       	cmp    eax,0xc002e3f8
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 f8 e3 02 c0       	push   0xc002e3f8
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 f8 e3 02 c0       	mov    eax,0xc002e3f8
c0000075:	2d f8 e3 02 c0       	sub    eax,0xc002e3f8
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 f8 e3 02 c0       	push   0xc002e3f8
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d 28 ea 02 c0 00 	cmp    BYTE PTR ds:0xc002ea28,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb 24 9b 02 c0       	mov    ebx,0xc0029b24
c00000bb:	81 eb 20 9b 02 c0    	sub    ebx,0xc0029b20
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be 20 9b 02 c0       	mov    esi,0xc0029b20
c00000ca:	a1 2c ea 02 c0       	mov    eax,ds:0xc002ea2c
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 2c ea 02 c0       	mov    ds:0xc002ea2c,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 2c ea 02 c0       	mov    eax,ds:0xc002ea2c
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 f8 e3 02 c0       	push   0xc002e3f8
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 28 ea 02 c0 01 	mov    BYTE PTR ds:0xc002ea28,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 30 ea 02 c0       	push   0xc002ea30
c000012c:	68 f8 e3 02 c0       	push   0xc002e3f8
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <voodooXADD>:
c00001b4:	55                   	push   ebp
c00001b5:	89 e5                	mov    ebp,esp
c00001b7:	60                   	pusha  
c00001b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00001bb:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00001be:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c00001c1:	8b 70 44             	mov    esi,DWORD PTR [eax+0x44]
c00001c4:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00001c7:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c00001ca:	0f 02 ff             	lar    edi,di
c00001cd:	c1 ef 0d             	shr    edi,0xd
c00001d0:	66 81 e7 03 00       	and    di,0x3
c00001d5:	75 09                	jne    c00001e0 <voodooXADD.usermode>
c00001d7:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c00001da:	81 c4 14 00 00 00    	add    esp,0x14

c00001e0 <voodooXADD.usermode>:
c00001e0:	89 35 7b 02 00 c0    	mov    DWORD PTR ds:0xc000027b,esi
c00001e6:	89 25 77 02 00 c0    	mov    DWORD PTR ds:0xc0000277,esp
c00001ec:	60                   	pusha  
c00001ed:	b0 90                	mov    al,0x90
c00001ef:	b9 20 00 00 00       	mov    ecx,0x20
c00001f4:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c00001f9:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00001fb:	61                   	popa   
c00001fc:	60                   	pusha  
c00001fd:	89 d6                	mov    esi,edx
c00001ff:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c0000204:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000206:	61                   	popa   
c0000207:	60                   	pusha  
c0000208:	89 d6                	mov    esi,edx
c000020a:	bf 5e 02 00 c0       	mov    edi,0xc000025e
c000020f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000211:	61                   	popa   
c0000212:	b1 90                	mov    cl,0x90
c0000214:	85 db                	test   ebx,ebx
c0000216:	74 06                	je     c000021e <voodooXADD.skipChange>
c0000218:	8a 8b 4d 02 00 c0    	mov    cl,BYTE PTR [ebx-0x3ffffdb3]

c000021e <voodooXADD.skipChange>:
c000021e:	88 8b 4e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffdb2],cl
c0000224:	80 ab 4f 02 00 c0 3a 	sub    BYTE PTR [ebx-0x3ffffdb1],0x3a
c000022b:	88 8b 5e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffda2],cl
c0000231:	80 ab 5f 02 00 c0 be 	sub    BYTE PTR [ebx-0x3ffffda1],0xbe
c0000238:	89 c4                	mov    esp,eax
c000023a:	81 c4 10 00 00 00    	add    esp,0x10
c0000240:	5f                   	pop    edi
c0000241:	5e                   	pop    esi
c0000242:	5d                   	pop    ebp
c0000243:	5b                   	pop    ebx
c0000244:	5b                   	pop    ebx
c0000245:	5a                   	pop    edx
c0000246:	59                   	pop    ecx
c0000247:	58                   	pop    eax
c0000248:	8b 25 7b 02 00 c0    	mov    esp,DWORD PTR ds:0xc000027b

c000024e <voodooXADD.helper>:
c000024e:	90                   	nop
c000024f:	90                   	nop
c0000250:	90                   	nop
c0000251:	90                   	nop
c0000252:	90                   	nop
c0000253:	90                   	nop
c0000254:	90                   	nop
c0000255:	90                   	nop
c0000256:	90                   	nop
c0000257:	90                   	nop
c0000258:	90                   	nop
c0000259:	90                   	nop
c000025a:	90                   	nop
c000025b:	90                   	nop
c000025c:	90                   	nop
c000025d:	90                   	nop
c000025e:	90                   	nop
c000025f:	90                   	nop
c0000260:	90                   	nop
c0000261:	90                   	nop
c0000262:	90                   	nop
c0000263:	90                   	nop
c0000264:	90                   	nop
c0000265:	90                   	nop
c0000266:	90                   	nop
c0000267:	90                   	nop
c0000268:	90                   	nop
c0000269:	90                   	nop
c000026a:	90                   	nop
c000026b:	90                   	nop
c000026c:	90                   	nop
c000026d:	90                   	nop
c000026e:	8b 25 77 02 00 c0    	mov    esp,DWORD PTR ds:0xc0000277
c0000274:	61                   	popa   
c0000275:	c9                   	leave  
c0000276:	c3                   	ret    

c0000277 <voodooXADD.oldStack>:
c0000277:	00 00                	add    BYTE PTR [eax],al
	...

c000027b <voodooXADD.newStack>:
c000027b:	00 00                	add    BYTE PTR [eax],al
	...

c000027f <doTPAUSE>:
c000027f:	fb                   	sti    
c0000280:	31 c0                	xor    eax,eax
c0000282:	31 d2                	xor    edx,edx
c0000284:	66 0f ae f0          	tpause eax
c0000288:	c3                   	ret    

c0000289 <hasLegacyFPU>:
c0000289:	0f 20 c2             	mov    edx,cr0
c000028c:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000292:	0f 22 c2             	mov    cr0,edx
c0000295:	db e3                	fninit 
c0000297:	dd 3d ac 02 00 c0    	fnstsw WORD PTR ds:0xc00002ac
c000029d:	31 c0                	xor    eax,eax
c000029f:	66 81 3d ac 02 00 c0 00 00 	cmp    WORD PTR ds:0xc00002ac,0x0
c00002a8:	75 01                	jne    c00002ab <hasLegacyFPU.nofpu>

c00002aa <hasLegacyFPU.hasfpu>:
c00002aa:	40                   	inc    eax

c00002ab <hasLegacyFPU.nofpu>:
c00002ab:	c3                   	ret    

c00002ac <testword>:
c00002ac:	aa                   	stos   BYTE PTR es:[edi],al
c00002ad:	55                   	push   ebp

c00002ae <is486>:
c00002ae:	0f 09                	wbinvd 
c00002b0:	31 c0                	xor    eax,eax
c00002b2:	40                   	inc    eax
c00002b3:	c3                   	ret    
c00002b4:	90                   	nop
c00002b5:	90                   	nop
c00002b6:	90                   	nop
c00002b7:	90                   	nop
c00002b8:	90                   	nop
c00002b9:	90                   	nop
c00002ba:	90                   	nop
c00002bb:	90                   	nop
c00002bc:	90                   	nop
c00002bd:	90                   	nop
c00002be:	90                   	nop
c00002bf:	90                   	nop
c00002c0:	90                   	nop
c00002c1:	90                   	nop
c00002c2:	90                   	nop
c00002c3:	90                   	nop
c00002c4:	90                   	nop
c00002c5:	90                   	nop
c00002c6:	90                   	nop
c00002c7:	90                   	nop
c00002c8:	90                   	nop
c00002c9:	90                   	nop
c00002ca:	90                   	nop
c00002cb:	90                   	nop
c00002cc:	90                   	nop
c00002cd:	90                   	nop
c00002ce:	90                   	nop
c00002cf:	90                   	nop
c00002d0:	90                   	nop
c00002d1:	90                   	nop
c00002d2:	90                   	nop
c00002d3:	90                   	nop
c00002d4:	90                   	nop
c00002d5:	90                   	nop
c00002d6:	90                   	nop
c00002d7:	90                   	nop
c00002d8:	90                   	nop
c00002d9:	90                   	nop
c00002da:	90                   	nop
c00002db:	90                   	nop
c00002dc:	90                   	nop
c00002dd:	90                   	nop
c00002de:	90                   	nop
c00002df:	90                   	nop
c00002e0:	90                   	nop
c00002e1:	31 c0                	xor    eax,eax
c00002e3:	c3                   	ret    

c00002e4 <detectCPUID>:
c00002e4:	9c                   	pushf  
c00002e5:	9c                   	pushf  
c00002e6:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c00002ed:	9d                   	popf   
c00002ee:	9c                   	pushf  
c00002ef:	58                   	pop    eax
c00002f0:	33 04 24             	xor    eax,DWORD PTR [esp]
c00002f3:	9d                   	popf   
c00002f4:	25 00 00 20 00       	and    eax,0x200000
c00002f9:	c3                   	ret    

c00002fa <goToVM86>:
c00002fa:	55                   	push   ebp
c00002fb:	89 e5                	mov    ebp,esp
c00002fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000300:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000303:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0000306:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0000309:	25 ff ff 00 00       	and    eax,0xffff
c000030e:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000314:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000031a:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000320:	52                   	push   edx
c0000321:	51                   	push   ecx
c0000322:	68 02 02 02 00       	push   0x20202
c0000327:	53                   	push   ebx
c0000328:	50                   	push   eax
c0000329:	cf                   	iret   

c000032a <goToUsermode>:
c000032a:	55                   	push   ebp
c000032b:	89 e5                	mov    ebp,esp
c000032d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000330:	66 b8 23 00          	mov    ax,0x23
c0000334:	66 8e d8             	mov    ds,ax
c0000337:	66 8e c0             	mov    es,ax
c000033a:	66 8e e0             	mov    fs,ax
c000033d:	66 8e e8             	mov    gs,ax
c0000340:	89 e0                	mov    eax,esp
c0000342:	68 23 00 00 00       	push   0x23
c0000347:	50                   	push   eax
c0000348:	68 02 02 00 00       	push   0x202
c000034d:	68 1b 00 00 00       	push   0x1b
c0000352:	53                   	push   ebx
c0000353:	cf                   	iret   

c0000354 <switchToThreadASMFirstTime>:
c0000354:	9c                   	pushf  
c0000355:	fa                   	cli    
c0000356:	50                   	push   eax
c0000357:	53                   	push   ebx
c0000358:	51                   	push   ecx
c0000359:	52                   	push   edx
c000035a:	56                   	push   esi
c000035b:	57                   	push   edi
c000035c:	55                   	push   ebp
c000035d:	e9 11 00 00 00       	jmp    c0000373 <commonThreadSwitch>

c0000362 <switchToThreadASM>:
c0000362:	9c                   	pushf  
c0000363:	50                   	push   eax
c0000364:	53                   	push   ebx
c0000365:	51                   	push   ecx
c0000366:	52                   	push   edx
c0000367:	56                   	push   esi
c0000368:	57                   	push   edi
c0000369:	55                   	push   ebp
c000036a:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000370:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000373 <commonThreadSwitch>:
c0000373:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000377:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c000037d:	8b 06                	mov    eax,DWORD PTR [esi]
c000037f:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000382:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000385:	0f 20 d9             	mov    ecx,cr3
c0000388:	39 c8                	cmp    eax,ecx
c000038a:	74 03                	je     c000038f <commonThreadSwitch.doneVAS>
c000038c:	0f 22 d8             	mov    cr3,eax

c000038f <commonThreadSwitch.doneVAS>:
c000038f:	0f 20 c0             	mov    eax,cr0
c0000392:	0c 08                	or     al,0x8
c0000394:	0f 22 c0             	mov    cr0,eax
c0000397:	85 d2                	test   edx,edx
c0000399:	75 11                	jne    c00003ac <commonThreadSwitch.firstTime>
c000039b:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c000039e:	e8 bb d9 01 00       	call   c001dd5e <changeTSS>
c00003a3:	5d                   	pop    ebp
c00003a4:	5f                   	pop    edi
c00003a5:	5e                   	pop    esi
c00003a6:	5a                   	pop    edx
c00003a7:	59                   	pop    ecx
c00003a8:	5b                   	pop    ebx
c00003a9:	58                   	pop    eax
c00003aa:	9d                   	popf   
c00003ab:	c3                   	ret    

c00003ac <commonThreadSwitch.firstTime>:
c00003ac:	fa                   	cli    
c00003ad:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00003b0:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00003b5:	60                   	pusha  
c00003b6:	e8 14 29 01 00       	call   c0012ccf <mapVASFirstTime>
c00003bb:	61                   	popa   
c00003bc:	89 c4                	mov    esp,eax
c00003be:	56                   	push   esi
c00003bf:	52                   	push   edx
c00003c0:	e8 99 d9 01 00       	call   c001dd5e <changeTSS>
c00003c5:	5a                   	pop    edx
c00003c6:	5e                   	pop    esi
c00003c7:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00003ce:	5d                   	pop    ebp
c00003cf:	5f                   	pop    edi
c00003d0:	5e                   	pop    esi
c00003d1:	59                   	pop    ecx
c00003d2:	59                   	pop    ecx
c00003d3:	5b                   	pop    ebx
c00003d4:	58                   	pop    eax
c00003d5:	81 c4 04 00 00 00    	add    esp,0x4
c00003db:	6a 02                	push   0x2
c00003dd:	9d                   	popf   
c00003de:	52                   	push   edx
c00003df:	e8 41 de 01 00       	call   c001e225 <taskStartupFunction>
c00003e4:	5a                   	pop    edx
c00003e5:	50                   	push   eax
c00003e6:	ff d2                	call   edx
c00003e8:	e8 9f e4 01 00       	call   c001e88c <taskReturned>
c00003ed:	e9 fb ff ff ff       	jmp    c00003ed <commonThreadSwitch.firstTime+0x41>

c00003f2 <asmQuickAcquireLock>:
c00003f2:	55                   	push   ebp
c00003f3:	89 e5                	mov    ebp,esp
c00003f5:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003f8 <asmQuickAcquireLock.retry>:
c00003f8:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003fd:	72 02                	jb     c0000401 <asmQuickAcquireLock.spin_with_pause>
c00003ff:	fa                   	cli    
c0000400:	c3                   	ret    

c0000401 <asmQuickAcquireLock.spin_with_pause>:
c0000401:	f3 90                	pause  
c0000403:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000409:	75 f6                	jne    c0000401 <asmQuickAcquireLock.spin_with_pause>
c000040b:	e9 e8 ff ff ff       	jmp    c00003f8 <asmQuickAcquireLock.retry>

c0000410 <asmQuickReleaseLock>:
c0000410:	55                   	push   ebp
c0000411:	89 e5                	mov    ebp,esp
c0000413:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c000041a:	5d                   	pop    ebp
c000041b:	c3                   	ret    

c000041c <asmAcquireLock>:
c000041c:	55                   	push   ebp
c000041d:	89 e5                	mov    ebp,esp
c000041f:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000422 <asmAcquireLock.retry>:
c0000422:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000427:	72 05                	jb     c000042e <asmAcquireLock.spin_with_pause>
c0000429:	9c                   	pushf  
c000042a:	58                   	pop    eax
c000042b:	fa                   	cli    
c000042c:	5d                   	pop    ebp
c000042d:	c3                   	ret    

c000042e <asmAcquireLock.spin_with_pause>:
c000042e:	f3 90                	pause  
c0000430:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000436:	75 f6                	jne    c000042e <asmAcquireLock.spin_with_pause>
c0000438:	e9 e5 ff ff ff       	jmp    c0000422 <asmAcquireLock.retry>

c000043d <asmReleaseLock>:
c000043d:	55                   	push   ebp
c000043e:	89 e5                	mov    ebp,esp
c0000440:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000443:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000446:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000044c:	52                   	push   edx
c000044d:	9d                   	popf   
c000044e:	5d                   	pop    ebp
c000044f:	c3                   	ret    

c0000450 <loadGDT>:
c0000450:	0f 01 15 70 ee 02 c0 	lgdtd  ds:0xc002ee70
c0000457:	66 b8 10 00          	mov    ax,0x10
c000045b:	66 8e d8             	mov    ds,ax
c000045e:	66 8e c0             	mov    es,ax
c0000461:	66 8e e0             	mov    fs,ax
c0000464:	66 8e e8             	mov    gs,ax
c0000467:	66 8e d0             	mov    ss,ax
c000046a:	e9 00 00 00 00       	jmp    c000046f <flush2>

c000046f <flush2>:
c000046f:	c3                   	ret    

c0000470 <isr0>:
c0000470:	fa                   	cli    
c0000471:	68 00 00 00 00       	push   0x0
c0000476:	68 00 00 00 00       	push   0x0
c000047b:	e9 44 01 00 00       	jmp    c00005c4 <int_common_stub>

c0000480 <isr1>:
c0000480:	fa                   	cli    
c0000481:	6a 00                	push   0x0
c0000483:	6a 01                	push   0x1
c0000485:	e9 3a 01 00 00       	jmp    c00005c4 <int_common_stub>

c000048a <isr2>:
c000048a:	fa                   	cli    
c000048b:	6a 00                	push   0x0
c000048d:	6a 02                	push   0x2
c000048f:	e9 30 01 00 00       	jmp    c00005c4 <int_common_stub>

c0000494 <isr3>:
c0000494:	fa                   	cli    
c0000495:	6a 00                	push   0x0
c0000497:	6a 03                	push   0x3
c0000499:	e9 26 01 00 00       	jmp    c00005c4 <int_common_stub>

c000049e <isr4>:
c000049e:	fa                   	cli    
c000049f:	6a 00                	push   0x0
c00004a1:	6a 04                	push   0x4
c00004a3:	e9 1c 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004a8 <isr5>:
c00004a8:	fa                   	cli    
c00004a9:	6a 00                	push   0x0
c00004ab:	6a 05                	push   0x5
c00004ad:	e9 12 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004b2 <isr6>:
c00004b2:	fa                   	cli    
c00004b3:	6a 00                	push   0x0
c00004b5:	6a 06                	push   0x6
c00004b7:	e9 08 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004bc <isr7>:
c00004bc:	fa                   	cli    
c00004bd:	6a 00                	push   0x0
c00004bf:	6a 07                	push   0x7
c00004c1:	e9 fe 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004c6 <isr8>:
c00004c6:	fa                   	cli    
c00004c7:	6a 08                	push   0x8
c00004c9:	e9 f6 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004ce <isr9>:
c00004ce:	fa                   	cli    
c00004cf:	6a 00                	push   0x0
c00004d1:	6a 09                	push   0x9
c00004d3:	e9 ec 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004d8 <isr10>:
c00004d8:	fa                   	cli    
c00004d9:	6a 0a                	push   0xa
c00004db:	e9 e4 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004e0 <isr11>:
c00004e0:	fa                   	cli    
c00004e1:	6a 0b                	push   0xb
c00004e3:	e9 dc 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004e8 <isr12>:
c00004e8:	fa                   	cli    
c00004e9:	6a 0c                	push   0xc
c00004eb:	e9 d4 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004f0 <isr13>:
c00004f0:	fa                   	cli    
c00004f1:	6a 0d                	push   0xd
c00004f3:	e9 cc 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004f8 <isr14>:
c00004f8:	fa                   	cli    
c00004f9:	6a 0e                	push   0xe
c00004fb:	e9 c4 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000500 <isr15>:
c0000500:	fa                   	cli    
c0000501:	6a 00                	push   0x0
c0000503:	6a 0f                	push   0xf
c0000505:	e9 ba 00 00 00       	jmp    c00005c4 <int_common_stub>

c000050a <isr16>:
c000050a:	fa                   	cli    
c000050b:	6a 00                	push   0x0
c000050d:	6a 10                	push   0x10
c000050f:	e9 b0 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000514 <isr17>:
c0000514:	fa                   	cli    
c0000515:	6a 00                	push   0x0
c0000517:	6a 11                	push   0x11
c0000519:	e9 a6 00 00 00       	jmp    c00005c4 <int_common_stub>

c000051e <isr18>:
c000051e:	fa                   	cli    
c000051f:	6a 00                	push   0x0
c0000521:	6a 12                	push   0x12
c0000523:	e9 9c 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000528 <irq3>:
c0000528:	fa                   	cli    
c0000529:	6a 00                	push   0x0
c000052b:	6a 23                	push   0x23
c000052d:	e9 92 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000532 <irq4>:
c0000532:	fa                   	cli    
c0000533:	6a 00                	push   0x0
c0000535:	6a 24                	push   0x24
c0000537:	e9 88 00 00 00       	jmp    c00005c4 <int_common_stub>

c000053c <irq5>:
c000053c:	fa                   	cli    
c000053d:	6a 00                	push   0x0
c000053f:	6a 25                	push   0x25
c0000541:	e9 7e 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000546 <irq6>:
c0000546:	fa                   	cli    
c0000547:	6a 00                	push   0x0
c0000549:	6a 26                	push   0x26
c000054b:	e9 74 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000550 <irq7>:
c0000550:	fa                   	cli    
c0000551:	6a 00                	push   0x0
c0000553:	6a 27                	push   0x27
c0000555:	e9 6a 00 00 00       	jmp    c00005c4 <int_common_stub>

c000055a <irq8>:
c000055a:	fa                   	cli    
c000055b:	6a 00                	push   0x0
c000055d:	6a 28                	push   0x28
c000055f:	e9 60 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000564 <irq9>:
c0000564:	fa                   	cli    
c0000565:	6a 00                	push   0x0
c0000567:	6a 29                	push   0x29
c0000569:	e9 56 00 00 00       	jmp    c00005c4 <int_common_stub>

c000056e <irq10>:
c000056e:	fa                   	cli    
c000056f:	6a 00                	push   0x0
c0000571:	6a 2a                	push   0x2a
c0000573:	e9 4c 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000578 <irq11>:
c0000578:	fa                   	cli    
c0000579:	6a 00                	push   0x0
c000057b:	6a 2b                	push   0x2b
c000057d:	e9 42 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000582 <irq12>:
c0000582:	fa                   	cli    
c0000583:	6a 00                	push   0x0
c0000585:	6a 2c                	push   0x2c
c0000587:	e9 38 00 00 00       	jmp    c00005c4 <int_common_stub>

c000058c <irq13>:
c000058c:	fa                   	cli    
c000058d:	6a 00                	push   0x0
c000058f:	6a 2d                	push   0x2d
c0000591:	e9 2e 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000596 <irq14>:
c0000596:	fa                   	cli    
c0000597:	6a 00                	push   0x0
c0000599:	6a 2e                	push   0x2e
c000059b:	e9 24 00 00 00       	jmp    c00005c4 <int_common_stub>

c00005a0 <irq15>:
c00005a0:	fa                   	cli    
c00005a1:	6a 00                	push   0x0
c00005a3:	6a 2f                	push   0x2f
c00005a5:	e9 1a 00 00 00       	jmp    c00005c4 <int_common_stub>

c00005aa <irq1>:
c00005aa:	fa                   	cli    
c00005ab:	6a 00                	push   0x0
c00005ad:	6a 21                	push   0x21
c00005af:	eb 13                	jmp    c00005c4 <int_common_stub>

c00005b1 <irq2>:
c00005b1:	fa                   	cli    
c00005b2:	6a 00                	push   0x0
c00005b4:	6a 22                	push   0x22
c00005b6:	eb 0c                	jmp    c00005c4 <int_common_stub>

c00005b8 <isr96>:
c00005b8:	6a 00                	push   0x0
c00005ba:	6a 60                	push   0x60
c00005bc:	fb                   	sti    
c00005bd:	eb 05                	jmp    c00005c4 <int_common_stub>

c00005bf <irq0>:
c00005bf:	fa                   	cli    
c00005c0:	6a 00                	push   0x0
c00005c2:	6a 20                	push   0x20

c00005c4 <int_common_stub>:
c00005c4:	60                   	pusha  
c00005c5:	1e                   	push   ds
c00005c6:	06                   	push   es
c00005c7:	0f a0                	push   fs
c00005c9:	0f a8                	push   gs
c00005cb:	66 b8 10 00          	mov    ax,0x10
c00005cf:	66 8e d8             	mov    ds,ax
c00005d2:	66 8e c0             	mov    es,ax
c00005d5:	66 8e e0             	mov    fs,ax
c00005d8:	66 8e e8             	mov    gs,ax
c00005db:	54                   	push   esp
c00005dc:	e8 0e 46 01 00       	call   c0014bef <int_handler>
c00005e1:	81 c4 04 00 00 00    	add    esp,0x4
c00005e7:	0f a9                	pop    gs
c00005e9:	0f a1                	pop    fs
c00005eb:	07                   	pop    es
c00005ec:	1f                   	pop    ds
c00005ed:	61                   	popa   
c00005ee:	81 c4 08 00 00 00    	add    esp,0x8
c00005f4:	cf                   	iret   

c00005f5 <irq16>:
c00005f5:	fa                   	cli    
c00005f6:	6a 00                	push   0x0
c00005f8:	6a 30                	push   0x30
c00005fa:	e9 c5 ff ff ff       	jmp    c00005c4 <int_common_stub>

c00005ff <irq17>:
c00005ff:	fa                   	cli    
c0000600:	6a 00                	push   0x0
c0000602:	6a 31                	push   0x31
c0000604:	e9 bb ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000609 <irq18>:
c0000609:	fa                   	cli    
c000060a:	6a 00                	push   0x0
c000060c:	6a 32                	push   0x32
c000060e:	e9 b1 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000613 <irq19>:
c0000613:	fa                   	cli    
c0000614:	6a 00                	push   0x0
c0000616:	6a 33                	push   0x33
c0000618:	e9 a7 ff ff ff       	jmp    c00005c4 <int_common_stub>

c000061d <irq20>:
c000061d:	fa                   	cli    
c000061e:	6a 00                	push   0x0
c0000620:	6a 34                	push   0x34
c0000622:	e9 9d ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000627 <irq21>:
c0000627:	fa                   	cli    
c0000628:	6a 00                	push   0x0
c000062a:	6a 35                	push   0x35
c000062c:	e9 93 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000631 <irq22>:
c0000631:	fa                   	cli    
c0000632:	6a 00                	push   0x0
c0000634:	6a 36                	push   0x36
c0000636:	e9 89 ff ff ff       	jmp    c00005c4 <int_common_stub>

c000063b <irq23>:
c000063b:	fa                   	cli    
c000063c:	6a 00                	push   0x0
c000063e:	6a 37                	push   0x37
c0000640:	e9 7f ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000645 <hexStrToInt>:
c0000645:	56                   	push   esi
c0000646:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000064a:	31 d2                	xor    edx,edx

c000064c <hexStrToInt.looping>:
c000064c:	ac                   	lods   al,BYTE PTR ds:[esi]
c000064d:	84 c0                	test   al,al
c000064f:	74 0d                	je     c000065e <hexStrToInt.end>
c0000651:	d4 40                	aam    0x40
c0000653:	d5 39                	aad    0x39
c0000655:	2c 30                	sub    al,0x30
c0000657:	c1 e2 04             	shl    edx,0x4
c000065a:	08 c2                	or     dl,al
c000065c:	eb ee                	jmp    c000064c <hexStrToInt.looping>

c000065e <hexStrToInt.end>:
c000065e:	89 d0                	mov    eax,edx
c0000660:	5e                   	pop    esi
c0000661:	c3                   	ret    
c0000662:	66 90                	xchg   ax,ax

c0000664 <memcmp>:
c0000664:	56                   	push   esi
c0000665:	53                   	push   ebx
c0000666:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000066a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000066e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000672:	85 f6                	test   esi,esi
c0000674:	74 1d                	je     c0000693 <memcmp+0x2f>
c0000676:	8a 08                	mov    cl,BYTE PTR [eax]
c0000678:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c000067b:	38 cb                	cmp    bl,cl
c000067d:	75 19                	jne    c0000698 <memcmp+0x34>
c000067f:	01 c6                	add    esi,eax
c0000681:	eb 0a                	jmp    c000068d <memcmp+0x29>
c0000683:	90                   	nop
c0000684:	8a 08                	mov    cl,BYTE PTR [eax]
c0000686:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000689:	38 d9                	cmp    cl,bl
c000068b:	75 0b                	jne    c0000698 <memcmp+0x34>
c000068d:	40                   	inc    eax
c000068e:	42                   	inc    edx
c000068f:	39 f0                	cmp    eax,esi
c0000691:	75 f1                	jne    c0000684 <memcmp+0x20>
c0000693:	31 c0                	xor    eax,eax
c0000695:	5b                   	pop    ebx
c0000696:	5e                   	pop    esi
c0000697:	c3                   	ret    
c0000698:	0f b6 c1             	movzx  eax,cl
c000069b:	29 d8                	sub    eax,ebx
c000069d:	5b                   	pop    ebx
c000069e:	5e                   	pop    esi
c000069f:	c3                   	ret    

c00006a0 <memmove>:
c00006a0:	55                   	push   ebp
c00006a1:	57                   	push   edi
c00006a2:	56                   	push   esi
c00006a3:	53                   	push   ebx
c00006a4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00006a8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00006ac:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00006b0:	39 dd                	cmp    ebp,ebx
c00006b2:	0f 83 80 00 00 00    	jae    c0000738 <memmove+0x98>
c00006b8:	85 d2                	test   edx,edx
c00006ba:	74 74                	je     c0000730 <memmove+0x90>
c00006bc:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00006bf:	8d 75 04             	lea    esi,[ebp+0x4]
c00006c2:	39 cd                	cmp    ebp,ecx
c00006c4:	0f 93 c1             	setae  cl
c00006c7:	39 f3                	cmp    ebx,esi
c00006c9:	0f 93 c0             	setae  al
c00006cc:	89 c6                	mov    esi,eax
c00006ce:	09 ce                	or     esi,ecx
c00006d0:	8d 4a ff             	lea    ecx,[edx-0x1]
c00006d3:	89 f0                	mov    eax,esi
c00006d5:	83 f9 0c             	cmp    ecx,0xc
c00006d8:	0f 97 c1             	seta   cl
c00006db:	84 c8                	test   al,cl
c00006dd:	74 75                	je     c0000754 <memmove+0xb4>
c00006df:	89 e9                	mov    ecx,ebp
c00006e1:	09 d9                	or     ecx,ebx
c00006e3:	83 e1 03             	and    ecx,0x3
c00006e6:	75 6c                	jne    c0000754 <memmove+0xb4>
c00006e8:	89 d7                	mov    edi,edx
c00006ea:	89 d9                	mov    ecx,ebx
c00006ec:	83 e7 fc             	and    edi,0xfffffffc
c00006ef:	89 ee                	mov    esi,ebp
c00006f1:	01 df                	add    edi,ebx
c00006f3:	90                   	nop
c00006f4:	8b 01                	mov    eax,DWORD PTR [ecx]
c00006f6:	83 c6 04             	add    esi,0x4
c00006f9:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c00006fc:	83 c1 04             	add    ecx,0x4
c00006ff:	39 f9                	cmp    ecx,edi
c0000701:	75 f1                	jne    c00006f4 <memmove+0x54>
c0000703:	89 d1                	mov    ecx,edx
c0000705:	89 d7                	mov    edi,edx
c0000707:	83 e1 fc             	and    ecx,0xfffffffc
c000070a:	29 cf                	sub    edi,ecx
c000070c:	01 cb                	add    ebx,ecx
c000070e:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c0000712:	39 ca                	cmp    edx,ecx
c0000714:	74 1a                	je     c0000730 <memmove+0x90>
c0000716:	8a 03                	mov    al,BYTE PTR [ebx]
c0000718:	83 ff 01             	cmp    edi,0x1
c000071b:	88 06                	mov    BYTE PTR [esi],al
c000071d:	74 11                	je     c0000730 <memmove+0x90>
c000071f:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c0000722:	83 ff 02             	cmp    edi,0x2
c0000725:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000728:	74 06                	je     c0000730 <memmove+0x90>
c000072a:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c000072d:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c0000730:	5b                   	pop    ebx
c0000731:	89 e8                	mov    eax,ebp
c0000733:	5e                   	pop    esi
c0000734:	5f                   	pop    edi
c0000735:	5d                   	pop    ebp
c0000736:	c3                   	ret    
c0000737:	90                   	nop
c0000738:	76 f6                	jbe    c0000730 <memmove+0x90>
c000073a:	85 d2                	test   edx,edx
c000073c:	74 f2                	je     c0000730 <memmove+0x90>
c000073e:	4b                   	dec    ebx
c000073f:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0000742:	66 90                	xchg   ax,ax
c0000744:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0000747:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c000074a:	4a                   	dec    edx
c000074b:	75 f7                	jne    c0000744 <memmove+0xa4>
c000074d:	5b                   	pop    ebx
c000074e:	89 e8                	mov    eax,ebp
c0000750:	5e                   	pop    esi
c0000751:	5f                   	pop    edi
c0000752:	5d                   	pop    ebp
c0000753:	c3                   	ret    
c0000754:	01 ea                	add    edx,ebp
c0000756:	89 e9                	mov    ecx,ebp
c0000758:	8a 03                	mov    al,BYTE PTR [ebx]
c000075a:	41                   	inc    ecx
c000075b:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c000075e:	43                   	inc    ebx
c000075f:	39 d1                	cmp    ecx,edx
c0000761:	75 f5                	jne    c0000758 <memmove+0xb8>
c0000763:	eb cb                	jmp    c0000730 <memmove+0x90>
c0000765:	8d 76 00             	lea    esi,[esi+0x0]

c0000768 <memcpy>:
c0000768:	57                   	push   edi
c0000769:	56                   	push   esi
c000076a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000076e:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0000772:	a8 03                	test   al,0x3
c0000774:	74 12                	je     c0000788 <memcpy+0x20>
c0000776:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000077a:	89 c1                	mov    ecx,eax
c000077c:	fc                   	cld    
c000077d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000077f:	29 c7                	sub    edi,eax
c0000781:	5e                   	pop    esi
c0000782:	89 f8                	mov    eax,edi
c0000784:	5f                   	pop    edi
c0000785:	c3                   	ret    
c0000786:	66 90                	xchg   ax,ax
c0000788:	89 c1                	mov    ecx,eax
c000078a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000078e:	c1 e9 02             	shr    ecx,0x2
c0000791:	fc                   	cld    
c0000792:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0000794:	29 c7                	sub    edi,eax
c0000796:	5e                   	pop    esi
c0000797:	89 f8                	mov    eax,edi
c0000799:	5f                   	pop    edi
c000079a:	c3                   	ret    
c000079b:	90                   	nop

c000079c <memset>:
c000079c:	57                   	push   edi
c000079d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00007a1:	85 c9                	test   ecx,ecx
c00007a3:	74 0b                	je     c00007b0 <memset+0x14>
c00007a5:	fc                   	cld    
c00007a6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00007aa:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00007ae:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00007b0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00007b4:	5f                   	pop    edi
c00007b5:	c3                   	ret    
c00007b6:	66 90                	xchg   ax,ax

c00007b8 <strlen>:
c00007b8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00007bc:	31 c0                	xor    eax,eax
c00007be:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c00007c1:	74 09                	je     c00007cc <strlen+0x14>
c00007c3:	90                   	nop
c00007c4:	40                   	inc    eax
c00007c5:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c00007c9:	75 f9                	jne    c00007c4 <strlen+0xc>
c00007cb:	c3                   	ret    
c00007cc:	c3                   	ret    
c00007cd:	8d 76 00             	lea    esi,[esi+0x0]

c00007d0 <strpbrk>:
c00007d0:	57                   	push   edi
c00007d1:	56                   	push   esi
c00007d2:	53                   	push   ebx
c00007d3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007d7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00007db:	8a 1e                	mov    bl,BYTE PTR [esi]
c00007dd:	84 db                	test   bl,bl
c00007df:	74 21                	je     c0000802 <strpbrk+0x32>
c00007e1:	8a 07                	mov    al,BYTE PTR [edi]
c00007e3:	84 c0                	test   al,al
c00007e5:	74 14                	je     c00007fb <strpbrk+0x2b>
c00007e7:	38 d8                	cmp    al,bl
c00007e9:	74 19                	je     c0000804 <strpbrk+0x34>
c00007eb:	89 fa                	mov    edx,edi
c00007ed:	eb 05                	jmp    c00007f4 <strpbrk+0x24>
c00007ef:	90                   	nop
c00007f0:	38 d9                	cmp    cl,bl
c00007f2:	74 10                	je     c0000804 <strpbrk+0x34>
c00007f4:	42                   	inc    edx
c00007f5:	8a 0a                	mov    cl,BYTE PTR [edx]
c00007f7:	84 c9                	test   cl,cl
c00007f9:	75 f5                	jne    c00007f0 <strpbrk+0x20>
c00007fb:	46                   	inc    esi
c00007fc:	8a 1e                	mov    bl,BYTE PTR [esi]
c00007fe:	84 db                	test   bl,bl
c0000800:	75 e1                	jne    c00007e3 <strpbrk+0x13>
c0000802:	31 f6                	xor    esi,esi
c0000804:	89 f0                	mov    eax,esi
c0000806:	5b                   	pop    ebx
c0000807:	5e                   	pop    esi
c0000808:	5f                   	pop    edi
c0000809:	c3                   	ret    
c000080a:	66 90                	xchg   ax,ax

c000080c <strtok>:
c000080c:	56                   	push   esi
c000080d:	53                   	push   ebx
c000080e:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0000812:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000816:	85 db                	test   ebx,ebx
c0000818:	75 07                	jne    c0000821 <strtok+0x15>
c000081a:	eb 2c                	jmp    c0000848 <strtok+0x3c>
c000081c:	43                   	inc    ebx
c000081d:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c0000821:	56                   	push   esi
c0000822:	53                   	push   ebx
c0000823:	e8 a8 ff ff ff       	call   c00007d0 <strpbrk>
c0000828:	5a                   	pop    edx
c0000829:	a3 48 ea 02 c0       	mov    ds:0xc002ea48,eax
c000082e:	59                   	pop    ecx
c000082f:	39 d8                	cmp    eax,ebx
c0000831:	74 e9                	je     c000081c <strtok+0x10>
c0000833:	85 c0                	test   eax,eax
c0000835:	74 1b                	je     c0000852 <strtok+0x46>
c0000837:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000083a:	8d 50 01             	lea    edx,[eax+0x1]
c000083d:	89 d8                	mov    eax,ebx
c000083f:	89 15 48 ea 02 c0    	mov    DWORD PTR ds:0xc002ea48,edx
c0000845:	5b                   	pop    ebx
c0000846:	5e                   	pop    esi
c0000847:	c3                   	ret    
c0000848:	8b 1d 48 ea 02 c0    	mov    ebx,DWORD PTR ds:0xc002ea48
c000084e:	85 db                	test   ebx,ebx
c0000850:	75 cf                	jne    c0000821 <strtok+0x15>
c0000852:	31 c0                	xor    eax,eax
c0000854:	5b                   	pop    ebx
c0000855:	5e                   	pop    esi
c0000856:	c3                   	ret    
c0000857:	90                   	nop

c0000858 <strcpy>:
c0000858:	53                   	push   ebx
c0000859:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000085d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000861:	89 c3                	mov    ebx,eax
c0000863:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000865:	84 d2                	test   dl,dl
c0000867:	74 0d                	je     c0000876 <strcpy+0x1e>
c0000869:	8d 76 00             	lea    esi,[esi+0x0]
c000086c:	88 13                	mov    BYTE PTR [ebx],dl
c000086e:	41                   	inc    ecx
c000086f:	43                   	inc    ebx
c0000870:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000872:	84 d2                	test   dl,dl
c0000874:	75 f6                	jne    c000086c <strcpy+0x14>
c0000876:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000879:	5b                   	pop    ebx
c000087a:	c3                   	ret    
c000087b:	90                   	nop

c000087c <strncpy>:
c000087c:	55                   	push   ebp
c000087d:	57                   	push   edi
c000087e:	56                   	push   esi
c000087f:	53                   	push   ebx
c0000880:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000884:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000888:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000088c:	85 c0                	test   eax,eax
c000088e:	74 39                	je     c00008c9 <strncpy+0x4d>
c0000890:	8a 1e                	mov    bl,BYTE PTR [esi]
c0000892:	8d 48 ff             	lea    ecx,[eax-0x1]
c0000895:	8d 55 01             	lea    edx,[ebp+0x1]
c0000898:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c000089b:	84 db                	test   bl,bl
c000089d:	74 31                	je     c00008d0 <strncpy+0x54>
c000089f:	85 c9                	test   ecx,ecx
c00008a1:	74 26                	je     c00008c9 <strncpy+0x4d>
c00008a3:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c00008a6:	8d 48 fe             	lea    ecx,[eax-0x2]
c00008a9:	8d 55 02             	lea    edx,[ebp+0x2]
c00008ac:	8d 46 02             	lea    eax,[esi+0x2]
c00008af:	88 5d 01             	mov    BYTE PTR [ebp+0x1],bl
c00008b2:	84 db                	test   bl,bl
c00008b4:	75 0f                	jne    c00008c5 <strncpy+0x49>
c00008b6:	eb 18                	jmp    c00008d0 <strncpy+0x54>
c00008b8:	40                   	inc    eax
c00008b9:	42                   	inc    edx
c00008ba:	8a 58 ff             	mov    bl,BYTE PTR [eax-0x1]
c00008bd:	49                   	dec    ecx
c00008be:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00008c1:	84 db                	test   bl,bl
c00008c3:	74 0b                	je     c00008d0 <strncpy+0x54>
c00008c5:	85 c9                	test   ecx,ecx
c00008c7:	75 ef                	jne    c00008b8 <strncpy+0x3c>
c00008c9:	5b                   	pop    ebx
c00008ca:	89 e8                	mov    eax,ebp
c00008cc:	5e                   	pop    esi
c00008cd:	5f                   	pop    edi
c00008ce:	5d                   	pop    ebp
c00008cf:	c3                   	ret    
c00008d0:	85 c9                	test   ecx,ecx
c00008d2:	74 f5                	je     c00008c9 <strncpy+0x4d>
c00008d4:	fc                   	cld    
c00008d5:	31 c0                	xor    eax,eax
c00008d7:	89 d7                	mov    edi,edx
c00008d9:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00008db:	89 e8                	mov    eax,ebp
c00008dd:	5b                   	pop    ebx
c00008de:	5e                   	pop    esi
c00008df:	5f                   	pop    edi
c00008e0:	5d                   	pop    ebp
c00008e1:	c3                   	ret    
c00008e2:	66 90                	xchg   ax,ax

c00008e4 <strcmp>:
c00008e4:	56                   	push   esi
c00008e5:	53                   	push   ebx
c00008e6:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00008ea:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008ee:	8a 16                	mov    dl,BYTE PTR [esi]
c00008f0:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00008f3:	38 d1                	cmp    cl,dl
c00008f5:	75 1d                	jne    c0000914 <strcmp+0x30>
c00008f7:	84 c9                	test   cl,cl
c00008f9:	74 21                	je     c000091c <strcmp+0x38>
c00008fb:	b8 01 00 00 00       	mov    eax,0x1
c0000900:	eb 07                	jmp    c0000909 <strcmp+0x25>
c0000902:	66 90                	xchg   ax,ax
c0000904:	40                   	inc    eax
c0000905:	84 d2                	test   dl,dl
c0000907:	74 13                	je     c000091c <strcmp+0x38>
c0000909:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c000090c:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c0000910:	38 ca                	cmp    dl,cl
c0000912:	74 f0                	je     c0000904 <strcmp+0x20>
c0000914:	0f b6 c2             	movzx  eax,dl
c0000917:	5b                   	pop    ebx
c0000918:	29 c8                	sub    eax,ecx
c000091a:	5e                   	pop    esi
c000091b:	c3                   	ret    
c000091c:	31 c0                	xor    eax,eax
c000091e:	5b                   	pop    ebx
c000091f:	5e                   	pop    esi
c0000920:	c3                   	ret    
c0000921:	8d 76 00             	lea    esi,[esi+0x0]

c0000924 <strchr>:
c0000924:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000928:	8a 10                	mov    dl,BYTE PTR [eax]
c000092a:	84 d2                	test   dl,dl
c000092c:	74 15                	je     c0000943 <strchr+0x1f>
c000092e:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0000932:	38 ca                	cmp    dl,cl
c0000934:	75 06                	jne    c000093c <strchr+0x18>
c0000936:	eb 0e                	jmp    c0000946 <strchr+0x22>
c0000938:	38 ca                	cmp    dl,cl
c000093a:	74 09                	je     c0000945 <strchr+0x21>
c000093c:	40                   	inc    eax
c000093d:	8a 10                	mov    dl,BYTE PTR [eax]
c000093f:	84 d2                	test   dl,dl
c0000941:	75 f5                	jne    c0000938 <strchr+0x14>
c0000943:	31 c0                	xor    eax,eax
c0000945:	c3                   	ret    
c0000946:	c3                   	ret    
c0000947:	90                   	nop

c0000948 <strncmp>:
c0000948:	57                   	push   edi
c0000949:	56                   	push   esi
c000094a:	53                   	push   ebx
c000094b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000094f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000953:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0000957:	85 ff                	test   edi,edi
c0000959:	74 28                	je     c0000983 <strncmp+0x3b>
c000095b:	8a 16                	mov    dl,BYTE PTR [esi]
c000095d:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000960:	38 d1                	cmp    cl,dl
c0000962:	75 28                	jne    c000098c <strncmp+0x44>
c0000964:	8d 46 01             	lea    eax,[esi+0x1]
c0000967:	84 c9                	test   cl,cl
c0000969:	74 18                	je     c0000983 <strncmp+0x3b>
c000096b:	01 fe                	add    esi,edi
c000096d:	eb 0f                	jmp    c000097e <strncmp+0x36>
c000096f:	90                   	nop
c0000970:	8a 10                	mov    dl,BYTE PTR [eax]
c0000972:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000975:	38 ca                	cmp    dl,cl
c0000977:	75 13                	jne    c000098c <strncmp+0x44>
c0000979:	40                   	inc    eax
c000097a:	84 d2                	test   dl,dl
c000097c:	74 05                	je     c0000983 <strncmp+0x3b>
c000097e:	43                   	inc    ebx
c000097f:	39 c6                	cmp    esi,eax
c0000981:	75 ed                	jne    c0000970 <strncmp+0x28>
c0000983:	5b                   	pop    ebx
c0000984:	31 c0                	xor    eax,eax
c0000986:	5e                   	pop    esi
c0000987:	5f                   	pop    edi
c0000988:	c3                   	ret    
c0000989:	8d 76 00             	lea    esi,[esi+0x0]
c000098c:	5b                   	pop    ebx
c000098d:	0f b6 c2             	movzx  eax,dl
c0000990:	5e                   	pop    esi
c0000991:	29 c8                	sub    eax,ecx
c0000993:	5f                   	pop    edi
c0000994:	c3                   	ret    
c0000995:	8d 76 00             	lea    esi,[esi+0x0]

c0000998 <strcat>:
c0000998:	56                   	push   esi
c0000999:	53                   	push   ebx
c000099a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000099e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00009a2:	89 c3                	mov    ebx,eax
c00009a4:	eb 04                	jmp    c00009aa <strcat+0x12>
c00009a6:	66 90                	xchg   ax,ax
c00009a8:	89 d3                	mov    ebx,edx
c00009aa:	8d 53 01             	lea    edx,[ebx+0x1]
c00009ad:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00009b1:	75 f5                	jne    c00009a8 <strcat+0x10>
c00009b3:	31 d2                	xor    edx,edx
c00009b5:	8d 76 00             	lea    esi,[esi+0x0]
c00009b8:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c00009bb:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c00009be:	42                   	inc    edx
c00009bf:	84 c9                	test   cl,cl
c00009c1:	75 f5                	jne    c00009b8 <strcat+0x20>
c00009c3:	5b                   	pop    ebx
c00009c4:	5e                   	pop    esi
c00009c5:	c3                   	ret    
c00009c6:	66 90                	xchg   ax,ax

c00009c8 <strncat>:
c00009c8:	56                   	push   esi
c00009c9:	53                   	push   ebx
c00009ca:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00009ce:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00009d2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00009d6:	85 f6                	test   esi,esi
c00009d8:	74 1e                	je     c00009f8 <strncat+0x30>
c00009da:	89 c2                	mov    edx,eax
c00009dc:	42                   	inc    edx
c00009dd:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00009e1:	75 f9                	jne    c00009dc <strncat+0x14>
c00009e3:	01 ce                	add    esi,ecx
c00009e5:	eb 06                	jmp    c00009ed <strncat+0x25>
c00009e7:	90                   	nop
c00009e8:	39 f1                	cmp    ecx,esi
c00009ea:	74 10                	je     c00009fc <strncat+0x34>
c00009ec:	42                   	inc    edx
c00009ed:	41                   	inc    ecx
c00009ee:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00009f1:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00009f4:	84 db                	test   bl,bl
c00009f6:	75 f0                	jne    c00009e8 <strncat+0x20>
c00009f8:	5b                   	pop    ebx
c00009f9:	5e                   	pop    esi
c00009fa:	c3                   	ret    
c00009fb:	90                   	nop
c00009fc:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00009ff:	5b                   	pop    ebx
c0000a00:	5e                   	pop    esi
c0000a01:	c3                   	ret    
c0000a02:	66 90                	xchg   ax,ax

c0000a04 <strstr>:
c0000a04:	57                   	push   edi
c0000a05:	56                   	push   esi
c0000a06:	53                   	push   ebx
c0000a07:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000a0b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0000a0f:	57                   	push   edi
c0000a10:	e8 a3 fd ff ff       	call   c00007b8 <strlen>
c0000a15:	59                   	pop    ecx
c0000a16:	85 c0                	test   eax,eax
c0000a18:	74 2a                	je     c0000a44 <strstr+0x40>
c0000a1a:	89 c6                	mov    esi,eax
c0000a1c:	eb 12                	jmp    c0000a30 <strstr+0x2c>
c0000a1e:	66 90                	xchg   ax,ax
c0000a20:	56                   	push   esi
c0000a21:	57                   	push   edi
c0000a22:	53                   	push   ebx
c0000a23:	e8 3c fc ff ff       	call   c0000664 <memcmp>
c0000a28:	83 c4 0c             	add    esp,0xc
c0000a2b:	85 c0                	test   eax,eax
c0000a2d:	74 15                	je     c0000a44 <strstr+0x40>
c0000a2f:	43                   	inc    ebx
c0000a30:	53                   	push   ebx
c0000a31:	e8 82 fd ff ff       	call   c00007b8 <strlen>
c0000a36:	5a                   	pop    edx
c0000a37:	39 f0                	cmp    eax,esi
c0000a39:	73 e5                	jae    c0000a20 <strstr+0x1c>
c0000a3b:	5b                   	pop    ebx
c0000a3c:	31 c0                	xor    eax,eax
c0000a3e:	5e                   	pop    esi
c0000a3f:	5f                   	pop    edi
c0000a40:	c3                   	ret    
c0000a41:	8d 76 00             	lea    esi,[esi+0x0]
c0000a44:	89 d8                	mov    eax,ebx
c0000a46:	5b                   	pop    ebx
c0000a47:	5e                   	pop    esi
c0000a48:	5f                   	pop    edi
c0000a49:	c3                   	ret    
c0000a4a:	66 90                	xchg   ax,ax

c0000a4c <toupper>:
c0000a4c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a50:	0f b6 d0             	movzx  edx,al
c0000a53:	f6 82 40 9b 02 c0 02 	test   BYTE PTR [edx-0x3ffd64c0],0x2
c0000a5a:	74 03                	je     c0000a5f <toupper+0x13>
c0000a5c:	83 e8 20             	sub    eax,0x20
c0000a5f:	c3                   	ret    

c0000a60 <tolower>:
c0000a60:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a64:	0f b6 d0             	movzx  edx,al
c0000a67:	f6 82 40 9b 02 c0 01 	test   BYTE PTR [edx-0x3ffd64c0],0x1
c0000a6e:	74 03                	je     c0000a73 <tolower+0x13>
c0000a70:	83 c0 20             	add    eax,0x20
c0000a73:	c3                   	ret    

c0000a74 <simple_strtoul>:
c0000a74:	55                   	push   ebp
c0000a75:	57                   	push   edi
c0000a76:	56                   	push   esi
c0000a77:	53                   	push   ebx
c0000a78:	83 ec 08             	sub    esp,0x8
c0000a7b:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000a7f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000a83:	90                   	nop
c0000a84:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0000a87:	f6 82 40 9b 02 c0 08 	test   BYTE PTR [edx-0x3ffd64c0],0x8
c0000a8e:	75 05                	jne    c0000a95 <simple_strtoul+0x21>
c0000a90:	80 fa 09             	cmp    dl,0x9
c0000a93:	75 03                	jne    c0000a98 <simple_strtoul+0x24>
c0000a95:	41                   	inc    ecx
c0000a96:	eb ec                	jmp    c0000a84 <simple_strtoul+0x10>
c0000a98:	80 fa 2d             	cmp    dl,0x2d
c0000a9b:	0f 84 1b 01 00 00    	je     c0000bbc <simple_strtoul+0x148>
c0000aa1:	80 fa 2b             	cmp    dl,0x2b
c0000aa4:	0f 84 c2 00 00 00    	je     c0000b6c <simple_strtoul+0xf8>
c0000aaa:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000ab2:	85 f6                	test   esi,esi
c0000ab4:	0f 85 c3 00 00 00    	jne    c0000b7d <simple_strtoul+0x109>
c0000aba:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000abc:	80 fa 30             	cmp    dl,0x30
c0000abf:	0f 84 47 01 00 00    	je     c0000c0c <simple_strtoul+0x198>
c0000ac5:	be 0a 00 00 00       	mov    esi,0xa
c0000aca:	84 d2                	test   dl,dl
c0000acc:	0f 84 6f 01 00 00    	je     c0000c41 <simple_strtoul+0x1cd>
c0000ad2:	31 ed                	xor    ebp,ebp
c0000ad4:	31 ff                	xor    edi,edi
c0000ad6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000add:	eb 2b                	jmp    c0000b0a <simple_strtoul+0x96>
c0000adf:	90                   	nop
c0000ae0:	83 eb 30             	sub    ebx,0x30
c0000ae3:	39 f3                	cmp    ebx,esi
c0000ae5:	73 4d                	jae    c0000b34 <simple_strtoul+0xc0>
c0000ae7:	31 d2                	xor    edx,edx
c0000ae9:	89 d8                	mov    eax,ebx
c0000aeb:	f7 d0                	not    eax
c0000aed:	f7 f6                	div    esi
c0000aef:	39 f8                	cmp    eax,edi
c0000af1:	0f 82 b1 00 00 00    	jb     c0000ba8 <simple_strtoul+0x134>
c0000af7:	0f af fe             	imul   edi,esi
c0000afa:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000b01:	01 df                	add    edi,ebx
c0000b03:	41                   	inc    ecx
c0000b04:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000b06:	84 d2                	test   dl,dl
c0000b08:	74 2a                	je     c0000b34 <simple_strtoul+0xc0>
c0000b0a:	0f b6 da             	movzx  ebx,dl
c0000b0d:	f6 83 40 9b 02 c0 04 	test   BYTE PTR [ebx-0x3ffd64c0],0x4
c0000b14:	75 ca                	jne    c0000ae0 <simple_strtoul+0x6c>
c0000b16:	0f be d2             	movsx  edx,dl
c0000b19:	52                   	push   edx
c0000b1a:	e8 2d ff ff ff       	call   c0000a4c <toupper>
c0000b1f:	5b                   	pop    ebx
c0000b20:	0f b6 d0             	movzx  edx,al
c0000b23:	f6 82 40 9b 02 c0 01 	test   BYTE PTR [edx-0x3ffd64c0],0x1
c0000b2a:	74 08                	je     c0000b34 <simple_strtoul+0xc0>
c0000b2c:	8d 58 c9             	lea    ebx,[eax-0x37]
c0000b2f:	39 f3                	cmp    ebx,esi
c0000b31:	72 b4                	jb     c0000ae7 <simple_strtoul+0x73>
c0000b33:	90                   	nop
c0000b34:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b38:	85 c0                	test   eax,eax
c0000b3a:	74 14                	je     c0000b50 <simple_strtoul+0xdc>
c0000b3c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000b3f:	09 f8                	or     eax,edi
c0000b41:	75 71                	jne    c0000bb4 <simple_strtoul+0x140>
c0000b43:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b47:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000b4b:	31 ff                	xor    edi,edi
c0000b4d:	89 30                	mov    DWORD PTR [eax],esi
c0000b4f:	90                   	nop
c0000b50:	4d                   	dec    ebp
c0000b51:	75 05                	jne    c0000b58 <simple_strtoul+0xe4>
c0000b53:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000b58:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000b5d:	75 02                	jne    c0000b61 <simple_strtoul+0xed>
c0000b5f:	f7 df                	neg    edi
c0000b61:	83 c4 08             	add    esp,0x8
c0000b64:	89 f8                	mov    eax,edi
c0000b66:	5b                   	pop    ebx
c0000b67:	5e                   	pop    esi
c0000b68:	5f                   	pop    edi
c0000b69:	5d                   	pop    ebp
c0000b6a:	c3                   	ret    
c0000b6b:	90                   	nop
c0000b6c:	41                   	inc    ecx
c0000b6d:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000b75:	85 f6                	test   esi,esi
c0000b77:	0f 84 3d ff ff ff    	je     c0000aba <simple_strtoul+0x46>
c0000b7d:	8d 46 fe             	lea    eax,[esi-0x2]
c0000b80:	83 f8 22             	cmp    eax,0x22
c0000b83:	77 6a                	ja     c0000bef <simple_strtoul+0x17b>
c0000b85:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000b87:	83 fe 08             	cmp    esi,0x8
c0000b8a:	0f 84 a2 00 00 00    	je     c0000c32 <simple_strtoul+0x1be>
c0000b90:	83 fe 10             	cmp    esi,0x10
c0000b93:	0f 85 31 ff ff ff    	jne    c0000aca <simple_strtoul+0x56>
c0000b99:	80 fa 30             	cmp    dl,0x30
c0000b9c:	74 2c                	je     c0000bca <simple_strtoul+0x156>
c0000b9e:	be 10 00 00 00       	mov    esi,0x10
c0000ba3:	e9 22 ff ff ff       	jmp    c0000aca <simple_strtoul+0x56>
c0000ba8:	bd 01 00 00 00       	mov    ebp,0x1
c0000bad:	31 ff                	xor    edi,edi
c0000baf:	e9 4f ff ff ff       	jmp    c0000b03 <simple_strtoul+0x8f>
c0000bb4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000bb8:	89 08                	mov    DWORD PTR [eax],ecx
c0000bba:	eb 94                	jmp    c0000b50 <simple_strtoul+0xdc>
c0000bbc:	41                   	inc    ecx
c0000bbd:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000bc5:	e9 e8 fe ff ff       	jmp    c0000ab2 <simple_strtoul+0x3e>
c0000bca:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000bce:	88 04 24             	mov    BYTE PTR [esp],al
c0000bd1:	50                   	push   eax
c0000bd2:	e8 89 fe ff ff       	call   c0000a60 <tolower>
c0000bd7:	5e                   	pop    esi
c0000bd8:	83 f8 78             	cmp    eax,0x78
c0000bdb:	0f 84 84 00 00 00    	je     c0000c65 <simple_strtoul+0x1f1>
c0000be1:	41                   	inc    ecx
c0000be2:	be 10 00 00 00       	mov    esi,0x10
c0000be7:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000bea:	e9 db fe ff ff       	jmp    c0000aca <simple_strtoul+0x56>
c0000bef:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000bf3:	85 ff                	test   edi,edi
c0000bf5:	74 5c                	je     c0000c53 <simple_strtoul+0x1df>
c0000bf7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000bfb:	85 c9                	test   ecx,ecx
c0000bfd:	75 4e                	jne    c0000c4d <simple_strtoul+0x1d9>
c0000bff:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000c05:	31 ff                	xor    edi,edi
c0000c07:	e9 4c ff ff ff       	jmp    c0000b58 <simple_strtoul+0xe4>
c0000c0c:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000c10:	88 04 24             	mov    BYTE PTR [esp],al
c0000c13:	50                   	push   eax
c0000c14:	e8 47 fe ff ff       	call   c0000a60 <tolower>
c0000c19:	5d                   	pop    ebp
c0000c1a:	83 f8 78             	cmp    eax,0x78
c0000c1d:	74 3b                	je     c0000c5a <simple_strtoul+0x1e6>
c0000c1f:	41                   	inc    ecx
c0000c20:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000c23:	80 fa 30             	cmp    dl,0x30
c0000c26:	74 13                	je     c0000c3b <simple_strtoul+0x1c7>
c0000c28:	be 08 00 00 00       	mov    esi,0x8
c0000c2d:	e9 98 fe ff ff       	jmp    c0000aca <simple_strtoul+0x56>
c0000c32:	80 fa 30             	cmp    dl,0x30
c0000c35:	0f 85 8f fe ff ff    	jne    c0000aca <simple_strtoul+0x56>
c0000c3b:	8a 51 01             	mov    dl,BYTE PTR [ecx+0x1]
c0000c3e:	41                   	inc    ecx
c0000c3f:	eb e7                	jmp    c0000c28 <simple_strtoul+0x1b4>
c0000c41:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000c45:	85 d2                	test   edx,edx
c0000c47:	74 0a                	je     c0000c53 <simple_strtoul+0x1df>
c0000c49:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000c4d:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000c51:	89 30                	mov    DWORD PTR [eax],esi
c0000c53:	31 ff                	xor    edi,edi
c0000c55:	e9 fe fe ff ff       	jmp    c0000b58 <simple_strtoul+0xe4>
c0000c5a:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c5d:	83 c1 02             	add    ecx,0x2
c0000c60:	e9 34 ff ff ff       	jmp    c0000b99 <simple_strtoul+0x125>
c0000c65:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c68:	be 10 00 00 00       	mov    esi,0x10
c0000c6d:	83 c1 02             	add    ecx,0x2
c0000c70:	e9 55 fe ff ff       	jmp    c0000aca <simple_strtoul+0x56>

c0000c75 <largebin_index>:
c0000c75:	89 c2                	mov    edx,eax
c0000c77:	c1 ea 08             	shr    edx,0x8
c0000c7a:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000c80:	77 10                	ja     c0000c92 <largebin_index+0x1d>
c0000c82:	0f bd d2             	bsr    edx,edx
c0000c85:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000c88:	d3 e8                	shr    eax,cl
c0000c8a:	83 e0 03             	and    eax,0x3
c0000c8d:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c91:	c3                   	ret    
c0000c92:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c97:	c3                   	ret    

c0000c98 <malloc_init_state>:
c0000c98:	53                   	push   ebx
c0000c99:	8d 50 34             	lea    edx,[eax+0x34]
c0000c9c:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000ca2:	89 d1                	mov    ecx,edx
c0000ca4:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000ca7:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000caa:	83 c2 08             	add    edx,0x8
c0000cad:	39 da                	cmp    edx,ebx
c0000caf:	75 f3                	jne    c0000ca4 <malloc_init_state+0xc>
c0000cb1:	8b 10                	mov    edx,DWORD PTR [eax]
c0000cb3:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000cbd:	83 e2 03             	and    edx,0x3
c0000cc0:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000cca:	83 ca 48             	or     edx,0x48
c0000ccd:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000cd7:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000ce1:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000ce8:	89 10                	mov    DWORD PTR [eax],edx
c0000cea:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000ced:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000cf7:	5b                   	pop    ebx
c0000cf8:	c3                   	ret    

c0000cf9 <malloc_consolidate>:
c0000cf9:	8b 10                	mov    edx,DWORD PTR [eax]
c0000cfb:	85 d2                	test   edx,edx
c0000cfd:	0f 84 d8 00 00 00    	je     c0000ddb <malloc_consolidate+0xe2>
c0000d03:	55                   	push   ebp
c0000d04:	83 e2 fd             	and    edx,0xfffffffd
c0000d07:	57                   	push   edi
c0000d08:	89 c5                	mov    ebp,eax
c0000d0a:	56                   	push   esi
c0000d0b:	8d 78 34             	lea    edi,[eax+0x34]
c0000d0e:	53                   	push   ebx
c0000d0f:	83 ec 10             	sub    esp,0x10
c0000d12:	89 10                	mov    DWORD PTR [eax],edx
c0000d14:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000d18:	c1 ea 03             	shr    edx,0x3
c0000d1b:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000d1f:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000d23:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000d26:	85 d2                	test   edx,edx
c0000d28:	0f 84 98 00 00 00    	je     c0000dc6 <malloc_consolidate+0xcd>
c0000d2e:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000d35:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000d38:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000d3b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000d3f:	89 f9                	mov    ecx,edi
c0000d41:	83 e1 fe             	and    ecx,0xfffffffe
c0000d44:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000d47:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000d4a:	83 e3 fc             	and    ebx,0xfffffffc
c0000d4d:	83 e7 01             	and    edi,0x1
c0000d50:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000d53:	75 14                	jne    c0000d69 <malloc_consolidate+0x70>
c0000d55:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000d57:	29 fa                	sub    edx,edi
c0000d59:	01 f9                	add    ecx,edi
c0000d5b:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d5e:	89 fb                	mov    ebx,edi
c0000d60:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000d63:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000d66:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000d69:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000d6c:	74 40                	je     c0000dae <malloc_consolidate+0xb5>
c0000d6e:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000d71:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000d74:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000d78:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000d7b:	83 e7 01             	and    edi,0x1
c0000d7e:	75 0e                	jne    c0000d8e <malloc_consolidate+0x95>
c0000d80:	01 d9                	add    ecx,ebx
c0000d82:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000d85:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000d88:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000d8b:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d8e:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d91:	89 ce                	mov    esi,ecx
c0000d93:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d96:	83 ce 01             	or     esi,0x1
c0000d99:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d9c:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d9f:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000da2:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000da6:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000da9:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000dac:	eb 0c                	jmp    c0000dba <malloc_consolidate+0xc1>
c0000dae:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000db1:	83 c9 01             	or     ecx,0x1
c0000db4:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000db7:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000dba:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000dbe:	85 d2                	test   edx,edx
c0000dc0:	0f 85 6f ff ff ff    	jne    c0000d35 <malloc_consolidate+0x3c>
c0000dc6:	83 c5 04             	add    ebp,0x4
c0000dc9:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000dcd:	0f 85 50 ff ff ff    	jne    c0000d23 <malloc_consolidate+0x2a>
c0000dd3:	83 c4 10             	add    esp,0x10
c0000dd6:	5b                   	pop    ebx
c0000dd7:	5e                   	pop    esi
c0000dd8:	5f                   	pop    edi
c0000dd9:	5d                   	pop    ebp
c0000dda:	c3                   	ret    
c0000ddb:	e9 b8 fe ff ff       	jmp    c0000c98 <malloc_init_state>

c0000de0 <dlfree>:
c0000de0:	57                   	push   edi
c0000de1:	56                   	push   esi
c0000de2:	53                   	push   ebx
c0000de3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000de7:	85 db                	test   ebx,ebx
c0000de9:	0f 84 e2 00 00 00    	je     c0000ed1 <dlfree+0xf1>
c0000def:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000df2:	8b 0d 60 ea 02 c0    	mov    ecx,DWORD PTR ds:0xc002ea60
c0000df8:	89 f0                	mov    eax,esi
c0000dfa:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000dfd:	83 e0 fc             	and    eax,0xfffffffc
c0000e00:	39 c1                	cmp    ecx,eax
c0000e02:	72 24                	jb     c0000e28 <dlfree+0x48>
c0000e04:	83 c9 03             	or     ecx,0x3
c0000e07:	c1 e8 03             	shr    eax,0x3
c0000e0a:	89 0d 60 ea 02 c0    	mov    DWORD PTR ds:0xc002ea60,ecx
c0000e10:	83 e8 02             	sub    eax,0x2
c0000e13:	8b 0c 85 64 ea 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd159c]
c0000e1a:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000e1c:	89 14 85 64 ea 02 c0 	mov    DWORD PTR [eax*4-0x3ffd159c],edx
c0000e23:	e9 a9 00 00 00       	jmp    c0000ed1 <dlfree+0xf1>
c0000e28:	83 e6 02             	and    esi,0x2
c0000e2b:	0f 85 a0 00 00 00    	jne    c0000ed1 <dlfree+0xf1>
c0000e31:	83 c9 01             	or     ecx,0x1
c0000e34:	8d 34 02             	lea    esi,[edx+eax*1]
c0000e37:	89 0d 60 ea 02 c0    	mov    DWORD PTR ds:0xc002ea60,ecx
c0000e3d:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000e40:	83 e1 fc             	and    ecx,0xfffffffc
c0000e43:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000e47:	75 13                	jne    c0000e5c <dlfree+0x7c>
c0000e49:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000e4c:	29 da                	sub    edx,ebx
c0000e4e:	01 d8                	add    eax,ebx
c0000e50:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000e53:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000e56:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e59:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e5c:	39 35 8c ea 02 c0    	cmp    DWORD PTR ds:0xc002ea8c,esi
c0000e62:	74 40                	je     c0000ea4 <dlfree+0xc4>
c0000e64:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000e68:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000e6b:	80 e3 01             	and    bl,0x1
c0000e6e:	75 0e                	jne    c0000e7e <dlfree+0x9e>
c0000e70:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000e73:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000e76:	01 c8                	add    eax,ecx
c0000e78:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e7b:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e7e:	8b 0d 9c ea 02 c0    	mov    ecx,DWORD PTR ds:0xc002ea9c
c0000e84:	c7 42 0c 94 ea 02 c0 	mov    DWORD PTR [edx+0xc],0xc002ea94
c0000e8b:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e8e:	89 15 9c ea 02 c0    	mov    DWORD PTR ds:0xc002ea9c,edx
c0000e94:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e97:	89 c1                	mov    ecx,eax
c0000e99:	83 c9 01             	or     ecx,0x1
c0000e9c:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e9f:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000ea2:	eb 10                	jmp    c0000eb4 <dlfree+0xd4>
c0000ea4:	01 c8                	add    eax,ecx
c0000ea6:	89 c1                	mov    ecx,eax
c0000ea8:	83 c9 01             	or     ecx,0x1
c0000eab:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000eae:	89 15 8c ea 02 c0    	mov    DWORD PTR ds:0xc002ea8c,edx
c0000eb4:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000eb9:	76 16                	jbe    c0000ed1 <dlfree+0xf1>
c0000ebb:	f6 05 60 ea 02 c0 02 	test   BYTE PTR ds:0xc002ea60,0x2
c0000ec2:	74 0d                	je     c0000ed1 <dlfree+0xf1>
c0000ec4:	5b                   	pop    ebx
c0000ec5:	b8 60 ea 02 c0       	mov    eax,0xc002ea60
c0000eca:	5e                   	pop    esi
c0000ecb:	5f                   	pop    edi
c0000ecc:	e9 28 fe ff ff       	jmp    c0000cf9 <malloc_consolidate>
c0000ed1:	5b                   	pop    ebx
c0000ed2:	5e                   	pop    esi
c0000ed3:	5f                   	pop    edi
c0000ed4:	c3                   	ret    

c0000ed5 <sYSMALLOc>:
c0000ed5:	55                   	push   ebp
c0000ed6:	57                   	push   edi
c0000ed7:	56                   	push   esi
c0000ed8:	53                   	push   ebx
c0000ed9:	89 d3                	mov    ebx,edx
c0000edb:	83 ec 2c             	sub    esp,0x2c
c0000ede:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000ee2:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000ee8:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000eeb:	8d 42 ff             	lea    eax,[edx-0x1]
c0000eee:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000ef2:	74 1f                	je     c0000f13 <sYSMALLOc+0x3e>
c0000ef4:	89 d8                	mov    eax,ebx
c0000ef6:	e8 fe fd ff ff       	call   c0000cf9 <malloc_consolidate>
c0000efb:	83 ec 0c             	sub    esp,0xc
c0000efe:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000f02:	83 e8 07             	sub    eax,0x7
c0000f05:	50                   	push   eax
c0000f06:	e8 30 02 00 00       	call   c000113b <dlmalloc>
c0000f0b:	83 c4 10             	add    esp,0x10
c0000f0e:	e9 20 02 00 00       	jmp    c0001133 <sYSMALLOc+0x25e>
c0000f13:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000f16:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000f1c:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000f1f:	83 e0 fc             	and    eax,0xfffffffc
c0000f22:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000f26:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000f2a:	83 c0 10             	add    eax,0x10
c0000f2d:	01 c1                	add    ecx,eax
c0000f2f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000f33:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000f3a:	74 04                	je     c0000f40 <sYSMALLOc+0x6b>
c0000f3c:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000f40:	f7 da                	neg    edx
c0000f42:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000f46:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000f4a:	21 d1                	and    ecx,edx
c0000f4c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000f50:	7f 07                	jg     c0000f59 <sYSMALLOc+0x84>
c0000f52:	31 c0                	xor    eax,eax
c0000f54:	e9 da 01 00 00       	jmp    c0001133 <sYSMALLOc+0x25e>
c0000f59:	83 ec 0c             	sub    esp,0xc
c0000f5c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000f60:	e8 22 e8 00 00       	call   c000f787 <sbrk>
c0000f65:	83 c4 10             	add    esp,0x10
c0000f68:	89 c6                	mov    esi,eax
c0000f6a:	83 f8 ff             	cmp    eax,0xffffffff
c0000f6d:	74 e3                	je     c0000f52 <sYSMALLOc+0x7d>
c0000f6f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f73:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000f77:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000f7a:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000f80:	39 f1                	cmp    ecx,esi
c0000f82:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000f88:	75 13                	jne    c0000f9d <sYSMALLOc+0xc8>
c0000f8a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f8e:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000f92:	83 c8 01             	or     eax,0x1
c0000f95:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f98:	e9 3e 01 00 00       	jmp    c00010db <sYSMALLOc+0x206>
c0000f9d:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000fa3:	88 d0                	mov    al,dl
c0000fa5:	83 e0 01             	and    eax,0x1
c0000fa8:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000fad:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000fb1:	0f 95 c0             	setne  al
c0000fb4:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000fb8:	39 f1                	cmp    ecx,esi
c0000fba:	76 12                	jbe    c0000fce <sYSMALLOc+0xf9>
c0000fbc:	84 c0                	test   al,al
c0000fbe:	74 0e                	je     c0000fce <sYSMALLOc+0xf9>
c0000fc0:	83 e2 fe             	and    edx,0xfffffffe
c0000fc3:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000fc9:	e9 83 00 00 00       	jmp    c0001051 <sYSMALLOc+0x17c>
c0000fce:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000fd3:	74 7c                	je     c0001051 <sYSMALLOc+0x17c>
c0000fd5:	84 c0                	test   al,al
c0000fd7:	74 0c                	je     c0000fe5 <sYSMALLOc+0x110>
c0000fd9:	89 f0                	mov    eax,esi
c0000fdb:	29 c8                	sub    eax,ecx
c0000fdd:	01 e8                	add    eax,ebp
c0000fdf:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000fe5:	89 f2                	mov    edx,esi
c0000fe7:	83 e2 07             	and    edx,0x7
c0000fea:	74 0c                	je     c0000ff8 <sYSMALLOc+0x123>
c0000fec:	b8 08 00 00 00       	mov    eax,0x8
c0000ff1:	29 d0                	sub    eax,edx
c0000ff3:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000ff6:	eb 04                	jmp    c0000ffc <sYSMALLOc+0x127>
c0000ff8:	89 f5                	mov    ebp,esi
c0000ffa:	31 c0                	xor    eax,eax
c0000ffc:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0001000:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001004:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0001008:	01 c1                	add    ecx,eax
c000100a:	83 ec 0c             	sub    esp,0xc
c000100d:	01 f1                	add    ecx,esi
c000100f:	01 ca                	add    edx,ecx
c0001011:	29 c8                	sub    eax,ecx
c0001013:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0001017:	01 c2                	add    edx,eax
c0001019:	52                   	push   edx
c000101a:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000101e:	e8 64 e7 00 00       	call   c000f787 <sbrk>
c0001023:	83 c4 10             	add    esp,0x10
c0001026:	83 f8 ff             	cmp    eax,0xffffffff
c0001029:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000102d:	75 0f                	jne    c000103e <sYSMALLOc+0x169>
c000102f:	83 ec 0c             	sub    esp,0xc
c0001032:	6a 00                	push   0x0
c0001034:	e8 4e e7 00 00       	call   c000f787 <sbrk>
c0001039:	83 c4 10             	add    esp,0x10
c000103c:	eb 30                	jmp    c000106e <sYSMALLOc+0x199>
c000103e:	39 c6                	cmp    esi,eax
c0001040:	76 33                	jbe    c0001075 <sYSMALLOc+0x1a0>
c0001042:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0001046:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c000104d:	01 f0                	add    eax,esi
c000104f:	eb 1d                	jmp    c000106e <sYSMALLOc+0x199>
c0001051:	83 ec 0c             	sub    esp,0xc
c0001054:	89 f5                	mov    ebp,esi
c0001056:	6a 00                	push   0x0
c0001058:	e8 2a e7 00 00       	call   c000f787 <sbrk>
c000105d:	89 c2                	mov    edx,eax
c000105f:	29 f2                	sub    edx,esi
c0001061:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0001065:	83 c4 10             	add    esp,0x10
c0001068:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c000106e:	31 d2                	xor    edx,edx
c0001070:	83 f8 ff             	cmp    eax,0xffffffff
c0001073:	74 66                	je     c00010db <sYSMALLOc+0x206>
c0001075:	29 e8                	sub    eax,ebp
c0001077:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c000107a:	01 d0                	add    eax,edx
c000107c:	83 c8 01             	or     eax,0x1
c000107f:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0001082:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0001088:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c000108d:	74 4c                	je     c00010db <sYSMALLOc+0x206>
c000108f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001093:	83 e8 0c             	sub    eax,0xc
c0001096:	83 e0 f8             	and    eax,0xfffffff8
c0001099:	89 c2                	mov    edx,eax
c000109b:	83 ca 01             	or     edx,0x1
c000109e:	83 f8 0f             	cmp    eax,0xf
c00010a1:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c00010a4:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c00010ac:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c00010b4:	76 25                	jbe    c00010db <sYSMALLOc+0x206>
c00010b6:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c00010bc:	83 ec 0c             	sub    esp,0xc
c00010bf:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c00010c9:	83 c7 08             	add    edi,0x8
c00010cc:	57                   	push   edi
c00010cd:	e8 0e fd ff ff       	call   c0000de0 <dlfree>
c00010d2:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c00010d8:	83 c4 10             	add    esp,0x10
c00010db:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c00010e1:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c00010e7:	73 06                	jae    c00010ef <sYSMALLOc+0x21a>
c00010e9:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c00010ef:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c00010f5:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c00010fb:	73 06                	jae    c0001103 <sYSMALLOc+0x22e>
c00010fd:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0001103:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0001106:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001109:	83 e2 fc             	and    edx,0xfffffffc
c000110c:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0001110:	0f 82 3c fe ff ff    	jb     c0000f52 <sYSMALLOc+0x7d>
c0001116:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000111a:	8d 0c 38             	lea    ecx,[eax+edi*1]
c000111d:	29 fa                	sub    edx,edi
c000111f:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0001122:	83 ca 01             	or     edx,0x1
c0001125:	89 fb                	mov    ebx,edi
c0001127:	83 c0 08             	add    eax,0x8
c000112a:	83 cb 01             	or     ebx,0x1
c000112d:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0001130:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001133:	83 c4 2c             	add    esp,0x2c
c0001136:	5b                   	pop    ebx
c0001137:	5e                   	pop    esi
c0001138:	5f                   	pop    edi
c0001139:	5d                   	pop    ebp
c000113a:	c3                   	ret    

c000113b <dlmalloc>:
c000113b:	55                   	push   ebp
c000113c:	57                   	push   edi
c000113d:	56                   	push   esi
c000113e:	53                   	push   ebx
c000113f:	83 ec 1c             	sub    esp,0x1c
c0001142:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001146:	83 f8 df             	cmp    eax,0xffffffdf
c0001149:	0f 87 70 03 00 00    	ja     c00014bf <dlmalloc+0x384>
c000114f:	83 c0 0b             	add    eax,0xb
c0001152:	be 10 00 00 00       	mov    esi,0x10
c0001157:	83 f8 0f             	cmp    eax,0xf
c000115a:	76 05                	jbe    c0001161 <dlmalloc+0x26>
c000115c:	83 e0 f8             	and    eax,0xfffffff8
c000115f:	89 c6                	mov    esi,eax
c0001161:	8b 3d 60 ea 02 c0    	mov    edi,DWORD PTR ds:0xc002ea60
c0001167:	f7 c7 01 00 00 00    	test   edi,0x1
c000116d:	75 17                	jne    c0001186 <dlmalloc+0x4b>
c000116f:	85 ff                	test   edi,edi
c0001171:	0f 85 05 03 00 00    	jne    c000147c <dlmalloc+0x341>
c0001177:	b8 60 ea 02 c0       	mov    eax,0xc002ea60
c000117c:	e8 78 fb ff ff       	call   c0000cf9 <malloc_consolidate>
c0001181:	e9 f6 02 00 00       	jmp    c000147c <dlmalloc+0x341>
c0001186:	39 f7                	cmp    edi,esi
c0001188:	72 1f                	jb     c00011a9 <dlmalloc+0x6e>
c000118a:	89 f2                	mov    edx,esi
c000118c:	c1 ea 03             	shr    edx,0x3
c000118f:	83 ea 02             	sub    edx,0x2
c0001192:	8b 04 95 64 ea 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd159c]
c0001199:	85 c0                	test   eax,eax
c000119b:	74 0c                	je     c00011a9 <dlmalloc+0x6e>
c000119d:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c00011a0:	89 0c 95 64 ea 02 c0 	mov    DWORD PTR [edx*4-0x3ffd159c],ecx
c00011a7:	eb 30                	jmp    c00011d9 <dlmalloc+0x9e>
c00011a9:	89 f0                	mov    eax,esi
c00011ab:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011b1:	77 2e                	ja     c00011e1 <dlmalloc+0xa6>
c00011b3:	c1 e8 03             	shr    eax,0x3
c00011b6:	8d 14 c5 94 ea 02 c0 	lea    edx,[eax*8-0x3ffd156c]
c00011bd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00011c1:	8d 5a f8             	lea    ebx,[edx-0x8]
c00011c4:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00011c7:	39 c3                	cmp    ebx,eax
c00011c9:	74 2e                	je     c00011f9 <dlmalloc+0xbe>
c00011cb:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00011ce:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c00011d3:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c00011d6:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c00011d9:	83 c0 08             	add    eax,0x8
c00011dc:	e9 e0 02 00 00       	jmp    c00014c1 <dlmalloc+0x386>
c00011e1:	e8 8f fa ff ff       	call   c0000c75 <largebin_index>
c00011e6:	83 e7 02             	and    edi,0x2
c00011e9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00011ed:	74 0a                	je     c00011f9 <dlmalloc+0xbe>
c00011ef:	b8 60 ea 02 c0       	mov    eax,0xc002ea60
c00011f4:	e8 00 fb ff ff       	call   c0000cf9 <malloc_consolidate>
c00011f9:	8d 46 10             	lea    eax,[esi+0x10]
c00011fc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001200:	8b 1d a0 ea 02 c0    	mov    ebx,DWORD PTR ds:0xc002eaa0
c0001206:	81 fb 94 ea 02 c0    	cmp    ebx,0xc002ea94
c000120c:	0f 84 13 01 00 00    	je     c0001325 <dlmalloc+0x1ea>
c0001212:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0001215:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0001218:	83 e7 fc             	and    edi,0xfffffffc
c000121b:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001221:	77 4c                	ja     c000126f <dlmalloc+0x134>
c0001223:	3d 94 ea 02 c0       	cmp    eax,0xc002ea94
c0001228:	75 45                	jne    c000126f <dlmalloc+0x134>
c000122a:	39 1d 90 ea 02 c0    	cmp    DWORD PTR ds:0xc002ea90,ebx
c0001230:	75 3d                	jne    c000126f <dlmalloc+0x134>
c0001232:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0001236:	73 37                	jae    c000126f <dlmalloc+0x134>
c0001238:	8d 04 33             	lea    eax,[ebx+esi*1]
c000123b:	89 fa                	mov    edx,edi
c000123d:	a3 9c ea 02 c0       	mov    ds:0xc002ea9c,eax
c0001242:	a3 a0 ea 02 c0       	mov    ds:0xc002eaa0,eax
c0001247:	a3 90 ea 02 c0       	mov    ds:0xc002ea90,eax
c000124c:	29 f2                	sub    edx,esi
c000124e:	c7 40 08 94 ea 02 c0 	mov    DWORD PTR [eax+0x8],0xc002ea94
c0001255:	c7 40 0c 94 ea 02 c0 	mov    DWORD PTR [eax+0xc],0xc002ea94
c000125c:	83 ce 01             	or     esi,0x1
c000125f:	89 d1                	mov    ecx,edx
c0001261:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001264:	83 c9 01             	or     ecx,0x1
c0001267:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c000126a:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c000126d:	eb 15                	jmp    c0001284 <dlmalloc+0x149>
c000126f:	a3 a0 ea 02 c0       	mov    ds:0xc002eaa0,eax
c0001274:	39 fe                	cmp    esi,edi
c0001276:	c7 40 08 94 ea 02 c0 	mov    DWORD PTR [eax+0x8],0xc002ea94
c000127d:	75 0d                	jne    c000128c <dlmalloc+0x151>
c000127f:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001284:	8d 43 08             	lea    eax,[ebx+0x8]
c0001287:	e9 35 02 00 00       	jmp    c00014c1 <dlmalloc+0x386>
c000128c:	89 f8                	mov    eax,edi
c000128e:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001294:	77 19                	ja     c00012af <dlmalloc+0x174>
c0001296:	c1 e8 03             	shr    eax,0x3
c0001299:	8d 14 00             	lea    edx,[eax+eax*1]
c000129c:	83 c2 0d             	add    edx,0xd
c000129f:	8d 2c 95 58 ea 02 c0 	lea    ebp,[edx*4-0x3ffd15a8]
c00012a6:	8b 14 95 60 ea 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd15a0]
c00012ad:	eb 46                	jmp    c00012f5 <dlmalloc+0x1ba>
c00012af:	e8 c1 f9 ff ff       	call   c0000c75 <largebin_index>
c00012b4:	8d 14 00             	lea    edx,[eax+eax*1]
c00012b7:	83 c2 0d             	add    edx,0xd
c00012ba:	8d 0c 95 60 ea 02 c0 	lea    ecx,[edx*4-0x3ffd15a0]
c00012c1:	8b 14 95 60 ea 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd15a0]
c00012c8:	8d 69 f8             	lea    ebp,[ecx-0x8]
c00012cb:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00012cf:	89 d5                	mov    ebp,edx
c00012d1:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00012d5:	74 1e                	je     c00012f5 <dlmalloc+0x1ba>
c00012d7:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c00012da:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00012dd:	77 12                	ja     c00012f1 <dlmalloc+0x1b6>
c00012df:	83 cf 01             	or     edi,0x1
c00012e2:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00012e5:	76 05                	jbe    c00012ec <dlmalloc+0x1b1>
c00012e7:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00012ea:	eb f6                	jmp    c00012e2 <dlmalloc+0x1a7>
c00012ec:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00012ef:	eb 04                	jmp    c00012f5 <dlmalloc+0x1ba>
c00012f1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00012f5:	89 c7                	mov    edi,eax
c00012f7:	88 c1                	mov    cl,al
c00012f9:	c1 ff 05             	sar    edi,0x5
c00012fc:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0001300:	bf 01 00 00 00       	mov    edi,0x1
c0001305:	d3 e7                	shl    edi,cl
c0001307:	89 f8                	mov    eax,edi
c0001309:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000130d:	09 04 bd 94 ed 02 c0 	or     DWORD PTR [edi*4-0x3ffd126c],eax
c0001314:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c0001317:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000131a:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c000131d:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c0001320:	e9 db fe ff ff       	jmp    c0001200 <dlmalloc+0xc5>
c0001325:	81 fe ff 00 00 00    	cmp    esi,0xff
c000132b:	76 78                	jbe    c00013a5 <dlmalloc+0x26a>
c000132d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001331:	8d 04 c5 94 ea 02 c0 	lea    eax,[eax*8-0x3ffd156c]
c0001338:	8d 48 f8             	lea    ecx,[eax-0x8]
c000133b:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000133e:	39 ca                	cmp    edx,ecx
c0001340:	74 63                	je     c00013a5 <dlmalloc+0x26a>
c0001342:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c0001345:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001348:	83 e3 fc             	and    ebx,0xfffffffc
c000134b:	39 de                	cmp    esi,ebx
c000134d:	77 52                	ja     c00013a1 <dlmalloc+0x266>
c000134f:	89 df                	mov    edi,ebx
c0001351:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001354:	29 f7                	sub    edi,esi
c0001356:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001359:	01 d3                	add    ebx,edx
c000135b:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000135e:	83 ff 0f             	cmp    edi,0xf
c0001361:	8d 42 08             	lea    eax,[edx+0x8]
c0001364:	77 09                	ja     c000136f <dlmalloc+0x234>
c0001366:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c000136a:	e9 52 01 00 00       	jmp    c00014c1 <dlmalloc+0x386>
c000136f:	8d 0c 32             	lea    ecx,[edx+esi*1]
c0001372:	83 ce 01             	or     esi,0x1
c0001375:	89 0d 9c ea 02 c0    	mov    DWORD PTR ds:0xc002ea9c,ecx
c000137b:	89 0d a0 ea 02 c0    	mov    DWORD PTR ds:0xc002eaa0,ecx
c0001381:	c7 41 08 94 ea 02 c0 	mov    DWORD PTR [ecx+0x8],0xc002ea94
c0001388:	c7 41 0c 94 ea 02 c0 	mov    DWORD PTR [ecx+0xc],0xc002ea94
c000138f:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0001392:	89 fa                	mov    edx,edi
c0001394:	83 ca 01             	or     edx,0x1
c0001397:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000139a:	89 3b                	mov    DWORD PTR [ebx],edi
c000139c:	e9 20 01 00 00       	jmp    c00014c1 <dlmalloc+0x386>
c00013a1:	89 c2                	mov    edx,eax
c00013a3:	eb 99                	jmp    c000133e <dlmalloc+0x203>
c00013a5:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00013a9:	b8 01 00 00 00       	mov    eax,0x1
c00013ae:	41                   	inc    ecx
c00013af:	89 cb                	mov    ebx,ecx
c00013b1:	8d 14 cd 8c ea 02 c0 	lea    edx,[ecx*8-0x3ffd1574]
c00013b8:	c1 eb 05             	shr    ebx,0x5
c00013bb:	d3 e0                	shl    eax,cl
c00013bd:	8b 3c 9d 94 ed 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd126c]
c00013c4:	39 f8                	cmp    eax,edi
c00013c6:	77 04                	ja     c00013cc <dlmalloc+0x291>
c00013c8:	85 c0                	test   eax,eax
c00013ca:	75 26                	jne    c00013f2 <dlmalloc+0x2b7>
c00013cc:	43                   	inc    ebx
c00013cd:	83 fb 02             	cmp    ebx,0x2
c00013d0:	0f 87 a6 00 00 00    	ja     c000147c <dlmalloc+0x341>
c00013d6:	8b 3c 9d 94 ed 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd126c]
c00013dd:	85 ff                	test   edi,edi
c00013df:	74 eb                	je     c00013cc <dlmalloc+0x291>
c00013e1:	89 d8                	mov    eax,ebx
c00013e3:	c1 e0 06             	shl    eax,0x6
c00013e6:	8d 14 85 8c ea 02 c0 	lea    edx,[eax*4-0x3ffd1574]
c00013ed:	b8 01 00 00 00       	mov    eax,0x1
c00013f2:	85 f8                	test   eax,edi
c00013f4:	75 07                	jne    c00013fd <dlmalloc+0x2c2>
c00013f6:	83 c2 08             	add    edx,0x8
c00013f9:	01 c0                	add    eax,eax
c00013fb:	eb f5                	jmp    c00013f2 <dlmalloc+0x2b7>
c00013fd:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0001400:	39 ca                	cmp    edx,ecx
c0001402:	75 14                	jne    c0001418 <dlmalloc+0x2dd>
c0001404:	89 c1                	mov    ecx,eax
c0001406:	83 c2 08             	add    edx,0x8
c0001409:	f7 d1                	not    ecx
c000140b:	01 c0                	add    eax,eax
c000140d:	21 cf                	and    edi,ecx
c000140f:	89 3c 9d 94 ed 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd126c],edi
c0001416:	eb ac                	jmp    c00013c4 <dlmalloc+0x289>
c0001418:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c000141b:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c000141e:	83 e0 fc             	and    eax,0xfffffffc
c0001421:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c0001424:	89 c3                	mov    ebx,eax
c0001426:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001429:	29 f3                	sub    ebx,esi
c000142b:	8d 14 01             	lea    edx,[ecx+eax*1]
c000142e:	83 fb 0f             	cmp    ebx,0xf
c0001431:	8d 41 08             	lea    eax,[ecx+0x8]
c0001434:	77 09                	ja     c000143f <dlmalloc+0x304>
c0001436:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c000143a:	e9 82 00 00 00       	jmp    c00014c1 <dlmalloc+0x386>
c000143f:	8d 3c 31             	lea    edi,[ecx+esi*1]
c0001442:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001448:	89 3d 9c ea 02 c0    	mov    DWORD PTR ds:0xc002ea9c,edi
c000144e:	89 3d a0 ea 02 c0    	mov    DWORD PTR ds:0xc002eaa0,edi
c0001454:	c7 47 08 94 ea 02 c0 	mov    DWORD PTR [edi+0x8],0xc002ea94
c000145b:	c7 47 0c 94 ea 02 c0 	mov    DWORD PTR [edi+0xc],0xc002ea94
c0001462:	77 06                	ja     c000146a <dlmalloc+0x32f>
c0001464:	89 3d 90 ea 02 c0    	mov    DWORD PTR ds:0xc002ea90,edi
c000146a:	83 ce 01             	or     esi,0x1
c000146d:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001470:	89 d9                	mov    ecx,ebx
c0001472:	83 c9 01             	or     ecx,0x1
c0001475:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001478:	89 1a                	mov    DWORD PTR [edx],ebx
c000147a:	eb 45                	jmp    c00014c1 <dlmalloc+0x386>
c000147c:	a1 8c ea 02 c0       	mov    eax,ds:0xc002ea8c
c0001481:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001484:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001487:	83 e2 fc             	and    edx,0xfffffffc
c000148a:	39 d1                	cmp    ecx,edx
c000148c:	77 1e                	ja     c00014ac <dlmalloc+0x371>
c000148e:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001491:	89 f3                	mov    ebx,esi
c0001493:	89 0d 8c ea 02 c0    	mov    DWORD PTR ds:0xc002ea8c,ecx
c0001499:	83 cb 01             	or     ebx,0x1
c000149c:	29 f2                	sub    edx,esi
c000149e:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00014a1:	83 ca 01             	or     edx,0x1
c00014a4:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00014a7:	e9 2d fd ff ff       	jmp    c00011d9 <dlmalloc+0x9e>
c00014ac:	83 c4 1c             	add    esp,0x1c
c00014af:	89 f0                	mov    eax,esi
c00014b1:	5b                   	pop    ebx
c00014b2:	ba 60 ea 02 c0       	mov    edx,0xc002ea60
c00014b7:	5e                   	pop    esi
c00014b8:	5f                   	pop    edi
c00014b9:	5d                   	pop    ebp
c00014ba:	e9 16 fa ff ff       	jmp    c0000ed5 <sYSMALLOc>
c00014bf:	31 c0                	xor    eax,eax
c00014c1:	83 c4 1c             	add    esp,0x1c
c00014c4:	5b                   	pop    ebx
c00014c5:	5e                   	pop    esi
c00014c6:	5f                   	pop    edi
c00014c7:	5d                   	pop    ebp
c00014c8:	c3                   	ret    

c00014c9 <iALLOc>:
c00014c9:	55                   	push   ebp
c00014ca:	89 c5                	mov    ebp,eax
c00014cc:	57                   	push   edi
c00014cd:	56                   	push   esi
c00014ce:	53                   	push   ebx
c00014cf:	83 ec 2c             	sub    esp,0x2c
c00014d2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00014d6:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00014da:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00014de:	83 3d 60 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea60,0x0
c00014e5:	75 12                	jne    c00014f9 <iALLOc+0x30>
c00014e7:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00014eb:	b8 60 ea 02 c0       	mov    eax,0xc002ea60
c00014f0:	e8 04 f8 ff ff       	call   c0000cf9 <malloc_consolidate>
c00014f5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00014f9:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014fe:	74 12                	je     c0001512 <iALLOc+0x49>
c0001500:	85 ed                	test   ebp,ebp
c0001502:	0f 84 64 01 00 00    	je     c000166c <iALLOc+0x1a3>
c0001508:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0001510:	eb 33                	jmp    c0001545 <iALLOc+0x7c>
c0001512:	85 ed                	test   ebp,ebp
c0001514:	75 14                	jne    c000152a <iALLOc+0x61>
c0001516:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c000151e:	83 c4 2c             	add    esp,0x2c
c0001521:	5b                   	pop    ebx
c0001522:	5e                   	pop    esi
c0001523:	5f                   	pop    edi
c0001524:	5d                   	pop    ebp
c0001525:	e9 11 fc ff ff       	jmp    c000113b <dlmalloc>
c000152a:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c0001531:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c0001539:	83 f8 0f             	cmp    eax,0xf
c000153c:	76 07                	jbe    c0001545 <iALLOc+0x7c>
c000153e:	83 e0 f8             	and    eax,0xfffffff8
c0001541:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0001545:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c000154a:	75 09                	jne    c0001555 <iALLOc+0x8c>
c000154c:	89 d0                	mov    eax,edx
c000154e:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001551:	31 f6                	xor    esi,esi
c0001553:	eb 3b                	jmp    c0001590 <iALLOc+0xc7>
c0001555:	8b 02                	mov    eax,DWORD PTR [edx]
c0001557:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c000155f:	83 c0 0b             	add    eax,0xb
c0001562:	83 f8 0f             	cmp    eax,0xf
c0001565:	76 07                	jbe    c000156e <iALLOc+0xa5>
c0001567:	83 e0 f8             	and    eax,0xfffffff8
c000156a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000156e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0001572:	0f af f5             	imul   esi,ebp
c0001575:	eb 25                	jmp    c000159c <iALLOc+0xd3>
c0001577:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001579:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c000157c:	bb 10 00 00 00       	mov    ebx,0x10
c0001581:	83 f9 0f             	cmp    ecx,0xf
c0001584:	76 05                	jbe    c000158b <iALLOc+0xc2>
c0001586:	83 e1 f8             	and    ecx,0xfffffff8
c0001589:	89 cb                	mov    ebx,ecx
c000158b:	01 de                	add    esi,ebx
c000158d:	83 c0 04             	add    eax,0x4
c0001590:	39 c7                	cmp    edi,eax
c0001592:	75 e3                	jne    c0001577 <iALLOc+0xae>
c0001594:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000159c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00015a0:	8b 1d b4 ed 02 c0    	mov    ebx,DWORD PTR ds:0xc002edb4
c00015a6:	83 ec 0c             	sub    esp,0xc
c00015a9:	c7 05 b4 ed 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002edb4,0x0
c00015b3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00015b7:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c00015bb:	50                   	push   eax
c00015bc:	e8 7a fb ff ff       	call   c000113b <dlmalloc>
c00015c1:	83 c4 10             	add    esp,0x10
c00015c4:	89 1d b4 ed 02 c0    	mov    DWORD PTR ds:0xc002edb4,ebx
c00015ca:	85 c0                	test   eax,eax
c00015cc:	0f 84 92 00 00 00    	je     c0001664 <iALLOc+0x19b>
c00015d2:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00015d5:	8d 78 f8             	lea    edi,[eax-0x8]
c00015d8:	83 e3 fc             	and    ebx,0xfffffffc
c00015db:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00015df:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00015e4:	74 1e                	je     c0001604 <iALLOc+0x13b>
c00015e6:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00015ea:	89 d9                	mov    ecx,ebx
c00015ec:	52                   	push   edx
c00015ed:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00015f1:	83 e9 04             	sub    ecx,0x4
c00015f4:	51                   	push   ecx
c00015f5:	6a 00                	push   0x0
c00015f7:	50                   	push   eax
c00015f8:	e8 9f f1 ff ff       	call   c000079c <memset>
c00015fd:	83 c4 10             	add    esp,0x10
c0001600:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001604:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0001609:	75 14                	jne    c000161f <iALLOc+0x156>
c000160b:	8d 04 37             	lea    eax,[edi+esi*1]
c000160e:	29 f3                	sub    ebx,esi
c0001610:	8d 48 08             	lea    ecx,[eax+0x8]
c0001613:	83 cb 01             	or     ebx,0x1
c0001616:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000161a:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000161d:	89 f3                	mov    ebx,esi
c000161f:	31 c0                	xor    eax,eax
c0001621:	4d                   	dec    ebp
c0001622:	8d 4f 08             	lea    ecx,[edi+0x8]
c0001625:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001629:	39 c5                	cmp    ebp,eax
c000162b:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c000162e:	74 2c                	je     c000165c <iALLOc+0x193>
c0001630:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0001634:	85 c9                	test   ecx,ecx
c0001636:	75 15                	jne    c000164d <iALLOc+0x184>
c0001638:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c000163b:	8d 71 0b             	lea    esi,[ecx+0xb]
c000163e:	b9 10 00 00 00       	mov    ecx,0x10
c0001643:	83 fe 0f             	cmp    esi,0xf
c0001646:	76 05                	jbe    c000164d <iALLOc+0x184>
c0001648:	83 e6 f8             	and    esi,0xfffffff8
c000164b:	89 f1                	mov    ecx,esi
c000164d:	89 ce                	mov    esi,ecx
c000164f:	29 cb                	sub    ebx,ecx
c0001651:	83 ce 01             	or     esi,0x1
c0001654:	40                   	inc    eax
c0001655:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001658:	01 cf                	add    edi,ecx
c000165a:	eb c6                	jmp    c0001622 <iALLOc+0x159>
c000165c:	83 cb 01             	or     ebx,0x1
c000165f:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c0001662:	eb 08                	jmp    c000166c <iALLOc+0x1a3>
c0001664:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000166c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001670:	83 c4 2c             	add    esp,0x2c
c0001673:	5b                   	pop    ebx
c0001674:	5e                   	pop    esi
c0001675:	5f                   	pop    edi
c0001676:	5d                   	pop    ebp
c0001677:	c3                   	ret    

c0001678 <dlrealloc>:
c0001678:	55                   	push   ebp
c0001679:	57                   	push   edi
c000167a:	56                   	push   esi
c000167b:	53                   	push   ebx
c000167c:	83 ec 1c             	sub    esp,0x1c
c000167f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0001683:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001687:	85 db                	test   ebx,ebx
c0001689:	75 10                	jne    c000169b <dlrealloc+0x23>
c000168b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000168f:	83 c4 1c             	add    esp,0x1c
c0001692:	5b                   	pop    ebx
c0001693:	5e                   	pop    esi
c0001694:	5f                   	pop    edi
c0001695:	5d                   	pop    ebp
c0001696:	e9 a0 fa ff ff       	jmp    c000113b <dlmalloc>
c000169b:	83 f8 df             	cmp    eax,0xffffffdf
c000169e:	76 07                	jbe    c00016a7 <dlrealloc+0x2f>
c00016a0:	31 db                	xor    ebx,ebx
c00016a2:	e9 7c 01 00 00       	jmp    c0001823 <dlrealloc+0x1ab>
c00016a7:	83 c0 0b             	add    eax,0xb
c00016aa:	bf 10 00 00 00       	mov    edi,0x10
c00016af:	83 f8 0f             	cmp    eax,0xf
c00016b2:	76 05                	jbe    c00016b9 <dlrealloc+0x41>
c00016b4:	83 e0 f8             	and    eax,0xfffffff8
c00016b7:	89 c7                	mov    edi,eax
c00016b9:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c00016bc:	8d 6b f8             	lea    ebp,[ebx-0x8]
c00016bf:	89 c6                	mov    esi,eax
c00016c1:	83 e6 fc             	and    esi,0xfffffffc
c00016c4:	a8 02                	test   al,0x2
c00016c6:	75 d8                	jne    c00016a0 <dlrealloc+0x28>
c00016c8:	39 f7                	cmp    edi,esi
c00016ca:	0f 86 15 01 00 00    	jbe    c00017e5 <dlrealloc+0x16d>
c00016d0:	8d 54 35 00          	lea    edx,[ebp+esi*1+0x0]
c00016d4:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00016d7:	39 15 8c ea 02 c0    	cmp    DWORD PTR ds:0xc002ea8c,edx
c00016dd:	75 33                	jne    c0001712 <dlrealloc+0x9a>
c00016df:	83 e1 fc             	and    ecx,0xfffffffc
c00016e2:	01 f1                	add    ecx,esi
c00016e4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00016e8:	8d 4f 10             	lea    ecx,[edi+0x10]
c00016eb:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00016ef:	77 49                	ja     c000173a <dlrealloc+0xc2>
c00016f1:	01 fd                	add    ebp,edi
c00016f3:	83 e0 01             	and    eax,0x1
c00016f6:	09 f8                	or     eax,edi
c00016f8:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00016fb:	89 2d 8c ea 02 c0    	mov    DWORD PTR ds:0xc002ea8c,ebp
c0001701:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001705:	29 f8                	sub    eax,edi
c0001707:	83 c8 01             	or     eax,0x1
c000170a:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000170d:	e9 11 01 00 00       	jmp    c0001823 <dlrealloc+0x1ab>
c0001712:	89 c8                	mov    eax,ecx
c0001714:	83 e0 fe             	and    eax,0xfffffffe
c0001717:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c000171c:	75 1c                	jne    c000173a <dlrealloc+0xc2>
c000171e:	83 e1 fc             	and    ecx,0xfffffffc
c0001721:	01 f1                	add    ecx,esi
c0001723:	39 cf                	cmp    edi,ecx
c0001725:	77 13                	ja     c000173a <dlrealloc+0xc2>
c0001727:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c000172a:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000172d:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c0001730:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c0001733:	89 ce                	mov    esi,ecx
c0001735:	e9 ab 00 00 00       	jmp    c00017e5 <dlrealloc+0x16d>
c000173a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000173e:	8d 47 f9             	lea    eax,[edi-0x7]
c0001741:	83 ec 0c             	sub    esp,0xc
c0001744:	50                   	push   eax
c0001745:	e8 f1 f9 ff ff       	call   c000113b <dlmalloc>
c000174a:	83 c4 10             	add    esp,0x10
c000174d:	89 c1                	mov    ecx,eax
c000174f:	85 c0                	test   eax,eax
c0001751:	0f 84 49 ff ff ff    	je     c00016a0 <dlrealloc+0x28>
c0001757:	8d 40 f8             	lea    eax,[eax-0x8]
c000175a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000175e:	39 c2                	cmp    edx,eax
c0001760:	75 0a                	jne    c000176c <dlrealloc+0xf4>
c0001762:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001765:	83 e0 fc             	and    eax,0xfffffffc
c0001768:	01 c6                	add    esi,eax
c000176a:	eb 79                	jmp    c00017e5 <dlrealloc+0x16d>
c000176c:	83 ee 04             	sub    esi,0x4
c000176f:	83 fe 27             	cmp    esi,0x27
c0001772:	76 16                	jbe    c000178a <dlrealloc+0x112>
c0001774:	50                   	push   eax
c0001775:	56                   	push   esi
c0001776:	53                   	push   ebx
c0001777:	51                   	push   ecx
c0001778:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000177c:	e8 e7 ef ff ff       	call   c0000768 <memcpy>
c0001781:	83 c4 10             	add    esp,0x10
c0001784:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0001788:	eb 43                	jmp    c00017cd <dlrealloc+0x155>
c000178a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000178c:	83 fe 13             	cmp    esi,0x13
c000178f:	89 01                	mov    DWORD PTR [ecx],eax
c0001791:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0001794:	89 41 04             	mov    DWORD PTR [ecx+0x4],eax
c0001797:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000179a:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000179d:	76 2e                	jbe    c00017cd <dlrealloc+0x155>
c000179f:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00017a2:	83 fe 1b             	cmp    esi,0x1b
c00017a5:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c00017a8:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00017ab:	89 41 10             	mov    DWORD PTR [ecx+0x10],eax
c00017ae:	76 1d                	jbe    c00017cd <dlrealloc+0x155>
c00017b0:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00017b3:	83 fe 23             	cmp    esi,0x23
c00017b6:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c00017b9:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00017bc:	89 41 18             	mov    DWORD PTR [ecx+0x18],eax
c00017bf:	76 0c                	jbe    c00017cd <dlrealloc+0x155>
c00017c1:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00017c4:	89 41 1c             	mov    DWORD PTR [ecx+0x1c],eax
c00017c7:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00017ca:	89 41 20             	mov    DWORD PTR [ecx+0x20],eax
c00017cd:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00017d1:	83 ec 0c             	sub    esp,0xc
c00017d4:	53                   	push   ebx
c00017d5:	e8 06 f6 ff ff       	call   c0000de0 <dlfree>
c00017da:	83 c4 10             	add    esp,0x10
c00017dd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00017e1:	89 cb                	mov    ebx,ecx
c00017e3:	eb 3e                	jmp    c0001823 <dlrealloc+0x1ab>
c00017e5:	89 f2                	mov    edx,esi
c00017e7:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00017ea:	29 fa                	sub    edx,edi
c00017ec:	83 e1 01             	and    ecx,0x1
c00017ef:	8d 44 35 00          	lea    eax,[ebp+esi*1+0x0]
c00017f3:	83 fa 0f             	cmp    edx,0xf
c00017f6:	77 0b                	ja     c0001803 <dlrealloc+0x18b>
c00017f8:	09 ce                	or     esi,ecx
c00017fa:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00017fd:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001801:	eb 20                	jmp    c0001823 <dlrealloc+0x1ab>
c0001803:	01 fd                	add    ebp,edi
c0001805:	83 ec 0c             	sub    esp,0xc
c0001808:	09 cf                	or     edi,ecx
c000180a:	83 ca 01             	or     edx,0x1
c000180d:	89 7b fc             	mov    DWORD PTR [ebx-0x4],edi
c0001810:	83 c5 08             	add    ebp,0x8
c0001813:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
c0001816:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c000181a:	55                   	push   ebp
c000181b:	e8 c0 f5 ff ff       	call   c0000de0 <dlfree>
c0001820:	83 c4 10             	add    esp,0x10
c0001823:	83 c4 1c             	add    esp,0x1c
c0001826:	89 d8                	mov    eax,ebx
c0001828:	5b                   	pop    ebx
c0001829:	5e                   	pop    esi
c000182a:	5f                   	pop    edi
c000182b:	5d                   	pop    ebp
c000182c:	c3                   	ret    

c000182d <dlmemalign>:
c000182d:	55                   	push   ebp
c000182e:	57                   	push   edi
c000182f:	56                   	push   esi
c0001830:	53                   	push   ebx
c0001831:	83 ec 0c             	sub    esp,0xc
c0001834:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0001838:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000183c:	83 fa 08             	cmp    edx,0x8
c000183f:	77 10                	ja     c0001851 <dlmemalign+0x24>
c0001841:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0001845:	83 c4 0c             	add    esp,0xc
c0001848:	5b                   	pop    ebx
c0001849:	5e                   	pop    esi
c000184a:	5f                   	pop    edi
c000184b:	5d                   	pop    ebp
c000184c:	e9 ea f8 ff ff       	jmp    c000113b <dlmalloc>
c0001851:	bf 10 00 00 00       	mov    edi,0x10
c0001856:	83 fa 0f             	cmp    edx,0xf
c0001859:	76 13                	jbe    c000186e <dlmemalign+0x41>
c000185b:	8d 4a ff             	lea    ecx,[edx-0x1]
c000185e:	85 d1                	test   ecx,edx
c0001860:	75 04                	jne    c0001866 <dlmemalign+0x39>
c0001862:	89 d7                	mov    edi,edx
c0001864:	eb 08                	jmp    c000186e <dlmemalign+0x41>
c0001866:	39 d7                	cmp    edi,edx
c0001868:	73 04                	jae    c000186e <dlmemalign+0x41>
c000186a:	01 ff                	add    edi,edi
c000186c:	eb f8                	jmp    c0001866 <dlmemalign+0x39>
c000186e:	83 f8 df             	cmp    eax,0xffffffdf
c0001871:	76 07                	jbe    c000187a <dlmemalign+0x4d>
c0001873:	31 c0                	xor    eax,eax
c0001875:	e9 ce 00 00 00       	jmp    c0001948 <dlmemalign+0x11b>
c000187a:	83 c0 0b             	add    eax,0xb
c000187d:	bd 10 00 00 00       	mov    ebp,0x10
c0001882:	83 f8 0f             	cmp    eax,0xf
c0001885:	76 05                	jbe    c000188c <dlmemalign+0x5f>
c0001887:	83 e0 f8             	and    eax,0xfffffff8
c000188a:	89 c5                	mov    ebp,eax
c000188c:	83 ec 0c             	sub    esp,0xc
c000188f:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c0001893:	50                   	push   eax
c0001894:	e8 a2 f8 ff ff       	call   c000113b <dlmalloc>
c0001899:	83 c4 10             	add    esp,0x10
c000189c:	89 c1                	mov    ecx,eax
c000189e:	85 c0                	test   eax,eax
c00018a0:	74 d1                	je     c0001873 <dlmemalign+0x46>
c00018a2:	31 d2                	xor    edx,edx
c00018a4:	8d 70 f8             	lea    esi,[eax-0x8]
c00018a7:	f7 f7                	div    edi
c00018a9:	85 d2                	test   edx,edx
c00018ab:	74 62                	je     c000190f <dlmemalign+0xe2>
c00018ad:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c00018b1:	89 f8                	mov    eax,edi
c00018b3:	f7 d8                	neg    eax
c00018b5:	21 c3                	and    ebx,eax
c00018b7:	83 eb 08             	sub    ebx,0x8
c00018ba:	89 d8                	mov    eax,ebx
c00018bc:	29 f0                	sub    eax,esi
c00018be:	83 f8 0f             	cmp    eax,0xf
c00018c1:	77 02                	ja     c00018c5 <dlmemalign+0x98>
c00018c3:	01 fb                	add    ebx,edi
c00018c5:	89 d8                	mov    eax,ebx
c00018c7:	29 f0                	sub    eax,esi
c00018c9:	89 c6                	mov    esi,eax
c00018cb:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00018ce:	89 c2                	mov    edx,eax
c00018d0:	83 e2 fc             	and    edx,0xfffffffc
c00018d3:	29 f2                	sub    edx,esi
c00018d5:	a8 02                	test   al,0x2
c00018d7:	74 10                	je     c00018e9 <dlmemalign+0xbc>
c00018d9:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00018dc:	83 ca 02             	or     edx,0x2
c00018df:	8d 43 08             	lea    eax,[ebx+0x8]
c00018e2:	89 33                	mov    DWORD PTR [ebx],esi
c00018e4:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00018e7:	eb 5f                	jmp    c0001948 <dlmemalign+0x11b>
c00018e9:	83 ec 0c             	sub    esp,0xc
c00018ec:	89 d0                	mov    eax,edx
c00018ee:	83 c8 01             	or     eax,0x1
c00018f1:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00018f4:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00018f9:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00018fc:	83 e0 01             	and    eax,0x1
c00018ff:	09 f0                	or     eax,esi
c0001901:	89 de                	mov    esi,ebx
c0001903:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c0001906:	51                   	push   ecx
c0001907:	e8 d4 f4 ff ff       	call   c0000de0 <dlfree>
c000190c:	83 c4 10             	add    esp,0x10
c000190f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001912:	a8 02                	test   al,0x2
c0001914:	75 2f                	jne    c0001945 <dlmemalign+0x118>
c0001916:	83 e0 fc             	and    eax,0xfffffffc
c0001919:	8d 55 10             	lea    edx,[ebp+0x10]
c000191c:	39 c2                	cmp    edx,eax
c000191e:	73 25                	jae    c0001945 <dlmemalign+0x118>
c0001920:	8d 14 2e             	lea    edx,[esi+ebp*1]
c0001923:	83 ec 0c             	sub    esp,0xc
c0001926:	29 e8                	sub    eax,ebp
c0001928:	83 c2 08             	add    edx,0x8
c000192b:	83 c8 01             	or     eax,0x1
c000192e:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c0001931:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001934:	83 e0 01             	and    eax,0x1
c0001937:	09 c5                	or     ebp,eax
c0001939:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c000193c:	52                   	push   edx
c000193d:	e8 9e f4 ff ff       	call   c0000de0 <dlfree>
c0001942:	83 c4 10             	add    esp,0x10
c0001945:	8d 46 08             	lea    eax,[esi+0x8]
c0001948:	83 c4 0c             	add    esp,0xc
c000194b:	5b                   	pop    ebx
c000194c:	5e                   	pop    esi
c000194d:	5f                   	pop    edi
c000194e:	5d                   	pop    ebp
c000194f:	c3                   	ret    

c0001950 <dlcalloc>:
c0001950:	53                   	push   ebx
c0001951:	83 ec 14             	sub    esp,0x14
c0001954:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001958:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c000195d:	50                   	push   eax
c000195e:	e8 d8 f7 ff ff       	call   c000113b <dlmalloc>
c0001963:	83 c4 10             	add    esp,0x10
c0001966:	89 c3                	mov    ebx,eax
c0001968:	85 c0                	test   eax,eax
c000196a:	74 77                	je     c00019e3 <dlcalloc+0x93>
c000196c:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c000196f:	89 d0                	mov    eax,edx
c0001971:	83 e0 fc             	and    eax,0xfffffffc
c0001974:	80 e2 02             	and    dl,0x2
c0001977:	75 5a                	jne    c00019d3 <dlcalloc+0x83>
c0001979:	83 e8 04             	sub    eax,0x4
c000197c:	83 f8 27             	cmp    eax,0x27
c000197f:	76 03                	jbe    c0001984 <dlcalloc+0x34>
c0001981:	51                   	push   ecx
c0001982:	eb 53                	jmp    c00019d7 <dlcalloc+0x87>
c0001984:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000198a:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001991:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001998:	83 f8 13             	cmp    eax,0x13
c000199b:	76 46                	jbe    c00019e3 <dlcalloc+0x93>
c000199d:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c00019a4:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00019ab:	83 f8 1b             	cmp    eax,0x1b
c00019ae:	76 33                	jbe    c00019e3 <dlcalloc+0x93>
c00019b0:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00019b7:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00019be:	83 f8 23             	cmp    eax,0x23
c00019c1:	76 20                	jbe    c00019e3 <dlcalloc+0x93>
c00019c3:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00019ca:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00019d1:	eb 10                	jmp    c00019e3 <dlcalloc+0x93>
c00019d3:	83 e8 08             	sub    eax,0x8
c00019d6:	52                   	push   edx
c00019d7:	50                   	push   eax
c00019d8:	6a 00                	push   0x0
c00019da:	53                   	push   ebx
c00019db:	e8 bc ed ff ff       	call   c000079c <memset>
c00019e0:	83 c4 10             	add    esp,0x10
c00019e3:	89 d8                	mov    eax,ebx
c00019e5:	83 c4 08             	add    esp,0x8
c00019e8:	5b                   	pop    ebx
c00019e9:	c3                   	ret    

c00019ea <dlcfree>:
c00019ea:	e9 f1 f3 ff ff       	jmp    c0000de0 <dlfree>

c00019ef <dlindependent_calloc>:
c00019ef:	83 ec 28             	sub    esp,0x28
c00019f2:	b9 03 00 00 00       	mov    ecx,0x3
c00019f7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00019fb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00019ff:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0001a03:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0001a07:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001a0b:	e8 b9 fa ff ff       	call   c00014c9 <iALLOc>
c0001a10:	83 c4 2c             	add    esp,0x2c
c0001a13:	c3                   	ret    

c0001a14 <dlindependent_comalloc>:
c0001a14:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001a18:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001a1c:	31 c9                	xor    ecx,ecx
c0001a1e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001a22:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001a26:	e9 9e fa ff ff       	jmp    c00014c9 <iALLOc>

c0001a2b <dlvalloc>:
c0001a2b:	83 ec 0c             	sub    esp,0xc
c0001a2e:	83 3d 60 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea60,0x0
c0001a35:	75 0a                	jne    c0001a41 <dlvalloc+0x16>
c0001a37:	b8 60 ea 02 c0       	mov    eax,0xc002ea60
c0001a3c:	e8 b8 f2 ff ff       	call   c0000cf9 <malloc_consolidate>
c0001a41:	50                   	push   eax
c0001a42:	50                   	push   eax
c0001a43:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0001a47:	ff 35 bc ed 02 c0    	push   DWORD PTR ds:0xc002edbc
c0001a4d:	e8 db fd ff ff       	call   c000182d <dlmemalign>
c0001a52:	83 c4 1c             	add    esp,0x1c
c0001a55:	c3                   	ret    

c0001a56 <dlpvalloc>:
c0001a56:	83 ec 0c             	sub    esp,0xc
c0001a59:	83 3d 60 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea60,0x0
c0001a60:	75 0a                	jne    c0001a6c <dlpvalloc+0x16>
c0001a62:	b8 60 ea 02 c0       	mov    eax,0xc002ea60
c0001a67:	e8 8d f2 ff ff       	call   c0000cf9 <malloc_consolidate>
c0001a6c:	a1 bc ed 02 c0       	mov    eax,ds:0xc002edbc
c0001a71:	89 c1                	mov    ecx,eax
c0001a73:	52                   	push   edx
c0001a74:	f7 d9                	neg    ecx
c0001a76:	52                   	push   edx
c0001a77:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001a7b:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001a7f:	21 ca                	and    edx,ecx
c0001a81:	52                   	push   edx
c0001a82:	50                   	push   eax
c0001a83:	e8 a5 fd ff ff       	call   c000182d <dlmemalign>
c0001a88:	83 c4 1c             	add    esp,0x1c
c0001a8b:	c3                   	ret    

c0001a8c <dlmalloc_trim>:
c0001a8c:	b8 60 ea 02 c0       	mov    eax,0xc002ea60
c0001a91:	e8 63 f2 ff ff       	call   c0000cf9 <malloc_consolidate>
c0001a96:	31 c0                	xor    eax,eax
c0001a98:	c3                   	ret    

c0001a99 <dlmalloc_usable_size>:
c0001a99:	53                   	push   ebx
c0001a9a:	31 c0                	xor    eax,eax
c0001a9c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001aa0:	85 c9                	test   ecx,ecx
c0001aa2:	74 24                	je     c0001ac8 <dlmalloc_usable_size+0x2f>
c0001aa4:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001aa7:	f6 c2 02             	test   dl,0x2
c0001aaa:	74 08                	je     c0001ab4 <dlmalloc_usable_size+0x1b>
c0001aac:	83 e2 fc             	and    edx,0xfffffffc
c0001aaf:	8d 42 f8             	lea    eax,[edx-0x8]
c0001ab2:	eb 14                	jmp    c0001ac8 <dlmalloc_usable_size+0x2f>
c0001ab4:	89 d3                	mov    ebx,edx
c0001ab6:	31 c0                	xor    eax,eax
c0001ab8:	83 e3 fe             	and    ebx,0xfffffffe
c0001abb:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001ac0:	74 06                	je     c0001ac8 <dlmalloc_usable_size+0x2f>
c0001ac2:	83 e2 fc             	and    edx,0xfffffffc
c0001ac5:	8d 42 fc             	lea    eax,[edx-0x4]
c0001ac8:	5b                   	pop    ebx
c0001ac9:	c3                   	ret    

c0001aca <dlmallinfo>:
c0001aca:	55                   	push   ebp
c0001acb:	57                   	push   edi
c0001acc:	56                   	push   esi
c0001acd:	53                   	push   ebx
c0001ace:	83 ec 08             	sub    esp,0x8
c0001ad1:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001ad5:	83 3d 8c ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea8c,0x0
c0001adc:	75 0a                	jne    c0001ae8 <dlmallinfo+0x1e>
c0001ade:	b8 60 ea 02 c0       	mov    eax,0xc002ea60
c0001ae3:	e8 11 f2 ff ff       	call   c0000cf9 <malloc_consolidate>
c0001ae8:	a1 8c ea 02 c0       	mov    eax,ds:0xc002ea8c
c0001aed:	31 ed                	xor    ebp,ebp
c0001aef:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001af2:	31 c9                	xor    ecx,ecx
c0001af4:	83 e0 fc             	and    eax,0xfffffffc
c0001af7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001afb:	31 c0                	xor    eax,eax
c0001afd:	8b 14 85 64 ea 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd159c]
c0001b04:	85 d2                	test   edx,edx
c0001b06:	74 0e                	je     c0001b16 <dlmallinfo+0x4c>
c0001b08:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001b0b:	45                   	inc    ebp
c0001b0c:	83 e6 fc             	and    esi,0xfffffffc
c0001b0f:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001b12:	01 f1                	add    ecx,esi
c0001b14:	eb ee                	jmp    c0001b04 <dlmallinfo+0x3a>
c0001b16:	40                   	inc    eax
c0001b17:	83 f8 0a             	cmp    eax,0xa
c0001b1a:	75 e1                	jne    c0001afd <dlmallinfo+0x33>
c0001b1c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b20:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001b27:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001b2a:	b8 94 ea 02 c0       	mov    eax,0xc002ea94
c0001b2f:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001b32:	39 f0                	cmp    eax,esi
c0001b34:	74 10                	je     c0001b46 <dlmallinfo+0x7c>
c0001b36:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001b39:	ff 04 24             	inc    DWORD PTR [esp]
c0001b3c:	83 e7 fc             	and    edi,0xfffffffc
c0001b3f:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001b42:	01 fa                	add    edx,edi
c0001b44:	eb ec                	jmp    c0001b32 <dlmallinfo+0x68>
c0001b46:	83 c0 08             	add    eax,0x8
c0001b49:	3d 8c ed 02 c0       	cmp    eax,0xc002ed8c
c0001b4e:	75 df                	jne    c0001b2f <dlmallinfo+0x65>
c0001b50:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001b53:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001b56:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001b59:	a1 c8 ed 02 c0       	mov    eax,ds:0xc002edc8
c0001b5e:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001b61:	89 03                	mov    DWORD PTR [ebx],eax
c0001b63:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001b66:	8b 35 b0 ed 02 c0    	mov    esi,DWORD PTR ds:0xc002edb0
c0001b6c:	29 d0                	sub    eax,edx
c0001b6e:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001b71:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001b74:	8b 35 c4 ed 02 c0    	mov    esi,DWORD PTR ds:0xc002edc4
c0001b7a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b7e:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001b81:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001b84:	8b 35 d4 ed 02 c0    	mov    esi,DWORD PTR ds:0xc002edd4
c0001b8a:	89 d8                	mov    eax,ebx
c0001b8c:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001b8f:	83 c4 08             	add    esp,0x8
c0001b92:	5b                   	pop    ebx
c0001b93:	5e                   	pop    esi
c0001b94:	5f                   	pop    edi
c0001b95:	5d                   	pop    ebp
c0001b96:	c2 04 00             	ret    0x4

c0001b99 <dlmalloc_stats>:
c0001b99:	83 ec 30             	sub    esp,0x30
c0001b9c:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001ba0:	50                   	push   eax
c0001ba1:	e8 24 ff ff ff       	call   c0001aca <dlmallinfo>
c0001ba6:	83 c4 30             	add    esp,0x30
c0001ba9:	c3                   	ret    

c0001baa <dlmallopt>:
c0001baa:	56                   	push   esi
c0001bab:	b8 60 ea 02 c0       	mov    eax,0xc002ea60
c0001bb0:	53                   	push   ebx
c0001bb1:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001bb5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001bb9:	e8 3b f1 ff ff       	call   c0000cf9 <malloc_consolidate>
c0001bbe:	8d 46 04             	lea    eax,[esi+0x4]
c0001bc1:	83 f8 05             	cmp    eax,0x5
c0001bc4:	77 67                	ja     c0001c2d <dlmallopt+0x83>
c0001bc6:	ff 24 85 44 9c 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd63bc]
c0001bcd:	83 fb 50             	cmp    ebx,0x50
c0001bd0:	77 5b                	ja     c0001c2d <dlmallopt+0x83>
c0001bd2:	ba 08 00 00 00       	mov    edx,0x8
c0001bd7:	85 db                	test   ebx,ebx
c0001bd9:	74 12                	je     c0001bed <dlmallopt+0x43>
c0001bdb:	83 c3 0b             	add    ebx,0xb
c0001bde:	ba 10 00 00 00       	mov    edx,0x10
c0001be3:	83 fb 0f             	cmp    ebx,0xf
c0001be6:	76 05                	jbe    c0001bed <dlmallopt+0x43>
c0001be8:	89 da                	mov    edx,ebx
c0001bea:	83 e2 f8             	and    edx,0xfffffff8
c0001bed:	a1 60 ea 02 c0       	mov    eax,ds:0xc002ea60
c0001bf2:	83 e0 03             	and    eax,0x3
c0001bf5:	09 d0                	or     eax,edx
c0001bf7:	a3 60 ea 02 c0       	mov    ds:0xc002ea60,eax
c0001bfc:	eb 31                	jmp    c0001c2f <dlmallopt+0x85>
c0001bfe:	89 1d a4 ed 02 c0    	mov    DWORD PTR ds:0xc002eda4,ebx
c0001c04:	eb 06                	jmp    c0001c0c <dlmallopt+0x62>
c0001c06:	89 1d a8 ed 02 c0    	mov    DWORD PTR ds:0xc002eda8,ebx
c0001c0c:	be 01 00 00 00       	mov    esi,0x1
c0001c11:	eb 1c                	jmp    c0001c2f <dlmallopt+0x85>
c0001c13:	89 1d ac ed 02 c0    	mov    DWORD PTR ds:0xc002edac,ebx
c0001c19:	eb f1                	jmp    c0001c0c <dlmallopt+0x62>
c0001c1b:	31 f6                	xor    esi,esi
c0001c1d:	85 db                	test   ebx,ebx
c0001c1f:	75 0e                	jne    c0001c2f <dlmallopt+0x85>
c0001c21:	c7 05 b4 ed 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002edb4,0x0
c0001c2b:	eb df                	jmp    c0001c0c <dlmallopt+0x62>
c0001c2d:	31 f6                	xor    esi,esi
c0001c2f:	89 f0                	mov    eax,esi
c0001c31:	5b                   	pop    ebx
c0001c32:	5e                   	pop    esi
c0001c33:	c3                   	ret    

c0001c34 <disk_status>:
c0001c34:	31 c0                	xor    eax,eax
c0001c36:	c3                   	ret    

c0001c37 <disk_initialize>:
c0001c37:	31 c0                	xor    eax,eax
c0001c39:	c3                   	ret    

c0001c3a <disk_read>:
c0001c3a:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c3f:	0f b6 04 85 40 25 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffcdac0]
c0001c47:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c4b:	e9 b6 f8 01 00       	jmp    c0021506 <fatWrapperReadDisk>

c0001c50 <disk_write>:
c0001c50:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c55:	0f b6 04 85 40 25 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffcdac0]
c0001c5d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c61:	e9 e7 f8 01 00       	jmp    c002154d <fatWrapperWriteDisk>

c0001c66 <disk_ioctl>:
c0001c66:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001c6b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001c6f:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c74:	0f b6 04 85 40 25 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffcdac0]
c0001c7c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c80:	e9 0f f9 01 00       	jmp    c0021594 <fatWrapperIoctl>

c0001c85 <ld_word>:
c0001c85:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c89:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c8c:	c1 e2 08             	shl    edx,0x8
c0001c8f:	09 d0                	or     eax,edx
c0001c91:	c3                   	ret    

c0001c92 <ld_dword>:
c0001c92:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001c96:	89 d1                	mov    ecx,edx
c0001c98:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c9c:	c1 e1 08             	shl    ecx,0x8
c0001c9f:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001ca2:	09 ca                	or     edx,ecx
c0001ca4:	c1 e2 08             	shl    edx,0x8
c0001ca7:	09 d0                	or     eax,edx
c0001ca9:	c3                   	ret    

c0001caa <ld_qword>:
c0001caa:	57                   	push   edi
c0001cab:	56                   	push   esi
c0001cac:	53                   	push   ebx
c0001cad:	31 db                	xor    ebx,ebx
c0001caf:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001cb2:	89 df                	mov    edi,ebx
c0001cb4:	89 ce                	mov    esi,ecx
c0001cb6:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001cba:	0f a4 f7 08          	shld   edi,esi,0x8
c0001cbe:	c1 e6 08             	shl    esi,0x8
c0001cc1:	09 f2                	or     edx,esi
c0001cc3:	89 d6                	mov    esi,edx
c0001cc5:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001cc9:	0f a4 f7 08          	shld   edi,esi,0x8
c0001ccd:	c1 e6 08             	shl    esi,0x8
c0001cd0:	09 f2                	or     edx,esi
c0001cd2:	89 d6                	mov    esi,edx
c0001cd4:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001cd8:	0f a4 f7 08          	shld   edi,esi,0x8
c0001cdc:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001cdf:	c1 e6 08             	shl    esi,0x8
c0001ce2:	89 fb                	mov    ebx,edi
c0001ce4:	09 f2                	or     edx,esi
c0001ce6:	89 d1                	mov    ecx,edx
c0001ce8:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001cec:	c1 e1 08             	shl    ecx,0x8
c0001cef:	89 da                	mov    edx,ebx
c0001cf1:	09 c8                	or     eax,ecx
c0001cf3:	5b                   	pop    ebx
c0001cf4:	5e                   	pop    esi
c0001cf5:	5f                   	pop    edi
c0001cf6:	c3                   	ret    

c0001cf7 <st_word>:
c0001cf7:	66 89 10             	mov    WORD PTR [eax],dx
c0001cfa:	c3                   	ret    

c0001cfb <st_dword>:
c0001cfb:	89 10                	mov    DWORD PTR [eax],edx
c0001cfd:	c3                   	ret    

c0001cfe <st_qword>:
c0001cfe:	89 10                	mov    DWORD PTR [eax],edx
c0001d00:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001d03:	c3                   	ret    

c0001d04 <mem_cpy>:
c0001d04:	85 c9                	test   ecx,ecx
c0001d06:	74 10                	je     c0001d18 <mem_cpy+0x14>
c0001d08:	57                   	push   edi
c0001d09:	01 c1                	add    ecx,eax
c0001d0b:	56                   	push   esi
c0001d0c:	89 c7                	mov    edi,eax
c0001d0e:	89 d6                	mov    esi,edx
c0001d10:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001d11:	39 f9                	cmp    ecx,edi
c0001d13:	75 fb                	jne    c0001d10 <mem_cpy+0xc>
c0001d15:	5e                   	pop    esi
c0001d16:	5f                   	pop    edi
c0001d17:	c3                   	ret    
c0001d18:	c3                   	ret    

c0001d19 <mem_set>:
c0001d19:	01 c1                	add    ecx,eax
c0001d1b:	40                   	inc    eax
c0001d1c:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001d1f:	39 c8                	cmp    eax,ecx
c0001d21:	75 f8                	jne    c0001d1b <mem_set+0x2>
c0001d23:	c3                   	ret    

c0001d24 <mem_cmp>:
c0001d24:	57                   	push   edi
c0001d25:	56                   	push   esi
c0001d26:	89 c6                	mov    esi,eax
c0001d28:	53                   	push   ebx
c0001d29:	46                   	inc    esi
c0001d2a:	42                   	inc    edx
c0001d2b:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001d2f:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001d33:	29 fb                	sub    ebx,edi
c0001d35:	89 cf                	mov    edi,ecx
c0001d37:	29 f7                	sub    edi,esi
c0001d39:	01 c7                	add    edi,eax
c0001d3b:	74 04                	je     c0001d41 <mem_cmp+0x1d>
c0001d3d:	85 db                	test   ebx,ebx
c0001d3f:	74 e8                	je     c0001d29 <mem_cmp+0x5>
c0001d41:	89 d8                	mov    eax,ebx
c0001d43:	5b                   	pop    ebx
c0001d44:	5e                   	pop    esi
c0001d45:	5f                   	pop    edi
c0001d46:	c3                   	ret    

c0001d47 <chk_chr>:
c0001d47:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001d4a:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001d4d:	74 07                	je     c0001d56 <chk_chr+0xf>
c0001d4f:	39 d1                	cmp    ecx,edx
c0001d51:	74 03                	je     c0001d56 <chk_chr+0xf>
c0001d53:	40                   	inc    eax
c0001d54:	eb f1                	jmp    c0001d47 <chk_chr>
c0001d56:	89 c8                	mov    eax,ecx
c0001d58:	c3                   	ret    

c0001d59 <dbc_1st>:
c0001d59:	31 c0                	xor    eax,eax
c0001d5b:	c3                   	ret    

c0001d5c <dbc_2nd>:
c0001d5c:	31 c0                	xor    eax,eax
c0001d5e:	c3                   	ret    

c0001d5f <tchar2uni>:
c0001d5f:	57                   	push   edi
c0001d60:	89 c7                	mov    edi,eax
c0001d62:	56                   	push   esi
c0001d63:	53                   	push   ebx
c0001d64:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001d66:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001d68:	8d 73 01             	lea    esi,[ebx+0x1]
c0001d6b:	84 c9                	test   cl,cl
c0001d6d:	78 0a                	js     c0001d79 <tchar2uni+0x1a>
c0001d6f:	0f b6 d1             	movzx  edx,cl
c0001d72:	89 f3                	mov    ebx,esi
c0001d74:	e9 9f 00 00 00       	jmp    c0001e18 <tchar2uni+0xb9>
c0001d79:	88 ca                	mov    dl,cl
c0001d7b:	83 e2 e0             	and    edx,0xffffffe0
c0001d7e:	80 fa c0             	cmp    dl,0xc0
c0001d81:	75 0c                	jne    c0001d8f <tchar2uni+0x30>
c0001d83:	89 ca                	mov    edx,ecx
c0001d85:	b9 01 00 00 00       	mov    ecx,0x1
c0001d8a:	83 e2 1f             	and    edx,0x1f
c0001d8d:	eb 2e                	jmp    c0001dbd <tchar2uni+0x5e>
c0001d8f:	88 ca                	mov    dl,cl
c0001d91:	83 e2 f0             	and    edx,0xfffffff0
c0001d94:	80 fa e0             	cmp    dl,0xe0
c0001d97:	75 0c                	jne    c0001da5 <tchar2uni+0x46>
c0001d99:	89 ca                	mov    edx,ecx
c0001d9b:	b9 02 00 00 00       	mov    ecx,0x2
c0001da0:	83 e2 0f             	and    edx,0xf
c0001da3:	eb 18                	jmp    c0001dbd <tchar2uni+0x5e>
c0001da5:	88 ca                	mov    dl,cl
c0001da7:	83 e2 f8             	and    edx,0xfffffff8
c0001daa:	88 d0                	mov    al,dl
c0001dac:	83 ca ff             	or     edx,0xffffffff
c0001daf:	3c f0                	cmp    al,0xf0
c0001db1:	75 6c                	jne    c0001e1f <tchar2uni+0xc0>
c0001db3:	89 ca                	mov    edx,ecx
c0001db5:	b9 03 00 00 00       	mov    ecx,0x3
c0001dba:	83 e2 07             	and    edx,0x7
c0001dbd:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001dc1:	46                   	inc    esi
c0001dc2:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001dc5:	88 c8                	mov    al,cl
c0001dc7:	83 e0 c0             	and    eax,0xffffffc0
c0001dca:	3c 80                	cmp    al,0x80
c0001dcc:	75 4e                	jne    c0001e1c <tchar2uni+0xbd>
c0001dce:	c1 e2 06             	shl    edx,0x6
c0001dd1:	83 e1 3f             	and    ecx,0x3f
c0001dd4:	09 ca                	or     edx,ecx
c0001dd6:	39 de                	cmp    esi,ebx
c0001dd8:	75 e7                	jne    c0001dc1 <tchar2uni+0x62>
c0001dda:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001ddd:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001de3:	77 37                	ja     c0001e1c <tchar2uni+0xbd>
c0001de5:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001deb:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001df1:	76 29                	jbe    c0001e1c <tchar2uni+0xbd>
c0001df3:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001df9:	76 1d                	jbe    c0001e18 <tchar2uni+0xb9>
c0001dfb:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001e01:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001e07:	c1 e1 06             	shl    ecx,0x6
c0001e0a:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001e10:	09 ca                	or     edx,ecx
c0001e12:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001e18:	89 1f                	mov    DWORD PTR [edi],ebx
c0001e1a:	eb 03                	jmp    c0001e1f <tchar2uni+0xc0>
c0001e1c:	83 ca ff             	or     edx,0xffffffff
c0001e1f:	5b                   	pop    ebx
c0001e20:	89 d0                	mov    eax,edx
c0001e22:	5e                   	pop    esi
c0001e23:	5f                   	pop    edi
c0001e24:	c3                   	ret    

c0001e25 <put_utf>:
c0001e25:	53                   	push   ebx
c0001e26:	83 f8 7f             	cmp    eax,0x7f
c0001e29:	89 c3                	mov    ebx,eax
c0001e2b:	b0 00                	mov    al,0x0
c0001e2d:	77 11                	ja     c0001e40 <put_utf+0x1b>
c0001e2f:	85 c9                	test   ecx,ecx
c0001e31:	0f 84 e5 00 00 00    	je     c0001f1c <put_utf+0xf7>
c0001e37:	88 1a                	mov    BYTE PTR [edx],bl
c0001e39:	b0 01                	mov    al,0x1
c0001e3b:	e9 dc 00 00 00       	jmp    c0001f1c <put_utf+0xf7>
c0001e40:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001e46:	77 23                	ja     c0001e6b <put_utf+0x46>
c0001e48:	83 f9 01             	cmp    ecx,0x1
c0001e4b:	0f 86 cb 00 00 00    	jbe    c0001f1c <put_utf+0xf7>
c0001e51:	89 d8                	mov    eax,ebx
c0001e53:	83 e3 3f             	and    ebx,0x3f
c0001e56:	c1 e8 06             	shr    eax,0x6
c0001e59:	83 cb 80             	or     ebx,0xffffff80
c0001e5c:	83 c8 c0             	or     eax,0xffffffc0
c0001e5f:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001e62:	88 02                	mov    BYTE PTR [edx],al
c0001e64:	b0 02                	mov    al,0x2
c0001e66:	e9 b1 00 00 00       	jmp    c0001f1c <put_utf+0xf7>
c0001e6b:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001e71:	77 40                	ja     c0001eb3 <put_utf+0x8e>
c0001e73:	83 f9 02             	cmp    ecx,0x2
c0001e76:	0f 86 a0 00 00 00    	jbe    c0001f1c <put_utf+0xf7>
c0001e7c:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001e82:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001e88:	0f 86 8e 00 00 00    	jbe    c0001f1c <put_utf+0xf7>
c0001e8e:	89 d8                	mov    eax,ebx
c0001e90:	c1 e8 0c             	shr    eax,0xc
c0001e93:	83 c8 e0             	or     eax,0xffffffe0
c0001e96:	88 02                	mov    BYTE PTR [edx],al
c0001e98:	89 d8                	mov    eax,ebx
c0001e9a:	83 e3 3f             	and    ebx,0x3f
c0001e9d:	c1 e8 06             	shr    eax,0x6
c0001ea0:	83 cb 80             	or     ebx,0xffffff80
c0001ea3:	83 e0 3f             	and    eax,0x3f
c0001ea6:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001ea9:	83 c8 80             	or     eax,0xffffff80
c0001eac:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001eaf:	b0 03                	mov    al,0x3
c0001eb1:	eb 69                	jmp    c0001f1c <put_utf+0xf7>
c0001eb3:	83 f9 03             	cmp    ecx,0x3
c0001eb6:	76 64                	jbe    c0001f1c <put_utf+0xf7>
c0001eb8:	89 d9                	mov    ecx,ebx
c0001eba:	0f b7 c3             	movzx  eax,bx
c0001ebd:	66 31 c9             	xor    cx,cx
c0001ec0:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001ec6:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001ecc:	c1 e9 06             	shr    ecx,0x6
c0001ecf:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001ed5:	77 43                	ja     c0001f1a <put_utf+0xf5>
c0001ed7:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001edd:	77 3b                	ja     c0001f1a <put_utf+0xf5>
c0001edf:	09 cb                	or     ebx,ecx
c0001ee1:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001ee7:	89 d8                	mov    eax,ebx
c0001ee9:	c1 e8 12             	shr    eax,0x12
c0001eec:	83 c8 f0             	or     eax,0xfffffff0
c0001eef:	88 02                	mov    BYTE PTR [edx],al
c0001ef1:	89 d8                	mov    eax,ebx
c0001ef3:	c1 e8 0c             	shr    eax,0xc
c0001ef6:	83 e0 3f             	and    eax,0x3f
c0001ef9:	83 c8 80             	or     eax,0xffffff80
c0001efc:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001eff:	89 d8                	mov    eax,ebx
c0001f01:	83 e3 3f             	and    ebx,0x3f
c0001f04:	c1 e8 06             	shr    eax,0x6
c0001f07:	83 cb 80             	or     ebx,0xffffff80
c0001f0a:	83 e0 3f             	and    eax,0x3f
c0001f0d:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001f10:	83 c8 80             	or     eax,0xffffff80
c0001f13:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001f16:	b0 04                	mov    al,0x4
c0001f18:	eb 02                	jmp    c0001f1c <put_utf+0xf7>
c0001f1a:	31 c0                	xor    eax,eax
c0001f1c:	5b                   	pop    ebx
c0001f1d:	c3                   	ret    

c0001f1e <clst2sect>:
c0001f1e:	89 c1                	mov    ecx,eax
c0001f20:	83 ea 02             	sub    edx,0x2
c0001f23:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001f26:	83 e8 02             	sub    eax,0x2
c0001f29:	39 d0                	cmp    eax,edx
c0001f2b:	76 0d                	jbe    c0001f3a <clst2sect+0x1c>
c0001f2d:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001f31:	f7 e2                	mul    edx
c0001f33:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001f36:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001f39:	c3                   	ret    
c0001f3a:	31 c0                	xor    eax,eax
c0001f3c:	31 d2                	xor    edx,edx
c0001f3e:	c3                   	ret    

c0001f3f <clmt_clust>:
c0001f3f:	57                   	push   edi
c0001f40:	89 cf                	mov    edi,ecx
c0001f42:	56                   	push   esi
c0001f43:	89 d6                	mov    esi,edx
c0001f45:	53                   	push   ebx
c0001f46:	0f ac fe 09          	shrd   esi,edi,0x9
c0001f4a:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001f4d:	89 f2                	mov    edx,esi
c0001f4f:	8b 00                	mov    eax,DWORD PTR [eax]
c0001f51:	c1 ef 09             	shr    edi,0x9
c0001f54:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001f58:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001f5b:	89 f9                	mov    ecx,edi
c0001f5d:	31 ff                	xor    edi,edi
c0001f5f:	57                   	push   edi
c0001f60:	56                   	push   esi
c0001f61:	51                   	push   ecx
c0001f62:	52                   	push   edx
c0001f63:	e8 6c 52 02 00       	call   c00271d4 <__udivdi3>
c0001f68:	83 c4 10             	add    esp,0x10
c0001f6b:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001f6d:	85 d2                	test   edx,edx
c0001f6f:	74 10                	je     c0001f81 <clmt_clust+0x42>
c0001f71:	39 d0                	cmp    eax,edx
c0001f73:	72 07                	jb     c0001f7c <clmt_clust+0x3d>
c0001f75:	29 d0                	sub    eax,edx
c0001f77:	83 c3 08             	add    ebx,0x8
c0001f7a:	eb ef                	jmp    c0001f6b <clmt_clust+0x2c>
c0001f7c:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001f7f:	89 c2                	mov    edx,eax
c0001f81:	5b                   	pop    ebx
c0001f82:	89 d0                	mov    eax,edx
c0001f84:	5e                   	pop    esi
c0001f85:	5f                   	pop    edi
c0001f86:	c3                   	ret    

c0001f87 <pick_lfn>:
c0001f87:	55                   	push   ebp
c0001f88:	57                   	push   edi
c0001f89:	56                   	push   esi
c0001f8a:	89 d6                	mov    esi,edx
c0001f8c:	53                   	push   ebx
c0001f8d:	89 c3                	mov    ebx,eax
c0001f8f:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001f92:	e8 ee fc ff ff       	call   c0001c85 <ld_word>
c0001f97:	66 85 c0             	test   ax,ax
c0001f9a:	74 04                	je     c0001fa0 <pick_lfn+0x19>
c0001f9c:	31 c0                	xor    eax,eax
c0001f9e:	eb 5c                	jmp    c0001ffc <pick_lfn+0x75>
c0001fa0:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001fa3:	bd 01 00 00 00       	mov    ebp,0x1
c0001fa8:	83 e1 bf             	and    ecx,0xffffffbf
c0001fab:	31 ff                	xor    edi,edi
c0001fad:	49                   	dec    ecx
c0001fae:	6b c9 0d             	imul   ecx,ecx,0xd
c0001fb1:	0f b6 87 60 9d 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffd62a0]
c0001fb8:	01 f0                	add    eax,esi
c0001fba:	e8 c6 fc ff ff       	call   c0001c85 <ld_word>
c0001fbf:	66 85 ed             	test   bp,bp
c0001fc2:	74 11                	je     c0001fd5 <pick_lfn+0x4e>
c0001fc4:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fca:	77 d0                	ja     c0001f9c <pick_lfn+0x15>
c0001fcc:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001fd0:	89 c5                	mov    ebp,eax
c0001fd2:	41                   	inc    ecx
c0001fd3:	eb 04                	jmp    c0001fd9 <pick_lfn+0x52>
c0001fd5:	66 40                	inc    ax
c0001fd7:	75 c3                	jne    c0001f9c <pick_lfn+0x15>
c0001fd9:	47                   	inc    edi
c0001fda:	83 ff 0d             	cmp    edi,0xd
c0001fdd:	75 d2                	jne    c0001fb1 <pick_lfn+0x2a>
c0001fdf:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001fe2:	74 13                	je     c0001ff7 <pick_lfn+0x70>
c0001fe4:	66 85 ed             	test   bp,bp
c0001fe7:	74 0e                	je     c0001ff7 <pick_lfn+0x70>
c0001fe9:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fef:	77 ab                	ja     c0001f9c <pick_lfn+0x15>
c0001ff1:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001ff7:	b8 01 00 00 00       	mov    eax,0x1
c0001ffc:	5b                   	pop    ebx
c0001ffd:	5e                   	pop    esi
c0001ffe:	5f                   	pop    edi
c0001fff:	5d                   	pop    ebp
c0002000:	c3                   	ret    

c0002001 <put_lfn>:
c0002001:	55                   	push   ebp
c0002002:	31 ed                	xor    ebp,ebp
c0002004:	57                   	push   edi
c0002005:	89 d7                	mov    edi,edx
c0002007:	56                   	push   esi
c0002008:	31 f6                	xor    esi,esi
c000200a:	53                   	push   ebx
c000200b:	83 ec 08             	sub    esp,0x8
c000200e:	89 04 24             	mov    DWORD PTR [esp],eax
c0002011:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0002015:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0002019:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c000201f:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0002022:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002025:	31 d2                	xor    edx,edx
c0002027:	e8 cb fc ff ff       	call   c0001cf7 <st_word>
c000202c:	0f b6 d9             	movzx  ebx,cl
c000202f:	4b                   	dec    ebx
c0002030:	6b db 0d             	imul   ebx,ebx,0xd
c0002033:	66 83 fe ff          	cmp    si,0xffff
c0002037:	74 08                	je     c0002041 <put_lfn+0x40>
c0002039:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000203c:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0002040:	43                   	inc    ebx
c0002041:	0f b6 85 60 9d 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffd62a0]
c0002048:	0f b7 d6             	movzx  edx,si
c000204b:	01 f8                	add    eax,edi
c000204d:	e8 a5 fc ff ff       	call   c0001cf7 <st_word>
c0002052:	66 85 f6             	test   si,si
c0002055:	75 03                	jne    c000205a <put_lfn+0x59>
c0002057:	83 ce ff             	or     esi,0xffffffff
c000205a:	45                   	inc    ebp
c000205b:	83 fd 0d             	cmp    ebp,0xd
c000205e:	75 d3                	jne    c0002033 <put_lfn+0x32>
c0002060:	66 46                	inc    si
c0002062:	74 0a                	je     c000206e <put_lfn+0x6d>
c0002064:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002067:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c000206c:	75 09                	jne    c0002077 <put_lfn+0x76>
c000206e:	88 c8                	mov    al,cl
c0002070:	83 c8 40             	or     eax,0x40
c0002073:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0002077:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000207b:	88 07                	mov    BYTE PTR [edi],al
c000207d:	83 c4 08             	add    esp,0x8
c0002080:	5b                   	pop    ebx
c0002081:	5e                   	pop    esi
c0002082:	5f                   	pop    edi
c0002083:	5d                   	pop    ebp
c0002084:	c3                   	ret    

c0002085 <gen_numname>:
c0002085:	57                   	push   edi
c0002086:	89 cf                	mov    edi,ecx
c0002088:	56                   	push   esi
c0002089:	b9 0b 00 00 00       	mov    ecx,0xb
c000208e:	53                   	push   ebx
c000208f:	89 c6                	mov    esi,eax
c0002091:	83 ec 10             	sub    esp,0x10
c0002094:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0002098:	e8 67 fc ff ff       	call   c0001d04 <mem_cpy>
c000209d:	83 fb 05             	cmp    ebx,0x5
c00020a0:	76 2d                	jbe    c00020cf <gen_numname+0x4a>
c00020a2:	66 8b 07             	mov    ax,WORD PTR [edi]
c00020a5:	66 85 c0             	test   ax,ax
c00020a8:	74 25                	je     c00020cf <gen_numname+0x4a>
c00020aa:	83 c7 02             	add    edi,0x2
c00020ad:	ba 10 00 00 00       	mov    edx,0x10
c00020b2:	01 db                	add    ebx,ebx
c00020b4:	89 c1                	mov    ecx,eax
c00020b6:	66 d1 e8             	shr    ax,1
c00020b9:	83 e1 01             	and    ecx,0x1
c00020bc:	01 cb                	add    ebx,ecx
c00020be:	0f ba e3 10          	bt     ebx,0x10
c00020c2:	73 06                	jae    c00020ca <gen_numname+0x45>
c00020c4:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00020ca:	4a                   	dec    edx
c00020cb:	75 e5                	jne    c00020b2 <gen_numname+0x2d>
c00020cd:	eb d3                	jmp    c00020a2 <gen_numname+0x1d>
c00020cf:	b8 07 00 00 00       	mov    eax,0x7
c00020d4:	88 d9                	mov    cl,bl
c00020d6:	83 e1 0f             	and    ecx,0xf
c00020d9:	8d 51 30             	lea    edx,[ecx+0x30]
c00020dc:	80 fa 39             	cmp    dl,0x39
c00020df:	76 03                	jbe    c00020e4 <gen_numname+0x5f>
c00020e1:	8d 51 37             	lea    edx,[ecx+0x37]
c00020e4:	8d 48 ff             	lea    ecx,[eax-0x1]
c00020e7:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00020eb:	89 da                	mov    edx,ebx
c00020ed:	c1 ea 04             	shr    edx,0x4
c00020f0:	83 fb 0f             	cmp    ebx,0xf
c00020f3:	76 06                	jbe    c00020fb <gen_numname+0x76>
c00020f5:	89 c8                	mov    eax,ecx
c00020f7:	89 d3                	mov    ebx,edx
c00020f9:	eb d9                	jmp    c00020d4 <gen_numname+0x4f>
c00020fb:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c0002100:	31 d2                	xor    edx,edx
c0002102:	8d 58 fe             	lea    ebx,[eax-0x2]
c0002105:	8d 04 16             	lea    eax,[esi+edx*1]
c0002108:	39 ca                	cmp    edx,ecx
c000210a:	73 18                	jae    c0002124 <gen_numname+0x9f>
c000210c:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000210f:	3c 20                	cmp    al,0x20
c0002111:	74 11                	je     c0002124 <gen_numname+0x9f>
c0002113:	e8 41 fc ff ff       	call   c0001d59 <dbc_1st>
c0002118:	85 c0                	test   eax,eax
c000211a:	74 05                	je     c0002121 <gen_numname+0x9c>
c000211c:	39 d3                	cmp    ebx,edx
c000211e:	74 04                	je     c0002124 <gen_numname+0x9f>
c0002120:	42                   	inc    edx
c0002121:	42                   	inc    edx
c0002122:	eb e1                	jmp    c0002105 <gen_numname+0x80>
c0002124:	b0 20                	mov    al,0x20
c0002126:	83 f9 07             	cmp    ecx,0x7
c0002129:	77 05                	ja     c0002130 <gen_numname+0xab>
c000212b:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c000212f:	41                   	inc    ecx
c0002130:	42                   	inc    edx
c0002131:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002135:	83 fa 07             	cmp    edx,0x7
c0002138:	76 ea                	jbe    c0002124 <gen_numname+0x9f>
c000213a:	83 c4 10             	add    esp,0x10
c000213d:	5b                   	pop    ebx
c000213e:	5e                   	pop    esi
c000213f:	5f                   	pop    edi
c0002140:	c3                   	ret    

c0002141 <sum_sfn>:
c0002141:	31 c9                	xor    ecx,ecx
c0002143:	31 d2                	xor    edx,edx
c0002145:	d0 ca                	ror    dl,1
c0002147:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c000214a:	41                   	inc    ecx
c000214b:	83 f9 0b             	cmp    ecx,0xb
c000214e:	75 f5                	jne    c0002145 <sum_sfn+0x4>
c0002150:	88 d0                	mov    al,dl
c0002152:	c3                   	ret    

c0002153 <xdir_sum>:
c0002153:	56                   	push   esi
c0002154:	31 c9                	xor    ecx,ecx
c0002156:	53                   	push   ebx
c0002157:	31 d2                	xor    edx,edx
c0002159:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c000215d:	43                   	inc    ebx
c000215e:	c1 e3 05             	shl    ebx,0x5
c0002161:	83 fa 02             	cmp    edx,0x2
c0002164:	74 0b                	je     c0002171 <xdir_sum+0x1e>
c0002166:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c000216a:	66 d1 c9             	ror    cx,1
c000216d:	01 f1                	add    ecx,esi
c000216f:	eb 05                	jmp    c0002176 <xdir_sum+0x23>
c0002171:	ba 03 00 00 00       	mov    edx,0x3
c0002176:	42                   	inc    edx
c0002177:	39 d3                	cmp    ebx,edx
c0002179:	77 e6                	ja     c0002161 <xdir_sum+0xe>
c000217b:	89 c8                	mov    eax,ecx
c000217d:	5b                   	pop    ebx
c000217e:	5e                   	pop    esi
c000217f:	c3                   	ret    

c0002180 <xsum32>:
c0002180:	d1 ca                	ror    edx,1
c0002182:	0f b6 c0             	movzx  eax,al
c0002185:	01 d0                	add    eax,edx
c0002187:	c3                   	ret    

c0002188 <get_xfileinfo>:
c0002188:	55                   	push   ebp
c0002189:	31 c9                	xor    ecx,ecx
c000218b:	57                   	push   edi
c000218c:	bd 40 00 00 00       	mov    ebp,0x40
c0002191:	56                   	push   esi
c0002192:	31 ff                	xor    edi,edi
c0002194:	53                   	push   ebx
c0002195:	89 c6                	mov    esi,eax
c0002197:	83 ec 0c             	sub    esp,0xc
c000219a:	89 d3                	mov    ebx,edx
c000219c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00021a3:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c00021a7:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c00021aa:	76 6d                	jbe    c0002219 <get_xfileinfo+0x91>
c00021ac:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c00021b2:	76 0b                	jbe    c00021bf <get_xfileinfo+0x37>
c00021b4:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c00021b8:	bf 01 00 00 00       	mov    edi,0x1
c00021bd:	eb 63                	jmp    c0002222 <get_xfileinfo+0x9a>
c00021bf:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c00021c5:	75 03                	jne    c00021ca <get_xfileinfo+0x42>
c00021c7:	83 c5 02             	add    ebp,0x2
c00021ca:	8d 04 2e             	lea    eax,[esi+ebp*1]
c00021cd:	83 c5 02             	add    ebp,0x2
c00021d0:	e8 b0 fa ff ff       	call   c0001c85 <ld_word>
c00021d5:	ff 04 24             	inc    DWORD PTR [esp]
c00021d8:	66 85 c9             	test   cx,cx
c00021db:	75 0d                	jne    c00021ea <get_xfileinfo+0x62>
c00021dd:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c00021e3:	66 81 fa ff 07       	cmp    dx,0x7ff
c00021e8:	76 2b                	jbe    c0002215 <get_xfileinfo+0x8d>
c00021ea:	c1 e1 10             	shl    ecx,0x10
c00021ed:	ba ff 00 00 00       	mov    edx,0xff
c00021f2:	0f b7 c0             	movzx  eax,ax
c00021f5:	29 fa                	sub    edx,edi
c00021f7:	09 c8                	or     eax,ecx
c00021f9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00021fd:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0002201:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0002205:	e8 1b fc ff ff       	call   c0001e25 <put_utf>
c000220a:	84 c0                	test   al,al
c000220c:	74 a6                	je     c00021b4 <get_xfileinfo+0x2c>
c000220e:	0f b6 c0             	movzx  eax,al
c0002211:	01 c7                	add    edi,eax
c0002213:	31 c0                	xor    eax,eax
c0002215:	89 c1                	mov    ecx,eax
c0002217:	eb 8a                	jmp    c00021a3 <get_xfileinfo+0x1b>
c0002219:	85 ff                	test   edi,edi
c000221b:	74 97                	je     c00021b4 <get_xfileinfo+0x2c>
c000221d:	66 85 c9             	test   cx,cx
c0002220:	75 92                	jne    c00021b4 <get_xfileinfo+0x2c>
c0002222:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0002227:	31 c0                	xor    eax,eax
c0002229:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c000222d:	31 d2                	xor    edx,edx
c000222f:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c0002232:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c0002235:	80 e1 10             	and    cl,0x10
c0002238:	75 08                	jne    c0002242 <get_xfileinfo+0xba>
c000223a:	8d 46 38             	lea    eax,[esi+0x38]
c000223d:	e8 68 fa ff ff       	call   c0001caa <ld_qword>
c0002242:	89 03                	mov    DWORD PTR [ebx],eax
c0002244:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0002247:	8d 46 0c             	lea    eax,[esi+0xc]
c000224a:	e8 36 fa ff ff       	call   c0001c85 <ld_word>
c000224f:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0002253:	8d 46 0e             	lea    eax,[esi+0xe]
c0002256:	e8 2a fa ff ff       	call   c0001c85 <ld_word>
c000225b:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c000225f:	83 c4 0c             	add    esp,0xc
c0002262:	5b                   	pop    ebx
c0002263:	5e                   	pop    esi
c0002264:	5f                   	pop    edi
c0002265:	5d                   	pop    ebp
c0002266:	c3                   	ret    

c0002267 <get_ldnumber>:
c0002267:	8b 10                	mov    edx,DWORD PTR [eax]
c0002269:	85 d2                	test   edx,edx
c000226b:	74 14                	je     c0002281 <get_ldnumber+0x1a>
c000226d:	56                   	push   esi
c000226e:	53                   	push   ebx
c000226f:	89 d3                	mov    ebx,edx
c0002271:	43                   	inc    ebx
c0002272:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0002275:	80 f9 1f             	cmp    cl,0x1f
c0002278:	76 0d                	jbe    c0002287 <get_ldnumber+0x20>
c000227a:	80 f9 3a             	cmp    cl,0x3a
c000227d:	75 f2                	jne    c0002271 <get_ldnumber+0xa>
c000227f:	eb 0a                	jmp    c000228b <get_ldnumber+0x24>
c0002281:	83 c9 ff             	or     ecx,0xffffffff
c0002284:	89 c8                	mov    eax,ecx
c0002286:	c3                   	ret    
c0002287:	31 c9                	xor    ecx,ecx
c0002289:	eb 24                	jmp    c00022af <get_ldnumber+0x48>
c000228b:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c000228e:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002291:	80 f9 09             	cmp    cl,0x9
c0002294:	77 16                	ja     c00022ac <get_ldnumber+0x45>
c0002296:	83 c2 02             	add    edx,0x2
c0002299:	83 c9 ff             	or     ecx,0xffffffff
c000229c:	39 d3                	cmp    ebx,edx
c000229e:	75 0f                	jne    c00022af <get_ldnumber+0x48>
c00022a0:	89 f2                	mov    edx,esi
c00022a2:	89 18                	mov    DWORD PTR [eax],ebx
c00022a4:	0f be ca             	movsx  ecx,dl
c00022a7:	83 e9 30             	sub    ecx,0x30
c00022aa:	eb 03                	jmp    c00022af <get_ldnumber+0x48>
c00022ac:	83 c9 ff             	or     ecx,0xffffffff
c00022af:	89 c8                	mov    eax,ecx
c00022b1:	5b                   	pop    ebx
c00022b2:	5e                   	pop    esi
c00022b3:	c3                   	ret    

c00022b4 <crc32>:
c00022b4:	56                   	push   esi
c00022b5:	89 d6                	mov    esi,edx
c00022b7:	53                   	push   ebx
c00022b8:	b2 01                	mov    dl,0x1
c00022ba:	bb 08 00 00 00       	mov    ebx,0x8
c00022bf:	89 f1                	mov    ecx,esi
c00022c1:	84 d1                	test   cl,dl
c00022c3:	0f 95 c1             	setne  cl
c00022c6:	0f b6 c9             	movzx  ecx,cl
c00022c9:	31 c1                	xor    ecx,eax
c00022cb:	89 c8                	mov    eax,ecx
c00022cd:	d1 e8                	shr    eax,1
c00022cf:	80 e1 01             	and    cl,0x1
c00022d2:	74 05                	je     c00022d9 <crc32+0x25>
c00022d4:	35 20 83 b8 ed       	xor    eax,0xedb88320
c00022d9:	d1 e2                	shl    edx,1
c00022db:	4b                   	dec    ebx
c00022dc:	75 e1                	jne    c00022bf <crc32+0xb>
c00022de:	5b                   	pop    ebx
c00022df:	5e                   	pop    esi
c00022e0:	c3                   	ret    

c00022e1 <test_gpt_header>:
c00022e1:	55                   	push   ebp
c00022e2:	b9 10 00 00 00       	mov    ecx,0x10
c00022e7:	57                   	push   edi
c00022e8:	ba 60 9c 02 c0       	mov    edx,0xc0029c60
c00022ed:	56                   	push   esi
c00022ee:	31 ff                	xor    edi,edi
c00022f0:	53                   	push   ebx
c00022f1:	89 c3                	mov    ebx,eax
c00022f3:	e8 2c fa ff ff       	call   c0001d24 <mem_cmp>
c00022f8:	85 c0                	test   eax,eax
c00022fa:	75 55                	jne    c0002351 <test_gpt_header+0x70>
c00022fc:	89 c7                	mov    edi,eax
c00022fe:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c0002303:	83 ce ff             	or     esi,0xffffffff
c0002306:	31 d2                	xor    edx,edx
c0002308:	83 fd 03             	cmp    ebp,0x3
c000230b:	76 05                	jbe    c0002312 <test_gpt_header+0x31>
c000230d:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c0002312:	89 f0                	mov    eax,esi
c0002314:	45                   	inc    ebp
c0002315:	e8 9a ff ff ff       	call   c00022b4 <crc32>
c000231a:	83 fd 4c             	cmp    ebp,0x4c
c000231d:	89 c6                	mov    esi,eax
c000231f:	75 e5                	jne    c0002306 <test_gpt_header+0x25>
c0002321:	8d 43 10             	lea    eax,[ebx+0x10]
c0002324:	f7 d6                	not    esi
c0002326:	e8 67 f9 ff ff       	call   c0001c92 <ld_dword>
c000232b:	39 c6                	cmp    esi,eax
c000232d:	75 22                	jne    c0002351 <test_gpt_header+0x70>
c000232f:	8d 43 54             	lea    eax,[ebx+0x54]
c0002332:	e8 5b f9 ff ff       	call   c0001c92 <ld_dword>
c0002337:	83 c0 80             	add    eax,0xffffff80
c000233a:	75 15                	jne    c0002351 <test_gpt_header+0x70>
c000233c:	8d 43 50             	lea    eax,[ebx+0x50]
c000233f:	e8 4e f9 ff ff       	call   c0001c92 <ld_dword>
c0002344:	3d 80 00 00 00       	cmp    eax,0x80
c0002349:	0f 96 c0             	setbe  al
c000234c:	0f b6 c0             	movzx  eax,al
c000234f:	89 c7                	mov    edi,eax
c0002351:	5b                   	pop    ebx
c0002352:	89 f8                	mov    eax,edi
c0002354:	5e                   	pop    esi
c0002355:	5f                   	pop    edi
c0002356:	5d                   	pop    ebp
c0002357:	c3                   	ret    

c0002358 <make_rand>:
c0002358:	56                   	push   esi
c0002359:	85 c0                	test   eax,eax
c000235b:	53                   	push   ebx
c000235c:	75 05                	jne    c0002363 <make_rand+0xb>
c000235e:	b8 01 00 00 00       	mov    eax,0x1
c0002363:	01 d1                	add    ecx,edx
c0002365:	bb 08 00 00 00       	mov    ebx,0x8
c000236a:	89 c6                	mov    esi,eax
c000236c:	d1 e8                	shr    eax,1
c000236e:	83 e6 01             	and    esi,0x1
c0002371:	85 f6                	test   esi,esi
c0002373:	74 05                	je     c000237a <make_rand+0x22>
c0002375:	35 00 00 00 a3       	xor    eax,0xa3000000
c000237a:	4b                   	dec    ebx
c000237b:	75 ed                	jne    c000236a <make_rand+0x12>
c000237d:	42                   	inc    edx
c000237e:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c0002381:	39 ca                	cmp    edx,ecx
c0002383:	75 e0                	jne    c0002365 <make_rand+0xd>
c0002385:	5b                   	pop    ebx
c0002386:	5e                   	pop    esi
c0002387:	c3                   	ret    

c0002388 <validate>:
c0002388:	56                   	push   esi
c0002389:	53                   	push   ebx
c000238a:	89 d6                	mov    esi,edx
c000238c:	51                   	push   ecx
c000238d:	85 c0                	test   eax,eax
c000238f:	75 09                	jne    c000239a <validate+0x12>
c0002391:	b8 09 00 00 00       	mov    eax,0x9
c0002396:	31 c9                	xor    ecx,ecx
c0002398:	eb 2f                	jmp    c00023c9 <validate+0x41>
c000239a:	89 c3                	mov    ebx,eax
c000239c:	8b 00                	mov    eax,DWORD PTR [eax]
c000239e:	85 c0                	test   eax,eax
c00023a0:	74 ef                	je     c0002391 <validate+0x9>
c00023a2:	80 38 00             	cmp    BYTE PTR [eax],0x0
c00023a5:	74 ea                	je     c0002391 <validate+0x9>
c00023a7:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c00023ab:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c00023af:	75 e0                	jne    c0002391 <validate+0x9>
c00023b1:	83 ec 0c             	sub    esp,0xc
c00023b4:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00023b8:	50                   	push   eax
c00023b9:	e8 76 f8 ff ff       	call   c0001c34 <disk_status>
c00023be:	83 c4 10             	add    esp,0x10
c00023c1:	a8 01                	test   al,0x1
c00023c3:	75 cc                	jne    c0002391 <validate+0x9>
c00023c5:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00023c7:	31 c0                	xor    eax,eax
c00023c9:	89 0e                	mov    DWORD PTR [esi],ecx
c00023cb:	5a                   	pop    edx
c00023cc:	5b                   	pop    ebx
c00023cd:	5e                   	pop    esi
c00023ce:	c3                   	ret    

c00023cf <sync_window>:
c00023cf:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00023d3:	0f 84 85 00 00 00    	je     c000245e <sync_window+0x8f>
c00023d9:	55                   	push   ebp
c00023da:	8d 68 54             	lea    ebp,[eax+0x54]
c00023dd:	57                   	push   edi
c00023de:	56                   	push   esi
c00023df:	53                   	push   ebx
c00023e0:	89 c3                	mov    ebx,eax
c00023e2:	83 ec 28             	sub    esp,0x28
c00023e5:	6a 01                	push   0x1
c00023e7:	ff 70 50             	push   DWORD PTR [eax+0x50]
c00023ea:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c00023ed:	55                   	push   ebp
c00023ee:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00023f2:	50                   	push   eax
c00023f3:	e8 58 f8 ff ff       	call   c0001c50 <disk_write>
c00023f8:	83 c4 20             	add    esp,0x20
c00023fb:	ba 01 00 00 00       	mov    edx,0x1
c0002400:	85 c0                	test   eax,eax
c0002402:	75 50                	jne    c0002454 <sync_window+0x85>
c0002404:	31 ff                	xor    edi,edi
c0002406:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c0002409:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000240d:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0002411:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0002414:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c0002417:	89 c6                	mov    esi,eax
c0002419:	89 d7                	mov    edi,edx
c000241b:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c000241e:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0002422:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c0002425:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0002429:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c000242d:	73 23                	jae    c0002452 <sync_window+0x83>
c000242f:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002433:	75 1d                	jne    c0002452 <sync_window+0x83>
c0002435:	83 ec 0c             	sub    esp,0xc
c0002438:	6a 01                	push   0x1
c000243a:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000243e:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0002442:	52                   	push   edx
c0002443:	50                   	push   eax
c0002444:	55                   	push   ebp
c0002445:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002449:	50                   	push   eax
c000244a:	e8 01 f8 ff ff       	call   c0001c50 <disk_write>
c000244f:	83 c4 20             	add    esp,0x20
c0002452:	31 d2                	xor    edx,edx
c0002454:	83 c4 1c             	add    esp,0x1c
c0002457:	89 d0                	mov    eax,edx
c0002459:	5b                   	pop    ebx
c000245a:	5e                   	pop    esi
c000245b:	5f                   	pop    edi
c000245c:	5d                   	pop    ebp
c000245d:	c3                   	ret    
c000245e:	31 d2                	xor    edx,edx
c0002460:	89 d0                	mov    eax,edx
c0002462:	c3                   	ret    

c0002463 <move_window>:
c0002463:	56                   	push   esi
c0002464:	53                   	push   ebx
c0002465:	89 c3                	mov    ebx,eax
c0002467:	83 ec 14             	sub    esp,0x14
c000246a:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c000246d:	75 07                	jne    c0002476 <move_window+0x13>
c000246f:	31 f6                	xor    esi,esi
c0002471:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c0002474:	74 59                	je     c00024cf <move_window+0x6c>
c0002476:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000247a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000247e:	89 d8                	mov    eax,ebx
c0002480:	e8 4a ff ff ff       	call   c00023cf <sync_window>
c0002485:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002489:	89 c6                	mov    esi,eax
c000248b:	85 c0                	test   eax,eax
c000248d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002491:	75 3c                	jne    c00024cf <move_window+0x6c>
c0002493:	83 ec 0c             	sub    esp,0xc
c0002496:	8d 43 54             	lea    eax,[ebx+0x54]
c0002499:	6a 01                	push   0x1
c000249b:	51                   	push   ecx
c000249c:	52                   	push   edx
c000249d:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00024a1:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c00024a5:	50                   	push   eax
c00024a6:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00024aa:	50                   	push   eax
c00024ab:	e8 8a f7 ff ff       	call   c0001c3a <disk_read>
c00024b0:	83 c4 20             	add    esp,0x20
c00024b3:	85 c0                	test   eax,eax
c00024b5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00024b9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00024bd:	74 0a                	je     c00024c9 <move_window+0x66>
c00024bf:	83 ca ff             	or     edx,0xffffffff
c00024c2:	be 01 00 00 00       	mov    esi,0x1
c00024c7:	89 d1                	mov    ecx,edx
c00024c9:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c00024cc:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c00024cf:	89 f0                	mov    eax,esi
c00024d1:	83 c4 14             	add    esp,0x14
c00024d4:	5b                   	pop    ebx
c00024d5:	5e                   	pop    esi
c00024d6:	c3                   	ret    

c00024d7 <check_fs>:
c00024d7:	53                   	push   ebx
c00024d8:	89 c3                	mov    ebx,eax
c00024da:	83 ec 08             	sub    esp,0x8
c00024dd:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00024e1:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c00024e8:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c00024ef:	e8 6f ff ff ff       	call   c0002463 <move_window>
c00024f4:	ba 04 00 00 00       	mov    edx,0x4
c00024f9:	85 c0                	test   eax,eax
c00024fb:	0f 85 89 00 00 00    	jne    c000258a <check_fs+0xb3>
c0002501:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c0002507:	e8 79 f7 ff ff       	call   c0001c85 <ld_word>
c000250c:	ba 03 00 00 00       	mov    edx,0x3
c0002511:	66 3d 55 aa          	cmp    ax,0xaa55
c0002515:	75 73                	jne    c000258a <check_fs+0xb3>
c0002517:	ba 80 9d 02 c0       	mov    edx,0xc0029d80
c000251c:	8d 43 54             	lea    eax,[ebx+0x54]
c000251f:	b9 0b 00 00 00       	mov    ecx,0xb
c0002524:	e8 fb f7 ff ff       	call   c0001d24 <mem_cmp>
c0002529:	ba 01 00 00 00       	mov    edx,0x1
c000252e:	85 c0                	test   eax,eax
c0002530:	74 58                	je     c000258a <check_fs+0xb3>
c0002532:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c0002535:	8d 50 18             	lea    edx,[eax+0x18]
c0002538:	80 fa 01             	cmp    dl,0x1
c000253b:	76 09                	jbe    c0002546 <check_fs+0x6f>
c000253d:	ba 02 00 00 00       	mov    edx,0x2
c0002542:	3c eb                	cmp    al,0xeb
c0002544:	75 44                	jne    c000258a <check_fs+0xb3>
c0002546:	ba 50 d2 02 c0       	mov    edx,0xc002d250
c000254b:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c0002551:	b9 03 00 00 00       	mov    ecx,0x3
c0002556:	e8 c9 f7 ff ff       	call   c0001d24 <mem_cmp>
c000255b:	31 d2                	xor    edx,edx
c000255d:	85 c0                	test   eax,eax
c000255f:	74 29                	je     c000258a <check_fs+0xb3>
c0002561:	ba 8c 9d 02 c0       	mov    edx,0xc0029d8c
c0002566:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c000256c:	b9 05 00 00 00       	mov    ecx,0x5
c0002571:	e8 ae f7 ff ff       	call   c0001d24 <mem_cmp>
c0002576:	31 d2                	xor    edx,edx
c0002578:	85 c0                	test   eax,eax
c000257a:	74 0e                	je     c000258a <check_fs+0xb3>
c000257c:	31 d2                	xor    edx,edx
c000257e:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c0002585:	0f 95 c2             	setne  dl
c0002588:	01 d2                	add    edx,edx
c000258a:	89 d0                	mov    eax,edx
c000258c:	83 c4 08             	add    esp,0x8
c000258f:	5b                   	pop    ebx
c0002590:	c3                   	ret    

c0002591 <find_volume>:
c0002591:	55                   	push   ebp
c0002592:	31 c9                	xor    ecx,ecx
c0002594:	57                   	push   edi
c0002595:	56                   	push   esi
c0002596:	89 d6                	mov    esi,edx
c0002598:	53                   	push   ebx
c0002599:	31 d2                	xor    edx,edx
c000259b:	83 ec 3c             	sub    esp,0x3c
c000259e:	89 c3                	mov    ebx,eax
c00025a0:	e8 32 ff ff ff       	call   c00024d7 <check_fs>
c00025a5:	83 f8 02             	cmp    eax,0x2
c00025a8:	74 0e                	je     c00025b8 <find_volume+0x27>
c00025aa:	0f 87 5d 01 00 00    	ja     c000270d <find_volume+0x17c>
c00025b0:	85 f6                	test   esi,esi
c00025b2:	0f 84 55 01 00 00    	je     c000270d <find_volume+0x17c>
c00025b8:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c00025bf:	0f 85 dd 00 00 00    	jne    c00026a2 <find_volume+0x111>
c00025c5:	31 c9                	xor    ecx,ecx
c00025c7:	ba 01 00 00 00       	mov    edx,0x1
c00025cc:	89 d8                	mov    eax,ebx
c00025ce:	e8 90 fe ff ff       	call   c0002463 <move_window>
c00025d3:	85 c0                	test   eax,eax
c00025d5:	74 0a                	je     c00025e1 <find_volume+0x50>
c00025d7:	b8 04 00 00 00       	mov    eax,0x4
c00025dc:	e9 2c 01 00 00       	jmp    c000270d <find_volume+0x17c>
c00025e1:	8d 6b 54             	lea    ebp,[ebx+0x54]
c00025e4:	89 e8                	mov    eax,ebp
c00025e6:	e8 f6 fc ff ff       	call   c00022e1 <test_gpt_header>
c00025eb:	85 c0                	test   eax,eax
c00025ed:	75 0a                	jne    c00025f9 <find_volume+0x68>
c00025ef:	b8 03 00 00 00       	mov    eax,0x3
c00025f4:	e9 14 01 00 00       	jmp    c000270d <find_volume+0x17c>
c00025f9:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00025ff:	e8 8e f6 ff ff       	call   c0001c92 <ld_dword>
c0002604:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002608:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c000260e:	e8 97 f6 ff ff       	call   c0001caa <ld_qword>
c0002613:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000261b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000261f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002623:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000262b:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000262f:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0002633:	74 ba                	je     c00025ef <find_volume+0x5e>
c0002635:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0002639:	31 c9                	xor    ecx,ecx
c000263b:	c1 e7 07             	shl    edi,0x7
c000263e:	89 d8                	mov    eax,ebx
c0002640:	89 fa                	mov    edx,edi
c0002642:	c1 ea 09             	shr    edx,0x9
c0002645:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0002649:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c000264d:	e8 11 fe ff ff       	call   c0002463 <move_window>
c0002652:	85 c0                	test   eax,eax
c0002654:	75 81                	jne    c00025d7 <find_volume+0x46>
c0002656:	81 e7 80 01 00 00    	and    edi,0x180
c000265c:	b9 10 00 00 00       	mov    ecx,0x10
c0002661:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c0002665:	ba 70 9d 02 c0       	mov    edx,0xc0029d70
c000266a:	e8 b5 f6 ff ff       	call   c0001d24 <mem_cmp>
c000266f:	85 c0                	test   eax,eax
c0002671:	75 29                	jne    c000269c <find_volume+0x10b>
c0002673:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0002677:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c000267b:	e8 2a f6 ff ff       	call   c0001caa <ld_qword>
c0002680:	89 d1                	mov    ecx,edx
c0002682:	89 c2                	mov    edx,eax
c0002684:	89 d8                	mov    eax,ebx
c0002686:	e8 4c fe ff ff       	call   c00024d7 <check_fs>
c000268b:	85 f6                	test   esi,esi
c000268d:	75 07                	jne    c0002696 <find_volume+0x105>
c000268f:	83 f8 01             	cmp    eax,0x1
c0002692:	77 08                	ja     c000269c <find_volume+0x10b>
c0002694:	eb 77                	jmp    c000270d <find_volume+0x17c>
c0002696:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c000269a:	74 71                	je     c000270d <find_volume+0x17c>
c000269c:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00026a0:	eb 89                	jmp    c000262b <find_volume+0x9a>
c00026a2:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c00026a6:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c00026ac:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c00026b2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00026b6:	89 cd                	mov    ebp,ecx
c00026b8:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00026bc:	89 f8                	mov    eax,edi
c00026be:	83 c7 10             	add    edi,0x10
c00026c1:	e8 cc f5 ff ff       	call   c0001c92 <ld_dword>
c00026c6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00026ca:	89 01                	mov    DWORD PTR [ecx],eax
c00026cc:	83 c1 04             	add    ecx,0x4
c00026cf:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c00026d3:	75 e3                	jne    c00026b8 <find_volume+0x127>
c00026d5:	31 ff                	xor    edi,edi
c00026d7:	85 f6                	test   esi,esi
c00026d9:	74 03                	je     c00026de <find_volume+0x14d>
c00026db:	8d 7e ff             	lea    edi,[esi-0x1]
c00026de:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c00026e2:	85 d2                	test   edx,edx
c00026e4:	74 14                	je     c00026fa <find_volume+0x169>
c00026e6:	31 c9                	xor    ecx,ecx
c00026e8:	89 d8                	mov    eax,ebx
c00026ea:	e8 e8 fd ff ff       	call   c00024d7 <check_fs>
c00026ef:	83 f8 01             	cmp    eax,0x1
c00026f2:	76 19                	jbe    c000270d <find_volume+0x17c>
c00026f4:	85 f6                	test   esi,esi
c00026f6:	74 0f                	je     c0002707 <find_volume+0x176>
c00026f8:	eb 13                	jmp    c000270d <find_volume+0x17c>
c00026fa:	85 f6                	test   esi,esi
c00026fc:	0f 85 ed fe ff ff    	jne    c00025ef <find_volume+0x5e>
c0002702:	b8 03 00 00 00       	mov    eax,0x3
c0002707:	47                   	inc    edi
c0002708:	83 ff 03             	cmp    edi,0x3
c000270b:	76 d1                	jbe    c00026de <find_volume+0x14d>
c000270d:	83 c4 3c             	add    esp,0x3c
c0002710:	5b                   	pop    ebx
c0002711:	5e                   	pop    esi
c0002712:	5f                   	pop    edi
c0002713:	5d                   	pop    ebp
c0002714:	c3                   	ret    

c0002715 <mount_volume>:
c0002715:	55                   	push   ebp
c0002716:	57                   	push   edi
c0002717:	89 cf                	mov    edi,ecx
c0002719:	56                   	push   esi
c000271a:	53                   	push   ebx
c000271b:	bb 0b 00 00 00       	mov    ebx,0xb
c0002720:	83 ec 3c             	sub    esp,0x3c
c0002723:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0002729:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000272d:	e8 35 fb ff ff       	call   c0002267 <get_ldnumber>
c0002732:	85 c0                	test   eax,eax
c0002734:	0f 88 3a 05 00 00    	js     c0002c74 <mount_volume+0x55f>
c000273a:	8b 2c 85 00 ee 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd1200]
c0002741:	89 c6                	mov    esi,eax
c0002743:	bb 0c 00 00 00       	mov    ebx,0xc
c0002748:	85 ed                	test   ebp,ebp
c000274a:	0f 84 24 05 00 00    	je     c0002c74 <mount_volume+0x55f>
c0002750:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002754:	83 e7 fe             	and    edi,0xfffffffe
c0002757:	89 2a                	mov    DWORD PTR [edx],ebp
c0002759:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c000275d:	74 32                	je     c0002791 <mount_volume+0x7c>
c000275f:	83 ec 0c             	sub    esp,0xc
c0002762:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0002766:	50                   	push   eax
c0002767:	e8 c8 f4 ff ff       	call   c0001c34 <disk_status>
c000276c:	83 c4 10             	add    esp,0x10
c000276f:	a8 01                	test   al,0x1
c0002771:	75 1e                	jne    c0002791 <mount_volume+0x7c>
c0002773:	31 db                	xor    ebx,ebx
c0002775:	89 f9                	mov    ecx,edi
c0002777:	84 c9                	test   cl,cl
c0002779:	0f 84 f5 04 00 00    	je     c0002c74 <mount_volume+0x55f>
c000277f:	a8 04                	test   al,0x4
c0002781:	0f 84 ed 04 00 00    	je     c0002c74 <mount_volume+0x55f>
c0002787:	bb 0a 00 00 00       	mov    ebx,0xa
c000278c:	e9 e3 04 00 00       	jmp    c0002c74 <mount_volume+0x55f>
c0002791:	83 ec 0c             	sub    esp,0xc
c0002794:	89 f0                	mov    eax,esi
c0002796:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c000279a:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c000279d:	0f b6 f0             	movzx  esi,al
c00027a0:	bb 03 00 00 00       	mov    ebx,0x3
c00027a5:	56                   	push   esi
c00027a6:	e8 8c f4 ff ff       	call   c0001c37 <disk_initialize>
c00027ab:	83 c4 10             	add    esp,0x10
c00027ae:	a8 01                	test   al,0x1
c00027b0:	0f 85 be 04 00 00    	jne    c0002c74 <mount_volume+0x55f>
c00027b6:	89 f9                	mov    ecx,edi
c00027b8:	84 c9                	test   cl,cl
c00027ba:	74 04                	je     c00027c0 <mount_volume+0xab>
c00027bc:	a8 04                	test   al,0x4
c00027be:	75 c7                	jne    c0002787 <mount_volume+0x72>
c00027c0:	31 d2                	xor    edx,edx
c00027c2:	89 e8                	mov    eax,ebp
c00027c4:	e8 c8 fd ff ff       	call   c0002591 <find_volume>
c00027c9:	83 f8 04             	cmp    eax,0x4
c00027cc:	75 0a                	jne    c00027d8 <mount_volume+0xc3>
c00027ce:	bb 01 00 00 00       	mov    ebx,0x1
c00027d3:	e9 9c 04 00 00       	jmp    c0002c74 <mount_volume+0x55f>
c00027d8:	83 f8 01             	cmp    eax,0x1
c00027db:	76 0a                	jbe    c00027e7 <mount_volume+0xd2>
c00027dd:	bb 0d 00 00 00       	mov    ebx,0xd
c00027e2:	e9 8d 04 00 00       	jmp    c0002c74 <mount_volume+0x55f>
c00027e7:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c00027ea:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c00027ed:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00027f1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00027f5:	75 17                	jne    c000280e <mount_volume+0xf9>
c00027f7:	b8 0b 00 00 00       	mov    eax,0xb
c00027fc:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c0002801:	75 da                	jne    c00027dd <mount_volume+0xc8>
c0002803:	40                   	inc    eax
c0002804:	83 f8 40             	cmp    eax,0x40
c0002807:	75 f3                	jne    c00027fc <mount_volume+0xe7>
c0002809:	e9 5a 02 00 00       	jmp    c0002a68 <mount_volume+0x353>
c000280e:	8d 45 5f             	lea    eax,[ebp+0x5f]
c0002811:	e8 6f f4 ff ff       	call   c0001c85 <ld_word>
c0002816:	66 3d 00 02          	cmp    ax,0x200
c000281a:	75 c1                	jne    c00027dd <mount_volume+0xc8>
c000281c:	8d 45 6a             	lea    eax,[ebp+0x6a]
c000281f:	e8 61 f4 ff ff       	call   c0001c85 <ld_word>
c0002824:	0f b7 c0             	movzx  eax,ax
c0002827:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000282b:	85 c0                	test   eax,eax
c000282d:	75 0c                	jne    c000283b <mount_volume+0x126>
c000282f:	8d 45 78             	lea    eax,[ebp+0x78]
c0002832:	e8 5b f4 ff ff       	call   c0001c92 <ld_dword>
c0002837:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000283b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000283f:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002842:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c0002845:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0002849:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c000284c:	48                   	dec    eax
c000284d:	3c 01                	cmp    al,0x1
c000284f:	77 8c                	ja     c00027dd <mount_volume+0xc8>
c0002851:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c0002855:	89 c3                	mov    ebx,eax
c0002857:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c000285b:	66 85 c0             	test   ax,ax
c000285e:	0f 84 79 ff ff ff    	je     c00027dd <mount_volume+0xc8>
c0002864:	8d 40 ff             	lea    eax,[eax-0x1]
c0002867:	85 d8                	test   eax,ebx
c0002869:	0f 85 6e ff ff ff    	jne    c00027dd <mount_volume+0xc8>
c000286f:	8d 45 65             	lea    eax,[ebp+0x65]
c0002872:	e8 0e f4 ff ff       	call   c0001c85 <ld_word>
c0002877:	89 c7                	mov    edi,eax
c0002879:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c000287d:	a8 0f                	test   al,0xf
c000287f:	0f 85 58 ff ff ff    	jne    c00027dd <mount_volume+0xc8>
c0002885:	8d 45 67             	lea    eax,[ebp+0x67]
c0002888:	e8 f8 f3 ff ff       	call   c0001c85 <ld_word>
c000288d:	0f b7 f0             	movzx  esi,ax
c0002890:	85 f6                	test   esi,esi
c0002892:	75 0a                	jne    c000289e <mount_volume+0x189>
c0002894:	8d 45 74             	lea    eax,[ebp+0x74]
c0002897:	e8 f6 f3 ff ff       	call   c0001c92 <ld_dword>
c000289c:	89 c6                	mov    esi,eax
c000289e:	8d 45 62             	lea    eax,[ebp+0x62]
c00028a1:	e8 df f3 ff ff       	call   c0001c85 <ld_word>
c00028a6:	66 85 c0             	test   ax,ax
c00028a9:	0f 84 2e ff ff ff    	je     c00027dd <mount_volume+0xc8>
c00028af:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c00028b4:	0f b7 c8             	movzx  ecx,ax
c00028b7:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c00028bc:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00028c0:	89 fa                	mov    edx,edi
c00028c2:	66 c1 ea 04          	shr    dx,0x4
c00028c6:	0f b7 d2             	movzx  edx,dx
c00028c9:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c00028cd:	8d 04 0a             	lea    eax,[edx+ecx*1]
c00028d0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00028d4:	39 c6                	cmp    esi,eax
c00028d6:	0f 82 01 ff ff ff    	jb     c00027dd <mount_volume+0xc8>
c00028dc:	29 c6                	sub    esi,eax
c00028de:	31 d2                	xor    edx,edx
c00028e0:	89 f0                	mov    eax,esi
c00028e2:	f7 f3                	div    ebx
c00028e4:	39 de                	cmp    esi,ebx
c00028e6:	0f 82 f1 fe ff ff    	jb     c00027dd <mount_volume+0xc8>
c00028ec:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c00028f1:	0f 87 e6 fe ff ff    	ja     c00027dd <mount_volume+0xc8>
c00028f7:	3d f5 ff 00 00       	cmp    eax,0xfff5
c00028fc:	0f 86 63 03 00 00    	jbe    c0002c65 <mount_volume+0x550>
c0002902:	bb 03 00 00 00       	mov    ebx,0x3
c0002907:	8d 70 02             	lea    esi,[eax+0x2]
c000290a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000290e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002912:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c0002915:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c0002918:	31 d2                	xor    edx,edx
c000291a:	89 c8                	mov    eax,ecx
c000291c:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c000291f:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002923:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002927:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000292b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000292f:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002932:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002935:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002939:	31 d2                	xor    edx,edx
c000293b:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000293f:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002943:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002946:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002949:	83 fb 03             	cmp    ebx,0x3
c000294c:	75 2b                	jne    c0002979 <mount_volume+0x264>
c000294e:	8d 45 7e             	lea    eax,[ebp+0x7e]
c0002951:	e8 2f f3 ff ff       	call   c0001c85 <ld_word>
c0002956:	66 09 c7             	or     di,ax
c0002959:	0f 85 7e fe ff ff    	jne    c00027dd <mount_volume+0xc8>
c000295f:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c0002965:	c1 e6 02             	shl    esi,0x2
c0002968:	e8 25 f3 ff ff       	call   c0001c92 <ld_dword>
c000296d:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002974:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002977:	eb 30                	jmp    c00029a9 <mount_volume+0x294>
c0002979:	66 85 ff             	test   di,di
c000297c:	0f 84 5b fe ff ff    	je     c00027dd <mount_volume+0xc8>
c0002982:	31 d2                	xor    edx,edx
c0002984:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002988:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000298c:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0002990:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002993:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c0002996:	83 fb 02             	cmp    ebx,0x2
c0002999:	75 04                	jne    c000299f <mount_volume+0x28a>
c000299b:	01 f6                	add    esi,esi
c000299d:	eb 0a                	jmp    c00029a9 <mount_volume+0x294>
c000299f:	8d 04 76             	lea    eax,[esi+esi*2]
c00029a2:	83 e6 01             	and    esi,0x1
c00029a5:	d1 e8                	shr    eax,1
c00029a7:	01 c6                	add    esi,eax
c00029a9:	81 c6 ff 01 00 00    	add    esi,0x1ff
c00029af:	c1 ee 09             	shr    esi,0x9
c00029b2:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00029b6:	0f 87 21 fe ff ff    	ja     c00027dd <mount_volume+0xc8>
c00029bc:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c00029c3:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c00029ca:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c00029ce:	83 fb 03             	cmp    ebx,0x3
c00029d1:	75 7a                	jne    c0002a4d <mount_volume+0x338>
c00029d3:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c00029d9:	e8 a7 f2 ff ff       	call   c0001c85 <ld_word>
c00029de:	66 48                	dec    ax
c00029e0:	75 6b                	jne    c0002a4d <mount_volume+0x338>
c00029e2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00029e6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00029ea:	83 c2 01             	add    edx,0x1
c00029ed:	89 e8                	mov    eax,ebp
c00029ef:	83 d1 00             	adc    ecx,0x0
c00029f2:	e8 6c fa ff ff       	call   c0002463 <move_window>
c00029f7:	85 c0                	test   eax,eax
c00029f9:	75 52                	jne    c0002a4d <mount_volume+0x338>
c00029fb:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00029ff:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c0002a05:	e8 7b f2 ff ff       	call   c0001c85 <ld_word>
c0002a0a:	66 3d 55 aa          	cmp    ax,0xaa55
c0002a0e:	75 3d                	jne    c0002a4d <mount_volume+0x338>
c0002a10:	8d 45 54             	lea    eax,[ebp+0x54]
c0002a13:	e8 7a f2 ff ff       	call   c0001c92 <ld_dword>
c0002a18:	3d 52 52 61 41       	cmp    eax,0x41615252
c0002a1d:	75 2e                	jne    c0002a4d <mount_volume+0x338>
c0002a1f:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c0002a25:	e8 68 f2 ff ff       	call   c0001c92 <ld_dword>
c0002a2a:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002a2f:	75 1c                	jne    c0002a4d <mount_volume+0x338>
c0002a31:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c0002a37:	e8 56 f2 ff ff       	call   c0001c92 <ld_dword>
c0002a3c:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c0002a3f:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c0002a45:	e8 48 f2 ff ff       	call   c0001c92 <ld_dword>
c0002a4a:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c0002a4d:	66 a1 e0 ed 02 c0    	mov    ax,ds:0xc002ede0
c0002a53:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c0002a56:	40                   	inc    eax
c0002a57:	31 db                	xor    ebx,ebx
c0002a59:	66 a3 e0 ed 02 c0    	mov    ds:0xc002ede0,ax
c0002a5f:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c0002a63:	e9 0c 02 00 00       	jmp    c0002c74 <mount_volume+0x55f>
c0002a68:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002a6e:	e8 12 f2 ff ff       	call   c0001c85 <ld_word>
c0002a73:	66 3d 00 01          	cmp    ax,0x100
c0002a77:	0f 85 60 fd ff ff    	jne    c00027dd <mount_volume+0xc8>
c0002a7d:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c0002a84:	0f 85 53 fd ff ff    	jne    c00027dd <mount_volume+0xc8>
c0002a8a:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002a90:	e8 15 f2 ff ff       	call   c0001caa <ld_qword>
c0002a95:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002a99:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002a9d:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c0002aa3:	e8 ea f1 ff ff       	call   c0001c92 <ld_dword>
c0002aa8:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002aab:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c0002ab1:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002ab4:	fe c8                	dec    al
c0002ab6:	0f 85 21 fd ff ff    	jne    c00027dd <mount_volume+0xc8>
c0002abc:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c0002ac3:	bb 01 00 00 00       	mov    ebx,0x1
c0002ac8:	d3 e3                	shl    ebx,cl
c0002aca:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c0002ace:	66 85 db             	test   bx,bx
c0002ad1:	0f 84 06 fd ff ff    	je     c00027dd <mount_volume+0xc8>
c0002ad7:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c0002add:	e8 b0 f1 ff ff       	call   c0001c92 <ld_dword>
c0002ae2:	89 c6                	mov    esi,eax
c0002ae4:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c0002ae9:	0f 87 ee fc ff ff    	ja     c00027dd <mount_volume+0xc8>
c0002aef:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002af3:	8d 40 02             	lea    eax,[eax+0x2]
c0002af6:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c0002af9:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c0002afc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002b00:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c0002b03:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c0002b09:	e8 84 f1 ff ff       	call   c0001c92 <ld_dword>
c0002b0e:	31 d2                	xor    edx,edx
c0002b10:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002b14:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002b18:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002b1c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0002b20:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002b23:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002b26:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c0002b2c:	e8 61 f1 ff ff       	call   c0001c92 <ld_dword>
c0002b31:	31 d2                	xor    edx,edx
c0002b33:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002b37:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002b3b:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002b3f:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002b42:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002b45:	0f b7 c3             	movzx  eax,bx
c0002b48:	31 d2                	xor    edx,edx
c0002b4a:	0f af f0             	imul   esi,eax
c0002b4d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0002b51:	89 f0                	mov    eax,esi
c0002b53:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002b57:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002b5b:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002b5f:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c0002b63:	39 c1                	cmp    ecx,eax
c0002b65:	89 df                	mov    edi,ebx
c0002b67:	19 d7                	sbb    edi,edx
c0002b69:	0f 82 6e fc ff ff    	jb     c00027dd <mount_volume+0xc8>
c0002b6f:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002b75:	31 db                	xor    ebx,ebx
c0002b77:	e8 16 f1 ff ff       	call   c0001c92 <ld_dword>
c0002b7c:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002b83:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002b86:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002b8e:	85 db                	test   ebx,ebx
c0002b90:	75 39                	jne    c0002bcb <mount_volume+0x4b6>
c0002b92:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002b96:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002b9a:	0f 86 3d fc ff ff    	jbe    c00027dd <mount_volume+0xc8>
c0002ba0:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c0002ba3:	31 ff                	xor    edi,edi
c0002ba5:	89 e8                	mov    eax,ebp
c0002ba7:	e8 72 f3 ff ff       	call   c0001f1e <clst2sect>
c0002bac:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0002bb0:	01 c6                	add    esi,eax
c0002bb2:	89 e8                	mov    eax,ebp
c0002bb4:	11 d7                	adc    edi,edx
c0002bb6:	89 f2                	mov    edx,esi
c0002bb8:	89 f9                	mov    ecx,edi
c0002bba:	e8 a4 f8 ff ff       	call   c0002463 <move_window>
c0002bbf:	85 c0                	test   eax,eax
c0002bc1:	0f 85 07 fc ff ff    	jne    c00027ce <mount_volume+0xb9>
c0002bc7:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002bcb:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c0002bd0:	74 0b                	je     c0002bdd <mount_volume+0x4c8>
c0002bd2:	83 c3 20             	add    ebx,0x20
c0002bd5:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002bdb:	eb b1                	jmp    c0002b8e <mount_volume+0x479>
c0002bdd:	8d 75 54             	lea    esi,[ebp+0x54]
c0002be0:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c0002be4:	e8 a9 f0 ff ff       	call   c0001c92 <ld_dword>
c0002be9:	89 c3                	mov    ebx,eax
c0002beb:	83 f8 01             	cmp    eax,0x1
c0002bee:	0f 86 e9 fb ff ff    	jbe    c00027dd <mount_volume+0xc8>
c0002bf4:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002bf7:	0f 86 e0 fb ff ff    	jbe    c00027dd <mount_volume+0xc8>
c0002bfd:	8d 53 fe             	lea    edx,[ebx-0x2]
c0002c00:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002c04:	0f af c2             	imul   eax,edx
c0002c07:	31 d2                	xor    edx,edx
c0002c09:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002c0c:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c0002c0f:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c0002c12:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c0002c15:	31 c9                	xor    ecx,ecx
c0002c17:	89 da                	mov    edx,ebx
c0002c19:	89 e8                	mov    eax,ebp
c0002c1b:	c1 ea 07             	shr    edx,0x7
c0002c1e:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c0002c21:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c0002c24:	e8 3a f8 ff ff       	call   c0002463 <move_window>
c0002c29:	85 c0                	test   eax,eax
c0002c2b:	0f 85 9d fb ff ff    	jne    c00027ce <mount_volume+0xb9>
c0002c31:	89 d8                	mov    eax,ebx
c0002c33:	83 e0 7f             	and    eax,0x7f
c0002c36:	8d 04 86             	lea    eax,[esi+eax*4]
c0002c39:	e8 54 f0 ff ff       	call   c0001c92 <ld_dword>
c0002c3e:	83 f8 ff             	cmp    eax,0xffffffff
c0002c41:	74 0a                	je     c0002c4d <mount_volume+0x538>
c0002c43:	43                   	inc    ebx
c0002c44:	39 d8                	cmp    eax,ebx
c0002c46:	74 cd                	je     c0002c15 <mount_volume+0x500>
c0002c48:	e9 90 fb ff ff       	jmp    c00027dd <mount_volume+0xc8>
c0002c4d:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002c54:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002c5b:	bb 04 00 00 00       	mov    ebx,0x4
c0002c60:	e9 e8 fd ff ff       	jmp    c0002a4d <mount_volume+0x338>
c0002c65:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002c6a:	19 db                	sbb    ebx,ebx
c0002c6c:	83 c3 02             	add    ebx,0x2
c0002c6f:	e9 93 fc ff ff       	jmp    c0002907 <mount_volume+0x1f2>
c0002c74:	83 c4 3c             	add    esp,0x3c
c0002c77:	89 d8                	mov    eax,ebx
c0002c79:	5b                   	pop    ebx
c0002c7a:	5e                   	pop    esi
c0002c7b:	5f                   	pop    edi
c0002c7c:	5d                   	pop    ebp
c0002c7d:	c3                   	ret    

c0002c7e <find_bitmap>:
c0002c7e:	55                   	push   ebp
c0002c7f:	57                   	push   edi
c0002c80:	89 c7                	mov    edi,eax
c0002c82:	56                   	push   esi
c0002c83:	8d 72 fe             	lea    esi,[edx-0x2]
c0002c86:	53                   	push   ebx
c0002c87:	83 ec 1c             	sub    esp,0x1c
c0002c8a:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002c8d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002c91:	83 e8 02             	sub    eax,0x2
c0002c94:	39 f0                	cmp    eax,esi
c0002c96:	77 02                	ja     c0002c9a <find_bitmap+0x1c>
c0002c98:	31 f6                	xor    esi,esi
c0002c9a:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002c9e:	89 f3                	mov    ebx,esi
c0002ca0:	31 ed                	xor    ebp,ebp
c0002ca2:	31 c9                	xor    ecx,ecx
c0002ca4:	89 da                	mov    edx,ebx
c0002ca6:	89 f8                	mov    eax,edi
c0002ca8:	c1 ea 0c             	shr    edx,0xc
c0002cab:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002cae:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002cb1:	e8 ad f7 ff ff       	call   c0002463 <move_window>
c0002cb6:	85 c0                	test   eax,eax
c0002cb8:	75 68                	jne    c0002d22 <find_bitmap+0xa4>
c0002cba:	89 da                	mov    edx,ebx
c0002cbc:	89 d9                	mov    ecx,ebx
c0002cbe:	c1 ea 03             	shr    edx,0x3
c0002cc1:	83 e1 07             	and    ecx,0x7
c0002cc4:	b8 01 00 00 00       	mov    eax,0x1
c0002cc9:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002ccf:	d3 e0                	shl    eax,cl
c0002cd1:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002cd4:	83 e9 02             	sub    ecx,0x2
c0002cd7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002cdb:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002cdf:	43                   	inc    ebx
c0002ce0:	21 c1                	and    ecx,eax
c0002ce2:	d1 e0                	shl    eax,1
c0002ce4:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002ce8:	77 09                	ja     c0002cf3 <find_bitmap+0x75>
c0002cea:	31 db                	xor    ebx,ebx
c0002cec:	ba 00 02 00 00       	mov    edx,0x200
c0002cf1:	31 c0                	xor    eax,eax
c0002cf3:	84 c9                	test   cl,cl
c0002cf5:	75 10                	jne    c0002d07 <find_bitmap+0x89>
c0002cf7:	45                   	inc    ebp
c0002cf8:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002cfc:	75 0f                	jne    c0002d0d <find_bitmap+0x8f>
c0002cfe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002d02:	83 c0 02             	add    eax,0x2
c0002d05:	eb 22                	jmp    c0002d29 <find_bitmap+0xab>
c0002d07:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002d0b:	31 ed                	xor    ebp,ebp
c0002d0d:	39 de                	cmp    esi,ebx
c0002d0f:	74 16                	je     c0002d27 <find_bitmap+0xa9>
c0002d11:	84 c0                	test   al,al
c0002d13:	75 c6                	jne    c0002cdb <find_bitmap+0x5d>
c0002d15:	42                   	inc    edx
c0002d16:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002d1c:	77 84                	ja     c0002ca2 <find_bitmap+0x24>
c0002d1e:	b0 01                	mov    al,0x1
c0002d20:	eb b9                	jmp    c0002cdb <find_bitmap+0x5d>
c0002d22:	83 c8 ff             	or     eax,0xffffffff
c0002d25:	eb 02                	jmp    c0002d29 <find_bitmap+0xab>
c0002d27:	31 c0                	xor    eax,eax
c0002d29:	83 c4 1c             	add    esp,0x1c
c0002d2c:	5b                   	pop    ebx
c0002d2d:	5e                   	pop    esi
c0002d2e:	5f                   	pop    edi
c0002d2f:	5d                   	pop    ebp
c0002d30:	c3                   	ret    

c0002d31 <change_bitmap>:
c0002d31:	55                   	push   ebp
c0002d32:	89 cd                	mov    ebp,ecx
c0002d34:	57                   	push   edi
c0002d35:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002d38:	56                   	push   esi
c0002d39:	89 c7                	mov    edi,eax
c0002d3b:	53                   	push   ebx
c0002d3c:	89 c8                	mov    eax,ecx
c0002d3e:	83 ec 1c             	sub    esp,0x1c
c0002d41:	31 d2                	xor    edx,edx
c0002d43:	89 ce                	mov    esi,ecx
c0002d45:	c1 e8 0c             	shr    eax,0xc
c0002d48:	bb 01 00 00 00       	mov    ebx,0x1
c0002d4d:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002d50:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002d53:	c1 ee 03             	shr    esi,0x3
c0002d56:	83 e1 07             	and    ecx,0x7
c0002d59:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002d5f:	d3 e3                	shl    ebx,cl
c0002d61:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002d65:	89 c1                	mov    ecx,eax
c0002d67:	89 d3                	mov    ebx,edx
c0002d69:	83 c1 01             	add    ecx,0x1
c0002d6c:	83 d3 00             	adc    ebx,0x0
c0002d6f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d73:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002d77:	89 d1                	mov    ecx,edx
c0002d79:	89 c2                	mov    edx,eax
c0002d7b:	89 f8                	mov    eax,edi
c0002d7d:	e8 e1 f6 ff ff       	call   c0002463 <move_window>
c0002d82:	89 c1                	mov    ecx,eax
c0002d84:	85 c0                	test   eax,eax
c0002d86:	75 48                	jne    c0002dd0 <change_bitmap+0x9f>
c0002d88:	31 d2                	xor    edx,edx
c0002d8a:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002d8e:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002d92:	0f 95 c2             	setne  dl
c0002d95:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002d99:	74 3c                	je     c0002dd7 <change_bitmap+0xa6>
c0002d9b:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002d9f:	4d                   	dec    ebp
c0002da0:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002da4:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002da8:	74 32                	je     c0002ddc <change_bitmap+0xab>
c0002daa:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002dae:	75 d8                	jne    c0002d88 <change_bitmap+0x57>
c0002db0:	8d 46 01             	lea    eax,[esi+0x1]
c0002db3:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002db8:	89 c3                	mov    ebx,eax
c0002dba:	31 f6                	xor    esi,esi
c0002dbc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002dc0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002dc4:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002dca:	74 99                	je     c0002d65 <change_bitmap+0x34>
c0002dcc:	89 de                	mov    esi,ebx
c0002dce:	eb b8                	jmp    c0002d88 <change_bitmap+0x57>
c0002dd0:	b9 01 00 00 00       	mov    ecx,0x1
c0002dd5:	eb 05                	jmp    c0002ddc <change_bitmap+0xab>
c0002dd7:	b9 02 00 00 00       	mov    ecx,0x2
c0002ddc:	83 c4 1c             	add    esp,0x1c
c0002ddf:	89 c8                	mov    eax,ecx
c0002de1:	5b                   	pop    ebx
c0002de2:	5e                   	pop    esi
c0002de3:	5f                   	pop    edi
c0002de4:	5d                   	pop    ebp
c0002de5:	c3                   	ret    

c0002de6 <put_fat>:
c0002de6:	83 fa 01             	cmp    edx,0x1
c0002de9:	0f 86 7b 01 00 00    	jbe    c0002f6a <put_fat+0x184>
c0002def:	55                   	push   ebp
c0002df0:	57                   	push   edi
c0002df1:	89 cf                	mov    edi,ecx
c0002df3:	56                   	push   esi
c0002df4:	b9 02 00 00 00       	mov    ecx,0x2
c0002df9:	53                   	push   ebx
c0002dfa:	89 c6                	mov    esi,eax
c0002dfc:	83 ec 1c             	sub    esp,0x1c
c0002dff:	89 d3                	mov    ebx,edx
c0002e01:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002e04:	0f 86 68 01 00 00    	jbe    c0002f72 <put_fat+0x18c>
c0002e0a:	8a 00                	mov    al,BYTE PTR [eax]
c0002e0c:	3c 02                	cmp    al,0x2
c0002e0e:	0f 84 c7 00 00 00    	je     c0002edb <put_fat+0xf5>
c0002e14:	77 09                	ja     c0002e1f <put_fat+0x39>
c0002e16:	fe c8                	dec    al
c0002e18:	74 17                	je     c0002e31 <put_fat+0x4b>
c0002e1a:	e9 53 01 00 00       	jmp    c0002f72 <put_fat+0x18c>
c0002e1f:	b9 02 00 00 00       	mov    ecx,0x2
c0002e24:	3c 04                	cmp    al,0x4
c0002e26:	0f 86 e1 00 00 00    	jbe    c0002f0d <put_fat+0x127>
c0002e2c:	e9 41 01 00 00       	jmp    c0002f72 <put_fat+0x18c>
c0002e31:	89 d5                	mov    ebp,edx
c0002e33:	31 c9                	xor    ecx,ecx
c0002e35:	d1 ed                	shr    ebp,1
c0002e37:	89 f0                	mov    eax,esi
c0002e39:	01 d5                	add    ebp,edx
c0002e3b:	89 ea                	mov    edx,ebp
c0002e3d:	c1 ea 09             	shr    edx,0x9
c0002e40:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e43:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e46:	e8 18 f6 ff ff       	call   c0002463 <move_window>
c0002e4b:	89 c1                	mov    ecx,eax
c0002e4d:	85 c0                	test   eax,eax
c0002e4f:	0f 85 1d 01 00 00    	jne    c0002f72 <put_fat+0x18c>
c0002e55:	8d 46 54             	lea    eax,[esi+0x54]
c0002e58:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002e5c:	8d 45 01             	lea    eax,[ebp+0x1]
c0002e5f:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e65:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002e69:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e6d:	89 f8                	mov    eax,edi
c0002e6f:	83 e3 01             	and    ebx,0x1
c0002e72:	74 0d                	je     c0002e81 <put_fat+0x9b>
c0002e74:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002e77:	89 fa                	mov    edx,edi
c0002e79:	83 e0 0f             	and    eax,0xf
c0002e7c:	c1 e2 04             	shl    edx,0x4
c0002e7f:	09 d0                	or     eax,edx
c0002e81:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002e84:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002e88:	31 c9                	xor    ecx,ecx
c0002e8a:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e8e:	c1 ea 09             	shr    edx,0x9
c0002e91:	89 f0                	mov    eax,esi
c0002e93:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e96:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e99:	e8 c5 f5 ff ff       	call   c0002463 <move_window>
c0002e9e:	89 c1                	mov    ecx,eax
c0002ea0:	85 c0                	test   eax,eax
c0002ea2:	0f 85 ca 00 00 00    	jne    c0002f72 <put_fat+0x18c>
c0002ea8:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002eac:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002eb2:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002eb6:	85 db                	test   ebx,ebx
c0002eb8:	74 07                	je     c0002ec1 <put_fat+0xdb>
c0002eba:	c1 ef 04             	shr    edi,0x4
c0002ebd:	89 fa                	mov    edx,edi
c0002ebf:	eb 0e                	jmp    c0002ecf <put_fat+0xe9>
c0002ec1:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002ec4:	c1 ef 08             	shr    edi,0x8
c0002ec7:	83 e2 f0             	and    edx,0xfffffff0
c0002eca:	83 e7 0f             	and    edi,0xf
c0002ecd:	09 fa                	or     edx,edi
c0002ecf:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002ed2:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002ed6:	e9 97 00 00 00       	jmp    c0002f72 <put_fat+0x18c>
c0002edb:	31 c9                	xor    ecx,ecx
c0002edd:	c1 ea 08             	shr    edx,0x8
c0002ee0:	89 f0                	mov    eax,esi
c0002ee2:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002ee5:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ee8:	e8 76 f5 ff ff       	call   c0002463 <move_window>
c0002eed:	89 c1                	mov    ecx,eax
c0002eef:	85 c0                	test   eax,eax
c0002ef1:	75 7f                	jne    c0002f72 <put_fat+0x18c>
c0002ef3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002ef7:	01 db                	add    ebx,ebx
c0002ef9:	0f b7 d7             	movzx  edx,di
c0002efc:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002f02:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002f06:	e8 ec ed ff ff       	call   c0001cf7 <st_word>
c0002f0b:	eb 53                	jmp    c0002f60 <put_fat+0x17a>
c0002f0d:	31 c9                	xor    ecx,ecx
c0002f0f:	c1 ea 07             	shr    edx,0x7
c0002f12:	89 f0                	mov    eax,esi
c0002f14:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002f17:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002f1a:	e8 44 f5 ff ff       	call   c0002463 <move_window>
c0002f1f:	89 c1                	mov    ecx,eax
c0002f21:	85 c0                	test   eax,eax
c0002f23:	75 4d                	jne    c0002f72 <put_fat+0x18c>
c0002f25:	c1 e3 02             	shl    ebx,0x2
c0002f28:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002f2e:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002f31:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002f35:	74 1c                	je     c0002f53 <put_fat+0x16d>
c0002f37:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002f3b:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002f41:	89 d8                	mov    eax,ebx
c0002f43:	e8 4a ed ff ff       	call   c0001c92 <ld_dword>
c0002f48:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f4c:	25 00 00 00 f0       	and    eax,0xf0000000
c0002f51:	09 c7                	or     edi,eax
c0002f53:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002f57:	89 fa                	mov    edx,edi
c0002f59:	89 d8                	mov    eax,ebx
c0002f5b:	e8 9b ed ff ff       	call   c0001cfb <st_dword>
c0002f60:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002f64:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f68:	eb 08                	jmp    c0002f72 <put_fat+0x18c>
c0002f6a:	b9 02 00 00 00       	mov    ecx,0x2
c0002f6f:	89 c8                	mov    eax,ecx
c0002f71:	c3                   	ret    
c0002f72:	83 c4 1c             	add    esp,0x1c
c0002f75:	89 c8                	mov    eax,ecx
c0002f77:	5b                   	pop    ebx
c0002f78:	5e                   	pop    esi
c0002f79:	5f                   	pop    edi
c0002f7a:	5d                   	pop    ebp
c0002f7b:	c3                   	ret    

c0002f7c <fill_last_frag>:
c0002f7c:	57                   	push   edi
c0002f7d:	89 cf                	mov    edi,ecx
c0002f7f:	56                   	push   esi
c0002f80:	89 d6                	mov    esi,edx
c0002f82:	53                   	push   ebx
c0002f83:	89 c3                	mov    ebx,eax
c0002f85:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002f88:	85 c0                	test   eax,eax
c0002f8a:	74 21                	je     c0002fad <fill_last_frag+0x31>
c0002f8c:	89 f9                	mov    ecx,edi
c0002f8e:	83 f8 01             	cmp    eax,0x1
c0002f91:	76 05                	jbe    c0002f98 <fill_last_frag+0x1c>
c0002f93:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002f96:	29 c1                	sub    ecx,eax
c0002f98:	8d 56 01             	lea    edx,[esi+0x1]
c0002f9b:	29 c2                	sub    edx,eax
c0002f9d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002f9f:	e8 42 fe ff ff       	call   c0002de6 <put_fat>
c0002fa4:	85 c0                	test   eax,eax
c0002fa6:	75 05                	jne    c0002fad <fill_last_frag+0x31>
c0002fa8:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002fab:	eb d8                	jmp    c0002f85 <fill_last_frag+0x9>
c0002fad:	5b                   	pop    ebx
c0002fae:	5e                   	pop    esi
c0002faf:	5f                   	pop    edi
c0002fb0:	c3                   	ret    

c0002fb1 <fill_first_frag>:
c0002fb1:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002fb5:	75 2d                	jne    c0002fe4 <fill_first_frag+0x33>
c0002fb7:	57                   	push   edi
c0002fb8:	56                   	push   esi
c0002fb9:	53                   	push   ebx
c0002fba:	89 c3                	mov    ebx,eax
c0002fbc:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002fbf:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002fc2:	01 d7                	add    edi,edx
c0002fc4:	39 fa                	cmp    edx,edi
c0002fc6:	74 14                	je     c0002fdc <fill_first_frag+0x2b>
c0002fc8:	8d 72 01             	lea    esi,[edx+0x1]
c0002fcb:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002fcd:	89 f1                	mov    ecx,esi
c0002fcf:	e8 12 fe ff ff       	call   c0002de6 <put_fat>
c0002fd4:	89 f2                	mov    edx,esi
c0002fd6:	85 c0                	test   eax,eax
c0002fd8:	74 ea                	je     c0002fc4 <fill_first_frag+0x13>
c0002fda:	eb 0b                	jmp    c0002fe7 <fill_first_frag+0x36>
c0002fdc:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002fe0:	31 c0                	xor    eax,eax
c0002fe2:	eb 03                	jmp    c0002fe7 <fill_first_frag+0x36>
c0002fe4:	31 c0                	xor    eax,eax
c0002fe6:	c3                   	ret    
c0002fe7:	5b                   	pop    ebx
c0002fe8:	5e                   	pop    esi
c0002fe9:	5f                   	pop    edi
c0002fea:	c3                   	ret    

c0002feb <get_fat>:
c0002feb:	83 fa 01             	cmp    edx,0x1
c0002fee:	0f 86 db 01 00 00    	jbe    c00031cf <get_fat+0x1e4>
c0002ff4:	55                   	push   ebp
c0002ff5:	b9 01 00 00 00       	mov    ecx,0x1
c0002ffa:	57                   	push   edi
c0002ffb:	56                   	push   esi
c0002ffc:	53                   	push   ebx
c0002ffd:	83 ec 1c             	sub    esp,0x1c
c0003000:	8b 38                	mov    edi,DWORD PTR [eax]
c0003002:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0003005:	0f 86 cc 01 00 00    	jbe    c00031d7 <get_fat+0x1ec>
c000300b:	89 c3                	mov    ebx,eax
c000300d:	89 d6                	mov    esi,edx
c000300f:	8a 07                	mov    al,BYTE PTR [edi]
c0003011:	3c 02                	cmp    al,0x2
c0003013:	0f 84 99 00 00 00    	je     c00030b2 <get_fat+0xc7>
c0003019:	77 09                	ja     c0003024 <get_fat+0x39>
c000301b:	fe c8                	dec    al
c000301d:	74 1a                	je     c0003039 <get_fat+0x4e>
c000301f:	e9 b3 01 00 00       	jmp    c00031d7 <get_fat+0x1ec>
c0003024:	3c 03                	cmp    al,0x3
c0003026:	0f 84 b5 00 00 00    	je     c00030e1 <get_fat+0xf6>
c000302c:	3c 04                	cmp    al,0x4
c000302e:	0f 84 e3 00 00 00    	je     c0003117 <get_fat+0x12c>
c0003034:	e9 9e 01 00 00       	jmp    c00031d7 <get_fat+0x1ec>
c0003039:	89 d3                	mov    ebx,edx
c000303b:	31 c9                	xor    ecx,ecx
c000303d:	d1 eb                	shr    ebx,1
c000303f:	89 f8                	mov    eax,edi
c0003041:	01 d3                	add    ebx,edx
c0003043:	89 da                	mov    edx,ebx
c0003045:	c1 ea 09             	shr    edx,0x9
c0003048:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000304b:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000304e:	e8 10 f4 ff ff       	call   c0002463 <move_window>
c0003053:	85 c0                	test   eax,eax
c0003055:	74 08                	je     c000305f <get_fat+0x74>
c0003057:	83 c9 ff             	or     ecx,0xffffffff
c000305a:	e9 78 01 00 00       	jmp    c00031d7 <get_fat+0x1ec>
c000305f:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0003062:	31 c9                	xor    ecx,ecx
c0003064:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c000306a:	89 ea                	mov    edx,ebp
c000306c:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c0003070:	c1 ea 09             	shr    edx,0x9
c0003073:	89 f8                	mov    eax,edi
c0003075:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003078:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000307b:	e8 e3 f3 ff ff       	call   c0002463 <move_window>
c0003080:	85 c0                	test   eax,eax
c0003082:	75 d3                	jne    c0003057 <get_fat+0x6c>
c0003084:	0f b6 c3             	movzx  eax,bl
c0003087:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c000308d:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c0003092:	c1 e3 08             	shl    ebx,0x8
c0003095:	09 c3                	or     ebx,eax
c0003097:	89 d9                	mov    ecx,ebx
c0003099:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c000309f:	83 e6 01             	and    esi,0x1
c00030a2:	0f 84 2f 01 00 00    	je     c00031d7 <get_fat+0x1ec>
c00030a8:	89 d9                	mov    ecx,ebx
c00030aa:	c1 e9 04             	shr    ecx,0x4
c00030ad:	e9 25 01 00 00       	jmp    c00031d7 <get_fat+0x1ec>
c00030b2:	31 c9                	xor    ecx,ecx
c00030b4:	c1 ea 08             	shr    edx,0x8
c00030b7:	89 f8                	mov    eax,edi
c00030b9:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c00030bc:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c00030bf:	e8 9f f3 ff ff       	call   c0002463 <move_window>
c00030c4:	85 c0                	test   eax,eax
c00030c6:	75 8f                	jne    c0003057 <get_fat+0x6c>
c00030c8:	01 f6                	add    esi,esi
c00030ca:	81 e6 fe 01 00 00    	and    esi,0x1fe
c00030d0:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00030d4:	e8 ac eb ff ff       	call   c0001c85 <ld_word>
c00030d9:	0f b7 c8             	movzx  ecx,ax
c00030dc:	e9 f6 00 00 00       	jmp    c00031d7 <get_fat+0x1ec>
c00030e1:	31 c9                	xor    ecx,ecx
c00030e3:	c1 ea 07             	shr    edx,0x7
c00030e6:	89 f8                	mov    eax,edi
c00030e8:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c00030eb:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c00030ee:	e8 70 f3 ff ff       	call   c0002463 <move_window>
c00030f3:	85 c0                	test   eax,eax
c00030f5:	0f 85 5c ff ff ff    	jne    c0003057 <get_fat+0x6c>
c00030fb:	c1 e6 02             	shl    esi,0x2
c00030fe:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0003104:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003108:	e8 85 eb ff ff       	call   c0001c92 <ld_dword>
c000310d:	25 ff ff ff 0f       	and    eax,0xfffffff
c0003112:	e9 b4 00 00 00       	jmp    c00031cb <get_fat+0x1e0>
c0003117:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000311a:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000311d:	89 d1                	mov    ecx,edx
c000311f:	09 c1                	or     ecx,eax
c0003121:	74 06                	je     c0003129 <get_fat+0x13e>
c0003123:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0003127:	75 0f                	jne    c0003138 <get_fat+0x14d>
c0003129:	b9 01 00 00 00       	mov    ecx,0x1
c000312e:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c0003132:	0f 85 9f 00 00 00    	jne    c00031d7 <get_fat+0x1ec>
c0003138:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c000313c:	89 f5                	mov    ebp,esi
c000313e:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c0003143:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c0003146:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c0003149:	80 f9 02             	cmp    cl,0x2
c000314c:	75 35                	jne    c0003183 <get_fat+0x198>
c000314e:	83 c0 ff             	add    eax,0xffffffff
c0003151:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c0003156:	83 d2 ff             	adc    edx,0xffffffff
c0003159:	31 db                	xor    ebx,ebx
c000315b:	0f ac d0 09          	shrd   eax,edx,0x9
c000315f:	53                   	push   ebx
c0003160:	c1 ea 09             	shr    edx,0x9
c0003163:	51                   	push   ecx
c0003164:	52                   	push   edx
c0003165:	50                   	push   eax
c0003166:	e8 69 40 02 00       	call   c00271d4 <__udivdi3>
c000316b:	83 c4 10             	add    esp,0x10
c000316e:	b9 01 00 00 00       	mov    ecx,0x1
c0003173:	39 c5                	cmp    ebp,eax
c0003175:	77 60                	ja     c00031d7 <get_fat+0x1ec>
c0003177:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c000317c:	74 59                	je     c00031d7 <get_fat+0x1ec>
c000317e:	8d 4e 01             	lea    ecx,[esi+0x1]
c0003181:	eb 54                	jmp    c00031d7 <get_fat+0x1ec>
c0003183:	80 f9 03             	cmp    cl,0x3
c0003186:	75 05                	jne    c000318d <get_fat+0x1a2>
c0003188:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c000318b:	77 f1                	ja     c000317e <get_fat+0x193>
c000318d:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003192:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0003196:	75 3f                	jne    c00031d7 <get_fat+0x1ec>
c0003198:	31 c9                	xor    ecx,ecx
c000319a:	89 f2                	mov    edx,esi
c000319c:	89 f8                	mov    eax,edi
c000319e:	c1 ea 07             	shr    edx,0x7
c00031a1:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c00031a4:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c00031a7:	e8 b7 f2 ff ff       	call   c0002463 <move_window>
c00031ac:	85 c0                	test   eax,eax
c00031ae:	0f 85 a3 fe ff ff    	jne    c0003057 <get_fat+0x6c>
c00031b4:	c1 e6 02             	shl    esi,0x2
c00031b7:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00031bd:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00031c1:	e8 cc ea ff ff       	call   c0001c92 <ld_dword>
c00031c6:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00031cb:	89 c1                	mov    ecx,eax
c00031cd:	eb 08                	jmp    c00031d7 <get_fat+0x1ec>
c00031cf:	b9 01 00 00 00       	mov    ecx,0x1
c00031d4:	89 c8                	mov    eax,ecx
c00031d6:	c3                   	ret    
c00031d7:	83 c4 1c             	add    esp,0x1c
c00031da:	89 c8                	mov    eax,ecx
c00031dc:	5b                   	pop    ebx
c00031dd:	5e                   	pop    esi
c00031de:	5f                   	pop    edi
c00031df:	5d                   	pop    ebp
c00031e0:	c3                   	ret    

c00031e1 <dir_sdi>:
c00031e1:	55                   	push   ebp
c00031e2:	57                   	push   edi
c00031e3:	56                   	push   esi
c00031e4:	53                   	push   ebx
c00031e5:	89 c3                	mov    ebx,eax
c00031e7:	83 ec 1c             	sub    esp,0x1c
c00031ea:	8b 38                	mov    edi,DWORD PTR [eax]
c00031ec:	31 c0                	xor    eax,eax
c00031ee:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00031f1:	0f 94 c0             	sete   al
c00031f4:	48                   	dec    eax
c00031f5:	25 00 00 20 f0       	and    eax,0xf0200000
c00031fa:	05 00 00 00 10       	add    eax,0x10000000
c00031ff:	39 d0                	cmp    eax,edx
c0003201:	77 0a                	ja     c000320d <dir_sdi+0x2c>
c0003203:	b8 02 00 00 00       	mov    eax,0x2
c0003208:	e9 c4 00 00 00       	jmp    c00032d1 <dir_sdi+0xf0>
c000320d:	89 d6                	mov    esi,edx
c000320f:	f6 c2 1f             	test   dl,0x1f
c0003212:	75 ef                	jne    c0003203 <dir_sdi+0x22>
c0003214:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0003217:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c000321a:	85 c9                	test   ecx,ecx
c000321c:	75 2d                	jne    c000324b <dir_sdi+0x6a>
c000321e:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0003221:	77 1b                	ja     c000323e <dir_sdi+0x5d>
c0003223:	89 f2                	mov    edx,esi
c0003225:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0003229:	c1 ea 05             	shr    edx,0x5
c000322c:	39 c2                	cmp    edx,eax
c000322e:	73 d3                	jae    c0003203 <dir_sdi+0x22>
c0003230:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0003233:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c0003236:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003239:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000323c:	eb 4b                	jmp    c0003289 <dir_sdi+0xa8>
c000323e:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0003241:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0003245:	85 c0                	test   eax,eax
c0003247:	74 da                	je     c0003223 <dir_sdi+0x42>
c0003249:	89 c1                	mov    ecx,eax
c000324b:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c000324f:	c1 e5 09             	shl    ebp,0x9
c0003252:	89 ca                	mov    edx,ecx
c0003254:	39 ee                	cmp    esi,ebp
c0003256:	72 1c                	jb     c0003274 <dir_sdi+0x93>
c0003258:	89 d8                	mov    eax,ebx
c000325a:	e8 8c fd ff ff       	call   c0002feb <get_fat>
c000325f:	89 c1                	mov    ecx,eax
c0003261:	83 f8 ff             	cmp    eax,0xffffffff
c0003264:	74 66                	je     c00032cc <dir_sdi+0xeb>
c0003266:	83 f8 01             	cmp    eax,0x1
c0003269:	76 98                	jbe    c0003203 <dir_sdi+0x22>
c000326b:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c000326e:	76 93                	jbe    c0003203 <dir_sdi+0x22>
c0003270:	29 ee                	sub    esi,ebp
c0003272:	eb de                	jmp    c0003252 <dir_sdi+0x71>
c0003274:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003278:	89 f8                	mov    eax,edi
c000327a:	e8 9f ec ff ff       	call   c0001f1e <clst2sect>
c000327f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003283:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003286:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003289:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c000328c:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000328f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0003292:	89 d1                	mov    ecx,edx
c0003294:	09 c1                	or     ecx,eax
c0003296:	0f 84 67 ff ff ff    	je     c0003203 <dir_sdi+0x22>
c000329c:	89 f1                	mov    ecx,esi
c000329e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00032a6:	c1 e9 09             	shr    ecx,0x9
c00032a9:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00032ad:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00032b1:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00032b5:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c00032b8:	81 e6 ff 01 00 00    	and    esi,0x1ff
c00032be:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00032c1:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00032c5:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c00032c8:	31 c0                	xor    eax,eax
c00032ca:	eb 05                	jmp    c00032d1 <dir_sdi+0xf0>
c00032cc:	b8 01 00 00 00       	mov    eax,0x1
c00032d1:	83 c4 1c             	add    esp,0x1c
c00032d4:	5b                   	pop    ebx
c00032d5:	5e                   	pop    esi
c00032d6:	5f                   	pop    edi
c00032d7:	5d                   	pop    ebp
c00032d8:	c3                   	ret    

c00032d9 <create_chain>:
c00032d9:	55                   	push   ebp
c00032da:	89 c5                	mov    ebp,eax
c00032dc:	57                   	push   edi
c00032dd:	56                   	push   esi
c00032de:	53                   	push   ebx
c00032df:	83 ec 1c             	sub    esp,0x1c
c00032e2:	85 d2                	test   edx,edx
c00032e4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00032e8:	8b 30                	mov    esi,DWORD PTR [eax]
c00032ea:	75 0e                	jne    c00032fa <create_chain+0x21>
c00032ec:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c00032ef:	85 ff                	test   edi,edi
c00032f1:	74 39                	je     c000332c <create_chain+0x53>
c00032f3:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c00032f6:	77 39                	ja     c0003331 <create_chain+0x58>
c00032f8:	eb 32                	jmp    c000332c <create_chain+0x53>
c00032fa:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00032fe:	e8 e8 fc ff ff       	call   c0002feb <get_fat>
c0003303:	89 c3                	mov    ebx,eax
c0003305:	83 f8 01             	cmp    eax,0x1
c0003308:	77 0a                	ja     c0003314 <create_chain+0x3b>
c000330a:	bb 01 00 00 00       	mov    ebx,0x1
c000330f:	e9 ba 01 00 00       	jmp    c00034ce <create_chain+0x1f5>
c0003314:	83 f8 ff             	cmp    eax,0xffffffff
c0003317:	0f 84 62 01 00 00    	je     c000347f <create_chain+0x1a6>
c000331d:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c0003320:	0f 87 a8 01 00 00    	ja     c00034ce <create_chain+0x1f5>
c0003326:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000332a:	eb 05                	jmp    c0003331 <create_chain+0x58>
c000332c:	bf 01 00 00 00       	mov    edi,0x1
c0003331:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c0003335:	75 07                	jne    c000333e <create_chain+0x65>
c0003337:	31 db                	xor    ebx,ebx
c0003339:	e9 90 01 00 00       	jmp    c00034ce <create_chain+0x1f5>
c000333e:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003341:	75 74                	jne    c00033b7 <create_chain+0xde>
c0003343:	b9 01 00 00 00       	mov    ecx,0x1
c0003348:	89 fa                	mov    edx,edi
c000334a:	89 f0                	mov    eax,esi
c000334c:	e8 2d f9 ff ff       	call   c0002c7e <find_bitmap>
c0003351:	89 c3                	mov    ebx,eax
c0003353:	8d 40 ff             	lea    eax,[eax-0x1]
c0003356:	83 f8 fd             	cmp    eax,0xfffffffd
c0003359:	0f 87 6f 01 00 00    	ja     c00034ce <create_chain+0x1f5>
c000335f:	83 ec 0c             	sub    esp,0xc
c0003362:	b9 01 00 00 00       	mov    ecx,0x1
c0003367:	6a 01                	push   0x1
c0003369:	89 da                	mov    edx,ebx
c000336b:	89 f0                	mov    eax,esi
c000336d:	e8 bf f9 ff ff       	call   c0002d31 <change_bitmap>
c0003372:	83 c4 10             	add    esp,0x10
c0003375:	83 f8 02             	cmp    eax,0x2
c0003378:	74 90                	je     c000330a <create_chain+0x31>
c000337a:	83 f8 01             	cmp    eax,0x1
c000337d:	0f 84 fc 00 00 00    	je     c000347f <create_chain+0x1a6>
c0003383:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003388:	75 09                	jne    c0003393 <create_chain+0xba>
c000338a:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c000338e:	e9 0c 01 00 00       	jmp    c000349f <create_chain+0x1c6>
c0003393:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c0003397:	0f 85 e7 00 00 00    	jne    c0003484 <create_chain+0x1ab>
c000339d:	8d 57 01             	lea    edx,[edi+0x1]
c00033a0:	39 da                	cmp    edx,ebx
c00033a2:	0f 84 f7 00 00 00    	je     c000349f <create_chain+0x1c6>
c00033a8:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c00033ab:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c00033af:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c00033b2:	e9 cd 00 00 00       	jmp    c0003484 <create_chain+0x1ab>
c00033b7:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c00033bb:	75 41                	jne    c00033fe <create_chain+0x125>
c00033bd:	8d 5f 01             	lea    ebx,[edi+0x1]
c00033c0:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00033c3:	77 05                	ja     c00033ca <create_chain+0xf1>
c00033c5:	bb 02 00 00 00       	mov    ebx,0x2
c00033ca:	89 da                	mov    edx,ebx
c00033cc:	89 e8                	mov    eax,ebp
c00033ce:	e8 18 fc ff ff       	call   c0002feb <get_fat>
c00033d3:	83 f8 01             	cmp    eax,0x1
c00033d6:	0f 84 2e ff ff ff    	je     c000330a <create_chain+0x31>
c00033dc:	83 f8 ff             	cmp    eax,0xffffffff
c00033df:	0f 84 9a 00 00 00    	je     c000347f <create_chain+0x1a6>
c00033e5:	85 c0                	test   eax,eax
c00033e7:	74 11                	je     c00033fa <create_chain+0x121>
c00033e9:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00033ec:	83 f8 01             	cmp    eax,0x1
c00033ef:	76 0d                	jbe    c00033fe <create_chain+0x125>
c00033f1:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00033f4:	76 08                	jbe    c00033fe <create_chain+0x125>
c00033f6:	89 c7                	mov    edi,eax
c00033f8:	eb 04                	jmp    c00033fe <create_chain+0x125>
c00033fa:	85 db                	test   ebx,ebx
c00033fc:	75 38                	jne    c0003436 <create_chain+0x15d>
c00033fe:	89 fb                	mov    ebx,edi
c0003400:	43                   	inc    ebx
c0003401:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c0003404:	77 0e                	ja     c0003414 <create_chain+0x13b>
c0003406:	83 ff 01             	cmp    edi,0x1
c0003409:	0f 86 28 ff ff ff    	jbe    c0003337 <create_chain+0x5e>
c000340f:	bb 02 00 00 00       	mov    ebx,0x2
c0003414:	89 da                	mov    edx,ebx
c0003416:	89 e8                	mov    eax,ebp
c0003418:	e8 ce fb ff ff       	call   c0002feb <get_fat>
c000341d:	85 c0                	test   eax,eax
c000341f:	74 15                	je     c0003436 <create_chain+0x15d>
c0003421:	83 f8 01             	cmp    eax,0x1
c0003424:	0f 84 e0 fe ff ff    	je     c000330a <create_chain+0x31>
c000342a:	40                   	inc    eax
c000342b:	74 52                	je     c000347f <create_chain+0x1a6>
c000342d:	39 fb                	cmp    ebx,edi
c000342f:	75 cf                	jne    c0003400 <create_chain+0x127>
c0003431:	e9 01 ff ff ff       	jmp    c0003337 <create_chain+0x5e>
c0003436:	83 c9 ff             	or     ecx,0xffffffff
c0003439:	89 da                	mov    edx,ebx
c000343b:	89 f0                	mov    eax,esi
c000343d:	e8 a4 f9 ff ff       	call   c0002de6 <put_fat>
c0003442:	85 c0                	test   eax,eax
c0003444:	75 32                	jne    c0003478 <create_chain+0x19f>
c0003446:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000344b:	74 11                	je     c000345e <create_chain+0x185>
c000344d:	89 d9                	mov    ecx,ebx
c000344f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003453:	89 f0                	mov    eax,esi
c0003455:	e8 8c f9 ff ff       	call   c0002de6 <put_fat>
c000345a:	85 c0                	test   eax,eax
c000345c:	75 1a                	jne    c0003478 <create_chain+0x19f>
c000345e:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0003461:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003464:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c0003467:	8d 51 fe             	lea    edx,[ecx-0x2]
c000346a:	39 d0                	cmp    eax,edx
c000346c:	77 04                	ja     c0003472 <create_chain+0x199>
c000346e:	48                   	dec    eax
c000346f:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003472:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c0003476:	eb 56                	jmp    c00034ce <create_chain+0x1f5>
c0003478:	48                   	dec    eax
c0003479:	0f 85 8b fe ff ff    	jne    c000330a <create_chain+0x31>
c000347f:	83 cb ff             	or     ebx,0xffffffff
c0003482:	eb 4a                	jmp    c00034ce <create_chain+0x1f5>
c0003484:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003488:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c000348b:	41                   	inc    ecx
c000348c:	39 d9                	cmp    ecx,ebx
c000348e:	75 19                	jne    c00034a9 <create_chain+0x1d0>
c0003490:	b9 02 00 00 00       	mov    ecx,0x2
c0003495:	85 d2                	test   edx,edx
c0003497:	74 03                	je     c000349c <create_chain+0x1c3>
c0003499:	8d 4a 01             	lea    ecx,[edx+0x1]
c000349c:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c000349f:	85 c0                	test   eax,eax
c00034a1:	0f 85 63 fe ff ff    	jne    c000330a <create_chain+0x31>
c00034a7:	eb b5                	jmp    c000345e <create_chain+0x185>
c00034a9:	85 d2                	test   edx,edx
c00034ab:	75 07                	jne    c00034b4 <create_chain+0x1db>
c00034ad:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c00034b4:	89 d9                	mov    ecx,ebx
c00034b6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00034ba:	89 e8                	mov    eax,ebp
c00034bc:	e8 bb fa ff ff       	call   c0002f7c <fill_last_frag>
c00034c1:	85 c0                	test   eax,eax
c00034c3:	75 b3                	jne    c0003478 <create_chain+0x19f>
c00034c5:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c00034cc:	eb 90                	jmp    c000345e <create_chain+0x185>
c00034ce:	83 c4 1c             	add    esp,0x1c
c00034d1:	89 d8                	mov    eax,ebx
c00034d3:	5b                   	pop    ebx
c00034d4:	5e                   	pop    esi
c00034d5:	5f                   	pop    edi
c00034d6:	5d                   	pop    ebp
c00034d7:	c3                   	ret    

c00034d8 <remove_chain>:
c00034d8:	55                   	push   ebp
c00034d9:	57                   	push   edi
c00034da:	56                   	push   esi
c00034db:	53                   	push   ebx
c00034dc:	83 ec 1c             	sub    esp,0x1c
c00034df:	83 fa 01             	cmp    edx,0x1
c00034e2:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00034e6:	8b 18                	mov    ebx,DWORD PTR [eax]
c00034e8:	77 0a                	ja     c00034f4 <remove_chain+0x1c>
c00034ea:	b8 02 00 00 00       	mov    eax,0x2
c00034ef:	e9 24 01 00 00       	jmp    c0003618 <remove_chain+0x140>
c00034f4:	89 d6                	mov    esi,edx
c00034f6:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c00034f9:	76 ef                	jbe    c00034ea <remove_chain+0x12>
c00034fb:	89 c7                	mov    edi,eax
c00034fd:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0003502:	75 06                	jne    c000350a <remove_chain+0x32>
c0003504:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0003508:	eb 54                	jmp    c000355e <remove_chain+0x86>
c000350a:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000350d:	75 06                	jne    c0003515 <remove_chain+0x3d>
c000350f:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c0003513:	74 ef                	je     c0003504 <remove_chain+0x2c>
c0003515:	83 c9 ff             	or     ecx,0xffffffff
c0003518:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000351c:	89 d8                	mov    eax,ebx
c000351e:	e8 c3 f8 ff ff       	call   c0002de6 <put_fat>
c0003523:	85 c0                	test   eax,eax
c0003525:	74 dd                	je     c0003504 <remove_chain+0x2c>
c0003527:	e9 ec 00 00 00       	jmp    c0003618 <remove_chain+0x140>
c000352c:	83 f8 01             	cmp    eax,0x1
c000352f:	74 b9                	je     c00034ea <remove_chain+0x12>
c0003531:	83 f8 ff             	cmp    eax,0xffffffff
c0003534:	74 6d                	je     c00035a3 <remove_chain+0xcb>
c0003536:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003539:	75 6f                	jne    c00035aa <remove_chain+0xd2>
c000353b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000353e:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c0003541:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003544:	39 d0                	cmp    eax,edx
c0003546:	73 08                	jae    c0003550 <remove_chain+0x78>
c0003548:	40                   	inc    eax
c0003549:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c000354d:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003550:	8d 4e 01             	lea    ecx,[esi+0x1]
c0003553:	39 e9                	cmp    ecx,ebp
c0003555:	75 64                	jne    c00035bb <remove_chain+0xe3>
c0003557:	89 ee                	mov    esi,ebp
c0003559:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c000355c:	76 0f                	jbe    c000356d <remove_chain+0x95>
c000355e:	89 f2                	mov    edx,esi
c0003560:	89 f8                	mov    eax,edi
c0003562:	e8 84 fa ff ff       	call   c0002feb <get_fat>
c0003567:	89 c5                	mov    ebp,eax
c0003569:	85 c0                	test   eax,eax
c000356b:	75 bf                	jne    c000352c <remove_chain+0x54>
c000356d:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003570:	0f 85 a0 00 00 00    	jne    c0003616 <remove_chain+0x13e>
c0003576:	eb 6c                	jmp    c00035e4 <remove_chain+0x10c>
c0003578:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c000357b:	84 c0                	test   al,al
c000357d:	75 7d                	jne    c00035fc <remove_chain+0x124>
c000357f:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0003582:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c0003586:	0f 84 86 00 00 00    	je     c0003612 <remove_chain+0x13a>
c000358c:	89 da                	mov    edx,ebx
c000358e:	89 f8                	mov    eax,edi
c0003590:	e8 56 fa ff ff       	call   c0002feb <get_fat>
c0003595:	83 f8 01             	cmp    eax,0x1
c0003598:	0f 86 4c ff ff ff    	jbe    c00034ea <remove_chain+0x12>
c000359e:	83 f8 ff             	cmp    eax,0xffffffff
c00035a1:	75 4e                	jne    c00035f1 <remove_chain+0x119>
c00035a3:	b8 01 00 00 00       	mov    eax,0x1
c00035a8:	eb 6e                	jmp    c0003618 <remove_chain+0x140>
c00035aa:	31 c9                	xor    ecx,ecx
c00035ac:	89 f2                	mov    edx,esi
c00035ae:	89 d8                	mov    eax,ebx
c00035b0:	e8 31 f8 ff ff       	call   c0002de6 <put_fat>
c00035b5:	85 c0                	test   eax,eax
c00035b7:	74 82                	je     c000353b <remove_chain+0x63>
c00035b9:	eb 5d                	jmp    c0003618 <remove_chain+0x140>
c00035bb:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00035be:	75 1b                	jne    c00035db <remove_chain+0x103>
c00035c0:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c00035c4:	89 d8                	mov    eax,ebx
c00035c6:	83 ec 0c             	sub    esp,0xc
c00035c9:	6a 00                	push   0x0
c00035cb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00035cf:	e8 5d f7 ff ff       	call   c0002d31 <change_bitmap>
c00035d4:	83 c4 10             	add    esp,0x10
c00035d7:	85 c0                	test   eax,eax
c00035d9:	75 3d                	jne    c0003618 <remove_chain+0x140>
c00035db:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c00035df:	e9 73 ff ff ff       	jmp    c0003557 <remove_chain+0x7f>
c00035e4:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00035e9:	75 8d                	jne    c0003578 <remove_chain+0xa0>
c00035eb:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c00035ef:	eb 25                	jmp    c0003616 <remove_chain+0x13e>
c00035f1:	8d 53 01             	lea    edx,[ebx+0x1]
c00035f4:	89 c3                	mov    ebx,eax
c00035f6:	39 c2                	cmp    edx,eax
c00035f8:	74 88                	je     c0003582 <remove_chain+0xaa>
c00035fa:	eb 1a                	jmp    c0003616 <remove_chain+0x13e>
c00035fc:	3c 03                	cmp    al,0x3
c00035fe:	75 16                	jne    c0003616 <remove_chain+0x13e>
c0003600:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0003603:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0003607:	77 0d                	ja     c0003616 <remove_chain+0x13e>
c0003609:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c000360c:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0003610:	72 04                	jb     c0003616 <remove_chain+0x13e>
c0003612:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c0003616:	31 c0                	xor    eax,eax
c0003618:	83 c4 1c             	add    esp,0x1c
c000361b:	5b                   	pop    ebx
c000361c:	5e                   	pop    esi
c000361d:	5f                   	pop    edi
c000361e:	5d                   	pop    ebp
c000361f:	c3                   	ret    

c0003620 <dir_clear>:
c0003620:	55                   	push   ebp
c0003621:	57                   	push   edi
c0003622:	56                   	push   esi
c0003623:	89 c6                	mov    esi,eax
c0003625:	53                   	push   ebx
c0003626:	83 ec 1c             	sub    esp,0x1c
c0003629:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000362d:	e8 9d ed ff ff       	call   c00023cf <sync_window>
c0003632:	85 c0                	test   eax,eax
c0003634:	0f 85 de 00 00 00    	jne    c0003718 <dir_clear+0xf8>
c000363a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000363e:	89 f0                	mov    eax,esi
c0003640:	8d 6e 54             	lea    ebp,[esi+0x54]
c0003643:	e8 d6 e8 ff ff       	call   c0001f1e <clst2sect>
c0003648:	b9 00 02 00 00       	mov    ecx,0x200
c000364d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003651:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003655:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c0003658:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c000365b:	89 e8                	mov    eax,ebp
c000365d:	31 d2                	xor    edx,edx
c000365f:	e8 b5 e6 ff ff       	call   c0001d19 <mem_set>
c0003664:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0003668:	c1 e3 09             	shl    ebx,0x9
c000366b:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0003671:	76 1f                	jbe    c0003692 <dir_clear+0x72>
c0003673:	bb 00 80 00 00       	mov    ebx,0x8000
c0003678:	eb 18                	jmp    c0003692 <dir_clear+0x72>
c000367a:	83 ec 0c             	sub    esp,0xc
c000367d:	53                   	push   ebx
c000367e:	e8 35 4e 00 00       	call   c00084b8 <ff_memalloc>
c0003683:	83 c4 10             	add    esp,0x10
c0003686:	89 c7                	mov    edi,eax
c0003688:	85 c0                	test   eax,eax
c000368a:	0f 85 8f 00 00 00    	jne    c000371f <dir_clear+0xff>
c0003690:	d1 eb                	shr    ebx,1
c0003692:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0003698:	77 e0                	ja     c000367a <dir_clear+0x5a>
c000369a:	31 db                	xor    ebx,ebx
c000369c:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00036a0:	39 d8                	cmp    eax,ebx
c00036a2:	76 66                	jbe    c000370a <dir_clear+0xea>
c00036a4:	83 ec 0c             	sub    esp,0xc
c00036a7:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00036ab:	6a 01                	push   0x1
c00036ad:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00036b1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00036b5:	55                   	push   ebp
c00036b6:	50                   	push   eax
c00036b7:	e8 94 e5 ff ff       	call   c0001c50 <disk_write>
c00036bc:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c00036c1:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c00036c6:	83 c4 20             	add    esp,0x20
c00036c9:	85 c0                	test   eax,eax
c00036cb:	75 3d                	jne    c000370a <dir_clear+0xea>
c00036cd:	43                   	inc    ebx
c00036ce:	eb cc                	jmp    c000369c <dir_clear+0x7c>
c00036d0:	83 ec 0c             	sub    esp,0xc
c00036d3:	31 d2                	xor    edx,edx
c00036d5:	55                   	push   ebp
c00036d6:	89 d8                	mov    eax,ebx
c00036d8:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00036dc:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00036e0:	52                   	push   edx
c00036e1:	50                   	push   eax
c00036e2:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00036e6:	57                   	push   edi
c00036e7:	50                   	push   eax
c00036e8:	e8 63 e5 ff ff       	call   c0001c50 <disk_write>
c00036ed:	83 c4 20             	add    esp,0x20
c00036f0:	85 c0                	test   eax,eax
c00036f2:	75 0a                	jne    c00036fe <dir_clear+0xde>
c00036f4:	01 eb                	add    ebx,ebp
c00036f6:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00036fa:	39 d8                	cmp    eax,ebx
c00036fc:	77 d2                	ja     c00036d0 <dir_clear+0xb0>
c00036fe:	83 ec 0c             	sub    esp,0xc
c0003701:	57                   	push   edi
c0003702:	e8 c7 4d 00 00       	call   c00084ce <ff_memfree>
c0003707:	83 c4 10             	add    esp,0x10
c000370a:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000370e:	39 d8                	cmp    eax,ebx
c0003710:	0f 95 c0             	setne  al
c0003713:	0f b6 c0             	movzx  eax,al
c0003716:	eb 19                	jmp    c0003731 <dir_clear+0x111>
c0003718:	b8 01 00 00 00       	mov    eax,0x1
c000371d:	eb 12                	jmp    c0003731 <dir_clear+0x111>
c000371f:	89 d9                	mov    ecx,ebx
c0003721:	31 d2                	xor    edx,edx
c0003723:	c1 eb 09             	shr    ebx,0x9
c0003726:	e8 ee e5 ff ff       	call   c0001d19 <mem_set>
c000372b:	89 dd                	mov    ebp,ebx
c000372d:	31 db                	xor    ebx,ebx
c000372f:	eb c5                	jmp    c00036f6 <dir_clear+0xd6>
c0003731:	83 c4 1c             	add    esp,0x1c
c0003734:	5b                   	pop    ebx
c0003735:	5e                   	pop    esi
c0003736:	5f                   	pop    edi
c0003737:	5d                   	pop    ebp
c0003738:	c3                   	ret    

c0003739 <dir_next>:
c0003739:	55                   	push   ebp
c000373a:	57                   	push   edi
c000373b:	56                   	push   esi
c000373c:	53                   	push   ebx
c000373d:	89 c3                	mov    ebx,eax
c000373f:	83 ec 1c             	sub    esp,0x1c
c0003742:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003744:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003748:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000374b:	8d 78 20             	lea    edi,[eax+0x20]
c000374e:	31 c0                	xor    eax,eax
c0003750:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c0003754:	0f 94 c0             	sete   al
c0003757:	48                   	dec    eax
c0003758:	25 00 00 20 f0       	and    eax,0xf0200000
c000375d:	05 00 00 00 10       	add    eax,0x10000000
c0003762:	39 f8                	cmp    eax,edi
c0003764:	77 0e                	ja     c0003774 <dir_next+0x3b>
c0003766:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c000376d:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003774:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003777:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000377a:	b8 04 00 00 00       	mov    eax,0x4
c000377f:	89 ce                	mov    esi,ecx
c0003781:	09 d6                	or     esi,edx
c0003783:	0f 84 da 00 00 00    	je     c0003863 <dir_next+0x12a>
c0003789:	89 f8                	mov    eax,edi
c000378b:	25 ff 01 00 00       	and    eax,0x1ff
c0003790:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003794:	0f 85 b9 00 00 00    	jne    c0003853 <dir_next+0x11a>
c000379a:	83 c2 01             	add    edx,0x1
c000379d:	83 d1 00             	adc    ecx,0x0
c00037a0:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00037a3:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c00037a6:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00037a9:	85 d2                	test   edx,edx
c00037ab:	75 29                	jne    c00037d6 <dir_next+0x9d>
c00037ad:	89 fa                	mov    edx,edi
c00037af:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c00037b3:	c1 ea 05             	shr    edx,0x5
c00037b6:	39 c2                	cmp    edx,eax
c00037b8:	0f 82 95 00 00 00    	jb     c0003853 <dir_next+0x11a>
c00037be:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00037c5:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00037cc:	b8 04 00 00 00       	mov    eax,0x4
c00037d1:	e9 8d 00 00 00       	jmp    c0003863 <dir_next+0x12a>
c00037d6:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c00037da:	89 f9                	mov    ecx,edi
c00037dc:	48                   	dec    eax
c00037dd:	c1 e9 09             	shr    ecx,0x9
c00037e0:	85 c8                	test   eax,ecx
c00037e2:	75 6f                	jne    c0003853 <dir_next+0x11a>
c00037e4:	89 d8                	mov    eax,ebx
c00037e6:	e8 00 f8 ff ff       	call   c0002feb <get_fat>
c00037eb:	89 c6                	mov    esi,eax
c00037ed:	83 f8 01             	cmp    eax,0x1
c00037f0:	77 07                	ja     c00037f9 <dir_next+0xc0>
c00037f2:	b8 02 00 00 00       	mov    eax,0x2
c00037f7:	eb 6a                	jmp    c0003863 <dir_next+0x12a>
c00037f9:	83 f8 ff             	cmp    eax,0xffffffff
c00037fc:	75 07                	jne    c0003805 <dir_next+0xcc>
c00037fe:	b8 01 00 00 00       	mov    eax,0x1
c0003803:	eb 5e                	jmp    c0003863 <dir_next+0x12a>
c0003805:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0003808:	77 37                	ja     c0003841 <dir_next+0x108>
c000380a:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000380f:	74 ad                	je     c00037be <dir_next+0x85>
c0003811:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0003814:	89 d8                	mov    eax,ebx
c0003816:	e8 be fa ff ff       	call   c00032d9 <create_chain>
c000381b:	89 c6                	mov    esi,eax
c000381d:	b8 07 00 00 00       	mov    eax,0x7
c0003822:	85 f6                	test   esi,esi
c0003824:	74 3d                	je     c0003863 <dir_next+0x12a>
c0003826:	83 fe 01             	cmp    esi,0x1
c0003829:	74 c7                	je     c00037f2 <dir_next+0xb9>
c000382b:	83 fe ff             	cmp    esi,0xffffffff
c000382e:	74 ce                	je     c00037fe <dir_next+0xc5>
c0003830:	89 f2                	mov    edx,esi
c0003832:	89 e8                	mov    eax,ebp
c0003834:	e8 e7 fd ff ff       	call   c0003620 <dir_clear>
c0003839:	85 c0                	test   eax,eax
c000383b:	75 c1                	jne    c00037fe <dir_next+0xc5>
c000383d:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c0003841:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0003844:	89 f2                	mov    edx,esi
c0003846:	89 e8                	mov    eax,ebp
c0003848:	e8 d1 e6 ff ff       	call   c0001f1e <clst2sect>
c000384d:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003850:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003853:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003857:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c000385a:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c000385e:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0003861:	31 c0                	xor    eax,eax
c0003863:	83 c4 1c             	add    esp,0x1c
c0003866:	5b                   	pop    ebx
c0003867:	5e                   	pop    esi
c0003868:	5f                   	pop    edi
c0003869:	5d                   	pop    ebp
c000386a:	c3                   	ret    

c000386b <load_xdir>:
c000386b:	55                   	push   ebp
c000386c:	57                   	push   edi
c000386d:	56                   	push   esi
c000386e:	89 c6                	mov    esi,eax
c0003870:	53                   	push   ebx
c0003871:	83 ec 1c             	sub    esp,0x1c
c0003874:	8b 00                	mov    eax,DWORD PTR [eax]
c0003876:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003879:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000387c:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000387f:	e8 df eb ff ff       	call   c0002463 <move_window>
c0003884:	89 c3                	mov    ebx,eax
c0003886:	85 c0                	test   eax,eax
c0003888:	0f 85 0c 01 00 00    	jne    c000399a <load_xdir+0x12f>
c000388e:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003891:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c0003894:	0f 85 fb 00 00 00    	jne    c0003995 <load_xdir+0x12a>
c000389a:	89 f8                	mov    eax,edi
c000389c:	b9 20 00 00 00       	mov    ecx,0x20
c00038a1:	e8 5e e4 ff ff       	call   c0001d04 <mem_cpy>
c00038a6:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c00038aa:	40                   	inc    eax
c00038ab:	c1 e0 05             	shl    eax,0x5
c00038ae:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00038b2:	83 e8 60             	sub    eax,0x60
c00038b5:	3d 00 02 00 00       	cmp    eax,0x200
c00038ba:	0f 87 d5 00 00 00    	ja     c0003995 <load_xdir+0x12a>
c00038c0:	31 d2                	xor    edx,edx
c00038c2:	89 f0                	mov    eax,esi
c00038c4:	e8 70 fe ff ff       	call   c0003739 <dir_next>
c00038c9:	89 c3                	mov    ebx,eax
c00038cb:	83 f8 04             	cmp    eax,0x4
c00038ce:	0f 84 c1 00 00 00    	je     c0003995 <load_xdir+0x12a>
c00038d4:	85 c0                	test   eax,eax
c00038d6:	0f 85 be 00 00 00    	jne    c000399a <load_xdir+0x12f>
c00038dc:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00038df:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00038e2:	8b 06                	mov    eax,DWORD PTR [esi]
c00038e4:	e8 7a eb ff ff       	call   c0002463 <move_window>
c00038e9:	89 c3                	mov    ebx,eax
c00038eb:	85 c0                	test   eax,eax
c00038ed:	0f 85 a7 00 00 00    	jne    c000399a <load_xdir+0x12f>
c00038f3:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00038f6:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c00038f9:	0f 85 96 00 00 00    	jne    c0003995 <load_xdir+0x12a>
c00038ff:	8d 47 20             	lea    eax,[edi+0x20]
c0003902:	b9 20 00 00 00       	mov    ecx,0x20
c0003907:	e8 f8 e3 ff ff       	call   c0001d04 <mem_cpy>
c000390c:	31 d2                	xor    edx,edx
c000390e:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c0003912:	b9 0f 00 00 00       	mov    ecx,0xf
c0003917:	83 c0 2c             	add    eax,0x2c
c000391a:	f7 f1                	div    ecx
c000391c:	c1 e0 05             	shl    eax,0x5
c000391f:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003923:	77 70                	ja     c0003995 <load_xdir+0x12a>
c0003925:	bd 40 00 00 00       	mov    ebp,0x40
c000392a:	31 d2                	xor    edx,edx
c000392c:	89 f0                	mov    eax,esi
c000392e:	e8 06 fe ff ff       	call   c0003739 <dir_next>
c0003933:	89 c3                	mov    ebx,eax
c0003935:	83 f8 04             	cmp    eax,0x4
c0003938:	74 5b                	je     c0003995 <load_xdir+0x12a>
c000393a:	85 c0                	test   eax,eax
c000393c:	75 5c                	jne    c000399a <load_xdir+0x12f>
c000393e:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003941:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003944:	8b 06                	mov    eax,DWORD PTR [esi]
c0003946:	e8 18 eb ff ff       	call   c0002463 <move_window>
c000394b:	89 c3                	mov    ebx,eax
c000394d:	85 c0                	test   eax,eax
c000394f:	75 49                	jne    c000399a <load_xdir+0x12f>
c0003951:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003954:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c0003957:	75 3c                	jne    c0003995 <load_xdir+0x12a>
c0003959:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c000395f:	77 0d                	ja     c000396e <load_xdir+0x103>
c0003961:	8d 04 2f             	lea    eax,[edi+ebp*1]
c0003964:	b9 20 00 00 00       	mov    ecx,0x20
c0003969:	e8 96 e3 ff ff       	call   c0001d04 <mem_cpy>
c000396e:	83 c5 20             	add    ebp,0x20
c0003971:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c0003975:	77 b3                	ja     c000392a <load_xdir+0xbf>
c0003977:	81 fd 60 02 00 00    	cmp    ebp,0x260
c000397d:	77 1b                	ja     c000399a <load_xdir+0x12f>
c000397f:	89 f8                	mov    eax,edi
c0003981:	e8 cd e7 ff ff       	call   c0002153 <xdir_sum>
c0003986:	89 c1                	mov    ecx,eax
c0003988:	8d 47 02             	lea    eax,[edi+0x2]
c000398b:	e8 f5 e2 ff ff       	call   c0001c85 <ld_word>
c0003990:	66 39 c1             	cmp    cx,ax
c0003993:	74 05                	je     c000399a <load_xdir+0x12f>
c0003995:	bb 02 00 00 00       	mov    ebx,0x2
c000399a:	83 c4 1c             	add    esp,0x1c
c000399d:	89 d8                	mov    eax,ebx
c000399f:	5b                   	pop    ebx
c00039a0:	5e                   	pop    esi
c00039a1:	5f                   	pop    edi
c00039a2:	5d                   	pop    ebp
c00039a3:	c3                   	ret    

c00039a4 <load_obj_xdir>:
c00039a4:	53                   	push   ebx
c00039a5:	89 c3                	mov    ebx,eax
c00039a7:	83 ec 08             	sub    esp,0x8
c00039aa:	8b 02                	mov    eax,DWORD PTR [edx]
c00039ac:	89 03                	mov    DWORD PTR [ebx],eax
c00039ae:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c00039b1:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00039b4:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00039b7:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c00039ba:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00039bd:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00039c4:	30 c0                	xor    al,al
c00039c6:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00039cd:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00039d0:	89 d8                	mov    eax,ebx
c00039d2:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c00039d5:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c00039d8:	e8 04 f8 ff ff       	call   c00031e1 <dir_sdi>
c00039dd:	85 c0                	test   eax,eax
c00039df:	75 0b                	jne    c00039ec <load_obj_xdir+0x48>
c00039e1:	89 d8                	mov    eax,ebx
c00039e3:	83 c4 08             	add    esp,0x8
c00039e6:	5b                   	pop    ebx
c00039e7:	e9 7f fe ff ff       	jmp    c000386b <load_xdir>
c00039ec:	83 c4 08             	add    esp,0x8
c00039ef:	5b                   	pop    ebx
c00039f0:	c3                   	ret    

c00039f1 <dir_read>:
c00039f1:	55                   	push   ebp
c00039f2:	bd 04 00 00 00       	mov    ebp,0x4
c00039f7:	57                   	push   edi
c00039f8:	56                   	push   esi
c00039f9:	be ff ff ff ff       	mov    esi,0xffffffff
c00039fe:	53                   	push   ebx
c00039ff:	89 c3                	mov    ebx,eax
c0003a01:	83 ec 1c             	sub    esp,0x1c
c0003a04:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003a08:	8b 38                	mov    edi,DWORD PTR [eax]
c0003a0a:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c0003a0f:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003a12:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003a15:	89 c8                	mov    eax,ecx
c0003a17:	09 d0                	or     eax,edx
c0003a19:	0f 84 25 01 00 00    	je     c0003b44 <dir_read+0x153>
c0003a1f:	89 f8                	mov    eax,edi
c0003a21:	e8 3d ea ff ff       	call   c0002463 <move_window>
c0003a26:	89 c5                	mov    ebp,eax
c0003a28:	85 c0                	test   eax,eax
c0003a2a:	0f 85 23 01 00 00    	jne    c0003b53 <dir_read+0x162>
c0003a30:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003a33:	8a 0a                	mov    cl,BYTE PTR [edx]
c0003a35:	84 c9                	test   cl,cl
c0003a37:	0f 84 11 01 00 00    	je     c0003b4e <dir_read+0x15d>
c0003a3d:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003a40:	75 48                	jne    c0003a8a <dir_read+0x99>
c0003a42:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003a47:	74 10                	je     c0003a59 <dir_read+0x68>
c0003a49:	80 f9 83             	cmp    cl,0x83
c0003a4c:	0f 85 dd 00 00 00    	jne    c0003b2f <dir_read+0x13e>
c0003a52:	31 ed                	xor    ebp,ebp
c0003a54:	e9 08 01 00 00       	jmp    c0003b61 <dir_read+0x170>
c0003a59:	80 f9 85             	cmp    cl,0x85
c0003a5c:	0f 85 cd 00 00 00    	jne    c0003b2f <dir_read+0x13e>
c0003a62:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003a65:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003a68:	89 d8                	mov    eax,ebx
c0003a6a:	e8 fc fd ff ff       	call   c000386b <load_xdir>
c0003a6f:	89 c5                	mov    ebp,eax
c0003a71:	85 c0                	test   eax,eax
c0003a73:	0f 85 da 00 00 00    	jne    c0003b53 <dir_read+0x162>
c0003a79:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003a7c:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003a7f:	83 e0 3f             	and    eax,0x3f
c0003a82:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a85:	e9 d7 00 00 00       	jmp    c0003b61 <dir_read+0x170>
c0003a8a:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003a8d:	83 e0 3f             	and    eax,0x3f
c0003a90:	80 f9 2e             	cmp    cl,0x2e
c0003a93:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003a97:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a9a:	0f 84 8a 00 00 00    	je     c0003b2a <dir_read+0x139>
c0003aa0:	80 f9 e5             	cmp    cl,0xe5
c0003aa3:	0f 84 81 00 00 00    	je     c0003b2a <dir_read+0x139>
c0003aa9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003aad:	83 e0 1f             	and    eax,0x1f
c0003ab0:	83 f8 08             	cmp    eax,0x8
c0003ab3:	0f 94 c0             	sete   al
c0003ab6:	0f b6 c0             	movzx  eax,al
c0003ab9:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003abd:	75 6b                	jne    c0003b2a <dir_read+0x139>
c0003abf:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003ac4:	75 44                	jne    c0003b0a <dir_read+0x119>
c0003ac6:	f6 c1 40             	test   cl,0x40
c0003ac9:	74 12                	je     c0003add <dir_read+0xec>
c0003acb:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c0003ace:	83 e1 bf             	and    ecx,0xffffffbf
c0003ad1:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003ad5:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003ad8:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003adb:	eb 06                	jmp    c0003ae3 <dir_read+0xf2>
c0003add:	89 f0                	mov    eax,esi
c0003adf:	38 c8                	cmp    al,cl
c0003ae1:	75 47                	jne    c0003b2a <dir_read+0x139>
c0003ae3:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003ae7:	be ff ff ff ff       	mov    esi,0xffffffff
c0003aec:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c0003aef:	75 3e                	jne    c0003b2f <dir_read+0x13e>
c0003af1:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0003af5:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003af8:	e8 8a e4 ff ff       	call   c0001f87 <pick_lfn>
c0003afd:	85 c0                	test   eax,eax
c0003aff:	74 2e                	je     c0003b2f <dir_read+0x13e>
c0003b01:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0003b05:	8d 71 ff             	lea    esi,[ecx-0x1]
c0003b08:	eb 25                	jmp    c0003b2f <dir_read+0x13e>
c0003b0a:	89 f0                	mov    eax,esi
c0003b0c:	84 c0                	test   al,al
c0003b0e:	75 11                	jne    c0003b21 <dir_read+0x130>
c0003b10:	89 d0                	mov    eax,edx
c0003b12:	e8 2a e6 ff ff       	call   c0002141 <sum_sfn>
c0003b17:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c0003b1b:	0f 84 31 ff ff ff    	je     c0003a52 <dir_read+0x61>
c0003b21:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003b28:	eb 37                	jmp    c0003b61 <dir_read+0x170>
c0003b2a:	be ff ff ff ff       	mov    esi,0xffffffff
c0003b2f:	31 d2                	xor    edx,edx
c0003b31:	89 d8                	mov    eax,ebx
c0003b33:	e8 01 fc ff ff       	call   c0003739 <dir_next>
c0003b38:	89 c5                	mov    ebp,eax
c0003b3a:	85 c0                	test   eax,eax
c0003b3c:	0f 84 cd fe ff ff    	je     c0003a0f <dir_read+0x1e>
c0003b42:	eb 0f                	jmp    c0003b53 <dir_read+0x162>
c0003b44:	85 ed                	test   ebp,ebp
c0003b46:	0f 84 06 ff ff ff    	je     c0003a52 <dir_read+0x61>
c0003b4c:	eb 05                	jmp    c0003b53 <dir_read+0x162>
c0003b4e:	bd 04 00 00 00       	mov    ebp,0x4
c0003b53:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003b5a:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003b61:	83 c4 1c             	add    esp,0x1c
c0003b64:	89 e8                	mov    eax,ebp
c0003b66:	5b                   	pop    ebx
c0003b67:	5e                   	pop    esi
c0003b68:	5f                   	pop    edi
c0003b69:	5d                   	pop    ebp
c0003b6a:	c3                   	ret    

c0003b6b <dir_alloc>:
c0003b6b:	55                   	push   ebp
c0003b6c:	89 d5                	mov    ebp,edx
c0003b6e:	57                   	push   edi
c0003b6f:	31 d2                	xor    edx,edx
c0003b71:	56                   	push   esi
c0003b72:	53                   	push   ebx
c0003b73:	89 c3                	mov    ebx,eax
c0003b75:	83 ec 0c             	sub    esp,0xc
c0003b78:	8b 38                	mov    edi,DWORD PTR [eax]
c0003b7a:	e8 62 f6 ff ff       	call   c00031e1 <dir_sdi>
c0003b7f:	85 c0                	test   eax,eax
c0003b81:	75 4e                	jne    c0003bd1 <dir_alloc+0x66>
c0003b83:	31 f6                	xor    esi,esi
c0003b85:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003b88:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003b8b:	89 f8                	mov    eax,edi
c0003b8d:	e8 d1 e8 ff ff       	call   c0002463 <move_window>
c0003b92:	85 c0                	test   eax,eax
c0003b94:	75 3b                	jne    c0003bd1 <dir_alloc+0x66>
c0003b96:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003b99:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003b9c:	8a 12                	mov    dl,BYTE PTR [edx]
c0003b9e:	75 07                	jne    c0003ba7 <dir_alloc+0x3c>
c0003ba0:	f7 d2                	not    edx
c0003ba2:	c0 ea 07             	shr    dl,0x7
c0003ba5:	eb 0d                	jmp    c0003bb4 <dir_alloc+0x49>
c0003ba7:	84 d2                	test   dl,dl
c0003ba9:	0f 94 c1             	sete   cl
c0003bac:	80 fa e5             	cmp    dl,0xe5
c0003baf:	0f 94 c2             	sete   dl
c0003bb2:	09 ca                	or     edx,ecx
c0003bb4:	84 d2                	test   dl,dl
c0003bb6:	74 07                	je     c0003bbf <dir_alloc+0x54>
c0003bb8:	46                   	inc    esi
c0003bb9:	39 ee                	cmp    esi,ebp
c0003bbb:	75 04                	jne    c0003bc1 <dir_alloc+0x56>
c0003bbd:	eb 1c                	jmp    c0003bdb <dir_alloc+0x70>
c0003bbf:	31 f6                	xor    esi,esi
c0003bc1:	ba 01 00 00 00       	mov    edx,0x1
c0003bc6:	89 d8                	mov    eax,ebx
c0003bc8:	e8 6c fb ff ff       	call   c0003739 <dir_next>
c0003bcd:	85 c0                	test   eax,eax
c0003bcf:	74 b4                	je     c0003b85 <dir_alloc+0x1a>
c0003bd1:	83 f8 04             	cmp    eax,0x4
c0003bd4:	75 05                	jne    c0003bdb <dir_alloc+0x70>
c0003bd6:	b8 07 00 00 00       	mov    eax,0x7
c0003bdb:	83 c4 0c             	add    esp,0xc
c0003bde:	5b                   	pop    ebx
c0003bdf:	5e                   	pop    esi
c0003be0:	5f                   	pop    edi
c0003be1:	5d                   	pop    ebp
c0003be2:	c3                   	ret    

c0003be3 <store_xdir>:
c0003be3:	55                   	push   ebp
c0003be4:	57                   	push   edi
c0003be5:	89 c7                	mov    edi,eax
c0003be7:	56                   	push   esi
c0003be8:	53                   	push   ebx
c0003be9:	83 ec 0c             	sub    esp,0xc
c0003bec:	8b 00                	mov    eax,DWORD PTR [eax]
c0003bee:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c0003bf1:	89 e8                	mov    eax,ebp
c0003bf3:	e8 5b e5 ff ff       	call   c0002153 <xdir_sum>
c0003bf8:	0f b7 d0             	movzx  edx,ax
c0003bfb:	8d 45 02             	lea    eax,[ebp+0x2]
c0003bfe:	e8 f4 e0 ff ff       	call   c0001cf7 <st_word>
c0003c03:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003c07:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003c0a:	89 f8                	mov    eax,edi
c0003c0c:	e8 d0 f5 ff ff       	call   c00031e1 <dir_sdi>
c0003c11:	89 c6                	mov    esi,eax
c0003c13:	85 f6                	test   esi,esi
c0003c15:	75 3d                	jne    c0003c54 <store_xdir+0x71>
c0003c17:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003c1a:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003c1d:	8b 07                	mov    eax,DWORD PTR [edi]
c0003c1f:	e8 3f e8 ff ff       	call   c0002463 <move_window>
c0003c24:	89 c6                	mov    esi,eax
c0003c26:	85 c0                	test   eax,eax
c0003c28:	75 2a                	jne    c0003c54 <store_xdir+0x71>
c0003c2a:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003c2d:	b9 20 00 00 00       	mov    ecx,0x20
c0003c32:	89 ea                	mov    edx,ebp
c0003c34:	e8 cb e0 ff ff       	call   c0001d04 <mem_cpy>
c0003c39:	8b 07                	mov    eax,DWORD PTR [edi]
c0003c3b:	85 db                	test   ebx,ebx
c0003c3d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003c41:	74 11                	je     c0003c54 <store_xdir+0x71>
c0003c43:	31 d2                	xor    edx,edx
c0003c45:	89 f8                	mov    eax,edi
c0003c47:	83 c5 20             	add    ebp,0x20
c0003c4a:	e8 ea fa ff ff       	call   c0003739 <dir_next>
c0003c4f:	4b                   	dec    ebx
c0003c50:	89 c6                	mov    esi,eax
c0003c52:	eb bf                	jmp    c0003c13 <store_xdir+0x30>
c0003c54:	89 f0                	mov    eax,esi
c0003c56:	83 fe 02             	cmp    esi,0x2
c0003c59:	76 05                	jbe    c0003c60 <store_xdir+0x7d>
c0003c5b:	b8 02 00 00 00       	mov    eax,0x2
c0003c60:	83 c4 0c             	add    esp,0xc
c0003c63:	5b                   	pop    ebx
c0003c64:	5e                   	pop    esi
c0003c65:	5f                   	pop    edi
c0003c66:	5d                   	pop    ebp
c0003c67:	c3                   	ret    

c0003c68 <dir_remove>:
c0003c68:	57                   	push   edi
c0003c69:	56                   	push   esi
c0003c6a:	53                   	push   ebx
c0003c6b:	89 c3                	mov    ebx,eax
c0003c6d:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003c70:	8b 30                	mov    esi,DWORD PTR [eax]
c0003c72:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003c75:	83 fa ff             	cmp    edx,0xffffffff
c0003c78:	74 09                	je     c0003c83 <dir_remove+0x1b>
c0003c7a:	e8 62 f5 ff ff       	call   c00031e1 <dir_sdi>
c0003c7f:	85 c0                	test   eax,eax
c0003c81:	75 41                	jne    c0003cc4 <dir_remove+0x5c>
c0003c83:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003c86:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003c89:	89 f0                	mov    eax,esi
c0003c8b:	e8 d3 e7 ff ff       	call   c0002463 <move_window>
c0003c90:	85 c0                	test   eax,eax
c0003c92:	75 26                	jne    c0003cba <dir_remove+0x52>
c0003c94:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003c97:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003c9a:	75 05                	jne    c0003ca1 <dir_remove+0x39>
c0003c9c:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003c9f:	eb 03                	jmp    c0003ca4 <dir_remove+0x3c>
c0003ca1:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003ca4:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003ca8:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003cab:	73 17                	jae    c0003cc4 <dir_remove+0x5c>
c0003cad:	31 d2                	xor    edx,edx
c0003caf:	89 d8                	mov    eax,ebx
c0003cb1:	e8 83 fa ff ff       	call   c0003739 <dir_next>
c0003cb6:	85 c0                	test   eax,eax
c0003cb8:	74 c9                	je     c0003c83 <dir_remove+0x1b>
c0003cba:	83 f8 04             	cmp    eax,0x4
c0003cbd:	75 05                	jne    c0003cc4 <dir_remove+0x5c>
c0003cbf:	b8 02 00 00 00       	mov    eax,0x2
c0003cc4:	5b                   	pop    ebx
c0003cc5:	5e                   	pop    esi
c0003cc6:	5f                   	pop    edi
c0003cc7:	c3                   	ret    

c0003cc8 <create_name>:
c0003cc8:	55                   	push   ebp
c0003cc9:	89 d5                	mov    ebp,edx
c0003ccb:	57                   	push   edi
c0003ccc:	89 c7                	mov    edi,eax
c0003cce:	56                   	push   esi
c0003ccf:	31 f6                	xor    esi,esi
c0003cd1:	53                   	push   ebx
c0003cd2:	83 ec 3c             	sub    esp,0x3c
c0003cd5:	8b 02                	mov    eax,DWORD PTR [edx]
c0003cd7:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003cdb:	8b 07                	mov    eax,DWORD PTR [edi]
c0003cdd:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003ce0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003ce4:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003ce8:	e8 72 e0 ff ff       	call   c0001d5f <tchar2uni>
c0003ced:	89 c3                	mov    ebx,eax
c0003cef:	83 f8 ff             	cmp    eax,0xffffffff
c0003cf2:	75 0a                	jne    c0003cfe <create_name+0x36>
c0003cf4:	b8 06 00 00 00       	mov    eax,0x6
c0003cf9:	e9 9e 02 00 00       	jmp    c0003f9c <create_name+0x2d4>
c0003cfe:	3d ff ff 00 00       	cmp    eax,0xffff
c0003d03:	76 0c                	jbe    c0003d11 <create_name+0x49>
c0003d05:	c1 e8 10             	shr    eax,0x10
c0003d08:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003d0c:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003d10:	46                   	inc    esi
c0003d11:	66 83 fb 1f          	cmp    bx,0x1f
c0003d15:	76 4f                	jbe    c0003d66 <create_name+0x9e>
c0003d17:	66 83 fb 5c          	cmp    bx,0x5c
c0003d1b:	74 35                	je     c0003d52 <create_name+0x8a>
c0003d1d:	66 83 fb 2f          	cmp    bx,0x2f
c0003d21:	74 2f                	je     c0003d52 <create_name+0x8a>
c0003d23:	66 83 fb 7f          	cmp    bx,0x7f
c0003d27:	77 11                	ja     c0003d3a <create_name+0x72>
c0003d29:	0f b7 d3             	movzx  edx,bx
c0003d2c:	b8 92 9d 02 c0       	mov    eax,0xc0029d92
c0003d31:	e8 11 e0 ff ff       	call   c0001d47 <chk_chr>
c0003d36:	85 c0                	test   eax,eax
c0003d38:	75 ba                	jne    c0003cf4 <create_name+0x2c>
c0003d3a:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003d40:	77 b2                	ja     c0003cf4 <create_name+0x2c>
c0003d42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d46:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003d4a:	46                   	inc    esi
c0003d4b:	eb 97                	jmp    c0003ce4 <create_name+0x1c>
c0003d4d:	40                   	inc    eax
c0003d4e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003d52:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d56:	8a 10                	mov    dl,BYTE PTR [eax]
c0003d58:	80 fa 2f             	cmp    dl,0x2f
c0003d5b:	74 f0                	je     c0003d4d <create_name+0x85>
c0003d5d:	80 fa 5c             	cmp    dl,0x5c
c0003d60:	74 eb                	je     c0003d4d <create_name+0x85>
c0003d62:	31 db                	xor    ebx,ebx
c0003d64:	eb 02                	jmp    c0003d68 <create_name+0xa0>
c0003d66:	b3 04                	mov    bl,0x4
c0003d68:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d6c:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003d6f:	85 f6                	test   esi,esi
c0003d71:	74 18                	je     c0003d8b <create_name+0xc3>
c0003d73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d77:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003d7c:	66 83 f8 20          	cmp    ax,0x20
c0003d80:	74 06                	je     c0003d88 <create_name+0xc0>
c0003d82:	66 83 f8 2e          	cmp    ax,0x2e
c0003d86:	75 03                	jne    c0003d8b <create_name+0xc3>
c0003d88:	4e                   	dec    esi
c0003d89:	eb e4                	jmp    c0003d6f <create_name+0xa7>
c0003d8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d8f:	31 ed                	xor    ebp,ebp
c0003d91:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003d97:	85 f6                	test   esi,esi
c0003d99:	0f 84 55 ff ff ff    	je     c0003cf4 <create_name+0x2c>
c0003d9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003da3:	8d 55 01             	lea    edx,[ebp+0x1]
c0003da6:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003daa:	66 83 f8 20          	cmp    ax,0x20
c0003dae:	75 04                	jne    c0003db4 <create_name+0xec>
c0003db0:	89 d5                	mov    ebp,edx
c0003db2:	eb eb                	jmp    c0003d9f <create_name+0xd7>
c0003db4:	85 ed                	test   ebp,ebp
c0003db6:	75 06                	jne    c0003dbe <create_name+0xf6>
c0003db8:	66 83 f8 2e          	cmp    ax,0x2e
c0003dbc:	75 08                	jne    c0003dc6 <create_name+0xfe>
c0003dbe:	83 cb 03             	or     ebx,0x3
c0003dc1:	eb 03                	jmp    c0003dc6 <create_name+0xfe>
c0003dc3:	4e                   	dec    esi
c0003dc4:	74 0c                	je     c0003dd2 <create_name+0x10a>
c0003dc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003dca:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003dd0:	75 f1                	jne    c0003dc3 <create_name+0xfb>
c0003dd2:	b9 0b 00 00 00       	mov    ecx,0xb
c0003dd7:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003dda:	ba 20 00 00 00       	mov    edx,0x20
c0003ddf:	e8 35 df ff ff       	call   c0001d19 <mem_set>
c0003de4:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003dec:	31 c9                	xor    ecx,ecx
c0003dee:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003df3:	8d 45 01             	lea    eax,[ebp+0x1]
c0003df6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003dfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003dfe:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003e02:	66 85 ed             	test   bp,bp
c0003e05:	0f 84 30 01 00 00    	je     c0003f3b <create_name+0x273>
c0003e0b:	66 83 fd 20          	cmp    bp,0x20
c0003e0f:	74 10                	je     c0003e21 <create_name+0x159>
c0003e11:	66 83 fd 2e          	cmp    bp,0x2e
c0003e15:	75 13                	jne    c0003e2a <create_name+0x162>
c0003e17:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e1b:	0f 84 6b 01 00 00    	je     c0003f8c <create_name+0x2c4>
c0003e21:	83 cb 03             	or     ebx,0x3
c0003e24:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003e28:	eb c9                	jmp    c0003df3 <create_name+0x12b>
c0003e2a:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003e2e:	73 0b                	jae    c0003e3b <create_name+0x173>
c0003e30:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e34:	75 47                	jne    c0003e7d <create_name+0x1b5>
c0003e36:	e9 51 01 00 00       	jmp    c0003f8c <create_name+0x2c4>
c0003e3b:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003e40:	75 10                	jne    c0003e52 <create_name+0x18a>
c0003e42:	83 cb 03             	or     ebx,0x3
c0003e45:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e4d:	e9 e9 00 00 00       	jmp    c0003f3b <create_name+0x273>
c0003e52:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e56:	74 0d                	je     c0003e65 <create_name+0x19d>
c0003e58:	83 cb 03             	or     ebx,0x3
c0003e5b:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e5f:	0f 87 d6 00 00 00    	ja     c0003f3b <create_name+0x273>
c0003e65:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003e6a:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003e6e:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e76:	b9 08 00 00 00       	mov    ecx,0x8
c0003e7b:	eb a7                	jmp    c0003e24 <create_name+0x15c>
c0003e7d:	66 83 fd 7f          	cmp    bp,0x7f
c0003e81:	76 68                	jbe    c0003eeb <create_name+0x223>
c0003e83:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003e87:	88 da                	mov    dl,bl
c0003e89:	83 ca 02             	or     edx,0x2
c0003e8c:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003e90:	50                   	push   eax
c0003e91:	50                   	push   eax
c0003e92:	68 b5 01 00 00       	push   0x1b5
c0003e97:	55                   	push   ebp
c0003e98:	e8 48 46 00 00       	call   c00084e5 <ff_uni2oem>
c0003e9d:	83 c4 10             	add    esp,0x10
c0003ea0:	89 c5                	mov    ebp,eax
c0003ea2:	a8 80                	test   al,0x80
c0003ea4:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003ea8:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003eac:	74 0c                	je     c0003eba <create_name+0x1f2>
c0003eae:	83 e5 7f             	and    ebp,0x7f
c0003eb1:	0f b6 ad e0 9c 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffd6320]
c0003eb8:	eb 2a                	jmp    c0003ee4 <create_name+0x21c>
c0003eba:	66 3d ff 00          	cmp    ax,0xff
c0003ebe:	76 24                	jbe    c0003ee4 <create_name+0x21c>
c0003ec0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003ec4:	48                   	dec    eax
c0003ec5:	39 c8                	cmp    eax,ecx
c0003ec7:	77 0c                	ja     c0003ed5 <create_name+0x20d>
c0003ec9:	83 cb 03             	or     ebx,0x3
c0003ecc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003ed0:	e9 4f ff ff ff       	jmp    c0003e24 <create_name+0x15c>
c0003ed5:	89 e8                	mov    eax,ebp
c0003ed7:	88 d3                	mov    bl,dl
c0003ed9:	66 c1 e8 08          	shr    ax,0x8
c0003edd:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003ee1:	41                   	inc    ecx
c0003ee2:	eb 4b                	jmp    c0003f2f <create_name+0x267>
c0003ee4:	88 d3                	mov    bl,dl
c0003ee6:	66 85 ed             	test   bp,bp
c0003ee9:	74 19                	je     c0003f04 <create_name+0x23c>
c0003eeb:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003eef:	0f b7 d5             	movzx  edx,bp
c0003ef2:	b8 9b 9d 02 c0       	mov    eax,0xc0029d9b
c0003ef7:	e8 4b de ff ff       	call   c0001d47 <chk_chr>
c0003efc:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003f00:	85 c0                	test   eax,eax
c0003f02:	74 0a                	je     c0003f0e <create_name+0x246>
c0003f04:	83 cb 03             	or     ebx,0x3
c0003f07:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003f0c:	eb 21                	jmp    c0003f2f <create_name+0x267>
c0003f0e:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003f11:	66 83 f8 19          	cmp    ax,0x19
c0003f15:	77 07                	ja     c0003f1e <create_name+0x256>
c0003f17:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003f1c:	eb 11                	jmp    c0003f2f <create_name+0x267>
c0003f1e:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003f21:	66 83 f8 19          	cmp    ax,0x19
c0003f25:	77 08                	ja     c0003f2f <create_name+0x267>
c0003f27:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003f2c:	83 ed 20             	sub    ebp,0x20
c0003f2f:	89 e8                	mov    eax,ebp
c0003f31:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003f35:	41                   	inc    ecx
c0003f36:	e9 e9 fe ff ff       	jmp    c0003e24 <create_name+0x15c>
c0003f3b:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003f3f:	75 04                	jne    c0003f45 <create_name+0x27d>
c0003f41:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003f45:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003f4a:	75 05                	jne    c0003f51 <create_name+0x289>
c0003f4c:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003f51:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f55:	83 e0 0c             	and    eax,0xc
c0003f58:	3c 0c                	cmp    al,0xc
c0003f5a:	74 0b                	je     c0003f67 <create_name+0x29f>
c0003f5c:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f60:	83 e0 03             	and    eax,0x3
c0003f63:	3c 03                	cmp    al,0x3
c0003f65:	75 05                	jne    c0003f6c <create_name+0x2a4>
c0003f67:	83 cb 02             	or     ebx,0x2
c0003f6a:	eb 19                	jmp    c0003f85 <create_name+0x2bd>
c0003f6c:	f6 c3 02             	test   bl,0x2
c0003f6f:	75 14                	jne    c0003f85 <create_name+0x2bd>
c0003f71:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003f76:	74 03                	je     c0003f7b <create_name+0x2b3>
c0003f78:	83 cb 10             	or     ebx,0x10
c0003f7b:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003f80:	74 03                	je     c0003f85 <create_name+0x2bd>
c0003f82:	83 cb 08             	or     ebx,0x8
c0003f85:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003f88:	31 c0                	xor    eax,eax
c0003f8a:	eb 10                	jmp    c0003f9c <create_name+0x2d4>
c0003f8c:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003f91:	0f 85 ce fe ff ff    	jne    c0003e65 <create_name+0x19d>
c0003f97:	e9 a6 fe ff ff       	jmp    c0003e42 <create_name+0x17a>
c0003f9c:	83 c4 3c             	add    esp,0x3c
c0003f9f:	5b                   	pop    ebx
c0003fa0:	5e                   	pop    esi
c0003fa1:	5f                   	pop    edi
c0003fa2:	5d                   	pop    ebp
c0003fa3:	c3                   	ret    

c0003fa4 <xname_sum>:
c0003fa4:	56                   	push   esi
c0003fa5:	53                   	push   ebx
c0003fa6:	89 c6                	mov    esi,eax
c0003fa8:	51                   	push   ecx
c0003fa9:	31 db                	xor    ebx,ebx
c0003fab:	83 c6 02             	add    esi,0x2
c0003fae:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003fb2:	66 85 c0             	test   ax,ax
c0003fb5:	74 1f                	je     c0003fd6 <xname_sum+0x32>
c0003fb7:	83 ec 0c             	sub    esp,0xc
c0003fba:	66 d1 cb             	ror    bx,1
c0003fbd:	50                   	push   eax
c0003fbe:	e8 1e 46 00 00       	call   c00085e1 <ff_wtoupper>
c0003fc3:	83 c4 10             	add    esp,0x10
c0003fc6:	0f b6 d0             	movzx  edx,al
c0003fc9:	66 c1 e8 08          	shr    ax,0x8
c0003fcd:	01 d3                	add    ebx,edx
c0003fcf:	66 d1 cb             	ror    bx,1
c0003fd2:	01 c3                	add    ebx,eax
c0003fd4:	eb d5                	jmp    c0003fab <xname_sum+0x7>
c0003fd6:	89 d8                	mov    eax,ebx
c0003fd8:	5a                   	pop    edx
c0003fd9:	5b                   	pop    ebx
c0003fda:	5e                   	pop    esi
c0003fdb:	c3                   	ret    

c0003fdc <create_xdir>:
c0003fdc:	55                   	push   ebp
c0003fdd:	b9 40 00 00 00       	mov    ecx,0x40
c0003fe2:	57                   	push   edi
c0003fe3:	bd 01 00 00 00       	mov    ebp,0x1
c0003fe8:	56                   	push   esi
c0003fe9:	31 ff                	xor    edi,edi
c0003feb:	53                   	push   ebx
c0003fec:	be 40 00 00 00       	mov    esi,0x40
c0003ff1:	89 c3                	mov    ebx,eax
c0003ff3:	83 ec 1c             	sub    esp,0x1c
c0003ff6:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003ffa:	31 d2                	xor    edx,edx
c0003ffc:	e8 18 dd ff ff       	call   c0001d19 <mem_set>
c0004001:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0004004:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0004008:	31 c9                	xor    ecx,ecx
c000400a:	8d 46 01             	lea    eax,[esi+0x1]
c000400d:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0004011:	83 c6 02             	add    esi,0x2
c0004014:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0004018:	66 85 ed             	test   bp,bp
c000401b:	74 12                	je     c000402f <create_xdir+0x53>
c000401d:	0f b6 c1             	movzx  eax,cl
c0004020:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004024:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0004028:	66 83 fd 01          	cmp    bp,0x1
c000402c:	80 d9 ff             	sbb    cl,0xff
c000402f:	8d 04 33             	lea    eax,[ebx+esi*1]
c0004032:	0f b7 d5             	movzx  edx,bp
c0004035:	83 c6 02             	add    esi,0x2
c0004038:	e8 ba dc ff ff       	call   c0001cf7 <st_word>
c000403d:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0004043:	75 d3                	jne    c0004018 <create_xdir+0x3c>
c0004045:	8d 47 01             	lea    eax,[edi+0x1]
c0004048:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000404c:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0004050:	0f b6 c1             	movzx  eax,cl
c0004053:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0004058:	74 07                	je     c0004061 <create_xdir+0x85>
c000405a:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c000405f:	eb a9                	jmp    c000400a <create_xdir+0x2e>
c0004061:	8d 47 02             	lea    eax,[edi+0x2]
c0004064:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0004067:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c000406a:	89 d0                	mov    eax,edx
c000406c:	e8 33 ff ff ff       	call   c0003fa4 <xname_sum>
c0004071:	83 c4 1c             	add    esp,0x1c
c0004074:	0f b7 d0             	movzx  edx,ax
c0004077:	8d 43 24             	lea    eax,[ebx+0x24]
c000407a:	5b                   	pop    ebx
c000407b:	5e                   	pop    esi
c000407c:	5f                   	pop    edi
c000407d:	5d                   	pop    ebp
c000407e:	e9 74 dc ff ff       	jmp    c0001cf7 <st_word>

c0004083 <cmp_lfn>:
c0004083:	55                   	push   ebp
c0004084:	57                   	push   edi
c0004085:	89 d7                	mov    edi,edx
c0004087:	56                   	push   esi
c0004088:	53                   	push   ebx
c0004089:	83 ec 1c             	sub    esp,0x1c
c000408c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004090:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004093:	e8 ed db ff ff       	call   c0001c85 <ld_word>
c0004098:	66 85 c0             	test   ax,ax
c000409b:	74 07                	je     c00040a4 <cmp_lfn+0x21>
c000409d:	31 c0                	xor    eax,eax
c000409f:	e9 9a 00 00 00       	jmp    c000413e <cmp_lfn+0xbb>
c00040a4:	8a 1f                	mov    bl,BYTE PTR [edi]
c00040a6:	bd 01 00 00 00       	mov    ebp,0x1
c00040ab:	83 e3 3f             	and    ebx,0x3f
c00040ae:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00040b6:	4b                   	dec    ebx
c00040b7:	6b db 0d             	imul   ebx,ebx,0xd
c00040ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00040be:	0f b6 80 60 9d 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd62a0]
c00040c5:	01 f8                	add    eax,edi
c00040c7:	e8 b9 db ff ff       	call   c0001c85 <ld_word>
c00040cc:	66 85 ed             	test   bp,bp
c00040cf:	89 c6                	mov    esi,eax
c00040d1:	74 3c                	je     c000410f <cmp_lfn+0x8c>
c00040d3:	81 fb ff 00 00 00    	cmp    ebx,0xff
c00040d9:	77 c2                	ja     c000409d <cmp_lfn+0x1a>
c00040db:	83 ec 0c             	sub    esp,0xc
c00040de:	0f b7 c0             	movzx  eax,ax
c00040e1:	50                   	push   eax
c00040e2:	e8 fa 44 00 00       	call   c00085e1 <ff_wtoupper>
c00040e7:	89 c5                	mov    ebp,eax
c00040e9:	8d 43 01             	lea    eax,[ebx+0x1]
c00040ec:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00040f0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00040f4:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c00040f8:	89 04 24             	mov    DWORD PTR [esp],eax
c00040fb:	e8 e1 44 00 00       	call   c00085e1 <ff_wtoupper>
c0004100:	83 c4 10             	add    esp,0x10
c0004103:	39 c5                	cmp    ebp,eax
c0004105:	75 96                	jne    c000409d <cmp_lfn+0x1a>
c0004107:	89 f5                	mov    ebp,esi
c0004109:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000410d:	eb 04                	jmp    c0004113 <cmp_lfn+0x90>
c000410f:	66 46                	inc    si
c0004111:	75 8a                	jne    c000409d <cmp_lfn+0x1a>
c0004113:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0004117:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c000411c:	75 9c                	jne    c00040ba <cmp_lfn+0x37>
c000411e:	f6 07 40             	test   BYTE PTR [edi],0x40
c0004121:	74 16                	je     c0004139 <cmp_lfn+0xb6>
c0004123:	66 85 ed             	test   bp,bp
c0004126:	74 11                	je     c0004139 <cmp_lfn+0xb6>
c0004128:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000412c:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0004131:	0f 94 c0             	sete   al
c0004134:	0f b6 c0             	movzx  eax,al
c0004137:	eb 05                	jmp    c000413e <cmp_lfn+0xbb>
c0004139:	b8 01 00 00 00       	mov    eax,0x1
c000413e:	83 c4 1c             	add    esp,0x1c
c0004141:	5b                   	pop    ebx
c0004142:	5e                   	pop    esi
c0004143:	5f                   	pop    edi
c0004144:	5d                   	pop    ebp
c0004145:	c3                   	ret    

c0004146 <dir_find>:
c0004146:	55                   	push   ebp
c0004147:	31 d2                	xor    edx,edx
c0004149:	57                   	push   edi
c000414a:	56                   	push   esi
c000414b:	53                   	push   ebx
c000414c:	89 c3                	mov    ebx,eax
c000414e:	83 ec 1c             	sub    esp,0x1c
c0004151:	8b 30                	mov    esi,DWORD PTR [eax]
c0004153:	e8 89 f0 ff ff       	call   c00031e1 <dir_sdi>
c0004158:	89 04 24             	mov    DWORD PTR [esp],eax
c000415b:	85 c0                	test   eax,eax
c000415d:	0f 85 9e 01 00 00    	jne    c0004301 <dir_find+0x1bb>
c0004163:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004166:	0f 85 8d 00 00 00    	jne    c00041f9 <dir_find+0xb3>
c000416c:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000416f:	e8 30 fe ff ff       	call   c0003fa4 <xname_sum>
c0004174:	89 c7                	mov    edi,eax
c0004176:	31 d2                	xor    edx,edx
c0004178:	89 d8                	mov    eax,ebx
c000417a:	e8 72 f8 ff ff       	call   c00039f1 <dir_read>
c000417f:	85 c0                	test   eax,eax
c0004181:	0f 85 5e 01 00 00    	jne    c00042e5 <dir_find+0x19f>
c0004187:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c000418a:	8d 41 24             	lea    eax,[ecx+0x24]
c000418d:	e8 f3 da ff ff       	call   c0001c85 <ld_word>
c0004192:	66 39 f8             	cmp    ax,di
c0004195:	75 df                	jne    c0004176 <dir_find+0x30>
c0004197:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c000419a:	31 ed                	xor    ebp,ebp
c000419c:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00041a0:	ba 40 00 00 00       	mov    edx,0x40
c00041a5:	89 e9                	mov    ecx,ebp
c00041a7:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c00041ab:	0f 84 42 01 00 00    	je     c00042f3 <dir_find+0x1ad>
c00041b1:	f6 c2 1f             	test   dl,0x1f
c00041b4:	75 03                	jne    c00041b9 <dir_find+0x73>
c00041b6:	83 c2 02             	add    edx,0x2
c00041b9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00041bd:	89 d0                	mov    eax,edx
c00041bf:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c00041c2:	e8 be da ff ff       	call   c0001c85 <ld_word>
c00041c7:	83 ec 0c             	sub    esp,0xc
c00041ca:	0f b7 c0             	movzx  eax,ax
c00041cd:	50                   	push   eax
c00041ce:	e8 0e 44 00 00       	call   c00085e1 <ff_wtoupper>
c00041d3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00041d7:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00041da:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c00041de:	89 04 24             	mov    DWORD PTR [esp],eax
c00041e1:	e8 fb 43 00 00       	call   c00085e1 <ff_wtoupper>
c00041e6:	83 c4 10             	add    esp,0x10
c00041e9:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c00041ed:	75 87                	jne    c0004176 <dir_find+0x30>
c00041ef:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00041f3:	45                   	inc    ebp
c00041f4:	83 c2 02             	add    edx,0x2
c00041f7:	eb ac                	jmp    c00041a5 <dir_find+0x5f>
c00041f9:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0004200:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c0004205:	bf ff ff ff ff       	mov    edi,0xffffffff
c000420a:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000420d:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0004210:	89 f0                	mov    eax,esi
c0004212:	e8 4c e2 ff ff       	call   c0002463 <move_window>
c0004217:	85 c0                	test   eax,eax
c0004219:	0f 85 c6 00 00 00    	jne    c00042e5 <dir_find+0x19f>
c000421f:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c0004222:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c0004225:	84 c9                	test   cl,cl
c0004227:	0f 84 bd 00 00 00    	je     c00042ea <dir_find+0x1a4>
c000422d:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c0004230:	88 d0                	mov    al,dl
c0004232:	83 e0 3f             	and    eax,0x3f
c0004235:	80 f9 e5             	cmp    cl,0xe5
c0004238:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000423b:	0f 84 87 00 00 00    	je     c00042c8 <dir_find+0x182>
c0004241:	80 e2 08             	and    dl,0x8
c0004244:	74 06                	je     c000424c <dir_find+0x106>
c0004246:	3c 0f                	cmp    al,0xf
c0004248:	75 7e                	jne    c00042c8 <dir_find+0x182>
c000424a:	eb 04                	jmp    c0004250 <dir_find+0x10a>
c000424c:	3c 0f                	cmp    al,0xf
c000424e:	75 4c                	jne    c000429c <dir_find+0x156>
c0004250:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c0004254:	75 7e                	jne    c00042d4 <dir_find+0x18e>
c0004256:	f6 c1 40             	test   cl,0x40
c0004259:	74 12                	je     c000426d <dir_find+0x127>
c000425b:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c000425e:	83 e1 bf             	and    ecx,0xffffffbf
c0004261:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0004265:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004268:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000426b:	eb 06                	jmp    c0004273 <dir_find+0x12d>
c000426d:	89 f8                	mov    eax,edi
c000426f:	38 c8                	cmp    al,cl
c0004271:	75 5c                	jne    c00042cf <dir_find+0x189>
c0004273:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0004277:	bf ff ff ff ff       	mov    edi,0xffffffff
c000427c:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c000427f:	75 53                	jne    c00042d4 <dir_find+0x18e>
c0004281:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0004285:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004288:	89 ea                	mov    edx,ebp
c000428a:	e8 f4 fd ff ff       	call   c0004083 <cmp_lfn>
c000428f:	85 c0                	test   eax,eax
c0004291:	74 41                	je     c00042d4 <dir_find+0x18e>
c0004293:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c0004297:	8d 79 ff             	lea    edi,[ecx-0x1]
c000429a:	eb 38                	jmp    c00042d4 <dir_find+0x18e>
c000429c:	89 f8                	mov    eax,edi
c000429e:	84 c0                	test   al,al
c00042a0:	75 0d                	jne    c00042af <dir_find+0x169>
c00042a2:	89 e8                	mov    eax,ebp
c00042a4:	e8 98 de ff ff       	call   c0002141 <sum_sfn>
c00042a9:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c00042ad:	74 52                	je     c0004301 <dir_find+0x1bb>
c00042af:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c00042b3:	75 13                	jne    c00042c8 <dir_find+0x182>
c00042b5:	8d 53 3c             	lea    edx,[ebx+0x3c]
c00042b8:	b9 0b 00 00 00       	mov    ecx,0xb
c00042bd:	89 e8                	mov    eax,ebp
c00042bf:	e8 60 da ff ff       	call   c0001d24 <mem_cmp>
c00042c4:	85 c0                	test   eax,eax
c00042c6:	74 39                	je     c0004301 <dir_find+0x1bb>
c00042c8:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00042cf:	bf ff ff ff ff       	mov    edi,0xffffffff
c00042d4:	31 d2                	xor    edx,edx
c00042d6:	89 d8                	mov    eax,ebx
c00042d8:	e8 5c f4 ff ff       	call   c0003739 <dir_next>
c00042dd:	85 c0                	test   eax,eax
c00042df:	0f 84 25 ff ff ff    	je     c000420a <dir_find+0xc4>
c00042e5:	89 04 24             	mov    DWORD PTR [esp],eax
c00042e8:	eb 17                	jmp    c0004301 <dir_find+0x1bb>
c00042ea:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00042f1:	eb 0e                	jmp    c0004301 <dir_find+0x1bb>
c00042f3:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00042f6:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c00042fb:	0f 85 75 fe ff ff    	jne    c0004176 <dir_find+0x30>
c0004301:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004304:	83 c4 1c             	add    esp,0x1c
c0004307:	5b                   	pop    ebx
c0004308:	5e                   	pop    esi
c0004309:	5f                   	pop    edi
c000430a:	5d                   	pop    ebp
c000430b:	c3                   	ret    

c000430c <dir_register>:
c000430c:	55                   	push   ebp
c000430d:	57                   	push   edi
c000430e:	56                   	push   esi
c000430f:	be 06 00 00 00       	mov    esi,0x6
c0004314:	53                   	push   ebx
c0004315:	83 ec 6c             	sub    esp,0x6c
c0004318:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c000431c:	0f 85 62 02 00 00    	jne    c0004584 <dir_register+0x278>
c0004322:	8b 28                	mov    ebp,DWORD PTR [eax]
c0004324:	31 ff                	xor    edi,edi
c0004326:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0004329:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c000432e:	74 03                	je     c0004333 <dir_register+0x27>
c0004330:	47                   	inc    edi
c0004331:	eb f6                	jmp    c0004329 <dir_register+0x1d>
c0004333:	89 c3                	mov    ebx,eax
c0004335:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c0004339:	0f 85 e1 00 00 00    	jne    c0004420 <dir_register+0x114>
c000433f:	83 c7 0e             	add    edi,0xe
c0004342:	b9 0f 00 00 00       	mov    ecx,0xf
c0004347:	89 f8                	mov    eax,edi
c0004349:	31 d2                	xor    edx,edx
c000434b:	f7 f1                	div    ecx
c000434d:	8d 50 02             	lea    edx,[eax+0x2]
c0004350:	89 c7                	mov    edi,eax
c0004352:	89 d8                	mov    eax,ebx
c0004354:	e8 12 f8 ff ff       	call   c0003b6b <dir_alloc>
c0004359:	89 c6                	mov    esi,eax
c000435b:	85 c0                	test   eax,eax
c000435d:	0f 85 21 02 00 00    	jne    c0004584 <dir_register+0x278>
c0004363:	81 c7 01 00 00 08    	add    edi,0x8000001
c0004369:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000436c:	c1 e7 05             	shl    edi,0x5
c000436f:	29 f8                	sub    eax,edi
c0004371:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004374:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004377:	a8 04                	test   al,0x4
c0004379:	0f 84 91 00 00 00    	je     c0004410 <dir_register+0x104>
c000437f:	83 e0 fb             	and    eax,0xfffffffb
c0004382:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004385:	89 d8                	mov    eax,ebx
c0004387:	e8 25 ec ff ff       	call   c0002fb1 <fill_first_frag>
c000438c:	85 c0                	test   eax,eax
c000438e:	0f 85 ee 01 00 00    	jne    c0004582 <dir_register+0x276>
c0004394:	83 c9 ff             	or     ecx,0xffffffff
c0004397:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000439a:	89 d8                	mov    eax,ebx
c000439c:	e8 db eb ff ff       	call   c0002f7c <fill_last_frag>
c00043a1:	85 c0                	test   eax,eax
c00043a3:	0f 85 d9 01 00 00    	jne    c0004582 <dir_register+0x276>
c00043a9:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00043ad:	74 61                	je     c0004410 <dir_register+0x104>
c00043af:	89 da                	mov    edx,ebx
c00043b1:	8d 44 24 14          	lea    eax,[esp+0x14]
c00043b5:	e8 ea f5 ff ff       	call   c00039a4 <load_obj_xdir>
c00043ba:	85 c0                	test   eax,eax
c00043bc:	0f 85 c0 01 00 00    	jne    c0004582 <dir_register+0x276>
c00043c2:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c00043c6:	31 c9                	xor    ecx,ecx
c00043c8:	c1 e2 09             	shl    edx,0x9
c00043cb:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c00043ce:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c00043d1:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00043d4:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c00043d7:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043da:	83 c0 38             	add    eax,0x38
c00043dd:	e8 1c d9 ff ff       	call   c0001cfe <st_qword>
c00043e2:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043e5:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00043e8:	83 c0 28             	add    eax,0x28
c00043eb:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00043ee:	e8 0b d9 ff ff       	call   c0001cfe <st_qword>
c00043f3:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c00043f6:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00043f9:	83 c8 01             	or     eax,0x1
c00043fc:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c00043ff:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004403:	e8 db f7 ff ff       	call   c0003be3 <store_xdir>
c0004408:	85 c0                	test   eax,eax
c000440a:	0f 85 72 01 00 00    	jne    c0004582 <dir_register+0x276>
c0004410:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0004413:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0004416:	e8 c1 fb ff ff       	call   c0003fdc <create_xdir>
c000441b:	e9 64 01 00 00       	jmp    c0004584 <dir_register+0x278>
c0004420:	8d 40 3c             	lea    eax,[eax+0x3c]
c0004423:	b9 0c 00 00 00       	mov    ecx,0xc
c0004428:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000442c:	89 c2                	mov    edx,eax
c000442e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004432:	e8 cd d8 ff ff       	call   c0001d04 <mem_cpy>
c0004437:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c000443c:	74 58                	je     c0004496 <dir_register+0x18a>
c000443e:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c0004442:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c000444a:	83 ec 0c             	sub    esp,0xc
c000444d:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0004450:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004454:	8d 54 24 24          	lea    edx,[esp+0x24]
c0004458:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000445c:	e8 24 dc ff ff       	call   c0002085 <gen_numname>
c0004461:	89 d8                	mov    eax,ebx
c0004463:	e8 de fc ff ff       	call   c0004146 <dir_find>
c0004468:	83 c4 10             	add    esp,0x10
c000446b:	89 c6                	mov    esi,eax
c000446d:	85 c0                	test   eax,eax
c000446f:	75 15                	jne    c0004486 <dir_register+0x17a>
c0004471:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0004475:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c000447a:	75 ce                	jne    c000444a <dir_register+0x13e>
c000447c:	be 07 00 00 00       	mov    esi,0x7
c0004481:	e9 fe 00 00 00       	jmp    c0004584 <dir_register+0x278>
c0004486:	83 f8 04             	cmp    eax,0x4
c0004489:	0f 85 f5 00 00 00    	jne    c0004584 <dir_register+0x278>
c000448f:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0004493:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c0004496:	b9 01 00 00 00       	mov    ecx,0x1
c000449b:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c00044a0:	74 0f                	je     c00044b1 <dir_register+0x1a5>
c00044a2:	b9 0d 00 00 00       	mov    ecx,0xd
c00044a7:	8d 47 0c             	lea    eax,[edi+0xc]
c00044aa:	31 d2                	xor    edx,edx
c00044ac:	f7 f1                	div    ecx
c00044ae:	8d 48 01             	lea    ecx,[eax+0x1]
c00044b1:	89 ca                	mov    edx,ecx
c00044b3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00044b7:	89 d8                	mov    eax,ebx
c00044b9:	e8 ad f6 ff ff       	call   c0003b6b <dir_alloc>
c00044be:	89 c6                	mov    esi,eax
c00044c0:	85 c0                	test   eax,eax
c00044c2:	0f 85 bc 00 00 00    	jne    c0004584 <dir_register+0x278>
c00044c8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00044cc:	49                   	dec    ecx
c00044cd:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00044d1:	74 6a                	je     c000453d <dir_register+0x231>
c00044d3:	89 c8                	mov    eax,ecx
c00044d5:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00044d8:	c1 e0 05             	shl    eax,0x5
c00044db:	29 c2                	sub    edx,eax
c00044dd:	89 d8                	mov    eax,ebx
c00044df:	e8 fd ec ff ff       	call   c00031e1 <dir_sdi>
c00044e4:	89 c6                	mov    esi,eax
c00044e6:	85 c0                	test   eax,eax
c00044e8:	0f 85 96 00 00 00    	jne    c0004584 <dir_register+0x278>
c00044ee:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00044f2:	e8 4a dc ff ff       	call   c0002141 <sum_sfn>
c00044f7:	0f b6 f8             	movzx  edi,al
c00044fa:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00044fd:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0004500:	89 e8                	mov    eax,ebp
c0004502:	e8 5c df ff ff       	call   c0002463 <move_window>
c0004507:	89 c6                	mov    esi,eax
c0004509:	85 c0                	test   eax,eax
c000450b:	75 77                	jne    c0004584 <dir_register+0x278>
c000450d:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0004512:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0004515:	83 ec 0c             	sub    esp,0xc
c0004518:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000451b:	57                   	push   edi
c000451c:	e8 e0 da ff ff       	call   c0002001 <put_lfn>
c0004521:	31 d2                	xor    edx,edx
c0004523:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004527:	89 d8                	mov    eax,ebx
c0004529:	e8 0b f2 ff ff       	call   c0003739 <dir_next>
c000452e:	83 c4 10             	add    esp,0x10
c0004531:	89 c6                	mov    esi,eax
c0004533:	85 c0                	test   eax,eax
c0004535:	75 4d                	jne    c0004584 <dir_register+0x278>
c0004537:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c000453b:	75 bd                	jne    c00044fa <dir_register+0x1ee>
c000453d:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0004540:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0004543:	89 e8                	mov    eax,ebp
c0004545:	e8 19 df ff ff       	call   c0002463 <move_window>
c000454a:	89 c6                	mov    esi,eax
c000454c:	85 c0                	test   eax,eax
c000454e:	75 34                	jne    c0004584 <dir_register+0x278>
c0004550:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004553:	b9 20 00 00 00       	mov    ecx,0x20
c0004558:	31 d2                	xor    edx,edx
c000455a:	e8 ba d7 ff ff       	call   c0001d19 <mem_set>
c000455f:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004562:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004566:	b9 0b 00 00 00       	mov    ecx,0xb
c000456b:	e8 94 d7 ff ff       	call   c0001d04 <mem_cpy>
c0004570:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c0004573:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0004576:	83 e0 18             	and    eax,0x18
c0004579:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c000457c:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004580:	eb 02                	jmp    c0004584 <dir_register+0x278>
c0004582:	89 c6                	mov    esi,eax
c0004584:	83 c4 6c             	add    esp,0x6c
c0004587:	89 f0                	mov    eax,esi
c0004589:	5b                   	pop    ebx
c000458a:	5e                   	pop    esi
c000458b:	5f                   	pop    edi
c000458c:	5d                   	pop    ebp
c000458d:	c3                   	ret    

c000458e <sync_fs>:
c000458e:	56                   	push   esi
c000458f:	53                   	push   ebx
c0004590:	53                   	push   ebx
c0004591:	89 c3                	mov    ebx,eax
c0004593:	e8 37 de ff ff       	call   c00023cf <sync_window>
c0004598:	85 c0                	test   eax,eax
c000459a:	0f 85 b1 00 00 00    	jne    c0004651 <sync_fs+0xc3>
c00045a0:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c00045a3:	0f 85 8e 00 00 00    	jne    c0004637 <sync_fs+0xa9>
c00045a9:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c00045ad:	0f 85 84 00 00 00    	jne    c0004637 <sync_fs+0xa9>
c00045b3:	b9 00 02 00 00       	mov    ecx,0x200
c00045b8:	8d 73 54             	lea    esi,[ebx+0x54]
c00045bb:	31 d2                	xor    edx,edx
c00045bd:	89 f0                	mov    eax,esi
c00045bf:	e8 55 d7 ff ff       	call   c0001d19 <mem_set>
c00045c4:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00045ca:	ba 55 aa 00 00       	mov    edx,0xaa55
c00045cf:	e8 23 d7 ff ff       	call   c0001cf7 <st_word>
c00045d4:	ba 52 52 61 41       	mov    edx,0x41615252
c00045d9:	89 f0                	mov    eax,esi
c00045db:	e8 1b d7 ff ff       	call   c0001cfb <st_dword>
c00045e0:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c00045e6:	ba 72 72 41 61       	mov    edx,0x61417272
c00045eb:	e8 0b d7 ff ff       	call   c0001cfb <st_dword>
c00045f0:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00045f3:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c00045f9:	e8 fd d6 ff ff       	call   c0001cfb <st_dword>
c00045fe:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004601:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c0004607:	e8 ef d6 ff ff       	call   c0001cfb <st_dword>
c000460c:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000460f:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004612:	83 c0 01             	add    eax,0x1
c0004615:	83 d2 00             	adc    edx,0x0
c0004618:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c000461b:	83 ec 0c             	sub    esp,0xc
c000461e:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c0004621:	6a 01                	push   0x1
c0004623:	52                   	push   edx
c0004624:	50                   	push   eax
c0004625:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004629:	56                   	push   esi
c000462a:	50                   	push   eax
c000462b:	e8 20 d6 ff ff       	call   c0001c50 <disk_write>
c0004630:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0004634:	83 c4 20             	add    esp,0x20
c0004637:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000463b:	51                   	push   ecx
c000463c:	6a 00                	push   0x0
c000463e:	6a 00                	push   0x0
c0004640:	50                   	push   eax
c0004641:	e8 20 d6 ff ff       	call   c0001c66 <disk_ioctl>
c0004646:	83 c4 10             	add    esp,0x10
c0004649:	85 c0                	test   eax,eax
c000464b:	0f 95 c0             	setne  al
c000464e:	0f b6 c0             	movzx  eax,al
c0004651:	5a                   	pop    edx
c0004652:	5b                   	pop    ebx
c0004653:	5e                   	pop    esi
c0004654:	c3                   	ret    

c0004655 <create_partition>:
c0004655:	55                   	push   ebp
c0004656:	0f b6 c0             	movzx  eax,al
c0004659:	57                   	push   edi
c000465a:	56                   	push   esi
c000465b:	53                   	push   ebx
c000465c:	83 ec 60             	sub    esp,0x60
c000465f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004663:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0004667:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000466b:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c000466f:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c0004673:	50                   	push   eax
c0004674:	6a 01                	push   0x1
c0004676:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000467a:	e8 e7 d5 ff ff       	call   c0001c66 <disk_ioctl>
c000467f:	83 c4 10             	add    esp,0x10
c0004682:	85 c0                	test   eax,eax
c0004684:	74 0a                	je     c0004690 <create_partition+0x3b>
c0004686:	b8 01 00 00 00       	mov    eax,0x1
c000468b:	e9 67 05 00 00       	jmp    c0004bf7 <create_partition+0x5a2>
c0004690:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004694:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0004698:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000469c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00046a0:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00046a5:	0f 86 ed 03 00 00    	jbe    c0004a98 <create_partition+0x443>
c00046ab:	83 c0 df             	add    eax,0xffffffdf
c00046ae:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00046b6:	83 d2 ff             	adc    edx,0xffffffff
c00046b9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00046bd:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00046c1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00046c5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00046c9:	83 c0 bd             	add    eax,0xffffffbd
c00046cc:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00046d3:	83 d2 ff             	adc    edx,0xffffffff
c00046d6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00046da:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00046de:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00046e6:	be 22 00 00 00       	mov    esi,0x22
c00046eb:	31 ff                	xor    edi,edi
c00046ed:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c00046f5:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c00046fd:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0004705:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004709:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c000470f:	75 0e                	jne    c000471f <create_partition+0xca>
c0004711:	b9 00 02 00 00       	mov    ecx,0x200
c0004716:	31 d2                	xor    edx,edx
c0004718:	89 d8                	mov    eax,ebx
c000471a:	e8 fa d5 ff ff       	call   c0001d19 <mem_set>
c000471f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004723:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0004727:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000472b:	0b 04 24             	or     eax,DWORD PTR [esp]
c000472e:	0f 84 23 01 00 00    	je     c0004857 <create_partition+0x202>
c0004734:	89 f0                	mov    eax,esi
c0004736:	89 fa                	mov    edx,edi
c0004738:	05 ff 07 00 00       	add    eax,0x7ff
c000473d:	83 d2 00             	adc    edx,0x0
c0004740:	89 c1                	mov    ecx,eax
c0004742:	89 d7                	mov    edi,edx
c0004744:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c000474a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000474e:	89 ce                	mov    esi,ecx
c0004750:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c0004754:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0004758:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c000475c:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c000475f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004763:	89 04 24             	mov    DWORD PTR [esp],eax
c0004766:	b8 64 00 00 00       	mov    eax,0x64
c000476b:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000476e:	b8 00 00 00 00       	mov    eax,0x0
c0004773:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0004777:	72 41                	jb     c00047ba <create_partition+0x165>
c0004779:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000477d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004781:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c0004785:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c000478a:	01 c1                	add    ecx,eax
c000478c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0004790:	f7 24 24             	mul    DWORD PTR [esp]
c0004793:	6a 00                	push   0x0
c0004795:	01 ca                	add    edx,ecx
c0004797:	6a 64                	push   0x64
c0004799:	52                   	push   edx
c000479a:	50                   	push   eax
c000479b:	e8 34 2a 02 00       	call   c00271d4 <__udivdi3>
c00047a0:	83 c4 10             	add    esp,0x10
c00047a3:	05 ff 07 00 00       	add    eax,0x7ff
c00047a8:	83 d2 00             	adc    edx,0x0
c00047ab:	89 c1                	mov    ecx,eax
c00047ad:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00047b1:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c00047b7:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00047ba:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00047bd:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00047c1:	01 f0                	add    eax,esi
c00047c3:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00047c7:	11 fa                	adc    edx,edi
c00047c9:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c00047cd:	19 d1                	sbb    ecx,edx
c00047cf:	73 2e                	jae    c00047ff <create_partition+0x1aa>
c00047d1:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00047d5:	89 f8                	mov    eax,edi
c00047d7:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00047de:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c00047e2:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00047ea:	73 6b                	jae    c0004857 <create_partition+0x202>
c00047ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00047f0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00047f4:	29 f0                	sub    eax,esi
c00047f6:	19 fa                	sbb    edx,edi
c00047f8:	89 04 24             	mov    DWORD PTR [esp],eax
c00047fb:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00047ff:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004803:	0b 04 24             	or     eax,DWORD PTR [esp]
c0004806:	74 4f                	je     c0004857 <create_partition+0x202>
c0004808:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c000480b:	b9 10 00 00 00       	mov    ecx,0x10
c0004810:	ba 70 9d 02 c0       	mov    edx,0xc0029d70
c0004815:	e8 ea d4 ff ff       	call   c0001d04 <mem_cpy>
c000481a:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c000481e:	b9 10 00 00 00       	mov    ecx,0x10
c0004823:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004827:	e8 2c db ff ff       	call   c0002358 <make_rand>
c000482c:	89 f2                	mov    edx,esi
c000482e:	89 f9                	mov    ecx,edi
c0004830:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004834:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c0004838:	e8 c1 d4 ff ff       	call   c0001cfe <st_qword>
c000483d:	03 34 24             	add    esi,DWORD PTR [esp]
c0004840:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c0004844:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c0004848:	89 f2                	mov    edx,esi
c000484a:	89 f9                	mov    ecx,edi
c000484c:	83 c2 ff             	add    edx,0xffffffff
c000484f:	83 d1 ff             	adc    ecx,0xffffffff
c0004852:	e8 a7 d4 ff ff       	call   c0001cfe <st_qword>
c0004857:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000485b:	83 e8 80             	sub    eax,0xffffff80
c000485e:	89 c5                	mov    ebp,eax
c0004860:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004864:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c000486a:	75 6b                	jne    c00048d7 <create_partition+0x282>
c000486c:	45                   	inc    ebp
c000486d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004871:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c0004876:	e8 39 da ff ff       	call   c00022b4 <crc32>
c000487b:	81 fd 00 02 00 00    	cmp    ebp,0x200
c0004881:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0004885:	75 e5                	jne    c000486c <create_partition+0x217>
c0004887:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c000488b:	31 d2                	xor    edx,edx
c000488d:	83 ec 0c             	sub    esp,0xc
c0004890:	c1 ed 09             	shr    ebp,0x9
c0004893:	6a 01                	push   0x1
c0004895:	8d 45 02             	lea    eax,[ebp+0x2]
c0004898:	52                   	push   edx
c0004899:	50                   	push   eax
c000489a:	53                   	push   ebx
c000489b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000489f:	e8 ac d3 ff ff       	call   c0001c50 <disk_write>
c00048a4:	83 c4 20             	add    esp,0x20
c00048a7:	85 c0                	test   eax,eax
c00048a9:	0f 85 d7 fd ff ff    	jne    c0004686 <create_partition+0x31>
c00048af:	83 ec 0c             	sub    esp,0xc
c00048b2:	31 d2                	xor    edx,edx
c00048b4:	6a 01                	push   0x1
c00048b6:	89 e8                	mov    eax,ebp
c00048b8:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c00048bc:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c00048c0:	52                   	push   edx
c00048c1:	50                   	push   eax
c00048c2:	53                   	push   ebx
c00048c3:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00048c7:	e8 84 d3 ff ff       	call   c0001c50 <disk_write>
c00048cc:	83 c4 20             	add    esp,0x20
c00048cf:	85 c0                	test   eax,eax
c00048d1:	0f 85 af fd ff ff    	jne    c0004686 <create_partition+0x31>
c00048d7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00048db:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00048df:	3d 00 40 00 00       	cmp    eax,0x4000
c00048e4:	74 0d                	je     c00048f3 <create_partition+0x29e>
c00048e6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00048ea:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00048ee:	e9 12 fe ff ff       	jmp    c0004705 <create_partition+0xb0>
c00048f3:	31 d2                	xor    edx,edx
c00048f5:	b9 00 02 00 00       	mov    ecx,0x200
c00048fa:	89 d8                	mov    eax,ebx
c00048fc:	8d 6b 20             	lea    ebp,[ebx+0x20]
c00048ff:	e8 15 d4 ff ff       	call   c0001d19 <mem_set>
c0004904:	8d 7b 48             	lea    edi,[ebx+0x48]
c0004907:	b9 10 00 00 00       	mov    ecx,0x10
c000490c:	ba 60 9c 02 c0       	mov    edx,0xc0029c60
c0004911:	89 d8                	mov    eax,ebx
c0004913:	e8 ec d3 ff ff       	call   c0001d04 <mem_cpy>
c0004918:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000491c:	8d 43 58             	lea    eax,[ebx+0x58]
c000491f:	f7 d2                	not    edx
c0004921:	e8 d5 d3 ff ff       	call   c0001cfb <st_dword>
c0004926:	8d 43 18             	lea    eax,[ebx+0x18]
c0004929:	31 c9                	xor    ecx,ecx
c000492b:	89 04 24             	mov    DWORD PTR [esp],eax
c000492e:	ba 01 00 00 00       	mov    edx,0x1
c0004933:	e8 c6 d3 ff ff       	call   c0001cfe <st_qword>
c0004938:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c000493c:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0004940:	83 c2 ff             	add    edx,0xffffffff
c0004943:	89 e8                	mov    eax,ebp
c0004945:	83 d1 ff             	adc    ecx,0xffffffff
c0004948:	e8 b1 d3 ff ff       	call   c0001cfe <st_qword>
c000494d:	31 c9                	xor    ecx,ecx
c000494f:	8d 43 28             	lea    eax,[ebx+0x28]
c0004952:	ba 22 00 00 00       	mov    edx,0x22
c0004957:	e8 a2 d3 ff ff       	call   c0001cfe <st_qword>
c000495c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0004960:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004964:	83 c2 de             	add    edx,0xffffffde
c0004967:	8d 43 30             	lea    eax,[ebx+0x30]
c000496a:	83 d1 ff             	adc    ecx,0xffffffff
c000496d:	31 f6                	xor    esi,esi
c000496f:	e8 8a d3 ff ff       	call   c0001cfe <st_qword>
c0004974:	8d 43 54             	lea    eax,[ebx+0x54]
c0004977:	ba 80 00 00 00       	mov    edx,0x80
c000497c:	e8 7a d3 ff ff       	call   c0001cfb <st_dword>
c0004981:	8d 43 50             	lea    eax,[ebx+0x50]
c0004984:	ba 80 00 00 00       	mov    edx,0x80
c0004989:	e8 6d d3 ff ff       	call   c0001cfb <st_dword>
c000498e:	ba 02 00 00 00       	mov    edx,0x2
c0004993:	89 f8                	mov    eax,edi
c0004995:	e8 61 d3 ff ff       	call   c0001cfb <st_dword>
c000499a:	8d 53 38             	lea    edx,[ebx+0x38]
c000499d:	b9 10 00 00 00       	mov    ecx,0x10
c00049a2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00049a6:	e8 ad d9 ff ff       	call   c0002358 <make_rand>
c00049ab:	83 c8 ff             	or     eax,0xffffffff
c00049ae:	46                   	inc    esi
c00049af:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c00049b4:	e8 fb d8 ff ff       	call   c00022b4 <crc32>
c00049b9:	83 fe 5c             	cmp    esi,0x5c
c00049bc:	75 f0                	jne    c00049ae <create_partition+0x359>
c00049be:	f7 d0                	not    eax
c00049c0:	8d 73 10             	lea    esi,[ebx+0x10]
c00049c3:	89 c2                	mov    edx,eax
c00049c5:	89 f0                	mov    eax,esi
c00049c7:	e8 2f d3 ff ff       	call   c0001cfb <st_dword>
c00049cc:	83 ec 0c             	sub    esp,0xc
c00049cf:	6a 01                	push   0x1
c00049d1:	6a 00                	push   0x0
c00049d3:	6a 01                	push   0x1
c00049d5:	53                   	push   ebx
c00049d6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00049da:	e8 71 d2 ff ff       	call   c0001c50 <disk_write>
c00049df:	83 c4 20             	add    esp,0x20
c00049e2:	85 c0                	test   eax,eax
c00049e4:	0f 85 9c fc ff ff    	jne    c0004686 <create_partition+0x31>
c00049ea:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00049ee:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00049f2:	83 c2 ff             	add    edx,0xffffffff
c00049f5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00049f8:	83 d1 ff             	adc    ecx,0xffffffff
c00049fb:	e8 fe d2 ff ff       	call   c0001cfe <st_qword>
c0004a00:	ba 01 00 00 00       	mov    edx,0x1
c0004a05:	31 c9                	xor    ecx,ecx
c0004a07:	89 e8                	mov    eax,ebp
c0004a09:	e8 f0 d2 ff ff       	call   c0001cfe <st_qword>
c0004a0e:	89 f8                	mov    eax,edi
c0004a10:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0004a14:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004a18:	31 ff                	xor    edi,edi
c0004a1a:	e8 df d2 ff ff       	call   c0001cfe <st_qword>
c0004a1f:	89 f0                	mov    eax,esi
c0004a21:	31 d2                	xor    edx,edx
c0004a23:	e8 d3 d2 ff ff       	call   c0001cfb <st_dword>
c0004a28:	83 c8 ff             	or     eax,0xffffffff
c0004a2b:	47                   	inc    edi
c0004a2c:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c0004a31:	e8 7e d8 ff ff       	call   c00022b4 <crc32>
c0004a36:	83 ff 5c             	cmp    edi,0x5c
c0004a39:	75 f0                	jne    c0004a2b <create_partition+0x3d6>
c0004a3b:	f7 d0                	not    eax
c0004a3d:	89 c2                	mov    edx,eax
c0004a3f:	89 f0                	mov    eax,esi
c0004a41:	e8 b5 d2 ff ff       	call   c0001cfb <st_dword>
c0004a46:	83 ec 0c             	sub    esp,0xc
c0004a49:	6a 01                	push   0x1
c0004a4b:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0004a4f:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004a53:	83 c0 ff             	add    eax,0xffffffff
c0004a56:	83 d2 ff             	adc    edx,0xffffffff
c0004a59:	52                   	push   edx
c0004a5a:	50                   	push   eax
c0004a5b:	53                   	push   ebx
c0004a5c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004a60:	e8 eb d1 ff ff       	call   c0001c50 <disk_write>
c0004a65:	83 c4 20             	add    esp,0x20
c0004a68:	85 c0                	test   eax,eax
c0004a6a:	0f 85 16 fc ff ff    	jne    c0004686 <create_partition+0x31>
c0004a70:	31 d2                	xor    edx,edx
c0004a72:	89 d8                	mov    eax,ebx
c0004a74:	b9 00 02 00 00       	mov    ecx,0x200
c0004a79:	e8 9b d2 ff ff       	call   c0001d19 <mem_set>
c0004a7e:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c0004a84:	b9 10 00 00 00       	mov    ecx,0x10
c0004a89:	ba 70 9c 02 c0       	mov    edx,0xc0029c70
c0004a8e:	e8 71 d2 ff ff       	call   c0001d04 <mem_cpy>
c0004a93:	e9 21 01 00 00       	jmp    c0004bb9 <create_partition+0x564>
c0004a98:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004a9c:	b9 05 00 00 00       	mov    ecx,0x5
c0004aa1:	89 04 24             	mov    DWORD PTR [esp],eax
c0004aa4:	bf 08 00 00 00       	mov    edi,0x8
c0004aa9:	89 f8                	mov    eax,edi
c0004aab:	31 d2                	xor    edx,edx
c0004aad:	0f b6 f0             	movzx  esi,al
c0004ab0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004ab3:	f7 f6                	div    esi
c0004ab5:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004aba:	76 0a                	jbe    c0004ac6 <create_partition+0x471>
c0004abc:	d1 e7                	shl    edi,1
c0004abe:	49                   	dec    ecx
c0004abf:	75 e8                	jne    c0004aa9 <create_partition+0x454>
c0004ac1:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004ac6:	b9 00 02 00 00       	mov    ecx,0x200
c0004acb:	31 d2                	xor    edx,edx
c0004acd:	89 d8                	mov    eax,ebx
c0004acf:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c0004ad5:	e8 3f d2 ff ff       	call   c0001d19 <mem_set>
c0004ada:	b9 64 00 00 00       	mov    ecx,0x64
c0004adf:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004ae2:	31 d2                	xor    edx,edx
c0004ae4:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0004aec:	f7 f1                	div    ecx
c0004aee:	b9 3f 00 00 00       	mov    ecx,0x3f
c0004af3:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004af7:	89 f8                	mov    eax,edi
c0004af9:	0f b6 c0             	movzx  eax,al
c0004afc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004b00:	e9 80 00 00 00       	jmp    c0004b85 <create_partition+0x530>
c0004b05:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004b08:	29 cf                	sub    edi,ecx
c0004b0a:	89 ca                	mov    edx,ecx
c0004b0c:	89 f0                	mov    eax,esi
c0004b0e:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004b13:	e8 e3 d1 ff ff       	call   c0001cfb <st_dword>
c0004b18:	8d 46 04             	lea    eax,[esi+0x4]
c0004b1b:	89 fa                	mov    edx,edi
c0004b1d:	83 c6 10             	add    esi,0x10
c0004b20:	e8 d6 d1 ff ff       	call   c0001cfb <st_dword>
c0004b25:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c0004b29:	31 d2                	xor    edx,edx
c0004b2b:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c0004b2e:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0004b32:	89 c8                	mov    eax,ecx
c0004b34:	01 f9                	add    ecx,edi
c0004b36:	f7 f5                	div    ebp
c0004b38:	89 d5                	mov    ebp,edx
c0004b3a:	31 d2                	xor    edx,edx
c0004b3c:	45                   	inc    ebp
c0004b3d:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004b41:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c0004b44:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0004b47:	89 c2                	mov    edx,eax
c0004b49:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004b4c:	c1 ea 02             	shr    edx,0x2
c0004b4f:	83 e2 c0             	and    edx,0xffffffc0
c0004b52:	09 ea                	or     edx,ebp
c0004b54:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004b59:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004b5c:	31 d2                	xor    edx,edx
c0004b5e:	f7 f5                	div    ebp
c0004b60:	89 d7                	mov    edi,edx
c0004b62:	31 d2                	xor    edx,edx
c0004b64:	47                   	inc    edi
c0004b65:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004b69:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004b6c:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004b6f:	89 c5                	mov    ebp,eax
c0004b71:	c1 ed 02             	shr    ebp,0x2
c0004b74:	83 e5 c0             	and    ebp,0xffffffc0
c0004b77:	09 ef                	or     edi,ebp
c0004b79:	89 fa                	mov    edx,edi
c0004b7b:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004b7e:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c0004b83:	74 34                	je     c0004bb9 <create_partition+0x564>
c0004b85:	85 c9                	test   ecx,ecx
c0004b87:	74 30                	je     c0004bb9 <create_partition+0x564>
c0004b89:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004b8c:	76 2b                	jbe    c0004bb9 <create_partition+0x564>
c0004b8e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b92:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004b96:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004b99:	83 ff 64             	cmp    edi,0x64
c0004b9c:	76 4b                	jbe    c0004be9 <create_partition+0x594>
c0004b9e:	89 f8                	mov    eax,edi
c0004ba0:	01 c8                	add    eax,ecx
c0004ba2:	0f 82 5d ff ff ff    	jb     c0004b05 <create_partition+0x4b0>
c0004ba8:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004bab:	0f 87 54 ff ff ff    	ja     c0004b05 <create_partition+0x4b0>
c0004bb1:	85 ff                	test   edi,edi
c0004bb3:	0f 85 51 ff ff ff    	jne    c0004b0a <create_partition+0x4b5>
c0004bb9:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0004bbf:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004bc4:	e8 2e d1 ff ff       	call   c0001cf7 <st_word>
c0004bc9:	83 ec 0c             	sub    esp,0xc
c0004bcc:	6a 01                	push   0x1
c0004bce:	6a 00                	push   0x0
c0004bd0:	6a 00                	push   0x0
c0004bd2:	53                   	push   ebx
c0004bd3:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004bd7:	e8 74 d0 ff ff       	call   c0001c50 <disk_write>
c0004bdc:	83 c4 20             	add    esp,0x20
c0004bdf:	85 c0                	test   eax,eax
c0004be1:	0f 95 c0             	setne  al
c0004be4:	0f b6 c0             	movzx  eax,al
c0004be7:	eb 0e                	jmp    c0004bf7 <create_partition+0x5a2>
c0004be9:	74 07                	je     c0004bf2 <create_partition+0x59d>
c0004beb:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c0004bf0:	eb ac                	jmp    c0004b9e <create_partition+0x549>
c0004bf2:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004bf5:	eb a7                	jmp    c0004b9e <create_partition+0x549>
c0004bf7:	83 c4 5c             	add    esp,0x5c
c0004bfa:	5b                   	pop    ebx
c0004bfb:	5e                   	pop    esi
c0004bfc:	5f                   	pop    edi
c0004bfd:	5d                   	pop    ebp
c0004bfe:	c3                   	ret    

c0004bff <get_fileinfo>:
c0004bff:	55                   	push   ebp
c0004c00:	57                   	push   edi
c0004c01:	56                   	push   esi
c0004c02:	53                   	push   ebx
c0004c03:	83 ec 1c             	sub    esp,0x1c
c0004c06:	8b 30                	mov    esi,DWORD PTR [eax]
c0004c08:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004c0c:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0004c10:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c0004c13:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c0004c16:	0f 84 dc 01 00 00    	je     c0004df8 <get_fileinfo+0x1f9>
c0004c1c:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004c1f:	75 0f                	jne    c0004c30 <get_fileinfo+0x31>
c0004c21:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0004c24:	83 c4 1c             	add    esp,0x1c
c0004c27:	5b                   	pop    ebx
c0004c28:	5e                   	pop    esi
c0004c29:	5f                   	pop    edi
c0004c2a:	5d                   	pop    ebp
c0004c2b:	e9 58 d5 ff ff       	jmp    c0002188 <get_xfileinfo>
c0004c30:	89 d3                	mov    ebx,edx
c0004c32:	89 c6                	mov    esi,eax
c0004c34:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c0004c38:	74 6a                	je     c0004ca4 <get_fileinfo+0xa5>
c0004c3a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0004c42:	31 ed                	xor    ebp,ebp
c0004c44:	31 ff                	xor    edi,edi
c0004c46:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004c4a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004c4e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004c51:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0004c55:	66 85 d2             	test   dx,dx
c0004c58:	74 3e                	je     c0004c98 <get_fileinfo+0x99>
c0004c5a:	66 85 ed             	test   bp,bp
c0004c5d:	75 0c                	jne    c0004c6b <get_fileinfo+0x6c>
c0004c5f:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004c65:	66 3d ff 07          	cmp    ax,0x7ff
c0004c69:	76 22                	jbe    c0004c8d <get_fileinfo+0x8e>
c0004c6b:	b9 ff 00 00 00       	mov    ecx,0xff
c0004c70:	89 e8                	mov    eax,ebp
c0004c72:	29 f9                	sub    ecx,edi
c0004c74:	c1 e0 10             	shl    eax,0x10
c0004c77:	09 d0                	or     eax,edx
c0004c79:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004c7d:	e8 a3 d1 ff ff       	call   c0001e25 <put_utf>
c0004c82:	84 c0                	test   al,al
c0004c84:	74 10                	je     c0004c96 <get_fileinfo+0x97>
c0004c86:	0f b6 c0             	movzx  eax,al
c0004c89:	31 d2                	xor    edx,edx
c0004c8b:	01 c7                	add    edi,eax
c0004c8d:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004c92:	89 d5                	mov    ebp,edx
c0004c94:	eb b0                	jmp    c0004c46 <get_fileinfo+0x47>
c0004c96:	31 ff                	xor    edi,edi
c0004c98:	66 85 ed             	test   bp,bp
c0004c9b:	74 02                	je     c0004c9f <get_fileinfo+0xa0>
c0004c9d:	31 ff                	xor    edi,edi
c0004c9f:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004ca4:	31 ff                	xor    edi,edi
c0004ca6:	31 c9                	xor    ecx,ecx
c0004ca8:	83 f9 0a             	cmp    ecx,0xa
c0004cab:	0f 87 ad 00 00 00    	ja     c0004d5e <get_fileinfo+0x15f>
c0004cb1:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004cb4:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004cb7:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004cbb:	66 83 fa 20          	cmp    dx,0x20
c0004cbf:	0f 84 92 00 00 00    	je     c0004d57 <get_fileinfo+0x158>
c0004cc5:	66 83 fa 05          	cmp    dx,0x5
c0004cc9:	75 05                	jne    c0004cd0 <get_fileinfo+0xd1>
c0004ccb:	ba e5 00 00 00       	mov    edx,0xe5
c0004cd0:	83 ff 0b             	cmp    edi,0xb
c0004cd3:	77 0b                	ja     c0004ce0 <get_fileinfo+0xe1>
c0004cd5:	83 fd 09             	cmp    ebp,0x9
c0004cd8:	75 06                	jne    c0004ce0 <get_fileinfo+0xe1>
c0004cda:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004cdf:	47                   	inc    edi
c0004ce0:	0f b7 c2             	movzx  eax,dx
c0004ce3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004ce7:	e8 6d d0 ff ff       	call   c0001d59 <dbc_1st>
c0004cec:	85 c0                	test   eax,eax
c0004cee:	74 2f                	je     c0004d1f <get_fileinfo+0x120>
c0004cf0:	83 fd 08             	cmp    ebp,0x8
c0004cf3:	74 2a                	je     c0004d1f <get_fileinfo+0x120>
c0004cf5:	83 fd 0b             	cmp    ebp,0xb
c0004cf8:	74 25                	je     c0004d1f <get_fileinfo+0x120>
c0004cfa:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004cfd:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004d01:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004d05:	e8 52 d0 ff ff       	call   c0001d5c <dbc_2nd>
c0004d0a:	85 c0                	test   eax,eax
c0004d0c:	74 11                	je     c0004d1f <get_fileinfo+0x120>
c0004d0e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004d12:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004d17:	c1 e2 08             	shl    edx,0x8
c0004d1a:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004d1d:	09 c2                	or     edx,eax
c0004d1f:	0f b7 d2             	movzx  edx,dx
c0004d22:	50                   	push   eax
c0004d23:	50                   	push   eax
c0004d24:	68 b5 01 00 00       	push   0x1b5
c0004d29:	52                   	push   edx
c0004d2a:	e8 46 38 00 00       	call   c0008575 <ff_oem2uni>
c0004d2f:	83 c4 10             	add    esp,0x10
c0004d32:	66 85 c0             	test   ax,ax
c0004d35:	75 04                	jne    c0004d3b <get_fileinfo+0x13c>
c0004d37:	31 ff                	xor    edi,edi
c0004d39:	eb 23                	jmp    c0004d5e <get_fileinfo+0x15f>
c0004d3b:	b9 0c 00 00 00       	mov    ecx,0xc
c0004d40:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004d44:	29 f9                	sub    ecx,edi
c0004d46:	0f b7 c0             	movzx  eax,ax
c0004d49:	e8 d7 d0 ff ff       	call   c0001e25 <put_utf>
c0004d4e:	84 c0                	test   al,al
c0004d50:	74 e5                	je     c0004d37 <get_fileinfo+0x138>
c0004d52:	0f b6 c0             	movzx  eax,al
c0004d55:	01 c7                	add    edi,eax
c0004d57:	89 e9                	mov    ecx,ebp
c0004d59:	e9 4a ff ff ff       	jmp    c0004ca8 <get_fileinfo+0xa9>
c0004d5e:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004d63:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004d67:	75 54                	jne    c0004dbd <get_fileinfo+0x1be>
c0004d69:	85 ff                	test   edi,edi
c0004d6b:	75 0b                	jne    c0004d78 <get_fileinfo+0x179>
c0004d6d:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004d71:	ba 01 00 00 00       	mov    edx,0x1
c0004d76:	eb 33                	jmp    c0004dab <get_fileinfo+0x1ac>
c0004d78:	b1 08                	mov    cl,0x8
c0004d7a:	31 d2                	xor    edx,edx
c0004d7c:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004d82:	84 c0                	test   al,al
c0004d84:	74 25                	je     c0004dab <get_fileinfo+0x1ac>
c0004d86:	66 83 f8 2e          	cmp    ax,0x2e
c0004d8a:	74 16                	je     c0004da2 <get_fileinfo+0x1a3>
c0004d8c:	8d 78 bf             	lea    edi,[eax-0x41]
c0004d8f:	66 83 ff 19          	cmp    di,0x19
c0004d93:	77 0f                	ja     c0004da4 <get_fileinfo+0x1a5>
c0004d95:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004d98:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004d9b:	74 07                	je     c0004da4 <get_fileinfo+0x1a5>
c0004d9d:	83 c0 20             	add    eax,0x20
c0004da0:	eb 02                	jmp    c0004da4 <get_fileinfo+0x1a5>
c0004da2:	b1 10                	mov    cl,0x10
c0004da4:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004da8:	42                   	inc    edx
c0004da9:	eb d1                	jmp    c0004d7c <get_fileinfo+0x17d>
c0004dab:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004db0:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004db3:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004db7:	75 04                	jne    c0004dbd <get_fileinfo+0x1be>
c0004db9:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004dbd:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004dc0:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004dc3:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004dc6:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004dc9:	83 c0 1c             	add    eax,0x1c
c0004dcc:	e8 c1 ce ff ff       	call   c0001c92 <ld_dword>
c0004dd1:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004dd8:	89 03                	mov    DWORD PTR [ebx],eax
c0004dda:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004ddd:	83 c0 16             	add    eax,0x16
c0004de0:	e8 a0 ce ff ff       	call   c0001c85 <ld_word>
c0004de5:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004de9:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004dec:	83 c0 18             	add    eax,0x18
c0004def:	e8 91 ce ff ff       	call   c0001c85 <ld_word>
c0004df4:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004df8:	83 c4 1c             	add    esp,0x1c
c0004dfb:	5b                   	pop    ebx
c0004dfc:	5e                   	pop    esi
c0004dfd:	5f                   	pop    edi
c0004dfe:	5d                   	pop    ebp
c0004dff:	c3                   	ret    

c0004e00 <ld_clust.isra.0>:
c0004e00:	56                   	push   esi
c0004e01:	89 c6                	mov    esi,eax
c0004e03:	53                   	push   ebx
c0004e04:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004e07:	89 d3                	mov    ebx,edx
c0004e09:	e8 77 ce ff ff       	call   c0001c85 <ld_word>
c0004e0e:	0f b7 c8             	movzx  ecx,ax
c0004e11:	89 f0                	mov    eax,esi
c0004e13:	3c 03                	cmp    al,0x3
c0004e15:	75 0d                	jne    c0004e24 <ld_clust.isra.0+0x24>
c0004e17:	8d 43 14             	lea    eax,[ebx+0x14]
c0004e1a:	e8 66 ce ff ff       	call   c0001c85 <ld_word>
c0004e1f:	c1 e0 10             	shl    eax,0x10
c0004e22:	09 c1                	or     ecx,eax
c0004e24:	89 c8                	mov    eax,ecx
c0004e26:	5b                   	pop    ebx
c0004e27:	5e                   	pop    esi
c0004e28:	c3                   	ret    

c0004e29 <st_clust.isra.1>:
c0004e29:	56                   	push   esi
c0004e2a:	89 c6                	mov    esi,eax
c0004e2c:	53                   	push   ebx
c0004e2d:	89 d3                	mov    ebx,edx
c0004e2f:	0f b7 d1             	movzx  edx,cx
c0004e32:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004e35:	e8 bd ce ff ff       	call   c0001cf7 <st_word>
c0004e3a:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004e3d:	75 0f                	jne    c0004e4e <st_clust.isra.1+0x25>
c0004e3f:	c1 e9 10             	shr    ecx,0x10
c0004e42:	8d 43 14             	lea    eax,[ebx+0x14]
c0004e45:	89 ca                	mov    edx,ecx
c0004e47:	5b                   	pop    ebx
c0004e48:	5e                   	pop    esi
c0004e49:	e9 a9 ce ff ff       	jmp    c0001cf7 <st_word>
c0004e4e:	5b                   	pop    ebx
c0004e4f:	5e                   	pop    esi
c0004e50:	c3                   	ret    

c0004e51 <init_alloc_info.isra.2>:
c0004e51:	56                   	push   esi
c0004e52:	53                   	push   ebx
c0004e53:	89 c6                	mov    esi,eax
c0004e55:	89 d3                	mov    ebx,edx
c0004e57:	51                   	push   ecx
c0004e58:	8b 00                	mov    eax,DWORD PTR [eax]
c0004e5a:	83 c0 34             	add    eax,0x34
c0004e5d:	e8 30 ce ff ff       	call   c0001c92 <ld_dword>
c0004e62:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004e65:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e67:	83 c0 38             	add    eax,0x38
c0004e6a:	e8 3b ce ff ff       	call   c0001caa <ld_qword>
c0004e6f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004e72:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004e75:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e77:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004e7a:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e81:	83 e0 02             	and    eax,0x2
c0004e84:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004e87:	5b                   	pop    ebx
c0004e88:	5b                   	pop    ebx
c0004e89:	5e                   	pop    esi
c0004e8a:	c3                   	ret    

c0004e8b <follow_path>:
c0004e8b:	56                   	push   esi
c0004e8c:	53                   	push   ebx
c0004e8d:	89 c3                	mov    ebx,eax
c0004e8f:	83 ec 14             	sub    esp,0x14
c0004e92:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004e96:	8b 30                	mov    esi,DWORD PTR [eax]
c0004e98:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e9c:	8a 10                	mov    dl,BYTE PTR [eax]
c0004e9e:	80 fa 5c             	cmp    dl,0x5c
c0004ea1:	75 07                	jne    c0004eaa <follow_path+0x1f>
c0004ea3:	40                   	inc    eax
c0004ea4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004ea8:	eb ee                	jmp    c0004e98 <follow_path+0xd>
c0004eaa:	80 fa 2f             	cmp    dl,0x2f
c0004ead:	74 f4                	je     c0004ea3 <follow_path+0x18>
c0004eaf:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004eb6:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004ebd:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004ec0:	77 52                	ja     c0004f14 <follow_path+0x89>
c0004ec2:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004ec6:	31 d2                	xor    edx,edx
c0004ec8:	89 d8                	mov    eax,ebx
c0004eca:	e8 12 e3 ff ff       	call   c00031e1 <dir_sdi>
c0004ecf:	eb 7c                	jmp    c0004f4d <follow_path+0xc2>
c0004ed1:	89 d8                	mov    eax,ebx
c0004ed3:	e8 6e f2 ff ff       	call   c0004146 <dir_find>
c0004ed8:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004edb:	85 c0                	test   eax,eax
c0004edd:	75 46                	jne    c0004f25 <follow_path+0x9a>
c0004edf:	80 e2 04             	and    dl,0x4
c0004ee2:	75 69                	jne    c0004f4d <follow_path+0xc2>
c0004ee4:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004ee8:	74 5e                	je     c0004f48 <follow_path+0xbd>
c0004eea:	8a 06                	mov    al,BYTE PTR [esi]
c0004eec:	3c 04                	cmp    al,0x4
c0004eee:	75 41                	jne    c0004f31 <follow_path+0xa6>
c0004ef0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004ef3:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004ef7:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004efa:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004efd:	30 c0                	xor    al,al
c0004eff:	09 d0                	or     eax,edx
c0004f01:	89 da                	mov    edx,ebx
c0004f03:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004f06:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004f09:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004f0c:	8d 46 10             	lea    eax,[esi+0x10]
c0004f0f:	e8 3d ff ff ff       	call   c0004e51 <init_alloc_info.isra.2>
c0004f14:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004f18:	89 d8                	mov    eax,ebx
c0004f1a:	e8 a9 ed ff ff       	call   c0003cc8 <create_name>
c0004f1f:	85 c0                	test   eax,eax
c0004f21:	74 ae                	je     c0004ed1 <follow_path+0x46>
c0004f23:	eb 28                	jmp    c0004f4d <follow_path+0xc2>
c0004f25:	83 f8 04             	cmp    eax,0x4
c0004f28:	75 23                	jne    c0004f4d <follow_path+0xc2>
c0004f2a:	80 e2 04             	and    dl,0x4
c0004f2d:	74 19                	je     c0004f48 <follow_path+0xbd>
c0004f2f:	eb 1c                	jmp    c0004f4d <follow_path+0xc2>
c0004f31:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004f34:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004f3a:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004f3e:	e8 bd fe ff ff       	call   c0004e00 <ld_clust.isra.0>
c0004f43:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004f46:	eb cc                	jmp    c0004f14 <follow_path+0x89>
c0004f48:	b8 05 00 00 00       	mov    eax,0x5
c0004f4d:	83 c4 14             	add    esp,0x14
c0004f50:	5b                   	pop    ebx
c0004f51:	5e                   	pop    esi
c0004f52:	c3                   	ret    

c0004f53 <f_mount>:
c0004f53:	53                   	push   ebx
c0004f54:	83 ec 18             	sub    esp,0x18
c0004f57:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004f5b:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004f5f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f63:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004f67:	e8 fb d2 ff ff       	call   c0002267 <get_ldnumber>
c0004f6c:	89 c2                	mov    edx,eax
c0004f6e:	b8 0b 00 00 00       	mov    eax,0xb
c0004f73:	85 d2                	test   edx,edx
c0004f75:	78 39                	js     c0004fb0 <f_mount+0x5d>
c0004f77:	8b 04 95 00 ee 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1200]
c0004f7e:	85 c0                	test   eax,eax
c0004f80:	74 03                	je     c0004f85 <f_mount+0x32>
c0004f82:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f85:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f89:	85 c0                	test   eax,eax
c0004f8b:	74 03                	je     c0004f90 <f_mount+0x3d>
c0004f8d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f90:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f94:	89 04 95 00 ee 02 c0 	mov    DWORD PTR [edx*4-0x3ffd1200],eax
c0004f9b:	31 c0                	xor    eax,eax
c0004f9d:	84 db                	test   bl,bl
c0004f9f:	74 0f                	je     c0004fb0 <f_mount+0x5d>
c0004fa1:	31 c9                	xor    ecx,ecx
c0004fa3:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004fa7:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004fab:	e8 65 d7 ff ff       	call   c0002715 <mount_volume>
c0004fb0:	83 c4 18             	add    esp,0x18
c0004fb3:	5b                   	pop    ebx
c0004fb4:	c3                   	ret    

c0004fb5 <f_open>:
c0004fb5:	55                   	push   ebp
c0004fb6:	bd 09 00 00 00       	mov    ebp,0x9
c0004fbb:	57                   	push   edi
c0004fbc:	56                   	push   esi
c0004fbd:	53                   	push   ebx
c0004fbe:	83 ec 7c             	sub    esp,0x7c
c0004fc1:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004fc8:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004fcf:	85 db                	test   ebx,ebx
c0004fd1:	0f 84 10 04 00 00    	je     c00053e7 <f_open+0x432>
c0004fd7:	89 fe                	mov    esi,edi
c0004fd9:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004fdd:	83 e6 3f             	and    esi,0x3f
c0004fe0:	89 f0                	mov    eax,esi
c0004fe2:	0f b6 c8             	movzx  ecx,al
c0004fe5:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004fec:	e8 24 d7 ff ff       	call   c0002715 <mount_volume>
c0004ff1:	89 c5                	mov    ebp,eax
c0004ff3:	85 c0                	test   eax,eax
c0004ff5:	0f 85 e6 03 00 00    	jne    c00053e1 <f_open+0x42c>
c0004ffb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fff:	bd 11 00 00 00       	mov    ebp,0x11
c0005004:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0005008:	83 ec 0c             	sub    esp,0xc
c000500b:	68 60 04 00 00       	push   0x460
c0005010:	e8 a3 34 00 00       	call   c00084b8 <ff_memalloc>
c0005015:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0005019:	83 c4 10             	add    esp,0x10
c000501c:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0005021:	0f 84 c0 03 00 00    	je     c00053e7 <f_open+0x432>
c0005027:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000502b:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000502f:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0005035:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0005038:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000503b:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0005042:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005046:	e8 40 fe ff ff       	call   c0004e8b <follow_path>
c000504b:	89 c5                	mov    ebp,eax
c000504d:	85 c0                	test   eax,eax
c000504f:	75 0c                	jne    c000505d <f_open+0xa8>
c0005051:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0005056:	79 05                	jns    c000505d <f_open+0xa8>
c0005058:	bd 06 00 00 00       	mov    ebp,0x6
c000505d:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0005063:	0f 84 84 01 00 00    	je     c00051ed <f_open+0x238>
c0005069:	85 ed                	test   ebp,ebp
c000506b:	74 20                	je     c000508d <f_open+0xd8>
c000506d:	83 fd 04             	cmp    ebp,0x4
c0005070:	0f 85 58 03 00 00    	jne    c00053ce <f_open+0x419>
c0005076:	8d 44 24 24          	lea    eax,[esp+0x24]
c000507a:	83 ce 08             	or     esi,0x8
c000507d:	e8 8a f2 ff ff       	call   c000430c <dir_register>
c0005082:	89 c5                	mov    ebp,eax
c0005084:	85 c0                	test   eax,eax
c0005086:	74 2f                	je     c00050b7 <f_open+0x102>
c0005088:	e9 41 03 00 00       	jmp    c00053ce <f_open+0x419>
c000508d:	bd 07 00 00 00       	mov    ebp,0x7
c0005092:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0005097:	0f 85 31 03 00 00    	jne    c00053ce <f_open+0x419>
c000509d:	bd 08 00 00 00       	mov    ebp,0x8
c00050a2:	f7 c7 04 00 00 00    	test   edi,0x4
c00050a8:	0f 85 20 03 00 00    	jne    c00053ce <f_open+0x419>
c00050ae:	83 e7 08             	and    edi,0x8
c00050b1:	0f 84 65 01 00 00    	je     c000521c <f_open+0x267>
c00050b7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00050bb:	8a 02                	mov    al,BYTE PTR [edx]
c00050bd:	3c 04                	cmp    al,0x4
c00050bf:	0f 85 97 00 00 00    	jne    c000515c <f_open+0x1a7>
c00050c5:	8d 42 10             	lea    eax,[edx+0x10]
c00050c8:	89 13                	mov    DWORD PTR [ebx],edx
c00050ca:	89 da                	mov    edx,ebx
c00050cc:	e8 80 fd ff ff       	call   c0004e51 <init_alloc_info.isra.2>
c00050d1:	31 d2                	xor    edx,edx
c00050d3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050d7:	b9 1e 00 00 00       	mov    ecx,0x1e
c00050dc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050df:	83 c0 02             	add    eax,0x2
c00050e2:	e8 32 cc ff ff       	call   c0001d19 <mem_set>
c00050e7:	b9 1a 00 00 00       	mov    ecx,0x1a
c00050ec:	31 d2                	xor    edx,edx
c00050ee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050f2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050f5:	83 c0 26             	add    eax,0x26
c00050f8:	e8 1c cc ff ff       	call   c0001d19 <mem_set>
c00050fd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005101:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005104:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c0005108:	ba 00 00 21 50       	mov    edx,0x50210000
c000510d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005110:	83 c0 08             	add    eax,0x8
c0005113:	e8 e3 cb ff ff       	call   c0001cfb <st_dword>
c0005118:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000511c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000511f:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c0005123:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005127:	e8 b7 ea ff ff       	call   c0003be3 <store_xdir>
c000512c:	89 c5                	mov    ebp,eax
c000512e:	85 c0                	test   eax,eax
c0005130:	0f 85 98 02 00 00    	jne    c00053ce <f_open+0x419>
c0005136:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0005139:	85 d2                	test   edx,edx
c000513b:	0f 84 db 00 00 00    	je     c000521c <f_open+0x267>
c0005141:	31 c9                	xor    ecx,ecx
c0005143:	89 d8                	mov    eax,ebx
c0005145:	e8 8e e3 ff ff       	call   c00034d8 <remove_chain>
c000514a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000514e:	89 c5                	mov    ebp,eax
c0005150:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005153:	48                   	dec    eax
c0005154:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0005157:	e9 b8 00 00 00       	jmp    c0005214 <f_open+0x25f>
c000515c:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0005160:	89 ea                	mov    edx,ebp
c0005162:	e8 99 fc ff ff       	call   c0004e00 <ld_clust.isra.0>
c0005167:	ba 00 00 21 50       	mov    edx,0x50210000
c000516c:	89 c7                	mov    edi,eax
c000516e:	8d 45 0e             	lea    eax,[ebp+0xe]
c0005171:	e8 85 cb ff ff       	call   c0001cfb <st_dword>
c0005176:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000517a:	31 c9                	xor    ecx,ecx
c000517c:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0005180:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005184:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0005188:	e8 9c fc ff ff       	call   c0004e29 <st_clust.isra.1>
c000518d:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0005191:	31 d2                	xor    edx,edx
c0005193:	83 c0 1c             	add    eax,0x1c
c0005196:	e8 60 cb ff ff       	call   c0001cfb <st_dword>
c000519b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000519f:	85 ff                	test   edi,edi
c00051a1:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00051a5:	74 75                	je     c000521c <f_open+0x267>
c00051a7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00051ab:	31 c9                	xor    ecx,ecx
c00051ad:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c00051b0:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c00051b3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00051b7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00051bb:	89 fa                	mov    edx,edi
c00051bd:	8d 44 24 24          	lea    eax,[esp+0x24]
c00051c1:	e8 12 e3 ff ff       	call   c00034d8 <remove_chain>
c00051c6:	89 c5                	mov    ebp,eax
c00051c8:	85 c0                	test   eax,eax
c00051ca:	0f 85 fe 01 00 00    	jne    c00053ce <f_open+0x419>
c00051d0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00051d4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00051d8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00051dc:	4f                   	dec    edi
c00051dd:	e8 81 d2 ff ff       	call   c0002463 <move_window>
c00051e2:	89 c5                	mov    ebp,eax
c00051e4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00051e8:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c00051eb:	eb 27                	jmp    c0005214 <f_open+0x25f>
c00051ed:	85 ed                	test   ebp,ebp
c00051ef:	0f 85 d9 01 00 00    	jne    c00053ce <f_open+0x419>
c00051f5:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c00051f9:	bd 04 00 00 00       	mov    ebp,0x4
c00051fe:	a8 10                	test   al,0x10
c0005200:	0f 85 c8 01 00 00    	jne    c00053ce <f_open+0x419>
c0005206:	83 e7 02             	and    edi,0x2
c0005209:	74 11                	je     c000521c <f_open+0x267>
c000520b:	bd 07 00 00 00       	mov    ebp,0x7
c0005210:	a8 01                	test   al,0x1
c0005212:	eb 02                	jmp    c0005216 <f_open+0x261>
c0005214:	85 ed                	test   ebp,ebp
c0005216:	0f 85 b2 01 00 00    	jne    c00053ce <f_open+0x419>
c000521c:	f7 c6 08 00 00 00    	test   esi,0x8
c0005222:	74 03                	je     c0005227 <f_open+0x272>
c0005224:	83 ce 40             	or     esi,0x40
c0005227:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000522b:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c000522e:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c0005231:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c0005234:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c0005237:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c000523b:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c000523e:	8a 02                	mov    al,BYTE PTR [edx]
c0005240:	3c 04                	cmp    al,0x4
c0005242:	75 2a                	jne    c000526e <f_open+0x2b9>
c0005244:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005248:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c000524d:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0005250:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0005254:	30 c0                	xor    al,al
c0005256:	09 c8                	or     eax,ecx
c0005258:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000525b:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000525f:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005262:	8d 42 10             	lea    eax,[edx+0x10]
c0005265:	89 da                	mov    edx,ebx
c0005267:	e8 e5 fb ff ff       	call   c0004e51 <init_alloc_info.isra.2>
c000526c:	eb 1c                	jmp    c000528a <f_open+0x2d5>
c000526e:	89 fa                	mov    edx,edi
c0005270:	e8 8b fb ff ff       	call   c0004e00 <ld_clust.isra.0>
c0005275:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005278:	8d 47 1c             	lea    eax,[edi+0x1c]
c000527b:	e8 12 ca ff ff       	call   c0001c92 <ld_dword>
c0005280:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0005287:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000528a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000528e:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c0005295:	89 03                	mov    DWORD PTR [ebx],eax
c0005297:	31 d2                	xor    edx,edx
c0005299:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c000529d:	b9 00 02 00 00       	mov    ecx,0x200
c00052a2:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00052a6:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c00052aa:	89 f0                	mov    eax,esi
c00052ac:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c00052b3:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c00052b6:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c00052bd:	8d 43 50             	lea    eax,[ebx+0x50]
c00052c0:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c00052c7:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00052ce:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00052d2:	e8 42 ca ff ff       	call   c0001d19 <mem_set>
c00052d7:	83 e6 20             	and    esi,0x20
c00052da:	75 07                	jne    c00052e3 <f_open+0x32e>
c00052dc:	31 ed                	xor    ebp,ebp
c00052de:	e9 eb 00 00 00       	jmp    c00053ce <f_open+0x419>
c00052e3:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00052e6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00052e9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00052ed:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00052f1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00052f5:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00052f9:	74 e1                	je     c00052dc <f_open+0x327>
c00052fb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00052ff:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005303:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005306:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005309:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000530d:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0005310:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c0005314:	31 ff                	xor    edi,edi
c0005316:	c1 e5 09             	shl    ebp,0x9
c0005319:	89 ee                	mov    esi,ebp
c000531b:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c000531f:	89 f8                	mov    eax,edi
c0005321:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005325:	73 22                	jae    c0005349 <f_open+0x394>
c0005327:	89 d8                	mov    eax,ebx
c0005329:	e8 bd dc ff ff       	call   c0002feb <get_fat>
c000532e:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0005332:	89 c2                	mov    edx,eax
c0005334:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c0005338:	83 f8 01             	cmp    eax,0x1
c000533b:	76 10                	jbe    c000534d <f_open+0x398>
c000533d:	83 f8 ff             	cmp    eax,0xffffffff
c0005340:	75 d9                	jne    c000531b <f_open+0x366>
c0005342:	bd 01 00 00 00       	mov    ebp,0x1
c0005347:	eb 09                	jmp    c0005352 <f_open+0x39d>
c0005349:	31 ed                	xor    ebp,ebp
c000534b:	eb 05                	jmp    c0005352 <f_open+0x39d>
c000534d:	bd 02 00 00 00       	mov    ebp,0x2
c0005352:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0005355:	85 ed                	test   ebp,ebp
c0005357:	75 75                	jne    c00053ce <f_open+0x419>
c0005359:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000535d:	25 ff 01 00 00       	and    eax,0x1ff
c0005362:	0f 84 74 ff ff ff    	je     c00052dc <f_open+0x327>
c0005368:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000536c:	bd 02 00 00 00       	mov    ebp,0x2
c0005371:	89 c8                	mov    eax,ecx
c0005373:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0005377:	e8 a2 cb ff ff       	call   c0001f1e <clst2sect>
c000537c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005380:	89 d7                	mov    edi,edx
c0005382:	09 c7                	or     edi,eax
c0005384:	74 48                	je     c00053ce <f_open+0x419>
c0005386:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000538a:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000538e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0005396:	0f ac fe 09          	shrd   esi,edi,0x9
c000539a:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000539e:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00053a2:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c00053a5:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00053a9:	83 ec 0c             	sub    esp,0xc
c00053ac:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c00053af:	6a 01                	push   0x1
c00053b1:	52                   	push   edx
c00053b2:	50                   	push   eax
c00053b3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00053b7:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00053bb:	50                   	push   eax
c00053bc:	e8 79 c8 ff ff       	call   c0001c3a <disk_read>
c00053c1:	83 c4 20             	add    esp,0x20
c00053c4:	85 c0                	test   eax,eax
c00053c6:	0f 95 c0             	setne  al
c00053c9:	0f b6 c0             	movzx  eax,al
c00053cc:	89 c5                	mov    ebp,eax
c00053ce:	83 ec 0c             	sub    esp,0xc
c00053d1:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00053d5:	e8 f4 30 00 00       	call   c00084ce <ff_memfree>
c00053da:	83 c4 10             	add    esp,0x10
c00053dd:	85 ed                	test   ebp,ebp
c00053df:	74 06                	je     c00053e7 <f_open+0x432>
c00053e1:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00053e7:	83 c4 7c             	add    esp,0x7c
c00053ea:	89 e8                	mov    eax,ebp
c00053ec:	5b                   	pop    ebx
c00053ed:	5e                   	pop    esi
c00053ee:	5f                   	pop    edi
c00053ef:	5d                   	pop    ebp
c00053f0:	c3                   	ret    

c00053f1 <f_read>:
c00053f1:	55                   	push   ebp
c00053f2:	57                   	push   edi
c00053f3:	56                   	push   esi
c00053f4:	53                   	push   ebx
c00053f5:	83 ec 2c             	sub    esp,0x2c
c00053f8:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00053fc:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005400:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005406:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000540a:	89 d8                	mov    eax,ebx
c000540c:	e8 77 cf ff ff       	call   c0002388 <validate>
c0005411:	89 c5                	mov    ebp,eax
c0005413:	85 c0                	test   eax,eax
c0005415:	0f 85 4c 02 00 00    	jne    c0005667 <f_read+0x276>
c000541b:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c000541f:	85 ed                	test   ebp,ebp
c0005421:	0f 85 40 02 00 00    	jne    c0005667 <f_read+0x276>
c0005427:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c000542b:	0f 84 31 02 00 00    	je     c0005662 <f_read+0x271>
c0005431:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005434:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005437:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c000543a:	bf 00 00 00 00       	mov    edi,0x0
c000543f:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0005442:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0005446:	89 d1                	mov    ecx,edx
c0005448:	19 f9                	sbb    ecx,edi
c000544a:	0f 83 cf 00 00 00    	jae    c000551f <f_read+0x12e>
c0005450:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005454:	e9 c6 00 00 00       	jmp    c000551f <f_read+0x12e>
c0005459:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000545c:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c000545f:	89 d0                	mov    eax,edx
c0005461:	25 ff 01 00 00       	and    eax,0x1ff
c0005466:	0f 85 c9 01 00 00    	jne    c0005635 <f_read+0x244>
c000546c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005470:	89 d6                	mov    esi,edx
c0005472:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005476:	89 cf                	mov    edi,ecx
c0005478:	48                   	dec    eax
c0005479:	0f ac fe 09          	shrd   esi,edi,0x9
c000547d:	21 f0                	and    eax,esi
c000547f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005483:	0f 84 a6 00 00 00    	je     c000552f <f_read+0x13e>
c0005489:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000548d:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005490:	89 c8                	mov    eax,ecx
c0005492:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0005495:	e8 84 ca ff ff       	call   c0001f1e <clst2sect>
c000549a:	89 d7                	mov    edi,edx
c000549c:	09 c7                	or     edi,eax
c000549e:	0f 84 b4 00 00 00    	je     c0005558 <f_read+0x167>
c00054a4:	31 ff                	xor    edi,edi
c00054a6:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00054aa:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00054ad:	01 c6                	add    esi,eax
c00054af:	11 d7                	adc    edi,edx
c00054b1:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00054b9:	0f 86 fd 00 00 00    	jbe    c00055bc <f_read+0x1cb>
c00054bf:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00054c3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00054c7:	c1 e8 09             	shr    eax,0x9
c00054ca:	89 04 24             	mov    DWORD PTR [esp],eax
c00054cd:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00054d1:	03 14 24             	add    edx,DWORD PTR [esp]
c00054d4:	39 c2                	cmp    edx,eax
c00054d6:	76 07                	jbe    c00054df <f_read+0xee>
c00054d8:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00054dc:	89 04 24             	mov    DWORD PTR [esp],eax
c00054df:	83 ec 0c             	sub    esp,0xc
c00054e2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00054e6:	57                   	push   edi
c00054e7:	56                   	push   esi
c00054e8:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00054ec:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00054f0:	50                   	push   eax
c00054f1:	e8 44 c7 ff ff       	call   c0001c3a <disk_read>
c00054f6:	83 c4 20             	add    esp,0x20
c00054f9:	85 c0                	test   eax,eax
c00054fb:	75 6e                	jne    c000556b <f_read+0x17a>
c00054fd:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005501:	78 7e                	js     c0005581 <f_read+0x190>
c0005503:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005506:	c1 e6 09             	shl    esi,0x9
c0005509:	31 ff                	xor    edi,edi
c000550b:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c000550f:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005513:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0005517:	01 30                	add    DWORD PTR [eax],esi
c0005519:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c000551c:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c000551f:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0005524:	0f 85 2f ff ff ff    	jne    c0005459 <f_read+0x68>
c000552a:	e9 38 01 00 00       	jmp    c0005667 <f_read+0x276>
c000552f:	89 c8                	mov    eax,ecx
c0005531:	09 d0                	or     eax,edx
c0005533:	75 05                	jne    c000553a <f_read+0x149>
c0005535:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005538:	eb 19                	jmp    c0005553 <f_read+0x162>
c000553a:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c000553e:	74 09                	je     c0005549 <f_read+0x158>
c0005540:	89 d8                	mov    eax,ebx
c0005542:	e8 f8 c9 ff ff       	call   c0001f3f <clmt_clust>
c0005547:	eb 0a                	jmp    c0005553 <f_read+0x162>
c0005549:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000554c:	89 d8                	mov    eax,ebx
c000554e:	e8 98 da ff ff       	call   c0002feb <get_fat>
c0005553:	83 f8 01             	cmp    eax,0x1
c0005556:	77 0e                	ja     c0005566 <f_read+0x175>
c0005558:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c000555c:	bd 02 00 00 00       	mov    ebp,0x2
c0005561:	e9 01 01 00 00       	jmp    c0005667 <f_read+0x276>
c0005566:	83 f8 ff             	cmp    eax,0xffffffff
c0005569:	75 0e                	jne    c0005579 <f_read+0x188>
c000556b:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000556f:	bd 01 00 00 00       	mov    ebp,0x1
c0005574:	e9 ee 00 00 00       	jmp    c0005667 <f_read+0x276>
c0005579:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c000557c:	e9 08 ff ff ff       	jmp    c0005489 <f_read+0x98>
c0005581:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005584:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005587:	29 f0                	sub    eax,esi
c0005589:	19 fa                	sbb    edx,edi
c000558b:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000558e:	89 d7                	mov    edi,edx
c0005590:	ba 00 00 00 00       	mov    edx,0x0
c0005595:	89 f9                	mov    ecx,edi
c0005597:	19 d1                	sbb    ecx,edx
c0005599:	0f 83 64 ff ff ff    	jae    c0005503 <f_read+0x112>
c000559f:	89 c7                	mov    edi,eax
c00055a1:	8d 53 50             	lea    edx,[ebx+0x50]
c00055a4:	c1 e7 09             	shl    edi,0x9
c00055a7:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055ab:	b9 00 02 00 00       	mov    ecx,0x200
c00055b0:	01 f8                	add    eax,edi
c00055b2:	e8 4d c7 ff ff       	call   c0001d04 <mem_cpy>
c00055b7:	e9 47 ff ff ff       	jmp    c0005503 <f_read+0x112>
c00055bc:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00055bf:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c00055c2:	89 04 24             	mov    DWORD PTR [esp],eax
c00055c5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00055c9:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c00055cd:	75 05                	jne    c00055d4 <f_read+0x1e3>
c00055cf:	39 34 24             	cmp    DWORD PTR [esp],esi
c00055d2:	74 5b                	je     c000562f <f_read+0x23e>
c00055d4:	8d 43 50             	lea    eax,[ebx+0x50]
c00055d7:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00055db:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00055df:	79 2a                	jns    c000560b <f_read+0x21a>
c00055e1:	83 ec 0c             	sub    esp,0xc
c00055e4:	6a 01                	push   0x1
c00055e6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00055ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00055ee:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00055f2:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00055f6:	50                   	push   eax
c00055f7:	e8 54 c6 ff ff       	call   c0001c50 <disk_write>
c00055fc:	83 c4 20             	add    esp,0x20
c00055ff:	85 c0                	test   eax,eax
c0005601:	0f 85 64 ff ff ff    	jne    c000556b <f_read+0x17a>
c0005607:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000560b:	83 ec 0c             	sub    esp,0xc
c000560e:	6a 01                	push   0x1
c0005610:	57                   	push   edi
c0005611:	56                   	push   esi
c0005612:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005616:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000561a:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000561e:	50                   	push   eax
c000561f:	e8 16 c6 ff ff       	call   c0001c3a <disk_read>
c0005624:	83 c4 20             	add    esp,0x20
c0005627:	85 c0                	test   eax,eax
c0005629:	0f 85 3c ff ff ff    	jne    c000556b <f_read+0x17a>
c000562f:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005632:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005635:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005638:	ba 00 02 00 00       	mov    edx,0x200
c000563d:	25 ff 01 00 00       	and    eax,0x1ff
c0005642:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0005646:	29 c2                	sub    edx,eax
c0005648:	39 d6                	cmp    esi,edx
c000564a:	76 02                	jbe    c000564e <f_read+0x25d>
c000564c:	89 d6                	mov    esi,edx
c000564e:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c0005652:	89 f1                	mov    ecx,esi
c0005654:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005658:	e8 a7 c6 ff ff       	call   c0001d04 <mem_cpy>
c000565d:	e9 a7 fe ff ff       	jmp    c0005509 <f_read+0x118>
c0005662:	bd 07 00 00 00       	mov    ebp,0x7
c0005667:	83 c4 2c             	add    esp,0x2c
c000566a:	89 e8                	mov    eax,ebp
c000566c:	5b                   	pop    ebx
c000566d:	5e                   	pop    esi
c000566e:	5f                   	pop    edi
c000566f:	5d                   	pop    ebp
c0005670:	c3                   	ret    

c0005671 <f_write>:
c0005671:	55                   	push   ebp
c0005672:	57                   	push   edi
c0005673:	56                   	push   esi
c0005674:	53                   	push   ebx
c0005675:	83 ec 2c             	sub    esp,0x2c
c0005678:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000567c:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005680:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005686:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000568a:	89 d8                	mov    eax,ebx
c000568c:	e8 f7 cc ff ff       	call   c0002388 <validate>
c0005691:	89 c5                	mov    ebp,eax
c0005693:	85 c0                	test   eax,eax
c0005695:	0f 85 86 02 00 00    	jne    c0005921 <f_write+0x2b0>
c000569b:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c000569f:	85 ed                	test   ebp,ebp
c00056a1:	0f 85 7a 02 00 00    	jne    c0005921 <f_write+0x2b0>
c00056a7:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c00056ab:	0f 84 6b 02 00 00    	je     c000591c <f_write+0x2ab>
c00056b1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00056b5:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00056b8:	0f 84 43 01 00 00    	je     c0005801 <f_write+0x190>
c00056be:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00056c1:	89 c1                	mov    ecx,eax
c00056c3:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00056c7:	0f 83 34 01 00 00    	jae    c0005801 <f_write+0x190>
c00056cd:	f7 d0                	not    eax
c00056cf:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00056d3:	e9 29 01 00 00       	jmp    c0005801 <f_write+0x190>
c00056d8:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00056db:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c00056de:	89 d0                	mov    eax,edx
c00056e0:	25 ff 01 00 00       	and    eax,0x1ff
c00056e5:	0f 85 00 02 00 00    	jne    c00058eb <f_write+0x27a>
c00056eb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00056ef:	89 d6                	mov    esi,edx
c00056f1:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c00056f5:	89 cf                	mov    edi,ecx
c00056f7:	48                   	dec    eax
c00056f8:	0f ac fe 09          	shrd   esi,edi,0x9
c00056fc:	21 f0                	and    eax,esi
c00056fe:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005702:	0f 84 06 01 00 00    	je     c000580e <f_write+0x19d>
c0005708:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c000570c:	0f 88 6e 01 00 00    	js     c0005880 <f_write+0x20f>
c0005712:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005716:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005719:	89 c8                	mov    eax,ecx
c000571b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000571f:	e8 fa c7 ff ff       	call   c0001f1e <clst2sect>
c0005724:	89 d1                	mov    ecx,edx
c0005726:	09 c1                	or     ecx,eax
c0005728:	0f 84 1c 01 00 00    	je     c000584a <f_write+0x1d9>
c000572e:	31 ff                	xor    edi,edi
c0005730:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005734:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0005738:	01 c6                	add    esi,eax
c000573a:	11 d7                	adc    edi,edx
c000573c:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0005744:	0f 86 63 01 00 00    	jbe    c00058ad <f_write+0x23c>
c000574a:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000574e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005752:	c1 e8 09             	shr    eax,0x9
c0005755:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005759:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c000575d:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c0005761:	39 c2                	cmp    edx,eax
c0005763:	76 08                	jbe    c000576d <f_write+0xfc>
c0005765:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0005769:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000576d:	83 ec 0c             	sub    esp,0xc
c0005770:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005774:	57                   	push   edi
c0005775:	56                   	push   esi
c0005776:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000577a:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000577e:	50                   	push   eax
c000577f:	e8 cc c4 ff ff       	call   c0001c50 <disk_write>
c0005784:	83 c4 20             	add    esp,0x20
c0005787:	85 c0                	test   eax,eax
c0005789:	0f 85 ce 00 00 00    	jne    c000585d <f_write+0x1ec>
c000578f:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005792:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005795:	29 f0                	sub    eax,esi
c0005797:	19 fa                	sbb    edx,edi
c0005799:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c000579d:	89 d7                	mov    edi,edx
c000579f:	ba 00 00 00 00       	mov    edx,0x0
c00057a4:	89 f9                	mov    ecx,edi
c00057a6:	19 d1                	sbb    ecx,edx
c00057a8:	73 1c                	jae    c00057c6 <f_write+0x155>
c00057aa:	89 c7                	mov    edi,eax
c00057ac:	b9 00 02 00 00       	mov    ecx,0x200
c00057b1:	c1 e7 09             	shl    edi,0x9
c00057b4:	8d 43 50             	lea    eax,[ebx+0x50]
c00057b7:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c00057bb:	89 fa                	mov    edx,edi
c00057bd:	e8 42 c5 ff ff       	call   c0001d04 <mem_cpy>
c00057c2:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00057c6:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00057ca:	c1 e6 09             	shl    esi,0x9
c00057cd:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00057d1:	31 ff                	xor    edi,edi
c00057d3:	01 30                	add    DWORD PTR [eax],esi
c00057d5:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00057d9:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00057dd:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00057e0:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c00057e3:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00057e6:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c00057e9:	89 c1                	mov    ecx,eax
c00057eb:	39 f2                	cmp    edx,esi
c00057ed:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00057f0:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c00057f3:	19 f9                	sbb    ecx,edi
c00057f5:	73 04                	jae    c00057fb <f_write+0x18a>
c00057f7:	89 f2                	mov    edx,esi
c00057f9:	89 f8                	mov    eax,edi
c00057fb:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00057fe:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0005801:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0005806:	0f 85 cc fe ff ff    	jne    c00056d8 <f_write+0x67>
c000580c:	eb 2e                	jmp    c000583c <f_write+0x1cb>
c000580e:	89 c8                	mov    eax,ecx
c0005810:	09 d0                	or     eax,edx
c0005812:	75 0b                	jne    c000581f <f_write+0x1ae>
c0005814:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005817:	31 d2                	xor    edx,edx
c0005819:	85 c0                	test   eax,eax
c000581b:	75 28                	jne    c0005845 <f_write+0x1d4>
c000581d:	eb 12                	jmp    c0005831 <f_write+0x1c0>
c000581f:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c0005823:	74 09                	je     c000582e <f_write+0x1bd>
c0005825:	89 d8                	mov    eax,ebx
c0005827:	e8 13 c7 ff ff       	call   c0001f3f <clmt_clust>
c000582c:	eb 0a                	jmp    c0005838 <f_write+0x1c7>
c000582e:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005831:	89 d8                	mov    eax,ebx
c0005833:	e8 a1 da ff ff       	call   c00032d9 <create_chain>
c0005838:	85 c0                	test   eax,eax
c000583a:	75 09                	jne    c0005845 <f_write+0x1d4>
c000583c:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005840:	e9 dc 00 00 00       	jmp    c0005921 <f_write+0x2b0>
c0005845:	83 f8 01             	cmp    eax,0x1
c0005848:	75 0e                	jne    c0005858 <f_write+0x1e7>
c000584a:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c000584e:	bd 02 00 00 00       	mov    ebp,0x2
c0005853:	e9 c9 00 00 00       	jmp    c0005921 <f_write+0x2b0>
c0005858:	83 f8 ff             	cmp    eax,0xffffffff
c000585b:	75 0e                	jne    c000586b <f_write+0x1fa>
c000585d:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005861:	bd 01 00 00 00       	mov    ebp,0x1
c0005866:	e9 b6 00 00 00       	jmp    c0005921 <f_write+0x2b0>
c000586b:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c000586e:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0005872:	0f 85 90 fe ff ff    	jne    c0005708 <f_write+0x97>
c0005878:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000587b:	e9 88 fe ff ff       	jmp    c0005708 <f_write+0x97>
c0005880:	83 ec 0c             	sub    esp,0xc
c0005883:	8d 43 50             	lea    eax,[ebx+0x50]
c0005886:	6a 01                	push   0x1
c0005888:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000588b:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000588e:	50                   	push   eax
c000588f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0005893:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005897:	50                   	push   eax
c0005898:	e8 b3 c3 ff ff       	call   c0001c50 <disk_write>
c000589d:	83 c4 20             	add    esp,0x20
c00058a0:	85 c0                	test   eax,eax
c00058a2:	75 b9                	jne    c000585d <f_write+0x1ec>
c00058a4:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00058a8:	e9 65 fe ff ff       	jmp    c0005712 <f_write+0xa1>
c00058ad:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c00058b0:	75 05                	jne    c00058b7 <f_write+0x246>
c00058b2:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c00058b5:	74 2e                	je     c00058e5 <f_write+0x274>
c00058b7:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c00058ba:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00058bd:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c00058c0:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c00058c3:	73 20                	jae    c00058e5 <f_write+0x274>
c00058c5:	83 ec 0c             	sub    esp,0xc
c00058c8:	8d 43 50             	lea    eax,[ebx+0x50]
c00058cb:	6a 01                	push   0x1
c00058cd:	57                   	push   edi
c00058ce:	56                   	push   esi
c00058cf:	50                   	push   eax
c00058d0:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00058d4:	50                   	push   eax
c00058d5:	e8 60 c3 ff ff       	call   c0001c3a <disk_read>
c00058da:	83 c4 20             	add    esp,0x20
c00058dd:	85 c0                	test   eax,eax
c00058df:	0f 85 78 ff ff ff    	jne    c000585d <f_write+0x1ec>
c00058e5:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00058e8:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00058eb:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00058ee:	ba 00 02 00 00       	mov    edx,0x200
c00058f3:	25 ff 01 00 00       	and    eax,0x1ff
c00058f8:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00058fc:	29 c2                	sub    edx,eax
c00058fe:	39 d6                	cmp    esi,edx
c0005900:	76 02                	jbe    c0005904 <f_write+0x293>
c0005902:	89 d6                	mov    esi,edx
c0005904:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c0005908:	89 f1                	mov    ecx,esi
c000590a:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000590e:	e8 f1 c3 ff ff       	call   c0001d04 <mem_cpy>
c0005913:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c0005917:	e9 b1 fe ff ff       	jmp    c00057cd <f_write+0x15c>
c000591c:	bd 07 00 00 00       	mov    ebp,0x7
c0005921:	83 c4 2c             	add    esp,0x2c
c0005924:	89 e8                	mov    eax,ebp
c0005926:	5b                   	pop    ebx
c0005927:	5e                   	pop    esi
c0005928:	5f                   	pop    edi
c0005929:	5d                   	pop    ebp
c000592a:	c3                   	ret    

c000592b <f_sync>:
c000592b:	56                   	push   esi
c000592c:	53                   	push   ebx
c000592d:	83 ec 64             	sub    esp,0x64
c0005930:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0005934:	8d 54 24 10          	lea    edx,[esp+0x10]
c0005938:	89 d8                	mov    eax,ebx
c000593a:	e8 49 ca ff ff       	call   c0002388 <validate>
c000593f:	85 c0                	test   eax,eax
c0005941:	0f 85 ba 01 00 00    	jne    c0005b01 <f_sync+0x1d6>
c0005947:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c000594a:	f6 c2 40             	test   dl,0x40
c000594d:	0f 84 ae 01 00 00    	je     c0005b01 <f_sync+0x1d6>
c0005953:	84 d2                	test   dl,dl
c0005955:	79 33                	jns    c000598a <f_sync+0x5f>
c0005957:	83 ec 0c             	sub    esp,0xc
c000595a:	8d 43 50             	lea    eax,[ebx+0x50]
c000595d:	6a 01                	push   0x1
c000595f:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005962:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005965:	50                   	push   eax
c0005966:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000596a:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000596e:	50                   	push   eax
c000596f:	e8 dc c2 ff ff       	call   c0001c50 <disk_write>
c0005974:	83 c4 20             	add    esp,0x20
c0005977:	89 c2                	mov    edx,eax
c0005979:	b8 01 00 00 00       	mov    eax,0x1
c000597e:	85 d2                	test   edx,edx
c0005980:	0f 85 7b 01 00 00    	jne    c0005b01 <f_sync+0x1d6>
c0005986:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000598a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000598e:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005991:	0f 85 11 01 00 00    	jne    c0005aa8 <f_sync+0x17d>
c0005997:	89 d8                	mov    eax,ebx
c0005999:	e8 13 d6 ff ff       	call   c0002fb1 <fill_first_frag>
c000599e:	85 c0                	test   eax,eax
c00059a0:	0f 85 5b 01 00 00    	jne    c0005b01 <f_sync+0x1d6>
c00059a6:	83 c9 ff             	or     ecx,0xffffffff
c00059a9:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00059ac:	89 d8                	mov    eax,ebx
c00059ae:	e8 c9 d5 ff ff       	call   c0002f7c <fill_last_frag>
c00059b3:	85 c0                	test   eax,eax
c00059b5:	0f 85 46 01 00 00    	jne    c0005b01 <f_sync+0x1d6>
c00059bb:	83 ec 0c             	sub    esp,0xc
c00059be:	68 60 04 00 00       	push   0x460
c00059c3:	e8 f0 2a 00 00       	call   c00084b8 <ff_memalloc>
c00059c8:	83 c4 10             	add    esp,0x10
c00059cb:	89 c6                	mov    esi,eax
c00059cd:	b8 11 00 00 00       	mov    eax,0x11
c00059d2:	85 f6                	test   esi,esi
c00059d4:	0f 84 27 01 00 00    	je     c0005b01 <f_sync+0x1d6>
c00059da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059de:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00059e4:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00059e7:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00059ea:	89 da                	mov    edx,ebx
c00059ec:	8d 44 24 14          	lea    eax,[esp+0x14]
c00059f0:	e8 af df ff ff       	call   c00039a4 <load_obj_xdir>
c00059f5:	85 c0                	test   eax,eax
c00059f7:	0f 85 95 00 00 00    	jne    c0005a92 <f_sync+0x167>
c00059fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a01:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005a04:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c0005a08:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c0005a0b:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c0005a0e:	83 ca 01             	or     edx,0x1
c0005a11:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c0005a14:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0005a17:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a1a:	83 c0 34             	add    eax,0x34
c0005a1d:	e8 d9 c2 ff ff       	call   c0001cfb <st_dword>
c0005a22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a26:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a29:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a2c:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005a2f:	83 c0 38             	add    eax,0x38
c0005a32:	e8 c7 c2 ff ff       	call   c0001cfe <st_qword>
c0005a37:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005a3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a3e:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a41:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a44:	83 c0 28             	add    eax,0x28
c0005a47:	e8 b2 c2 ff ff       	call   c0001cfe <st_qword>
c0005a4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a50:	ba 00 00 21 50       	mov    edx,0x50210000
c0005a55:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a58:	83 c0 0c             	add    eax,0xc
c0005a5b:	e8 9b c2 ff ff       	call   c0001cfb <st_dword>
c0005a60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a64:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005a67:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005a6b:	31 d2                	xor    edx,edx
c0005a6d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a70:	83 c0 10             	add    eax,0x10
c0005a73:	e8 83 c2 ff ff       	call   c0001cfb <st_dword>
c0005a78:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005a7c:	e8 62 e1 ff ff       	call   c0003be3 <store_xdir>
c0005a81:	85 c0                	test   eax,eax
c0005a83:	75 0d                	jne    c0005a92 <f_sync+0x167>
c0005a85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a89:	e8 00 eb ff ff       	call   c000458e <sync_fs>
c0005a8e:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005a92:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005a96:	83 ec 0c             	sub    esp,0xc
c0005a99:	56                   	push   esi
c0005a9a:	e8 2f 2a 00 00       	call   c00084ce <ff_memfree>
c0005a9f:	83 c4 10             	add    esp,0x10
c0005aa2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005aa6:	eb 59                	jmp    c0005b01 <f_sync+0x1d6>
c0005aa8:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005aab:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0005aae:	e8 b0 c9 ff ff       	call   c0002463 <move_window>
c0005ab3:	85 c0                	test   eax,eax
c0005ab5:	75 4a                	jne    c0005b01 <f_sync+0x1d6>
c0005ab7:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005aba:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0005abe:	89 f2                	mov    edx,esi
c0005ac0:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0005ac3:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005ac5:	e8 5f f3 ff ff       	call   c0004e29 <st_clust.isra.1>
c0005aca:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005acd:	8d 46 1c             	lea    eax,[esi+0x1c]
c0005ad0:	e8 26 c2 ff ff       	call   c0001cfb <st_dword>
c0005ad5:	8d 46 16             	lea    eax,[esi+0x16]
c0005ad8:	ba 00 00 21 50       	mov    edx,0x50210000
c0005add:	e8 19 c2 ff ff       	call   c0001cfb <st_dword>
c0005ae2:	8d 46 12             	lea    eax,[esi+0x12]
c0005ae5:	31 d2                	xor    edx,edx
c0005ae7:	e8 0b c2 ff ff       	call   c0001cf7 <st_word>
c0005aec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005af0:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005af4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005af8:	e8 91 ea ff ff       	call   c000458e <sync_fs>
c0005afd:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005b01:	83 c4 64             	add    esp,0x64
c0005b04:	5b                   	pop    ebx
c0005b05:	5e                   	pop    esi
c0005b06:	c3                   	ret    

c0005b07 <f_close>:
c0005b07:	53                   	push   ebx
c0005b08:	83 ec 24             	sub    esp,0x24
c0005b0b:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0005b0f:	53                   	push   ebx
c0005b10:	e8 16 fe ff ff       	call   c000592b <f_sync>
c0005b15:	83 c4 10             	add    esp,0x10
c0005b18:	85 c0                	test   eax,eax
c0005b1a:	75 15                	jne    c0005b31 <f_close+0x2a>
c0005b1c:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005b20:	89 d8                	mov    eax,ebx
c0005b22:	e8 61 c8 ff ff       	call   c0002388 <validate>
c0005b27:	85 c0                	test   eax,eax
c0005b29:	75 06                	jne    c0005b31 <f_close+0x2a>
c0005b2b:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005b31:	83 c4 18             	add    esp,0x18
c0005b34:	5b                   	pop    ebx
c0005b35:	c3                   	ret    

c0005b36 <f_lseek>:
c0005b36:	55                   	push   ebp
c0005b37:	57                   	push   edi
c0005b38:	56                   	push   esi
c0005b39:	53                   	push   ebx
c0005b3a:	83 ec 3c             	sub    esp,0x3c
c0005b3d:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0005b41:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0005b45:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005b49:	89 04 24             	mov    DWORD PTR [esp],eax
c0005b4c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005b50:	89 d8                	mov    eax,ebx
c0005b52:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0005b56:	e8 2d c8 ff ff       	call   c0002388 <validate>
c0005b5b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b5f:	85 c0                	test   eax,eax
c0005b61:	0f 85 7a 04 00 00    	jne    c0005fe1 <f_lseek+0x4ab>
c0005b67:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005b6b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b6f:	85 c0                	test   eax,eax
c0005b71:	0f 85 6a 04 00 00    	jne    c0005fe1 <f_lseek+0x4ab>
c0005b77:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005b7b:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005b7e:	74 0c                	je     c0005b8c <f_lseek+0x56>
c0005b80:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005b83:	85 c0                	test   eax,eax
c0005b85:	75 1f                	jne    c0005ba6 <f_lseek+0x70>
c0005b87:	e9 b5 01 00 00       	jmp    c0005d41 <f_lseek+0x20b>
c0005b8c:	83 c9 ff             	or     ecx,0xffffffff
c0005b8f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005b92:	89 d8                	mov    eax,ebx
c0005b94:	e8 e3 d3 ff ff       	call   c0002f7c <fill_last_frag>
c0005b99:	85 c0                	test   eax,eax
c0005b9b:	74 e3                	je     c0005b80 <f_lseek+0x4a>
c0005b9d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005ba1:	e9 3b 04 00 00       	jmp    c0005fe1 <f_lseek+0x4ab>
c0005ba6:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005bab:	0f 85 ac 00 00 00    	jne    c0005c5d <f_lseek+0x127>
c0005bb1:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005bb5:	0f 85 a2 00 00 00    	jne    c0005c5d <f_lseek+0x127>
c0005bbb:	8d 78 04             	lea    edi,[eax+0x4]
c0005bbe:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c0005bc1:	8b 00                	mov    eax,DWORD PTR [eax]
c0005bc3:	be 02 00 00 00       	mov    esi,0x2
c0005bc8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005bcc:	85 ed                	test   ebp,ebp
c0005bce:	74 73                	je     c0005c43 <f_lseek+0x10d>
c0005bd0:	89 e9                	mov    ecx,ebp
c0005bd2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005bd9:	ff 04 24             	inc    DWORD PTR [esp]
c0005bdc:	89 ca                	mov    edx,ecx
c0005bde:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005be2:	89 d8                	mov    eax,ebx
c0005be4:	e8 02 d4 ff ff       	call   c0002feb <get_fat>
c0005be9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005bed:	83 f8 01             	cmp    eax,0x1
c0005bf0:	77 11                	ja     c0005c03 <f_lseek+0xcd>
c0005bf2:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005bf6:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c0005bfe:	e9 de 03 00 00       	jmp    c0005fe1 <f_lseek+0x4ab>
c0005c03:	83 f8 ff             	cmp    eax,0xffffffff
c0005c06:	75 11                	jne    c0005c19 <f_lseek+0xe3>
c0005c08:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005c0c:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c0005c14:	e9 c8 03 00 00       	jmp    c0005fe1 <f_lseek+0x4ab>
c0005c19:	8d 51 01             	lea    edx,[ecx+0x1]
c0005c1c:	89 c1                	mov    ecx,eax
c0005c1e:	39 c2                	cmp    edx,eax
c0005c20:	74 b7                	je     c0005bd9 <f_lseek+0xa3>
c0005c22:	83 c6 02             	add    esi,0x2
c0005c25:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0005c29:	72 0b                	jb     c0005c36 <f_lseek+0x100>
c0005c2b:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005c2e:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c0005c31:	89 0f                	mov    DWORD PTR [edi],ecx
c0005c33:	83 c7 08             	add    edi,0x8
c0005c36:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005c3a:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005c3d:	76 04                	jbe    c0005c43 <f_lseek+0x10d>
c0005c3f:	89 c5                	mov    ebp,eax
c0005c41:	eb 8d                	jmp    c0005bd0 <f_lseek+0x9a>
c0005c43:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005c46:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005c4a:	89 30                	mov    DWORD PTR [eax],esi
c0005c4c:	0f 87 87 03 00 00    	ja     c0005fd9 <f_lseek+0x4a3>
c0005c52:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005c58:	e9 84 03 00 00       	jmp    c0005fe1 <f_lseek+0x4ab>
c0005c5d:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005c60:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005c63:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c67:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c6b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c6f:	39 04 24             	cmp    DWORD PTR [esp],eax
c0005c72:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005c76:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005c7a:	73 0f                	jae    c0005c8b <f_lseek+0x155>
c0005c7c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005c7f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005c83:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c87:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c8b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c8f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005c93:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005c96:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005c99:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c9d:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005ca1:	0f 84 3a 03 00 00    	je     c0005fe1 <f_lseek+0x4ab>
c0005ca7:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005cab:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005caf:	83 c6 ff             	add    esi,0xffffffff
c0005cb2:	89 d8                	mov    eax,ebx
c0005cb4:	83 d7 ff             	adc    edi,0xffffffff
c0005cb7:	89 f2                	mov    edx,esi
c0005cb9:	89 f9                	mov    ecx,edi
c0005cbb:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005cbf:	89 34 24             	mov    DWORD PTR [esp],esi
c0005cc2:	e8 78 c2 ff ff       	call   c0001f3f <clmt_clust>
c0005cc7:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005ccb:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005cce:	89 c2                	mov    edx,eax
c0005cd0:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005cd4:	89 c8                	mov    eax,ecx
c0005cd6:	e8 43 c2 ff ff       	call   c0001f1e <clst2sect>
c0005cdb:	89 d7                	mov    edi,edx
c0005cdd:	09 c7                	or     edi,eax
c0005cdf:	0f 84 0d ff ff ff    	je     c0005bf2 <f_lseek+0xbc>
c0005ce5:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005ce9:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005cef:	0f 84 ec 02 00 00    	je     c0005fe1 <f_lseek+0x4ab>
c0005cf5:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005cf9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005cfd:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005d00:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005d04:	0f ac fe 09          	shrd   esi,edi,0x9
c0005d08:	4d                   	dec    ebp
c0005d09:	31 ff                	xor    edi,edi
c0005d0b:	21 ee                	and    esi,ebp
c0005d0d:	01 c6                	add    esi,eax
c0005d0f:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005d12:	11 d7                	adc    edi,edx
c0005d14:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005d17:	39 fa                	cmp    edx,edi
c0005d19:	75 08                	jne    c0005d23 <f_lseek+0x1ed>
c0005d1b:	39 f0                	cmp    eax,esi
c0005d1d:	0f 84 be 02 00 00    	je     c0005fe1 <f_lseek+0x4ab>
c0005d23:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005d26:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005d2a:	0f 89 80 02 00 00    	jns    c0005fb0 <f_lseek+0x47a>
c0005d30:	83 ec 0c             	sub    esp,0xc
c0005d33:	6a 01                	push   0x1
c0005d35:	52                   	push   edx
c0005d36:	50                   	push   eax
c0005d37:	55                   	push   ebp
c0005d38:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005d3c:	e9 5a 02 00 00       	jmp    c0005f9b <f_lseek+0x465>
c0005d41:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005d45:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005d48:	74 16                	je     c0005d60 <f_lseek+0x22a>
c0005d4a:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005d4f:	76 0f                	jbe    c0005d60 <f_lseek+0x22a>
c0005d51:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005d58:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005d60:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005d63:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005d66:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005d69:	89 c7                	mov    edi,eax
c0005d6b:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005d6f:	73 0d                	jae    c0005d7e <f_lseek+0x248>
c0005d71:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005d75:	75 07                	jne    c0005d7e <f_lseek+0x248>
c0005d77:	89 14 24             	mov    DWORD PTR [esp],edx
c0005d7a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005d7e:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005d81:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005d84:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005d88:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005d8f:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005d96:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005d99:	75 09                	jne    c0005da4 <f_lseek+0x26e>
c0005d9b:	31 f6                	xor    esi,esi
c0005d9d:	31 ff                	xor    edi,edi
c0005d9f:	e9 af 01 00 00       	jmp    c0005f53 <f_lseek+0x41d>
c0005da4:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005da8:	89 d7                	mov    edi,edx
c0005daa:	c1 e1 09             	shl    ecx,0x9
c0005dad:	09 c7                	or     edi,eax
c0005daf:	89 cd                	mov    ebp,ecx
c0005db1:	74 6d                	je     c0005e20 <f_lseek+0x2ea>
c0005db3:	83 c0 ff             	add    eax,0xffffffff
c0005db6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005dba:	83 d2 ff             	adc    edx,0xffffffff
c0005dbd:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005dc0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005dc4:	83 c0 ff             	add    eax,0xffffffff
c0005dc7:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005dcb:	83 d2 ff             	adc    edx,0xffffffff
c0005dce:	31 ff                	xor    edi,edi
c0005dd0:	57                   	push   edi
c0005dd1:	51                   	push   ecx
c0005dd2:	52                   	push   edx
c0005dd3:	50                   	push   eax
c0005dd4:	e8 fb 13 02 00       	call   c00271d4 <__udivdi3>
c0005dd9:	83 c4 10             	add    esp,0x10
c0005ddc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005de0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005de4:	57                   	push   edi
c0005de5:	55                   	push   ebp
c0005de6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005dea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005dee:	e8 e1 13 02 00       	call   c00271d4 <__udivdi3>
c0005df3:	83 c4 10             	add    esp,0x10
c0005df6:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005dfa:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005dfe:	19 d1                	sbb    ecx,edx
c0005e00:	72 1e                	jb     c0005e20 <f_lseek+0x2ea>
c0005e02:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005e06:	89 e9                	mov    ecx,ebp
c0005e08:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005e0b:	f7 d9                	neg    ecx
c0005e0d:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005e10:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005e14:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005e17:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005e1a:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005e1e:	eb 28                	jmp    c0005e48 <f_lseek+0x312>
c0005e20:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005e23:	85 c0                	test   eax,eax
c0005e25:	75 1e                	jne    c0005e45 <f_lseek+0x30f>
c0005e27:	31 d2                	xor    edx,edx
c0005e29:	89 d8                	mov    eax,ebx
c0005e2b:	e8 a9 d4 ff ff       	call   c00032d9 <create_chain>
c0005e30:	83 f8 01             	cmp    eax,0x1
c0005e33:	0f 84 b9 fd ff ff    	je     c0005bf2 <f_lseek+0xbc>
c0005e39:	83 f8 ff             	cmp    eax,0xffffffff
c0005e3c:	0f 84 c6 fd ff ff    	je     c0005c08 <f_lseek+0xd2>
c0005e42:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005e45:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005e48:	85 c0                	test   eax,eax
c0005e4a:	0f 84 4b ff ff ff    	je     c0005d9b <f_lseek+0x265>
c0005e50:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005e54:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005e5c:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005e5f:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e63:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005e66:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005e69:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005e6d:	0f 83 9d 00 00 00    	jae    c0005f10 <f_lseek+0x3da>
c0005e73:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005e77:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e7b:	29 34 24             	sub    DWORD PTR [esp],esi
c0005e7e:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005e82:	01 f2                	add    edx,esi
c0005e84:	11 f9                	adc    ecx,edi
c0005e86:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005e8a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005e8e:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005e91:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005e94:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005e97:	f6 c1 02             	test   cl,0x2
c0005e9a:	74 35                	je     c0005ed1 <f_lseek+0x39b>
c0005e9c:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005ea0:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005ea3:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005ea6:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005eaa:	73 16                	jae    c0005ec2 <f_lseek+0x38c>
c0005eac:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005eb0:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005eb4:	88 ca                	mov    dl,cl
c0005eb6:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005eb9:	83 ca 40             	or     edx,0x40
c0005ebc:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005ebf:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005ec2:	89 c2                	mov    edx,eax
c0005ec4:	89 d8                	mov    eax,ebx
c0005ec6:	e8 0e d4 ff ff       	call   c00032d9 <create_chain>
c0005ecb:	85 c0                	test   eax,eax
c0005ecd:	75 0b                	jne    c0005eda <f_lseek+0x3a4>
c0005ecf:	eb 30                	jmp    c0005f01 <f_lseek+0x3cb>
c0005ed1:	89 c2                	mov    edx,eax
c0005ed3:	89 d8                	mov    eax,ebx
c0005ed5:	e8 11 d1 ff ff       	call   c0002feb <get_fat>
c0005eda:	83 f8 ff             	cmp    eax,0xffffffff
c0005edd:	0f 84 25 fd ff ff    	je     c0005c08 <f_lseek+0xd2>
c0005ee3:	83 f8 01             	cmp    eax,0x1
c0005ee6:	0f 86 06 fd ff ff    	jbe    c0005bf2 <f_lseek+0xbc>
c0005eec:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005ef0:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005ef3:	0f 86 f9 fc ff ff    	jbe    c0005bf2 <f_lseek+0xbc>
c0005ef9:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005efc:	e9 5b ff ff ff       	jmp    c0005e5c <f_lseek+0x326>
c0005f01:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005f08:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005f10:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005f13:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005f17:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005f1a:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005f1d:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005f20:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005f26:	0f 84 6f fe ff ff    	je     c0005d9b <f_lseek+0x265>
c0005f2c:	89 c2                	mov    edx,eax
c0005f2e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005f32:	e8 e7 bf ff ff       	call   c0001f1e <clst2sect>
c0005f37:	89 d7                	mov    edi,edx
c0005f39:	09 c7                	or     edi,eax
c0005f3b:	0f 84 b1 fc ff ff    	je     c0005bf2 <f_lseek+0xbc>
c0005f41:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005f45:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005f48:	0f ac fe 09          	shrd   esi,edi,0x9
c0005f4c:	c1 ef 09             	shr    edi,0x9
c0005f4f:	01 c6                	add    esi,eax
c0005f51:	11 d7                	adc    edi,edx
c0005f53:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005f56:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005f59:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005f5c:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005f5f:	19 d1                	sbb    ecx,edx
c0005f61:	73 0a                	jae    c0005f6d <f_lseek+0x437>
c0005f63:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005f66:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005f69:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005f6d:	a9 ff 01 00 00       	test   eax,0x1ff
c0005f72:	74 6d                	je     c0005fe1 <f_lseek+0x4ab>
c0005f74:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005f77:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005f7a:	39 fa                	cmp    edx,edi
c0005f7c:	75 04                	jne    c0005f82 <f_lseek+0x44c>
c0005f7e:	39 f0                	cmp    eax,esi
c0005f80:	74 5f                	je     c0005fe1 <f_lseek+0x4ab>
c0005f82:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005f85:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005f89:	79 25                	jns    c0005fb0 <f_lseek+0x47a>
c0005f8b:	83 ec 0c             	sub    esp,0xc
c0005f8e:	6a 01                	push   0x1
c0005f90:	52                   	push   edx
c0005f91:	50                   	push   eax
c0005f92:	55                   	push   ebp
c0005f93:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f97:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f9b:	50                   	push   eax
c0005f9c:	e8 af bc ff ff       	call   c0001c50 <disk_write>
c0005fa1:	83 c4 20             	add    esp,0x20
c0005fa4:	85 c0                	test   eax,eax
c0005fa6:	0f 85 5c fc ff ff    	jne    c0005c08 <f_lseek+0xd2>
c0005fac:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005fb0:	83 ec 0c             	sub    esp,0xc
c0005fb3:	6a 01                	push   0x1
c0005fb5:	57                   	push   edi
c0005fb6:	56                   	push   esi
c0005fb7:	55                   	push   ebp
c0005fb8:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005fbc:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005fc0:	50                   	push   eax
c0005fc1:	e8 74 bc ff ff       	call   c0001c3a <disk_read>
c0005fc6:	83 c4 20             	add    esp,0x20
c0005fc9:	85 c0                	test   eax,eax
c0005fcb:	0f 85 37 fc ff ff    	jne    c0005c08 <f_lseek+0xd2>
c0005fd1:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005fd4:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005fd7:	eb 08                	jmp    c0005fe1 <f_lseek+0x4ab>
c0005fd9:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005fe1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005fe5:	83 c4 3c             	add    esp,0x3c
c0005fe8:	5b                   	pop    ebx
c0005fe9:	5e                   	pop    esi
c0005fea:	5f                   	pop    edi
c0005feb:	5d                   	pop    ebp
c0005fec:	c3                   	ret    

c0005fed <f_opendir>:
c0005fed:	56                   	push   esi
c0005fee:	b8 09 00 00 00       	mov    eax,0x9
c0005ff3:	53                   	push   ebx
c0005ff4:	83 ec 24             	sub    esp,0x24
c0005ff7:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005ffb:	85 db                	test   ebx,ebx
c0005ffd:	0f 84 e6 00 00 00    	je     c00060e9 <f_opendir+0xfc>
c0006003:	31 c9                	xor    ecx,ecx
c0006005:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0006009:	8d 44 24 34          	lea    eax,[esp+0x34]
c000600d:	e8 03 c7 ff ff       	call   c0002715 <mount_volume>
c0006012:	85 c0                	test   eax,eax
c0006014:	0f 85 c9 00 00 00    	jne    c00060e3 <f_opendir+0xf6>
c000601a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000601e:	83 ec 0c             	sub    esp,0xc
c0006021:	89 03                	mov    DWORD PTR [ebx],eax
c0006023:	68 60 04 00 00       	push   0x460
c0006028:	e8 8b 24 00 00       	call   c00084b8 <ff_memalloc>
c000602d:	83 c4 10             	add    esp,0x10
c0006030:	89 c6                	mov    esi,eax
c0006032:	b8 11 00 00 00       	mov    eax,0x11
c0006037:	85 f6                	test   esi,esi
c0006039:	0f 84 aa 00 00 00    	je     c00060e9 <f_opendir+0xfc>
c000603f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006043:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006049:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000604c:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000604f:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0006053:	89 d8                	mov    eax,ebx
c0006055:	e8 31 ee ff ff       	call   c0004e8b <follow_path>
c000605a:	85 c0                	test   eax,eax
c000605c:	75 61                	jne    c00060bf <f_opendir+0xd2>
c000605e:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0006062:	78 46                	js     c00060aa <f_opendir+0xbd>
c0006064:	b8 05 00 00 00       	mov    eax,0x5
c0006069:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c000606d:	74 50                	je     c00060bf <f_opendir+0xd2>
c000606f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006073:	8a 01                	mov    al,BYTE PTR [ecx]
c0006075:	3c 04                	cmp    al,0x4
c0006077:	75 26                	jne    c000609f <f_opendir+0xb2>
c0006079:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000607c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000607f:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0006082:	30 d2                	xor    dl,dl
c0006084:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c0006088:	09 c2                	or     edx,eax
c000608a:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c000608d:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0006090:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0006093:	89 da                	mov    edx,ebx
c0006095:	8d 41 10             	lea    eax,[ecx+0x10]
c0006098:	e8 b4 ed ff ff       	call   c0004e51 <init_alloc_info.isra.2>
c000609d:	eb 0b                	jmp    c00060aa <f_opendir+0xbd>
c000609f:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00060a2:	e8 59 ed ff ff       	call   c0004e00 <ld_clust.isra.0>
c00060a7:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00060aa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00060ae:	31 d2                	xor    edx,edx
c00060b0:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c00060b4:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00060b8:	89 d8                	mov    eax,ebx
c00060ba:	e8 22 d1 ff ff       	call   c00031e1 <dir_sdi>
c00060bf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00060c3:	83 ec 0c             	sub    esp,0xc
c00060c6:	56                   	push   esi
c00060c7:	e8 02 24 00 00       	call   c00084ce <ff_memfree>
c00060cc:	83 c4 10             	add    esp,0x10
c00060cf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00060d3:	83 f8 04             	cmp    eax,0x4
c00060d6:	74 06                	je     c00060de <f_opendir+0xf1>
c00060d8:	85 c0                	test   eax,eax
c00060da:	74 0d                	je     c00060e9 <f_opendir+0xfc>
c00060dc:	eb 05                	jmp    c00060e3 <f_opendir+0xf6>
c00060de:	b8 05 00 00 00       	mov    eax,0x5
c00060e3:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00060e9:	83 c4 24             	add    esp,0x24
c00060ec:	5b                   	pop    ebx
c00060ed:	5e                   	pop    esi
c00060ee:	c3                   	ret    

c00060ef <f_closedir>:
c00060ef:	53                   	push   ebx
c00060f0:	83 ec 18             	sub    esp,0x18
c00060f3:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00060f7:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00060fb:	89 d8                	mov    eax,ebx
c00060fd:	e8 86 c2 ff ff       	call   c0002388 <validate>
c0006102:	85 c0                	test   eax,eax
c0006104:	75 06                	jne    c000610c <f_closedir+0x1d>
c0006106:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000610c:	83 c4 18             	add    esp,0x18
c000610f:	5b                   	pop    ebx
c0006110:	c3                   	ret    

c0006111 <f_readdir>:
c0006111:	57                   	push   edi
c0006112:	56                   	push   esi
c0006113:	53                   	push   ebx
c0006114:	83 ec 20             	sub    esp,0x20
c0006117:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000611b:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000611f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0006123:	89 d8                	mov    eax,ebx
c0006125:	e8 5e c2 ff ff       	call   c0002388 <validate>
c000612a:	85 c0                	test   eax,eax
c000612c:	75 77                	jne    c00061a5 <f_readdir+0x94>
c000612e:	85 ff                	test   edi,edi
c0006130:	75 0b                	jne    c000613d <f_readdir+0x2c>
c0006132:	31 d2                	xor    edx,edx
c0006134:	89 d8                	mov    eax,ebx
c0006136:	e8 a6 d0 ff ff       	call   c00031e1 <dir_sdi>
c000613b:	eb 68                	jmp    c00061a5 <f_readdir+0x94>
c000613d:	83 ec 0c             	sub    esp,0xc
c0006140:	68 60 04 00 00       	push   0x460
c0006145:	e8 6e 23 00 00       	call   c00084b8 <ff_memalloc>
c000614a:	83 c4 10             	add    esp,0x10
c000614d:	89 c6                	mov    esi,eax
c000614f:	b8 11 00 00 00       	mov    eax,0x11
c0006154:	85 f6                	test   esi,esi
c0006156:	74 4d                	je     c00061a5 <f_readdir+0x94>
c0006158:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000615c:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006162:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006165:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006168:	31 d2                	xor    edx,edx
c000616a:	89 d8                	mov    eax,ebx
c000616c:	e8 80 d8 ff ff       	call   c00039f1 <dir_read>
c0006171:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0006176:	75 19                	jne    c0006191 <f_readdir+0x80>
c0006178:	89 fa                	mov    edx,edi
c000617a:	89 d8                	mov    eax,ebx
c000617c:	e8 7e ea ff ff       	call   c0004bff <get_fileinfo>
c0006181:	31 d2                	xor    edx,edx
c0006183:	89 d8                	mov    eax,ebx
c0006185:	e8 af d5 ff ff       	call   c0003739 <dir_next>
c000618a:	83 f8 04             	cmp    eax,0x4
c000618d:	75 02                	jne    c0006191 <f_readdir+0x80>
c000618f:	31 c0                	xor    eax,eax
c0006191:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006195:	83 ec 0c             	sub    esp,0xc
c0006198:	56                   	push   esi
c0006199:	e8 30 23 00 00       	call   c00084ce <ff_memfree>
c000619e:	83 c4 10             	add    esp,0x10
c00061a1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00061a5:	83 c4 20             	add    esp,0x20
c00061a8:	5b                   	pop    ebx
c00061a9:	5e                   	pop    esi
c00061aa:	5f                   	pop    edi
c00061ab:	c3                   	ret    

c00061ac <f_stat>:
c00061ac:	57                   	push   edi
c00061ad:	31 c9                	xor    ecx,ecx
c00061af:	56                   	push   esi
c00061b0:	53                   	push   ebx
c00061b1:	83 ec 50             	sub    esp,0x50
c00061b4:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c00061b8:	8d 54 24 04          	lea    edx,[esp+0x4]
c00061bc:	8d 44 24 60          	lea    eax,[esp+0x60]
c00061c0:	e8 50 c5 ff ff       	call   c0002715 <mount_volume>
c00061c5:	89 c3                	mov    ebx,eax
c00061c7:	85 c0                	test   eax,eax
c00061c9:	75 67                	jne    c0006232 <f_stat+0x86>
c00061cb:	83 ec 0c             	sub    esp,0xc
c00061ce:	bb 11 00 00 00       	mov    ebx,0x11
c00061d3:	68 60 04 00 00       	push   0x460
c00061d8:	e8 db 22 00 00       	call   c00084b8 <ff_memalloc>
c00061dd:	83 c4 10             	add    esp,0x10
c00061e0:	89 c6                	mov    esi,eax
c00061e2:	85 c0                	test   eax,eax
c00061e4:	74 4c                	je     c0006232 <f_stat+0x86>
c00061e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00061ea:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00061f0:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00061f3:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00061f6:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00061fa:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061fe:	e8 88 ec ff ff       	call   c0004e8b <follow_path>
c0006203:	89 c3                	mov    ebx,eax
c0006205:	85 c0                	test   eax,eax
c0006207:	75 1d                	jne    c0006226 <f_stat+0x7a>
c0006209:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c000620e:	78 11                	js     c0006221 <f_stat+0x75>
c0006210:	85 ff                	test   edi,edi
c0006212:	74 12                	je     c0006226 <f_stat+0x7a>
c0006214:	89 fa                	mov    edx,edi
c0006216:	8d 44 24 04          	lea    eax,[esp+0x4]
c000621a:	e8 e0 e9 ff ff       	call   c0004bff <get_fileinfo>
c000621f:	eb 05                	jmp    c0006226 <f_stat+0x7a>
c0006221:	bb 06 00 00 00       	mov    ebx,0x6
c0006226:	83 ec 0c             	sub    esp,0xc
c0006229:	56                   	push   esi
c000622a:	e8 9f 22 00 00       	call   c00084ce <ff_memfree>
c000622f:	83 c4 10             	add    esp,0x10
c0006232:	83 c4 50             	add    esp,0x50
c0006235:	89 d8                	mov    eax,ebx
c0006237:	5b                   	pop    ebx
c0006238:	5e                   	pop    esi
c0006239:	5f                   	pop    edi
c000623a:	c3                   	ret    

c000623b <f_getfree>:
c000623b:	55                   	push   ebp
c000623c:	31 c9                	xor    ecx,ecx
c000623e:	57                   	push   edi
c000623f:	56                   	push   esi
c0006240:	53                   	push   ebx
c0006241:	83 ec 5c             	sub    esp,0x5c
c0006244:	8d 54 24 24          	lea    edx,[esp+0x24]
c0006248:	8d 44 24 70          	lea    eax,[esp+0x70]
c000624c:	e8 c4 c4 ff ff       	call   c0002715 <mount_volume>
c0006251:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006255:	85 c0                	test   eax,eax
c0006257:	0f 85 9d 01 00 00    	jne    c00063fa <f_getfree+0x1bf>
c000625d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006261:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0006265:	89 02                	mov    DWORD PTR [edx],eax
c0006267:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c000626a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000626d:	8d 71 fe             	lea    esi,[ecx-0x2]
c0006270:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0006274:	39 f2                	cmp    edx,esi
c0006276:	77 0b                	ja     c0006283 <f_getfree+0x48>
c0006278:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c000627c:	89 10                	mov    DWORD PTR [eax],edx
c000627e:	e9 77 01 00 00       	jmp    c00063fa <f_getfree+0x1bf>
c0006283:	8a 10                	mov    dl,BYTE PTR [eax]
c0006285:	80 fa 01             	cmp    dl,0x1
c0006288:	75 3a                	jne    c00062c4 <f_getfree+0x89>
c000628a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000628e:	be 02 00 00 00       	mov    esi,0x2
c0006293:	31 db                	xor    ebx,ebx
c0006295:	89 f2                	mov    edx,esi
c0006297:	8d 44 24 28          	lea    eax,[esp+0x28]
c000629b:	e8 4b cd ff ff       	call   c0002feb <get_fat>
c00062a0:	83 f8 ff             	cmp    eax,0xffffffff
c00062a3:	0f 84 28 01 00 00    	je     c00063d1 <f_getfree+0x196>
c00062a9:	83 f8 01             	cmp    eax,0x1
c00062ac:	0f 84 29 01 00 00    	je     c00063db <f_getfree+0x1a0>
c00062b2:	83 d3 00             	adc    ebx,0x0
c00062b5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062b9:	46                   	inc    esi
c00062ba:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c00062bd:	77 d6                	ja     c0006295 <f_getfree+0x5a>
c00062bf:	e9 25 01 00 00       	jmp    c00063e9 <f_getfree+0x1ae>
c00062c4:	80 fa 04             	cmp    dl,0x4
c00062c7:	0f 85 88 00 00 00    	jne    c0006355 <f_getfree+0x11a>
c00062cd:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c00062d0:	31 ed                	xor    ebp,ebp
c00062d2:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00062d5:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00062d9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062dd:	31 db                	xor    ebx,ebx
c00062df:	85 ed                	test   ebp,ebp
c00062e1:	75 3f                	jne    c0006322 <f_getfree+0xe7>
c00062e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00062e7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00062eb:	83 c0 01             	add    eax,0x1
c00062ee:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00062f2:	83 d2 00             	adc    edx,0x0
c00062f5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00062f9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00062fd:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006301:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006305:	e8 59 c1 ff ff       	call   c0002463 <move_window>
c000630a:	85 c0                	test   eax,eax
c000630c:	0f 85 d3 00 00 00    	jne    c00063e5 <f_getfree+0x1aa>
c0006312:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0006316:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000631a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000631e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0006322:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006326:	8d 4e f8             	lea    ecx,[esi-0x8]
c0006329:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c000632d:	89 cf                	mov    edi,ecx
c000632f:	85 f6                	test   esi,esi
c0006331:	74 12                	je     c0006345 <f_getfree+0x10a>
c0006333:	88 c1                	mov    cl,al
c0006335:	83 e1 01             	and    ecx,0x1
c0006338:	80 f9 01             	cmp    cl,0x1
c000633b:	83 d3 00             	adc    ebx,0x0
c000633e:	d0 e8                	shr    al,1
c0006340:	4e                   	dec    esi
c0006341:	39 fe                	cmp    esi,edi
c0006343:	75 ea                	jne    c000632f <f_getfree+0xf4>
c0006345:	45                   	inc    ebp
c0006346:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c000634c:	85 f6                	test   esi,esi
c000634e:	75 8f                	jne    c00062df <f_getfree+0xa4>
c0006350:	e9 94 00 00 00       	jmp    c00063e9 <f_getfree+0x1ae>
c0006355:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0006358:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c000635b:	31 f6                	xor    esi,esi
c000635d:	31 db                	xor    ebx,ebx
c000635f:	85 f6                	test   esi,esi
c0006361:	75 1b                	jne    c000637e <f_getfree+0x143>
c0006363:	89 d7                	mov    edi,edx
c0006365:	89 cd                	mov    ebp,ecx
c0006367:	83 c7 01             	add    edi,0x1
c000636a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000636e:	83 d5 00             	adc    ebp,0x0
c0006371:	e8 ed c0 ff ff       	call   c0002463 <move_window>
c0006376:	85 c0                	test   eax,eax
c0006378:	75 6b                	jne    c00063e5 <f_getfree+0x1aa>
c000637a:	89 fa                	mov    edx,edi
c000637c:	89 e9                	mov    ecx,ebp
c000637e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006382:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0006386:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c000638a:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c000638d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0006391:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006395:	75 11                	jne    c00063a8 <f_getfree+0x16d>
c0006397:	e8 e9 b8 ff ff       	call   c0001c85 <ld_word>
c000639c:	66 83 f8 01          	cmp    ax,0x1
c00063a0:	83 d3 00             	adc    ebx,0x0
c00063a3:	83 c6 02             	add    esi,0x2
c00063a6:	eb 13                	jmp    c00063bb <f_getfree+0x180>
c00063a8:	e8 e5 b8 ff ff       	call   c0001c92 <ld_dword>
c00063ad:	25 ff ff ff 0f       	and    eax,0xfffffff
c00063b2:	83 f8 01             	cmp    eax,0x1
c00063b5:	83 d3 00             	adc    ebx,0x0
c00063b8:	83 c6 04             	add    esi,0x4
c00063bb:	81 e6 ff 01 00 00    	and    esi,0x1ff
c00063c1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00063c5:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00063c9:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c00063cd:	75 90                	jne    c000635f <f_getfree+0x124>
c00063cf:	eb 18                	jmp    c00063e9 <f_getfree+0x1ae>
c00063d1:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00063d9:	eb 0e                	jmp    c00063e9 <f_getfree+0x1ae>
c00063db:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c00063e3:	eb 04                	jmp    c00063e9 <f_getfree+0x1ae>
c00063e5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00063e9:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00063ed:	89 18                	mov    DWORD PTR [eax],ebx
c00063ef:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00063f3:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c00063f6:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c00063fa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00063fe:	83 c4 5c             	add    esp,0x5c
c0006401:	5b                   	pop    ebx
c0006402:	5e                   	pop    esi
c0006403:	5f                   	pop    edi
c0006404:	5d                   	pop    ebp
c0006405:	c3                   	ret    

c0006406 <f_truncate>:
c0006406:	56                   	push   esi
c0006407:	53                   	push   ebx
c0006408:	83 ec 14             	sub    esp,0x14
c000640b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000640f:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0006413:	89 d8                	mov    eax,ebx
c0006415:	e8 6e bf ff ff       	call   c0002388 <validate>
c000641a:	89 c6                	mov    esi,eax
c000641c:	85 c0                	test   eax,eax
c000641e:	0f 85 d2 00 00 00    	jne    c00064f6 <f_truncate+0xf0>
c0006424:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c0006428:	85 f6                	test   esi,esi
c000642a:	0f 85 c6 00 00 00    	jne    c00064f6 <f_truncate+0xf0>
c0006430:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0006434:	0f 84 b7 00 00 00    	je     c00064f1 <f_truncate+0xeb>
c000643a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000643d:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0006440:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0006443:	89 d1                	mov    ecx,edx
c0006445:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c0006448:	0f 83 a8 00 00 00    	jae    c00064f6 <f_truncate+0xf0>
c000644e:	09 c2                	or     edx,eax
c0006450:	75 15                	jne    c0006467 <f_truncate+0x61>
c0006452:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0006455:	31 c9                	xor    ecx,ecx
c0006457:	89 d8                	mov    eax,ebx
c0006459:	e8 7a d0 ff ff       	call   c00034d8 <remove_chain>
c000645e:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0006465:	eb 35                	jmp    c000649c <f_truncate+0x96>
c0006467:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000646a:	89 d8                	mov    eax,ebx
c000646c:	e8 7a cb ff ff       	call   c0002feb <get_fat>
c0006471:	89 c2                	mov    edx,eax
c0006473:	b8 01 00 00 00       	mov    eax,0x1
c0006478:	83 fa ff             	cmp    edx,0xffffffff
c000647b:	74 1f                	je     c000649c <f_truncate+0x96>
c000647d:	b8 02 00 00 00       	mov    eax,0x2
c0006482:	83 fa 01             	cmp    edx,0x1
c0006485:	74 15                	je     c000649c <f_truncate+0x96>
c0006487:	31 c0                	xor    eax,eax
c0006489:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000648d:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c0006490:	76 0a                	jbe    c000649c <f_truncate+0x96>
c0006492:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0006495:	89 d8                	mov    eax,ebx
c0006497:	e8 3c d0 ff ff       	call   c00034d8 <remove_chain>
c000649c:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000649f:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c00064a2:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00064a5:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c00064a8:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c00064ab:	83 ca 40             	or     edx,0x40
c00064ae:	85 c0                	test   eax,eax
c00064b0:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c00064b3:	75 35                	jne    c00064ea <f_truncate+0xe4>
c00064b5:	84 d2                	test   dl,dl
c00064b7:	79 3d                	jns    c00064f6 <f_truncate+0xf0>
c00064b9:	83 ec 0c             	sub    esp,0xc
c00064bc:	8d 43 50             	lea    eax,[ebx+0x50]
c00064bf:	6a 01                	push   0x1
c00064c1:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c00064c4:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00064c7:	50                   	push   eax
c00064c8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00064cc:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00064d0:	50                   	push   eax
c00064d1:	e8 7a b7 ff ff       	call   c0001c50 <disk_write>
c00064d6:	83 c4 20             	add    esp,0x20
c00064d9:	85 c0                	test   eax,eax
c00064db:	75 08                	jne    c00064e5 <f_truncate+0xdf>
c00064dd:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00064e1:	31 f6                	xor    esi,esi
c00064e3:	eb 11                	jmp    c00064f6 <f_truncate+0xf0>
c00064e5:	b8 01 00 00 00       	mov    eax,0x1
c00064ea:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c00064ed:	89 c6                	mov    esi,eax
c00064ef:	eb 05                	jmp    c00064f6 <f_truncate+0xf0>
c00064f1:	be 07 00 00 00       	mov    esi,0x7
c00064f6:	89 f0                	mov    eax,esi
c00064f8:	83 c4 14             	add    esp,0x14
c00064fb:	5b                   	pop    ebx
c00064fc:	5e                   	pop    esi
c00064fd:	c3                   	ret    

c00064fe <f_unlink>:
c00064fe:	56                   	push   esi
c00064ff:	b9 02 00 00 00       	mov    ecx,0x2
c0006504:	53                   	push   ebx
c0006505:	81 ec e4 00 00 00    	sub    esp,0xe4
c000650b:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000650f:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c0006516:	e8 fa c1 ff ff       	call   c0002715 <mount_volume>
c000651b:	85 c0                	test   eax,eax
c000651d:	0f 85 55 01 00 00    	jne    c0006678 <f_unlink+0x17a>
c0006523:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006527:	83 ec 0c             	sub    esp,0xc
c000652a:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000652e:	68 60 04 00 00       	push   0x460
c0006533:	e8 80 1f 00 00       	call   c00084b8 <ff_memalloc>
c0006538:	83 c4 10             	add    esp,0x10
c000653b:	89 c3                	mov    ebx,eax
c000653d:	b8 11 00 00 00       	mov    eax,0x11
c0006542:	85 db                	test   ebx,ebx
c0006544:	0f 84 2e 01 00 00    	je     c0006678 <f_unlink+0x17a>
c000654a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000654e:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006554:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006557:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000655a:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c0006561:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006565:	e8 21 e9 ff ff       	call   c0004e8b <follow_path>
c000656a:	85 c0                	test   eax,eax
c000656c:	0f 85 f2 00 00 00    	jne    c0006664 <f_unlink+0x166>
c0006572:	b8 06 00 00 00       	mov    eax,0x6
c0006577:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c000657f:	0f 88 df 00 00 00    	js     c0006664 <f_unlink+0x166>
c0006585:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c000658a:	74 0a                	je     c0006596 <f_unlink+0x98>
c000658c:	b8 07 00 00 00       	mov    eax,0x7
c0006591:	e9 ce 00 00 00       	jmp    c0006664 <f_unlink+0x166>
c0006596:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000659a:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000659e:	8a 02                	mov    al,BYTE PTR [edx]
c00065a0:	3c 04                	cmp    al,0x4
c00065a2:	75 12                	jne    c00065b6 <f_unlink+0xb8>
c00065a4:	8d 42 10             	lea    eax,[edx+0x10]
c00065a7:	8d 54 24 20          	lea    edx,[esp+0x20]
c00065ab:	e8 a1 e8 ff ff       	call   c0004e51 <init_alloc_info.isra.2>
c00065b0:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c00065b4:	eb 0e                	jmp    c00065c4 <f_unlink+0xc6>
c00065b6:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c00065bd:	e8 3e e8 ff ff       	call   c0004e00 <ld_clust.isra.0>
c00065c2:	89 c6                	mov    esi,eax
c00065c4:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c00065c9:	75 12                	jne    c00065dd <f_unlink+0xdf>
c00065cb:	8d 44 24 48          	lea    eax,[esp+0x48]
c00065cf:	e8 94 d6 ff ff       	call   c0003c68 <dir_remove>
c00065d4:	85 c0                	test   eax,eax
c00065d6:	74 6c                	je     c0006644 <f_unlink+0x146>
c00065d8:	e9 87 00 00 00       	jmp    c0006664 <f_unlink+0x166>
c00065dd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00065e1:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c00065e8:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c00065ef:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00065f2:	75 21                	jne    c0006615 <f_unlink+0x117>
c00065f4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00065f8:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00065fc:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c0006603:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c000660a:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c000660e:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c0006615:	31 d2                	xor    edx,edx
c0006617:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c000661e:	e8 be cb ff ff       	call   c00031e1 <dir_sdi>
c0006623:	85 c0                	test   eax,eax
c0006625:	75 3d                	jne    c0006664 <f_unlink+0x166>
c0006627:	31 d2                	xor    edx,edx
c0006629:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0006630:	e8 bc d3 ff ff       	call   c00039f1 <dir_read>
c0006635:	85 c0                	test   eax,eax
c0006637:	0f 84 4f ff ff ff    	je     c000658c <f_unlink+0x8e>
c000663d:	83 f8 04             	cmp    eax,0x4
c0006640:	75 22                	jne    c0006664 <f_unlink+0x166>
c0006642:	eb 87                	jmp    c00065cb <f_unlink+0xcd>
c0006644:	85 f6                	test   esi,esi
c0006646:	75 0b                	jne    c0006653 <f_unlink+0x155>
c0006648:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000664c:	e8 3d df ff ff       	call   c000458e <sync_fs>
c0006651:	eb 11                	jmp    c0006664 <f_unlink+0x166>
c0006653:	31 c9                	xor    ecx,ecx
c0006655:	89 f2                	mov    edx,esi
c0006657:	8d 44 24 20          	lea    eax,[esp+0x20]
c000665b:	e8 78 ce ff ff       	call   c00034d8 <remove_chain>
c0006660:	85 c0                	test   eax,eax
c0006662:	74 e4                	je     c0006648 <f_unlink+0x14a>
c0006664:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006668:	83 ec 0c             	sub    esp,0xc
c000666b:	53                   	push   ebx
c000666c:	e8 5d 1e 00 00       	call   c00084ce <ff_memfree>
c0006671:	83 c4 10             	add    esp,0x10
c0006674:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006678:	81 c4 e4 00 00 00    	add    esp,0xe4
c000667e:	5b                   	pop    ebx
c000667f:	5e                   	pop    esi
c0006680:	c3                   	ret    

c0006681 <f_mkdir>:
c0006681:	57                   	push   edi
c0006682:	b9 02 00 00 00       	mov    ecx,0x2
c0006687:	56                   	push   esi
c0006688:	53                   	push   ebx
c0006689:	83 c4 80             	add    esp,0xffffff80
c000668c:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006690:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c0006697:	e8 79 c0 ff ff       	call   c0002715 <mount_volume>
c000669c:	89 c3                	mov    ebx,eax
c000669e:	85 c0                	test   eax,eax
c00066a0:	0f 85 fe 01 00 00    	jne    c00068a4 <f_mkdir+0x223>
c00066a6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066aa:	bb 11 00 00 00       	mov    ebx,0x11
c00066af:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00066b3:	83 ec 0c             	sub    esp,0xc
c00066b6:	68 60 04 00 00       	push   0x460
c00066bb:	e8 f8 1d 00 00       	call   c00084b8 <ff_memalloc>
c00066c0:	83 c4 10             	add    esp,0x10
c00066c3:	89 c7                	mov    edi,eax
c00066c5:	85 c0                	test   eax,eax
c00066c7:	0f 84 d7 01 00 00    	je     c00068a4 <f_mkdir+0x223>
c00066cd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066d1:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c00066d7:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c00066da:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00066dd:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c00066e4:	8d 44 24 34          	lea    eax,[esp+0x34]
c00066e8:	e8 9e e7 ff ff       	call   c0004e8b <follow_path>
c00066ed:	89 c3                	mov    ebx,eax
c00066ef:	85 c0                	test   eax,eax
c00066f1:	74 3e                	je     c0006731 <f_mkdir+0xb0>
c00066f3:	83 f8 04             	cmp    eax,0x4
c00066f6:	75 3e                	jne    c0006736 <f_mkdir+0xb5>
c00066f8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066fc:	31 d2                	xor    edx,edx
c00066fe:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006702:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0006706:	e8 ce cb ff ff       	call   c00032d9 <create_chain>
c000670b:	89 c6                	mov    esi,eax
c000670d:	85 c0                	test   eax,eax
c000670f:	74 0c                	je     c000671d <f_mkdir+0x9c>
c0006711:	bb 02 00 00 00       	mov    ebx,0x2
c0006716:	83 f8 01             	cmp    eax,0x1
c0006719:	74 07                	je     c0006722 <f_mkdir+0xa1>
c000671b:	eb 2a                	jmp    c0006747 <f_mkdir+0xc6>
c000671d:	bb 07 00 00 00       	mov    ebx,0x7
c0006722:	31 c9                	xor    ecx,ecx
c0006724:	89 f2                	mov    edx,esi
c0006726:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000672a:	e8 a9 cd ff ff       	call   c00034d8 <remove_chain>
c000672f:	eb 05                	jmp    c0006736 <f_mkdir+0xb5>
c0006731:	bb 08 00 00 00       	mov    ebx,0x8
c0006736:	83 ec 0c             	sub    esp,0xc
c0006739:	57                   	push   edi
c000673a:	e8 8f 1d 00 00       	call   c00084ce <ff_memfree>
c000673f:	83 c4 10             	add    esp,0x10
c0006742:	e9 5d 01 00 00       	jmp    c00068a4 <f_mkdir+0x223>
c0006747:	bb 01 00 00 00       	mov    ebx,0x1
c000674c:	83 f8 ff             	cmp    eax,0xffffffff
c000674f:	74 d1                	je     c0006722 <f_mkdir+0xa1>
c0006751:	89 f2                	mov    edx,esi
c0006753:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006757:	e8 c4 ce ff ff       	call   c0003620 <dir_clear>
c000675c:	89 c3                	mov    ebx,eax
c000675e:	85 c0                	test   eax,eax
c0006760:	75 c0                	jne    c0006722 <f_mkdir+0xa1>
c0006762:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006766:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006769:	74 69                	je     c00067d4 <f_mkdir+0x153>
c000676b:	b9 0b 00 00 00       	mov    ecx,0xb
c0006770:	83 c0 54             	add    eax,0x54
c0006773:	ba 20 00 00 00       	mov    edx,0x20
c0006778:	e8 9c b5 ff ff       	call   c0001d19 <mem_set>
c000677d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006781:	ba 00 00 21 50       	mov    edx,0x50210000
c0006786:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c000678a:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c000678e:	83 c0 6a             	add    eax,0x6a
c0006791:	e8 65 b5 ff ff       	call   c0001cfb <st_dword>
c0006796:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000679a:	89 f1                	mov    ecx,esi
c000679c:	8d 50 54             	lea    edx,[eax+0x54]
c000679f:	e8 85 e6 ff ff       	call   c0004e29 <st_clust.isra.1>
c00067a4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067a8:	b9 20 00 00 00       	mov    ecx,0x20
c00067ad:	8d 50 54             	lea    edx,[eax+0x54]
c00067b0:	83 c0 74             	add    eax,0x74
c00067b3:	e8 4c b5 ff ff       	call   c0001d04 <mem_cpy>
c00067b8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067bc:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c00067c0:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c00067c4:	8d 50 74             	lea    edx,[eax+0x74]
c00067c7:	e8 5d e6 ff ff       	call   c0004e29 <st_clust.isra.1>
c00067cc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067d0:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00067d4:	8d 44 24 34          	lea    eax,[esp+0x34]
c00067d8:	e8 2f db ff ff       	call   c000430c <dir_register>
c00067dd:	89 c3                	mov    ebx,eax
c00067df:	85 c0                	test   eax,eax
c00067e1:	0f 85 3b ff ff ff    	jne    c0006722 <f_mkdir+0xa1>
c00067e7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067eb:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00067ee:	75 74                	jne    c0006864 <f_mkdir+0x1e3>
c00067f0:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067f3:	ba 00 00 21 50       	mov    edx,0x50210000
c00067f8:	83 c0 0c             	add    eax,0xc
c00067fb:	e8 fb b4 ff ff       	call   c0001cfb <st_dword>
c0006800:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006804:	89 f2                	mov    edx,esi
c0006806:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006809:	83 c0 34             	add    eax,0x34
c000680c:	e8 ea b4 ff ff       	call   c0001cfb <st_dword>
c0006811:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006815:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0006819:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000681c:	c1 e2 09             	shl    edx,0x9
c000681f:	83 c0 38             	add    eax,0x38
c0006822:	e8 d4 b4 ff ff       	call   c0001cfb <st_dword>
c0006827:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000682b:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c000682f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006832:	c1 e2 09             	shl    edx,0x9
c0006835:	83 c0 28             	add    eax,0x28
c0006838:	e8 be b4 ff ff       	call   c0001cfb <st_dword>
c000683d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006841:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006844:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c0006848:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000684b:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c000684f:	8d 44 24 34          	lea    eax,[esp+0x34]
c0006853:	e8 8b d3 ff ff       	call   c0003be3 <store_xdir>
c0006858:	89 c3                	mov    ebx,eax
c000685a:	85 c0                	test   eax,eax
c000685c:	0f 85 d4 fe ff ff    	jne    c0006736 <f_mkdir+0xb5>
c0006862:	eb 30                	jmp    c0006894 <f_mkdir+0x213>
c0006864:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006868:	ba 00 00 21 50       	mov    edx,0x50210000
c000686d:	83 c0 16             	add    eax,0x16
c0006870:	e8 86 b4 ff ff       	call   c0001cfb <st_dword>
c0006875:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006879:	89 f1                	mov    ecx,esi
c000687b:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000687f:	e8 a5 e5 ff ff       	call   c0004e29 <st_clust.isra.1>
c0006884:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006888:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c000688c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006890:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006894:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006898:	e8 f1 dc ff ff       	call   c000458e <sync_fs>
c000689d:	89 c3                	mov    ebx,eax
c000689f:	e9 92 fe ff ff       	jmp    c0006736 <f_mkdir+0xb5>
c00068a4:	83 ec 80             	sub    esp,0xffffff80
c00068a7:	89 d8                	mov    eax,ebx
c00068a9:	5b                   	pop    ebx
c00068aa:	5e                   	pop    esi
c00068ab:	5f                   	pop    edi
c00068ac:	c3                   	ret    

c00068ad <f_rename>:
c00068ad:	55                   	push   ebp
c00068ae:	57                   	push   edi
c00068af:	56                   	push   esi
c00068b0:	53                   	push   ebx
c00068b1:	81 ec fc 00 00 00    	sub    esp,0xfc
c00068b7:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c00068be:	e8 a4 b9 ff ff       	call   c0002267 <get_ldnumber>
c00068c3:	b9 02 00 00 00       	mov    ecx,0x2
c00068c8:	8d 54 24 14          	lea    edx,[esp+0x14]
c00068cc:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c00068d3:	e8 3d be ff ff       	call   c0002715 <mount_volume>
c00068d8:	85 c0                	test   eax,eax
c00068da:	0f 85 b5 02 00 00    	jne    c0006b95 <f_rename+0x2e8>
c00068e0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068e4:	83 ec 0c             	sub    esp,0xc
c00068e7:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00068eb:	68 60 04 00 00       	push   0x460
c00068f0:	e8 c3 1b 00 00       	call   c00084b8 <ff_memalloc>
c00068f5:	83 c4 10             	add    esp,0x10
c00068f8:	89 c3                	mov    ebx,eax
c00068fa:	b8 11 00 00 00       	mov    eax,0x11
c00068ff:	85 db                	test   ebx,ebx
c0006901:	0f 84 8e 02 00 00    	je     c0006b95 <f_rename+0x2e8>
c0006907:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000690b:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006911:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006914:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006917:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c000691e:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006922:	e8 64 e5 ff ff       	call   c0004e8b <follow_path>
c0006927:	85 c0                	test   eax,eax
c0006929:	0f 85 52 02 00 00    	jne    c0006b81 <f_rename+0x2d4>
c000692f:	b8 06 00 00 00       	mov    eax,0x6
c0006934:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c000693c:	0f 85 3f 02 00 00    	jne    c0006b81 <f_rename+0x2d4>
c0006942:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006946:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006949:	0f 85 05 01 00 00    	jne    c0006a54 <f_rename+0x1a7>
c000694f:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006952:	b9 40 00 00 00       	mov    ecx,0x40
c0006957:	8d 44 24 18          	lea    eax,[esp+0x18]
c000695b:	e8 a4 b3 ff ff       	call   c0001d04 <mem_cpy>
c0006960:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006965:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006969:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006970:	e8 8f b3 ff ff       	call   c0001d04 <mem_cpy>
c0006975:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c000697c:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006983:	e8 03 e5 ff ff       	call   c0004e8b <follow_path>
c0006988:	85 c0                	test   eax,eax
c000698a:	75 29                	jne    c00069b5 <f_rename+0x108>
c000698c:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006990:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006997:	74 0a                	je     c00069a3 <f_rename+0xf6>
c0006999:	b8 08 00 00 00       	mov    eax,0x8
c000699e:	e9 de 01 00 00       	jmp    c0006b81 <f_rename+0x2d4>
c00069a3:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c00069aa:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c00069b1:	75 e6                	jne    c0006999 <f_rename+0xec>
c00069b3:	eb 09                	jmp    c00069be <f_rename+0x111>
c00069b5:	83 f8 04             	cmp    eax,0x4
c00069b8:	0f 85 c3 01 00 00    	jne    c0006b81 <f_rename+0x2d4>
c00069be:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00069c5:	e8 42 d9 ff ff       	call   c000430c <dir_register>
c00069ca:	85 c0                	test   eax,eax
c00069cc:	0f 85 af 01 00 00    	jne    c0006b81 <f_rename+0x2d4>
c00069d2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069d6:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c00069d9:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00069dc:	89 c5                	mov    ebp,eax
c00069de:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c00069e1:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00069e5:	8d 46 24             	lea    eax,[esi+0x24]
c00069e8:	e8 98 b2 ff ff       	call   c0001c85 <ld_word>
c00069ed:	b9 40 00 00 00       	mov    ecx,0x40
c00069f2:	89 c7                	mov    edi,eax
c00069f4:	8d 54 24 18          	lea    edx,[esp+0x18]
c00069f8:	89 f0                	mov    eax,esi
c00069fa:	e8 05 b3 ff ff       	call   c0001d04 <mem_cpy>
c00069ff:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a03:	89 e9                	mov    ecx,ebp
c0006a05:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006a08:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c0006a0b:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0006a0f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a13:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006a16:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c0006a19:	0f b7 d7             	movzx  edx,di
c0006a1c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006a1f:	83 c0 24             	add    eax,0x24
c0006a22:	e8 d0 b2 ff ff       	call   c0001cf7 <st_word>
c0006a27:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a2b:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006a2e:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0006a31:	a8 10                	test   al,0x10
c0006a33:	75 06                	jne    c0006a3b <f_rename+0x18e>
c0006a35:	83 c8 20             	or     eax,0x20
c0006a38:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0006a3b:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a42:	e8 9c d1 ff ff       	call   c0003be3 <store_xdir>
c0006a47:	85 c0                	test   eax,eax
c0006a49:	0f 84 1c 01 00 00    	je     c0006b6b <f_rename+0x2be>
c0006a4f:	e9 2d 01 00 00       	jmp    c0006b81 <f_rename+0x2d4>
c0006a54:	b9 20 00 00 00       	mov    ecx,0x20
c0006a59:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006a60:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006a64:	e8 9b b2 ff ff       	call   c0001d04 <mem_cpy>
c0006a69:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006a6e:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006a72:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a79:	e8 86 b2 ff ff       	call   c0001d04 <mem_cpy>
c0006a7e:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006a85:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a8c:	e8 fa e3 ff ff       	call   c0004e8b <follow_path>
c0006a91:	85 c0                	test   eax,eax
c0006a93:	75 27                	jne    c0006abc <f_rename+0x20f>
c0006a95:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006a99:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006aa0:	0f 85 f3 fe ff ff    	jne    c0006999 <f_rename+0xec>
c0006aa6:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006aad:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006ab4:	0f 85 df fe ff ff    	jne    c0006999 <f_rename+0xec>
c0006aba:	eb 09                	jmp    c0006ac5 <f_rename+0x218>
c0006abc:	83 f8 04             	cmp    eax,0x4
c0006abf:	0f 85 bc 00 00 00    	jne    c0006b81 <f_rename+0x2d4>
c0006ac5:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006acc:	e8 3b d8 ff ff       	call   c000430c <dir_register>
c0006ad1:	85 c0                	test   eax,eax
c0006ad3:	0f 85 a8 00 00 00    	jne    c0006b81 <f_rename+0x2d4>
c0006ad9:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c0006ae0:	b9 13 00 00 00       	mov    ecx,0x13
c0006ae5:	8d 46 0d             	lea    eax,[esi+0xd]
c0006ae8:	8d 54 24 25          	lea    edx,[esp+0x25]
c0006aec:	e8 13 b2 ff ff       	call   c0001d04 <mem_cpy>
c0006af1:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0006af5:	a8 10                	test   al,0x10
c0006af7:	75 03                	jne    c0006afc <f_rename+0x24f>
c0006af9:	83 c8 20             	or     eax,0x20
c0006afc:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0006aff:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b03:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006b07:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c0006b0b:	74 5e                	je     c0006b6b <f_rename+0x2be>
c0006b0d:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c0006b14:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c0006b18:	74 51                	je     c0006b6b <f_rename+0x2be>
c0006b1a:	89 f2                	mov    edx,esi
c0006b1c:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0006b20:	8a 07                	mov    al,BYTE PTR [edi]
c0006b22:	e8 d9 e2 ff ff       	call   c0004e00 <ld_clust.isra.0>
c0006b27:	89 c2                	mov    edx,eax
c0006b29:	89 f8                	mov    eax,edi
c0006b2b:	e8 ee b3 ff ff       	call   c0001f1e <clst2sect>
c0006b30:	89 c6                	mov    esi,eax
c0006b32:	89 d1                	mov    ecx,edx
c0006b34:	b8 02 00 00 00       	mov    eax,0x2
c0006b39:	09 f2                	or     edx,esi
c0006b3b:	74 44                	je     c0006b81 <f_rename+0x2d4>
c0006b3d:	89 f2                	mov    edx,esi
c0006b3f:	89 f8                	mov    eax,edi
c0006b41:	e8 1d b9 ff ff       	call   c0002463 <move_window>
c0006b46:	85 c0                	test   eax,eax
c0006b48:	75 37                	jne    c0006b81 <f_rename+0x2d4>
c0006b4a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b4e:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c0006b52:	75 17                	jne    c0006b6b <f_rename+0x2be>
c0006b54:	8d 50 74             	lea    edx,[eax+0x74]
c0006b57:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006b5e:	e8 c6 e2 ff ff       	call   c0004e29 <st_clust.isra.1>
c0006b63:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b67:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006b6b:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006b6f:	e8 f4 d0 ff ff       	call   c0003c68 <dir_remove>
c0006b74:	85 c0                	test   eax,eax
c0006b76:	75 09                	jne    c0006b81 <f_rename+0x2d4>
c0006b78:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b7c:	e8 0d da ff ff       	call   c000458e <sync_fs>
c0006b81:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b85:	83 ec 0c             	sub    esp,0xc
c0006b88:	53                   	push   ebx
c0006b89:	e8 40 19 00 00       	call   c00084ce <ff_memfree>
c0006b8e:	83 c4 10             	add    esp,0x10
c0006b91:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b95:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006b9b:	5b                   	pop    ebx
c0006b9c:	5e                   	pop    esi
c0006b9d:	5f                   	pop    edi
c0006b9e:	5d                   	pop    ebp
c0006b9f:	c3                   	ret    

c0006ba0 <f_chmod>:
c0006ba0:	57                   	push   edi
c0006ba1:	b9 02 00 00 00       	mov    ecx,0x2
c0006ba6:	56                   	push   esi
c0006ba7:	53                   	push   ebx
c0006ba8:	83 ec 60             	sub    esp,0x60
c0006bab:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0006baf:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0006bb3:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006bb7:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006bbb:	e8 55 bb ff ff       	call   c0002715 <mount_volume>
c0006bc0:	85 c0                	test   eax,eax
c0006bc2:	0f 85 af 00 00 00    	jne    c0006c77 <f_chmod+0xd7>
c0006bc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bcc:	83 ec 0c             	sub    esp,0xc
c0006bcf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006bd3:	68 60 04 00 00       	push   0x460
c0006bd8:	e8 db 18 00 00       	call   c00084b8 <ff_memalloc>
c0006bdd:	83 c4 10             	add    esp,0x10
c0006be0:	89 c6                	mov    esi,eax
c0006be2:	b8 11 00 00 00       	mov    eax,0x11
c0006be7:	85 f6                	test   esi,esi
c0006be9:	0f 84 88 00 00 00    	je     c0006c77 <f_chmod+0xd7>
c0006bef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bf3:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006bf9:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006bfc:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006bff:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006c03:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c07:	e8 7f e2 ff ff       	call   c0004e8b <follow_path>
c0006c0c:	85 c0                	test   eax,eax
c0006c0e:	75 53                	jne    c0006c63 <f_chmod+0xc3>
c0006c10:	b8 06 00 00 00       	mov    eax,0x6
c0006c15:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006c1a:	75 47                	jne    c0006c63 <f_chmod+0xc3>
c0006c1c:	89 f9                	mov    ecx,edi
c0006c1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c22:	83 e1 27             	and    ecx,0x27
c0006c25:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006c28:	75 1d                	jne    c0006c47 <f_chmod+0xa7>
c0006c2a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006c2d:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006c30:	21 cb                	and    ebx,ecx
c0006c32:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006c35:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c0006c38:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c3c:	e8 a2 cf ff ff       	call   c0003be3 <store_xdir>
c0006c41:	85 c0                	test   eax,eax
c0006c43:	75 1e                	jne    c0006c63 <f_chmod+0xc3>
c0006c45:	eb 13                	jmp    c0006c5a <f_chmod+0xba>
c0006c47:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006c4b:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006c4e:	21 cb                	and    ebx,ecx
c0006c50:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006c53:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0006c56:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006c5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c5e:	e8 2b d9 ff ff       	call   c000458e <sync_fs>
c0006c63:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c67:	83 ec 0c             	sub    esp,0xc
c0006c6a:	56                   	push   esi
c0006c6b:	e8 5e 18 00 00       	call   c00084ce <ff_memfree>
c0006c70:	83 c4 10             	add    esp,0x10
c0006c73:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006c77:	83 c4 60             	add    esp,0x60
c0006c7a:	5b                   	pop    ebx
c0006c7b:	5e                   	pop    esi
c0006c7c:	5f                   	pop    edi
c0006c7d:	c3                   	ret    

c0006c7e <f_utime>:
c0006c7e:	56                   	push   esi
c0006c7f:	b9 02 00 00 00       	mov    ecx,0x2
c0006c84:	53                   	push   ebx
c0006c85:	83 ec 64             	sub    esp,0x64
c0006c88:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006c8c:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006c90:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006c94:	e8 7c ba ff ff       	call   c0002715 <mount_volume>
c0006c99:	85 c0                	test   eax,eax
c0006c9b:	0f 85 b5 00 00 00    	jne    c0006d56 <f_utime+0xd8>
c0006ca1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ca5:	83 ec 0c             	sub    esp,0xc
c0006ca8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006cac:	68 60 04 00 00       	push   0x460
c0006cb1:	e8 02 18 00 00       	call   c00084b8 <ff_memalloc>
c0006cb6:	83 c4 10             	add    esp,0x10
c0006cb9:	89 c3                	mov    ebx,eax
c0006cbb:	b8 11 00 00 00       	mov    eax,0x11
c0006cc0:	85 db                	test   ebx,ebx
c0006cc2:	0f 84 8e 00 00 00    	je     c0006d56 <f_utime+0xd8>
c0006cc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ccc:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006cd2:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006cd5:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006cd8:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006cdc:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006ce0:	e8 a6 e1 ff ff       	call   c0004e8b <follow_path>
c0006ce5:	85 c0                	test   eax,eax
c0006ce7:	75 59                	jne    c0006d42 <f_utime+0xc4>
c0006ce9:	b8 06 00 00 00       	mov    eax,0x6
c0006cee:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006cf3:	75 4d                	jne    c0006d42 <f_utime+0xc4>
c0006cf5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cf9:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006cfd:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006d01:	c1 e2 10             	shl    edx,0x10
c0006d04:	09 ca                	or     edx,ecx
c0006d06:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006d09:	75 1a                	jne    c0006d25 <f_utime+0xa7>
c0006d0b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006d0e:	83 c0 0c             	add    eax,0xc
c0006d11:	e8 e5 af ff ff       	call   c0001cfb <st_dword>
c0006d16:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d1a:	e8 c4 ce ff ff       	call   c0003be3 <store_xdir>
c0006d1f:	85 c0                	test   eax,eax
c0006d21:	75 1f                	jne    c0006d42 <f_utime+0xc4>
c0006d23:	eb 14                	jmp    c0006d39 <f_utime+0xbb>
c0006d25:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006d29:	83 c0 16             	add    eax,0x16
c0006d2c:	e8 ca af ff ff       	call   c0001cfb <st_dword>
c0006d31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d35:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006d39:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d3d:	e8 4c d8 ff ff       	call   c000458e <sync_fs>
c0006d42:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006d46:	83 ec 0c             	sub    esp,0xc
c0006d49:	53                   	push   ebx
c0006d4a:	e8 7f 17 00 00       	call   c00084ce <ff_memfree>
c0006d4f:	83 c4 10             	add    esp,0x10
c0006d52:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006d56:	83 c4 64             	add    esp,0x64
c0006d59:	5b                   	pop    ebx
c0006d5a:	5e                   	pop    esi
c0006d5b:	c3                   	ret    

c0006d5c <f_getlabel>:
c0006d5c:	55                   	push   ebp
c0006d5d:	31 c9                	xor    ecx,ecx
c0006d5f:	57                   	push   edi
c0006d60:	56                   	push   esi
c0006d61:	53                   	push   ebx
c0006d62:	83 ec 6c             	sub    esp,0x6c
c0006d65:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006d69:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d70:	e8 a0 b9 ff ff       	call   c0002715 <mount_volume>
c0006d75:	89 c6                	mov    esi,eax
c0006d77:	85 c0                	test   eax,eax
c0006d79:	0f 85 c1 01 00 00    	jne    c0006f40 <f_getlabel+0x1e4>
c0006d7f:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006d87:	0f 84 5f 01 00 00    	je     c0006eec <f_getlabel+0x190>
c0006d8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d91:	31 d2                	xor    edx,edx
c0006d93:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006d97:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006d9f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006da3:	e8 39 c4 ff ff       	call   c00031e1 <dir_sdi>
c0006da8:	85 c0                	test   eax,eax
c0006daa:	0f 85 2d 01 00 00    	jne    c0006edd <f_getlabel+0x181>
c0006db0:	ba 01 00 00 00       	mov    edx,0x1
c0006db5:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006db9:	e8 33 cc ff ff       	call   c00039f1 <dir_read>
c0006dbe:	85 c0                	test   eax,eax
c0006dc0:	0f 85 17 01 00 00    	jne    c0006edd <f_getlabel+0x181>
c0006dc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006dca:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006dcd:	74 09                	je     c0006dd8 <f_getlabel+0x7c>
c0006dcf:	31 db                	xor    ebx,ebx
c0006dd1:	31 c9                	xor    ecx,ecx
c0006dd3:	e9 c8 00 00 00       	jmp    c0006ea0 <f_getlabel+0x144>
c0006dd8:	31 ed                	xor    ebp,ebp
c0006dda:	31 db                	xor    ebx,ebx
c0006ddc:	31 ff                	xor    edi,edi
c0006dde:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006de2:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006de6:	39 fa                	cmp    edx,edi
c0006de8:	76 4b                	jbe    c0006e35 <f_getlabel+0xd9>
c0006dea:	47                   	inc    edi
c0006deb:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006dee:	01 d0                	add    eax,edx
c0006df0:	e8 90 ae ff ff       	call   c0001c85 <ld_word>
c0006df5:	66 85 ed             	test   bp,bp
c0006df8:	75 0d                	jne    c0006e07 <f_getlabel+0xab>
c0006dfa:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006e00:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006e05:	76 28                	jbe    c0006e2f <f_getlabel+0xd3>
c0006e07:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006e0e:	89 e9                	mov    ecx,ebp
c0006e10:	01 da                	add    edx,ebx
c0006e12:	c1 e1 10             	shl    ecx,0x10
c0006e15:	0f b7 c0             	movzx  eax,ax
c0006e18:	09 c8                	or     eax,ecx
c0006e1a:	b9 04 00 00 00       	mov    ecx,0x4
c0006e1f:	e8 01 b0 ff ff       	call   c0001e25 <put_utf>
c0006e24:	84 c0                	test   al,al
c0006e26:	74 0b                	je     c0006e33 <f_getlabel+0xd7>
c0006e28:	0f b6 c0             	movzx  eax,al
c0006e2b:	01 c3                	add    ebx,eax
c0006e2d:	31 c0                	xor    eax,eax
c0006e2f:	89 c5                	mov    ebp,eax
c0006e31:	eb ab                	jmp    c0006dde <f_getlabel+0x82>
c0006e33:	31 db                	xor    ebx,ebx
c0006e35:	66 85 ed             	test   bp,bp
c0006e38:	74 02                	je     c0006e3c <f_getlabel+0xe0>
c0006e3a:	31 db                	xor    ebx,ebx
c0006e3c:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006e43:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006e47:	e9 a0 00 00 00       	jmp    c0006eec <f_getlabel+0x190>
c0006e4c:	83 ff 0b             	cmp    edi,0xb
c0006e4f:	74 11                	je     c0006e62 <f_getlabel+0x106>
c0006e51:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006e56:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006e5a:	8d 79 02             	lea    edi,[ecx+0x2]
c0006e5d:	c1 e0 08             	shl    eax,0x8
c0006e60:	09 c2                	or     edx,eax
c0006e62:	0f b7 d2             	movzx  edx,dx
c0006e65:	50                   	push   eax
c0006e66:	50                   	push   eax
c0006e67:	68 b5 01 00 00       	push   0x1b5
c0006e6c:	52                   	push   edx
c0006e6d:	e8 03 17 00 00       	call   c0008575 <ff_oem2uni>
c0006e72:	83 c4 10             	add    esp,0x10
c0006e75:	66 85 c0             	test   ax,ax
c0006e78:	74 46                	je     c0006ec0 <f_getlabel+0x164>
c0006e7a:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006e81:	0f b7 c0             	movzx  eax,ax
c0006e84:	01 da                	add    edx,ebx
c0006e86:	b9 04 00 00 00       	mov    ecx,0x4
c0006e8b:	e8 95 af ff ff       	call   c0001e25 <put_utf>
c0006e90:	84 c0                	test   al,al
c0006e92:	74 2c                	je     c0006ec0 <f_getlabel+0x164>
c0006e94:	0f b6 c0             	movzx  eax,al
c0006e97:	01 c3                	add    ebx,eax
c0006e99:	83 ff 0b             	cmp    edi,0xb
c0006e9c:	74 24                	je     c0006ec2 <f_getlabel+0x166>
c0006e9e:	89 f9                	mov    ecx,edi
c0006ea0:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006ea4:	8d 79 01             	lea    edi,[ecx+0x1]
c0006ea7:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006eac:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006eb1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006eb5:	e8 9f ae ff ff       	call   c0001d59 <dbc_1st>
c0006eba:	85 c0                	test   eax,eax
c0006ebc:	74 a4                	je     c0006e62 <f_getlabel+0x106>
c0006ebe:	eb 8c                	jmp    c0006e4c <f_getlabel+0xf0>
c0006ec0:	31 db                	xor    ebx,ebx
c0006ec2:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006ec9:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006ecc:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006ed3:	74 17                	je     c0006eec <f_getlabel+0x190>
c0006ed5:	4b                   	dec    ebx
c0006ed6:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006ed9:	74 ee                	je     c0006ec9 <f_getlabel+0x16d>
c0006edb:	eb 0f                	jmp    c0006eec <f_getlabel+0x190>
c0006edd:	83 f8 04             	cmp    eax,0x4
c0006ee0:	75 5c                	jne    c0006f3e <f_getlabel+0x1e2>
c0006ee2:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006ee9:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006eec:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006ef4:	74 4a                	je     c0006f40 <f_getlabel+0x1e4>
c0006ef6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006efa:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006efd:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006f00:	e8 5e b5 ff ff       	call   c0002463 <move_window>
c0006f05:	89 c6                	mov    esi,eax
c0006f07:	85 c0                	test   eax,eax
c0006f09:	75 35                	jne    c0006f40 <f_getlabel+0x1e4>
c0006f0b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006f0f:	b8 43 00 00 00       	mov    eax,0x43
c0006f14:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006f16:	80 f9 03             	cmp    cl,0x3
c0006f19:	74 0f                	je     c0006f2a <f_getlabel+0x1ce>
c0006f1b:	31 c0                	xor    eax,eax
c0006f1d:	80 f9 04             	cmp    cl,0x4
c0006f20:	0f 94 c0             	sete   al
c0006f23:	48                   	dec    eax
c0006f24:	83 e0 c3             	and    eax,0xffffffc3
c0006f27:	83 c0 64             	add    eax,0x64
c0006f2a:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006f2e:	e8 5f ad ff ff       	call   c0001c92 <ld_dword>
c0006f33:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006f3a:	89 07                	mov    DWORD PTR [edi],eax
c0006f3c:	eb 02                	jmp    c0006f40 <f_getlabel+0x1e4>
c0006f3e:	89 c6                	mov    esi,eax
c0006f40:	83 c4 6c             	add    esp,0x6c
c0006f43:	89 f0                	mov    eax,esi
c0006f45:	5b                   	pop    ebx
c0006f46:	5e                   	pop    esi
c0006f47:	5f                   	pop    edi
c0006f48:	5d                   	pop    ebp
c0006f49:	c3                   	ret    

c0006f4a <f_setlabel>:
c0006f4a:	56                   	push   esi
c0006f4b:	b9 02 00 00 00       	mov    ecx,0x2
c0006f50:	53                   	push   ebx
c0006f51:	83 ec 74             	sub    esp,0x74
c0006f54:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006f58:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f5f:	e8 b1 b7 ff ff       	call   c0002715 <mount_volume>
c0006f64:	89 c6                	mov    esi,eax
c0006f66:	85 c0                	test   eax,eax
c0006f68:	0f 85 41 02 00 00    	jne    c00071af <f_setlabel+0x265>
c0006f6e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f72:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006f75:	0f 85 8e 00 00 00    	jne    c0007009 <f_setlabel+0xbf>
c0006f7b:	b9 16 00 00 00       	mov    ecx,0x16
c0006f80:	31 d2                	xor    edx,edx
c0006f82:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006f86:	31 db                	xor    ebx,ebx
c0006f88:	e8 8c ad ff ff       	call   c0001d19 <mem_set>
c0006f8d:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006f94:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006f97:	0f 86 0a 01 00 00    	jbe    c00070a7 <f_setlabel+0x15d>
c0006f9d:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006fa4:	e8 b6 ad ff ff       	call   c0001d5f <tchar2uni>
c0006fa9:	89 c6                	mov    esi,eax
c0006fab:	3d ff ff 00 00       	cmp    eax,0xffff
c0006fb0:	76 2a                	jbe    c0006fdc <f_setlabel+0x92>
c0006fb2:	83 f8 ff             	cmp    eax,0xffffffff
c0006fb5:	74 05                	je     c0006fbc <f_setlabel+0x72>
c0006fb7:	83 fb 09             	cmp    ebx,0x9
c0006fba:	76 0a                	jbe    c0006fc6 <f_setlabel+0x7c>
c0006fbc:	be 06 00 00 00       	mov    esi,0x6
c0006fc1:	e9 e9 01 00 00       	jmp    c00071af <f_setlabel+0x265>
c0006fc6:	89 c2                	mov    edx,eax
c0006fc8:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006fcc:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006fcf:	c1 ea 10             	shr    edx,0x10
c0006fd2:	01 c8                	add    eax,ecx
c0006fd4:	43                   	inc    ebx
c0006fd5:	e8 1d ad ff ff       	call   c0001cf7 <st_word>
c0006fda:	eb 04                	jmp    c0006fe0 <f_setlabel+0x96>
c0006fdc:	85 c0                	test   eax,eax
c0006fde:	74 dc                	je     c0006fbc <f_setlabel+0x72>
c0006fe0:	89 f2                	mov    edx,esi
c0006fe2:	b8 b7 9c 02 c0       	mov    eax,0xc0029cb7
c0006fe7:	e8 5b ad ff ff       	call   c0001d47 <chk_chr>
c0006fec:	85 c0                	test   eax,eax
c0006fee:	75 cc                	jne    c0006fbc <f_setlabel+0x72>
c0006ff0:	83 fb 0a             	cmp    ebx,0xa
c0006ff3:	77 c7                	ja     c0006fbc <f_setlabel+0x72>
c0006ff5:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006ff8:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006ffc:	0f b7 d6             	movzx  edx,si
c0006fff:	01 c8                	add    eax,ecx
c0007001:	43                   	inc    ebx
c0007002:	e8 f0 ac ff ff       	call   c0001cf7 <st_word>
c0007007:	eb 84                	jmp    c0006f8d <f_setlabel+0x43>
c0007009:	b9 0b 00 00 00       	mov    ecx,0xb
c000700e:	ba 20 00 00 00       	mov    edx,0x20
c0007013:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0007017:	31 db                	xor    ebx,ebx
c0007019:	e8 fb ac ff ff       	call   c0001d19 <mem_set>
c000701e:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0007025:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0007028:	76 60                	jbe    c000708a <f_setlabel+0x140>
c000702a:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0007031:	e8 29 ad ff ff       	call   c0001d5f <tchar2uni>
c0007036:	3d ff ff 00 00       	cmp    eax,0xffff
c000703b:	0f 87 7b ff ff ff    	ja     c0006fbc <f_setlabel+0x72>
c0007041:	83 ec 0c             	sub    esp,0xc
c0007044:	50                   	push   eax
c0007045:	e8 97 15 00 00       	call   c00085e1 <ff_wtoupper>
c000704a:	5a                   	pop    edx
c000704b:	59                   	pop    ecx
c000704c:	68 b5 01 00 00       	push   0x1b5
c0007051:	50                   	push   eax
c0007052:	e8 8e 14 00 00       	call   c00084e5 <ff_uni2oem>
c0007057:	83 c4 10             	add    esp,0x10
c000705a:	89 c6                	mov    esi,eax
c000705c:	66 85 c0             	test   ax,ax
c000705f:	0f 84 57 ff ff ff    	je     c0006fbc <f_setlabel+0x72>
c0007065:	0f b7 d0             	movzx  edx,ax
c0007068:	b8 b0 9c 02 c0       	mov    eax,0xc0029cb0
c000706d:	e8 d5 ac ff ff       	call   c0001d47 <chk_chr>
c0007072:	85 c0                	test   eax,eax
c0007074:	0f 85 42 ff ff ff    	jne    c0006fbc <f_setlabel+0x72>
c000707a:	66 81 fe ff 00       	cmp    si,0xff
c000707f:	0f 87 14 01 00 00    	ja     c0007199 <f_setlabel+0x24f>
c0007085:	e9 fa 00 00 00       	jmp    c0007184 <f_setlabel+0x23a>
c000708a:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c000708f:	0f 84 27 ff ff ff    	je     c0006fbc <f_setlabel+0x72>
c0007095:	85 db                	test   ebx,ebx
c0007097:	74 0e                	je     c00070a7 <f_setlabel+0x15d>
c0007099:	8d 43 ff             	lea    eax,[ebx-0x1]
c000709c:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c00070a1:	75 04                	jne    c00070a7 <f_setlabel+0x15d>
c00070a3:	89 c3                	mov    ebx,eax
c00070a5:	eb ee                	jmp    c0007095 <f_setlabel+0x14b>
c00070a7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00070ab:	31 d2                	xor    edx,edx
c00070ad:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00070b1:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00070b9:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070bd:	e8 1f c1 ff ff       	call   c00031e1 <dir_sdi>
c00070c2:	89 c6                	mov    esi,eax
c00070c4:	85 c0                	test   eax,eax
c00070c6:	0f 85 e3 00 00 00    	jne    c00071af <f_setlabel+0x265>
c00070cc:	ba 01 00 00 00       	mov    edx,0x1
c00070d1:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070d5:	e8 17 c9 ff ff       	call   c00039f1 <dir_read>
c00070da:	85 c0                	test   eax,eax
c00070dc:	75 21                	jne    c00070ff <f_setlabel+0x1b5>
c00070de:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00070e2:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070e6:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c00070e9:	74 5d                	je     c0007148 <f_setlabel+0x1fe>
c00070eb:	85 db                	test   ebx,ebx
c00070ed:	74 0b                	je     c00070fa <f_setlabel+0x1b0>
c00070ef:	b9 0b 00 00 00       	mov    ecx,0xb
c00070f4:	8d 54 24 0e          	lea    edx,[esp+0xe]
c00070f8:	eb 70                	jmp    c000716a <f_setlabel+0x220>
c00070fa:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c00070fd:	eb 70                	jmp    c000716f <f_setlabel+0x225>
c00070ff:	83 f8 04             	cmp    eax,0x4
c0007102:	75 7c                	jne    c0007180 <f_setlabel+0x236>
c0007104:	85 db                	test   ebx,ebx
c0007106:	0f 84 a3 00 00 00    	je     c00071af <f_setlabel+0x265>
c000710c:	ba 01 00 00 00       	mov    edx,0x1
c0007111:	8d 44 24 24          	lea    eax,[esp+0x24]
c0007115:	e8 51 ca ff ff       	call   c0003b6b <dir_alloc>
c000711a:	89 c6                	mov    esi,eax
c000711c:	85 c0                	test   eax,eax
c000711e:	0f 85 8b 00 00 00    	jne    c00071af <f_setlabel+0x265>
c0007124:	31 d2                	xor    edx,edx
c0007126:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000712a:	b9 20 00 00 00       	mov    ecx,0x20
c000712f:	e8 e5 ab ff ff       	call   c0001d19 <mem_set>
c0007134:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007138:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000713b:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000713f:	75 18                	jne    c0007159 <f_setlabel+0x20f>
c0007141:	c6 00 83             	mov    BYTE PTR [eax],0x83
c0007144:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007148:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c000714b:	b9 16 00 00 00       	mov    ecx,0x16
c0007150:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007154:	83 c0 02             	add    eax,0x2
c0007157:	eb 9b                	jmp    c00070f4 <f_setlabel+0x1aa>
c0007159:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c000715d:	b9 0b 00 00 00       	mov    ecx,0xb
c0007162:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0007166:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000716a:	e8 95 ab ff ff       	call   c0001d04 <mem_cpy>
c000716f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007173:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0007177:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000717b:	e8 0e d4 ff ff       	call   c000458e <sync_fs>
c0007180:	89 c6                	mov    esi,eax
c0007182:	eb 2b                	jmp    c00071af <f_setlabel+0x265>
c0007184:	83 fb 0a             	cmp    ebx,0xa
c0007187:	0f 87 2f fe ff ff    	ja     c0006fbc <f_setlabel+0x72>
c000718d:	89 f0                	mov    eax,esi
c000718f:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007193:	43                   	inc    ebx
c0007194:	e9 85 fe ff ff       	jmp    c000701e <f_setlabel+0xd4>
c0007199:	83 fb 09             	cmp    ebx,0x9
c000719c:	0f 87 1a fe ff ff    	ja     c0006fbc <f_setlabel+0x72>
c00071a2:	89 f0                	mov    eax,esi
c00071a4:	66 c1 e8 08          	shr    ax,0x8
c00071a8:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c00071ac:	43                   	inc    ebx
c00071ad:	eb de                	jmp    c000718d <f_setlabel+0x243>
c00071af:	89 f0                	mov    eax,esi
c00071b1:	83 c4 74             	add    esp,0x74
c00071b4:	5b                   	pop    ebx
c00071b5:	5e                   	pop    esi
c00071b6:	c3                   	ret    

c00071b7 <f_forward>:
c00071b7:	55                   	push   ebp
c00071b8:	57                   	push   edi
c00071b9:	56                   	push   esi
c00071ba:	53                   	push   ebx
c00071bb:	83 ec 2c             	sub    esp,0x2c
c00071be:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00071c2:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00071c6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00071cc:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00071d0:	89 d8                	mov    eax,ebx
c00071d2:	e8 b1 b1 ff ff       	call   c0002388 <validate>
c00071d7:	89 c5                	mov    ebp,eax
c00071d9:	85 c0                	test   eax,eax
c00071db:	0f 85 aa 01 00 00    	jne    c000738b <f_forward+0x1d4>
c00071e1:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00071e5:	85 ed                	test   ebp,ebp
c00071e7:	0f 85 9e 01 00 00    	jne    c000738b <f_forward+0x1d4>
c00071ed:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00071f1:	0f 84 8f 01 00 00    	je     c0007386 <f_forward+0x1cf>
c00071f7:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00071fa:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00071fd:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0007200:	bf 00 00 00 00       	mov    edi,0x0
c0007205:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0007208:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c000720c:	89 d1                	mov    ecx,edx
c000720e:	19 f9                	sbb    ecx,edi
c0007210:	0f 83 cf 00 00 00    	jae    c00072e5 <f_forward+0x12e>
c0007216:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000721a:	e9 c6 00 00 00       	jmp    c00072e5 <f_forward+0x12e>
c000721f:	50                   	push   eax
c0007220:	50                   	push   eax
c0007221:	6a 00                	push   0x0
c0007223:	6a 00                	push   0x0
c0007225:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0007229:	83 c4 10             	add    esp,0x10
c000722c:	85 c0                	test   eax,eax
c000722e:	0f 84 57 01 00 00    	je     c000738b <f_forward+0x1d4>
c0007234:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0007237:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000723b:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000723e:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c0007242:	89 d7                	mov    edi,edx
c0007244:	8d 4e ff             	lea    ecx,[esi-0x1]
c0007247:	89 c6                	mov    esi,eax
c0007249:	0f ac fe 09          	shrd   esi,edi,0x9
c000724d:	21 ce                	and    esi,ecx
c000724f:	89 c1                	mov    ecx,eax
c0007251:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0007257:	0f 84 98 00 00 00    	je     c00072f5 <f_forward+0x13e>
c000725d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007261:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007264:	89 c8                	mov    eax,ecx
c0007266:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000726a:	e8 af ac ff ff       	call   c0001f1e <clst2sect>
c000726f:	89 d7                	mov    edi,edx
c0007271:	09 c7                	or     edi,eax
c0007273:	0f 84 9e 00 00 00    	je     c0007317 <f_forward+0x160>
c0007279:	31 ff                	xor    edi,edi
c000727b:	8d 4b 50             	lea    ecx,[ebx+0x50]
c000727e:	01 c6                	add    esi,eax
c0007280:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007284:	11 d7                	adc    edi,edx
c0007286:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0007289:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000728c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007290:	39 fa                	cmp    edx,edi
c0007292:	0f 85 a2 00 00 00    	jne    c000733a <f_forward+0x183>
c0007298:	39 f0                	cmp    eax,esi
c000729a:	0f 85 9a 00 00 00    	jne    c000733a <f_forward+0x183>
c00072a0:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00072a3:	ba 00 02 00 00       	mov    edx,0x200
c00072a8:	25 ff 01 00 00       	and    eax,0x1ff
c00072ad:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c00072b1:	29 c2                	sub    edx,eax
c00072b3:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00072b6:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00072b9:	39 d1                	cmp    ecx,edx
c00072bb:	76 02                	jbe    c00072bf <f_forward+0x108>
c00072bd:	89 d1                	mov    ecx,edx
c00072bf:	8d 73 50             	lea    esi,[ebx+0x50]
c00072c2:	52                   	push   edx
c00072c3:	01 c6                	add    esi,eax
c00072c5:	52                   	push   edx
c00072c6:	51                   	push   ecx
c00072c7:	56                   	push   esi
c00072c8:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c00072cc:	83 c4 10             	add    esp,0x10
c00072cf:	85 c0                	test   eax,eax
c00072d1:	74 44                	je     c0007317 <f_forward+0x160>
c00072d3:	31 ff                	xor    edi,edi
c00072d5:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c00072d8:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00072db:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c00072df:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c00072e3:	01 07                	add    DWORD PTR [edi],eax
c00072e5:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00072ea:	0f 85 2f ff ff ff    	jne    c000721f <f_forward+0x68>
c00072f0:	e9 96 00 00 00       	jmp    c000738b <f_forward+0x1d4>
c00072f5:	85 f6                	test   esi,esi
c00072f7:	0f 85 60 ff ff ff    	jne    c000725d <f_forward+0xa6>
c00072fd:	89 d7                	mov    edi,edx
c00072ff:	09 c7                	or     edi,eax
c0007301:	75 05                	jne    c0007308 <f_forward+0x151>
c0007303:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0007306:	eb 0a                	jmp    c0007312 <f_forward+0x15b>
c0007308:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000730b:	89 d8                	mov    eax,ebx
c000730d:	e8 d9 bc ff ff       	call   c0002feb <get_fat>
c0007312:	83 f8 01             	cmp    eax,0x1
c0007315:	77 0b                	ja     c0007322 <f_forward+0x16b>
c0007317:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c000731b:	bd 02 00 00 00       	mov    ebp,0x2
c0007320:	eb 69                	jmp    c000738b <f_forward+0x1d4>
c0007322:	83 f8 ff             	cmp    eax,0xffffffff
c0007325:	75 0b                	jne    c0007332 <f_forward+0x17b>
c0007327:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000732b:	bd 01 00 00 00       	mov    ebp,0x1
c0007330:	eb 59                	jmp    c000738b <f_forward+0x1d4>
c0007332:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0007335:	e9 23 ff ff ff       	jmp    c000725d <f_forward+0xa6>
c000733a:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c000733e:	79 20                	jns    c0007360 <f_forward+0x1a9>
c0007340:	83 ec 0c             	sub    esp,0xc
c0007343:	6a 01                	push   0x1
c0007345:	52                   	push   edx
c0007346:	50                   	push   eax
c0007347:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000734b:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000734f:	50                   	push   eax
c0007350:	e8 fb a8 ff ff       	call   c0001c50 <disk_write>
c0007355:	83 c4 20             	add    esp,0x20
c0007358:	85 c0                	test   eax,eax
c000735a:	75 cb                	jne    c0007327 <f_forward+0x170>
c000735c:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0007360:	83 ec 0c             	sub    esp,0xc
c0007363:	6a 01                	push   0x1
c0007365:	57                   	push   edi
c0007366:	56                   	push   esi
c0007367:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000736b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000736f:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0007373:	50                   	push   eax
c0007374:	e8 c1 a8 ff ff       	call   c0001c3a <disk_read>
c0007379:	83 c4 20             	add    esp,0x20
c000737c:	85 c0                	test   eax,eax
c000737e:	0f 84 1c ff ff ff    	je     c00072a0 <f_forward+0xe9>
c0007384:	eb a1                	jmp    c0007327 <f_forward+0x170>
c0007386:	bd 07 00 00 00       	mov    ebp,0x7
c000738b:	83 c4 2c             	add    esp,0x2c
c000738e:	89 e8                	mov    eax,ebp
c0007390:	5b                   	pop    ebx
c0007391:	5e                   	pop    esi
c0007392:	5f                   	pop    edi
c0007393:	5d                   	pop    ebp
c0007394:	c3                   	ret    

c0007395 <f_mkfs>:
c0007395:	55                   	push   ebp
c0007396:	57                   	push   edi
c0007397:	56                   	push   esi
c0007398:	53                   	push   ebx
c0007399:	bb 0b 00 00 00       	mov    ebx,0xb
c000739e:	81 ec 9c 00 00 00    	sub    esp,0x9c
c00073a4:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c00073ab:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c00073b2:	e8 b0 ae ff ff       	call   c0002267 <get_ldnumber>
c00073b7:	85 c0                	test   eax,eax
c00073b9:	0f 88 ec 10 00 00    	js     c00084ab <f_mkfs+0x1116>
c00073bf:	8b 14 85 00 ee 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd1200]
c00073c6:	85 d2                	test   edx,edx
c00073c8:	74 03                	je     c00073cd <f_mkfs+0x38>
c00073ca:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00073cd:	85 f6                	test   esi,esi
c00073cf:	75 05                	jne    c00073d6 <f_mkfs+0x41>
c00073d1:	be a0 9c 02 c0       	mov    esi,0xc0029ca0
c00073d6:	83 ec 0c             	sub    esp,0xc
c00073d9:	0f b6 c0             	movzx  eax,al
c00073dc:	bb 03 00 00 00       	mov    ebx,0x3
c00073e1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00073e5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00073e9:	e8 49 a8 ff ff       	call   c0001c37 <disk_initialize>
c00073ee:	83 c4 10             	add    esp,0x10
c00073f1:	a8 01                	test   al,0x1
c00073f3:	0f 85 b2 10 00 00    	jne    c00084ab <f_mkfs+0x1116>
c00073f9:	bb 0a 00 00 00       	mov    ebx,0xa
c00073fe:	a8 04                	test   al,0x4
c0007400:	0f 85 a5 10 00 00    	jne    c00084ab <f_mkfs+0x1116>
c0007406:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0007409:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c000740d:	85 c0                	test   eax,eax
c000740f:	75 20                	jne    c0007431 <f_mkfs+0x9c>
c0007411:	51                   	push   ecx
c0007412:	8d 44 24 78          	lea    eax,[esp+0x78]
c0007416:	50                   	push   eax
c0007417:	6a 03                	push   0x3
c0007419:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000741d:	e8 44 a8 ff ff       	call   c0001c66 <disk_ioctl>
c0007422:	83 c4 10             	add    esp,0x10
c0007425:	85 c0                	test   eax,eax
c0007427:	74 08                	je     c0007431 <f_mkfs+0x9c>
c0007429:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c0007431:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007435:	8d 42 ff             	lea    eax,[edx-0x1]
c0007438:	3d ff 7f 00 00       	cmp    eax,0x7fff
c000743d:	77 04                	ja     c0007443 <f_mkfs+0xae>
c000743f:	85 c2                	test   edx,eax
c0007441:	74 08                	je     c000744b <f_mkfs+0xb6>
c0007443:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c000744b:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c000744e:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c0007452:	48                   	dec    eax
c0007453:	3c 01                	cmp    al,0x1
c0007455:	76 05                	jbe    c000745c <f_mkfs+0xc7>
c0007457:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c000745c:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000745f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007463:	48                   	dec    eax
c0007464:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007469:	77 07                	ja     c0007472 <f_mkfs+0xdd>
c000746b:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c0007470:	74 08                	je     c000747a <f_mkfs+0xe5>
c0007472:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c000747a:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c000747d:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c0007483:	77 07                	ja     c000748c <f_mkfs+0xf7>
c0007485:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007488:	85 d8                	test   eax,ebx
c000748a:	74 02                	je     c000748e <f_mkfs+0xf9>
c000748c:	31 db                	xor    ebx,ebx
c000748e:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c0007499:	77 0a                	ja     c00074a5 <f_mkfs+0x110>
c000749b:	bb 11 00 00 00       	mov    ebx,0x11
c00074a0:	e9 06 10 00 00       	jmp    c00084ab <f_mkfs+0x1116>
c00074a5:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c00074ac:	8b 36                	mov    esi,DWORD PTR [esi]
c00074ae:	85 ed                	test   ebp,ebp
c00074b0:	75 1e                	jne    c00074d0 <f_mkfs+0x13b>
c00074b2:	83 ec 0c             	sub    esp,0xc
c00074b5:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c00074bc:	25 00 fe ff ff       	and    eax,0xfffffe00
c00074c1:	50                   	push   eax
c00074c2:	e8 f1 0f 00 00       	call   c00084b8 <ff_memalloc>
c00074c7:	83 c4 10             	add    esp,0x10
c00074ca:	89 c5                	mov    ebp,eax
c00074cc:	85 c0                	test   eax,eax
c00074ce:	74 cb                	je     c000749b <f_mkfs+0x106>
c00074d0:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c00074d8:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c00074e0:	52                   	push   edx
c00074e1:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c00074e5:	50                   	push   eax
c00074e6:	6a 01                	push   0x1
c00074e8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00074ec:	e8 75 a7 ff ff       	call   c0001c66 <disk_ioctl>
c00074f1:	83 c4 10             	add    esp,0x10
c00074f4:	85 c0                	test   eax,eax
c00074f6:	0f 85 4a 0f 00 00    	jne    c0008446 <f_mkfs+0x10b1>
c00074fc:	89 f1                	mov    ecx,esi
c00074fe:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0007506:	83 e1 0f             	and    ecx,0xf
c0007509:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007511:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c0007515:	83 e6 08             	and    esi,0x8
c0007518:	75 56                	jne    c0007570 <f_mkfs+0x1db>
c000751a:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c000751e:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c0007522:	83 ff 00             	cmp    edi,0x0
c0007525:	76 20                	jbe    c0007547 <f_mkfs+0x1b2>
c0007527:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c000752c:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c0007534:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c000753a:	83 d7 ff             	adc    edi,0xffffffff
c000753d:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007541:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007545:	eb 21                	jmp    c0007568 <f_mkfs+0x1d3>
c0007547:	ba 3f 00 00 00       	mov    edx,0x3f
c000754c:	39 f2                	cmp    edx,esi
c000754e:	19 f8                	sbb    eax,edi
c0007550:	73 1e                	jae    c0007570 <f_mkfs+0x1db>
c0007552:	83 c6 c1             	add    esi,0xffffffc1
c0007555:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c000755d:	83 d7 ff             	adc    edi,0xffffffff
c0007560:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007564:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007568:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007570:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0007574:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0007578:	89 04 24             	mov    DWORD PTR [esp],eax
c000757b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000757f:	31 c0                	xor    eax,eax
c0007581:	ba 7f 00 00 00       	mov    edx,0x7f
c0007586:	89 c7                	mov    edi,eax
c0007588:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c000758b:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c000758f:	0f 83 c5 0a 00 00    	jae    c000805a <f_mkfs+0xcc5>
c0007595:	89 df                	mov    edi,ebx
c0007597:	c1 ef 09             	shr    edi,0x9
c000759a:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000759e:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c00075a5:	c1 ef 09             	shr    edi,0x9
c00075a8:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c00075ad:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c00075b1:	74 29                	je     c00075dc <f_mkfs+0x247>
c00075b3:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00075b9:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c00075be:	0f 97 c2             	seta   dl
c00075c1:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c00075c4:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00075c8:	0f 92 c0             	setb   al
c00075cb:	08 c2                	or     dl,al
c00075cd:	75 5b                	jne    c000762a <f_mkfs+0x295>
c00075cf:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00075d3:	83 e0 07             	and    eax,0x7
c00075d6:	3c 04                	cmp    al,0x4
c00075d8:	74 50                	je     c000762a <f_mkfs+0x295>
c00075da:	eb 1b                	jmp    c00075f7 <f_mkfs+0x262>
c00075dc:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00075e1:	0f 87 73 0a 00 00    	ja     c000805a <f_mkfs+0xcc5>
c00075e7:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00075ed:	76 08                	jbe    c00075f7 <f_mkfs+0x262>
c00075ef:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c00075f7:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00075fb:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c00075ff:	83 e0 01             	and    eax,0x1
c0007602:	80 e1 02             	and    cl,0x2
c0007605:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c0007609:	74 0d                	je     c0007618 <f_mkfs+0x283>
c000760b:	84 c0                	test   al,al
c000760d:	0f 84 53 09 00 00    	je     c0007f66 <f_mkfs+0xbd1>
c0007613:	e9 12 08 00 00       	jmp    c0007e2a <f_mkfs+0xa95>
c0007618:	bb 13 00 00 00       	mov    ebx,0x13
c000761d:	84 c0                	test   al,al
c000761f:	0f 85 05 08 00 00    	jne    c0007e2a <f_mkfs+0xa95>
c0007625:	e9 39 0e 00 00       	jmp    c0008463 <f_mkfs+0x10ce>
c000762a:	31 c0                	xor    eax,eax
c000762c:	ba ff 0f 00 00       	mov    edx,0xfff
c0007631:	89 c7                	mov    edi,eax
c0007633:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007636:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c000763a:	0f 83 1a 0a 00 00    	jae    c000805a <f_mkfs+0xcc5>
c0007640:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c0007646:	77 39                	ja     c0007681 <f_mkfs+0x2ec>
c0007648:	ba ff ff 07 00       	mov    edx,0x7ffff
c000764d:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0007655:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007658:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000765c:	73 08                	jae    c0007666 <f_mkfs+0x2d1>
c000765e:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c0007666:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c000766b:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000766e:	b8 00 00 00 00       	mov    eax,0x0
c0007673:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007677:	73 08                	jae    c0007681 <f_mkfs+0x2ec>
c0007679:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c0007681:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007685:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007689:	83 c0 20             	add    eax,0x20
c000768c:	83 d2 00             	adc    edx,0x0
c000768f:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007693:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0007697:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000769b:	31 d2                	xor    edx,edx
c000769d:	31 ff                	xor    edi,edi
c000769f:	52                   	push   edx
c00076a0:	89 fb                	mov    ebx,edi
c00076a2:	50                   	push   eax
c00076a3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00076a7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00076ab:	e8 24 fb 01 00       	call   c00271d4 <__udivdi3>
c00076b0:	83 c4 10             	add    esp,0x10
c00076b3:	c1 e0 02             	shl    eax,0x2
c00076b6:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c00076ba:	05 07 02 00 00       	add    eax,0x207
c00076bf:	89 f1                	mov    ecx,esi
c00076c1:	c1 e8 09             	shr    eax,0x9
c00076c4:	83 c1 ff             	add    ecx,0xffffffff
c00076c7:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c00076cb:	83 d3 ff             	adc    ebx,0xffffffff
c00076ce:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00076d2:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c00076d6:	31 d2                	xor    edx,edx
c00076d8:	01 c8                	add    eax,ecx
c00076da:	11 da                	adc    edx,ebx
c00076dc:	89 c1                	mov    ecx,eax
c00076de:	f7 de                	neg    esi
c00076e0:	89 d0                	mov    eax,edx
c00076e2:	83 d7 00             	adc    edi,0x0
c00076e5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00076e9:	f7 df                	neg    edi
c00076eb:	21 f1                	and    ecx,esi
c00076ed:	21 f8                	and    eax,edi
c00076ef:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00076f3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00076f7:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00076fb:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00076ff:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c0007703:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007706:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c000770a:	0f ac d0 01          	shrd   eax,edx,0x1
c000770e:	89 df                	mov    edi,ebx
c0007710:	d1 ea                	shr    edx,1
c0007712:	39 c1                	cmp    ecx,eax
c0007714:	19 d7                	sbb    edi,edx
c0007716:	0f 83 3e 09 00 00    	jae    c000805a <f_mkfs+0xcc5>
c000771c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007720:	31 d2                	xor    edx,edx
c0007722:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c0007726:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000772a:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000772e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007731:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c0007735:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c0007739:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c000773d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007741:	83 f8 0f             	cmp    eax,0xf
c0007744:	0f 86 10 09 00 00    	jbe    c000805a <f_mkfs+0xcc5>
c000774a:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c0007752:	0f 87 02 09 00 00    	ja     c000805a <f_mkfs+0xcc5>
c0007758:	31 d2                	xor    edx,edx
c000775a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000775e:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0007766:	83 c0 07             	add    eax,0x7
c0007769:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c0007771:	c1 e8 03             	shr    eax,0x3
c0007774:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000777b:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000777f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007783:	c1 e0 09             	shl    eax,0x9
c0007786:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000778a:	48                   	dec    eax
c000778b:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000778f:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c0007793:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c0007797:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c000779b:	31 d2                	xor    edx,edx
c000779d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00077a1:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00077a8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00077ac:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c00077b1:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00077b5:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00077b9:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00077bd:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c00077c1:	31 ff                	xor    edi,edi
c00077c3:	31 f6                	xor    esi,esi
c00077c5:	31 db                	xor    ebx,ebx
c00077c7:	85 ff                	test   edi,edi
c00077c9:	74 05                	je     c00077d0 <f_mkfs+0x43b>
c00077cb:	4f                   	dec    edi
c00077cc:	74 44                	je     c0007812 <f_mkfs+0x47d>
c00077ce:	eb 4f                	jmp    c000781f <f_mkfs+0x48a>
c00077d0:	83 ec 0c             	sub    esp,0xc
c00077d3:	0f b7 c3             	movzx  eax,bx
c00077d6:	50                   	push   eax
c00077d7:	e8 05 0e 00 00       	call   c00085e1 <ff_wtoupper>
c00077dc:	83 c4 10             	add    esp,0x10
c00077df:	89 c1                	mov    ecx,eax
c00077e1:	8d 53 01             	lea    edx,[ebx+0x1]
c00077e4:	66 39 c3             	cmp    bx,ax
c00077e7:	75 3e                	jne    c0007827 <f_mkfs+0x492>
c00077e9:	be 01 00 00 00       	mov    esi,0x1
c00077ee:	89 df                	mov    edi,ebx
c00077f0:	66 01 f7             	add    di,si
c00077f3:	75 07                	jne    c00077fc <f_mkfs+0x467>
c00077f5:	83 fe 7f             	cmp    esi,0x7f
c00077f8:	77 31                	ja     c000782b <f_mkfs+0x496>
c00077fa:	eb 16                	jmp    c0007812 <f_mkfs+0x47d>
c00077fc:	83 ec 0c             	sub    esp,0xc
c00077ff:	0f b7 ff             	movzx  edi,di
c0007802:	57                   	push   edi
c0007803:	e8 d9 0d 00 00       	call   c00085e1 <ff_wtoupper>
c0007808:	83 c4 10             	add    esp,0x10
c000780b:	39 c7                	cmp    edi,eax
c000780d:	75 e6                	jne    c00077f5 <f_mkfs+0x460>
c000780f:	46                   	inc    esi
c0007810:	eb dc                	jmp    c00077ee <f_mkfs+0x459>
c0007812:	31 c0                	xor    eax,eax
c0007814:	89 d9                	mov    ecx,ebx
c0007816:	4e                   	dec    esi
c0007817:	0f 95 c0             	setne  al
c000781a:	43                   	inc    ebx
c000781b:	89 c7                	mov    edi,eax
c000781d:	eb 14                	jmp    c0007833 <f_mkfs+0x49e>
c000781f:	89 f1                	mov    ecx,esi
c0007821:	01 f3                	add    ebx,esi
c0007823:	31 ff                	xor    edi,edi
c0007825:	eb 0c                	jmp    c0007833 <f_mkfs+0x49e>
c0007827:	89 d3                	mov    ebx,edx
c0007829:	eb 08                	jmp    c0007833 <f_mkfs+0x49e>
c000782b:	bf 02 00 00 00       	mov    edi,0x2
c0007830:	83 c9 ff             	or     ecx,0xffffffff
c0007833:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007837:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000783a:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c000783e:	0f b6 c1             	movzx  eax,cl
c0007841:	e8 3a a9 ff ff       	call   c0002180 <xsum32>
c0007846:	66 c1 e9 08          	shr    cx,0x8
c000784a:	89 c2                	mov    edx,eax
c000784c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000784f:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c0007853:	0f b7 c1             	movzx  eax,cx
c0007856:	e8 25 a9 ff ff       	call   c0002180 <xsum32>
c000785b:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c0007860:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007864:	66 85 db             	test   bx,bx
c0007867:	74 1f                	je     c0007888 <f_mkfs+0x4f3>
c0007869:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000786c:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c0007873:	83 c0 02             	add    eax,0x2
c0007876:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c000787c:	39 c2                	cmp    edx,eax
c000787e:	74 08                	je     c0007888 <f_mkfs+0x4f3>
c0007880:	89 04 24             	mov    DWORD PTR [esp],eax
c0007883:	e9 3f ff ff ff       	jmp    c00077c7 <f_mkfs+0x432>
c0007888:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000788b:	83 ec 0c             	sub    esp,0xc
c000788e:	05 01 02 00 00       	add    eax,0x201
c0007893:	c1 e8 09             	shr    eax,0x9
c0007896:	50                   	push   eax
c0007897:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000789b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000789f:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00078a3:	55                   	push   ebp
c00078a4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00078a8:	e8 a3 a3 ff ff       	call   c0001c50 <disk_write>
c00078ad:	83 c4 20             	add    esp,0x20
c00078b0:	85 c0                	test   eax,eax
c00078b2:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00078b5:	0f 85 8b 0b 00 00    	jne    c0008446 <f_mkfs+0x10b1>
c00078bb:	89 d0                	mov    eax,edx
c00078bd:	31 d2                	xor    edx,edx
c00078bf:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c00078c3:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c00078c7:	66 85 db             	test   bx,bx
c00078ca:	74 04                	je     c00078d0 <f_mkfs+0x53b>
c00078cc:	31 c0                	xor    eax,eax
c00078ce:	eb b0                	jmp    c0007880 <f_mkfs+0x4eb>
c00078d0:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00078d4:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c00078d8:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c00078dc:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c00078e2:	31 d2                	xor    edx,edx
c00078e4:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c00078ef:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00078f3:	c1 eb 09             	shr    ebx,0x9
c00078f6:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c00078fd:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007901:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007905:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007909:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000790d:	8d 70 01             	lea    esi,[eax+0x1]
c0007910:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007914:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007918:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c000791f:	31 d2                	xor    edx,edx
c0007921:	25 00 fe ff ff       	and    eax,0xfffffe00
c0007926:	89 04 24             	mov    DWORD PTR [esp],eax
c0007929:	89 c1                	mov    ecx,eax
c000792b:	89 e8                	mov    eax,ebp
c000792d:	e8 e7 a3 ff ff       	call   c0001d19 <mem_set>
c0007932:	31 c0                	xor    eax,eax
c0007934:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007937:	76 10                	jbe    c0007949 <f_mkfs+0x5b4>
c0007939:	83 fe 07             	cmp    esi,0x7
c000793c:	76 0b                	jbe    c0007949 <f_mkfs+0x5b4>
c000793e:	40                   	inc    eax
c000793f:	83 ee 08             	sub    esi,0x8
c0007942:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c0007947:	eb eb                	jmp    c0007934 <f_mkfs+0x59f>
c0007949:	b2 01                	mov    dl,0x1
c000794b:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c000794f:	85 f6                	test   esi,esi
c0007951:	74 0c                	je     c000795f <f_mkfs+0x5ca>
c0007953:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007956:	76 07                	jbe    c000795f <f_mkfs+0x5ca>
c0007958:	08 11                	or     BYTE PTR [ecx],dl
c000795a:	4e                   	dec    esi
c000795b:	d1 e2                	shl    edx,1
c000795d:	eb f0                	jmp    c000794f <f_mkfs+0x5ba>
c000795f:	89 df                	mov    edi,ebx
c0007961:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0007965:	76 04                	jbe    c000796b <f_mkfs+0x5d6>
c0007967:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000796b:	83 ec 0c             	sub    esp,0xc
c000796e:	57                   	push   edi
c000796f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007973:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007977:	55                   	push   ebp
c0007978:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000797c:	e8 cf a2 ff ff       	call   c0001c50 <disk_write>
c0007981:	83 c4 20             	add    esp,0x20
c0007984:	85 c0                	test   eax,eax
c0007986:	0f 85 ba 0a 00 00    	jne    c0008446 <f_mkfs+0x10b1>
c000798c:	31 d2                	xor    edx,edx
c000798e:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c0007992:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c0007996:	29 fb                	sub    ebx,edi
c0007998:	0f 85 7a ff ff ff    	jne    c0007918 <f_mkfs+0x583>
c000799e:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00079a2:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00079aa:	31 f6                	xor    esi,esi
c00079ac:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00079b0:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00079b3:	31 d2                	xor    edx,edx
c00079b5:	89 e8                	mov    eax,ebp
c00079b7:	e8 5d a3 ff ff       	call   c0001d19 <mem_set>
c00079bc:	31 c9                	xor    ecx,ecx
c00079be:	85 db                	test   ebx,ebx
c00079c0:	75 40                	jne    c0007a02 <f_mkfs+0x66d>
c00079c2:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00079c7:	89 e8                	mov    eax,ebp
c00079c9:	bb 02 00 00 00       	mov    ebx,0x2
c00079ce:	e8 28 a3 ff ff       	call   c0001cfb <st_dword>
c00079d3:	8d 45 04             	lea    eax,[ebp+0x4]
c00079d6:	83 ca ff             	or     edx,0xffffffff
c00079d9:	e8 1d a3 ff ff       	call   c0001cfb <st_dword>
c00079de:	b9 08 00 00 00       	mov    ecx,0x8
c00079e3:	eb 1d                	jmp    c0007a02 <f_mkfs+0x66d>
c00079e5:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00079e8:	76 3b                	jbe    c0007a25 <f_mkfs+0x690>
c00079ea:	43                   	inc    ebx
c00079eb:	83 fe 01             	cmp    esi,0x1
c00079ee:	89 da                	mov    edx,ebx
c00079f0:	77 03                	ja     c00079f5 <f_mkfs+0x660>
c00079f2:	83 ca ff             	or     edx,0xffffffff
c00079f5:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c00079f9:	4e                   	dec    esi
c00079fa:	e8 fc a2 ff ff       	call   c0001cfb <st_dword>
c00079ff:	83 c1 04             	add    ecx,0x4
c0007a02:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007a06:	85 f6                	test   esi,esi
c0007a08:	75 db                	jne    c00079e5 <f_mkfs+0x650>
c0007a0a:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c0007a0f:	77 14                	ja     c0007a25 <f_mkfs+0x690>
c0007a11:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c0007a15:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c0007a1c:	85 f6                	test   esi,esi
c0007a1e:	74 05                	je     c0007a25 <f_mkfs+0x690>
c0007a20:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0007a23:	77 dd                	ja     c0007a02 <f_mkfs+0x66d>
c0007a25:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0007a29:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007a2d:	39 cf                	cmp    edi,ecx
c0007a2f:	76 02                	jbe    c0007a33 <f_mkfs+0x69e>
c0007a31:	89 cf                	mov    edi,ecx
c0007a33:	83 ec 0c             	sub    esp,0xc
c0007a36:	57                   	push   edi
c0007a37:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007a3b:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007a3f:	55                   	push   ebp
c0007a40:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a44:	e8 07 a2 ff ff       	call   c0001c50 <disk_write>
c0007a49:	83 c4 20             	add    esp,0x20
c0007a4c:	85 c0                	test   eax,eax
c0007a4e:	0f 85 f2 09 00 00    	jne    c0008446 <f_mkfs+0x10b1>
c0007a54:	31 d2                	xor    edx,edx
c0007a56:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c0007a5a:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007a5e:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c0007a62:	0f 85 48 ff ff ff    	jne    c00079b0 <f_mkfs+0x61b>
c0007a68:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007a6b:	31 d2                	xor    edx,edx
c0007a6d:	89 e8                	mov    eax,ebp
c0007a6f:	31 ff                	xor    edi,edi
c0007a71:	e8 a3 a2 ff ff       	call   c0001d19 <mem_set>
c0007a76:	8d 45 34             	lea    eax,[ebp+0x34]
c0007a79:	ba 02 00 00 00       	mov    edx,0x2
c0007a7e:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c0007a82:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007a86:	e8 70 a2 ff ff       	call   c0001cfb <st_dword>
c0007a8b:	8d 45 38             	lea    eax,[ebp+0x38]
c0007a8e:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007a92:	e8 64 a2 ff ff       	call   c0001cfb <st_dword>
c0007a97:	8d 45 44             	lea    eax,[ebp+0x44]
c0007a9a:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007a9e:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007aa2:	e8 54 a2 ff ff       	call   c0001cfb <st_dword>
c0007aa7:	8d 45 54             	lea    eax,[ebp+0x54]
c0007aaa:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0007aae:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007ab2:	83 c2 02             	add    edx,0x2
c0007ab5:	e8 41 a2 ff ff       	call   c0001cfb <st_dword>
c0007aba:	8d 45 58             	lea    eax,[ebp+0x58]
c0007abd:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0007ac1:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007ac5:	e8 31 a2 ff ff       	call   c0001cfb <st_dword>
c0007aca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007ace:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007ad3:	89 c6                	mov    esi,eax
c0007ad5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007ad9:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007add:	89 04 24             	mov    DWORD PTR [esp],eax
c0007ae0:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007ae4:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007ae7:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007aeb:	39 cb                	cmp    ebx,ecx
c0007aed:	76 02                	jbe    c0007af1 <f_mkfs+0x75c>
c0007aef:	89 cb                	mov    ebx,ecx
c0007af1:	83 ec 0c             	sub    esp,0xc
c0007af4:	53                   	push   ebx
c0007af5:	57                   	push   edi
c0007af6:	56                   	push   esi
c0007af7:	55                   	push   ebp
c0007af8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007afc:	e8 4f a1 ff ff       	call   c0001c50 <disk_write>
c0007b01:	83 c4 20             	add    esp,0x20
c0007b04:	85 c0                	test   eax,eax
c0007b06:	0f 85 3a 09 00 00    	jne    c0008446 <f_mkfs+0x10b1>
c0007b0c:	31 d2                	xor    edx,edx
c0007b0e:	b9 00 02 00 00       	mov    ecx,0x200
c0007b13:	89 e8                	mov    eax,ebp
c0007b15:	e8 ff a1 ff ff       	call   c0001d19 <mem_set>
c0007b1a:	31 d2                	xor    edx,edx
c0007b1c:	01 de                	add    esi,ebx
c0007b1e:	11 d7                	adc    edi,edx
c0007b20:	29 1c 24             	sub    DWORD PTR [esp],ebx
c0007b23:	75 bf                	jne    c0007ae4 <f_mkfs+0x74f>
c0007b25:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007b29:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0007b2d:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c0007b35:	b9 00 02 00 00       	mov    ecx,0x200
c0007b3a:	31 d2                	xor    edx,edx
c0007b3c:	89 e8                	mov    eax,ebp
c0007b3e:	e8 d6 a1 ff ff       	call   c0001d19 <mem_set>
c0007b43:	b9 0b 00 00 00       	mov    ecx,0xb
c0007b48:	ba 80 9d 02 c0       	mov    edx,0xc0029d80
c0007b4d:	89 e8                	mov    eax,ebp
c0007b4f:	e8 b0 a1 ff ff       	call   c0001d04 <mem_cpy>
c0007b54:	8d 45 40             	lea    eax,[ebp+0x40]
c0007b57:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007b5b:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007b5f:	e8 9a a1 ff ff       	call   c0001cfe <st_qword>
c0007b64:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0007b68:	8d 45 48             	lea    eax,[ebp+0x48]
c0007b6b:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007b6f:	e8 8a a1 ff ff       	call   c0001cfe <st_qword>
c0007b74:	8d 45 50             	lea    eax,[ebp+0x50]
c0007b77:	ba 20 00 00 00       	mov    edx,0x20
c0007b7c:	e8 7a a1 ff ff       	call   c0001cfb <st_dword>
c0007b81:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007b85:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007b89:	e8 6d a1 ff ff       	call   c0001cfb <st_dword>
c0007b8e:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007b92:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007b96:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007b9a:	e8 5c a1 ff ff       	call   c0001cfb <st_dword>
c0007b9f:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007ba2:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007ba6:	e8 50 a1 ff ff       	call   c0001cfb <st_dword>
c0007bab:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007baf:	8d 50 02             	lea    edx,[eax+0x2]
c0007bb2:	8d 45 60             	lea    eax,[ebp+0x60]
c0007bb5:	e8 41 a1 ff ff       	call   c0001cfb <st_dword>
c0007bba:	8d 45 64             	lea    eax,[ebp+0x64]
c0007bbd:	ba 00 00 21 50       	mov    edx,0x50210000
c0007bc2:	e8 34 a1 ff ff       	call   c0001cfb <st_dword>
c0007bc7:	8d 45 68             	lea    eax,[ebp+0x68]
c0007bca:	ba 00 01 00 00       	mov    edx,0x100
c0007bcf:	e8 23 a1 ff ff       	call   c0001cf7 <st_word>
c0007bd4:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007bd8:	b8 0a 00 00 00       	mov    eax,0xa
c0007bdd:	48                   	dec    eax
c0007bde:	74 05                	je     c0007be5 <f_mkfs+0x850>
c0007be0:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c0007be3:	eb f8                	jmp    c0007bdd <f_mkfs+0x848>
c0007be5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007be9:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007bed:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007bf1:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007bf5:	74 05                	je     c0007bfc <f_mkfs+0x867>
c0007bf7:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007bfa:	eb f5                	jmp    c0007bf1 <f_mkfs+0x85c>
c0007bfc:	8d 45 78             	lea    eax,[ebp+0x78]
c0007bff:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007c04:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007c0a:	31 db                	xor    ebx,ebx
c0007c0c:	e8 e6 a0 ff ff       	call   c0001cf7 <st_word>
c0007c11:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007c17:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007c1c:	89 04 24             	mov    DWORD PTR [esp],eax
c0007c1f:	e8 d3 a0 ff ff       	call   c0001cf7 <st_word>
c0007c24:	31 c9                	xor    ecx,ecx
c0007c26:	8d 41 96             	lea    eax,[ecx-0x6a]
c0007c29:	83 f8 01             	cmp    eax,0x1
c0007c2c:	76 13                	jbe    c0007c41 <f_mkfs+0x8ac>
c0007c2e:	83 f9 70             	cmp    ecx,0x70
c0007c31:	74 0e                	je     c0007c41 <f_mkfs+0x8ac>
c0007c33:	89 da                	mov    edx,ebx
c0007c35:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007c3a:	e8 41 a5 ff ff       	call   c0002180 <xsum32>
c0007c3f:	89 c3                	mov    ebx,eax
c0007c41:	41                   	inc    ecx
c0007c42:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007c48:	75 dc                	jne    c0007c26 <f_mkfs+0x891>
c0007c4a:	89 f0                	mov    eax,esi
c0007c4c:	89 fa                	mov    edx,edi
c0007c4e:	83 c0 01             	add    eax,0x1
c0007c51:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007c55:	83 d2 00             	adc    edx,0x0
c0007c58:	83 ec 0c             	sub    esp,0xc
c0007c5b:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007c5f:	6a 01                	push   0x1
c0007c61:	57                   	push   edi
c0007c62:	56                   	push   esi
c0007c63:	55                   	push   ebp
c0007c64:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c68:	e8 e3 9f ff ff       	call   c0001c50 <disk_write>
c0007c6d:	83 c4 20             	add    esp,0x20
c0007c70:	85 c0                	test   eax,eax
c0007c72:	0f 85 ce 07 00 00    	jne    c0008446 <f_mkfs+0x10b1>
c0007c78:	31 d2                	xor    edx,edx
c0007c7a:	b9 00 02 00 00       	mov    ecx,0x200
c0007c7f:	89 e8                	mov    eax,ebp
c0007c81:	e8 93 a0 ff ff       	call   c0001d19 <mem_set>
c0007c86:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007c8b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007c8e:	e8 64 a0 ff ff       	call   c0001cf7 <st_word>
c0007c93:	89 f0                	mov    eax,esi
c0007c95:	89 fa                	mov    edx,edi
c0007c97:	83 c0 09             	add    eax,0x9
c0007c9a:	83 d2 00             	adc    edx,0x0
c0007c9d:	89 04 24             	mov    DWORD PTR [esp],eax
c0007ca0:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007ca4:	31 c9                	xor    ecx,ecx
c0007ca6:	41                   	inc    ecx
c0007ca7:	89 da                	mov    edx,ebx
c0007ca9:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007cae:	e8 cd a4 ff ff       	call   c0002180 <xsum32>
c0007cb3:	89 c3                	mov    ebx,eax
c0007cb5:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007cbb:	75 e9                	jne    c0007ca6 <f_mkfs+0x911>
c0007cbd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007cc1:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007cc5:	83 c0 01             	add    eax,0x1
c0007cc8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007ccc:	83 d2 00             	adc    edx,0x0
c0007ccf:	83 ec 0c             	sub    esp,0xc
c0007cd2:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007cd6:	6a 01                	push   0x1
c0007cd8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007cdc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007ce0:	55                   	push   ebp
c0007ce1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007ce5:	e8 66 9f ff ff       	call   c0001c50 <disk_write>
c0007cea:	83 c4 20             	add    esp,0x20
c0007ced:	85 c0                	test   eax,eax
c0007cef:	0f 85 51 07 00 00    	jne    c0008446 <f_mkfs+0x10b1>
c0007cf5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007cf9:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007cfd:	75 09                	jne    c0007d08 <f_mkfs+0x973>
c0007cff:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007d02:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007d06:	74 12                	je     c0007d1a <f_mkfs+0x985>
c0007d08:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007d0c:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007d10:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007d14:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007d18:	eb 8a                	jmp    c0007ca4 <f_mkfs+0x90f>
c0007d1a:	31 d2                	xor    edx,edx
c0007d1c:	b9 00 02 00 00       	mov    ecx,0x200
c0007d21:	89 e8                	mov    eax,ebp
c0007d23:	e8 f1 9f ff ff       	call   c0001d19 <mem_set>
c0007d28:	83 c6 0b             	add    esi,0xb
c0007d2b:	83 d7 00             	adc    edi,0x0
c0007d2e:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007d32:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007d36:	31 c9                	xor    ecx,ecx
c0007d38:	41                   	inc    ecx
c0007d39:	89 da                	mov    edx,ebx
c0007d3b:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007d40:	e8 3b a4 ff ff       	call   c0002180 <xsum32>
c0007d45:	89 c3                	mov    ebx,eax
c0007d47:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007d4d:	75 e9                	jne    c0007d38 <f_mkfs+0x9a3>
c0007d4f:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007d52:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007d56:	83 c6 01             	add    esi,0x1
c0007d59:	83 d7 00             	adc    edi,0x0
c0007d5c:	83 ec 0c             	sub    esp,0xc
c0007d5f:	6a 01                	push   0x1
c0007d61:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d65:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d69:	55                   	push   ebp
c0007d6a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d6e:	e8 dd 9e ff ff       	call   c0001c50 <disk_write>
c0007d73:	83 c4 20             	add    esp,0x20
c0007d76:	85 c0                	test   eax,eax
c0007d78:	0f 85 c8 06 00 00    	jne    c0008446 <f_mkfs+0x10b1>
c0007d7e:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007d82:	75 06                	jne    c0007d8a <f_mkfs+0x9f5>
c0007d84:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007d88:	74 09                	je     c0007d93 <f_mkfs+0x9fe>
c0007d8a:	89 34 24             	mov    DWORD PTR [esp],esi
c0007d8d:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007d91:	eb a3                	jmp    c0007d36 <f_mkfs+0x9a1>
c0007d93:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007d97:	89 da                	mov    edx,ebx
c0007d99:	01 e8                	add    eax,ebp
c0007d9b:	e8 5b 9f ff ff       	call   c0001cfb <st_dword>
c0007da0:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007da5:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007dad:	75 e4                	jne    c0007d93 <f_mkfs+0x9fe>
c0007daf:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007db2:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007db6:	83 c6 02             	add    esi,0x2
c0007db9:	83 d7 00             	adc    edi,0x0
c0007dbc:	83 ec 0c             	sub    esp,0xc
c0007dbf:	6a 01                	push   0x1
c0007dc1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007dc5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007dc9:	55                   	push   ebp
c0007dca:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007dce:	e8 7d 9e ff ff       	call   c0001c50 <disk_write>
c0007dd3:	83 c4 20             	add    esp,0x20
c0007dd6:	85 c0                	test   eax,eax
c0007dd8:	0f 85 68 06 00 00    	jne    c0008446 <f_mkfs+0x10b1>
c0007dde:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007de3:	74 0d                	je     c0007df2 <f_mkfs+0xa5d>
c0007de5:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007ded:	e9 43 fd ff ff       	jmp    c0007b35 <f_mkfs+0x7a0>
c0007df2:	b1 07                	mov    cl,0x7
c0007df4:	e9 e3 05 00 00       	jmp    c00083dc <f_mkfs+0x1047>
c0007df9:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007dfe:	0f 85 4f 02 00 00    	jne    c0008053 <f_mkfs+0xcbe>
c0007e04:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007e09:	0f 86 22 02 00 00    	jbe    c0008031 <f_mkfs+0xc9c>
c0007e0f:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007e14:	0f 85 81 06 00 00    	jne    c000849b <f_mkfs+0x1106>
c0007e1a:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007e1d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007e21:	83 f8 40             	cmp    eax,0x40
c0007e24:	0f 87 51 06 00 00    	ja     c000847b <f_mkfs+0x10e6>
c0007e2a:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007e2e:	85 ff                	test   edi,edi
c0007e30:	75 1c                	jne    c0007e4e <f_mkfs+0xab9>
c0007e32:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007e35:	ba 80 9c 02 c0       	mov    edx,0xc0029c80
c0007e3a:	c1 e9 0c             	shr    ecx,0xc
c0007e3d:	bf 01 00 00 00       	mov    edi,0x1
c0007e42:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007e45:	66 85 c0             	test   ax,ax
c0007e48:	0f 85 95 01 00 00    	jne    c0007fe3 <f_mkfs+0xc4e>
c0007e4e:	31 d2                	xor    edx,edx
c0007e50:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007e53:	f7 f7                	div    edi
c0007e55:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007e5a:	0f 86 95 01 00 00    	jbe    c0007ff5 <f_mkfs+0xc60>
c0007e60:	83 c0 02             	add    eax,0x2
c0007e63:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007e68:	01 c0                	add    eax,eax
c0007e6a:	05 ff 01 00 00       	add    eax,0x1ff
c0007e6f:	be 01 00 00 00       	mov    esi,0x1
c0007e74:	c1 e8 09             	shr    eax,0x9
c0007e77:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007e7b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007e7f:	c1 e0 05             	shl    eax,0x5
c0007e82:	c1 e8 09             	shr    eax,0x9
c0007e85:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007e89:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007e8e:	31 d2                	xor    edx,edx
c0007e90:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007e94:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007e98:	89 f0                	mov    eax,esi
c0007e9a:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007e9e:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007ea2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007ea6:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007eaa:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007eae:	31 d2                	xor    edx,edx
c0007eb0:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007eb5:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007eb9:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007ebd:	31 db                	xor    ebx,ebx
c0007ebf:	01 c8                	add    eax,ecx
c0007ec1:	11 da                	adc    edx,ebx
c0007ec3:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007ec7:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007ecb:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007ecf:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007ed3:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007ed7:	f7 da                	neg    edx
c0007ed9:	21 d1                	and    ecx,edx
c0007edb:	29 d9                	sub    ecx,ebx
c0007edd:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007ee2:	0f 85 20 01 00 00    	jne    c0008008 <f_mkfs+0xc73>
c0007ee8:	31 db                	xor    ebx,ebx
c0007eea:	01 ce                	add    esi,ecx
c0007eec:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007ef0:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007ef4:	31 d2                	xor    edx,edx
c0007ef6:	89 f8                	mov    eax,edi
c0007ef8:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007efc:	c1 e0 04             	shl    eax,0x4
c0007eff:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007f03:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007f07:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007f0b:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007f0f:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007f12:	19 d3                	sbb    ebx,edx
c0007f14:	0f 82 40 01 00 00    	jb     c000805a <f_mkfs+0xcc5>
c0007f1a:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007f1d:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007f21:	89 c8                	mov    eax,ecx
c0007f23:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0007f28:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0007f2c:	29 f0                	sub    eax,esi
c0007f2e:	29 d0                	sub    eax,edx
c0007f30:	31 d2                	xor    edx,edx
c0007f32:	f7 f7                	div    edi
c0007f34:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007f39:	89 c3                	mov    ebx,eax
c0007f3b:	0f 85 b8 fe ff ff    	jne    c0007df9 <f_mkfs+0xa64>
c0007f41:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007f46:	0f 87 1d 01 00 00    	ja     c0008069 <f_mkfs+0xcd4>
c0007f4c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007f51:	0f 85 03 01 00 00    	jne    c000805a <f_mkfs+0xcc5>
c0007f57:	83 ff 01             	cmp    edi,0x1
c0007f5a:	0f 86 fa 00 00 00    	jbe    c000805a <f_mkfs+0xcc5>
c0007f60:	d1 ef                	shr    edi,1
c0007f62:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007f66:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007f6a:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007f6d:	85 db                	test   ebx,ebx
c0007f6f:	75 2d                	jne    c0007f9e <f_mkfs+0xc09>
c0007f71:	89 cb                	mov    ebx,ecx
c0007f73:	ba 90 9c 02 c0       	mov    edx,0xc0029c90
c0007f78:	c1 eb 11             	shr    ebx,0x11
c0007f7b:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007f83:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007f86:	66 85 c0             	test   ax,ax
c0007f89:	74 11                	je     c0007f9c <f_mkfs+0xc07>
c0007f8b:	83 c2 02             	add    edx,0x2
c0007f8e:	39 d8                	cmp    eax,ebx
c0007f90:	77 0a                	ja     c0007f9c <f_mkfs+0xc07>
c0007f92:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007f96:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007f9a:	eb e7                	jmp    c0007f83 <f_mkfs+0xbee>
c0007f9c:	31 db                	xor    ebx,ebx
c0007f9e:	31 d2                	xor    edx,edx
c0007fa0:	89 c8                	mov    eax,ecx
c0007fa2:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007fa6:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007fad:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007fb2:	c1 ea 09             	shr    edx,0x9
c0007fb5:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007fba:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007fbe:	0f 87 96 00 00 00    	ja     c000805a <f_mkfs+0xcc5>
c0007fc4:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007fc8:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c0007fd0:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007fd4:	be 20 00 00 00       	mov    esi,0x20
c0007fd9:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0007fde:	e9 a6 fe ff ff       	jmp    c0007e89 <f_mkfs+0xaf4>
c0007fe3:	83 c2 02             	add    edx,0x2
c0007fe6:	39 c8                	cmp    eax,ecx
c0007fe8:	0f 87 60 fe ff ff    	ja     c0007e4e <f_mkfs+0xab9>
c0007fee:	01 ff                	add    edi,edi
c0007ff0:	e9 4d fe ff ff       	jmp    c0007e42 <f_mkfs+0xaad>
c0007ff5:	8d 04 40             	lea    eax,[eax+eax*2]
c0007ff8:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007ffd:	40                   	inc    eax
c0007ffe:	d1 e8                	shr    eax,1
c0008000:	83 c0 03             	add    eax,0x3
c0008003:	e9 62 fe ff ff       	jmp    c0007e6a <f_mkfs+0xad5>
c0008008:	31 d2                	xor    edx,edx
c000800a:	89 c8                	mov    eax,ecx
c000800c:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0008010:	85 d2                	test   edx,edx
c0008012:	74 0c                	je     c0008020 <f_mkfs+0xc8b>
c0008014:	49                   	dec    ecx
c0008015:	46                   	inc    esi
c0008016:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c000801b:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0008020:	89 c8                	mov    eax,ecx
c0008022:	31 d2                	xor    edx,edx
c0008024:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0008028:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c000802c:	e9 c3 fe ff ff       	jmp    c0007ef4 <f_mkfs+0xb5f>
c0008031:	3d f5 0f 00 00       	cmp    eax,0xff5
c0008036:	77 31                	ja     c0008069 <f_mkfs+0xcd4>
c0008038:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000803d:	75 1b                	jne    c000805a <f_mkfs+0xcc5>
c000803f:	8d 04 3f             	lea    eax,[edi+edi*1]
c0008042:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008046:	3d 80 00 00 00       	cmp    eax,0x80
c000804b:	0f 86 d9 fd ff ff    	jbe    c0007e2a <f_mkfs+0xa95>
c0008051:	eb 07                	jmp    c000805a <f_mkfs+0xcc5>
c0008053:	3d f5 0f 00 00       	cmp    eax,0xff5
c0008058:	76 0a                	jbe    c0008064 <f_mkfs+0xccf>
c000805a:	bb 0e 00 00 00       	mov    ebx,0xe
c000805f:	e9 ff 03 00 00       	jmp    c0008463 <f_mkfs+0x10ce>
c0008064:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0008069:	31 d2                	xor    edx,edx
c000806b:	b9 00 02 00 00       	mov    ecx,0x200
c0008070:	89 e8                	mov    eax,ebp
c0008072:	e8 a2 9c ff ff       	call   c0001d19 <mem_set>
c0008077:	b9 0b 00 00 00       	mov    ecx,0xb
c000807c:	ba a2 9d 02 c0       	mov    edx,0xc0029da2
c0008081:	89 e8                	mov    eax,ebp
c0008083:	e8 7c 9c ff ff       	call   c0001d04 <mem_cpy>
c0008088:	8d 45 0b             	lea    eax,[ebp+0xb]
c000808b:	ba 00 02 00 00       	mov    edx,0x200
c0008090:	e8 62 9c ff ff       	call   c0001cf7 <st_word>
c0008095:	89 f8                	mov    eax,edi
c0008097:	0f b7 d6             	movzx  edx,si
c000809a:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c000809d:	8d 45 0e             	lea    eax,[ebp+0xe]
c00080a0:	e8 52 9c ff ff       	call   c0001cf7 <st_word>
c00080a5:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c00080a9:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00080ae:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c00080b1:	75 08                	jne    c00080bb <f_mkfs+0xd26>
c00080b3:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00080bb:	8d 45 11             	lea    eax,[ebp+0x11]
c00080be:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00080c2:	e8 30 9c ff ff       	call   c0001cf7 <st_word>
c00080c7:	b8 ff ff 00 00       	mov    eax,0xffff
c00080cc:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c00080d0:	39 d0                	cmp    eax,edx
c00080d2:	b8 00 00 00 00       	mov    eax,0x0
c00080d7:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c00080db:	72 0a                	jb     c00080e7 <f_mkfs+0xd52>
c00080dd:	8d 45 13             	lea    eax,[ebp+0x13]
c00080e0:	e8 12 9c ff ff       	call   c0001cf7 <st_word>
c00080e5:	eb 08                	jmp    c00080ef <f_mkfs+0xd5a>
c00080e7:	8d 45 20             	lea    eax,[ebp+0x20]
c00080ea:	e8 0c 9c ff ff       	call   c0001cfb <st_dword>
c00080ef:	8d 45 18             	lea    eax,[ebp+0x18]
c00080f2:	ba 3f 00 00 00       	mov    edx,0x3f
c00080f7:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c00080fb:	e8 f7 9b ff ff       	call   c0001cf7 <st_word>
c0008100:	8d 45 1a             	lea    eax,[ebp+0x1a]
c0008103:	ba ff 00 00 00       	mov    edx,0xff
c0008108:	e8 ea 9b ff ff       	call   c0001cf7 <st_word>
c000810d:	8d 45 1c             	lea    eax,[ebp+0x1c]
c0008110:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008114:	e8 e2 9b ff ff       	call   c0001cfb <st_dword>
c0008119:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000811e:	75 57                	jne    c0008177 <f_mkfs+0xde2>
c0008120:	8d 45 43             	lea    eax,[ebp+0x43]
c0008123:	ba 00 00 21 50       	mov    edx,0x50210000
c0008128:	e8 ce 9b ff ff       	call   c0001cfb <st_dword>
c000812d:	8d 45 24             	lea    eax,[ebp+0x24]
c0008130:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0008134:	e8 c2 9b ff ff       	call   c0001cfb <st_dword>
c0008139:	8d 45 2c             	lea    eax,[ebp+0x2c]
c000813c:	ba 02 00 00 00       	mov    edx,0x2
c0008141:	e8 b5 9b ff ff       	call   c0001cfb <st_dword>
c0008146:	8d 45 30             	lea    eax,[ebp+0x30]
c0008149:	ba 01 00 00 00       	mov    edx,0x1
c000814e:	e8 a4 9b ff ff       	call   c0001cf7 <st_word>
c0008153:	8d 45 32             	lea    eax,[ebp+0x32]
c0008156:	ba 06 00 00 00       	mov    edx,0x6
c000815b:	e8 97 9b ff ff       	call   c0001cf7 <st_word>
c0008160:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0008164:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c0008168:	8d 45 47             	lea    eax,[ebp+0x47]
c000816b:	b9 13 00 00 00       	mov    ecx,0x13
c0008170:	ba ae 9d 02 c0       	mov    edx,0xc0029dae
c0008175:	eb 2f                	jmp    c00081a6 <f_mkfs+0xe11>
c0008177:	8d 45 27             	lea    eax,[ebp+0x27]
c000817a:	ba 00 00 21 50       	mov    edx,0x50210000
c000817f:	e8 77 9b ff ff       	call   c0001cfb <st_dword>
c0008184:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c0008189:	8d 45 16             	lea    eax,[ebp+0x16]
c000818c:	e8 66 9b ff ff       	call   c0001cf7 <st_word>
c0008191:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c0008195:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c0008199:	8d 45 2b             	lea    eax,[ebp+0x2b]
c000819c:	b9 13 00 00 00       	mov    ecx,0x13
c00081a1:	ba c2 9d 02 c0       	mov    edx,0xc0029dc2
c00081a6:	e8 59 9b ff ff       	call   c0001d04 <mem_cpy>
c00081ab:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c00081b1:	ba 55 aa 00 00       	mov    edx,0xaa55
c00081b6:	89 f0                	mov    eax,esi
c00081b8:	e8 3a 9b ff ff       	call   c0001cf7 <st_word>
c00081bd:	83 ec 0c             	sub    esp,0xc
c00081c0:	6a 01                	push   0x1
c00081c2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00081c6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00081ca:	55                   	push   ebp
c00081cb:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00081cf:	e8 7c 9a ff ff       	call   c0001c50 <disk_write>
c00081d4:	83 c4 20             	add    esp,0x20
c00081d7:	85 c0                	test   eax,eax
c00081d9:	0f 85 67 02 00 00    	jne    c0008446 <f_mkfs+0x10b1>
c00081df:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00081e4:	0f 85 b7 00 00 00    	jne    c00082a1 <f_mkfs+0xf0c>
c00081ea:	83 ec 0c             	sub    esp,0xc
c00081ed:	6a 01                	push   0x1
c00081ef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00081f3:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00081f7:	83 c0 06             	add    eax,0x6
c00081fa:	83 d2 00             	adc    edx,0x0
c00081fd:	52                   	push   edx
c00081fe:	50                   	push   eax
c00081ff:	55                   	push   ebp
c0008200:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008204:	e8 47 9a ff ff       	call   c0001c50 <disk_write>
c0008209:	83 c4 20             	add    esp,0x20
c000820c:	b9 00 02 00 00       	mov    ecx,0x200
c0008211:	31 d2                	xor    edx,edx
c0008213:	89 e8                	mov    eax,ebp
c0008215:	e8 ff 9a ff ff       	call   c0001d19 <mem_set>
c000821a:	ba 52 52 61 41       	mov    edx,0x41615252
c000821f:	89 e8                	mov    eax,ebp
c0008221:	e8 d5 9a ff ff       	call   c0001cfb <st_dword>
c0008226:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c000822c:	ba 72 72 41 61       	mov    edx,0x61417272
c0008231:	e8 c5 9a ff ff       	call   c0001cfb <st_dword>
c0008236:	8d 53 ff             	lea    edx,[ebx-0x1]
c0008239:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c000823f:	e8 b7 9a ff ff       	call   c0001cfb <st_dword>
c0008244:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c000824a:	ba 02 00 00 00       	mov    edx,0x2
c000824f:	e8 a7 9a ff ff       	call   c0001cfb <st_dword>
c0008254:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008259:	89 f0                	mov    eax,esi
c000825b:	e8 97 9a ff ff       	call   c0001cf7 <st_word>
c0008260:	83 ec 0c             	sub    esp,0xc
c0008263:	6a 01                	push   0x1
c0008265:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008269:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000826d:	83 c0 07             	add    eax,0x7
c0008270:	83 d2 00             	adc    edx,0x0
c0008273:	52                   	push   edx
c0008274:	50                   	push   eax
c0008275:	55                   	push   ebp
c0008276:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000827a:	e8 d1 99 ff ff       	call   c0001c50 <disk_write>
c000827f:	83 c4 14             	add    esp,0x14
c0008282:	6a 01                	push   0x1
c0008284:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008288:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000828c:	83 c0 01             	add    eax,0x1
c000828f:	83 d2 00             	adc    edx,0x0
c0008292:	52                   	push   edx
c0008293:	50                   	push   eax
c0008294:	55                   	push   ebp
c0008295:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008299:	e8 b2 99 ff ff       	call   c0001c50 <disk_write>
c000829e:	83 c4 20             	add    esp,0x20
c00082a1:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c00082a8:	31 d2                	xor    edx,edx
c00082aa:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c00082b0:	31 db                	xor    ebx,ebx
c00082b2:	89 e8                	mov    eax,ebp
c00082b4:	e8 60 9a ff ff       	call   c0001d19 <mem_set>
c00082b9:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c00082be:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00082c5:	0f 94 c3             	sete   bl
c00082c8:	4b                   	dec    ebx
c00082c9:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c00082cf:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c00082d5:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00082da:	75 21                	jne    c00082fd <f_mkfs+0xf68>
c00082dc:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00082e1:	89 e8                	mov    eax,ebp
c00082e3:	e8 13 9a ff ff       	call   c0001cfb <st_dword>
c00082e8:	8d 45 04             	lea    eax,[ebp+0x4]
c00082eb:	83 ca ff             	or     edx,0xffffffff
c00082ee:	e8 08 9a ff ff       	call   c0001cfb <st_dword>
c00082f3:	8d 45 08             	lea    eax,[ebp+0x8]
c00082f6:	ba ff ff ff 0f       	mov    edx,0xfffffff
c00082fb:	eb 04                	jmp    c0008301 <f_mkfs+0xf6c>
c00082fd:	89 da                	mov    edx,ebx
c00082ff:	89 e8                	mov    eax,ebp
c0008301:	e8 f5 99 ff ff       	call   c0001cfb <st_dword>
c0008306:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000830a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000830e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0008312:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008316:	39 ce                	cmp    esi,ecx
c0008318:	76 02                	jbe    c000831c <f_mkfs+0xf87>
c000831a:	89 ce                	mov    esi,ecx
c000831c:	83 ec 0c             	sub    esp,0xc
c000831f:	56                   	push   esi
c0008320:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008324:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008328:	55                   	push   ebp
c0008329:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000832d:	e8 1e 99 ff ff       	call   c0001c50 <disk_write>
c0008332:	83 c4 20             	add    esp,0x20
c0008335:	85 c0                	test   eax,eax
c0008337:	0f 85 09 01 00 00    	jne    c0008446 <f_mkfs+0x10b1>
c000833d:	31 d2                	xor    edx,edx
c000833f:	b9 00 02 00 00       	mov    ecx,0x200
c0008344:	89 e8                	mov    eax,ebp
c0008346:	e8 ce 99 ff ff       	call   c0001d19 <mem_set>
c000834b:	31 d2                	xor    edx,edx
c000834d:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c0008351:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008355:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0008359:	75 b3                	jne    c000830e <f_mkfs+0xf79>
c000835b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000835e:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0008365:	40                   	inc    eax
c0008366:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c000836a:	0f 87 65 ff ff ff    	ja     c00082d5 <f_mkfs+0xf40>
c0008370:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008375:	74 04                	je     c000837b <f_mkfs+0xfe6>
c0008377:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000837b:	89 fb                	mov    ebx,edi
c000837d:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c0008381:	76 04                	jbe    c0008387 <f_mkfs+0xff2>
c0008383:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008387:	83 ec 0c             	sub    esp,0xc
c000838a:	53                   	push   ebx
c000838b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000838f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008393:	55                   	push   ebp
c0008394:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008398:	e8 b3 98 ff ff       	call   c0001c50 <disk_write>
c000839d:	83 c4 20             	add    esp,0x20
c00083a0:	85 c0                	test   eax,eax
c00083a2:	0f 85 9e 00 00 00    	jne    c0008446 <f_mkfs+0x10b1>
c00083a8:	31 d2                	xor    edx,edx
c00083aa:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c00083ae:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c00083b2:	29 df                	sub    edi,ebx
c00083b4:	75 c5                	jne    c000837b <f_mkfs+0xfe6>
c00083b6:	b1 0c                	mov    cl,0xc
c00083b8:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00083bd:	74 1d                	je     c00083dc <f_mkfs+0x1047>
c00083bf:	b8 ff ff 00 00       	mov    eax,0xffff
c00083c4:	b1 06                	mov    cl,0x6
c00083c6:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c00083ca:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c00083ce:	72 0c                	jb     c00083dc <f_mkfs+0x1047>
c00083d0:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c00083d5:	0f 94 c1             	sete   cl
c00083d8:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00083dc:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c00083e1:	75 4c                	jne    c000842f <f_mkfs+0x109a>
c00083e3:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00083e7:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c00083eb:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00083f2:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c00083f9:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c0008404:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c000840f:	0f b6 c9             	movzx  ecx,cl
c0008412:	83 ec 0c             	sub    esp,0xc
c0008415:	55                   	push   ebp
c0008416:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c000841d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008421:	e8 2f c2 ff ff       	call   c0004655 <create_partition>
c0008426:	83 c4 10             	add    esp,0x10
c0008429:	89 c3                	mov    ebx,eax
c000842b:	85 c0                	test   eax,eax
c000842d:	75 34                	jne    c0008463 <f_mkfs+0x10ce>
c000842f:	31 db                	xor    ebx,ebx
c0008431:	50                   	push   eax
c0008432:	6a 00                	push   0x0
c0008434:	6a 00                	push   0x0
c0008436:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000843a:	e8 27 98 ff ff       	call   c0001c66 <disk_ioctl>
c000843f:	83 c4 10             	add    esp,0x10
c0008442:	85 c0                	test   eax,eax
c0008444:	74 1d                	je     c0008463 <f_mkfs+0x10ce>
c0008446:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c000844e:	75 0c                	jne    c000845c <f_mkfs+0x10c7>
c0008450:	83 ec 0c             	sub    esp,0xc
c0008453:	55                   	push   ebp
c0008454:	e8 75 00 00 00       	call   c00084ce <ff_memfree>
c0008459:	83 c4 10             	add    esp,0x10
c000845c:	bb 01 00 00 00       	mov    ebx,0x1
c0008461:	eb 48                	jmp    c00084ab <f_mkfs+0x1116>
c0008463:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c000846b:	75 3e                	jne    c00084ab <f_mkfs+0x1116>
c000846d:	83 ec 0c             	sub    esp,0xc
c0008470:	55                   	push   ebp
c0008471:	e8 58 00 00 00       	call   c00084ce <ff_memfree>
c0008476:	83 c4 10             	add    esp,0x10
c0008479:	eb 30                	jmp    c00084ab <f_mkfs+0x1116>
c000847b:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008480:	0f 85 eb fa ff ff    	jne    c0007f71 <f_mkfs+0xbdc>
c0008486:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000848a:	81 ff 80 00 00 00    	cmp    edi,0x80
c0008490:	0f 86 b8 f9 ff ff    	jbe    c0007e4e <f_mkfs+0xab9>
c0008496:	e9 bf fb ff ff       	jmp    c000805a <f_mkfs+0xcc5>
c000849b:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c00084a0:	0f 85 c0 fa ff ff    	jne    c0007f66 <f_mkfs+0xbd1>
c00084a6:	e9 af fb ff ff       	jmp    c000805a <f_mkfs+0xcc5>
c00084ab:	81 c4 9c 00 00 00    	add    esp,0x9c
c00084b1:	89 d8                	mov    eax,ebx
c00084b3:	5b                   	pop    ebx
c00084b4:	5e                   	pop    esi
c00084b5:	5f                   	pop    edi
c00084b6:	5d                   	pop    ebp
c00084b7:	c3                   	ret    

c00084b8 <ff_memalloc>:
c00084b8:	83 ec 0c             	sub    esp,0xc
c00084bb:	83 ec 0c             	sub    esp,0xc
c00084be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084c2:	e8 6b 74 00 00       	call   c000f932 <malloc>
c00084c7:	83 c4 10             	add    esp,0x10
c00084ca:	83 c4 0c             	add    esp,0xc
c00084cd:	c3                   	ret    

c00084ce <ff_memfree>:
c00084ce:	83 ec 0c             	sub    esp,0xc
c00084d1:	83 ec 0c             	sub    esp,0xc
c00084d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084d8:	e8 65 74 00 00       	call   c000f942 <free>
c00084dd:	83 c4 10             	add    esp,0x10
c00084e0:	90                   	nop
c00084e1:	83 c4 0c             	add    esp,0xc
c00084e4:	c3                   	ret    

c00084e5 <ff_uni2oem>:
c00084e5:	83 ec 14             	sub    esp,0x14
c00084e8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00084ec:	66 89 04 24          	mov    WORD PTR [esp],ax
c00084f0:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00084f7:	c7 44 24 0c e0 a0 02 c0 	mov    DWORD PTR [esp+0xc],0xc002a0e0
c00084ff:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0008504:	77 0b                	ja     c0008511 <ff_uni2oem+0x2c>
c0008506:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000850a:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000850f:	eb 5b                	jmp    c000856c <ff_uni2oem+0x87>
c0008511:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0008519:	77 51                	ja     c000856c <ff_uni2oem+0x87>
c000851b:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0008521:	75 49                	jne    c000856c <ff_uni2oem+0x87>
c0008523:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c000852a:	eb 0b                	jmp    c0008537 <ff_uni2oem+0x52>
c000852c:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008531:	40                   	inc    eax
c0008532:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008537:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c000853d:	77 1b                	ja     c000855a <ff_uni2oem+0x75>
c000853f:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0008544:	01 c0                	add    eax,eax
c0008546:	89 c2                	mov    edx,eax
c0008548:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000854c:	01 d0                	add    eax,edx
c000854e:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008551:	0f b7 c0             	movzx  eax,ax
c0008554:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0008558:	75 d2                	jne    c000852c <ff_uni2oem+0x47>
c000855a:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000855f:	83 e8 80             	sub    eax,0xffffff80
c0008562:	25 ff 00 00 00       	and    eax,0xff
c0008567:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000856c:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008571:	83 c4 14             	add    esp,0x14
c0008574:	c3                   	ret    

c0008575 <ff_oem2uni>:
c0008575:	83 ec 18             	sub    esp,0x18
c0008578:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000857c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008580:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0008585:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008589:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0008590:	c7 44 24 10 e0 a0 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a0e0
c0008598:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c000859e:	77 0b                	ja     c00085ab <ff_oem2uni+0x36>
c00085a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085a4:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00085a9:	eb 2d                	jmp    c00085d8 <ff_oem2uni+0x63>
c00085ab:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00085b1:	75 25                	jne    c00085d8 <ff_oem2uni+0x63>
c00085b3:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c00085ba:	77 1c                	ja     c00085d8 <ff_oem2uni+0x63>
c00085bc:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00085c1:	05 80 ff ff 7f       	add    eax,0x7fffff80
c00085c6:	01 c0                	add    eax,eax
c00085c8:	89 c2                	mov    edx,eax
c00085ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00085ce:	01 d0                	add    eax,edx
c00085d0:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085d3:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00085d8:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c00085dd:	83 c4 18             	add    esp,0x18
c00085e0:	c3                   	ret    

c00085e1 <ff_wtoupper>:
c00085e1:	83 ec 10             	sub    esp,0x10
c00085e4:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00085ec:	0f 87 3e 01 00 00    	ja     c0008730 <ff_wtoupper+0x14f>
c00085f2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00085f6:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00085fb:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c0008602:	77 07                	ja     c000860b <ff_wtoupper+0x2a>
c0008604:	b8 e0 9e 02 c0       	mov    eax,0xc0029ee0
c0008609:	eb 05                	jmp    c0008610 <ff_wtoupper+0x2f>
c000860b:	b8 20 9e 02 c0       	mov    eax,0xc0029e20
c0008610:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008614:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008618:	8d 50 02             	lea    edx,[eax+0x2]
c000861b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000861f:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008622:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0008627:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c000862d:	0f 84 f4 00 00 00    	je     c0008727 <ff_wtoupper+0x146>
c0008633:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008638:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c000863d:	0f 82 e4 00 00 00    	jb     c0008727 <ff_wtoupper+0x146>
c0008643:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008647:	8d 50 02             	lea    edx,[eax+0x2]
c000864a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000864e:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008651:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0008656:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c000865b:	66 c1 e8 08          	shr    ax,0x8
c000865f:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0008664:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c000866b:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008670:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0008675:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c000867a:	01 ca                	add    edx,ecx
c000867c:	39 d0                	cmp    eax,edx
c000867e:	0f 8d 86 00 00 00    	jge    c000870a <ff_wtoupper+0x129>
c0008684:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0008689:	83 f8 08             	cmp    eax,0x8
c000868c:	0f 87 94 00 00 00    	ja     c0008726 <ff_wtoupper+0x145>
c0008692:	8b 04 85 e0 9d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6220]
c0008699:	ff e0                	jmp    eax
c000869b:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c00086a0:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c00086a5:	29 c2                	sub    edx,eax
c00086a7:	89 d0                	mov    eax,edx
c00086a9:	01 c0                	add    eax,eax
c00086ab:	89 c2                	mov    edx,eax
c00086ad:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00086b1:	01 d0                	add    eax,edx
c00086b3:	66 8b 00             	mov    ax,WORD PTR [eax]
c00086b6:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00086bb:	eb 4b                	jmp    c0008708 <ff_wtoupper+0x127>
c00086bd:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00086c2:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00086c6:	83 e0 01             	and    eax,0x1
c00086c9:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c00086ce:	eb 38                	jmp    c0008708 <ff_wtoupper+0x127>
c00086d0:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c00086d6:	eb 30                	jmp    c0008708 <ff_wtoupper+0x127>
c00086d8:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c00086de:	eb 28                	jmp    c0008708 <ff_wtoupper+0x127>
c00086e0:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c00086e6:	eb 20                	jmp    c0008708 <ff_wtoupper+0x127>
c00086e8:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c00086ee:	eb 18                	jmp    c0008708 <ff_wtoupper+0x127>
c00086f0:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c00086f6:	eb 10                	jmp    c0008708 <ff_wtoupper+0x127>
c00086f8:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c00086fe:	eb 08                	jmp    c0008708 <ff_wtoupper+0x127>
c0008700:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c0008707:	90                   	nop
c0008708:	eb 1c                	jmp    c0008726 <ff_wtoupper+0x145>
c000870a:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c0008710:	0f 85 fe fe ff ff    	jne    c0008614 <ff_wtoupper+0x33>
c0008716:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c000871b:	01 c0                	add    eax,eax
c000871d:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0008721:	e9 ee fe ff ff       	jmp    c0008614 <ff_wtoupper+0x33>
c0008726:	90                   	nop
c0008727:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c000872c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0008730:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008734:	83 c4 10             	add    esp,0x10
c0008737:	c3                   	ret    

c0008738 <psrc_set_converter>:
c0008738:	56                   	push   esi
c0008739:	89 d6                	mov    esi,edx
c000873b:	53                   	push   ebx
c000873c:	89 c3                	mov    ebx,eax
c000873e:	83 ec 0c             	sub    esp,0xc
c0008741:	52                   	push   edx
c0008742:	50                   	push   eax
c0008743:	e8 6f 55 00 00       	call   c000dcb7 <sinc_set_converter>
c0008748:	83 c4 10             	add    esp,0x10
c000874b:	85 c0                	test   eax,eax
c000874d:	74 25                	je     c0008774 <psrc_set_converter+0x3c>
c000874f:	50                   	push   eax
c0008750:	50                   	push   eax
c0008751:	56                   	push   esi
c0008752:	53                   	push   ebx
c0008753:	e8 17 5d 00 00       	call   c000e46f <zoh_set_converter>
c0008758:	83 c4 10             	add    esp,0x10
c000875b:	85 c0                	test   eax,eax
c000875d:	74 15                	je     c0008774 <psrc_set_converter+0x3c>
c000875f:	51                   	push   ecx
c0008760:	51                   	push   ecx
c0008761:	56                   	push   esi
c0008762:	53                   	push   ebx
c0008763:	e8 0f 11 00 00       	call   c0009877 <linear_set_converter>
c0008768:	83 c4 10             	add    esp,0x10
c000876b:	ba 0a 00 00 00       	mov    edx,0xa
c0008770:	85 c0                	test   eax,eax
c0008772:	75 02                	jne    c0008776 <psrc_set_converter+0x3e>
c0008774:	31 d2                	xor    edx,edx
c0008776:	89 d0                	mov    eax,edx
c0008778:	5a                   	pop    edx
c0008779:	5b                   	pop    ebx
c000877a:	5e                   	pop    esi
c000877b:	c3                   	ret    

c000877c <src_delete>:
c000877c:	53                   	push   ebx
c000877d:	83 ec 08             	sub    esp,0x8
c0008780:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008784:	85 db                	test   ebx,ebx
c0008786:	74 29                	je     c00087b1 <src_delete+0x35>
c0008788:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000878b:	85 c0                	test   eax,eax
c000878d:	74 0c                	je     c000879b <src_delete+0x1f>
c000878f:	83 ec 0c             	sub    esp,0xc
c0008792:	50                   	push   eax
c0008793:	e8 aa 71 00 00       	call   c000f942 <free>
c0008798:	83 c4 10             	add    esp,0x10
c000879b:	50                   	push   eax
c000879c:	6a 3c                	push   0x3c
c000879e:	6a 00                	push   0x0
c00087a0:	53                   	push   ebx
c00087a1:	e8 f6 7f ff ff       	call   c000079c <memset>
c00087a6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00087a9:	e8 94 71 00 00       	call   c000f942 <free>
c00087ae:	83 c4 10             	add    esp,0x10
c00087b1:	31 c0                	xor    eax,eax
c00087b3:	83 c4 08             	add    esp,0x8
c00087b6:	5b                   	pop    ebx
c00087b7:	c3                   	ret    

c00087b8 <src_process>:
c00087b8:	55                   	push   ebp
c00087b9:	57                   	push   edi
c00087ba:	56                   	push   esi
c00087bb:	53                   	push   ebx
c00087bc:	83 ec 1c             	sub    esp,0x1c
c00087bf:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00087c3:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00087c7:	85 ed                	test   ebp,ebp
c00087c9:	0f 84 6f 01 00 00    	je     c000893e <src_process+0x186>
c00087cf:	83 7d 20 00          	cmp    DWORD PTR [ebp+0x20],0x0
c00087d3:	0f 84 6c 01 00 00    	je     c0008945 <src_process+0x18d>
c00087d9:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c00087dd:	0f 84 62 01 00 00    	je     c0008945 <src_process+0x18d>
c00087e3:	81 7d 18 2b 02 00 00 	cmp    DWORD PTR [ebp+0x18],0x22b
c00087ea:	0f 85 5c 01 00 00    	jne    c000894c <src_process+0x194>
c00087f0:	85 db                	test   ebx,ebx
c00087f2:	0f 84 5b 01 00 00    	je     c0008953 <src_process+0x19b>
c00087f8:	8b 33                	mov    esi,DWORD PTR [ebx]
c00087fa:	85 f6                	test   esi,esi
c00087fc:	0f 84 58 01 00 00    	je     c000895a <src_process+0x1a2>
c0008802:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0008805:	85 ff                	test   edi,edi
c0008807:	0f 84 4d 01 00 00    	je     c000895a <src_process+0x1a2>
c000880d:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0008810:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0008813:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008817:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000881b:	68 00 00 70 3f       	push   0x3f700000
c0008820:	6a 00                	push   0x0
c0008822:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008826:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000882a:	e8 78 04 02 00       	call   c0028ca7 <__ltdf2>
c000882f:	83 c4 10             	add    esp,0x10
c0008832:	85 c0                	test   eax,eax
c0008834:	0f 88 27 01 00 00    	js     c0008961 <src_process+0x1a9>
c000883a:	68 00 00 70 40       	push   0x40700000
c000883f:	6a 00                	push   0x0
c0008841:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008845:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008849:	e8 3b 04 02 00       	call   c0028c89 <__gtdf2>
c000884e:	83 c4 10             	add    esp,0x10
c0008851:	85 c0                	test   eax,eax
c0008853:	0f 8f 08 01 00 00    	jg     c0008961 <src_process+0x1a9>
c0008859:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000885d:	79 07                	jns    c0008866 <src_process+0xae>
c000885f:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008866:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0008869:	85 c0                	test   eax,eax
c000886b:	79 50                	jns    c00088bd <src_process+0x105>
c000886d:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0008874:	39 fe                	cmp    esi,edi
c0008876:	72 37                	jb     c00088af <src_process+0xf7>
c0008878:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000887f:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008886:	68 00 00 70 3f       	push   0x3f700000
c000888b:	6a 00                	push   0x0
c000888d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0008890:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0008893:	e8 0f 04 02 00       	call   c0028ca7 <__ltdf2>
c0008898:	83 c4 10             	add    esp,0x10
c000889b:	85 c0                	test   eax,eax
c000889d:	79 37                	jns    c00088d6 <src_process+0x11e>
c000889f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00088a3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00088a7:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c00088aa:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c00088ad:	eb 27                	jmp    c00088d6 <src_process+0x11e>
c00088af:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00088b2:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c00088b6:	8d 04 86             	lea    eax,[esi+eax*4]
c00088b9:	39 c7                	cmp    edi,eax
c00088bb:	eb 0d                	jmp    c00088ca <src_process+0x112>
c00088bd:	39 fe                	cmp    esi,edi
c00088bf:	72 ee                	jb     c00088af <src_process+0xf7>
c00088c1:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c00088c5:	8d 04 87             	lea    eax,[edi+eax*4]
c00088c8:	39 c6                	cmp    esi,eax
c00088ca:	73 ac                	jae    c0008878 <src_process+0xc0>
c00088cc:	b8 10 00 00 00       	mov    eax,0x10
c00088d1:	e9 90 00 00 00       	jmp    c0008966 <src_process+0x1ae>
c00088d6:	83 ec 10             	sub    esp,0x10
c00088d9:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00088dc:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00088df:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00088e2:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c00088e5:	e8 c2 fa 01 00       	call   c00283ac <__subdf3>
c00088ea:	83 c4 18             	add    esp,0x18
c00088ed:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00088f1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00088f5:	52                   	push   edx
c00088f6:	50                   	push   eax
c00088f7:	e8 44 05 02 00       	call   c0028e40 <fabs>
c00088fc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008900:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008904:	83 c4 10             	add    esp,0x10
c0008907:	68 af 03 d2 3c       	push   0x3cd203af
c000890c:	68 16 56 e7 9e       	push   0x9ee75616
c0008911:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008915:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008919:	e8 89 03 02 00       	call   c0028ca7 <__ltdf2>
c000891e:	83 c4 10             	add    esp,0x10
c0008921:	85 c0                	test   eax,eax
c0008923:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c0008927:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c000892b:	79 05                	jns    c0008932 <src_process+0x17a>
c000892d:	8b 45 24             	mov    eax,DWORD PTR [ebp+0x24]
c0008930:	eb 03                	jmp    c0008935 <src_process+0x17d>
c0008932:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0008935:	83 c4 1c             	add    esp,0x1c
c0008938:	5b                   	pop    ebx
c0008939:	5e                   	pop    esi
c000893a:	5f                   	pop    edi
c000893b:	5d                   	pop    ebp
c000893c:	ff e0                	jmp    eax
c000893e:	b8 02 00 00 00       	mov    eax,0x2
c0008943:	eb 21                	jmp    c0008966 <src_process+0x1ae>
c0008945:	b8 07 00 00 00       	mov    eax,0x7
c000894a:	eb 1a                	jmp    c0008966 <src_process+0x1ae>
c000894c:	b8 12 00 00 00       	mov    eax,0x12
c0008951:	eb 13                	jmp    c0008966 <src_process+0x1ae>
c0008953:	b8 03 00 00 00       	mov    eax,0x3
c0008958:	eb 0c                	jmp    c0008966 <src_process+0x1ae>
c000895a:	b8 04 00 00 00       	mov    eax,0x4
c000895f:	eb 05                	jmp    c0008966 <src_process+0x1ae>
c0008961:	b8 06 00 00 00       	mov    eax,0x6
c0008966:	83 c4 1c             	add    esp,0x1c
c0008969:	5b                   	pop    ebx
c000896a:	5e                   	pop    esi
c000896b:	5f                   	pop    edi
c000896c:	5d                   	pop    ebp
c000896d:	c3                   	ret    

c000896e <src_callback_read>:
c000896e:	55                   	push   ebp
c000896f:	57                   	push   edi
c0008970:	56                   	push   esi
c0008971:	53                   	push   ebx
c0008972:	83 ec 3c             	sub    esp,0x3c
c0008975:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0008979:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c000897d:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0008981:	8b 7c 24 58          	mov    edi,DWORD PTR [esp+0x58]
c0008985:	85 ed                	test   ebp,ebp
c0008987:	0f 8e 52 01 00 00    	jle    c0008adf <src_callback_read+0x171>
c000898d:	85 db                	test   ebx,ebx
c000898f:	0f 84 4a 01 00 00    	je     c0008adf <src_callback_read+0x171>
c0008995:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c000899c:	74 0c                	je     c00089aa <src_callback_read+0x3c>
c000899e:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c00089a5:	e9 35 01 00 00       	jmp    c0008adf <src_callback_read+0x171>
c00089aa:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c00089ae:	75 0c                	jne    c00089bc <src_callback_read+0x4e>
c00089b0:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c00089b7:	e9 23 01 00 00       	jmp    c0008adf <src_callback_read+0x171>
c00089bc:	51                   	push   ecx
c00089bd:	6a 24                	push   0x24
c00089bf:	6a 00                	push   0x0
c00089c1:	8d 44 24 18          	lea    eax,[esp+0x18]
c00089c5:	50                   	push   eax
c00089c6:	e8 d1 7d ff ff       	call   c000079c <memset>
c00089cb:	83 c4 10             	add    esp,0x10
c00089ce:	68 00 00 70 3f       	push   0x3f700000
c00089d3:	6a 00                	push   0x0
c00089d5:	57                   	push   edi
c00089d6:	56                   	push   esi
c00089d7:	e8 cb 02 02 00       	call   c0028ca7 <__ltdf2>
c00089dc:	83 c4 10             	add    esp,0x10
c00089df:	85 c0                	test   eax,eax
c00089e1:	78 3e                	js     c0008a21 <src_callback_read+0xb3>
c00089e3:	68 00 00 70 40       	push   0x40700000
c00089e8:	6a 00                	push   0x0
c00089ea:	57                   	push   edi
c00089eb:	56                   	push   esi
c00089ec:	e8 98 02 02 00       	call   c0028c89 <__gtdf2>
c00089f1:	83 c4 10             	add    esp,0x10
c00089f4:	85 c0                	test   eax,eax
c00089f6:	7f 29                	jg     c0008a21 <src_callback_read+0xb3>
c00089f8:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00089fc:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0008a00:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008a04:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c0008a08:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0008a0b:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c0008a0f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008a13:	31 f6                	xor    esi,esi
c0008a15:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0008a18:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0008a1c:	e9 97 00 00 00       	jmp    c0008ab8 <src_callback_read+0x14a>
c0008a21:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c0008a28:	e9 b2 00 00 00       	jmp    c0008adf <src_callback_read+0x171>
c0008a2d:	8d 44 24 04          	lea    eax,[esp+0x4]
c0008a31:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008a35:	52                   	push   edx
c0008a36:	52                   	push   edx
c0008a37:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008a3b:	50                   	push   eax
c0008a3c:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008a3f:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c0008a42:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0008a46:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0008a4a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008a4e:	83 c4 10             	add    esp,0x10
c0008a51:	85 c0                	test   eax,eax
c0008a53:	75 08                	jne    c0008a5d <src_callback_read+0xef>
c0008a55:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0008a5d:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c0008a64:	50                   	push   eax
c0008a65:	50                   	push   eax
c0008a66:	8d 44 24 14          	lea    eax,[esp+0x14]
c0008a6a:	50                   	push   eax
c0008a6b:	53                   	push   ebx
c0008a6c:	e8 47 fd ff ff       	call   c00087b8 <src_process>
c0008a71:	83 c4 10             	add    esp,0x10
c0008a74:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008a7b:	85 c0                	test   eax,eax
c0008a7d:	75 49                	jne    c0008ac8 <src_callback_read+0x15a>
c0008a7f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008a83:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008a86:	89 f9                	mov    ecx,edi
c0008a88:	29 7c 24 14          	sub    DWORD PTR [esp+0x14],edi
c0008a8c:	0f af ca             	imul   ecx,edx
c0008a8f:	c1 e1 02             	shl    ecx,0x2
c0008a92:	01 4c 24 0c          	add    DWORD PTR [esp+0xc],ecx
c0008a96:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008a9a:	0f af d1             	imul   edx,ecx
c0008a9d:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0008aa1:	c1 e2 02             	shl    edx,0x2
c0008aa4:	01 54 24 10          	add    DWORD PTR [esp+0x10],edx
c0008aa8:	8d 14 31             	lea    edx,[ecx+esi*1]
c0008aab:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0008ab0:	74 12                	je     c0008ac4 <src_callback_read+0x156>
c0008ab2:	39 d5                	cmp    ebp,edx
c0008ab4:	7e 14                	jle    c0008aca <src_callback_read+0x15c>
c0008ab6:	89 d6                	mov    esi,edx
c0008ab8:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0008abd:	75 9e                	jne    c0008a5d <src_callback_read+0xef>
c0008abf:	e9 69 ff ff ff       	jmp    c0008a2d <src_callback_read+0xbf>
c0008ac4:	85 c9                	test   ecx,ecx
c0008ac6:	75 ea                	jne    c0008ab2 <src_callback_read+0x144>
c0008ac8:	89 f2                	mov    edx,esi
c0008aca:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0008ace:	85 c0                	test   eax,eax
c0008ad0:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c0008ad3:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008ad7:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0008ada:	74 05                	je     c0008ae1 <src_callback_read+0x173>
c0008adc:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008adf:	31 d2                	xor    edx,edx
c0008ae1:	83 c4 3c             	add    esp,0x3c
c0008ae4:	89 d0                	mov    eax,edx
c0008ae6:	5b                   	pop    ebx
c0008ae7:	5e                   	pop    esi
c0008ae8:	5f                   	pop    edi
c0008ae9:	5d                   	pop    ebp
c0008aea:	c3                   	ret    

c0008aeb <src_set_ratio>:
c0008aeb:	57                   	push   edi
c0008aec:	ba 02 00 00 00       	mov    edx,0x2
c0008af1:	56                   	push   esi
c0008af2:	53                   	push   ebx
c0008af3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008af7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008afb:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0008aff:	85 db                	test   ebx,ebx
c0008b01:	74 4c                	je     c0008b4f <src_set_ratio+0x64>
c0008b03:	ba 07 00 00 00       	mov    edx,0x7
c0008b08:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c0008b0c:	74 41                	je     c0008b4f <src_set_ratio+0x64>
c0008b0e:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0008b12:	74 3b                	je     c0008b4f <src_set_ratio+0x64>
c0008b14:	68 00 00 70 3f       	push   0x3f700000
c0008b19:	6a 00                	push   0x0
c0008b1b:	57                   	push   edi
c0008b1c:	56                   	push   esi
c0008b1d:	e8 85 01 02 00       	call   c0028ca7 <__ltdf2>
c0008b22:	83 c4 10             	add    esp,0x10
c0008b25:	ba 06 00 00 00       	mov    edx,0x6
c0008b2a:	85 c0                	test   eax,eax
c0008b2c:	78 21                	js     c0008b4f <src_set_ratio+0x64>
c0008b2e:	68 00 00 70 40       	push   0x40700000
c0008b33:	6a 00                	push   0x0
c0008b35:	57                   	push   edi
c0008b36:	56                   	push   esi
c0008b37:	e8 4d 01 02 00       	call   c0028c89 <__gtdf2>
c0008b3c:	83 c4 10             	add    esp,0x10
c0008b3f:	ba 06 00 00 00       	mov    edx,0x6
c0008b44:	85 c0                	test   eax,eax
c0008b46:	7f 07                	jg     c0008b4f <src_set_ratio+0x64>
c0008b48:	89 33                	mov    DWORD PTR [ebx],esi
c0008b4a:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0008b4d:	31 d2                	xor    edx,edx
c0008b4f:	5b                   	pop    ebx
c0008b50:	89 d0                	mov    eax,edx
c0008b52:	5e                   	pop    esi
c0008b53:	5f                   	pop    edi
c0008b54:	c3                   	ret    

c0008b55 <src_get_channels>:
c0008b55:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008b59:	b8 02 00 00 00       	mov    eax,0x2
c0008b5e:	85 d2                	test   edx,edx
c0008b60:	74 14                	je     c0008b76 <src_get_channels+0x21>
c0008b62:	b8 07 00 00 00       	mov    eax,0x7
c0008b67:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c0008b6b:	74 09                	je     c0008b76 <src_get_channels+0x21>
c0008b6d:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c0008b71:	74 03                	je     c0008b76 <src_get_channels+0x21>
c0008b73:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008b76:	c3                   	ret    

c0008b77 <src_reset>:
c0008b77:	53                   	push   ebx
c0008b78:	b8 02 00 00 00       	mov    eax,0x2
c0008b7d:	83 ec 08             	sub    esp,0x8
c0008b80:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008b84:	85 db                	test   ebx,ebx
c0008b86:	74 36                	je     c0008bbe <src_reset+0x47>
c0008b88:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0008b8b:	85 c0                	test   eax,eax
c0008b8d:	74 09                	je     c0008b98 <src_reset+0x21>
c0008b8f:	83 ec 0c             	sub    esp,0xc
c0008b92:	53                   	push   ebx
c0008b93:	ff d0                	call   eax
c0008b95:	83 c4 10             	add    esp,0x10
c0008b98:	31 c0                	xor    eax,eax
c0008b9a:	31 d2                	xor    edx,edx
c0008b9c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0008b9f:	89 03                	mov    DWORD PTR [ebx],eax
c0008ba1:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008ba4:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0008ba7:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0008bae:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0008bb5:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008bbc:	31 c0                	xor    eax,eax
c0008bbe:	83 c4 08             	add    esp,0x8
c0008bc1:	5b                   	pop    ebx
c0008bc2:	c3                   	ret    

c0008bc3 <src_new>:
c0008bc3:	57                   	push   edi
c0008bc4:	56                   	push   esi
c0008bc5:	53                   	push   ebx
c0008bc6:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008bca:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0008bce:	85 f6                	test   esi,esi
c0008bd0:	74 73                	je     c0008c45 <src_new+0x82>
c0008bd2:	85 ff                	test   edi,edi
c0008bd4:	7f 08                	jg     c0008bde <src_new+0x1b>
c0008bd6:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c0008bdc:	eb 1e                	jmp    c0008bfc <src_new+0x39>
c0008bde:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0008be4:	50                   	push   eax
c0008be5:	50                   	push   eax
c0008be6:	6a 3c                	push   0x3c
c0008be8:	6a 01                	push   0x1
c0008bea:	e8 73 6d 00 00       	call   c000f962 <calloc>
c0008bef:	83 c4 10             	add    esp,0x10
c0008bf2:	89 c3                	mov    ebx,eax
c0008bf4:	85 c0                	test   eax,eax
c0008bf6:	75 10                	jne    c0008c08 <src_new+0x45>
c0008bf8:	85 f6                	test   esi,esi
c0008bfa:	75 04                	jne    c0008c00 <src_new+0x3d>
c0008bfc:	31 db                	xor    ebx,ebx
c0008bfe:	eb 4b                	jmp    c0008c4b <src_new+0x88>
c0008c00:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0008c06:	eb 43                	jmp    c0008c4b <src_new+0x88>
c0008c08:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0008c0b:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c0008c12:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008c16:	e8 1d fb ff ff       	call   c0008738 <psrc_set_converter>
c0008c1b:	85 c0                	test   eax,eax
c0008c1d:	74 18                	je     c0008c37 <src_new+0x74>
c0008c1f:	85 f6                	test   esi,esi
c0008c21:	74 06                	je     c0008c29 <src_new+0x66>
c0008c23:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c0008c29:	83 ec 0c             	sub    esp,0xc
c0008c2c:	53                   	push   ebx
c0008c2d:	31 db                	xor    ebx,ebx
c0008c2f:	e8 0e 6d 00 00       	call   c000f942 <free>
c0008c34:	83 c4 10             	add    esp,0x10
c0008c37:	83 ec 0c             	sub    esp,0xc
c0008c3a:	53                   	push   ebx
c0008c3b:	e8 37 ff ff ff       	call   c0008b77 <src_reset>
c0008c40:	83 c4 10             	add    esp,0x10
c0008c43:	eb 06                	jmp    c0008c4b <src_new+0x88>
c0008c45:	85 ff                	test   edi,edi
c0008c47:	7f 9b                	jg     c0008be4 <src_new+0x21>
c0008c49:	eb b1                	jmp    c0008bfc <src_new+0x39>
c0008c4b:	89 d8                	mov    eax,ebx
c0008c4d:	5b                   	pop    ebx
c0008c4e:	5e                   	pop    esi
c0008c4f:	5f                   	pop    edi
c0008c50:	c3                   	ret    

c0008c51 <src_callback_new>:
c0008c51:	56                   	push   esi
c0008c52:	53                   	push   ebx
c0008c53:	53                   	push   ebx
c0008c54:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008c58:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008c5c:	85 f6                	test   esi,esi
c0008c5e:	75 0e                	jne    c0008c6e <src_callback_new+0x1d>
c0008c60:	31 db                	xor    ebx,ebx
c0008c62:	85 c0                	test   eax,eax
c0008c64:	74 47                	je     c0008cad <src_callback_new+0x5c>
c0008c66:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c0008c6c:	eb 3f                	jmp    c0008cad <src_callback_new+0x5c>
c0008c6e:	85 c0                	test   eax,eax
c0008c70:	74 06                	je     c0008c78 <src_callback_new+0x27>
c0008c72:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008c78:	51                   	push   ecx
c0008c79:	50                   	push   eax
c0008c7a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c7e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c82:	e8 3c ff ff ff       	call   c0008bc3 <src_new>
c0008c87:	83 c4 10             	add    esp,0x10
c0008c8a:	89 c3                	mov    ebx,eax
c0008c8c:	85 c0                	test   eax,eax
c0008c8e:	74 1d                	je     c0008cad <src_callback_new+0x5c>
c0008c90:	83 ec 0c             	sub    esp,0xc
c0008c93:	50                   	push   eax
c0008c94:	e8 de fe ff ff       	call   c0008b77 <src_reset>
c0008c99:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008c9d:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008ca4:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0008ca7:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0008caa:	83 c4 10             	add    esp,0x10
c0008cad:	89 d8                	mov    eax,ebx
c0008caf:	5a                   	pop    edx
c0008cb0:	5b                   	pop    ebx
c0008cb1:	5e                   	pop    esi
c0008cb2:	c3                   	ret    

c0008cb3 <src_get_name>:
c0008cb3:	53                   	push   ebx
c0008cb4:	83 ec 14             	sub    esp,0x14
c0008cb7:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008cbb:	53                   	push   ebx
c0008cbc:	e8 d0 4f 00 00       	call   c000dc91 <sinc_get_name>
c0008cc1:	83 c4 10             	add    esp,0x10
c0008cc4:	85 c0                	test   eax,eax
c0008cc6:	75 1d                	jne    c0008ce5 <src_get_name+0x32>
c0008cc8:	83 ec 0c             	sub    esp,0xc
c0008ccb:	53                   	push   ebx
c0008ccc:	e8 80 57 00 00       	call   c000e451 <zoh_get_name>
c0008cd1:	83 c4 10             	add    esp,0x10
c0008cd4:	85 c0                	test   eax,eax
c0008cd6:	75 0d                	jne    c0008ce5 <src_get_name+0x32>
c0008cd8:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008cdc:	83 c4 08             	add    esp,0x8
c0008cdf:	5b                   	pop    ebx
c0008ce0:	e9 74 0b 00 00       	jmp    c0009859 <linear_get_name>
c0008ce5:	83 c4 08             	add    esp,0x8
c0008ce8:	5b                   	pop    ebx
c0008ce9:	c3                   	ret    

c0008cea <src_get_description>:
c0008cea:	53                   	push   ebx
c0008ceb:	83 ec 14             	sub    esp,0x14
c0008cee:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008cf2:	53                   	push   ebx
c0008cf3:	e8 ac 4f 00 00       	call   c000dca4 <sinc_get_description>
c0008cf8:	83 c4 10             	add    esp,0x10
c0008cfb:	85 c0                	test   eax,eax
c0008cfd:	75 1d                	jne    c0008d1c <src_get_description+0x32>
c0008cff:	83 ec 0c             	sub    esp,0xc
c0008d02:	53                   	push   ebx
c0008d03:	e8 58 57 00 00       	call   c000e460 <zoh_get_description>
c0008d08:	83 c4 10             	add    esp,0x10
c0008d0b:	85 c0                	test   eax,eax
c0008d0d:	75 0d                	jne    c0008d1c <src_get_description+0x32>
c0008d0f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008d13:	83 c4 08             	add    esp,0x8
c0008d16:	5b                   	pop    ebx
c0008d17:	e9 4c 0b 00 00       	jmp    c0009868 <linear_get_description>
c0008d1c:	83 c4 08             	add    esp,0x8
c0008d1f:	5b                   	pop    ebx
c0008d20:	c3                   	ret    

c0008d21 <src_get_version>:
c0008d21:	b8 e0 a1 02 c0       	mov    eax,0xc002a1e0
c0008d26:	c3                   	ret    

c0008d27 <src_is_valid_ratio>:
c0008d27:	83 ec 1c             	sub    esp,0x1c
c0008d2a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008d2e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008d32:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008d36:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008d3a:	68 00 00 70 3f       	push   0x3f700000
c0008d3f:	6a 00                	push   0x0
c0008d41:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d45:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d49:	e8 59 ff 01 00       	call   c0028ca7 <__ltdf2>
c0008d4e:	83 c4 10             	add    esp,0x10
c0008d51:	31 d2                	xor    edx,edx
c0008d53:	85 c0                	test   eax,eax
c0008d55:	78 1e                	js     c0008d75 <src_is_valid_ratio+0x4e>
c0008d57:	68 00 00 70 40       	push   0x40700000
c0008d5c:	6a 00                	push   0x0
c0008d5e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d62:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d66:	e8 1e ff 01 00       	call   c0028c89 <__gtdf2>
c0008d6b:	31 d2                	xor    edx,edx
c0008d6d:	83 c4 10             	add    esp,0x10
c0008d70:	85 c0                	test   eax,eax
c0008d72:	0f 9e c2             	setle  dl
c0008d75:	89 d0                	mov    eax,edx
c0008d77:	83 c4 1c             	add    esp,0x1c
c0008d7a:	c3                   	ret    

c0008d7b <src_error>:
c0008d7b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d7f:	31 c0                	xor    eax,eax
c0008d81:	85 d2                	test   edx,edx
c0008d83:	74 03                	je     c0008d88 <src_error+0xd>
c0008d85:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c0008d88:	c3                   	ret    

c0008d89 <src_strerror>:
c0008d89:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d8d:	31 c0                	xor    eax,eax
c0008d8f:	83 fa 17             	cmp    edx,0x17
c0008d92:	77 07                	ja     c0008d9b <src_strerror+0x12>
c0008d94:	8b 04 95 40 a6 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd59c0]
c0008d9b:	c3                   	ret    

c0008d9c <src_simple>:
c0008d9c:	56                   	push   esi
c0008d9d:	53                   	push   ebx
c0008d9e:	83 ec 18             	sub    esp,0x18
c0008da1:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008da5:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008da9:	50                   	push   eax
c0008daa:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008dae:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008db2:	e8 0c fe ff ff       	call   c0008bc3 <src_new>
c0008db7:	83 c4 10             	add    esp,0x10
c0008dba:	85 c0                	test   eax,eax
c0008dbc:	75 06                	jne    c0008dc4 <src_simple+0x28>
c0008dbe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008dc2:	eb 25                	jmp    c0008de9 <src_simple+0x4d>
c0008dc4:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008dcb:	89 c3                	mov    ebx,eax
c0008dcd:	50                   	push   eax
c0008dce:	50                   	push   eax
c0008dcf:	56                   	push   esi
c0008dd0:	53                   	push   ebx
c0008dd1:	e8 e2 f9 ff ff       	call   c00087b8 <src_process>
c0008dd6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008dd9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008ddd:	e8 9a f9 ff ff       	call   c000877c <src_delete>
c0008de2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008de6:	83 c4 10             	add    esp,0x10
c0008de9:	83 c4 14             	add    esp,0x14
c0008dec:	5b                   	pop    ebx
c0008ded:	5e                   	pop    esi
c0008dee:	c3                   	ret    

c0008def <src_short_to_float_array>:
c0008def:	53                   	push   ebx
c0008df0:	83 ec 18             	sub    esp,0x18
c0008df3:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008df7:	85 db                	test   ebx,ebx
c0008df9:	74 54                	je     c0008e4f <src_short_to_float_array+0x60>
c0008dfb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008dff:	4b                   	dec    ebx
c0008e00:	83 ec 0c             	sub    esp,0xc
c0008e03:	0f bf 04 58          	movsx  eax,WORD PTR [eax+ebx*2]
c0008e07:	50                   	push   eax
c0008e08:	e8 2e fc 01 00       	call   c0028a3b <__floatsidf>
c0008e0d:	83 c4 10             	add    esp,0x10
c0008e10:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e14:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e18:	68 00 00 00 3f       	push   0x3f000000
c0008e1d:	6a 00                	push   0x0
c0008e1f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e23:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e27:	e8 ac f5 01 00       	call   c00283d8 <__muldf3>
c0008e2c:	59                   	pop    ecx
c0008e2d:	59                   	pop    ecx
c0008e2e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008e32:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008e36:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e3a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e3e:	e8 68 fe 01 00       	call   c0028cab <__truncdfsf2>
c0008e43:	83 c4 10             	add    esp,0x10
c0008e46:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008e4a:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008e4d:	eb a8                	jmp    c0008df7 <src_short_to_float_array+0x8>
c0008e4f:	83 c4 18             	add    esp,0x18
c0008e52:	5b                   	pop    ebx
c0008e53:	c3                   	ret    

c0008e54 <src_float_to_short_array>:
c0008e54:	56                   	push   esi
c0008e55:	53                   	push   ebx
c0008e56:	83 ec 14             	sub    esp,0x14
c0008e59:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008e5d:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008e61:	85 db                	test   ebx,ebx
c0008e63:	0f 84 a4 00 00 00    	je     c0008f0d <src_float_to_short_array+0xb9>
c0008e69:	83 ec 0c             	sub    esp,0xc
c0008e6c:	4b                   	dec    ebx
c0008e6d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008e71:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008e74:	e8 56 ff 01 00       	call   c0028dcf <__extendsfdf2>
c0008e79:	83 c4 10             	add    esp,0x10
c0008e7c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e80:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e84:	68 00 00 e0 41       	push   0x41e00000
c0008e89:	6a 00                	push   0x0
c0008e8b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e8f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e93:	e8 40 f5 01 00       	call   c00283d8 <__muldf3>
c0008e98:	83 c4 10             	add    esp,0x10
c0008e9b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e9f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008ea3:	68 ff ff df 41       	push   0x41dfffff
c0008ea8:	68 00 00 c0 ff       	push   0xffc00000
c0008ead:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008eb1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008eb5:	e8 eb fd 01 00       	call   c0028ca5 <__gedf2>
c0008eba:	83 c4 10             	add    esp,0x10
c0008ebd:	85 c0                	test   eax,eax
c0008ebf:	78 08                	js     c0008ec9 <src_float_to_short_array+0x75>
c0008ec1:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0008ec7:	eb 98                	jmp    c0008e61 <src_float_to_short_array+0xd>
c0008ec9:	68 00 00 e0 c1       	push   0xc1e00000
c0008ece:	6a 00                	push   0x0
c0008ed0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ed4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ed8:	e8 cc fd 01 00       	call   c0028ca9 <__ledf2>
c0008edd:	83 c4 10             	add    esp,0x10
c0008ee0:	85 c0                	test   eax,eax
c0008ee2:	7f 0b                	jg     c0008eef <src_float_to_short_array+0x9b>
c0008ee4:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c0008eea:	e9 72 ff ff ff       	jmp    c0008e61 <src_float_to_short_array+0xd>
c0008eef:	50                   	push   eax
c0008ef0:	50                   	push   eax
c0008ef1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ef5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ef9:	e8 62 ff 01 00       	call   c0028e60 <lrint>
c0008efe:	83 c4 10             	add    esp,0x10
c0008f01:	c1 f8 10             	sar    eax,0x10
c0008f04:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0008f08:	e9 54 ff ff ff       	jmp    c0008e61 <src_float_to_short_array+0xd>
c0008f0d:	83 c4 14             	add    esp,0x14
c0008f10:	5b                   	pop    ebx
c0008f11:	5e                   	pop    esi
c0008f12:	c3                   	ret    

c0008f13 <src_int_to_float_array>:
c0008f13:	53                   	push   ebx
c0008f14:	83 ec 18             	sub    esp,0x18
c0008f17:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008f1b:	85 db                	test   ebx,ebx
c0008f1d:	74 52                	je     c0008f71 <src_int_to_float_array+0x5e>
c0008f1f:	83 ec 0c             	sub    esp,0xc
c0008f22:	4b                   	dec    ebx
c0008f23:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008f27:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008f2a:	e8 0c fb 01 00       	call   c0028a3b <__floatsidf>
c0008f2f:	83 c4 10             	add    esp,0x10
c0008f32:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f36:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f3a:	68 00 00 00 3e       	push   0x3e000000
c0008f3f:	6a 00                	push   0x0
c0008f41:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f45:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f49:	e8 8a f4 01 00       	call   c00283d8 <__muldf3>
c0008f4e:	59                   	pop    ecx
c0008f4f:	59                   	pop    ecx
c0008f50:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008f54:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008f58:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f5c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f60:	e8 46 fd 01 00       	call   c0028cab <__truncdfsf2>
c0008f65:	83 c4 10             	add    esp,0x10
c0008f68:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008f6c:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008f6f:	eb aa                	jmp    c0008f1b <src_int_to_float_array+0x8>
c0008f71:	83 c4 18             	add    esp,0x18
c0008f74:	5b                   	pop    ebx
c0008f75:	c3                   	ret    

c0008f76 <src_float_to_int_array>:
c0008f76:	56                   	push   esi
c0008f77:	53                   	push   ebx
c0008f78:	83 ec 14             	sub    esp,0x14
c0008f7b:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008f7f:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008f83:	85 db                	test   ebx,ebx
c0008f85:	0f 84 a2 00 00 00    	je     c000902d <src_float_to_int_array+0xb7>
c0008f8b:	83 ec 0c             	sub    esp,0xc
c0008f8e:	4b                   	dec    ebx
c0008f8f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008f93:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008f96:	e8 34 fe 01 00       	call   c0028dcf <__extendsfdf2>
c0008f9b:	83 c4 10             	add    esp,0x10
c0008f9e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008fa2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008fa6:	68 00 00 e0 41       	push   0x41e00000
c0008fab:	6a 00                	push   0x0
c0008fad:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fb1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fb5:	e8 1e f4 01 00       	call   c00283d8 <__muldf3>
c0008fba:	83 c4 10             	add    esp,0x10
c0008fbd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008fc1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008fc5:	68 ff ff df 41       	push   0x41dfffff
c0008fca:	68 00 00 c0 ff       	push   0xffc00000
c0008fcf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fd3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fd7:	e8 c9 fc 01 00       	call   c0028ca5 <__gedf2>
c0008fdc:	83 c4 10             	add    esp,0x10
c0008fdf:	85 c0                	test   eax,eax
c0008fe1:	78 09                	js     c0008fec <src_float_to_int_array+0x76>
c0008fe3:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c0008fea:	eb 97                	jmp    c0008f83 <src_float_to_int_array+0xd>
c0008fec:	68 00 00 e0 c1       	push   0xc1e00000
c0008ff1:	6a 00                	push   0x0
c0008ff3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ff7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ffb:	e8 a9 fc 01 00       	call   c0028ca9 <__ledf2>
c0009000:	83 c4 10             	add    esp,0x10
c0009003:	85 c0                	test   eax,eax
c0009005:	7f 0c                	jg     c0009013 <src_float_to_int_array+0x9d>
c0009007:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c000900e:	e9 70 ff ff ff       	jmp    c0008f83 <src_float_to_int_array+0xd>
c0009013:	50                   	push   eax
c0009014:	50                   	push   eax
c0009015:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009019:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000901d:	e8 3e fe 01 00       	call   c0028e60 <lrint>
c0009022:	83 c4 10             	add    esp,0x10
c0009025:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c0009028:	e9 56 ff ff ff       	jmp    c0008f83 <src_float_to_int_array+0xd>
c000902d:	83 c4 14             	add    esp,0x14
c0009030:	5b                   	pop    ebx
c0009031:	5e                   	pop    esi
c0009032:	c3                   	ret    

c0009033 <linear_vari_process>:
c0009033:	55                   	push   ebp
c0009034:	31 d2                	xor    edx,edx
c0009036:	57                   	push   edi
c0009037:	56                   	push   esi
c0009038:	53                   	push   ebx
c0009039:	83 ec 3c             	sub    esp,0x3c
c000903c:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0009040:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c0009044:	0f 8e d3 07 00 00    	jle    c000981d <linear_vari_process+0x7ea>
c000904a:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000904e:	ba 05 00 00 00       	mov    edx,0x5
c0009053:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0009056:	85 db                	test   ebx,ebx
c0009058:	0f 84 bf 07 00 00    	je     c000981d <linear_vari_process+0x7ea>
c000905e:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0009061:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0009065:	74 19                	je     c0009080 <linear_vari_process+0x4d>
c0009067:	31 d2                	xor    edx,edx
c0009069:	39 c2                	cmp    edx,eax
c000906b:	7d 0c                	jge    c0009079 <linear_vari_process+0x46>
c000906d:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000906f:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c0009072:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c0009076:	42                   	inc    edx
c0009077:	eb f0                	jmp    c0009069 <linear_vari_process+0x36>
c0009079:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0009080:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c0009083:	0f af d0             	imul   edx,eax
c0009086:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0009089:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000908d:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0009094:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0009097:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000909e:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00090a2:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00090a5:	8b 00                	mov    eax,DWORD PTR [eax]
c00090a7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00090ab:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00090af:	68 00 00 70 3f       	push   0x3f700000
c00090b4:	6a 00                	push   0x0
c00090b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090be:	e8 e4 fb 01 00       	call   c0028ca7 <__ltdf2>
c00090c3:	83 c4 10             	add    esp,0x10
c00090c6:	ba 16 00 00 00       	mov    edx,0x16
c00090cb:	85 c0                	test   eax,eax
c00090cd:	0f 88 4a 07 00 00    	js     c000981d <linear_vari_process+0x7ea>
c00090d3:	68 00 00 70 40       	push   0x40700000
c00090d8:	6a 00                	push   0x0
c00090da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090e2:	e8 a2 fb 01 00       	call   c0028c89 <__gtdf2>
c00090e7:	83 c4 10             	add    esp,0x10
c00090ea:	ba 16 00 00 00       	mov    edx,0x16
c00090ef:	85 c0                	test   eax,eax
c00090f1:	0f 8f 26 07 00 00    	jg     c000981d <linear_vari_process+0x7ea>
c00090f7:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00090fb:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00090fe:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0009101:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009105:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009109:	68 00 00 f0 3f       	push   0x3ff00000
c000910e:	6a 00                	push   0x0
c0009110:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009114:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009118:	e8 8a fb 01 00       	call   c0028ca7 <__ltdf2>
c000911d:	83 c4 10             	add    esp,0x10
c0009120:	85 c0                	test   eax,eax
c0009122:	0f 89 89 02 00 00    	jns    c00093b1 <linear_vari_process+0x37e>
c0009128:	8b 7b 14             	mov    edi,DWORD PTR [ebx+0x14]
c000912b:	39 7b 18             	cmp    DWORD PTR [ebx+0x18],edi
c000912e:	0f 8d 7d 02 00 00    	jge    c00093b1 <linear_vari_process+0x37e>
c0009134:	83 ec 0c             	sub    esp,0xc
c0009137:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000913a:	e8 fc f8 01 00       	call   c0028a3b <__floatsidf>
c000913f:	83 c4 10             	add    esp,0x10
c0009142:	89 04 24             	mov    DWORD PTR [esp],eax
c0009145:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009149:	68 00 00 f0 3f       	push   0x3ff00000
c000914e:	6a 00                	push   0x0
c0009150:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009154:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009158:	e8 fe eb 01 00       	call   c0027d5b <__adddf3>
c000915d:	83 c4 10             	add    esp,0x10
c0009160:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009164:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009168:	52                   	push   edx
c0009169:	50                   	push   eax
c000916a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000916e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009172:	e8 61 f2 01 00       	call   c00283d8 <__muldf3>
c0009177:	5d                   	pop    ebp
c0009178:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000917c:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009180:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0009183:	e8 b3 f8 01 00       	call   c0028a3b <__floatsidf>
c0009188:	83 c4 10             	add    esp,0x10
c000918b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000918f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009193:	52                   	push   edx
c0009194:	50                   	push   eax
c0009195:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009199:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000919d:	e8 b9 eb 01 00       	call   c0027d5b <__adddf3>
c00091a2:	59                   	pop    ecx
c00091a3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00091a7:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00091ab:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c00091ae:	e8 88 f8 01 00       	call   c0028a3b <__floatsidf>
c00091b3:	83 c4 10             	add    esp,0x10
c00091b6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00091ba:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00091be:	52                   	push   edx
c00091bf:	50                   	push   eax
c00091c0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091c4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091c8:	e8 d8 fa 01 00       	call   c0028ca5 <__gedf2>
c00091cd:	83 c4 10             	add    esp,0x10
c00091d0:	85 c0                	test   eax,eax
c00091d2:	0f 89 d9 01 00 00    	jns    c00093b1 <linear_vari_process+0x37e>
c00091d8:	85 ff                	test   edi,edi
c00091da:	0f 8e f4 00 00 00    	jle    c00092d4 <linear_vari_process+0x2a1>
c00091e0:	83 ec 10             	sub    esp,0x10
c00091e3:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00091e6:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00091e9:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00091ed:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00091f0:	ff 30                	push   DWORD PTR [eax]
c00091f2:	e8 b5 f1 01 00       	call   c00283ac <__subdf3>
c00091f7:	83 c4 18             	add    esp,0x18
c00091fa:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00091fe:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009202:	52                   	push   edx
c0009203:	50                   	push   eax
c0009204:	e8 37 fc 01 00       	call   c0028e40 <fabs>
c0009209:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000920d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009211:	83 c4 10             	add    esp,0x10
c0009214:	68 a1 9c c7 3b       	push   0x3bc79ca1
c0009219:	68 23 42 92 0c       	push   0xc924223
c000921e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009222:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009226:	e8 5e fa 01 00       	call   c0028c89 <__gtdf2>
c000922b:	83 c4 10             	add    esp,0x10
c000922e:	85 c0                	test   eax,eax
c0009230:	0f 8e 9e 00 00 00    	jle    c00092d4 <linear_vari_process+0x2a1>
c0009236:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000923a:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000923d:	8b 00                	mov    eax,DWORD PTR [eax]
c000923f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009243:	89 04 24             	mov    DWORD PTR [esp],eax
c0009246:	52                   	push   edx
c0009247:	50                   	push   eax
c0009248:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000924b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000924e:	e8 59 f1 01 00       	call   c00283ac <__subdf3>
c0009253:	59                   	pop    ecx
c0009254:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009258:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000925c:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000925f:	e8 d7 f7 01 00       	call   c0028a3b <__floatsidf>
c0009264:	83 c4 10             	add    esp,0x10
c0009267:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000926b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000926f:	52                   	push   edx
c0009270:	50                   	push   eax
c0009271:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009275:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009279:	e8 5a f1 01 00       	call   c00283d8 <__muldf3>
c000927e:	5f                   	pop    edi
c000927f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009283:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009287:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000928a:	e8 ac f7 01 00       	call   c0028a3b <__floatsidf>
c000928f:	83 c4 10             	add    esp,0x10
c0009292:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009296:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000929a:	52                   	push   edx
c000929b:	50                   	push   eax
c000929c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00092a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00092a4:	e8 13 f4 01 00       	call   c00286bc <__divdf3>
c00092a9:	83 c4 10             	add    esp,0x10
c00092ac:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00092b0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00092b4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00092b8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00092bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00092c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00092c4:	e8 92 ea 01 00       	call   c0027d5b <__adddf3>
c00092c9:	83 c4 10             	add    esp,0x10
c00092cc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00092d0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00092d4:	31 ff                	xor    edi,edi
c00092d6:	39 7b 04             	cmp    DWORD PTR [ebx+0x4],edi
c00092d9:	0f 8e 9d 00 00 00    	jle    c000937c <linear_vari_process+0x349>
c00092df:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00092e2:	8b 6c bb 1c          	mov    ebp,DWORD PTR [ebx+edi*4+0x1c]
c00092e6:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00092e9:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00092ed:	89 04 24             	mov    DWORD PTR [esp],eax
c00092f0:	8b 06                	mov    eax,DWORD PTR [esi]
c00092f2:	52                   	push   edx
c00092f3:	52                   	push   edx
c00092f4:	55                   	push   ebp
c00092f5:	ff 34 b8             	push   DWORD PTR [eax+edi*4]
c00092f8:	47                   	inc    edi
c00092f9:	e8 f2 e3 01 00       	call   c00276f0 <__subsf3>
c00092fe:	89 04 24             	mov    DWORD PTR [esp],eax
c0009301:	e8 c9 fa 01 00       	call   c0028dcf <__extendsfdf2>
c0009306:	83 c4 10             	add    esp,0x10
c0009309:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000930d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009311:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009315:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009319:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000931d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009321:	e8 b2 f0 01 00       	call   c00283d8 <__muldf3>
c0009326:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009329:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000932d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009331:	e8 99 fa 01 00       	call   c0028dcf <__extendsfdf2>
c0009336:	83 c4 10             	add    esp,0x10
c0009339:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000933d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009341:	52                   	push   edx
c0009342:	50                   	push   eax
c0009343:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009347:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000934b:	e8 0b ea 01 00       	call   c0027d5b <__adddf3>
c0009350:	59                   	pop    ecx
c0009351:	5d                   	pop    ebp
c0009352:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009356:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000935a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000935e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009362:	e8 44 f9 01 00       	call   c0028cab <__truncdfsf2>
c0009367:	83 c4 10             	add    esp,0x10
c000936a:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000936d:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0009371:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009374:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009377:	e9 5a ff ff ff       	jmp    c00092d6 <linear_vari_process+0x2a3>
c000937c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009380:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009384:	68 00 00 f0 3f       	push   0x3ff00000
c0009389:	6a 00                	push   0x0
c000938b:	e8 2c f3 01 00       	call   c00286bc <__divdf3>
c0009390:	83 c4 10             	add    esp,0x10
c0009393:	89 04 24             	mov    DWORD PTR [esp],eax
c0009396:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000939a:	52                   	push   edx
c000939b:	50                   	push   eax
c000939c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00093a0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00093a4:	e8 b2 e9 01 00       	call   c0027d5b <__adddf3>
c00093a9:	83 c4 10             	add    esp,0x10
c00093ac:	e9 50 fd ff ff       	jmp    c0009101 <linear_vari_process+0xce>
c00093b1:	50                   	push   eax
c00093b2:	50                   	push   eax
c00093b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00093b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00093bb:	e8 a0 fa 01 00       	call   c0028e60 <lrint>
c00093c0:	83 ec 0c             	sub    esp,0xc
c00093c3:	50                   	push   eax
c00093c4:	e8 72 f6 01 00       	call   c0028a3b <__floatsidf>
c00093c9:	83 c4 10             	add    esp,0x10
c00093cc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00093d0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00093d4:	52                   	push   edx
c00093d5:	50                   	push   eax
c00093d6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093da:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093de:	e8 c9 ef 01 00       	call   c00283ac <__subdf3>
c00093e3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00093e7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00093eb:	83 c4 20             	add    esp,0x20
c00093ee:	6a 00                	push   0x0
c00093f0:	6a 00                	push   0x0
c00093f2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093f6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093fa:	e8 a8 f8 01 00       	call   c0028ca7 <__ltdf2>
c00093ff:	83 c4 10             	add    esp,0x10
c0009402:	85 c0                	test   eax,eax
c0009404:	79 1e                	jns    c0009424 <linear_vari_process+0x3f1>
c0009406:	68 00 00 f0 3f       	push   0x3ff00000
c000940b:	6a 00                	push   0x0
c000940d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009411:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009415:	e8 41 e9 01 00       	call   c0027d5b <__adddf3>
c000941a:	83 c4 10             	add    esp,0x10
c000941d:	89 04 24             	mov    DWORD PTR [esp],eax
c0009420:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009424:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0009427:	83 ec 10             	sub    esp,0x10
c000942a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000942e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009432:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009436:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000943a:	e8 6d ef 01 00       	call   c00283ac <__subdf3>
c000943f:	83 c4 18             	add    esp,0x18
c0009442:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009446:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000944a:	52                   	push   edx
c000944b:	50                   	push   eax
c000944c:	e8 0f fa 01 00       	call   c0028e60 <lrint>
c0009451:	83 c4 10             	add    esp,0x10
c0009454:	0f af f8             	imul   edi,eax
c0009457:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000945a:	01 7b 10             	add    DWORD PTR [ebx+0x10],edi
c000945d:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0009460:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0009463:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c0009466:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c000946a:	0f 8d 13 03 00 00    	jge    c0009783 <linear_vari_process+0x750>
c0009470:	83 ec 0c             	sub    esp,0xc
c0009473:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009476:	e8 c0 f5 01 00       	call   c0028a3b <__floatsidf>
c000947b:	83 c4 10             	add    esp,0x10
c000947e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009482:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009486:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000948a:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000948e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009492:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009496:	e8 3d ef 01 00       	call   c00283d8 <__muldf3>
c000949b:	89 3c 24             	mov    DWORD PTR [esp],edi
c000949e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00094a2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00094a6:	e8 90 f5 01 00       	call   c0028a3b <__floatsidf>
c00094ab:	83 c4 10             	add    esp,0x10
c00094ae:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00094b2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00094b6:	52                   	push   edx
c00094b7:	50                   	push   eax
c00094b8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094bc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094c0:	e8 96 e8 01 00       	call   c0027d5b <__adddf3>
c00094c5:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00094c8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00094cc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00094d0:	e8 66 f5 01 00       	call   c0028a3b <__floatsidf>
c00094d5:	83 c4 10             	add    esp,0x10
c00094d8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00094dc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00094e0:	52                   	push   edx
c00094e1:	50                   	push   eax
c00094e2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094e6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094ea:	e8 b8 f7 01 00       	call   c0028ca7 <__ltdf2>
c00094ef:	83 c4 10             	add    esp,0x10
c00094f2:	85 c0                	test   eax,eax
c00094f4:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00094f8:	0f 89 85 02 00 00    	jns    c0009783 <linear_vari_process+0x750>
c00094fe:	85 c9                	test   ecx,ecx
c0009500:	0f 8e f5 00 00 00    	jle    c00095fb <linear_vari_process+0x5c8>
c0009506:	83 ec 10             	sub    esp,0x10
c0009509:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000950c:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000950f:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0009513:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0009516:	ff 30                	push   DWORD PTR [eax]
c0009518:	e8 8f ee 01 00       	call   c00283ac <__subdf3>
c000951d:	83 c4 18             	add    esp,0x18
c0009520:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009524:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009528:	52                   	push   edx
c0009529:	50                   	push   eax
c000952a:	e8 11 f9 01 00       	call   c0028e40 <fabs>
c000952f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009533:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009537:	83 c4 10             	add    esp,0x10
c000953a:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000953f:	68 23 42 92 0c       	push   0xc924223
c0009544:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009548:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000954c:	e8 38 f7 01 00       	call   c0028c89 <__gtdf2>
c0009551:	83 c4 10             	add    esp,0x10
c0009554:	85 c0                	test   eax,eax
c0009556:	0f 8e 9f 00 00 00    	jle    c00095fb <linear_vari_process+0x5c8>
c000955c:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009560:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009563:	8b 00                	mov    eax,DWORD PTR [eax]
c0009565:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009569:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000956d:	52                   	push   edx
c000956e:	50                   	push   eax
c000956f:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009572:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0009575:	e8 32 ee 01 00       	call   c00283ac <__subdf3>
c000957a:	5f                   	pop    edi
c000957b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000957f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009583:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009586:	e8 b0 f4 01 00       	call   c0028a3b <__floatsidf>
c000958b:	83 c4 10             	add    esp,0x10
c000958e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009592:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009596:	52                   	push   edx
c0009597:	50                   	push   eax
c0009598:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000959c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095a0:	e8 33 ee 01 00       	call   c00283d8 <__muldf3>
c00095a5:	5d                   	pop    ebp
c00095a6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00095aa:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00095ae:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00095b1:	e8 85 f4 01 00       	call   c0028a3b <__floatsidf>
c00095b6:	83 c4 10             	add    esp,0x10
c00095b9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00095bd:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00095c1:	52                   	push   edx
c00095c2:	50                   	push   eax
c00095c3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095c7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095cb:	e8 ec f0 01 00       	call   c00286bc <__divdf3>
c00095d0:	83 c4 10             	add    esp,0x10
c00095d3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00095d7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00095db:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00095df:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00095e3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095e7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095eb:	e8 6b e7 01 00       	call   c0027d5b <__adddf3>
c00095f0:	83 c4 10             	add    esp,0x10
c00095f3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00095f7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00095fb:	31 ff                	xor    edi,edi
c00095fd:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0009600:	39 f8                	cmp    eax,edi
c0009602:	0f 8e ac 00 00 00    	jle    c00096b4 <linear_vari_process+0x681>
c0009608:	8b 16                	mov    edx,DWORD PTR [esi]
c000960a:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000960d:	29 c1                	sub    ecx,eax
c000960f:	89 c8                	mov    eax,ecx
c0009611:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0009614:	01 f8                	add    eax,edi
c0009616:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000961a:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000961d:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009620:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009624:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009627:	51                   	push   ecx
c0009628:	01 f8                	add    eax,edi
c000962a:	51                   	push   ecx
c000962b:	47                   	inc    edi
c000962c:	55                   	push   ebp
c000962d:	ff 34 82             	push   DWORD PTR [edx+eax*4]
c0009630:	e8 bb e0 01 00       	call   c00276f0 <__subsf3>
c0009635:	89 04 24             	mov    DWORD PTR [esp],eax
c0009638:	e8 92 f7 01 00       	call   c0028dcf <__extendsfdf2>
c000963d:	83 c4 10             	add    esp,0x10
c0009640:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009644:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009648:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000964c:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009650:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009654:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009658:	e8 7b ed 01 00       	call   c00283d8 <__muldf3>
c000965d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009660:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009664:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009668:	e8 62 f7 01 00       	call   c0028dcf <__extendsfdf2>
c000966d:	83 c4 10             	add    esp,0x10
c0009670:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009674:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009678:	52                   	push   edx
c0009679:	50                   	push   eax
c000967a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000967e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009682:	e8 d4 e6 01 00       	call   c0027d5b <__adddf3>
c0009687:	5d                   	pop    ebp
c0009688:	59                   	pop    ecx
c0009689:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000968d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009691:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009695:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009699:	e8 0d f6 01 00       	call   c0028cab <__truncdfsf2>
c000969e:	83 c4 10             	add    esp,0x10
c00096a1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00096a5:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00096a9:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c00096ac:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c00096af:	e9 49 ff ff ff       	jmp    c00095fd <linear_vari_process+0x5ca>
c00096b4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096b8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096bc:	68 00 00 f0 3f       	push   0x3ff00000
c00096c1:	6a 00                	push   0x0
c00096c3:	e8 f4 ef 01 00       	call   c00286bc <__divdf3>
c00096c8:	83 c4 10             	add    esp,0x10
c00096cb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00096cf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00096d3:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00096d7:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00096db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096df:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096e3:	e8 73 e6 01 00       	call   c0027d5b <__adddf3>
c00096e8:	59                   	pop    ecx
c00096e9:	5f                   	pop    edi
c00096ea:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00096ee:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00096f2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096f6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096fa:	e8 61 f7 01 00       	call   c0028e60 <lrint>
c00096ff:	83 ec 0c             	sub    esp,0xc
c0009702:	50                   	push   eax
c0009703:	e8 33 f3 01 00       	call   c0028a3b <__floatsidf>
c0009708:	83 c4 10             	add    esp,0x10
c000970b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000970f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009713:	52                   	push   edx
c0009714:	50                   	push   eax
c0009715:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009719:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000971d:	e8 8a ec 01 00       	call   c00283ac <__subdf3>
c0009722:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009726:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000972a:	83 c4 20             	add    esp,0x20
c000972d:	6a 00                	push   0x0
c000972f:	6a 00                	push   0x0
c0009731:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009735:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009739:	e8 69 f5 01 00       	call   c0028ca7 <__ltdf2>
c000973e:	83 c4 10             	add    esp,0x10
c0009741:	85 c0                	test   eax,eax
c0009743:	79 1e                	jns    c0009763 <linear_vari_process+0x730>
c0009745:	68 00 00 f0 3f       	push   0x3ff00000
c000974a:	6a 00                	push   0x0
c000974c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009750:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009754:	e8 02 e6 01 00       	call   c0027d5b <__adddf3>
c0009759:	83 c4 10             	add    esp,0x10
c000975c:	89 04 24             	mov    DWORD PTR [esp],eax
c000975f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009763:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0009766:	83 ec 10             	sub    esp,0x10
c0009769:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000976d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009771:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009775:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009779:	e8 2e ec 01 00       	call   c00283ac <__subdf3>
c000977e:	e9 bc fc ff ff       	jmp    c000943f <linear_vari_process+0x40c>
c0009783:	39 fd                	cmp    ebp,edi
c0009785:	7d 38                	jge    c00097bf <linear_vari_process+0x78c>
c0009787:	83 ec 0c             	sub    esp,0xc
c000978a:	89 f8                	mov    eax,edi
c000978c:	29 e8                	sub    eax,ebp
c000978e:	99                   	cdq    
c000978f:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009792:	50                   	push   eax
c0009793:	e8 a3 f2 01 00       	call   c0028a3b <__floatsidf>
c0009798:	83 c4 10             	add    esp,0x10
c000979b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000979f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00097a3:	52                   	push   edx
c00097a4:	50                   	push   eax
c00097a5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00097a9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00097ad:	e8 a9 e5 01 00       	call   c0027d5b <__adddf3>
c00097b2:	83 c4 10             	add    esp,0x10
c00097b5:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c00097b8:	89 04 24             	mov    DWORD PTR [esp],eax
c00097bb:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00097bf:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c00097c3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00097c6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00097ca:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c00097cd:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c00097d0:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00097d3:	85 c0                	test   eax,eax
c00097d5:	7f 29                	jg     c0009800 <linear_vari_process+0x7cd>
c00097d7:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c00097db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00097df:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00097e3:	89 01                	mov    DWORD PTR [ecx],eax
c00097e5:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00097e8:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00097eb:	99                   	cdq    
c00097ec:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c00097ef:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c00097f2:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00097f5:	99                   	cdq    
c00097f6:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c00097f9:	31 d2                	xor    edx,edx
c00097fb:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00097fe:	eb 1d                	jmp    c000981d <linear_vari_process+0x7ea>
c0009800:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c0009803:	31 d2                	xor    edx,edx
c0009805:	29 c8                	sub    eax,ecx
c0009807:	c1 e0 02             	shl    eax,0x2
c000980a:	39 d1                	cmp    ecx,edx
c000980c:	7e c9                	jle    c00097d7 <linear_vari_process+0x7a4>
c000980e:	8b 3e                	mov    edi,DWORD PTR [esi]
c0009810:	8b 3c 07             	mov    edi,DWORD PTR [edi+eax*1]
c0009813:	83 c0 04             	add    eax,0x4
c0009816:	89 7c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],edi
c000981a:	42                   	inc    edx
c000981b:	eb ed                	jmp    c000980a <linear_vari_process+0x7d7>
c000981d:	83 c4 3c             	add    esp,0x3c
c0009820:	89 d0                	mov    eax,edx
c0009822:	5b                   	pop    ebx
c0009823:	5e                   	pop    esi
c0009824:	5f                   	pop    edi
c0009825:	5d                   	pop    ebp
c0009826:	c3                   	ret    

c0009827 <linear_reset>:
c0009827:	83 ec 0c             	sub    esp,0xc
c000982a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000982e:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0009831:	85 c0                	test   eax,eax
c0009833:	74 20                	je     c0009855 <linear_reset+0x2e>
c0009835:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c0009838:	83 c0 1c             	add    eax,0x1c
c000983b:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000983e:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c0009845:	c1 e2 02             	shl    edx,0x2
c0009848:	51                   	push   ecx
c0009849:	52                   	push   edx
c000984a:	6a 00                	push   0x0
c000984c:	50                   	push   eax
c000984d:	e8 4a 6f ff ff       	call   c000079c <memset>
c0009852:	83 c4 10             	add    esp,0x10
c0009855:	83 c4 0c             	add    esp,0xc
c0009858:	c3                   	ret    

c0009859 <linear_get_name>:
c0009859:	31 c0                	xor    eax,eax
c000985b:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0009860:	75 05                	jne    c0009867 <linear_get_name+0xe>
c0009862:	b8 a0 a6 02 c0       	mov    eax,0xc002a6a0
c0009867:	c3                   	ret    

c0009868 <linear_get_description>:
c0009868:	31 c0                	xor    eax,eax
c000986a:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c000986f:	75 05                	jne    c0009876 <linear_get_description+0xe>
c0009871:	b8 b4 a6 02 c0       	mov    eax,0xc002a6b4
c0009876:	c3                   	ret    

c0009877 <linear_set_converter>:
c0009877:	53                   	push   ebx
c0009878:	b8 0a 00 00 00       	mov    eax,0xa
c000987d:	83 ec 08             	sub    esp,0x8
c0009880:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009884:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c0009889:	75 6e                	jne    c00098f9 <linear_set_converter+0x82>
c000988b:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000988e:	85 c0                	test   eax,eax
c0009890:	74 13                	je     c00098a5 <linear_set_converter+0x2e>
c0009892:	83 ec 0c             	sub    esp,0xc
c0009895:	50                   	push   eax
c0009896:	e8 a7 60 00 00       	call   c000f942 <free>
c000989b:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00098a2:	83 c4 10             	add    esp,0x10
c00098a5:	50                   	push   eax
c00098a6:	50                   	push   eax
c00098a7:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00098aa:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c00098b1:	50                   	push   eax
c00098b2:	6a 01                	push   0x1
c00098b4:	e8 a9 60 00 00       	call   c000f962 <calloc>
c00098b9:	83 c4 10             	add    esp,0x10
c00098bc:	89 c2                	mov    edx,eax
c00098be:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00098c1:	85 d2                	test   edx,edx
c00098c3:	b8 01 00 00 00       	mov    eax,0x1
c00098c8:	74 2f                	je     c00098f9 <linear_set_converter+0x82>
c00098ca:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00098cd:	83 ec 0c             	sub    esp,0xc
c00098d0:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00098d3:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c00098d9:	c7 43 24 33 90 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0009033
c00098e0:	c7 43 20 33 90 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0009033
c00098e7:	c7 43 28 27 98 00 c0 	mov    DWORD PTR [ebx+0x28],0xc0009827
c00098ee:	53                   	push   ebx
c00098ef:	e8 33 ff ff ff       	call   c0009827 <linear_reset>
c00098f4:	83 c4 10             	add    esp,0x10
c00098f7:	31 c0                	xor    eax,eax
c00098f9:	83 c4 08             	add    esp,0x8
c00098fc:	5b                   	pop    ebx
c00098fd:	c3                   	ret    

c00098fe <int_to_fp>:
c00098fe:	c1 e0 0c             	shl    eax,0xc
c0009901:	c3                   	ret    

c0009902 <fp_to_int>:
c0009902:	c1 f8 0c             	sar    eax,0xc
c0009905:	c3                   	ret    

c0009906 <fp_fraction_part>:
c0009906:	25 ff 0f 00 00       	and    eax,0xfff
c000990b:	c3                   	ret    

c000990c <fp_to_double>:
c000990c:	83 ec 1c             	sub    esp,0x1c
c000990f:	e8 f2 ff ff ff       	call   c0009906 <fp_fraction_part>
c0009914:	83 ec 0c             	sub    esp,0xc
c0009917:	50                   	push   eax
c0009918:	e8 1e f1 01 00       	call   c0028a3b <__floatsidf>
c000991d:	83 c4 10             	add    esp,0x10
c0009920:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009924:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009928:	68 00 00 30 3f       	push   0x3f300000
c000992d:	6a 00                	push   0x0
c000992f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009933:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009937:	e8 9c ea 01 00       	call   c00283d8 <__muldf3>
c000993c:	83 c4 2c             	add    esp,0x2c
c000993f:	c3                   	ret    

c0009940 <calc_output_single>:
c0009940:	55                   	push   ebp
c0009941:	57                   	push   edi
c0009942:	56                   	push   esi
c0009943:	89 c6                	mov    esi,eax
c0009945:	53                   	push   ebx
c0009946:	89 d3                	mov    ebx,edx
c0009948:	83 ec 4c             	sub    esp,0x4c
c000994b:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000994f:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0009952:	e8 a7 ff ff ff       	call   c00098fe <int_to_fp>
c0009957:	8b 7e 34             	mov    edi,DWORD PTR [esi+0x34]
c000995a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000995e:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0009962:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c0009966:	8b 7e 30             	mov    edi,DWORD PTR [esi+0x30]
c0009969:	99                   	cdq    
c000996a:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0009972:	f7 fb                	idiv   ebx
c0009974:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000997c:	89 da                	mov    edx,ebx
c000997e:	0f af d0             	imul   edx,eax
c0009981:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0009985:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009989:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000998d:	29 c2                	sub    edx,eax
c000998f:	8d 2c 96             	lea    ebp,[esi+edx*4]
c0009992:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009996:	83 c5 04             	add    ebp,0x4
c0009999:	e8 6e ff ff ff       	call   c000990c <fp_to_double>
c000999e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00099a2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00099a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00099aa:	e8 53 ff ff ff       	call   c0009902 <fp_to_int>
c00099af:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c00099b2:	52                   	push   edx
c00099b3:	52                   	push   edx
c00099b4:	51                   	push   ecx
c00099b5:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c00099b9:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c00099bd:	e8 2e dd 01 00       	call   c00276f0 <__subsf3>
c00099c2:	89 04 24             	mov    DWORD PTR [esp],eax
c00099c5:	e8 05 f4 01 00       	call   c0028dcf <__extendsfdf2>
c00099ca:	83 c4 10             	add    esp,0x10
c00099cd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099d1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099d5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00099d9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00099dd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00099e1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00099e5:	e8 ee e9 01 00       	call   c00283d8 <__muldf3>
c00099ea:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00099ee:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00099f2:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00099f5:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c00099f9:	e8 d1 f3 01 00       	call   c0028dcf <__extendsfdf2>
c00099fe:	83 c4 10             	add    esp,0x10
c0009a01:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009a05:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009a09:	52                   	push   edx
c0009a0a:	50                   	push   eax
c0009a0b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009a0f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009a13:	e8 43 e3 01 00       	call   c0027d5b <__adddf3>
c0009a18:	59                   	pop    ecx
c0009a19:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0009a1d:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0009a21:	ff b5 40 08 00 00    	push   DWORD PTR [ebp+0x840]
c0009a27:	e8 a3 f3 01 00       	call   c0028dcf <__extendsfdf2>
c0009a2c:	83 c4 10             	add    esp,0x10
c0009a2f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009a33:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009a37:	52                   	push   edx
c0009a38:	50                   	push   eax
c0009a39:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009a3d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009a41:	e8 92 e9 01 00       	call   c00283d8 <__muldf3>
c0009a46:	83 c4 10             	add    esp,0x10
c0009a49:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009a4d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009a51:	52                   	push   edx
c0009a52:	50                   	push   eax
c0009a53:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009a57:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009a5b:	e8 fb e2 01 00       	call   c0027d5b <__adddf3>
c0009a60:	83 c4 10             	add    esp,0x10
c0009a63:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009a67:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009a6b:	29 5c 24 10          	sub    DWORD PTR [esp+0x10],ebx
c0009a6f:	0f 89 1d ff ff ff    	jns    c0009992 <calc_output_single+0x52>
c0009a75:	89 d9                	mov    ecx,ebx
c0009a77:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009a7b:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0009a7f:	89 dd                	mov    ebp,ebx
c0009a81:	29 c8                	sub    eax,ecx
c0009a83:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0009a8b:	99                   	cdq    
c0009a8c:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009a94:	f7 fb                	idiv   ebx
c0009a96:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009a9a:	0f af e8             	imul   ebp,eax
c0009a9d:	8d 44 02 01          	lea    eax,[edx+eax*1+0x1]
c0009aa1:	01 cd                	add    ebp,ecx
c0009aa3:	8d 34 86             	lea    esi,[esi+eax*4]
c0009aa6:	89 e8                	mov    eax,ebp
c0009aa8:	83 ee 04             	sub    esi,0x4
c0009aab:	e8 5c fe ff ff       	call   c000990c <fp_to_double>
c0009ab0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009ab4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009ab8:	89 e8                	mov    eax,ebp
c0009aba:	29 dd                	sub    ebp,ebx
c0009abc:	e8 41 fe ff ff       	call   c0009902 <fp_to_int>
c0009ac1:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009ac4:	52                   	push   edx
c0009ac5:	52                   	push   edx
c0009ac6:	51                   	push   ecx
c0009ac7:	89 4c 24 44          	mov    DWORD PTR [esp+0x44],ecx
c0009acb:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009acf:	e8 1c dc 01 00       	call   c00276f0 <__subsf3>
c0009ad4:	89 04 24             	mov    DWORD PTR [esp],eax
c0009ad7:	e8 f3 f2 01 00       	call   c0028dcf <__extendsfdf2>
c0009adc:	83 c4 10             	add    esp,0x10
c0009adf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009ae3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009ae7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009aeb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009aef:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009af3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009af7:	e8 dc e8 01 00       	call   c00283d8 <__muldf3>
c0009afc:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0009b00:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009b04:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009b07:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009b0b:	e8 bf f2 01 00       	call   c0028dcf <__extendsfdf2>
c0009b10:	83 c4 10             	add    esp,0x10
c0009b13:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009b17:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009b1b:	52                   	push   edx
c0009b1c:	50                   	push   eax
c0009b1d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b21:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b25:	e8 31 e2 01 00       	call   c0027d5b <__adddf3>
c0009b2a:	59                   	pop    ecx
c0009b2b:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009b2f:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009b33:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c0009b39:	e8 91 f2 01 00       	call   c0028dcf <__extendsfdf2>
c0009b3e:	83 c4 10             	add    esp,0x10
c0009b41:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009b45:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009b49:	52                   	push   edx
c0009b4a:	50                   	push   eax
c0009b4b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b4f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b53:	e8 80 e8 01 00       	call   c00283d8 <__muldf3>
c0009b58:	83 c4 10             	add    esp,0x10
c0009b5b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009b5f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009b63:	52                   	push   edx
c0009b64:	50                   	push   eax
c0009b65:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b69:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b6d:	e8 e9 e1 01 00       	call   c0027d5b <__adddf3>
c0009b72:	83 c4 10             	add    esp,0x10
c0009b75:	85 ed                	test   ebp,ebp
c0009b77:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009b7b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009b7f:	0f 8f 21 ff ff ff    	jg     c0009aa6 <calc_output_single+0x166>
c0009b85:	52                   	push   edx
c0009b86:	50                   	push   eax
c0009b87:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b8b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b8f:	e8 c7 e1 01 00       	call   c0027d5b <__adddf3>
c0009b94:	83 c4 5c             	add    esp,0x5c
c0009b97:	5b                   	pop    ebx
c0009b98:	5e                   	pop    esi
c0009b99:	5f                   	pop    edi
c0009b9a:	5d                   	pop    ebp
c0009b9b:	c3                   	ret    

c0009b9c <calc_output_stereo>:
c0009b9c:	55                   	push   ebp
c0009b9d:	89 cd                	mov    ebp,ecx
c0009b9f:	57                   	push   edi
c0009ba0:	56                   	push   esi
c0009ba1:	53                   	push   ebx
c0009ba2:	89 c3                	mov    ebx,eax
c0009ba4:	83 ec 6c             	sub    esp,0x6c
c0009ba7:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009bab:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0009bb2:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0009bb9:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009bbd:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009bc1:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009bc4:	e8 35 fd ff ff       	call   c00098fe <int_to_fp>
c0009bc9:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0009bd1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009bd5:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0009bdd:	29 c8                	sub    eax,ecx
c0009bdf:	99                   	cdq    
c0009be0:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009be4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009be8:	0f af d0             	imul   edx,eax
c0009beb:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0009bee:	31 d2                	xor    edx,edx
c0009bf0:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0009bf4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009bf8:	8b 73 34             	mov    esi,DWORD PTR [ebx+0x34]
c0009bfb:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0009bff:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c0009c02:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0009c06:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0009c0a:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c0009c0d:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009c12:	29 c1                	sub    ecx,eax
c0009c14:	31 c0                	xor    eax,eax
c0009c16:	8d 3c 8b             	lea    edi,[ebx+ecx*4]
c0009c19:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009c1d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009c21:	83 c7 08             	add    edi,0x8
c0009c24:	e8 e3 fc ff ff       	call   c000990c <fp_to_double>
c0009c29:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009c2d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009c31:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009c35:	e8 c8 fc ff ff       	call   c0009902 <fp_to_int>
c0009c3a:	8b 0c 86             	mov    ecx,DWORD PTR [esi+eax*4]
c0009c3d:	52                   	push   edx
c0009c3e:	52                   	push   edx
c0009c3f:	51                   	push   ecx
c0009c40:	89 4c 24 68          	mov    DWORD PTR [esp+0x68],ecx
c0009c44:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009c48:	e8 a3 da 01 00       	call   c00276f0 <__subsf3>
c0009c4d:	89 04 24             	mov    DWORD PTR [esp],eax
c0009c50:	e8 7a f1 01 00       	call   c0028dcf <__extendsfdf2>
c0009c55:	83 c4 10             	add    esp,0x10
c0009c58:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c5c:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c60:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c64:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c68:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c6c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c70:	e8 63 e7 01 00       	call   c00283d8 <__muldf3>
c0009c75:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c0009c79:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009c7d:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009c80:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0009c84:	e8 46 f1 01 00       	call   c0028dcf <__extendsfdf2>
c0009c89:	83 c4 10             	add    esp,0x10
c0009c8c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c90:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c94:	52                   	push   edx
c0009c95:	50                   	push   eax
c0009c96:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c9a:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c9e:	e8 b8 e0 01 00       	call   c0027d5b <__adddf3>
c0009ca3:	59                   	pop    ecx
c0009ca4:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0009ca8:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c0009cac:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009cb2:	e8 18 f1 01 00       	call   c0028dcf <__extendsfdf2>
c0009cb7:	83 c4 10             	add    esp,0x10
c0009cba:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009cbe:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009cc2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cc6:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cca:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cce:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cd2:	e8 01 e7 01 00       	call   c00283d8 <__muldf3>
c0009cd7:	83 c4 10             	add    esp,0x10
c0009cda:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009cde:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009ce2:	52                   	push   edx
c0009ce3:	50                   	push   eax
c0009ce4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ce8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009cec:	e8 6a e0 01 00       	call   c0027d5b <__adddf3>
c0009cf1:	59                   	pop    ecx
c0009cf2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009cf6:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009cfa:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009d00:	e8 ca f0 01 00       	call   c0028dcf <__extendsfdf2>
c0009d05:	83 c4 10             	add    esp,0x10
c0009d08:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009d0c:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009d10:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009d14:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009d18:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009d1c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009d20:	e8 b3 e6 01 00       	call   c00283d8 <__muldf3>
c0009d25:	83 c4 10             	add    esp,0x10
c0009d28:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009d2c:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009d30:	52                   	push   edx
c0009d31:	50                   	push   eax
c0009d32:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009d36:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009d3a:	e8 1c e0 01 00       	call   c0027d5b <__adddf3>
c0009d3f:	83 c4 10             	add    esp,0x10
c0009d42:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009d46:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009d4a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009d4e:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0009d52:	0f 89 c5 fe ff ff    	jns    c0009c1d <calc_output_stereo+0x81>
c0009d58:	29 e9                	sub    ecx,ebp
c0009d5a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009d5e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0009d62:	29 c8                	sub    eax,ecx
c0009d64:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0009d6c:	99                   	cdq    
c0009d6d:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009d71:	31 d2                	xor    edx,edx
c0009d73:	0f af f8             	imul   edi,eax
c0009d76:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009d7a:	40                   	inc    eax
c0009d7b:	01 cf                	add    edi,ecx
c0009d7d:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009d82:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0009d86:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0009d8e:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c0009d91:	31 c0                	xor    eax,eax
c0009d93:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009d97:	89 f8                	mov    eax,edi
c0009d99:	83 eb 08             	sub    ebx,0x8
c0009d9c:	e8 6b fb ff ff       	call   c000990c <fp_to_double>
c0009da1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009da5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009da9:	89 f8                	mov    eax,edi
c0009dab:	e8 52 fb ff ff       	call   c0009902 <fp_to_int>
c0009db0:	8b 2c 86             	mov    ebp,DWORD PTR [esi+eax*4]
c0009db3:	52                   	push   edx
c0009db4:	52                   	push   edx
c0009db5:	55                   	push   ebp
c0009db6:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009dba:	e8 31 d9 01 00       	call   c00276f0 <__subsf3>
c0009dbf:	89 04 24             	mov    DWORD PTR [esp],eax
c0009dc2:	e8 08 f0 01 00       	call   c0028dcf <__extendsfdf2>
c0009dc7:	83 c4 10             	add    esp,0x10
c0009dca:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009dce:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009dd2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009dd6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009dda:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009dde:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009de2:	e8 f1 e5 01 00       	call   c00283d8 <__muldf3>
c0009de7:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009dea:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009dee:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009df2:	e8 d8 ef 01 00       	call   c0028dcf <__extendsfdf2>
c0009df7:	83 c4 10             	add    esp,0x10
c0009dfa:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009dfe:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e02:	52                   	push   edx
c0009e03:	50                   	push   eax
c0009e04:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009e08:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009e0c:	e8 4a df 01 00       	call   c0027d5b <__adddf3>
c0009e11:	59                   	pop    ecx
c0009e12:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009e16:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009e1a:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c0009e20:	e8 aa ef 01 00       	call   c0028dcf <__extendsfdf2>
c0009e25:	83 c4 10             	add    esp,0x10
c0009e28:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e2c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e30:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e34:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e38:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e3c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e40:	e8 93 e5 01 00       	call   c00283d8 <__muldf3>
c0009e45:	83 c4 10             	add    esp,0x10
c0009e48:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e4c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e50:	52                   	push   edx
c0009e51:	50                   	push   eax
c0009e52:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e56:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e5a:	e8 fc de 01 00       	call   c0027d5b <__adddf3>
c0009e5f:	5d                   	pop    ebp
c0009e60:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009e64:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009e68:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c0009e6e:	e8 5c ef 01 00       	call   c0028dcf <__extendsfdf2>
c0009e73:	83 c4 10             	add    esp,0x10
c0009e76:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e7a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e7e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e82:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e86:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e8a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e8e:	e8 45 e5 01 00       	call   c00283d8 <__muldf3>
c0009e93:	83 c4 10             	add    esp,0x10
c0009e96:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009e9a:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009e9e:	52                   	push   edx
c0009e9f:	50                   	push   eax
c0009ea0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009ea4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009ea8:	e8 ae de 01 00       	call   c0027d5b <__adddf3>
c0009ead:	83 c4 10             	add    esp,0x10
c0009eb0:	2b 7c 24 08          	sub    edi,DWORD PTR [esp+0x8]
c0009eb4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009eb8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009ebc:	85 ff                	test   edi,edi
c0009ebe:	0f 8f d3 fe ff ff    	jg     c0009d97 <calc_output_stereo+0x1fb>
c0009ec4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ec8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ecc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ed0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ed4:	e8 82 de 01 00       	call   c0027d5b <__adddf3>
c0009ed9:	83 c4 10             	add    esp,0x10
c0009edc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009ee0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009ee4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ee8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009eec:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ef0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ef4:	e8 df e4 01 00       	call   c00283d8 <__muldf3>
c0009ef9:	59                   	pop    ecx
c0009efa:	5b                   	pop    ebx
c0009efb:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009eff:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009f03:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f07:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f0b:	e8 9b ed 01 00       	call   c0028cab <__truncdfsf2>
c0009f10:	83 c4 10             	add    esp,0x10
c0009f13:	8b 9c 24 88 00 00 00 	mov    ebx,DWORD PTR [esp+0x88]
c0009f1a:	89 03                	mov    DWORD PTR [ebx],eax
c0009f1c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f20:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f24:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f28:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f2c:	e8 2a de 01 00       	call   c0027d5b <__adddf3>
c0009f31:	83 c4 10             	add    esp,0x10
c0009f34:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009f38:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009f3c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009f40:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009f44:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f48:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f4c:	e8 87 e4 01 00       	call   c00283d8 <__muldf3>
c0009f51:	5e                   	pop    esi
c0009f52:	5f                   	pop    edi
c0009f53:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009f57:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009f5b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f5f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f63:	e8 43 ed 01 00       	call   c0028cab <__truncdfsf2>
c0009f68:	8b 9c 24 98 00 00 00 	mov    ebx,DWORD PTR [esp+0x98]
c0009f6f:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0009f72:	83 c4 7c             	add    esp,0x7c
c0009f75:	5b                   	pop    ebx
c0009f76:	5e                   	pop    esi
c0009f77:	5f                   	pop    edi
c0009f78:	5d                   	pop    ebp
c0009f79:	c3                   	ret    

c0009f7a <calc_output_quad>:
c0009f7a:	55                   	push   ebp
c0009f7b:	57                   	push   edi
c0009f7c:	56                   	push   esi
c0009f7d:	89 c6                	mov    esi,eax
c0009f7f:	53                   	push   ebx
c0009f80:	83 ec 7c             	sub    esp,0x7c
c0009f83:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009f87:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0009f8b:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0009f92:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
c0009f99:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009f9d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009fa1:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0009fa4:	e8 55 f9 ff ff       	call   c00098fe <int_to_fp>
c0009fa9:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0009fac:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0009faf:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009fb3:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009fb7:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0009fbb:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009fbf:	99                   	cdq    
c0009fc0:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0009fc4:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009fc8:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c0009fcb:	31 d2                	xor    edx,edx
c0009fcd:	0f af d8             	imul   ebx,eax
c0009fd0:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0009fd8:	0f af c7             	imul   eax,edi
c0009fdb:	03 5c 24 28          	add    ebx,DWORD PTR [esp+0x28]
c0009fdf:	29 c1                	sub    ecx,eax
c0009fe1:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0009fe9:	31 c0                	xor    eax,eax
c0009feb:	8d 3c 8e             	lea    edi,[esi+ecx*4]
c0009fee:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009ff2:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009ff6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009ffa:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009ffe:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a002:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a006:	89 d8                	mov    eax,ebx
c000a008:	83 c7 10             	add    edi,0x10
c000a00b:	e8 fc f8 ff ff       	call   c000990c <fp_to_double>
c000a010:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a014:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a018:	89 d8                	mov    eax,ebx
c000a01a:	e8 e3 f8 ff ff       	call   c0009902 <fp_to_int>
c000a01f:	8b 4c 85 00          	mov    ecx,DWORD PTR [ebp+eax*4+0x0]
c000a023:	52                   	push   edx
c000a024:	52                   	push   edx
c000a025:	51                   	push   ecx
c000a026:	89 4c 24 78          	mov    DWORD PTR [esp+0x78],ecx
c000a02a:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a02e:	e8 bd d6 01 00       	call   c00276f0 <__subsf3>
c000a033:	89 04 24             	mov    DWORD PTR [esp],eax
c000a036:	e8 94 ed 01 00       	call   c0028dcf <__extendsfdf2>
c000a03b:	83 c4 10             	add    esp,0x10
c000a03e:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a042:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a046:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a04a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a04e:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a052:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a056:	e8 7d e3 01 00       	call   c00283d8 <__muldf3>
c000a05b:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c000a05f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a063:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a066:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a06a:	e8 60 ed 01 00       	call   c0028dcf <__extendsfdf2>
c000a06f:	83 c4 10             	add    esp,0x10
c000a072:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a076:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a07a:	52                   	push   edx
c000a07b:	50                   	push   eax
c000a07c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a080:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a084:	e8 d2 dc 01 00       	call   c0027d5b <__adddf3>
c000a089:	59                   	pop    ecx
c000a08a:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a08e:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a092:	ff b7 34 08 00 00    	push   DWORD PTR [edi+0x834]
c000a098:	e8 32 ed 01 00       	call   c0028dcf <__extendsfdf2>
c000a09d:	83 c4 10             	add    esp,0x10
c000a0a0:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0a4:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0b0:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0b4:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0b8:	e8 1b e3 01 00       	call   c00283d8 <__muldf3>
c000a0bd:	83 c4 10             	add    esp,0x10
c000a0c0:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0c4:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0c8:	52                   	push   edx
c000a0c9:	50                   	push   eax
c000a0ca:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a0ce:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a0d2:	e8 84 dc 01 00       	call   c0027d5b <__adddf3>
c000a0d7:	59                   	pop    ecx
c000a0d8:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a0dc:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a0e0:	ff b7 38 08 00 00    	push   DWORD PTR [edi+0x838]
c000a0e6:	e8 e4 ec 01 00       	call   c0028dcf <__extendsfdf2>
c000a0eb:	83 c4 10             	add    esp,0x10
c000a0ee:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0f2:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0fe:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a102:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a106:	e8 cd e2 01 00       	call   c00283d8 <__muldf3>
c000a10b:	83 c4 10             	add    esp,0x10
c000a10e:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a112:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a116:	52                   	push   edx
c000a117:	50                   	push   eax
c000a118:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a11c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a120:	e8 36 dc 01 00       	call   c0027d5b <__adddf3>
c000a125:	59                   	pop    ecx
c000a126:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a12a:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a12e:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c000a134:	e8 96 ec 01 00       	call   c0028dcf <__extendsfdf2>
c000a139:	83 c4 10             	add    esp,0x10
c000a13c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a140:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a144:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a148:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a14c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a150:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a154:	e8 7f e2 01 00       	call   c00283d8 <__muldf3>
c000a159:	83 c4 10             	add    esp,0x10
c000a15c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a160:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a164:	52                   	push   edx
c000a165:	50                   	push   eax
c000a166:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a16a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a16e:	e8 e8 db 01 00       	call   c0027d5b <__adddf3>
c000a173:	59                   	pop    ecx
c000a174:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a178:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a17c:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c000a182:	e8 48 ec 01 00       	call   c0028dcf <__extendsfdf2>
c000a187:	83 c4 10             	add    esp,0x10
c000a18a:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a18e:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a192:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a196:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a19a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a19e:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a1a2:	e8 31 e2 01 00       	call   c00283d8 <__muldf3>
c000a1a7:	83 c4 10             	add    esp,0x10
c000a1aa:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a1ae:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a1b2:	52                   	push   edx
c000a1b3:	50                   	push   eax
c000a1b4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a1b8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a1bc:	e8 9a db 01 00       	call   c0027d5b <__adddf3>
c000a1c1:	83 c4 10             	add    esp,0x10
c000a1c4:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a1c8:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a1cc:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a1d0:	0f 89 30 fe ff ff    	jns    c000a006 <calc_output_quad+0x8c>
c000a1d6:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a1da:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a1de:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a1e2:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000a1e6:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000a1ee:	29 c8                	sub    eax,ecx
c000a1f0:	99                   	cdq    
c000a1f1:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000a1f5:	31 d2                	xor    edx,edx
c000a1f7:	0f af d8             	imul   ebx,eax
c000a1fa:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a1fe:	40                   	inc    eax
c000a1ff:	01 cb                	add    ebx,ecx
c000a201:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c000a206:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000a20a:	03 44 24 48          	add    eax,DWORD PTR [esp+0x48]
c000a20e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a212:	8d 34 86             	lea    esi,[esi+eax*4]
c000a215:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c000a21d:	31 c0                	xor    eax,eax
c000a21f:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a223:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a227:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a22b:	89 d8                	mov    eax,ebx
c000a22d:	83 ee 10             	sub    esi,0x10
c000a230:	e8 d7 f6 ff ff       	call   c000990c <fp_to_double>
c000a235:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a239:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a23d:	89 d8                	mov    eax,ebx
c000a23f:	e8 be f6 ff ff       	call   c0009902 <fp_to_int>
c000a244:	8b 7c 85 00          	mov    edi,DWORD PTR [ebp+eax*4+0x0]
c000a248:	52                   	push   edx
c000a249:	52                   	push   edx
c000a24a:	57                   	push   edi
c000a24b:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a24f:	e8 9c d4 01 00       	call   c00276f0 <__subsf3>
c000a254:	89 04 24             	mov    DWORD PTR [esp],eax
c000a257:	e8 73 eb 01 00       	call   c0028dcf <__extendsfdf2>
c000a25c:	83 c4 10             	add    esp,0x10
c000a25f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a263:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a267:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a26b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a26f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a273:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a277:	e8 5c e1 01 00       	call   c00283d8 <__muldf3>
c000a27c:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a27f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a283:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a287:	e8 43 eb 01 00       	call   c0028dcf <__extendsfdf2>
c000a28c:	83 c4 10             	add    esp,0x10
c000a28f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a293:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a297:	52                   	push   edx
c000a298:	50                   	push   eax
c000a299:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a29d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a2a1:	e8 b5 da 01 00       	call   c0027d5b <__adddf3>
c000a2a6:	59                   	pop    ecx
c000a2a7:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a2ab:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a2af:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a2b5:	e8 15 eb 01 00       	call   c0028dcf <__extendsfdf2>
c000a2ba:	83 c4 10             	add    esp,0x10
c000a2bd:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2c1:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2c5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2c9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2cd:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2d1:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2d5:	e8 fe e0 01 00       	call   c00283d8 <__muldf3>
c000a2da:	83 c4 10             	add    esp,0x10
c000a2dd:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2e1:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2e5:	52                   	push   edx
c000a2e6:	50                   	push   eax
c000a2e7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a2eb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a2ef:	e8 67 da 01 00       	call   c0027d5b <__adddf3>
c000a2f4:	5f                   	pop    edi
c000a2f5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a2f9:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a2fd:	ff b6 58 08 00 00    	push   DWORD PTR [esi+0x858]
c000a303:	e8 c7 ea 01 00       	call   c0028dcf <__extendsfdf2>
c000a308:	83 c4 10             	add    esp,0x10
c000a30b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a30f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a313:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a317:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a31b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a31f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a323:	e8 b0 e0 01 00       	call   c00283d8 <__muldf3>
c000a328:	83 c4 10             	add    esp,0x10
c000a32b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a32f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a333:	52                   	push   edx
c000a334:	50                   	push   eax
c000a335:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a339:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a33d:	e8 19 da 01 00       	call   c0027d5b <__adddf3>
c000a342:	59                   	pop    ecx
c000a343:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a347:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a34b:	ff b6 5c 08 00 00    	push   DWORD PTR [esi+0x85c]
c000a351:	e8 79 ea 01 00       	call   c0028dcf <__extendsfdf2>
c000a356:	83 c4 10             	add    esp,0x10
c000a359:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a35d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a361:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a365:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a369:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a36d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a371:	e8 62 e0 01 00       	call   c00283d8 <__muldf3>
c000a376:	83 c4 10             	add    esp,0x10
c000a379:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a37d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a381:	52                   	push   edx
c000a382:	50                   	push   eax
c000a383:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a387:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a38b:	e8 cb d9 01 00       	call   c0027d5b <__adddf3>
c000a390:	5f                   	pop    edi
c000a391:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c000a395:	89 54 24 60          	mov    DWORD PTR [esp+0x60],edx
c000a399:	ff b6 60 08 00 00    	push   DWORD PTR [esi+0x860]
c000a39f:	e8 2b ea 01 00       	call   c0028dcf <__extendsfdf2>
c000a3a4:	83 c4 10             	add    esp,0x10
c000a3a7:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a3ab:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a3af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a3b3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a3b7:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a3bb:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a3bf:	e8 14 e0 01 00       	call   c00283d8 <__muldf3>
c000a3c4:	83 c4 10             	add    esp,0x10
c000a3c7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a3cb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a3cf:	52                   	push   edx
c000a3d0:	50                   	push   eax
c000a3d1:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a3d5:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a3d9:	e8 7d d9 01 00       	call   c0027d5b <__adddf3>
c000a3de:	83 c4 10             	add    esp,0x10
c000a3e1:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a3e5:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000a3e9:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000a3ed:	85 db                	test   ebx,ebx
c000a3ef:	0f 8f 36 fe ff ff    	jg     c000a22b <calc_output_quad+0x2b1>
c000a3f5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3f9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3fd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a401:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a405:	e8 51 d9 01 00       	call   c0027d5b <__adddf3>
c000a40a:	83 c4 10             	add    esp,0x10
c000a40d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a411:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a415:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a419:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a41d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a421:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a425:	e8 ae df 01 00       	call   c00283d8 <__muldf3>
c000a42a:	59                   	pop    ecx
c000a42b:	5b                   	pop    ebx
c000a42c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a430:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a434:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a438:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a43c:	e8 6a e8 01 00       	call   c0028cab <__truncdfsf2>
c000a441:	83 c4 10             	add    esp,0x10
c000a444:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a44b:	89 06                	mov    DWORD PTR [esi],eax
c000a44d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a451:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a455:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a459:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a45d:	e8 f9 d8 01 00       	call   c0027d5b <__adddf3>
c000a462:	83 c4 10             	add    esp,0x10
c000a465:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a469:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a46d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a471:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a475:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a479:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a47d:	e8 56 df 01 00       	call   c00283d8 <__muldf3>
c000a482:	5e                   	pop    esi
c000a483:	5f                   	pop    edi
c000a484:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a488:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a48c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a490:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a494:	e8 12 e8 01 00       	call   c0028cab <__truncdfsf2>
c000a499:	83 c4 10             	add    esp,0x10
c000a49c:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a4a3:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c000a4a6:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a4aa:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a4ae:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a4b2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a4b6:	e8 a0 d8 01 00       	call   c0027d5b <__adddf3>
c000a4bb:	83 c4 10             	add    esp,0x10
c000a4be:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a4c2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a4c6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4d2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4d6:	e8 fd de 01 00       	call   c00283d8 <__muldf3>
c000a4db:	5d                   	pop    ebp
c000a4dc:	59                   	pop    ecx
c000a4dd:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a4e1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a4e5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4ed:	e8 b9 e7 01 00       	call   c0028cab <__truncdfsf2>
c000a4f2:	83 c4 10             	add    esp,0x10
c000a4f5:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a4fc:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000a4ff:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a503:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a507:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a50b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a50f:	e8 47 d8 01 00       	call   c0027d5b <__adddf3>
c000a514:	83 c4 10             	add    esp,0x10
c000a517:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a51b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a51f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a523:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a527:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a52b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a52f:	e8 a4 de 01 00       	call   c00283d8 <__muldf3>
c000a534:	5b                   	pop    ebx
c000a535:	5e                   	pop    esi
c000a536:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a53a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a53e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a542:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a546:	e8 60 e7 01 00       	call   c0028cab <__truncdfsf2>
c000a54b:	8b 8c 24 a8 00 00 00 	mov    ecx,DWORD PTR [esp+0xa8]
c000a552:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000a555:	81 c4 8c 00 00 00    	add    esp,0x8c
c000a55b:	5b                   	pop    ebx
c000a55c:	5e                   	pop    esi
c000a55d:	5f                   	pop    edi
c000a55e:	5d                   	pop    ebp
c000a55f:	c3                   	ret    

c000a560 <calc_output_hex>:
c000a560:	55                   	push   ebp
c000a561:	89 cd                	mov    ebp,ecx
c000a563:	57                   	push   edi
c000a564:	56                   	push   esi
c000a565:	53                   	push   ebx
c000a566:	89 c3                	mov    ebx,eax
c000a568:	81 ec 8c 00 00 00    	sub    esp,0x8c
c000a56e:	89 14 24             	mov    DWORD PTR [esp],edx
c000a571:	8b 84 24 a0 00 00 00 	mov    eax,DWORD PTR [esp+0xa0]
c000a578:	8b 94 24 a4 00 00 00 	mov    edx,DWORD PTR [esp+0xa4]
c000a57f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a583:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a587:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a58a:	e8 6f f3 ff ff       	call   c00098fe <int_to_fp>
c000a58f:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c000a592:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a596:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000a599:	29 c8                	sub    eax,ecx
c000a59b:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000a59f:	99                   	cdq    
c000a5a0:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c000a5a8:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a5ab:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000a5b3:	0f af f8             	imul   edi,eax
c000a5b6:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000a5b9:	01 cf                	add    edi,ecx
c000a5bb:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a5bf:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000a5c2:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a5c6:	0f af c2             	imul   eax,edx
c000a5c9:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a5cd:	29 c1                	sub    ecx,eax
c000a5cf:	31 d2                	xor    edx,edx
c000a5d1:	31 c0                	xor    eax,eax
c000a5d3:	8d 34 8b             	lea    esi,[ebx+ecx*4]
c000a5d6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a5da:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a5de:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a5e2:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a5e6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a5ea:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a5ee:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a5f2:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a5f6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a5fa:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a5fe:	89 f8                	mov    eax,edi
c000a600:	e8 07 f3 ff ff       	call   c000990c <fp_to_double>
c000a605:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a609:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a60d:	89 f8                	mov    eax,edi
c000a60f:	e8 ee f2 ff ff       	call   c0009902 <fp_to_int>
c000a614:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a618:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a61b:	52                   	push   edx
c000a61c:	52                   	push   edx
c000a61d:	51                   	push   ecx
c000a61e:	89 4c 24 74          	mov    DWORD PTR [esp+0x74],ecx
c000a622:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a629:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a62d:	e8 be d0 01 00       	call   c00276f0 <__subsf3>
c000a632:	89 04 24             	mov    DWORD PTR [esp],eax
c000a635:	e8 95 e7 01 00       	call   c0028dcf <__extendsfdf2>
c000a63a:	83 c4 10             	add    esp,0x10
c000a63d:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a641:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a645:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a649:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a64d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a651:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a655:	e8 7e dd 01 00       	call   c00283d8 <__muldf3>
c000a65a:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a65e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a662:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a665:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a669:	e8 61 e7 01 00       	call   c0028dcf <__extendsfdf2>
c000a66e:	83 c4 10             	add    esp,0x10
c000a671:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a675:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a679:	52                   	push   edx
c000a67a:	50                   	push   eax
c000a67b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a67f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a683:	e8 d3 d6 01 00       	call   c0027d5b <__adddf3>
c000a688:	59                   	pop    ecx
c000a689:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a68d:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a691:	ff b6 44 08 00 00    	push   DWORD PTR [esi+0x844]
c000a697:	e8 33 e7 01 00       	call   c0028dcf <__extendsfdf2>
c000a69c:	83 c4 10             	add    esp,0x10
c000a69f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6a3:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6a7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6ab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6af:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6b3:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6b7:	e8 1c dd 01 00       	call   c00283d8 <__muldf3>
c000a6bc:	83 c4 10             	add    esp,0x10
c000a6bf:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6c3:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6c7:	52                   	push   edx
c000a6c8:	50                   	push   eax
c000a6c9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a6cd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a6d1:	e8 85 d6 01 00       	call   c0027d5b <__adddf3>
c000a6d6:	59                   	pop    ecx
c000a6d7:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a6db:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a6df:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c000a6e5:	e8 e5 e6 01 00       	call   c0028dcf <__extendsfdf2>
c000a6ea:	83 c4 10             	add    esp,0x10
c000a6ed:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6f1:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6fd:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a701:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a705:	e8 ce dc 01 00       	call   c00283d8 <__muldf3>
c000a70a:	83 c4 10             	add    esp,0x10
c000a70d:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a711:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a715:	52                   	push   edx
c000a716:	50                   	push   eax
c000a717:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a71b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a71f:	e8 37 d6 01 00       	call   c0027d5b <__adddf3>
c000a724:	59                   	pop    ecx
c000a725:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000a729:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c000a72d:	ff b6 4c 08 00 00    	push   DWORD PTR [esi+0x84c]
c000a733:	e8 97 e6 01 00       	call   c0028dcf <__extendsfdf2>
c000a738:	83 c4 10             	add    esp,0x10
c000a73b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a73f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a743:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a747:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a74b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a74f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a753:	e8 80 dc 01 00       	call   c00283d8 <__muldf3>
c000a758:	83 c4 10             	add    esp,0x10
c000a75b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a75f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a763:	52                   	push   edx
c000a764:	50                   	push   eax
c000a765:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a769:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a76d:	e8 e9 d5 01 00       	call   c0027d5b <__adddf3>
c000a772:	59                   	pop    ecx
c000a773:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a777:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a77b:	ff b6 50 08 00 00    	push   DWORD PTR [esi+0x850]
c000a781:	e8 49 e6 01 00       	call   c0028dcf <__extendsfdf2>
c000a786:	83 c4 10             	add    esp,0x10
c000a789:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a78d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a791:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a795:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a799:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a79d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7a1:	e8 32 dc 01 00       	call   c00283d8 <__muldf3>
c000a7a6:	83 c4 10             	add    esp,0x10
c000a7a9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7ad:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7b1:	52                   	push   edx
c000a7b2:	50                   	push   eax
c000a7b3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a7b7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a7bb:	e8 9b d5 01 00       	call   c0027d5b <__adddf3>
c000a7c0:	59                   	pop    ecx
c000a7c1:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a7c5:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a7c9:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a7cf:	e8 fb e5 01 00       	call   c0028dcf <__extendsfdf2>
c000a7d4:	83 c4 10             	add    esp,0x10
c000a7d7:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7db:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7df:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7e7:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7eb:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7ef:	e8 e4 db 01 00       	call   c00283d8 <__muldf3>
c000a7f4:	83 c4 10             	add    esp,0x10
c000a7f7:	83 c6 18             	add    esi,0x18
c000a7fa:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7fe:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a802:	52                   	push   edx
c000a803:	50                   	push   eax
c000a804:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a808:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a80c:	e8 4a d5 01 00       	call   c0027d5b <__adddf3>
c000a811:	59                   	pop    ecx
c000a812:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a816:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a81a:	ff b6 40 08 00 00    	push   DWORD PTR [esi+0x840]
c000a820:	e8 aa e5 01 00       	call   c0028dcf <__extendsfdf2>
c000a825:	83 c4 10             	add    esp,0x10
c000a828:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a82c:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a830:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a834:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a838:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a83c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a840:	e8 93 db 01 00       	call   c00283d8 <__muldf3>
c000a845:	83 c4 10             	add    esp,0x10
c000a848:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a84c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a850:	52                   	push   edx
c000a851:	50                   	push   eax
c000a852:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a856:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a85a:	e8 fc d4 01 00       	call   c0027d5b <__adddf3>
c000a85f:	83 c4 10             	add    esp,0x10
c000a862:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a866:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a86a:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c000a86d:	0f 89 8b fd ff ff    	jns    c000a5fe <calc_output_hex+0x9e>
c000a873:	31 f6                	xor    esi,esi
c000a875:	31 ff                	xor    edi,edi
c000a877:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a87b:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000a87e:	89 7c 24 4c          	mov    DWORD PTR [esp+0x4c],edi
c000a882:	29 e9                	sub    ecx,ebp
c000a884:	89 74 24 58          	mov    DWORD PTR [esp+0x58],esi
c000a888:	29 c8                	sub    eax,ecx
c000a88a:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000a88d:	99                   	cdq    
c000a88e:	89 7c 24 5c          	mov    DWORD PTR [esp+0x5c],edi
c000a892:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a895:	89 74 24 60          	mov    DWORD PTR [esp+0x60],esi
c000a899:	0f af e8             	imul   ebp,eax
c000a89c:	89 7c 24 64          	mov    DWORD PTR [esp+0x64],edi
c000a8a0:	40                   	inc    eax
c000a8a1:	01 cd                	add    ebp,ecx
c000a8a3:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
c000a8a8:	89 74 24 68          	mov    DWORD PTR [esp+0x68],esi
c000a8ac:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a8b0:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000a8b4:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c000a8b7:	89 7c 24 6c          	mov    DWORD PTR [esp+0x6c],edi
c000a8bb:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000a8bf:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000a8c3:	89 e8                	mov    eax,ebp
c000a8c5:	e8 42 f0 ff ff       	call   c000990c <fp_to_double>
c000a8ca:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a8ce:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a8d2:	89 e8                	mov    eax,ebp
c000a8d4:	e8 29 f0 ff ff       	call   c0009902 <fp_to_int>
c000a8d9:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a8dd:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a8e0:	52                   	push   edx
c000a8e1:	52                   	push   edx
c000a8e2:	51                   	push   ecx
c000a8e3:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c000a8ea:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a8f1:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a8f5:	e8 f6 cd 01 00       	call   c00276f0 <__subsf3>
c000a8fa:	89 04 24             	mov    DWORD PTR [esp],eax
c000a8fd:	e8 cd e4 01 00       	call   c0028dcf <__extendsfdf2>
c000a902:	83 c4 10             	add    esp,0x10
c000a905:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a909:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a90d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a911:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a915:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a919:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a91d:	e8 b6 da 01 00       	call   c00283d8 <__muldf3>
c000a922:	8b 8c 24 8c 00 00 00 	mov    ecx,DWORD PTR [esp+0x8c]
c000a929:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a92d:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a930:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a934:	e8 96 e4 01 00       	call   c0028dcf <__extendsfdf2>
c000a939:	83 c4 10             	add    esp,0x10
c000a93c:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a940:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a944:	52                   	push   edx
c000a945:	50                   	push   eax
c000a946:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a94a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a94e:	e8 08 d4 01 00       	call   c0027d5b <__adddf3>
c000a953:	59                   	pop    ecx
c000a954:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a958:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a95c:	ff b3 44 08 00 00    	push   DWORD PTR [ebx+0x844]
c000a962:	e8 68 e4 01 00       	call   c0028dcf <__extendsfdf2>
c000a967:	83 c4 10             	add    esp,0x10
c000a96a:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a96e:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a972:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a976:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a97a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a97e:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a982:	e8 51 da 01 00       	call   c00283d8 <__muldf3>
c000a987:	83 c4 10             	add    esp,0x10
c000a98a:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a98e:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a992:	52                   	push   edx
c000a993:	50                   	push   eax
c000a994:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a998:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a99c:	e8 ba d3 01 00       	call   c0027d5b <__adddf3>
c000a9a1:	59                   	pop    ecx
c000a9a2:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a9a6:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a9aa:	ff b3 48 08 00 00    	push   DWORD PTR [ebx+0x848]
c000a9b0:	e8 1a e4 01 00       	call   c0028dcf <__extendsfdf2>
c000a9b5:	83 c4 10             	add    esp,0x10
c000a9b8:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9bc:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9c0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9c4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9c8:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9cc:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9d0:	e8 03 da 01 00       	call   c00283d8 <__muldf3>
c000a9d5:	83 c4 10             	add    esp,0x10
c000a9d8:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9dc:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9e0:	52                   	push   edx
c000a9e1:	50                   	push   eax
c000a9e2:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a9e6:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a9ea:	e8 6c d3 01 00       	call   c0027d5b <__adddf3>
c000a9ef:	59                   	pop    ecx
c000a9f0:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c000a9f4:	89 54 24 78          	mov    DWORD PTR [esp+0x78],edx
c000a9f8:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c000a9fe:	e8 cc e3 01 00       	call   c0028dcf <__extendsfdf2>
c000aa03:	83 c4 10             	add    esp,0x10
c000aa06:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa0a:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa0e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa12:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa16:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa1a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa1e:	e8 b5 d9 01 00       	call   c00283d8 <__muldf3>
c000aa23:	83 c4 10             	add    esp,0x10
c000aa26:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa2a:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa2e:	52                   	push   edx
c000aa2f:	50                   	push   eax
c000aa30:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000aa34:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000aa38:	e8 1e d3 01 00       	call   c0027d5b <__adddf3>
c000aa3d:	59                   	pop    ecx
c000aa3e:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000aa42:	89 54 24 70          	mov    DWORD PTR [esp+0x70],edx
c000aa46:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c000aa4c:	e8 7e e3 01 00       	call   c0028dcf <__extendsfdf2>
c000aa51:	83 c4 10             	add    esp,0x10
c000aa54:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa58:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa5c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa60:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa64:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa68:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa6c:	e8 67 d9 01 00       	call   c00283d8 <__muldf3>
c000aa71:	83 c4 10             	add    esp,0x10
c000aa74:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa78:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa7c:	52                   	push   edx
c000aa7d:	50                   	push   eax
c000aa7e:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa82:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa86:	e8 d0 d2 01 00       	call   c0027d5b <__adddf3>
c000aa8b:	59                   	pop    ecx
c000aa8c:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000aa90:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000aa94:	ff b3 54 08 00 00    	push   DWORD PTR [ebx+0x854]
c000aa9a:	e8 30 e3 01 00       	call   c0028dcf <__extendsfdf2>
c000aa9f:	83 c4 10             	add    esp,0x10
c000aaa2:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aaa6:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aaaa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aaae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aab2:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aab6:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aaba:	e8 19 d9 01 00       	call   c00283d8 <__muldf3>
c000aabf:	83 c4 10             	add    esp,0x10
c000aac2:	83 eb 18             	sub    ebx,0x18
c000aac5:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aac9:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aacd:	52                   	push   edx
c000aace:	50                   	push   eax
c000aacf:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aad3:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aad7:	e8 7f d2 01 00       	call   c0027d5b <__adddf3>
c000aadc:	59                   	pop    ecx
c000aadd:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000aae1:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c000aae5:	ff b3 70 08 00 00    	push   DWORD PTR [ebx+0x870]
c000aaeb:	e8 df e2 01 00       	call   c0028dcf <__extendsfdf2>
c000aaf0:	83 c4 10             	add    esp,0x10
c000aaf3:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aaf7:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aafb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aaff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ab03:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000ab07:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000ab0b:	e8 c8 d8 01 00       	call   c00283d8 <__muldf3>
c000ab10:	83 c4 10             	add    esp,0x10
c000ab13:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ab17:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ab1b:	52                   	push   edx
c000ab1c:	50                   	push   eax
c000ab1d:	57                   	push   edi
c000ab1e:	56                   	push   esi
c000ab1f:	e8 37 d2 01 00       	call   c0027d5b <__adddf3>
c000ab24:	83 c4 10             	add    esp,0x10
c000ab27:	89 c6                	mov    esi,eax
c000ab29:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
c000ab2c:	89 d7                	mov    edi,edx
c000ab2e:	85 ed                	test   ebp,ebp
c000ab30:	0f 8f 8d fd ff ff    	jg     c000a8c3 <calc_output_hex+0x363>
c000ab36:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab3a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab3e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab42:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab46:	e8 10 d2 01 00       	call   c0027d5b <__adddf3>
c000ab4b:	83 c4 10             	add    esp,0x10
c000ab4e:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab51:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ab55:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab59:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab5d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab61:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab65:	e8 6e d8 01 00       	call   c00283d8 <__muldf3>
c000ab6a:	59                   	pop    ecx
c000ab6b:	5b                   	pop    ebx
c000ab6c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab70:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab74:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab78:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab7c:	e8 2a e1 01 00       	call   c0028cab <__truncdfsf2>
c000ab81:	83 c4 10             	add    esp,0x10
c000ab84:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ab8b:	89 03                	mov    DWORD PTR [ebx],eax
c000ab8d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab91:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab95:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab99:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab9d:	e8 b9 d1 01 00       	call   c0027d5b <__adddf3>
c000aba2:	83 c4 10             	add    esp,0x10
c000aba5:	89 04 24             	mov    DWORD PTR [esp],eax
c000aba8:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000abac:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abb0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abb4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abb8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abbc:	e8 17 d8 01 00       	call   c00283d8 <__muldf3>
c000abc1:	5d                   	pop    ebp
c000abc2:	59                   	pop    ecx
c000abc3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000abc7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000abcb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abcf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abd3:	e8 d3 e0 01 00       	call   c0028cab <__truncdfsf2>
c000abd8:	83 c4 10             	add    esp,0x10
c000abdb:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000abe2:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000abe5:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000abe9:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000abed:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000abf1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000abf5:	e8 61 d1 01 00       	call   c0027d5b <__adddf3>
c000abfa:	83 c4 10             	add    esp,0x10
c000abfd:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac00:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac04:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac08:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac0c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac10:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac14:	e8 bf d7 01 00       	call   c00283d8 <__muldf3>
c000ac19:	5b                   	pop    ebx
c000ac1a:	5d                   	pop    ebp
c000ac1b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ac1f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ac23:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac27:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac2b:	e8 7b e0 01 00       	call   c0028cab <__truncdfsf2>
c000ac30:	83 c4 10             	add    esp,0x10
c000ac33:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac3a:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ac3d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac41:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac45:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ac49:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ac4d:	e8 09 d1 01 00       	call   c0027d5b <__adddf3>
c000ac52:	83 c4 10             	add    esp,0x10
c000ac55:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac58:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac5c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac60:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac64:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac68:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac6c:	e8 67 d7 01 00       	call   c00283d8 <__muldf3>
c000ac71:	59                   	pop    ecx
c000ac72:	5b                   	pop    ebx
c000ac73:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ac77:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ac7b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac7f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac83:	e8 23 e0 01 00       	call   c0028cab <__truncdfsf2>
c000ac88:	83 c4 10             	add    esp,0x10
c000ac8b:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac92:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000ac95:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac99:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac9d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000aca1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000aca5:	e8 b1 d0 01 00       	call   c0027d5b <__adddf3>
c000acaa:	83 c4 10             	add    esp,0x10
c000acad:	89 04 24             	mov    DWORD PTR [esp],eax
c000acb0:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000acb4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acbc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acc0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acc4:	e8 0f d7 01 00       	call   c00283d8 <__muldf3>
c000acc9:	5d                   	pop    ebp
c000acca:	59                   	pop    ecx
c000accb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000accf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000acd3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acd7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acdb:	e8 cb df 01 00       	call   c0028cab <__truncdfsf2>
c000ace0:	83 c4 10             	add    esp,0x10
c000ace3:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000acea:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000aced:	57                   	push   edi
c000acee:	56                   	push   esi
c000acef:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000acf3:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000acf7:	e8 5f d0 01 00       	call   c0027d5b <__adddf3>
c000acfc:	83 c4 10             	add    esp,0x10
c000acff:	89 04 24             	mov    DWORD PTR [esp],eax
c000ad02:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ad06:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad0a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad0e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad12:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad16:	e8 bd d6 01 00       	call   c00283d8 <__muldf3>
c000ad1b:	5b                   	pop    ebx
c000ad1c:	5e                   	pop    esi
c000ad1d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ad21:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ad25:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad29:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad2d:	e8 79 df 01 00       	call   c0028cab <__truncdfsf2>
c000ad32:	8b bc 24 b8 00 00 00 	mov    edi,DWORD PTR [esp+0xb8]
c000ad39:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000ad3c:	81 c4 9c 00 00 00    	add    esp,0x9c
c000ad42:	5b                   	pop    ebx
c000ad43:	5e                   	pop    esi
c000ad44:	5f                   	pop    edi
c000ad45:	5d                   	pop    ebp
c000ad46:	c3                   	ret    

c000ad47 <sinc_reset>:
c000ad47:	56                   	push   esi
c000ad48:	53                   	push   ebx
c000ad49:	51                   	push   ecx
c000ad4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ad4e:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000ad51:	85 db                	test   ebx,ebx
c000ad53:	74 59                	je     c000adae <sinc_reset+0x67>
c000ad55:	31 d2                	xor    edx,edx
c000ad57:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000ad5e:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c000ad61:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c000ad64:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000ad6b:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c000ad72:	31 c0                	xor    eax,eax
c000ad74:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c000ad7a:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c000ad7d:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000ad80:	52                   	push   edx
c000ad81:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad84:	c1 e0 02             	shl    eax,0x2
c000ad87:	50                   	push   eax
c000ad88:	6a 00                	push   0x0
c000ad8a:	56                   	push   esi
c000ad8b:	e8 0c 5a ff ff       	call   c000079c <memset>
c000ad90:	83 c4 0c             	add    esp,0xc
c000ad93:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ad96:	c1 e0 02             	shl    eax,0x2
c000ad99:	50                   	push   eax
c000ad9a:	68 aa 00 00 00       	push   0xaa
c000ad9f:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ada2:	8d 04 86             	lea    eax,[esi+eax*4]
c000ada5:	50                   	push   eax
c000ada6:	e8 f1 59 ff ff       	call   c000079c <memset>
c000adab:	83 c4 10             	add    esp,0x10
c000adae:	58                   	pop    eax
c000adaf:	5b                   	pop    ebx
c000adb0:	5e                   	pop    esi
c000adb1:	c3                   	ret    

c000adb2 <calc_output_multi>:
c000adb2:	55                   	push   ebp
c000adb3:	57                   	push   edi
c000adb4:	56                   	push   esi
c000adb5:	89 c6                	mov    esi,eax
c000adb7:	53                   	push   ebx
c000adb8:	83 ec 4c             	sub    esp,0x4c
c000adbb:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000adbf:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000adc3:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000adc7:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000adcb:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c000adcf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000add3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000add7:	8d 46 44             	lea    eax,[esi+0x44]
c000adda:	89 04 24             	mov    DWORD PTR [esp],eax
c000addd:	8d 86 44 04 00 00    	lea    eax,[esi+0x444]
c000ade3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ade7:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000adea:	e8 0f eb ff ff       	call   c00098fe <int_to_fp>
c000adef:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000adf2:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000adf6:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000adfa:	99                   	cdq    
c000adfb:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000adff:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000ae03:	0f af d0             	imul   edx,eax
c000ae06:	0f af c3             	imul   eax,ebx
c000ae09:	03 54 24 28          	add    edx,DWORD PTR [esp+0x28]
c000ae0d:	29 c1                	sub    ecx,eax
c000ae0f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ae13:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000ae17:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c000ae1e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ae22:	57                   	push   edi
c000ae23:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ae27:	6a 00                	push   0x0
c000ae29:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ae2d:	e8 6a 59 ff ff       	call   c000079c <memset>
c000ae32:	83 c4 10             	add    esp,0x10
c000ae35:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ae39:	89 df                	mov    edi,ebx
c000ae3b:	e8 cc ea ff ff       	call   c000990c <fp_to_double>
c000ae40:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ae44:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ae48:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ae4c:	e8 b1 ea ff ff       	call   c0009902 <fp_to_int>
c000ae51:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000ae54:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000ae57:	51                   	push   ecx
c000ae58:	51                   	push   ecx
c000ae59:	55                   	push   ebp
c000ae5a:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000ae5e:	e8 8d c8 01 00       	call   c00276f0 <__subsf3>
c000ae63:	89 04 24             	mov    DWORD PTR [esp],eax
c000ae66:	e8 64 df 01 00       	call   c0028dcf <__extendsfdf2>
c000ae6b:	83 c4 10             	add    esp,0x10
c000ae6e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae72:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae76:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae7a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae7e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae82:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae86:	e8 4d d5 01 00       	call   c00283d8 <__muldf3>
c000ae8b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ae8e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ae92:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ae96:	e8 34 df 01 00       	call   c0028dcf <__extendsfdf2>
c000ae9b:	83 c4 10             	add    esp,0x10
c000ae9e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aea2:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aea6:	52                   	push   edx
c000aea7:	50                   	push   eax
c000aea8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aeac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aeb0:	e8 a6 ce 01 00       	call   c0027d5b <__adddf3>
c000aeb5:	83 c4 10             	add    esp,0x10
c000aeb8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000aebc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000aec0:	89 f8                	mov    eax,edi
c000aec2:	b9 08 00 00 00       	mov    ecx,0x8
c000aec7:	99                   	cdq    
c000aec8:	f7 f9                	idiv   ecx
c000aeca:	4a                   	dec    edx
c000aecb:	83 fa 06             	cmp    edx,0x6
c000aece:	77 07                	ja     c000aed7 <calc_output_multi+0x125>
c000aed0:	ff 24 95 e4 a6 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd591c]
c000aed7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aeda:	4f                   	dec    edi
c000aedb:	83 ec 0c             	sub    esp,0xc
c000aede:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000aee1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aee5:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000aeec:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000aef0:	e8 da de 01 00       	call   c0028dcf <__extendsfdf2>
c000aef5:	83 c4 10             	add    esp,0x10
c000aef8:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aefc:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af00:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af04:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af08:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af0c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af10:	e8 c3 d4 01 00       	call   c00283d8 <__muldf3>
c000af15:	83 c4 10             	add    esp,0x10
c000af18:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af1c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af20:	52                   	push   edx
c000af21:	50                   	push   eax
c000af22:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af25:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af28:	e8 2e ce 01 00       	call   c0027d5b <__adddf3>
c000af2d:	83 c4 10             	add    esp,0x10
c000af30:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af33:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af36:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af39:	4f                   	dec    edi
c000af3a:	83 ec 0c             	sub    esp,0xc
c000af3d:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af40:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af44:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af4b:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af4f:	e8 7b de 01 00       	call   c0028dcf <__extendsfdf2>
c000af54:	83 c4 10             	add    esp,0x10
c000af57:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af5b:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af5f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af63:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af67:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af6b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af6f:	e8 64 d4 01 00       	call   c00283d8 <__muldf3>
c000af74:	83 c4 10             	add    esp,0x10
c000af77:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af7b:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af7f:	52                   	push   edx
c000af80:	50                   	push   eax
c000af81:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af84:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af87:	e8 cf cd 01 00       	call   c0027d5b <__adddf3>
c000af8c:	83 c4 10             	add    esp,0x10
c000af8f:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af92:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af95:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af98:	4f                   	dec    edi
c000af99:	83 ec 0c             	sub    esp,0xc
c000af9c:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af9f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000afa3:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000afaa:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000afae:	e8 1c de 01 00       	call   c0028dcf <__extendsfdf2>
c000afb3:	83 c4 10             	add    esp,0x10
c000afb6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000afba:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000afbe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afc2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afc6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afca:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afce:	e8 05 d4 01 00       	call   c00283d8 <__muldf3>
c000afd3:	83 c4 10             	add    esp,0x10
c000afd6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000afda:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000afde:	52                   	push   edx
c000afdf:	50                   	push   eax
c000afe0:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000afe3:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000afe6:	e8 70 cd 01 00       	call   c0027d5b <__adddf3>
c000afeb:	83 c4 10             	add    esp,0x10
c000afee:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000aff1:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000aff4:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aff7:	4f                   	dec    edi
c000aff8:	83 ec 0c             	sub    esp,0xc
c000affb:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000affe:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b002:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b009:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b00d:	e8 bd dd 01 00       	call   c0028dcf <__extendsfdf2>
c000b012:	83 c4 10             	add    esp,0x10
c000b015:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b019:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b01d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b021:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b025:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b029:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b02d:	e8 a6 d3 01 00       	call   c00283d8 <__muldf3>
c000b032:	83 c4 10             	add    esp,0x10
c000b035:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b039:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b03d:	52                   	push   edx
c000b03e:	50                   	push   eax
c000b03f:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b042:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b045:	e8 11 cd 01 00       	call   c0027d5b <__adddf3>
c000b04a:	83 c4 10             	add    esp,0x10
c000b04d:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b050:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b053:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b056:	4f                   	dec    edi
c000b057:	83 ec 0c             	sub    esp,0xc
c000b05a:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b05d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b061:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b068:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b06c:	e8 5e dd 01 00       	call   c0028dcf <__extendsfdf2>
c000b071:	83 c4 10             	add    esp,0x10
c000b074:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b078:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b07c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b080:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b084:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b088:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b08c:	e8 47 d3 01 00       	call   c00283d8 <__muldf3>
c000b091:	83 c4 10             	add    esp,0x10
c000b094:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b098:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b09c:	52                   	push   edx
c000b09d:	50                   	push   eax
c000b09e:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b0a1:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b0a4:	e8 b2 cc 01 00       	call   c0027d5b <__adddf3>
c000b0a9:	83 c4 10             	add    esp,0x10
c000b0ac:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b0af:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b0b2:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b0b5:	4f                   	dec    edi
c000b0b6:	83 ec 0c             	sub    esp,0xc
c000b0b9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b0bc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b0c0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b0c7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b0cb:	e8 ff dc 01 00       	call   c0028dcf <__extendsfdf2>
c000b0d0:	83 c4 10             	add    esp,0x10
c000b0d3:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0d7:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0df:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0e3:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0e7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0eb:	e8 e8 d2 01 00       	call   c00283d8 <__muldf3>
c000b0f0:	83 c4 10             	add    esp,0x10
c000b0f3:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0f7:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0fb:	52                   	push   edx
c000b0fc:	50                   	push   eax
c000b0fd:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b100:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b103:	e8 53 cc 01 00       	call   c0027d5b <__adddf3>
c000b108:	83 c4 10             	add    esp,0x10
c000b10b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b10e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b111:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b114:	4f                   	dec    edi
c000b115:	83 ec 0c             	sub    esp,0xc
c000b118:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b11b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b11f:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b126:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b12a:	e8 a0 dc 01 00       	call   c0028dcf <__extendsfdf2>
c000b12f:	83 c4 10             	add    esp,0x10
c000b132:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b136:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b13a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b13e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b142:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b146:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b14a:	e8 89 d2 01 00       	call   c00283d8 <__muldf3>
c000b14f:	83 c4 10             	add    esp,0x10
c000b152:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b156:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b15a:	52                   	push   edx
c000b15b:	50                   	push   eax
c000b15c:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b15f:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b162:	e8 f4 cb 01 00       	call   c0027d5b <__adddf3>
c000b167:	83 c4 10             	add    esp,0x10
c000b16a:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b16d:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b170:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b173:	4f                   	dec    edi
c000b174:	83 ec 0c             	sub    esp,0xc
c000b177:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b17a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b17e:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b185:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b189:	e8 41 dc 01 00       	call   c0028dcf <__extendsfdf2>
c000b18e:	83 c4 10             	add    esp,0x10
c000b191:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b195:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b199:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b19d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b1a1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b1a5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b1a9:	e8 2a d2 01 00       	call   c00283d8 <__muldf3>
c000b1ae:	83 c4 10             	add    esp,0x10
c000b1b1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b1b5:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b1b9:	52                   	push   edx
c000b1ba:	50                   	push   eax
c000b1bb:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b1be:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b1c1:	e8 95 cb 01 00       	call   c0027d5b <__adddf3>
c000b1c6:	83 c4 10             	add    esp,0x10
c000b1c9:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b1cc:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b1cf:	85 ff                	test   edi,edi
c000b1d1:	0f 8f e9 fc ff ff    	jg     c000aec0 <calc_output_multi+0x10e>
c000b1d7:	01 5c 24 08          	add    DWORD PTR [esp+0x8],ebx
c000b1db:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b1df:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b1e3:	0f 89 4c fc ff ff    	jns    c000ae35 <calc_output_multi+0x83>
c000b1e9:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000b1ed:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b1f1:	29 c8                	sub    eax,ecx
c000b1f3:	99                   	cdq    
c000b1f4:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000b1f8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000b1fc:	0f af d0             	imul   edx,eax
c000b1ff:	40                   	inc    eax
c000b200:	01 d1                	add    ecx,edx
c000b202:	0f af c3             	imul   eax,ebx
c000b205:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000b209:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c000b20c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b210:	55                   	push   ebp
c000b211:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b215:	6a 00                	push   0x0
c000b217:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b21b:	e8 7c 55 ff ff       	call   c000079c <memset>
c000b220:	83 c4 10             	add    esp,0x10
c000b223:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b227:	e8 e0 e6 ff ff       	call   c000990c <fp_to_double>
c000b22c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b230:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b234:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b238:	e8 c5 e6 ff ff       	call   c0009902 <fp_to_int>
c000b23d:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000b240:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000b243:	57                   	push   edi
c000b244:	57                   	push   edi
c000b245:	89 df                	mov    edi,ebx
c000b247:	55                   	push   ebp
c000b248:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000b24c:	e8 9f c4 01 00       	call   c00276f0 <__subsf3>
c000b251:	89 04 24             	mov    DWORD PTR [esp],eax
c000b254:	e8 76 db 01 00       	call   c0028dcf <__extendsfdf2>
c000b259:	83 c4 10             	add    esp,0x10
c000b25c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b260:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b264:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b268:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b26c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b270:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b274:	e8 5f d1 01 00       	call   c00283d8 <__muldf3>
c000b279:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b27c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b280:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b284:	e8 46 db 01 00       	call   c0028dcf <__extendsfdf2>
c000b289:	83 c4 10             	add    esp,0x10
c000b28c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b290:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b294:	52                   	push   edx
c000b295:	50                   	push   eax
c000b296:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b29a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b29e:	e8 b8 ca 01 00       	call   c0027d5b <__adddf3>
c000b2a3:	83 c4 10             	add    esp,0x10
c000b2a6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b2aa:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b2ae:	89 f8                	mov    eax,edi
c000b2b0:	b9 08 00 00 00       	mov    ecx,0x8
c000b2b5:	99                   	cdq    
c000b2b6:	f7 f9                	idiv   ecx
c000b2b8:	4a                   	dec    edx
c000b2b9:	83 fa 06             	cmp    edx,0x6
c000b2bc:	77 07                	ja     c000b2c5 <calc_output_multi+0x513>
c000b2be:	ff 24 95 00 a7 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd5900]
c000b2c5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b2c9:	4f                   	dec    edi
c000b2ca:	83 ec 0c             	sub    esp,0xc
c000b2cd:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b2d0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b2d4:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b2db:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b2df:	e8 eb da 01 00       	call   c0028dcf <__extendsfdf2>
c000b2e4:	83 c4 10             	add    esp,0x10
c000b2e7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2eb:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2ef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2f3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2f7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2fb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2ff:	e8 d4 d0 01 00       	call   c00283d8 <__muldf3>
c000b304:	83 c4 10             	add    esp,0x10
c000b307:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b30b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b30f:	52                   	push   edx
c000b310:	50                   	push   eax
c000b311:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b314:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b317:	e8 3f ca 01 00       	call   c0027d5b <__adddf3>
c000b31c:	83 c4 10             	add    esp,0x10
c000b31f:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b322:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b325:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b329:	4f                   	dec    edi
c000b32a:	83 ec 0c             	sub    esp,0xc
c000b32d:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b330:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b334:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b33b:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b33f:	e8 8b da 01 00       	call   c0028dcf <__extendsfdf2>
c000b344:	83 c4 10             	add    esp,0x10
c000b347:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b34b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b34f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b353:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b357:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b35b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b35f:	e8 74 d0 01 00       	call   c00283d8 <__muldf3>
c000b364:	83 c4 10             	add    esp,0x10
c000b367:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b36b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b36f:	52                   	push   edx
c000b370:	50                   	push   eax
c000b371:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b374:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b377:	e8 df c9 01 00       	call   c0027d5b <__adddf3>
c000b37c:	83 c4 10             	add    esp,0x10
c000b37f:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b382:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b385:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b389:	4f                   	dec    edi
c000b38a:	83 ec 0c             	sub    esp,0xc
c000b38d:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b390:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b394:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b39b:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b39f:	e8 2b da 01 00       	call   c0028dcf <__extendsfdf2>
c000b3a4:	83 c4 10             	add    esp,0x10
c000b3a7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3ab:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3b7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3bb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3bf:	e8 14 d0 01 00       	call   c00283d8 <__muldf3>
c000b3c4:	83 c4 10             	add    esp,0x10
c000b3c7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3cb:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3cf:	52                   	push   edx
c000b3d0:	50                   	push   eax
c000b3d1:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b3d4:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b3d7:	e8 7f c9 01 00       	call   c0027d5b <__adddf3>
c000b3dc:	83 c4 10             	add    esp,0x10
c000b3df:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b3e2:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b3e5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b3e9:	4f                   	dec    edi
c000b3ea:	83 ec 0c             	sub    esp,0xc
c000b3ed:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b3f0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b3f4:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b3fb:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b3ff:	e8 cb d9 01 00       	call   c0028dcf <__extendsfdf2>
c000b404:	83 c4 10             	add    esp,0x10
c000b407:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b40b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b40f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b413:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b417:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b41b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b41f:	e8 b4 cf 01 00       	call   c00283d8 <__muldf3>
c000b424:	83 c4 10             	add    esp,0x10
c000b427:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b42b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b42f:	52                   	push   edx
c000b430:	50                   	push   eax
c000b431:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b434:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b437:	e8 1f c9 01 00       	call   c0027d5b <__adddf3>
c000b43c:	83 c4 10             	add    esp,0x10
c000b43f:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b442:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b445:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b449:	4f                   	dec    edi
c000b44a:	83 ec 0c             	sub    esp,0xc
c000b44d:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b450:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b454:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b45b:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b45f:	e8 6b d9 01 00       	call   c0028dcf <__extendsfdf2>
c000b464:	83 c4 10             	add    esp,0x10
c000b467:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b46b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b46f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b473:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b477:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b47b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b47f:	e8 54 cf 01 00       	call   c00283d8 <__muldf3>
c000b484:	83 c4 10             	add    esp,0x10
c000b487:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b48b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b48f:	52                   	push   edx
c000b490:	50                   	push   eax
c000b491:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b494:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b497:	e8 bf c8 01 00       	call   c0027d5b <__adddf3>
c000b49c:	83 c4 10             	add    esp,0x10
c000b49f:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b4a2:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b4a5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4a9:	4f                   	dec    edi
c000b4aa:	83 ec 0c             	sub    esp,0xc
c000b4ad:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b4b0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b4b4:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b4bb:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b4bf:	e8 0b d9 01 00       	call   c0028dcf <__extendsfdf2>
c000b4c4:	83 c4 10             	add    esp,0x10
c000b4c7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4cb:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4cf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4d3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4d7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4db:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4df:	e8 f4 ce 01 00       	call   c00283d8 <__muldf3>
c000b4e4:	83 c4 10             	add    esp,0x10
c000b4e7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4eb:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4ef:	52                   	push   edx
c000b4f0:	50                   	push   eax
c000b4f1:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b4f4:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b4f7:	e8 5f c8 01 00       	call   c0027d5b <__adddf3>
c000b4fc:	83 c4 10             	add    esp,0x10
c000b4ff:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b502:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b505:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b509:	4f                   	dec    edi
c000b50a:	83 ec 0c             	sub    esp,0xc
c000b50d:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b510:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b514:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b51b:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b51f:	e8 ab d8 01 00       	call   c0028dcf <__extendsfdf2>
c000b524:	83 c4 10             	add    esp,0x10
c000b527:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b52b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b52f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b533:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b537:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b53b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b53f:	e8 94 ce 01 00       	call   c00283d8 <__muldf3>
c000b544:	83 c4 10             	add    esp,0x10
c000b547:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b54b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b54f:	52                   	push   edx
c000b550:	50                   	push   eax
c000b551:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b554:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b557:	e8 ff c7 01 00       	call   c0027d5b <__adddf3>
c000b55c:	83 c4 10             	add    esp,0x10
c000b55f:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b562:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b565:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b569:	4f                   	dec    edi
c000b56a:	83 ec 0c             	sub    esp,0xc
c000b56d:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b570:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b574:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b57b:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b57f:	e8 4b d8 01 00       	call   c0028dcf <__extendsfdf2>
c000b584:	83 c4 10             	add    esp,0x10
c000b587:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b58b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b58f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b593:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b597:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b59b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b59f:	e8 34 ce 01 00       	call   c00283d8 <__muldf3>
c000b5a4:	83 c4 10             	add    esp,0x10
c000b5a7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b5ab:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b5af:	52                   	push   edx
c000b5b0:	50                   	push   eax
c000b5b1:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b5b4:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b5b7:	e8 9f c7 01 00       	call   c0027d5b <__adddf3>
c000b5bc:	83 c4 10             	add    esp,0x10
c000b5bf:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b5c2:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b5c5:	85 ff                	test   edi,edi
c000b5c7:	0f 8f e1 fc ff ff    	jg     c000b2ae <calc_output_multi+0x4fc>
c000b5cd:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b5d1:	29 5c 24 08          	sub    DWORD PTR [esp+0x8],ebx
c000b5d5:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b5d9:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000b5de:	0f 8f 3f fc ff ff    	jg     c000b223 <calc_output_multi+0x471>
c000b5e4:	be 08 00 00 00       	mov    esi,0x8
c000b5e9:	89 d8                	mov    eax,ebx
c000b5eb:	99                   	cdq    
c000b5ec:	f7 fe                	idiv   esi
c000b5ee:	4a                   	dec    edx
c000b5ef:	83 fa 06             	cmp    edx,0x6
c000b5f2:	77 07                	ja     c000b5fb <calc_output_multi+0x849>
c000b5f4:	ff 24 95 1c a7 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd58e4]
c000b5fb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5ff:	4b                   	dec    ebx
c000b600:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b604:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b607:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b60b:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b60f:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b612:	e8 44 c7 01 00       	call   c0027d5b <__adddf3>
c000b617:	83 c4 10             	add    esp,0x10
c000b61a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b61e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b622:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b626:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b62a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b62e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b632:	e8 a1 cd 01 00       	call   c00283d8 <__muldf3>
c000b637:	5d                   	pop    ebp
c000b638:	59                   	pop    ecx
c000b639:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b63d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b641:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b645:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b649:	e8 5d d6 01 00       	call   c0028cab <__truncdfsf2>
c000b64e:	83 c4 10             	add    esp,0x10
c000b651:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b655:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b658:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b65c:	4b                   	dec    ebx
c000b65d:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b661:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b664:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b668:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b66c:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b66f:	e8 e7 c6 01 00       	call   c0027d5b <__adddf3>
c000b674:	83 c4 10             	add    esp,0x10
c000b677:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b67b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b67f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b683:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b687:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b68b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b68f:	e8 44 cd 01 00       	call   c00283d8 <__muldf3>
c000b694:	59                   	pop    ecx
c000b695:	5f                   	pop    edi
c000b696:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b69a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b69e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6a2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6a6:	e8 00 d6 01 00       	call   c0028cab <__truncdfsf2>
c000b6ab:	83 c4 10             	add    esp,0x10
c000b6ae:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b6b2:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b6b5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b6b9:	4b                   	dec    ebx
c000b6ba:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6be:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6c1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b6c5:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6c9:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6cc:	e8 8a c6 01 00       	call   c0027d5b <__adddf3>
c000b6d1:	83 c4 10             	add    esp,0x10
c000b6d4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b6d8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b6dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6e4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6e8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6ec:	e8 e7 cc 01 00       	call   c00283d8 <__muldf3>
c000b6f1:	5f                   	pop    edi
c000b6f2:	5d                   	pop    ebp
c000b6f3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b6f7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b6fb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b703:	e8 a3 d5 01 00       	call   c0028cab <__truncdfsf2>
c000b708:	83 c4 10             	add    esp,0x10
c000b70b:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b70f:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b712:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b716:	4b                   	dec    ebx
c000b717:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b71b:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b71e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b722:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b726:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b729:	e8 2d c6 01 00       	call   c0027d5b <__adddf3>
c000b72e:	83 c4 10             	add    esp,0x10
c000b731:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b735:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b739:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b73d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b741:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b745:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b749:	e8 8a cc 01 00       	call   c00283d8 <__muldf3>
c000b74e:	5d                   	pop    ebp
c000b74f:	59                   	pop    ecx
c000b750:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b754:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b758:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b75c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b760:	e8 46 d5 01 00       	call   c0028cab <__truncdfsf2>
c000b765:	83 c4 10             	add    esp,0x10
c000b768:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b76c:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b76f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b773:	4b                   	dec    ebx
c000b774:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b778:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b77b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b77f:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b783:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b786:	e8 d0 c5 01 00       	call   c0027d5b <__adddf3>
c000b78b:	83 c4 10             	add    esp,0x10
c000b78e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b792:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b796:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b79a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b79e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7a2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7a6:	e8 2d cc 01 00       	call   c00283d8 <__muldf3>
c000b7ab:	59                   	pop    ecx
c000b7ac:	5f                   	pop    edi
c000b7ad:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b7b1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b7b5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7b9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7bd:	e8 e9 d4 01 00       	call   c0028cab <__truncdfsf2>
c000b7c2:	83 c4 10             	add    esp,0x10
c000b7c5:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b7c9:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b7cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7d0:	4b                   	dec    ebx
c000b7d1:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7d5:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7d8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b7dc:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7e0:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7e3:	e8 73 c5 01 00       	call   c0027d5b <__adddf3>
c000b7e8:	83 c4 10             	add    esp,0x10
c000b7eb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b7ef:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b7f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7f7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7fb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b803:	e8 d0 cb 01 00       	call   c00283d8 <__muldf3>
c000b808:	5f                   	pop    edi
c000b809:	5d                   	pop    ebp
c000b80a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b80e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b812:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b816:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b81a:	e8 8c d4 01 00       	call   c0028cab <__truncdfsf2>
c000b81f:	83 c4 10             	add    esp,0x10
c000b822:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b826:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b829:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b82d:	4b                   	dec    ebx
c000b82e:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b832:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b835:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b839:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b83d:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b840:	e8 16 c5 01 00       	call   c0027d5b <__adddf3>
c000b845:	83 c4 10             	add    esp,0x10
c000b848:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b84c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b850:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b854:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b858:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b85c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b860:	e8 73 cb 01 00       	call   c00283d8 <__muldf3>
c000b865:	5d                   	pop    ebp
c000b866:	59                   	pop    ecx
c000b867:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b86b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b86f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b873:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b877:	e8 2f d4 01 00       	call   c0028cab <__truncdfsf2>
c000b87c:	83 c4 10             	add    esp,0x10
c000b87f:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b883:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b886:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b88a:	4b                   	dec    ebx
c000b88b:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b88f:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b892:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b896:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b89a:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b89d:	e8 b9 c4 01 00       	call   c0027d5b <__adddf3>
c000b8a2:	83 c4 10             	add    esp,0x10
c000b8a5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b8a9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b8ad:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8b1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8b5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8b9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8bd:	e8 16 cb 01 00       	call   c00283d8 <__muldf3>
c000b8c2:	59                   	pop    ecx
c000b8c3:	5f                   	pop    edi
c000b8c4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b8c8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b8cc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8d0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8d4:	e8 d2 d3 01 00       	call   c0028cab <__truncdfsf2>
c000b8d9:	83 c4 10             	add    esp,0x10
c000b8dc:	85 db                	test   ebx,ebx
c000b8de:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000b8e2:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c000b8e5:	0f 8f fe fc ff ff    	jg     c000b5e9 <calc_output_multi+0x837>
c000b8eb:	83 c4 4c             	add    esp,0x4c
c000b8ee:	5b                   	pop    ebx
c000b8ef:	5e                   	pop    esi
c000b8f0:	5f                   	pop    edi
c000b8f1:	5d                   	pop    ebp
c000b8f2:	c3                   	ret    

c000b8f3 <double_to_fp>:
c000b8f3:	83 ec 0c             	sub    esp,0xc
c000b8f6:	68 00 00 b0 40       	push   0x40b00000
c000b8fb:	6a 00                	push   0x0
c000b8fd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b901:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b905:	e8 ce ca 01 00       	call   c00283d8 <__muldf3>
c000b90a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b90e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b912:	83 c4 1c             	add    esp,0x1c
c000b915:	e9 46 d5 01 00       	jmp    c0028e60 <lrint>

c000b91a <prepare_data>:
c000b91a:	55                   	push   ebp
c000b91b:	57                   	push   edi
c000b91c:	56                   	push   esi
c000b91d:	53                   	push   ebx
c000b91e:	83 ec 1c             	sub    esp,0x1c
c000b921:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000b925:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000b929:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c000b92d:	0f 89 57 01 00 00    	jns    c000ba8a <prepare_data+0x170>
c000b933:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000b936:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b939:	85 d2                	test   edx,edx
c000b93b:	75 0d                	jne    c000b94a <prepare_data+0x30>
c000b93d:	8d 14 36             	lea    edx,[esi+esi*1]
c000b940:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000b943:	29 d0                	sub    eax,edx
c000b945:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b948:	eb 44                	jmp    c000b98e <prepare_data+0x74>
c000b94a:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c000b94d:	8d 0c 37             	lea    ecx,[edi+esi*1]
c000b950:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c000b953:	39 c1                	cmp    ecx,eax
c000b955:	7d 04                	jge    c000b95b <prepare_data+0x41>
c000b957:	29 d0                	sub    eax,edx
c000b959:	eb 2d                	jmp    c000b988 <prepare_data+0x6e>
c000b95b:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c000b961:	29 d7                	sub    edi,edx
c000b963:	01 f7                	add    edi,esi
c000b965:	51                   	push   ecx
c000b966:	29 f2                	sub    edx,esi
c000b968:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c000b96f:	8d 14 90             	lea    edx,[eax+edx*4]
c000b972:	51                   	push   ecx
c000b973:	52                   	push   edx
c000b974:	50                   	push   eax
c000b975:	e8 26 4d ff ff       	call   c00006a0 <memmove>
c000b97a:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b97d:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b980:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b983:	29 f0                	sub    eax,esi
c000b985:	83 c4 10             	add    esp,0x10
c000b988:	29 f0                	sub    eax,esi
c000b98a:	79 02                	jns    c000b98e <prepare_data+0x74>
c000b98c:	31 c0                	xor    eax,eax
c000b98e:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000b991:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c000b994:	29 ef                	sub    edi,ebp
c000b996:	39 c7                	cmp    edi,eax
c000b998:	7e 02                	jle    c000b99c <prepare_data+0x82>
c000b99a:	89 c7                	mov    edi,eax
c000b99c:	89 f8                	mov    eax,edi
c000b99e:	99                   	cdq    
c000b99f:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000b9a2:	b8 15 00 00 00       	mov    eax,0x15
c000b9a7:	29 d7                	sub    edi,edx
c000b9a9:	0f 88 dd 00 00 00    	js     c000ba8c <prepare_data+0x172>
c000b9af:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c000b9b2:	8d 14 39             	lea    edx,[ecx+edi*1]
c000b9b5:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c000b9b8:	0f 8f ce 00 00 00    	jg     c000ba8c <prepare_data+0x172>
c000b9be:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c000b9c4:	50                   	push   eax
c000b9c5:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b9cc:	50                   	push   eax
c000b9cd:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b9d1:	8b 00                	mov    eax,DWORD PTR [eax]
c000b9d3:	8d 04 a8             	lea    eax,[eax+ebp*4]
c000b9d6:	50                   	push   eax
c000b9d7:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b9da:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b9de:	50                   	push   eax
c000b9df:	e8 84 4d ff ff       	call   c0000768 <memcpy>
c000b9e4:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c000b9e7:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000b9ea:	01 fd                	add    ebp,edi
c000b9ec:	01 f9                	add    ecx,edi
c000b9ee:	83 c4 10             	add    esp,0x10
c000b9f1:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c000b9f4:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c000b9f7:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c000b9fa:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b9fe:	0f 85 86 00 00 00    	jne    c000ba8a <prepare_data+0x170>
c000ba04:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000ba07:	89 e8                	mov    eax,ebp
c000ba09:	8d 3c 36             	lea    edi,[esi+esi*1]
c000ba0c:	29 c8                	sub    eax,ecx
c000ba0e:	39 f8                	cmp    eax,edi
c000ba10:	7d 78                	jge    c000ba8a <prepare_data+0x170>
c000ba12:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000ba16:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c000ba1a:	74 6e                	je     c000ba8a <prepare_data+0x170>
c000ba1c:	8d 7e 04             	lea    edi,[esi+0x4]
c000ba1f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000ba23:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c000ba26:	29 ef                	sub    edi,ebp
c000ba28:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000ba2c:	7c 29                	jl     c000ba57 <prepare_data+0x13d>
c000ba2e:	8d 3c 30             	lea    edi,[eax+esi*1]
c000ba31:	29 f1                	sub    ecx,esi
c000ba33:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000ba3a:	55                   	push   ebp
c000ba3b:	50                   	push   eax
c000ba3c:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000ba3f:	50                   	push   eax
c000ba40:	52                   	push   edx
c000ba41:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ba45:	e8 56 4c ff ff       	call   c00006a0 <memmove>
c000ba4a:	83 c4 10             	add    esp,0x10
c000ba4d:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000ba50:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000ba53:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ba57:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000ba5a:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000ba5d:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c000ba60:	83 c6 05             	add    esi,0x5
c000ba63:	78 07                	js     c000ba6c <prepare_data+0x152>
c000ba65:	8d 3c 30             	lea    edi,[eax+esi*1]
c000ba68:	39 cf                	cmp    edi,ecx
c000ba6a:	7e 04                	jle    c000ba70 <prepare_data+0x156>
c000ba6c:	89 ce                	mov    esi,ecx
c000ba6e:	29 c6                	sub    esi,eax
c000ba70:	8d 04 82             	lea    eax,[edx+eax*4]
c000ba73:	51                   	push   ecx
c000ba74:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c000ba7b:	51                   	push   ecx
c000ba7c:	6a 00                	push   0x0
c000ba7e:	50                   	push   eax
c000ba7f:	e8 18 4d ff ff       	call   c000079c <memset>
c000ba84:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c000ba87:	83 c4 10             	add    esp,0x10
c000ba8a:	31 c0                	xor    eax,eax
c000ba8c:	83 c4 1c             	add    esp,0x1c
c000ba8f:	5b                   	pop    ebx
c000ba90:	5e                   	pop    esi
c000ba91:	5f                   	pop    edi
c000ba92:	5d                   	pop    ebp
c000ba93:	c3                   	ret    

c000ba94 <sinc_multichan_vari_process>:
c000ba94:	55                   	push   ebp
c000ba95:	ba 05 00 00 00       	mov    edx,0x5
c000ba9a:	57                   	push   edi
c000ba9b:	56                   	push   esi
c000ba9c:	53                   	push   ebx
c000ba9d:	83 ec 4c             	sub    esp,0x4c
c000baa0:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c000baa4:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000baa8:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000baab:	85 db                	test   ebx,ebx
c000baad:	0f 84 9b 06 00 00    	je     c000c14e <sinc_multichan_vari_process+0x6ba>
c000bab3:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000bab6:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000bab9:	0f af c5             	imul   eax,ebp
c000babc:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000babf:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000bac2:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000bac9:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000bad0:	0f af c5             	imul   eax,ebp
c000bad3:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000bad6:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000bad9:	8b 06                	mov    eax,DWORD PTR [esi]
c000badb:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000badf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bae3:	68 00 00 70 3f       	push   0x3f700000
c000bae8:	6a 00                	push   0x0
c000baea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000baee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000baf2:	e8 b0 d1 01 00       	call   c0028ca7 <__ltdf2>
c000baf7:	83 c4 10             	add    esp,0x10
c000bafa:	ba 16 00 00 00       	mov    edx,0x16
c000baff:	85 c0                	test   eax,eax
c000bb01:	0f 88 47 06 00 00    	js     c000c14e <sinc_multichan_vari_process+0x6ba>
c000bb07:	68 00 00 70 40       	push   0x40700000
c000bb0c:	6a 00                	push   0x0
c000bb0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb16:	e8 6e d1 01 00       	call   c0028c89 <__gtdf2>
c000bb1b:	83 c4 10             	add    esp,0x10
c000bb1e:	ba 16 00 00 00       	mov    edx,0x16
c000bb23:	85 c0                	test   eax,eax
c000bb25:	0f 8f 23 06 00 00    	jg     c000c14e <sinc_multichan_vari_process+0x6ba>
c000bb2b:	83 ec 0c             	sub    esp,0xc
c000bb2e:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000bb31:	e8 05 cf 01 00       	call   c0028a3b <__floatsidf>
c000bb36:	83 c4 10             	add    esp,0x10
c000bb39:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb3d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb41:	68 00 00 00 40       	push   0x40000000
c000bb46:	6a 00                	push   0x0
c000bb48:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb4c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb50:	e8 06 c2 01 00       	call   c0027d5b <__adddf3>
c000bb55:	59                   	pop    ecx
c000bb56:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bb5a:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bb5e:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bb61:	e8 d5 ce 01 00       	call   c0028a3b <__floatsidf>
c000bb66:	83 c4 10             	add    esp,0x10
c000bb69:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb6d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb71:	52                   	push   edx
c000bb72:	50                   	push   eax
c000bb73:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb77:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb7b:	e8 3c cb 01 00       	call   c00286bc <__divdf3>
c000bb80:	83 c4 10             	add    esp,0x10
c000bb83:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb87:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb8b:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c000bb8e:	8b 57 20             	mov    edx,DWORD PTR [edi+0x20]
c000bb91:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb95:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb99:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb9d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bba1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bba5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bba9:	e8 db d0 01 00       	call   c0028c89 <__gtdf2>
c000bbae:	83 c4 10             	add    esp,0x10
c000bbb1:	85 c0                	test   eax,eax
c000bbb3:	7e 2d                	jle    c000bbe2 <sinc_multichan_vari_process+0x14e>
c000bbb5:	68 00 00 f0 3f       	push   0x3ff00000
c000bbba:	6a 00                	push   0x0
c000bbbc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bbc0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bbc4:	e8 de d0 01 00       	call   c0028ca7 <__ltdf2>
c000bbc9:	83 c4 10             	add    esp,0x10
c000bbcc:	85 c0                	test   eax,eax
c000bbce:	79 4d                	jns    c000bc1d <sinc_multichan_vari_process+0x189>
c000bbd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bbd4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bbd8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bbdc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bbe0:	eb 1b                	jmp    c000bbfd <sinc_multichan_vari_process+0x169>
c000bbe2:	68 00 00 f0 3f       	push   0x3ff00000
c000bbe7:	6a 00                	push   0x0
c000bbe9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bbed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bbf1:	e8 b1 d0 01 00       	call   c0028ca7 <__ltdf2>
c000bbf6:	83 c4 10             	add    esp,0x10
c000bbf9:	85 c0                	test   eax,eax
c000bbfb:	79 20                	jns    c000bc1d <sinc_multichan_vari_process+0x189>
c000bbfd:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bc01:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bc05:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc09:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc0d:	e8 aa ca 01 00       	call   c00286bc <__divdf3>
c000bc12:	83 c4 10             	add    esp,0x10
c000bc15:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bc19:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bc1d:	50                   	push   eax
c000bc1e:	50                   	push   eax
c000bc1f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc23:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc27:	e8 34 d2 01 00       	call   c0028e60 <lrint>
c000bc2c:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000bc2f:	40                   	inc    eax
c000bc30:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc34:	0f af c5             	imul   eax,ebp
c000bc37:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bc3b:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000bc3e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc42:	58                   	pop    eax
c000bc43:	5a                   	pop    edx
c000bc44:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc48:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc4c:	e8 0f d2 01 00       	call   c0028e60 <lrint>
c000bc51:	83 ec 0c             	sub    esp,0xc
c000bc54:	50                   	push   eax
c000bc55:	e8 e1 cd 01 00       	call   c0028a3b <__floatsidf>
c000bc5a:	83 c4 10             	add    esp,0x10
c000bc5d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bc61:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bc65:	52                   	push   edx
c000bc66:	50                   	push   eax
c000bc67:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc6b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc6f:	e8 38 c7 01 00       	call   c00283ac <__subdf3>
c000bc74:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc78:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc7c:	83 c4 20             	add    esp,0x20
c000bc7f:	6a 00                	push   0x0
c000bc81:	6a 00                	push   0x0
c000bc83:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc87:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc8b:	e8 17 d0 01 00       	call   c0028ca7 <__ltdf2>
c000bc90:	83 c4 10             	add    esp,0x10
c000bc93:	85 c0                	test   eax,eax
c000bc95:	79 1f                	jns    c000bcb6 <sinc_multichan_vari_process+0x222>
c000bc97:	68 00 00 f0 3f       	push   0x3ff00000
c000bc9c:	6a 00                	push   0x0
c000bc9e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bca2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bca6:	e8 b0 c0 01 00       	call   c0027d5b <__adddf3>
c000bcab:	83 c4 10             	add    esp,0x10
c000bcae:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bcb2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bcb6:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000bcb9:	83 ec 10             	sub    esp,0x10
c000bcbc:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bcc0:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000bcc3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bcc7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bccb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bccf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bcd3:	e8 d4 c6 01 00       	call   c00283ac <__subdf3>
c000bcd8:	83 c4 18             	add    esp,0x18
c000bcdb:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bcdf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bce3:	52                   	push   edx
c000bce4:	50                   	push   eax
c000bce5:	e8 76 d1 01 00       	call   c0028e60 <lrint>
c000bcea:	0f af e8             	imul   ebp,eax
c000bced:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bcf1:	01 e8                	add    eax,ebp
c000bcf3:	99                   	cdq    
c000bcf4:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000bcf7:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000bcfa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bcfe:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bd02:	68 00 00 f0 3f       	push   0x3ff00000
c000bd07:	6a 00                	push   0x0
c000bd09:	e8 ae c9 01 00       	call   c00286bc <__divdf3>
c000bd0e:	83 c4 10             	add    esp,0x10
c000bd11:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bd15:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bd19:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000bd1e:	68 23 42 92 0c       	push   0xc924223
c000bd23:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd27:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd2b:	e8 2b c0 01 00       	call   c0027d5b <__adddf3>
c000bd30:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000bd34:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000bd38:	83 c4 20             	add    esp,0x20
c000bd3b:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bd43:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000bd4b:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000bd4e:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000bd51:	7d 50                	jge    c000bda3 <sinc_multichan_vari_process+0x30f>
c000bd53:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bd56:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bd59:	01 c8                	add    eax,ecx
c000bd5b:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd5e:	99                   	cdq    
c000bd5f:	f7 f9                	idiv   ecx
c000bd61:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd65:	7d 0c                	jge    c000bd73 <sinc_multichan_vari_process+0x2df>
c000bd67:	8b 6b 3c             	mov    ebp,DWORD PTR [ebx+0x3c]
c000bd6a:	85 ed                	test   ebp,ebp
c000bd6c:	79 6b                	jns    c000bdd9 <sinc_multichan_vari_process+0x345>
c000bd6e:	e9 e6 00 00 00       	jmp    c000be59 <sinc_multichan_vari_process+0x3c5>
c000bd73:	50                   	push   eax
c000bd74:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000bd78:	57                   	push   edi
c000bd79:	53                   	push   ebx
c000bd7a:	e8 9b fb ff ff       	call   c000b91a <prepare_data>
c000bd7f:	83 c4 10             	add    esp,0x10
c000bd82:	89 c2                	mov    edx,eax
c000bd84:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000bd87:	85 c0                	test   eax,eax
c000bd89:	0f 85 bf 03 00 00    	jne    c000c14e <sinc_multichan_vari_process+0x6ba>
c000bd8f:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bd92:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bd95:	01 c8                	add    eax,ecx
c000bd97:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd9a:	99                   	cdq    
c000bd9b:	f7 f9                	idiv   ecx
c000bd9d:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bda1:	7c c4                	jl     c000bd67 <sinc_multichan_vari_process+0x2d3>
c000bda3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bda7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bdab:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000bdae:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c000bdb1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bdb5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bdb9:	89 06                	mov    DWORD PTR [esi],eax
c000bdbb:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c000bdbe:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000bdc1:	99                   	cdq    
c000bdc2:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bdc5:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000bdc8:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000bdcb:	99                   	cdq    
c000bdcc:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bdcf:	31 d2                	xor    edx,edx
c000bdd1:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000bdd4:	e9 75 03 00 00       	jmp    c000c14e <sinc_multichan_vari_process+0x6ba>
c000bdd9:	83 ec 0c             	sub    esp,0xc
c000bddc:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000bddf:	e8 57 cc 01 00       	call   c0028a3b <__floatsidf>
c000bde4:	83 c4 10             	add    esp,0x10
c000bde7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bdeb:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bdef:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bdf3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bdf7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdfb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdff:	e8 57 bf 01 00       	call   c0027d5b <__adddf3>
c000be04:	83 c4 10             	add    esp,0x10
c000be07:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000be0b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000be0f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000be13:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000be17:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be1b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be1f:	e8 37 bf 01 00       	call   c0027d5b <__adddf3>
c000be24:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000be27:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000be2b:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000be2f:	e8 07 cc 01 00       	call   c0028a3b <__floatsidf>
c000be34:	83 c4 10             	add    esp,0x10
c000be37:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be3b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be3f:	52                   	push   edx
c000be40:	50                   	push   eax
c000be41:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be45:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be49:	e8 57 ce 01 00       	call   c0028ca5 <__gedf2>
c000be4e:	83 c4 10             	add    esp,0x10
c000be51:	85 c0                	test   eax,eax
c000be53:	0f 89 4a ff ff ff    	jns    c000bda3 <sinc_multichan_vari_process+0x30f>
c000be59:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000be5d:	0f 8e ed 00 00 00    	jle    c000bf50 <sinc_multichan_vari_process+0x4bc>
c000be63:	83 ec 10             	sub    esp,0x10
c000be66:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000be69:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000be6c:	ff 76 04             	push   DWORD PTR [esi+0x4]
c000be6f:	ff 36                	push   DWORD PTR [esi]
c000be71:	e8 36 c5 01 00       	call   c00283ac <__subdf3>
c000be76:	83 c4 18             	add    esp,0x18
c000be79:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be7d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be81:	52                   	push   edx
c000be82:	50                   	push   eax
c000be83:	e8 b8 cf 01 00       	call   c0028e40 <fabs>
c000be88:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000be8c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000be90:	83 c4 10             	add    esp,0x10
c000be93:	68 df 7c db 3d       	push   0x3ddb7cdf
c000be98:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000be9d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bea1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bea5:	e8 df cd 01 00       	call   c0028c89 <__gtdf2>
c000beaa:	83 c4 10             	add    esp,0x10
c000bead:	85 c0                	test   eax,eax
c000beaf:	0f 8e 9b 00 00 00    	jle    c000bf50 <sinc_multichan_vari_process+0x4bc>
c000beb5:	8b 06                	mov    eax,DWORD PTR [esi]
c000beb7:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000beba:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bebe:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bec2:	52                   	push   edx
c000bec3:	50                   	push   eax
c000bec4:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000bec7:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000beca:	e8 dd c4 01 00       	call   c00283ac <__subdf3>
c000becf:	59                   	pop    ecx
c000bed0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bed4:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000bed8:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000bedb:	e8 5b cb 01 00       	call   c0028a3b <__floatsidf>
c000bee0:	83 c4 10             	add    esp,0x10
c000bee3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bee7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000beeb:	52                   	push   edx
c000beec:	50                   	push   eax
c000beed:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bef1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bef5:	e8 de c4 01 00       	call   c00283d8 <__muldf3>
c000befa:	5d                   	pop    ebp
c000befb:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000beff:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000bf03:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000bf06:	e8 30 cb 01 00       	call   c0028a3b <__floatsidf>
c000bf0b:	83 c4 10             	add    esp,0x10
c000bf0e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf12:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf16:	52                   	push   edx
c000bf17:	50                   	push   eax
c000bf18:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf1c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf20:	e8 97 c7 01 00       	call   c00286bc <__divdf3>
c000bf25:	83 c4 10             	add    esp,0x10
c000bf28:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bf2c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bf30:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bf34:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bf38:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf3c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf40:	e8 16 be 01 00       	call   c0027d5b <__adddf3>
c000bf45:	83 c4 10             	add    esp,0x10
c000bf48:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bf4c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bf50:	83 ec 0c             	sub    esp,0xc
c000bf53:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bf56:	e8 e0 ca 01 00       	call   c0028a3b <__floatsidf>
c000bf5b:	83 c4 10             	add    esp,0x10
c000bf5e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf62:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf76:	e8 2c cd 01 00       	call   c0028ca7 <__ltdf2>
c000bf7b:	83 c4 10             	add    esp,0x10
c000bf7e:	85 c0                	test   eax,eax
c000bf80:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bf84:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bf88:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000bf8c:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000bf90:	78 10                	js     c000bfa2 <sinc_multichan_vari_process+0x50e>
c000bf92:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bf96:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bf9a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bf9e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bfa2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bfa6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bfaa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bfae:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bfb2:	e8 21 c4 01 00       	call   c00283d8 <__muldf3>
c000bfb7:	59                   	pop    ecx
c000bfb8:	5d                   	pop    ebp
c000bfb9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bfbd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bfc1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bfc5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bfc9:	e8 25 f9 ff ff       	call   c000b8f3 <double_to_fp>
c000bfce:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bfd2:	89 c5                	mov    ebp,eax
c000bfd4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bfd8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bfdc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bfe0:	e8 f3 c3 01 00       	call   c00283d8 <__muldf3>
c000bfe5:	83 c4 18             	add    esp,0x18
c000bfe8:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bfec:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bff0:	52                   	push   edx
c000bff1:	50                   	push   eax
c000bff2:	e8 fc f8 ff ff       	call   c000b8f3 <double_to_fp>
c000bff7:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000bffa:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000bffe:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000c001:	8d 04 90             	lea    eax,[eax+edx*4]
c000c004:	50                   	push   eax
c000c005:	50                   	push   eax
c000c006:	50                   	push   eax
c000c007:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c00a:	e8 2c ca 01 00       	call   c0028a3b <__floatsidf>
c000c00f:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c013:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000c017:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c01b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c01f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c023:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c027:	e8 90 c6 01 00       	call   c00286bc <__divdf3>
c000c02c:	83 c4 1c             	add    esp,0x1c
c000c02f:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000c033:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000c037:	52                   	push   edx
c000c038:	89 ea                	mov    edx,ebp
c000c03a:	50                   	push   eax
c000c03b:	89 d8                	mov    eax,ebx
c000c03d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c040:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c000c044:	e8 69 ed ff ff       	call   c000adb2 <calc_output_multi>
c000c049:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000c04c:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c000c04f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c053:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c057:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c05b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c05f:	e8 58 c6 01 00       	call   c00286bc <__divdf3>
c000c064:	83 c4 10             	add    esp,0x10
c000c067:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c06b:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c06f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c073:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c077:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c07b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c07f:	e8 d7 bc 01 00       	call   c0027d5b <__adddf3>
c000c084:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c088:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c08c:	83 c4 28             	add    esp,0x28
c000c08f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c093:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c097:	e8 c4 cd 01 00       	call   c0028e60 <lrint>
c000c09c:	83 ec 0c             	sub    esp,0xc
c000c09f:	50                   	push   eax
c000c0a0:	e8 96 c9 01 00       	call   c0028a3b <__floatsidf>
c000c0a5:	83 c4 10             	add    esp,0x10
c000c0a8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c0ac:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c0b0:	52                   	push   edx
c000c0b1:	50                   	push   eax
c000c0b2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0b6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0ba:	e8 ed c2 01 00       	call   c00283ac <__subdf3>
c000c0bf:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c0c3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c0c7:	83 c4 20             	add    esp,0x20
c000c0ca:	6a 00                	push   0x0
c000c0cc:	6a 00                	push   0x0
c000c0ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0d2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0d6:	e8 cc cb 01 00       	call   c0028ca7 <__ltdf2>
c000c0db:	83 c4 10             	add    esp,0x10
c000c0de:	85 c0                	test   eax,eax
c000c0e0:	79 20                	jns    c000c102 <sinc_multichan_vari_process+0x66e>
c000c0e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0f2:	e8 64 bc 01 00       	call   c0027d5b <__adddf3>
c000c0f7:	83 c4 10             	add    esp,0x10
c000c0fa:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c0fe:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c102:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c105:	83 ec 10             	sub    esp,0x10
c000c108:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c10c:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000c10f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c113:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c117:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c11b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c11f:	e8 88 c2 01 00       	call   c00283ac <__subdf3>
c000c124:	83 c4 18             	add    esp,0x18
c000c127:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c12b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c12f:	52                   	push   edx
c000c130:	50                   	push   eax
c000c131:	e8 2a cd 01 00       	call   c0028e60 <lrint>
c000c136:	0f af e8             	imul   ebp,eax
c000c139:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c13d:	83 c4 10             	add    esp,0x10
c000c140:	01 e8                	add    eax,ebp
c000c142:	99                   	cdq    
c000c143:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c146:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c149:	e9 fd fb ff ff       	jmp    c000bd4b <sinc_multichan_vari_process+0x2b7>
c000c14e:	83 c4 4c             	add    esp,0x4c
c000c151:	89 d0                	mov    eax,edx
c000c153:	5b                   	pop    ebx
c000c154:	5e                   	pop    esi
c000c155:	5f                   	pop    edi
c000c156:	5d                   	pop    ebp
c000c157:	c3                   	ret    

c000c158 <sinc_hex_vari_process>:
c000c158:	55                   	push   ebp
c000c159:	ba 05 00 00 00       	mov    edx,0x5
c000c15e:	57                   	push   edi
c000c15f:	56                   	push   esi
c000c160:	53                   	push   ebx
c000c161:	83 ec 4c             	sub    esp,0x4c
c000c164:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c168:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c16c:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c16f:	85 db                	test   ebx,ebx
c000c171:	0f 84 9c 06 00 00    	je     c000c813 <sinc_hex_vari_process+0x6bb>
c000c177:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c17a:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c17d:	0f af c7             	imul   eax,edi
c000c180:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c183:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c186:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c18d:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c194:	0f af c7             	imul   eax,edi
c000c197:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c19a:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c19d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c1a0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c1a4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c1a8:	68 00 00 70 3f       	push   0x3f700000
c000c1ad:	6a 00                	push   0x0
c000c1af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c1b3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c1b7:	e8 eb ca 01 00       	call   c0028ca7 <__ltdf2>
c000c1bc:	83 c4 10             	add    esp,0x10
c000c1bf:	ba 16 00 00 00       	mov    edx,0x16
c000c1c4:	85 c0                	test   eax,eax
c000c1c6:	0f 88 47 06 00 00    	js     c000c813 <sinc_hex_vari_process+0x6bb>
c000c1cc:	68 00 00 70 40       	push   0x40700000
c000c1d1:	6a 00                	push   0x0
c000c1d3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c1d7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c1db:	e8 a9 ca 01 00       	call   c0028c89 <__gtdf2>
c000c1e0:	83 c4 10             	add    esp,0x10
c000c1e3:	ba 16 00 00 00       	mov    edx,0x16
c000c1e8:	85 c0                	test   eax,eax
c000c1ea:	0f 8f 23 06 00 00    	jg     c000c813 <sinc_hex_vari_process+0x6bb>
c000c1f0:	83 ec 0c             	sub    esp,0xc
c000c1f3:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c1f6:	e8 40 c8 01 00       	call   c0028a3b <__floatsidf>
c000c1fb:	83 c4 10             	add    esp,0x10
c000c1fe:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c202:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c206:	68 00 00 00 40       	push   0x40000000
c000c20b:	6a 00                	push   0x0
c000c20d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c211:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c215:	e8 41 bb 01 00       	call   c0027d5b <__adddf3>
c000c21a:	59                   	pop    ecx
c000c21b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c21f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c223:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c226:	e8 10 c8 01 00       	call   c0028a3b <__floatsidf>
c000c22b:	83 c4 10             	add    esp,0x10
c000c22e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c232:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c236:	52                   	push   edx
c000c237:	50                   	push   eax
c000c238:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c23c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c240:	e8 77 c4 01 00       	call   c00286bc <__divdf3>
c000c245:	83 c4 10             	add    esp,0x10
c000c248:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c24c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c250:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c253:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c256:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c25a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c25e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c262:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c266:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c26a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c26e:	e8 16 ca 01 00       	call   c0028c89 <__gtdf2>
c000c273:	83 c4 10             	add    esp,0x10
c000c276:	85 c0                	test   eax,eax
c000c278:	7e 2d                	jle    c000c2a7 <sinc_hex_vari_process+0x14f>
c000c27a:	68 00 00 f0 3f       	push   0x3ff00000
c000c27f:	6a 00                	push   0x0
c000c281:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c285:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c289:	e8 19 ca 01 00       	call   c0028ca7 <__ltdf2>
c000c28e:	83 c4 10             	add    esp,0x10
c000c291:	85 c0                	test   eax,eax
c000c293:	79 4d                	jns    c000c2e2 <sinc_hex_vari_process+0x18a>
c000c295:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c299:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c29d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c2a1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c2a5:	eb 1b                	jmp    c000c2c2 <sinc_hex_vari_process+0x16a>
c000c2a7:	68 00 00 f0 3f       	push   0x3ff00000
c000c2ac:	6a 00                	push   0x0
c000c2ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c2b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c2b6:	e8 ec c9 01 00       	call   c0028ca7 <__ltdf2>
c000c2bb:	83 c4 10             	add    esp,0x10
c000c2be:	85 c0                	test   eax,eax
c000c2c0:	79 20                	jns    c000c2e2 <sinc_hex_vari_process+0x18a>
c000c2c2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c2c6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c2ca:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2ce:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2d2:	e8 e5 c3 01 00       	call   c00286bc <__divdf3>
c000c2d7:	83 c4 10             	add    esp,0x10
c000c2da:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c2de:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c2e2:	50                   	push   eax
c000c2e3:	50                   	push   eax
c000c2e4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2e8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2ec:	e8 6f cb 01 00       	call   c0028e60 <lrint>
c000c2f1:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c2f4:	40                   	inc    eax
c000c2f5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c2f9:	0f af c7             	imul   eax,edi
c000c2fc:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c300:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c303:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c307:	58                   	pop    eax
c000c308:	5a                   	pop    edx
c000c309:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c30d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c311:	e8 4a cb 01 00       	call   c0028e60 <lrint>
c000c316:	83 ec 0c             	sub    esp,0xc
c000c319:	50                   	push   eax
c000c31a:	e8 1c c7 01 00       	call   c0028a3b <__floatsidf>
c000c31f:	83 c4 10             	add    esp,0x10
c000c322:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c326:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c32a:	52                   	push   edx
c000c32b:	50                   	push   eax
c000c32c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c330:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c334:	e8 73 c0 01 00       	call   c00283ac <__subdf3>
c000c339:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c33d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c341:	83 c4 20             	add    esp,0x20
c000c344:	6a 00                	push   0x0
c000c346:	6a 00                	push   0x0
c000c348:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c34c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c350:	e8 52 c9 01 00       	call   c0028ca7 <__ltdf2>
c000c355:	83 c4 10             	add    esp,0x10
c000c358:	85 c0                	test   eax,eax
c000c35a:	79 1f                	jns    c000c37b <sinc_hex_vari_process+0x223>
c000c35c:	68 00 00 f0 3f       	push   0x3ff00000
c000c361:	6a 00                	push   0x0
c000c363:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c367:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c36b:	e8 eb b9 01 00       	call   c0027d5b <__adddf3>
c000c370:	83 c4 10             	add    esp,0x10
c000c373:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c377:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c37b:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c37e:	83 ec 10             	sub    esp,0x10
c000c381:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c385:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c388:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c38c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c390:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c394:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c398:	e8 0f c0 01 00       	call   c00283ac <__subdf3>
c000c39d:	83 c4 18             	add    esp,0x18
c000c3a0:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c3a4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c3a8:	52                   	push   edx
c000c3a9:	50                   	push   eax
c000c3aa:	e8 b1 ca 01 00       	call   c0028e60 <lrint>
c000c3af:	0f af f8             	imul   edi,eax
c000c3b2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c3b6:	01 f8                	add    eax,edi
c000c3b8:	99                   	cdq    
c000c3b9:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c3bc:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c3bf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c3c3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c3c7:	68 00 00 f0 3f       	push   0x3ff00000
c000c3cc:	6a 00                	push   0x0
c000c3ce:	e8 e9 c2 01 00       	call   c00286bc <__divdf3>
c000c3d3:	83 c4 10             	add    esp,0x10
c000c3d6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c3da:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c3de:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c3e3:	68 23 42 92 0c       	push   0xc924223
c000c3e8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c3ec:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c3f0:	e8 66 b9 01 00       	call   c0027d5b <__adddf3>
c000c3f5:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c3f9:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c3fd:	83 c4 20             	add    esp,0x20
c000c400:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c408:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000c410:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c413:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c416:	7d 50                	jge    c000c468 <sinc_hex_vari_process+0x310>
c000c418:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c41b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c41e:	01 c8                	add    eax,ecx
c000c420:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c423:	99                   	cdq    
c000c424:	f7 f9                	idiv   ecx
c000c426:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c42a:	7d 0c                	jge    c000c438 <sinc_hex_vari_process+0x2e0>
c000c42c:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c42f:	85 ff                	test   edi,edi
c000c431:	79 6c                	jns    c000c49f <sinc_hex_vari_process+0x347>
c000c433:	e9 e7 00 00 00       	jmp    c000c51f <sinc_hex_vari_process+0x3c7>
c000c438:	50                   	push   eax
c000c439:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c43d:	56                   	push   esi
c000c43e:	53                   	push   ebx
c000c43f:	e8 d6 f4 ff ff       	call   c000b91a <prepare_data>
c000c444:	83 c4 10             	add    esp,0x10
c000c447:	89 c2                	mov    edx,eax
c000c449:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c44c:	85 c0                	test   eax,eax
c000c44e:	0f 85 bf 03 00 00    	jne    c000c813 <sinc_hex_vari_process+0x6bb>
c000c454:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c457:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c45a:	01 c8                	add    eax,ecx
c000c45c:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c45f:	99                   	cdq    
c000c460:	f7 f9                	idiv   ecx
c000c462:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c466:	7c c4                	jl     c000c42c <sinc_hex_vari_process+0x2d4>
c000c468:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c46c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c470:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c473:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c476:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c47a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c47e:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c481:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c484:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c487:	99                   	cdq    
c000c488:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c48b:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c48e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c491:	99                   	cdq    
c000c492:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c495:	31 d2                	xor    edx,edx
c000c497:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c49a:	e9 74 03 00 00       	jmp    c000c813 <sinc_hex_vari_process+0x6bb>
c000c49f:	83 ec 0c             	sub    esp,0xc
c000c4a2:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c4a5:	e8 91 c5 01 00       	call   c0028a3b <__floatsidf>
c000c4aa:	83 c4 10             	add    esp,0x10
c000c4ad:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c4b1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c4b5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c4b9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c4bd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4c1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4c5:	e8 91 b8 01 00       	call   c0027d5b <__adddf3>
c000c4ca:	83 c4 10             	add    esp,0x10
c000c4cd:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c4d1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c4d5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c4d9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c4dd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4e1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4e5:	e8 71 b8 01 00       	call   c0027d5b <__adddf3>
c000c4ea:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c4ed:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c4f1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c4f5:	e8 41 c5 01 00       	call   c0028a3b <__floatsidf>
c000c4fa:	83 c4 10             	add    esp,0x10
c000c4fd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c501:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c505:	52                   	push   edx
c000c506:	50                   	push   eax
c000c507:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c50b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c50f:	e8 91 c7 01 00       	call   c0028ca5 <__gedf2>
c000c514:	83 c4 10             	add    esp,0x10
c000c517:	85 c0                	test   eax,eax
c000c519:	0f 89 49 ff ff ff    	jns    c000c468 <sinc_hex_vari_process+0x310>
c000c51f:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c523:	0f 8e ef 00 00 00    	jle    c000c618 <sinc_hex_vari_process+0x4c0>
c000c529:	83 ec 10             	sub    esp,0x10
c000c52c:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c52f:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c532:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c535:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c538:	e8 6f be 01 00       	call   c00283ac <__subdf3>
c000c53d:	83 c4 18             	add    esp,0x18
c000c540:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c544:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c548:	52                   	push   edx
c000c549:	50                   	push   eax
c000c54a:	e8 f1 c8 01 00       	call   c0028e40 <fabs>
c000c54f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c553:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c557:	83 c4 10             	add    esp,0x10
c000c55a:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c55f:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c564:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c568:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c56c:	e8 18 c7 01 00       	call   c0028c89 <__gtdf2>
c000c571:	83 c4 10             	add    esp,0x10
c000c574:	85 c0                	test   eax,eax
c000c576:	0f 8e 9c 00 00 00    	jle    c000c618 <sinc_hex_vari_process+0x4c0>
c000c57c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c57f:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c582:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c586:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c58a:	52                   	push   edx
c000c58b:	50                   	push   eax
c000c58c:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c58f:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c592:	e8 15 be 01 00       	call   c00283ac <__subdf3>
c000c597:	59                   	pop    ecx
c000c598:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c59c:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c5a0:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c5a3:	e8 93 c4 01 00       	call   c0028a3b <__floatsidf>
c000c5a8:	83 c4 10             	add    esp,0x10
c000c5ab:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c5af:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c5b3:	52                   	push   edx
c000c5b4:	50                   	push   eax
c000c5b5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5b9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5bd:	e8 16 be 01 00       	call   c00283d8 <__muldf3>
c000c5c2:	5f                   	pop    edi
c000c5c3:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c5c7:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c5cb:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000c5ce:	e8 68 c4 01 00       	call   c0028a3b <__floatsidf>
c000c5d3:	83 c4 10             	add    esp,0x10
c000c5d6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c5da:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c5de:	52                   	push   edx
c000c5df:	50                   	push   eax
c000c5e0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5e4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5e8:	e8 cf c0 01 00       	call   c00286bc <__divdf3>
c000c5ed:	83 c4 10             	add    esp,0x10
c000c5f0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c5f4:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c5f8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c5fc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c600:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c604:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c608:	e8 4e b7 01 00       	call   c0027d5b <__adddf3>
c000c60d:	83 c4 10             	add    esp,0x10
c000c610:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c614:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c618:	83 ec 0c             	sub    esp,0xc
c000c61b:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c61e:	e8 18 c4 01 00       	call   c0028a3b <__floatsidf>
c000c623:	83 c4 10             	add    esp,0x10
c000c626:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c62a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c62e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c632:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c636:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c63a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c63e:	e8 64 c6 01 00       	call   c0028ca7 <__ltdf2>
c000c643:	83 c4 10             	add    esp,0x10
c000c646:	85 c0                	test   eax,eax
c000c648:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c64c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c650:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000c654:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000c658:	78 10                	js     c000c66a <sinc_hex_vari_process+0x512>
c000c65a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c65e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c662:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c666:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c66a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c66e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c672:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c676:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c67a:	e8 59 bd 01 00       	call   c00283d8 <__muldf3>
c000c67f:	59                   	pop    ecx
c000c680:	5f                   	pop    edi
c000c681:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c685:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c689:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c68d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c691:	e8 5d f2 ff ff       	call   c000b8f3 <double_to_fp>
c000c696:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c69a:	89 c7                	mov    edi,eax
c000c69c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c6a0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6a4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6a8:	e8 2b bd 01 00       	call   c00283d8 <__muldf3>
c000c6ad:	83 c4 18             	add    esp,0x18
c000c6b0:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c6b4:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c6b8:	52                   	push   edx
c000c6b9:	50                   	push   eax
c000c6ba:	e8 34 f2 ff ff       	call   c000b8f3 <double_to_fp>
c000c6bf:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000c6c2:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c6c6:	83 c4 0c             	add    esp,0xc
c000c6c9:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000c6cc:	8d 04 90             	lea    eax,[eax+edx*4]
c000c6cf:	50                   	push   eax
c000c6d0:	50                   	push   eax
c000c6d1:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c6d4:	e8 62 c3 01 00       	call   c0028a3b <__floatsidf>
c000c6d9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c6dd:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000c6e1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6e5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6e9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6ed:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6f1:	e8 c6 bf 01 00       	call   c00286bc <__divdf3>
c000c6f6:	83 c4 18             	add    esp,0x18
c000c6f9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c6fd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c701:	52                   	push   edx
c000c702:	89 fa                	mov    edx,edi
c000c704:	50                   	push   eax
c000c705:	89 d8                	mov    eax,ebx
c000c707:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000c70b:	e8 50 de ff ff       	call   c000a560 <calc_output_hex>
c000c710:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000c714:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c718:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c71c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c720:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c724:	e8 93 bf 01 00       	call   c00286bc <__divdf3>
c000c729:	83 c4 10             	add    esp,0x10
c000c72c:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c730:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c734:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c738:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c73c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c740:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c744:	e8 12 b6 01 00       	call   c0027d5b <__adddf3>
c000c749:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c74d:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c751:	83 c4 18             	add    esp,0x18
c000c754:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c758:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c75c:	e8 ff c6 01 00       	call   c0028e60 <lrint>
c000c761:	83 ec 0c             	sub    esp,0xc
c000c764:	50                   	push   eax
c000c765:	e8 d1 c2 01 00       	call   c0028a3b <__floatsidf>
c000c76a:	83 c4 10             	add    esp,0x10
c000c76d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c771:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c775:	52                   	push   edx
c000c776:	50                   	push   eax
c000c777:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c77b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c77f:	e8 28 bc 01 00       	call   c00283ac <__subdf3>
c000c784:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c788:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c78c:	83 c4 20             	add    esp,0x20
c000c78f:	6a 00                	push   0x0
c000c791:	6a 00                	push   0x0
c000c793:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c797:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c79b:	e8 07 c5 01 00       	call   c0028ca7 <__ltdf2>
c000c7a0:	83 c4 10             	add    esp,0x10
c000c7a3:	85 c0                	test   eax,eax
c000c7a5:	79 20                	jns    c000c7c7 <sinc_hex_vari_process+0x66f>
c000c7a7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c7ab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c7af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c7b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c7b7:	e8 9f b5 01 00       	call   c0027d5b <__adddf3>
c000c7bc:	83 c4 10             	add    esp,0x10
c000c7bf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c7c3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c7c7:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c7ca:	83 ec 10             	sub    esp,0x10
c000c7cd:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c7d1:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c7d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c7d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c7dc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c7e0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c7e4:	e8 c3 bb 01 00       	call   c00283ac <__subdf3>
c000c7e9:	83 c4 18             	add    esp,0x18
c000c7ec:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c7f0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c7f4:	52                   	push   edx
c000c7f5:	50                   	push   eax
c000c7f6:	e8 65 c6 01 00       	call   c0028e60 <lrint>
c000c7fb:	0f af f8             	imul   edi,eax
c000c7fe:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c802:	83 c4 10             	add    esp,0x10
c000c805:	01 f8                	add    eax,edi
c000c807:	99                   	cdq    
c000c808:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c80b:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c80e:	e9 fd fb ff ff       	jmp    c000c410 <sinc_hex_vari_process+0x2b8>
c000c813:	83 c4 4c             	add    esp,0x4c
c000c816:	89 d0                	mov    eax,edx
c000c818:	5b                   	pop    ebx
c000c819:	5e                   	pop    esi
c000c81a:	5f                   	pop    edi
c000c81b:	5d                   	pop    ebp
c000c81c:	c3                   	ret    

c000c81d <sinc_quad_vari_process>:
c000c81d:	55                   	push   ebp
c000c81e:	ba 05 00 00 00       	mov    edx,0x5
c000c823:	57                   	push   edi
c000c824:	56                   	push   esi
c000c825:	53                   	push   ebx
c000c826:	83 ec 4c             	sub    esp,0x4c
c000c829:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c82d:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c831:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c834:	85 db                	test   ebx,ebx
c000c836:	0f 84 9c 06 00 00    	je     c000ced8 <sinc_quad_vari_process+0x6bb>
c000c83c:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c83f:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c842:	0f af c7             	imul   eax,edi
c000c845:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c848:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c84b:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c852:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c859:	0f af c7             	imul   eax,edi
c000c85c:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c85f:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c862:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c865:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c869:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c86d:	68 00 00 70 3f       	push   0x3f700000
c000c872:	6a 00                	push   0x0
c000c874:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c878:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c87c:	e8 26 c4 01 00       	call   c0028ca7 <__ltdf2>
c000c881:	83 c4 10             	add    esp,0x10
c000c884:	ba 16 00 00 00       	mov    edx,0x16
c000c889:	85 c0                	test   eax,eax
c000c88b:	0f 88 47 06 00 00    	js     c000ced8 <sinc_quad_vari_process+0x6bb>
c000c891:	68 00 00 70 40       	push   0x40700000
c000c896:	6a 00                	push   0x0
c000c898:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c89c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c8a0:	e8 e4 c3 01 00       	call   c0028c89 <__gtdf2>
c000c8a5:	83 c4 10             	add    esp,0x10
c000c8a8:	ba 16 00 00 00       	mov    edx,0x16
c000c8ad:	85 c0                	test   eax,eax
c000c8af:	0f 8f 23 06 00 00    	jg     c000ced8 <sinc_quad_vari_process+0x6bb>
c000c8b5:	83 ec 0c             	sub    esp,0xc
c000c8b8:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c8bb:	e8 7b c1 01 00       	call   c0028a3b <__floatsidf>
c000c8c0:	83 c4 10             	add    esp,0x10
c000c8c3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c8c7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c8cb:	68 00 00 00 40       	push   0x40000000
c000c8d0:	6a 00                	push   0x0
c000c8d2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8d6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8da:	e8 7c b4 01 00       	call   c0027d5b <__adddf3>
c000c8df:	59                   	pop    ecx
c000c8e0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c8e4:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c8e8:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c8eb:	e8 4b c1 01 00       	call   c0028a3b <__floatsidf>
c000c8f0:	83 c4 10             	add    esp,0x10
c000c8f3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c8f7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c8fb:	52                   	push   edx
c000c8fc:	50                   	push   eax
c000c8fd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c901:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c905:	e8 b2 bd 01 00       	call   c00286bc <__divdf3>
c000c90a:	83 c4 10             	add    esp,0x10
c000c90d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c911:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c915:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c918:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c91b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c91f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c923:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c927:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c92b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c92f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c933:	e8 51 c3 01 00       	call   c0028c89 <__gtdf2>
c000c938:	83 c4 10             	add    esp,0x10
c000c93b:	85 c0                	test   eax,eax
c000c93d:	7e 2d                	jle    c000c96c <sinc_quad_vari_process+0x14f>
c000c93f:	68 00 00 f0 3f       	push   0x3ff00000
c000c944:	6a 00                	push   0x0
c000c946:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c94a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c94e:	e8 54 c3 01 00       	call   c0028ca7 <__ltdf2>
c000c953:	83 c4 10             	add    esp,0x10
c000c956:	85 c0                	test   eax,eax
c000c958:	79 4d                	jns    c000c9a7 <sinc_quad_vari_process+0x18a>
c000c95a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c95e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c962:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c966:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c96a:	eb 1b                	jmp    c000c987 <sinc_quad_vari_process+0x16a>
c000c96c:	68 00 00 f0 3f       	push   0x3ff00000
c000c971:	6a 00                	push   0x0
c000c973:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c977:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c97b:	e8 27 c3 01 00       	call   c0028ca7 <__ltdf2>
c000c980:	83 c4 10             	add    esp,0x10
c000c983:	85 c0                	test   eax,eax
c000c985:	79 20                	jns    c000c9a7 <sinc_quad_vari_process+0x18a>
c000c987:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c98b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c98f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c993:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c997:	e8 20 bd 01 00       	call   c00286bc <__divdf3>
c000c99c:	83 c4 10             	add    esp,0x10
c000c99f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c9a3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c9a7:	50                   	push   eax
c000c9a8:	50                   	push   eax
c000c9a9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c9ad:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c9b1:	e8 aa c4 01 00       	call   c0028e60 <lrint>
c000c9b6:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c9b9:	40                   	inc    eax
c000c9ba:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c9be:	0f af c7             	imul   eax,edi
c000c9c1:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c9c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c9c8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9cc:	58                   	pop    eax
c000c9cd:	5a                   	pop    edx
c000c9ce:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c9d2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c9d6:	e8 85 c4 01 00       	call   c0028e60 <lrint>
c000c9db:	83 ec 0c             	sub    esp,0xc
c000c9de:	50                   	push   eax
c000c9df:	e8 57 c0 01 00       	call   c0028a3b <__floatsidf>
c000c9e4:	83 c4 10             	add    esp,0x10
c000c9e7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c9eb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c9ef:	52                   	push   edx
c000c9f0:	50                   	push   eax
c000c9f1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9f5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9f9:	e8 ae b9 01 00       	call   c00283ac <__subdf3>
c000c9fe:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ca02:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ca06:	83 c4 20             	add    esp,0x20
c000ca09:	6a 00                	push   0x0
c000ca0b:	6a 00                	push   0x0
c000ca0d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca11:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca15:	e8 8d c2 01 00       	call   c0028ca7 <__ltdf2>
c000ca1a:	83 c4 10             	add    esp,0x10
c000ca1d:	85 c0                	test   eax,eax
c000ca1f:	79 1f                	jns    c000ca40 <sinc_quad_vari_process+0x223>
c000ca21:	68 00 00 f0 3f       	push   0x3ff00000
c000ca26:	6a 00                	push   0x0
c000ca28:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca2c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca30:	e8 26 b3 01 00       	call   c0027d5b <__adddf3>
c000ca35:	83 c4 10             	add    esp,0x10
c000ca38:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ca3c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ca40:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ca43:	83 ec 10             	sub    esp,0x10
c000ca46:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ca4a:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ca4d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca51:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca55:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca59:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca5d:	e8 4a b9 01 00       	call   c00283ac <__subdf3>
c000ca62:	83 c4 18             	add    esp,0x18
c000ca65:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ca69:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ca6d:	52                   	push   edx
c000ca6e:	50                   	push   eax
c000ca6f:	e8 ec c3 01 00       	call   c0028e60 <lrint>
c000ca74:	0f af f8             	imul   edi,eax
c000ca77:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ca7b:	01 f8                	add    eax,edi
c000ca7d:	99                   	cdq    
c000ca7e:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ca81:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ca84:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca88:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca8c:	68 00 00 f0 3f       	push   0x3ff00000
c000ca91:	6a 00                	push   0x0
c000ca93:	e8 24 bc 01 00       	call   c00286bc <__divdf3>
c000ca98:	83 c4 10             	add    esp,0x10
c000ca9b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ca9f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000caa3:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000caa8:	68 23 42 92 0c       	push   0xc924223
c000caad:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cab1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cab5:	e8 a1 b2 01 00       	call   c0027d5b <__adddf3>
c000caba:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000cabe:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000cac2:	83 c4 20             	add    esp,0x20
c000cac5:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000cacd:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000cad5:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000cad8:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000cadb:	7d 50                	jge    c000cb2d <sinc_quad_vari_process+0x310>
c000cadd:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000cae0:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cae3:	01 c8                	add    eax,ecx
c000cae5:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cae8:	99                   	cdq    
c000cae9:	f7 f9                	idiv   ecx
c000caeb:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000caef:	7d 0c                	jge    c000cafd <sinc_quad_vari_process+0x2e0>
c000caf1:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000caf4:	85 ff                	test   edi,edi
c000caf6:	79 6c                	jns    c000cb64 <sinc_quad_vari_process+0x347>
c000caf8:	e9 e7 00 00 00       	jmp    c000cbe4 <sinc_quad_vari_process+0x3c7>
c000cafd:	50                   	push   eax
c000cafe:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cb02:	56                   	push   esi
c000cb03:	53                   	push   ebx
c000cb04:	e8 11 ee ff ff       	call   c000b91a <prepare_data>
c000cb09:	83 c4 10             	add    esp,0x10
c000cb0c:	89 c2                	mov    edx,eax
c000cb0e:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000cb11:	85 c0                	test   eax,eax
c000cb13:	0f 85 bf 03 00 00    	jne    c000ced8 <sinc_quad_vari_process+0x6bb>
c000cb19:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000cb1c:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cb1f:	01 c8                	add    eax,ecx
c000cb21:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cb24:	99                   	cdq    
c000cb25:	f7 f9                	idiv   ecx
c000cb27:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cb2b:	7c c4                	jl     c000caf1 <sinc_quad_vari_process+0x2d4>
c000cb2d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cb31:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cb35:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000cb38:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000cb3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb3f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cb43:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000cb46:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000cb49:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000cb4c:	99                   	cdq    
c000cb4d:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cb50:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000cb53:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000cb56:	99                   	cdq    
c000cb57:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cb5a:	31 d2                	xor    edx,edx
c000cb5c:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000cb5f:	e9 74 03 00 00       	jmp    c000ced8 <sinc_quad_vari_process+0x6bb>
c000cb64:	83 ec 0c             	sub    esp,0xc
c000cb67:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000cb6a:	e8 cc be 01 00       	call   c0028a3b <__floatsidf>
c000cb6f:	83 c4 10             	add    esp,0x10
c000cb72:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb76:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb7a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb7e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb82:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb86:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb8a:	e8 cc b1 01 00       	call   c0027d5b <__adddf3>
c000cb8f:	83 c4 10             	add    esp,0x10
c000cb92:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb96:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb9a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb9e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cba2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cba6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbaa:	e8 ac b1 01 00       	call   c0027d5b <__adddf3>
c000cbaf:	89 3c 24             	mov    DWORD PTR [esp],edi
c000cbb2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cbb6:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cbba:	e8 7c be 01 00       	call   c0028a3b <__floatsidf>
c000cbbf:	83 c4 10             	add    esp,0x10
c000cbc2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cbc6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cbca:	52                   	push   edx
c000cbcb:	50                   	push   eax
c000cbcc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbd0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbd4:	e8 cc c0 01 00       	call   c0028ca5 <__gedf2>
c000cbd9:	83 c4 10             	add    esp,0x10
c000cbdc:	85 c0                	test   eax,eax
c000cbde:	0f 89 49 ff ff ff    	jns    c000cb2d <sinc_quad_vari_process+0x310>
c000cbe4:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000cbe8:	0f 8e ef 00 00 00    	jle    c000ccdd <sinc_quad_vari_process+0x4c0>
c000cbee:	83 ec 10             	sub    esp,0x10
c000cbf1:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cbf4:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cbf7:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000cbfa:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000cbfd:	e8 aa b7 01 00       	call   c00283ac <__subdf3>
c000cc02:	83 c4 18             	add    esp,0x18
c000cc05:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc09:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc0d:	52                   	push   edx
c000cc0e:	50                   	push   eax
c000cc0f:	e8 2c c2 01 00       	call   c0028e40 <fabs>
c000cc14:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cc18:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cc1c:	83 c4 10             	add    esp,0x10
c000cc1f:	68 df 7c db 3d       	push   0x3ddb7cdf
c000cc24:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000cc29:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc2d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc31:	e8 53 c0 01 00       	call   c0028c89 <__gtdf2>
c000cc36:	83 c4 10             	add    esp,0x10
c000cc39:	85 c0                	test   eax,eax
c000cc3b:	0f 8e 9c 00 00 00    	jle    c000ccdd <sinc_quad_vari_process+0x4c0>
c000cc41:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cc44:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cc47:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cc4b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cc4f:	52                   	push   edx
c000cc50:	50                   	push   eax
c000cc51:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cc54:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cc57:	e8 50 b7 01 00       	call   c00283ac <__subdf3>
c000cc5c:	59                   	pop    ecx
c000cc5d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc61:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc65:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000cc68:	e8 ce bd 01 00       	call   c0028a3b <__floatsidf>
c000cc6d:	83 c4 10             	add    esp,0x10
c000cc70:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc74:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc78:	52                   	push   edx
c000cc79:	50                   	push   eax
c000cc7a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc7e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc82:	e8 51 b7 01 00       	call   c00283d8 <__muldf3>
c000cc87:	5f                   	pop    edi
c000cc88:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc8c:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc90:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000cc93:	e8 a3 bd 01 00       	call   c0028a3b <__floatsidf>
c000cc98:	83 c4 10             	add    esp,0x10
c000cc9b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc9f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cca3:	52                   	push   edx
c000cca4:	50                   	push   eax
c000cca5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cca9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ccad:	e8 0a ba 01 00       	call   c00286bc <__divdf3>
c000ccb2:	83 c4 10             	add    esp,0x10
c000ccb5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ccb9:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ccbd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ccc1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ccc5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ccc9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cccd:	e8 89 b0 01 00       	call   c0027d5b <__adddf3>
c000ccd2:	83 c4 10             	add    esp,0x10
c000ccd5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ccd9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ccdd:	83 ec 0c             	sub    esp,0xc
c000cce0:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cce3:	e8 53 bd 01 00       	call   c0028a3b <__floatsidf>
c000cce8:	83 c4 10             	add    esp,0x10
c000cceb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ccef:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ccf3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccf7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccfb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd03:	e8 9f bf 01 00       	call   c0028ca7 <__ltdf2>
c000cd08:	83 c4 10             	add    esp,0x10
c000cd0b:	85 c0                	test   eax,eax
c000cd0d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000cd11:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000cd15:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000cd19:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000cd1d:	78 10                	js     c000cd2f <sinc_quad_vari_process+0x512>
c000cd1f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000cd23:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000cd27:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cd2b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cd2f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd33:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd37:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd3b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd3f:	e8 94 b6 01 00       	call   c00283d8 <__muldf3>
c000cd44:	59                   	pop    ecx
c000cd45:	5f                   	pop    edi
c000cd46:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cd4a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cd4e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cd52:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cd56:	e8 98 eb ff ff       	call   c000b8f3 <double_to_fp>
c000cd5b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd5f:	89 c7                	mov    edi,eax
c000cd61:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd65:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd69:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd6d:	e8 66 b6 01 00       	call   c00283d8 <__muldf3>
c000cd72:	83 c4 18             	add    esp,0x18
c000cd75:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cd79:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cd7d:	52                   	push   edx
c000cd7e:	50                   	push   eax
c000cd7f:	e8 6f eb ff ff       	call   c000b8f3 <double_to_fp>
c000cd84:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000cd87:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000cd8b:	83 c4 0c             	add    esp,0xc
c000cd8e:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000cd91:	8d 04 90             	lea    eax,[eax+edx*4]
c000cd94:	50                   	push   eax
c000cd95:	50                   	push   eax
c000cd96:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cd99:	e8 9d bc 01 00       	call   c0028a3b <__floatsidf>
c000cd9e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cda2:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000cda6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cdaa:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cdae:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cdb2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cdb6:	e8 01 b9 01 00       	call   c00286bc <__divdf3>
c000cdbb:	83 c4 18             	add    esp,0x18
c000cdbe:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cdc2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cdc6:	52                   	push   edx
c000cdc7:	89 fa                	mov    edx,edi
c000cdc9:	50                   	push   eax
c000cdca:	89 d8                	mov    eax,ebx
c000cdcc:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000cdd0:	e8 a5 d1 ff ff       	call   c0009f7a <calc_output_quad>
c000cdd5:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000cdd9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cddd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cde1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cde5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cde9:	e8 ce b8 01 00       	call   c00286bc <__divdf3>
c000cdee:	83 c4 10             	add    esp,0x10
c000cdf1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cdf5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cdf9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cdfd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce01:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce05:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce09:	e8 4d af 01 00       	call   c0027d5b <__adddf3>
c000ce0e:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000ce12:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000ce16:	83 c4 18             	add    esp,0x18
c000ce19:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ce1d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ce21:	e8 3a c0 01 00       	call   c0028e60 <lrint>
c000ce26:	83 ec 0c             	sub    esp,0xc
c000ce29:	50                   	push   eax
c000ce2a:	e8 0c bc 01 00       	call   c0028a3b <__floatsidf>
c000ce2f:	83 c4 10             	add    esp,0x10
c000ce32:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ce36:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ce3a:	52                   	push   edx
c000ce3b:	50                   	push   eax
c000ce3c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce40:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce44:	e8 63 b5 01 00       	call   c00283ac <__subdf3>
c000ce49:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce4d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce51:	83 c4 20             	add    esp,0x20
c000ce54:	6a 00                	push   0x0
c000ce56:	6a 00                	push   0x0
c000ce58:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce5c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce60:	e8 42 be 01 00       	call   c0028ca7 <__ltdf2>
c000ce65:	83 c4 10             	add    esp,0x10
c000ce68:	85 c0                	test   eax,eax
c000ce6a:	79 20                	jns    c000ce8c <sinc_quad_vari_process+0x66f>
c000ce6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce70:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce74:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce78:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce7c:	e8 da ae 01 00       	call   c0027d5b <__adddf3>
c000ce81:	83 c4 10             	add    esp,0x10
c000ce84:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ce88:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ce8c:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ce8f:	83 ec 10             	sub    esp,0x10
c000ce92:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ce96:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ce99:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce9d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cea1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cea5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cea9:	e8 fe b4 01 00       	call   c00283ac <__subdf3>
c000ceae:	83 c4 18             	add    esp,0x18
c000ceb1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ceb5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ceb9:	52                   	push   edx
c000ceba:	50                   	push   eax
c000cebb:	e8 a0 bf 01 00       	call   c0028e60 <lrint>
c000cec0:	0f af f8             	imul   edi,eax
c000cec3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000cec7:	83 c4 10             	add    esp,0x10
c000ceca:	01 f8                	add    eax,edi
c000cecc:	99                   	cdq    
c000cecd:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ced0:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ced3:	e9 fd fb ff ff       	jmp    c000cad5 <sinc_quad_vari_process+0x2b8>
c000ced8:	83 c4 4c             	add    esp,0x4c
c000cedb:	89 d0                	mov    eax,edx
c000cedd:	5b                   	pop    ebx
c000cede:	5e                   	pop    esi
c000cedf:	5f                   	pop    edi
c000cee0:	5d                   	pop    ebp
c000cee1:	c3                   	ret    

c000cee2 <sinc_stereo_vari_process>:
c000cee2:	55                   	push   ebp
c000cee3:	ba 05 00 00 00       	mov    edx,0x5
c000cee8:	57                   	push   edi
c000cee9:	56                   	push   esi
c000ceea:	53                   	push   ebx
c000ceeb:	83 ec 4c             	sub    esp,0x4c
c000ceee:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000cef2:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000cef6:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000cef9:	85 db                	test   ebx,ebx
c000cefb:	0f 84 9c 06 00 00    	je     c000d59d <sinc_stereo_vari_process+0x6bb>
c000cf01:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000cf04:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000cf07:	0f af c7             	imul   eax,edi
c000cf0a:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000cf0d:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000cf10:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000cf17:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000cf1e:	0f af c7             	imul   eax,edi
c000cf21:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000cf24:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cf27:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cf2a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cf2e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cf32:	68 00 00 70 3f       	push   0x3f700000
c000cf37:	6a 00                	push   0x0
c000cf39:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf3d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf41:	e8 61 bd 01 00       	call   c0028ca7 <__ltdf2>
c000cf46:	83 c4 10             	add    esp,0x10
c000cf49:	ba 16 00 00 00       	mov    edx,0x16
c000cf4e:	85 c0                	test   eax,eax
c000cf50:	0f 88 47 06 00 00    	js     c000d59d <sinc_stereo_vari_process+0x6bb>
c000cf56:	68 00 00 70 40       	push   0x40700000
c000cf5b:	6a 00                	push   0x0
c000cf5d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf61:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf65:	e8 1f bd 01 00       	call   c0028c89 <__gtdf2>
c000cf6a:	83 c4 10             	add    esp,0x10
c000cf6d:	ba 16 00 00 00       	mov    edx,0x16
c000cf72:	85 c0                	test   eax,eax
c000cf74:	0f 8f 23 06 00 00    	jg     c000d59d <sinc_stereo_vari_process+0x6bb>
c000cf7a:	83 ec 0c             	sub    esp,0xc
c000cf7d:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000cf80:	e8 b6 ba 01 00       	call   c0028a3b <__floatsidf>
c000cf85:	83 c4 10             	add    esp,0x10
c000cf88:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cf8c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cf90:	68 00 00 00 40       	push   0x40000000
c000cf95:	6a 00                	push   0x0
c000cf97:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf9b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf9f:	e8 b7 ad 01 00       	call   c0027d5b <__adddf3>
c000cfa4:	59                   	pop    ecx
c000cfa5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cfa9:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000cfad:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cfb0:	e8 86 ba 01 00       	call   c0028a3b <__floatsidf>
c000cfb5:	83 c4 10             	add    esp,0x10
c000cfb8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cfbc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cfc0:	52                   	push   edx
c000cfc1:	50                   	push   eax
c000cfc2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfc6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfca:	e8 ed b6 01 00       	call   c00286bc <__divdf3>
c000cfcf:	83 c4 10             	add    esp,0x10
c000cfd2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cfd6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cfda:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000cfdd:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000cfe0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cfe4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cfe8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfec:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cff0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cff4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cff8:	e8 8c bc 01 00       	call   c0028c89 <__gtdf2>
c000cffd:	83 c4 10             	add    esp,0x10
c000d000:	85 c0                	test   eax,eax
c000d002:	7e 2d                	jle    c000d031 <sinc_stereo_vari_process+0x14f>
c000d004:	68 00 00 f0 3f       	push   0x3ff00000
c000d009:	6a 00                	push   0x0
c000d00b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d00f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d013:	e8 8f bc 01 00       	call   c0028ca7 <__ltdf2>
c000d018:	83 c4 10             	add    esp,0x10
c000d01b:	85 c0                	test   eax,eax
c000d01d:	79 4d                	jns    c000d06c <sinc_stereo_vari_process+0x18a>
c000d01f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d023:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d027:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d02b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d02f:	eb 1b                	jmp    c000d04c <sinc_stereo_vari_process+0x16a>
c000d031:	68 00 00 f0 3f       	push   0x3ff00000
c000d036:	6a 00                	push   0x0
c000d038:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d03c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d040:	e8 62 bc 01 00       	call   c0028ca7 <__ltdf2>
c000d045:	83 c4 10             	add    esp,0x10
c000d048:	85 c0                	test   eax,eax
c000d04a:	79 20                	jns    c000d06c <sinc_stereo_vari_process+0x18a>
c000d04c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d050:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d054:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d058:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d05c:	e8 5b b6 01 00       	call   c00286bc <__divdf3>
c000d061:	83 c4 10             	add    esp,0x10
c000d064:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d068:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d06c:	50                   	push   eax
c000d06d:	50                   	push   eax
c000d06e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d072:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d076:	e8 e5 bd 01 00       	call   c0028e60 <lrint>
c000d07b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000d07e:	40                   	inc    eax
c000d07f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d083:	0f af c7             	imul   eax,edi
c000d086:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000d08a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d08d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d091:	58                   	pop    eax
c000d092:	5a                   	pop    edx
c000d093:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d097:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d09b:	e8 c0 bd 01 00       	call   c0028e60 <lrint>
c000d0a0:	83 ec 0c             	sub    esp,0xc
c000d0a3:	50                   	push   eax
c000d0a4:	e8 92 b9 01 00       	call   c0028a3b <__floatsidf>
c000d0a9:	83 c4 10             	add    esp,0x10
c000d0ac:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d0b0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d0b4:	52                   	push   edx
c000d0b5:	50                   	push   eax
c000d0b6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0ba:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0be:	e8 e9 b2 01 00       	call   c00283ac <__subdf3>
c000d0c3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d0c7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d0cb:	83 c4 20             	add    esp,0x20
c000d0ce:	6a 00                	push   0x0
c000d0d0:	6a 00                	push   0x0
c000d0d2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0d6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0da:	e8 c8 bb 01 00       	call   c0028ca7 <__ltdf2>
c000d0df:	83 c4 10             	add    esp,0x10
c000d0e2:	85 c0                	test   eax,eax
c000d0e4:	79 1f                	jns    c000d105 <sinc_stereo_vari_process+0x223>
c000d0e6:	68 00 00 f0 3f       	push   0x3ff00000
c000d0eb:	6a 00                	push   0x0
c000d0ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0f5:	e8 61 ac 01 00       	call   c0027d5b <__adddf3>
c000d0fa:	83 c4 10             	add    esp,0x10
c000d0fd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d101:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d105:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d108:	83 ec 10             	sub    esp,0x10
c000d10b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d10f:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d112:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d116:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d11a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d11e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d122:	e8 85 b2 01 00       	call   c00283ac <__subdf3>
c000d127:	83 c4 18             	add    esp,0x18
c000d12a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d12e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d132:	52                   	push   edx
c000d133:	50                   	push   eax
c000d134:	e8 27 bd 01 00       	call   c0028e60 <lrint>
c000d139:	0f af f8             	imul   edi,eax
c000d13c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d140:	01 f8                	add    eax,edi
c000d142:	99                   	cdq    
c000d143:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d146:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d149:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d14d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d151:	68 00 00 f0 3f       	push   0x3ff00000
c000d156:	6a 00                	push   0x0
c000d158:	e8 5f b5 01 00       	call   c00286bc <__divdf3>
c000d15d:	83 c4 10             	add    esp,0x10
c000d160:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d164:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d168:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d16d:	68 23 42 92 0c       	push   0xc924223
c000d172:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d176:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d17a:	e8 dc ab 01 00       	call   c0027d5b <__adddf3>
c000d17f:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000d183:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000d187:	83 c4 20             	add    esp,0x20
c000d18a:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000d192:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000d19a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d19d:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d1a0:	7d 50                	jge    c000d1f2 <sinc_stereo_vari_process+0x310>
c000d1a2:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d1a5:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d1a8:	01 c8                	add    eax,ecx
c000d1aa:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d1ad:	99                   	cdq    
c000d1ae:	f7 f9                	idiv   ecx
c000d1b0:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d1b4:	7d 0c                	jge    c000d1c2 <sinc_stereo_vari_process+0x2e0>
c000d1b6:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d1b9:	85 ff                	test   edi,edi
c000d1bb:	79 6c                	jns    c000d229 <sinc_stereo_vari_process+0x347>
c000d1bd:	e9 e7 00 00 00       	jmp    c000d2a9 <sinc_stereo_vari_process+0x3c7>
c000d1c2:	50                   	push   eax
c000d1c3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d1c7:	56                   	push   esi
c000d1c8:	53                   	push   ebx
c000d1c9:	e8 4c e7 ff ff       	call   c000b91a <prepare_data>
c000d1ce:	83 c4 10             	add    esp,0x10
c000d1d1:	89 c2                	mov    edx,eax
c000d1d3:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000d1d6:	85 c0                	test   eax,eax
c000d1d8:	0f 85 bf 03 00 00    	jne    c000d59d <sinc_stereo_vari_process+0x6bb>
c000d1de:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d1e1:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d1e4:	01 c8                	add    eax,ecx
c000d1e6:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d1e9:	99                   	cdq    
c000d1ea:	f7 f9                	idiv   ecx
c000d1ec:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d1f0:	7c c4                	jl     c000d1b6 <sinc_stereo_vari_process+0x2d4>
c000d1f2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d1f6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d1fa:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000d1fd:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000d200:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d204:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d208:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000d20b:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000d20e:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d211:	99                   	cdq    
c000d212:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d215:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d218:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d21b:	99                   	cdq    
c000d21c:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d21f:	31 d2                	xor    edx,edx
c000d221:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d224:	e9 74 03 00 00       	jmp    c000d59d <sinc_stereo_vari_process+0x6bb>
c000d229:	83 ec 0c             	sub    esp,0xc
c000d22c:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d22f:	e8 07 b8 01 00       	call   c0028a3b <__floatsidf>
c000d234:	83 c4 10             	add    esp,0x10
c000d237:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d23b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d23f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d243:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d247:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d24b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d24f:	e8 07 ab 01 00       	call   c0027d5b <__adddf3>
c000d254:	83 c4 10             	add    esp,0x10
c000d257:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d25b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d25f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d263:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d267:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d26b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d26f:	e8 e7 aa 01 00       	call   c0027d5b <__adddf3>
c000d274:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d277:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d27b:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d27f:	e8 b7 b7 01 00       	call   c0028a3b <__floatsidf>
c000d284:	83 c4 10             	add    esp,0x10
c000d287:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d28b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d28f:	52                   	push   edx
c000d290:	50                   	push   eax
c000d291:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d295:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d299:	e8 07 ba 01 00       	call   c0028ca5 <__gedf2>
c000d29e:	83 c4 10             	add    esp,0x10
c000d2a1:	85 c0                	test   eax,eax
c000d2a3:	0f 89 49 ff ff ff    	jns    c000d1f2 <sinc_stereo_vari_process+0x310>
c000d2a9:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d2ad:	0f 8e ef 00 00 00    	jle    c000d3a2 <sinc_stereo_vari_process+0x4c0>
c000d2b3:	83 ec 10             	sub    esp,0x10
c000d2b6:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d2b9:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d2bc:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d2bf:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d2c2:	e8 e5 b0 01 00       	call   c00283ac <__subdf3>
c000d2c7:	83 c4 18             	add    esp,0x18
c000d2ca:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d2ce:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d2d2:	52                   	push   edx
c000d2d3:	50                   	push   eax
c000d2d4:	e8 67 bb 01 00       	call   c0028e40 <fabs>
c000d2d9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d2dd:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d2e1:	83 c4 10             	add    esp,0x10
c000d2e4:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d2e9:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d2ee:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2f2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2f6:	e8 8e b9 01 00       	call   c0028c89 <__gtdf2>
c000d2fb:	83 c4 10             	add    esp,0x10
c000d2fe:	85 c0                	test   eax,eax
c000d300:	0f 8e 9c 00 00 00    	jle    c000d3a2 <sinc_stereo_vari_process+0x4c0>
c000d306:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d309:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d30c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d310:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d314:	52                   	push   edx
c000d315:	50                   	push   eax
c000d316:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d319:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d31c:	e8 8b b0 01 00       	call   c00283ac <__subdf3>
c000d321:	59                   	pop    ecx
c000d322:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d326:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d32a:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d32d:	e8 09 b7 01 00       	call   c0028a3b <__floatsidf>
c000d332:	83 c4 10             	add    esp,0x10
c000d335:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d339:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d33d:	52                   	push   edx
c000d33e:	50                   	push   eax
c000d33f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d343:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d347:	e8 8c b0 01 00       	call   c00283d8 <__muldf3>
c000d34c:	5f                   	pop    edi
c000d34d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d351:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d355:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d358:	e8 de b6 01 00       	call   c0028a3b <__floatsidf>
c000d35d:	83 c4 10             	add    esp,0x10
c000d360:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d364:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d368:	52                   	push   edx
c000d369:	50                   	push   eax
c000d36a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d36e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d372:	e8 45 b3 01 00       	call   c00286bc <__divdf3>
c000d377:	83 c4 10             	add    esp,0x10
c000d37a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d37e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d382:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d386:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d38a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d38e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d392:	e8 c4 a9 01 00       	call   c0027d5b <__adddf3>
c000d397:	83 c4 10             	add    esp,0x10
c000d39a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d39e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d3a2:	83 ec 0c             	sub    esp,0xc
c000d3a5:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d3a8:	e8 8e b6 01 00       	call   c0028a3b <__floatsidf>
c000d3ad:	83 c4 10             	add    esp,0x10
c000d3b0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d3b4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d3b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3c8:	e8 da b8 01 00       	call   c0028ca7 <__ltdf2>
c000d3cd:	83 c4 10             	add    esp,0x10
c000d3d0:	85 c0                	test   eax,eax
c000d3d2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d3d6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d3da:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000d3de:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000d3e2:	78 10                	js     c000d3f4 <sinc_stereo_vari_process+0x512>
c000d3e4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d3e8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d3ec:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d3f0:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d3f4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3f8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3fc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d400:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d404:	e8 cf af 01 00       	call   c00283d8 <__muldf3>
c000d409:	59                   	pop    ecx
c000d40a:	5f                   	pop    edi
c000d40b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d40f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d413:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d417:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d41b:	e8 d3 e4 ff ff       	call   c000b8f3 <double_to_fp>
c000d420:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d424:	89 c7                	mov    edi,eax
c000d426:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d42a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d42e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d432:	e8 a1 af 01 00       	call   c00283d8 <__muldf3>
c000d437:	83 c4 18             	add    esp,0x18
c000d43a:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d43e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d442:	52                   	push   edx
c000d443:	50                   	push   eax
c000d444:	e8 aa e4 ff ff       	call   c000b8f3 <double_to_fp>
c000d449:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000d44c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000d450:	83 c4 0c             	add    esp,0xc
c000d453:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000d456:	8d 04 90             	lea    eax,[eax+edx*4]
c000d459:	50                   	push   eax
c000d45a:	50                   	push   eax
c000d45b:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d45e:	e8 d8 b5 01 00       	call   c0028a3b <__floatsidf>
c000d463:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d467:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d46b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d46f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d473:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d477:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d47b:	e8 3c b2 01 00       	call   c00286bc <__divdf3>
c000d480:	83 c4 18             	add    esp,0x18
c000d483:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d487:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d48b:	52                   	push   edx
c000d48c:	89 fa                	mov    edx,edi
c000d48e:	50                   	push   eax
c000d48f:	89 d8                	mov    eax,ebx
c000d491:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000d495:	e8 02 c7 ff ff       	call   c0009b9c <calc_output_stereo>
c000d49a:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000d49e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d4a2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d4a6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d4aa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d4ae:	e8 09 b2 01 00       	call   c00286bc <__divdf3>
c000d4b3:	83 c4 10             	add    esp,0x10
c000d4b6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d4ba:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d4be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4c6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4ca:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4ce:	e8 88 a8 01 00       	call   c0027d5b <__adddf3>
c000d4d3:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d4d7:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d4db:	83 c4 18             	add    esp,0x18
c000d4de:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d4e2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d4e6:	e8 75 b9 01 00       	call   c0028e60 <lrint>
c000d4eb:	83 ec 0c             	sub    esp,0xc
c000d4ee:	50                   	push   eax
c000d4ef:	e8 47 b5 01 00       	call   c0028a3b <__floatsidf>
c000d4f4:	83 c4 10             	add    esp,0x10
c000d4f7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d4fb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d4ff:	52                   	push   edx
c000d500:	50                   	push   eax
c000d501:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d505:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d509:	e8 9e ae 01 00       	call   c00283ac <__subdf3>
c000d50e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d512:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d516:	83 c4 20             	add    esp,0x20
c000d519:	6a 00                	push   0x0
c000d51b:	6a 00                	push   0x0
c000d51d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d521:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d525:	e8 7d b7 01 00       	call   c0028ca7 <__ltdf2>
c000d52a:	83 c4 10             	add    esp,0x10
c000d52d:	85 c0                	test   eax,eax
c000d52f:	79 20                	jns    c000d551 <sinc_stereo_vari_process+0x66f>
c000d531:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d535:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d539:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d53d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d541:	e8 15 a8 01 00       	call   c0027d5b <__adddf3>
c000d546:	83 c4 10             	add    esp,0x10
c000d549:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d54d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d551:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d554:	83 ec 10             	sub    esp,0x10
c000d557:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d55b:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d55e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d562:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d566:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d56a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d56e:	e8 39 ae 01 00       	call   c00283ac <__subdf3>
c000d573:	83 c4 18             	add    esp,0x18
c000d576:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d57a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d57e:	52                   	push   edx
c000d57f:	50                   	push   eax
c000d580:	e8 db b8 01 00       	call   c0028e60 <lrint>
c000d585:	0f af f8             	imul   edi,eax
c000d588:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d58c:	83 c4 10             	add    esp,0x10
c000d58f:	01 f8                	add    eax,edi
c000d591:	99                   	cdq    
c000d592:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d595:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d598:	e9 fd fb ff ff       	jmp    c000d19a <sinc_stereo_vari_process+0x2b8>
c000d59d:	83 c4 4c             	add    esp,0x4c
c000d5a0:	89 d0                	mov    eax,edx
c000d5a2:	5b                   	pop    ebx
c000d5a3:	5e                   	pop    esi
c000d5a4:	5f                   	pop    edi
c000d5a5:	5d                   	pop    ebp
c000d5a6:	c3                   	ret    

c000d5a7 <sinc_mono_vari_process>:
c000d5a7:	55                   	push   ebp
c000d5a8:	ba 05 00 00 00       	mov    edx,0x5
c000d5ad:	57                   	push   edi
c000d5ae:	56                   	push   esi
c000d5af:	53                   	push   ebx
c000d5b0:	83 ec 4c             	sub    esp,0x4c
c000d5b3:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d5b7:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000d5bb:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000d5be:	85 db                	test   ebx,ebx
c000d5c0:	0f 84 c1 06 00 00    	je     c000dc87 <sinc_mono_vari_process+0x6e0>
c000d5c6:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000d5c9:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d5cc:	0f af c7             	imul   eax,edi
c000d5cf:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000d5d2:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000d5d5:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000d5dc:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000d5e3:	0f af c7             	imul   eax,edi
c000d5e6:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000d5e9:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d5ed:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d5f0:	8b 00                	mov    eax,DWORD PTR [eax]
c000d5f2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d5f6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d5fa:	68 00 00 70 3f       	push   0x3f700000
c000d5ff:	6a 00                	push   0x0
c000d601:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d605:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d609:	e8 99 b6 01 00       	call   c0028ca7 <__ltdf2>
c000d60e:	83 c4 10             	add    esp,0x10
c000d611:	ba 16 00 00 00       	mov    edx,0x16
c000d616:	85 c0                	test   eax,eax
c000d618:	0f 88 69 06 00 00    	js     c000dc87 <sinc_mono_vari_process+0x6e0>
c000d61e:	68 00 00 70 40       	push   0x40700000
c000d623:	6a 00                	push   0x0
c000d625:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d629:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d62d:	e8 57 b6 01 00       	call   c0028c89 <__gtdf2>
c000d632:	83 c4 10             	add    esp,0x10
c000d635:	ba 16 00 00 00       	mov    edx,0x16
c000d63a:	85 c0                	test   eax,eax
c000d63c:	0f 8f 45 06 00 00    	jg     c000dc87 <sinc_mono_vari_process+0x6e0>
c000d642:	83 ec 0c             	sub    esp,0xc
c000d645:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000d648:	e8 ee b3 01 00       	call   c0028a3b <__floatsidf>
c000d64d:	83 c4 10             	add    esp,0x10
c000d650:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d654:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d658:	68 00 00 00 40       	push   0x40000000
c000d65d:	6a 00                	push   0x0
c000d65f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d663:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d667:	e8 ef a6 01 00       	call   c0027d5b <__adddf3>
c000d66c:	59                   	pop    ecx
c000d66d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d671:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d675:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d678:	e8 be b3 01 00       	call   c0028a3b <__floatsidf>
c000d67d:	83 c4 10             	add    esp,0x10
c000d680:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d684:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d688:	52                   	push   edx
c000d689:	50                   	push   eax
c000d68a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d68e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d692:	e8 25 b0 01 00       	call   c00286bc <__divdf3>
c000d697:	83 c4 10             	add    esp,0x10
c000d69a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d69e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d6a2:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000d6a5:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000d6a8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d6ac:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d6b0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6b4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6b8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6bc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6c0:	e8 c4 b5 01 00       	call   c0028c89 <__gtdf2>
c000d6c5:	83 c4 10             	add    esp,0x10
c000d6c8:	85 c0                	test   eax,eax
c000d6ca:	7e 2d                	jle    c000d6f9 <sinc_mono_vari_process+0x152>
c000d6cc:	68 00 00 f0 3f       	push   0x3ff00000
c000d6d1:	6a 00                	push   0x0
c000d6d3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d6d7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d6db:	e8 c7 b5 01 00       	call   c0028ca7 <__ltdf2>
c000d6e0:	83 c4 10             	add    esp,0x10
c000d6e3:	85 c0                	test   eax,eax
c000d6e5:	79 4d                	jns    c000d734 <sinc_mono_vari_process+0x18d>
c000d6e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6eb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d6ef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d6f3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d6f7:	eb 1b                	jmp    c000d714 <sinc_mono_vari_process+0x16d>
c000d6f9:	68 00 00 f0 3f       	push   0x3ff00000
c000d6fe:	6a 00                	push   0x0
c000d700:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d704:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d708:	e8 9a b5 01 00       	call   c0028ca7 <__ltdf2>
c000d70d:	83 c4 10             	add    esp,0x10
c000d710:	85 c0                	test   eax,eax
c000d712:	79 20                	jns    c000d734 <sinc_mono_vari_process+0x18d>
c000d714:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d718:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d71c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d720:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d724:	e8 93 af 01 00       	call   c00286bc <__divdf3>
c000d729:	83 c4 10             	add    esp,0x10
c000d72c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d730:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d734:	50                   	push   eax
c000d735:	50                   	push   eax
c000d736:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d73a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d73e:	e8 1d b7 01 00       	call   c0028e60 <lrint>
c000d743:	40                   	inc    eax
c000d744:	0f af c7             	imul   eax,edi
c000d747:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d74b:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d74f:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000d752:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d755:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d759:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d75d:	58                   	pop    eax
c000d75e:	5a                   	pop    edx
c000d75f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d763:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d767:	e8 f4 b6 01 00       	call   c0028e60 <lrint>
c000d76c:	83 ec 0c             	sub    esp,0xc
c000d76f:	50                   	push   eax
c000d770:	e8 c6 b2 01 00       	call   c0028a3b <__floatsidf>
c000d775:	83 c4 10             	add    esp,0x10
c000d778:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d77c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d780:	52                   	push   edx
c000d781:	50                   	push   eax
c000d782:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d786:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d78a:	e8 1d ac 01 00       	call   c00283ac <__subdf3>
c000d78f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d793:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d797:	83 c4 20             	add    esp,0x20
c000d79a:	6a 00                	push   0x0
c000d79c:	6a 00                	push   0x0
c000d79e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d7a2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d7a6:	e8 fc b4 01 00       	call   c0028ca7 <__ltdf2>
c000d7ab:	83 c4 10             	add    esp,0x10
c000d7ae:	85 c0                	test   eax,eax
c000d7b0:	79 1f                	jns    c000d7d1 <sinc_mono_vari_process+0x22a>
c000d7b2:	68 00 00 f0 3f       	push   0x3ff00000
c000d7b7:	6a 00                	push   0x0
c000d7b9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d7bd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d7c1:	e8 95 a5 01 00       	call   c0027d5b <__adddf3>
c000d7c6:	83 c4 10             	add    esp,0x10
c000d7c9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d7cd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d7d1:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000d7d4:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d7d7:	83 ec 10             	sub    esp,0x10
c000d7da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7e2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7e6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7ea:	e8 bd ab 01 00       	call   c00283ac <__subdf3>
c000d7ef:	83 c4 18             	add    esp,0x18
c000d7f2:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d7f6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d7fa:	52                   	push   edx
c000d7fb:	50                   	push   eax
c000d7fc:	e8 5f b6 01 00       	call   c0028e60 <lrint>
c000d801:	0f af f8             	imul   edi,eax
c000d804:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000d807:	31 ff                	xor    edi,edi
c000d809:	bd 00 00 f0 3f       	mov    ebp,0x3ff00000
c000d80e:	99                   	cdq    
c000d80f:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d812:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d815:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d819:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d81d:	55                   	push   ebp
c000d81e:	57                   	push   edi
c000d81f:	e8 98 ae 01 00       	call   c00286bc <__divdf3>
c000d824:	83 c4 10             	add    esp,0x10
c000d827:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d82b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d82f:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d834:	68 23 42 92 0c       	push   0xc924223
c000d839:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d83d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d841:	e8 15 a5 01 00       	call   c0027d5b <__adddf3>
c000d846:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000d84a:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000d84e:	83 c4 20             	add    esp,0x20
c000d851:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000d855:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000d859:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d85c:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d85f:	7d 54                	jge    c000d8b5 <sinc_mono_vari_process+0x30e>
c000d861:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d864:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d867:	01 c8                	add    eax,ecx
c000d869:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d86c:	99                   	cdq    
c000d86d:	f7 f9                	idiv   ecx
c000d86f:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d873:	7d 0c                	jge    c000d881 <sinc_mono_vari_process+0x2da>
c000d875:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d878:	85 ff                	test   edi,edi
c000d87a:	79 73                	jns    c000d8ef <sinc_mono_vari_process+0x348>
c000d87c:	e9 ee 00 00 00       	jmp    c000d96f <sinc_mono_vari_process+0x3c8>
c000d881:	50                   	push   eax
c000d882:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d886:	56                   	push   esi
c000d887:	53                   	push   ebx
c000d888:	e8 8d e0 ff ff       	call   c000b91a <prepare_data>
c000d88d:	89 c2                	mov    edx,eax
c000d88f:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d893:	83 c4 10             	add    esp,0x10
c000d896:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000d899:	85 d2                	test   edx,edx
c000d89b:	0f 85 e6 03 00 00    	jne    c000dc87 <sinc_mono_vari_process+0x6e0>
c000d8a1:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d8a4:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d8a7:	01 c8                	add    eax,ecx
c000d8a9:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d8ac:	99                   	cdq    
c000d8ad:	f7 f9                	idiv   ecx
c000d8af:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d8b3:	7c c0                	jl     c000d875 <sinc_mono_vari_process+0x2ce>
c000d8b5:	8b 4c 24 60          	mov    ecx,DWORD PTR [esp+0x60]
c000d8b9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d8bd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d8c1:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000d8c4:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c000d8c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d8cb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d8cf:	89 01                	mov    DWORD PTR [ecx],eax
c000d8d1:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000d8d4:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d8d7:	99                   	cdq    
c000d8d8:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d8db:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d8de:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d8e1:	99                   	cdq    
c000d8e2:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d8e5:	31 d2                	xor    edx,edx
c000d8e7:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d8ea:	e9 98 03 00 00       	jmp    c000dc87 <sinc_mono_vari_process+0x6e0>
c000d8ef:	83 ec 0c             	sub    esp,0xc
c000d8f2:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d8f5:	e8 41 b1 01 00       	call   c0028a3b <__floatsidf>
c000d8fa:	83 c4 10             	add    esp,0x10
c000d8fd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d901:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d905:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d909:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d90d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d911:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d915:	e8 41 a4 01 00       	call   c0027d5b <__adddf3>
c000d91a:	83 c4 10             	add    esp,0x10
c000d91d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d921:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d925:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d929:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d92d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d931:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d935:	e8 21 a4 01 00       	call   c0027d5b <__adddf3>
c000d93a:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d93d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d941:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d945:	e8 f1 b0 01 00       	call   c0028a3b <__floatsidf>
c000d94a:	83 c4 10             	add    esp,0x10
c000d94d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d951:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d955:	52                   	push   edx
c000d956:	50                   	push   eax
c000d957:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d95b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d95f:	e8 25 b3 01 00       	call   c0028c89 <__gtdf2>
c000d964:	83 c4 10             	add    esp,0x10
c000d967:	85 c0                	test   eax,eax
c000d969:	0f 8f 46 ff ff ff    	jg     c000d8b5 <sinc_mono_vari_process+0x30e>
c000d96f:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d973:	0f 8e f5 00 00 00    	jle    c000da6e <sinc_mono_vari_process+0x4c7>
c000d979:	83 ec 10             	sub    esp,0x10
c000d97c:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d97f:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d982:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000d986:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000d989:	ff 30                	push   DWORD PTR [eax]
c000d98b:	e8 1c aa 01 00       	call   c00283ac <__subdf3>
c000d990:	83 c4 18             	add    esp,0x18
c000d993:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d997:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d99b:	52                   	push   edx
c000d99c:	50                   	push   eax
c000d99d:	e8 9e b4 01 00       	call   c0028e40 <fabs>
c000d9a2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d9a6:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d9aa:	83 c4 10             	add    esp,0x10
c000d9ad:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d9b2:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d9b7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9bb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9bf:	e8 c5 b2 01 00       	call   c0028c89 <__gtdf2>
c000d9c4:	83 c4 10             	add    esp,0x10
c000d9c7:	85 c0                	test   eax,eax
c000d9c9:	0f 8e 9f 00 00 00    	jle    c000da6e <sinc_mono_vari_process+0x4c7>
c000d9cf:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d9d3:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d9d6:	8b 00                	mov    eax,DWORD PTR [eax]
c000d9d8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d9dc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d9e0:	52                   	push   edx
c000d9e1:	50                   	push   eax
c000d9e2:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d9e5:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d9e8:	e8 bf a9 01 00       	call   c00283ac <__subdf3>
c000d9ed:	5f                   	pop    edi
c000d9ee:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d9f2:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d9f6:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d9f9:	e8 3d b0 01 00       	call   c0028a3b <__floatsidf>
c000d9fe:	83 c4 10             	add    esp,0x10
c000da01:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da05:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da09:	52                   	push   edx
c000da0a:	50                   	push   eax
c000da0b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da0f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da13:	e8 c0 a9 01 00       	call   c00283d8 <__muldf3>
c000da18:	5d                   	pop    ebp
c000da19:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000da1d:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000da21:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000da24:	e8 12 b0 01 00       	call   c0028a3b <__floatsidf>
c000da29:	83 c4 10             	add    esp,0x10
c000da2c:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da30:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da34:	52                   	push   edx
c000da35:	50                   	push   eax
c000da36:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da3a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da3e:	e8 79 ac 01 00       	call   c00286bc <__divdf3>
c000da43:	83 c4 10             	add    esp,0x10
c000da46:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000da4a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000da4e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000da52:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000da56:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da5a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da5e:	e8 f8 a2 01 00       	call   c0027d5b <__adddf3>
c000da63:	83 c4 10             	add    esp,0x10
c000da66:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000da6a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000da6e:	83 ec 0c             	sub    esp,0xc
c000da71:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000da74:	e8 c2 af 01 00       	call   c0028a3b <__floatsidf>
c000da79:	83 c4 10             	add    esp,0x10
c000da7c:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da80:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da88:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da94:	e8 0e b2 01 00       	call   c0028ca7 <__ltdf2>
c000da99:	83 c4 10             	add    esp,0x10
c000da9c:	85 c0                	test   eax,eax
c000da9e:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000daa2:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000daa6:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c000daaa:	89 6c 24 2c          	mov    DWORD PTR [esp+0x2c],ebp
c000daae:	78 10                	js     c000dac0 <sinc_mono_vari_process+0x519>
c000dab0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000dab4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000dab8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000dabc:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000dac0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000dac4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000dac8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dacc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dad0:	e8 03 a9 01 00       	call   c00283d8 <__muldf3>
c000dad5:	59                   	pop    ecx
c000dad6:	5f                   	pop    edi
c000dad7:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dadb:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dadf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dae3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dae7:	e8 07 de ff ff       	call   c000b8f3 <double_to_fp>
c000daec:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000daf0:	89 c7                	mov    edi,eax
c000daf2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000daf6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dafa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dafe:	e8 d5 a8 01 00       	call   c00283d8 <__muldf3>
c000db03:	83 c4 18             	add    esp,0x18
c000db06:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db0a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000db0e:	52                   	push   edx
c000db0f:	50                   	push   eax
c000db10:	e8 de dd ff ff       	call   c000b8f3 <double_to_fp>
c000db15:	83 ec 0c             	sub    esp,0xc
c000db18:	89 c5                	mov    ebp,eax
c000db1a:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000db1d:	e8 19 af 01 00       	call   c0028a3b <__floatsidf>
c000db22:	83 c4 10             	add    esp,0x10
c000db25:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db29:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db2d:	52                   	push   edx
c000db2e:	50                   	push   eax
c000db2f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db33:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db37:	e8 80 ab 01 00       	call   c00286bc <__divdf3>
c000db3c:	83 c4 10             	add    esp,0x10
c000db3f:	89 e9                	mov    ecx,ebp
c000db41:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db45:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db49:	89 d8                	mov    eax,ebx
c000db4b:	89 fa                	mov    edx,edi
c000db4d:	e8 ee bd ff ff       	call   c0009940 <calc_output_single>
c000db52:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000db55:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c000db58:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000db5c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db60:	52                   	push   edx
c000db61:	50                   	push   eax
c000db62:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db66:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db6a:	e8 69 a8 01 00       	call   c00283d8 <__muldf3>
c000db6f:	59                   	pop    ecx
c000db70:	59                   	pop    ecx
c000db71:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db75:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db79:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db7d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db81:	e8 25 b1 01 00       	call   c0028cab <__truncdfsf2>
c000db86:	83 c4 10             	add    esp,0x10
c000db89:	89 04 af             	mov    DWORD PTR [edi+ebp*4],eax
c000db8c:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000db8f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db93:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db97:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db9b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db9f:	e8 18 ab 01 00       	call   c00286bc <__divdf3>
c000dba4:	83 c4 10             	add    esp,0x10
c000dba7:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000dbab:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000dbaf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbb3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbb7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbbb:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbbf:	e8 97 a1 01 00       	call   c0027d5b <__adddf3>
c000dbc4:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000dbc8:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000dbcc:	83 c4 18             	add    esp,0x18
c000dbcf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dbd3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dbd7:	e8 84 b2 01 00       	call   c0028e60 <lrint>
c000dbdc:	83 ec 0c             	sub    esp,0xc
c000dbdf:	50                   	push   eax
c000dbe0:	e8 56 ae 01 00       	call   c0028a3b <__floatsidf>
c000dbe5:	83 c4 10             	add    esp,0x10
c000dbe8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dbec:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dbf0:	52                   	push   edx
c000dbf1:	50                   	push   eax
c000dbf2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbf6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbfa:	e8 ad a7 01 00       	call   c00283ac <__subdf3>
c000dbff:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000dc03:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000dc07:	83 c4 20             	add    esp,0x20
c000dc0a:	6a 00                	push   0x0
c000dc0c:	6a 00                	push   0x0
c000dc0e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc12:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc16:	e8 8c b0 01 00       	call   c0028ca7 <__ltdf2>
c000dc1b:	83 c4 10             	add    esp,0x10
c000dc1e:	85 c0                	test   eax,eax
c000dc20:	79 20                	jns    c000dc42 <sinc_mono_vari_process+0x69b>
c000dc22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc2a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc2e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc32:	e8 24 a1 01 00       	call   c0027d5b <__adddf3>
c000dc37:	83 c4 10             	add    esp,0x10
c000dc3a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dc3e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dc42:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000dc45:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000dc48:	83 ec 10             	sub    esp,0x10
c000dc4b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc4f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc53:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dc57:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dc5b:	e8 4c a7 01 00       	call   c00283ac <__subdf3>
c000dc60:	83 c4 18             	add    esp,0x18
c000dc63:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dc67:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dc6b:	52                   	push   edx
c000dc6c:	50                   	push   eax
c000dc6d:	e8 ee b1 01 00       	call   c0028e60 <lrint>
c000dc72:	83 c4 10             	add    esp,0x10
c000dc75:	0f af f8             	imul   edi,eax
c000dc78:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000dc7b:	99                   	cdq    
c000dc7c:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000dc7f:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000dc82:	e9 d2 fb ff ff       	jmp    c000d859 <sinc_mono_vari_process+0x2b2>
c000dc87:	83 c4 4c             	add    esp,0x4c
c000dc8a:	89 d0                	mov    eax,edx
c000dc8c:	5b                   	pop    ebx
c000dc8d:	5e                   	pop    esi
c000dc8e:	5f                   	pop    edi
c000dc8f:	5d                   	pop    ebp
c000dc90:	c3                   	ret    

c000dc91 <sinc_get_name>:
c000dc91:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc95:	31 c0                	xor    eax,eax
c000dc97:	83 fa 02             	cmp    edx,0x2
c000dc9a:	77 07                	ja     c000dca3 <sinc_get_name+0x12>
c000dc9c:	8b 04 95 44 a7 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd58bc]
c000dca3:	c3                   	ret    

c000dca4 <sinc_get_description>:
c000dca4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dca8:	31 c0                	xor    eax,eax
c000dcaa:	83 fa 02             	cmp    edx,0x2
c000dcad:	77 07                	ja     c000dcb6 <sinc_get_description+0x12>
c000dcaf:	8b 04 95 38 a7 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd58c8]
c000dcb6:	c3                   	ret    

c000dcb7 <sinc_set_converter>:
c000dcb7:	53                   	push   ebx
c000dcb8:	81 ec 58 08 00 00    	sub    esp,0x858
c000dcbe:	8b 9c 24 60 08 00 00 	mov    ebx,DWORD PTR [esp+0x860]
c000dcc5:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000dcc8:	85 c0                	test   eax,eax
c000dcca:	74 13                	je     c000dcdf <sinc_set_converter+0x28>
c000dccc:	83 ec 0c             	sub    esp,0xc
c000dccf:	50                   	push   eax
c000dcd0:	e8 6d 1c 00 00       	call   c000f942 <free>
c000dcd5:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000dcdc:	83 c4 10             	add    esp,0x10
c000dcdf:	50                   	push   eax
c000dce0:	68 44 08 00 00       	push   0x844
c000dce5:	6a 00                	push   0x0
c000dce7:	8d 44 24 18          	lea    eax,[esp+0x18]
c000dceb:	50                   	push   eax
c000dcec:	e8 ab 2a ff ff       	call   c000079c <memset>
c000dcf1:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000dcf4:	83 c4 10             	add    esp,0x10
c000dcf7:	b8 0b 00 00 00       	mov    eax,0xb
c000dcfc:	81 fa 80 00 00 00    	cmp    edx,0x80
c000dd02:	7f 6e                	jg     c000dd72 <sinc_set_converter+0xbb>
c000dd04:	83 fa 01             	cmp    edx,0x1
c000dd07:	75 10                	jne    c000dd19 <sinc_set_converter+0x62>
c000dd09:	c7 43 24 a7 d5 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000d5a7
c000dd10:	c7 43 20 a7 d5 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000d5a7
c000dd17:	eb 4d                	jmp    c000dd66 <sinc_set_converter+0xaf>
c000dd19:	83 fa 02             	cmp    edx,0x2
c000dd1c:	75 10                	jne    c000dd2e <sinc_set_converter+0x77>
c000dd1e:	c7 43 24 e2 ce 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000cee2
c000dd25:	c7 43 20 e2 ce 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000cee2
c000dd2c:	eb 38                	jmp    c000dd66 <sinc_set_converter+0xaf>
c000dd2e:	83 fa 04             	cmp    edx,0x4
c000dd31:	75 10                	jne    c000dd43 <sinc_set_converter+0x8c>
c000dd33:	c7 43 24 1d c8 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c81d
c000dd3a:	c7 43 20 1d c8 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c81d
c000dd41:	eb 23                	jmp    c000dd66 <sinc_set_converter+0xaf>
c000dd43:	83 fa 06             	cmp    edx,0x6
c000dd46:	75 10                	jne    c000dd58 <sinc_set_converter+0xa1>
c000dd48:	c7 43 24 58 c1 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c158
c000dd4f:	c7 43 20 58 c1 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c158
c000dd56:	eb 0e                	jmp    c000dd66 <sinc_set_converter+0xaf>
c000dd58:	c7 43 24 94 ba 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000ba94
c000dd5f:	c7 43 20 94 ba 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000ba94
c000dd66:	c7 43 28 47 ad 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000ad47
c000dd6d:	b8 0a 00 00 00       	mov    eax,0xa
c000dd72:	81 c4 58 08 00 00    	add    esp,0x858
c000dd78:	5b                   	pop    ebx
c000dd79:	c3                   	ret    

c000dd7a <zoh_vari_process>:
c000dd7a:	55                   	push   ebp
c000dd7b:	31 d2                	xor    edx,edx
c000dd7d:	57                   	push   edi
c000dd7e:	56                   	push   esi
c000dd7f:	53                   	push   ebx
c000dd80:	83 ec 3c             	sub    esp,0x3c
c000dd83:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000dd87:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000dd8b:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000dd8f:	0f 8e 80 06 00 00    	jle    c000e415 <zoh_vari_process+0x69b>
c000dd95:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c000dd98:	ba 05 00 00 00       	mov    edx,0x5
c000dd9d:	85 db                	test   ebx,ebx
c000dd9f:	0f 84 70 06 00 00    	je     c000e415 <zoh_vari_process+0x69b>
c000dda5:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000dda8:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000ddac:	74 19                	je     c000ddc7 <zoh_vari_process+0x4d>
c000ddae:	31 d2                	xor    edx,edx
c000ddb0:	39 c2                	cmp    edx,eax
c000ddb2:	7d 0c                	jge    c000ddc0 <zoh_vari_process+0x46>
c000ddb4:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000ddb6:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000ddb9:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c000ddbd:	42                   	inc    edx
c000ddbe:	eb f0                	jmp    c000ddb0 <zoh_vari_process+0x36>
c000ddc0:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000ddc7:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000ddca:	0f af d0             	imul   edx,eax
c000ddcd:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000ddd0:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000ddd4:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000dddb:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000ddde:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000dde5:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000dde8:	8b 07                	mov    eax,DWORD PTR [edi]
c000ddea:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ddee:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ddf2:	68 00 00 70 3f       	push   0x3f700000
c000ddf7:	6a 00                	push   0x0
c000ddf9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddfd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de01:	e8 a1 ae 01 00       	call   c0028ca7 <__ltdf2>
c000de06:	83 c4 10             	add    esp,0x10
c000de09:	ba 16 00 00 00       	mov    edx,0x16
c000de0e:	85 c0                	test   eax,eax
c000de10:	0f 88 ff 05 00 00    	js     c000e415 <zoh_vari_process+0x69b>
c000de16:	68 00 00 70 40       	push   0x40700000
c000de1b:	6a 00                	push   0x0
c000de1d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de21:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de25:	e8 5f ae 01 00       	call   c0028c89 <__gtdf2>
c000de2a:	83 c4 10             	add    esp,0x10
c000de2d:	ba 16 00 00 00       	mov    edx,0x16
c000de32:	85 c0                	test   eax,eax
c000de34:	0f 8f db 05 00 00    	jg     c000e415 <zoh_vari_process+0x69b>
c000de3a:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000de3d:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c000de40:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000de44:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000de48:	68 00 00 f0 3f       	push   0x3ff00000
c000de4d:	6a 00                	push   0x0
c000de4f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de53:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de57:	e8 4b ae 01 00       	call   c0028ca7 <__ltdf2>
c000de5c:	83 c4 10             	add    esp,0x10
c000de5f:	85 c0                	test   eax,eax
c000de61:	0f 89 da 01 00 00    	jns    c000e041 <zoh_vari_process+0x2c7>
c000de67:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000de6a:	39 6b 18             	cmp    DWORD PTR [ebx+0x18],ebp
c000de6d:	0f 8d ce 01 00 00    	jge    c000e041 <zoh_vari_process+0x2c7>
c000de73:	83 ec 0c             	sub    esp,0xc
c000de76:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000de79:	e8 bd ab 01 00       	call   c0028a3b <__floatsidf>
c000de7e:	83 c4 10             	add    esp,0x10
c000de81:	89 04 24             	mov    DWORD PTR [esp],eax
c000de84:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000de88:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de8c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de90:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de94:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de98:	e8 3b a5 01 00       	call   c00283d8 <__muldf3>
c000de9d:	59                   	pop    ecx
c000de9e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dea2:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000dea6:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000dea9:	e8 8d ab 01 00       	call   c0028a3b <__floatsidf>
c000deae:	83 c4 10             	add    esp,0x10
c000deb1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000deb5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000deb9:	52                   	push   edx
c000deba:	50                   	push   eax
c000debb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000debf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dec3:	e8 93 9e 01 00       	call   c0027d5b <__adddf3>
c000dec8:	59                   	pop    ecx
c000dec9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000decd:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000ded1:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000ded4:	e8 62 ab 01 00       	call   c0028a3b <__floatsidf>
c000ded9:	83 c4 10             	add    esp,0x10
c000dedc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dee0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dee4:	52                   	push   edx
c000dee5:	50                   	push   eax
c000dee6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000deea:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000deee:	e8 b2 ad 01 00       	call   c0028ca5 <__gedf2>
c000def3:	83 c4 10             	add    esp,0x10
c000def6:	85 c0                	test   eax,eax
c000def8:	0f 89 43 01 00 00    	jns    c000e041 <zoh_vari_process+0x2c7>
c000defe:	85 ed                	test   ebp,ebp
c000df00:	0f 8e ec 00 00 00    	jle    c000dff2 <zoh_vari_process+0x278>
c000df06:	83 ec 10             	sub    esp,0x10
c000df09:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000df0c:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000df0f:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000df12:	ff 37                	push   DWORD PTR [edi]
c000df14:	e8 93 a4 01 00       	call   c00283ac <__subdf3>
c000df19:	83 c4 18             	add    esp,0x18
c000df1c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000df20:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000df24:	52                   	push   edx
c000df25:	50                   	push   eax
c000df26:	e8 15 af 01 00       	call   c0028e40 <fabs>
c000df2b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000df2f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000df33:	83 c4 10             	add    esp,0x10
c000df36:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000df3b:	68 23 42 92 0c       	push   0xc924223
c000df40:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000df44:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000df48:	e8 3c ad 01 00       	call   c0028c89 <__gtdf2>
c000df4d:	83 c4 10             	add    esp,0x10
c000df50:	85 c0                	test   eax,eax
c000df52:	0f 8e 9a 00 00 00    	jle    c000dff2 <zoh_vari_process+0x278>
c000df58:	8b 07                	mov    eax,DWORD PTR [edi]
c000df5a:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000df5d:	89 04 24             	mov    DWORD PTR [esp],eax
c000df60:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000df64:	52                   	push   edx
c000df65:	50                   	push   eax
c000df66:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000df69:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000df6c:	e8 3b a4 01 00       	call   c00283ac <__subdf3>
c000df71:	59                   	pop    ecx
c000df72:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df76:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df7a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000df7d:	e8 b9 aa 01 00       	call   c0028a3b <__floatsidf>
c000df82:	83 c4 10             	add    esp,0x10
c000df85:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df89:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df8d:	52                   	push   edx
c000df8e:	50                   	push   eax
c000df8f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df93:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df97:	e8 3c a4 01 00       	call   c00283d8 <__muldf3>
c000df9c:	5d                   	pop    ebp
c000df9d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000dfa1:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000dfa5:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000dfa8:	e8 8e aa 01 00       	call   c0028a3b <__floatsidf>
c000dfad:	83 c4 10             	add    esp,0x10
c000dfb0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dfb4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dfb8:	52                   	push   edx
c000dfb9:	50                   	push   eax
c000dfba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dfbe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dfc2:	e8 f5 a6 01 00       	call   c00286bc <__divdf3>
c000dfc7:	83 c4 10             	add    esp,0x10
c000dfca:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dfce:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dfd2:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dfd6:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dfda:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dfde:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dfe2:	e8 74 9d 01 00       	call   c0027d5b <__adddf3>
c000dfe7:	83 c4 10             	add    esp,0x10
c000dfea:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dfee:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dff2:	31 c0                	xor    eax,eax
c000dff4:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000dff7:	7e 13                	jle    c000e00c <zoh_vari_process+0x292>
c000dff9:	8b 6c 83 1c          	mov    ebp,DWORD PTR [ebx+eax*4+0x1c]
c000dffd:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000e000:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000e003:	40                   	inc    eax
c000e004:	89 2c 8a             	mov    DWORD PTR [edx+ecx*4],ebp
c000e007:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000e00a:	eb e8                	jmp    c000dff4 <zoh_vari_process+0x27a>
c000e00c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e010:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e014:	68 00 00 f0 3f       	push   0x3ff00000
c000e019:	6a 00                	push   0x0
c000e01b:	e8 9c a6 01 00       	call   c00286bc <__divdf3>
c000e020:	83 c4 10             	add    esp,0x10
c000e023:	89 04 24             	mov    DWORD PTR [esp],eax
c000e026:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e02a:	52                   	push   edx
c000e02b:	50                   	push   eax
c000e02c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e030:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e034:	e8 22 9d 01 00       	call   c0027d5b <__adddf3>
c000e039:	83 c4 10             	add    esp,0x10
c000e03c:	e9 ff fd ff ff       	jmp    c000de40 <zoh_vari_process+0xc6>
c000e041:	55                   	push   ebp
c000e042:	55                   	push   ebp
c000e043:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e047:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e04b:	e8 10 ae 01 00       	call   c0028e60 <lrint>
c000e050:	83 ec 0c             	sub    esp,0xc
c000e053:	50                   	push   eax
c000e054:	e8 e2 a9 01 00       	call   c0028a3b <__floatsidf>
c000e059:	83 c4 10             	add    esp,0x10
c000e05c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e060:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e064:	52                   	push   edx
c000e065:	50                   	push   eax
c000e066:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e06a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e06e:	e8 39 a3 01 00       	call   c00283ac <__subdf3>
c000e073:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e077:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e07b:	83 c4 20             	add    esp,0x20
c000e07e:	6a 00                	push   0x0
c000e080:	6a 00                	push   0x0
c000e082:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e086:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e08a:	e8 18 ac 01 00       	call   c0028ca7 <__ltdf2>
c000e08f:	83 c4 10             	add    esp,0x10
c000e092:	85 c0                	test   eax,eax
c000e094:	79 1e                	jns    c000e0b4 <zoh_vari_process+0x33a>
c000e096:	68 00 00 f0 3f       	push   0x3ff00000
c000e09b:	6a 00                	push   0x0
c000e09d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e0a1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e0a5:	e8 b1 9c 01 00       	call   c0027d5b <__adddf3>
c000e0aa:	83 c4 10             	add    esp,0x10
c000e0ad:	89 04 24             	mov    DWORD PTR [esp],eax
c000e0b0:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e0b4:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e0b7:	83 ec 10             	sub    esp,0x10
c000e0ba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e0be:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e0c2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0c6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0ca:	e8 dd a2 01 00       	call   c00283ac <__subdf3>
c000e0cf:	83 c4 18             	add    esp,0x18
c000e0d2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e0d6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e0da:	52                   	push   edx
c000e0db:	50                   	push   eax
c000e0dc:	e8 7f ad 01 00       	call   c0028e60 <lrint>
c000e0e1:	83 c4 10             	add    esp,0x10
c000e0e4:	0f af e8             	imul   ebp,eax
c000e0e7:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000e0ea:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000e0ed:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000e0f1:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e0f4:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000e0f7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e0fb:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000e0fe:	0f 8d 7a 02 00 00    	jge    c000e37e <zoh_vari_process+0x604>
c000e104:	83 ec 0c             	sub    esp,0xc
c000e107:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e10a:	e8 2c a9 01 00       	call   c0028a3b <__floatsidf>
c000e10f:	83 c4 10             	add    esp,0x10
c000e112:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e116:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e11a:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e11e:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e122:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e126:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e12a:	e8 a9 a2 01 00       	call   c00283d8 <__muldf3>
c000e12f:	59                   	pop    ecx
c000e130:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e134:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000e138:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e13c:	e8 fa a8 01 00       	call   c0028a3b <__floatsidf>
c000e141:	83 c4 10             	add    esp,0x10
c000e144:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e148:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e14c:	52                   	push   edx
c000e14d:	50                   	push   eax
c000e14e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e152:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e156:	e8 00 9c 01 00       	call   c0027d5b <__adddf3>
c000e15b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000e15e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e162:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e166:	e8 d0 a8 01 00       	call   c0028a3b <__floatsidf>
c000e16b:	83 c4 10             	add    esp,0x10
c000e16e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e172:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e176:	52                   	push   edx
c000e177:	50                   	push   eax
c000e178:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e17c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e180:	e8 24 ab 01 00       	call   c0028ca9 <__ledf2>
c000e185:	83 c4 10             	add    esp,0x10
c000e188:	85 c0                	test   eax,eax
c000e18a:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000e18e:	0f 8f ea 01 00 00    	jg     c000e37e <zoh_vari_process+0x604>
c000e194:	85 c9                	test   ecx,ecx
c000e196:	0f 8e ed 00 00 00    	jle    c000e289 <zoh_vari_process+0x50f>
c000e19c:	83 ec 10             	sub    esp,0x10
c000e19f:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e1a2:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e1a5:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000e1a8:	ff 37                	push   DWORD PTR [edi]
c000e1aa:	e8 fd a1 01 00       	call   c00283ac <__subdf3>
c000e1af:	83 c4 18             	add    esp,0x18
c000e1b2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e1b6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e1ba:	52                   	push   edx
c000e1bb:	50                   	push   eax
c000e1bc:	e8 7f ac 01 00       	call   c0028e40 <fabs>
c000e1c1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e1c5:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e1c9:	83 c4 10             	add    esp,0x10
c000e1cc:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000e1d1:	68 23 42 92 0c       	push   0xc924223
c000e1d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1de:	e8 a6 aa 01 00       	call   c0028c89 <__gtdf2>
c000e1e3:	83 c4 10             	add    esp,0x10
c000e1e6:	85 c0                	test   eax,eax
c000e1e8:	0f 8e 9b 00 00 00    	jle    c000e289 <zoh_vari_process+0x50f>
c000e1ee:	8b 07                	mov    eax,DWORD PTR [edi]
c000e1f0:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000e1f3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e1f7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e1fb:	52                   	push   edx
c000e1fc:	50                   	push   eax
c000e1fd:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e200:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e203:	e8 a4 a1 01 00       	call   c00283ac <__subdf3>
c000e208:	5d                   	pop    ebp
c000e209:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e20d:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e211:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000e214:	e8 22 a8 01 00       	call   c0028a3b <__floatsidf>
c000e219:	83 c4 10             	add    esp,0x10
c000e21c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e220:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e224:	52                   	push   edx
c000e225:	50                   	push   eax
c000e226:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e22a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e22e:	e8 a5 a1 01 00       	call   c00283d8 <__muldf3>
c000e233:	59                   	pop    ecx
c000e234:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e238:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e23c:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000e23f:	e8 f7 a7 01 00       	call   c0028a3b <__floatsidf>
c000e244:	83 c4 10             	add    esp,0x10
c000e247:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e24b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e24f:	52                   	push   edx
c000e250:	50                   	push   eax
c000e251:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e255:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e259:	e8 5e a4 01 00       	call   c00286bc <__divdf3>
c000e25e:	83 c4 10             	add    esp,0x10
c000e261:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e265:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e269:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e26d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e271:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e275:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e279:	e8 dd 9a 01 00       	call   c0027d5b <__adddf3>
c000e27e:	83 c4 10             	add    esp,0x10
c000e281:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e285:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e289:	31 d2                	xor    edx,edx
c000e28b:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000e28e:	39 d0                	cmp    eax,edx
c000e290:	7e 1d                	jle    c000e2af <zoh_vari_process+0x535>
c000e292:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000e295:	29 c1                	sub    ecx,eax
c000e297:	89 c8                	mov    eax,ecx
c000e299:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e29b:	01 d0                	add    eax,edx
c000e29d:	42                   	inc    edx
c000e29e:	8b 2c 81             	mov    ebp,DWORD PTR [ecx+eax*4]
c000e2a1:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000e2a4:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e2a7:	89 2c 88             	mov    DWORD PTR [eax+ecx*4],ebp
c000e2aa:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000e2ad:	eb dc                	jmp    c000e28b <zoh_vari_process+0x511>
c000e2af:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e2b3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e2b7:	68 00 00 f0 3f       	push   0x3ff00000
c000e2bc:	6a 00                	push   0x0
c000e2be:	e8 f9 a3 01 00       	call   c00286bc <__divdf3>
c000e2c3:	83 c4 10             	add    esp,0x10
c000e2c6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2ca:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e2ce:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e2d2:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e2d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2de:	e8 78 9a 01 00       	call   c0027d5b <__adddf3>
c000e2e3:	5d                   	pop    ebp
c000e2e4:	59                   	pop    ecx
c000e2e5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e2e9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e2ed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2f1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2f5:	e8 66 ab 01 00       	call   c0028e60 <lrint>
c000e2fa:	83 ec 0c             	sub    esp,0xc
c000e2fd:	50                   	push   eax
c000e2fe:	e8 38 a7 01 00       	call   c0028a3b <__floatsidf>
c000e303:	83 c4 10             	add    esp,0x10
c000e306:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e30a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e30e:	52                   	push   edx
c000e30f:	50                   	push   eax
c000e310:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e314:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e318:	e8 8f a0 01 00       	call   c00283ac <__subdf3>
c000e31d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e321:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e325:	83 c4 20             	add    esp,0x20
c000e328:	6a 00                	push   0x0
c000e32a:	6a 00                	push   0x0
c000e32c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e330:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e334:	e8 6e a9 01 00       	call   c0028ca7 <__ltdf2>
c000e339:	83 c4 10             	add    esp,0x10
c000e33c:	85 c0                	test   eax,eax
c000e33e:	79 1e                	jns    c000e35e <zoh_vari_process+0x5e4>
c000e340:	68 00 00 f0 3f       	push   0x3ff00000
c000e345:	6a 00                	push   0x0
c000e347:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e34b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e34f:	e8 07 9a 01 00       	call   c0027d5b <__adddf3>
c000e354:	83 c4 10             	add    esp,0x10
c000e357:	89 04 24             	mov    DWORD PTR [esp],eax
c000e35a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e35e:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e361:	83 ec 10             	sub    esp,0x10
c000e364:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e368:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e36c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e370:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e374:	e8 33 a0 01 00       	call   c00283ac <__subdf3>
c000e379:	e9 51 fd ff ff       	jmp    c000e0cf <zoh_vari_process+0x355>
c000e37e:	3b 6c 24 10          	cmp    ebp,DWORD PTR [esp+0x10]
c000e382:	7d 3a                	jge    c000e3be <zoh_vari_process+0x644>
c000e384:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e388:	83 ec 0c             	sub    esp,0xc
c000e38b:	29 e8                	sub    eax,ebp
c000e38d:	99                   	cdq    
c000e38e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e391:	50                   	push   eax
c000e392:	e8 a4 a6 01 00       	call   c0028a3b <__floatsidf>
c000e397:	83 c4 10             	add    esp,0x10
c000e39a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e39e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e3a2:	52                   	push   edx
c000e3a3:	50                   	push   eax
c000e3a4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e3a8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e3ac:	e8 aa 99 01 00       	call   c0027d5b <__adddf3>
c000e3b1:	83 c4 10             	add    esp,0x10
c000e3b4:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000e3b7:	89 04 24             	mov    DWORD PTR [esp],eax
c000e3ba:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e3be:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000e3c1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e3c5:	89 47 08             	mov    DWORD PTR [edi+0x8],eax
c000e3c8:	89 57 0c             	mov    DWORD PTR [edi+0xc],edx
c000e3cb:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e3ce:	85 c0                	test   eax,eax
c000e3d0:	7f 25                	jg     c000e3f7 <zoh_vari_process+0x67d>
c000e3d2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e3d6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e3da:	89 07                	mov    DWORD PTR [edi],eax
c000e3dc:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c000e3df:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e3e2:	99                   	cdq    
c000e3e3:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e3e6:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000e3e9:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000e3ec:	99                   	cdq    
c000e3ed:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e3f0:	31 d2                	xor    edx,edx
c000e3f2:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000e3f5:	eb 1e                	jmp    c000e415 <zoh_vari_process+0x69b>
c000e3f7:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c000e3fa:	31 d2                	xor    edx,edx
c000e3fc:	29 c8                	sub    eax,ecx
c000e3fe:	c1 e0 02             	shl    eax,0x2
c000e401:	39 d1                	cmp    ecx,edx
c000e403:	7e cd                	jle    c000e3d2 <zoh_vari_process+0x658>
c000e405:	8b 2e                	mov    ebp,DWORD PTR [esi]
c000e407:	8b 6c 05 00          	mov    ebp,DWORD PTR [ebp+eax*1+0x0]
c000e40b:	83 c0 04             	add    eax,0x4
c000e40e:	89 6c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ebp
c000e412:	42                   	inc    edx
c000e413:	eb ec                	jmp    c000e401 <zoh_vari_process+0x687>
c000e415:	83 c4 3c             	add    esp,0x3c
c000e418:	89 d0                	mov    eax,edx
c000e41a:	5b                   	pop    ebx
c000e41b:	5e                   	pop    esi
c000e41c:	5f                   	pop    edi
c000e41d:	5d                   	pop    ebp
c000e41e:	c3                   	ret    

c000e41f <zoh_reset>:
c000e41f:	83 ec 0c             	sub    esp,0xc
c000e422:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e426:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000e429:	85 c0                	test   eax,eax
c000e42b:	74 20                	je     c000e44d <zoh_reset+0x2e>
c000e42d:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000e430:	83 c0 1c             	add    eax,0x1c
c000e433:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000e436:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000e43d:	c1 e2 02             	shl    edx,0x2
c000e440:	51                   	push   ecx
c000e441:	52                   	push   edx
c000e442:	6a 00                	push   0x0
c000e444:	50                   	push   eax
c000e445:	e8 52 23 ff ff       	call   c000079c <memset>
c000e44a:	83 c4 10             	add    esp,0x10
c000e44d:	83 c4 0c             	add    esp,0xc
c000e450:	c3                   	ret    

c000e451 <zoh_get_name>:
c000e451:	31 c0                	xor    eax,eax
c000e453:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e458:	75 05                	jne    c000e45f <zoh_get_name+0xe>
c000e45a:	b8 5e a8 02 c0       	mov    eax,0xc002a85e
c000e45f:	c3                   	ret    

c000e460 <zoh_get_description>:
c000e460:	31 c0                	xor    eax,eax
c000e462:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e467:	75 05                	jne    c000e46e <zoh_get_description+0xe>
c000e469:	b8 6f a8 02 c0       	mov    eax,0xc002a86f
c000e46e:	c3                   	ret    

c000e46f <zoh_set_converter>:
c000e46f:	53                   	push   ebx
c000e470:	b8 0a 00 00 00       	mov    eax,0xa
c000e475:	83 ec 08             	sub    esp,0x8
c000e478:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e47c:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000e481:	75 6e                	jne    c000e4f1 <zoh_set_converter+0x82>
c000e483:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000e486:	85 c0                	test   eax,eax
c000e488:	74 13                	je     c000e49d <zoh_set_converter+0x2e>
c000e48a:	83 ec 0c             	sub    esp,0xc
c000e48d:	50                   	push   eax
c000e48e:	e8 af 14 00 00       	call   c000f942 <free>
c000e493:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e49a:	83 c4 10             	add    esp,0x10
c000e49d:	50                   	push   eax
c000e49e:	50                   	push   eax
c000e49f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e4a2:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000e4a9:	50                   	push   eax
c000e4aa:	6a 01                	push   0x1
c000e4ac:	e8 b1 14 00 00       	call   c000f962 <calloc>
c000e4b1:	83 c4 10             	add    esp,0x10
c000e4b4:	89 c2                	mov    edx,eax
c000e4b6:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000e4b9:	85 d2                	test   edx,edx
c000e4bb:	b8 01 00 00 00       	mov    eax,0x1
c000e4c0:	74 2f                	je     c000e4f1 <zoh_set_converter+0x82>
c000e4c2:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e4c5:	83 ec 0c             	sub    esp,0xc
c000e4c8:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000e4cb:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000e4d1:	c7 43 24 7a dd 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000dd7a
c000e4d8:	c7 43 20 7a dd 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000dd7a
c000e4df:	c7 43 28 1f e4 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000e41f
c000e4e6:	53                   	push   ebx
c000e4e7:	e8 33 ff ff ff       	call   c000e41f <zoh_reset>
c000e4ec:	83 c4 10             	add    esp,0x10
c000e4ef:	31 c0                	xor    eax,eax
c000e4f1:	83 c4 08             	add    esp,0x8
c000e4f4:	5b                   	pop    ebx
c000e4f5:	c3                   	ret    

c000e4f6 <CPU::current()>:
c000e4f6:	a1 68 ee 02 c0       	mov    eax,ds:0xc002ee68
c000e4fb:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e501:	90                   	nop
c000e502:	c3                   	ret    

c000e503 <operator new(unsigned long)>:
c000e503:	83 ec 0c             	sub    esp,0xc
c000e506:	83 ec 0c             	sub    esp,0xc
c000e509:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e50d:	e8 20 14 00 00       	call   c000f932 <malloc>
c000e512:	83 c4 10             	add    esp,0x10
c000e515:	83 c4 0c             	add    esp,0xc
c000e518:	c3                   	ret    

c000e519 <operator delete(void*)>:
c000e519:	83 ec 0c             	sub    esp,0xc
c000e51c:	83 ec 0c             	sub    esp,0xc
c000e51f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e523:	e8 2a 14 00 00       	call   c000f952 <rfree>
c000e528:	83 c4 10             	add    esp,0x10
c000e52b:	90                   	nop
c000e52c:	83 c4 0c             	add    esp,0xc
c000e52f:	c3                   	ret    

c000e530 <disableIRQs()>:
c000e530:	fa                   	cli    
c000e531:	a1 a8 23 03 c0       	mov    eax,ds:0xc00323a8
c000e536:	40                   	inc    eax
c000e537:	a3 a8 23 03 c0       	mov    ds:0xc00323a8,eax
c000e53c:	90                   	nop
c000e53d:	c3                   	ret    

c000e53e <enableIRQs()>:
c000e53e:	a1 a8 23 03 c0       	mov    eax,ds:0xc00323a8
c000e543:	48                   	dec    eax
c000e544:	a3 a8 23 03 c0       	mov    ds:0xc00323a8,eax
c000e549:	a1 a8 23 03 c0       	mov    eax,ds:0xc00323a8
c000e54e:	85 c0                	test   eax,eax
c000e550:	75 01                	jne    c000e553 <enableIRQs()+0x15>
c000e552:	fb                   	sti    
c000e553:	90                   	nop
c000e554:	c3                   	ret    

c000e555 <lockScheduler()>:
c000e555:	fa                   	cli    
c000e556:	a1 a8 23 03 c0       	mov    eax,ds:0xc00323a8
c000e55b:	40                   	inc    eax
c000e55c:	a3 a8 23 03 c0       	mov    ds:0xc00323a8,eax
c000e561:	90                   	nop
c000e562:	c3                   	ret    

c000e563 <unlockScheduler()>:
c000e563:	a1 a8 23 03 c0       	mov    eax,ds:0xc00323a8
c000e568:	48                   	dec    eax
c000e569:	a3 a8 23 03 c0       	mov    ds:0xc00323a8,eax
c000e56e:	a1 a8 23 03 c0       	mov    eax,ds:0xc00323a8
c000e573:	85 c0                	test   eax,eax
c000e575:	75 01                	jne    c000e578 <unlockScheduler()+0x15>
c000e577:	fb                   	sti    
c000e578:	90                   	nop
c000e579:	c3                   	ret    

c000e57a <lockStuff()>:
c000e57a:	fa                   	cli    
c000e57b:	a1 a8 23 03 c0       	mov    eax,ds:0xc00323a8
c000e580:	40                   	inc    eax
c000e581:	a3 a8 23 03 c0       	mov    ds:0xc00323a8,eax
c000e586:	a1 a4 23 03 c0       	mov    eax,ds:0xc00323a4
c000e58b:	40                   	inc    eax
c000e58c:	a3 a4 23 03 c0       	mov    ds:0xc00323a4,eax
c000e591:	90                   	nop
c000e592:	c3                   	ret    

c000e593 <unlockStuff()>:
c000e593:	83 ec 0c             	sub    esp,0xc
c000e596:	a1 a4 23 03 c0       	mov    eax,ds:0xc00323a4
c000e59b:	48                   	dec    eax
c000e59c:	a3 a4 23 03 c0       	mov    ds:0xc00323a4,eax
c000e5a1:	a1 a4 23 03 c0       	mov    eax,ds:0xc00323a4
c000e5a6:	85 c0                	test   eax,eax
c000e5a8:	75 18                	jne    c000e5c2 <unlockStuff()+0x2f>
c000e5aa:	a1 a0 23 03 c0       	mov    eax,ds:0xc00323a0
c000e5af:	85 c0                	test   eax,eax
c000e5b1:	74 0f                	je     c000e5c2 <unlockStuff()+0x2f>
c000e5b3:	c7 05 a0 23 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00323a0,0x0
c000e5bd:	e8 f0 fe 00 00       	call   c001e4b2 <schedule()>
c000e5c2:	a1 a8 23 03 c0       	mov    eax,ds:0xc00323a8
c000e5c7:	48                   	dec    eax
c000e5c8:	a3 a8 23 03 c0       	mov    ds:0xc00323a8,eax
c000e5cd:	a1 a8 23 03 c0       	mov    eax,ds:0xc00323a8
c000e5d2:	85 c0                	test   eax,eax
c000e5d4:	75 01                	jne    c000e5d7 <unlockStuff()+0x44>
c000e5d6:	fb                   	sti    
c000e5d7:	90                   	nop
c000e5d8:	83 c4 0c             	add    esp,0xc
c000e5db:	c3                   	ret    

c000e5dc <Krnl::resolveCompatibilitySymbol(char*)>:
c000e5dc:	83 ec 0c             	sub    esp,0xc
c000e5df:	83 ec 08             	sub    esp,0x8
c000e5e2:	68 a6 a8 02 c0       	push   0xc002a8a6
c000e5e7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5eb:	e8 f4 22 ff ff       	call   c00008e4 <strcmp>
c000e5f0:	83 c4 10             	add    esp,0x10
c000e5f3:	85 c0                	test   eax,eax
c000e5f5:	0f 94 c0             	sete   al
c000e5f8:	84 c0                	test   al,al
c000e5fa:	74 0a                	je     c000e606 <Krnl::resolveCompatibilitySymbol(char*)+0x2a>
c000e5fc:	b8 68 ee 02 c0       	mov    eax,0xc002ee68
c000e601:	e9 e3 00 00 00       	jmp    c000e6e9 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e606:	83 ec 08             	sub    esp,0x8
c000e609:	68 af a8 02 c0       	push   0xc002a8af
c000e60e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e612:	e8 cd 22 ff ff       	call   c00008e4 <strcmp>
c000e617:	83 c4 10             	add    esp,0x10
c000e61a:	85 c0                	test   eax,eax
c000e61c:	0f 94 c0             	sete   al
c000e61f:	84 c0                	test   al,al
c000e621:	74 0a                	je     c000e62d <Krnl::resolveCompatibilitySymbol(char*)+0x51>
c000e623:	b8 d4 71 02 c0       	mov    eax,0xc00271d4
c000e628:	e9 bc 00 00 00       	jmp    c000e6e9 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e62d:	83 ec 08             	sub    esp,0x8
c000e630:	68 b9 a8 02 c0       	push   0xc002a8b9
c000e635:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e639:	e8 a6 22 ff ff       	call   c00008e4 <strcmp>
c000e63e:	83 c4 10             	add    esp,0x10
c000e641:	85 c0                	test   eax,eax
c000e643:	0f 94 c0             	sete   al
c000e646:	84 c0                	test   al,al
c000e648:	74 0a                	je     c000e654 <Krnl::resolveCompatibilitySymbol(char*)+0x78>
c000e64a:	b8 08 6f 02 c0       	mov    eax,0xc0026f08
c000e64f:	e9 95 00 00 00       	jmp    c000e6e9 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e654:	83 ec 08             	sub    esp,0x8
c000e657:	68 c2 a8 02 c0       	push   0xc002a8c2
c000e65c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e660:	e8 7f 22 ff ff       	call   c00008e4 <strcmp>
c000e665:	83 c4 10             	add    esp,0x10
c000e668:	85 c0                	test   eax,eax
c000e66a:	0f 94 c0             	sete   al
c000e66d:	84 c0                	test   al,al
c000e66f:	74 07                	je     c000e678 <Krnl::resolveCompatibilitySymbol(char*)+0x9c>
c000e671:	b8 d4 72 02 c0       	mov    eax,0xc00272d4
c000e676:	eb 71                	jmp    c000e6e9 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e678:	83 ec 08             	sub    esp,0x8
c000e67b:	68 cc a8 02 c0       	push   0xc002a8cc
c000e680:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e684:	e8 5b 22 ff ff       	call   c00008e4 <strcmp>
c000e689:	83 c4 10             	add    esp,0x10
c000e68c:	85 c0                	test   eax,eax
c000e68e:	0f 94 c0             	sete   al
c000e691:	84 c0                	test   al,al
c000e693:	74 07                	je     c000e69c <Krnl::resolveCompatibilitySymbol(char*)+0xc0>
c000e695:	b8 54 70 02 c0       	mov    eax,0xc0027054
c000e69a:	eb 4d                	jmp    c000e6e9 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e69c:	83 ec 08             	sub    esp,0x8
c000e69f:	68 d5 a8 02 c0       	push   0xc002a8d5
c000e6a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e6a8:	e8 37 22 ff ff       	call   c00008e4 <strcmp>
c000e6ad:	83 c4 10             	add    esp,0x10
c000e6b0:	85 c0                	test   eax,eax
c000e6b2:	0f 94 c0             	sete   al
c000e6b5:	84 c0                	test   al,al
c000e6b7:	74 07                	je     c000e6c0 <Krnl::resolveCompatibilitySymbol(char*)+0xe4>
c000e6b9:	b8 6c ee 02 c0       	mov    eax,0xc002ee6c
c000e6be:	eb 29                	jmp    c000e6e9 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e6c0:	83 ec 08             	sub    esp,0x8
c000e6c3:	68 e2 a8 02 c0       	push   0xc002a8e2
c000e6c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e6cc:	e8 13 22 ff ff       	call   c00008e4 <strcmp>
c000e6d1:	83 c4 10             	add    esp,0x10
c000e6d4:	85 c0                	test   eax,eax
c000e6d6:	0f 94 c0             	sete   al
c000e6d9:	84 c0                	test   al,al
c000e6db:	74 07                	je     c000e6e4 <Krnl::resolveCompatibilitySymbol(char*)+0x108>
c000e6dd:	b8 6d ee 02 c0       	mov    eax,0xc002ee6d
c000e6e2:	eb 05                	jmp    c000e6e9 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e6e4:	b8 00 00 00 00       	mov    eax,0x0
c000e6e9:	83 c4 0c             	add    esp,0xc
c000e6ec:	c3                   	ret    
c000e6ed:	90                   	nop

c000e6ee <Computer::close(int, int, void*)>:
c000e6ee:	57                   	push   edi
c000e6ef:	56                   	push   esi
c000e6f0:	53                   	push   ebx
c000e6f1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e6f5:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e6f9:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e6fd:	83 ec 0c             	sub    esp,0xc
c000e700:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000e706:	e8 91 5d 00 00       	call   c001449c <Device::closeAll()>
c000e70b:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000e711:	83 c4 10             	add    esp,0x10
c000e714:	8b 10                	mov    edx,DWORD PTR [eax]
c000e716:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000e71a:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000e722:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000e726:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e72a:	5b                   	pop    ebx
c000e72b:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000e72e:	5e                   	pop    esi
c000e72f:	5f                   	pop    edi
c000e730:	ff e0                	jmp    eax

c000e732 <Krnl::firstTask()>:
c000e732:	53                   	push   ebx
c000e733:	83 ec 14             	sub    esp,0x14
c000e736:	fb                   	sti    
c000e737:	68 3f 07 00 00       	push   0x73f
c000e73c:	e8 f1 11 00 00       	call   c000f932 <malloc>
c000e741:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000e748:	89 c3                	mov    ebx,eax
c000e74a:	ff 35 d0 23 03 c0    	push   DWORD PTR ds:0xc00323d0
c000e750:	68 ef a8 02 c0       	push   0xc002a8ef
c000e755:	6a 01                	push   0x1
c000e757:	50                   	push   eax
c000e758:	e8 19 f9 00 00       	call   c001e076 <Process::Process(bool, char const*, Process*, char**)>
c000e75d:	83 c4 20             	add    esp,0x20
c000e760:	68 ff 00 00 00       	push   0xff
c000e765:	6a 00                	push   0x0
c000e767:	68 bd f2 00 c0       	push   0xc000f2bd
c000e76c:	53                   	push   ebx
c000e76d:	e8 fc fa 00 00       	call   c001e26e <Process::createThread(void (*)(void*), void*, int)>
c000e772:	6a 7a                	push   0x7a
c000e774:	6a 00                	push   0x0
c000e776:	68 ec ec 01 c0       	push   0xc001ecec
c000e77b:	ff 35 d0 23 03 c0    	push   DWORD PTR ds:0xc00323d0
c000e781:	e8 e8 fa 00 00       	call   c001e26e <Process::createThread(void (*)(void*), void*, int)>
c000e786:	83 c4 20             	add    esp,0x20
c000e789:	a3 88 23 03 c0       	mov    ds:0xc0032388,eax
c000e78e:	c6 05 6d ee 02 c0 01 	mov    BYTE PTR ds:0xc002ee6d,0x1
c000e795:	e8 a6 09 01 00       	call   c001f140 <Vm::initialise8086()>
c000e79a:	e8 dd 4a 00 00       	call   c001327c <Fs::initVFS()>
c000e79f:	a1 68 ee 02 c0       	mov    eax,ds:0xc002ee68
c000e7a4:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c000e7aa:	8b 10                	mov    edx,DWORD PTR [eax]
c000e7ac:	6a 00                	push   0x0
c000e7ae:	6a 00                	push   0x0
c000e7b0:	6a 00                	push   0x0
c000e7b2:	50                   	push   eax
c000e7b3:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e7b6:	e8 3f e1 00 00       	call   c001c8fa <Sys::loadSyscalls()>
c000e7bb:	e8 b8 bf 00 00       	call   c001a778 <Krnl::loadSystemEnv()>
c000e7c0:	83 c4 0c             	add    esp,0xc
c000e7c3:	6a 3a                	push   0x3a
c000e7c5:	68 fc a8 02 c0       	push   0xc002a8fc
c000e7ca:	68 05 a9 02 c0       	push   0xc002a905
c000e7cf:	e8 ca cc 00 00       	call   c001b49e <Reg::readIntWithDefault(char*, char*, int)>
c000e7d4:	89 04 24             	mov    DWORD PTR [esp],eax
c000e7d7:	e8 90 55 00 00       	call   c0013d6c <User::loadClockSettings(int)>
c000e7dc:	58                   	pop    eax
c000e7dd:	a1 68 ee 02 c0       	mov    eax,ds:0xc002ee68
c000e7e2:	ff b0 e4 01 00 00    	push   DWORD PTR [eax+0x1e4]
c000e7e8:	e8 83 5c 00 00       	call   c0014470 <Device::loadDriversForAll()>
c000e7ed:	e8 cc ba 00 00       	call   c001a2be <Krnl::startCPUs()>
c000e7f2:	5a                   	pop    edx
c000e7f3:	8b 1d 68 ee 02 c0    	mov    ebx,DWORD PTR ds:0xc002ee68
c000e7f9:	59                   	pop    ecx
c000e7fa:	6a 01                	push   0x1
c000e7fc:	68 0d a9 02 c0       	push   0xc002a90d
c000e801:	e8 c4 f2 00 00       	call   c001daca <Thr::loadDLL(char const*, bool)>
c000e806:	5a                   	pop    edx
c000e807:	59                   	pop    ecx
c000e808:	53                   	push   ebx
c000e809:	50                   	push   eax
c000e80a:	e8 ef f4 00 00       	call   c001dcfe <Thr::executeDLL(unsigned long, void*)>
c000e80f:	83 c4 10             	add    esp,0x10
c000e812:	83 ec 0c             	sub    esp,0xc
c000e815:	6a 02                	push   0x2
c000e817:	e8 95 fe 00 00       	call   c001e6b1 <blockTask(TaskState)>
c000e81c:	83 c4 10             	add    esp,0x10
c000e81f:	eb f1                	jmp    c000e812 <Krnl::firstTask()+0xe0>
c000e821:	90                   	nop

c000e822 <Computer::Computer()>:
c000e822:	83 ec 0c             	sub    esp,0xc
c000e825:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e829:	83 ec 08             	sub    esp,0x8
c000e82c:	68 29 a9 02 c0       	push   0xc002a929
c000e831:	50                   	push   eax
c000e832:	e8 df 5c 00 00       	call   c0014516 <Device::Device(char const*)>
c000e837:	83 c4 10             	add    esp,0x10
c000e83a:	ba c8 aa 02 c0       	mov    edx,0xc002aac8
c000e83f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e843:	89 10                	mov    DWORD PTR [eax],edx
c000e845:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e849:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000e853:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e857:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000e861:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e865:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000e86b:	83 ca 04             	or     edx,0x4
c000e86e:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000e874:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e878:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e87e:	0f b6 d0             	movzx  edx,al
c000e881:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e885:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000e88c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e890:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e896:	0f b6 d0             	movzx  edx,al
c000e899:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e89d:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000e8a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8a6:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e8ac:	8d 50 01             	lea    edx,[eax+0x1]
c000e8af:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e8b3:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e8b9:	0f b6 d0             	movzx  edx,al
c000e8bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8c0:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e8c4:	83 e1 3f             	and    ecx,0x3f
c000e8c7:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e8cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8cf:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e8d5:	0f b6 d0             	movzx  edx,al
c000e8d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8dc:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000e8e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8e7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e8ed:	0f b6 d0             	movzx  edx,al
c000e8f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8f4:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e8f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8fd:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e903:	8d 50 01             	lea    edx,[eax+0x1]
c000e906:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e90a:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e910:	0f b6 d0             	movzx  edx,al
c000e913:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e917:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e91b:	83 e1 3f             	and    ecx,0x3f
c000e91e:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e922:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e926:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e92c:	0f b6 d0             	movzx  edx,al
c000e92f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e933:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000e93a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e93e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e944:	0f b6 d0             	movzx  edx,al
c000e947:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e94b:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e950:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e954:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e95a:	8d 50 01             	lea    edx,[eax+0x1]
c000e95d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e961:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e967:	0f b6 d0             	movzx  edx,al
c000e96a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e96e:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e972:	83 e1 3f             	and    ecx,0x3f
c000e975:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e979:	90                   	nop
c000e97a:	83 c4 0c             	add    esp,0xc
c000e97d:	c3                   	ret    

c000e97e <Computer::setBootMessage(char const*)>:
c000e97e:	c3                   	ret    
c000e97f:	90                   	nop

c000e980 <Computer::detectFeatures()>:
c000e980:	55                   	push   ebp
c000e981:	57                   	push   edi
c000e982:	56                   	push   esi
c000e983:	53                   	push   ebx
c000e984:	83 ec 1c             	sub    esp,0x1c
c000e987:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e98b:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c000e995:	e8 4a 19 ff ff       	call   c00002e4 <detectCPUID>
c000e99a:	85 c0                	test   eax,eax
c000e99c:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e9a2:	0f 95 c2             	setne  dl
c000e9a5:	83 e0 fd             	and    eax,0xfffffffd
c000e9a8:	d1 e2                	shl    edx,1
c000e9aa:	09 d0                	or     eax,edx
c000e9ac:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9b2:	a8 02                	test   al,0x2
c000e9b4:	75 46                	jne    c000e9fc <Computer::detectFeatures()+0x7c>
c000e9b6:	f6 05 81 ee 02 c0 04 	test   BYTE PTR ds:0xc002ee81,0x4
c000e9bd:	74 07                	je     c000e9c6 <Computer::detectFeatures()+0x46>
c000e9bf:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c000e9c6:	e8 cb 84 01 00       	call   c0026e96 <x87Detect>
c000e9cb:	83 e0 01             	and    eax,0x1
c000e9ce:	c1 e0 04             	shl    eax,0x4
c000e9d1:	88 c2                	mov    dl,al
c000e9d3:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e9d9:	83 e0 ef             	and    eax,0xffffffef
c000e9dc:	09 d0                	or     eax,edx
c000e9de:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9e4:	a8 10                	test   al,0x10
c000e9e6:	0f 85 2a 01 00 00    	jne    c000eb16 <Computer::detectFeatures()+0x196>
c000e9ec:	84 c0                	test   al,al
c000e9ee:	0f 88 45 01 00 00    	js     c000eb39 <Computer::detectFeatures()+0x1b9>
c000e9f4:	83 c4 1c             	add    esp,0x1c
c000e9f7:	5b                   	pop    ebx
c000e9f8:	5e                   	pop    esi
c000e9f9:	5f                   	pop    edi
c000e9fa:	5d                   	pop    ebp
c000e9fb:	c3                   	ret    
c000e9fc:	83 ec 0c             	sub    esp,0xc
c000e9ff:	6a 20                	push   0x20
c000ea01:	e8 ca a5 00 00       	call   c0018fd0 <CPU::cpuidCheckEDX(unsigned int)>
c000ea06:	83 e0 01             	and    eax,0x1
c000ea09:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000ea10:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea16:	83 e0 f7             	and    eax,0xfffffff7
c000ea19:	09 d0                	or     eax,edx
c000ea1b:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea21:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000ea28:	e8 a3 a5 00 00       	call   c0018fd0 <CPU::cpuidCheckEDX(unsigned int)>
c000ea2d:	83 e0 01             	and    eax,0x1
c000ea30:	88 c2                	mov    dl,al
c000ea32:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000ea38:	83 e0 fe             	and    eax,0xfffffffe
c000ea3b:	09 d0                	or     eax,edx
c000ea3d:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000ea43:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000ea4a:	e8 81 a5 00 00       	call   c0018fd0 <CPU::cpuidCheckEDX(unsigned int)>
c000ea4f:	c1 e0 07             	shl    eax,0x7
c000ea52:	88 c2                	mov    dl,al
c000ea54:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000ea5a:	83 e0 7f             	and    eax,0x7f
c000ea5d:	09 d0                	or     eax,edx
c000ea5f:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000ea65:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000ea6c:	e8 5f a5 00 00       	call   c0018fd0 <CPU::cpuidCheckEDX(unsigned int)>
c000ea71:	83 c4 10             	add    esp,0x10
c000ea74:	83 e0 01             	and    eax,0x1
c000ea77:	c1 e0 05             	shl    eax,0x5
c000ea7a:	88 c2                	mov    dl,al
c000ea7c:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea82:	83 e0 df             	and    eax,0xffffffdf
c000ea85:	09 d0                	or     eax,edx
c000ea87:	f7 05 80 ee 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc002ee80,0x401
c000ea91:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea97:	0f 84 c2 00 00 00    	je     c000eb5f <Computer::detectFeatures()+0x1df>
c000ea9d:	83 e0 fe             	and    eax,0xfffffffe
c000eaa0:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000eaa6:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000eaac:	88 c2                	mov    dl,al
c000eaae:	83 e2 09             	and    edx,0x9
c000eab1:	fe ca                	dec    dl
c000eab3:	75 09                	jne    c000eabe <Computer::detectFeatures()+0x13e>
c000eab5:	83 e0 fe             	and    eax,0xfffffffe
c000eab8:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000eabe:	83 ec 0c             	sub    esp,0xc
c000eac1:	8d 44 24 18          	lea    eax,[esp+0x18]
c000eac5:	50                   	push   eax
c000eac6:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000eaca:	55                   	push   ebp
c000eacb:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000eacf:	57                   	push   edi
c000ead0:	8d 74 24 18          	lea    esi,[esp+0x18]
c000ead4:	56                   	push   esi
c000ead5:	68 00 00 00 80       	push   0x80000000
c000eada:	e8 6d a4 00 00       	call   c0018f4c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000eadf:	83 c4 20             	add    esp,0x20
c000eae2:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000eae9:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000eaed:	0f 86 c3 fe ff ff    	jbe    c000e9b6 <Computer::detectFeatures()+0x36>
c000eaf3:	83 ec 0c             	sub    esp,0xc
c000eaf6:	50                   	push   eax
c000eaf7:	55                   	push   ebp
c000eaf8:	57                   	push   edi
c000eaf9:	56                   	push   esi
c000eafa:	68 01 00 00 80       	push   0x80000001
c000eaff:	e8 48 a4 00 00       	call   c0018f4c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000eb04:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c000eb0e:	83 c4 20             	add    esp,0x20
c000eb11:	e9 a0 fe ff ff       	jmp    c000e9b6 <Computer::detectFeatures()+0x36>
c000eb16:	e8 35 83 01 00       	call   c0026e50 <absolutelyNoChanceInHell>
c000eb1b:	88 c2                	mov    dl,al
c000eb1d:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000eb23:	c1 e2 07             	shl    edx,0x7
c000eb26:	83 e0 7f             	and    eax,0x7f
c000eb29:	09 d0                	or     eax,edx
c000eb2b:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000eb31:	84 c0                	test   al,al
c000eb33:	0f 89 bb fe ff ff    	jns    c000e9f4 <Computer::detectFeatures()+0x74>
c000eb39:	e8 f2 82 01 00       	call   c0026e30 <avxDetect>
c000eb3e:	83 e0 01             	and    eax,0x1
c000eb41:	c1 e0 05             	shl    eax,0x5
c000eb44:	88 c2                	mov    dl,al
c000eb46:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000eb4c:	83 e0 df             	and    eax,0xffffffdf
c000eb4f:	09 d0                	or     eax,edx
c000eb51:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000eb57:	83 c4 1c             	add    esp,0x1c
c000eb5a:	5b                   	pop    ebx
c000eb5b:	5e                   	pop    esi
c000eb5c:	5f                   	pop    edi
c000eb5d:	5d                   	pop    ebp
c000eb5e:	c3                   	ret    
c000eb5f:	83 ec 0c             	sub    esp,0xc
c000eb62:	68 00 02 00 00       	push   0x200
c000eb67:	e8 64 a4 00 00       	call   c0018fd0 <CPU::cpuidCheckEDX(unsigned int)>
c000eb6c:	83 c4 10             	add    esp,0x10
c000eb6f:	83 e0 01             	and    eax,0x1
c000eb72:	88 c2                	mov    dl,al
c000eb74:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000eb7a:	83 e0 fe             	and    eax,0xfffffffe
c000eb7d:	09 d0                	or     eax,edx
c000eb7f:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000eb85:	e9 1c ff ff ff       	jmp    c000eaa6 <Computer::detectFeatures()+0x126>

c000eb8a <Computer::displayFeatures()>:
c000eb8a:	53                   	push   ebx
c000eb8b:	83 ec 14             	sub    esp,0x14
c000eb8e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000eb92:	68 39 a9 02 c0       	push   0xc002a939
c000eb97:	e8 55 43 00 00       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c000eb9c:	83 c4 10             	add    esp,0x10
c000eb9f:	f6 83 e8 01 00 00 01 	test   BYTE PTR [ebx+0x1e8],0x1
c000eba6:	0f 85 73 02 00 00    	jne    c000ee1f <Computer::displayFeatures()+0x295>
c000ebac:	b8 36 a9 02 c0       	mov    eax,0xc002a936
c000ebb1:	83 ec 08             	sub    esp,0x8
c000ebb4:	50                   	push   eax
c000ebb5:	68 4c a9 02 c0       	push   0xc002a94c
c000ebba:	e8 32 43 00 00       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c000ebbf:	83 c4 10             	add    esp,0x10
c000ebc2:	f6 83 e8 01 00 00 04 	test   BYTE PTR [ebx+0x1e8],0x4
c000ebc9:	0f 85 8c 02 00 00    	jne    c000ee5b <Computer::displayFeatures()+0x2d1>
c000ebcf:	b8 36 a9 02 c0       	mov    eax,0xc002a936
c000ebd4:	83 ec 08             	sub    esp,0x8
c000ebd7:	50                   	push   eax
c000ebd8:	68 5d a9 02 c0       	push   0xc002a95d
c000ebdd:	e8 0f 43 00 00       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c000ebe2:	83 c4 10             	add    esp,0x10
c000ebe5:	f6 83 e8 01 00 00 02 	test   BYTE PTR [ebx+0x1e8],0x2
c000ebec:	0f 85 5f 02 00 00    	jne    c000ee51 <Computer::displayFeatures()+0x2c7>
c000ebf2:	b8 36 a9 02 c0       	mov    eax,0xc002a936
c000ebf7:	83 ec 08             	sub    esp,0x8
c000ebfa:	50                   	push   eax
c000ebfb:	68 6e a9 02 c0       	push   0xc002a96e
c000ec00:	e8 ec 42 00 00       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c000ec05:	83 c4 10             	add    esp,0x10
c000ec08:	f6 83 e8 01 00 00 08 	test   BYTE PTR [ebx+0x1e8],0x8
c000ec0f:	0f 85 32 02 00 00    	jne    c000ee47 <Computer::displayFeatures()+0x2bd>
c000ec15:	b8 36 a9 02 c0       	mov    eax,0xc002a936
c000ec1a:	83 ec 08             	sub    esp,0x8
c000ec1d:	50                   	push   eax
c000ec1e:	68 7f a9 02 c0       	push   0xc002a97f
c000ec23:	e8 c9 42 00 00       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c000ec28:	83 c4 10             	add    esp,0x10
c000ec2b:	f6 83 e8 01 00 00 10 	test   BYTE PTR [ebx+0x1e8],0x10
c000ec32:	0f 85 05 02 00 00    	jne    c000ee3d <Computer::displayFeatures()+0x2b3>
c000ec38:	b8 36 a9 02 c0       	mov    eax,0xc002a936
c000ec3d:	83 ec 08             	sub    esp,0x8
c000ec40:	50                   	push   eax
c000ec41:	68 90 a9 02 c0       	push   0xc002a990
c000ec46:	e8 a6 42 00 00       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c000ec4b:	83 c4 10             	add    esp,0x10
c000ec4e:	f6 83 e8 01 00 00 20 	test   BYTE PTR [ebx+0x1e8],0x20
c000ec55:	0f 85 d8 01 00 00    	jne    c000ee33 <Computer::displayFeatures()+0x2a9>
c000ec5b:	b8 36 a9 02 c0       	mov    eax,0xc002a936
c000ec60:	83 ec 08             	sub    esp,0x8
c000ec63:	50                   	push   eax
c000ec64:	68 a1 a9 02 c0       	push   0xc002a9a1
c000ec69:	e8 83 42 00 00       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c000ec6e:	83 c4 10             	add    esp,0x10
c000ec71:	f6 83 e8 01 00 00 40 	test   BYTE PTR [ebx+0x1e8],0x40
c000ec78:	0f 85 ab 01 00 00    	jne    c000ee29 <Computer::displayFeatures()+0x29f>
c000ec7e:	b8 36 a9 02 c0       	mov    eax,0xc002a936
c000ec83:	83 ec 08             	sub    esp,0x8
c000ec86:	50                   	push   eax
c000ec87:	68 b2 a9 02 c0       	push   0xc002a9b2
c000ec8c:	e8 60 42 00 00       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c000ec91:	83 c4 10             	add    esp,0x10
c000ec94:	80 bb e8 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e8],0x0
c000ec9b:	0f 88 1b 02 00 00    	js     c000eebc <Computer::displayFeatures()+0x332>
c000eca1:	b8 36 a9 02 c0       	mov    eax,0xc002a936
c000eca6:	83 ec 08             	sub    esp,0x8
c000eca9:	50                   	push   eax
c000ecaa:	68 c3 a9 02 c0       	push   0xc002a9c3
c000ecaf:	e8 3d 42 00 00       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c000ecb4:	83 c4 10             	add    esp,0x10
c000ecb7:	f6 83 e9 01 00 00 01 	test   BYTE PTR [ebx+0x1e9],0x1
c000ecbe:	0f 85 a1 01 00 00    	jne    c000ee65 <Computer::displayFeatures()+0x2db>
c000ecc4:	b8 36 a9 02 c0       	mov    eax,0xc002a936
c000ecc9:	83 ec 08             	sub    esp,0x8
c000eccc:	50                   	push   eax
c000eccd:	68 d4 a9 02 c0       	push   0xc002a9d4
c000ecd2:	e8 1a 42 00 00       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c000ecd7:	83 c4 10             	add    esp,0x10
c000ecda:	f6 83 e9 01 00 00 02 	test   BYTE PTR [ebx+0x1e9],0x2
c000ece1:	0f 85 cb 01 00 00    	jne    c000eeb2 <Computer::displayFeatures()+0x328>
c000ece7:	b8 36 a9 02 c0       	mov    eax,0xc002a936
c000ecec:	83 ec 08             	sub    esp,0x8
c000ecef:	50                   	push   eax
c000ecf0:	68 e5 a9 02 c0       	push   0xc002a9e5
c000ecf5:	e8 f7 41 00 00       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c000ecfa:	83 c4 10             	add    esp,0x10
c000ecfd:	f6 83 e9 01 00 00 10 	test   BYTE PTR [ebx+0x1e9],0x10
c000ed04:	0f 85 9e 01 00 00    	jne    c000eea8 <Computer::displayFeatures()+0x31e>
c000ed0a:	b8 36 a9 02 c0       	mov    eax,0xc002a936
c000ed0f:	83 ec 08             	sub    esp,0x8
c000ed12:	50                   	push   eax
c000ed13:	68 f6 a9 02 c0       	push   0xc002a9f6
c000ed18:	e8 d4 41 00 00       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c000ed1d:	83 c4 10             	add    esp,0x10
c000ed20:	f6 83 e9 01 00 00 04 	test   BYTE PTR [ebx+0x1e9],0x4
c000ed27:	0f 85 71 01 00 00    	jne    c000ee9e <Computer::displayFeatures()+0x314>
c000ed2d:	b8 36 a9 02 c0       	mov    eax,0xc002a936
c000ed32:	83 ec 08             	sub    esp,0x8
c000ed35:	50                   	push   eax
c000ed36:	68 07 aa 02 c0       	push   0xc002aa07
c000ed3b:	e8 b1 41 00 00       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c000ed40:	83 c4 10             	add    esp,0x10
c000ed43:	f6 83 e9 01 00 00 08 	test   BYTE PTR [ebx+0x1e9],0x8
c000ed4a:	0f 85 44 01 00 00    	jne    c000ee94 <Computer::displayFeatures()+0x30a>
c000ed50:	b8 36 a9 02 c0       	mov    eax,0xc002a936
c000ed55:	83 ec 08             	sub    esp,0x8
c000ed58:	50                   	push   eax
c000ed59:	68 18 aa 02 c0       	push   0xc002aa18
c000ed5e:	e8 8e 41 00 00       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c000ed63:	83 c4 10             	add    esp,0x10
c000ed66:	f6 83 e9 01 00 00 20 	test   BYTE PTR [ebx+0x1e9],0x20
c000ed6d:	0f 85 17 01 00 00    	jne    c000ee8a <Computer::displayFeatures()+0x300>
c000ed73:	b8 36 a9 02 c0       	mov    eax,0xc002a936
c000ed78:	83 ec 08             	sub    esp,0x8
c000ed7b:	50                   	push   eax
c000ed7c:	68 29 aa 02 c0       	push   0xc002aa29
c000ed81:	e8 6b 41 00 00       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c000ed86:	83 c4 10             	add    esp,0x10
c000ed89:	f6 83 e9 01 00 00 40 	test   BYTE PTR [ebx+0x1e9],0x40
c000ed90:	0f 85 ea 00 00 00    	jne    c000ee80 <Computer::displayFeatures()+0x2f6>
c000ed96:	b8 36 a9 02 c0       	mov    eax,0xc002a936
c000ed9b:	83 ec 08             	sub    esp,0x8
c000ed9e:	50                   	push   eax
c000ed9f:	68 3a aa 02 c0       	push   0xc002aa3a
c000eda4:	e8 48 41 00 00       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c000eda9:	83 c4 10             	add    esp,0x10
c000edac:	80 bb e9 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e9],0x0
c000edb3:	0f 88 0d 01 00 00    	js     c000eec6 <Computer::displayFeatures()+0x33c>
c000edb9:	b8 36 a9 02 c0       	mov    eax,0xc002a936
c000edbe:	83 ec 08             	sub    esp,0x8
c000edc1:	50                   	push   eax
c000edc2:	68 4b aa 02 c0       	push   0xc002aa4b
c000edc7:	e8 25 41 00 00       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c000edcc:	83 c4 10             	add    esp,0x10
c000edcf:	f6 83 ea 01 00 00 02 	test   BYTE PTR [ebx+0x1ea],0x2
c000edd6:	0f 85 9a 00 00 00    	jne    c000ee76 <Computer::displayFeatures()+0x2ec>
c000eddc:	b8 36 a9 02 c0       	mov    eax,0xc002a936
c000ede1:	83 ec 08             	sub    esp,0x8
c000ede4:	50                   	push   eax
c000ede5:	68 5c aa 02 c0       	push   0xc002aa5c
c000edea:	e8 02 41 00 00       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c000edef:	83 c4 10             	add    esp,0x10
c000edf2:	f6 83 ea 01 00 00 01 	test   BYTE PTR [ebx+0x1ea],0x1
c000edf9:	75 74                	jne    c000ee6f <Computer::displayFeatures()+0x2e5>
c000edfb:	b8 36 a9 02 c0       	mov    eax,0xc002a936
c000ee00:	83 ec 08             	sub    esp,0x8
c000ee03:	50                   	push   eax
c000ee04:	68 6d aa 02 c0       	push   0xc002aa6d
c000ee09:	e8 e3 40 00 00       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c000ee0e:	c7 44 24 20 d4 c4 02 c0 	mov    DWORD PTR [esp+0x20],0xc002c4d4
c000ee16:	83 c4 18             	add    esp,0x18
c000ee19:	5b                   	pop    ebx
c000ee1a:	e9 d2 40 00 00       	jmp    c0012ef1 <Dbg::kprintf(char const*, ...)>
c000ee1f:	b8 32 a9 02 c0       	mov    eax,0xc002a932
c000ee24:	e9 88 fd ff ff       	jmp    c000ebb1 <Computer::displayFeatures()+0x27>
c000ee29:	b8 32 a9 02 c0       	mov    eax,0xc002a932
c000ee2e:	e9 50 fe ff ff       	jmp    c000ec83 <Computer::displayFeatures()+0xf9>
c000ee33:	b8 32 a9 02 c0       	mov    eax,0xc002a932
c000ee38:	e9 23 fe ff ff       	jmp    c000ec60 <Computer::displayFeatures()+0xd6>
c000ee3d:	b8 32 a9 02 c0       	mov    eax,0xc002a932
c000ee42:	e9 f6 fd ff ff       	jmp    c000ec3d <Computer::displayFeatures()+0xb3>
c000ee47:	b8 32 a9 02 c0       	mov    eax,0xc002a932
c000ee4c:	e9 c9 fd ff ff       	jmp    c000ec1a <Computer::displayFeatures()+0x90>
c000ee51:	b8 32 a9 02 c0       	mov    eax,0xc002a932
c000ee56:	e9 9c fd ff ff       	jmp    c000ebf7 <Computer::displayFeatures()+0x6d>
c000ee5b:	b8 32 a9 02 c0       	mov    eax,0xc002a932
c000ee60:	e9 6f fd ff ff       	jmp    c000ebd4 <Computer::displayFeatures()+0x4a>
c000ee65:	b8 32 a9 02 c0       	mov    eax,0xc002a932
c000ee6a:	e9 5a fe ff ff       	jmp    c000ecc9 <Computer::displayFeatures()+0x13f>
c000ee6f:	b8 32 a9 02 c0       	mov    eax,0xc002a932
c000ee74:	eb 8a                	jmp    c000ee00 <Computer::displayFeatures()+0x276>
c000ee76:	b8 32 a9 02 c0       	mov    eax,0xc002a932
c000ee7b:	e9 61 ff ff ff       	jmp    c000ede1 <Computer::displayFeatures()+0x257>
c000ee80:	b8 32 a9 02 c0       	mov    eax,0xc002a932
c000ee85:	e9 11 ff ff ff       	jmp    c000ed9b <Computer::displayFeatures()+0x211>
c000ee8a:	b8 32 a9 02 c0       	mov    eax,0xc002a932
c000ee8f:	e9 e4 fe ff ff       	jmp    c000ed78 <Computer::displayFeatures()+0x1ee>
c000ee94:	b8 32 a9 02 c0       	mov    eax,0xc002a932
c000ee99:	e9 b7 fe ff ff       	jmp    c000ed55 <Computer::displayFeatures()+0x1cb>
c000ee9e:	b8 32 a9 02 c0       	mov    eax,0xc002a932
c000eea3:	e9 8a fe ff ff       	jmp    c000ed32 <Computer::displayFeatures()+0x1a8>
c000eea8:	b8 32 a9 02 c0       	mov    eax,0xc002a932
c000eead:	e9 5d fe ff ff       	jmp    c000ed0f <Computer::displayFeatures()+0x185>
c000eeb2:	b8 32 a9 02 c0       	mov    eax,0xc002a932
c000eeb7:	e9 30 fe ff ff       	jmp    c000ecec <Computer::displayFeatures()+0x162>
c000eebc:	b8 32 a9 02 c0       	mov    eax,0xc002a932
c000eec1:	e9 e0 fd ff ff       	jmp    c000eca6 <Computer::displayFeatures()+0x11c>
c000eec6:	b8 32 a9 02 c0       	mov    eax,0xc002a932
c000eecb:	e9 ee fe ff ff       	jmp    c000edbe <Computer::displayFeatures()+0x234>

c000eed0 <Computer::rdmsr(unsigned int)>:
c000eed0:	83 ec 0c             	sub    esp,0xc
c000eed3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eed7:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000eede:	74 0a                	je     c000eeea <Computer::rdmsr(unsigned int)+0x1a>
c000eee0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000eee4:	0f 32                	rdmsr  
c000eee6:	83 c4 0c             	add    esp,0xc
c000eee9:	c3                   	ret    
c000eeea:	83 ec 0c             	sub    esp,0xc
c000eeed:	68 7e aa 02 c0       	push   0xc002aa7e
c000eef2:	e8 ba b9 00 00       	call   c001a8b1 <Krnl::panic(char const*)>
c000eef7:	83 c4 10             	add    esp,0x10
c000eefa:	eb e4                	jmp    c000eee0 <Computer::rdmsr(unsigned int)+0x10>

c000eefc <Computer::wrmsr(unsigned int, unsigned long long)>:
c000eefc:	57                   	push   edi
c000eefd:	56                   	push   esi
c000eefe:	52                   	push   edx
c000eeff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ef03:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000ef07:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000ef0b:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ef12:	74 0e                	je     c000ef22 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000ef14:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ef18:	89 f0                	mov    eax,esi
c000ef1a:	89 fa                	mov    edx,edi
c000ef1c:	0f 30                	wrmsr  
c000ef1e:	58                   	pop    eax
c000ef1f:	5e                   	pop    esi
c000ef20:	5f                   	pop    edi
c000ef21:	c3                   	ret    
c000ef22:	83 ec 0c             	sub    esp,0xc
c000ef25:	68 84 aa 02 c0       	push   0xc002aa84
c000ef2a:	e8 82 b9 00 00       	call   c001a8b1 <Krnl::panic(char const*)>
c000ef2f:	83 c4 10             	add    esp,0x10
c000ef32:	eb e0                	jmp    c000ef14 <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000ef34 <Computer::nmiEnabled()>:
c000ef34:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ef38:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000ef3e:	c3                   	ret    
c000ef3f:	90                   	nop

c000ef40 <Computer::readCMOS(unsigned char)>:
c000ef40:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ef44:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000ef4b:	19 c0                	sbb    eax,eax
c000ef4d:	83 e0 80             	and    eax,0xffffff80
c000ef50:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ef54:	e6 70                	out    0x70,al
c000ef56:	e4 71                	in     al,0x71
c000ef58:	c3                   	ret    
c000ef59:	90                   	nop

c000ef5a <Computer::enableNMI(bool)>:
c000ef5a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ef5e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ef62:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000ef68:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000ef70:	eb ce                	jmp    c000ef40 <Computer::readCMOS(unsigned char)>

c000ef72 <Computer::open(int, int, void*)>:
c000ef72:	56                   	push   esi
c000ef73:	53                   	push   ebx
c000ef74:	83 ec 10             	sub    esp,0x10
c000ef77:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ef7b:	f6 05 80 ee 02 c0 04 	test   BYTE PTR ds:0xc002ee80,0x4
c000ef82:	68 68 12 00 00       	push   0x1268
c000ef87:	0f 94 05 a4 dd 02 c0 	sete   BYTE PTR ds:0xc002dda4
c000ef8e:	e8 9f 09 00 00       	call   c000f932 <malloc>
c000ef93:	89 04 24             	mov    DWORD PTR [esp],eax
c000ef96:	89 c6                	mov    esi,eax
c000ef98:	e8 b7 93 00 00       	call   c0018354 <ACPI::ACPI()>
c000ef9d:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000efa3:	58                   	pop    eax
c000efa4:	5a                   	pop    edx
c000efa5:	56                   	push   esi
c000efa6:	53                   	push   ebx
c000efa7:	e8 7a 53 00 00       	call   c0014326 <Device::addChild(Device*)>
c000efac:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000efaf:	e8 cc f9 ff ff       	call   c000e980 <Computer::detectFeatures()>
c000efb4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000efb7:	e8 ce fb ff ff       	call   c000eb8a <Computer::displayFeatures()>
c000efbc:	59                   	pop    ecx
c000efbd:	5e                   	pop    esi
c000efbe:	6a 01                	push   0x1
c000efc0:	53                   	push   ebx
c000efc1:	e8 94 ff ff ff       	call   c000ef5a <Computer::enableNMI(bool)>
c000efc6:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000efcd:	e8 60 09 00 00       	call   c000f932 <malloc>
c000efd2:	89 04 24             	mov    DWORD PTR [esp],eax
c000efd5:	89 c6                	mov    esi,eax
c000efd7:	e8 ac a0 00 00       	call   c0019088 <CPU::CPU()>
c000efdc:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000efe2:	58                   	pop    eax
c000efe3:	5a                   	pop    edx
c000efe4:	56                   	push   esi
c000efe5:	53                   	push   ebx
c000efe6:	e8 3b 53 00 00       	call   c0014326 <Device::addChild(Device*)>
c000efeb:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000eff1:	8b 10                	mov    edx,DWORD PTR [eax]
c000eff3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000eff7:	6a 00                	push   0x0
c000eff9:	6a 00                	push   0x0
c000effb:	50                   	push   eax
c000effc:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000efff:	83 c4 20             	add    esp,0x20
c000f002:	e8 b3 58 00 00       	call   c00148ba <setupFPU()>
c000f007:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000f00d:	85 c0                	test   eax,eax
c000f00f:	74 1f                	je     c000f030 <Computer::open(int, int, void*)+0xbe>
c000f011:	83 ec 08             	sub    esp,0x8
c000f014:	50                   	push   eax
c000f015:	53                   	push   ebx
c000f016:	e8 0b 53 00 00       	call   c0014326 <Device::addChild(Device*)>
c000f01b:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000f021:	8b 10                	mov    edx,DWORD PTR [eax]
c000f023:	6a 00                	push   0x0
c000f025:	6a 00                	push   0x0
c000f027:	6a 00                	push   0x0
c000f029:	50                   	push   eax
c000f02a:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000f02d:	83 c4 20             	add    esp,0x20
c000f030:	83 ec 0c             	sub    esp,0xc
c000f033:	68 32 e7 00 c0       	push   0xc000e732
c000f038:	e8 53 f3 00 00       	call   c001e390 <setupMultitasking(void (*)())>
c000f03d:	83 c4 14             	add    esp,0x14
c000f040:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f045:	5b                   	pop    ebx
c000f046:	5e                   	pop    esi
c000f047:	c3                   	ret    

c000f048 <Computer::disableNMI()>:
c000f048:	6a 00                	push   0x0
c000f04a:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000f04e:	e8 07 ff ff ff       	call   c000ef5a <Computer::enableNMI(bool)>
c000f053:	58                   	pop    eax
c000f054:	5a                   	pop    edx
c000f055:	c3                   	ret    

c000f056 <Computer::writeCMOS(unsigned char, unsigned char)>:
c000f056:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f05a:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000f061:	19 c0                	sbb    eax,eax
c000f063:	83 e0 80             	and    eax,0xffffff80
c000f066:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000f06a:	e6 70                	out    0x70,al
c000f06c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f070:	e6 71                	out    0x71,al
c000f072:	c3                   	ret    
c000f073:	90                   	nop

c000f074 <Computer::handleNMI()>:
c000f074:	56                   	push   esi
c000f075:	53                   	push   ebx
c000f076:	83 ec 10             	sub    esp,0x10
c000f079:	e4 92                	in     al,0x92
c000f07b:	89 c6                	mov    esi,eax
c000f07d:	e4 61                	in     al,0x61
c000f07f:	68 8a aa 02 c0       	push   0xc002aa8a
c000f084:	88 c3                	mov    bl,al
c000f086:	e8 66 3e 00 00       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c000f08b:	83 c4 10             	add    esp,0x10
c000f08e:	83 e6 10             	and    esi,0x10
c000f091:	75 0d                	jne    c000f0a0 <Computer::handleNMI()+0x2c>
c000f093:	f6 c3 40             	test   bl,0x40
c000f096:	75 1d                	jne    c000f0b5 <Computer::handleNMI()+0x41>
c000f098:	84 db                	test   bl,bl
c000f09a:	78 2d                	js     c000f0c9 <Computer::handleNMI()+0x55>
c000f09c:	58                   	pop    eax
c000f09d:	5b                   	pop    ebx
c000f09e:	5e                   	pop    esi
c000f09f:	c3                   	ret    
c000f0a0:	83 ec 0c             	sub    esp,0xc
c000f0a3:	68 9b aa 02 c0       	push   0xc002aa9b
c000f0a8:	e8 04 b8 00 00       	call   c001a8b1 <Krnl::panic(char const*)>
c000f0ad:	83 c4 10             	add    esp,0x10
c000f0b0:	f6 c3 40             	test   bl,0x40
c000f0b3:	74 e3                	je     c000f098 <Computer::handleNMI()+0x24>
c000f0b5:	83 ec 0c             	sub    esp,0xc
c000f0b8:	68 a8 aa 02 c0       	push   0xc002aaa8
c000f0bd:	e8 ef b7 00 00       	call   c001a8b1 <Krnl::panic(char const*)>
c000f0c2:	83 c4 10             	add    esp,0x10
c000f0c5:	84 db                	test   bl,bl
c000f0c7:	79 d3                	jns    c000f09c <Computer::handleNMI()+0x28>
c000f0c9:	c7 44 24 10 b2 aa 02 c0 	mov    DWORD PTR [esp+0x10],0xc002aab2
c000f0d1:	5a                   	pop    edx
c000f0d2:	5b                   	pop    ebx
c000f0d3:	5e                   	pop    esi
c000f0d4:	e9 d8 b7 00 00       	jmp    c001a8b1 <Krnl::panic(char const*)>
c000f0d9:	90                   	nop

c000f0da <Computer::setDiskActivityLight(int, bool)>:
c000f0da:	56                   	push   esi
c000f0db:	53                   	push   ebx
c000f0dc:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000f0e0:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000f0e5:	77 1b                	ja     c000f102 <Computer::setDiskActivityLight(int, bool)+0x28>
c000f0e7:	e4 92                	in     al,0x92
c000f0e9:	bb 40 00 00 00       	mov    ebx,0x40
c000f0ee:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000f0f2:	89 da                	mov    edx,ebx
c000f0f4:	d3 e2                	shl    edx,cl
c000f0f6:	89 f1                	mov    ecx,esi
c000f0f8:	f7 d2                	not    edx
c000f0fa:	d3 e3                	shl    ebx,cl
c000f0fc:	21 d0                	and    eax,edx
c000f0fe:	09 d8                	or     eax,ebx
c000f100:	e6 92                	out    0x92,al
c000f102:	5b                   	pop    ebx
c000f103:	5e                   	pop    esi
c000f104:	c3                   	ret    
c000f105:	90                   	nop

c000f106 <GDTEntry::setBase(unsigned int)>:
c000f106:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f10a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f10e:	89 c1                	mov    ecx,eax
c000f110:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000f114:	c1 e9 10             	shr    ecx,0x10
c000f117:	c1 e8 18             	shr    eax,0x18
c000f11a:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000f11d:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000f120:	c3                   	ret    
c000f121:	90                   	nop

c000f122 <GDTEntry::setLimit(unsigned int)>:
c000f122:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f126:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f12a:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000f12d:	66 89 01             	mov    WORD PTR [ecx],ax
c000f130:	83 e2 f0             	and    edx,0xfffffff0
c000f133:	c1 e8 10             	shr    eax,0x10
c000f136:	83 e0 0f             	and    eax,0xf
c000f139:	09 d0                	or     eax,edx
c000f13b:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000f13e:	c3                   	ret    
c000f13f:	90                   	nop

c000f140 <GDT::GDT()>:
c000f140:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f144:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f14a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f14e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f154:	90                   	nop
c000f155:	c3                   	ret    

c000f156 <GDT::addEntry(GDTEntry)>:
c000f156:	53                   	push   ebx
c000f157:	83 ec 0c             	sub    esp,0xc
c000f15a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000f15e:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f160:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000f167:	52                   	push   edx
c000f168:	50                   	push   eax
c000f169:	68 ec aa 02 c0       	push   0xc002aaec
c000f16e:	e8 7e 3d 00 00       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c000f173:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f175:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000f179:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f17d:	89 54 c3 04          	mov    DWORD PTR [ebx+eax*8+0x4],edx
c000f181:	89 4c c3 08          	mov    DWORD PTR [ebx+eax*8+0x8],ecx
c000f185:	8d 50 01             	lea    edx,[eax+0x1]
c000f188:	c1 e0 03             	shl    eax,0x3
c000f18b:	89 13                	mov    DWORD PTR [ebx],edx
c000f18d:	83 c4 18             	add    esp,0x18
c000f190:	5b                   	pop    ebx
c000f191:	c3                   	ret    

c000f192 <GDT::getNumberOfEntries()>:
c000f192:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f196:	8b 00                	mov    eax,DWORD PTR [eax]
c000f198:	c3                   	ret    
c000f199:	90                   	nop

c000f19a <GDT::flush()>:
c000f19a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f19e:	8b 10                	mov    edx,DWORD PTR [eax]
c000f1a0:	83 c0 04             	add    eax,0x4
c000f1a3:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000f1aa:	a3 72 ee 02 c0       	mov    ds:0xc002ee72,eax
c000f1af:	66 89 15 70 ee 02 c0 	mov    WORD PTR ds:0xc002ee70,dx
c000f1b6:	e9 95 12 ff ff       	jmp    c0000450 <loadGDT>
c000f1bb:	90                   	nop

c000f1bc <GDT::setup()>:
c000f1bc:	55                   	push   ebp
c000f1bd:	57                   	push   edi
c000f1be:	56                   	push   esi
c000f1bf:	53                   	push   ebx
c000f1c0:	83 ec 3c             	sub    esp,0x3c
c000f1c3:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000f1c7:	6a 00                	push   0x0
c000f1c9:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000f1cd:	53                   	push   ebx
c000f1ce:	e8 33 ff ff ff       	call   c000f106 <GDTEntry::setBase(unsigned int)>
c000f1d3:	6a 00                	push   0x0
c000f1d5:	53                   	push   ebx
c000f1d6:	e8 47 ff ff ff       	call   c000f122 <GDTEntry::setLimit(unsigned int)>
c000f1db:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000f1e3:	6a 00                	push   0x0
c000f1e5:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000f1e9:	53                   	push   ebx
c000f1ea:	e8 17 ff ff ff       	call   c000f106 <GDTEntry::setBase(unsigned int)>
c000f1ef:	68 ff ff ff 00       	push   0xffffff
c000f1f4:	53                   	push   ebx
c000f1f5:	e8 28 ff ff ff       	call   c000f122 <GDTEntry::setLimit(unsigned int)>
c000f1fa:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f1fe:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000f203:	0d 00 9a c0 00       	or     eax,0xc09a00
c000f208:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f20c:	83 c4 20             	add    esp,0x20
c000f20f:	6a 00                	push   0x0
c000f211:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000f215:	53                   	push   ebx
c000f216:	e8 eb fe ff ff       	call   c000f106 <GDTEntry::setBase(unsigned int)>
c000f21b:	68 ff ff ff 00       	push   0xffffff
c000f220:	53                   	push   ebx
c000f221:	e8 fc fe ff ff       	call   c000f122 <GDTEntry::setLimit(unsigned int)>
c000f226:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f22a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f22e:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000f232:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000f236:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000f23a:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000f23f:	0d 00 92 c0 00       	or     eax,0xc09200
c000f244:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f248:	89 d8                	mov    eax,ebx
c000f24a:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000f24e:	80 cc 60             	or     ah,0x60
c000f251:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f255:	83 c4 0c             	add    esp,0xc
c000f258:	89 f8                	mov    eax,edi
c000f25a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f25e:	80 cc 60             	or     ah,0x60
c000f261:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f265:	89 c7                	mov    edi,eax
c000f267:	55                   	push   ebp
c000f268:	e8 e9 fe ff ff       	call   c000f156 <GDT::addEntry(GDTEntry)>
c000f26d:	83 c4 0c             	add    esp,0xc
c000f270:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f274:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f278:	55                   	push   ebp
c000f279:	e8 d8 fe ff ff       	call   c000f156 <GDT::addEntry(GDTEntry)>
c000f27e:	83 c4 0c             	add    esp,0xc
c000f281:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f285:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f289:	55                   	push   ebp
c000f28a:	e8 c7 fe ff ff       	call   c000f156 <GDT::addEntry(GDTEntry)>
c000f28f:	83 c4 0c             	add    esp,0xc
c000f292:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f296:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f29a:	53                   	push   ebx
c000f29b:	51                   	push   ecx
c000f29c:	55                   	push   ebp
c000f29d:	e8 b4 fe ff ff       	call   c000f156 <GDT::addEntry(GDTEntry)>
c000f2a2:	83 c4 0c             	add    esp,0xc
c000f2a5:	57                   	push   edi
c000f2a6:	56                   	push   esi
c000f2a7:	55                   	push   ebp
c000f2a8:	e8 a9 fe ff ff       	call   c000f156 <GDT::addEntry(GDTEntry)>
c000f2ad:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000f2b0:	e8 e5 fe ff ff       	call   c000f19a <GDT::flush()>
c000f2b5:	83 c4 4c             	add    esp,0x4c
c000f2b8:	5b                   	pop    ebx
c000f2b9:	5e                   	pop    esi
c000f2ba:	5f                   	pop    edi
c000f2bb:	5d                   	pop    ebp
c000f2bc:	c3                   	ret    

c000f2bd <idleFunction(void*)>:
c000f2bd:	53                   	push   ebx
c000f2be:	83 ec 08             	sub    esp,0x8
c000f2c1:	a1 a8 23 03 c0       	mov    eax,ds:0xc00323a8
c000f2c6:	48                   	dec    eax
c000f2c7:	a3 a8 23 03 c0       	mov    ds:0xc00323a8,eax
c000f2cc:	75 01                	jne    c000f2cf <idleFunction(void*)+0x12>
c000f2ce:	fb                   	sti    
c000f2cf:	a1 68 ee 02 c0       	mov    eax,ds:0xc002ee68
c000f2d4:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c000f2da:	f6 82 92 11 00 00 04 	test   BYTE PTR [edx+0x1192],0x4
c000f2e1:	74 3c                	je     c000f31f <idleFunction(void*)+0x62>
c000f2e3:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000f2ea:	74 33                	je     c000f31f <idleFunction(void*)+0x62>
c000f2ec:	31 db                	xor    ebx,ebx
c000f2ee:	52                   	push   edx
c000f2ef:	52                   	push   edx
c000f2f0:	68 e1 00 00 00       	push   0xe1
c000f2f5:	50                   	push   eax
c000f2f6:	e8 d5 fb ff ff       	call   c000eed0 <Computer::rdmsr(unsigned int)>
c000f2fb:	53                   	push   ebx
c000f2fc:	83 e0 02             	and    eax,0x2
c000f2ff:	50                   	push   eax
c000f300:	68 e1 00 00 00       	push   0xe1
c000f305:	ff 35 68 ee 02 c0    	push   DWORD PTR ds:0xc002ee68
c000f30b:	e8 ec fb ff ff       	call   c000eefc <Computer::wrmsr(unsigned int, unsigned long long)>
c000f310:	83 c4 20             	add    esp,0x20
c000f313:	e8 67 0f ff ff       	call   c000027f <doTPAUSE>
c000f318:	e8 c3 9b 01 00       	call   c0028ee0 <idleCommon()>
c000f31d:	eb f4                	jmp    c000f313 <idleFunction(void*)+0x56>
c000f31f:	fb                   	sti    
c000f320:	f4                   	hlt    
c000f321:	e8 ba 9b 01 00       	call   c0028ee0 <idleCommon()>
c000f326:	eb f7                	jmp    c000f31f <idleFunction(void*)+0x62>

c000f328 <IDTEntry::IDTEntry(bool)>:
c000f328:	83 ec 04             	sub    esp,0x4
c000f32b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f32f:	88 04 24             	mov    BYTE PTR [esp],al
c000f332:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f336:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000f33c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f340:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000f344:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f348:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f34b:	83 e2 f0             	and    edx,0xfffffff0
c000f34e:	83 ca 0e             	or     edx,0xe
c000f351:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f354:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f358:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f35b:	83 e2 ef             	and    edx,0xffffffef
c000f35e:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f361:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000f365:	74 04                	je     c000f36b <IDTEntry::IDTEntry(bool)+0x43>
c000f367:	b2 03                	mov    dl,0x3
c000f369:	eb 02                	jmp    c000f36d <IDTEntry::IDTEntry(bool)+0x45>
c000f36b:	b2 00                	mov    dl,0x0
c000f36d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f371:	83 e2 03             	and    edx,0x3
c000f374:	88 d1                	mov    cl,dl
c000f376:	c1 e1 05             	shl    ecx,0x5
c000f379:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f37c:	83 e2 9f             	and    edx,0xffffff9f
c000f37f:	09 ca                	or     edx,ecx
c000f381:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f384:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f388:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f38b:	83 ca 80             	or     edx,0xffffff80
c000f38e:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f391:	90                   	nop
c000f392:	83 c4 04             	add    esp,0x4
c000f395:	c3                   	ret    

c000f396 <IDTEntry::setOffset(unsigned int)>:
c000f396:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f39a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f39e:	66 89 02             	mov    WORD PTR [edx],ax
c000f3a1:	c1 e8 10             	shr    eax,0x10
c000f3a4:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000f3a8:	c3                   	ret    
c000f3a9:	90                   	nop

c000f3aa <IDT::IDT()>:
c000f3aa:	90                   	nop
c000f3ab:	c3                   	ret    

c000f3ac <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000f3ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f3b0:	83 c0 30             	add    eax,0x30
c000f3b3:	c3                   	ret    

c000f3b4 <IDT::addEntry(IDTEntry, int)>:
c000f3b4:	53                   	push   ebx
c000f3b5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f3b9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000f3bd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f3c1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f3c5:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000f3c8:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000f3cc:	5b                   	pop    ebx
c000f3cd:	c3                   	ret    

c000f3ce <IDT::addEntry(int, void (*)(), bool)>:
c000f3ce:	53                   	push   ebx
c000f3cf:	83 ec 10             	sub    esp,0x10
c000f3d2:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000f3d7:	50                   	push   eax
c000f3d8:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000f3dc:	53                   	push   ebx
c000f3dd:	e8 46 ff ff ff       	call   c000f328 <IDTEntry::IDTEntry(bool)>
c000f3e2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f3e6:	53                   	push   ebx
c000f3e7:	e8 aa ff ff ff       	call   c000f396 <IDTEntry::setOffset(unsigned int)>
c000f3ec:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f3f0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f3f4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f3f8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000f3fc:	e8 b3 ff ff ff       	call   c000f3b4 <IDT::addEntry(IDTEntry, int)>
c000f401:	83 c4 30             	add    esp,0x30
c000f404:	5b                   	pop    ebx
c000f405:	c3                   	ret    

c000f406 <IDT::flush()>:
c000f406:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f40a:	66 c7 05 78 ee 02 c0 ff 07 	mov    WORD PTR ds:0xc002ee78,0x7ff
c000f413:	a3 7a ee 02 c0       	mov    ds:0xc002ee7a,eax
c000f418:	0f 01 1d 78 ee 02 c0 	lidtd  ds:0xc002ee78
c000f41f:	c3                   	ret    

c000f420 <IDT::setup()>:
c000f420:	57                   	push   edi
c000f421:	56                   	push   esi
c000f422:	53                   	push   ebx
c000f423:	83 ec 10             	sub    esp,0x10
c000f426:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f42a:	6a 00                	push   0x0
c000f42c:	68 70 04 00 c0       	push   0xc0000470
c000f431:	6a 00                	push   0x0
c000f433:	53                   	push   ebx
c000f434:	e8 95 ff ff ff       	call   c000f3ce <IDT::addEntry(int, void (*)(), bool)>
c000f439:	6a 00                	push   0x0
c000f43b:	68 80 04 00 c0       	push   0xc0000480
c000f440:	6a 01                	push   0x1
c000f442:	53                   	push   ebx
c000f443:	e8 86 ff ff ff       	call   c000f3ce <IDT::addEntry(int, void (*)(), bool)>
c000f448:	83 c4 20             	add    esp,0x20
c000f44b:	6a 00                	push   0x0
c000f44d:	68 8a 04 00 c0       	push   0xc000048a
c000f452:	6a 02                	push   0x2
c000f454:	53                   	push   ebx
c000f455:	e8 74 ff ff ff       	call   c000f3ce <IDT::addEntry(int, void (*)(), bool)>
c000f45a:	6a 00                	push   0x0
c000f45c:	68 94 04 00 c0       	push   0xc0000494
c000f461:	6a 03                	push   0x3
c000f463:	53                   	push   ebx
c000f464:	e8 65 ff ff ff       	call   c000f3ce <IDT::addEntry(int, void (*)(), bool)>
c000f469:	83 c4 20             	add    esp,0x20
c000f46c:	6a 00                	push   0x0
c000f46e:	68 9e 04 00 c0       	push   0xc000049e
c000f473:	6a 04                	push   0x4
c000f475:	53                   	push   ebx
c000f476:	e8 53 ff ff ff       	call   c000f3ce <IDT::addEntry(int, void (*)(), bool)>
c000f47b:	6a 00                	push   0x0
c000f47d:	68 a8 04 00 c0       	push   0xc00004a8
c000f482:	6a 05                	push   0x5
c000f484:	53                   	push   ebx
c000f485:	e8 44 ff ff ff       	call   c000f3ce <IDT::addEntry(int, void (*)(), bool)>
c000f48a:	83 c4 20             	add    esp,0x20
c000f48d:	6a 00                	push   0x0
c000f48f:	68 b2 04 00 c0       	push   0xc00004b2
c000f494:	6a 06                	push   0x6
c000f496:	53                   	push   ebx
c000f497:	e8 32 ff ff ff       	call   c000f3ce <IDT::addEntry(int, void (*)(), bool)>
c000f49c:	6a 00                	push   0x0
c000f49e:	68 bc 04 00 c0       	push   0xc00004bc
c000f4a3:	6a 07                	push   0x7
c000f4a5:	53                   	push   ebx
c000f4a6:	e8 23 ff ff ff       	call   c000f3ce <IDT::addEntry(int, void (*)(), bool)>
c000f4ab:	83 c4 20             	add    esp,0x20
c000f4ae:	6a 00                	push   0x0
c000f4b0:	68 c6 04 00 c0       	push   0xc00004c6
c000f4b5:	6a 08                	push   0x8
c000f4b7:	53                   	push   ebx
c000f4b8:	e8 11 ff ff ff       	call   c000f3ce <IDT::addEntry(int, void (*)(), bool)>
c000f4bd:	6a 00                	push   0x0
c000f4bf:	68 ce 04 00 c0       	push   0xc00004ce
c000f4c4:	6a 09                	push   0x9
c000f4c6:	53                   	push   ebx
c000f4c7:	e8 02 ff ff ff       	call   c000f3ce <IDT::addEntry(int, void (*)(), bool)>
c000f4cc:	83 c4 20             	add    esp,0x20
c000f4cf:	6a 00                	push   0x0
c000f4d1:	68 d8 04 00 c0       	push   0xc00004d8
c000f4d6:	6a 0a                	push   0xa
c000f4d8:	53                   	push   ebx
c000f4d9:	e8 f0 fe ff ff       	call   c000f3ce <IDT::addEntry(int, void (*)(), bool)>
c000f4de:	6a 00                	push   0x0
c000f4e0:	68 e0 04 00 c0       	push   0xc00004e0
c000f4e5:	6a 0b                	push   0xb
c000f4e7:	53                   	push   ebx
c000f4e8:	e8 e1 fe ff ff       	call   c000f3ce <IDT::addEntry(int, void (*)(), bool)>
c000f4ed:	83 c4 20             	add    esp,0x20
c000f4f0:	6a 00                	push   0x0
c000f4f2:	68 e8 04 00 c0       	push   0xc00004e8
c000f4f7:	6a 0c                	push   0xc
c000f4f9:	53                   	push   ebx
c000f4fa:	e8 cf fe ff ff       	call   c000f3ce <IDT::addEntry(int, void (*)(), bool)>
c000f4ff:	6a 00                	push   0x0
c000f501:	68 f0 04 00 c0       	push   0xc00004f0
c000f506:	6a 0d                	push   0xd
c000f508:	53                   	push   ebx
c000f509:	e8 c0 fe ff ff       	call   c000f3ce <IDT::addEntry(int, void (*)(), bool)>
c000f50e:	83 c4 20             	add    esp,0x20
c000f511:	6a 00                	push   0x0
c000f513:	68 f8 04 00 c0       	push   0xc00004f8
c000f518:	6a 0e                	push   0xe
c000f51a:	53                   	push   ebx
c000f51b:	e8 ae fe ff ff       	call   c000f3ce <IDT::addEntry(int, void (*)(), bool)>
c000f520:	6a 00                	push   0x0
c000f522:	68 00 05 00 c0       	push   0xc0000500
c000f527:	6a 0f                	push   0xf
c000f529:	53                   	push   ebx
c000f52a:	e8 9f fe ff ff       	call   c000f3ce <IDT::addEntry(int, void (*)(), bool)>
c000f52f:	83 c4 20             	add    esp,0x20
c000f532:	6a 00                	push   0x0
c000f534:	68 0a 05 00 c0       	push   0xc000050a
c000f539:	6a 10                	push   0x10
c000f53b:	53                   	push   ebx
c000f53c:	e8 8d fe ff ff       	call   c000f3ce <IDT::addEntry(int, void (*)(), bool)>
c000f541:	6a 00                	push   0x0
c000f543:	68 14 05 00 c0       	push   0xc0000514
c000f548:	6a 11                	push   0x11
c000f54a:	53                   	push   ebx
c000f54b:	e8 7e fe ff ff       	call   c000f3ce <IDT::addEntry(int, void (*)(), bool)>
c000f550:	83 c4 20             	add    esp,0x20
c000f553:	6a 00                	push   0x0
c000f555:	68 1e 05 00 c0       	push   0xc000051e
c000f55a:	6a 12                	push   0x12
c000f55c:	53                   	push   ebx
c000f55d:	e8 6c fe ff ff       	call   c000f3ce <IDT::addEntry(int, void (*)(), bool)>
c000f562:	6a 01                	push   0x1
c000f564:	68 b8 05 00 c0       	push   0xc00005b8
c000f569:	6a 60                	push   0x60
c000f56b:	53                   	push   ebx
c000f56c:	e8 5d fe ff ff       	call   c000f3ce <IDT::addEntry(int, void (*)(), bool)>
c000f571:	83 c4 20             	add    esp,0x20
c000f574:	6a 00                	push   0x0
c000f576:	68 bf 05 00 c0       	push   0xc00005bf
c000f57b:	6a 20                	push   0x20
c000f57d:	53                   	push   ebx
c000f57e:	e8 4b fe ff ff       	call   c000f3ce <IDT::addEntry(int, void (*)(), bool)>
c000f583:	6a 00                	push   0x0
c000f585:	68 aa 05 00 c0       	push   0xc00005aa
c000f58a:	6a 21                	push   0x21
c000f58c:	53                   	push   ebx
c000f58d:	e8 3c fe ff ff       	call   c000f3ce <IDT::addEntry(int, void (*)(), bool)>
c000f592:	83 c4 20             	add    esp,0x20
c000f595:	6a 00                	push   0x0
c000f597:	68 b1 05 00 c0       	push   0xc00005b1
c000f59c:	6a 22                	push   0x22
c000f59e:	53                   	push   ebx
c000f59f:	e8 2a fe ff ff       	call   c000f3ce <IDT::addEntry(int, void (*)(), bool)>
c000f5a4:	6a 00                	push   0x0
c000f5a6:	68 28 05 00 c0       	push   0xc0000528
c000f5ab:	6a 23                	push   0x23
c000f5ad:	53                   	push   ebx
c000f5ae:	e8 1b fe ff ff       	call   c000f3ce <IDT::addEntry(int, void (*)(), bool)>
c000f5b3:	83 c4 20             	add    esp,0x20
c000f5b6:	6a 00                	push   0x0
c000f5b8:	68 32 05 00 c0       	push   0xc0000532
c000f5bd:	6a 24                	push   0x24
c000f5bf:	53                   	push   ebx
c000f5c0:	e8 09 fe ff ff       	call   c000f3ce <IDT::addEntry(int, void (*)(), bool)>
c000f5c5:	6a 00                	push   0x0
c000f5c7:	68 3c 05 00 c0       	push   0xc000053c
c000f5cc:	6a 25                	push   0x25
c000f5ce:	53                   	push   ebx
c000f5cf:	e8 fa fd ff ff       	call   c000f3ce <IDT::addEntry(int, void (*)(), bool)>
c000f5d4:	83 c4 20             	add    esp,0x20
c000f5d7:	6a 00                	push   0x0
c000f5d9:	68 46 05 00 c0       	push   0xc0000546
c000f5de:	6a 26                	push   0x26
c000f5e0:	53                   	push   ebx
c000f5e1:	e8 e8 fd ff ff       	call   c000f3ce <IDT::addEntry(int, void (*)(), bool)>
c000f5e6:	6a 00                	push   0x0
c000f5e8:	68 50 05 00 c0       	push   0xc0000550
c000f5ed:	6a 27                	push   0x27
c000f5ef:	53                   	push   ebx
c000f5f0:	e8 d9 fd ff ff       	call   c000f3ce <IDT::addEntry(int, void (*)(), bool)>
c000f5f5:	83 c4 20             	add    esp,0x20
c000f5f8:	6a 00                	push   0x0
c000f5fa:	68 5a 05 00 c0       	push   0xc000055a
c000f5ff:	6a 28                	push   0x28
c000f601:	53                   	push   ebx
c000f602:	e8 c7 fd ff ff       	call   c000f3ce <IDT::addEntry(int, void (*)(), bool)>
c000f607:	6a 00                	push   0x0
c000f609:	68 64 05 00 c0       	push   0xc0000564
c000f60e:	6a 29                	push   0x29
c000f610:	53                   	push   ebx
c000f611:	e8 b8 fd ff ff       	call   c000f3ce <IDT::addEntry(int, void (*)(), bool)>
c000f616:	83 c4 20             	add    esp,0x20
c000f619:	6a 00                	push   0x0
c000f61b:	68 6e 05 00 c0       	push   0xc000056e
c000f620:	6a 2a                	push   0x2a
c000f622:	53                   	push   ebx
c000f623:	e8 a6 fd ff ff       	call   c000f3ce <IDT::addEntry(int, void (*)(), bool)>
c000f628:	6a 00                	push   0x0
c000f62a:	68 78 05 00 c0       	push   0xc0000578
c000f62f:	6a 2b                	push   0x2b
c000f631:	53                   	push   ebx
c000f632:	e8 97 fd ff ff       	call   c000f3ce <IDT::addEntry(int, void (*)(), bool)>
c000f637:	83 c4 20             	add    esp,0x20
c000f63a:	6a 00                	push   0x0
c000f63c:	68 82 05 00 c0       	push   0xc0000582
c000f641:	6a 2c                	push   0x2c
c000f643:	53                   	push   ebx
c000f644:	e8 85 fd ff ff       	call   c000f3ce <IDT::addEntry(int, void (*)(), bool)>
c000f649:	6a 00                	push   0x0
c000f64b:	68 8c 05 00 c0       	push   0xc000058c
c000f650:	6a 2d                	push   0x2d
c000f652:	53                   	push   ebx
c000f653:	e8 76 fd ff ff       	call   c000f3ce <IDT::addEntry(int, void (*)(), bool)>
c000f658:	83 c4 20             	add    esp,0x20
c000f65b:	6a 00                	push   0x0
c000f65d:	68 96 05 00 c0       	push   0xc0000596
c000f662:	6a 2e                	push   0x2e
c000f664:	53                   	push   ebx
c000f665:	e8 64 fd ff ff       	call   c000f3ce <IDT::addEntry(int, void (*)(), bool)>
c000f66a:	6a 00                	push   0x0
c000f66c:	68 a0 05 00 c0       	push   0xc00005a0
c000f671:	6a 2f                	push   0x2f
c000f673:	53                   	push   ebx
c000f674:	e8 55 fd ff ff       	call   c000f3ce <IDT::addEntry(int, void (*)(), bool)>
c000f679:	83 c4 20             	add    esp,0x20
c000f67c:	6a 00                	push   0x0
c000f67e:	68 f5 05 00 c0       	push   0xc00005f5
c000f683:	6a 30                	push   0x30
c000f685:	53                   	push   ebx
c000f686:	e8 43 fd ff ff       	call   c000f3ce <IDT::addEntry(int, void (*)(), bool)>
c000f68b:	6a 00                	push   0x0
c000f68d:	68 ff 05 00 c0       	push   0xc00005ff
c000f692:	6a 31                	push   0x31
c000f694:	53                   	push   ebx
c000f695:	e8 34 fd ff ff       	call   c000f3ce <IDT::addEntry(int, void (*)(), bool)>
c000f69a:	83 c4 20             	add    esp,0x20
c000f69d:	6a 00                	push   0x0
c000f69f:	68 09 06 00 c0       	push   0xc0000609
c000f6a4:	6a 32                	push   0x32
c000f6a6:	53                   	push   ebx
c000f6a7:	e8 22 fd ff ff       	call   c000f3ce <IDT::addEntry(int, void (*)(), bool)>
c000f6ac:	6a 00                	push   0x0
c000f6ae:	68 13 06 00 c0       	push   0xc0000613
c000f6b3:	6a 33                	push   0x33
c000f6b5:	53                   	push   ebx
c000f6b6:	e8 13 fd ff ff       	call   c000f3ce <IDT::addEntry(int, void (*)(), bool)>
c000f6bb:	83 c4 20             	add    esp,0x20
c000f6be:	6a 00                	push   0x0
c000f6c0:	68 1d 06 00 c0       	push   0xc000061d
c000f6c5:	6a 34                	push   0x34
c000f6c7:	53                   	push   ebx
c000f6c8:	e8 01 fd ff ff       	call   c000f3ce <IDT::addEntry(int, void (*)(), bool)>
c000f6cd:	6a 00                	push   0x0
c000f6cf:	68 27 06 00 c0       	push   0xc0000627
c000f6d4:	6a 35                	push   0x35
c000f6d6:	53                   	push   ebx
c000f6d7:	e8 f2 fc ff ff       	call   c000f3ce <IDT::addEntry(int, void (*)(), bool)>
c000f6dc:	83 c4 20             	add    esp,0x20
c000f6df:	6a 00                	push   0x0
c000f6e1:	68 31 06 00 c0       	push   0xc0000631
c000f6e6:	6a 36                	push   0x36
c000f6e8:	53                   	push   ebx
c000f6e9:	e8 e0 fc ff ff       	call   c000f3ce <IDT::addEntry(int, void (*)(), bool)>
c000f6ee:	6a 00                	push   0x0
c000f6f0:	68 3b 06 00 c0       	push   0xc000063b
c000f6f5:	6a 37                	push   0x37
c000f6f7:	53                   	push   ebx
c000f6f8:	e8 d1 fc ff ff       	call   c000f3ce <IDT::addEntry(int, void (*)(), bool)>
c000f6fd:	83 c4 20             	add    esp,0x20
c000f700:	e8 1f 26 00 00       	call   c0011d24 <Virt::getAKernelVAS()>
c000f705:	52                   	push   edx
c000f706:	6a 03                	push   0x3
c000f708:	6a 02                	push   0x2
c000f70a:	50                   	push   eax
c000f70b:	e8 12 2d 00 00       	call   c0012422 <VAS::allocatePages(int, int)>
c000f710:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f717:	89 c6                	mov    esi,eax
c000f719:	e8 14 02 00 00       	call   c000f932 <malloc>
c000f71e:	81 c6 00 20 00 00    	add    esi,0x2000
c000f724:	89 04 24             	mov    DWORD PTR [esp],eax
c000f727:	89 c7                	mov    edi,eax
c000f729:	e8 e8 1c 00 00       	call   c0011416 <TSS::TSS()>
c000f72e:	83 c4 0c             	add    esp,0xc
c000f731:	68 c6 04 00 c0       	push   0xc00004c6
c000f736:	56                   	push   esi
c000f737:	57                   	push   edi
c000f738:	e8 19 1d 00 00       	call   c0011456 <TSS::setup(unsigned long, unsigned long)>
c000f73d:	59                   	pop    ecx
c000f73e:	89 c6                	mov    esi,eax
c000f740:	5f                   	pop    edi
c000f741:	6a 00                	push   0x0
c000f743:	8d 44 24 14          	lea    eax,[esp+0x14]
c000f747:	50                   	push   eax
c000f748:	e8 db fb ff ff       	call   c000f328 <IDTEntry::IDTEntry(bool)>
c000f74d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f751:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000f756:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000f75d:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000f763:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f767:	80 ce 05             	or     dh,0x5
c000f76a:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000f76d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f771:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f775:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000f778:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f77b:	e8 86 fc ff ff       	call   c000f406 <IDT::flush()>
c000f780:	83 c4 20             	add    esp,0x20
c000f783:	5b                   	pop    ebx
c000f784:	5e                   	pop    esi
c000f785:	5f                   	pop    edi
c000f786:	c3                   	ret    

c000f787 <sbrk>:
c000f787:	55                   	push   ebp
c000f788:	57                   	push   edi
c000f789:	56                   	push   esi
c000f78a:	53                   	push   ebx
c000f78b:	83 ec 1c             	sub    esp,0x1c
c000f78e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f792:	85 c0                	test   eax,eax
c000f794:	74 3e                	je     c000f7d4 <sbrk+0x4d>
c000f796:	78 43                	js     c000f7db <sbrk+0x54>
c000f798:	8b 15 68 ee 02 c0    	mov    edx,DWORD PTR ds:0xc002ee68
c000f79e:	8b 92 60 01 00 00    	mov    edx,DWORD PTR [edx+0x160]
c000f7a4:	8a 92 91 11 00 00    	mov    dl,BYTE PTR [edx+0x1191]
c000f7aa:	83 e2 01             	and    edx,0x1
c000f7ad:	88 54 24 07          	mov    BYTE PTR [esp+0x7],dl
c000f7b1:	8b 0d 94 dd 02 c0    	mov    ecx,DWORD PTR ds:0xc002dd94
c000f7b7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000f7bb:	05 ff 0f 00 00       	add    eax,0xfff
c000f7c0:	89 c2                	mov    edx,eax
c000f7c2:	78 2f                	js     c000f7f3 <sbrk+0x6c>
c000f7c4:	c1 fa 0c             	sar    edx,0xc
c000f7c7:	89 d7                	mov    edi,edx
c000f7c9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f7cd:	be 00 00 00 00       	mov    esi,0x0
c000f7d2:	eb 36                	jmp    c000f80a <sbrk+0x83>
c000f7d4:	a1 94 dd 02 c0       	mov    eax,ds:0xc002dd94
c000f7d9:	eb 74                	jmp    c000f84f <sbrk+0xc8>
c000f7db:	83 ec 08             	sub    esp,0x8
c000f7de:	50                   	push   eax
c000f7df:	68 08 ab 02 c0       	push   0xc002ab08
c000f7e4:	e8 08 37 00 00       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c000f7e9:	83 c4 10             	add    esp,0x10
c000f7ec:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f7f1:	eb 5c                	jmp    c000f84f <sbrk+0xc8>
c000f7f3:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000f7f9:	eb c9                	jmp    c000f7c4 <sbrk+0x3d>
c000f7fb:	81 05 94 dd 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc002dd94,0x1000
c000f805:	46                   	inc    esi
c000f806:	39 f7                	cmp    edi,esi
c000f808:	74 34                	je     c000f83e <sbrk+0xb7>
c000f80a:	e8 15 25 00 00       	call   c0011d24 <Virt::getAKernelVAS()>
c000f80f:	89 c3                	mov    ebx,eax
c000f811:	8b 2d 94 dd 02 c0    	mov    ebp,DWORD PTR ds:0xc002dd94
c000f817:	e8 82 07 00 00       	call   c000ff9e <Phys::allocatePage()>
c000f81c:	68 01 0c 00 00       	push   0xc01
c000f821:	55                   	push   ebp
c000f822:	50                   	push   eax
c000f823:	53                   	push   ebx
c000f824:	e8 f9 2a 00 00       	call   c0012322 <VAS::mapPage(unsigned long, unsigned long, int)>
c000f829:	83 c4 10             	add    esp,0x10
c000f82c:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f831:	74 c8                	je     c000f7fb <sbrk+0x74>
c000f833:	8b 1d 94 dd 02 c0    	mov    ebx,DWORD PTR ds:0xc002dd94
c000f839:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f83c:	eb bd                	jmp    c000f7fb <sbrk+0x74>
c000f83e:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f843:	75 12                	jne    c000f857 <sbrk+0xd0>
c000f845:	0f 20 d8             	mov    eax,cr3
c000f848:	0f 22 d8             	mov    cr3,eax
c000f84b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f84f:	83 c4 1c             	add    esp,0x1c
c000f852:	5b                   	pop    ebx
c000f853:	5e                   	pop    esi
c000f854:	5f                   	pop    edi
c000f855:	5d                   	pop    ebp
c000f856:	c3                   	ret    
c000f857:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000f85b:	89 cb                	mov    ebx,ecx
c000f85d:	c1 eb 0a             	shr    ebx,0xa
c000f860:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000f866:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000f86c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f870:	c1 e0 0c             	shl    eax,0xc
c000f873:	01 c8                	add    eax,ecx
c000f875:	c1 e8 0a             	shr    eax,0xa
c000f878:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f87d:	2d 00 00 40 00       	sub    eax,0x400000
c000f882:	39 c3                	cmp    ebx,eax
c000f884:	77 c5                	ja     c000f84b <sbrk+0xc4>
c000f886:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f889:	81 c3 00 10 00 00    	add    ebx,0x1000
c000f88f:	39 d8                	cmp    eax,ebx
c000f891:	73 f3                	jae    c000f886 <sbrk+0xff>
c000f893:	eb b6                	jmp    c000f84b <sbrk+0xc4>

c000f895 <mmap>:
c000f895:	83 ec 18             	sub    esp,0x18
c000f898:	68 38 ab 02 c0       	push   0xc002ab38
c000f89d:	e8 0f b0 00 00       	call   c001a8b1 <Krnl::panic(char const*)>
c000f8a2:	b8 00 00 00 00       	mov    eax,0x0
c000f8a7:	83 c4 1c             	add    esp,0x1c
c000f8aa:	c3                   	ret    

c000f8ab <munmap>:
c000f8ab:	83 ec 18             	sub    esp,0x18
c000f8ae:	68 3d ab 02 c0       	push   0xc002ab3d
c000f8b3:	e8 f9 af 00 00       	call   c001a8b1 <Krnl::panic(char const*)>
c000f8b8:	b8 00 00 00 00       	mov    eax,0x0
c000f8bd:	83 c4 1c             	add    esp,0x1c
c000f8c0:	c3                   	ret    

c000f8c1 <liballoc_lock()>:
c000f8c1:	fa                   	cli    
c000f8c2:	ff 05 a8 23 03 c0    	inc    DWORD PTR ds:0xc00323a8
c000f8c8:	b8 00 00 00 00       	mov    eax,0x0
c000f8cd:	c3                   	ret    

c000f8ce <liballoc_unlock()>:
c000f8ce:	a1 a8 23 03 c0       	mov    eax,ds:0xc00323a8
c000f8d3:	48                   	dec    eax
c000f8d4:	a3 a8 23 03 c0       	mov    ds:0xc00323a8,eax
c000f8d9:	75 01                	jne    c000f8dc <liballoc_unlock()+0xe>
c000f8db:	fb                   	sti    
c000f8dc:	b8 00 00 00 00       	mov    eax,0x0
c000f8e1:	c3                   	ret    

c000f8e2 <liballoc_alloc(int)>:
c000f8e2:	83 ec 0c             	sub    esp,0xc
c000f8e5:	e8 3a 24 00 00       	call   c0011d24 <Virt::getAKernelVAS()>
c000f8ea:	83 ec 04             	sub    esp,0x4
c000f8ed:	68 01 08 00 00       	push   0x801
c000f8f2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f8f6:	50                   	push   eax
c000f8f7:	e8 26 2b 00 00       	call   c0012422 <VAS::allocatePages(int, int)>
c000f8fc:	83 c4 1c             	add    esp,0x1c
c000f8ff:	c3                   	ret    

c000f900 <liballoc_free(void*, int)>:
c000f900:	83 ec 0c             	sub    esp,0xc
c000f903:	e8 1c 24 00 00       	call   c0011d24 <Virt::getAKernelVAS()>
c000f908:	83 ec 08             	sub    esp,0x8
c000f90b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f90f:	50                   	push   eax
c000f910:	e8 b9 27 00 00       	call   c00120ce <VAS::freeAllocatedPages(unsigned long)>
c000f915:	b8 00 00 00 00       	mov    eax,0x0
c000f91a:	83 c4 1c             	add    esp,0x1c
c000f91d:	c3                   	ret    

c000f91e <realloc>:
c000f91e:	83 ec 14             	sub    esp,0x14
c000f921:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f925:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f929:	e8 4a 1d ff ff       	call   c0001678 <dlrealloc>
c000f92e:	83 c4 1c             	add    esp,0x1c
c000f931:	c3                   	ret    

c000f932 <malloc>:
c000f932:	83 ec 18             	sub    esp,0x18
c000f935:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f939:	e8 fd 17 ff ff       	call   c000113b <dlmalloc>
c000f93e:	83 c4 1c             	add    esp,0x1c
c000f941:	c3                   	ret    

c000f942 <free>:
c000f942:	83 ec 18             	sub    esp,0x18
c000f945:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f949:	e8 92 14 ff ff       	call   c0000de0 <dlfree>
c000f94e:	83 c4 1c             	add    esp,0x1c
c000f951:	c3                   	ret    

c000f952 <rfree>:
c000f952:	83 ec 18             	sub    esp,0x18
c000f955:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f959:	e8 82 14 ff ff       	call   c0000de0 <dlfree>
c000f95e:	83 c4 1c             	add    esp,0x1c
c000f961:	c3                   	ret    

c000f962 <calloc>:
c000f962:	56                   	push   esi
c000f963:	53                   	push   ebx
c000f964:	83 ec 10             	sub    esp,0x10
c000f967:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f96b:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000f970:	53                   	push   ebx
c000f971:	e8 bc ff ff ff       	call   c000f932 <malloc>
c000f976:	89 c6                	mov    esi,eax
c000f978:	83 c4 0c             	add    esp,0xc
c000f97b:	53                   	push   ebx
c000f97c:	6a 00                	push   0x0
c000f97e:	50                   	push   eax
c000f97f:	e8 18 0e ff ff       	call   c000079c <memset>
c000f984:	89 f0                	mov    eax,esi
c000f986:	83 c4 14             	add    esp,0x14
c000f989:	5b                   	pop    ebx
c000f98a:	5e                   	pop    esi
c000f98b:	c3                   	ret    

c000f98c <hwTextMode_loadInData(VgaText*)>:
c000f98c:	55                   	push   ebp
c000f98d:	a1 a0 dd 02 c0       	mov    eax,ds:0xc002dda0
c000f992:	57                   	push   edi
c000f993:	56                   	push   esi
c000f994:	53                   	push   ebx
c000f995:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000f999:	8b 57 10             	mov    edx,DWORD PTR [edi+0x10]
c000f99c:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c000f99f:	85 d2                	test   edx,edx
c000f9a1:	7e 29                	jle    c000f9cc <hwTextMode_loadInData(VgaText*)+0x40>
c000f9a3:	8d a8 a0 00 00 00    	lea    ebp,[eax+0xa0]
c000f9a9:	31 f6                	xor    esi,esi
c000f9ab:	29 cd                	sub    ebp,ecx
c000f9ad:	8d 1c 29             	lea    ebx,[ecx+ebp*1]
c000f9b0:	31 c0                	xor    eax,eax
c000f9b2:	66 8b 14 41          	mov    dx,WORD PTR [ecx+eax*2]
c000f9b6:	66 89 14 43          	mov    WORD PTR [ebx+eax*2],dx
c000f9ba:	40                   	inc    eax
c000f9bb:	83 f8 50             	cmp    eax,0x50
c000f9be:	75 f2                	jne    c000f9b2 <hwTextMode_loadInData(VgaText*)+0x26>
c000f9c0:	81 c1 a0 00 00 00    	add    ecx,0xa0
c000f9c6:	46                   	inc    esi
c000f9c7:	39 77 10             	cmp    DWORD PTR [edi+0x10],esi
c000f9ca:	7f e1                	jg     c000f9ad <hwTextMode_loadInData(VgaText*)+0x21>
c000f9cc:	5b                   	pop    ebx
c000f9cd:	5e                   	pop    esi
c000f9ce:	5f                   	pop    edi
c000f9cf:	5d                   	pop    ebp
c000f9d0:	c3                   	ret    

c000f9d1 <hwTextMode_loadInTitle(VgaText*, char*)>:
c000f9d1:	55                   	push   ebp
c000f9d2:	80 3d 00 ef 02 c0 00 	cmp    BYTE PTR ds:0xc002ef00,0x0
c000f9d9:	57                   	push   edi
c000f9da:	56                   	push   esi
c000f9db:	53                   	push   ebx
c000f9dc:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000f9e0:	75 44                	jne    c000fa26 <hwTextMode_loadInTitle(VgaText*, char*)+0x55>
c000f9e2:	8b 6e 3c             	mov    ebp,DWORD PTR [esi+0x3c]
c000f9e5:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c000f9e8:	8b 15 a0 dd 02 c0    	mov    edx,DWORD PTR ds:0xc002dda0
c000f9ee:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000f9f2:	8d ba a0 00 00 00    	lea    edi,[edx+0xa0]
c000f9f8:	eb 08                	jmp    c000fa02 <hwTextMode_loadInTitle(VgaText*, char*)+0x31>
c000f9fa:	8b 6e 3c             	mov    ebp,DWORD PTR [esi+0x3c]
c000f9fd:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c000fa00:	89 da                	mov    edx,ebx
c000fa02:	83 e5 0f             	and    ebp,0xf
c000fa05:	c1 e0 04             	shl    eax,0x4
c000fa08:	8d 5a 02             	lea    ebx,[edx+0x2]
c000fa0b:	0f b6 c0             	movzx  eax,al
c000fa0e:	41                   	inc    ecx
c000fa0f:	09 e8                	or     eax,ebp
c000fa11:	0f b6 69 ff          	movzx  ebp,BYTE PTR [ecx-0x1]
c000fa15:	c1 e0 08             	shl    eax,0x8
c000fa18:	09 e8                	or     eax,ebp
c000fa1a:	39 fb                	cmp    ebx,edi
c000fa1c:	66 89 02             	mov    WORD PTR [edx],ax
c000fa1f:	75 d9                	jne    c000f9fa <hwTextMode_loadInTitle(VgaText*, char*)+0x29>
c000fa21:	5b                   	pop    ebx
c000fa22:	5e                   	pop    esi
c000fa23:	5f                   	pop    edi
c000fa24:	5d                   	pop    ebp
c000fa25:	c3                   	ret    
c000fa26:	c7 46 3c 02 00 00 00 	mov    DWORD PTR [esi+0x3c],0x2
c000fa2d:	c7 46 38 00 00 00 00 	mov    DWORD PTR [esi+0x38],0x0
c000fa34:	31 c0                	xor    eax,eax
c000fa36:	bd 02 00 00 00       	mov    ebp,0x2
c000fa3b:	eb ab                	jmp    c000f9e8 <hwTextMode_loadInTitle(VgaText*, char*)+0x17>

c000fa3d <hwTextMode_showCursor(VgaText*, bool)>:
c000fa3d:	56                   	push   esi
c000fa3e:	80 3d 00 ef 02 c0 00 	cmp    BYTE PTR ds:0xc002ef00,0x0
c000fa45:	53                   	push   ebx
c000fa46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fa4a:	75 36                	jne    c000fa82 <hwTextMode_showCursor(VgaText*, bool)+0x45>
c000fa4c:	84 c0                	test   al,al
c000fa4e:	74 35                	je     c000fa85 <hwTextMode_showCursor(VgaText*, bool)+0x48>
c000fa50:	bb d4 03 00 00       	mov    ebx,0x3d4
c000fa55:	b0 0a                	mov    al,0xa
c000fa57:	89 da                	mov    edx,ebx
c000fa59:	ee                   	out    dx,al
c000fa5a:	b9 d5 03 00 00       	mov    ecx,0x3d5
c000fa5f:	89 ca                	mov    edx,ecx
c000fa61:	ec                   	in     al,dx
c000fa62:	b2 0f                	mov    dl,0xf
c000fa64:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000fa68:	83 e0 c0             	and    eax,0xffffffc0
c000fa6b:	2b 56 1c             	sub    edx,DWORD PTR [esi+0x1c]
c000fa6e:	09 d0                	or     eax,edx
c000fa70:	89 ca                	mov    edx,ecx
c000fa72:	ee                   	out    dx,al
c000fa73:	b0 0b                	mov    al,0xb
c000fa75:	89 da                	mov    edx,ebx
c000fa77:	ee                   	out    dx,al
c000fa78:	89 ca                	mov    edx,ecx
c000fa7a:	ec                   	in     al,dx
c000fa7b:	83 e0 e0             	and    eax,0xffffffe0
c000fa7e:	83 c8 0f             	or     eax,0xf
c000fa81:	ee                   	out    dx,al
c000fa82:	5b                   	pop    ebx
c000fa83:	5e                   	pop    esi
c000fa84:	c3                   	ret    
c000fa85:	b0 0a                	mov    al,0xa
c000fa87:	ba d4 03 00 00       	mov    edx,0x3d4
c000fa8c:	ee                   	out    dx,al
c000fa8d:	b0 20                	mov    al,0x20
c000fa8f:	ba d5 03 00 00       	mov    edx,0x3d5
c000fa94:	ee                   	out    dx,al
c000fa95:	5b                   	pop    ebx
c000fa96:	5e                   	pop    esi
c000fa97:	c3                   	ret    

c000fa98 <hwTextMode_update(VgaText*)>:
c000fa98:	c3                   	ret    

c000fa99 <hwTextMode_updateCursor(VgaText*)>:
c000fa99:	56                   	push   esi
c000fa9a:	80 3d 00 ef 02 c0 00 	cmp    BYTE PTR ds:0xc002ef00,0x0
c000faa1:	53                   	push   ebx
c000faa2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000faa6:	75 36                	jne    c000fade <hwTextMode_updateCursor(VgaText*)+0x45>
c000faa8:	be d4 03 00 00       	mov    esi,0x3d4
c000faad:	b9 19 00 00 00       	mov    ecx,0x19
c000fab2:	89 f2                	mov    edx,esi
c000fab4:	2b 48 10             	sub    ecx,DWORD PTR [eax+0x10]
c000fab7:	03 48 18             	add    ecx,DWORD PTR [eax+0x18]
c000faba:	8d 0c 89             	lea    ecx,[ecx+ecx*4]
c000fabd:	c1 e1 04             	shl    ecx,0x4
c000fac0:	03 48 14             	add    ecx,DWORD PTR [eax+0x14]
c000fac3:	b0 0f                	mov    al,0xf
c000fac5:	ee                   	out    dx,al
c000fac6:	bb d5 03 00 00       	mov    ebx,0x3d5
c000facb:	88 c8                	mov    al,cl
c000facd:	89 da                	mov    edx,ebx
c000facf:	ee                   	out    dx,al
c000fad0:	b0 0e                	mov    al,0xe
c000fad2:	89 f2                	mov    edx,esi
c000fad4:	ee                   	out    dx,al
c000fad5:	89 c8                	mov    eax,ecx
c000fad7:	89 da                	mov    edx,ebx
c000fad9:	66 c1 e8 08          	shr    ax,0x8
c000fadd:	ee                   	out    dx,al
c000fade:	5b                   	pop    ebx
c000fadf:	5e                   	pop    esi
c000fae0:	c3                   	ret    

c000fae1 <hwTextMode_disableBlink(VgaText*, bool)>:
c000fae1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fae5:	80 3d 00 ef 02 c0 00 	cmp    BYTE PTR ds:0xc002ef00,0x0
c000faec:	75 38                	jne    c000fb26 <hwTextMode_disableBlink(VgaText*, bool)+0x45>
c000faee:	ba da 03 00 00       	mov    edx,0x3da
c000faf3:	84 c0                	test   al,al
c000faf5:	75 18                	jne    c000fb0f <hwTextMode_disableBlink(VgaText*, bool)+0x2e>
c000faf7:	ec                   	in     al,dx
c000faf8:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000fafd:	b0 30                	mov    al,0x30
c000faff:	89 ca                	mov    edx,ecx
c000fb01:	ee                   	out    dx,al
c000fb02:	ba c1 03 00 00       	mov    edx,0x3c1
c000fb07:	ec                   	in     al,dx
c000fb08:	83 c8 08             	or     eax,0x8
c000fb0b:	89 ca                	mov    edx,ecx
c000fb0d:	ee                   	out    dx,al
c000fb0e:	c3                   	ret    
c000fb0f:	ec                   	in     al,dx
c000fb10:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000fb15:	b0 30                	mov    al,0x30
c000fb17:	89 ca                	mov    edx,ecx
c000fb19:	ee                   	out    dx,al
c000fb1a:	ba c1 03 00 00       	mov    edx,0x3c1
c000fb1f:	ec                   	in     al,dx
c000fb20:	83 e0 f7             	and    eax,0xfffffff7
c000fb23:	89 ca                	mov    edx,ecx
c000fb25:	ee                   	out    dx,al
c000fb26:	c3                   	ret    

c000fb27 <hwTextMode_scrollScreen(VgaText*)>:
c000fb27:	55                   	push   ebp
c000fb28:	57                   	push   edi
c000fb29:	56                   	push   esi
c000fb2a:	53                   	push   ebx
c000fb2b:	83 ec 1c             	sub    esp,0x1c
c000fb2e:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000fb32:	80 3d 00 ef 02 c0 00 	cmp    BYTE PTR ds:0xc002ef00,0x0
c000fb39:	74 0e                	je     c000fb49 <hwTextMode_scrollScreen(VgaText*)+0x22>
c000fb3b:	c7 41 34 02 00 00 00 	mov    DWORD PTR [ecx+0x34],0x2
c000fb42:	c7 41 30 00 00 00 00 	mov    DWORD PTR [ecx+0x30],0x0
c000fb49:	a1 a0 dd 02 c0       	mov    eax,ds:0xc002dda0
c000fb4e:	bd 02 00 00 00       	mov    ebp,0x2
c000fb53:	05 a0 00 00 00       	add    eax,0xa0
c000fb58:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fb5c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000fb60:	31 c0                	xor    eax,eax
c000fb62:	eb 0b                	jmp    c000fb6f <hwTextMode_scrollScreen(VgaText*)+0x48>
c000fb64:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000fb6a:	74 51                	je     c000fbbd <hwTextMode_scrollScreen(VgaText*)+0x96>
c000fb6c:	43                   	inc    ebx
c000fb6d:	89 f0                	mov    eax,esi
c000fb6f:	8a 93 a0 00 00 00    	mov    dl,BYTE PTR [ebx+0xa0]
c000fb75:	8d bb a0 00 00 00    	lea    edi,[ebx+0xa0]
c000fb7b:	88 13                	mov    BYTE PTR [ebx],dl
c000fb7d:	8d 70 01             	lea    esi,[eax+0x1]
c000fb80:	83 fd 18             	cmp    ebp,0x18
c000fb83:	75 df                	jne    c000fb64 <hwTextMode_scrollScreen(VgaText*)+0x3d>
c000fb85:	a8 01                	test   al,0x1
c000fb87:	75 13                	jne    c000fb9c <hwTextMode_scrollScreen(VgaText*)+0x75>
c000fb89:	c6 07 20             	mov    BYTE PTR [edi],0x20
c000fb8c:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000fb92:	75 d8                	jne    c000fb6c <hwTextMode_scrollScreen(VgaText*)+0x45>
c000fb94:	83 c4 1c             	add    esp,0x1c
c000fb97:	5b                   	pop    ebx
c000fb98:	5e                   	pop    esi
c000fb99:	5f                   	pop    edi
c000fb9a:	5d                   	pop    ebp
c000fb9b:	c3                   	ret    
c000fb9c:	83 ec 08             	sub    esp,0x8
c000fb9f:	0f b6 41 30          	movzx  eax,BYTE PTR [ecx+0x30]
c000fba3:	50                   	push   eax
c000fba4:	89 4c 24 3c          	mov    DWORD PTR [esp+0x3c],ecx
c000fba8:	0f b6 41 34          	movzx  eax,BYTE PTR [ecx+0x34]
c000fbac:	50                   	push   eax
c000fbad:	e8 18 0c 00 00       	call   c00107ca <VgaText::combineColours(unsigned char, unsigned char)>
c000fbb2:	83 c4 10             	add    esp,0x10
c000fbb5:	88 07                	mov    BYTE PTR [edi],al
c000fbb7:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000fbbb:	eb cf                	jmp    c000fb8c <hwTextMode_scrollScreen(VgaText*)+0x65>
c000fbbd:	45                   	inc    ebp
c000fbbe:	81 44 24 0c a0 00 00 00 	add    DWORD PTR [esp+0xc],0xa0
c000fbc6:	eb 94                	jmp    c000fb5c <hwTextMode_scrollScreen(VgaText*)+0x35>

c000fbc8 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)>:
c000fbc8:	57                   	push   edi
c000fbc9:	80 3d 00 ef 02 c0 00 	cmp    BYTE PTR ds:0xc002ef00,0x0
c000fbd0:	56                   	push   esi
c000fbd1:	53                   	push   ebx
c000fbd2:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000fbd6:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000fbda:	75 62                	jne    c000fc3e <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x76>
c000fbdc:	0f b6 54 24 1c       	movzx  edx,BYTE PTR [esp+0x1c]
c000fbe1:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c000fbe6:	83 ec 08             	sub    esp,0x8
c000fbe9:	52                   	push   edx
c000fbea:	50                   	push   eax
c000fbeb:	e8 da 0b 00 00       	call   c00107ca <VgaText::combineColours(unsigned char, unsigned char)>
c000fbf0:	5a                   	pop    edx
c000fbf1:	0f b6 c0             	movzx  eax,al
c000fbf4:	59                   	pop    ecx
c000fbf5:	50                   	push   eax
c000fbf6:	0f be c3             	movsx  eax,bl
c000fbf9:	50                   	push   eax
c000fbfa:	e8 71 0c 00 00       	call   c0010870 <VgaText::combineCharAndColour(char, unsigned char)>
c000fbff:	83 c4 10             	add    esp,0x10
c000fc02:	8b 35 a0 dd 02 c0    	mov    esi,DWORD PTR ds:0xc002dda0
c000fc08:	80 3d 00 ef 02 c0 00 	cmp    BYTE PTR ds:0xc002ef00,0x0
c000fc0f:	74 07                	je     c000fc18 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x50>
c000fc11:	66 0f be c3          	movsx  ax,bl
c000fc15:	80 cc 02             	or     ah,0x2
c000fc18:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000fc1c:	ba 19 00 00 00       	mov    edx,0x19
c000fc21:	2b 51 10             	sub    edx,DWORD PTR [ecx+0x10]
c000fc24:	8d 0c bf             	lea    ecx,[edi+edi*4]
c000fc27:	8d 14 92             	lea    edx,[edx+edx*4]
c000fc2a:	c1 e1 04             	shl    ecx,0x4
c000fc2d:	c1 e2 04             	shl    edx,0x4
c000fc30:	03 4c 24 20          	add    ecx,DWORD PTR [esp+0x20]
c000fc34:	01 ca                	add    edx,ecx
c000fc36:	66 89 04 56          	mov    WORD PTR [esi+edx*2],ax
c000fc3a:	5b                   	pop    ebx
c000fc3b:	5e                   	pop    esi
c000fc3c:	5f                   	pop    edi
c000fc3d:	c3                   	ret    
c000fc3e:	b8 02 00 00 00       	mov    eax,0x2
c000fc43:	31 d2                	xor    edx,edx
c000fc45:	eb 9f                	jmp    c000fbe6 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x1e>

c000fc47 <setupTextMode()>:
c000fc47:	a1 10 04 00 00       	mov    eax,ds:0x410
c000fc4c:	83 e0 30             	and    eax,0x30
c000fc4f:	66 83 f8 30          	cmp    ax,0x30
c000fc53:	75 11                	jne    c000fc66 <setupTextMode()+0x1f>
c000fc55:	81 2d a0 dd 02 c0 00 80 00 00 	sub    DWORD PTR ds:0xc002dda0,0x8000
c000fc5f:	c6 05 00 ef 02 c0 01 	mov    BYTE PTR ds:0xc002ef00,0x1
c000fc66:	c7 05 38 ef 02 c0 e1 fa 00 c0 	mov    DWORD PTR ds:0xc002ef38,0xc000fae1
c000fc70:	c7 05 24 ef 02 c0 8c f9 00 c0 	mov    DWORD PTR ds:0xc002ef24,0xc000f98c
c000fc7a:	c7 05 20 ef 02 c0 d1 f9 00 c0 	mov    DWORD PTR ds:0xc002ef20,0xc000f9d1
c000fc84:	c7 05 2c ef 02 c0 27 fb 00 c0 	mov    DWORD PTR ds:0xc002ef2c,0xc000fb27
c000fc8e:	c7 05 34 ef 02 c0 3d fa 00 c0 	mov    DWORD PTR ds:0xc002ef34,0xc000fa3d
c000fc98:	c7 05 28 ef 02 c0 98 fa 00 c0 	mov    DWORD PTR ds:0xc002ef28,0xc000fa98
c000fca2:	c7 05 30 ef 02 c0 99 fa 00 c0 	mov    DWORD PTR ds:0xc002ef30,0xc000fa99
c000fcac:	c7 05 3c ef 02 c0 c8 fb 00 c0 	mov    DWORD PTR ds:0xc002ef3c,0xc000fbc8
c000fcb6:	c3                   	ret    

c000fcb7 <kernel_main>:
c000fcb7:	57                   	push   edi
c000fcb8:	bf f9 03 00 00       	mov    edi,0x3f9
c000fcbd:	56                   	push   esi
c000fcbe:	89 fa                	mov    edx,edi
c000fcc0:	53                   	push   ebx
c000fcc1:	31 f6                	xor    esi,esi
c000fcc3:	83 ec 2c             	sub    esp,0x2c
c000fcc6:	89 f0                	mov    eax,esi
c000fcc8:	ee                   	out    dx,al
c000fcc9:	bb fb 03 00 00       	mov    ebx,0x3fb
c000fcce:	b0 80                	mov    al,0x80
c000fcd0:	89 da                	mov    edx,ebx
c000fcd2:	ee                   	out    dx,al
c000fcd3:	b1 03                	mov    cl,0x3
c000fcd5:	ba f8 03 00 00       	mov    edx,0x3f8
c000fcda:	88 c8                	mov    al,cl
c000fcdc:	ee                   	out    dx,al
c000fcdd:	89 f0                	mov    eax,esi
c000fcdf:	89 fa                	mov    edx,edi
c000fce1:	ee                   	out    dx,al
c000fce2:	88 c8                	mov    al,cl
c000fce4:	89 da                	mov    edx,ebx
c000fce6:	ee                   	out    dx,al
c000fce7:	b0 c7                	mov    al,0xc7
c000fce9:	ba fa 03 00 00       	mov    edx,0x3fa
c000fcee:	ee                   	out    dx,al
c000fcef:	b0 0b                	mov    al,0xb
c000fcf1:	ba fc 03 00 00       	mov    edx,0x3fc
c000fcf6:	ee                   	out    dx,al
c000fcf7:	68 44 ab 02 c0       	push   0xc002ab44
c000fcfc:	e8 f0 31 00 00       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c000fd01:	e8 56 09 00 00       	call   c001065c <installVgaTextImplementation()>
c000fd06:	e8 3c ff ff ff       	call   c000fc47 <setupTextMode()>
c000fd0b:	a1 24 05 00 00       	mov    eax,ds:0x524
c000fd10:	05 ff 0f 00 00       	add    eax,0xfff
c000fd15:	25 00 f0 ff ff       	and    eax,0xfffff000
c000fd1a:	89 04 24             	mov    DWORD PTR [esp],eax
c000fd1d:	e8 f5 03 00 00       	call   c0010117 <Phys::physicalMemorySetup(unsigned int)>
c000fd22:	e8 7d 1f 00 00       	call   c0011ca4 <Virt::virtualMemorySetup()>
c000fd27:	8b 1d 00 05 00 00    	mov    ebx,DWORD PTR ds:0x500
c000fd2d:	83 c4 10             	add    esp,0x10
c000fd30:	3b 1d 04 05 00 00    	cmp    ebx,DWORD PTR ds:0x504
c000fd36:	75 0e                	jne    c000fd46 <kernel_main+0x8f>
c000fd38:	89 d8                	mov    eax,ebx
c000fd3a:	25 48 03 00 00       	and    eax,0x348
c000fd3f:	3d 00 03 00 00       	cmp    eax,0x300
c000fd44:	74 10                	je     c000fd56 <kernel_main+0x9f>
c000fd46:	83 ec 0c             	sub    esp,0xc
c000fd49:	68 d5 c4 02 c0       	push   0xc002c4d5
c000fd4e:	e8 5e ab 00 00       	call   c001a8b1 <Krnl::panic(char const*)>
c000fd53:	83 c4 10             	add    esp,0x10
c000fd56:	83 ec 0c             	sub    esp,0xc
c000fd59:	89 1d 80 ee 02 c0    	mov    DWORD PTR ds:0xc002ee80,ebx
c000fd5f:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c000fd63:	53                   	push   ebx
c000fd64:	e8 8d 21 00 00       	call   c0011ef6 <VAS::VAS()>
c000fd69:	89 1d f0 ef 02 c0    	mov    DWORD PTR ds:0xc002eff0,ebx
c000fd6f:	e8 ac 02 ff ff       	call   c0000020 <callGlobalConstructors>
c000fd74:	c7 04 24 5b ab 02 c0 	mov    DWORD PTR [esp],0xc002ab5b
c000fd7b:	e8 71 31 00 00       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c000fd80:	e8 9e 1f 00 00       	call   c0011d23 <Virt::swappingSetup()>
c000fd85:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000fd8c:	e8 a1 fb ff ff       	call   c000f932 <malloc>
c000fd91:	89 04 24             	mov    DWORD PTR [esp],eax
c000fd94:	89 c6                	mov    esi,eax
c000fd96:	e8 87 ea ff ff       	call   c000e822 <Computer::Computer()>
c000fd9b:	58                   	pop    eax
c000fd9c:	89 35 68 ee 02 c0    	mov    DWORD PTR ds:0xc002ee68,esi
c000fda2:	5a                   	pop    edx
c000fda3:	56                   	push   esi
c000fda4:	68 78 ab 02 c0       	push   0xc002ab78
c000fda9:	e8 43 31 00 00       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c000fdae:	a1 68 ee 02 c0       	mov    eax,ds:0xc002ee68
c000fdb3:	8b 10                	mov    edx,DWORD PTR [eax]
c000fdb5:	6a 00                	push   0x0
c000fdb7:	6a 00                	push   0x0
c000fdb9:	6a 00                	push   0x0
c000fdbb:	50                   	push   eax
c000fdbc:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000fdbf:	83 c4 14             	add    esp,0x14
c000fdc2:	53                   	push   ebx
c000fdc3:	e8 de 23 00 00       	call   c00121a6 <VAS::~VAS()>
c000fdc8:	c7 04 24 8b ab 02 c0 	mov    DWORD PTR [esp],0xc002ab8b
c000fdcf:	e8 dd aa 00 00       	call   c001a8b1 <Krnl::panic(char const*)>
c000fdd4:	83 c4 30             	add    esp,0x30
c000fdd7:	5b                   	pop    ebx
c000fdd8:	5e                   	pop    esi
c000fdd9:	5f                   	pop    edi
c000fdda:	c3                   	ret    

c000fddb <Phys::allocateDMA(unsigned long)>:
c000fddb:	55                   	push   ebp
c000fddc:	31 d2                	xor    edx,edx
c000fdde:	57                   	push   edi
c000fddf:	31 ed                	xor    ebp,ebp
c000fde1:	56                   	push   esi
c000fde2:	31 c9                	xor    ecx,ecx
c000fde4:	53                   	push   ebx
c000fde5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fde9:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c000fdef:	31 c0                	xor    eax,eax
c000fdf1:	c1 ee 0c             	shr    esi,0xc
c000fdf4:	eb 17                	jmp    c000fe0d <Phys::allocateDMA(unsigned long)+0x32>
c000fdf6:	85 c9                	test   ecx,ecx
c000fdf8:	75 04                	jne    c000fdfe <Phys::allocateDMA(unsigned long)+0x23>
c000fdfa:	89 d5                	mov    ebp,edx
c000fdfc:	89 d0                	mov    eax,edx
c000fdfe:	8d 59 01             	lea    ebx,[ecx+0x1]
c000fe01:	39 de                	cmp    esi,ebx
c000fe03:	74 20                	je     c000fe25 <Phys::allocateDMA(unsigned long)+0x4a>
c000fe05:	42                   	inc    edx
c000fe06:	89 d9                	mov    ecx,ebx
c000fe08:	83 fa 2f             	cmp    edx,0x2f
c000fe0b:	7f 11                	jg     c000fe1e <Phys::allocateDMA(unsigned long)+0x43>
c000fe0d:	80 ba c0 ee 02 c0 00 	cmp    BYTE PTR [edx-0x3ffd1140],0x0
c000fe14:	74 e0                	je     c000fdf6 <Phys::allocateDMA(unsigned long)+0x1b>
c000fe16:	31 c9                	xor    ecx,ecx
c000fe18:	42                   	inc    edx
c000fe19:	83 fa 2f             	cmp    edx,0x2f
c000fe1c:	7e ef                	jle    c000fe0d <Phys::allocateDMA(unsigned long)+0x32>
c000fe1e:	5b                   	pop    ebx
c000fe1f:	31 c0                	xor    eax,eax
c000fe21:	5e                   	pop    esi
c000fe22:	5f                   	pop    edi
c000fe23:	5d                   	pop    ebp
c000fe24:	c3                   	ret    
c000fe25:	8d 14 30             	lea    edx,[eax+esi*1]
c000fe28:	89 d7                	mov    edi,edx
c000fe2a:	4f                   	dec    edi
c000fe2b:	79 03                	jns    c000fe30 <Phys::allocateDMA(unsigned long)+0x55>
c000fe2d:	8d 7a 0e             	lea    edi,[edx+0xe]
c000fe30:	c1 ff 04             	sar    edi,0x4
c000fe33:	89 c2                	mov    edx,eax
c000fe35:	c1 fa 04             	sar    edx,0x4
c000fe38:	39 fa                	cmp    edx,edi
c000fe3a:	75 2f                	jne    c000fe6b <Phys::allocateDMA(unsigned long)+0x90>
c000fe3c:	85 db                	test   ebx,ebx
c000fe3e:	74 1a                	je     c000fe5a <Phys::allocateDMA(unsigned long)+0x7f>
c000fe40:	be c0 ee 02 c0       	mov    esi,0xc002eec0
c000fe45:	8d 90 c0 ee 02 c0    	lea    edx,[eax-0x3ffd1140]
c000fe4b:	f7 d6                	not    esi
c000fe4d:	29 c6                	sub    esi,eax
c000fe4f:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000fe52:	42                   	inc    edx
c000fe53:	8d 1c 16             	lea    ebx,[esi+edx*1]
c000fe56:	39 d9                	cmp    ecx,ebx
c000fe58:	7f f5                	jg     c000fe4f <Phys::allocateDMA(unsigned long)+0x74>
c000fe5a:	85 ff                	test   edi,edi
c000fe5c:	74 13                	je     c000fe71 <Phys::allocateDMA(unsigned long)+0x96>
c000fe5e:	5b                   	pop    ebx
c000fe5f:	05 50 20 0c 00       	add    eax,0xc2050
c000fe64:	5e                   	pop    esi
c000fe65:	c1 e0 0c             	shl    eax,0xc
c000fe68:	5f                   	pop    edi
c000fe69:	5d                   	pop    ebp
c000fe6a:	c3                   	ret    
c000fe6b:	89 ea                	mov    edx,ebp
c000fe6d:	31 c9                	xor    ecx,ecx
c000fe6f:	eb a7                	jmp    c000fe18 <Phys::allocateDMA(unsigned long)+0x3d>
c000fe71:	5b                   	pop    ebx
c000fe72:	c1 e0 0c             	shl    eax,0xc
c000fe75:	5e                   	pop    esi
c000fe76:	2d 00 00 ff 3d       	sub    eax,0x3dff0000
c000fe7b:	5f                   	pop    edi
c000fe7c:	5d                   	pop    ebp
c000fe7d:	c3                   	ret    

c000fe7e <Phys::freeDMA(unsigned long, unsigned long)>:
c000fe7e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fe82:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000fe86:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c000fe8c:	c1 e9 0c             	shr    ecx,0xc
c000fe8f:	3d ff ff 05 c2       	cmp    eax,0xc205ffff
c000fe94:	76 25                	jbe    c000febb <Phys::freeDMA(unsigned long, unsigned long)+0x3d>
c000fe96:	05 00 00 fa 3d       	add    eax,0x3dfa0000
c000fe9b:	c1 e8 0c             	shr    eax,0xc
c000fe9e:	8d 50 10             	lea    edx,[eax+0x10]
c000fea1:	85 c9                	test   ecx,ecx
c000fea3:	74 15                	je     c000feba <Phys::freeDMA(unsigned long, unsigned long)+0x3c>
c000fea5:	8d 82 c0 ee 02 c0    	lea    eax,[edx-0x3ffd1140]
c000feab:	8d 94 11 c0 ee 02 c0 	lea    edx,[ecx+edx*1-0x3ffd1140]
c000feb2:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000feb5:	40                   	inc    eax
c000feb6:	39 d0                	cmp    eax,edx
c000feb8:	75 f8                	jne    c000feb2 <Phys::freeDMA(unsigned long, unsigned long)+0x34>
c000feba:	c3                   	ret    
c000febb:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000fec1:	c1 ea 0c             	shr    edx,0xc
c000fec4:	eb db                	jmp    c000fea1 <Phys::freeDMA(unsigned long, unsigned long)+0x23>

c000fec6 <Phys::setPageState(unsigned long, bool)>:
c000fec6:	56                   	push   esi
c000fec7:	ba 01 00 00 00       	mov    edx,0x1
c000fecc:	53                   	push   ebx
c000fecd:	8b 35 98 dd 02 c0    	mov    esi,DWORD PTR ds:0xc002dd98
c000fed3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fed7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fedb:	89 c8                	mov    eax,ecx
c000fedd:	83 e1 07             	and    ecx,0x7
c000fee0:	c1 e8 03             	shr    eax,0x3
c000fee3:	d3 e3                	shl    ebx,cl
c000fee5:	01 c6                	add    esi,eax
c000fee7:	d3 e2                	shl    edx,cl
c000fee9:	f7 d2                	not    edx
c000feeb:	20 16                	and    BYTE PTR [esi],dl
c000feed:	03 05 98 dd 02 c0    	add    eax,DWORD PTR ds:0xc002dd98
c000fef3:	08 18                	or     BYTE PTR [eax],bl
c000fef5:	5b                   	pop    ebx
c000fef6:	5e                   	pop    esi
c000fef7:	c3                   	ret    

c000fef8 <Phys::getPageState(unsigned long)>:
c000fef8:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000fefc:	8b 15 98 dd 02 c0    	mov    edx,DWORD PTR ds:0xc002dd98
c000ff02:	89 c8                	mov    eax,ecx
c000ff04:	83 e1 07             	and    ecx,0x7
c000ff07:	c1 e8 03             	shr    eax,0x3
c000ff0a:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000ff0e:	d3 f8                	sar    eax,cl
c000ff10:	83 e0 01             	and    eax,0x1
c000ff13:	c3                   	ret    

c000ff14 <Phys::freePage(unsigned long)>:
c000ff14:	53                   	push   ebx
c000ff15:	83 ec 08             	sub    esp,0x8
c000ff18:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ff1c:	81 fb ff ff 07 00    	cmp    ebx,0x7ffff
c000ff22:	76 57                	jbe    c000ff7b <Phys::freePage(unsigned long)+0x67>
c000ff24:	c1 eb 0c             	shr    ebx,0xc
c000ff27:	53                   	push   ebx
c000ff28:	e8 cb ff ff ff       	call   c000fef8 <Phys::getPageState(unsigned long)>
c000ff2d:	5a                   	pop    edx
c000ff2e:	84 c0                	test   al,al
c000ff30:	74 5b                	je     c000ff8d <Phys::freePage(unsigned long)+0x79>
c000ff32:	a1 b0 ee 02 c0       	mov    eax,ds:0xc002eeb0
c000ff37:	48                   	dec    eax
c000ff38:	a3 b0 ee 02 c0       	mov    ds:0xc002eeb0,eax
c000ff3d:	8d 04 80             	lea    eax,[eax+eax*4]
c000ff40:	8d 04 80             	lea    eax,[eax+eax*4]
c000ff43:	c1 e0 02             	shl    eax,0x2
c000ff46:	99                   	cdq    
c000ff47:	f7 3d b4 ee 02 c0    	idiv   DWORD PTR ds:0xc002eeb4
c000ff4d:	39 05 ac ee 02 c0    	cmp    DWORD PTR ds:0xc002eeac,eax
c000ff53:	75 13                	jne    c000ff68 <Phys::freePage(unsigned long)+0x54>
c000ff55:	83 ec 08             	sub    esp,0x8
c000ff58:	6a 00                	push   0x0
c000ff5a:	53                   	push   ebx
c000ff5b:	e8 66 ff ff ff       	call   c000fec6 <Phys::setPageState(unsigned long, bool)>
c000ff60:	83 c4 10             	add    esp,0x10
c000ff63:	83 c4 08             	add    esp,0x8
c000ff66:	5b                   	pop    ebx
c000ff67:	c3                   	ret    
c000ff68:	83 ec 0c             	sub    esp,0xc
c000ff6b:	a3 ac ee 02 c0       	mov    ds:0xc002eeac,eax
c000ff70:	50                   	push   eax
c000ff71:	e8 14 0a 00 00       	call   c001098a <VgaText::updateRAMUsageDisplay(int)>
c000ff76:	83 c4 10             	add    esp,0x10
c000ff79:	eb da                	jmp    c000ff55 <Phys::freePage(unsigned long)+0x41>
c000ff7b:	68 00 10 00 00       	push   0x1000
c000ff80:	53                   	push   ebx
c000ff81:	e8 f8 fe ff ff       	call   c000fe7e <Phys::freeDMA(unsigned long, unsigned long)>
c000ff86:	59                   	pop    ecx
c000ff87:	5b                   	pop    ebx
c000ff88:	83 c4 08             	add    esp,0x8
c000ff8b:	5b                   	pop    ebx
c000ff8c:	c3                   	ret    
c000ff8d:	c7 44 24 10 a6 ab 02 c0 	mov    DWORD PTR [esp+0x10],0xc002aba6
c000ff95:	83 c4 08             	add    esp,0x8
c000ff98:	5b                   	pop    ebx
c000ff99:	e9 13 a9 00 00       	jmp    c001a8b1 <Krnl::panic(char const*)>

c000ff9e <Phys::allocatePage()>:
c000ff9e:	56                   	push   esi
c000ff9f:	53                   	push   ebx
c000ffa0:	51                   	push   ecx
c000ffa1:	8b 35 a4 ee 02 c0    	mov    esi,DWORD PTR ds:0xc002eea4
c000ffa7:	89 f3                	mov    ebx,esi
c000ffa9:	eb 0a                	jmp    c000ffb5 <Phys::allocatePage()+0x17>
c000ffab:	89 1d a4 ee 02 c0    	mov    DWORD PTR ds:0xc002eea4,ebx
c000ffb1:	39 de                	cmp    esi,ebx
c000ffb3:	74 24                	je     c000ffd9 <Phys::allocatePage()+0x3b>
c000ffb5:	53                   	push   ebx
c000ffb6:	e8 3d ff ff ff       	call   c000fef8 <Phys::getPageState(unsigned long)>
c000ffbb:	5a                   	pop    edx
c000ffbc:	84 c0                	test   al,al
c000ffbe:	74 77                	je     c0010037 <Phys::allocatePage()+0x99>
c000ffc0:	43                   	inc    ebx
c000ffc1:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000ffc7:	75 e2                	jne    c000ffab <Phys::allocatePage()+0xd>
c000ffc9:	31 db                	xor    ebx,ebx
c000ffcb:	c7 05 a4 ee 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002eea4,0x0
c000ffd5:	39 de                	cmp    esi,ebx
c000ffd7:	75 dc                	jne    c000ffb5 <Phys::allocatePage()+0x17>
c000ffd9:	83 ec 0c             	sub    esp,0xc
c000ffdc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ffe1:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000ffe4:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c000ffea:	e8 2f 2c 00 00       	call   c0012c1e <VAS::scanForEviction()>
c000ffef:	83 c4 10             	add    esp,0x10
c000fff2:	85 c0                	test   eax,eax
c000fff4:	75 76                	jne    c001006c <Phys::allocatePage()+0xce>
c000fff6:	83 ec 0c             	sub    esp,0xc
c000fff9:	68 bc ab 02 c0       	push   0xc002abbc
c000fffe:	e8 ee 2e 00 00       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c0010003:	c7 04 24 00 10 00 00 	mov    DWORD PTR [esp],0x1000
c001000a:	e8 cc fd ff ff       	call   c000fddb <Phys::allocateDMA(unsigned long)>
c001000f:	83 c4 10             	add    esp,0x10
c0010012:	85 c0                	test   eax,eax
c0010014:	75 56                	jne    c001006c <Phys::allocatePage()+0xce>
c0010016:	83 ec 0c             	sub    esp,0xc
c0010019:	68 cd ab 02 c0       	push   0xc002abcd
c001001e:	e8 8e a8 00 00       	call   c001a8b1 <Krnl::panic(char const*)>
c0010023:	83 c4 10             	add    esp,0x10
c0010026:	8b 1d a4 ee 02 c0    	mov    ebx,DWORD PTR ds:0xc002eea4
c001002c:	53                   	push   ebx
c001002d:	e8 c6 fe ff ff       	call   c000fef8 <Phys::getPageState(unsigned long)>
c0010032:	5a                   	pop    edx
c0010033:	84 c0                	test   al,al
c0010035:	75 89                	jne    c000ffc0 <Phys::allocatePage()+0x22>
c0010037:	6a 01                	push   0x1
c0010039:	53                   	push   ebx
c001003a:	e8 87 fe ff ff       	call   c000fec6 <Phys::setPageState(unsigned long, bool)>
c001003f:	a1 b0 ee 02 c0       	mov    eax,ds:0xc002eeb0
c0010044:	59                   	pop    ecx
c0010045:	40                   	inc    eax
c0010046:	5b                   	pop    ebx
c0010047:	a3 b0 ee 02 c0       	mov    ds:0xc002eeb0,eax
c001004c:	8d 04 80             	lea    eax,[eax+eax*4]
c001004f:	8d 04 80             	lea    eax,[eax+eax*4]
c0010052:	c1 e0 02             	shl    eax,0x2
c0010055:	99                   	cdq    
c0010056:	f7 3d b4 ee 02 c0    	idiv   DWORD PTR ds:0xc002eeb4
c001005c:	39 05 ac ee 02 c0    	cmp    DWORD PTR ds:0xc002eeac,eax
c0010062:	75 0c                	jne    c0010070 <Phys::allocatePage()+0xd2>
c0010064:	a1 a4 ee 02 c0       	mov    eax,ds:0xc002eea4
c0010069:	c1 e0 0c             	shl    eax,0xc
c001006c:	5a                   	pop    edx
c001006d:	5b                   	pop    ebx
c001006e:	5e                   	pop    esi
c001006f:	c3                   	ret    
c0010070:	83 ec 0c             	sub    esp,0xc
c0010073:	a3 ac ee 02 c0       	mov    ds:0xc002eeac,eax
c0010078:	50                   	push   eax
c0010079:	e8 0c 09 00 00       	call   c001098a <VgaText::updateRAMUsageDisplay(int)>
c001007e:	83 c4 10             	add    esp,0x10
c0010081:	eb e1                	jmp    c0010064 <Phys::allocatePage()+0xc6>

c0010083 <Phys::allocateContiguousPages(int)>:
c0010083:	57                   	push   edi
c0010084:	56                   	push   esi
c0010085:	53                   	push   ebx
c0010086:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001008a:	fa                   	cli    
c001008b:	ff 05 a8 23 03 c0    	inc    DWORD PTR ds:0xc00323a8
c0010091:	31 db                	xor    ebx,ebx
c0010093:	85 db                	test   ebx,ebx
c0010095:	75 11                	jne    c00100a8 <Phys::allocateContiguousPages(int)+0x25>
c0010097:	e8 02 ff ff ff       	call   c000ff9e <Phys::allocatePage()>
c001009c:	83 fe 01             	cmp    esi,0x1
c001009f:	89 c7                	mov    edi,eax
c00100a1:	74 21                	je     c00100c4 <Phys::allocateContiguousPages(int)+0x41>
c00100a3:	bb 01 00 00 00       	mov    ebx,0x1
c00100a8:	e8 f1 fe ff ff       	call   c000ff9e <Phys::allocatePage()>
c00100ad:	89 da                	mov    edx,ebx
c00100af:	c1 e2 0c             	shl    edx,0xc
c00100b2:	01 fa                	add    edx,edi
c00100b4:	39 c2                	cmp    edx,eax
c00100b6:	74 20                	je     c00100d8 <Phys::allocateContiguousPages(int)+0x55>
c00100b8:	bb 01 00 00 00       	mov    ebx,0x1
c00100bd:	89 c7                	mov    edi,eax
c00100bf:	83 fe 01             	cmp    esi,0x1
c00100c2:	75 e4                	jne    c00100a8 <Phys::allocateContiguousPages(int)+0x25>
c00100c4:	a1 a8 23 03 c0       	mov    eax,ds:0xc00323a8
c00100c9:	48                   	dec    eax
c00100ca:	a3 a8 23 03 c0       	mov    ds:0xc00323a8,eax
c00100cf:	75 01                	jne    c00100d2 <Phys::allocateContiguousPages(int)+0x4f>
c00100d1:	fb                   	sti    
c00100d2:	89 f8                	mov    eax,edi
c00100d4:	5b                   	pop    ebx
c00100d5:	5e                   	pop    esi
c00100d6:	5f                   	pop    edi
c00100d7:	c3                   	ret    
c00100d8:	43                   	inc    ebx
c00100d9:	39 f3                	cmp    ebx,esi
c00100db:	75 b6                	jne    c0010093 <Phys::allocateContiguousPages(int)+0x10>
c00100dd:	eb e5                	jmp    c00100c4 <Phys::allocateContiguousPages(int)+0x41>

c00100df <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c00100df:	56                   	push   esi
c00100e0:	53                   	push   ebx
c00100e1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00100e5:	39 1d a8 ee 02 c0    	cmp    DWORD PTR ds:0xc002eea8,ebx
c00100eb:	73 06                	jae    c00100f3 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c00100ed:	89 1d a8 ee 02 c0    	mov    DWORD PTR ds:0xc002eea8,ebx
c00100f3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00100f7:	c1 eb 0c             	shr    ebx,0xc
c00100fa:	c1 e8 0c             	shr    eax,0xc
c00100fd:	39 d8                	cmp    eax,ebx
c00100ff:	73 13                	jae    c0010114 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c0010101:	6a 00                	push   0x0
c0010103:	8d 70 01             	lea    esi,[eax+0x1]
c0010106:	50                   	push   eax
c0010107:	e8 ba fd ff ff       	call   c000fec6 <Phys::setPageState(unsigned long, bool)>
c001010c:	5a                   	pop    edx
c001010d:	89 f0                	mov    eax,esi
c001010f:	59                   	pop    ecx
c0010110:	39 f3                	cmp    ebx,esi
c0010112:	75 ed                	jne    c0010101 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0010114:	5b                   	pop    ebx
c0010115:	5e                   	pop    esi
c0010116:	c3                   	ret    

c0010117 <Phys::physicalMemorySetup(unsigned int)>:
c0010117:	55                   	push   ebp
c0010118:	57                   	push   edi
c0010119:	56                   	push   esi
c001011a:	53                   	push   ebx
c001011b:	31 db                	xor    ebx,ebx
c001011d:	83 ec 40             	sub    esp,0x40
c0010120:	6a 30                	push   0x30
c0010122:	6a 00                	push   0x0
c0010124:	68 c0 ee 02 c0       	push   0xc002eec0
c0010129:	e8 6e 06 ff ff       	call   c000079c <memset>
c001012e:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0010132:	25 00 f0 ff ff       	and    eax,0xfffff000
c0010137:	05 00 10 00 00       	add    eax,0x1000
c001013c:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0010140:	83 c4 10             	add    esp,0x10
c0010143:	83 ec 08             	sub    esp,0x8
c0010146:	6a 01                	push   0x1
c0010148:	53                   	push   ebx
c0010149:	43                   	inc    ebx
c001014a:	e8 77 fd ff ff       	call   c000fec6 <Phys::setPageState(unsigned long, bool)>
c001014f:	83 c4 10             	add    esp,0x10
c0010152:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0010158:	75 e9                	jne    c0010143 <Phys::physicalMemorySetup(unsigned int)+0x2c>
c001015a:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c0010161:	66 85 c0             	test   ax,ax
c0010164:	0f 84 8e 01 00 00    	je     c00102f8 <Phys::physicalMemorySetup(unsigned int)+0x1e1>
c001016a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001016e:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0010176:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001017a:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c001017f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0010183:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001018b:	eb 15                	jmp    c00101a2 <Phys::physicalMemorySetup(unsigned int)+0x8b>
c001018d:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0010191:	83 c3 18             	add    ebx,0x18
c0010194:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010198:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c001019c:	0f 84 66 01 00 00    	je     c0010308 <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c00101a2:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00101a5:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00101a8:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00101ab:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00101af:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00101b3:	8b 33                	mov    esi,DWORD PTR [ebx]
c00101b5:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c00101b8:	01 f0                	add    eax,esi
c00101ba:	55                   	push   ebp
c00101bb:	11 fa                	adc    edx,edi
c00101bd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00101c1:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00101c5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00101c9:	56                   	push   esi
c00101ca:	68 08 ac 02 c0       	push   0xc002ac08
c00101cf:	e8 1d 2d 00 00       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c00101d4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00101d8:	83 c4 10             	add    esp,0x10
c00101db:	09 f8                	or     eax,edi
c00101dd:	0f 85 25 01 00 00    	jne    c0010308 <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c00101e3:	4d                   	dec    ebp
c00101e4:	75 a7                	jne    c001018d <Phys::physicalMemorySetup(unsigned int)+0x76>
c00101e6:	ba 00 00 08 00       	mov    edx,0x80000
c00101eb:	89 c1                	mov    ecx,eax
c00101ed:	39 f2                	cmp    edx,esi
c00101ef:	19 f9                	sbb    ecx,edi
c00101f1:	0f 82 a7 00 00 00    	jb     c001029e <Phys::physicalMemorySetup(unsigned int)+0x187>
c00101f7:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c00101fb:	89 c1                	mov    ecx,eax
c00101fd:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c0010201:	0f 83 97 00 00 00    	jae    c001029e <Phys::physicalMemorySetup(unsigned int)+0x187>
c0010207:	ba 00 00 0a 00       	mov    edx,0xa0000
c001020c:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0010210:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0010214:	39 fa                	cmp    edx,edi
c0010216:	19 e8                	sbb    eax,ebp
c0010218:	0f 82 14 01 00 00    	jb     c0010332 <Phys::physicalMemorySetup(unsigned int)+0x21b>
c001021e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0010222:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0010226:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c001022c:	ba ff 1f 00 00       	mov    edx,0x1fff
c0010231:	83 d5 ff             	adc    ebp,0xffffffff
c0010234:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0010238:	31 c0                	xor    eax,eax
c001023a:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c001023e:	39 fa                	cmp    edx,edi
c0010240:	89 c1                	mov    ecx,eax
c0010242:	19 e9                	sbb    ecx,ebp
c0010244:	0f 83 43 ff ff ff    	jae    c001018d <Phys::physicalMemorySetup(unsigned int)+0x76>
c001024a:	be 00 00 08 00       	mov    esi,0x80000
c001024f:	50                   	push   eax
c0010250:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0010254:	57                   	push   edi
c0010255:	56                   	push   esi
c0010256:	68 2c ac 02 c0       	push   0xc002ac2c
c001025b:	e8 91 2c 00 00       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c0010260:	5a                   	pop    edx
c0010261:	59                   	pop    ecx
c0010262:	57                   	push   edi
c0010263:	56                   	push   esi
c0010264:	e8 76 fe ff ff       	call   c00100df <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c0010269:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001026d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0010271:	83 c4 0c             	add    esp,0xc
c0010274:	0f ac d0 0c          	shrd   eax,edx,0xc
c0010278:	03 05 b4 ee 02 c0    	add    eax,DWORD PTR ds:0xc002eeb4
c001027e:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0010285:	a3 b4 ee 02 c0       	mov    ds:0xc002eeb4,eax
c001028a:	52                   	push   edx
c001028b:	50                   	push   eax
c001028c:	68 e9 ab 02 c0       	push   0xc002abe9
c0010291:	e8 5b 2c 00 00       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c0010296:	83 c4 10             	add    esp,0x10
c0010299:	e9 ef fe ff ff       	jmp    c001018d <Phys::physicalMemorySetup(unsigned int)+0x76>
c001029e:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c00102a2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00102a6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00102aa:	39 ea                	cmp    edx,ebp
c00102ac:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c00102b0:	0f 82 d7 fe ff ff    	jb     c001018d <Phys::physicalMemorySetup(unsigned int)+0x76>
c00102b6:	ba ff 1f 00 00       	mov    edx,0x1fff
c00102bb:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c00102bf:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c00102c3:	0f 83 c4 fe ff ff    	jae    c001018d <Phys::physicalMemorySetup(unsigned int)+0x76>
c00102c9:	39 ee                	cmp    esi,ebp
c00102cb:	89 f8                	mov    eax,edi
c00102cd:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c00102d1:	0f 83 78 ff ff ff    	jae    c001024f <Phys::physicalMemorySetup(unsigned int)+0x138>
c00102d7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00102db:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00102df:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c00102e3:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00102e7:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c00102eb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00102ef:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00102f3:	e9 57 ff ff ff       	jmp    c001024f <Phys::physicalMemorySetup(unsigned int)+0x138>
c00102f8:	83 ec 0c             	sub    esp,0xc
c00102fb:	68 db ab 02 c0       	push   0xc002abdb
c0010300:	e8 ac a5 00 00       	call   c001a8b1 <Krnl::panic(char const*)>
c0010305:	83 c4 10             	add    esp,0x10
c0010308:	bb 40 01 00 00       	mov    ebx,0x140
c001030d:	83 ec 08             	sub    esp,0x8
c0010310:	6a 00                	push   0x0
c0010312:	53                   	push   ebx
c0010313:	43                   	inc    ebx
c0010314:	e8 ad fb ff ff       	call   c000fec6 <Phys::setPageState(unsigned long, bool)>
c0010319:	ff 05 b4 ee 02 c0    	inc    DWORD PTR ds:0xc002eeb4
c001031f:	83 c4 10             	add    esp,0x10
c0010322:	81 fb 80 01 00 00    	cmp    ebx,0x180
c0010328:	75 e3                	jne    c001030d <Phys::physicalMemorySetup(unsigned int)+0x1f6>
c001032a:	83 c4 3c             	add    esp,0x3c
c001032d:	5b                   	pop    ebx
c001032e:	5e                   	pop    esi
c001032f:	5f                   	pop    edi
c0010330:	5d                   	pop    ebp
c0010331:	c3                   	ret    
c0010332:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c001033a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010342:	e9 d7 fe ff ff       	jmp    c001021e <Phys::physicalMemorySetup(unsigned int)+0x107>
c0010347:	90                   	nop

c0010348 <Pipe::isAtty()>:
c0010348:	31 c0                	xor    eax,eax
c001034a:	c3                   	ret    
c001034b:	90                   	nop

c001034c <Pipe::~Pipe()>:
c001034c:	83 ec 0c             	sub    esp,0xc
c001034f:	ba 98 ac 02 c0       	mov    edx,0xc002ac98
c0010354:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010358:	89 10                	mov    DWORD PTR [eax],edx
c001035a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001035e:	83 ec 0c             	sub    esp,0xc
c0010361:	50                   	push   eax
c0010362:	e8 1d 15 00 00       	call   c0011884 <UnixFile::~UnixFile()>
c0010367:	83 c4 10             	add    esp,0x10
c001036a:	90                   	nop
c001036b:	83 c4 0c             	add    esp,0xc
c001036e:	c3                   	ret    
c001036f:	90                   	nop

c0010370 <Pipe::~Pipe()>:
c0010370:	83 ec 0c             	sub    esp,0xc
c0010373:	83 ec 0c             	sub    esp,0xc
c0010376:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001037a:	e8 cd ff ff ff       	call   c001034c <Pipe::~Pipe()>
c001037f:	83 c4 10             	add    esp,0x10
c0010382:	83 ec 08             	sub    esp,0x8
c0010385:	6a 20                	push   0x20
c0010387:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001038b:	e8 81 2a 00 00       	call   c0012e11 <operator delete(void*, unsigned long)>
c0010390:	83 c4 10             	add    esp,0x10
c0010393:	83 c4 0c             	add    esp,0xc
c0010396:	c3                   	ret    
c0010397:	90                   	nop

c0010398 <Pipe::read(unsigned long long, void*, int*)>:
c0010398:	55                   	push   ebp
c0010399:	57                   	push   edi
c001039a:	56                   	push   esi
c001039b:	53                   	push   ebx
c001039c:	83 ec 1c             	sub    esp,0x1c
c001039f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00103a3:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00103a7:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00103ab:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c00103ae:	89 c8                	mov    eax,ecx
c00103b0:	99                   	cdq    
c00103b1:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c00103b5:	74 24                	je     c00103db <Pipe::read(unsigned long long, void*, int*)+0x43>
c00103b7:	39 f9                	cmp    ecx,edi
c00103b9:	89 d1                	mov    ecx,edx
c00103bb:	19 f1                	sbb    ecx,esi
c00103bd:	73 1c                	jae    c00103db <Pipe::read(unsigned long long, void*, int*)+0x43>
c00103bf:	fa                   	cli    
c00103c0:	ff 05 a8 23 03 c0    	inc    DWORD PTR ds:0xc00323a8
c00103c6:	e8 e7 e0 00 00       	call   c001e4b2 <schedule()>
c00103cb:	a1 a8 23 03 c0       	mov    eax,ds:0xc00323a8
c00103d0:	48                   	dec    eax
c00103d1:	a3 a8 23 03 c0       	mov    ds:0xc00323a8,eax
c00103d6:	75 d3                	jne    c00103ab <Pipe::read(unsigned long long, void*, int*)+0x13>
c00103d8:	fb                   	sti    
c00103d9:	eb d0                	jmp    c00103ab <Pipe::read(unsigned long long, void*, int*)+0x13>
c00103db:	39 f8                	cmp    eax,edi
c00103dd:	89 d1                	mov    ecx,edx
c00103df:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00103e3:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00103e7:	19 f1                	sbb    ecx,esi
c00103e9:	73 08                	jae    c00103f3 <Pipe::read(unsigned long long, void*, int*)+0x5b>
c00103eb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00103ef:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00103f3:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00103f6:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c00103f9:	29 c6                	sub    esi,eax
c00103fb:	89 f1                	mov    ecx,esi
c00103fd:	c1 f9 1f             	sar    ecx,0x1f
c0010400:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0010404:	89 ca                	mov    edx,ecx
c0010406:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001040a:	19 d1                	sbb    ecx,edx
c001040c:	73 04                	jae    c0010412 <Pipe::read(unsigned long long, void*, int*)+0x7a>
c001040e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0010412:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0010416:	89 fd                	mov    ebp,edi
c0010418:	29 f5                	sub    ebp,esi
c001041a:	85 f6                	test   esi,esi
c001041c:	74 12                	je     c0010430 <Pipe::read(unsigned long long, void*, int*)+0x98>
c001041e:	52                   	push   edx
c001041f:	56                   	push   esi
c0010420:	03 43 0c             	add    eax,DWORD PTR [ebx+0xc]
c0010423:	50                   	push   eax
c0010424:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0010428:	e8 3b 03 ff ff       	call   c0000768 <memcpy>
c001042d:	83 c4 10             	add    esp,0x10
c0010430:	85 ed                	test   ebp,ebp
c0010432:	74 12                	je     c0010446 <Pipe::read(unsigned long long, void*, int*)+0xae>
c0010434:	50                   	push   eax
c0010435:	55                   	push   ebp
c0010436:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0010439:	03 74 24 48          	add    esi,DWORD PTR [esp+0x48]
c001043d:	56                   	push   esi
c001043e:	e8 25 03 ff ff       	call   c0000768 <memcpy>
c0010443:	83 c4 10             	add    esp,0x10
c0010446:	29 7b 14             	sub    DWORD PTR [ebx+0x14],edi
c0010449:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001044c:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c001044f:	99                   	cdq    
c0010450:	89 f7                	mov    edi,esi
c0010452:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0010456:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c001045a:	c1 ff 1f             	sar    edi,0x1f
c001045d:	57                   	push   edi
c001045e:	56                   	push   esi
c001045f:	52                   	push   edx
c0010460:	50                   	push   eax
c0010461:	e8 6e 6e 01 00       	call   c00272d4 <__umoddi3>
c0010466:	83 c4 10             	add    esp,0x10
c0010469:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c001046c:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0010471:	75 10                	jne    c0010483 <Pipe::read(unsigned long long, void*, int*)+0xeb>
c0010473:	83 ec 0c             	sub    esp,0xc
c0010476:	68 55 ac 02 c0       	push   0xc002ac55
c001047b:	e8 31 a4 00 00       	call   c001a8b1 <Krnl::panic(char const*)>
c0010480:	83 c4 10             	add    esp,0x10
c0010483:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010487:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001048b:	89 10                	mov    DWORD PTR [eax],edx
c001048d:	83 c4 1c             	add    esp,0x1c
c0010490:	31 c0                	xor    eax,eax
c0010492:	5b                   	pop    ebx
c0010493:	5e                   	pop    esi
c0010494:	5f                   	pop    edi
c0010495:	5d                   	pop    ebp
c0010496:	c3                   	ret    
c0010497:	90                   	nop

c0010498 <Pipe::write(unsigned long long, void*, int*)>:
c0010498:	55                   	push   ebp
c0010499:	57                   	push   edi
c001049a:	56                   	push   esi
c001049b:	53                   	push   ebx
c001049c:	83 ec 1c             	sub    esp,0x1c
c001049f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00104a3:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00104a7:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00104ab:	89 04 24             	mov    DWORD PTR [esp],eax
c00104ae:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c00104b1:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
c00104b4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00104b8:	89 de                	mov    esi,ebx
c00104ba:	89 df                	mov    edi,ebx
c00104bc:	c1 ff 1f             	sar    edi,0x1f
c00104bf:	01 c6                	add    esi,eax
c00104c1:	89 c8                	mov    eax,ecx
c00104c3:	11 d7                	adc    edi,edx
c00104c5:	99                   	cdq    
c00104c6:	39 f1                	cmp    ecx,esi
c00104c8:	89 d0                	mov    eax,edx
c00104ca:	19 f8                	sbb    eax,edi
c00104cc:	b8 01 00 00 00       	mov    eax,0x1
c00104d1:	0f 82 80 00 00 00    	jb     c0010557 <Pipe::write(unsigned long long, void*, int*)+0xbf>
c00104d7:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00104da:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00104dd:	01 d8                	add    eax,ebx
c00104df:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c00104e3:	99                   	cdq    
c00104e4:	f7 f9                	idiv   ecx
c00104e6:	29 d1                	sub    ecx,edx
c00104e8:	89 d7                	mov    edi,edx
c00104ea:	89 c8                	mov    eax,ecx
c00104ec:	99                   	cdq    
c00104ed:	39 ce                	cmp    esi,ecx
c00104ef:	19 d3                	sbb    ebx,edx
c00104f1:	bb 00 00 00 00       	mov    ebx,0x0
c00104f6:	72 04                	jb     c00104fc <Pipe::write(unsigned long long, void*, int*)+0x64>
c00104f8:	89 f3                	mov    ebx,esi
c00104fa:	29 cb                	sub    ebx,ecx
c00104fc:	89 f1                	mov    ecx,esi
c00104fe:	29 d9                	sub    ecx,ebx
c0010500:	74 1a                	je     c001051c <Pipe::write(unsigned long long, void*, int*)+0x84>
c0010502:	52                   	push   edx
c0010503:	51                   	push   ecx
c0010504:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0010508:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001050c:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c001050f:	57                   	push   edi
c0010510:	e8 53 02 ff ff       	call   c0000768 <memcpy>
c0010515:	83 c4 10             	add    esp,0x10
c0010518:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001051c:	85 db                	test   ebx,ebx
c001051e:	74 12                	je     c0010532 <Pipe::write(unsigned long long, void*, int*)+0x9a>
c0010520:	50                   	push   eax
c0010521:	53                   	push   ebx
c0010522:	03 4c 24 44          	add    ecx,DWORD PTR [esp+0x44]
c0010526:	51                   	push   ecx
c0010527:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c001052a:	e8 39 02 ff ff       	call   c0000768 <memcpy>
c001052f:	83 c4 10             	add    esp,0x10
c0010532:	01 75 14             	add    DWORD PTR [ebp+0x14],esi
c0010535:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c001053a:	75 10                	jne    c001054c <Pipe::write(unsigned long long, void*, int*)+0xb4>
c001053c:	83 ec 0c             	sub    esp,0xc
c001053f:	68 71 ac 02 c0       	push   0xc002ac71
c0010544:	e8 68 a3 00 00       	call   c001a8b1 <Krnl::panic(char const*)>
c0010549:	83 c4 10             	add    esp,0x10
c001054c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010550:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0010553:	89 38                	mov    DWORD PTR [eax],edi
c0010555:	31 c0                	xor    eax,eax
c0010557:	83 c4 1c             	add    esp,0x1c
c001055a:	5b                   	pop    ebx
c001055b:	5e                   	pop    esi
c001055c:	5f                   	pop    edi
c001055d:	5d                   	pop    ebp
c001055e:	c3                   	ret    
c001055f:	90                   	nop

c0010560 <Pipe::Pipe(int)>:
c0010560:	83 ec 0c             	sub    esp,0xc
c0010563:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010567:	83 ec 08             	sub    esp,0x8
c001056a:	6a 00                	push   0x0
c001056c:	50                   	push   eax
c001056d:	e8 30 11 00 00       	call   c00116a2 <UnixFile::UnixFile(int)>
c0010572:	83 c4 10             	add    esp,0x10
c0010575:	ba 98 ac 02 c0       	mov    edx,0xc002ac98
c001057a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001057e:	89 10                	mov    DWORD PTR [eax],edx
c0010580:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010584:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010588:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001058b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001058f:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c0010596:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001059a:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c00105a1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00105a5:	83 ec 0c             	sub    esp,0xc
c00105a8:	50                   	push   eax
c00105a9:	e8 84 f3 ff ff       	call   c000f932 <malloc>
c00105ae:	83 c4 10             	add    esp,0x10
c00105b1:	89 c2                	mov    edx,eax
c00105b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00105b7:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00105ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00105be:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c00105c2:	90                   	nop
c00105c3:	83 c4 0c             	add    esp,0xc
c00105c6:	c3                   	ret    
c00105c7:	90                   	nop

c00105c8 <VgaText::isAtty()>:
c00105c8:	b0 01                	mov    al,0x1
c00105ca:	c3                   	ret    
c00105cb:	90                   	nop

c00105cc <VgaText::~VgaText()>:
c00105cc:	83 ec 0c             	sub    esp,0xc
c00105cf:	ba 54 ad 02 c0       	mov    edx,0xc002ad54
c00105d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00105d8:	89 10                	mov    DWORD PTR [eax],edx
c00105da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00105de:	83 ec 0c             	sub    esp,0xc
c00105e1:	50                   	push   eax
c00105e2:	e8 9d 12 00 00       	call   c0011884 <UnixFile::~UnixFile()>
c00105e7:	83 c4 10             	add    esp,0x10
c00105ea:	90                   	nop
c00105eb:	83 c4 0c             	add    esp,0xc
c00105ee:	c3                   	ret    
c00105ef:	90                   	nop

c00105f0 <VgaText::~VgaText()>:
c00105f0:	83 ec 0c             	sub    esp,0xc
c00105f3:	83 ec 0c             	sub    esp,0xc
c00105f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00105fa:	e8 cd ff ff ff       	call   c00105cc <VgaText::~VgaText()>
c00105ff:	83 c4 10             	add    esp,0x10
c0010602:	83 ec 08             	sub    esp,0x8
c0010605:	68 c4 02 00 00       	push   0x2c4
c001060a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001060e:	e8 fe 27 00 00       	call   c0012e11 <operator delete(void*, unsigned long)>
c0010613:	83 c4 10             	add    esp,0x10
c0010616:	83 c4 0c             	add    esp,0xc
c0010619:	c3                   	ret    

c001061a <VgaText::read(unsigned long long, void*, int*)>:
c001061a:	83 ec 10             	sub    esp,0x10
c001061d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010621:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0010625:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010629:	e8 86 5d 00 00       	call   c00163b4 <readKeyboard(VgaText*, char*, unsigned long)>
c001062e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0010632:	89 02                	mov    DWORD PTR [edx],eax
c0010634:	31 c0                	xor    eax,eax
c0010636:	83 c4 1c             	add    esp,0x1c
c0010639:	c3                   	ret    

c001063a <setTerminalScrollLock(bool)>:
c001063a:	c3                   	ret    

c001063b <addToTerminalCycle(VgaText*)>:
c001063b:	8b 15 40 ef 02 c0    	mov    edx,DWORD PTR ds:0xc002ef40
c0010641:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010645:	85 d2                	test   edx,edx
c0010647:	75 09                	jne    c0010652 <addToTerminalCycle(VgaText*)+0x17>
c0010649:	89 40 24             	mov    DWORD PTR [eax+0x24],eax
c001064c:	a3 40 ef 02 c0       	mov    ds:0xc002ef40,eax
c0010651:	c3                   	ret    
c0010652:	8b 4a 24             	mov    ecx,DWORD PTR [edx+0x24]
c0010655:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c0010658:	89 48 24             	mov    DWORD PTR [eax+0x24],ecx
c001065b:	c3                   	ret    

c001065c <installVgaTextImplementation()>:
c001065c:	83 ec 10             	sub    esp,0x10
c001065f:	6a 20                	push   0x20
c0010661:	6a 00                	push   0x0
c0010663:	68 20 ef 02 c0       	push   0xc002ef20
c0010668:	e8 2f 01 ff ff       	call   c000079c <memset>
c001066d:	83 c4 1c             	add    esp,0x1c
c0010670:	c3                   	ret    

c0010671 <scrollTerminalScrollLock(int)>:
c0010671:	c3                   	ret    

c0010672 <VgaText::load()>:
c0010672:	53                   	push   ebx
c0010673:	31 c0                	xor    eax,eax
c0010675:	83 ec 58             	sub    esp,0x58
c0010678:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c001067c:	89 e2                	mov    edx,esp
c001067e:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c0010682:	40                   	inc    eax
c0010683:	83 f8 50             	cmp    eax,0x50
c0010686:	75 f6                	jne    c001067e <VgaText::load()+0xc>
c0010688:	31 c0                	xor    eax,eax
c001068a:	8a 8c 03 82 00 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x82]
c0010691:	84 c9                	test   cl,cl
c0010693:	74 06                	je     c001069b <VgaText::load()+0x29>
c0010695:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0010698:	40                   	inc    eax
c0010699:	eb ef                	jmp    c001068a <VgaText::load()+0x18>
c001069b:	8b 43 60             	mov    eax,DWORD PTR [ebx+0x60]
c001069e:	85 c0                	test   eax,eax
c00106a0:	74 09                	je     c00106ab <VgaText::load()+0x39>
c00106a2:	51                   	push   ecx
c00106a3:	51                   	push   ecx
c00106a4:	52                   	push   edx
c00106a5:	53                   	push   ebx
c00106a6:	ff d0                	call   eax
c00106a8:	83 c4 10             	add    esp,0x10
c00106ab:	8b 43 64             	mov    eax,DWORD PTR [ebx+0x64]
c00106ae:	85 c0                	test   eax,eax
c00106b0:	74 09                	je     c00106bb <VgaText::load()+0x49>
c00106b2:	83 ec 0c             	sub    esp,0xc
c00106b5:	53                   	push   ebx
c00106b6:	ff d0                	call   eax
c00106b8:	83 c4 10             	add    esp,0x10
c00106bb:	83 c4 58             	add    esp,0x58
c00106be:	5b                   	pop    ebx
c00106bf:	c3                   	ret    

c00106c0 <VgaText::updateCursor()>:
c00106c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00106c4:	39 05 44 ef 02 c0    	cmp    DWORD PTR ds:0xc002ef44,eax
c00106ca:	75 09                	jne    c00106d5 <VgaText::updateCursor()+0x15>
c00106cc:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c00106cf:	85 c0                	test   eax,eax
c00106d1:	74 02                	je     c00106d5 <VgaText::updateCursor()+0x15>
c00106d3:	ff e0                	jmp    eax
c00106d5:	c3                   	ret    

c00106d6 <VgaText::showCursor(bool)>:
c00106d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00106da:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00106de:	88 50 20             	mov    BYTE PTR [eax+0x20],dl
c00106e1:	c3                   	ret    

c00106e2 <VgaText::disableBlink(bool)>:
c00106e2:	56                   	push   esi
c00106e3:	53                   	push   ebx
c00106e4:	51                   	push   ecx
c00106e5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00106e9:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00106ed:	39 1d 44 ef 02 c0    	cmp    DWORD PTR ds:0xc002ef44,ebx
c00106f3:	75 15                	jne    c001070a <VgaText::disableBlink(bool)+0x28>
c00106f5:	8b 43 78             	mov    eax,DWORD PTR [ebx+0x78]
c00106f8:	85 c0                	test   eax,eax
c00106fa:	74 0e                	je     c001070a <VgaText::disableBlink(bool)+0x28>
c00106fc:	89 f1                	mov    ecx,esi
c00106fe:	52                   	push   edx
c00106ff:	52                   	push   edx
c0010700:	0f b6 d1             	movzx  edx,cl
c0010703:	52                   	push   edx
c0010704:	53                   	push   ebx
c0010705:	ff d0                	call   eax
c0010707:	83 c4 10             	add    esp,0x10
c001070a:	89 f0                	mov    eax,esi
c001070c:	83 f0 01             	xor    eax,0x1
c001070f:	88 43 21             	mov    BYTE PTR [ebx+0x21],al
c0010712:	58                   	pop    eax
c0010713:	5b                   	pop    ebx
c0010714:	5e                   	pop    esi
c0010715:	c3                   	ret    

c0010716 <VgaText::doANSI_SGR(int)>:
c0010716:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001071a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001071e:	85 d2                	test   edx,edx
c0010720:	75 0b                	jne    c001072d <VgaText::doANSI_SGR(int)+0x17>
c0010722:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0010725:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0010728:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001072b:	eb 59                	jmp    c0010786 <VgaText::doANSI_SGR(int)+0x70>
c001072d:	83 fa 07             	cmp    edx,0x7
c0010730:	75 0b                	jne    c001073d <VgaText::doANSI_SGR(int)+0x27>
c0010732:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0010735:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0010738:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c001073b:	eb 49                	jmp    c0010786 <VgaText::doANSI_SGR(int)+0x70>
c001073d:	83 fa 1b             	cmp    edx,0x1b
c0010740:	74 e0                	je     c0010722 <VgaText::doANSI_SGR(int)+0xc>
c0010742:	8d 4a e2             	lea    ecx,[edx-0x1e]
c0010745:	83 f9 07             	cmp    ecx,0x7
c0010748:	77 09                	ja     c0010753 <VgaText::doANSI_SGR(int)+0x3d>
c001074a:	8b 14 8d c0 dd 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd2240]
c0010751:	eb 20                	jmp    c0010773 <VgaText::doANSI_SGR(int)+0x5d>
c0010753:	8d 4a d8             	lea    ecx,[edx-0x28]
c0010756:	83 f9 07             	cmp    ecx,0x7
c0010759:	77 09                	ja     c0010764 <VgaText::doANSI_SGR(int)+0x4e>
c001075b:	8b 14 8d c0 dd 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd2240]
c0010762:	eb 22                	jmp    c0010786 <VgaText::doANSI_SGR(int)+0x70>
c0010764:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0010767:	83 f9 07             	cmp    ecx,0x7
c001076a:	77 0b                	ja     c0010777 <VgaText::doANSI_SGR(int)+0x61>
c001076c:	8b 14 95 78 dc 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2388]
c0010773:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0010776:	c3                   	ret    
c0010777:	8d 4a 9c             	lea    ecx,[edx-0x64]
c001077a:	83 f9 07             	cmp    ecx,0x7
c001077d:	77 0a                	ja     c0010789 <VgaText::doANSI_SGR(int)+0x73>
c001077f:	8b 14 95 50 dc 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd23b0]
c0010786:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0010789:	c3                   	ret    

c001078a <VgaText::setDefaultBgColour(VgaColour)>:
c001078a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001078e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010792:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0010795:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0010798:	c3                   	ret    
c0010799:	90                   	nop

c001079a <VgaText::setDefaultFgColour(VgaColour)>:
c001079a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001079e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00107a2:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00107a5:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00107a8:	c3                   	ret    
c00107a9:	90                   	nop

c00107aa <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c00107aa:	53                   	push   ebx
c00107ab:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00107af:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00107b3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00107b7:	51                   	push   ecx
c00107b8:	e8 cd ff ff ff       	call   c001078a <VgaText::setDefaultBgColour(VgaColour)>
c00107bd:	58                   	pop    eax
c00107be:	5a                   	pop    edx
c00107bf:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00107c3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00107c7:	5b                   	pop    ebx
c00107c8:	eb d0                	jmp    c001079a <VgaText::setDefaultFgColour(VgaColour)>

c00107ca <VgaText::combineColours(unsigned char, unsigned char)>:
c00107ca:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c00107ce:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00107d3:	83 e0 0f             	and    eax,0xf
c00107d6:	c1 e2 04             	shl    edx,0x4
c00107d9:	09 d0                	or     eax,edx
c00107db:	c3                   	ret    

c00107dc <VgaText::scrollScreen()>:
c00107dc:	55                   	push   ebp
c00107dd:	b9 01 00 00 00       	mov    ecx,0x1
c00107e2:	57                   	push   edi
c00107e3:	56                   	push   esi
c00107e4:	53                   	push   ebx
c00107e5:	83 ec 0c             	sub    esp,0xc
c00107e8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00107ec:	69 f1 a0 00 00 00    	imul   esi,ecx,0xa0
c00107f2:	31 ff                	xor    edi,edi
c00107f4:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00107f7:	83 f9 17             	cmp    ecx,0x17
c00107fa:	8a 14 30             	mov    dl,BYTE PTR [eax+esi*1]
c00107fd:	88 94 30 60 ff ff ff 	mov    BYTE PTR [eax+esi*1-0xa0],dl
c0010804:	75 27                	jne    c001082d <VgaText::scrollScreen()+0x51>
c0010806:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0010809:	01 f5                	add    ebp,esi
c001080b:	f7 c7 01 00 00 00    	test   edi,0x1
c0010811:	74 16                	je     c0010829 <VgaText::scrollScreen()+0x4d>
c0010813:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0010817:	50                   	push   eax
c0010818:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c001081c:	50                   	push   eax
c001081d:	e8 a8 ff ff ff       	call   c00107ca <VgaText::combineColours(unsigned char, unsigned char)>
c0010822:	5a                   	pop    edx
c0010823:	5a                   	pop    edx
c0010824:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0010827:	eb 04                	jmp    c001082d <VgaText::scrollScreen()+0x51>
c0010829:	c6 45 00 20          	mov    BYTE PTR [ebp+0x0],0x20
c001082d:	47                   	inc    edi
c001082e:	46                   	inc    esi
c001082f:	81 ff a0 00 00 00    	cmp    edi,0xa0
c0010835:	75 bd                	jne    c00107f4 <VgaText::scrollScreen()+0x18>
c0010837:	41                   	inc    ecx
c0010838:	83 f9 18             	cmp    ecx,0x18
c001083b:	75 af                	jne    c00107ec <VgaText::scrollScreen()+0x10>
c001083d:	39 1d 44 ef 02 c0    	cmp    DWORD PTR ds:0xc002ef44,ebx
c0010843:	75 1b                	jne    c0010860 <VgaText::scrollScreen()+0x84>
c0010845:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0010849:	74 05                	je     c0010850 <VgaText::scrollScreen()+0x74>
c001084b:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c001084e:	eb 10                	jmp    c0010860 <VgaText::scrollScreen()+0x84>
c0010850:	8b 43 6c             	mov    eax,DWORD PTR [ebx+0x6c]
c0010853:	85 c0                	test   eax,eax
c0010855:	74 09                	je     c0010860 <VgaText::scrollScreen()+0x84>
c0010857:	83 ec 0c             	sub    esp,0xc
c001085a:	53                   	push   ebx
c001085b:	ff d0                	call   eax
c001085d:	83 c4 10             	add    esp,0x10
c0010860:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0010864:	83 c4 0c             	add    esp,0xc
c0010867:	5b                   	pop    ebx
c0010868:	5e                   	pop    esi
c0010869:	5f                   	pop    edi
c001086a:	5d                   	pop    ebp
c001086b:	e9 50 fe ff ff       	jmp    c00106c0 <VgaText::updateCursor()>

c0010870 <VgaText::combineCharAndColour(char, unsigned char)>:
c0010870:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0010875:	c1 e0 08             	shl    eax,0x8
c0010878:	89 c2                	mov    edx,eax
c001087a:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c001087f:	09 d0                	or     eax,edx
c0010881:	c3                   	ret    

c0010882 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c0010882:	56                   	push   esi
c0010883:	53                   	push   ebx
c0010884:	51                   	push   ecx
c0010885:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0010889:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c001088e:	50                   	push   eax
c001088f:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0010894:	50                   	push   eax
c0010895:	e8 30 ff ff ff       	call   c00107ca <VgaText::combineColours(unsigned char, unsigned char)>
c001089a:	5b                   	pop    ebx
c001089b:	0f b6 c0             	movzx  eax,al
c001089e:	5e                   	pop    esi
c001089f:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c00108a4:	50                   	push   eax
c00108a5:	53                   	push   ebx
c00108a6:	e8 c5 ff ff ff       	call   c0010870 <VgaText::combineCharAndColour(char, unsigned char)>
c00108ab:	5a                   	pop    edx
c00108ac:	5e                   	pop    esi
c00108ad:	8b 71 0c             	mov    esi,DWORD PTR [ecx+0xc]
c00108b0:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c00108b6:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c00108ba:	0f b7 d2             	movzx  edx,dx
c00108bd:	66 89 04 56          	mov    WORD PTR [esi+edx*2],ax
c00108c1:	39 0d 44 ef 02 c0    	cmp    DWORD PTR ds:0xc002ef44,ecx
c00108c7:	75 10                	jne    c00108d9 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c00108c9:	8b 41 7c             	mov    eax,DWORD PTR [ecx+0x7c]
c00108cc:	85 c0                	test   eax,eax
c00108ce:	74 09                	je     c00108d9 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c00108d0:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c00108d4:	5a                   	pop    edx
c00108d5:	5b                   	pop    ebx
c00108d6:	5e                   	pop    esi
c00108d7:	ff e0                	jmp    eax
c00108d9:	58                   	pop    eax
c00108da:	5b                   	pop    ebx
c00108db:	5e                   	pop    esi
c00108dc:	c3                   	ret    
c00108dd:	90                   	nop

c00108de <VgaText::getCursorX()>:
c00108de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00108e2:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00108e5:	c3                   	ret    

c00108e6 <VgaText::getCursorY()>:
c00108e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00108ea:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00108ed:	c3                   	ret    

c00108ee <VgaText::setCursor(int, int)>:
c00108ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00108f2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00108f6:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00108f9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00108fd:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0010900:	e9 bb fd ff ff       	jmp    c00106c0 <VgaText::updateCursor()>
c0010905:	90                   	nop

c0010906 <VgaText::setCursorX(int)>:
c0010906:	83 ec 10             	sub    esp,0x10
c0010909:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001090d:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0010910:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010914:	50                   	push   eax
c0010915:	e8 d4 ff ff ff       	call   c00108ee <VgaText::setCursor(int, int)>
c001091a:	83 c4 1c             	add    esp,0x1c
c001091d:	c3                   	ret    

c001091e <VgaText::setCursorY(int)>:
c001091e:	83 ec 10             	sub    esp,0x10
c0010921:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010925:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010929:	ff 70 14             	push   DWORD PTR [eax+0x14]
c001092c:	50                   	push   eax
c001092d:	e8 bc ff ff ff       	call   c00108ee <VgaText::setCursor(int, int)>
c0010932:	83 c4 1c             	add    esp,0x1c
c0010935:	c3                   	ret    

c0010936 <VgaText::incrementCursor(bool)>:
c0010936:	56                   	push   esi
c0010937:	53                   	push   ebx
c0010938:	51                   	push   ecx
c0010939:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001093d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010941:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0010944:	40                   	inc    eax
c0010945:	83 f8 50             	cmp    eax,0x50
c0010948:	74 05                	je     c001094f <VgaText::incrementCursor(bool)+0x19>
c001094a:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001094d:	eb 24                	jmp    c0010973 <VgaText::incrementCursor(bool)+0x3d>
c001094f:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0010952:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0010959:	8d 50 01             	lea    edx,[eax+0x1]
c001095c:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c001095f:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0010962:	75 0f                	jne    c0010973 <VgaText::incrementCursor(bool)+0x3d>
c0010964:	83 ec 0c             	sub    esp,0xc
c0010967:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c001096a:	53                   	push   ebx
c001096b:	e8 6c fe ff ff       	call   c00107dc <VgaText::scrollScreen()>
c0010970:	83 c4 10             	add    esp,0x10
c0010973:	89 f0                	mov    eax,esi
c0010975:	84 c0                	test   al,al
c0010977:	74 0c                	je     c0010985 <VgaText::incrementCursor(bool)+0x4f>
c0010979:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001097d:	5a                   	pop    edx
c001097e:	5b                   	pop    ebx
c001097f:	5e                   	pop    esi
c0010980:	e9 3b fd ff ff       	jmp    c00106c0 <VgaText::updateCursor()>
c0010985:	58                   	pop    eax
c0010986:	5b                   	pop    ebx
c0010987:	5e                   	pop    esi
c0010988:	c3                   	ret    
c0010989:	90                   	nop

c001098a <VgaText::updateRAMUsageDisplay(int)>:
c001098a:	56                   	push   esi
c001098b:	8b 35 a0 dd 02 c0    	mov    esi,DWORD PTR ds:0xc002dda0
c0010991:	53                   	push   ebx
c0010992:	bb 0a 00 00 00       	mov    ebx,0xa
c0010997:	6a 0f                	push   0xf
c0010999:	6a 00                	push   0x0
c001099b:	e8 2a fe ff ff       	call   c00107ca <VgaText::combineColours(unsigned char, unsigned char)>
c00109a0:	5a                   	pop    edx
c00109a1:	59                   	pop    ecx
c00109a2:	0f b6 c8             	movzx  ecx,al
c00109a5:	51                   	push   ecx
c00109a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109aa:	99                   	cdq    
c00109ab:	f7 fb                	idiv   ebx
c00109ad:	89 d3                	mov    ebx,edx
c00109af:	83 c0 30             	add    eax,0x30
c00109b2:	83 c3 30             	add    ebx,0x30
c00109b5:	0f be c0             	movsx  eax,al
c00109b8:	0f b6 db             	movzx  ebx,bl
c00109bb:	50                   	push   eax
c00109bc:	e8 af fe ff ff       	call   c0010870 <VgaText::combineCharAndColour(char, unsigned char)>
c00109c1:	5a                   	pop    edx
c00109c2:	5a                   	pop    edx
c00109c3:	66 89 86 96 00 00 00 	mov    WORD PTR [esi+0x96],ax
c00109ca:	51                   	push   ecx
c00109cb:	53                   	push   ebx
c00109cc:	e8 9f fe ff ff       	call   c0010870 <VgaText::combineCharAndColour(char, unsigned char)>
c00109d1:	5b                   	pop    ebx
c00109d2:	5a                   	pop    edx
c00109d3:	66 89 86 98 00 00 00 	mov    WORD PTR [esi+0x98],ax
c00109da:	51                   	push   ecx
c00109db:	6a 25                	push   0x25
c00109dd:	e8 8e fe ff ff       	call   c0010870 <VgaText::combineCharAndColour(char, unsigned char)>
c00109e2:	59                   	pop    ecx
c00109e3:	5b                   	pop    ebx
c00109e4:	66 89 86 9a 00 00 00 	mov    WORD PTR [esi+0x9a],ax
c00109eb:	5b                   	pop    ebx
c00109ec:	5e                   	pop    esi
c00109ed:	c3                   	ret    

c00109ee <VgaText::updateDiskUsage()>:
c00109ee:	55                   	push   ebp
c00109ef:	bd 10 27 00 00       	mov    ebp,0x2710
c00109f4:	57                   	push   edi
c00109f5:	8b 3d a0 dd 02 c0    	mov    edi,DWORD PTR ds:0xc002dda0
c00109fb:	56                   	push   esi
c00109fc:	53                   	push   ebx
c00109fd:	6a 0f                	push   0xf
c00109ff:	6a 00                	push   0x0
c0010a01:	e8 c4 fd ff ff       	call   c00107ca <VgaText::combineColours(unsigned char, unsigned char)>
c0010a06:	5a                   	pop    edx
c0010a07:	0f b6 d8             	movzx  ebx,al
c0010a0a:	59                   	pop    ecx
c0010a0b:	8b 35 c8 31 03 c0    	mov    esi,DWORD PTR ds:0xc00331c8
c0010a11:	53                   	push   ebx
c0010a12:	b9 0a 00 00 00       	mov    ecx,0xa
c0010a17:	89 f0                	mov    eax,esi
c0010a19:	99                   	cdq    
c0010a1a:	f7 fd                	idiv   ebp
c0010a1c:	99                   	cdq    
c0010a1d:	f7 f9                	idiv   ecx
c0010a1f:	8d 42 30             	lea    eax,[edx+0x30]
c0010a22:	0f b6 c0             	movzx  eax,al
c0010a25:	50                   	push   eax
c0010a26:	e8 45 fe ff ff       	call   c0010870 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a2b:	5d                   	pop    ebp
c0010a2c:	bd e8 03 00 00       	mov    ebp,0x3e8
c0010a31:	5a                   	pop    edx
c0010a32:	66 89 47 7e          	mov    WORD PTR [edi+0x7e],ax
c0010a36:	53                   	push   ebx
c0010a37:	89 f0                	mov    eax,esi
c0010a39:	99                   	cdq    
c0010a3a:	f7 fd                	idiv   ebp
c0010a3c:	99                   	cdq    
c0010a3d:	f7 f9                	idiv   ecx
c0010a3f:	8d 42 30             	lea    eax,[edx+0x30]
c0010a42:	0f b6 c0             	movzx  eax,al
c0010a45:	50                   	push   eax
c0010a46:	e8 25 fe ff ff       	call   c0010870 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a4b:	5d                   	pop    ebp
c0010a4c:	bd 64 00 00 00       	mov    ebp,0x64
c0010a51:	5a                   	pop    edx
c0010a52:	66 89 87 80 00 00 00 	mov    WORD PTR [edi+0x80],ax
c0010a59:	53                   	push   ebx
c0010a5a:	89 f0                	mov    eax,esi
c0010a5c:	99                   	cdq    
c0010a5d:	f7 fd                	idiv   ebp
c0010a5f:	99                   	cdq    
c0010a60:	f7 f9                	idiv   ecx
c0010a62:	8d 42 30             	lea    eax,[edx+0x30]
c0010a65:	0f b6 c0             	movzx  eax,al
c0010a68:	50                   	push   eax
c0010a69:	e8 02 fe ff ff       	call   c0010870 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a6e:	5d                   	pop    ebp
c0010a6f:	5a                   	pop    edx
c0010a70:	66 89 87 82 00 00 00 	mov    WORD PTR [edi+0x82],ax
c0010a77:	53                   	push   ebx
c0010a78:	89 f0                	mov    eax,esi
c0010a7a:	99                   	cdq    
c0010a7b:	f7 f9                	idiv   ecx
c0010a7d:	89 d6                	mov    esi,edx
c0010a7f:	99                   	cdq    
c0010a80:	f7 f9                	idiv   ecx
c0010a82:	8d 42 30             	lea    eax,[edx+0x30]
c0010a85:	0f b6 c0             	movzx  eax,al
c0010a88:	50                   	push   eax
c0010a89:	e8 e2 fd ff ff       	call   c0010870 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a8e:	5d                   	pop    ebp
c0010a8f:	5a                   	pop    edx
c0010a90:	66 89 87 84 00 00 00 	mov    WORD PTR [edi+0x84],ax
c0010a97:	53                   	push   ebx
c0010a98:	8d 46 30             	lea    eax,[esi+0x30]
c0010a9b:	0f b6 f0             	movzx  esi,al
c0010a9e:	56                   	push   esi
c0010a9f:	e8 cc fd ff ff       	call   c0010870 <VgaText::combineCharAndColour(char, unsigned char)>
c0010aa4:	5e                   	pop    esi
c0010aa5:	8b 35 c4 31 03 c0    	mov    esi,DWORD PTR ds:0xc00331c4
c0010aab:	5d                   	pop    ebp
c0010aac:	66 89 87 86 00 00 00 	mov    WORD PTR [edi+0x86],ax
c0010ab3:	bd 10 27 00 00       	mov    ebp,0x2710
c0010ab8:	53                   	push   ebx
c0010ab9:	89 f0                	mov    eax,esi
c0010abb:	99                   	cdq    
c0010abc:	f7 fd                	idiv   ebp
c0010abe:	99                   	cdq    
c0010abf:	f7 f9                	idiv   ecx
c0010ac1:	8d 42 30             	lea    eax,[edx+0x30]
c0010ac4:	0f b6 c0             	movzx  eax,al
c0010ac7:	50                   	push   eax
c0010ac8:	e8 a3 fd ff ff       	call   c0010870 <VgaText::combineCharAndColour(char, unsigned char)>
c0010acd:	5a                   	pop    edx
c0010ace:	5d                   	pop    ebp
c0010acf:	66 89 87 8a 00 00 00 	mov    WORD PTR [edi+0x8a],ax
c0010ad6:	bd e8 03 00 00       	mov    ebp,0x3e8
c0010adb:	53                   	push   ebx
c0010adc:	89 f0                	mov    eax,esi
c0010ade:	99                   	cdq    
c0010adf:	f7 fd                	idiv   ebp
c0010ae1:	99                   	cdq    
c0010ae2:	f7 f9                	idiv   ecx
c0010ae4:	8d 42 30             	lea    eax,[edx+0x30]
c0010ae7:	0f b6 c0             	movzx  eax,al
c0010aea:	50                   	push   eax
c0010aeb:	e8 80 fd ff ff       	call   c0010870 <VgaText::combineCharAndColour(char, unsigned char)>
c0010af0:	5a                   	pop    edx
c0010af1:	5d                   	pop    ebp
c0010af2:	66 89 87 8c 00 00 00 	mov    WORD PTR [edi+0x8c],ax
c0010af9:	bd 64 00 00 00       	mov    ebp,0x64
c0010afe:	53                   	push   ebx
c0010aff:	89 f0                	mov    eax,esi
c0010b01:	99                   	cdq    
c0010b02:	f7 fd                	idiv   ebp
c0010b04:	99                   	cdq    
c0010b05:	f7 f9                	idiv   ecx
c0010b07:	83 c2 30             	add    edx,0x30
c0010b0a:	0f b6 d2             	movzx  edx,dl
c0010b0d:	52                   	push   edx
c0010b0e:	e8 5d fd ff ff       	call   c0010870 <VgaText::combineCharAndColour(char, unsigned char)>
c0010b13:	5a                   	pop    edx
c0010b14:	5d                   	pop    ebp
c0010b15:	66 89 87 8e 00 00 00 	mov    WORD PTR [edi+0x8e],ax
c0010b1c:	53                   	push   ebx
c0010b1d:	89 f0                	mov    eax,esi
c0010b1f:	99                   	cdq    
c0010b20:	f7 f9                	idiv   ecx
c0010b22:	89 d6                	mov    esi,edx
c0010b24:	99                   	cdq    
c0010b25:	f7 f9                	idiv   ecx
c0010b27:	8d 42 30             	lea    eax,[edx+0x30]
c0010b2a:	0f b6 c0             	movzx  eax,al
c0010b2d:	50                   	push   eax
c0010b2e:	e8 3d fd ff ff       	call   c0010870 <VgaText::combineCharAndColour(char, unsigned char)>
c0010b33:	5a                   	pop    edx
c0010b34:	59                   	pop    ecx
c0010b35:	66 89 87 90 00 00 00 	mov    WORD PTR [edi+0x90],ax
c0010b3c:	53                   	push   ebx
c0010b3d:	8d 46 30             	lea    eax,[esi+0x30]
c0010b40:	0f b6 f0             	movzx  esi,al
c0010b43:	56                   	push   esi
c0010b44:	e8 27 fd ff ff       	call   c0010870 <VgaText::combineCharAndColour(char, unsigned char)>
c0010b49:	5b                   	pop    ebx
c0010b4a:	5e                   	pop    esi
c0010b4b:	66 89 87 92 00 00 00 	mov    WORD PTR [edi+0x92],ax
c0010b52:	5b                   	pop    ebx
c0010b53:	5e                   	pop    esi
c0010b54:	5f                   	pop    edi
c0010b55:	5d                   	pop    ebp
c0010b56:	c3                   	ret    
c0010b57:	90                   	nop

c0010b58 <VgaText::updateTitle()>:
c0010b58:	53                   	push   ebx
c0010b59:	31 c0                	xor    eax,eax
c0010b5b:	83 ec 58             	sub    esp,0x58
c0010b5e:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0010b62:	89 e1                	mov    ecx,esp
c0010b64:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c0010b68:	40                   	inc    eax
c0010b69:	83 f8 50             	cmp    eax,0x50
c0010b6c:	75 f6                	jne    c0010b64 <VgaText::updateTitle()+0xc>
c0010b6e:	31 c0                	xor    eax,eax
c0010b70:	8a 9c 02 82 00 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x82]
c0010b77:	84 db                	test   bl,bl
c0010b79:	74 06                	je     c0010b81 <VgaText::updateTitle()+0x29>
c0010b7b:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c0010b7e:	40                   	inc    eax
c0010b7f:	eb ef                	jmp    c0010b70 <VgaText::updateTitle()+0x18>
c0010b81:	8b 42 60             	mov    eax,DWORD PTR [edx+0x60]
c0010b84:	85 c0                	test   eax,eax
c0010b86:	74 09                	je     c0010b91 <VgaText::updateTitle()+0x39>
c0010b88:	53                   	push   ebx
c0010b89:	53                   	push   ebx
c0010b8a:	51                   	push   ecx
c0010b8b:	52                   	push   edx
c0010b8c:	ff d0                	call   eax
c0010b8e:	83 c4 10             	add    esp,0x10
c0010b91:	e8 58 fe ff ff       	call   c00109ee <VgaText::updateDiskUsage()>
c0010b96:	83 c4 58             	add    esp,0x58
c0010b99:	5b                   	pop    ebx
c0010b9a:	c3                   	ret    
c0010b9b:	90                   	nop

c0010b9c <VgaText::setTitleTextColour(VgaColour)>:
c0010b9c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010ba0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010ba4:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0010ba7:	eb af                	jmp    c0010b58 <VgaText::updateTitle()>
c0010ba9:	90                   	nop

c0010baa <VgaText::setTitleColour(VgaColour)>:
c0010baa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010bae:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010bb2:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0010bb5:	eb a1                	jmp    c0010b58 <VgaText::updateTitle()>
c0010bb7:	90                   	nop

c0010bb8 <VgaText::setTitle(char*)>:
c0010bb8:	53                   	push   ebx
c0010bb9:	83 ec 10             	sub    esp,0x10
c0010bbc:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010bc0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010bc4:	8d 83 82 00 00 00    	lea    eax,[ebx+0x82]
c0010bca:	50                   	push   eax
c0010bcb:	e8 88 fc fe ff       	call   c0000858 <strcpy>
c0010bd0:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0010bd4:	83 c4 18             	add    esp,0x18
c0010bd7:	5b                   	pop    ebx
c0010bd8:	e9 7b ff ff ff       	jmp    c0010b58 <VgaText::updateTitle()>
c0010bdd:	90                   	nop

c0010bde <VgaText::decrementCursor(bool)>:
c0010bde:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0010be2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010be6:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0010be9:	85 c0                	test   eax,eax
c0010beb:	74 04                	je     c0010bf1 <VgaText::decrementCursor(bool)+0x13>
c0010bed:	48                   	dec    eax
c0010bee:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0010bf1:	84 c9                	test   cl,cl
c0010bf3:	74 09                	je     c0010bfe <VgaText::decrementCursor(bool)+0x20>
c0010bf5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0010bf9:	e9 c2 fa ff ff       	jmp    c00106c0 <VgaText::updateCursor()>
c0010bfe:	c3                   	ret    
c0010bff:	90                   	nop

c0010c00 <VgaText::putchar(char, VgaColour, VgaColour)>:
c0010c00:	53                   	push   ebx
c0010c01:	83 ec 08             	sub    esp,0x8
c0010c04:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010c08:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010c0c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010c10:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0010c14:	3c 07                	cmp    al,0x7
c0010c16:	75 2a                	jne    c0010c42 <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c0010c18:	a1 f8 ef 02 c0       	mov    eax,ds:0xc002eff8
c0010c1d:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0010c25:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c0010c2d:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c0010c35:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010c39:	83 c4 08             	add    esp,0x8
c0010c3c:	5b                   	pop    ebx
c0010c3d:	e9 bc 30 00 00       	jmp    c0013cfe <Buzzer::beep(int, int, bool)>
c0010c42:	3c 0d                	cmp    al,0xd
c0010c44:	75 09                	jne    c0010c4f <VgaText::putchar(char, VgaColour, VgaColour)+0x4f>
c0010c46:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0010c4d:	eb 2c                	jmp    c0010c7b <VgaText::putchar(char, VgaColour, VgaColour)+0x7b>
c0010c4f:	3c 0a                	cmp    al,0xa
c0010c51:	75 31                	jne    c0010c84 <VgaText::putchar(char, VgaColour, VgaColour)+0x84>
c0010c53:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0010c56:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0010c5d:	8d 50 01             	lea    edx,[eax+0x1]
c0010c60:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0010c63:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0010c66:	75 0f                	jne    c0010c77 <VgaText::putchar(char, VgaColour, VgaColour)+0x77>
c0010c68:	83 ec 0c             	sub    esp,0xc
c0010c6b:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0010c6e:	53                   	push   ebx
c0010c6f:	e8 68 fb ff ff       	call   c00107dc <VgaText::scrollScreen()>
c0010c74:	83 c4 10             	add    esp,0x10
c0010c77:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010c7b:	83 c4 08             	add    esp,0x8
c0010c7e:	5b                   	pop    ebx
c0010c7f:	e9 3c fa ff ff       	jmp    c00106c0 <VgaText::updateCursor()>
c0010c84:	3c 08                	cmp    al,0x8
c0010c86:	75 25                	jne    c0010cad <VgaText::putchar(char, VgaColour, VgaColour)+0xad>
c0010c88:	50                   	push   eax
c0010c89:	50                   	push   eax
c0010c8a:	6a 01                	push   0x1
c0010c8c:	53                   	push   ebx
c0010c8d:	e8 4c ff ff ff       	call   c0010bde <VgaText::decrementCursor(bool)>
c0010c92:	5a                   	pop    edx
c0010c93:	59                   	pop    ecx
c0010c94:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010c97:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010c9a:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0010c9d:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010ca0:	6a 20                	push   0x20
c0010ca2:	53                   	push   ebx
c0010ca3:	e8 da fb ff ff       	call   c0010882 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010ca8:	83 c4 28             	add    esp,0x28
c0010cab:	5b                   	pop    ebx
c0010cac:	c3                   	ret    
c0010cad:	83 ec 08             	sub    esp,0x8
c0010cb0:	0f be c0             	movsx  eax,al
c0010cb3:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010cb6:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010cb9:	51                   	push   ecx
c0010cba:	52                   	push   edx
c0010cbb:	50                   	push   eax
c0010cbc:	53                   	push   ebx
c0010cbd:	e8 c0 fb ff ff       	call   c0010882 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010cc2:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0010cc6:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0010cce:	83 c4 28             	add    esp,0x28
c0010cd1:	5b                   	pop    ebx
c0010cd2:	e9 5f fc ff ff       	jmp    c0010936 <VgaText::incrementCursor(bool)>
c0010cd7:	90                   	nop

c0010cd8 <VgaText::isShowingCursor()>:
c0010cd8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010cdc:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c0010cdf:	c3                   	ret    

c0010ce0 <VgaText::isBlinkDisabled()>:
c0010ce0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010ce4:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0010ce7:	83 f0 01             	xor    eax,0x1
c0010cea:	c3                   	ret    
c0010ceb:	90                   	nop

c0010cec <VgaText::setCursorHeight(int)>:
c0010cec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010cf0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010cf4:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0010cf7:	0f b6 40 20          	movzx  eax,BYTE PTR [eax+0x20]
c0010cfb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010cff:	e9 d2 f9 ff ff       	jmp    c00106d6 <VgaText::showCursor(bool)>

c0010d04 <VgaText::getCursorHeight()>:
c0010d04:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010d08:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0010d0b:	c3                   	ret    

c0010d0c <setActiveTerminal(VgaText*)>:
c0010d0c:	53                   	push   ebx
c0010d0d:	83 ec 08             	sub    esp,0x8
c0010d10:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010d14:	85 db                	test   ebx,ebx
c0010d16:	75 11                	jne    c0010d29 <setActiveTerminal(VgaText*)+0x1d>
c0010d18:	c7 44 24 10 ac ac 02 c0 	mov    DWORD PTR [esp+0x10],0xc002acac
c0010d20:	83 c4 08             	add    esp,0x8
c0010d23:	5b                   	pop    ebx
c0010d24:	e9 88 9b 00 00       	jmp    c001a8b1 <Krnl::panic(char const*)>
c0010d29:	50                   	push   eax
c0010d2a:	50                   	push   eax
c0010d2b:	53                   	push   ebx
c0010d2c:	68 ba ac 02 c0       	push   0xc002acba
c0010d31:	e8 bb 21 00 00       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c0010d36:	a1 44 ef 02 c0       	mov    eax,ds:0xc002ef44
c0010d3b:	83 c4 10             	add    esp,0x10
c0010d3e:	85 c0                	test   eax,eax
c0010d40:	74 0c                	je     c0010d4e <setActiveTerminal(VgaText*)+0x42>
c0010d42:	83 ec 0c             	sub    esp,0xc
c0010d45:	50                   	push   eax
c0010d46:	e8 75 f9 ff ff       	call   c00106c0 <VgaText::updateCursor()>
c0010d4b:	83 c4 10             	add    esp,0x10
c0010d4e:	89 1d 44 ef 02 c0    	mov    DWORD PTR ds:0xc002ef44,ebx
c0010d54:	51                   	push   ecx
c0010d55:	51                   	push   ecx
c0010d56:	53                   	push   ebx
c0010d57:	68 d2 ac 02 c0       	push   0xc002acd2
c0010d5c:	e8 90 21 00 00       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c0010d61:	83 c4 0c             	add    esp,0xc
c0010d64:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010d67:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010d6a:	53                   	push   ebx
c0010d6b:	e8 7e fb ff ff       	call   c00108ee <VgaText::setCursor(int, int)>
c0010d70:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010d73:	e8 68 ff ff ff       	call   c0010ce0 <VgaText::isBlinkDisabled()>
c0010d78:	5a                   	pop    edx
c0010d79:	0f b6 c0             	movzx  eax,al
c0010d7c:	59                   	pop    ecx
c0010d7d:	50                   	push   eax
c0010d7e:	53                   	push   ebx
c0010d7f:	e8 5e f9 ff ff       	call   c00106e2 <VgaText::disableBlink(bool)>
c0010d84:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010d87:	e8 78 ff ff ff       	call   c0010d04 <VgaText::getCursorHeight()>
c0010d8c:	5a                   	pop    edx
c0010d8d:	59                   	pop    ecx
c0010d8e:	50                   	push   eax
c0010d8f:	53                   	push   ebx
c0010d90:	e8 57 ff ff ff       	call   c0010cec <VgaText::setCursorHeight(int)>
c0010d95:	83 c4 10             	add    esp,0x10
c0010d98:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0010d9c:	75 07                	jne    c0010da5 <setActiveTerminal(VgaText*)+0x99>
c0010d9e:	c7 43 5c 00 00 00 00 	mov    DWORD PTR [ebx+0x5c],0x0
c0010da5:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010da9:	83 c4 08             	add    esp,0x8
c0010dac:	5b                   	pop    ebx
c0010dad:	e9 c0 f8 ff ff       	jmp    c0010672 <VgaText::load()>

c0010db2 <doTerminalCycle()>:
c0010db2:	83 ec 18             	sub    esp,0x18
c0010db5:	a1 40 ef 02 c0       	mov    eax,ds:0xc002ef40
c0010dba:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0010dbd:	50                   	push   eax
c0010dbe:	a3 40 ef 02 c0       	mov    ds:0xc002ef40,eax
c0010dc3:	e8 44 ff ff ff       	call   c0010d0c <setActiveTerminal(VgaText*)>
c0010dc8:	83 c4 1c             	add    esp,0x1c
c0010dcb:	c3                   	ret    

c0010dcc <VgaText::doUpdate()>:
c0010dcc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010dd0:	8b 40 68             	mov    eax,DWORD PTR [eax+0x68]
c0010dd3:	85 c0                	test   eax,eax
c0010dd5:	74 02                	je     c0010dd9 <VgaText::doUpdate()+0xd>
c0010dd7:	ff e0                	jmp    eax
c0010dd9:	c3                   	ret    

c0010dda <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0010dda:	55                   	push   ebp
c0010ddb:	31 ed                	xor    ebp,ebp
c0010ddd:	57                   	push   edi
c0010dde:	56                   	push   esi
c0010ddf:	53                   	push   ebx
c0010de0:	83 ec 1c             	sub    esp,0x1c
c0010de3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0010de7:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010dec:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0010df3:	50                   	push   eax
c0010df4:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010df9:	50                   	push   eax
c0010dfa:	e8 cb f9 ff ff       	call   c00107ca <VgaText::combineColours(unsigned char, unsigned char)>
c0010dff:	59                   	pop    ecx
c0010e00:	0f b6 c0             	movzx  eax,al
c0010e03:	5e                   	pop    esi
c0010e04:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0010e09:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0010e0d:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0010e10:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010e14:	0f b7 f6             	movzx  esi,si
c0010e17:	01 f6                	add    esi,esi
c0010e19:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0010e1c:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0010e1f:	84 c0                	test   al,al
c0010e21:	0f 84 fd 00 00 00    	je     c0010f24 <VgaText::puts(char const*, VgaColour, VgaColour)+0x14a>
c0010e27:	3c 0d                	cmp    al,0xd
c0010e29:	75 0c                	jne    c0010e37 <VgaText::puts(char const*, VgaColour, VgaColour)+0x5d>
c0010e2b:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0010e32:	e9 e7 00 00 00       	jmp    c0010f1e <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c0010e37:	3c 0a                	cmp    al,0xa
c0010e39:	75 47                	jne    c0010e82 <VgaText::puts(char const*, VgaColour, VgaColour)+0xa8>
c0010e3b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0010e3e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0010e45:	8d 48 01             	lea    ecx,[eax+0x1]
c0010e48:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0010e4b:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c0010e4e:	75 0f                	jne    c0010e5f <VgaText::puts(char const*, VgaColour, VgaColour)+0x85>
c0010e50:	83 ec 0c             	sub    esp,0xc
c0010e53:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0010e56:	53                   	push   ebx
c0010e57:	e8 80 f9 ff ff       	call   c00107dc <VgaText::scrollScreen()>
c0010e5c:	83 c4 10             	add    esp,0x10
c0010e5f:	83 ec 0c             	sub    esp,0xc
c0010e62:	31 ed                	xor    ebp,ebp
c0010e64:	53                   	push   ebx
c0010e65:	e8 56 f8 ff ff       	call   c00106c0 <VgaText::updateCursor()>
c0010e6a:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0010e6f:	83 c4 10             	add    esp,0x10
c0010e72:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0010e75:	0f b7 f6             	movzx  esi,si
c0010e78:	01 f6                	add    esi,esi
c0010e7a:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0010e7d:	e9 9c 00 00 00       	jmp    c0010f1e <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c0010e82:	3c 08                	cmp    al,0x8
c0010e84:	75 35                	jne    c0010ebb <VgaText::puts(char const*, VgaColour, VgaColour)+0xe1>
c0010e86:	56                   	push   esi
c0010e87:	56                   	push   esi
c0010e88:	6a 01                	push   0x1
c0010e8a:	53                   	push   ebx
c0010e8b:	e8 4e fd ff ff       	call   c0010bde <VgaText::decrementCursor(bool)>
c0010e90:	58                   	pop    eax
c0010e91:	5a                   	pop    edx
c0010e92:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010e95:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010e98:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0010e9b:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010e9e:	6a 20                	push   0x20
c0010ea0:	53                   	push   ebx
c0010ea1:	e8 dc f9 ff ff       	call   c0010882 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010ea6:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0010eab:	83 c4 20             	add    esp,0x20
c0010eae:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0010eb1:	0f b7 f6             	movzx  esi,si
c0010eb4:	01 f6                	add    esi,esi
c0010eb6:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0010eb9:	eb 63                	jmp    c0010f1e <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c0010ebb:	51                   	push   ecx
c0010ebc:	51                   	push   ecx
c0010ebd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0010ec1:	50                   	push   eax
c0010ec2:	e8 a9 f9 ff ff       	call   c0010870 <VgaText::combineCharAndColour(char, unsigned char)>
c0010ec7:	83 c4 10             	add    esp,0x10
c0010eca:	66 89 06             	mov    WORD PTR [esi],ax
c0010ecd:	39 1d 44 ef 02 c0    	cmp    DWORD PTR ds:0xc002ef44,ebx
c0010ed3:	75 21                	jne    c0010ef6 <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c0010ed5:	8b 43 7c             	mov    eax,DWORD PTR [ebx+0x7c]
c0010ed8:	85 c0                	test   eax,eax
c0010eda:	74 1a                	je     c0010ef6 <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c0010edc:	52                   	push   edx
c0010edd:	52                   	push   edx
c0010ede:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010ee1:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010ee4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010ee8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010eec:	0f be 0f             	movsx  ecx,BYTE PTR [edi]
c0010eef:	51                   	push   ecx
c0010ef0:	53                   	push   ebx
c0010ef1:	ff d0                	call   eax
c0010ef3:	83 c4 20             	add    esp,0x20
c0010ef6:	83 c6 02             	add    esi,0x2
c0010ef9:	50                   	push   eax
c0010efa:	50                   	push   eax
c0010efb:	6a 00                	push   0x0
c0010efd:	53                   	push   ebx
c0010efe:	e8 33 fa ff ff       	call   c0010936 <VgaText::incrementCursor(bool)>
c0010f03:	83 c4 10             	add    esp,0x10
c0010f06:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c0010f0a:	75 0d                	jne    c0010f19 <VgaText::puts(char const*, VgaColour, VgaColour)+0x13f>
c0010f0c:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0010f11:	0f b7 f6             	movzx  esi,si
c0010f14:	01 f6                	add    esi,esi
c0010f16:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0010f19:	bd 01 00 00 00       	mov    ebp,0x1
c0010f1e:	47                   	inc    edi
c0010f1f:	e9 f8 fe ff ff       	jmp    c0010e1c <VgaText::puts(char const*, VgaColour, VgaColour)+0x42>
c0010f24:	83 ec 0c             	sub    esp,0xc
c0010f27:	53                   	push   ebx
c0010f28:	e8 93 f7 ff ff       	call   c00106c0 <VgaText::updateCursor()>
c0010f2d:	83 c4 10             	add    esp,0x10
c0010f30:	89 e8                	mov    eax,ebp
c0010f32:	84 c0                	test   al,al
c0010f34:	74 0c                	je     c0010f42 <VgaText::puts(char const*, VgaColour, VgaColour)+0x168>
c0010f36:	83 ec 0c             	sub    esp,0xc
c0010f39:	53                   	push   ebx
c0010f3a:	e8 8d fe ff ff       	call   c0010dcc <VgaText::doUpdate()>
c0010f3f:	83 c4 10             	add    esp,0x10
c0010f42:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0010f49:	83 c4 1c             	add    esp,0x1c
c0010f4c:	5b                   	pop    ebx
c0010f4d:	5e                   	pop    esi
c0010f4e:	5f                   	pop    edi
c0010f4f:	5d                   	pop    ebp
c0010f50:	c3                   	ret    
c0010f51:	90                   	nop

c0010f52 <VgaText::clearScreen()>:
c0010f52:	57                   	push   edi
c0010f53:	56                   	push   esi
c0010f54:	31 f6                	xor    esi,esi
c0010f56:	53                   	push   ebx
c0010f57:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010f5b:	52                   	push   edx
c0010f5c:	6a 00                	push   0x0
c0010f5e:	6a 00                	push   0x0
c0010f60:	53                   	push   ebx
c0010f61:	e8 88 f9 ff ff       	call   c00108ee <VgaText::setCursor(int, int)>
c0010f66:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0010f6d:	83 c4 10             	add    esp,0x10
c0010f70:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c0010f73:	7e 20                	jle    c0010f95 <VgaText::clearScreen()+0x43>
c0010f75:	31 ff                	xor    edi,edi
c0010f77:	50                   	push   eax
c0010f78:	50                   	push   eax
c0010f79:	56                   	push   esi
c0010f7a:	57                   	push   edi
c0010f7b:	47                   	inc    edi
c0010f7c:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0010f7f:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010f82:	6a 20                	push   0x20
c0010f84:	53                   	push   ebx
c0010f85:	e8 f8 f8 ff ff       	call   c0010882 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010f8a:	83 c4 20             	add    esp,0x20
c0010f8d:	83 ff 50             	cmp    edi,0x50
c0010f90:	75 e5                	jne    c0010f77 <VgaText::clearScreen()+0x25>
c0010f92:	46                   	inc    esi
c0010f93:	eb db                	jmp    c0010f70 <VgaText::clearScreen()+0x1e>
c0010f95:	83 ec 0c             	sub    esp,0xc
c0010f98:	53                   	push   ebx
c0010f99:	e8 2e fe ff ff       	call   c0010dcc <VgaText::doUpdate()>
c0010f9e:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0010fa5:	83 c4 10             	add    esp,0x10
c0010fa8:	5b                   	pop    ebx
c0010fa9:	5e                   	pop    esi
c0010faa:	5f                   	pop    edi
c0010fab:	c3                   	ret    

c0010fac <VgaText::putchar(char)>:
c0010fac:	56                   	push   esi
c0010fad:	53                   	push   ebx
c0010fae:	83 ec 14             	sub    esp,0x14
c0010fb1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010fb5:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010fb9:	3c 5b                	cmp    al,0x5b
c0010fbb:	75 18                	jne    c0010fd5 <VgaText::putchar(char)+0x29>
c0010fbd:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c0010fc1:	74 1f                	je     c0010fe2 <VgaText::putchar(char)+0x36>
c0010fc3:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c0010fc9:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c0010fd0:	e9 bd 00 00 00       	jmp    c0011092 <VgaText::putchar(char)+0xe6>
c0010fd5:	3c 1b                	cmp    al,0x1b
c0010fd7:	75 09                	jne    c0010fe2 <VgaText::putchar(char)+0x36>
c0010fd9:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c0010fdd:	e9 b0 00 00 00       	jmp    c0011092 <VgaText::putchar(char)+0xe6>
c0010fe2:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c0010fe5:	84 c9                	test   cl,cl
c0010fe7:	0f 84 92 00 00 00    	je     c001107f <VgaText::putchar(char)+0xd3>
c0010fed:	8d 50 c0             	lea    edx,[eax-0x40]
c0010ff0:	80 fa 3e             	cmp    dl,0x3e
c0010ff3:	77 76                	ja     c001106b <VgaText::putchar(char)+0xbf>
c0010ff5:	3c 6d                	cmp    al,0x6d
c0010ff7:	75 47                	jne    c0011040 <VgaText::putchar(char)+0x94>
c0010ff9:	31 f6                	xor    esi,esi
c0010ffb:	31 d2                	xor    edx,edx
c0010ffd:	31 c0                	xor    eax,eax
c0010fff:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c0011002:	7e 2d                	jle    c0011031 <VgaText::putchar(char)+0x85>
c0011004:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c0011009:	80 fa 3b             	cmp    dl,0x3b
c001100c:	75 17                	jne    c0011025 <VgaText::putchar(char)+0x79>
c001100e:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0011012:	50                   	push   eax
c0011013:	53                   	push   ebx
c0011014:	e8 fd f6 ff ff       	call   c0010716 <VgaText::doANSI_SGR(int)>
c0011019:	59                   	pop    ecx
c001101a:	31 d2                	xor    edx,edx
c001101c:	58                   	pop    eax
c001101d:	31 c0                	xor    eax,eax
c001101f:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0011023:	eb 09                	jmp    c001102e <VgaText::putchar(char)+0x82>
c0011025:	6b c0 0a             	imul   eax,eax,0xa
c0011028:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c001102c:	88 ca                	mov    dl,cl
c001102e:	46                   	inc    esi
c001102f:	eb ce                	jmp    c0010fff <VgaText::putchar(char)+0x53>
c0011031:	84 d2                	test   dl,dl
c0011033:	74 2e                	je     c0011063 <VgaText::putchar(char)+0xb7>
c0011035:	50                   	push   eax
c0011036:	53                   	push   ebx
c0011037:	e8 da f6 ff ff       	call   c0010716 <VgaText::doANSI_SGR(int)>
c001103c:	58                   	pop    eax
c001103d:	5a                   	pop    edx
c001103e:	eb 23                	jmp    c0011063 <VgaText::putchar(char)+0xb7>
c0011040:	3c 4a                	cmp    al,0x4a
c0011042:	75 1f                	jne    c0011063 <VgaText::putchar(char)+0xb7>
c0011044:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c0011048:	75 19                	jne    c0011063 <VgaText::putchar(char)+0xb7>
c001104a:	83 ec 0c             	sub    esp,0xc
c001104d:	53                   	push   ebx
c001104e:	e8 ff fe ff ff       	call   c0010f52 <VgaText::clearScreen()>
c0011053:	83 c4 0c             	add    esp,0xc
c0011056:	6a 00                	push   0x0
c0011058:	6a 00                	push   0x0
c001105a:	53                   	push   ebx
c001105b:	e8 8e f8 ff ff       	call   c00108ee <VgaText::setCursor(int, int)>
c0011060:	83 c4 10             	add    esp,0x10
c0011063:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c0011069:	eb 27                	jmp    c0011092 <VgaText::putchar(char)+0xe6>
c001106b:	8b 53 54             	mov    edx,DWORD PTR [ebx+0x54]
c001106e:	83 fa 0e             	cmp    edx,0xe
c0011071:	7f 1f                	jg     c0011092 <VgaText::putchar(char)+0xe6>
c0011073:	8d 4a 01             	lea    ecx,[edx+0x1]
c0011076:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c0011079:	88 44 13 42          	mov    BYTE PTR [ebx+edx*1+0x42],al
c001107d:	eb 13                	jmp    c0011092 <VgaText::putchar(char)+0xe6>
c001107f:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0011082:	0f be c0             	movsx  eax,al
c0011085:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0011088:	50                   	push   eax
c0011089:	53                   	push   ebx
c001108a:	e8 71 fb ff ff       	call   c0010c00 <VgaText::putchar(char, VgaColour, VgaColour)>
c001108f:	83 c4 10             	add    esp,0x10
c0011092:	83 c4 14             	add    esp,0x14
c0011095:	5b                   	pop    ebx
c0011096:	5e                   	pop    esi
c0011097:	c3                   	ret    

c0011098 <VgaText::puts(char const*)>:
c0011098:	53                   	push   ebx
c0011099:	83 ec 08             	sub    esp,0x8
c001109c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00110a0:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00110a3:	84 c0                	test   al,al
c00110a5:	74 12                	je     c00110b9 <VgaText::puts(char const*)+0x21>
c00110a7:	43                   	inc    ebx
c00110a8:	51                   	push   ecx
c00110a9:	51                   	push   ecx
c00110aa:	50                   	push   eax
c00110ab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00110af:	e8 f8 fe ff ff       	call   c0010fac <VgaText::putchar(char)>
c00110b4:	83 c4 10             	add    esp,0x10
c00110b7:	eb e7                	jmp    c00110a0 <VgaText::puts(char const*)+0x8>
c00110b9:	83 c4 08             	add    esp,0x8
c00110bc:	5b                   	pop    ebx
c00110bd:	c3                   	ret    

c00110be <VgaText::putx(unsigned int)>:
c00110be:	57                   	push   edi
c00110bf:	b9 11 00 00 00       	mov    ecx,0x11
c00110c4:	56                   	push   esi
c00110c5:	be ee ac 02 c0       	mov    esi,0xc002acee
c00110ca:	53                   	push   ebx
c00110cb:	83 ec 20             	sub    esp,0x20
c00110ce:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00110d2:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c00110d6:	fc                   	cld    
c00110d7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00110d9:	be 08 00 00 00       	mov    esi,0x8
c00110de:	50                   	push   eax
c00110df:	50                   	push   eax
c00110e0:	89 d8                	mov    eax,ebx
c00110e2:	c1 e3 04             	shl    ebx,0x4
c00110e5:	c1 e8 1c             	shr    eax,0x1c
c00110e8:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c00110ed:	50                   	push   eax
c00110ee:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00110f2:	e8 b5 fe ff ff       	call   c0010fac <VgaText::putchar(char)>
c00110f7:	83 c4 10             	add    esp,0x10
c00110fa:	4e                   	dec    esi
c00110fb:	75 e1                	jne    c00110de <VgaText::putx(unsigned int)+0x20>
c00110fd:	83 c4 20             	add    esp,0x20
c0011100:	5b                   	pop    ebx
c0011101:	5e                   	pop    esi
c0011102:	5f                   	pop    edi
c0011103:	c3                   	ret    

c0011104 <VgaText::VgaText(char const*)>:
c0011104:	57                   	push   edi
c0011105:	56                   	push   esi
c0011106:	53                   	push   ebx
c0011107:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001110b:	83 ec 08             	sub    esp,0x8
c001110e:	6a 00                	push   0x0
c0011110:	50                   	push   eax
c0011111:	e8 8c 05 00 00       	call   c00116a2 <UnixFile::UnixFile(int)>
c0011116:	83 c4 10             	add    esp,0x10
c0011119:	ba 54 ad 02 c0       	mov    edx,0xc002ad54
c001111e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011122:	89 10                	mov    DWORD PTR [eax],edx
c0011124:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011128:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c001112f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011133:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c001113a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001113e:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c0011142:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011146:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c001114a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001114e:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c0011155:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011159:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c0011160:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011164:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c001116b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001116f:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c0011176:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001117a:	8d 50 60             	lea    edx,[eax+0x60]
c001117d:	bb 20 ef 02 c0       	mov    ebx,0xc002ef20
c0011182:	b8 08 00 00 00       	mov    eax,0x8
c0011187:	fc                   	cld    
c0011188:	89 d7                	mov    edi,edx
c001118a:	89 de                	mov    esi,ebx
c001118c:	89 c1                	mov    ecx,eax
c001118e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0011190:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011194:	05 82 00 00 00       	add    eax,0x82
c0011199:	83 ec 08             	sub    esp,0x8
c001119c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00111a0:	50                   	push   eax
c00111a1:	e8 b2 f6 fe ff       	call   c0000858 <strcpy>
c00111a6:	83 c4 10             	add    esp,0x10
c00111a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111ad:	c7 40 10 18 00 00 00 	mov    DWORD PTR [eax+0x10],0x18
c00111b4:	83 ec 0c             	sub    esp,0xc
c00111b7:	6a 01                	push   0x1
c00111b9:	e8 27 09 00 00       	call   c0011ae5 <Virt::allocateKernelVirtualPages(int)>
c00111be:	83 c4 10             	add    esp,0x10
c00111c1:	89 c2                	mov    edx,eax
c00111c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111c7:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00111ca:	e8 55 0b 00 00       	call   c0011d24 <Virt::getAKernelVAS()>
c00111cf:	89 c3                	mov    ebx,eax
c00111d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111d5:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00111d8:	89 c6                	mov    esi,eax
c00111da:	e8 bf ed ff ff       	call   c000ff9e <Phys::allocatePage()>
c00111df:	6a 05                	push   0x5
c00111e1:	56                   	push   esi
c00111e2:	50                   	push   eax
c00111e3:	53                   	push   ebx
c00111e4:	e8 39 11 00 00       	call   c0012322 <VAS::mapPage(unsigned long, unsigned long, int)>
c00111e9:	83 c4 10             	add    esp,0x10
c00111ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111f0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00111f3:	83 ec 04             	sub    esp,0x4
c00111f6:	68 00 0f 00 00       	push   0xf00
c00111fb:	6a 00                	push   0x0
c00111fd:	50                   	push   eax
c00111fe:	e8 99 f5 fe ff       	call   c000079c <memset>
c0011203:	83 c4 10             	add    esp,0x10
c0011206:	83 ec 04             	sub    esp,0x4
c0011209:	6a 00                	push   0x0
c001120b:	6a 07                	push   0x7
c001120d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011211:	e8 94 f5 ff ff       	call   c00107aa <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0011216:	83 c4 10             	add    esp,0x10
c0011219:	83 ec 08             	sub    esp,0x8
c001121c:	6a 02                	push   0x2
c001121e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011222:	e8 c5 fa ff ff       	call   c0010cec <VgaText::setCursorHeight(int)>
c0011227:	83 c4 10             	add    esp,0x10
c001122a:	83 ec 04             	sub    esp,0x4
c001122d:	6a 00                	push   0x0
c001122f:	6a 00                	push   0x0
c0011231:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011235:	e8 b4 f6 ff ff       	call   c00108ee <VgaText::setCursor(int, int)>
c001123a:	83 c4 10             	add    esp,0x10
c001123d:	83 ec 08             	sub    esp,0x8
c0011240:	6a 01                	push   0x1
c0011242:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011246:	e8 8b f4 ff ff       	call   c00106d6 <VgaText::showCursor(bool)>
c001124b:	83 c4 10             	add    esp,0x10
c001124e:	83 ec 08             	sub    esp,0x8
c0011251:	6a 01                	push   0x1
c0011253:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011257:	e8 86 f4 ff ff       	call   c00106e2 <VgaText::disableBlink(bool)>
c001125c:	83 c4 10             	add    esp,0x10
c001125f:	83 ec 0c             	sub    esp,0xc
c0011262:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011266:	e8 e7 fc ff ff       	call   c0010f52 <VgaText::clearScreen()>
c001126b:	83 c4 10             	add    esp,0x10
c001126e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011272:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0011276:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001127a:	05 02 01 00 00       	add    eax,0x102
c001127f:	83 ec 04             	sub    esp,0x4
c0011282:	68 96 00 00 00       	push   0x96
c0011287:	6a 00                	push   0x0
c0011289:	50                   	push   eax
c001128a:	e8 0d f5 fe ff       	call   c000079c <memset>
c001128f:	83 c4 10             	add    esp,0x10
c0011292:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011296:	05 98 01 00 00       	add    eax,0x198
c001129b:	83 ec 04             	sub    esp,0x4
c001129e:	68 2c 01 00 00       	push   0x12c
c00112a3:	6a 00                	push   0x0
c00112a5:	50                   	push   eax
c00112a6:	e8 f1 f4 fe ff       	call   c000079c <memset>
c00112ab:	83 c4 10             	add    esp,0x10
c00112ae:	90                   	nop
c00112af:	5b                   	pop    ebx
c00112b0:	5e                   	pop    esi
c00112b1:	5f                   	pop    edi
c00112b2:	c3                   	ret    
c00112b3:	90                   	nop

c00112b4 <VgaText::receiveKey(unsigned char)>:
c00112b4:	55                   	push   ebp
c00112b5:	57                   	push   edi
c00112b6:	56                   	push   esi
c00112b7:	53                   	push   ebx
c00112b8:	83 ec 1c             	sub    esp,0x1c
c00112bb:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00112bf:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00112c3:	84 db                	test   bl,bl
c00112c5:	0f 84 c9 00 00 00    	je     c0011394 <VgaText::receiveKey(unsigned char)+0xe0>
c00112cb:	8d be 02 01 00 00    	lea    edi,[esi+0x102]
c00112d1:	80 fb 08             	cmp    bl,0x8
c00112d4:	75 2c                	jne    c0011302 <VgaText::receiveKey(unsigned char)+0x4e>
c00112d6:	83 ec 0c             	sub    esp,0xc
c00112d9:	57                   	push   edi
c00112da:	e8 d9 f4 fe ff       	call   c00007b8 <strlen>
c00112df:	83 c4 10             	add    esp,0x10
c00112e2:	85 c0                	test   eax,eax
c00112e4:	74 41                	je     c0011327 <VgaText::receiveKey(unsigned char)+0x73>
c00112e6:	50                   	push   eax
c00112e7:	50                   	push   eax
c00112e8:	6a 08                	push   0x8
c00112ea:	56                   	push   esi
c00112eb:	e8 bc fc ff ff       	call   c0010fac <VgaText::putchar(char)>
c00112f0:	89 3c 24             	mov    DWORD PTR [esp],edi
c00112f3:	e8 c0 f4 fe ff       	call   c00007b8 <strlen>
c00112f8:	c6 84 06 01 01 00 00 00 	mov    BYTE PTR [esi+eax*1+0x101],0x0
c0011300:	eb 22                	jmp    c0011324 <VgaText::receiveKey(unsigned char)+0x70>
c0011302:	0f be c3             	movsx  eax,bl
c0011305:	52                   	push   edx
c0011306:	52                   	push   edx
c0011307:	50                   	push   eax
c0011308:	56                   	push   esi
c0011309:	e8 9e fc ff ff       	call   c0010fac <VgaText::putchar(char)>
c001130e:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c0011312:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0011317:	59                   	pop    ecx
c0011318:	5d                   	pop    ebp
c0011319:	8d 44 24 16          	lea    eax,[esp+0x16]
c001131d:	50                   	push   eax
c001131e:	57                   	push   edi
c001131f:	e8 74 f6 fe ff       	call   c0000998 <strcat>
c0011324:	83 c4 10             	add    esp,0x10
c0011327:	80 be 80 00 00 00 00 	cmp    BYTE PTR [esi+0x80],0x0
c001132e:	75 05                	jne    c0011335 <VgaText::receiveKey(unsigned char)+0x81>
c0011330:	80 fb 0a             	cmp    bl,0xa
c0011333:	75 53                	jne    c0011388 <VgaText::receiveKey(unsigned char)+0xd4>
c0011335:	83 ec 0c             	sub    esp,0xc
c0011338:	8d 9e 98 01 00 00    	lea    ebx,[esi+0x198]
c001133e:	53                   	push   ebx
c001133f:	e8 74 f4 fe ff       	call   c00007b8 <strlen>
c0011344:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011347:	89 c5                	mov    ebp,eax
c0011349:	e8 6a f4 fe ff       	call   c00007b8 <strlen>
c001134e:	83 c4 10             	add    esp,0x10
c0011351:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c0011355:	3d 2c 01 00 00       	cmp    eax,0x12c
c001135a:	76 10                	jbe    c001136c <VgaText::receiveKey(unsigned char)+0xb8>
c001135c:	83 ec 0c             	sub    esp,0xc
c001135f:	68 ff ac 02 c0       	push   0xc002acff
c0011364:	e8 48 95 00 00       	call   c001a8b1 <Krnl::panic(char const*)>
c0011369:	83 c4 10             	add    esp,0x10
c001136c:	50                   	push   eax
c001136d:	50                   	push   eax
c001136e:	57                   	push   edi
c001136f:	53                   	push   ebx
c0011370:	e8 23 f6 fe ff       	call   c0000998 <strcat>
c0011375:	83 c4 0c             	add    esp,0xc
c0011378:	68 96 00 00 00       	push   0x96
c001137d:	6a 00                	push   0x0
c001137f:	57                   	push   edi
c0011380:	e8 17 f4 fe ff       	call   c000079c <memset>
c0011385:	83 c4 10             	add    esp,0x10
c0011388:	83 ec 0c             	sub    esp,0xc
c001138b:	56                   	push   esi
c001138c:	e8 3b fa ff ff       	call   c0010dcc <VgaText::doUpdate()>
c0011391:	83 c4 10             	add    esp,0x10
c0011394:	83 c4 1c             	add    esp,0x1c
c0011397:	5b                   	pop    ebx
c0011398:	5e                   	pop    esi
c0011399:	5f                   	pop    edi
c001139a:	5d                   	pop    ebp
c001139b:	c3                   	ret    

c001139c <VgaText::write(unsigned long long, void*, int*)>:
c001139c:	55                   	push   ebp
c001139d:	57                   	push   edi
c001139e:	56                   	push   esi
c001139f:	53                   	push   ebx
c00113a0:	83 ec 0c             	sub    esp,0xc
c00113a3:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00113a7:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00113ab:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00113af:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c00113b6:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c00113b9:	39 eb                	cmp    ebx,ebp
c00113bb:	74 13                	je     c00113d0 <VgaText::write(unsigned long long, void*, int*)+0x34>
c00113bd:	43                   	inc    ebx
c00113be:	50                   	push   eax
c00113bf:	50                   	push   eax
c00113c0:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c00113c4:	50                   	push   eax
c00113c5:	56                   	push   esi
c00113c6:	e8 e1 fb ff ff       	call   c0010fac <VgaText::putchar(char)>
c00113cb:	83 c4 10             	add    esp,0x10
c00113ce:	eb e9                	jmp    c00113b9 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c00113d0:	83 ec 0c             	sub    esp,0xc
c00113d3:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c00113da:	56                   	push   esi
c00113db:	e8 ec f9 ff ff       	call   c0010dcc <VgaText::doUpdate()>
c00113e0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00113e4:	89 38                	mov    DWORD PTR [eax],edi
c00113e6:	83 c4 1c             	add    esp,0x1c
c00113e9:	31 c0                	xor    eax,eax
c00113eb:	5b                   	pop    ebx
c00113ec:	5e                   	pop    esi
c00113ed:	5f                   	pop    edi
c00113ee:	5d                   	pop    ebp
c00113ef:	c3                   	ret    

c00113f0 <newTerminal(char*)>:
c00113f0:	83 ec 28             	sub    esp,0x28
c00113f3:	68 c4 02 00 00       	push   0x2c4
c00113f8:	e8 35 e5 ff ff       	call   c000f932 <malloc>
c00113fd:	5a                   	pop    edx
c00113fe:	59                   	pop    ecx
c00113ff:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0011403:	50                   	push   eax
c0011404:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011408:	e8 f7 fc ff ff       	call   c0011104 <VgaText::VgaText(char const*)>
c001140d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011411:	83 c4 2c             	add    esp,0x2c
c0011414:	c3                   	ret    
c0011415:	90                   	nop

c0011416 <TSS::TSS()>:
c0011416:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001141a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011421:	90                   	nop
c0011422:	c3                   	ret    
c0011423:	90                   	nop

c0011424 <TSS::setESP(unsigned long)>:
c0011424:	55                   	push   ebp
c0011425:	89 e5                	mov    ebp,esp
c0011427:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001142a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001142d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0011430:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011433:	90                   	nop
c0011434:	5d                   	pop    ebp
c0011435:	c3                   	ret    

c0011436 <TSS::flush()>:
c0011436:	55                   	push   ebp
c0011437:	89 e5                	mov    ebp,esp
c0011439:	83 ec 10             	sub    esp,0x10
c001143c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001143f:	8b 00                	mov    eax,DWORD PTR [eax]
c0011441:	83 c8 03             	or     eax,0x3
c0011444:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0011448:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c001144c:	66 89 d0             	mov    ax,dx
c001144f:	0f 00 d8             	ltr    ax
c0011452:	90                   	nop
c0011453:	c9                   	leave  
c0011454:	c3                   	ret    
c0011455:	90                   	nop

c0011456 <TSS::setup(unsigned long, unsigned long)>:
c0011456:	55                   	push   ebp
c0011457:	89 e5                	mov    ebp,esp
c0011459:	83 ec 18             	sub    esp,0x18
c001145c:	83 ec 0c             	sub    esp,0xc
c001145f:	6a 68                	push   0x68
c0011461:	e8 cc e4 ff ff       	call   c000f932 <malloc>
c0011466:	83 c4 10             	add    esp,0x10
c0011469:	89 c2                	mov    edx,eax
c001146b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001146e:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011471:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011474:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011477:	83 ec 04             	sub    esp,0x4
c001147a:	6a 68                	push   0x68
c001147c:	6a 00                	push   0x0
c001147e:	50                   	push   eax
c001147f:	e8 18 f3 fe ff       	call   c000079c <memset>
c0011484:	83 c4 10             	add    esp,0x10
c0011487:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001148a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001148d:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0011493:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011496:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011499:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c001149f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114a2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00114a5:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00114a8:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00114ab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114ae:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00114b1:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c00114b7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114ba:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00114bd:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c00114c3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114c6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00114c9:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c00114cf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114d2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00114d5:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c00114db:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114de:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00114e1:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c00114e7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114ea:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00114ed:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c00114f3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114f6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00114f9:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00114fc:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00114ff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011502:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011505:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0011508:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001150b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001150e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011511:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0011518:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001151b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001151e:	0f 20 da             	mov    edx,cr3
c0011521:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0011524:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0011527:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c001152a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001152d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011530:	83 ec 08             	sub    esp,0x8
c0011533:	50                   	push   eax
c0011534:	8d 45 ec             	lea    eax,[ebp-0x14]
c0011537:	50                   	push   eax
c0011538:	e8 c9 db ff ff       	call   c000f106 <GDTEntry::setBase(unsigned int)>
c001153d:	83 c4 10             	add    esp,0x10
c0011540:	83 ec 08             	sub    esp,0x8
c0011543:	6a 68                	push   0x68
c0011545:	8d 45 ec             	lea    eax,[ebp-0x14]
c0011548:	50                   	push   eax
c0011549:	e8 d4 db ff ff       	call   c000f122 <GDTEntry::setLimit(unsigned int)>
c001154e:	83 c4 10             	add    esp,0x10
c0011551:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0011555:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0011558:	83 e0 0f             	and    eax,0xf
c001155b:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c001155e:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0011561:	83 c8 40             	or     eax,0x40
c0011564:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0011567:	a1 68 ee 02 c0       	mov    eax,ds:0xc002ee68
c001156c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011572:	05 78 01 00 00       	add    eax,0x178
c0011577:	83 ec 04             	sub    esp,0x4
c001157a:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c001157d:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0011580:	50                   	push   eax
c0011581:	e8 d0 db ff ff       	call   c000f156 <GDT::addEntry(GDTEntry)>
c0011586:	83 c4 10             	add    esp,0x10
c0011589:	89 c2                	mov    edx,eax
c001158b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001158e:	89 10                	mov    DWORD PTR [eax],edx
c0011590:	a1 68 ee 02 c0       	mov    eax,ds:0xc002ee68
c0011595:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001159b:	05 78 01 00 00       	add    eax,0x178
c00115a0:	83 ec 0c             	sub    esp,0xc
c00115a3:	50                   	push   eax
c00115a4:	e8 f1 db ff ff       	call   c000f19a <GDT::flush()>
c00115a9:	83 c4 10             	add    esp,0x10
c00115ac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115af:	8b 00                	mov    eax,DWORD PTR [eax]
c00115b1:	83 ec 08             	sub    esp,0x8
c00115b4:	50                   	push   eax
c00115b5:	68 68 ad 02 c0       	push   0xc002ad68
c00115ba:	e8 32 19 00 00       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c00115bf:	83 c4 10             	add    esp,0x10
c00115c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115c5:	8b 00                	mov    eax,DWORD PTR [eax]
c00115c7:	c9                   	leave  
c00115c8:	c3                   	ret    
c00115c9:	90                   	nop

c00115ca <ReservedFilename::read(unsigned long long, void*, int*)>:
c00115ca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00115ce:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00115d2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00115d5:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c00115da:	75 08                	jne    c00115e4 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c00115dc:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00115e2:	eb 38                	jmp    c001161c <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c00115e4:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00115e9:	75 17                	jne    c0011602 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c00115eb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00115f0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00115f3:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00115f9:	8b 10                	mov    edx,DWORD PTR [eax]
c00115fb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00115ff:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0011602:	89 c1                	mov    ecx,eax
c0011604:	83 e1 fd             	and    ecx,0xfffffffd
c0011607:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c001160d:	74 cd                	je     c00115dc <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c001160f:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0011614:	83 e0 ef             	and    eax,0xffffffef
c0011617:	83 f8 08             	cmp    eax,0x8
c001161a:	76 c0                	jbe    c00115dc <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c001161c:	31 c0                	xor    eax,eax
c001161e:	c3                   	ret    
c001161f:	90                   	nop

c0011620 <ReservedFilename::isAtty()>:
c0011620:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011624:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0011627:	31 c0                	xor    eax,eax
c0011629:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c001162f:	74 09                	je     c001163a <ReservedFilename::isAtty()+0x1a>
c0011631:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0011637:	0f 94 c0             	sete   al
c001163a:	c3                   	ret    
c001163b:	90                   	nop

c001163c <ReservedFilename::write(unsigned long long, void*, int*)>:
c001163c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011640:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011644:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011647:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001164b:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0011650:	75 08                	jne    c001165a <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0011652:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0011658:	eb 3d                	jmp    c0011697 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c001165a:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001165f:	75 17                	jne    c0011678 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0011661:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011666:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011669:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001166f:	8b 10                	mov    edx,DWORD PTR [eax]
c0011671:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011675:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0011678:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001167d:	75 04                	jne    c0011683 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c001167f:	89 0a                	mov    DWORD PTR [edx],ecx
c0011681:	eb 14                	jmp    c0011697 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0011683:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0011688:	74 c8                	je     c0011652 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c001168a:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c001168f:	83 e0 ef             	and    eax,0xffffffef
c0011692:	83 f8 08             	cmp    eax,0x8
c0011695:	76 bb                	jbe    c0011652 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0011697:	31 c0                	xor    eax,eax
c0011699:	c3                   	ret    

c001169a <UnixFile::getFileDescriptor()>:
c001169a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001169e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00116a1:	c3                   	ret    

c00116a2 <UnixFile::UnixFile(int)>:
c00116a2:	53                   	push   ebx
c00116a3:	83 ec 28             	sub    esp,0x28
c00116a6:	ba 54 ae 02 c0       	mov    edx,0xc002ae54
c00116ab:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00116af:	89 10                	mov    DWORD PTR [eax],edx
c00116b1:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c00116b9:	0f 8f 8c 01 00 00    	jg     c001184b <UnixFile::UnixFile(int)+0x1a9>
c00116bf:	a1 00 de 02 c0       	mov    eax,ds:0xc002de00
c00116c4:	8d 50 01             	lea    edx,[eax+0x1]
c00116c7:	89 15 00 de 02 c0    	mov    DWORD PTR ds:0xc002de00,edx
c00116cd:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00116d1:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00116d4:	83 ec 08             	sub    esp,0x8
c00116d7:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00116db:	68 d8 ef 02 c0       	push   0xc002efd8
c00116e0:	e8 77 78 01 00       	call   c0028f5c <LinkedList<UnixFile>::addElement(UnixFile*)>
c00116e5:	83 c4 10             	add    esp,0x10
c00116e8:	a0 d4 ef 02 c0       	mov    al,ds:0xc002efd4
c00116ed:	83 f0 01             	xor    eax,0x1
c00116f0:	84 c0                	test   al,al
c00116f2:	0f 84 54 01 00 00    	je     c001184c <UnixFile::UnixFile(int)+0x1aa>
c00116f8:	c6 05 d4 ef 02 c0 01 	mov    BYTE PTR ds:0xc002efd4,0x1
c00116ff:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0011707:	83 ec 0c             	sub    esp,0xc
c001170a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001170e:	e8 1f e2 ff ff       	call   c000f932 <malloc>
c0011713:	83 c4 10             	add    esp,0x10
c0011716:	89 c3                	mov    ebx,eax
c0011718:	83 ec 08             	sub    esp,0x8
c001171b:	68 03 ff ff 0f       	push   0xfffff03
c0011720:	53                   	push   ebx
c0011721:	e8 2c 01 00 00       	call   c0011852 <ReservedFilename::ReservedFilename(int)>
c0011726:	83 c4 10             	add    esp,0x10
c0011729:	89 1d cc ef 02 c0    	mov    DWORD PTR ds:0xc002efcc,ebx
c001172f:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0011737:	83 ec 0c             	sub    esp,0xc
c001173a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001173e:	e8 ef e1 ff ff       	call   c000f932 <malloc>
c0011743:	83 c4 10             	add    esp,0x10
c0011746:	89 c3                	mov    ebx,eax
c0011748:	83 ec 08             	sub    esp,0x8
c001174b:	68 01 ff ff 0f       	push   0xfffff01
c0011750:	53                   	push   ebx
c0011751:	e8 fc 00 00 00       	call   c0011852 <ReservedFilename::ReservedFilename(int)>
c0011756:	83 c4 10             	add    esp,0x10
c0011759:	89 1d d0 ef 02 c0    	mov    DWORD PTR ds:0xc002efd0,ebx
c001175f:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0011767:	83 ec 0c             	sub    esp,0xc
c001176a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001176e:	e8 bf e1 ff ff       	call   c000f932 <malloc>
c0011773:	83 c4 10             	add    esp,0x10
c0011776:	89 c3                	mov    ebx,eax
c0011778:	83 ec 08             	sub    esp,0x8
c001177b:	68 00 ff ff 0f       	push   0xfffff00
c0011780:	53                   	push   ebx
c0011781:	e8 cc 00 00 00       	call   c0011852 <ReservedFilename::ReservedFilename(int)>
c0011786:	83 c4 10             	add    esp,0x10
c0011789:	89 1d c4 ef 02 c0    	mov    DWORD PTR ds:0xc002efc4,ebx
c001178f:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c0011797:	83 ec 0c             	sub    esp,0xc
c001179a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001179e:	e8 8f e1 ff ff       	call   c000f932 <malloc>
c00117a3:	83 c4 10             	add    esp,0x10
c00117a6:	89 c3                	mov    ebx,eax
c00117a8:	83 ec 08             	sub    esp,0x8
c00117ab:	68 02 ff ff 0f       	push   0xfffff02
c00117b0:	53                   	push   ebx
c00117b1:	e8 9c 00 00 00       	call   c0011852 <ReservedFilename::ReservedFilename(int)>
c00117b6:	83 c4 10             	add    esp,0x10
c00117b9:	89 1d c8 ef 02 c0    	mov    DWORD PTR ds:0xc002efc8,ebx
c00117bf:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00117c7:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c00117cc:	7f 7e                	jg     c001184c <UnixFile::UnixFile(int)+0x1aa>
c00117ce:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c00117d6:	83 ec 0c             	sub    esp,0xc
c00117d9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00117dd:	e8 50 e1 ff ff       	call   c000f932 <malloc>
c00117e2:	83 c4 10             	add    esp,0x10
c00117e5:	89 c3                	mov    ebx,eax
c00117e7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00117eb:	05 10 ff ff 0f       	add    eax,0xfffff10
c00117f0:	83 ec 08             	sub    esp,0x8
c00117f3:	50                   	push   eax
c00117f4:	53                   	push   ebx
c00117f5:	e8 58 00 00 00       	call   c0011852 <ReservedFilename::ReservedFilename(int)>
c00117fa:	83 c4 10             	add    esp,0x10
c00117fd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011801:	89 1c 85 a0 ef 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1060],ebx
c0011808:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c0011810:	83 ec 0c             	sub    esp,0xc
c0011813:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011817:	e8 16 e1 ff ff       	call   c000f932 <malloc>
c001181c:	83 c4 10             	add    esp,0x10
c001181f:	89 c3                	mov    ebx,eax
c0011821:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011825:	05 20 ff ff 0f       	add    eax,0xfffff20
c001182a:	83 ec 08             	sub    esp,0x8
c001182d:	50                   	push   eax
c001182e:	53                   	push   ebx
c001182f:	e8 1e 00 00 00       	call   c0011852 <ReservedFilename::ReservedFilename(int)>
c0011834:	83 c4 10             	add    esp,0x10
c0011837:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001183b:	89 1c 85 60 ef 02 c0 	mov    DWORD PTR [eax*4-0x3ffd10a0],ebx
c0011842:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011846:	e9 7c ff ff ff       	jmp    c00117c7 <UnixFile::UnixFile(int)+0x125>
c001184b:	90                   	nop
c001184c:	83 c4 28             	add    esp,0x28
c001184f:	5b                   	pop    ebx
c0011850:	c3                   	ret    
c0011851:	90                   	nop

c0011852 <ReservedFilename::ReservedFilename(int)>:
c0011852:	83 ec 0c             	sub    esp,0xc
c0011855:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011859:	83 ec 08             	sub    esp,0x8
c001185c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011860:	50                   	push   eax
c0011861:	e8 3c fe ff ff       	call   c00116a2 <UnixFile::UnixFile(int)>
c0011866:	83 c4 10             	add    esp,0x10
c0011869:	ba 70 ae 02 c0       	mov    edx,0xc002ae70
c001186e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011872:	89 10                	mov    DWORD PTR [eax],edx
c0011874:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011878:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001187c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001187f:	90                   	nop
c0011880:	83 c4 0c             	add    esp,0xc
c0011883:	c3                   	ret    

c0011884 <UnixFile::~UnixFile()>:
c0011884:	83 ec 1c             	sub    esp,0x1c
c0011887:	ba 54 ae 02 c0       	mov    edx,0xc002ae54
c001188c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011890:	89 10                	mov    DWORD PTR [eax],edx
c0011892:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011896:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011899:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c001189e:	7f 73                	jg     c0011913 <UnixFile::~UnixFile()+0x8f>
c00118a0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00118a8:	83 ec 0c             	sub    esp,0xc
c00118ab:	68 d8 ef 02 c0       	push   0xc002efd8
c00118b0:	e8 7b 77 01 00       	call   c0029030 <LinkedList<UnixFile>::getFirstElement()>
c00118b5:	83 c4 10             	add    esp,0x10
c00118b8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00118bc:	83 ec 0c             	sub    esp,0xc
c00118bf:	68 d8 ef 02 c0       	push   0xc002efd8
c00118c4:	e8 6f 77 01 00       	call   c0029038 <LinkedList<UnixFile>::removeFirst()>
c00118c9:	83 c4 10             	add    esp,0x10
c00118cc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00118d0:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c00118d4:	74 40                	je     c0011916 <UnixFile::~UnixFile()+0x92>
c00118d6:	83 ec 08             	sub    esp,0x8
c00118d9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00118dd:	68 d8 ef 02 c0       	push   0xc002efd8
c00118e2:	e8 75 76 01 00       	call   c0028f5c <LinkedList<UnixFile>::addElement(UnixFile*)>
c00118e7:	83 c4 10             	add    esp,0x10
c00118ea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00118ee:	8d 50 01             	lea    edx,[eax+0x1]
c00118f1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00118f5:	3d 88 13 00 00       	cmp    eax,0x1388
c00118fa:	0f 94 c0             	sete   al
c00118fd:	84 c0                	test   al,al
c00118ff:	74 a7                	je     c00118a8 <UnixFile::~UnixFile()+0x24>
c0011901:	83 ec 0c             	sub    esp,0xc
c0011904:	68 2c ae 02 c0       	push   0xc002ae2c
c0011909:	e8 a3 8f 00 00       	call   c001a8b1 <Krnl::panic(char const*)>
c001190e:	83 c4 10             	add    esp,0x10
c0011911:	eb 95                	jmp    c00118a8 <UnixFile::~UnixFile()+0x24>
c0011913:	90                   	nop
c0011914:	eb 01                	jmp    c0011917 <UnixFile::~UnixFile()+0x93>
c0011916:	90                   	nop
c0011917:	90                   	nop
c0011918:	83 c4 1c             	add    esp,0x1c
c001191b:	c3                   	ret    

c001191c <UnixFile::~UnixFile()>:
c001191c:	83 ec 0c             	sub    esp,0xc
c001191f:	83 ec 0c             	sub    esp,0xc
c0011922:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011926:	e8 59 ff ff ff       	call   c0011884 <UnixFile::~UnixFile()>
c001192b:	83 c4 10             	add    esp,0x10
c001192e:	83 ec 08             	sub    esp,0x8
c0011931:	6a 0c                	push   0xc
c0011933:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011937:	e8 d5 14 00 00       	call   c0012e11 <operator delete(void*, unsigned long)>
c001193c:	83 c4 10             	add    esp,0x10
c001193f:	83 c4 0c             	add    esp,0xc
c0011942:	c3                   	ret    
c0011943:	90                   	nop

c0011944 <ReservedFilename::~ReservedFilename()>:
c0011944:	83 ec 0c             	sub    esp,0xc
c0011947:	ba 70 ae 02 c0       	mov    edx,0xc002ae70
c001194c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011950:	89 10                	mov    DWORD PTR [eax],edx
c0011952:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011956:	83 ec 0c             	sub    esp,0xc
c0011959:	50                   	push   eax
c001195a:	e8 25 ff ff ff       	call   c0011884 <UnixFile::~UnixFile()>
c001195f:	83 c4 10             	add    esp,0x10
c0011962:	90                   	nop
c0011963:	83 c4 0c             	add    esp,0xc
c0011966:	c3                   	ret    
c0011967:	90                   	nop

c0011968 <ReservedFilename::~ReservedFilename()>:
c0011968:	83 ec 0c             	sub    esp,0xc
c001196b:	83 ec 0c             	sub    esp,0xc
c001196e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011972:	e8 cd ff ff ff       	call   c0011944 <ReservedFilename::~ReservedFilename()>
c0011977:	83 c4 10             	add    esp,0x10
c001197a:	83 ec 08             	sub    esp,0x8
c001197d:	6a 0c                	push   0xc
c001197f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011983:	e8 89 14 00 00       	call   c0012e11 <operator delete(void*, unsigned long)>
c0011988:	83 c4 10             	add    esp,0x10
c001198b:	83 c4 0c             	add    esp,0xc
c001198e:	c3                   	ret    

c001198f <getFromFileDescriptor(int)>:
c001198f:	53                   	push   ebx
c0011990:	83 ec 08             	sub    esp,0x8
c0011993:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011997:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c001199d:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c00119a3:	7f 2c                	jg     c00119d1 <getFromFileDescriptor(int)+0x42>
c00119a5:	83 ec 0c             	sub    esp,0xc
c00119a8:	68 d8 ef 02 c0       	push   0xc002efd8
c00119ad:	e8 7e 76 01 00       	call   c0029030 <LinkedList<UnixFile>::getFirstElement()>
c00119b2:	83 c4 10             	add    esp,0x10
c00119b5:	85 c0                	test   eax,eax
c00119b7:	75 04                	jne    c00119bd <getFromFileDescriptor(int)+0x2e>
c00119b9:	31 c0                	xor    eax,eax
c00119bb:	eb 6e                	jmp    c0011a2b <getFromFileDescriptor(int)+0x9c>
c00119bd:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c00119c0:	74 69                	je     c0011a2b <getFromFileDescriptor(int)+0x9c>
c00119c2:	52                   	push   edx
c00119c3:	52                   	push   edx
c00119c4:	50                   	push   eax
c00119c5:	68 d8 ef 02 c0       	push   0xc002efd8
c00119ca:	e8 0b 77 01 00       	call   c00290da <LinkedList<UnixFile>::getNext(UnixFile*)>
c00119cf:	eb e1                	jmp    c00119b2 <getFromFileDescriptor(int)+0x23>
c00119d1:	a1 cc ef 02 c0       	mov    eax,ds:0xc002efcc
c00119d6:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c00119dc:	74 4d                	je     c0011a2b <getFromFileDescriptor(int)+0x9c>
c00119de:	a1 d0 ef 02 c0       	mov    eax,ds:0xc002efd0
c00119e3:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c00119e9:	74 40                	je     c0011a2b <getFromFileDescriptor(int)+0x9c>
c00119eb:	a1 c8 ef 02 c0       	mov    eax,ds:0xc002efc8
c00119f0:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c00119f6:	74 33                	je     c0011a2b <getFromFileDescriptor(int)+0x9c>
c00119f8:	a1 c4 ef 02 c0       	mov    eax,ds:0xc002efc4
c00119fd:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0011a03:	74 26                	je     c0011a2b <getFromFileDescriptor(int)+0x9c>
c0011a05:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c0011a0b:	83 f8 08             	cmp    eax,0x8
c0011a0e:	77 09                	ja     c0011a19 <getFromFileDescriptor(int)+0x8a>
c0011a10:	8b 04 85 a0 ef 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1060]
c0011a17:	eb 12                	jmp    c0011a2b <getFromFileDescriptor(int)+0x9c>
c0011a19:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c0011a1f:	83 fb 08             	cmp    ebx,0x8
c0011a22:	77 95                	ja     c00119b9 <getFromFileDescriptor(int)+0x2a>
c0011a24:	8b 04 9d 60 ef 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd10a0]
c0011a2b:	83 c4 08             	add    esp,0x8
c0011a2e:	5b                   	pop    ebx
c0011a2f:	c3                   	ret    

c0011a30 <__static_initialization_and_destruction_0(int, int)>:
c0011a30:	83 ec 0c             	sub    esp,0xc
c0011a33:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0011a38:	75 34                	jne    c0011a6e <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011a3a:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0011a42:	75 2a                	jne    c0011a6e <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011a44:	83 ec 0c             	sub    esp,0xc
c0011a47:	68 d8 ef 02 c0       	push   0xc002efd8
c0011a4c:	e8 b3 74 01 00       	call   c0028f04 <LinkedList<UnixFile>::LinkedList()>
c0011a51:	83 c4 10             	add    esp,0x10
c0011a54:	83 ec 04             	sub    esp,0x4
c0011a57:	68 90 dd 02 c0       	push   0xc002dd90
c0011a5c:	68 d8 ef 02 c0       	push   0xc002efd8
c0011a61:	68 02 8f 02 c0       	push   0xc0028f02
c0011a66:	e8 20 13 00 00       	call   c0012d8b <__cxa_atexit>
c0011a6b:	83 c4 10             	add    esp,0x10
c0011a6e:	90                   	nop
c0011a6f:	83 c4 0c             	add    esp,0xc
c0011a72:	c3                   	ret    

c0011a73 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c0011a73:	83 ec 0c             	sub    esp,0xc
c0011a76:	83 ec 08             	sub    esp,0x8
c0011a79:	68 ff ff 00 00       	push   0xffff
c0011a7e:	6a 01                	push   0x1
c0011a80:	e8 ab ff ff ff       	call   c0011a30 <__static_initialization_and_destruction_0(int, int)>
c0011a85:	83 c4 10             	add    esp,0x10
c0011a88:	83 c4 0c             	add    esp,0xc
c0011a8b:	c3                   	ret    

c0011a8c <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c0011a8c:	53                   	push   ebx
c0011a8d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011a91:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011a95:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c0011a9b:	89 c8                	mov    eax,ecx
c0011a9d:	d1 e8                	shr    eax,1
c0011a9f:	03 05 08 de 02 c0    	add    eax,DWORD PTR ds:0xc002de08
c0011aa5:	83 e1 01             	and    ecx,0x1
c0011aa8:	8a 10                	mov    dl,BYTE PTR [eax]
c0011aaa:	75 09                	jne    c0011ab5 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c0011aac:	83 e2 f0             	and    edx,0xfffffff0
c0011aaf:	09 da                	or     edx,ebx
c0011ab1:	88 10                	mov    BYTE PTR [eax],dl
c0011ab3:	5b                   	pop    ebx
c0011ab4:	c3                   	ret    
c0011ab5:	c1 e3 04             	shl    ebx,0x4
c0011ab8:	83 e2 0f             	and    edx,0xf
c0011abb:	09 da                	or     edx,ebx
c0011abd:	88 10                	mov    BYTE PTR [eax],dl
c0011abf:	5b                   	pop    ebx
c0011ac0:	c3                   	ret    

c0011ac1 <Virt::getPageState(unsigned long)>:
c0011ac1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011ac5:	8b 0d 08 de 02 c0    	mov    ecx,DWORD PTR ds:0xc002de08
c0011acb:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c0011ad1:	89 d0                	mov    eax,edx
c0011ad3:	d1 e8                	shr    eax,1
c0011ad5:	83 e2 01             	and    edx,0x1
c0011ad8:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0011adb:	75 04                	jne    c0011ae1 <Virt::getPageState(unsigned long)+0x20>
c0011add:	83 e0 0f             	and    eax,0xf
c0011ae0:	c3                   	ret    
c0011ae1:	c0 e8 04             	shr    al,0x4
c0011ae4:	c3                   	ret    

c0011ae5 <Virt::allocateKernelVirtualPages(int)>:
c0011ae5:	55                   	push   ebp
c0011ae6:	31 ed                	xor    ebp,ebp
c0011ae8:	57                   	push   edi
c0011ae9:	56                   	push   esi
c0011aea:	53                   	push   ebx
c0011aeb:	31 db                	xor    ebx,ebx
c0011aed:	83 ec 1c             	sub    esp,0x1c
c0011af0:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011af4:	8b 3d 04 de 02 c0    	mov    edi,DWORD PTR ds:0xc002de04
c0011afa:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0011aff:	57                   	push   edi
c0011b00:	e8 bc ff ff ff       	call   c0011ac1 <Virt::getPageState(unsigned long)>
c0011b05:	5a                   	pop    edx
c0011b06:	84 c0                	test   al,al
c0011b08:	75 3a                	jne    c0011b44 <Virt::allocateKernelVirtualPages(int)+0x5f>
c0011b0a:	85 db                	test   ebx,ebx
c0011b0c:	75 02                	jne    c0011b10 <Virt::allocateKernelVirtualPages(int)+0x2b>
c0011b0e:	89 fd                	mov    ebp,edi
c0011b10:	43                   	inc    ebx
c0011b11:	39 f3                	cmp    ebx,esi
c0011b13:	74 5a                	je     c0011b6f <Virt::allocateKernelVirtualPages(int)+0x8a>
c0011b15:	47                   	inc    edi
c0011b16:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011b1c:	76 31                	jbe    c0011b4f <Virt::allocateKernelVirtualPages(int)+0x6a>
c0011b1e:	c7 05 04 de 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc002de04,0xc8000
c0011b28:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0011b2d:	75 28                	jne    c0011b57 <Virt::allocateKernelVirtualPages(int)+0x72>
c0011b2f:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0011b34:	bf 00 80 0c 00       	mov    edi,0xc8000
c0011b39:	57                   	push   edi
c0011b3a:	e8 82 ff ff ff       	call   c0011ac1 <Virt::getPageState(unsigned long)>
c0011b3f:	5a                   	pop    edx
c0011b40:	84 c0                	test   al,al
c0011b42:	74 c6                	je     c0011b0a <Virt::allocateKernelVirtualPages(int)+0x25>
c0011b44:	31 db                	xor    ebx,ebx
c0011b46:	47                   	inc    edi
c0011b47:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011b4d:	77 cf                	ja     c0011b1e <Virt::allocateKernelVirtualPages(int)+0x39>
c0011b4f:	89 3d 04 de 02 c0    	mov    DWORD PTR ds:0xc002de04,edi
c0011b55:	eb a8                	jmp    c0011aff <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011b57:	83 ec 0c             	sub    esp,0xc
c0011b5a:	68 84 ae 02 c0       	push   0xc002ae84
c0011b5f:	e8 4d 8d 00 00       	call   c001a8b1 <Krnl::panic(char const*)>
c0011b64:	8b 3d 04 de 02 c0    	mov    edi,DWORD PTR ds:0xc002de04
c0011b6a:	83 c4 10             	add    esp,0x10
c0011b6d:	eb 90                	jmp    c0011aff <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011b6f:	89 2d 04 de 02 c0    	mov    DWORD PTR ds:0xc002de04,ebp
c0011b75:	4b                   	dec    ebx
c0011b76:	74 5f                	je     c0011bd7 <Virt::allocateKernelVirtualPages(int)+0xf2>
c0011b78:	85 f6                	test   esi,esi
c0011b7a:	74 3d                	je     c0011bb9 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011b7c:	89 e8                	mov    eax,ebp
c0011b7e:	31 db                	xor    ebx,ebx
c0011b80:	8d 7e ff             	lea    edi,[esi-0x1]
c0011b83:	eb 14                	jmp    c0011b99 <Virt::allocateKernelVirtualPages(int)+0xb4>
c0011b85:	6a 01                	push   0x1
c0011b87:	43                   	inc    ebx
c0011b88:	50                   	push   eax
c0011b89:	e8 fe fe ff ff       	call   c0011a8c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011b8e:	58                   	pop    eax
c0011b8f:	39 f3                	cmp    ebx,esi
c0011b91:	5a                   	pop    edx
c0011b92:	74 25                	je     c0011bb9 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011b94:	a1 04 de 02 c0       	mov    eax,ds:0xc002de04
c0011b99:	8d 50 01             	lea    edx,[eax+0x1]
c0011b9c:	85 db                	test   ebx,ebx
c0011b9e:	89 15 04 de 02 c0    	mov    DWORD PTR ds:0xc002de04,edx
c0011ba4:	74 20                	je     c0011bc6 <Virt::allocateKernelVirtualPages(int)+0xe1>
c0011ba6:	39 df                	cmp    edi,ebx
c0011ba8:	75 db                	jne    c0011b85 <Virt::allocateKernelVirtualPages(int)+0xa0>
c0011baa:	6a 03                	push   0x3
c0011bac:	43                   	inc    ebx
c0011bad:	50                   	push   eax
c0011bae:	e8 d9 fe ff ff       	call   c0011a8c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011bb3:	59                   	pop    ecx
c0011bb4:	39 f3                	cmp    ebx,esi
c0011bb6:	58                   	pop    eax
c0011bb7:	75 db                	jne    c0011b94 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011bb9:	83 c4 1c             	add    esp,0x1c
c0011bbc:	89 e8                	mov    eax,ebp
c0011bbe:	5b                   	pop    ebx
c0011bbf:	c1 e0 0c             	shl    eax,0xc
c0011bc2:	5e                   	pop    esi
c0011bc3:	5f                   	pop    edi
c0011bc4:	5d                   	pop    ebp
c0011bc5:	c3                   	ret    
c0011bc6:	6a 02                	push   0x2
c0011bc8:	bb 01 00 00 00       	mov    ebx,0x1
c0011bcd:	50                   	push   eax
c0011bce:	e8 b9 fe ff ff       	call   c0011a8c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011bd3:	58                   	pop    eax
c0011bd4:	5a                   	pop    edx
c0011bd5:	eb bd                	jmp    c0011b94 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011bd7:	6a 04                	push   0x4
c0011bd9:	8d 45 01             	lea    eax,[ebp+0x1]
c0011bdc:	55                   	push   ebp
c0011bdd:	a3 04 de 02 c0       	mov    ds:0xc002de04,eax
c0011be2:	e8 a5 fe ff ff       	call   c0011a8c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011be7:	59                   	pop    ecx
c0011be8:	89 e8                	mov    eax,ebp
c0011bea:	5b                   	pop    ebx
c0011beb:	c1 e0 0c             	shl    eax,0xc
c0011bee:	83 c4 1c             	add    esp,0x1c
c0011bf1:	5b                   	pop    ebx
c0011bf2:	5e                   	pop    esi
c0011bf3:	5f                   	pop    edi
c0011bf4:	5d                   	pop    ebp
c0011bf5:	c3                   	ret    

c0011bf6 <Virt::freeSwapfilePage(unsigned long)>:
c0011bf6:	53                   	push   ebx
c0011bf7:	8b 15 ec ef 02 c0    	mov    edx,DWORD PTR ds:0xc002efec
c0011bfd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011c01:	b8 01 00 00 00       	mov    eax,0x1
c0011c06:	89 cb                	mov    ebx,ecx
c0011c08:	d3 e0                	shl    eax,cl
c0011c0a:	c1 eb 05             	shr    ebx,0x5
c0011c0d:	f7 d0                	not    eax
c0011c0f:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c0011c12:	5b                   	pop    ebx
c0011c13:	c3                   	ret    

c0011c14 <Virt::swapIDToSector(unsigned long)>:
c0011c14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011c18:	0f af 05 0c de 02 c0 	imul   eax,DWORD PTR ds:0xc002de0c
c0011c1f:	03 05 14 de 02 c0    	add    eax,DWORD PTR ds:0xc002de14
c0011c25:	c3                   	ret    

c0011c26 <Virt::allocateSwapfilePage()>:
c0011c26:	55                   	push   ebp
c0011c27:	31 d2                	xor    edx,edx
c0011c29:	57                   	push   edi
c0011c2a:	56                   	push   esi
c0011c2b:	53                   	push   ebx
c0011c2c:	83 ec 0c             	sub    esp,0xc
c0011c2f:	8b 0d 0c de 02 c0    	mov    ecx,DWORD PTR ds:0xc002de0c
c0011c35:	a1 10 de 02 c0       	mov    eax,ds:0xc002de10
c0011c3a:	f7 f1                	div    ecx
c0011c3c:	39 0d 10 de 02 c0    	cmp    DWORD PTR ds:0xc002de10,ecx
c0011c42:	72 2d                	jb     c0011c71 <Virt::allocateSwapfilePage()+0x4b>
c0011c44:	8b 35 ec ef 02 c0    	mov    esi,DWORD PTR ds:0xc002efec
c0011c4a:	8b 16                	mov    edx,DWORD PTR [esi]
c0011c4c:	f6 c2 01             	test   dl,0x1
c0011c4f:	74 3c                	je     c0011c8d <Virt::allocateSwapfilePage()+0x67>
c0011c51:	31 c9                	xor    ecx,ecx
c0011c53:	bf 01 00 00 00       	mov    edi,0x1
c0011c58:	eb 12                	jmp    c0011c6c <Virt::allocateSwapfilePage()+0x46>
c0011c5a:	89 fd                	mov    ebp,edi
c0011c5c:	89 ca                	mov    edx,ecx
c0011c5e:	d3 e5                	shl    ebp,cl
c0011c60:	c1 ea 05             	shr    edx,0x5
c0011c63:	8d 1c 96             	lea    ebx,[esi+edx*4]
c0011c66:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011c68:	85 ea                	test   edx,ebp
c0011c6a:	74 2a                	je     c0011c96 <Virt::allocateSwapfilePage()+0x70>
c0011c6c:	41                   	inc    ecx
c0011c6d:	39 c8                	cmp    eax,ecx
c0011c6f:	77 e9                	ja     c0011c5a <Virt::allocateSwapfilePage()+0x34>
c0011c71:	83 ec 0c             	sub    esp,0xc
c0011c74:	68 0b b0 02 c0       	push   0xc002b00b
c0011c79:	e8 33 8c 00 00       	call   c001a8b1 <Krnl::panic(char const*)>
c0011c7e:	83 c4 10             	add    esp,0x10
c0011c81:	31 c9                	xor    ecx,ecx
c0011c83:	83 c4 0c             	add    esp,0xc
c0011c86:	89 c8                	mov    eax,ecx
c0011c88:	5b                   	pop    ebx
c0011c89:	5e                   	pop    esi
c0011c8a:	5f                   	pop    edi
c0011c8b:	5d                   	pop    ebp
c0011c8c:	c3                   	ret    
c0011c8d:	89 f3                	mov    ebx,esi
c0011c8f:	bd 01 00 00 00       	mov    ebp,0x1
c0011c94:	31 c9                	xor    ecx,ecx
c0011c96:	09 ea                	or     edx,ebp
c0011c98:	89 c8                	mov    eax,ecx
c0011c9a:	89 13                	mov    DWORD PTR [ebx],edx
c0011c9c:	83 c4 0c             	add    esp,0xc
c0011c9f:	5b                   	pop    ebx
c0011ca0:	5e                   	pop    esi
c0011ca1:	5f                   	pop    edi
c0011ca2:	5d                   	pop    ebp
c0011ca3:	c3                   	ret    

c0011ca4 <Virt::virtualMemorySetup()>:
c0011ca4:	53                   	push   ebx
c0011ca5:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011caa:	83 ec 08             	sub    esp,0x8
c0011cad:	6a 0f                	push   0xf
c0011caf:	53                   	push   ebx
c0011cb0:	43                   	inc    ebx
c0011cb1:	e8 d6 fd ff ff       	call   c0011a8c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011cb6:	59                   	pop    ecx
c0011cb7:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011cbd:	58                   	pop    eax
c0011cbe:	75 ed                	jne    c0011cad <Virt::virtualMemorySetup()+0x9>
c0011cc0:	83 ec 08             	sub    esp,0x8
c0011cc3:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011cc8:	68 00 00 00 c8       	push   0xc8000000
c0011ccd:	68 22 b0 02 c0       	push   0xc002b022
c0011cd2:	e8 1a 12 00 00       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c0011cd7:	58                   	pop    eax
c0011cd8:	5a                   	pop    edx
c0011cd9:	68 00 f0 ff ef       	push   0xeffff000
c0011cde:	68 36 b0 02 c0       	push   0xc002b036
c0011ce3:	e8 09 12 00 00       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c0011ce8:	83 c4 10             	add    esp,0x10
c0011ceb:	83 ec 08             	sub    esp,0x8
c0011cee:	6a 00                	push   0x0
c0011cf0:	53                   	push   ebx
c0011cf1:	43                   	inc    ebx
c0011cf2:	e8 95 fd ff ff       	call   c0011a8c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011cf7:	83 c4 10             	add    esp,0x10
c0011cfa:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011d00:	75 e9                	jne    c0011ceb <Virt::virtualMemorySetup()+0x47>
c0011d02:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0011d07:	83 ec 08             	sub    esp,0x8
c0011d0a:	6a 0f                	push   0xf
c0011d0c:	53                   	push   ebx
c0011d0d:	43                   	inc    ebx
c0011d0e:	e8 79 fd ff ff       	call   c0011a8c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011d13:	83 c4 10             	add    esp,0x10
c0011d16:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0011d1c:	75 e9                	jne    c0011d07 <Virt::virtualMemorySetup()+0x63>
c0011d1e:	83 c4 08             	add    esp,0x8
c0011d21:	5b                   	pop    ebx
c0011d22:	c3                   	ret    

c0011d23 <Virt::swappingSetup()>:
c0011d23:	c3                   	ret    

c0011d24 <Virt::getAKernelVAS()>:
c0011d24:	a1 f0 ef 02 c0       	mov    eax,ds:0xc002eff0
c0011d29:	c3                   	ret    

c0011d2a <Virt::setupPageSwapping(int)>:
c0011d2a:	57                   	push   edi
c0011d2b:	56                   	push   esi
c0011d2c:	53                   	push   ebx
c0011d2d:	83 ec 1c             	sub    esp,0x1c
c0011d30:	68 4a b0 02 c0       	push   0xc002b04a
c0011d35:	e8 b7 11 00 00       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c0011d3a:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0011d41:	e8 ec db ff ff       	call   c000f932 <malloc>
c0011d46:	83 c4 0c             	add    esp,0xc
c0011d49:	89 c6                	mov    esi,eax
c0011d4b:	ff 35 d0 23 03 c0    	push   DWORD PTR ds:0xc00323d0
c0011d51:	68 5e b0 02 c0       	push   0xc002b05e
c0011d56:	50                   	push   eax
c0011d57:	e8 f4 16 00 00       	call   c0013450 <File::File(char const*, Process*)>
c0011d5c:	89 34 24             	mov    DWORD PTR [esp],esi
c0011d5f:	e8 c8 18 00 00       	call   c001362c <File::unlink()>
c0011d64:	59                   	pop    ecx
c0011d65:	5b                   	pop    ebx
c0011d66:	6a 12                	push   0x12
c0011d68:	56                   	push   esi
c0011d69:	e8 46 17 00 00       	call   c00134b4 <File::open(FileOpenMode)>
c0011d6e:	83 c4 10             	add    esp,0x10
c0011d71:	85 c0                	test   eax,eax
c0011d73:	0f 85 5b 01 00 00    	jne    c0011ed4 <Virt::setupPageSwapping(int)+0x1aa>
c0011d79:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011d7d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011d85:	c1 e3 08             	shl    ebx,0x8
c0011d88:	83 ec 0c             	sub    esp,0xc
c0011d8b:	68 00 00 01 00       	push   0x10000
c0011d90:	e8 9d db ff ff       	call   c000f932 <malloc>
c0011d95:	83 c4 0c             	add    esp,0xc
c0011d98:	89 c7                	mov    edi,eax
c0011d9a:	68 00 00 01 00       	push   0x10000
c0011d9f:	68 ee 00 00 00       	push   0xee
c0011da4:	50                   	push   eax
c0011da5:	e8 f2 e9 fe ff       	call   c000079c <memset>
c0011daa:	83 c4 10             	add    esp,0x10
c0011dad:	85 db                	test   ebx,ebx
c0011daf:	79 03                	jns    c0011db4 <Virt::setupPageSwapping(int)+0x8a>
c0011db1:	83 c3 0f             	add    ebx,0xf
c0011db4:	c1 fb 04             	sar    ebx,0x4
c0011db7:	4b                   	dec    ebx
c0011db8:	83 fb ff             	cmp    ebx,0xffffffff
c0011dbb:	74 4f                	je     c0011e0c <Virt::setupPageSwapping(int)+0xe2>
c0011dbd:	83 ec 0c             	sub    esp,0xc
c0011dc0:	8b 06                	mov    eax,DWORD PTR [esi]
c0011dc2:	8d 54 24 18          	lea    edx,[esp+0x18]
c0011dc6:	52                   	push   edx
c0011dc7:	57                   	push   edi
c0011dc8:	6a 00                	push   0x0
c0011dca:	68 00 00 01 00       	push   0x10000
c0011dcf:	56                   	push   esi
c0011dd0:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0011dd3:	83 c4 20             	add    esp,0x20
c0011dd6:	85 c0                	test   eax,eax
c0011dd8:	0f 85 e0 00 00 00    	jne    c0011ebe <Virt::setupPageSwapping(int)+0x194>
c0011dde:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011de2:	3d 00 00 01 00       	cmp    eax,0x10000
c0011de7:	74 ce                	je     c0011db7 <Virt::setupPageSwapping(int)+0x8d>
c0011de9:	83 ec 08             	sub    esp,0x8
c0011dec:	4b                   	dec    ebx
c0011ded:	50                   	push   eax
c0011dee:	68 b1 b0 02 c0       	push   0xc002b0b1
c0011df3:	e8 f9 10 00 00       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c0011df8:	c7 04 24 ba b0 02 c0 	mov    DWORD PTR [esp],0xc002b0ba
c0011dff:	e8 ad 8a 00 00       	call   c001a8b1 <Krnl::panic(char const*)>
c0011e04:	83 c4 10             	add    esp,0x10
c0011e07:	83 fb ff             	cmp    ebx,0xffffffff
c0011e0a:	75 b1                	jne    c0011dbd <Virt::setupPageSwapping(int)+0x93>
c0011e0c:	83 ec 0c             	sub    esp,0xc
c0011e0f:	56                   	push   esi
c0011e10:	e8 fd 16 00 00       	call   c0013512 <File::close()>
c0011e15:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011e18:	e8 35 db ff ff       	call   c000f952 <rfree>
c0011e1d:	83 c4 10             	add    esp,0x10
c0011e20:	85 f6                	test   esi,esi
c0011e22:	74 0c                	je     c0011e30 <Virt::setupPageSwapping(int)+0x106>
c0011e24:	83 ec 0c             	sub    esp,0xc
c0011e27:	8b 06                	mov    eax,DWORD PTR [esi]
c0011e29:	56                   	push   esi
c0011e2a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011e2d:	83 c4 10             	add    esp,0x10
c0011e30:	83 ec 08             	sub    esp,0x8
c0011e33:	a1 88 f4 02 c0       	mov    eax,ds:0xc002f488
c0011e38:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0011e3e:	8b 10                	mov    edx,DWORD PTR [eax]
c0011e40:	68 5e b0 02 c0       	push   0xc002b05e
c0011e45:	50                   	push   eax
c0011e46:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c0011e49:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011e4d:	c6 05 18 de 02 c0 43 	mov    BYTE PTR ds:0xc002de18,0x43
c0011e54:	c1 e2 0b             	shl    edx,0xb
c0011e57:	a3 14 de 02 c0       	mov    ds:0xc002de14,eax
c0011e5c:	89 15 10 de 02 c0    	mov    DWORD PTR ds:0xc002de10,edx
c0011e62:	c7 05 0c de 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc002de0c,0x8
c0011e6c:	c1 ea 08             	shr    edx,0x8
c0011e6f:	89 14 24             	mov    DWORD PTR [esp],edx
c0011e72:	e8 bb da ff ff       	call   c000f932 <malloc>
c0011e77:	83 c4 0c             	add    esp,0xc
c0011e7a:	89 c1                	mov    ecx,eax
c0011e7c:	a3 ec ef 02 c0       	mov    ds:0xc002efec,eax
c0011e81:	31 d2                	xor    edx,edx
c0011e83:	a1 10 de 02 c0       	mov    eax,ds:0xc002de10
c0011e88:	f7 35 0c de 02 c0    	div    DWORD PTR ds:0xc002de0c
c0011e8e:	c1 e8 05             	shr    eax,0x5
c0011e91:	50                   	push   eax
c0011e92:	6a 00                	push   0x0
c0011e94:	51                   	push   ecx
c0011e95:	e8 02 e9 fe ff       	call   c000079c <memset>
c0011e9a:	58                   	pop    eax
c0011e9b:	a1 10 de 02 c0       	mov    eax,ds:0xc002de10
c0011ea0:	5a                   	pop    edx
c0011ea1:	31 d2                	xor    edx,edx
c0011ea3:	f7 35 0c de 02 c0    	div    DWORD PTR ds:0xc002de0c
c0011ea9:	c1 e8 05             	shr    eax,0x5
c0011eac:	50                   	push   eax
c0011ead:	68 c0 b0 02 c0       	push   0xc002b0c0
c0011eb2:	e8 3a 10 00 00       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c0011eb7:	83 c4 20             	add    esp,0x20
c0011eba:	5b                   	pop    ebx
c0011ebb:	5e                   	pop    esi
c0011ebc:	5f                   	pop    edi
c0011ebd:	c3                   	ret    
c0011ebe:	83 ec 08             	sub    esp,0x8
c0011ec1:	50                   	push   eax
c0011ec2:	68 99 b0 02 c0       	push   0xc002b099
c0011ec7:	e8 25 10 00 00       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c0011ecc:	83 c4 10             	add    esp,0x10
c0011ecf:	e9 0a ff ff ff       	jmp    c0011dde <Virt::setupPageSwapping(int)+0xb4>
c0011ed4:	83 ec 08             	sub    esp,0x8
c0011ed7:	50                   	push   eax
c0011ed8:	68 75 b0 02 c0       	push   0xc002b075
c0011edd:	e8 0f 10 00 00       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c0011ee2:	c7 04 24 7e b0 02 c0 	mov    DWORD PTR [esp],0xc002b07e
c0011ee9:	e8 c3 89 00 00       	call   c001a8b1 <Krnl::panic(char const*)>
c0011eee:	83 c4 10             	add    esp,0x10
c0011ef1:	e9 83 fe ff ff       	jmp    c0011d79 <Virt::setupPageSwapping(int)+0x4f>

c0011ef6 <VAS::VAS()>:
c0011ef6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011efa:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011f01:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f05:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0011f0c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f10:	a3 f0 ef 02 c0       	mov    ds:0xc002eff0,eax
c0011f15:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f19:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0011f1d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f21:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0011f24:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f28:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0011f2f:	90                   	nop
c0011f30:	c3                   	ret    
c0011f31:	90                   	nop

c0011f32 <VAS::VAS(VAS*)>:
c0011f32:	83 ec 0c             	sub    esp,0xc
c0011f35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011f39:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011f40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011f44:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0011f4b:	83 ec 0c             	sub    esp,0xc
c0011f4e:	68 a4 ae 02 c0       	push   0xc002aea4
c0011f53:	e8 59 89 00 00       	call   c001a8b1 <Krnl::panic(char const*)>
c0011f58:	83 c4 10             	add    esp,0x10
c0011f5b:	90                   	nop
c0011f5c:	83 c4 0c             	add    esp,0xc
c0011f5f:	c3                   	ret    

c0011f60 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c0011f60:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011f64:	89 c2                	mov    edx,eax
c0011f66:	c1 e8 0a             	shr    eax,0xa
c0011f69:	c1 ea 16             	shr    edx,0x16
c0011f6c:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0011f71:	19 c9                	sbb    ecx,ecx
c0011f73:	c1 e2 0c             	shl    edx,0xc
c0011f76:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c0011f7c:	25 fc 0f 00 00       	and    eax,0xffc
c0011f81:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0011f88:	01 d0                	add    eax,edx
c0011f8a:	c3                   	ret    
c0011f8b:	90                   	nop

c0011f8c <VAS::getPageTableEntry(unsigned long)>:
c0011f8c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011f90:	89 ca                	mov    edx,ecx
c0011f92:	c1 e9 0a             	shr    ecx,0xa
c0011f95:	c1 ea 16             	shr    edx,0x16
c0011f98:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0011f9e:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0011fa4:	c1 e0 0c             	shl    eax,0xc
c0011fa7:	8d 04 08             	lea    eax,[eax+ecx*1]
c0011faa:	c3                   	ret    

c0011fab <Virt::freeKernelVirtualPages(unsigned long)>:
c0011fab:	57                   	push   edi
c0011fac:	56                   	push   esi
c0011fad:	be 01 00 00 00       	mov    esi,0x1
c0011fb2:	53                   	push   ebx
c0011fb3:	83 ec 10             	sub    esp,0x10
c0011fb6:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011fba:	c1 eb 0c             	shr    ebx,0xc
c0011fbd:	eb 3f                	jmp    c0011ffe <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c0011fbf:	e8 60 fd ff ff       	call   c0011d24 <Virt::getAKernelVAS()>
c0011fc4:	83 ec 08             	sub    esp,0x8
c0011fc7:	57                   	push   edi
c0011fc8:	50                   	push   eax
c0011fc9:	e8 be ff ff ff       	call   c0011f8c <VAS::getPageTableEntry(unsigned long)>
c0011fce:	83 c4 10             	add    esp,0x10
c0011fd1:	8b 00                	mov    eax,DWORD PTR [eax]
c0011fd3:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011fd7:	f6 c4 04             	test   ah,0x4
c0011fda:	75 5f                	jne    c001203b <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c0011fdc:	80 fa 04             	cmp    dl,0x4
c0011fdf:	74 78                	je     c0012059 <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c0011fe1:	80 fa 02             	cmp    dl,0x2
c0011fe4:	0f 84 88 00 00 00    	je     c0012072 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c0011fea:	80 fa 03             	cmp    dl,0x3
c0011fed:	0f 84 ad 00 00 00    	je     c00120a0 <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c0011ff3:	fe ca                	dec    dl
c0011ff5:	0f 84 92 00 00 00    	je     c001208d <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0011ffb:	43                   	inc    ebx
c0011ffc:	31 f6                	xor    esi,esi
c0011ffe:	53                   	push   ebx
c0011fff:	e8 bd fa ff ff       	call   c0011ac1 <Virt::getPageState(unsigned long)>
c0012004:	5f                   	pop    edi
c0012005:	89 df                	mov    edi,ebx
c0012007:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001200b:	c1 e7 0c             	shl    edi,0xc
c001200e:	84 c0                	test   al,al
c0012010:	75 ad                	jne    c0011fbf <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c0012012:	83 ec 0c             	sub    esp,0xc
c0012015:	68 db b0 02 c0       	push   0xc002b0db
c001201a:	e8 92 88 00 00       	call   c001a8b1 <Krnl::panic(char const*)>
c001201f:	e8 00 fd ff ff       	call   c0011d24 <Virt::getAKernelVAS()>
c0012024:	5a                   	pop    edx
c0012025:	59                   	pop    ecx
c0012026:	57                   	push   edi
c0012027:	50                   	push   eax
c0012028:	e8 5f ff ff ff       	call   c0011f8c <VAS::getPageTableEntry(unsigned long)>
c001202d:	83 c4 10             	add    esp,0x10
c0012030:	8b 00                	mov    eax,DWORD PTR [eax]
c0012032:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0012036:	f6 c4 04             	test   ah,0x4
c0012039:	74 c0                	je     c0011ffb <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c001203b:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c001203f:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012044:	83 ec 0c             	sub    esp,0xc
c0012047:	50                   	push   eax
c0012048:	e8 c7 de ff ff       	call   c000ff14 <Phys::freePage(unsigned long)>
c001204d:	83 c4 10             	add    esp,0x10
c0012050:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0012054:	80 fa 04             	cmp    dl,0x4
c0012057:	75 88                	jne    c0011fe1 <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c0012059:	89 f0                	mov    eax,esi
c001205b:	84 c0                	test   al,al
c001205d:	75 47                	jne    c00120a6 <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c001205f:	c7 44 24 20 c8 ae 02 c0 	mov    DWORD PTR [esp+0x20],0xc002aec8
c0012067:	83 c4 10             	add    esp,0x10
c001206a:	5b                   	pop    ebx
c001206b:	5e                   	pop    esi
c001206c:	5f                   	pop    edi
c001206d:	e9 3f 88 00 00       	jmp    c001a8b1 <Krnl::panic(char const*)>
c0012072:	89 f0                	mov    eax,esi
c0012074:	84 c0                	test   al,al
c0012076:	75 15                	jne    c001208d <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0012078:	83 ec 0c             	sub    esp,0xc
c001207b:	68 f7 b0 02 c0       	push   0xc002b0f7
c0012080:	e8 2c 88 00 00       	call   c001a8b1 <Krnl::panic(char const*)>
c0012085:	83 c4 10             	add    esp,0x10
c0012088:	e9 6e ff ff ff       	jmp    c0011ffb <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c001208d:	83 ec 08             	sub    esp,0x8
c0012090:	6a 00                	push   0x0
c0012092:	53                   	push   ebx
c0012093:	e8 f4 f9 ff ff       	call   c0011a8c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0012098:	83 c4 10             	add    esp,0x10
c001209b:	e9 5b ff ff ff       	jmp    c0011ffb <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c00120a0:	89 f0                	mov    eax,esi
c00120a2:	84 c0                	test   al,al
c00120a4:	75 15                	jne    c00120bb <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c00120a6:	83 ec 08             	sub    esp,0x8
c00120a9:	6a 00                	push   0x0
c00120ab:	53                   	push   ebx
c00120ac:	e8 db f9 ff ff       	call   c0011a8c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00120b1:	83 c4 10             	add    esp,0x10
c00120b4:	83 c4 10             	add    esp,0x10
c00120b7:	5b                   	pop    ebx
c00120b8:	5e                   	pop    esi
c00120b9:	5f                   	pop    edi
c00120ba:	c3                   	ret    
c00120bb:	c7 44 24 20 13 b1 02 c0 	mov    DWORD PTR [esp+0x20],0xc002b113
c00120c3:	83 c4 10             	add    esp,0x10
c00120c6:	5b                   	pop    ebx
c00120c7:	5e                   	pop    esi
c00120c8:	5f                   	pop    edi
c00120c9:	e9 e3 87 00 00       	jmp    c001a8b1 <Krnl::panic(char const*)>

c00120ce <VAS::freeAllocatedPages(unsigned long)>:
c00120ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00120d2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00120d6:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c00120da:	74 09                	je     c00120e5 <VAS::freeAllocatedPages(unsigned long)+0x17>
c00120dc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00120e0:	e9 c6 fe ff ff       	jmp    c0011fab <Virt::freeKernelVirtualPages(unsigned long)>
c00120e5:	c7 44 24 04 ec ae 02 c0 	mov    DWORD PTR [esp+0x4],0xc002aeec
c00120ed:	e9 ff 0d 00 00       	jmp    c0012ef1 <Dbg::kprintf(char const*, ...)>

c00120f2 <VAS::virtualToPhysical(unsigned long)>:
c00120f2:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00120f6:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00120fa:	e8 8d fe ff ff       	call   c0011f8c <VAS::getPageTableEntry(unsigned long)>
c00120ff:	5a                   	pop    edx
c0012100:	8b 00                	mov    eax,DWORD PTR [eax]
c0012102:	59                   	pop    ecx
c0012103:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012108:	c3                   	ret    
c0012109:	90                   	nop

c001210a <VAS::reflagRange(unsigned long, int, int, int)>:
c001210a:	55                   	push   ebp
c001210b:	57                   	push   edi
c001210c:	56                   	push   esi
c001210d:	53                   	push   ebx
c001210e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0012112:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0012116:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001211a:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001211e:	85 db                	test   ebx,ebx
c0012120:	7e 22                	jle    c0012144 <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c0012122:	c1 e3 0c             	shl    ebx,0xc
c0012125:	01 f3                	add    ebx,esi
c0012127:	56                   	push   esi
c0012128:	81 c6 00 10 00 00    	add    esi,0x1000
c001212e:	55                   	push   ebp
c001212f:	e8 58 fe ff ff       	call   c0011f8c <VAS::getPageTableEntry(unsigned long)>
c0012134:	5a                   	pop    edx
c0012135:	59                   	pop    ecx
c0012136:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012138:	21 f9                	and    ecx,edi
c001213a:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c001213e:	39 f3                	cmp    ebx,esi
c0012140:	89 08                	mov    DWORD PTR [eax],ecx
c0012142:	75 e3                	jne    c0012127 <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c0012144:	5b                   	pop    ebx
c0012145:	5e                   	pop    esi
c0012146:	5f                   	pop    edi
c0012147:	5d                   	pop    ebp
c0012148:	c3                   	ret    
c0012149:	90                   	nop

c001214a <VAS::setToWriteCombining(unsigned long, int)>:
c001214a:	a1 68 ee 02 c0       	mov    eax,ds:0xc002ee68
c001214f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012155:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c001215c:	75 01                	jne    c001215f <VAS::setToWriteCombining(unsigned long, int)+0x15>
c001215e:	c3                   	ret    
c001215f:	68 80 00 00 00       	push   0x80
c0012164:	6a ff                	push   0xffffffff
c0012166:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001216a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001216e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012172:	e8 93 ff ff ff       	call   c001210a <VAS::reflagRange(unsigned long, int, int, int)>
c0012177:	83 c4 14             	add    esp,0x14
c001217a:	c3                   	ret    
c001217b:	90                   	nop

c001217c <VAS::mapOtherVASIn(bool, VAS*)>:
c001217c:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0012181:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012185:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0012188:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001218c:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c001218f:	19 c0                	sbb    eax,eax
c0012191:	83 ca 03             	or     edx,0x3
c0012194:	83 e0 fc             	and    eax,0xfffffffc
c0012197:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c001219e:	0f 20 d8             	mov    eax,cr3
c00121a1:	0f 22 d8             	mov    cr3,eax
c00121a4:	c3                   	ret    
c00121a5:	90                   	nop

c00121a6 <VAS::~VAS()>:
c00121a6:	83 ec 2c             	sub    esp,0x2c
c00121a9:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00121b1:	fa                   	cli    
c00121b2:	a1 a8 23 03 c0       	mov    eax,ds:0xc00323a8
c00121b7:	40                   	inc    eax
c00121b8:	a3 a8 23 03 c0       	mov    ds:0xc00323a8,eax
c00121bd:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00121c2:	8b 00                	mov    eax,DWORD PTR [eax]
c00121c4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00121c7:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c00121cd:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00121d1:	6a 01                	push   0x1
c00121d3:	50                   	push   eax
c00121d4:	e8 a3 ff ff ff       	call   c001217c <VAS::mapOtherVASIn(bool, VAS*)>
c00121d9:	83 c4 0c             	add    esp,0xc
c00121dc:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00121e4:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c00121ec:	0f 8f d4 00 00 00    	jg     c00122c6 <VAS::~VAS()+0x120>
c00121f2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00121f6:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00121f9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00121fd:	c1 e2 02             	shl    edx,0x2
c0012200:	01 d0                	add    eax,edx
c0012202:	8b 00                	mov    eax,DWORD PTR [eax]
c0012204:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012208:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001220c:	83 e0 01             	and    eax,0x1
c001220f:	0f 84 a8 00 00 00    	je     c00122bd <VAS::~VAS()+0x117>
c0012215:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001221d:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0012225:	7f 72                	jg     c0012299 <VAS::~VAS()+0xf3>
c0012227:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001222b:	c1 e0 0a             	shl    eax,0xa
c001222e:	89 c2                	mov    edx,eax
c0012230:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012234:	01 d0                	add    eax,edx
c0012236:	c1 e0 0c             	shl    eax,0xc
c0012239:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001223d:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0012242:	8b 00                	mov    eax,DWORD PTR [eax]
c0012244:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0012247:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c001224d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0012251:	6a 01                	push   0x1
c0012253:	50                   	push   eax
c0012254:	e8 07 fd ff ff       	call   c0011f60 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0012259:	83 c4 0c             	add    esp,0xc
c001225c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012260:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012264:	8b 00                	mov    eax,DWORD PTR [eax]
c0012266:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001226a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001226e:	25 01 04 00 00       	and    eax,0x401
c0012273:	3d 01 04 00 00       	cmp    eax,0x401
c0012278:	75 19                	jne    c0012293 <VAS::~VAS()+0xed>
c001227a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001227e:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012283:	83 ec 0c             	sub    esp,0xc
c0012286:	50                   	push   eax
c0012287:	e8 88 dc ff ff       	call   c000ff14 <Phys::freePage(unsigned long)>
c001228c:	83 c4 10             	add    esp,0x10
c001228f:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0012293:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0012297:	eb 84                	jmp    c001221d <VAS::~VAS()+0x77>
c0012299:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001229d:	25 00 04 00 00       	and    eax,0x400
c00122a2:	74 19                	je     c00122bd <VAS::~VAS()+0x117>
c00122a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00122a8:	25 00 f0 ff ff       	and    eax,0xfffff000
c00122ad:	83 ec 0c             	sub    esp,0xc
c00122b0:	50                   	push   eax
c00122b1:	e8 5e dc ff ff       	call   c000ff14 <Phys::freePage(unsigned long)>
c00122b6:	83 c4 10             	add    esp,0x10
c00122b9:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00122bd:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00122c1:	e9 1e ff ff ff       	jmp    c00121e4 <VAS::~VAS()+0x3e>
c00122c6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00122ca:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00122cd:	83 ec 0c             	sub    esp,0xc
c00122d0:	50                   	push   eax
c00122d1:	e8 d5 fc ff ff       	call   c0011fab <Virt::freeKernelVirtualPages(unsigned long)>
c00122d6:	83 c4 10             	add    esp,0x10
c00122d9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00122dd:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00122e0:	83 ec 0c             	sub    esp,0xc
c00122e3:	50                   	push   eax
c00122e4:	e8 2b dc ff ff       	call   c000ff14 <Phys::freePage(unsigned long)>
c00122e9:	83 c4 10             	add    esp,0x10
c00122ec:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00122f0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00122f4:	c1 e0 02             	shl    eax,0x2
c00122f7:	83 ec 08             	sub    esp,0x8
c00122fa:	50                   	push   eax
c00122fb:	68 10 af 02 c0       	push   0xc002af10
c0012300:	e8 ec 0b 00 00       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c0012305:	83 c4 10             	add    esp,0x10
c0012308:	a1 a8 23 03 c0       	mov    eax,ds:0xc00323a8
c001230d:	48                   	dec    eax
c001230e:	a3 a8 23 03 c0       	mov    ds:0xc00323a8,eax
c0012313:	a1 a8 23 03 c0       	mov    eax,ds:0xc00323a8
c0012318:	85 c0                	test   eax,eax
c001231a:	75 01                	jne    c001231d <VAS::~VAS()+0x177>
c001231c:	fb                   	sti    
c001231d:	90                   	nop
c001231e:	83 c4 2c             	add    esp,0x2c
c0012321:	c3                   	ret    

c0012322 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0012322:	55                   	push   ebp
c0012323:	57                   	push   edi
c0012324:	56                   	push   esi
c0012325:	53                   	push   ebx
c0012326:	83 ec 1c             	sub    esp,0x1c
c0012329:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001232d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0012331:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0012337:	77 08                	ja     c0012341 <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c0012339:	0f 20 d8             	mov    eax,cr3
c001233c:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c001233f:	75 47                	jne    c0012388 <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c0012341:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012345:	09 d8                	or     eax,ebx
c0012347:	a9 ff 0f 00 00       	test   eax,0xfff
c001234c:	75 57                	jne    c00123a5 <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c001234e:	89 de                	mov    esi,ebx
c0012350:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0012353:	c1 ee 16             	shr    esi,0x16
c0012356:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c001235d:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0012361:	74 54                	je     c00123b7 <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c0012363:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012367:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c001236d:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0012371:	c1 e6 0c             	shl    esi,0xc
c0012374:	c1 eb 0a             	shr    ebx,0xa
c0012377:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c001237d:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c0012380:	83 c4 1c             	add    esp,0x1c
c0012383:	5b                   	pop    ebx
c0012384:	5e                   	pop    esi
c0012385:	5f                   	pop    edi
c0012386:	5d                   	pop    ebp
c0012387:	c3                   	ret    
c0012388:	83 ec 0c             	sub    esp,0xc
c001238b:	68 30 af 02 c0       	push   0xc002af30
c0012390:	e8 5c 0b 00 00       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c0012395:	83 c4 10             	add    esp,0x10
c0012398:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001239c:	09 d8                	or     eax,ebx
c001239e:	a9 ff 0f 00 00       	test   eax,0xfff
c00123a3:	74 a9                	je     c001234e <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c00123a5:	83 ec 0c             	sub    esp,0xc
c00123a8:	68 98 af 02 c0       	push   0xc002af98
c00123ad:	e8 ff 84 00 00       	call   c001a8b1 <Krnl::panic(char const*)>
c00123b2:	83 c4 10             	add    esp,0x10
c00123b5:	eb 97                	jmp    c001234e <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c00123b7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00123bb:	e8 de db ff ff       	call   c000ff9e <Phys::allocatePage()>
c00123c0:	89 c5                	mov    ebp,eax
c00123c2:	e8 5d f9 ff ff       	call   c0011d24 <Virt::getAKernelVAS()>
c00123c7:	83 ec 0c             	sub    esp,0xc
c00123ca:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00123ce:	6a 01                	push   0x1
c00123d0:	e8 10 f7 ff ff       	call   c0011ae5 <Virt::allocateKernelVirtualPages(int)>
c00123d5:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00123dc:	6a 01                	push   0x1
c00123de:	50                   	push   eax
c00123df:	55                   	push   ebp
c00123e0:	81 cd 07 04 00 00    	or     ebp,0x407
c00123e6:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00123ea:	51                   	push   ecx
c00123eb:	e8 26 02 00 00       	call   c0012616 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00123f0:	83 c4 1c             	add    esp,0x1c
c00123f3:	68 00 10 00 00       	push   0x1000
c00123f8:	6a 00                	push   0x0
c00123fa:	50                   	push   eax
c00123fb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00123ff:	e8 98 e3 fe ff       	call   c000079c <memset>
c0012404:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0012408:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001240b:	e8 9b fb ff ff       	call   c0011fab <Virt::freeKernelVirtualPages(unsigned long)>
c0012410:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012414:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0012417:	83 c4 10             	add    esp,0x10
c001241a:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c001241d:	e9 41 ff ff ff       	jmp    c0012363 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>

c0012422 <VAS::allocatePages(int, int)>:
c0012422:	55                   	push   ebp
c0012423:	57                   	push   edi
c0012424:	56                   	push   esi
c0012425:	53                   	push   ebx
c0012426:	83 ec 1c             	sub    esp,0x1c
c0012429:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001242d:	a1 68 ee 02 c0       	mov    eax,ds:0xc002ee68
c0012432:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012438:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c001243e:	83 e0 01             	and    eax,0x1
c0012441:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c0012445:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0012449:	0f 85 cc 00 00 00    	jne    c001251b <VAS::allocatePages(int, int)+0xf9>
c001244f:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0012452:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012456:	85 c0                	test   eax,eax
c0012458:	0f 84 a1 00 00 00    	je     c00124ff <VAS::allocatePages(int, int)+0xdd>
c001245e:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0012462:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012466:	c1 e6 0c             	shl    esi,0xc
c0012469:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c001246d:	85 c0                	test   eax,eax
c001246f:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0012472:	7e 33                	jle    c00124a7 <VAS::allocatePages(int, int)+0x85>
c0012474:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0012478:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001247c:	81 cd 00 04 00 00    	or     ebp,0x400
c0012482:	e8 17 db ff ff       	call   c000ff9e <Phys::allocatePage()>
c0012487:	55                   	push   ebp
c0012488:	53                   	push   ebx
c0012489:	50                   	push   eax
c001248a:	57                   	push   edi
c001248b:	e8 92 fe ff ff       	call   c0012322 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012490:	83 c4 10             	add    esp,0x10
c0012493:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012498:	74 03                	je     c001249d <VAS::allocatePages(int, int)+0x7b>
c001249a:	0f 01 3b             	invlpg BYTE PTR [ebx]
c001249d:	81 c3 00 10 00 00    	add    ebx,0x1000
c00124a3:	39 de                	cmp    esi,ebx
c00124a5:	75 db                	jne    c0012482 <VAS::allocatePages(int, int)+0x60>
c00124a7:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00124ac:	75 12                	jne    c00124c0 <VAS::allocatePages(int, int)+0x9e>
c00124ae:	0f 20 d8             	mov    eax,cr3
c00124b1:	0f 22 d8             	mov    cr3,eax
c00124b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00124b8:	83 c4 1c             	add    esp,0x1c
c00124bb:	5b                   	pop    ebx
c00124bc:	5e                   	pop    esi
c00124bd:	5f                   	pop    edi
c00124be:	5d                   	pop    ebp
c00124bf:	c3                   	ret    
c00124c0:	c1 ee 0a             	shr    esi,0xa
c00124c3:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00124c7:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c00124cd:	c1 eb 0a             	shr    ebx,0xa
c00124d0:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c00124d6:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c00124dc:	81 eb 00 00 40 00    	sub    ebx,0x400000
c00124e2:	39 c3                	cmp    ebx,eax
c00124e4:	77 ce                	ja     c00124b4 <VAS::allocatePages(int, int)+0x92>
c00124e6:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00124e9:	81 c3 00 10 00 00    	add    ebx,0x1000
c00124ef:	39 d8                	cmp    eax,ebx
c00124f1:	73 f3                	jae    c00124e6 <VAS::allocatePages(int, int)+0xc4>
c00124f3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00124f7:	83 c4 1c             	add    esp,0x1c
c00124fa:	5b                   	pop    ebx
c00124fb:	5e                   	pop    esi
c00124fc:	5f                   	pop    edi
c00124fd:	5d                   	pop    ebp
c00124fe:	c3                   	ret    
c00124ff:	83 ec 0c             	sub    esp,0xc
c0012502:	68 bc af 02 c0       	push   0xc002afbc
c0012507:	e8 a5 83 00 00       	call   c001a8b1 <Krnl::panic(char const*)>
c001250c:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001250f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012513:	83 c4 10             	add    esp,0x10
c0012516:	e9 43 ff ff ff       	jmp    c001245e <VAS::allocatePages(int, int)+0x3c>
c001251b:	83 ec 0c             	sub    esp,0xc
c001251e:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0012522:	e8 be f5 ff ff       	call   c0011ae5 <Virt::allocateKernelVirtualPages(int)>
c0012527:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001252b:	83 c4 10             	add    esp,0x10
c001252e:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0012533:	0f 87 9b 00 00 00    	ja     c00125d4 <VAS::allocatePages(int, int)+0x1b2>
c0012539:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001253d:	85 d2                	test   edx,edx
c001253f:	7e 3c                	jle    c001257d <VAS::allocatePages(int, int)+0x15b>
c0012541:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0012545:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0012549:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001254d:	c1 e5 0c             	shl    ebp,0xc
c0012550:	81 ce 00 04 00 00    	or     esi,0x400
c0012556:	01 dd                	add    ebp,ebx
c0012558:	e8 41 da ff ff       	call   c000ff9e <Phys::allocatePage()>
c001255d:	56                   	push   esi
c001255e:	53                   	push   ebx
c001255f:	50                   	push   eax
c0012560:	57                   	push   edi
c0012561:	e8 bc fd ff ff       	call   c0012322 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012566:	83 c4 10             	add    esp,0x10
c0012569:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001256e:	74 03                	je     c0012573 <VAS::allocatePages(int, int)+0x151>
c0012570:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012573:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012579:	39 dd                	cmp    ebp,ebx
c001257b:	75 db                	jne    c0012558 <VAS::allocatePages(int, int)+0x136>
c001257d:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012582:	0f 84 26 ff ff ff    	je     c00124ae <VAS::allocatePages(int, int)+0x8c>
c0012588:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001258c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012590:	89 d3                	mov    ebx,edx
c0012592:	c1 e0 0c             	shl    eax,0xc
c0012595:	c1 eb 0a             	shr    ebx,0xa
c0012598:	01 d0                	add    eax,edx
c001259a:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c00125a0:	c1 e8 0a             	shr    eax,0xa
c00125a3:	81 eb 00 00 40 00    	sub    ebx,0x400000
c00125a9:	25 00 f0 ff ff       	and    eax,0xfffff000
c00125ae:	2d 00 00 40 00       	sub    eax,0x400000
c00125b3:	39 c3                	cmp    ebx,eax
c00125b5:	0f 87 f9 fe ff ff    	ja     c00124b4 <VAS::allocatePages(int, int)+0x92>
c00125bb:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00125be:	81 c3 00 10 00 00    	add    ebx,0x1000
c00125c4:	39 d8                	cmp    eax,ebx
c00125c6:	73 f3                	jae    c00125bb <VAS::allocatePages(int, int)+0x199>
c00125c8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00125cc:	83 c4 1c             	add    esp,0x1c
c00125cf:	5b                   	pop    ebx
c00125d0:	5e                   	pop    esi
c00125d1:	5f                   	pop    edi
c00125d2:	5d                   	pop    ebp
c00125d3:	c3                   	ret    
c00125d4:	a1 68 ee 02 c0       	mov    eax,ds:0xc002ee68
c00125d9:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00125df:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c00125e6:	0f 84 4d ff ff ff    	je     c0012539 <VAS::allocatePages(int, int)+0x117>
c00125ec:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c00125f4:	e9 40 ff ff ff       	jmp    c0012539 <VAS::allocatePages(int, int)+0x117>
c00125f9:	90                   	nop

c00125fa <VAS::setCPUSpecific(unsigned long)>:
c00125fa:	83 ec 0c             	sub    esp,0xc
c00125fd:	6a 05                	push   0x5
c00125ff:	68 00 00 40 c2       	push   0xc2400000
c0012604:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012608:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001260c:	e8 11 fd ff ff       	call   c0012322 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012611:	83 c4 1c             	add    esp,0x1c
c0012614:	c3                   	ret    
c0012615:	90                   	nop

c0012616 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0012616:	55                   	push   ebp
c0012617:	57                   	push   edi
c0012618:	56                   	push   esi
c0012619:	53                   	push   ebx
c001261a:	83 ec 1c             	sub    esp,0x1c
c001261d:	a1 68 ee 02 c0       	mov    eax,ds:0xc002ee68
c0012622:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0012626:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001262c:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0012630:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0012636:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001263a:	83 e0 01             	and    eax,0x1
c001263d:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0012641:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012645:	85 c0                	test   eax,eax
c0012647:	7e 39                	jle    c0012682 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c0012649:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001264d:	89 f3                	mov    ebx,esi
c001264f:	c1 e0 0c             	shl    eax,0xc
c0012652:	01 f0                	add    eax,esi
c0012654:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012658:	55                   	push   ebp
c0012659:	53                   	push   ebx
c001265a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001265e:	29 f0                	sub    eax,esi
c0012660:	01 d8                	add    eax,ebx
c0012662:	50                   	push   eax
c0012663:	57                   	push   edi
c0012664:	e8 b9 fc ff ff       	call   c0012322 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012669:	83 c4 10             	add    esp,0x10
c001266c:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012671:	74 03                	je     c0012676 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c0012673:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012676:	81 c3 00 10 00 00    	add    ebx,0x1000
c001267c:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c0012680:	75 d6                	jne    c0012658 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c0012682:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012687:	75 10                	jne    c0012699 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c0012689:	0f 20 d8             	mov    eax,cr3
c001268c:	0f 22 d8             	mov    cr3,eax
c001268f:	83 c4 1c             	add    esp,0x1c
c0012692:	89 f0                	mov    eax,esi
c0012694:	5b                   	pop    ebx
c0012695:	5e                   	pop    esi
c0012696:	5f                   	pop    edi
c0012697:	5d                   	pop    ebp
c0012698:	c3                   	ret    
c0012699:	89 f3                	mov    ebx,esi
c001269b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001269f:	c1 eb 0a             	shr    ebx,0xa
c00126a2:	c1 e0 0c             	shl    eax,0xc
c00126a5:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c00126ab:	01 f0                	add    eax,esi
c00126ad:	81 eb 00 00 40 00    	sub    ebx,0x400000
c00126b3:	c1 e8 0a             	shr    eax,0xa
c00126b6:	25 00 f0 ff ff       	and    eax,0xfffff000
c00126bb:	2d 00 00 40 00       	sub    eax,0x400000
c00126c0:	39 c3                	cmp    ebx,eax
c00126c2:	77 cb                	ja     c001268f <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c00126c4:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00126c7:	81 c3 00 10 00 00    	add    ebx,0x1000
c00126cd:	39 d8                	cmp    eax,ebx
c00126cf:	73 f3                	jae    c00126c4 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c00126d1:	83 c4 1c             	add    esp,0x1c
c00126d4:	89 f0                	mov    eax,esi
c00126d6:	5b                   	pop    ebx
c00126d7:	5e                   	pop    esi
c00126d8:	5f                   	pop    edi
c00126d9:	5d                   	pop    ebp
c00126da:	c3                   	ret    
c00126db:	90                   	nop

c00126dc <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c00126dc:	55                   	push   ebp
c00126dd:	57                   	push   edi
c00126de:	56                   	push   esi
c00126df:	53                   	push   ebx
c00126e0:	83 ec 1c             	sub    esp,0x1c
c00126e3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00126e7:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00126eb:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c00126ef:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00126f3:	a9 ff 0f 00 00       	test   eax,0xfff
c00126f8:	75 4a                	jne    c0012744 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c00126fa:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00126fe:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0012701:	c1 eb 16             	shr    ebx,0x16
c0012704:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c001270b:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c001270f:	74 4d                	je     c001275e <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c0012711:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0012715:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0012719:	c1 e8 0a             	shr    eax,0xa
c001271c:	80 fa 01             	cmp    dl,0x1
c001271f:	19 d2                	sbb    edx,edx
c0012721:	c1 e3 0c             	shl    ebx,0xc
c0012724:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c0012728:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c001272e:	25 fc 0f 00 00       	and    eax,0xffc
c0012733:	01 d8                	add    eax,ebx
c0012735:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c001273c:	83 c4 1c             	add    esp,0x1c
c001273f:	5b                   	pop    ebx
c0012740:	5e                   	pop    esi
c0012741:	5f                   	pop    edi
c0012742:	5d                   	pop    ebp
c0012743:	c3                   	ret    
c0012744:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0012748:	83 ec 0c             	sub    esp,0xc
c001274b:	68 e8 af 02 c0       	push   0xc002afe8
c0012750:	e8 5c 81 00 00       	call   c001a8b1 <Krnl::panic(char const*)>
c0012755:	83 c4 10             	add    esp,0x10
c0012758:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001275c:	eb 9c                	jmp    c00126fa <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c001275e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012762:	e8 37 d8 ff ff       	call   c000ff9e <Phys::allocatePage()>
c0012767:	89 c5                	mov    ebp,eax
c0012769:	e8 b6 f5 ff ff       	call   c0011d24 <Virt::getAKernelVAS()>
c001276e:	83 ec 0c             	sub    esp,0xc
c0012771:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012775:	6a 01                	push   0x1
c0012777:	e8 69 f3 ff ff       	call   c0011ae5 <Virt::allocateKernelVirtualPages(int)>
c001277c:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0012783:	6a 01                	push   0x1
c0012785:	50                   	push   eax
c0012786:	55                   	push   ebp
c0012787:	81 cd 07 04 00 00    	or     ebp,0x407
c001278d:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0012791:	51                   	push   ecx
c0012792:	e8 7f fe ff ff       	call   c0012616 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012797:	83 c4 1c             	add    esp,0x1c
c001279a:	68 00 10 00 00       	push   0x1000
c001279f:	6a 00                	push   0x0
c00127a1:	50                   	push   eax
c00127a2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00127a6:	e8 f1 df fe ff       	call   c000079c <memset>
c00127ab:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00127af:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00127b2:	e8 f4 f7 ff ff       	call   c0011fab <Virt::freeKernelVirtualPages(unsigned long)>
c00127b7:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00127ba:	83 c4 10             	add    esp,0x10
c00127bd:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c00127c0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00127c4:	e9 48 ff ff ff       	jmp    c0012711 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>
c00127c9:	90                   	nop

c00127ca <VAS::VAS(bool)>:
c00127ca:	53                   	push   ebx
c00127cb:	83 ec 28             	sub    esp,0x28
c00127ce:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00127d2:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00127d6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00127da:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00127e1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00127e5:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00127ec:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00127f0:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c00127f4:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c00127f7:	e8 a2 d7 ff ff       	call   c000ff9e <Phys::allocatePage()>
c00127fc:	89 c2                	mov    edx,eax
c00127fe:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012802:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0012805:	e8 1a f5 ff ff       	call   c0011d24 <Virt::getAKernelVAS()>
c001280a:	89 c3                	mov    ebx,eax
c001280c:	83 ec 0c             	sub    esp,0xc
c001280f:	6a 01                	push   0x1
c0012811:	e8 cf f2 ff ff       	call   c0011ae5 <Virt::allocateKernelVirtualPages(int)>
c0012816:	83 c4 10             	add    esp,0x10
c0012819:	89 c2                	mov    edx,eax
c001281b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001281f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0012822:	83 ec 0c             	sub    esp,0xc
c0012825:	6a 03                	push   0x3
c0012827:	6a 01                	push   0x1
c0012829:	52                   	push   edx
c001282a:	50                   	push   eax
c001282b:	53                   	push   ebx
c001282c:	e8 e5 fd ff ff       	call   c0012616 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012831:	83 c4 20             	add    esp,0x20
c0012834:	89 c2                	mov    edx,eax
c0012836:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001283a:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001283d:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0012845:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c001284d:	7f 1c                	jg     c001286b <VAS::VAS(bool)+0xa1>
c001284f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012853:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012856:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001285a:	c1 e2 02             	shl    edx,0x2
c001285d:	01 d0                	add    eax,edx
c001285f:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0012865:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0012869:	eb da                	jmp    c0012845 <VAS::VAS(bool)+0x7b>
c001286b:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c0012873:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c001287b:	7f 7a                	jg     c00128f7 <VAS::VAS(bool)+0x12d>
c001287d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012881:	2d 00 02 00 00       	sub    eax,0x200
c0012886:	c1 e0 0c             	shl    eax,0xc
c0012889:	83 c8 03             	or     eax,0x3
c001288c:	89 c2                	mov    edx,eax
c001288e:	a1 68 ee 02 c0       	mov    eax,ds:0xc002ee68
c0012893:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012899:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c001289f:	83 e0 10             	and    eax,0x10
c00128a2:	84 c0                	test   al,al
c00128a4:	74 07                	je     c00128ad <VAS::VAS(bool)+0xe3>
c00128a6:	b8 00 01 00 00       	mov    eax,0x100
c00128ab:	eb 05                	jmp    c00128b2 <VAS::VAS(bool)+0xe8>
c00128ad:	b8 00 00 00 00       	mov    eax,0x0
c00128b2:	09 d0                	or     eax,edx
c00128b4:	89 c1                	mov    ecx,eax
c00128b6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00128ba:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00128bd:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00128c1:	c1 e2 02             	shl    edx,0x2
c00128c4:	01 d0                	add    eax,edx
c00128c6:	89 ca                	mov    edx,ecx
c00128c8:	89 10                	mov    DWORD PTR [eax],edx
c00128ca:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00128ce:	2d 40 03 00 00       	sub    eax,0x340
c00128d3:	83 f8 7f             	cmp    eax,0x7f
c00128d6:	77 16                	ja     c00128ee <VAS::VAS(bool)+0x124>
c00128d8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00128dc:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00128df:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00128e3:	c1 e2 02             	shl    edx,0x2
c00128e6:	01 d0                	add    eax,edx
c00128e8:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c00128ee:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00128f2:	e9 7c ff ff ff       	jmp    c0012873 <VAS::VAS(bool)+0xa9>
c00128f7:	a1 68 ee 02 c0       	mov    eax,ds:0xc002ee68
c00128fc:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012902:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0012908:	83 e0 10             	and    eax,0x10
c001290b:	84 c0                	test   al,al
c001290d:	74 07                	je     c0012916 <VAS::VAS(bool)+0x14c>
c001290f:	b8 03 41 00 00       	mov    eax,0x4103
c0012914:	eb 05                	jmp    c001291b <VAS::VAS(bool)+0x151>
c0012916:	b8 03 40 00 00       	mov    eax,0x4003
c001291b:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001291f:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c0012922:	81 c2 20 0c 00 00    	add    edx,0xc20
c0012928:	89 02                	mov    DWORD PTR [edx],eax
c001292a:	a1 68 ee 02 c0       	mov    eax,ds:0xc002ee68
c001292f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012935:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001293b:	83 ec 08             	sub    esp,0x8
c001293e:	50                   	push   eax
c001293f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012943:	e8 b2 fc ff ff       	call   c00125fa <VAS::setCPUSpecific(unsigned long)>
c0012948:	83 c4 10             	add    esp,0x10
c001294b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001294f:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0012952:	a1 68 ee 02 c0       	mov    eax,ds:0xc002ee68
c0012957:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001295d:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0012963:	83 e0 10             	and    eax,0x10
c0012966:	84 c0                	test   al,al
c0012968:	74 07                	je     c0012971 <VAS::VAS(bool)+0x1a7>
c001296a:	b8 00 01 00 00       	mov    eax,0x100
c001296f:	eb 05                	jmp    c0012976 <VAS::VAS(bool)+0x1ac>
c0012971:	b8 00 00 00 00       	mov    eax,0x0
c0012976:	09 c2                	or     edx,eax
c0012978:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001297c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001297f:	05 fc 0f 00 00       	add    eax,0xffc
c0012984:	83 ca 03             	or     edx,0x3
c0012987:	89 10                	mov    DWORD PTR [eax],edx
c0012989:	a1 68 ee 02 c0       	mov    eax,ds:0xc002ee68
c001298e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012994:	83 ec 0c             	sub    esp,0xc
c0012997:	50                   	push   eax
c0012998:	e8 75 1c 00 00       	call   c0014612 <Device::getName()>
c001299d:	83 c4 10             	add    esp,0x10
c00129a0:	83 ec 08             	sub    esp,0x8
c00129a3:	68 2d b1 02 c0       	push   0xc002b12d
c00129a8:	50                   	push   eax
c00129a9:	e8 36 df fe ff       	call   c00008e4 <strcmp>
c00129ae:	83 c4 10             	add    esp,0x10
c00129b1:	85 c0                	test   eax,eax
c00129b3:	0f 94 c0             	sete   al
c00129b6:	84 c0                	test   al,al
c00129b8:	0f 84 87 00 00 00    	je     c0012a45 <VAS::VAS(bool)+0x27b>
c00129be:	fa                   	cli    
c00129bf:	a1 a8 23 03 c0       	mov    eax,ds:0xc00323a8
c00129c4:	40                   	inc    eax
c00129c5:	a3 a8 23 03 c0       	mov    ds:0xc00323a8,eax
c00129ca:	a1 68 ee 02 c0       	mov    eax,ds:0xc002ee68
c00129cf:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00129d5:	05 7c 09 00 00       	add    eax,0x97c
c00129da:	83 ec 0c             	sub    esp,0xc
c00129dd:	50                   	push   eax
c00129de:	e8 c9 c9 ff ff       	call   c000f3ac <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c00129e3:	83 c4 10             	add    esp,0x10
c00129e6:	25 00 f0 ff ff       	and    eax,0xfffff000
c00129eb:	89 c3                	mov    ebx,eax
c00129ed:	a1 68 ee 02 c0       	mov    eax,ds:0xc002ee68
c00129f2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00129f8:	05 7c 09 00 00       	add    eax,0x97c
c00129fd:	83 ec 0c             	sub    esp,0xc
c0012a00:	50                   	push   eax
c0012a01:	e8 a6 c9 ff ff       	call   c000f3ac <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0012a06:	83 c4 10             	add    esp,0x10
c0012a09:	83 ec 08             	sub    esp,0x8
c0012a0c:	50                   	push   eax
c0012a0d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012a11:	e8 76 f5 ff ff       	call   c0011f8c <VAS::getPageTableEntry(unsigned long)>
c0012a16:	83 c4 10             	add    esp,0x10
c0012a19:	8b 00                	mov    eax,DWORD PTR [eax]
c0012a1b:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012a20:	6a 11                	push   0x11
c0012a22:	53                   	push   ebx
c0012a23:	50                   	push   eax
c0012a24:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012a28:	e8 f5 f8 ff ff       	call   c0012322 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012a2d:	83 c4 10             	add    esp,0x10
c0012a30:	a1 a8 23 03 c0       	mov    eax,ds:0xc00323a8
c0012a35:	48                   	dec    eax
c0012a36:	a3 a8 23 03 c0       	mov    ds:0xc00323a8,eax
c0012a3b:	a1 a8 23 03 c0       	mov    eax,ds:0xc00323a8
c0012a40:	85 c0                	test   eax,eax
c0012a42:	75 01                	jne    c0012a45 <VAS::VAS(bool)+0x27b>
c0012a44:	fb                   	sti    
c0012a45:	90                   	nop
c0012a46:	83 c4 28             	add    esp,0x28
c0012a49:	5b                   	pop    ebx
c0012a4a:	c3                   	ret    
c0012a4b:	90                   	nop

c0012a4c <VAS::evict(unsigned long)>:
c0012a4c:	55                   	push   ebp
c0012a4d:	57                   	push   edi
c0012a4e:	56                   	push   esi
c0012a4f:	53                   	push   ebx
c0012a50:	83 ec 1c             	sub    esp,0x1c
c0012a53:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012a57:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0012a5b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012a5f:	e8 c2 f1 ff ff       	call   c0011c26 <Virt::allocateSwapfilePage()>
c0012a64:	89 c7                	mov    edi,eax
c0012a66:	a1 0c de 02 c0       	mov    eax,ds:0xc002de0c
c0012a6b:	85 c0                	test   eax,eax
c0012a6d:	7e 3d                	jle    c0012aac <VAS::evict(unsigned long)+0x60>
c0012a6f:	89 ee                	mov    esi,ebp
c0012a71:	31 db                	xor    ebx,ebx
c0012a73:	83 ec 0c             	sub    esp,0xc
c0012a76:	57                   	push   edi
c0012a77:	e8 98 f1 ff ff       	call   c0011c14 <Virt::swapIDToSector(unsigned long)>
c0012a7c:	89 34 24             	mov    DWORD PTR [esp],esi
c0012a7f:	01 d8                	add    eax,ebx
c0012a81:	6a 01                	push   0x1
c0012a83:	31 d2                	xor    edx,edx
c0012a85:	43                   	inc    ebx
c0012a86:	52                   	push   edx
c0012a87:	81 c6 00 02 00 00    	add    esi,0x200
c0012a8d:	50                   	push   eax
c0012a8e:	0f be 05 18 de 02 c0 	movsx  eax,BYTE PTR ds:0xc002de18
c0012a95:	ff 34 85 7c f3 02 c0 	push   DWORD PTR [eax*4-0x3ffd0c84]
c0012a9c:	e8 47 3e 00 00       	call   c00168e8 <LogicalDisk::write(unsigned long long, int, void*)>
c0012aa1:	83 c4 20             	add    esp,0x20
c0012aa4:	39 1d 0c de 02 c0    	cmp    DWORD PTR ds:0xc002de0c,ebx
c0012aaa:	7f c7                	jg     c0012a73 <VAS::evict(unsigned long)+0x27>
c0012aac:	83 ec 08             	sub    esp,0x8
c0012aaf:	c1 e7 0b             	shl    edi,0xb
c0012ab2:	55                   	push   ebp
c0012ab3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012ab7:	e8 d0 f4 ff ff       	call   c0011f8c <VAS::getPageTableEntry(unsigned long)>
c0012abc:	83 c4 0c             	add    esp,0xc
c0012abf:	8b 10                	mov    edx,DWORD PTR [eax]
c0012ac1:	81 e2 fe 07 00 00    	and    edx,0x7fe
c0012ac7:	09 d7                	or     edi,edx
c0012ac9:	89 38                	mov    DWORD PTR [eax],edi
c0012acb:	a1 e8 ef 02 c0       	mov    eax,ds:0xc002efe8
c0012ad0:	40                   	inc    eax
c0012ad1:	a3 e8 ef 02 c0       	mov    ds:0xc002efe8,eax
c0012ad6:	0f 20 da             	mov    edx,cr3
c0012ad9:	0f 22 da             	mov    cr3,edx
c0012adc:	50                   	push   eax
c0012add:	55                   	push   ebp
c0012ade:	68 3b b1 02 c0       	push   0xc002b13b
c0012ae3:	e8 09 04 00 00       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c0012ae8:	a1 e4 ef 02 c0       	mov    eax,ds:0xc002efe4
c0012aed:	c7 44 24 40 50 b1 02 c0 	mov    DWORD PTR [esp+0x40],0xc002b150
c0012af5:	8d 50 01             	lea    edx,[eax+0x1]
c0012af8:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0012afc:	89 15 e4 ef 02 c0    	mov    DWORD PTR ds:0xc002efe4,edx
c0012b02:	83 c4 2c             	add    esp,0x2c
c0012b05:	5b                   	pop    ebx
c0012b06:	5e                   	pop    esi
c0012b07:	5f                   	pop    edi
c0012b08:	5d                   	pop    ebp
c0012b09:	e9 e3 03 00 00       	jmp    c0012ef1 <Dbg::kprintf(char const*, ...)>

c0012b0e <VAS::tryLoadBackOffDisk(unsigned long)>:
c0012b0e:	55                   	push   ebp
c0012b0f:	57                   	push   edi
c0012b10:	56                   	push   esi
c0012b11:	53                   	push   ebx
c0012b12:	83 ec 0c             	sub    esp,0xc
c0012b15:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0012b19:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0012b1f:	0f 84 dc 00 00 00    	je     c0012c01 <VAS::tryLoadBackOffDisk(unsigned long)+0xf3>
c0012b25:	56                   	push   esi
c0012b26:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0012b2a:	e8 5d f4 ff ff       	call   c0011f8c <VAS::getPageTableEntry(unsigned long)>
c0012b2f:	5b                   	pop    ebx
c0012b30:	85 c0                	test   eax,eax
c0012b32:	5f                   	pop    edi
c0012b33:	89 c3                	mov    ebx,eax
c0012b35:	0f 84 c6 00 00 00    	je     c0012c01 <VAS::tryLoadBackOffDisk(unsigned long)+0xf3>
c0012b3b:	8b 38                	mov    edi,DWORD PTR [eax]
c0012b3d:	31 c0                	xor    eax,eax
c0012b3f:	89 fa                	mov    edx,edi
c0012b41:	81 e2 01 04 00 00    	and    edx,0x401
c0012b47:	81 fa 00 04 00 00    	cmp    edx,0x400
c0012b4d:	0f 85 b0 00 00 00    	jne    c0012c03 <VAS::tryLoadBackOffDisk(unsigned long)+0xf5>
c0012b53:	e8 46 d4 ff ff       	call   c000ff9e <Phys::allocatePage()>
c0012b58:	c1 ef 0b             	shr    edi,0xb
c0012b5b:	8b 13                	mov    edx,DWORD PTR [ebx]
c0012b5d:	81 e2 ff 0f 00 00    	and    edx,0xfff
c0012b63:	09 c2                	or     edx,eax
c0012b65:	81 ca 01 08 00 00    	or     edx,0x801
c0012b6b:	89 13                	mov    DWORD PTR [ebx],edx
c0012b6d:	8b 0d 0c de 02 c0    	mov    ecx,DWORD PTR ds:0xc002de0c
c0012b73:	85 c9                	test   ecx,ecx
c0012b75:	7e 3d                	jle    c0012bb4 <VAS::tryLoadBackOffDisk(unsigned long)+0xa6>
c0012b77:	89 f5                	mov    ebp,esi
c0012b79:	31 db                	xor    ebx,ebx
c0012b7b:	83 ec 0c             	sub    esp,0xc
c0012b7e:	57                   	push   edi
c0012b7f:	e8 90 f0 ff ff       	call   c0011c14 <Virt::swapIDToSector(unsigned long)>
c0012b84:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012b87:	01 d8                	add    eax,ebx
c0012b89:	6a 01                	push   0x1
c0012b8b:	31 d2                	xor    edx,edx
c0012b8d:	43                   	inc    ebx
c0012b8e:	52                   	push   edx
c0012b8f:	81 c5 00 02 00 00    	add    ebp,0x200
c0012b95:	50                   	push   eax
c0012b96:	0f be 05 18 de 02 c0 	movsx  eax,BYTE PTR ds:0xc002de18
c0012b9d:	ff 34 85 7c f3 02 c0 	push   DWORD PTR [eax*4-0x3ffd0c84]
c0012ba4:	e8 d3 3c 00 00       	call   c001687c <LogicalDisk::read(unsigned long long, int, void*)>
c0012ba9:	83 c4 20             	add    esp,0x20
c0012bac:	39 1d 0c de 02 c0    	cmp    DWORD PTR ds:0xc002de0c,ebx
c0012bb2:	7f c7                	jg     c0012b7b <VAS::tryLoadBackOffDisk(unsigned long)+0x6d>
c0012bb4:	a1 e8 ef 02 c0       	mov    eax,ds:0xc002efe8
c0012bb9:	48                   	dec    eax
c0012bba:	52                   	push   edx
c0012bbb:	a3 e8 ef 02 c0       	mov    ds:0xc002efe8,eax
c0012bc0:	50                   	push   eax
c0012bc1:	56                   	push   esi
c0012bc2:	68 61 b1 02 c0       	push   0xc002b161
c0012bc7:	e8 25 03 00 00       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c0012bcc:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012bcf:	e8 22 f0 ff ff       	call   c0011bf6 <Virt::freeSwapfilePage(unsigned long)>
c0012bd4:	a1 a8 23 03 c0       	mov    eax,ds:0xc00323a8
c0012bd9:	83 c4 10             	add    esp,0x10
c0012bdc:	48                   	dec    eax
c0012bdd:	a3 a8 23 03 c0       	mov    ds:0xc00323a8,eax
c0012be2:	85 c0                	test   eax,eax
c0012be4:	75 01                	jne    c0012be7 <VAS::tryLoadBackOffDisk(unsigned long)+0xd9>
c0012be6:	fb                   	sti    
c0012be7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012beb:	25 ff 0f 00 00       	and    eax,0xfff
c0012bf0:	3d e0 0f 00 00       	cmp    eax,0xfe0
c0012bf5:	77 14                	ja     c0012c0b <VAS::tryLoadBackOffDisk(unsigned long)+0xfd>
c0012bf7:	0f 20 d8             	mov    eax,cr3
c0012bfa:	0f 22 d8             	mov    cr3,eax
c0012bfd:	b0 01                	mov    al,0x1
c0012bff:	eb 02                	jmp    c0012c03 <VAS::tryLoadBackOffDisk(unsigned long)+0xf5>
c0012c01:	31 c0                	xor    eax,eax
c0012c03:	83 c4 0c             	add    esp,0xc
c0012c06:	5b                   	pop    ebx
c0012c07:	5e                   	pop    esi
c0012c08:	5f                   	pop    edi
c0012c09:	5d                   	pop    ebp
c0012c0a:	c3                   	ret    
c0012c0b:	83 ec 0c             	sub    esp,0xc
c0012c0e:	68 76 b1 02 c0       	push   0xc002b176
c0012c13:	e8 d9 02 00 00       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c0012c18:	83 c4 10             	add    esp,0x10
c0012c1b:	eb da                	jmp    c0012bf7 <VAS::tryLoadBackOffDisk(unsigned long)+0xe9>
c0012c1d:	90                   	nop

c0012c1e <VAS::scanForEviction()>:
c0012c1e:	57                   	push   edi
c0012c1f:	56                   	push   esi
c0012c20:	53                   	push   ebx
c0012c21:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012c25:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0012c28:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c0012c2e:	75 0e                	jne    c0012c3e <VAS::scanForEviction()+0x20>
c0012c30:	89 da                	mov    edx,ebx
c0012c32:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0012c35:	c1 ea 16             	shr    edx,0x16
c0012c38:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c0012c3c:	74 48                	je     c0012c86 <VAS::scanForEviction()+0x68>
c0012c3e:	53                   	push   ebx
c0012c3f:	56                   	push   esi
c0012c40:	e8 47 f3 ff ff       	call   c0011f8c <VAS::getPageTableEntry(unsigned long)>
c0012c45:	5a                   	pop    edx
c0012c46:	8b 38                	mov    edi,DWORD PTR [eax]
c0012c48:	59                   	pop    ecx
c0012c49:	89 fa                	mov    edx,edi
c0012c4b:	81 e2 00 0c 00 00    	and    edx,0xc00
c0012c51:	81 fa 00 0c 00 00    	cmp    edx,0xc00
c0012c57:	74 3d                	je     c0012c96 <VAS::scanForEviction()+0x78>
c0012c59:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012c5f:	81 fb ff ff bf ff    	cmp    ebx,0xffbfffff
c0012c65:	76 2a                	jbe    c0012c91 <VAS::scanForEviction()+0x73>
c0012c67:	31 db                	xor    ebx,ebx
c0012c69:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c0012c70:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c0012c76:	75 c6                	jne    c0012c3e <VAS::scanForEviction()+0x20>
c0012c78:	89 da                	mov    edx,ebx
c0012c7a:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0012c7d:	c1 ea 16             	shr    edx,0x16
c0012c80:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c0012c84:	75 b8                	jne    c0012c3e <VAS::scanForEviction()+0x20>
c0012c86:	81 c3 00 00 40 00    	add    ebx,0x400000
c0012c8c:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0012c8f:	eb 97                	jmp    c0012c28 <VAS::scanForEviction()+0xa>
c0012c91:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0012c94:	eb 92                	jmp    c0012c28 <VAS::scanForEviction()+0xa>
c0012c96:	f7 c7 01 00 00 00    	test   edi,0x1
c0012c9c:	74 bb                	je     c0012c59 <VAS::scanForEviction()+0x3b>
c0012c9e:	f7 c7 20 00 00 00    	test   edi,0x20
c0012ca4:	74 0a                	je     c0012cb0 <VAS::scanForEviction()+0x92>
c0012ca6:	83 e7 df             	and    edi,0xffffffdf
c0012ca9:	89 38                	mov    DWORD PTR [eax],edi
c0012cab:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0012cae:	eb a9                	jmp    c0012c59 <VAS::scanForEviction()+0x3b>
c0012cb0:	83 ec 08             	sub    esp,0x8
c0012cb3:	53                   	push   ebx
c0012cb4:	56                   	push   esi
c0012cb5:	e8 92 fd ff ff       	call   c0012a4c <VAS::evict(unsigned long)>
c0012cba:	81 46 08 00 10 00 00 	add    DWORD PTR [esi+0x8],0x1000
c0012cc1:	83 c4 10             	add    esp,0x10
c0012cc4:	89 f8                	mov    eax,edi
c0012cc6:	5b                   	pop    ebx
c0012cc7:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012ccc:	5e                   	pop    esi
c0012ccd:	5f                   	pop    edi
c0012cce:	c3                   	ret    

c0012ccf <mapVASFirstTime>:
c0012ccf:	55                   	push   ebp
c0012cd0:	57                   	push   edi
c0012cd1:	56                   	push   esi
c0012cd2:	53                   	push   ebx
c0012cd3:	83 ec 0c             	sub    esp,0xc
c0012cd6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012cdb:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0012cde:	4a                   	dec    edx
c0012cdf:	0f 84 8e 00 00 00    	je     c0012d73 <mapVASFirstTime+0xa4>
c0012ce5:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c0012ce8:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c0012ceb:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c0012cf0:	c1 e5 15             	shl    ebp,0x15
c0012cf3:	be 00 90 e7 01       	mov    esi,0x1e79000
c0012cf8:	8b ba 32 05 00 00    	mov    edi,DWORD PTR [edx+0x532]
c0012cfe:	29 eb                	sub    ebx,ebp
c0012d00:	29 ee                	sub    esi,ebp
c0012d02:	e8 97 d2 ff ff       	call   c000ff9e <Phys::allocatePage()>
c0012d07:	83 ec 0c             	sub    esp,0xc
c0012d0a:	68 03 04 00 00       	push   0x403
c0012d0f:	6a 01                	push   0x1
c0012d11:	53                   	push   ebx
c0012d12:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0012d18:	50                   	push   eax
c0012d19:	57                   	push   edi
c0012d1a:	e8 f7 f8 ff ff       	call   c0012616 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012d1f:	83 c4 20             	add    esp,0x20
c0012d22:	39 f3                	cmp    ebx,esi
c0012d24:	75 dc                	jne    c0012d02 <mapVASFirstTime+0x33>
c0012d26:	be 00 f0 ff 01       	mov    esi,0x1fff000
c0012d2b:	b8 00 f0 fd 01       	mov    eax,0x1fdf000
c0012d30:	29 ee                	sub    esi,ebp
c0012d32:	29 e8                	sub    eax,ebp
c0012d34:	89 c5                	mov    ebp,eax
c0012d36:	80 7f 01 01          	cmp    BYTE PTR [edi+0x1],0x1
c0012d3a:	19 db                	sbb    ebx,ebx
c0012d3c:	e8 5d d2 ff ff       	call   c000ff9e <Phys::allocatePage()>
c0012d41:	83 e3 04             	and    ebx,0x4
c0012d44:	83 ec 0c             	sub    esp,0xc
c0012d47:	81 c3 03 04 00 00    	add    ebx,0x403
c0012d4d:	53                   	push   ebx
c0012d4e:	6a 01                	push   0x1
c0012d50:	56                   	push   esi
c0012d51:	81 ee 00 10 00 00    	sub    esi,0x1000
c0012d57:	50                   	push   eax
c0012d58:	57                   	push   edi
c0012d59:	e8 b8 f8 ff ff       	call   c0012616 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012d5e:	83 c4 20             	add    esp,0x20
c0012d61:	39 f5                	cmp    ebp,esi
c0012d63:	75 d1                	jne    c0012d36 <mapVASFirstTime+0x67>
c0012d65:	0f 20 d8             	mov    eax,cr3
c0012d68:	0f 22 d8             	mov    cr3,eax
c0012d6b:	83 c4 0c             	add    esp,0xc
c0012d6e:	5b                   	pop    ebx
c0012d6f:	5e                   	pop    esi
c0012d70:	5f                   	pop    edi
c0012d71:	5d                   	pop    ebp
c0012d72:	c3                   	ret    
c0012d73:	83 ec 0c             	sub    esp,0xc
c0012d76:	68 86 b1 02 c0       	push   0xc002b186
c0012d7b:	e8 71 01 00 00       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c0012d80:	83 c4 10             	add    esp,0x10
c0012d83:	83 c4 0c             	add    esp,0xc
c0012d86:	5b                   	pop    ebx
c0012d87:	5e                   	pop    esi
c0012d88:	5f                   	pop    edi
c0012d89:	5d                   	pop    ebp
c0012d8a:	c3                   	ret    

c0012d8b <__cxa_atexit>:
c0012d8b:	31 c0                	xor    eax,eax
c0012d8d:	c3                   	ret    

c0012d8e <__cxa_finalize>:
c0012d8e:	c3                   	ret    

c0012d8f <__stack_chk_fail>:
c0012d8f:	55                   	push   ebp
c0012d90:	89 e5                	mov    ebp,esp
c0012d92:	83 ec 14             	sub    esp,0x14
c0012d95:	68 9f b1 02 c0       	push   0xc002b19f
c0012d9a:	e8 52 01 00 00       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c0012d9f:	58                   	pop    eax
c0012da0:	5a                   	pop    edx
c0012da1:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0012da4:	68 ef b1 02 c0       	push   0xc002b1ef
c0012da9:	e8 43 01 00 00       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c0012dae:	59                   	pop    ecx
c0012daf:	58                   	pop    eax
c0012db0:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012db3:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012db6:	68 ef b1 02 c0       	push   0xc002b1ef
c0012dbb:	e8 31 01 00 00       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c0012dc0:	5a                   	pop    edx
c0012dc1:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012dc4:	59                   	pop    ecx
c0012dc5:	8b 00                	mov    eax,DWORD PTR [eax]
c0012dc7:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012dca:	68 ef b1 02 c0       	push   0xc002b1ef
c0012dcf:	e8 1d 01 00 00       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c0012dd4:	5a                   	pop    edx
c0012dd5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012dd8:	59                   	pop    ecx
c0012dd9:	8b 00                	mov    eax,DWORD PTR [eax]
c0012ddb:	8b 00                	mov    eax,DWORD PTR [eax]
c0012ddd:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012de0:	68 ef b1 02 c0       	push   0xc002b1ef
c0012de5:	e8 07 01 00 00       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c0012dea:	c7 04 24 f7 b1 02 c0 	mov    DWORD PTR [esp],0xc002b1f7
c0012df1:	e8 bb 7a 00 00       	call   c001a8b1 <Krnl::panic(char const*)>
c0012df6:	83 c4 10             	add    esp,0x10
c0012df9:	c9                   	leave  
c0012dfa:	c3                   	ret    

c0012dfb <__cxa_pure_virtual>:
c0012dfb:	83 ec 18             	sub    esp,0x18
c0012dfe:	68 0f b2 02 c0       	push   0xc002b20f
c0012e03:	e8 a9 7a 00 00       	call   c001a8b1 <Krnl::panic(char const*)>
c0012e08:	83 c4 1c             	add    esp,0x1c
c0012e0b:	c3                   	ret    

c0012e0c <operator new[](unsigned long)>:
c0012e0c:	e9 21 cb ff ff       	jmp    c000f932 <malloc>

c0012e11 <operator delete(void*, unsigned long)>:
c0012e11:	e9 3c cb ff ff       	jmp    c000f952 <rfree>

c0012e16 <operator delete[](void*)>:
c0012e16:	e9 37 cb ff ff       	jmp    c000f952 <rfree>

c0012e1b <operator delete[](void*, unsigned long)>:
c0012e1b:	e9 32 cb ff ff       	jmp    c000f952 <rfree>

c0012e20 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c0012e20:	57                   	push   edi
c0012e21:	b9 3f 00 00 00       	mov    ecx,0x3f
c0012e26:	56                   	push   esi
c0012e27:	be 24 b2 02 c0       	mov    esi,0xc002b224
c0012e2c:	53                   	push   ebx
c0012e2d:	83 ec 40             	sub    esp,0x40
c0012e30:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0012e34:	8d 7c 24 01          	lea    edi,[esp+0x1]
c0012e38:	fc                   	cld    
c0012e39:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012e3b:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
c0012e3f:	83 f9 3e             	cmp    ecx,0x3e
c0012e42:	7e 05                	jle    c0012e49 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x29>
c0012e44:	b9 3e 00 00 00       	mov    ecx,0x3e
c0012e49:	89 df                	mov    edi,ebx
c0012e4b:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0012e4f:	eb 02                	jmp    c0012e53 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x33>
c0012e51:	89 c7                	mov    edi,eax
c0012e53:	31 d2                	xor    edx,edx
c0012e55:	46                   	inc    esi
c0012e56:	89 f8                	mov    eax,edi
c0012e58:	f7 f1                	div    ecx
c0012e5a:	39 cf                	cmp    edi,ecx
c0012e5c:	73 f3                	jae    c0012e51 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x31>
c0012e5e:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012e61:	eb 02                	jmp    c0012e65 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x45>
c0012e63:	89 c3                	mov    ebx,eax
c0012e65:	31 d2                	xor    edx,edx
c0012e67:	4e                   	dec    esi
c0012e68:	89 d8                	mov    eax,ebx
c0012e6a:	f7 f1                	div    ecx
c0012e6c:	39 cb                	cmp    ebx,ecx
c0012e6e:	8a 54 14 01          	mov    dl,BYTE PTR [esp+edx*1+0x1]
c0012e72:	88 16                	mov    BYTE PTR [esi],dl
c0012e74:	73 ed                	jae    c0012e63 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x43>
c0012e76:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0012e7a:	83 c4 40             	add    esp,0x40
c0012e7d:	5b                   	pop    ebx
c0012e7e:	5e                   	pop    esi
c0012e7f:	5f                   	pop    edi
c0012e80:	c3                   	ret    

c0012e81 <Dbg::logc(char)>:
c0012e81:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012e85:	ba fd 03 00 00       	mov    edx,0x3fd
c0012e8a:	ec                   	in     al,dx
c0012e8b:	a8 20                	test   al,0x20
c0012e8d:	74 fb                	je     c0012e8a <Dbg::logc(char)+0x9>
c0012e8f:	ba f8 03 00 00       	mov    edx,0x3f8
c0012e94:	88 c8                	mov    al,cl
c0012e96:	ee                   	out    dx,al
c0012e97:	c3                   	ret    

c0012e98 <Dbg::logs(char*)>:
c0012e98:	53                   	push   ebx
c0012e99:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0012e9d:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012ea0:	84 c0                	test   al,al
c0012ea2:	74 0f                	je     c0012eb3 <Dbg::logs(char*)+0x1b>
c0012ea4:	50                   	push   eax
c0012ea5:	43                   	inc    ebx
c0012ea6:	e8 d6 ff ff ff       	call   c0012e81 <Dbg::logc(char)>
c0012eab:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012eae:	5a                   	pop    edx
c0012eaf:	84 c0                	test   al,al
c0012eb1:	75 f1                	jne    c0012ea4 <Dbg::logs(char*)+0xc>
c0012eb3:	5b                   	pop    ebx
c0012eb4:	c3                   	ret    

c0012eb5 <Dbg::logWriteInt(unsigned int)>:
c0012eb5:	83 ec 10             	sub    esp,0x10
c0012eb8:	6a 0a                	push   0xa
c0012eba:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012ebe:	50                   	push   eax
c0012ebf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012ec3:	e8 58 ff ff ff       	call   c0012e20 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012ec8:	50                   	push   eax
c0012ec9:	e8 ca ff ff ff       	call   c0012e98 <Dbg::logs(char*)>
c0012ece:	83 c4 20             	add    esp,0x20
c0012ed1:	c3                   	ret    

c0012ed2 <Dbg::logWriteIntBase(unsigned int, int)>:
c0012ed2:	83 ec 10             	sub    esp,0x10
c0012ed5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012ed9:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012edd:	50                   	push   eax
c0012ede:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012ee2:	e8 39 ff ff ff       	call   c0012e20 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012ee7:	50                   	push   eax
c0012ee8:	e8 ab ff ff ff       	call   c0012e98 <Dbg::logs(char*)>
c0012eed:	83 c4 20             	add    esp,0x20
c0012ef0:	c3                   	ret    

c0012ef1 <Dbg::kprintf(char const*, ...)>:
c0012ef1:	55                   	push   ebp
c0012ef2:	57                   	push   edi
c0012ef3:	56                   	push   esi
c0012ef4:	53                   	push   ebx
c0012ef5:	83 ec 0c             	sub    esp,0xc
c0012ef8:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012efc:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0012f00:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012f04:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0012f07:	84 c0                	test   al,al
c0012f09:	74 4a                	je     c0012f55 <Dbg::kprintf(char const*, ...)+0x64>
c0012f0b:	31 db                	xor    ebx,ebx
c0012f0d:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0012f10:	3c 25                	cmp    al,0x25
c0012f12:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c0012f15:	0f 85 e4 00 00 00    	jne    c0012fff <Dbg::kprintf(char const*, ...)+0x10e>
c0012f1b:	83 c3 02             	add    ebx,0x2
c0012f1e:	8a 07                	mov    al,BYTE PTR [edi]
c0012f20:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c0012f23:	83 e8 25             	sub    eax,0x25
c0012f26:	3c 53                	cmp    al,0x53
c0012f28:	0f 87 ba 00 00 00    	ja     c0012fe8 <Dbg::kprintf(char const*, ...)+0xf7>
c0012f2e:	0f b6 c0             	movzx  eax,al
c0012f31:	ff 24 85 64 b2 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd4d9c]
c0012f38:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012f3c:	89 c8                	mov    eax,ecx
c0012f3e:	83 c1 04             	add    ecx,0x4
c0012f41:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012f45:	ff 30                	push   DWORD PTR [eax]
c0012f47:	e8 4c ff ff ff       	call   c0012e98 <Dbg::logs(char*)>
c0012f4c:	58                   	pop    eax
c0012f4d:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c0012f51:	84 c0                	test   al,al
c0012f53:	75 b8                	jne    c0012f0d <Dbg::kprintf(char const*, ...)+0x1c>
c0012f55:	83 c4 0c             	add    esp,0xc
c0012f58:	5b                   	pop    ebx
c0012f59:	5e                   	pop    esi
c0012f5a:	5f                   	pop    edi
c0012f5b:	5d                   	pop    ebp
c0012f5c:	c3                   	ret    
c0012f5d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012f61:	89 d0                	mov    eax,edx
c0012f63:	83 c2 04             	add    edx,0x4
c0012f66:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012f6a:	ff 30                	push   DWORD PTR [eax]
c0012f6c:	e8 44 ff ff ff       	call   c0012eb5 <Dbg::logWriteInt(unsigned int)>
c0012f71:	58                   	pop    eax
c0012f72:	eb d9                	jmp    c0012f4d <Dbg::kprintf(char const*, ...)+0x5c>
c0012f74:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012f78:	89 d0                	mov    eax,edx
c0012f7a:	83 c2 04             	add    edx,0x4
c0012f7d:	0f be 00             	movsx  eax,BYTE PTR [eax]
c0012f80:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012f84:	50                   	push   eax
c0012f85:	e8 f7 fe ff ff       	call   c0012e81 <Dbg::logc(char)>
c0012f8a:	58                   	pop    eax
c0012f8b:	eb c0                	jmp    c0012f4d <Dbg::kprintf(char const*, ...)+0x5c>
c0012f8d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012f91:	89 c8                	mov    eax,ecx
c0012f93:	83 c1 04             	add    ecx,0x4
c0012f96:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012f9a:	ff 30                	push   DWORD PTR [eax]
c0012f9c:	e8 14 ff ff ff       	call   c0012eb5 <Dbg::logWriteInt(unsigned int)>
c0012fa1:	5f                   	pop    edi
c0012fa2:	eb a9                	jmp    c0012f4d <Dbg::kprintf(char const*, ...)+0x5c>
c0012fa4:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012fa8:	89 c8                	mov    eax,ecx
c0012faa:	83 c1 04             	add    ecx,0x4
c0012fad:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012fb1:	6a 10                	push   0x10
c0012fb3:	ff 30                	push   DWORD PTR [eax]
c0012fb5:	e8 18 ff ff ff       	call   c0012ed2 <Dbg::logWriteIntBase(unsigned int, int)>
c0012fba:	59                   	pop    ecx
c0012fbb:	5f                   	pop    edi
c0012fbc:	eb 8f                	jmp    c0012f4d <Dbg::kprintf(char const*, ...)+0x5c>
c0012fbe:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012fc2:	89 d0                	mov    eax,edx
c0012fc4:	83 c2 08             	add    edx,0x8
c0012fc7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012fcb:	6a 10                	push   0x10
c0012fcd:	ff 30                	push   DWORD PTR [eax]
c0012fcf:	e8 fe fe ff ff       	call   c0012ed2 <Dbg::logWriteIntBase(unsigned int, int)>
c0012fd4:	58                   	pop    eax
c0012fd5:	5a                   	pop    edx
c0012fd6:	e9 72 ff ff ff       	jmp    c0012f4d <Dbg::kprintf(char const*, ...)+0x5c>
c0012fdb:	6a 25                	push   0x25
c0012fdd:	e8 9f fe ff ff       	call   c0012e81 <Dbg::logc(char)>
c0012fe2:	58                   	pop    eax
c0012fe3:	e9 65 ff ff ff       	jmp    c0012f4d <Dbg::kprintf(char const*, ...)+0x5c>
c0012fe8:	6a 25                	push   0x25
c0012fea:	e8 92 fe ff ff       	call   c0012e81 <Dbg::logc(char)>
c0012fef:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0012ff2:	50                   	push   eax
c0012ff3:	e8 89 fe ff ff       	call   c0012e81 <Dbg::logc(char)>
c0012ff8:	5a                   	pop    edx
c0012ff9:	59                   	pop    ecx
c0012ffa:	e9 4e ff ff ff       	jmp    c0012f4d <Dbg::kprintf(char const*, ...)+0x5c>
c0012fff:	50                   	push   eax
c0013000:	89 eb                	mov    ebx,ebp
c0013002:	e8 7a fe ff ff       	call   c0012e81 <Dbg::logc(char)>
c0013007:	89 fd                	mov    ebp,edi
c0013009:	58                   	pop    eax
c001300a:	e9 3e ff ff ff       	jmp    c0012f4d <Dbg::kprintf(char const*, ...)+0x5c>
c001300f:	90                   	nop

c0013010 <File::read(unsigned long long, void*, int*)>:
c0013010:	53                   	push   ebx
c0013011:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013015:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0013019:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0013020:	3c 19                	cmp    al,0x19
c0013022:	77 35                	ja     c0013059 <File::read(unsigned long long, void*, int*)+0x49>
c0013024:	8b 04 85 80 f4 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0b80]
c001302b:	85 c0                	test   eax,eax
c001302d:	74 2a                	je     c0013059 <File::read(unsigned long long, void*, int*)+0x49>
c001302f:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0013035:	85 c0                	test   eax,eax
c0013037:	74 20                	je     c0013059 <File::read(unsigned long long, void*, int*)+0x49>
c0013039:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001303d:	74 21                	je     c0013060 <File::read(unsigned long long, void*, int*)+0x50>
c001303f:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013041:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0013045:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c001304b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001304f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0013053:	5b                   	pop    ebx
c0013054:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c0013057:	ff e0                	jmp    eax
c0013059:	b8 0b 00 00 00       	mov    eax,0xb
c001305e:	eb 05                	jmp    c0013065 <File::read(unsigned long long, void*, int*)+0x55>
c0013060:	b8 05 00 00 00       	mov    eax,0x5
c0013065:	5b                   	pop    ebx
c0013066:	c3                   	ret    
c0013067:	90                   	nop

c0013068 <File::write(unsigned long long, void*, int*)>:
c0013068:	53                   	push   ebx
c0013069:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001306d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0013071:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0013078:	3c 19                	cmp    al,0x19
c001307a:	77 35                	ja     c00130b1 <File::write(unsigned long long, void*, int*)+0x49>
c001307c:	8b 04 85 80 f4 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0b80]
c0013083:	85 c0                	test   eax,eax
c0013085:	74 2a                	je     c00130b1 <File::write(unsigned long long, void*, int*)+0x49>
c0013087:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c001308d:	85 c0                	test   eax,eax
c001308f:	74 20                	je     c00130b1 <File::write(unsigned long long, void*, int*)+0x49>
c0013091:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013095:	74 21                	je     c00130b8 <File::write(unsigned long long, void*, int*)+0x50>
c0013097:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013099:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001309d:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c00130a3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00130a7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00130ab:	5b                   	pop    ebx
c00130ac:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c00130af:	ff e0                	jmp    eax
c00130b1:	b8 0b 00 00 00       	mov    eax,0xb
c00130b6:	eb 05                	jmp    c00130bd <File::write(unsigned long long, void*, int*)+0x55>
c00130b8:	b8 05 00 00 00       	mov    eax,0x5
c00130bd:	5b                   	pop    ebx
c00130be:	c3                   	ret    
c00130bf:	90                   	nop

c00130c0 <Directory::read(unsigned long long, void*, int*)>:
c00130c0:	53                   	push   ebx
c00130c1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00130c5:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00130c9:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c00130d0:	3c 19                	cmp    al,0x19
c00130d2:	77 35                	ja     c0013109 <Directory::read(unsigned long long, void*, int*)+0x49>
c00130d4:	8b 04 85 80 f4 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0b80]
c00130db:	85 c0                	test   eax,eax
c00130dd:	74 2a                	je     c0013109 <Directory::read(unsigned long long, void*, int*)+0x49>
c00130df:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00130e5:	85 c0                	test   eax,eax
c00130e7:	74 20                	je     c0013109 <Directory::read(unsigned long long, void*, int*)+0x49>
c00130e9:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00130ed:	74 21                	je     c0013110 <Directory::read(unsigned long long, void*, int*)+0x50>
c00130ef:	8b 08                	mov    ecx,DWORD PTR [eax]
c00130f1:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00130f5:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c00130fb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00130ff:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0013103:	5b                   	pop    ebx
c0013104:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c0013107:	ff e0                	jmp    eax
c0013109:	b8 0b 00 00 00       	mov    eax,0xb
c001310e:	eb 05                	jmp    c0013115 <Directory::read(unsigned long long, void*, int*)+0x55>
c0013110:	b8 05 00 00 00       	mov    eax,0x5
c0013115:	5b                   	pop    ebx
c0013116:	c3                   	ret    
c0013117:	90                   	nop

c0013118 <Directory::write(unsigned long long, void*, int*)>:
c0013118:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001311c:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c0013123:	b8 0b 00 00 00       	mov    eax,0xb
c0013128:	80 fa 19             	cmp    dl,0x19
c001312b:	77 18                	ja     c0013145 <Directory::write(unsigned long long, void*, int*)+0x2d>
c001312d:	8b 14 95 80 f4 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd0b80]
c0013134:	85 d2                	test   edx,edx
c0013136:	74 0d                	je     c0013145 <Directory::write(unsigned long long, void*, int*)+0x2d>
c0013138:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c001313f:	19 c0                	sbb    eax,eax
c0013141:	83 e0 0a             	and    eax,0xa
c0013144:	40                   	inc    eax
c0013145:	c3                   	ret    

c0013146 <File::isAtty()>:
c0013146:	31 c0                	xor    eax,eax
c0013148:	c3                   	ret    
c0013149:	90                   	nop

c001314a <Directory::isAtty()>:
c001314a:	31 c0                	xor    eax,eax
c001314c:	c3                   	ret    
c001314d:	90                   	nop

c001314e <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c001314e:	b8 0a 00 00 00       	mov    eax,0xa
c0013153:	c3                   	ret    

c0013154 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c0013154:	b8 0a 00 00 00       	mov    eax,0xa
c0013159:	c3                   	ret    

c001315a <Filesystem::getFileFirstSector(char const*)>:
c001315a:	31 c0                	xor    eax,eax
c001315c:	31 d2                	xor    edx,edx
c001315e:	c3                   	ret    
c001315f:	90                   	nop

c0013160 <File::~File()>:
c0013160:	83 ec 0c             	sub    esp,0xc
c0013163:	ba 24 b4 02 c0       	mov    edx,0xc002b424
c0013168:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001316c:	89 10                	mov    DWORD PTR [eax],edx
c001316e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013172:	83 ec 0c             	sub    esp,0xc
c0013175:	50                   	push   eax
c0013176:	e8 09 e7 ff ff       	call   c0011884 <UnixFile::~UnixFile()>
c001317b:	83 c4 10             	add    esp,0x10
c001317e:	90                   	nop
c001317f:	83 c4 0c             	add    esp,0xc
c0013182:	c3                   	ret    
c0013183:	90                   	nop

c0013184 <File::~File()>:
c0013184:	83 ec 0c             	sub    esp,0xc
c0013187:	83 ec 0c             	sub    esp,0xc
c001318a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001318e:	e8 cd ff ff ff       	call   c0013160 <File::~File()>
c0013193:	83 c4 10             	add    esp,0x10
c0013196:	83 ec 08             	sub    esp,0x8
c0013199:	68 14 01 00 00       	push   0x114
c001319e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00131a2:	e8 6a fc ff ff       	call   c0012e11 <operator delete(void*, unsigned long)>
c00131a7:	83 c4 10             	add    esp,0x10
c00131aa:	83 c4 0c             	add    esp,0xc
c00131ad:	c3                   	ret    

c00131ae <Directory::~Directory()>:
c00131ae:	83 ec 0c             	sub    esp,0xc
c00131b1:	ba 40 b4 02 c0       	mov    edx,0xc002b440
c00131b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00131ba:	89 10                	mov    DWORD PTR [eax],edx
c00131bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00131c0:	83 ec 0c             	sub    esp,0xc
c00131c3:	50                   	push   eax
c00131c4:	e8 bb e6 ff ff       	call   c0011884 <UnixFile::~UnixFile()>
c00131c9:	83 c4 10             	add    esp,0x10
c00131cc:	90                   	nop
c00131cd:	83 c4 0c             	add    esp,0xc
c00131d0:	c3                   	ret    
c00131d1:	90                   	nop

c00131d2 <Directory::~Directory()>:
c00131d2:	83 ec 0c             	sub    esp,0xc
c00131d5:	83 ec 0c             	sub    esp,0xc
c00131d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00131dc:	e8 cd ff ff ff       	call   c00131ae <Directory::~Directory()>
c00131e1:	83 c4 10             	add    esp,0x10
c00131e4:	83 ec 08             	sub    esp,0x8
c00131e7:	68 14 01 00 00       	push   0x114
c00131ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00131f0:	e8 1c fc ff ff       	call   c0012e11 <operator delete(void*, unsigned long)>
c00131f5:	83 c4 10             	add    esp,0x10
c00131f8:	83 c4 0c             	add    esp,0xc
c00131fb:	c3                   	ret    

c00131fc <Filesystem::Filesystem()>:
c00131fc:	ba bc b3 02 c0       	mov    edx,0xc002b3bc
c0013201:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013205:	89 10                	mov    DWORD PTR [eax],edx
c0013207:	8b 15 f4 ef 02 c0    	mov    edx,DWORD PTR ds:0xc002eff4
c001320d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013211:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0013214:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013218:	a3 f4 ef 02 c0       	mov    ds:0xc002eff4,eax
c001321d:	90                   	nop
c001321e:	c3                   	ret    
c001321f:	90                   	nop

c0013220 <Filesystem::~Filesystem()>:
c0013220:	ba bc b3 02 c0       	mov    edx,0xc002b3bc
c0013225:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013229:	89 10                	mov    DWORD PTR [eax],edx
c001322b:	90                   	nop
c001322c:	c3                   	ret    
c001322d:	90                   	nop

c001322e <Filesystem::~Filesystem()>:
c001322e:	83 ec 0c             	sub    esp,0xc
c0013231:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013235:	e8 e6 ff ff ff       	call   c0013220 <Filesystem::~Filesystem()>
c001323a:	83 c4 04             	add    esp,0x4
c001323d:	83 ec 08             	sub    esp,0x8
c0013240:	6a 08                	push   0x8
c0013242:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013246:	e8 c6 fb ff ff       	call   c0012e11 <operator delete(void*, unsigned long)>
c001324b:	83 c4 10             	add    esp,0x10
c001324e:	83 c4 0c             	add    esp,0xc
c0013251:	c3                   	ret    

c0013252 <Fs::getcwd(Process*, char*, int)>:
c0013252:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013256:	31 c0                	xor    eax,eax
c0013258:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001325b:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c001325f:	7d 15                	jge    c0013276 <Fs::getcwd(Process*, char*, int)+0x24>
c0013261:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0013265:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c001326c:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c001326f:	84 c9                	test   cl,cl
c0013271:	74 06                	je     c0013279 <Fs::getcwd(Process*, char*, int)+0x27>
c0013273:	40                   	inc    eax
c0013274:	eb e2                	jmp    c0013258 <Fs::getcwd(Process*, char*, int)+0x6>
c0013276:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0013279:	31 c0                	xor    eax,eax
c001327b:	c3                   	ret    

c001327c <Fs::initVFS()>:
c001327c:	83 ec 18             	sub    esp,0x18
c001327f:	6a 08                	push   0x8
c0013281:	e8 ac c6 ff ff       	call   c000f932 <malloc>
c0013286:	89 04 24             	mov    DWORD PTR [esp],eax
c0013289:	e8 0a e4 00 00       	call   c0021698 <FAT::FAT()>
c001328e:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0013295:	e8 98 c6 ff ff       	call   c000f932 <malloc>
c001329a:	89 04 24             	mov    DWORD PTR [esp],eax
c001329d:	e8 4e f6 00 00       	call   c00228f0 <ISO9660::ISO9660()>
c00132a2:	83 c4 1c             	add    esp,0x1c
c00132a5:	c3                   	ret    

c00132a6 <Fs::standardiseFiles(char*, char const*, char const*)>:
c00132a6:	55                   	push   ebp
c00132a7:	57                   	push   edi
c00132a8:	56                   	push   esi
c00132a9:	53                   	push   ebx
c00132aa:	81 ec 10 04 00 00    	sub    esp,0x410
c00132b0:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c00132b7:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c00132be:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c00132c5:	68 00 04 00 00       	push   0x400
c00132ca:	6a 00                	push   0x0
c00132cc:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00132d0:	56                   	push   esi
c00132d1:	e8 c6 d4 fe ff       	call   c000079c <memset>
c00132d6:	83 c4 10             	add    esp,0x10
c00132d9:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c00132dd:	75 0b                	jne    c00132ea <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c00132df:	50                   	push   eax
c00132e0:	50                   	push   eax
c00132e1:	57                   	push   edi
c00132e2:	56                   	push   esi
c00132e3:	e8 70 d5 fe ff       	call   c0000858 <strcpy>
c00132e8:	eb 41                	jmp    c001332b <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c00132ea:	8a 07                	mov    al,BYTE PTR [edi]
c00132ec:	3c 5c                	cmp    al,0x5c
c00132ee:	74 04                	je     c00132f4 <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c00132f0:	3c 2f                	cmp    al,0x2f
c00132f2:	75 18                	jne    c001330c <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c00132f4:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c00132f7:	3c 60                	cmp    al,0x60
c00132f9:	7e 03                	jle    c00132fe <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c00132fb:	83 e8 20             	sub    eax,0x20
c00132fe:	88 04 24             	mov    BYTE PTR [esp],al
c0013301:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0013308:	50                   	push   eax
c0013309:	50                   	push   eax
c001330a:	eb 18                	jmp    c0013324 <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c001330c:	50                   	push   eax
c001330d:	50                   	push   eax
c001330e:	55                   	push   ebp
c001330f:	56                   	push   esi
c0013310:	e8 43 d5 fe ff       	call   c0000858 <strcpy>
c0013315:	5a                   	pop    edx
c0013316:	59                   	pop    ecx
c0013317:	68 d1 cb 02 c0       	push   0xc002cbd1
c001331c:	56                   	push   esi
c001331d:	e8 76 d6 fe ff       	call   c0000998 <strcat>
c0013322:	5d                   	pop    ebp
c0013323:	58                   	pop    eax
c0013324:	57                   	push   edi
c0013325:	56                   	push   esi
c0013326:	e8 6d d6 fe ff       	call   c0000998 <strcat>
c001332b:	83 c4 10             	add    esp,0x10
c001332e:	8a 04 24             	mov    al,BYTE PTR [esp]
c0013331:	3c 60                	cmp    al,0x60
c0013333:	7e 03                	jle    c0013338 <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c0013335:	83 e8 20             	sub    eax,0x20
c0013338:	88 04 24             	mov    BYTE PTR [esp],al
c001333b:	88 03                	mov    BYTE PTR [ebx],al
c001333d:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0013344:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c001334a:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c001334e:	bf 03 00 00 00       	mov    edi,0x3
c0013353:	b8 03 00 00 00       	mov    eax,0x3
c0013358:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c001335b:	84 d2                	test   dl,dl
c001335d:	0f 84 91 00 00 00    	je     c00133f4 <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c0013363:	8d 4f 01             	lea    ecx,[edi+0x1]
c0013366:	80 fa 5c             	cmp    dl,0x5c
c0013369:	74 05                	je     c0013370 <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c001336b:	80 fa 2f             	cmp    dl,0x2f
c001336e:	75 12                	jne    c0013382 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c0013370:	89 c5                	mov    ebp,eax
c0013372:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0013377:	74 09                	je     c0013382 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c0013379:	40                   	inc    eax
c001337a:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c001337e:	89 cf                	mov    edi,ecx
c0013380:	eb d6                	jmp    c0013358 <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c0013382:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c0013387:	75 5b                	jne    c00133e4 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c0013389:	80 fa 2e             	cmp    dl,0x2e
c001338c:	75 56                	jne    c00133e4 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c001338e:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c0013392:	74 19                	je     c00133ad <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c0013394:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0013399:	74 53                	je     c00133ee <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c001339b:	89 f9                	mov    ecx,edi
c001339d:	41                   	inc    ecx
c001339e:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c00133a1:	80 fa 2f             	cmp    dl,0x2f
c00133a4:	74 f7                	je     c001339d <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c00133a6:	80 fa 5c             	cmp    dl,0x5c
c00133a9:	74 f2                	je     c001339d <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c00133ab:	eb d1                	jmp    c001337e <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c00133ad:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c00133b2:	74 3a                	je     c00133ee <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c00133b4:	83 f8 03             	cmp    eax,0x3
c00133b7:	74 c5                	je     c001337e <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c00133b9:	41                   	inc    ecx
c00133ba:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c00133bd:	80 fa 2f             	cmp    dl,0x2f
c00133c0:	74 f7                	je     c00133b9 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c00133c2:	80 fa 5c             	cmp    dl,0x5c
c00133c5:	74 f2                	je     c00133b9 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c00133c7:	48                   	dec    eax
c00133c8:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c00133cc:	75 06                	jne    c00133d4 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c00133ce:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c00133d2:	eb f3                	jmp    c00133c7 <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c00133d4:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c00133d8:	74 07                	je     c00133e1 <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c00133da:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c00133de:	48                   	dec    eax
c00133df:	eb f3                	jmp    c00133d4 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c00133e1:	40                   	inc    eax
c00133e2:	eb 9a                	jmp    c001337e <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c00133e4:	80 fa 2f             	cmp    dl,0x2f
c00133e7:	74 95                	je     c001337e <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c00133e9:	80 fa 5c             	cmp    dl,0x5c
c00133ec:	74 90                	je     c001337e <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c00133ee:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c00133f1:	40                   	inc    eax
c00133f2:	eb 8a                	jmp    c001337e <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c00133f4:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c00133f8:	83 ec 0c             	sub    esp,0xc
c00133fb:	53                   	push   ebx
c00133fc:	e8 b7 d3 fe ff       	call   c00007b8 <strlen>
c0013401:	83 c4 10             	add    esp,0x10
c0013404:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c0013409:	75 26                	jne    c0013431 <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c001340b:	83 ec 0c             	sub    esp,0xc
c001340e:	53                   	push   ebx
c001340f:	e8 a4 d3 fe ff       	call   c00007b8 <strlen>
c0013414:	83 c4 10             	add    esp,0x10
c0013417:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c001341c:	74 26                	je     c0013444 <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c001341e:	83 ec 0c             	sub    esp,0xc
c0013421:	53                   	push   ebx
c0013422:	e8 91 d3 fe ff       	call   c00007b8 <strlen>
c0013427:	83 c4 10             	add    esp,0x10
c001342a:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001342f:	eb c7                	jmp    c00133f8 <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c0013431:	83 ec 0c             	sub    esp,0xc
c0013434:	53                   	push   ebx
c0013435:	e8 7e d3 fe ff       	call   c00007b8 <strlen>
c001343a:	83 c4 10             	add    esp,0x10
c001343d:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0013442:	74 c7                	je     c001340b <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c0013444:	81 c4 0c 04 00 00    	add    esp,0x40c
c001344a:	5b                   	pop    ebx
c001344b:	5e                   	pop    esi
c001344c:	5f                   	pop    edi
c001344d:	5d                   	pop    ebp
c001344e:	c3                   	ret    
c001344f:	90                   	nop

c0013450 <File::File(char const*, Process*)>:
c0013450:	83 ec 0c             	sub    esp,0xc
c0013453:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013457:	83 ec 08             	sub    esp,0x8
c001345a:	6a 00                	push   0x0
c001345c:	50                   	push   eax
c001345d:	e8 40 e2 ff ff       	call   c00116a2 <UnixFile::UnixFile(int)>
c0013462:	83 c4 10             	add    esp,0x10
c0013465:	ba 24 b4 02 c0       	mov    edx,0xc002b424
c001346a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001346e:	89 10                	mov    DWORD PTR [eax],edx
c0013470:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013474:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001347a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001347e:	83 c0 0d             	add    eax,0xd
c0013481:	83 ec 04             	sub    esp,0x4
c0013484:	52                   	push   edx
c0013485:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013489:	50                   	push   eax
c001348a:	e8 17 fe ff ff       	call   c00132a6 <Fs::standardiseFiles(char*, char const*, char const*)>
c001348f:	83 c4 10             	add    esp,0x10
c0013492:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013496:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0013499:	8d 50 bf             	lea    edx,[eax-0x41]
c001349c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134a0:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c00134a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134aa:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c00134ae:	90                   	nop
c00134af:	83 c4 0c             	add    esp,0xc
c00134b2:	c3                   	ret    
c00134b3:	90                   	nop

c00134b4 <File::open(FileOpenMode)>:
c00134b4:	53                   	push   ebx
c00134b5:	b8 0b 00 00 00       	mov    eax,0xb
c00134ba:	83 ec 08             	sub    esp,0x8
c00134bd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00134c1:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c00134c8:	80 fa 19             	cmp    dl,0x19
c00134cb:	77 40                	ja     c001350d <File::open(FileOpenMode)+0x59>
c00134cd:	8b 14 95 80 f4 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd0b80]
c00134d4:	85 d2                	test   edx,edx
c00134d6:	74 35                	je     c001350d <File::open(FileOpenMode)+0x59>
c00134d8:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c00134de:	85 d2                	test   edx,edx
c00134e0:	74 2b                	je     c001350d <File::open(FileOpenMode)+0x59>
c00134e2:	b8 06 00 00 00       	mov    eax,0x6
c00134e7:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c00134eb:	75 20                	jne    c001350d <File::open(FileOpenMode)+0x59>
c00134ed:	8b 02                	mov    eax,DWORD PTR [edx]
c00134ef:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c00134f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00134f9:	51                   	push   ecx
c00134fa:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c00134fd:	51                   	push   ecx
c00134fe:	52                   	push   edx
c00134ff:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0013502:	83 c4 10             	add    esp,0x10
c0013505:	85 c0                	test   eax,eax
c0013507:	75 04                	jne    c001350d <File::open(FileOpenMode)+0x59>
c0013509:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c001350d:	83 c4 08             	add    esp,0x8
c0013510:	5b                   	pop    ebx
c0013511:	c3                   	ret    

c0013512 <File::close()>:
c0013512:	53                   	push   ebx
c0013513:	b8 0b 00 00 00       	mov    eax,0xb
c0013518:	83 ec 08             	sub    esp,0x8
c001351b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001351f:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013526:	80 fa 19             	cmp    dl,0x19
c0013529:	77 41                	ja     c001356c <File::close()+0x5a>
c001352b:	8b 1c 95 80 f4 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd0b80]
c0013532:	85 db                	test   ebx,ebx
c0013534:	74 36                	je     c001356c <File::close()+0x5a>
c0013536:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c001353d:	74 2d                	je     c001356c <File::close()+0x5a>
c001353f:	b8 05 00 00 00       	mov    eax,0x5
c0013544:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0013548:	74 22                	je     c001356c <File::close()+0x5a>
c001354a:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c001354e:	8b 04 95 80 f4 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd0b80]
c0013555:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c001355b:	53                   	push   ebx
c001355c:	53                   	push   ebx
c001355d:	8b 10                	mov    edx,DWORD PTR [eax]
c001355f:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0013565:	50                   	push   eax
c0013566:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c0013569:	83 c4 10             	add    esp,0x10
c001356c:	83 c4 08             	add    esp,0x8
c001356f:	5b                   	pop    ebx
c0013570:	c3                   	ret    
c0013571:	90                   	nop

c0013572 <File::seek(unsigned long long)>:
c0013572:	56                   	push   esi
c0013573:	53                   	push   ebx
c0013574:	b8 0b 00 00 00       	mov    eax,0xb
c0013579:	51                   	push   ecx
c001357a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001357e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0013582:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c0013589:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001358d:	80 fa 19             	cmp    dl,0x19
c0013590:	77 31                	ja     c00135c3 <File::seek(unsigned long long)+0x51>
c0013592:	8b 14 95 80 f4 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd0b80]
c0013599:	85 d2                	test   edx,edx
c001359b:	74 26                	je     c00135c3 <File::seek(unsigned long long)+0x51>
c001359d:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c00135a3:	85 d2                	test   edx,edx
c00135a5:	74 1c                	je     c00135c3 <File::seek(unsigned long long)+0x51>
c00135a7:	b8 05 00 00 00       	mov    eax,0x5
c00135ac:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c00135b0:	74 11                	je     c00135c3 <File::seek(unsigned long long)+0x51>
c00135b2:	8b 02                	mov    eax,DWORD PTR [edx]
c00135b4:	53                   	push   ebx
c00135b5:	51                   	push   ecx
c00135b6:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c00135bc:	52                   	push   edx
c00135bd:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00135c0:	83 c4 10             	add    esp,0x10
c00135c3:	5a                   	pop    edx
c00135c4:	5b                   	pop    ebx
c00135c5:	5e                   	pop    esi
c00135c6:	c3                   	ret    
c00135c7:	90                   	nop

c00135c8 <File::tell(unsigned long long*)>:
c00135c8:	83 ec 0c             	sub    esp,0xc
c00135cb:	b8 0b 00 00 00       	mov    eax,0xb
c00135d0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00135d4:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c00135db:	80 fa 19             	cmp    dl,0x19
c00135de:	77 34                	ja     c0013614 <File::tell(unsigned long long*)+0x4c>
c00135e0:	8b 14 95 80 f4 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd0b80]
c00135e7:	85 d2                	test   edx,edx
c00135e9:	74 29                	je     c0013614 <File::tell(unsigned long long*)+0x4c>
c00135eb:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c00135f1:	85 d2                	test   edx,edx
c00135f3:	74 1f                	je     c0013614 <File::tell(unsigned long long*)+0x4c>
c00135f5:	b8 05 00 00 00       	mov    eax,0x5
c00135fa:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c00135fe:	74 14                	je     c0013614 <File::tell(unsigned long long*)+0x4c>
c0013600:	50                   	push   eax
c0013601:	8b 02                	mov    eax,DWORD PTR [edx]
c0013603:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013607:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c001360d:	52                   	push   edx
c001360e:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0013611:	83 c4 10             	add    esp,0x10
c0013614:	83 c4 0c             	add    esp,0xc
c0013617:	c3                   	ret    

c0013618 <File::rewind()>:
c0013618:	83 ec 10             	sub    esp,0x10
c001361b:	6a 00                	push   0x0
c001361d:	6a 00                	push   0x0
c001361f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013623:	e8 4a ff ff ff       	call   c0013572 <File::seek(unsigned long long)>
c0013628:	83 c4 1c             	add    esp,0x1c
c001362b:	c3                   	ret    

c001362c <File::unlink()>:
c001362c:	83 ec 0c             	sub    esp,0xc
c001362f:	b8 0b 00 00 00       	mov    eax,0xb
c0013634:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013638:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001363f:	80 f9 19             	cmp    cl,0x19
c0013642:	77 2f                	ja     c0013673 <File::unlink()+0x47>
c0013644:	8b 0c 8d 80 f4 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0b80]
c001364b:	85 c9                	test   ecx,ecx
c001364d:	74 24                	je     c0013673 <File::unlink()+0x47>
c001364f:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013655:	85 c9                	test   ecx,ecx
c0013657:	74 1a                	je     c0013673 <File::unlink()+0x47>
c0013659:	b8 06 00 00 00       	mov    eax,0x6
c001365e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013662:	75 0f                	jne    c0013673 <File::unlink()+0x47>
c0013664:	83 c2 0d             	add    edx,0xd
c0013667:	50                   	push   eax
c0013668:	50                   	push   eax
c0013669:	8b 01                	mov    eax,DWORD PTR [ecx]
c001366b:	52                   	push   edx
c001366c:	51                   	push   ecx
c001366d:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0013670:	83 c4 10             	add    esp,0x10
c0013673:	83 c4 0c             	add    esp,0xc
c0013676:	c3                   	ret    
c0013677:	90                   	nop

c0013678 <File::rename(char const*)>:
c0013678:	83 ec 0c             	sub    esp,0xc
c001367b:	b8 0b 00 00 00       	mov    eax,0xb
c0013680:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013684:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001368b:	80 f9 19             	cmp    cl,0x19
c001368e:	77 32                	ja     c00136c2 <File::rename(char const*)+0x4a>
c0013690:	8b 0c 8d 80 f4 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0b80]
c0013697:	85 c9                	test   ecx,ecx
c0013699:	74 27                	je     c00136c2 <File::rename(char const*)+0x4a>
c001369b:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00136a1:	85 c9                	test   ecx,ecx
c00136a3:	74 1d                	je     c00136c2 <File::rename(char const*)+0x4a>
c00136a5:	b8 06 00 00 00       	mov    eax,0x6
c00136aa:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00136ae:	75 12                	jne    c00136c2 <File::rename(char const*)+0x4a>
c00136b0:	83 c2 0d             	add    edx,0xd
c00136b3:	50                   	push   eax
c00136b4:	8b 01                	mov    eax,DWORD PTR [ecx]
c00136b6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00136ba:	52                   	push   edx
c00136bb:	51                   	push   ecx
c00136bc:	ff 50 40             	call   DWORD PTR [eax+0x40]
c00136bf:	83 c4 10             	add    esp,0x10
c00136c2:	83 c4 0c             	add    esp,0xc
c00136c5:	c3                   	ret    

c00136c6 <File::chfatattr(unsigned char, unsigned char)>:
c00136c6:	57                   	push   edi
c00136c7:	b8 0b 00 00 00       	mov    eax,0xb
c00136cc:	56                   	push   esi
c00136cd:	53                   	push   ebx
c00136ce:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00136d2:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00136d6:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00136dd:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00136e1:	80 f9 19             	cmp    cl,0x19
c00136e4:	77 37                	ja     c001371d <File::chfatattr(unsigned char, unsigned char)+0x57>
c00136e6:	8b 0c 8d 80 f4 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0b80]
c00136ed:	85 c9                	test   ecx,ecx
c00136ef:	74 2c                	je     c001371d <File::chfatattr(unsigned char, unsigned char)+0x57>
c00136f1:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00136f7:	85 c9                	test   ecx,ecx
c00136f9:	74 22                	je     c001371d <File::chfatattr(unsigned char, unsigned char)+0x57>
c00136fb:	b8 06 00 00 00       	mov    eax,0x6
c0013700:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013704:	75 17                	jne    c001371d <File::chfatattr(unsigned char, unsigned char)+0x57>
c0013706:	8b 39                	mov    edi,DWORD PTR [ecx]
c0013708:	89 f0                	mov    eax,esi
c001370a:	83 c2 0d             	add    edx,0xd
c001370d:	0f b6 f0             	movzx  esi,al
c0013710:	0f b6 db             	movzx  ebx,bl
c0013713:	56                   	push   esi
c0013714:	53                   	push   ebx
c0013715:	52                   	push   edx
c0013716:	51                   	push   ecx
c0013717:	ff 57 34             	call   DWORD PTR [edi+0x34]
c001371a:	83 c4 10             	add    esp,0x10
c001371d:	5b                   	pop    ebx
c001371e:	5e                   	pop    esi
c001371f:	5f                   	pop    edi
c0013720:	c3                   	ret    
c0013721:	90                   	nop

c0013722 <File::exists()>:
c0013722:	83 ec 0c             	sub    esp,0xc
c0013725:	31 c0                	xor    eax,eax
c0013727:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001372b:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013732:	80 f9 19             	cmp    cl,0x19
c0013735:	77 24                	ja     c001375b <File::exists()+0x39>
c0013737:	8b 0c 8d 80 f4 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0b80]
c001373e:	85 c9                	test   ecx,ecx
c0013740:	74 19                	je     c001375b <File::exists()+0x39>
c0013742:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013748:	85 c9                	test   ecx,ecx
c001374a:	74 0f                	je     c001375b <File::exists()+0x39>
c001374c:	83 c2 0d             	add    edx,0xd
c001374f:	50                   	push   eax
c0013750:	50                   	push   eax
c0013751:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013753:	52                   	push   edx
c0013754:	51                   	push   ecx
c0013755:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0013758:	83 c4 10             	add    esp,0x10
c001375b:	83 c4 0c             	add    esp,0xc
c001375e:	c3                   	ret    
c001375f:	90                   	nop

c0013760 <File::stat(unsigned long long*, bool*)>:
c0013760:	56                   	push   esi
c0013761:	53                   	push   ebx
c0013762:	50                   	push   eax
c0013763:	b8 0b 00 00 00       	mov    eax,0xb
c0013768:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001376c:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013770:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013777:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001377b:	80 f9 19             	cmp    cl,0x19
c001377e:	77 3d                	ja     c00137bd <File::stat(unsigned long long*, bool*)+0x5d>
c0013780:	8b 0c 8d 80 f4 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0b80]
c0013787:	85 c9                	test   ecx,ecx
c0013789:	74 32                	je     c00137bd <File::stat(unsigned long long*, bool*)+0x5d>
c001378b:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013791:	85 c9                	test   ecx,ecx
c0013793:	74 28                	je     c00137bd <File::stat(unsigned long long*, bool*)+0x5d>
c0013795:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013797:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001379b:	74 13                	je     c00137b0 <File::stat(unsigned long long*, bool*)+0x50>
c001379d:	83 ec 04             	sub    esp,0x4
c00137a0:	56                   	push   esi
c00137a1:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c00137a7:	51                   	push   ecx
c00137a8:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c00137ab:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c00137ae:	eb 0a                	jmp    c00137ba <File::stat(unsigned long long*, bool*)+0x5a>
c00137b0:	53                   	push   ebx
c00137b1:	83 c2 0d             	add    edx,0xd
c00137b4:	56                   	push   esi
c00137b5:	52                   	push   edx
c00137b6:	51                   	push   ecx
c00137b7:	ff 50 30             	call   DWORD PTR [eax+0x30]
c00137ba:	83 c4 10             	add    esp,0x10
c00137bd:	5a                   	pop    edx
c00137be:	5b                   	pop    ebx
c00137bf:	5e                   	pop    esi
c00137c0:	c3                   	ret    

c00137c1 <Fs::setcwd(Process*, char*)>:
c00137c1:	55                   	push   ebp
c00137c2:	57                   	push   edi
c00137c3:	56                   	push   esi
c00137c4:	53                   	push   ebx
c00137c5:	81 ec 20 02 00 00    	sub    esp,0x220
c00137cb:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c00137d2:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c00137d8:	57                   	push   edi
c00137d9:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00137e0:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c00137e4:	56                   	push   esi
c00137e5:	e8 bc fa ff ff       	call   c00132a6 <Fs::standardiseFiles(char*, char const*, char const*)>
c00137ea:	89 34 24             	mov    DWORD PTR [esp],esi
c00137ed:	e8 c6 cf fe ff       	call   c00007b8 <strlen>
c00137f2:	83 c4 10             	add    esp,0x10
c00137f5:	83 f8 02             	cmp    eax,0x2
c00137f8:	77 17                	ja     c0013811 <Fs::setcwd(Process*, char*)+0x50>
c00137fa:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c00137ff:	83 e8 41             	sub    eax,0x41
c0013802:	83 f8 19             	cmp    eax,0x19
c0013805:	76 24                	jbe    c001382b <Fs::setcwd(Process*, char*)+0x6a>
c0013807:	b8 03 00 00 00       	mov    eax,0x3
c001380c:	e9 e0 00 00 00       	jmp    c00138f1 <Fs::setcwd(Process*, char*)+0x130>
c0013811:	83 ec 0c             	sub    esp,0xc
c0013814:	56                   	push   esi
c0013815:	e8 9e cf fe ff       	call   c00007b8 <strlen>
c001381a:	83 c4 10             	add    esp,0x10
c001381d:	83 f8 03             	cmp    eax,0x3
c0013820:	75 34                	jne    c0013856 <Fs::setcwd(Process*, char*)+0x95>
c0013822:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c0013827:	75 2d                	jne    c0013856 <Fs::setcwd(Process*, char*)+0x95>
c0013829:	eb cf                	jmp    c00137fa <Fs::setcwd(Process*, char*)+0x39>
c001382b:	8b 14 85 80 f4 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd0b80]
c0013832:	b8 05 00 00 00       	mov    eax,0x5
c0013837:	85 d2                	test   edx,edx
c0013839:	0f 84 b2 00 00 00    	je     c00138f1 <Fs::setcwd(Process*, char*)+0x130>
c001383f:	b8 06 00 00 00       	mov    eax,0x6
c0013844:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c001384b:	0f 85 92 00 00 00    	jne    c00138e3 <Fs::setcwd(Process*, char*)+0x122>
c0013851:	e9 9b 00 00 00       	jmp    c00138f1 <Fs::setcwd(Process*, char*)+0x130>
c0013856:	83 ec 0c             	sub    esp,0xc
c0013859:	68 14 01 00 00       	push   0x114
c001385e:	e8 cf c0 ff ff       	call   c000f932 <malloc>
c0013863:	83 c4 0c             	add    esp,0xc
c0013866:	89 c3                	mov    ebx,eax
c0013868:	55                   	push   ebp
c0013869:	56                   	push   esi
c001386a:	50                   	push   eax
c001386b:	e8 e0 fb ff ff       	call   c0013450 <File::File(char const*, Process*)>
c0013870:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c0013875:	83 c4 0c             	add    esp,0xc
c0013878:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001387c:	50                   	push   eax
c001387d:	8d 44 24 10          	lea    eax,[esp+0x10]
c0013881:	50                   	push   eax
c0013882:	53                   	push   ebx
c0013883:	e8 d8 fe ff ff       	call   c0013760 <File::stat(unsigned long long*, bool*)>
c0013888:	83 c4 10             	add    esp,0x10
c001388b:	83 f8 02             	cmp    eax,0x2
c001388e:	74 04                	je     c0013894 <Fs::setcwd(Process*, char*)+0xd3>
c0013890:	85 c0                	test   eax,eax
c0013892:	74 1c                	je     c00138b0 <Fs::setcwd(Process*, char*)+0xef>
c0013894:	b8 01 00 00 00       	mov    eax,0x1
c0013899:	85 db                	test   ebx,ebx
c001389b:	74 54                	je     c00138f1 <Fs::setcwd(Process*, char*)+0x130>
c001389d:	83 ec 0c             	sub    esp,0xc
c00138a0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00138a2:	53                   	push   ebx
c00138a3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00138a6:	83 c4 10             	add    esp,0x10
c00138a9:	b8 01 00 00 00       	mov    eax,0x1
c00138ae:	eb 41                	jmp    c00138f1 <Fs::setcwd(Process*, char*)+0x130>
c00138b0:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c00138b5:	75 1c                	jne    c00138d3 <Fs::setcwd(Process*, char*)+0x112>
c00138b7:	b8 02 00 00 00       	mov    eax,0x2
c00138bc:	85 db                	test   ebx,ebx
c00138be:	74 31                	je     c00138f1 <Fs::setcwd(Process*, char*)+0x130>
c00138c0:	83 ec 0c             	sub    esp,0xc
c00138c3:	8b 03                	mov    eax,DWORD PTR [ebx]
c00138c5:	53                   	push   ebx
c00138c6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00138c9:	83 c4 10             	add    esp,0x10
c00138cc:	b8 02 00 00 00       	mov    eax,0x2
c00138d1:	eb 1e                	jmp    c00138f1 <Fs::setcwd(Process*, char*)+0x130>
c00138d3:	85 db                	test   ebx,ebx
c00138d5:	74 0c                	je     c00138e3 <Fs::setcwd(Process*, char*)+0x122>
c00138d7:	83 ec 0c             	sub    esp,0xc
c00138da:	8b 03                	mov    eax,DWORD PTR [ebx]
c00138dc:	53                   	push   ebx
c00138dd:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00138e0:	83 c4 10             	add    esp,0x10
c00138e3:	50                   	push   eax
c00138e4:	50                   	push   eax
c00138e5:	56                   	push   esi
c00138e6:	57                   	push   edi
c00138e7:	e8 6c cf fe ff       	call   c0000858 <strcpy>
c00138ec:	83 c4 10             	add    esp,0x10
c00138ef:	31 c0                	xor    eax,eax
c00138f1:	81 c4 1c 02 00 00    	add    esp,0x21c
c00138f7:	5b                   	pop    ebx
c00138f8:	5e                   	pop    esi
c00138f9:	5f                   	pop    edi
c00138fa:	5d                   	pop    ebp
c00138fb:	c3                   	ret    

c00138fc <Directory::Directory(char const*, Process*)>:
c00138fc:	83 ec 0c             	sub    esp,0xc
c00138ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013903:	83 ec 08             	sub    esp,0x8
c0013906:	6a 00                	push   0x0
c0013908:	50                   	push   eax
c0013909:	e8 94 dd ff ff       	call   c00116a2 <UnixFile::UnixFile(int)>
c001390e:	83 c4 10             	add    esp,0x10
c0013911:	ba 40 b4 02 c0       	mov    edx,0xc002b440
c0013916:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001391a:	89 10                	mov    DWORD PTR [eax],edx
c001391c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013920:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0013926:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001392a:	83 c0 0d             	add    eax,0xd
c001392d:	83 ec 04             	sub    esp,0x4
c0013930:	52                   	push   edx
c0013931:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013935:	50                   	push   eax
c0013936:	e8 6b f9 ff ff       	call   c00132a6 <Fs::standardiseFiles(char*, char const*, char const*)>
c001393b:	83 c4 10             	add    esp,0x10
c001393e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013942:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0013945:	8d 50 bf             	lea    edx,[eax-0x41]
c0013948:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001394c:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0013952:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013956:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c001395a:	90                   	nop
c001395b:	83 c4 0c             	add    esp,0xc
c001395e:	c3                   	ret    
c001395f:	90                   	nop

c0013960 <Directory::open()>:
c0013960:	53                   	push   ebx
c0013961:	b8 0b 00 00 00       	mov    eax,0xb
c0013966:	83 ec 08             	sub    esp,0x8
c0013969:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001396d:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0013974:	80 fa 19             	cmp    dl,0x19
c0013977:	77 3d                	ja     c00139b6 <Directory::open()+0x56>
c0013979:	8b 14 95 80 f4 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd0b80]
c0013980:	85 d2                	test   edx,edx
c0013982:	74 32                	je     c00139b6 <Directory::open()+0x56>
c0013984:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c001398a:	85 d2                	test   edx,edx
c001398c:	74 28                	je     c00139b6 <Directory::open()+0x56>
c001398e:	b8 06 00 00 00       	mov    eax,0x6
c0013993:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0013997:	75 1d                	jne    c00139b6 <Directory::open()+0x56>
c0013999:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c001399f:	50                   	push   eax
c00139a0:	8b 02                	mov    eax,DWORD PTR [edx]
c00139a2:	51                   	push   ecx
c00139a3:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c00139a6:	51                   	push   ecx
c00139a7:	52                   	push   edx
c00139a8:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c00139ab:	83 c4 10             	add    esp,0x10
c00139ae:	85 c0                	test   eax,eax
c00139b0:	75 04                	jne    c00139b6 <Directory::open()+0x56>
c00139b2:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c00139b6:	83 c4 08             	add    esp,0x8
c00139b9:	5b                   	pop    ebx
c00139ba:	c3                   	ret    
c00139bb:	90                   	nop

c00139bc <Directory::close()>:
c00139bc:	53                   	push   ebx
c00139bd:	b8 0b 00 00 00       	mov    eax,0xb
c00139c2:	83 ec 08             	sub    esp,0x8
c00139c5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00139c9:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c00139d0:	80 fa 19             	cmp    dl,0x19
c00139d3:	77 41                	ja     c0013a16 <Directory::close()+0x5a>
c00139d5:	8b 1c 95 80 f4 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd0b80]
c00139dc:	85 db                	test   ebx,ebx
c00139de:	74 36                	je     c0013a16 <Directory::close()+0x5a>
c00139e0:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c00139e7:	74 2d                	je     c0013a16 <Directory::close()+0x5a>
c00139e9:	b8 05 00 00 00       	mov    eax,0x5
c00139ee:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c00139f2:	74 22                	je     c0013a16 <Directory::close()+0x5a>
c00139f4:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c00139f8:	8b 04 95 80 f4 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd0b80]
c00139ff:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0013a05:	53                   	push   ebx
c0013a06:	53                   	push   ebx
c0013a07:	8b 10                	mov    edx,DWORD PTR [eax]
c0013a09:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0013a0f:	50                   	push   eax
c0013a10:	ff 52 20             	call   DWORD PTR [edx+0x20]
c0013a13:	83 c4 10             	add    esp,0x10
c0013a16:	83 c4 08             	add    esp,0x8
c0013a19:	5b                   	pop    ebx
c0013a1a:	c3                   	ret    
c0013a1b:	90                   	nop

c0013a1c <Directory::unlink()>:
c0013a1c:	83 ec 0c             	sub    esp,0xc
c0013a1f:	b8 0b 00 00 00       	mov    eax,0xb
c0013a24:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013a28:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013a2f:	80 f9 19             	cmp    cl,0x19
c0013a32:	77 2f                	ja     c0013a63 <Directory::unlink()+0x47>
c0013a34:	8b 0c 8d 80 f4 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0b80]
c0013a3b:	85 c9                	test   ecx,ecx
c0013a3d:	74 24                	je     c0013a63 <Directory::unlink()+0x47>
c0013a3f:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013a45:	85 c9                	test   ecx,ecx
c0013a47:	74 1a                	je     c0013a63 <Directory::unlink()+0x47>
c0013a49:	b8 06 00 00 00       	mov    eax,0x6
c0013a4e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013a52:	75 0f                	jne    c0013a63 <Directory::unlink()+0x47>
c0013a54:	83 c2 0d             	add    edx,0xd
c0013a57:	50                   	push   eax
c0013a58:	50                   	push   eax
c0013a59:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013a5b:	52                   	push   edx
c0013a5c:	51                   	push   ecx
c0013a5d:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0013a60:	83 c4 10             	add    esp,0x10
c0013a63:	83 c4 0c             	add    esp,0xc
c0013a66:	c3                   	ret    
c0013a67:	90                   	nop

c0013a68 <Directory::rename(char const*)>:
c0013a68:	83 ec 0c             	sub    esp,0xc
c0013a6b:	b8 0b 00 00 00       	mov    eax,0xb
c0013a70:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013a74:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013a7b:	80 f9 19             	cmp    cl,0x19
c0013a7e:	77 32                	ja     c0013ab2 <Directory::rename(char const*)+0x4a>
c0013a80:	8b 0c 8d 80 f4 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0b80]
c0013a87:	85 c9                	test   ecx,ecx
c0013a89:	74 27                	je     c0013ab2 <Directory::rename(char const*)+0x4a>
c0013a8b:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013a91:	85 c9                	test   ecx,ecx
c0013a93:	74 1d                	je     c0013ab2 <Directory::rename(char const*)+0x4a>
c0013a95:	b8 06 00 00 00       	mov    eax,0x6
c0013a9a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013a9e:	75 12                	jne    c0013ab2 <Directory::rename(char const*)+0x4a>
c0013aa0:	83 c2 0d             	add    edx,0xd
c0013aa3:	50                   	push   eax
c0013aa4:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013aa6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013aaa:	52                   	push   edx
c0013aab:	51                   	push   ecx
c0013aac:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0013aaf:	83 c4 10             	add    esp,0x10
c0013ab2:	83 c4 0c             	add    esp,0xc
c0013ab5:	c3                   	ret    

c0013ab6 <Directory::exists()>:
c0013ab6:	83 ec 0c             	sub    esp,0xc
c0013ab9:	31 c0                	xor    eax,eax
c0013abb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013abf:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013ac6:	80 f9 19             	cmp    cl,0x19
c0013ac9:	77 24                	ja     c0013aef <Directory::exists()+0x39>
c0013acb:	8b 0c 8d 80 f4 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0b80]
c0013ad2:	85 c9                	test   ecx,ecx
c0013ad4:	74 19                	je     c0013aef <Directory::exists()+0x39>
c0013ad6:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013adc:	85 c9                	test   ecx,ecx
c0013ade:	74 0f                	je     c0013aef <Directory::exists()+0x39>
c0013ae0:	83 c2 0d             	add    edx,0xd
c0013ae3:	50                   	push   eax
c0013ae4:	50                   	push   eax
c0013ae5:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013ae7:	52                   	push   edx
c0013ae8:	51                   	push   ecx
c0013ae9:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0013aec:	83 c4 10             	add    esp,0x10
c0013aef:	83 c4 0c             	add    esp,0xc
c0013af2:	c3                   	ret    
c0013af3:	90                   	nop

c0013af4 <Directory::read(dirent*)>:
c0013af4:	83 ec 1c             	sub    esp,0x1c
c0013af7:	b8 0b 00 00 00       	mov    eax,0xb
c0013afc:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0013b00:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013b07:	80 fa 19             	cmp    dl,0x19
c0013b0a:	77 30                	ja     c0013b3c <Directory::read(dirent*)+0x48>
c0013b0c:	8b 14 95 80 f4 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd0b80]
c0013b13:	85 d2                	test   edx,edx
c0013b15:	74 25                	je     c0013b3c <Directory::read(dirent*)+0x48>
c0013b17:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0013b1e:	74 1c                	je     c0013b3c <Directory::read(dirent*)+0x48>
c0013b20:	83 ec 0c             	sub    esp,0xc
c0013b23:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013b25:	8d 54 24 18          	lea    edx,[esp+0x18]
c0013b29:	52                   	push   edx
c0013b2a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0013b2e:	6a 00                	push   0x0
c0013b30:	68 10 01 00 00       	push   0x110
c0013b35:	51                   	push   ecx
c0013b36:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013b39:	83 c4 20             	add    esp,0x20
c0013b3c:	83 c4 1c             	add    esp,0x1c
c0013b3f:	c3                   	ret    

c0013b40 <Directory::create()>:
c0013b40:	83 ec 0c             	sub    esp,0xc
c0013b43:	b8 0b 00 00 00       	mov    eax,0xb
c0013b48:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013b4c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013b53:	80 f9 19             	cmp    cl,0x19
c0013b56:	77 2f                	ja     c0013b87 <Directory::create()+0x47>
c0013b58:	8b 0c 8d 80 f4 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0b80]
c0013b5f:	85 c9                	test   ecx,ecx
c0013b61:	74 24                	je     c0013b87 <Directory::create()+0x47>
c0013b63:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013b69:	85 c9                	test   ecx,ecx
c0013b6b:	74 1a                	je     c0013b87 <Directory::create()+0x47>
c0013b6d:	b8 06 00 00 00       	mov    eax,0x6
c0013b72:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013b76:	75 0f                	jne    c0013b87 <Directory::create()+0x47>
c0013b78:	83 c2 0d             	add    edx,0xd
c0013b7b:	50                   	push   eax
c0013b7c:	50                   	push   eax
c0013b7d:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013b7f:	52                   	push   edx
c0013b80:	51                   	push   ecx
c0013b81:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c0013b84:	83 c4 10             	add    esp,0x10
c0013b87:	83 c4 0c             	add    esp,0xc
c0013b8a:	c3                   	ret    
c0013b8b:	90                   	nop

c0013b8c <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c0013b8c:	b8 0a 00 00 00       	mov    eax,0xa
c0013b91:	c3                   	ret    

c0013b92 <Bus::Bus(char const*)>:
c0013b92:	83 ec 0c             	sub    esp,0xc
c0013b95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b99:	83 ec 08             	sub    esp,0x8
c0013b9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013ba0:	50                   	push   eax
c0013ba1:	e8 70 09 00 00       	call   c0014516 <Device::Device(char const*)>
c0013ba6:	83 c4 10             	add    esp,0x10
c0013ba9:	ba 5c b4 02 c0       	mov    edx,0xc002b45c
c0013bae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013bb2:	89 10                	mov    DWORD PTR [eax],edx
c0013bb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013bb8:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0013bc2:	90                   	nop
c0013bc3:	83 c4 0c             	add    esp,0xc
c0013bc6:	c3                   	ret    
c0013bc7:	90                   	nop

c0013bc8 <Bus::~Bus()>:
c0013bc8:	83 ec 0c             	sub    esp,0xc
c0013bcb:	ba 5c b4 02 c0       	mov    edx,0xc002b45c
c0013bd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013bd4:	89 10                	mov    DWORD PTR [eax],edx
c0013bd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013bda:	83 ec 0c             	sub    esp,0xc
c0013bdd:	50                   	push   eax
c0013bde:	e8 15 06 00 00       	call   c00141f8 <Device::~Device()>
c0013be3:	83 c4 10             	add    esp,0x10
c0013be6:	90                   	nop
c0013be7:	83 c4 0c             	add    esp,0xc
c0013bea:	c3                   	ret    
c0013beb:	90                   	nop

c0013bec <Bus::~Bus()>:
c0013bec:	83 ec 0c             	sub    esp,0xc
c0013bef:	83 ec 0c             	sub    esp,0xc
c0013bf2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013bf6:	e8 cd ff ff ff       	call   c0013bc8 <Bus::~Bus()>
c0013bfb:	83 c4 10             	add    esp,0x10
c0013bfe:	83 ec 08             	sub    esp,0x8
c0013c01:	68 58 01 00 00       	push   0x158
c0013c06:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013c0a:	e8 02 f2 ff ff       	call   c0012e11 <operator delete(void*, unsigned long)>
c0013c0f:	83 c4 10             	add    esp,0x10
c0013c12:	83 c4 0c             	add    esp,0xc
c0013c15:	c3                   	ret    

c0013c16 <Buzzer::Buzzer(char const*)>:
c0013c16:	83 ec 0c             	sub    esp,0xc
c0013c19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c1d:	83 ec 08             	sub    esp,0x8
c0013c20:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013c24:	50                   	push   eax
c0013c25:	e8 ec 08 00 00       	call   c0014516 <Device::Device(char const*)>
c0013c2a:	83 c4 10             	add    esp,0x10
c0013c2d:	ba 88 b4 02 c0       	mov    edx,0xc002b488
c0013c32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c36:	89 10                	mov    DWORD PTR [eax],edx
c0013c38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c3c:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013c46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c4a:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c0013c54:	90                   	nop
c0013c55:	83 c4 0c             	add    esp,0xc
c0013c58:	c3                   	ret    
c0013c59:	90                   	nop

c0013c5a <Buzzer::~Buzzer()>:
c0013c5a:	83 ec 0c             	sub    esp,0xc
c0013c5d:	ba 88 b4 02 c0       	mov    edx,0xc002b488
c0013c62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c66:	89 10                	mov    DWORD PTR [eax],edx
c0013c68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c6c:	83 ec 0c             	sub    esp,0xc
c0013c6f:	50                   	push   eax
c0013c70:	e8 83 05 00 00       	call   c00141f8 <Device::~Device()>
c0013c75:	83 c4 10             	add    esp,0x10
c0013c78:	90                   	nop
c0013c79:	83 c4 0c             	add    esp,0xc
c0013c7c:	c3                   	ret    
c0013c7d:	90                   	nop

c0013c7e <Buzzer::~Buzzer()>:
c0013c7e:	83 ec 0c             	sub    esp,0xc
c0013c81:	83 ec 0c             	sub    esp,0xc
c0013c84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013c88:	e8 cd ff ff ff       	call   c0013c5a <Buzzer::~Buzzer()>
c0013c8d:	83 c4 10             	add    esp,0x10
c0013c90:	83 ec 08             	sub    esp,0x8
c0013c93:	68 5c 01 00 00       	push   0x15c
c0013c98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013c9c:	e8 70 f1 ff ff       	call   c0012e11 <operator delete(void*, unsigned long)>
c0013ca1:	83 c4 10             	add    esp,0x10
c0013ca4:	83 c4 0c             	add    esp,0xc
c0013ca7:	c3                   	ret    

c0013ca8 <Buzzer::stop()>:
c0013ca8:	83 ec 14             	sub    esp,0x14
c0013cab:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013caf:	8b 10                	mov    edx,DWORD PTR [eax]
c0013cb1:	6a 00                	push   0x0
c0013cb3:	50                   	push   eax
c0013cb4:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013cb7:	83 c4 1c             	add    esp,0x1c
c0013cba:	c3                   	ret    

c0013cbb <beepThread(void*)>:
c0013cbb:	53                   	push   ebx
c0013cbc:	83 ec 08             	sub    esp,0x8
c0013cbf:	a1 a8 23 03 c0       	mov    eax,ds:0xc00323a8
c0013cc4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013cc8:	48                   	dec    eax
c0013cc9:	a3 a8 23 03 c0       	mov    ds:0xc00323a8,eax
c0013cce:	75 01                	jne    c0013cd1 <beepThread(void*)+0x16>
c0013cd0:	fb                   	sti    
c0013cd1:	50                   	push   eax
c0013cd2:	50                   	push   eax
c0013cd3:	b8 40 42 0f 00       	mov    eax,0xf4240
c0013cd8:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c0013cde:	52                   	push   edx
c0013cdf:	50                   	push   eax
c0013ce0:	e8 d0 aa 00 00       	call   c001e7b5 <nanoSleep(unsigned long long)>
c0013ce5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013ce8:	e8 bb ff ff ff       	call   c0013ca8 <Buzzer::stop()>
c0013ced:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c0013cf5:	83 c4 18             	add    esp,0x18
c0013cf8:	5b                   	pop    ebx
c0013cf9:	e9 b3 a9 00 00       	jmp    c001e6b1 <blockTask(TaskState)>

c0013cfe <Buzzer::beep(int, int, bool)>:
c0013cfe:	57                   	push   edi
c0013cff:	56                   	push   esi
c0013d00:	53                   	push   ebx
c0013d01:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013d05:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0013d09:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013d0d:	52                   	push   edx
c0013d0e:	52                   	push   edx
c0013d0f:	8b 06                	mov    eax,DWORD PTR [esi]
c0013d11:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013d15:	56                   	push   esi
c0013d16:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0013d19:	83 c4 10             	add    esp,0x10
c0013d1c:	89 f8                	mov    eax,edi
c0013d1e:	84 c0                	test   al,al
c0013d20:	74 1f                	je     c0013d41 <Buzzer::beep(int, int, bool)+0x43>
c0013d22:	50                   	push   eax
c0013d23:	50                   	push   eax
c0013d24:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c0013d2a:	99                   	cdq    
c0013d2b:	52                   	push   edx
c0013d2c:	50                   	push   eax
c0013d2d:	e8 83 aa 00 00       	call   c001e7b5 <nanoSleep(unsigned long long)>
c0013d32:	83 c4 10             	add    esp,0x10
c0013d35:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0013d39:	5b                   	pop    ebx
c0013d3a:	5e                   	pop    esi
c0013d3b:	5f                   	pop    edi
c0013d3c:	e9 67 ff ff ff       	jmp    c0013ca8 <Buzzer::stop()>
c0013d41:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c0013d47:	a1 d0 23 03 c0       	mov    eax,ds:0xc00323d0
c0013d4c:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c0013d54:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0013d58:	c7 44 24 14 bb 3c 01 c0 	mov    DWORD PTR [esp+0x14],0xc0013cbb
c0013d60:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013d64:	5b                   	pop    ebx
c0013d65:	5e                   	pop    esi
c0013d66:	5f                   	pop    edi
c0013d67:	e9 02 a5 00 00       	jmp    c001e26e <Process::createThread(void (*)(void*), void*, int)>

c0013d6c <User::loadClockSettings(int)>:
c0013d6c:	53                   	push   ebx
c0013d6d:	83 ec 14             	sub    esp,0x14
c0013d70:	68 14 01 00 00       	push   0x114
c0013d75:	e8 b8 bb ff ff       	call   c000f932 <malloc>
c0013d7a:	83 c4 0c             	add    esp,0xc
c0013d7d:	89 c3                	mov    ebx,eax
c0013d7f:	ff 35 d0 23 03 c0    	push   DWORD PTR ds:0xc00323d0
c0013d85:	68 b0 b4 02 c0       	push   0xc002b4b0
c0013d8a:	50                   	push   eax
c0013d8b:	e8 c0 f6 ff ff       	call   c0013450 <File::File(char const*, Process*)>
c0013d90:	58                   	pop    eax
c0013d91:	5a                   	pop    edx
c0013d92:	6a 01                	push   0x1
c0013d94:	53                   	push   ebx
c0013d95:	e8 1a f7 ff ff       	call   c00134b4 <File::open(FileOpenMode)>
c0013d9a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013d9d:	e8 70 f7 ff ff       	call   c0013512 <File::close()>
c0013da2:	83 c4 10             	add    esp,0x10
c0013da5:	85 db                	test   ebx,ebx
c0013da7:	74 0f                	je     c0013db8 <User::loadClockSettings(int)+0x4c>
c0013da9:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013dab:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0013daf:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0013db2:	83 c4 08             	add    esp,0x8
c0013db5:	5b                   	pop    ebx
c0013db6:	ff e0                	jmp    eax
c0013db8:	83 c4 08             	add    esp,0x8
c0013dbb:	5b                   	pop    ebx
c0013dbc:	c3                   	ret    
c0013dbd:	90                   	nop

c0013dbe <Clock::Clock(char const*)>:
c0013dbe:	83 ec 0c             	sub    esp,0xc
c0013dc1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013dc5:	83 ec 08             	sub    esp,0x8
c0013dc8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013dcc:	50                   	push   eax
c0013dcd:	e8 44 07 00 00       	call   c0014516 <Device::Device(char const*)>
c0013dd2:	83 c4 10             	add    esp,0x10
c0013dd5:	ba d8 b4 02 c0       	mov    edx,0xc002b4d8
c0013dda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013dde:	89 10                	mov    DWORD PTR [eax],edx
c0013de0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013de4:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c0013dee:	90                   	nop
c0013def:	83 c4 0c             	add    esp,0xc
c0013df2:	c3                   	ret    
c0013df3:	90                   	nop

c0013df4 <Clock::~Clock()>:
c0013df4:	83 ec 0c             	sub    esp,0xc
c0013df7:	ba d8 b4 02 c0       	mov    edx,0xc002b4d8
c0013dfc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e00:	89 10                	mov    DWORD PTR [eax],edx
c0013e02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e06:	83 ec 0c             	sub    esp,0xc
c0013e09:	50                   	push   eax
c0013e0a:	e8 e9 03 00 00       	call   c00141f8 <Device::~Device()>
c0013e0f:	83 c4 10             	add    esp,0x10
c0013e12:	90                   	nop
c0013e13:	83 c4 0c             	add    esp,0xc
c0013e16:	c3                   	ret    
c0013e17:	90                   	nop

c0013e18 <Clock::~Clock()>:
c0013e18:	83 ec 0c             	sub    esp,0xc
c0013e1b:	83 ec 0c             	sub    esp,0xc
c0013e1e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013e22:	e8 cd ff ff ff       	call   c0013df4 <Clock::~Clock()>
c0013e27:	83 c4 10             	add    esp,0x10
c0013e2a:	83 ec 08             	sub    esp,0x8
c0013e2d:	68 58 01 00 00       	push   0x158
c0013e32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013e36:	e8 d6 ef ff ff       	call   c0012e11 <operator delete(void*, unsigned long)>
c0013e3b:	83 c4 10             	add    esp,0x10
c0013e3e:	83 c4 0c             	add    esp,0xc
c0013e41:	c3                   	ret    

c0013e42 <Clock::timeInSecondsLocal()>:
c0013e42:	53                   	push   ebx
c0013e43:	83 ec 14             	sub    esp,0x14
c0013e46:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013e4a:	8b 10                	mov    edx,DWORD PTR [eax]
c0013e4c:	50                   	push   eax
c0013e4d:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013e50:	0f b6 0d fc ef 02 c0 	movzx  ecx,BYTE PTR ds:0xc002effc
c0013e57:	03 0d 00 f0 02 c0    	add    ecx,DWORD PTR ds:0xc002f000
c0013e5d:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013e63:	89 cb                	mov    ebx,ecx
c0013e65:	c1 fb 1f             	sar    ebx,0x1f
c0013e68:	01 c8                	add    eax,ecx
c0013e6a:	11 da                	adc    edx,ebx
c0013e6c:	83 c4 10             	add    esp,0x10
c0013e6f:	31 c9                	xor    ecx,ecx
c0013e71:	80 3d fd ef 02 c0 00 	cmp    BYTE PTR ds:0xc002effd,0x0
c0013e78:	74 05                	je     c0013e7f <Clock::timeInSecondsLocal()+0x3d>
c0013e7a:	b9 08 07 00 00       	mov    ecx,0x708
c0013e7f:	31 db                	xor    ebx,ebx
c0013e81:	01 c8                	add    eax,ecx
c0013e83:	11 da                	adc    edx,ebx
c0013e85:	83 c4 08             	add    esp,0x8
c0013e88:	5b                   	pop    ebx
c0013e89:	c3                   	ret    

c0013e8a <Clock::setTimeInSecondsLocal(unsigned long long)>:
c0013e8a:	57                   	push   edi
c0013e8b:	56                   	push   esi
c0013e8c:	53                   	push   ebx
c0013e8d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013e91:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013e95:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013e97:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013e9b:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c0013e9e:	0f b6 05 fc ef 02 c0 	movzx  eax,BYTE PTR ds:0xc002effc
c0013ea5:	03 05 00 f0 02 c0    	add    eax,DWORD PTR ds:0xc002f000
c0013eab:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c0013eb1:	99                   	cdq    
c0013eb2:	29 c6                	sub    esi,eax
c0013eb4:	19 d7                	sbb    edi,edx
c0013eb6:	89 f0                	mov    eax,esi
c0013eb8:	89 fa                	mov    edx,edi
c0013eba:	31 f6                	xor    esi,esi
c0013ebc:	80 3d fd ef 02 c0 00 	cmp    BYTE PTR ds:0xc002effd,0x0
c0013ec3:	74 05                	je     c0013eca <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c0013ec5:	be 08 07 00 00       	mov    esi,0x708
c0013eca:	31 ff                	xor    edi,edi
c0013ecc:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0013ed0:	29 f0                	sub    eax,esi
c0013ed2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013ed6:	19 fa                	sbb    edx,edi
c0013ed8:	89 d8                	mov    eax,ebx
c0013eda:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0013ede:	5b                   	pop    ebx
c0013edf:	5e                   	pop    esi
c0013ee0:	5f                   	pop    edi
c0013ee1:	ff e0                	jmp    eax

c0013ee3 <datetimeToSeconds(datetime_t)>:
c0013ee3:	55                   	push   ebp
c0013ee4:	57                   	push   edi
c0013ee5:	56                   	push   esi
c0013ee6:	53                   	push   ebx
c0013ee7:	83 ec 14             	sub    esp,0x14
c0013eea:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0013eee:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0013ef2:	89 d3                	mov    ebx,edx
c0013ef4:	0f b6 c6             	movzx  eax,dh
c0013ef7:	c1 eb 10             	shr    ebx,0x10
c0013efa:	48                   	dec    eax
c0013efb:	66 81 eb 6c 07       	sub    bx,0x76c
c0013f00:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0013f04:	0f b6 f5             	movzx  esi,ch
c0013f07:	89 cf                	mov    edi,ecx
c0013f09:	6b f6 3c             	imul   esi,esi,0x3c
c0013f0c:	c1 ef 10             	shr    edi,0x10
c0013f0f:	0f b6 c9             	movzx  ecx,cl
c0013f12:	89 f8                	mov    eax,edi
c0013f14:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013f1a:	0f b6 f8             	movzx  edi,al
c0013f1d:	0f b6 d2             	movzx  edx,dl
c0013f20:	01 fe                	add    esi,edi
c0013f22:	01 f1                	add    ecx,esi
c0013f24:	0f b7 f3             	movzx  esi,bx
c0013f27:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0013f2b:	c1 f9 1f             	sar    ecx,0x1f
c0013f2e:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c0013f33:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013f37:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c0013f3c:	8b 0c 8d 20 b5 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4ae0]
c0013f43:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c0013f47:	76 29                	jbe    c0013f72 <datetimeToSeconds(datetime_t)+0x8f>
c0013f49:	f6 c3 03             	test   bl,0x3
c0013f4c:	75 24                	jne    c0013f72 <datetimeToSeconds(datetime_t)+0x8f>
c0013f4e:	31 d2                	xor    edx,edx
c0013f50:	bf 64 00 00 00       	mov    edi,0x64
c0013f55:	89 d8                	mov    eax,ebx
c0013f57:	66 f7 f7             	div    di
c0013f5a:	66 85 d2             	test   dx,dx
c0013f5d:	75 12                	jne    c0013f71 <datetimeToSeconds(datetime_t)+0x8e>
c0013f5f:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c0013f65:	bf 90 01 00 00       	mov    edi,0x190
c0013f6a:	99                   	cdq    
c0013f6b:	f7 ff                	idiv   edi
c0013f6d:	85 d2                	test   edx,edx
c0013f6f:	75 01                	jne    c0013f72 <datetimeToSeconds(datetime_t)+0x8f>
c0013f71:	41                   	inc    ecx
c0013f72:	66 83 fb 46          	cmp    bx,0x46
c0013f76:	76 45                	jbe    c0013fbd <datetimeToSeconds(datetime_t)+0xda>
c0013f78:	bb 46 00 00 00       	mov    ebx,0x46
c0013f7d:	bf 64 00 00 00       	mov    edi,0x64
c0013f82:	bd 90 01 00 00       	mov    ebp,0x190
c0013f87:	b8 6d 01 00 00       	mov    eax,0x16d
c0013f8c:	f6 c3 03             	test   bl,0x3
c0013f8f:	75 23                	jne    c0013fb4 <datetimeToSeconds(datetime_t)+0xd1>
c0013f91:	89 d8                	mov    eax,ebx
c0013f93:	99                   	cdq    
c0013f94:	f7 ff                	idiv   edi
c0013f96:	b8 6e 01 00 00       	mov    eax,0x16e
c0013f9b:	85 d2                	test   edx,edx
c0013f9d:	75 15                	jne    c0013fb4 <datetimeToSeconds(datetime_t)+0xd1>
c0013f9f:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c0013fa5:	99                   	cdq    
c0013fa6:	f7 fd                	idiv   ebp
c0013fa8:	83 fa 01             	cmp    edx,0x1
c0013fab:	19 c0                	sbb    eax,eax
c0013fad:	f7 d0                	not    eax
c0013faf:	05 6e 01 00 00       	add    eax,0x16e
c0013fb4:	01 c1                	add    ecx,eax
c0013fb6:	43                   	inc    ebx
c0013fb7:	39 f3                	cmp    ebx,esi
c0013fb9:	7c cc                	jl     c0013f87 <datetimeToSeconds(datetime_t)+0xa4>
c0013fbb:	eb 35                	jmp    c0013ff2 <datetimeToSeconds(datetime_t)+0x10f>
c0013fbd:	74 33                	je     c0013ff2 <datetimeToSeconds(datetime_t)+0x10f>
c0013fbf:	b8 45 00 00 00       	mov    eax,0x45
c0013fc4:	89 c2                	mov    edx,eax
c0013fc6:	83 e2 03             	and    edx,0x3
c0013fc9:	39 f0                	cmp    eax,esi
c0013fcb:	7e 0f                	jle    c0013fdc <datetimeToSeconds(datetime_t)+0xf9>
c0013fcd:	83 fa 01             	cmp    edx,0x1
c0013fd0:	19 d2                	sbb    edx,edx
c0013fd2:	48                   	dec    eax
c0013fd3:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c0013fda:	eb e8                	jmp    c0013fc4 <datetimeToSeconds(datetime_t)+0xe1>
c0013fdc:	b8 6d 01 00 00       	mov    eax,0x16d
c0013fe1:	85 d2                	test   edx,edx
c0013fe3:	75 0b                	jne    c0013ff0 <datetimeToSeconds(datetime_t)+0x10d>
c0013fe5:	66 83 fb 01          	cmp    bx,0x1
c0013fe9:	19 c0                	sbb    eax,eax
c0013feb:	05 6e 01 00 00       	add    eax,0x16e
c0013ff0:	29 c1                	sub    ecx,eax
c0013ff2:	b8 80 51 01 00       	mov    eax,0x15180
c0013ff7:	f7 e9                	imul   ecx
c0013ff9:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0013ffd:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0014001:	83 c4 14             	add    esp,0x14
c0014004:	5b                   	pop    ebx
c0014005:	5e                   	pop    esi
c0014006:	5f                   	pop    edi
c0014007:	5d                   	pop    ebp
c0014008:	c3                   	ret    
c0014009:	90                   	nop

c001400a <Clock::setTimeInDatetimeLocal(datetime_t)>:
c001400a:	57                   	push   edi
c001400b:	56                   	push   esi
c001400c:	53                   	push   ebx
c001400d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014011:	8b 06                	mov    eax,DWORD PTR [esi]
c0014013:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c0014016:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001401a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001401e:	e8 c0 fe ff ff       	call   c0013ee3 <datetimeToSeconds(datetime_t)>
c0014023:	59                   	pop    ecx
c0014024:	0f b6 0d fc ef 02 c0 	movzx  ecx,BYTE PTR ds:0xc002effc
c001402b:	5b                   	pop    ebx
c001402c:	03 0d 00 f0 02 c0    	add    ecx,DWORD PTR ds:0xc002f000
c0014032:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0014038:	89 cb                	mov    ebx,ecx
c001403a:	c1 fb 1f             	sar    ebx,0x1f
c001403d:	29 c8                	sub    eax,ecx
c001403f:	19 da                	sbb    edx,ebx
c0014041:	31 c9                	xor    ecx,ecx
c0014043:	80 3d fd ef 02 c0 00 	cmp    BYTE PTR ds:0xc002effd,0x0
c001404a:	74 05                	je     c0014051 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c001404c:	b9 08 07 00 00       	mov    ecx,0x708
c0014051:	31 db                	xor    ebx,ebx
c0014053:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0014057:	29 c8                	sub    eax,ecx
c0014059:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001405d:	19 da                	sbb    edx,ebx
c001405f:	89 f8                	mov    eax,edi
c0014061:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0014065:	5b                   	pop    ebx
c0014066:	5e                   	pop    esi
c0014067:	5f                   	pop    edi
c0014068:	ff e0                	jmp    eax

c001406a <secondsToDatetime(unsigned long long)>:
c001406a:	55                   	push   ebp
c001406b:	57                   	push   edi
c001406c:	56                   	push   esi
c001406d:	53                   	push   ebx
c001406e:	83 ec 1c             	sub    esp,0x1c
c0014071:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0014075:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0014079:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001407d:	6a 00                	push   0x0
c001407f:	68 80 51 01 00       	push   0x15180
c0014084:	55                   	push   ebp
c0014085:	57                   	push   edi
c0014086:	e8 49 31 01 00       	call   c00271d4 <__udivdi3>
c001408b:	83 c4 10             	add    esp,0x10
c001408e:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c0014094:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014098:	6a 00                	push   0x0
c001409a:	68 80 51 01 00       	push   0x15180
c001409f:	55                   	push   ebp
c00140a0:	57                   	push   edi
c00140a1:	bf 10 0e 00 00       	mov    edi,0xe10
c00140a6:	e8 29 32 01 00       	call   c00272d4 <__umoddi3>
c00140ab:	83 c4 10             	add    esp,0x10
c00140ae:	99                   	cdq    
c00140af:	f7 ff                	idiv   edi
c00140b1:	bf 3c 00 00 00       	mov    edi,0x3c
c00140b6:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c00140b9:	89 d0                	mov    eax,edx
c00140bb:	99                   	cdq    
c00140bc:	f7 ff                	idiv   edi
c00140be:	85 db                	test   ebx,ebx
c00140c0:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c00140c3:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c00140c6:	79 11                	jns    c00140d9 <secondsToDatetime(unsigned long long)+0x6f>
c00140c8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00140cc:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c00140d2:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c00140d7:	eb 07                	jmp    c00140e0 <secondsToDatetime(unsigned long long)+0x76>
c00140d9:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c00140de:	89 d8                	mov    eax,ebx
c00140e0:	bf b4 05 00 00       	mov    edi,0x5b4
c00140e5:	99                   	cdq    
c00140e6:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c00140eb:	f7 f9                	idiv   ecx
c00140ed:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c00140f2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00140f6:	31 d2                	xor    edx,edx
c00140f8:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c0014100:	01 c3                	add    ebx,eax
c0014102:	89 d8                	mov    eax,ebx
c0014104:	f7 f1                	div    ecx
c0014106:	31 d2                	xor    edx,edx
c0014108:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c001410b:	89 d8                	mov    eax,ebx
c001410d:	f7 f7                	div    edi
c001410f:	31 d2                	xor    edx,edx
c0014111:	29 c1                	sub    ecx,eax
c0014113:	89 d8                	mov    eax,ebx
c0014115:	f7 f5                	div    ebp
c0014117:	bd 6d 01 00 00       	mov    ebp,0x16d
c001411c:	29 c1                	sub    ecx,eax
c001411e:	31 d2                	xor    edx,edx
c0014120:	89 c8                	mov    eax,ecx
c0014122:	f7 f5                	div    ebp
c0014124:	bd 94 8e 00 00       	mov    ebp,0x8e94
c0014129:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001412d:	31 d2                	xor    edx,edx
c001412f:	89 c8                	mov    eax,ecx
c0014131:	f7 f5                	div    ebp
c0014133:	31 d2                	xor    edx,edx
c0014135:	01 c3                	add    ebx,eax
c0014137:	89 c8                	mov    eax,ecx
c0014139:	f7 f7                	div    edi
c001413b:	bf 99 00 00 00       	mov    edi,0x99
c0014140:	29 c3                	sub    ebx,eax
c0014142:	31 d2                	xor    edx,edx
c0014144:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c001414c:	29 c3                	sub    ebx,eax
c001414e:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0014151:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c0014154:	bb 05 00 00 00       	mov    ebx,0x5
c0014159:	83 c1 02             	add    ecx,0x2
c001415c:	89 c8                	mov    eax,ecx
c001415e:	f7 f7                	div    edi
c0014160:	31 d2                	xor    edx,edx
c0014162:	89 c7                	mov    edi,eax
c0014164:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c001416a:	83 c0 02             	add    eax,0x2
c001416d:	f7 f3                	div    ebx
c001416f:	89 eb                	mov    ebx,ebp
c0014171:	29 c3                	sub    ebx,eax
c0014173:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c0014179:	88 1e                	mov    BYTE PTR [esi],bl
c001417b:	19 c0                	sbb    eax,eax
c001417d:	31 d2                	xor    edx,edx
c001417f:	83 e0 0c             	and    eax,0xc
c0014182:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c0014186:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c001418e:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0014192:	83 f9 01             	cmp    ecx,0x1
c0014195:	0f 96 c2             	setbe  dl
c0014198:	41                   	inc    ecx
c0014199:	01 d0                	add    eax,edx
c001419b:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c001419e:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c00141a2:	83 c4 1c             	add    esp,0x1c
c00141a5:	89 f0                	mov    eax,esi
c00141a7:	5b                   	pop    ebx
c00141a8:	5e                   	pop    esi
c00141a9:	5f                   	pop    edi
c00141aa:	5d                   	pop    ebp
c00141ab:	c2 04 00             	ret    0x4

c00141ae <Clock::timeInDatetimeLocal()>:
c00141ae:	53                   	push   ebx
c00141af:	83 ec 14             	sub    esp,0x14
c00141b2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00141b6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00141ba:	e8 83 fc ff ff       	call   c0013e42 <Clock::timeInSecondsLocal()>
c00141bf:	83 c4 0c             	add    esp,0xc
c00141c2:	52                   	push   edx
c00141c3:	50                   	push   eax
c00141c4:	53                   	push   ebx
c00141c5:	e8 a0 fe ff ff       	call   c001406a <secondsToDatetime(unsigned long long)>
c00141ca:	89 d8                	mov    eax,ebx
c00141cc:	83 c4 14             	add    esp,0x14
c00141cf:	5b                   	pop    ebx
c00141d0:	c2 04 00             	ret    0x4
c00141d3:	90                   	nop

c00141d4 <Device::hibernate()>:
c00141d4:	c3                   	ret    
c00141d5:	90                   	nop

c00141d6 <Device::wake()>:
c00141d6:	c3                   	ret    
c00141d7:	90                   	nop

c00141d8 <Device::detect()>:
c00141d8:	c3                   	ret    
c00141d9:	90                   	nop

c00141da <Device::disableLegacy()>:
c00141da:	c3                   	ret    
c00141db:	90                   	nop

c00141dc <Device::powerSaving(PowerSavingLevel)>:
c00141dc:	c3                   	ret    
c00141dd:	90                   	nop

c00141de <DriverlessDevice::close(int, int, void*)>:
c00141de:	31 c0                	xor    eax,eax
c00141e0:	c3                   	ret    
c00141e1:	90                   	nop

c00141e2 <DriverlessDevice::detect()>:
c00141e2:	c3                   	ret    
c00141e3:	90                   	nop

c00141e4 <DriverlessDevice::open(int, int, void*)>:
c00141e4:	83 ec 18             	sub    esp,0x18
c00141e7:	68 50 b5 02 c0       	push   0xc002b550
c00141ec:	e8 c0 66 00 00       	call   c001a8b1 <Krnl::panic(char const*)>
c00141f1:	83 c8 ff             	or     eax,0xffffffff
c00141f4:	83 c4 1c             	add    esp,0x1c
c00141f7:	c3                   	ret    

c00141f8 <Device::~Device()>:
c00141f8:	ba 78 b5 02 c0       	mov    edx,0xc002b578
c00141fd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014201:	89 10                	mov    DWORD PTR [eax],edx
c0014203:	90                   	nop
c0014204:	c3                   	ret    
c0014205:	90                   	nop

c0014206 <Device::~Device()>:
c0014206:	83 ec 0c             	sub    esp,0xc
c0014209:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001420d:	e8 e6 ff ff ff       	call   c00141f8 <Device::~Device()>
c0014212:	83 c4 04             	add    esp,0x4
c0014215:	83 ec 08             	sub    esp,0x8
c0014218:	68 58 01 00 00       	push   0x158
c001421d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014221:	e8 eb eb ff ff       	call   c0012e11 <operator delete(void*, unsigned long)>
c0014226:	83 c4 10             	add    esp,0x10
c0014229:	83 c4 0c             	add    esp,0xc
c001422c:	c3                   	ret    
c001422d:	90                   	nop

c001422e <Device::findAndLoadDriver()>:
c001422e:	c3                   	ret    
c001422f:	90                   	nop

c0014230 <Device::preOpenPCI(PCIDeviceInfo)>:
c0014230:	57                   	push   edi
c0014231:	b9 09 00 00 00       	mov    ecx,0x9
c0014236:	56                   	push   esi
c0014237:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001423b:	8d 74 24 10          	lea    esi,[esp+0x10]
c001423f:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c0014249:	81 c7 18 01 00 00    	add    edi,0x118
c001424f:	fc                   	cld    
c0014250:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0014252:	5e                   	pop    esi
c0014253:	5f                   	pop    edi
c0014254:	c3                   	ret    
c0014255:	90                   	nop

c0014256 <Device::preOpenACPI(void*, char*, char*)>:
c0014256:	56                   	push   esi
c0014257:	53                   	push   ebx
c0014258:	83 ec 08             	sub    esp,0x8
c001425b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001425f:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0014263:	c7 83 14 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x114],0x3
c001426d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014271:	89 83 18 01 00 00    	mov    DWORD PTR [ebx+0x118],eax
c0014277:	6a 1e                	push   0x1e
c0014279:	8d 83 1c 01 00 00    	lea    eax,[ebx+0x11c]
c001427f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014283:	81 c3 3a 01 00 00    	add    ebx,0x13a
c0014289:	50                   	push   eax
c001428a:	e8 d9 c4 fe ff       	call   c0000768 <memcpy>
c001428f:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c0014293:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0014297:	c7 44 24 28 0e 00 00 00 	mov    DWORD PTR [esp+0x28],0xe
c001429f:	83 c4 14             	add    esp,0x14
c00142a2:	5b                   	pop    ebx
c00142a3:	5e                   	pop    esi
c00142a4:	e9 bf c4 fe ff       	jmp    c0000768 <memcpy>
c00142a9:	90                   	nop

c00142aa <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c00142aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00142ae:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c00142b3:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c00142ba:	75 0b                	jne    c00142c7 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1d>
c00142bc:	8b 00                	mov    eax,DWORD PTR [eax]
c00142be:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00142c2:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00142c5:	eb 1e                	jmp    c00142e5 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3b>
c00142c7:	a1 68 ee 02 c0       	mov    eax,ds:0xc002ee68
c00142cc:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00142d2:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00142d8:	8b 08                	mov    ecx,DWORD PTR [eax]
c00142da:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00142de:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00142e2:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c00142e5:	ff e0                	jmp    eax
c00142e7:	90                   	nop

c00142e8 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c00142e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00142ec:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c00142f1:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c00142f8:	75 0b                	jne    c0014305 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c00142fa:	8b 00                	mov    eax,DWORD PTR [eax]
c00142fc:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0014300:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0014303:	eb 1e                	jmp    c0014323 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c0014305:	a1 68 ee 02 c0       	mov    eax,ds:0xc002ee68
c001430a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014310:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0014316:	8b 08                	mov    ecx,DWORD PTR [eax]
c0014318:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001431c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014320:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c0014323:	ff e0                	jmp    eax
c0014325:	90                   	nop

c0014326 <Device::addChild(Device*)>:
c0014326:	53                   	push   ebx
c0014327:	83 ec 08             	sub    esp,0x8
c001432a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001432e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014332:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c0014338:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c001433e:	8b 13                	mov    edx,DWORD PTR [ebx]
c0014340:	85 d2                	test   edx,edx
c0014342:	74 04                	je     c0014348 <Device::addChild(Device*)+0x22>
c0014344:	89 d3                	mov    ebx,edx
c0014346:	eb f6                	jmp    c001433e <Device::addChild(Device*)+0x18>
c0014348:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001434b:	83 ec 0c             	sub    esp,0xc
c001434e:	6a 08                	push   0x8
c0014350:	e8 dd b5 ff ff       	call   c000f932 <malloc>
c0014355:	89 03                	mov    DWORD PTR [ebx],eax
c0014357:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001435d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0014364:	83 c4 18             	add    esp,0x18
c0014367:	5b                   	pop    ebx
c0014368:	c3                   	ret    
c0014369:	90                   	nop

c001436a <Device::removeAllChildren()>:
c001436a:	56                   	push   esi
c001436b:	53                   	push   ebx
c001436c:	52                   	push   edx
c001436d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014371:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c0014377:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001437a:	74 17                	je     c0014393 <Device::removeAllChildren()+0x29>
c001437c:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001437f:	85 c0                	test   eax,eax
c0014381:	74 0c                	je     c001438f <Device::removeAllChildren()+0x25>
c0014383:	83 ec 0c             	sub    esp,0xc
c0014386:	8b 10                	mov    edx,DWORD PTR [eax]
c0014388:	50                   	push   eax
c0014389:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001438c:	83 c4 10             	add    esp,0x10
c001438f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014391:	eb e4                	jmp    c0014377 <Device::removeAllChildren()+0xd>
c0014393:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0014399:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001439f:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c00143a5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00143ac:	58                   	pop    eax
c00143ad:	5b                   	pop    ebx
c00143ae:	5e                   	pop    esi
c00143af:	c3                   	ret    

c00143b0 <Device::hibernateAll()>:
c00143b0:	53                   	push   ebx
c00143b1:	83 ec 14             	sub    esp,0x14
c00143b4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00143b8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00143ba:	53                   	push   ebx
c00143bb:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00143be:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00143c4:	83 c4 10             	add    esp,0x10
c00143c7:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00143ca:	74 0f                	je     c00143db <Device::hibernateAll()+0x2b>
c00143cc:	83 ec 0c             	sub    esp,0xc
c00143cf:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00143d2:	e8 d9 ff ff ff       	call   c00143b0 <Device::hibernateAll()>
c00143d7:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00143d9:	eb e9                	jmp    c00143c4 <Device::hibernateAll()+0x14>
c00143db:	83 c4 08             	add    esp,0x8
c00143de:	5b                   	pop    ebx
c00143df:	c3                   	ret    

c00143e0 <Device::wakeAll()>:
c00143e0:	53                   	push   ebx
c00143e1:	83 ec 14             	sub    esp,0x14
c00143e4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00143e8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00143ea:	53                   	push   ebx
c00143eb:	ff 50 14             	call   DWORD PTR [eax+0x14]
c00143ee:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00143f4:	83 c4 10             	add    esp,0x10
c00143f7:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00143fa:	74 0f                	je     c001440b <Device::wakeAll()+0x2b>
c00143fc:	83 ec 0c             	sub    esp,0xc
c00143ff:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014402:	e8 d9 ff ff ff       	call   c00143e0 <Device::wakeAll()>
c0014407:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014409:	eb e9                	jmp    c00143f4 <Device::wakeAll()+0x14>
c001440b:	83 c4 08             	add    esp,0x8
c001440e:	5b                   	pop    ebx
c001440f:	c3                   	ret    

c0014410 <Device::detectAll()>:
c0014410:	53                   	push   ebx
c0014411:	83 ec 14             	sub    esp,0x14
c0014414:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014418:	8b 03                	mov    eax,DWORD PTR [ebx]
c001441a:	53                   	push   ebx
c001441b:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001441e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014424:	83 c4 10             	add    esp,0x10
c0014427:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001442a:	74 0f                	je     c001443b <Device::detectAll()+0x2b>
c001442c:	83 ec 0c             	sub    esp,0xc
c001442f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014432:	e8 d9 ff ff ff       	call   c0014410 <Device::detectAll()>
c0014437:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014439:	eb e9                	jmp    c0014424 <Device::detectAll()+0x14>
c001443b:	83 c4 08             	add    esp,0x8
c001443e:	5b                   	pop    ebx
c001443f:	c3                   	ret    

c0014440 <Device::disableLegacyAll()>:
c0014440:	53                   	push   ebx
c0014441:	83 ec 14             	sub    esp,0x14
c0014444:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014448:	8b 03                	mov    eax,DWORD PTR [ebx]
c001444a:	53                   	push   ebx
c001444b:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c001444e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014454:	83 c4 10             	add    esp,0x10
c0014457:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001445a:	74 0f                	je     c001446b <Device::disableLegacyAll()+0x2b>
c001445c:	83 ec 0c             	sub    esp,0xc
c001445f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014462:	e8 d9 ff ff ff       	call   c0014440 <Device::disableLegacyAll()>
c0014467:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014469:	eb e9                	jmp    c0014454 <Device::disableLegacyAll()+0x14>
c001446b:	83 c4 08             	add    esp,0x8
c001446e:	5b                   	pop    ebx
c001446f:	c3                   	ret    

c0014470 <Device::loadDriversForAll()>:
c0014470:	53                   	push   ebx
c0014471:	83 ec 08             	sub    esp,0x8
c0014474:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014478:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c001447e:	8b 18                	mov    ebx,DWORD PTR [eax]
c0014480:	85 db                	test   ebx,ebx
c0014482:	74 12                	je     c0014496 <Device::loadDriversForAll()+0x26>
c0014484:	83 ec 0c             	sub    esp,0xc
c0014487:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001448a:	e8 e1 ff ff ff       	call   c0014470 <Device::loadDriversForAll()>
c001448f:	83 c4 10             	add    esp,0x10
c0014492:	89 d8                	mov    eax,ebx
c0014494:	eb e8                	jmp    c001447e <Device::loadDriversForAll()+0xe>
c0014496:	83 c4 08             	add    esp,0x8
c0014499:	5b                   	pop    ebx
c001449a:	c3                   	ret    
c001449b:	90                   	nop

c001449c <Device::closeAll()>:
c001449c:	53                   	push   ebx
c001449d:	83 ec 08             	sub    esp,0x8
c00144a0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00144a4:	8b 03                	mov    eax,DWORD PTR [ebx]
c00144a6:	6a 00                	push   0x0
c00144a8:	6a 00                	push   0x0
c00144aa:	6a 00                	push   0x0
c00144ac:	53                   	push   ebx
c00144ad:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00144b0:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00144b6:	83 c4 10             	add    esp,0x10
c00144b9:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00144bc:	74 0f                	je     c00144cd <Device::closeAll()+0x31>
c00144be:	83 ec 0c             	sub    esp,0xc
c00144c1:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00144c4:	e8 d3 ff ff ff       	call   c001449c <Device::closeAll()>
c00144c9:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00144cb:	eb e9                	jmp    c00144b6 <Device::closeAll()+0x1a>
c00144cd:	83 c4 08             	add    esp,0x8
c00144d0:	5b                   	pop    ebx
c00144d1:	c3                   	ret    

c00144d2 <Device::powerSavingAll(PowerSavingLevel)>:
c00144d2:	56                   	push   esi
c00144d3:	53                   	push   ebx
c00144d4:	83 ec 0c             	sub    esp,0xc
c00144d7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00144db:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00144df:	8b 03                	mov    eax,DWORD PTR [ebx]
c00144e1:	56                   	push   esi
c00144e2:	53                   	push   ebx
c00144e3:	ff 50 20             	call   DWORD PTR [eax+0x20]
c00144e6:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00144ec:	83 c4 10             	add    esp,0x10
c00144ef:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00144f2:	74 0f                	je     c0014503 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c00144f4:	52                   	push   edx
c00144f5:	52                   	push   edx
c00144f6:	56                   	push   esi
c00144f7:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00144fa:	e8 d3 ff ff ff       	call   c00144d2 <Device::powerSavingAll(PowerSavingLevel)>
c00144ff:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014501:	eb e9                	jmp    c00144ec <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c0014503:	58                   	pop    eax
c0014504:	5b                   	pop    ebx
c0014505:	5e                   	pop    esi
c0014506:	c3                   	ret    
c0014507:	90                   	nop

c0014508 <Device::setName(char const*)>:
c0014508:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c0014510:	e9 43 c3 fe ff       	jmp    c0000858 <strcpy>
c0014515:	90                   	nop

c0014516 <Device::Device(char const*)>:
c0014516:	83 ec 1c             	sub    esp,0x1c
c0014519:	ba 78 b5 02 c0       	mov    edx,0xc002b578
c001451e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014522:	89 10                	mov    DWORD PTR [eax],edx
c0014524:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014528:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c0014532:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014536:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0014540:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014544:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001454e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014552:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c001455c:	83 ec 08             	sub    esp,0x8
c001455f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014563:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014567:	e8 9c ff ff ff       	call   c0014508 <Device::setName(char const*)>
c001456c:	83 c4 10             	add    esp,0x10
c001456f:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c0014577:	83 ec 0c             	sub    esp,0xc
c001457a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001457e:	e8 af b3 ff ff       	call   c000f932 <malloc>
c0014583:	83 c4 10             	add    esp,0x10
c0014586:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001458c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0014593:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014597:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c001459d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00145a1:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c00145a7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00145ad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00145b1:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c00145b7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00145be:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00145c2:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c00145c9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00145cd:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c00145d4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00145d8:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c00145e2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00145e6:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c00145f0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00145f4:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c00145fe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014602:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c001460c:	90                   	nop
c001460d:	83 c4 1c             	add    esp,0x1c
c0014610:	c3                   	ret    
c0014611:	90                   	nop

c0014612 <Device::getName()>:
c0014612:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014616:	05 d0 00 00 00       	add    eax,0xd0
c001461b:	c3                   	ret    

c001461c <DriverlessDevice::DriverlessDevice(char const*)>:
c001461c:	83 ec 0c             	sub    esp,0xc
c001461f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014623:	83 ec 08             	sub    esp,0x8
c0014626:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001462a:	50                   	push   eax
c001462b:	e8 e6 fe ff ff       	call   c0014516 <Device::Device(char const*)>
c0014630:	83 c4 10             	add    esp,0x10
c0014633:	ba a4 b5 02 c0       	mov    edx,0xc002b5a4
c0014638:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001463c:	89 10                	mov    DWORD PTR [eax],edx
c001463e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014642:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c001464c:	90                   	nop
c001464d:	83 c4 0c             	add    esp,0xc
c0014650:	c3                   	ret    
c0014651:	90                   	nop

c0014652 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c0014652:	57                   	push   edi
c0014653:	56                   	push   esi
c0014654:	53                   	push   ebx
c0014655:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014659:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001465d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014661:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c0014667:	75 0c                	jne    c0014675 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c0014669:	52                   	push   edx
c001466a:	52                   	push   edx
c001466b:	53                   	push   ebx
c001466c:	56                   	push   esi
c001466d:	e8 b4 4a 01 00       	call   c0029126 <LinkedList<Device>::addElement(Device*)>
c0014672:	83 c4 10             	add    esp,0x10
c0014675:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001467b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001467e:	74 12                	je     c0014692 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c0014680:	50                   	push   eax
c0014681:	57                   	push   edi
c0014682:	56                   	push   esi
c0014683:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014686:	e8 c7 ff ff ff       	call   c0014652 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c001468b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001468d:	83 c4 10             	add    esp,0x10
c0014690:	eb e9                	jmp    c001467b <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c0014692:	5b                   	pop    ebx
c0014693:	5e                   	pop    esi
c0014694:	5f                   	pop    edi
c0014695:	c3                   	ret    

c0014696 <getDevicesOfType(DeviceType)>:
c0014696:	53                   	push   ebx
c0014697:	83 ec 14             	sub    esp,0x14
c001469a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001469e:	53                   	push   ebx
c001469f:	e8 5e 4b 01 00       	call   c0029202 <LinkedList<Device>::LinkedList()>
c00146a4:	83 c4 0c             	add    esp,0xc
c00146a7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00146ab:	53                   	push   ebx
c00146ac:	ff 35 68 ee 02 c0    	push   DWORD PTR ds:0xc002ee68
c00146b2:	e8 9b ff ff ff       	call   c0014652 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c00146b7:	89 d8                	mov    eax,ebx
c00146b9:	83 c4 18             	add    esp,0x18
c00146bc:	5b                   	pop    ebx
c00146bd:	c2 04 00             	ret    0x4

c00146c0 <HardDiskController::HardDiskController(char const*)>:
c00146c0:	83 ec 0c             	sub    esp,0xc
c00146c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00146c7:	83 ec 08             	sub    esp,0x8
c00146ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00146ce:	50                   	push   eax
c00146cf:	e8 42 fe ff ff       	call   c0014516 <Device::Device(char const*)>
c00146d4:	83 c4 10             	add    esp,0x10
c00146d7:	ba d0 b5 02 c0       	mov    edx,0xc002b5d0
c00146dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00146e0:	89 10                	mov    DWORD PTR [eax],edx
c00146e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00146e6:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c00146f0:	90                   	nop
c00146f1:	83 c4 0c             	add    esp,0xc
c00146f4:	c3                   	ret    
c00146f5:	90                   	nop

c00146f6 <HardDiskController::~HardDiskController()>:
c00146f6:	83 ec 0c             	sub    esp,0xc
c00146f9:	ba d0 b5 02 c0       	mov    edx,0xc002b5d0
c00146fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014702:	89 10                	mov    DWORD PTR [eax],edx
c0014704:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014708:	83 ec 0c             	sub    esp,0xc
c001470b:	50                   	push   eax
c001470c:	e8 e7 fa ff ff       	call   c00141f8 <Device::~Device()>
c0014711:	83 c4 10             	add    esp,0x10
c0014714:	90                   	nop
c0014715:	83 c4 0c             	add    esp,0xc
c0014718:	c3                   	ret    
c0014719:	90                   	nop

c001471a <HardDiskController::~HardDiskController()>:
c001471a:	83 ec 0c             	sub    esp,0xc
c001471d:	83 ec 0c             	sub    esp,0xc
c0014720:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014724:	e8 cd ff ff ff       	call   c00146f6 <HardDiskController::~HardDiskController()>
c0014729:	83 c4 10             	add    esp,0x10
c001472c:	83 ec 08             	sub    esp,0x8
c001472f:	68 58 01 00 00       	push   0x158
c0014734:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014738:	e8 d4 e6 ff ff       	call   c0012e11 <operator delete(void*, unsigned long)>
c001473d:	83 c4 10             	add    esp,0x10
c0014740:	83 c4 0c             	add    esp,0xc
c0014743:	c3                   	ret    

c0014744 <PhysicalDisk::eject()>:
c0014744:	83 ec 18             	sub    esp,0x18
c0014747:	68 f4 b5 02 c0       	push   0xc002b5f4
c001474c:	e8 a0 e7 ff ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c0014751:	83 c8 ff             	or     eax,0xffffffff
c0014754:	83 c4 1c             	add    esp,0x1c
c0014757:	c3                   	ret    

c0014758 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c0014758:	83 ec 0c             	sub    esp,0xc
c001475b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001475f:	83 ec 08             	sub    esp,0x8
c0014762:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014766:	50                   	push   eax
c0014767:	e8 aa fd ff ff       	call   c0014516 <Device::Device(char const*)>
c001476c:	83 c4 10             	add    esp,0x10
c001476f:	ba 24 b6 02 c0       	mov    edx,0xc002b624
c0014774:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014778:	89 10                	mov    DWORD PTR [eax],edx
c001477a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001477e:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0014785:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014789:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c0014790:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014794:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c001479e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147a2:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00147a6:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00147ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147b0:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00147ba:	90                   	nop
c00147bb:	83 c4 0c             	add    esp,0xc
c00147be:	c3                   	ret    
c00147bf:	90                   	nop

c00147c0 <PhysicalDisk::startCache()>:
c00147c0:	56                   	push   esi
c00147c1:	53                   	push   ebx
c00147c2:	83 ec 10             	sub    esp,0x10
c00147c5:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00147c9:	6a 44                	push   0x44
c00147cb:	e8 62 b1 ff ff       	call   c000f932 <malloc>
c00147d0:	89 c6                	mov    esi,eax
c00147d2:	58                   	pop    eax
c00147d3:	5a                   	pop    edx
c00147d4:	53                   	push   ebx
c00147d5:	56                   	push   esi
c00147d6:	e8 cf 28 00 00       	call   c00170aa <VCache::VCache(PhysicalDisk*)>
c00147db:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c00147e1:	83 c4 14             	add    esp,0x14
c00147e4:	5b                   	pop    ebx
c00147e5:	5e                   	pop    esi
c00147e6:	c3                   	ret    
c00147e7:	90                   	nop

c00147e8 <PhysicalDisk::~PhysicalDisk()>:
c00147e8:	83 ec 0c             	sub    esp,0xc
c00147eb:	ba 24 b6 02 c0       	mov    edx,0xc002b624
c00147f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147f4:	89 10                	mov    DWORD PTR [eax],edx
c00147f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147fa:	83 ec 0c             	sub    esp,0xc
c00147fd:	50                   	push   eax
c00147fe:	e8 f5 f9 ff ff       	call   c00141f8 <Device::~Device()>
c0014803:	83 c4 10             	add    esp,0x10
c0014806:	90                   	nop
c0014807:	83 c4 0c             	add    esp,0xc
c001480a:	c3                   	ret    
c001480b:	90                   	nop

c001480c <PhysicalDisk::~PhysicalDisk()>:
c001480c:	83 ec 0c             	sub    esp,0xc
c001480f:	83 ec 0c             	sub    esp,0xc
c0014812:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014816:	e8 cd ff ff ff       	call   c00147e8 <PhysicalDisk::~PhysicalDisk()>
c001481b:	83 c4 10             	add    esp,0x10
c001481e:	83 ec 08             	sub    esp,0x8
c0014821:	68 6c 01 00 00       	push   0x16c
c0014826:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001482a:	e8 e2 e5 ff ff       	call   c0012e11 <operator delete(void*, unsigned long)>
c001482f:	83 c4 10             	add    esp,0x10
c0014832:	83 c4 0c             	add    esp,0xc
c0014835:	c3                   	ret    

c0014836 <FPU::FPU(char const*)>:
c0014836:	83 ec 0c             	sub    esp,0xc
c0014839:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001483d:	83 ec 08             	sub    esp,0x8
c0014840:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014844:	50                   	push   eax
c0014845:	e8 cc fc ff ff       	call   c0014516 <Device::Device(char const*)>
c001484a:	83 c4 10             	add    esp,0x10
c001484d:	ba 68 b6 02 c0       	mov    edx,0xc002b668
c0014852:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014856:	89 10                	mov    DWORD PTR [eax],edx
c0014858:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001485c:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c0014866:	90                   	nop
c0014867:	83 c4 0c             	add    esp,0xc
c001486a:	c3                   	ret    
c001486b:	90                   	nop

c001486c <FPU::~FPU()>:
c001486c:	83 ec 0c             	sub    esp,0xc
c001486f:	ba 68 b6 02 c0       	mov    edx,0xc002b668
c0014874:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014878:	89 10                	mov    DWORD PTR [eax],edx
c001487a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001487e:	83 ec 0c             	sub    esp,0xc
c0014881:	50                   	push   eax
c0014882:	e8 71 f9 ff ff       	call   c00141f8 <Device::~Device()>
c0014887:	83 c4 10             	add    esp,0x10
c001488a:	90                   	nop
c001488b:	83 c4 0c             	add    esp,0xc
c001488e:	c3                   	ret    
c001488f:	90                   	nop

c0014890 <FPU::~FPU()>:
c0014890:	83 ec 0c             	sub    esp,0xc
c0014893:	83 ec 0c             	sub    esp,0xc
c0014896:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001489a:	e8 cd ff ff ff       	call   c001486c <FPU::~FPU()>
c001489f:	83 c4 10             	add    esp,0x10
c00148a2:	83 ec 08             	sub    esp,0x8
c00148a5:	68 58 01 00 00       	push   0x158
c00148aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00148ae:	e8 5e e5 ff ff       	call   c0012e11 <operator delete(void*, unsigned long)>
c00148b3:	83 c4 10             	add    esp,0x10
c00148b6:	83 c4 0c             	add    esp,0xc
c00148b9:	c3                   	ret    

c00148ba <setupFPU()>:
c00148ba:	53                   	push   ebx
c00148bb:	83 ec 08             	sub    esp,0x8
c00148be:	8b 15 68 ee 02 c0    	mov    edx,DWORD PTR ds:0xc002ee68
c00148c4:	f6 82 e9 01 00 00 20 	test   BYTE PTR [edx+0x1e9],0x20
c00148cb:	74 19                	je     c00148e6 <setupFPU()+0x2c>
c00148cd:	83 ec 0c             	sub    esp,0xc
c00148d0:	68 58 01 00 00       	push   0x158
c00148d5:	e8 58 b0 ff ff       	call   c000f932 <malloc>
c00148da:	89 c3                	mov    ebx,eax
c00148dc:	89 04 24             	mov    DWORD PTR [esp],eax
c00148df:	e8 78 14 01 00       	call   c0025d5c <AVX::AVX()>
c00148e4:	eb 5b                	jmp    c0014941 <setupFPU()+0x87>
c00148e6:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c00148ec:	84 c0                	test   al,al
c00148ee:	79 19                	jns    c0014909 <setupFPU()+0x4f>
c00148f0:	83 ec 0c             	sub    esp,0xc
c00148f3:	68 58 01 00 00       	push   0x158
c00148f8:	e8 35 b0 ff ff       	call   c000f932 <malloc>
c00148fd:	89 c3                	mov    ebx,eax
c00148ff:	89 04 24             	mov    DWORD PTR [esp],eax
c0014902:	e8 7b 15 01 00       	call   c0025e82 <SSE::SSE()>
c0014907:	eb 38                	jmp    c0014941 <setupFPU()+0x87>
c0014909:	a8 20                	test   al,0x20
c001490b:	74 19                	je     c0014926 <setupFPU()+0x6c>
c001490d:	83 ec 0c             	sub    esp,0xc
c0014910:	68 58 01 00 00       	push   0x158
c0014915:	e8 18 b0 ff ff       	call   c000f932 <malloc>
c001491a:	89 c3                	mov    ebx,eax
c001491c:	89 04 24             	mov    DWORD PTR [esp],eax
c001491f:	e8 c8 14 01 00       	call   c0025dec <MMX::MMX()>
c0014924:	eb 1b                	jmp    c0014941 <setupFPU()+0x87>
c0014926:	a8 10                	test   al,0x10
c0014928:	74 1c                	je     c0014946 <setupFPU()+0x8c>
c001492a:	83 ec 0c             	sub    esp,0xc
c001492d:	68 58 01 00 00       	push   0x158
c0014932:	e8 fb af ff ff       	call   c000f932 <malloc>
c0014937:	89 c3                	mov    ebx,eax
c0014939:	89 04 24             	mov    DWORD PTR [esp],eax
c001493c:	e8 cf 15 01 00       	call   c0025f10 <x87::x87()>
c0014941:	83 c4 10             	add    esp,0x10
c0014944:	eb 24                	jmp    c001496a <setupFPU()+0xb0>
c0014946:	83 e0 ef             	and    eax,0xffffffef
c0014949:	83 ec 0c             	sub    esp,0xc
c001494c:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0014952:	68 54 b6 02 c0       	push   0xc002b654
c0014957:	e8 95 e5 ff ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c001495c:	0f 20 c0             	mov    eax,cr0
c001495f:	83 c8 04             	or     eax,0x4
c0014962:	0f 22 c0             	mov    cr0,eax
c0014965:	31 db                	xor    ebx,ebx
c0014967:	83 c4 10             	add    esp,0x10
c001496a:	89 d8                	mov    eax,ebx
c001496c:	83 c4 08             	add    esp,0x8
c001496f:	5b                   	pop    ebx
c0014970:	c3                   	ret    
c0014971:	90                   	nop

c0014972 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c0014972:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014976:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001497a:	c1 e0 04             	shl    eax,0x4
c001497d:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0014981:	8d 50 10             	lea    edx,[eax+0x10]
c0014984:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c001498a:	74 08                	je     c0014994 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c001498c:	83 c0 04             	add    eax,0x4
c001498f:	39 d0                	cmp    eax,edx
c0014991:	75 f1                	jne    c0014984 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c0014993:	c3                   	ret    
c0014994:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001499e:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c00149a8:	eb e2                	jmp    c001498c <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c00149aa <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c00149aa:	57                   	push   edi
c00149ab:	31 c0                	xor    eax,eax
c00149ad:	56                   	push   esi
c00149ae:	53                   	push   ebx
c00149af:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00149b3:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00149b7:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00149bb:	89 da                	mov    edx,ebx
c00149bd:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00149c1:	c1 e2 04             	shl    edx,0x4
c00149c4:	01 ca                	add    edx,ecx
c00149c6:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c00149ce:	74 16                	je     c00149e6 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c00149d0:	40                   	inc    eax
c00149d1:	83 f8 04             	cmp    eax,0x4
c00149d4:	75 f0                	jne    c00149c6 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c00149d6:	c7 44 24 10 98 b6 02 c0 	mov    DWORD PTR [esp+0x10],0xc002b698
c00149de:	5b                   	pop    ebx
c00149df:	5e                   	pop    esi
c00149e0:	5f                   	pop    edi
c00149e1:	e9 cb 5e 00 00       	jmp    c001a8b1 <Krnl::panic(char const*)>
c00149e6:	8d 04 98             	lea    eax,[eax+ebx*4]
c00149e9:	8d 04 81             	lea    eax,[ecx+eax*4]
c00149ec:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c00149f2:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c00149f8:	5b                   	pop    ebx
c00149f9:	5e                   	pop    esi
c00149fa:	5f                   	pop    edi
c00149fb:	c3                   	ret    

c00149fc <doubleFault(regs*, void*)>:
c00149fc:	55                   	push   ebp
c00149fd:	89 e5                	mov    ebp,esp
c00149ff:	83 ec 08             	sub    esp,0x8
c0014a02:	83 ec 0c             	sub    esp,0xc
c0014a05:	68 d3 b6 02 c0       	push   0xc002b6d3
c0014a0a:	e8 a2 5e 00 00       	call   c001a8b1 <Krnl::panic(char const*)>
c0014a0f:	83 c4 10             	add    esp,0x10
c0014a12:	90                   	nop
c0014a13:	c9                   	leave  
c0014a14:	c3                   	ret    
c0014a15:	90                   	nop

c0014a16 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0014a16:	56                   	push   esi
c0014a17:	53                   	push   ebx
c0014a18:	50                   	push   eax
c0014a19:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014a1d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014a21:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014a26:	75 35                	jne    c0014a5d <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c0014a28:	8d 43 20             	lea    eax,[ebx+0x20]
c0014a2b:	31 d2                	xor    edx,edx
c0014a2d:	89 c1                	mov    ecx,eax
c0014a2f:	c1 e1 04             	shl    ecx,0x4
c0014a32:	01 f1                	add    ecx,esi
c0014a34:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c0014a3c:	74 3e                	je     c0014a7c <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c0014a3e:	42                   	inc    edx
c0014a3f:	83 fa 04             	cmp    edx,0x4
c0014a42:	75 f0                	jne    c0014a34 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c0014a44:	83 ec 0c             	sub    esp,0xc
c0014a47:	68 18 b7 02 c0       	push   0xc002b718
c0014a4c:	e8 60 5e 00 00       	call   c001a8b1 <Krnl::panic(char const*)>
c0014a51:	83 c4 10             	add    esp,0x10
c0014a54:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0014a59:	5a                   	pop    edx
c0014a5a:	5b                   	pop    ebx
c0014a5b:	5e                   	pop    esi
c0014a5c:	c3                   	ret    
c0014a5d:	83 ec 0c             	sub    esp,0xc
c0014a60:	56                   	push   esi
c0014a61:	e8 ac fb ff ff       	call   c0014612 <Device::getName()>
c0014a66:	83 c4 10             	add    esp,0x10
c0014a69:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014a6c:	75 ba                	jne    c0014a28 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014a6e:	83 fb 0f             	cmp    ebx,0xf
c0014a71:	7f 29                	jg     c0014a9c <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c0014a73:	0f b6 9b c0 e0 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffd1f40]
c0014a7a:	eb ac                	jmp    c0014a28 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014a7c:	8d 04 82             	lea    eax,[edx+eax*4]
c0014a7f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014a83:	8d 04 86             	lea    eax,[esi+eax*4]
c0014a86:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0014a8c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014a90:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c0014a96:	89 d8                	mov    eax,ebx
c0014a98:	5a                   	pop    edx
c0014a99:	5b                   	pop    ebx
c0014a9a:	5e                   	pop    esi
c0014a9b:	c3                   	ret    
c0014a9c:	83 ec 0c             	sub    esp,0xc
c0014a9f:	68 e0 b6 02 c0       	push   0xc002b6e0
c0014aa4:	e8 08 5e 00 00       	call   c001a8b1 <Krnl::panic(char const*)>
c0014aa9:	83 c4 10             	add    esp,0x10
c0014aac:	e9 77 ff ff ff       	jmp    c0014a28 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014ab1:	90                   	nop

c0014ab2 <InterruptController::clearAllHandlers(int, bool)>:
c0014ab2:	56                   	push   esi
c0014ab3:	53                   	push   ebx
c0014ab4:	52                   	push   edx
c0014ab5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014ab9:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014abd:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0014ac2:	75 61                	jne    c0014b25 <InterruptController::clearAllHandlers(int, bool)+0x73>
c0014ac4:	8d 46 20             	lea    eax,[esi+0x20]
c0014ac7:	c1 e6 04             	shl    esi,0x4
c0014aca:	c1 e0 04             	shl    eax,0x4
c0014acd:	01 de                	add    esi,ebx
c0014acf:	01 d8                	add    eax,ebx
c0014ad1:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c0014adb:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c0014ae5:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0014aef:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0014af9:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c0014b03:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c0014b0d:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c0014b17:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c0014b21:	58                   	pop    eax
c0014b22:	5b                   	pop    ebx
c0014b23:	5e                   	pop    esi
c0014b24:	c3                   	ret    
c0014b25:	83 ec 0c             	sub    esp,0xc
c0014b28:	53                   	push   ebx
c0014b29:	e8 e4 fa ff ff       	call   c0014612 <Device::getName()>
c0014b2e:	83 c4 10             	add    esp,0x10
c0014b31:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014b34:	75 8e                	jne    c0014ac4 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014b36:	83 fe 0f             	cmp    esi,0xf
c0014b39:	7f 09                	jg     c0014b44 <InterruptController::clearAllHandlers(int, bool)+0x92>
c0014b3b:	0f b6 b6 c0 e0 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd1f40]
c0014b42:	eb 80                	jmp    c0014ac4 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014b44:	83 ec 0c             	sub    esp,0xc
c0014b47:	68 54 b7 02 c0       	push   0xc002b754
c0014b4c:	e8 60 5d 00 00       	call   c001a8b1 <Krnl::panic(char const*)>
c0014b51:	83 c4 10             	add    esp,0x10
c0014b54:	e9 6b ff ff ff       	jmp    c0014ac4 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014b59:	90                   	nop

c0014b5a <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c0014b5a:	56                   	push   esi
c0014b5b:	53                   	push   ebx
c0014b5c:	52                   	push   edx
c0014b5d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014b61:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014b65:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014b6a:	75 3a                	jne    c0014ba6 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c0014b6c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014b70:	8d 50 20             	lea    edx,[eax+0x20]
c0014b73:	c1 e2 04             	shl    edx,0x4
c0014b76:	8d 04 16             	lea    eax,[esi+edx*1]
c0014b79:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c0014b7d:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c0014b83:	74 0b                	je     c0014b90 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c0014b85:	83 c0 04             	add    eax,0x4
c0014b88:	39 d0                	cmp    eax,edx
c0014b8a:	75 f1                	jne    c0014b7d <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c0014b8c:	58                   	pop    eax
c0014b8d:	5b                   	pop    ebx
c0014b8e:	5e                   	pop    esi
c0014b8f:	c3                   	ret    
c0014b90:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014b9a:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0014ba4:	eb df                	jmp    c0014b85 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c0014ba6:	83 ec 0c             	sub    esp,0xc
c0014ba9:	56                   	push   esi
c0014baa:	e8 63 fa ff ff       	call   c0014612 <Device::getName()>
c0014baf:	83 c4 10             	add    esp,0x10
c0014bb2:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014bb5:	75 b5                	jne    c0014b6c <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0014bb7:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0014bbc:	7f 11                	jg     c0014bcf <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c0014bbe:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014bc2:	0f b6 80 c0 e0 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd1f40]
c0014bc9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014bcd:	eb 9d                	jmp    c0014b6c <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0014bcf:	83 ec 0c             	sub    esp,0xc
c0014bd2:	68 54 b7 02 c0       	push   0xc002b754
c0014bd7:	e8 d5 5c 00 00       	call   c001a8b1 <Krnl::panic(char const*)>
c0014bdc:	83 c4 10             	add    esp,0x10
c0014bdf:	eb 8b                	jmp    c0014b6c <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c0014be1 <nmiHandler(regs*, void*)>:
c0014be1:	a1 68 ee 02 c0       	mov    eax,ds:0xc002ee68
c0014be6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014bea:	e9 85 a4 ff ff       	jmp    c000f074 <Computer::handleNMI()>

c0014bef <int_handler>:
c0014bef:	55                   	push   ebp
c0014bf0:	57                   	push   edi
c0014bf1:	56                   	push   esi
c0014bf2:	53                   	push   ebx
c0014bf3:	83 ec 0c             	sub    esp,0xc
c0014bf6:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0014bfa:	80 3d c4 19 03 c0 00 	cmp    BYTE PTR ds:0xc00319c4,0x0
c0014c01:	74 0b                	je     c0014c0e <int_handler+0x1f>
c0014c03:	fa                   	cli    
c0014c04:	f4                   	hlt    
c0014c05:	80 3d c4 19 03 c0 00 	cmp    BYTE PTR ds:0xc00319c4,0x0
c0014c0c:	75 f5                	jne    c0014c03 <int_handler+0x14>
c0014c0e:	a1 68 ee 02 c0       	mov    eax,ds:0xc002ee68
c0014c13:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c0014c16:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014c1c:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c0014c22:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014c25:	83 f8 17             	cmp    eax,0x17
c0014c28:	77 13                	ja     c0014c3d <int_handler+0x4e>
c0014c2a:	83 ec 08             	sub    esp,0x8
c0014c2d:	8b 17                	mov    edx,DWORD PTR [edi]
c0014c2f:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014c32:	0f b6 c0             	movzx  eax,al
c0014c35:	50                   	push   eax
c0014c36:	57                   	push   edi
c0014c37:	ff 52 38             	call   DWORD PTR [edx+0x38]
c0014c3a:	83 c4 10             	add    esp,0x10
c0014c3d:	83 c3 15             	add    ebx,0x15
c0014c40:	c1 e3 04             	shl    ebx,0x4
c0014c43:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c0014c47:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c0014c4e:	31 db                	xor    ebx,ebx
c0014c50:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c0014c54:	85 c0                	test   eax,eax
c0014c56:	74 13                	je     c0014c6b <int_handler+0x7c>
c0014c58:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0014c5b:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c0014c5f:	74 1c                	je     c0014c7d <int_handler+0x8e>
c0014c61:	83 ec 08             	sub    esp,0x8
c0014c64:	52                   	push   edx
c0014c65:	56                   	push   esi
c0014c66:	ff d0                	call   eax
c0014c68:	83 c4 10             	add    esp,0x10
c0014c6b:	43                   	inc    ebx
c0014c6c:	83 fb 04             	cmp    ebx,0x4
c0014c6f:	75 df                	jne    c0014c50 <int_handler+0x61>
c0014c71:	83 c4 0c             	add    esp,0xc
c0014c74:	31 c0                	xor    eax,eax
c0014c76:	5b                   	pop    ebx
c0014c77:	31 d2                	xor    edx,edx
c0014c79:	5e                   	pop    esi
c0014c7a:	5f                   	pop    edi
c0014c7b:	5d                   	pop    ebp
c0014c7c:	c3                   	ret    
c0014c7d:	83 ec 08             	sub    esp,0x8
c0014c80:	52                   	push   edx
c0014c81:	56                   	push   esi
c0014c82:	ff d0                	call   eax
c0014c84:	83 c4 10             	add    esp,0x10
c0014c87:	83 c4 0c             	add    esp,0xc
c0014c8a:	5b                   	pop    ebx
c0014c8b:	5e                   	pop    esi
c0014c8c:	5f                   	pop    edi
c0014c8d:	5d                   	pop    ebp
c0014c8e:	c3                   	ret    
c0014c8f:	90                   	nop

c0014c90 <InterruptController::InterruptController(char const*)>:
c0014c90:	83 ec 1c             	sub    esp,0x1c
c0014c93:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014c97:	83 ec 08             	sub    esp,0x8
c0014c9a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014c9e:	50                   	push   eax
c0014c9f:	e8 72 f8 ff ff       	call   c0014516 <Device::Device(char const*)>
c0014ca4:	83 c4 10             	add    esp,0x10
c0014ca7:	ba 14 ba 02 c0       	mov    edx,0xc002ba14
c0014cac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014cb0:	89 10                	mov    DWORD PTR [eax],edx
c0014cb2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014cb6:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c0014cc0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014cc8:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0014cd0:	7f 5e                	jg     c0014d30 <InterruptController::InterruptController(char const*)+0xa0>
c0014cd2:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014cda:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c0014cdf:	7f 49                	jg     c0014d2a <InterruptController::InterruptController(char const*)+0x9a>
c0014ce1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014ce5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014ce9:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0014cf0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014cf4:	01 ca                	add    edx,ecx
c0014cf6:	83 c2 54             	add    edx,0x54
c0014cf9:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014d01:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014d05:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014d09:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0014d10:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014d14:	01 ca                	add    edx,ecx
c0014d16:	81 c2 54 04 00 00    	add    edx,0x454
c0014d1c:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014d24:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0014d28:	eb b0                	jmp    c0014cda <InterruptController::InterruptController(char const*)+0x4a>
c0014d2a:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0014d2e:	eb 98                	jmp    c0014cc8 <InterruptController::InterruptController(char const*)+0x38>
c0014d30:	90                   	nop
c0014d31:	83 c4 1c             	add    esp,0x1c
c0014d34:	c3                   	ret    
c0014d35:	90                   	nop

c0014d36 <InterruptController::~InterruptController()>:
c0014d36:	83 ec 0c             	sub    esp,0xc
c0014d39:	ba 14 ba 02 c0       	mov    edx,0xc002ba14
c0014d3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014d42:	89 10                	mov    DWORD PTR [eax],edx
c0014d44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014d48:	83 ec 0c             	sub    esp,0xc
c0014d4b:	50                   	push   eax
c0014d4c:	e8 a7 f4 ff ff       	call   c00141f8 <Device::~Device()>
c0014d51:	83 c4 10             	add    esp,0x10
c0014d54:	90                   	nop
c0014d55:	83 c4 0c             	add    esp,0xc
c0014d58:	c3                   	ret    
c0014d59:	90                   	nop

c0014d5a <InterruptController::~InterruptController()>:
c0014d5a:	83 ec 0c             	sub    esp,0xc
c0014d5d:	83 ec 0c             	sub    esp,0xc
c0014d60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014d64:	e8 cd ff ff ff       	call   c0014d36 <InterruptController::~InterruptController()>
c0014d69:	83 c4 10             	add    esp,0x10
c0014d6c:	83 ec 08             	sub    esp,0x8
c0014d6f:	68 58 21 00 00       	push   0x2158
c0014d74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014d78:	e8 94 e0 ff ff       	call   c0012e11 <operator delete(void*, unsigned long)>
c0014d7d:	83 c4 10             	add    esp,0x10
c0014d80:	83 c4 0c             	add    esp,0xc
c0014d83:	c3                   	ret    

c0014d84 <displayDebugInfo(regs*)>:
c0014d84:	55                   	push   ebp
c0014d85:	57                   	push   edi
c0014d86:	56                   	push   esi
c0014d87:	53                   	push   ebx
c0014d88:	83 ec 24             	sub    esp,0x24
c0014d8b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0014d8f:	0f 20 c2             	mov    edx,cr0
c0014d92:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0014d96:	0f 20 d7             	mov    edi,cr2
c0014d99:	0f 20 de             	mov    esi,cr3
c0014d9c:	0f 20 e5             	mov    ebp,cr4
c0014d9f:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0014da2:	68 8e b7 02 c0       	push   0xc002b78e
c0014da7:	e8 45 e1 ff ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c0014dac:	59                   	pop    ecx
c0014dad:	58                   	pop    eax
c0014dae:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014db1:	68 99 b7 02 c0       	push   0xc002b799
c0014db6:	e8 36 e1 ff ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c0014dbb:	58                   	pop    eax
c0014dbc:	5a                   	pop    edx
c0014dbd:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0014dc0:	68 a4 b7 02 c0       	push   0xc002b7a4
c0014dc5:	e8 27 e1 ff ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c0014dca:	59                   	pop    ecx
c0014dcb:	58                   	pop    eax
c0014dcc:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014dcf:	68 af b7 02 c0       	push   0xc002b7af
c0014dd4:	e8 18 e1 ff ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c0014dd9:	58                   	pop    eax
c0014dda:	5a                   	pop    edx
c0014ddb:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0014dde:	68 ba b7 02 c0       	push   0xc002b7ba
c0014de3:	e8 09 e1 ff ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c0014de8:	59                   	pop    ecx
c0014de9:	58                   	pop    eax
c0014dea:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0014ded:	68 c5 b7 02 c0       	push   0xc002b7c5
c0014df2:	e8 fa e0 ff ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c0014df7:	58                   	pop    eax
c0014df8:	5a                   	pop    edx
c0014df9:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014dfc:	68 d0 b7 02 c0       	push   0xc002b7d0
c0014e01:	e8 eb e0 ff ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c0014e06:	59                   	pop    ecx
c0014e07:	58                   	pop    eax
c0014e08:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0014e0b:	68 db b7 02 c0       	push   0xc002b7db
c0014e10:	e8 dc e0 ff ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c0014e15:	58                   	pop    eax
c0014e16:	5a                   	pop    edx
c0014e17:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014e1a:	68 e6 b7 02 c0       	push   0xc002b7e6
c0014e1f:	e8 cd e0 ff ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c0014e24:	59                   	pop    ecx
c0014e25:	58                   	pop    eax
c0014e26:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014e29:	68 f5 b7 02 c0       	push   0xc002b7f5
c0014e2e:	e8 be e0 ff ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c0014e33:	58                   	pop    eax
c0014e34:	5a                   	pop    edx
c0014e35:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014e38:	68 00 b8 02 c0       	push   0xc002b800
c0014e3d:	e8 af e0 ff ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c0014e42:	59                   	pop    ecx
c0014e43:	58                   	pop    eax
c0014e44:	57                   	push   edi
c0014e45:	68 0b b8 02 c0       	push   0xc002b80b
c0014e4a:	e8 a2 e0 ff ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c0014e4f:	58                   	pop    eax
c0014e50:	5a                   	pop    edx
c0014e51:	56                   	push   esi
c0014e52:	68 16 b8 02 c0       	push   0xc002b816
c0014e57:	e8 95 e0 ff ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c0014e5c:	59                   	pop    ecx
c0014e5d:	a1 d0 23 03 c0       	mov    eax,ds:0xc00323d0
c0014e62:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e68:	e8 9f be ff ff       	call   c0010d0c <setActiveTerminal(VgaText*)>
c0014e6d:	58                   	pop    eax
c0014e6e:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014e71:	5a                   	pop    edx
c0014e72:	c1 e0 05             	shl    eax,0x5
c0014e75:	05 20 de 02 c0       	add    eax,0xc002de20
c0014e7a:	50                   	push   eax
c0014e7b:	a1 d0 23 03 c0       	mov    eax,ds:0xc00323d0
c0014e80:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e86:	e8 0d c2 ff ff       	call   c0011098 <VgaText::puts(char const*)>
c0014e8b:	59                   	pop    ecx
c0014e8c:	58                   	pop    eax
c0014e8d:	a1 d0 23 03 c0       	mov    eax,ds:0xc00323d0
c0014e92:	68 21 b8 02 c0       	push   0xc002b821
c0014e97:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e9d:	e8 f6 c1 ff ff       	call   c0011098 <VgaText::puts(char const*)>
c0014ea2:	58                   	pop    eax
c0014ea3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014ea8:	5a                   	pop    edx
c0014ea9:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014eac:	83 c0 0c             	add    eax,0xc
c0014eaf:	50                   	push   eax
c0014eb0:	a1 d0 23 03 c0       	mov    eax,ds:0xc00323d0
c0014eb5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ebb:	e8 d8 c1 ff ff       	call   c0011098 <VgaText::puts(char const*)>
c0014ec0:	59                   	pop    ecx
c0014ec1:	58                   	pop    eax
c0014ec2:	a1 d0 23 03 c0       	mov    eax,ds:0xc00323d0
c0014ec7:	68 2a b8 02 c0       	push   0xc002b82a
c0014ecc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ed2:	e8 c1 c1 ff ff       	call   c0011098 <VgaText::puts(char const*)>
c0014ed7:	58                   	pop    eax
c0014ed8:	a1 d0 23 03 c0       	mov    eax,ds:0xc00323d0
c0014edd:	5a                   	pop    edx
c0014ede:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014ee1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ee7:	e8 d2 c1 ff ff       	call   c00110be <VgaText::putx(unsigned int)>
c0014eec:	59                   	pop    ecx
c0014eed:	58                   	pop    eax
c0014eee:	a1 d0 23 03 c0       	mov    eax,ds:0xc00323d0
c0014ef3:	68 32 b8 02 c0       	push   0xc002b832
c0014ef8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014efe:	e8 95 c1 ff ff       	call   c0011098 <VgaText::puts(char const*)>
c0014f03:	58                   	pop    eax
c0014f04:	a1 d0 23 03 c0       	mov    eax,ds:0xc00323d0
c0014f09:	5a                   	pop    edx
c0014f0a:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014f0d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f13:	e8 a6 c1 ff ff       	call   c00110be <VgaText::putx(unsigned int)>
c0014f18:	59                   	pop    ecx
c0014f19:	58                   	pop    eax
c0014f1a:	a1 d0 23 03 c0       	mov    eax,ds:0xc00323d0
c0014f1f:	68 3a b8 02 c0       	push   0xc002b83a
c0014f24:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f2a:	e8 69 c1 ff ff       	call   c0011098 <VgaText::puts(char const*)>
c0014f2f:	58                   	pop    eax
c0014f30:	a1 d0 23 03 c0       	mov    eax,ds:0xc00323d0
c0014f35:	5a                   	pop    edx
c0014f36:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014f39:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f3f:	e8 7a c1 ff ff       	call   c00110be <VgaText::putx(unsigned int)>
c0014f44:	59                   	pop    ecx
c0014f45:	58                   	pop    eax
c0014f46:	a1 d0 23 03 c0       	mov    eax,ds:0xc00323d0
c0014f4b:	68 42 b8 02 c0       	push   0xc002b842
c0014f50:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f56:	e8 3d c1 ff ff       	call   c0011098 <VgaText::puts(char const*)>
c0014f5b:	58                   	pop    eax
c0014f5c:	a1 d0 23 03 c0       	mov    eax,ds:0xc00323d0
c0014f61:	5a                   	pop    edx
c0014f62:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0014f65:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f6b:	e8 4e c1 ff ff       	call   c00110be <VgaText::putx(unsigned int)>
c0014f70:	59                   	pop    ecx
c0014f71:	58                   	pop    eax
c0014f72:	a1 d0 23 03 c0       	mov    eax,ds:0xc00323d0
c0014f77:	68 4a b8 02 c0       	push   0xc002b84a
c0014f7c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f82:	e8 11 c1 ff ff       	call   c0011098 <VgaText::puts(char const*)>
c0014f87:	58                   	pop    eax
c0014f88:	a1 d0 23 03 c0       	mov    eax,ds:0xc00323d0
c0014f8d:	5a                   	pop    edx
c0014f8e:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014f91:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f97:	e8 22 c1 ff ff       	call   c00110be <VgaText::putx(unsigned int)>
c0014f9c:	59                   	pop    ecx
c0014f9d:	58                   	pop    eax
c0014f9e:	a1 d0 23 03 c0       	mov    eax,ds:0xc00323d0
c0014fa3:	68 52 b8 02 c0       	push   0xc002b852
c0014fa8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014fae:	e8 e5 c0 ff ff       	call   c0011098 <VgaText::puts(char const*)>
c0014fb3:	58                   	pop    eax
c0014fb4:	a1 d0 23 03 c0       	mov    eax,ds:0xc00323d0
c0014fb9:	5a                   	pop    edx
c0014fba:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c0014fbd:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014fc3:	e8 f6 c0 ff ff       	call   c00110be <VgaText::putx(unsigned int)>
c0014fc8:	59                   	pop    ecx
c0014fc9:	58                   	pop    eax
c0014fca:	a1 d0 23 03 c0       	mov    eax,ds:0xc00323d0
c0014fcf:	68 5a b8 02 c0       	push   0xc002b85a
c0014fd4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014fda:	e8 b9 c0 ff ff       	call   c0011098 <VgaText::puts(char const*)>
c0014fdf:	58                   	pop    eax
c0014fe0:	a1 d0 23 03 c0       	mov    eax,ds:0xc00323d0
c0014fe5:	5a                   	pop    edx
c0014fe6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0014fea:	52                   	push   edx
c0014feb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ff1:	e8 c8 c0 ff ff       	call   c00110be <VgaText::putx(unsigned int)>
c0014ff6:	59                   	pop    ecx
c0014ff7:	58                   	pop    eax
c0014ff8:	a1 d0 23 03 c0       	mov    eax,ds:0xc00323d0
c0014ffd:	68 63 b8 02 c0       	push   0xc002b863
c0015002:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015008:	e8 8b c0 ff ff       	call   c0011098 <VgaText::puts(char const*)>
c001500d:	58                   	pop    eax
c001500e:	a1 d0 23 03 c0       	mov    eax,ds:0xc00323d0
c0015013:	5a                   	pop    edx
c0015014:	57                   	push   edi
c0015015:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001501b:	e8 9e c0 ff ff       	call   c00110be <VgaText::putx(unsigned int)>
c0015020:	59                   	pop    ecx
c0015021:	a1 d0 23 03 c0       	mov    eax,ds:0xc00323d0
c0015026:	5f                   	pop    edi
c0015027:	68 6b b8 02 c0       	push   0xc002b86b
c001502c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015032:	e8 61 c0 ff ff       	call   c0011098 <VgaText::puts(char const*)>
c0015037:	58                   	pop    eax
c0015038:	a1 d0 23 03 c0       	mov    eax,ds:0xc00323d0
c001503d:	5a                   	pop    edx
c001503e:	56                   	push   esi
c001503f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015045:	e8 74 c0 ff ff       	call   c00110be <VgaText::putx(unsigned int)>
c001504a:	59                   	pop    ecx
c001504b:	a1 d0 23 03 c0       	mov    eax,ds:0xc00323d0
c0015050:	5e                   	pop    esi
c0015051:	68 73 b8 02 c0       	push   0xc002b873
c0015056:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001505c:	e8 37 c0 ff ff       	call   c0011098 <VgaText::puts(char const*)>
c0015061:	5f                   	pop    edi
c0015062:	58                   	pop    eax
c0015063:	a1 d0 23 03 c0       	mov    eax,ds:0xc00323d0
c0015068:	55                   	push   ebp
c0015069:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001506f:	e8 4a c0 ff ff       	call   c00110be <VgaText::putx(unsigned int)>
c0015074:	58                   	pop    eax
c0015075:	a1 d0 23 03 c0       	mov    eax,ds:0xc00323d0
c001507a:	5a                   	pop    edx
c001507b:	68 7b b8 02 c0       	push   0xc002b87b
c0015080:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015086:	e8 0d c0 ff ff       	call   c0011098 <VgaText::puts(char const*)>
c001508b:	0f 21 c0             	mov    eax,db0
c001508e:	59                   	pop    ecx
c001508f:	5e                   	pop    esi
c0015090:	50                   	push   eax
c0015091:	a1 d0 23 03 c0       	mov    eax,ds:0xc00323d0
c0015096:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001509c:	e8 1d c0 ff ff       	call   c00110be <VgaText::putx(unsigned int)>
c00150a1:	5f                   	pop    edi
c00150a2:	a1 d0 23 03 c0       	mov    eax,ds:0xc00323d0
c00150a7:	5d                   	pop    ebp
c00150a8:	68 84 b8 02 c0       	push   0xc002b884
c00150ad:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150b3:	e8 e0 bf ff ff       	call   c0011098 <VgaText::puts(char const*)>
c00150b8:	0f 21 c8             	mov    eax,db1
c00150bb:	5a                   	pop    edx
c00150bc:	59                   	pop    ecx
c00150bd:	50                   	push   eax
c00150be:	a1 d0 23 03 c0       	mov    eax,ds:0xc00323d0
c00150c3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150c9:	e8 f0 bf ff ff       	call   c00110be <VgaText::putx(unsigned int)>
c00150ce:	5e                   	pop    esi
c00150cf:	a1 d0 23 03 c0       	mov    eax,ds:0xc00323d0
c00150d4:	5f                   	pop    edi
c00150d5:	68 8c b8 02 c0       	push   0xc002b88c
c00150da:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150e0:	e8 b3 bf ff ff       	call   c0011098 <VgaText::puts(char const*)>
c00150e5:	0f 21 d0             	mov    eax,db2
c00150e8:	5d                   	pop    ebp
c00150e9:	5a                   	pop    edx
c00150ea:	50                   	push   eax
c00150eb:	a1 d0 23 03 c0       	mov    eax,ds:0xc00323d0
c00150f0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150f6:	e8 c3 bf ff ff       	call   c00110be <VgaText::putx(unsigned int)>
c00150fb:	59                   	pop    ecx
c00150fc:	a1 d0 23 03 c0       	mov    eax,ds:0xc00323d0
c0015101:	5e                   	pop    esi
c0015102:	68 94 b8 02 c0       	push   0xc002b894
c0015107:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001510d:	e8 86 bf ff ff       	call   c0011098 <VgaText::puts(char const*)>
c0015112:	0f 21 d8             	mov    eax,db3
c0015115:	5f                   	pop    edi
c0015116:	5d                   	pop    ebp
c0015117:	50                   	push   eax
c0015118:	a1 d0 23 03 c0       	mov    eax,ds:0xc00323d0
c001511d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015123:	e8 96 bf ff ff       	call   c00110be <VgaText::putx(unsigned int)>
c0015128:	58                   	pop    eax
c0015129:	a1 d0 23 03 c0       	mov    eax,ds:0xc00323d0
c001512e:	5a                   	pop    edx
c001512f:	68 9c b8 02 c0       	push   0xc002b89c
c0015134:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001513a:	e8 59 bf ff ff       	call   c0011098 <VgaText::puts(char const*)>
c001513f:	0f 21 f0             	mov    eax,db6
c0015142:	59                   	pop    ecx
c0015143:	5e                   	pop    esi
c0015144:	50                   	push   eax
c0015145:	a1 d0 23 03 c0       	mov    eax,ds:0xc00323d0
c001514a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015150:	e8 69 bf ff ff       	call   c00110be <VgaText::putx(unsigned int)>
c0015155:	5f                   	pop    edi
c0015156:	a1 d0 23 03 c0       	mov    eax,ds:0xc00323d0
c001515b:	5d                   	pop    ebp
c001515c:	68 a4 b8 02 c0       	push   0xc002b8a4
c0015161:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015167:	e8 2c bf ff ff       	call   c0011098 <VgaText::puts(char const*)>
c001516c:	0f 21 f8             	mov    eax,db7
c001516f:	5a                   	pop    edx
c0015170:	59                   	pop    ecx
c0015171:	50                   	push   eax
c0015172:	a1 d0 23 03 c0       	mov    eax,ds:0xc00323d0
c0015177:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001517d:	e8 3c bf ff ff       	call   c00110be <VgaText::putx(unsigned int)>
c0015182:	5e                   	pop    esi
c0015183:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0015186:	e8 ee 88 00 00       	call   c001da79 <Thr::getDriverNameFromAddress(unsigned long)>
c001518b:	83 c4 10             	add    esp,0x10
c001518e:	85 c0                	test   eax,eax
c0015190:	74 7d                	je     c001520f <displayDebugInfo(regs*)+0x48b>
c0015192:	89 c6                	mov    esi,eax
c0015194:	50                   	push   eax
c0015195:	50                   	push   eax
c0015196:	56                   	push   esi
c0015197:	68 ac b8 02 c0       	push   0xc002b8ac
c001519c:	e8 50 dd ff ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c00151a1:	5a                   	pop    edx
c00151a2:	a1 d0 23 03 c0       	mov    eax,ds:0xc00323d0
c00151a7:	59                   	pop    ecx
c00151a8:	68 ba b8 02 c0       	push   0xc002b8ba
c00151ad:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00151b3:	e8 e0 be ff ff       	call   c0011098 <VgaText::puts(char const*)>
c00151b8:	5f                   	pop    edi
c00151b9:	a1 d0 23 03 c0       	mov    eax,ds:0xc00323d0
c00151be:	5d                   	pop    ebp
c00151bf:	56                   	push   esi
c00151c0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00151c6:	e8 cd be ff ff       	call   c0011098 <VgaText::puts(char const*)>
c00151cb:	58                   	pop    eax
c00151cc:	a1 d0 23 03 c0       	mov    eax,ds:0xc00323d0
c00151d1:	5a                   	pop    edx
c00151d2:	68 c6 b8 02 c0       	push   0xc002b8c6
c00151d7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00151dd:	e8 b6 be ff ff       	call   c0011098 <VgaText::puts(char const*)>
c00151e2:	59                   	pop    ecx
c00151e3:	a1 d0 23 03 c0       	mov    eax,ds:0xc00323d0
c00151e8:	8b b8 26 05 00 00    	mov    edi,DWORD PTR [eax+0x526]
c00151ee:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00151f1:	e8 ba 88 00 00       	call   c001dab0 <Thr::getDriverOffsetFromAddress(unsigned long)>
c00151f6:	5b                   	pop    ebx
c00151f7:	5d                   	pop    ebp
c00151f8:	50                   	push   eax
c00151f9:	57                   	push   edi
c00151fa:	e8 bf be ff ff       	call   c00110be <VgaText::putx(unsigned int)>
c00151ff:	58                   	pop    eax
c0015200:	5a                   	pop    edx
c0015201:	56                   	push   esi
c0015202:	68 d2 b8 02 c0       	push   0xc002b8d2
c0015207:	e8 e5 dc ff ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c001520c:	83 c4 10             	add    esp,0x10
c001520f:	fa                   	cli    
c0015210:	f4                   	hlt    
c0015211:	eb fe                	jmp    c0015211 <displayDebugInfo(regs*)+0x48d>

c0015213 <x87EmulHandler(regs*, void*)>:
c0015213:	83 ec 0c             	sub    esp,0xc
c0015216:	0f 20 c2             	mov    edx,cr0
c0015219:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001521e:	80 78 62 00          	cmp    BYTE PTR [eax+0x62],0x0
c0015222:	75 4b                	jne    c001526f <x87EmulHandler(regs*, void*)+0x5c>
c0015224:	a1 68 ee 02 c0       	mov    eax,ds:0xc002ee68
c0015229:	8b 80 e0 01 00 00    	mov    eax,DWORD PTR [eax+0x1e0]
c001522f:	85 c0                	test   eax,eax
c0015231:	74 05                	je     c0015238 <x87EmulHandler(regs*, void*)+0x25>
c0015233:	83 e2 08             	and    edx,0x8
c0015236:	75 17                	jne    c001524f <x87EmulHandler(regs*, void*)+0x3c>
c0015238:	83 ec 0c             	sub    esp,0xc
c001523b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001523f:	e8 b3 ae 00 00       	call   c00200f7 <Vm::x87Handler(regs*)>
c0015244:	83 c4 10             	add    esp,0x10
c0015247:	84 c0                	test   al,al
c0015249:	74 24                	je     c001526f <x87EmulHandler(regs*, void*)+0x5c>
c001524b:	83 c4 0c             	add    esp,0xc
c001524e:	c3                   	ret    
c001524f:	83 ec 0c             	sub    esp,0xc
c0015252:	68 f8 b8 02 c0       	push   0xc002b8f8
c0015257:	e8 95 dc ff ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c001525c:	0f 06                	clts   
c001525e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015263:	83 c4 10             	add    esp,0x10
c0015266:	a3 08 f0 02 c0       	mov    ds:0xc002f008,eax
c001526b:	83 c4 0c             	add    esp,0xc
c001526e:	c3                   	ret    
c001526f:	83 ec 0c             	sub    esp,0xc
c0015272:	68 e2 b8 02 c0       	push   0xc002b8e2
c0015277:	e8 75 dc ff ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c001527c:	5a                   	pop    edx
c001527d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015281:	e8 fe fa ff ff       	call   c0014d84 <displayDebugInfo(regs*)>

c0015286 <gpFault(regs*, void*)>:
c0015286:	53                   	push   ebx
c0015287:	83 ec 14             	sub    esp,0x14
c001528a:	c7 05 04 f0 02 c0 74 f4 01 c0 	mov    DWORD PTR ds:0xc002f004,0xc001f474
c0015294:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0015298:	53                   	push   ebx
c0015299:	e8 d6 a1 00 00       	call   c001f474 <Vm::faultHandler(regs*)>
c001529e:	83 c4 10             	add    esp,0x10
c00152a1:	84 c0                	test   al,al
c00152a3:	74 05                	je     c00152aa <gpFault(regs*, void*)+0x24>
c00152a5:	83 c4 08             	add    esp,0x8
c00152a8:	5b                   	pop    ebx
c00152a9:	c3                   	ret    
c00152aa:	83 ec 0c             	sub    esp,0xc
c00152ad:	68 05 b9 02 c0       	push   0xc002b905
c00152b2:	e8 3a dc ff ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c00152b7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00152ba:	e8 c5 fa ff ff       	call   c0014d84 <displayDebugInfo(regs*)>

c00152bf <pgFault(regs*, void*)>:
c00152bf:	83 ec 14             	sub    esp,0x14
c00152c2:	0f 20 d0             	mov    eax,cr2
c00152c5:	50                   	push   eax
c00152c6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00152cb:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00152ce:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c00152d4:	e8 35 d8 ff ff       	call   c0012b0e <VAS::tryLoadBackOffDisk(unsigned long)>
c00152d9:	83 c4 10             	add    esp,0x10
c00152dc:	84 c0                	test   al,al
c00152de:	74 04                	je     c00152e4 <pgFault(regs*, void*)+0x25>
c00152e0:	83 c4 0c             	add    esp,0xc
c00152e3:	c3                   	ret    
c00152e4:	83 ec 0c             	sub    esp,0xc
c00152e7:	68 20 b9 02 c0       	push   0xc002b920
c00152ec:	e8 00 dc ff ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c00152f1:	58                   	pop    eax
c00152f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00152f6:	e8 89 fa ff ff       	call   c0014d84 <displayDebugInfo(regs*)>

c00152fb <otherISRHandler(regs*, void*)>:
c00152fb:	53                   	push   ebx
c00152fc:	83 ec 0c             	sub    esp,0xc
c00152ff:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0015303:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0015306:	50                   	push   eax
c0015307:	50                   	push   eax
c0015308:	68 2d b9 02 c0       	push   0xc002b92d
c001530d:	e8 df db ff ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c0015312:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015315:	e8 6a fa ff ff       	call   c0014d84 <displayDebugInfo(regs*)>

c001531a <opcodeFault(regs*, void*)>:
c001531a:	55                   	push   ebp
c001531b:	89 e5                	mov    ebp,esp
c001531d:	56                   	push   esi
c001531e:	53                   	push   ebx
c001531f:	83 ec 40             	sub    esp,0x40
c0015322:	a1 68 ee 02 c0       	mov    eax,ds:0xc002ee68
c0015327:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001532d:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c0015333:	84 c0                	test   al,al
c0015335:	74 24                	je     c001535b <opcodeFault(regs*, void*)+0x41>
c0015337:	83 ec 0c             	sub    esp,0xc
c001533a:	68 4c b9 02 c0       	push   0xc002b94c
c001533f:	e8 ad db ff ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c0015344:	83 c4 10             	add    esp,0x10
c0015347:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001534a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001534d:	8d 50 19             	lea    edx,[eax+0x19]
c0015350:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015353:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015356:	e9 d5 05 00 00       	jmp    c0015930 <opcodeFault(regs*, void*)+0x616>
c001535b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001535e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015361:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015364:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c0015368:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
c001536c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001536f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015372:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0015375:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015378:	8a 00                	mov    al,BYTE PTR [eax]
c001537a:	3c f0                	cmp    al,0xf0
c001537c:	75 17                	jne    c0015395 <opcodeFault(regs*, void*)+0x7b>
c001537e:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015381:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015384:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015387:	8d 50 01             	lea    edx,[eax+0x1]
c001538a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001538d:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015390:	e9 da 00 00 00       	jmp    c001546f <opcodeFault(regs*, void*)+0x155>
c0015395:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015398:	8a 00                	mov    al,BYTE PTR [eax]
c001539a:	3c f2                	cmp    al,0xf2
c001539c:	74 09                	je     c00153a7 <opcodeFault(regs*, void*)+0x8d>
c001539e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153a1:	8a 00                	mov    al,BYTE PTR [eax]
c00153a3:	3c f3                	cmp    al,0xf3
c00153a5:	75 1b                	jne    c00153c2 <opcodeFault(regs*, void*)+0xa8>
c00153a7:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00153ab:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00153ae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153b1:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00153b4:	8d 50 01             	lea    edx,[eax+0x1]
c00153b7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153ba:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00153bd:	e9 ad 00 00 00       	jmp    c001546f <opcodeFault(regs*, void*)+0x155>
c00153c2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153c5:	8a 00                	mov    al,BYTE PTR [eax]
c00153c7:	3c 66                	cmp    al,0x66
c00153c9:	75 1f                	jne    c00153ea <opcodeFault(regs*, void*)+0xd0>
c00153cb:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00153cf:	c6 45 f2 01          	mov    BYTE PTR [ebp-0xe],0x1
c00153d3:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00153d6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153d9:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00153dc:	8d 50 01             	lea    edx,[eax+0x1]
c00153df:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153e2:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00153e5:	e9 85 00 00 00       	jmp    c001546f <opcodeFault(regs*, void*)+0x155>
c00153ea:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153ed:	8a 00                	mov    al,BYTE PTR [eax]
c00153ef:	3c 67                	cmp    al,0x67
c00153f1:	75 18                	jne    c001540b <opcodeFault(regs*, void*)+0xf1>
c00153f3:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00153f7:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00153fa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153fd:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015400:	8d 50 01             	lea    edx,[eax+0x1]
c0015403:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015406:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015409:	eb 64                	jmp    c001546f <opcodeFault(regs*, void*)+0x155>
c001540b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001540e:	8a 00                	mov    al,BYTE PTR [eax]
c0015410:	3c 2e                	cmp    al,0x2e
c0015412:	74 09                	je     c001541d <opcodeFault(regs*, void*)+0x103>
c0015414:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015417:	8a 00                	mov    al,BYTE PTR [eax]
c0015419:	3c 3e                	cmp    al,0x3e
c001541b:	75 18                	jne    c0015435 <opcodeFault(regs*, void*)+0x11b>
c001541d:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0015421:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015424:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015427:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001542a:	8d 50 01             	lea    edx,[eax+0x1]
c001542d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015430:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015433:	eb 3a                	jmp    c001546f <opcodeFault(regs*, void*)+0x155>
c0015435:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015438:	8a 00                	mov    al,BYTE PTR [eax]
c001543a:	3c 36                	cmp    al,0x36
c001543c:	74 1b                	je     c0015459 <opcodeFault(regs*, void*)+0x13f>
c001543e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015441:	8a 00                	mov    al,BYTE PTR [eax]
c0015443:	3c 26                	cmp    al,0x26
c0015445:	74 12                	je     c0015459 <opcodeFault(regs*, void*)+0x13f>
c0015447:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001544a:	8a 00                	mov    al,BYTE PTR [eax]
c001544c:	3c 64                	cmp    al,0x64
c001544e:	74 09                	je     c0015459 <opcodeFault(regs*, void*)+0x13f>
c0015450:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015453:	8a 00                	mov    al,BYTE PTR [eax]
c0015455:	3c 65                	cmp    al,0x65
c0015457:	75 16                	jne    c001546f <opcodeFault(regs*, void*)+0x155>
c0015459:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c001545d:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015460:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015463:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015466:	8d 50 01             	lea    edx,[eax+0x1]
c0015469:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001546c:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001546f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015472:	8a 00                	mov    al,BYTE PTR [eax]
c0015474:	3c 0f                	cmp    al,0xf
c0015476:	0f 85 ad 00 00 00    	jne    c0015529 <opcodeFault(regs*, void*)+0x20f>
c001547c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001547f:	40                   	inc    eax
c0015480:	8a 00                	mov    al,BYTE PTR [eax]
c0015482:	3c c2                	cmp    al,0xc2
c0015484:	74 0e                	je     c0015494 <opcodeFault(regs*, void*)+0x17a>
c0015486:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015489:	40                   	inc    eax
c001548a:	8a 00                	mov    al,BYTE PTR [eax]
c001548c:	3c c3                	cmp    al,0xc3
c001548e:	0f 85 95 00 00 00    	jne    c0015529 <opcodeFault(regs*, void*)+0x20f>
c0015494:	83 ec 0c             	sub    esp,0xc
c0015497:	68 6f b9 02 c0       	push   0xc002b96f
c001549c:	e8 50 da ff ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c00154a1:	83 c4 10             	add    esp,0x10
c00154a4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154a7:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00154aa:	8d 50 01             	lea    edx,[eax+0x1]
c00154ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154b0:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00154b3:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00154b6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154b9:	8a 00                	mov    al,BYTE PTR [eax]
c00154bb:	8d 50 fe             	lea    edx,[eax-0x2]
c00154be:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154c1:	88 10                	mov    BYTE PTR [eax],dl
c00154c3:	8d 45 c2             	lea    eax,[ebp-0x3e]
c00154c6:	50                   	push   eax
c00154c7:	8d 45 c3             	lea    eax,[ebp-0x3d]
c00154ca:	50                   	push   eax
c00154cb:	8d 45 c4             	lea    eax,[ebp-0x3c]
c00154ce:	50                   	push   eax
c00154cf:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00154d2:	e8 a1 4a 00 00       	call   c0019f78 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c00154d7:	83 c4 10             	add    esp,0x10
c00154da:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154dd:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00154e0:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c00154e3:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c00154e6:	01 d0                	add    eax,edx
c00154e8:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c00154eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154ee:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00154f1:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c00154f4:	48                   	dec    eax
c00154f5:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c00154f8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154fb:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c00154fe:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015501:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015504:	83 ec 04             	sub    esp,0x4
c0015507:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c001550a:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c001550d:	50                   	push   eax
c001550e:	e8 a1 ac fe ff       	call   c00001b4 <voodooXADD>
c0015513:	83 c4 10             	add    esp,0x10
c0015516:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0015519:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001551c:	01 c2                	add    edx,eax
c001551e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015521:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015524:	e9 07 04 00 00       	jmp    c0015930 <opcodeFault(regs*, void*)+0x616>
c0015529:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001552c:	8a 00                	mov    al,BYTE PTR [eax]
c001552e:	3c 0f                	cmp    al,0xf
c0015530:	0f 85 8b 01 00 00    	jne    c00156c1 <opcodeFault(regs*, void*)+0x3a7>
c0015536:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015539:	40                   	inc    eax
c001553a:	8a 00                	mov    al,BYTE PTR [eax]
c001553c:	3c c7                	cmp    al,0xc7
c001553e:	0f 86 7d 01 00 00    	jbe    c00156c1 <opcodeFault(regs*, void*)+0x3a7>
c0015544:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015547:	40                   	inc    eax
c0015548:	8a 00                	mov    al,BYTE PTR [eax]
c001554a:	3c cf                	cmp    al,0xcf
c001554c:	0f 87 6f 01 00 00    	ja     c00156c1 <opcodeFault(regs*, void*)+0x3a7>
c0015552:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015555:	40                   	inc    eax
c0015556:	8a 00                	mov    al,BYTE PTR [eax]
c0015558:	83 c0 38             	add    eax,0x38
c001555b:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c001555e:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0015562:	75 0b                	jne    c001556f <opcodeFault(regs*, void*)+0x255>
c0015564:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015567:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c001556a:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001556d:	eb 75                	jmp    c00155e4 <opcodeFault(regs*, void*)+0x2ca>
c001556f:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0015573:	75 0b                	jne    c0015580 <opcodeFault(regs*, void*)+0x266>
c0015575:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015578:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001557b:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001557e:	eb 64                	jmp    c00155e4 <opcodeFault(regs*, void*)+0x2ca>
c0015580:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0015584:	75 0b                	jne    c0015591 <opcodeFault(regs*, void*)+0x277>
c0015586:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015589:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001558c:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001558f:	eb 53                	jmp    c00155e4 <opcodeFault(regs*, void*)+0x2ca>
c0015591:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0015595:	75 0b                	jne    c00155a2 <opcodeFault(regs*, void*)+0x288>
c0015597:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001559a:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001559d:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00155a0:	eb 42                	jmp    c00155e4 <opcodeFault(regs*, void*)+0x2ca>
c00155a2:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c00155a6:	75 0b                	jne    c00155b3 <opcodeFault(regs*, void*)+0x299>
c00155a8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155ab:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00155ae:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00155b1:	eb 31                	jmp    c00155e4 <opcodeFault(regs*, void*)+0x2ca>
c00155b3:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c00155b7:	75 0b                	jne    c00155c4 <opcodeFault(regs*, void*)+0x2aa>
c00155b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155bc:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00155bf:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00155c2:	eb 20                	jmp    c00155e4 <opcodeFault(regs*, void*)+0x2ca>
c00155c4:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c00155c8:	75 0b                	jne    c00155d5 <opcodeFault(regs*, void*)+0x2bb>
c00155ca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155cd:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00155d0:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00155d3:	eb 0f                	jmp    c00155e4 <opcodeFault(regs*, void*)+0x2ca>
c00155d5:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c00155d9:	75 09                	jne    c00155e4 <opcodeFault(regs*, void*)+0x2ca>
c00155db:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155de:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00155e1:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00155e4:	80 7d f2 00          	cmp    BYTE PTR [ebp-0xe],0x0
c00155e8:	74 10                	je     c00155fa <opcodeFault(regs*, void*)+0x2e0>
c00155ea:	81 65 ec 00 00 ff ff 	and    DWORD PTR [ebp-0x14],0xffff0000
c00155f1:	81 4d ec ad de 00 00 	or     DWORD PTR [ebp-0x14],0xdead
c00155f8:	eb 2d                	jmp    c0015627 <opcodeFault(regs*, void*)+0x30d>
c00155fa:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00155fd:	c1 e0 18             	shl    eax,0x18
c0015600:	89 c2                	mov    edx,eax
c0015602:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0015605:	c1 e0 08             	shl    eax,0x8
c0015608:	25 00 00 ff 00       	and    eax,0xff0000
c001560d:	09 c2                	or     edx,eax
c001560f:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0015612:	c1 e8 08             	shr    eax,0x8
c0015615:	25 00 ff 00 00       	and    eax,0xff00
c001561a:	09 c2                	or     edx,eax
c001561c:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001561f:	c1 e8 18             	shr    eax,0x18
c0015622:	09 d0                	or     eax,edx
c0015624:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015627:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c001562b:	75 0b                	jne    c0015638 <opcodeFault(regs*, void*)+0x31e>
c001562d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015630:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015633:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0015636:	eb 75                	jmp    c00156ad <opcodeFault(regs*, void*)+0x393>
c0015638:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c001563c:	75 0b                	jne    c0015649 <opcodeFault(regs*, void*)+0x32f>
c001563e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015641:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015644:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0015647:	eb 64                	jmp    c00156ad <opcodeFault(regs*, void*)+0x393>
c0015649:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c001564d:	75 0b                	jne    c001565a <opcodeFault(regs*, void*)+0x340>
c001564f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015652:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015655:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0015658:	eb 53                	jmp    c00156ad <opcodeFault(regs*, void*)+0x393>
c001565a:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c001565e:	75 0b                	jne    c001566b <opcodeFault(regs*, void*)+0x351>
c0015660:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015663:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015666:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0015669:	eb 42                	jmp    c00156ad <opcodeFault(regs*, void*)+0x393>
c001566b:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c001566f:	75 0b                	jne    c001567c <opcodeFault(regs*, void*)+0x362>
c0015671:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015674:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015677:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c001567a:	eb 31                	jmp    c00156ad <opcodeFault(regs*, void*)+0x393>
c001567c:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0015680:	75 0b                	jne    c001568d <opcodeFault(regs*, void*)+0x373>
c0015682:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015685:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015688:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001568b:	eb 20                	jmp    c00156ad <opcodeFault(regs*, void*)+0x393>
c001568d:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c0015691:	75 0b                	jne    c001569e <opcodeFault(regs*, void*)+0x384>
c0015693:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015696:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015699:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c001569c:	eb 0f                	jmp    c00156ad <opcodeFault(regs*, void*)+0x393>
c001569e:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c00156a2:	75 09                	jne    c00156ad <opcodeFault(regs*, void*)+0x393>
c00156a4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156a7:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00156aa:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00156ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156b0:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00156b3:	8d 50 02             	lea    edx,[eax+0x2]
c00156b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156b9:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00156bc:	e9 6f 02 00 00       	jmp    c0015930 <opcodeFault(regs*, void*)+0x616>
c00156c1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00156c4:	8a 00                	mov    al,BYTE PTR [eax]
c00156c6:	3c 0f                	cmp    al,0xf
c00156c8:	0f 85 8d 01 00 00    	jne    c001585b <opcodeFault(regs*, void*)+0x541>
c00156ce:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00156d1:	40                   	inc    eax
c00156d2:	8a 00                	mov    al,BYTE PTR [eax]
c00156d4:	3c c7                	cmp    al,0xc7
c00156d6:	0f 85 7f 01 00 00    	jne    c001585b <opcodeFault(regs*, void*)+0x541>
c00156dc:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00156df:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156e2:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00156e5:	8d 50 01             	lea    edx,[eax+0x1]
c00156e8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156eb:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00156ee:	8d 45 ba             	lea    eax,[ebp-0x46]
c00156f1:	50                   	push   eax
c00156f2:	8d 45 bb             	lea    eax,[ebp-0x45]
c00156f5:	50                   	push   eax
c00156f6:	8d 45 bc             	lea    eax,[ebp-0x44]
c00156f9:	50                   	push   eax
c00156fa:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00156fd:	e8 76 48 00 00       	call   c0019f78 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0015702:	83 c4 10             	add    esp,0x10
c0015705:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0015708:	8a 45 bb             	mov    al,BYTE PTR [ebp-0x45]
c001570b:	83 f0 01             	xor    eax,0x1
c001570e:	84 c0                	test   al,al
c0015710:	0f 84 45 01 00 00    	je     c001585b <opcodeFault(regs*, void*)+0x541>
c0015716:	8a 45 ba             	mov    al,BYTE PTR [ebp-0x46]
c0015719:	3c 01                	cmp    al,0x1
c001571b:	0f 85 3a 01 00 00    	jne    c001585b <opcodeFault(regs*, void*)+0x541>
c0015721:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c0015724:	83 f0 01             	xor    eax,0x1
c0015727:	84 c0                	test   al,al
c0015729:	0f 84 2c 01 00 00    	je     c001585b <opcodeFault(regs*, void*)+0x541>
c001572f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015732:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0015735:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0015738:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
c001573f:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0015742:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0015745:	89 c2                	mov    edx,eax
c0015747:	b8 00 00 00 00       	mov    eax,0x0
c001574c:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c001574f:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0015752:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015755:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0015758:	ba 00 00 00 00       	mov    edx,0x0
c001575d:	09 45 d0             	or     DWORD PTR [ebp-0x30],eax
c0015760:	09 55 d4             	or     DWORD PTR [ebp-0x2c],edx
c0015763:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015766:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0015769:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c001576c:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
c0015773:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0015776:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0015779:	89 c2                	mov    edx,eax
c001577b:	b8 00 00 00 00       	mov    eax,0x0
c0015780:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c0015783:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
c0015786:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015789:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001578c:	ba 00 00 00 00       	mov    edx,0x0
c0015791:	09 45 c8             	or     DWORD PTR [ebp-0x38],eax
c0015794:	09 55 cc             	or     DWORD PTR [ebp-0x34],edx
c0015797:	fa                   	cli    
c0015798:	a1 a8 23 03 c0       	mov    eax,ds:0xc00323a8
c001579d:	40                   	inc    eax
c001579e:	a3 a8 23 03 c0       	mov    ds:0xc00323a8,eax
c00157a3:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00157a6:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00157a9:	8b 00                	mov    eax,DWORD PTR [eax]
c00157ab:	89 c1                	mov    ecx,eax
c00157ad:	33 4d d0             	xor    ecx,DWORD PTR [ebp-0x30]
c00157b0:	89 cb                	mov    ebx,ecx
c00157b2:	89 d0                	mov    eax,edx
c00157b4:	33 45 d4             	xor    eax,DWORD PTR [ebp-0x2c]
c00157b7:	89 c6                	mov    esi,eax
c00157b9:	89 f0                	mov    eax,esi
c00157bb:	09 d8                	or     eax,ebx
c00157bd:	85 c0                	test   eax,eax
c00157bf:	75 21                	jne    c00157e2 <opcodeFault(regs*, void*)+0x4c8>
c00157c1:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00157c4:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c00157c7:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00157ca:	89 01                	mov    DWORD PTR [ecx],eax
c00157cc:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00157cf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157d2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00157d5:	83 c8 40             	or     eax,0x40
c00157d8:	89 c2                	mov    edx,eax
c00157da:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157dd:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c00157e0:	eb 3e                	jmp    c0015820 <opcodeFault(regs*, void*)+0x506>
c00157e2:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00157e5:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00157e8:	8b 00                	mov    eax,DWORD PTR [eax]
c00157ea:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00157ed:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c00157f0:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c00157f3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157f6:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00157f9:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00157fc:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c00157ff:	89 d0                	mov    eax,edx
c0015801:	31 d2                	xor    edx,edx
c0015803:	89 c3                	mov    ebx,eax
c0015805:	89 d6                	mov    esi,edx
c0015807:	89 da                	mov    edx,ebx
c0015809:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001580c:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c001580f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015812:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015815:	83 e0 bf             	and    eax,0xffffffbf
c0015818:	89 c2                	mov    edx,eax
c001581a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001581d:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0015820:	a1 a8 23 03 c0       	mov    eax,ds:0xc00323a8
c0015825:	48                   	dec    eax
c0015826:	a3 a8 23 03 c0       	mov    ds:0xc00323a8,eax
c001582b:	a1 a8 23 03 c0       	mov    eax,ds:0xc00323a8
c0015830:	85 c0                	test   eax,eax
c0015832:	75 01                	jne    c0015835 <opcodeFault(regs*, void*)+0x51b>
c0015834:	fb                   	sti    
c0015835:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015838:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001583b:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
c001583e:	01 c2                	add    edx,eax
c0015840:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015843:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015846:	83 ec 0c             	sub    esp,0xc
c0015849:	68 7e b9 02 c0       	push   0xc002b97e
c001584e:	e8 9e d6 ff ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c0015853:	83 c4 10             	add    esp,0x10
c0015856:	e9 d5 00 00 00       	jmp    c0015930 <opcodeFault(regs*, void*)+0x616>
c001585b:	83 ec 0c             	sub    esp,0xc
c001585e:	68 91 b9 02 c0       	push   0xc002b991
c0015863:	e8 89 d6 ff ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c0015868:	83 c4 10             	add    esp,0x10
c001586b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001586e:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0015871:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015874:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015877:	c1 e0 04             	shl    eax,0x4
c001587a:	01 d0                	add    eax,edx
c001587c:	83 c0 03             	add    eax,0x3
c001587f:	8a 00                	mov    al,BYTE PTR [eax]
c0015881:	0f b6 d8             	movzx  ebx,al
c0015884:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015887:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c001588a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001588d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015890:	c1 e0 04             	shl    eax,0x4
c0015893:	01 d0                	add    eax,edx
c0015895:	83 c0 02             	add    eax,0x2
c0015898:	8a 00                	mov    al,BYTE PTR [eax]
c001589a:	0f b6 c8             	movzx  ecx,al
c001589d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158a0:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00158a3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158a6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00158a9:	c1 e0 04             	shl    eax,0x4
c00158ac:	01 d0                	add    eax,edx
c00158ae:	40                   	inc    eax
c00158af:	8a 00                	mov    al,BYTE PTR [eax]
c00158b1:	0f b6 d0             	movzx  edx,al
c00158b4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158b7:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c00158ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158bd:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00158c0:	c1 e0 04             	shl    eax,0x4
c00158c3:	01 f0                	add    eax,esi
c00158c5:	8a 00                	mov    al,BYTE PTR [eax]
c00158c7:	0f b6 c0             	movzx  eax,al
c00158ca:	83 ec 0c             	sub    esp,0xc
c00158cd:	53                   	push   ebx
c00158ce:	51                   	push   ecx
c00158cf:	52                   	push   edx
c00158d0:	50                   	push   eax
c00158d1:	68 a4 b9 02 c0       	push   0xc002b9a4
c00158d6:	e8 16 d6 ff ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c00158db:	83 c4 20             	add    esp,0x20
c00158de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158e1:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00158e4:	83 c0 03             	add    eax,0x3
c00158e7:	8a 00                	mov    al,BYTE PTR [eax]
c00158e9:	0f b6 d8             	movzx  ebx,al
c00158ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158ef:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00158f2:	83 c0 02             	add    eax,0x2
c00158f5:	8a 00                	mov    al,BYTE PTR [eax]
c00158f7:	0f b6 c8             	movzx  ecx,al
c00158fa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158fd:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015900:	40                   	inc    eax
c0015901:	8a 00                	mov    al,BYTE PTR [eax]
c0015903:	0f b6 d0             	movzx  edx,al
c0015906:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015909:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001590c:	8a 00                	mov    al,BYTE PTR [eax]
c001590e:	0f b6 c0             	movzx  eax,al
c0015911:	83 ec 0c             	sub    esp,0xc
c0015914:	53                   	push   ebx
c0015915:	51                   	push   ecx
c0015916:	52                   	push   edx
c0015917:	50                   	push   eax
c0015918:	68 cc b9 02 c0       	push   0xc002b9cc
c001591d:	e8 cf d5 ff ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c0015922:	83 c4 20             	add    esp,0x20
c0015925:	83 ec 0c             	sub    esp,0xc
c0015928:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001592b:	e8 54 f4 ff ff       	call   c0014d84 <displayDebugInfo(regs*)>
c0015930:	8d 65 f8             	lea    esp,[ebp-0x8]
c0015933:	5b                   	pop    ebx
c0015934:	5e                   	pop    esi
c0015935:	5d                   	pop    ebp
c0015936:	c3                   	ret    

c0015937 <displayProgramFault(char const*)>:
c0015937:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001593c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001593f:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015945:	85 c0                	test   eax,eax
c0015947:	74 15                	je     c001595e <displayProgramFault(char const*)+0x27>
c0015949:	83 ec 0c             	sub    esp,0xc
c001594c:	6a 04                	push   0x4
c001594e:	6a 0f                	push   0xf
c0015950:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015954:	50                   	push   eax
c0015955:	e8 80 b4 ff ff       	call   c0010dda <VgaText::puts(char const*, VgaColour, VgaColour)>
c001595a:	83 c4 1c             	add    esp,0x1c
c001595d:	c3                   	ret    
c001595e:	c3                   	ret    

c001595f <setupInterruptController()>:
c001595f:	55                   	push   ebp
c0015960:	89 e5                	mov    ebp,esp
c0015962:	53                   	push   ebx
c0015963:	83 ec 24             	sub    esp,0x24
c0015966:	b8 00 00 00 00       	mov    eax,0x0
c001596b:	85 c0                	test   eax,eax
c001596d:	0f 95 c0             	setne  al
c0015970:	84 c0                	test   al,al
c0015972:	74 5b                	je     c00159cf <setupInterruptController()+0x70>
c0015974:	c7 45 e8 58 21 00 00 	mov    DWORD PTR [ebp-0x18],0x2158
c001597b:	83 ec 0c             	sub    esp,0xc
c001597e:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c0015981:	e8 ac 9f ff ff       	call   c000f932 <malloc>
c0015986:	83 c4 10             	add    esp,0x10
c0015989:	89 c3                	mov    ebx,eax
c001598b:	83 ec 0c             	sub    esp,0xc
c001598e:	53                   	push   ebx
c001598f:	e8 ba 07 01 00       	call   c002614e <APIC::APIC()>
c0015994:	83 c4 10             	add    esp,0x10
c0015997:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c001599a:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c001599d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00159a0:	8b 00                	mov    eax,DWORD PTR [eax]
c00159a2:	83 c0 08             	add    eax,0x8
c00159a5:	8b 00                	mov    eax,DWORD PTR [eax]
c00159a7:	6a 00                	push   0x0
c00159a9:	6a 00                	push   0x0
c00159ab:	6a 00                	push   0x0
c00159ad:	52                   	push   edx
c00159ae:	ff d0                	call   eax
c00159b0:	83 c4 10             	add    esp,0x10
c00159b3:	a1 68 ee 02 c0       	mov    eax,ds:0xc002ee68
c00159b8:	83 ec 08             	sub    esp,0x8
c00159bb:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00159be:	50                   	push   eax
c00159bf:	e8 62 e9 ff ff       	call   c0014326 <Device::addChild(Device*)>
c00159c4:	83 c4 10             	add    esp,0x10
c00159c7:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00159ca:	e9 89 03 00 00       	jmp    c0015d58 <setupInterruptController()+0x3f9>
c00159cf:	a0 00 18 03 c0       	mov    al,ds:0xc0031800
c00159d4:	84 c0                	test   al,al
c00159d6:	75 24                	jne    c00159fc <setupInterruptController()+0x9d>
c00159d8:	a1 68 ee 02 c0       	mov    eax,ds:0xc002ee68
c00159dd:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00159e3:	83 e2 fe             	and    edx,0xfffffffe
c00159e6:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00159ec:	83 ec 0c             	sub    esp,0xc
c00159ef:	68 f1 b9 02 c0       	push   0xc002b9f1
c00159f4:	e8 f8 d4 ff ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c00159f9:	83 c4 10             	add    esp,0x10
c00159fc:	a1 68 ee 02 c0       	mov    eax,ds:0xc002ee68
c0015a01:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0015a07:	83 e0 01             	and    eax,0x1
c0015a0a:	84 c0                	test   al,al
c0015a0c:	0f 95 c0             	setne  al
c0015a0f:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0015a12:	c7 45 e4 58 21 00 00 	mov    DWORD PTR [ebp-0x1c],0x2158
c0015a19:	83 ec 0c             	sub    esp,0xc
c0015a1c:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0015a1f:	e8 0e 9f ff ff       	call   c000f932 <malloc>
c0015a24:	83 c4 10             	add    esp,0x10
c0015a27:	89 c3                	mov    ebx,eax
c0015a29:	83 ec 0c             	sub    esp,0xc
c0015a2c:	53                   	push   ebx
c0015a2d:	e8 74 0c 01 00       	call   c00266a6 <PIC::PIC()>
c0015a32:	83 c4 10             	add    esp,0x10
c0015a35:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0015a38:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015a3b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a3e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a40:	83 c0 08             	add    eax,0x8
c0015a43:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a45:	6a 00                	push   0x0
c0015a47:	6a 00                	push   0x0
c0015a49:	6a 00                	push   0x0
c0015a4b:	52                   	push   edx
c0015a4c:	ff d0                	call   eax
c0015a4e:	83 c4 10             	add    esp,0x10
c0015a51:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c0015a55:	74 73                	je     c0015aca <setupInterruptController()+0x16b>
c0015a57:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015a5a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a5d:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a5f:	83 c0 0c             	add    eax,0xc
c0015a62:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a64:	6a 00                	push   0x0
c0015a66:	6a 00                	push   0x0
c0015a68:	6a 00                	push   0x0
c0015a6a:	52                   	push   edx
c0015a6b:	ff d0                	call   eax
c0015a6d:	83 c4 10             	add    esp,0x10
c0015a70:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0015a74:	74 15                	je     c0015a8b <setupInterruptController()+0x12c>
c0015a76:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a79:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a7b:	83 c0 04             	add    eax,0x4
c0015a7e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a80:	83 ec 0c             	sub    esp,0xc
c0015a83:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015a86:	ff d0                	call   eax
c0015a88:	83 c4 10             	add    esp,0x10
c0015a8b:	c7 45 e0 58 21 00 00 	mov    DWORD PTR [ebp-0x20],0x2158
c0015a92:	83 ec 0c             	sub    esp,0xc
c0015a95:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0015a98:	e8 95 9e ff ff       	call   c000f932 <malloc>
c0015a9d:	83 c4 10             	add    esp,0x10
c0015aa0:	89 c3                	mov    ebx,eax
c0015aa2:	83 ec 0c             	sub    esp,0xc
c0015aa5:	53                   	push   ebx
c0015aa6:	e8 a3 06 01 00       	call   c002614e <APIC::APIC()>
c0015aab:	83 c4 10             	add    esp,0x10
c0015aae:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0015ab1:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015ab4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015ab7:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ab9:	83 c0 08             	add    eax,0x8
c0015abc:	8b 00                	mov    eax,DWORD PTR [eax]
c0015abe:	6a 00                	push   0x0
c0015ac0:	6a 00                	push   0x0
c0015ac2:	6a 00                	push   0x0
c0015ac4:	52                   	push   edx
c0015ac5:	ff d0                	call   eax
c0015ac7:	83 c4 10             	add    esp,0x10
c0015aca:	a1 68 ee 02 c0       	mov    eax,ds:0xc002ee68
c0015acf:	83 ec 08             	sub    esp,0x8
c0015ad2:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015ad5:	50                   	push   eax
c0015ad6:	e8 4b e8 ff ff       	call   c0014326 <Device::addChild(Device*)>
c0015adb:	83 c4 10             	add    esp,0x10
c0015ade:	c7 05 08 f0 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f008,0x0
c0015ae8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015aeb:	8b 00                	mov    eax,DWORD PTR [eax]
c0015aed:	83 c0 24             	add    eax,0x24
c0015af0:	8b 00                	mov    eax,DWORD PTR [eax]
c0015af2:	6a 00                	push   0x0
c0015af4:	68 fb 52 01 c0       	push   0xc00152fb
c0015af9:	6a 00                	push   0x0
c0015afb:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015afe:	ff d0                	call   eax
c0015b00:	83 c4 10             	add    esp,0x10
c0015b03:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b06:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b08:	83 c0 24             	add    eax,0x24
c0015b0b:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b0d:	6a 00                	push   0x0
c0015b0f:	68 fb 52 01 c0       	push   0xc00152fb
c0015b14:	6a 01                	push   0x1
c0015b16:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b19:	ff d0                	call   eax
c0015b1b:	83 c4 10             	add    esp,0x10
c0015b1e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b21:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b23:	83 c0 24             	add    eax,0x24
c0015b26:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b28:	6a 00                	push   0x0
c0015b2a:	68 e1 4b 01 c0       	push   0xc0014be1
c0015b2f:	6a 02                	push   0x2
c0015b31:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b34:	ff d0                	call   eax
c0015b36:	83 c4 10             	add    esp,0x10
c0015b39:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b3c:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b3e:	83 c0 24             	add    eax,0x24
c0015b41:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b43:	6a 00                	push   0x0
c0015b45:	68 fb 52 01 c0       	push   0xc00152fb
c0015b4a:	6a 03                	push   0x3
c0015b4c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b4f:	ff d0                	call   eax
c0015b51:	83 c4 10             	add    esp,0x10
c0015b54:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b57:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b59:	83 c0 24             	add    eax,0x24
c0015b5c:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b5e:	6a 00                	push   0x0
c0015b60:	68 fb 52 01 c0       	push   0xc00152fb
c0015b65:	6a 04                	push   0x4
c0015b67:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b6a:	ff d0                	call   eax
c0015b6c:	83 c4 10             	add    esp,0x10
c0015b6f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b72:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b74:	83 c0 24             	add    eax,0x24
c0015b77:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b79:	6a 00                	push   0x0
c0015b7b:	68 fb 52 01 c0       	push   0xc00152fb
c0015b80:	6a 05                	push   0x5
c0015b82:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b85:	ff d0                	call   eax
c0015b87:	83 c4 10             	add    esp,0x10
c0015b8a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b8d:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b8f:	83 c0 24             	add    eax,0x24
c0015b92:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b94:	6a 00                	push   0x0
c0015b96:	68 1a 53 01 c0       	push   0xc001531a
c0015b9b:	6a 06                	push   0x6
c0015b9d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015ba0:	ff d0                	call   eax
c0015ba2:	83 c4 10             	add    esp,0x10
c0015ba5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015ba8:	8b 00                	mov    eax,DWORD PTR [eax]
c0015baa:	83 c0 24             	add    eax,0x24
c0015bad:	8b 00                	mov    eax,DWORD PTR [eax]
c0015baf:	6a 00                	push   0x0
c0015bb1:	68 13 52 01 c0       	push   0xc0015213
c0015bb6:	6a 07                	push   0x7
c0015bb8:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015bbb:	ff d0                	call   eax
c0015bbd:	83 c4 10             	add    esp,0x10
c0015bc0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015bc3:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bc5:	83 c0 24             	add    eax,0x24
c0015bc8:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bca:	6a 00                	push   0x0
c0015bcc:	68 fc 49 01 c0       	push   0xc00149fc
c0015bd1:	6a 08                	push   0x8
c0015bd3:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015bd6:	ff d0                	call   eax
c0015bd8:	83 c4 10             	add    esp,0x10
c0015bdb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015bde:	8b 00                	mov    eax,DWORD PTR [eax]
c0015be0:	83 c0 24             	add    eax,0x24
c0015be3:	8b 00                	mov    eax,DWORD PTR [eax]
c0015be5:	6a 00                	push   0x0
c0015be7:	68 fb 52 01 c0       	push   0xc00152fb
c0015bec:	6a 09                	push   0x9
c0015bee:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015bf1:	ff d0                	call   eax
c0015bf3:	83 c4 10             	add    esp,0x10
c0015bf6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015bf9:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bfb:	83 c0 24             	add    eax,0x24
c0015bfe:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c00:	6a 00                	push   0x0
c0015c02:	68 fb 52 01 c0       	push   0xc00152fb
c0015c07:	6a 0a                	push   0xa
c0015c09:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c0c:	ff d0                	call   eax
c0015c0e:	83 c4 10             	add    esp,0x10
c0015c11:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c14:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c16:	83 c0 24             	add    eax,0x24
c0015c19:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c1b:	6a 00                	push   0x0
c0015c1d:	68 fb 52 01 c0       	push   0xc00152fb
c0015c22:	6a 0b                	push   0xb
c0015c24:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c27:	ff d0                	call   eax
c0015c29:	83 c4 10             	add    esp,0x10
c0015c2c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c2f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c31:	83 c0 24             	add    eax,0x24
c0015c34:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c36:	6a 00                	push   0x0
c0015c38:	68 fb 52 01 c0       	push   0xc00152fb
c0015c3d:	6a 0c                	push   0xc
c0015c3f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c42:	ff d0                	call   eax
c0015c44:	83 c4 10             	add    esp,0x10
c0015c47:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c4a:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c4c:	83 c0 24             	add    eax,0x24
c0015c4f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c51:	6a 00                	push   0x0
c0015c53:	68 86 52 01 c0       	push   0xc0015286
c0015c58:	6a 0d                	push   0xd
c0015c5a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c5d:	ff d0                	call   eax
c0015c5f:	83 c4 10             	add    esp,0x10
c0015c62:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c65:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c67:	83 c0 24             	add    eax,0x24
c0015c6a:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c6c:	6a 00                	push   0x0
c0015c6e:	68 bf 52 01 c0       	push   0xc00152bf
c0015c73:	6a 0e                	push   0xe
c0015c75:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c78:	ff d0                	call   eax
c0015c7a:	83 c4 10             	add    esp,0x10
c0015c7d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c80:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c82:	83 c0 24             	add    eax,0x24
c0015c85:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c87:	6a 00                	push   0x0
c0015c89:	68 fb 52 01 c0       	push   0xc00152fb
c0015c8e:	6a 0f                	push   0xf
c0015c90:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c93:	ff d0                	call   eax
c0015c95:	83 c4 10             	add    esp,0x10
c0015c98:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c9b:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c9d:	83 c0 24             	add    eax,0x24
c0015ca0:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ca2:	6a 00                	push   0x0
c0015ca4:	68 fb 52 01 c0       	push   0xc00152fb
c0015ca9:	6a 10                	push   0x10
c0015cab:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015cae:	ff d0                	call   eax
c0015cb0:	83 c4 10             	add    esp,0x10
c0015cb3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015cb6:	8b 00                	mov    eax,DWORD PTR [eax]
c0015cb8:	83 c0 24             	add    eax,0x24
c0015cbb:	8b 00                	mov    eax,DWORD PTR [eax]
c0015cbd:	6a 00                	push   0x0
c0015cbf:	68 fb 52 01 c0       	push   0xc00152fb
c0015cc4:	6a 11                	push   0x11
c0015cc6:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015cc9:	ff d0                	call   eax
c0015ccb:	83 c4 10             	add    esp,0x10
c0015cce:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015cd1:	8b 00                	mov    eax,DWORD PTR [eax]
c0015cd3:	83 c0 24             	add    eax,0x24
c0015cd6:	8b 00                	mov    eax,DWORD PTR [eax]
c0015cd8:	6a 00                	push   0x0
c0015cda:	68 fb 52 01 c0       	push   0xc00152fb
c0015cdf:	6a 12                	push   0x12
c0015ce1:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015ce4:	ff d0                	call   eax
c0015ce6:	83 c4 10             	add    esp,0x10
c0015ce9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015cec:	8b 00                	mov    eax,DWORD PTR [eax]
c0015cee:	83 c0 24             	add    eax,0x24
c0015cf1:	8b 00                	mov    eax,DWORD PTR [eax]
c0015cf3:	6a 00                	push   0x0
c0015cf5:	68 fb 52 01 c0       	push   0xc00152fb
c0015cfa:	6a 13                	push   0x13
c0015cfc:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015cff:	ff d0                	call   eax
c0015d01:	83 c4 10             	add    esp,0x10
c0015d04:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015d07:	8b 00                	mov    eax,DWORD PTR [eax]
c0015d09:	83 c0 24             	add    eax,0x24
c0015d0c:	8b 00                	mov    eax,DWORD PTR [eax]
c0015d0e:	6a 00                	push   0x0
c0015d10:	68 fb 52 01 c0       	push   0xc00152fb
c0015d15:	6a 14                	push   0x14
c0015d17:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015d1a:	ff d0                	call   eax
c0015d1c:	83 c4 10             	add    esp,0x10
c0015d1f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015d22:	8b 00                	mov    eax,DWORD PTR [eax]
c0015d24:	83 c0 24             	add    eax,0x24
c0015d27:	8b 00                	mov    eax,DWORD PTR [eax]
c0015d29:	6a 00                	push   0x0
c0015d2b:	68 fb 52 01 c0       	push   0xc00152fb
c0015d30:	6a 1e                	push   0x1e
c0015d32:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015d35:	ff d0                	call   eax
c0015d37:	83 c4 10             	add    esp,0x10
c0015d3a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015d3d:	8b 00                	mov    eax,DWORD PTR [eax]
c0015d3f:	83 c0 24             	add    eax,0x24
c0015d42:	8b 00                	mov    eax,DWORD PTR [eax]
c0015d44:	6a 00                	push   0x0
c0015d46:	68 ef ca 01 c0       	push   0xc001caef
c0015d4b:	6a 60                	push   0x60
c0015d4d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015d50:	ff d0                	call   eax
c0015d52:	83 c4 10             	add    esp,0x10
c0015d55:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015d58:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015d5b:	c9                   	leave  
c0015d5c:	c3                   	ret    
c0015d5d:	90                   	nop

c0015d5e <InterruptController::convertLegacyIRQNumber(int)>:
c0015d5e:	55                   	push   ebp
c0015d5f:	89 e5                	mov    ebp,esp
c0015d61:	83 ec 08             	sub    esp,0x8
c0015d64:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015d67:	83 ec 0c             	sub    esp,0xc
c0015d6a:	50                   	push   eax
c0015d6b:	e8 a2 e8 ff ff       	call   c0014612 <Device::getName()>
c0015d70:	83 c4 10             	add    esp,0x10
c0015d73:	8a 00                	mov    al,BYTE PTR [eax]
c0015d75:	3c 41                	cmp    al,0x41
c0015d77:	0f 94 c0             	sete   al
c0015d7a:	84 c0                	test   al,al
c0015d7c:	74 28                	je     c0015da6 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0015d7e:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0015d82:	7f 12                	jg     c0015d96 <InterruptController::convertLegacyIRQNumber(int)+0x38>
c0015d84:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015d87:	05 c0 e0 02 c0       	add    eax,0xc002e0c0
c0015d8c:	8a 00                	mov    al,BYTE PTR [eax]
c0015d8e:	0f b6 c0             	movzx  eax,al
c0015d91:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0015d94:	eb 10                	jmp    c0015da6 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0015d96:	83 ec 0c             	sub    esp,0xc
c0015d99:	68 e0 b6 02 c0       	push   0xc002b6e0
c0015d9e:	e8 0e 4b 00 00       	call   c001a8b1 <Krnl::panic(char const*)>
c0015da3:	83 c4 10             	add    esp,0x10
c0015da6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015da9:	c9                   	leave  
c0015daa:	c3                   	ret    
c0015dab:	90                   	nop

c0015dac <startGUI(void*)>:
c0015dac:	55                   	push   ebp
c0015dad:	89 e5                	mov    ebp,esp
c0015daf:	53                   	push   ebx
c0015db0:	83 ec 04             	sub    esp,0x4
c0015db3:	a1 a8 23 03 c0       	mov    eax,ds:0xc00323a8
c0015db8:	48                   	dec    eax
c0015db9:	a3 a8 23 03 c0       	mov    ds:0xc00323a8,eax
c0015dbe:	a1 a8 23 03 c0       	mov    eax,ds:0xc00323a8
c0015dc3:	85 c0                	test   eax,eax
c0015dc5:	75 01                	jne    c0015dc8 <startGUI(void*)+0x1c>
c0015dc7:	fb                   	sti    
c0015dc8:	8b 1d 68 ee 02 c0    	mov    ebx,DWORD PTR ds:0xc002ee68
c0015dce:	83 ec 08             	sub    esp,0x8
c0015dd1:	6a 01                	push   0x1
c0015dd3:	68 54 ba 02 c0       	push   0xc002ba54
c0015dd8:	e8 ed 7c 00 00       	call   c001daca <Thr::loadDLL(char const*, bool)>
c0015ddd:	83 c4 10             	add    esp,0x10
c0015de0:	83 ec 08             	sub    esp,0x8
c0015de3:	53                   	push   ebx
c0015de4:	50                   	push   eax
c0015de5:	e8 14 7f 00 00       	call   c001dcfe <Thr::executeDLL(unsigned long, void*)>
c0015dea:	83 c4 10             	add    esp,0x10
c0015ded:	8b 1d 68 ee 02 c0    	mov    ebx,DWORD PTR ds:0xc002ee68
c0015df3:	83 ec 08             	sub    esp,0x8
c0015df6:	6a 01                	push   0x1
c0015df8:	68 6e ba 02 c0       	push   0xc002ba6e
c0015dfd:	e8 c8 7c 00 00       	call   c001daca <Thr::loadDLL(char const*, bool)>
c0015e02:	83 c4 10             	add    esp,0x10
c0015e05:	83 ec 08             	sub    esp,0x8
c0015e08:	53                   	push   ebx
c0015e09:	50                   	push   eax
c0015e0a:	e8 ef 7e 00 00       	call   c001dcfe <Thr::executeDLL(unsigned long, void*)>
c0015e0f:	83 c4 10             	add    esp,0x10
c0015e12:	90                   	nop
c0015e13:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015e16:	c9                   	leave  
c0015e17:	c3                   	ret    

c0015e18 <startGUIVESA(void*)>:
c0015e18:	55                   	push   ebp
c0015e19:	89 e5                	mov    ebp,esp
c0015e1b:	53                   	push   ebx
c0015e1c:	83 ec 04             	sub    esp,0x4
c0015e1f:	a1 a8 23 03 c0       	mov    eax,ds:0xc00323a8
c0015e24:	48                   	dec    eax
c0015e25:	a3 a8 23 03 c0       	mov    ds:0xc00323a8,eax
c0015e2a:	a1 a8 23 03 c0       	mov    eax,ds:0xc00323a8
c0015e2f:	85 c0                	test   eax,eax
c0015e31:	75 01                	jne    c0015e34 <startGUIVESA(void*)+0x1c>
c0015e33:	fb                   	sti    
c0015e34:	8b 1d 68 ee 02 c0    	mov    ebx,DWORD PTR ds:0xc002ee68
c0015e3a:	83 ec 08             	sub    esp,0x8
c0015e3d:	6a 01                	push   0x1
c0015e3f:	68 88 ba 02 c0       	push   0xc002ba88
c0015e44:	e8 81 7c 00 00       	call   c001daca <Thr::loadDLL(char const*, bool)>
c0015e49:	83 c4 10             	add    esp,0x10
c0015e4c:	83 ec 08             	sub    esp,0x8
c0015e4f:	53                   	push   ebx
c0015e50:	50                   	push   eax
c0015e51:	e8 a8 7e 00 00       	call   c001dcfe <Thr::executeDLL(unsigned long, void*)>
c0015e56:	83 c4 10             	add    esp,0x10
c0015e59:	8b 1d 68 ee 02 c0    	mov    ebx,DWORD PTR ds:0xc002ee68
c0015e5f:	83 ec 08             	sub    esp,0x8
c0015e62:	6a 01                	push   0x1
c0015e64:	68 6e ba 02 c0       	push   0xc002ba6e
c0015e69:	e8 5c 7c 00 00       	call   c001daca <Thr::loadDLL(char const*, bool)>
c0015e6e:	83 c4 10             	add    esp,0x10
c0015e71:	83 ec 08             	sub    esp,0x8
c0015e74:	53                   	push   ebx
c0015e75:	50                   	push   eax
c0015e76:	e8 83 7e 00 00       	call   c001dcfe <Thr::executeDLL(unsigned long, void*)>
c0015e7b:	83 c4 10             	add    esp,0x10
c0015e7e:	90                   	nop
c0015e7f:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015e82:	c9                   	leave  
c0015e83:	c3                   	ret    

c0015e84 <sendKeyToTerminal(unsigned char)>:
c0015e84:	55                   	push   ebp
c0015e85:	89 e5                	mov    ebp,esp
c0015e87:	83 ec 28             	sub    esp,0x28
c0015e8a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e8d:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0015e90:	a1 44 ef 02 c0       	mov    eax,ds:0xc002ef44
c0015e95:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c0015e99:	83 ec 08             	sub    esp,0x8
c0015e9c:	52                   	push   edx
c0015e9d:	50                   	push   eax
c0015e9e:	e8 11 b4 ff ff       	call   c00112b4 <VgaText::receiveKey(unsigned char)>
c0015ea3:	83 c4 10             	add    esp,0x10
c0015ea6:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c0015eaa:	0f 85 8f 00 00 00    	jne    c0015f3f <sendKeyToTerminal(unsigned char)+0xbb>
c0015eb0:	fa                   	cli    
c0015eb1:	a1 a8 23 03 c0       	mov    eax,ds:0xc00323a8
c0015eb6:	40                   	inc    eax
c0015eb7:	a3 a8 23 03 c0       	mov    ds:0xc00323a8,eax
c0015ebc:	a1 a4 23 03 c0       	mov    eax,ds:0xc00323a4
c0015ec1:	40                   	inc    eax
c0015ec2:	a3 a4 23 03 c0       	mov    ds:0xc00323a4,eax
c0015ec7:	a1 20 f0 02 c0       	mov    eax,ds:0xc002f020
c0015ecc:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015ecf:	c7 05 20 f0 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f020,0x0
c0015ed9:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0015edd:	74 1f                	je     c0015efe <sendKeyToTerminal(unsigned char)+0x7a>
c0015edf:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015ee2:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0015ee5:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015ee8:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015eeb:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015eee:	83 ec 0c             	sub    esp,0xc
c0015ef1:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0015ef4:	e8 7d 8a 00 00       	call   c001e976 <unblockTask(ThreadControlBlock*)>
c0015ef9:	83 c4 10             	add    esp,0x10
c0015efc:	eb db                	jmp    c0015ed9 <sendKeyToTerminal(unsigned char)+0x55>
c0015efe:	a1 a4 23 03 c0       	mov    eax,ds:0xc00323a4
c0015f03:	48                   	dec    eax
c0015f04:	a3 a4 23 03 c0       	mov    ds:0xc00323a4,eax
c0015f09:	a1 a4 23 03 c0       	mov    eax,ds:0xc00323a4
c0015f0e:	85 c0                	test   eax,eax
c0015f10:	75 18                	jne    c0015f2a <sendKeyToTerminal(unsigned char)+0xa6>
c0015f12:	a1 a0 23 03 c0       	mov    eax,ds:0xc00323a0
c0015f17:	85 c0                	test   eax,eax
c0015f19:	74 0f                	je     c0015f2a <sendKeyToTerminal(unsigned char)+0xa6>
c0015f1b:	c7 05 a0 23 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00323a0,0x0
c0015f25:	e8 88 85 00 00       	call   c001e4b2 <schedule()>
c0015f2a:	a1 a8 23 03 c0       	mov    eax,ds:0xc00323a8
c0015f2f:	48                   	dec    eax
c0015f30:	a3 a8 23 03 c0       	mov    ds:0xc00323a8,eax
c0015f35:	a1 a8 23 03 c0       	mov    eax,ds:0xc00323a8
c0015f3a:	85 c0                	test   eax,eax
c0015f3c:	75 01                	jne    c0015f3f <sendKeyToTerminal(unsigned char)+0xbb>
c0015f3e:	fb                   	sti    
c0015f3f:	90                   	nop
c0015f40:	c9                   	leave  
c0015f41:	c3                   	ret    

c0015f42 <sendKeyboardToken(KeyboardToken)>:
c0015f42:	55                   	push   ebp
c0015f43:	89 e5                	mov    ebp,esp
c0015f45:	83 ec 18             	sub    esp,0x18
c0015f48:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c0015f4b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f4e:	0f b7 c0             	movzx  eax,ax
c0015f51:	83 f2 01             	xor    edx,0x1
c0015f54:	88 90 40 f0 02 c0    	mov    BYTE PTR [eax-0x3ffd0fc0],dl
c0015f5a:	a1 28 f0 02 c0       	mov    eax,ds:0xc002f028
c0015f5f:	85 c0                	test   eax,eax
c0015f61:	74 24                	je     c0015f87 <sendKeyboardToken(KeyboardToken)+0x45>
c0015f63:	8b 0d 28 f0 02 c0    	mov    ecx,DWORD PTR ds:0xc002f028
c0015f69:	83 ec 04             	sub    esp,0x4
c0015f6c:	68 40 f0 02 c0       	push   0xc002f040
c0015f71:	83 ec 08             	sub    esp,0x8
c0015f74:	89 e2                	mov    edx,esp
c0015f76:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f79:	89 02                	mov    DWORD PTR [edx],eax
c0015f7b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015f7e:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c0015f82:	ff d1                	call   ecx
c0015f84:	83 c4 10             	add    esp,0x10
c0015f87:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f8a:	66 3d 03 02          	cmp    ax,0x203
c0015f8e:	75 07                	jne    c0015f97 <sendKeyboardToken(KeyboardToken)+0x55>
c0015f90:	a0 40 f1 02 c0       	mov    al,ds:0xc002f140
c0015f95:	84 c0                	test   al,al
c0015f97:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c0015f9b:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c0015f9e:	a0 48 f4 02 c0       	mov    al,ds:0xc002f448
c0015fa3:	38 c2                	cmp    dl,al
c0015fa5:	74 1c                	je     c0015fc3 <sendKeyboardToken(KeyboardToken)+0x81>
c0015fa7:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c0015faa:	a2 48 f4 02 c0       	mov    ds:0xc002f448,al
c0015faf:	a0 48 f4 02 c0       	mov    al,ds:0xc002f448
c0015fb4:	0f b6 c0             	movzx  eax,al
c0015fb7:	83 ec 0c             	sub    esp,0xc
c0015fba:	50                   	push   eax
c0015fbb:	e8 7a a6 ff ff       	call   c001063a <setTerminalScrollLock(bool)>
c0015fc0:	83 c4 10             	add    esp,0x10
c0015fc3:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c0015fc6:	84 c0                	test   al,al
c0015fc8:	0f 84 ae 00 00 00    	je     c001607c <sendKeyboardToken(KeyboardToken)+0x13a>
c0015fce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fd1:	66 3d 10 03          	cmp    ax,0x310
c0015fd5:	75 06                	jne    c0015fdd <sendKeyboardToken(KeyboardToken)+0x9b>
c0015fd7:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c0015fdd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fe0:	66 3d 11 03          	cmp    ax,0x311
c0015fe4:	75 06                	jne    c0015fec <sendKeyboardToken(KeyboardToken)+0xaa>
c0015fe6:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c0015fec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fef:	66 3d 12 03          	cmp    ax,0x312
c0015ff3:	75 06                	jne    c0015ffb <sendKeyboardToken(KeyboardToken)+0xb9>
c0015ff5:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c0015ffb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ffe:	66 3d 13 03          	cmp    ax,0x313
c0016002:	75 06                	jne    c001600a <sendKeyboardToken(KeyboardToken)+0xc8>
c0016004:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c001600a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001600d:	66 3d 14 03          	cmp    ax,0x314
c0016011:	75 06                	jne    c0016019 <sendKeyboardToken(KeyboardToken)+0xd7>
c0016013:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c0016019:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001601c:	66 3d 15 03          	cmp    ax,0x315
c0016020:	75 06                	jne    c0016028 <sendKeyboardToken(KeyboardToken)+0xe6>
c0016022:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0016028:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001602b:	66 3d 16 03          	cmp    ax,0x316
c001602f:	75 06                	jne    c0016037 <sendKeyboardToken(KeyboardToken)+0xf5>
c0016031:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c0016037:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001603a:	66 3d 17 03          	cmp    ax,0x317
c001603e:	75 06                	jne    c0016046 <sendKeyboardToken(KeyboardToken)+0x104>
c0016040:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c0016046:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016049:	66 3d 18 03          	cmp    ax,0x318
c001604d:	75 06                	jne    c0016055 <sendKeyboardToken(KeyboardToken)+0x113>
c001604f:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c0016055:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016058:	66 3d 19 03          	cmp    ax,0x319
c001605c:	75 06                	jne    c0016064 <sendKeyboardToken(KeyboardToken)+0x122>
c001605e:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c0016064:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016067:	66 3d 1a 03          	cmp    ax,0x31a
c001606b:	0f 85 c9 00 00 00    	jne    c001613a <sendKeyboardToken(KeyboardToken)+0x1f8>
c0016071:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c0016077:	e9 be 00 00 00       	jmp    c001613a <sendKeyboardToken(KeyboardToken)+0x1f8>
c001607c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001607f:	66 3d 10 03          	cmp    ax,0x310
c0016083:	75 0a                	jne    c001608f <sendKeyboardToken(KeyboardToken)+0x14d>
c0016085:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c001608b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001608f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016092:	66 3d 11 03          	cmp    ax,0x311
c0016096:	75 0a                	jne    c00160a2 <sendKeyboardToken(KeyboardToken)+0x160>
c0016098:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c001609e:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00160a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160a5:	66 3d 12 03          	cmp    ax,0x312
c00160a9:	75 0a                	jne    c00160b5 <sendKeyboardToken(KeyboardToken)+0x173>
c00160ab:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c00160b1:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00160b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160b8:	66 3d 13 03          	cmp    ax,0x313
c00160bc:	75 0a                	jne    c00160c8 <sendKeyboardToken(KeyboardToken)+0x186>
c00160be:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c00160c4:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00160c8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160cb:	66 3d 14 03          	cmp    ax,0x314
c00160cf:	75 0a                	jne    c00160db <sendKeyboardToken(KeyboardToken)+0x199>
c00160d1:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c00160d7:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00160db:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160de:	66 3d 15 03          	cmp    ax,0x315
c00160e2:	75 0a                	jne    c00160ee <sendKeyboardToken(KeyboardToken)+0x1ac>
c00160e4:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c00160ea:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00160ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160f1:	66 3d 16 03          	cmp    ax,0x316
c00160f5:	75 0a                	jne    c0016101 <sendKeyboardToken(KeyboardToken)+0x1bf>
c00160f7:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c00160fd:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0016101:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016104:	66 3d 17 03          	cmp    ax,0x317
c0016108:	75 0a                	jne    c0016114 <sendKeyboardToken(KeyboardToken)+0x1d2>
c001610a:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c0016110:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0016114:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016117:	66 3d 18 03          	cmp    ax,0x318
c001611b:	75 0a                	jne    c0016127 <sendKeyboardToken(KeyboardToken)+0x1e5>
c001611d:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c0016123:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0016127:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001612a:	66 3d 19 03          	cmp    ax,0x319
c001612e:	75 0a                	jne    c001613a <sendKeyboardToken(KeyboardToken)+0x1f8>
c0016130:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c0016136:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001613a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001613d:	66 3d 00 02          	cmp    ax,0x200
c0016141:	75 2c                	jne    c001616f <sendKeyboardToken(KeyboardToken)+0x22d>
c0016143:	a0 40 f4 02 c0       	mov    al,ds:0xc002f440
c0016148:	83 f0 01             	xor    eax,0x1
c001614b:	84 c0                	test   al,al
c001614d:	74 20                	je     c001616f <sendKeyboardToken(KeyboardToken)+0x22d>
c001614f:	a1 d0 23 03 c0       	mov    eax,ds:0xc00323d0
c0016154:	6a 01                	push   0x1
c0016156:	6a 00                	push   0x0
c0016158:	68 ac 5d 01 c0       	push   0xc0015dac
c001615d:	50                   	push   eax
c001615e:	e8 0b 81 00 00       	call   c001e26e <Process::createThread(void (*)(void*), void*, int)>
c0016163:	83 c4 10             	add    esp,0x10
c0016166:	c6 05 40 f4 02 c0 01 	mov    BYTE PTR ds:0xc002f440,0x1
c001616d:	eb 33                	jmp    c00161a2 <sendKeyboardToken(KeyboardToken)+0x260>
c001616f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016172:	66 3d 01 02          	cmp    ax,0x201
c0016176:	75 2a                	jne    c00161a2 <sendKeyboardToken(KeyboardToken)+0x260>
c0016178:	a0 40 f4 02 c0       	mov    al,ds:0xc002f440
c001617d:	83 f0 01             	xor    eax,0x1
c0016180:	84 c0                	test   al,al
c0016182:	74 1e                	je     c00161a2 <sendKeyboardToken(KeyboardToken)+0x260>
c0016184:	a1 d0 23 03 c0       	mov    eax,ds:0xc00323d0
c0016189:	6a 01                	push   0x1
c001618b:	6a 00                	push   0x0
c001618d:	68 18 5e 01 c0       	push   0xc0015e18
c0016192:	50                   	push   eax
c0016193:	e8 d6 80 00 00       	call   c001e26e <Process::createThread(void (*)(void*), void*, int)>
c0016198:	83 c4 10             	add    esp,0x10
c001619b:	c6 05 40 f4 02 c0 01 	mov    BYTE PTR ds:0xc002f440,0x1
c00161a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00161a5:	66 3d 1d 03          	cmp    ax,0x31d
c00161a9:	75 06                	jne    c00161b1 <sendKeyboardToken(KeyboardToken)+0x26f>
c00161ab:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c00161b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00161b4:	66 3d 1c 03          	cmp    ax,0x31c
c00161b8:	75 06                	jne    c00161c0 <sendKeyboardToken(KeyboardToken)+0x27e>
c00161ba:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c00161c0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00161c3:	66 3d 1b 03          	cmp    ax,0x31b
c00161c7:	75 06                	jne    c00161cf <sendKeyboardToken(KeyboardToken)+0x28d>
c00161c9:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c00161cf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00161d2:	66 3d 1e 03          	cmp    ax,0x31e
c00161d6:	75 06                	jne    c00161de <sendKeyboardToken(KeyboardToken)+0x29c>
c00161d8:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c00161de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00161e1:	66 3d 1f 03          	cmp    ax,0x31f
c00161e5:	75 06                	jne    c00161ed <sendKeyboardToken(KeyboardToken)+0x2ab>
c00161e7:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c00161ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00161f0:	66 3d 1a 03          	cmp    ax,0x31a
c00161f4:	75 06                	jne    c00161fc <sendKeyboardToken(KeyboardToken)+0x2ba>
c00161f6:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c00161fc:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c0016200:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0016203:	83 f0 01             	xor    eax,0x1
c0016206:	84 c0                	test   al,al
c0016208:	74 77                	je     c0016281 <sendKeyboardToken(KeyboardToken)+0x33f>
c001620a:	a0 41 f1 02 c0       	mov    al,ds:0xc002f141
c001620f:	84 c0                	test   al,al
c0016211:	74 41                	je     c0016254 <sendKeyboardToken(KeyboardToken)+0x312>
c0016213:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0016217:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c001621b:	74 2b                	je     c0016248 <sendKeyboardToken(KeyboardToken)+0x306>
c001621d:	8b 15 44 f4 02 c0    	mov    edx,DWORD PTR ds:0xc002f444
c0016223:	89 d0                	mov    eax,edx
c0016225:	c1 e0 02             	shl    eax,0x2
c0016228:	01 d0                	add    eax,edx
c001622a:	01 c0                	add    eax,eax
c001622c:	a3 44 f4 02 c0       	mov    ds:0xc002f444,eax
c0016231:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016234:	0f b7 c0             	movzx  eax,ax
c0016237:	8d 50 d0             	lea    edx,[eax-0x30]
c001623a:	a1 44 f4 02 c0       	mov    eax,ds:0xc002f444
c001623f:	01 d0                	add    eax,edx
c0016241:	a3 44 f4 02 c0       	mov    ds:0xc002f444,eax
c0016246:	eb 6d                	jmp    c00162b5 <sendKeyboardToken(KeyboardToken)+0x373>
c0016248:	c7 05 44 f4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f444,0x0
c0016252:	eb 61                	jmp    c00162b5 <sendKeyboardToken(KeyboardToken)+0x373>
c0016254:	a1 44 f4 02 c0       	mov    eax,ds:0xc002f444
c0016259:	85 c0                	test   eax,eax
c001625b:	74 18                	je     c0016275 <sendKeyboardToken(KeyboardToken)+0x333>
c001625d:	a1 44 f4 02 c0       	mov    eax,ds:0xc002f444
c0016262:	0f b6 c0             	movzx  eax,al
c0016265:	83 ec 0c             	sub    esp,0xc
c0016268:	50                   	push   eax
c0016269:	e8 16 fc ff ff       	call   c0015e84 <sendKeyToTerminal(unsigned char)>
c001626e:	83 c4 10             	add    esp,0x10
c0016271:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0016275:	c7 05 44 f4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f444,0x0
c001627f:	eb 34                	jmp    c00162b5 <sendKeyboardToken(KeyboardToken)+0x373>
c0016281:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016284:	66 3d 01 01          	cmp    ax,0x101
c0016288:	75 2b                	jne    c00162b5 <sendKeyboardToken(KeyboardToken)+0x373>
c001628a:	a1 44 f4 02 c0       	mov    eax,ds:0xc002f444
c001628f:	85 c0                	test   eax,eax
c0016291:	74 18                	je     c00162ab <sendKeyboardToken(KeyboardToken)+0x369>
c0016293:	a1 44 f4 02 c0       	mov    eax,ds:0xc002f444
c0016298:	0f b6 c0             	movzx  eax,al
c001629b:	83 ec 0c             	sub    esp,0xc
c001629e:	50                   	push   eax
c001629f:	e8 e0 fb ff ff       	call   c0015e84 <sendKeyToTerminal(unsigned char)>
c00162a4:	83 c4 10             	add    esp,0x10
c00162a7:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00162ab:	c7 05 44 f4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f444,0x0
c00162b5:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c00162b8:	83 f0 01             	xor    eax,0x1
c00162bb:	84 c0                	test   al,al
c00162bd:	74 4c                	je     c001630b <sendKeyboardToken(KeyboardToken)+0x3c9>
c00162bf:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00162c2:	83 f0 01             	xor    eax,0x1
c00162c5:	84 c0                	test   al,al
c00162c7:	74 42                	je     c001630b <sendKeyboardToken(KeyboardToken)+0x3c9>
c00162c9:	a0 40 f1 02 c0       	mov    al,ds:0xc002f140
c00162ce:	83 f0 01             	xor    eax,0x1
c00162d1:	84 c0                	test   al,al
c00162d3:	74 36                	je     c001630b <sendKeyboardToken(KeyboardToken)+0x3c9>
c00162d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00162d8:	66 83 f8 1f          	cmp    ax,0x1f
c00162dc:	76 09                	jbe    c00162e7 <sendKeyboardToken(KeyboardToken)+0x3a5>
c00162de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00162e1:	66 83 f8 7e          	cmp    ax,0x7e
c00162e5:	76 12                	jbe    c00162f9 <sendKeyboardToken(KeyboardToken)+0x3b7>
c00162e7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00162ea:	66 83 f8 0a          	cmp    ax,0xa
c00162ee:	74 09                	je     c00162f9 <sendKeyboardToken(KeyboardToken)+0x3b7>
c00162f0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00162f3:	66 83 f8 08          	cmp    ax,0x8
c00162f7:	75 12                	jne    c001630b <sendKeyboardToken(KeyboardToken)+0x3c9>
c00162f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00162fc:	0f b6 c0             	movzx  eax,al
c00162ff:	83 ec 0c             	sub    esp,0xc
c0016302:	50                   	push   eax
c0016303:	e8 7c fb ff ff       	call   c0015e84 <sendKeyToTerminal(unsigned char)>
c0016308:	83 c4 10             	add    esp,0x10
c001630b:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c001630e:	83 f0 01             	xor    eax,0x1
c0016311:	84 c0                	test   al,al
c0016313:	74 4f                	je     c0016364 <sendKeyboardToken(KeyboardToken)+0x422>
c0016315:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0016318:	83 f0 01             	xor    eax,0x1
c001631b:	84 c0                	test   al,al
c001631d:	74 45                	je     c0016364 <sendKeyboardToken(KeyboardToken)+0x422>
c001631f:	a0 40 f1 02 c0       	mov    al,ds:0xc002f140
c0016324:	84 c0                	test   al,al
c0016326:	74 3c                	je     c0016364 <sendKeyboardToken(KeyboardToken)+0x422>
c0016328:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001632b:	66 83 f8 3f          	cmp    ax,0x3f
c001632f:	76 33                	jbe    c0016364 <sendKeyboardToken(KeyboardToken)+0x422>
c0016331:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016334:	66 83 f8 7f          	cmp    ax,0x7f
c0016338:	77 2a                	ja     c0016364 <sendKeyboardToken(KeyboardToken)+0x422>
c001633a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001633d:	88 c2                	mov    dl,al
c001633f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016342:	66 83 f8 5f          	cmp    ax,0x5f
c0016346:	76 04                	jbe    c001634c <sendKeyboardToken(KeyboardToken)+0x40a>
c0016348:	b0 20                	mov    al,0x20
c001634a:	eb 02                	jmp    c001634e <sendKeyboardToken(KeyboardToken)+0x40c>
c001634c:	b0 00                	mov    al,0x0
c001634e:	29 c2                	sub    edx,eax
c0016350:	88 d0                	mov    al,dl
c0016352:	83 e8 40             	sub    eax,0x40
c0016355:	0f b6 c0             	movzx  eax,al
c0016358:	83 ec 0c             	sub    esp,0xc
c001635b:	50                   	push   eax
c001635c:	e8 23 fb ff ff       	call   c0015e84 <sendKeyToTerminal(unsigned char)>
c0016361:	83 c4 10             	add    esp,0x10
c0016364:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016367:	66 3d 00 03          	cmp    ax,0x300
c001636b:	75 0f                	jne    c001637c <sendKeyboardToken(KeyboardToken)+0x43a>
c001636d:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0016370:	83 f0 01             	xor    eax,0x1
c0016373:	84 c0                	test   al,al
c0016375:	74 05                	je     c001637c <sendKeyboardToken(KeyboardToken)+0x43a>
c0016377:	e8 36 aa ff ff       	call   c0010db2 <doTerminalCycle()>
c001637c:	90                   	nop
c001637d:	c9                   	leave  
c001637e:	c3                   	ret    

c001637f <clearInternalKeybuffer(VgaText*)>:
c001637f:	55                   	push   ebp
c0016380:	89 e5                	mov    ebp,esp
c0016382:	83 ec 08             	sub    esp,0x8
c0016385:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016388:	05 98 01 00 00       	add    eax,0x198
c001638d:	83 ec 0c             	sub    esp,0xc
c0016390:	50                   	push   eax
c0016391:	e8 22 a4 fe ff       	call   c00007b8 <strlen>
c0016396:	83 c4 10             	add    esp,0x10
c0016399:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001639c:	81 c2 98 01 00 00    	add    edx,0x198
c00163a2:	83 ec 04             	sub    esp,0x4
c00163a5:	50                   	push   eax
c00163a6:	6a 00                	push   0x0
c00163a8:	52                   	push   edx
c00163a9:	e8 ee a3 fe ff       	call   c000079c <memset>
c00163ae:	83 c4 10             	add    esp,0x10
c00163b1:	90                   	nop
c00163b2:	c9                   	leave  
c00163b3:	c3                   	ret    

c00163b4 <readKeyboard(VgaText*, char*, unsigned long)>:
c00163b4:	55                   	push   ebp
c00163b5:	89 e5                	mov    ebp,esp
c00163b7:	83 ec 18             	sub    esp,0x18
c00163ba:	a1 28 f0 02 c0       	mov    eax,ds:0xc002f028
c00163bf:	85 c0                	test   eax,eax
c00163c1:	74 2a                	je     c00163ed <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c00163c3:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c00163c9:	8b 0d 28 f0 02 c0    	mov    ecx,DWORD PTR ds:0xc002f028
c00163cf:	83 ec 04             	sub    esp,0x4
c00163d2:	68 40 f0 02 c0       	push   0xc002f040
c00163d7:	83 ec 08             	sub    esp,0x8
c00163da:	89 e2                	mov    edx,esp
c00163dc:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00163df:	89 02                	mov    DWORD PTR [edx],eax
c00163e1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00163e4:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c00163e8:	ff d1                	call   ecx
c00163ea:	83 c4 10             	add    esp,0x10
c00163ed:	83 ec 0c             	sub    esp,0xc
c00163f0:	68 a3 ba 02 c0       	push   0xc002baa3
c00163f5:	e8 f7 ca ff ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c00163fa:	83 c4 10             	add    esp,0x10
c00163fd:	fb                   	sti    
c00163fe:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0016405:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c0016409:	0f 84 a1 00 00 00    	je     c00164b0 <readKeyboard(VgaText*, char*, unsigned long)+0xfc>
c001640f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016412:	8a 80 98 01 00 00    	mov    al,BYTE PTR [eax+0x198]
c0016418:	84 c0                	test   al,al
c001641a:	75 28                	jne    c0016444 <readKeyboard(VgaText*, char*, unsigned long)+0x90>
c001641c:	fa                   	cli    
c001641d:	a1 a8 23 03 c0       	mov    eax,ds:0xc00323a8
c0016422:	40                   	inc    eax
c0016423:	a3 a8 23 03 c0       	mov    ds:0xc00323a8,eax
c0016428:	e8 85 80 00 00       	call   c001e4b2 <schedule()>
c001642d:	a1 a8 23 03 c0       	mov    eax,ds:0xc00323a8
c0016432:	48                   	dec    eax
c0016433:	a3 a8 23 03 c0       	mov    ds:0xc00323a8,eax
c0016438:	a1 a8 23 03 c0       	mov    eax,ds:0xc00323a8
c001643d:	85 c0                	test   eax,eax
c001643f:	75 ce                	jne    c001640f <readKeyboard(VgaText*, char*, unsigned long)+0x5b>
c0016441:	fb                   	sti    
c0016442:	eb cb                	jmp    c001640f <readKeyboard(VgaText*, char*, unsigned long)+0x5b>
c0016444:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0016447:	8d 50 01             	lea    edx,[eax+0x1]
c001644a:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c001644d:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0016450:	8a 92 98 01 00 00    	mov    dl,BYTE PTR [edx+0x198]
c0016456:	88 10                	mov    BYTE PTR [eax],dl
c0016458:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001645b:	8a 80 98 01 00 00    	mov    al,BYTE PTR [eax+0x198]
c0016461:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c0016464:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016467:	05 98 01 00 00       	add    eax,0x198
c001646c:	83 ec 0c             	sub    esp,0xc
c001646f:	50                   	push   eax
c0016470:	e8 43 a3 fe ff       	call   c00007b8 <strlen>
c0016475:	83 c4 10             	add    esp,0x10
c0016478:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001647b:	81 c2 98 01 00 00    	add    edx,0x198
c0016481:	8d 4a 01             	lea    ecx,[edx+0x1]
c0016484:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0016487:	81 c2 98 01 00 00    	add    edx,0x198
c001648d:	83 ec 04             	sub    esp,0x4
c0016490:	50                   	push   eax
c0016491:	51                   	push   ecx
c0016492:	52                   	push   edx
c0016493:	e8 08 a2 fe ff       	call   c00006a0 <memmove>
c0016498:	83 c4 10             	add    esp,0x10
c001649b:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c001649e:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00164a1:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c00164a5:	0f 85 5a ff ff ff    	jne    c0016405 <readKeyboard(VgaText*, char*, unsigned long)+0x51>
c00164ab:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00164ae:	eb 03                	jmp    c00164b3 <readKeyboard(VgaText*, char*, unsigned long)+0xff>
c00164b0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00164b3:	c9                   	leave  
c00164b4:	c3                   	ret    
c00164b5:	90                   	nop

c00164b6 <Keyboard::Keyboard(char const*)>:
c00164b6:	83 ec 0c             	sub    esp,0xc
c00164b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00164bd:	83 ec 08             	sub    esp,0x8
c00164c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00164c4:	50                   	push   eax
c00164c5:	e8 4c e0 ff ff       	call   c0014516 <Device::Device(char const*)>
c00164ca:	83 c4 10             	add    esp,0x10
c00164cd:	ba c4 ba 02 c0       	mov    edx,0xc002bac4
c00164d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00164d6:	89 10                	mov    DWORD PTR [eax],edx
c00164d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00164dc:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c00164e6:	c6 05 24 f0 02 c0 01 	mov    BYTE PTR ds:0xc002f024,0x1
c00164ed:	90                   	nop
c00164ee:	83 c4 0c             	add    esp,0xc
c00164f1:	c3                   	ret    

c00164f2 <Keyboard::~Keyboard()>:
c00164f2:	83 ec 0c             	sub    esp,0xc
c00164f5:	ba c4 ba 02 c0       	mov    edx,0xc002bac4
c00164fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00164fe:	89 10                	mov    DWORD PTR [eax],edx
c0016500:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016504:	83 ec 0c             	sub    esp,0xc
c0016507:	50                   	push   eax
c0016508:	e8 eb dc ff ff       	call   c00141f8 <Device::~Device()>
c001650d:	83 c4 10             	add    esp,0x10
c0016510:	90                   	nop
c0016511:	83 c4 0c             	add    esp,0xc
c0016514:	c3                   	ret    
c0016515:	90                   	nop

c0016516 <Keyboard::~Keyboard()>:
c0016516:	83 ec 0c             	sub    esp,0xc
c0016519:	83 ec 0c             	sub    esp,0xc
c001651c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016520:	e8 cd ff ff ff       	call   c00164f2 <Keyboard::~Keyboard()>
c0016525:	83 c4 10             	add    esp,0x10
c0016528:	83 ec 08             	sub    esp,0x8
c001652b:	68 5c 01 00 00       	push   0x15c
c0016530:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016534:	e8 d8 c8 ff ff       	call   c0012e11 <operator delete(void*, unsigned long)>
c0016539:	83 c4 10             	add    esp,0x10
c001653c:	83 c4 0c             	add    esp,0xc
c001653f:	c3                   	ret    

c0016540 <LogicalDisk::close(int, int, void*)>:
c0016540:	83 c8 ff             	or     eax,0xffffffff
c0016543:	c3                   	ret    

c0016544 <LogicalDisk::~LogicalDisk()>:
c0016544:	83 ec 0c             	sub    esp,0xc
c0016547:	ba 74 bb 02 c0       	mov    edx,0xc002bb74
c001654c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016550:	89 10                	mov    DWORD PTR [eax],edx
c0016552:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016556:	83 ec 0c             	sub    esp,0xc
c0016559:	50                   	push   eax
c001655a:	e8 99 dc ff ff       	call   c00141f8 <Device::~Device()>
c001655f:	83 c4 10             	add    esp,0x10
c0016562:	90                   	nop
c0016563:	83 c4 0c             	add    esp,0xc
c0016566:	c3                   	ret    
c0016567:	90                   	nop

c0016568 <LogicalDisk::~LogicalDisk()>:
c0016568:	83 ec 0c             	sub    esp,0xc
c001656b:	83 ec 0c             	sub    esp,0xc
c001656e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016572:	e8 cd ff ff ff       	call   c0016544 <LogicalDisk::~LogicalDisk()>
c0016577:	83 c4 10             	add    esp,0x10
c001657a:	83 ec 08             	sub    esp,0x8
c001657d:	68 74 01 00 00       	push   0x174
c0016582:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016586:	e8 86 c8 ff ff       	call   c0012e11 <operator delete(void*, unsigned long)>
c001658b:	83 c4 10             	add    esp,0x10
c001658e:	83 c4 0c             	add    esp,0xc
c0016591:	c3                   	ret    

c0016592 <LogicalDisk::open(int, int, void*)>:
c0016592:	83 ec 18             	sub    esp,0x18
c0016595:	68 f0 ba 02 c0       	push   0xc002baf0
c001659a:	e8 12 43 00 00       	call   c001a8b1 <Krnl::panic(char const*)>
c001659f:	83 c8 ff             	or     eax,0xffffffff
c00165a2:	83 c4 1c             	add    esp,0x1c
c00165a5:	c3                   	ret    

c00165a6 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c00165a6:	53                   	push   ebx
c00165a7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00165ab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00165af:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00165b3:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c00165b9:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c00165bf:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c00165c5:	77 10                	ja     c00165d7 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c00165c7:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c00165cd:	89 d3                	mov    ebx,edx
c00165cf:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c00165d5:	72 05                	jb     c00165dc <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c00165d7:	83 c8 ff             	or     eax,0xffffffff
c00165da:	89 c2                	mov    edx,eax
c00165dc:	5b                   	pop    ebx
c00165dd:	c3                   	ret    

c00165de <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c00165de:	56                   	push   esi
c00165df:	83 c8 ff             	or     eax,0xffffffff
c00165e2:	53                   	push   ebx
c00165e3:	89 c2                	mov    edx,eax
c00165e5:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00165e9:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00165ed:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00165f1:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00165f7:	77 27                	ja     c0016620 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c00165f9:	89 d8                	mov    eax,ebx
c00165fb:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c0016601:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c0016607:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001660c:	89 c2                	mov    edx,eax
c001660e:	73 10                	jae    c0016620 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0016610:	89 c8                	mov    eax,ecx
c0016612:	89 da                	mov    edx,ebx
c0016614:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001661a:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c0016620:	5b                   	pop    ebx
c0016621:	5e                   	pop    esi
c0016622:	c3                   	ret    
c0016623:	90                   	nop

c0016624 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c0016624:	83 ec 1c             	sub    esp,0x1c
c0016627:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001662b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001662f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016633:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016637:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001663b:	89 04 24             	mov    DWORD PTR [esp],eax
c001663e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016642:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016646:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001664a:	83 ec 08             	sub    esp,0x8
c001664d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016651:	50                   	push   eax
c0016652:	e8 bf de ff ff       	call   c0014516 <Device::Device(char const*)>
c0016657:	83 c4 10             	add    esp,0x10
c001665a:	ba 74 bb 02 c0       	mov    edx,0xc002bb74
c001665f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016663:	89 10                	mov    DWORD PTR [eax],edx
c0016665:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016669:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0016670:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016674:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c001667b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001667f:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c0016689:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001668d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016691:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016695:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c001669b:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c00166a1:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00166a5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00166a8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00166ac:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c00166b2:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c00166b8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00166bc:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00166c0:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c00166c6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00166ca:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c00166d4:	90                   	nop
c00166d5:	83 c4 1c             	add    esp,0x1c
c00166d8:	c3                   	ret    
c00166d9:	90                   	nop

c00166da <LogicalDisk::assignDriveLetter()>:
c00166da:	55                   	push   ebp
c00166db:	57                   	push   edi
c00166dc:	56                   	push   esi
c00166dd:	53                   	push   ebx
c00166de:	83 ec 14             	sub    esp,0x14
c00166e1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00166e5:	8b 3d 60 f4 02 c0    	mov    edi,DWORD PTR ds:0xc002f460
c00166eb:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c00166f1:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00166f5:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c00166fb:	8b 3d 64 f4 02 c0    	mov    edi,DWORD PTR ds:0xc002f464
c0016701:	3c 01                	cmp    al,0x1
c0016703:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0016707:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001670b:	19 c0                	sbb    eax,eax
c001670d:	83 e0 02             	and    eax,0x2
c0016710:	83 c0 41             	add    eax,0x41
c0016713:	0f be e8             	movsx  ebp,al
c0016716:	3c 43                	cmp    al,0x43
c0016718:	75 10                	jne    c001672a <LogicalDisk::assignDriveLetter()+0x50>
c001671a:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c0016721:	75 5d                	jne    c0016780 <LogicalDisk::assignDriveLetter()+0xa6>
c0016723:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0016728:	75 56                	jne    c0016780 <LogicalDisk::assignDriveLetter()+0xa6>
c001672a:	8d 75 bf             	lea    esi,[ebp-0x41]
c001672d:	ba 01 00 00 00       	mov    edx,0x1
c0016732:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0016736:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001673a:	d3 e2                	shl    edx,cl
c001673c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016740:	89 d7                	mov    edi,edx
c0016742:	89 d6                	mov    esi,edx
c0016744:	c1 ff 1f             	sar    edi,0x1f
c0016747:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c001674b:	21 f9                	and    ecx,edi
c001674d:	09 d1                	or     ecx,edx
c001674f:	75 2f                	jne    c0016780 <LogicalDisk::assignDriveLetter()+0xa6>
c0016751:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0016755:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016759:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c001675f:	09 f2                	or     edx,esi
c0016761:	89 15 60 f4 02 c0    	mov    DWORD PTR ds:0xc002f460,edx
c0016767:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001676b:	09 fa                	or     edx,edi
c001676d:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0016771:	89 15 64 f4 02 c0    	mov    DWORD PTR ds:0xc002f464,edx
c0016777:	89 1c bd 80 f4 02 c0 	mov    DWORD PTR [edi*4-0x3ffd0b80],ebx
c001677e:	eb 08                	jmp    c0016788 <LogicalDisk::assignDriveLetter()+0xae>
c0016780:	45                   	inc    ebp
c0016781:	40                   	inc    eax
c0016782:	3c 5b                	cmp    al,0x5b
c0016784:	75 90                	jne    c0016716 <LogicalDisk::assignDriveLetter()+0x3c>
c0016786:	31 c0                	xor    eax,eax
c0016788:	83 c4 14             	add    esp,0x14
c001678b:	5b                   	pop    ebx
c001678c:	5e                   	pop    esi
c001678d:	5f                   	pop    edi
c001678e:	5d                   	pop    ebp
c001678f:	c3                   	ret    

c0016790 <LogicalDisk::mount()>:
c0016790:	56                   	push   esi
c0016791:	53                   	push   ebx
c0016792:	50                   	push   eax
c0016793:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016797:	8b 1d f4 ef 02 c0    	mov    ebx,DWORD PTR ds:0xc002eff4
c001679d:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c00167a7:	85 db                	test   ebx,ebx
c00167a9:	74 50                	je     c00167fb <LogicalDisk::mount()+0x6b>
c00167ab:	50                   	push   eax
c00167ac:	50                   	push   eax
c00167ad:	ff 35 a8 23 03 c0    	push   DWORD PTR ds:0xc00323a8
c00167b3:	68 14 bb 02 c0       	push   0xc002bb14
c00167b8:	e8 34 c7 ff ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c00167bd:	83 c4 0c             	add    esp,0xc
c00167c0:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c00167c7:	8b 13                	mov    edx,DWORD PTR [ebx]
c00167c9:	83 e8 41             	sub    eax,0x41
c00167cc:	50                   	push   eax
c00167cd:	56                   	push   esi
c00167ce:	53                   	push   ebx
c00167cf:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00167d2:	83 c4 10             	add    esp,0x10
c00167d5:	84 c0                	test   al,al
c00167d7:	74 08                	je     c00167e1 <LogicalDisk::mount()+0x51>
c00167d9:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c00167df:	eb 1c                	jmp    c00167fd <LogicalDisk::mount()+0x6d>
c00167e1:	51                   	push   ecx
c00167e2:	51                   	push   ecx
c00167e3:	ff 35 a8 23 03 c0    	push   DWORD PTR ds:0xc00323a8
c00167e9:	68 2f bb 02 c0       	push   0xc002bb2f
c00167ee:	e8 fe c6 ff ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c00167f3:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c00167f6:	83 c4 10             	add    esp,0x10
c00167f9:	eb ac                	jmp    c00167a7 <LogicalDisk::mount()+0x17>
c00167fb:	31 c0                	xor    eax,eax
c00167fd:	5a                   	pop    edx
c00167fe:	5b                   	pop    ebx
c00167ff:	5e                   	pop    esi
c0016800:	c3                   	ret    
c0016801:	90                   	nop

c0016802 <LogicalDisk::unmount()>:
c0016802:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016806:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0016810:	c3                   	ret    
c0016811:	90                   	nop

c0016812 <LogicalDisk::eject()>:
c0016812:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016816:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001681c:	8b 10                	mov    edx,DWORD PTR [eax]
c001681e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016822:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c0016825:	90                   	nop

c0016826 <LogicalDisk::unassignDriveLetter()>:
c0016826:	57                   	push   edi
c0016827:	56                   	push   esi
c0016828:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001682c:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c0016833:	84 c9                	test   cl,cl
c0016835:	75 0f                	jne    c0016846 <LogicalDisk::unassignDriveLetter()+0x20>
c0016837:	c7 44 24 0c 4a bb 02 c0 	mov    DWORD PTR [esp+0xc],0xc002bb4a
c001683f:	5e                   	pop    esi
c0016840:	5f                   	pop    edi
c0016841:	e9 6b 40 00 00       	jmp    c001a8b1 <Krnl::panic(char const*)>
c0016846:	83 e9 41             	sub    ecx,0x41
c0016849:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c0016850:	b8 01 00 00 00       	mov    eax,0x1
c0016855:	c7 04 8d 80 f4 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd0b80],0x0
c0016860:	d3 e0                	shl    eax,cl
c0016862:	89 c7                	mov    edi,eax
c0016864:	f7 d0                	not    eax
c0016866:	c1 ff 1f             	sar    edi,0x1f
c0016869:	21 05 60 f4 02 c0    	and    DWORD PTR ds:0xc002f460,eax
c001686f:	89 fe                	mov    esi,edi
c0016871:	f7 d6                	not    esi
c0016873:	21 35 64 f4 02 c0    	and    DWORD PTR ds:0xc002f464,esi
c0016879:	5e                   	pop    esi
c001687a:	5f                   	pop    edi
c001687b:	c3                   	ret    

c001687c <LogicalDisk::read(unsigned long long, int, void*)>:
c001687c:	57                   	push   edi
c001687d:	56                   	push   esi
c001687e:	53                   	push   ebx
c001687f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0016883:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016887:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001688b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001688f:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0016895:	77 41                	ja     c00168d8 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c0016897:	99                   	cdq    
c0016898:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c001689e:	01 c8                	add    eax,ecx
c00168a0:	11 da                	adc    edx,ebx
c00168a2:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c00168a8:	19 d7                	sbb    edi,edx
c00168aa:	72 33                	jb     c00168df <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c00168ac:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c00168b2:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c00168b8:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00168bc:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c00168c0:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c00168c6:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00168cc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00168d0:	5b                   	pop    ebx
c00168d1:	5e                   	pop    esi
c00168d2:	5f                   	pop    edi
c00168d3:	e9 f8 0a 00 00       	jmp    c00173d0 <VCache::read(unsigned long long, int, void*)>
c00168d8:	b8 05 00 00 00       	mov    eax,0x5
c00168dd:	eb 05                	jmp    c00168e4 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c00168df:	b8 07 00 00 00       	mov    eax,0x7
c00168e4:	5b                   	pop    ebx
c00168e5:	5e                   	pop    esi
c00168e6:	5f                   	pop    edi
c00168e7:	c3                   	ret    

c00168e8 <LogicalDisk::write(unsigned long long, int, void*)>:
c00168e8:	57                   	push   edi
c00168e9:	56                   	push   esi
c00168ea:	53                   	push   ebx
c00168eb:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00168ef:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00168f3:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00168f7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00168fb:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0016901:	77 41                	ja     c0016944 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c0016903:	99                   	cdq    
c0016904:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c001690a:	01 c8                	add    eax,ecx
c001690c:	11 da                	adc    edx,ebx
c001690e:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0016914:	19 d7                	sbb    edi,edx
c0016916:	72 33                	jb     c001694b <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c0016918:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c001691e:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0016924:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0016928:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c001692c:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0016932:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016938:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001693c:	5b                   	pop    ebx
c001693d:	5e                   	pop    esi
c001693e:	5f                   	pop    edi
c001693f:	e9 96 09 00 00       	jmp    c00172da <VCache::write(unsigned long long, int, void*)>
c0016944:	b8 05 00 00 00       	mov    eax,0x5
c0016949:	eb 05                	jmp    c0016950 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c001694b:	b8 07 00 00 00       	mov    eax,0x7
c0016950:	5b                   	pop    ebx
c0016951:	5e                   	pop    esi
c0016952:	5f                   	pop    edi
c0016953:	c3                   	ret    

c0016954 <Mouse::Mouse(char const*)>:
c0016954:	83 ec 0c             	sub    esp,0xc
c0016957:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001695b:	83 ec 08             	sub    esp,0x8
c001695e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016962:	50                   	push   eax
c0016963:	e8 ae db ff ff       	call   c0014516 <Device::Device(char const*)>
c0016968:	83 c4 10             	add    esp,0x10
c001696b:	ba a0 bb 02 c0       	mov    edx,0xc002bba0
c0016970:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016974:	89 10                	mov    DWORD PTR [eax],edx
c0016976:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001697a:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c0016984:	90                   	nop
c0016985:	83 c4 0c             	add    esp,0xc
c0016988:	c3                   	ret    
c0016989:	90                   	nop

c001698a <Mouse::~Mouse()>:
c001698a:	83 ec 0c             	sub    esp,0xc
c001698d:	ba a0 bb 02 c0       	mov    edx,0xc002bba0
c0016992:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016996:	89 10                	mov    DWORD PTR [eax],edx
c0016998:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001699c:	83 ec 0c             	sub    esp,0xc
c001699f:	50                   	push   eax
c00169a0:	e8 53 d8 ff ff       	call   c00141f8 <Device::~Device()>
c00169a5:	83 c4 10             	add    esp,0x10
c00169a8:	90                   	nop
c00169a9:	83 c4 0c             	add    esp,0xc
c00169ac:	c3                   	ret    
c00169ad:	90                   	nop

c00169ae <Mouse::~Mouse()>:
c00169ae:	83 ec 0c             	sub    esp,0xc
c00169b1:	83 ec 0c             	sub    esp,0xc
c00169b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00169b8:	e8 cd ff ff ff       	call   c001698a <Mouse::~Mouse()>
c00169bd:	83 c4 10             	add    esp,0x10
c00169c0:	83 ec 08             	sub    esp,0x8
c00169c3:	68 58 01 00 00       	push   0x158
c00169c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00169cc:	e8 40 c4 ff ff       	call   c0012e11 <operator delete(void*, unsigned long)>
c00169d1:	83 c4 10             	add    esp,0x10
c00169d4:	83 c4 0c             	add    esp,0xc
c00169d7:	c3                   	ret    

c00169d8 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c00169d8:	55                   	push   ebp
c00169d9:	57                   	push   edi
c00169da:	56                   	push   esi
c00169db:	53                   	push   ebx
c00169dc:	81 ec 20 01 00 00    	sub    esp,0x120
c00169e2:	8b b4 24 38 01 00 00 	mov    esi,DWORD PTR [esp+0x138]
c00169e9:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c00169f0:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c00169f7:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c00169fe:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0016a02:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016a06:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0016a0a:	56                   	push   esi
c0016a0b:	68 c4 bb 02 c0       	push   0xc002bbc4
c0016a10:	e8 dc c4 ff ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c0016a15:	58                   	pop    eax
c0016a16:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0016a1d:	e8 f0 db ff ff       	call   c0014612 <Device::getName()>
c0016a22:	5a                   	pop    edx
c0016a23:	59                   	pop    ecx
c0016a24:	50                   	push   eax
c0016a25:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c0016a29:	53                   	push   ebx
c0016a2a:	e8 29 9e fe ff       	call   c0000858 <strcpy>
c0016a2f:	5d                   	pop    ebp
c0016a30:	58                   	pop    eax
c0016a31:	68 f5 bb 02 c0       	push   0xc002bbf5
c0016a36:	53                   	push   ebx
c0016a37:	e8 5c 9f fe ff       	call   c0000998 <strcat>
c0016a3c:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c0016a43:	e8 ea 8e ff ff       	call   c000f932 <malloc>
c0016a48:	83 c4 0c             	add    esp,0xc
c0016a4b:	89 c5                	mov    ebp,eax
c0016a4d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016a51:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016a55:	57                   	push   edi
c0016a56:	56                   	push   esi
c0016a57:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0016a5e:	53                   	push   ebx
c0016a5f:	50                   	push   eax
c0016a60:	e8 bf fb ff ff       	call   c0016624 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c0016a65:	83 c4 14             	add    esp,0x14
c0016a68:	55                   	push   ebp
c0016a69:	e8 6c fc ff ff       	call   c00166da <LogicalDisk::assignDriveLetter()>
c0016a6e:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0016a71:	0f be d8             	movsx  ebx,al
c0016a74:	e8 17 fd ff ff       	call   c0016790 <LogicalDisk::mount()>
c0016a79:	58                   	pop    eax
c0016a7a:	5a                   	pop    edx
c0016a7b:	55                   	push   ebp
c0016a7c:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0016a83:	e8 9e d8 ff ff       	call   c0014326 <Device::addChild(Device*)>
c0016a88:	59                   	pop    ecx
c0016a89:	5e                   	pop    esi
c0016a8a:	53                   	push   ebx
c0016a8b:	68 00 bc 02 c0       	push   0xc002bc00
c0016a90:	e8 5c c4 ff ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c0016a95:	81 c4 2c 01 00 00    	add    esp,0x12c
c0016a9b:	5b                   	pop    ebx
c0016a9c:	5e                   	pop    esi
c0016a9d:	5f                   	pop    edi
c0016a9e:	5d                   	pop    ebp
c0016a9f:	c3                   	ret    

c0016aa0 <createPartitionsForDisk(PhysicalDisk*)>:
c0016aa0:	55                   	push   ebp
c0016aa1:	57                   	push   edi
c0016aa2:	56                   	push   esi
c0016aa3:	53                   	push   ebx
c0016aa4:	81 ec 5c 02 00 00    	sub    esp,0x25c
c0016aaa:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c0016ab1:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0016ab7:	3d 00 02 00 00       	cmp    eax,0x200
c0016abc:	74 27                	je     c0016ae5 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c0016abe:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c0016ac4:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c0016aca:	83 ec 10             	sub    esp,0x10
c0016acd:	0f a4 f7 0a          	shld   edi,esi,0xa
c0016ad1:	99                   	cdq    
c0016ad2:	c1 e6 0a             	shl    esi,0xa
c0016ad5:	52                   	push   edx
c0016ad6:	89 fd                	mov    ebp,edi
c0016ad8:	50                   	push   eax
c0016ad9:	55                   	push   ebp
c0016ada:	56                   	push   esi
c0016adb:	e8 f4 06 01 00       	call   c00271d4 <__udivdi3>
c0016ae0:	e9 b1 00 00 00       	jmp    c0016b96 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0016ae5:	83 ec 0c             	sub    esp,0xc
c0016ae8:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016aea:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c0016aee:	56                   	push   esi
c0016aef:	6a 01                	push   0x1
c0016af1:	6a 00                	push   0x0
c0016af3:	6a 00                	push   0x0
c0016af5:	53                   	push   ebx
c0016af6:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0016af9:	83 c4 20             	add    esp,0x20
c0016afc:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c0016b04:	75 0a                	jne    c0016b10 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c0016b06:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c0016b0e:	74 2c                	je     c0016b3c <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c0016b10:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016b16:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016b1c:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016b22:	83 ec 10             	sub    esp,0x10
c0016b25:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016b29:	89 f7                	mov    edi,esi
c0016b2b:	c1 e0 0a             	shl    eax,0xa
c0016b2e:	c1 ff 1f             	sar    edi,0x1f
c0016b31:	57                   	push   edi
c0016b32:	56                   	push   esi
c0016b33:	52                   	push   edx
c0016b34:	50                   	push   eax
c0016b35:	e8 9a 06 01 00       	call   c00271d4 <__udivdi3>
c0016b3a:	eb 5a                	jmp    c0016b96 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0016b3c:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c0016b43:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c0016b4a:	83 e1 7f             	and    ecx,0x7f
c0016b4d:	83 e0 7f             	and    eax,0x7f
c0016b50:	01 c1                	add    ecx,eax
c0016b52:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c0016b59:	83 e0 7f             	and    eax,0x7f
c0016b5c:	01 c1                	add    ecx,eax
c0016b5e:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c0016b65:	83 e0 7f             	and    eax,0x7f
c0016b68:	00 c1                	add    cl,al
c0016b6a:	74 41                	je     c0016bad <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c0016b6c:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016b72:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016b78:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016b7e:	83 ec 10             	sub    esp,0x10
c0016b81:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016b85:	89 f7                	mov    edi,esi
c0016b87:	c1 e0 0a             	shl    eax,0xa
c0016b8a:	c1 ff 1f             	sar    edi,0x1f
c0016b8d:	57                   	push   edi
c0016b8e:	56                   	push   esi
c0016b8f:	52                   	push   edx
c0016b90:	50                   	push   eax
c0016b91:	e8 3e 06 01 00       	call   c00271d4 <__udivdi3>
c0016b96:	83 c4 14             	add    esp,0x14
c0016b99:	52                   	push   edx
c0016b9a:	50                   	push   eax
c0016b9b:	6a 00                	push   0x0
c0016b9d:	6a 00                	push   0x0
c0016b9f:	53                   	push   ebx
c0016ba0:	e8 33 fe ff ff       	call   c00169d8 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0016ba5:	83 c4 20             	add    esp,0x20
c0016ba8:	e9 79 01 00 00       	jmp    c0016d26 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c0016bad:	89 f0                	mov    eax,esi
c0016baf:	31 f6                	xor    esi,esi
c0016bb1:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c0016bb8:	75 02                	jne    c0016bbc <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c0016bba:	89 f1                	mov    ecx,esi
c0016bbc:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c0016bc3:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c0016bca:	c1 e2 08             	shl    edx,0x8
c0016bcd:	c1 e7 10             	shl    edi,0x10
c0016bd0:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c0016bd8:	09 fa                	or     edx,edi
c0016bda:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c0016be2:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c0016be9:	83 c0 10             	add    eax,0x10
c0016bec:	09 fa                	or     edx,edi
c0016bee:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c0016bf5:	c1 e7 18             	shl    edi,0x18
c0016bf8:	09 fa                	or     edx,edi
c0016bfa:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c0016c01:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c0016c05:	c1 e7 10             	shl    edi,0x10
c0016c08:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c0016c0f:	c1 e2 08             	shl    edx,0x8
c0016c12:	09 fa                	or     edx,edi
c0016c14:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c0016c1b:	09 fa                	or     edx,edi
c0016c1d:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c0016c24:	c1 e7 18             	shl    edi,0x18
c0016c27:	09 fa                	or     edx,edi
c0016c29:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c0016c2d:	46                   	inc    esi
c0016c2e:	83 fe 04             	cmp    esi,0x4
c0016c31:	0f 85 7a ff ff ff    	jne    c0016bb1 <createPartitionsForDisk(PhysicalDisk*)+0x111>
c0016c37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c3b:	83 f0 01             	xor    eax,0x1
c0016c3e:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0016c42:	75 57                	jne    c0016c9b <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0016c44:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016c48:	83 f0 01             	xor    eax,0x1
c0016c4b:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0016c4f:	75 4a                	jne    c0016c9b <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0016c51:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0016c55:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0016c5d:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0016c65:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016c6b:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016c71:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016c77:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016c7b:	89 f7                	mov    edi,esi
c0016c7d:	c1 e0 0a             	shl    eax,0xa
c0016c80:	c1 ff 1f             	sar    edi,0x1f
c0016c83:	57                   	push   edi
c0016c84:	56                   	push   esi
c0016c85:	52                   	push   edx
c0016c86:	50                   	push   eax
c0016c87:	e8 48 05 01 00       	call   c00271d4 <__udivdi3>
c0016c8c:	83 c4 10             	add    esp,0x10
c0016c8f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016c93:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016c97:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0016c9b:	84 c9                	test   cl,cl
c0016c9d:	74 53                	je     c0016cf2 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c0016c9f:	0f b6 c9             	movzx  ecx,cl
c0016ca2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016ca6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016caa:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016cae:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0016cb2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016cb6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0016cba:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c0016cbe:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c0016cc2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016cc6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0016cca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016cce:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016cd2:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c0016cd6:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c0016cda:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c0016cde:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c0016ce2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016ce6:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016cea:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c0016cee:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c0016cf2:	31 ed                	xor    ebp,ebp
c0016cf4:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c0016cf8:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c0016cfc:	89 f8                	mov    eax,edi
c0016cfe:	09 f0                	or     eax,esi
c0016d00:	74 1e                	je     c0016d20 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0016d02:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c0016d06:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c0016d0a:	89 d1                	mov    ecx,edx
c0016d0c:	09 c1                	or     ecx,eax
c0016d0e:	74 10                	je     c0016d20 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0016d10:	83 ec 0c             	sub    esp,0xc
c0016d13:	57                   	push   edi
c0016d14:	56                   	push   esi
c0016d15:	52                   	push   edx
c0016d16:	50                   	push   eax
c0016d17:	53                   	push   ebx
c0016d18:	e8 bb fc ff ff       	call   c00169d8 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0016d1d:	83 c4 20             	add    esp,0x20
c0016d20:	45                   	inc    ebp
c0016d21:	83 fd 04             	cmp    ebp,0x4
c0016d24:	75 ce                	jne    c0016cf4 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c0016d26:	81 c4 5c 02 00 00    	add    esp,0x25c
c0016d2c:	5b                   	pop    ebx
c0016d2d:	5e                   	pop    esi
c0016d2e:	5f                   	pop    edi
c0016d2f:	5d                   	pop    ebp
c0016d30:	c3                   	ret    
c0016d31:	90                   	nop

c0016d32 <Serial::Serial(char const*)>:
c0016d32:	83 ec 0c             	sub    esp,0xc
c0016d35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d39:	83 ec 08             	sub    esp,0x8
c0016d3c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016d40:	50                   	push   eax
c0016d41:	e8 d0 d7 ff ff       	call   c0014516 <Device::Device(char const*)>
c0016d46:	83 c4 10             	add    esp,0x10
c0016d49:	ba 2c bc 02 c0       	mov    edx,0xc002bc2c
c0016d4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d52:	89 10                	mov    DWORD PTR [eax],edx
c0016d54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d58:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c0016d62:	90                   	nop
c0016d63:	83 c4 0c             	add    esp,0xc
c0016d66:	c3                   	ret    
c0016d67:	90                   	nop

c0016d68 <Serial::~Serial()>:
c0016d68:	83 ec 0c             	sub    esp,0xc
c0016d6b:	ba 2c bc 02 c0       	mov    edx,0xc002bc2c
c0016d70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d74:	89 10                	mov    DWORD PTR [eax],edx
c0016d76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d7a:	83 ec 0c             	sub    esp,0xc
c0016d7d:	50                   	push   eax
c0016d7e:	e8 75 d4 ff ff       	call   c00141f8 <Device::~Device()>
c0016d83:	83 c4 10             	add    esp,0x10
c0016d86:	90                   	nop
c0016d87:	83 c4 0c             	add    esp,0xc
c0016d8a:	c3                   	ret    
c0016d8b:	90                   	nop

c0016d8c <Serial::~Serial()>:
c0016d8c:	83 ec 0c             	sub    esp,0xc
c0016d8f:	83 ec 0c             	sub    esp,0xc
c0016d92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016d96:	e8 cd ff ff ff       	call   c0016d68 <Serial::~Serial()>
c0016d9b:	83 c4 10             	add    esp,0x10
c0016d9e:	83 ec 08             	sub    esp,0x8
c0016da1:	68 58 01 00 00       	push   0x158
c0016da6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016daa:	e8 62 c0 ff ff       	call   c0012e11 <operator delete(void*, unsigned long)>
c0016daf:	83 c4 10             	add    esp,0x10
c0016db2:	83 c4 0c             	add    esp,0xc
c0016db5:	c3                   	ret    

c0016db6 <Timer::Timer(char const*)>:
c0016db6:	83 ec 0c             	sub    esp,0xc
c0016db9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016dbd:	83 ec 08             	sub    esp,0x8
c0016dc0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016dc4:	50                   	push   eax
c0016dc5:	e8 4c d7 ff ff       	call   c0014516 <Device::Device(char const*)>
c0016dca:	83 c4 10             	add    esp,0x10
c0016dcd:	ba 70 bc 02 c0       	mov    edx,0xc002bc70
c0016dd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016dd6:	89 10                	mov    DWORD PTR [eax],edx
c0016dd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016ddc:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c0016de6:	90                   	nop
c0016de7:	83 c4 0c             	add    esp,0xc
c0016dea:	c3                   	ret    
c0016deb:	90                   	nop

c0016dec <Timer::~Timer()>:
c0016dec:	83 ec 0c             	sub    esp,0xc
c0016def:	ba 70 bc 02 c0       	mov    edx,0xc002bc70
c0016df4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016df8:	89 10                	mov    DWORD PTR [eax],edx
c0016dfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016dfe:	83 ec 0c             	sub    esp,0xc
c0016e01:	50                   	push   eax
c0016e02:	e8 f1 d3 ff ff       	call   c00141f8 <Device::~Device()>
c0016e07:	83 c4 10             	add    esp,0x10
c0016e0a:	90                   	nop
c0016e0b:	83 c4 0c             	add    esp,0xc
c0016e0e:	c3                   	ret    
c0016e0f:	90                   	nop

c0016e10 <Timer::~Timer()>:
c0016e10:	83 ec 0c             	sub    esp,0xc
c0016e13:	83 ec 0c             	sub    esp,0xc
c0016e16:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016e1a:	e8 cd ff ff ff       	call   c0016dec <Timer::~Timer()>
c0016e1f:	83 c4 10             	add    esp,0x10
c0016e22:	83 ec 08             	sub    esp,0x8
c0016e25:	68 5c 01 00 00       	push   0x15c
c0016e2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016e2e:	e8 de bf ff ff       	call   c0012e11 <operator delete(void*, unsigned long)>
c0016e33:	83 c4 10             	add    esp,0x10
c0016e36:	83 c4 0c             	add    esp,0xc
c0016e39:	c3                   	ret    

c0016e3a <Timer::read()>:
c0016e3a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016e3e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016e44:	c3                   	ret    

c0016e45 <timerHandler(unsigned long long)>:
c0016e45:	55                   	push   ebp
c0016e46:	57                   	push   edi
c0016e47:	56                   	push   esi
c0016e48:	53                   	push   ebx
c0016e49:	83 ec 0c             	sub    esp,0xc
c0016e4c:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0016e50:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0016e54:	01 35 f0 f4 02 c0    	add    DWORD PTR ds:0xc002f4f0,esi
c0016e5a:	11 3d f4 f4 02 c0    	adc    DWORD PTR ds:0xc002f4f4,edi
c0016e60:	80 3d 6d ee 02 c0 00 	cmp    BYTE PTR ds:0xc002ee6d,0x0
c0016e67:	0f 84 42 01 00 00    	je     c0016faf <timerHandler(unsigned long long)+0x16a>
c0016e6d:	fa                   	cli    
c0016e6e:	ff 05 a8 23 03 c0    	inc    DWORD PTR ds:0xc00323a8
c0016e74:	83 ec 0c             	sub    esp,0xc
c0016e77:	ff 05 a4 23 03 c0    	inc    DWORD PTR ds:0xc00323a4
c0016e7d:	68 b8 23 03 c0       	push   0xc00323b8
c0016e82:	e8 d3 23 01 00       	call   c002925a <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016e87:	83 c4 10             	add    esp,0x10
c0016e8a:	84 c0                	test   al,al
c0016e8c:	0f 85 a2 00 00 00    	jne    c0016f34 <timerHandler(unsigned long long)+0xef>
c0016e92:	83 ec 0c             	sub    esp,0xc
c0016e95:	68 b8 23 03 c0       	push   0xc00323b8
c0016e9a:	e8 d7 23 01 00       	call   c0029276 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016e9f:	83 c4 10             	add    esp,0x10
c0016ea2:	89 c3                	mov    ebx,eax
c0016ea4:	83 ec 0c             	sub    esp,0xc
c0016ea7:	68 b8 23 03 c0       	push   0xc00323b8
c0016eac:	e8 c5 23 01 00       	call   c0029276 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016eb1:	c7 04 24 b8 23 03 c0 	mov    DWORD PTR [esp],0xc00323b8
c0016eb8:	89 c5                	mov    ebp,eax
c0016eba:	e8 bf 23 01 00       	call   c002927e <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016ebf:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c0016ec2:	83 c4 10             	add    esp,0x10
c0016ec5:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c0016ec8:	39 15 f0 f4 02 c0    	cmp    DWORD PTR ds:0xc002f4f0,edx
c0016ece:	a1 f4 f4 02 c0       	mov    eax,ds:0xc002f4f4
c0016ed3:	19 c8                	sbb    eax,ecx
c0016ed5:	72 21                	jb     c0016ef8 <timerHandler(unsigned long long)+0xb3>
c0016ed7:	83 ec 0c             	sub    esp,0xc
c0016eda:	55                   	push   ebp
c0016edb:	e8 96 7a 00 00       	call   c001e976 <unblockTask(ThreadControlBlock*)>
c0016ee0:	83 c4 10             	add    esp,0x10
c0016ee3:	39 eb                	cmp    ebx,ebp
c0016ee5:	75 21                	jne    c0016f08 <timerHandler(unsigned long long)+0xc3>
c0016ee7:	83 ec 0c             	sub    esp,0xc
c0016eea:	68 b8 23 03 c0       	push   0xc00323b8
c0016eef:	e8 82 23 01 00       	call   c0029276 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016ef4:	89 c3                	mov    ebx,eax
c0016ef6:	eb 0d                	jmp    c0016f05 <timerHandler(unsigned long long)+0xc0>
c0016ef8:	50                   	push   eax
c0016ef9:	50                   	push   eax
c0016efa:	55                   	push   ebp
c0016efb:	68 b8 23 03 c0       	push   0xc00323b8
c0016f00:	e8 27 24 01 00       	call   c002932c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016f05:	83 c4 10             	add    esp,0x10
c0016f08:	83 ec 0c             	sub    esp,0xc
c0016f0b:	68 b8 23 03 c0       	push   0xc00323b8
c0016f10:	e8 45 23 01 00       	call   c002925a <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016f15:	83 c4 10             	add    esp,0x10
c0016f18:	84 c0                	test   al,al
c0016f1a:	75 18                	jne    c0016f34 <timerHandler(unsigned long long)+0xef>
c0016f1c:	83 ec 0c             	sub    esp,0xc
c0016f1f:	68 b8 23 03 c0       	push   0xc00323b8
c0016f24:	e8 4d 23 01 00       	call   c0029276 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016f29:	83 c4 10             	add    esp,0x10
c0016f2c:	39 d8                	cmp    eax,ebx
c0016f2e:	0f 85 70 ff ff ff    	jne    c0016ea4 <timerHandler(unsigned long long)+0x5f>
c0016f34:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016f39:	83 78 38 00          	cmp    DWORD PTR [eax+0x38],0x0
c0016f3d:	74 3d                	je     c0016f7c <timerHandler(unsigned long long)+0x137>
c0016f3f:	80 3d 6c ee 02 c0 00 	cmp    BYTE PTR ds:0xc002ee6c,0x0
c0016f46:	74 34                	je     c0016f7c <timerHandler(unsigned long long)+0x137>
c0016f48:	fa                   	cli    
c0016f49:	ff 05 a8 23 03 c0    	inc    DWORD PTR ds:0xc00323a8
c0016f4f:	31 d2                	xor    edx,edx
c0016f51:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016f56:	89 f9                	mov    ecx,edi
c0016f58:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c0016f5b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016f60:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0016f63:	39 c6                	cmp    esi,eax
c0016f65:	19 d1                	sbb    ecx,edx
c0016f67:	72 05                	jb     c0016f6e <timerHandler(unsigned long long)+0x129>
c0016f69:	e8 44 75 00 00       	call   c001e4b2 <schedule()>
c0016f6e:	a1 a8 23 03 c0       	mov    eax,ds:0xc00323a8
c0016f73:	48                   	dec    eax
c0016f74:	a3 a8 23 03 c0       	mov    ds:0xc00323a8,eax
c0016f79:	75 01                	jne    c0016f7c <timerHandler(unsigned long long)+0x137>
c0016f7b:	fb                   	sti    
c0016f7c:	a1 a4 23 03 c0       	mov    eax,ds:0xc00323a4
c0016f81:	48                   	dec    eax
c0016f82:	a3 a4 23 03 c0       	mov    ds:0xc00323a4,eax
c0016f87:	75 18                	jne    c0016fa1 <timerHandler(unsigned long long)+0x15c>
c0016f89:	83 3d a0 23 03 c0 00 	cmp    DWORD PTR ds:0xc00323a0,0x0
c0016f90:	74 0f                	je     c0016fa1 <timerHandler(unsigned long long)+0x15c>
c0016f92:	c7 05 a0 23 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00323a0,0x0
c0016f9c:	e8 11 75 00 00       	call   c001e4b2 <schedule()>
c0016fa1:	a1 a8 23 03 c0       	mov    eax,ds:0xc00323a8
c0016fa6:	48                   	dec    eax
c0016fa7:	a3 a8 23 03 c0       	mov    ds:0xc00323a8,eax
c0016fac:	75 01                	jne    c0016faf <timerHandler(unsigned long long)+0x16a>
c0016fae:	fb                   	sti    
c0016faf:	83 c4 0c             	add    esp,0xc
c0016fb2:	5b                   	pop    ebx
c0016fb3:	5e                   	pop    esi
c0016fb4:	5f                   	pop    edi
c0016fb5:	5d                   	pop    ebp
c0016fb6:	c3                   	ret    

c0016fb7 <setupTimer(int)>:
c0016fb7:	57                   	push   edi
c0016fb8:	a1 68 ee 02 c0       	mov    eax,ds:0xc002ee68
c0016fbd:	56                   	push   esi
c0016fbe:	53                   	push   ebx
c0016fbf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016fc3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016fc9:	83 ec 0c             	sub    esp,0xc
c0016fcc:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016fd2:	e8 3b d6 ff ff       	call   c0014612 <Device::getName()>
c0016fd7:	83 c4 10             	add    esp,0x10
c0016fda:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0016fdd:	0f 85 8d 00 00 00    	jne    c0017070 <setupTimer(int)+0xb9>
c0016fe3:	a1 68 ee 02 c0       	mov    eax,ds:0xc002ee68
c0016fe8:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c0016fef:	74 7f                	je     c0017070 <setupTimer(int)+0xb9>
c0016ff1:	83 ec 0c             	sub    esp,0xc
c0016ff4:	68 5c 01 00 00       	push   0x15c
c0016ff9:	e8 34 89 ff ff       	call   c000f932 <malloc>
c0016ffe:	89 04 24             	mov    DWORD PTR [esp],eax
c0017001:	89 c3                	mov    ebx,eax
c0017003:	e8 a8 fd 00 00       	call   c0026db0 <PIT::PIT()>
c0017008:	59                   	pop    ecx
c0017009:	5f                   	pop    edi
c001700a:	53                   	push   ebx
c001700b:	ff 35 68 ee 02 c0    	push   DWORD PTR ds:0xc002ee68
c0017011:	e8 10 d3 ff ff       	call   c0014326 <Device::addChild(Device*)>
c0017016:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017018:	6a 00                	push   0x0
c001701a:	6a 00                	push   0x0
c001701c:	56                   	push   esi
c001701d:	53                   	push   ebx
c001701e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0017021:	83 c4 14             	add    esp,0x14
c0017024:	68 60 01 00 00       	push   0x160
c0017029:	e8 04 89 ff ff       	call   c000f932 <malloc>
c001702e:	89 04 24             	mov    DWORD PTR [esp],eax
c0017031:	89 c7                	mov    edi,eax
c0017033:	e8 28 fc 00 00       	call   c0026c60 <APICTimer::APICTimer()>
c0017038:	6a 00                	push   0x0
c001703a:	6a 00                	push   0x0
c001703c:	56                   	push   esi
c001703d:	57                   	push   edi
c001703e:	e8 1f fb 00 00       	call   c0026b62 <APICTimer::open(int, int, void*)>
c0017043:	83 c4 20             	add    esp,0x20
c0017046:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017048:	6a 00                	push   0x0
c001704a:	6a 00                	push   0x0
c001704c:	6a 00                	push   0x0
c001704e:	53                   	push   ebx
c001704f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017052:	58                   	pop    eax
c0017053:	a1 68 ee 02 c0       	mov    eax,ds:0xc002ee68
c0017058:	5a                   	pop    edx
c0017059:	57                   	push   edi
c001705a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0017060:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0017066:	e8 bb d2 ff ff       	call   c0014326 <Device::addChild(Device*)>
c001706b:	83 c4 10             	add    esp,0x10
c001706e:	eb 33                	jmp    c00170a3 <setupTimer(int)+0xec>
c0017070:	83 ec 0c             	sub    esp,0xc
c0017073:	68 5c 01 00 00       	push   0x15c
c0017078:	e8 b5 88 ff ff       	call   c000f932 <malloc>
c001707d:	89 04 24             	mov    DWORD PTR [esp],eax
c0017080:	89 c3                	mov    ebx,eax
c0017082:	e8 29 fd 00 00       	call   c0026db0 <PIT::PIT()>
c0017087:	58                   	pop    eax
c0017088:	5a                   	pop    edx
c0017089:	53                   	push   ebx
c001708a:	ff 35 68 ee 02 c0    	push   DWORD PTR ds:0xc002ee68
c0017090:	e8 91 d2 ff ff       	call   c0014326 <Device::addChild(Device*)>
c0017095:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017097:	6a 00                	push   0x0
c0017099:	6a 00                	push   0x0
c001709b:	56                   	push   esi
c001709c:	53                   	push   ebx
c001709d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00170a0:	83 c4 20             	add    esp,0x20
c00170a3:	89 d8                	mov    eax,ebx
c00170a5:	5b                   	pop    ebx
c00170a6:	5e                   	pop    esi
c00170a7:	5f                   	pop    edi
c00170a8:	c3                   	ret    
c00170a9:	90                   	nop

c00170aa <VCache::VCache(PhysicalDisk*)>:
c00170aa:	53                   	push   ebx
c00170ab:	83 ec 18             	sub    esp,0x18
c00170ae:	ba a0 bc 02 c0       	mov    edx,0xc002bca0
c00170b3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170b7:	89 10                	mov    DWORD PTR [eax],edx
c00170b9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170bd:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c00170c4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170c8:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c00170cf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170d3:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c00170da:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00170e1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170e5:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c00170ec:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00170f3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170f7:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c00170fe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017102:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0017106:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001710a:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c0017111:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c0017118:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001711c:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0017120:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017124:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c0017128:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001712c:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0017130:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017134:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c001713b:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c0017143:	83 ec 0c             	sub    esp,0xc
c0017146:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001714a:	e8 e3 87 ff ff       	call   c000f932 <malloc>
c001714f:	83 c4 10             	add    esp,0x10
c0017152:	89 c3                	mov    ebx,eax
c0017154:	83 ec 0c             	sub    esp,0xc
c0017157:	53                   	push   ebx
c0017158:	e8 ff 70 00 00       	call   c001e25c <Mutex::Mutex()>
c001715d:	83 c4 10             	add    esp,0x10
c0017160:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017164:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0017167:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001716b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001716f:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0017172:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017176:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c001717d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017181:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0017187:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001718b:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001718e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017192:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c0017198:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001719e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00171a2:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c00171a5:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c00171a8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00171ac:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c00171b0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00171b4:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00171ba:	05 00 01 00 00       	add    eax,0x100
c00171bf:	c1 e0 04             	shl    eax,0x4
c00171c2:	83 ec 0c             	sub    esp,0xc
c00171c5:	50                   	push   eax
c00171c6:	e8 67 87 ff ff       	call   c000f932 <malloc>
c00171cb:	83 c4 10             	add    esp,0x10
c00171ce:	89 c2                	mov    edx,eax
c00171d0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00171d4:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00171d7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00171db:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c00171e2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00171e6:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c00171ea:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00171ee:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00171f4:	c1 e0 07             	shl    eax,0x7
c00171f7:	83 ec 0c             	sub    esp,0xc
c00171fa:	50                   	push   eax
c00171fb:	e8 32 87 ff ff       	call   c000f932 <malloc>
c0017200:	83 c4 10             	add    esp,0x10
c0017203:	89 c2                	mov    edx,eax
c0017205:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017209:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001720c:	90                   	nop
c001720d:	83 c4 18             	add    esp,0x18
c0017210:	5b                   	pop    ebx
c0017211:	c3                   	ret    

c0017212 <VCache::invalidateReadBuffer()>:
c0017212:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017216:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c001721c:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0017220:	c3                   	ret    
c0017221:	90                   	nop

c0017222 <VCache::writeWriteBuffer()>:
c0017222:	53                   	push   ebx
c0017223:	83 ec 14             	sub    esp,0x14
c0017226:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001722a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001722d:	8b 10                	mov    edx,DWORD PTR [eax]
c001722f:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0017232:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0017235:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0017238:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c001723b:	50                   	push   eax
c001723c:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c001723f:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0017246:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c001724d:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c0017251:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c0017258:	83 c4 28             	add    esp,0x28
c001725b:	5b                   	pop    ebx
c001725c:	c3                   	ret    
c001725d:	90                   	nop

c001725e <VCache::~VCache()>:
c001725e:	83 ec 0c             	sub    esp,0xc
c0017261:	ba a0 bc 02 c0       	mov    edx,0xc002bca0
c0017266:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001726a:	89 10                	mov    DWORD PTR [eax],edx
c001726c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017270:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c0017273:	84 c0                	test   al,al
c0017275:	74 0f                	je     c0017286 <VCache::~VCache()+0x28>
c0017277:	83 ec 0c             	sub    esp,0xc
c001727a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001727e:	e8 9f ff ff ff       	call   c0017222 <VCache::writeWriteBuffer()>
c0017283:	83 c4 10             	add    esp,0x10
c0017286:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001728a:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001728d:	83 ec 0c             	sub    esp,0xc
c0017290:	50                   	push   eax
c0017291:	e8 ac 86 ff ff       	call   c000f942 <free>
c0017296:	83 c4 10             	add    esp,0x10
c0017299:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001729d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00172a0:	83 ec 0c             	sub    esp,0xc
c00172a3:	50                   	push   eax
c00172a4:	e8 99 86 ff ff       	call   c000f942 <free>
c00172a9:	83 c4 10             	add    esp,0x10
c00172ac:	90                   	nop
c00172ad:	83 c4 0c             	add    esp,0xc
c00172b0:	c3                   	ret    
c00172b1:	90                   	nop

c00172b2 <VCache::~VCache()>:
c00172b2:	83 ec 0c             	sub    esp,0xc
c00172b5:	83 ec 0c             	sub    esp,0xc
c00172b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00172bc:	e8 9d ff ff ff       	call   c001725e <VCache::~VCache()>
c00172c1:	83 c4 10             	add    esp,0x10
c00172c4:	83 ec 08             	sub    esp,0x8
c00172c7:	6a 44                	push   0x44
c00172c9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00172cd:	e8 3f bb ff ff       	call   c0012e11 <operator delete(void*, unsigned long)>
c00172d2:	83 c4 10             	add    esp,0x10
c00172d5:	83 c4 0c             	add    esp,0xc
c00172d8:	c3                   	ret    
c00172d9:	90                   	nop

c00172da <VCache::write(unsigned long long, int, void*)>:
c00172da:	55                   	push   ebp
c00172db:	57                   	push   edi
c00172dc:	56                   	push   esi
c00172dd:	53                   	push   ebx
c00172de:	83 ec 28             	sub    esp,0x28
c00172e1:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00172e5:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00172e9:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00172ed:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c00172f1:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00172f4:	e8 f1 74 00 00       	call   c001e7ea <Semaphore::acquire()>
c00172f9:	83 c4 10             	add    esp,0x10
c00172fc:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0017300:	74 0c                	je     c001730e <VCache::write(unsigned long long, int, void*)+0x34>
c0017302:	83 ec 0c             	sub    esp,0xc
c0017305:	53                   	push   ebx
c0017306:	e8 07 ff ff ff       	call   c0017212 <VCache::invalidateReadBuffer()>
c001730b:	83 c4 10             	add    esp,0x10
c001730e:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0017312:	74 66                	je     c001737a <VCache::write(unsigned long long, int, void*)+0xa0>
c0017314:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0017317:	99                   	cdq    
c0017318:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001731c:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c001731f:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c0017322:	89 c1                	mov    ecx,eax
c0017324:	89 d0                	mov    eax,edx
c0017326:	31 f1                	xor    ecx,esi
c0017328:	31 f8                	xor    eax,edi
c001732a:	89 ca                	mov    edx,ecx
c001732c:	09 c2                	or     edx,eax
c001732e:	75 3e                	jne    c001736e <VCache::write(unsigned long long, int, void*)+0x94>
c0017330:	83 fd 01             	cmp    ebp,0x1
c0017333:	75 39                	jne    c001736e <VCache::write(unsigned long long, int, void*)+0x94>
c0017335:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0017338:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001733e:	51                   	push   ecx
c001733f:	50                   	push   eax
c0017340:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0017344:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0017348:	0f af c8             	imul   ecx,eax
c001734b:	03 4b 28             	add    ecx,DWORD PTR [ebx+0x28]
c001734e:	51                   	push   ecx
c001734f:	e8 14 94 fe ff       	call   c0000768 <memcpy>
c0017354:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0017357:	83 c4 10             	add    esp,0x10
c001735a:	40                   	inc    eax
c001735b:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c001735e:	83 c0 80             	add    eax,0xffffff80
c0017361:	75 57                	jne    c00173ba <VCache::write(unsigned long long, int, void*)+0xe0>
c0017363:	83 ec 0c             	sub    esp,0xc
c0017366:	53                   	push   ebx
c0017367:	e8 b6 fe ff ff       	call   c0017222 <VCache::writeWriteBuffer()>
c001736c:	eb 34                	jmp    c00173a2 <VCache::write(unsigned long long, int, void*)+0xc8>
c001736e:	83 ec 0c             	sub    esp,0xc
c0017371:	53                   	push   ebx
c0017372:	e8 ab fe ff ff       	call   c0017222 <VCache::writeWriteBuffer()>
c0017377:	83 c4 10             	add    esp,0x10
c001737a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001737d:	83 fd 7f             	cmp    ebp,0x7f
c0017380:	7f 25                	jg     c00173a7 <VCache::write(unsigned long long, int, void*)+0xcd>
c0017382:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0017385:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c0017388:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c001738b:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c001738f:	52                   	push   edx
c0017390:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0017396:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001739a:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001739d:	e8 c6 93 fe ff       	call   c0000768 <memcpy>
c00173a2:	83 c4 10             	add    esp,0x10
c00173a5:	eb 13                	jmp    c00173ba <VCache::write(unsigned long long, int, void*)+0xe0>
c00173a7:	83 ec 0c             	sub    esp,0xc
c00173aa:	8b 10                	mov    edx,DWORD PTR [eax]
c00173ac:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00173b0:	55                   	push   ebp
c00173b1:	57                   	push   edi
c00173b2:	56                   	push   esi
c00173b3:	50                   	push   eax
c00173b4:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c00173b7:	83 c4 20             	add    esp,0x20
c00173ba:	83 ec 0c             	sub    esp,0xc
c00173bd:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00173c0:	e8 5f 7b 00 00       	call   c001ef24 <Semaphore::release()>
c00173c5:	83 c4 2c             	add    esp,0x2c
c00173c8:	31 c0                	xor    eax,eax
c00173ca:	5b                   	pop    ebx
c00173cb:	5e                   	pop    esi
c00173cc:	5f                   	pop    edi
c00173cd:	5d                   	pop    ebp
c00173ce:	c3                   	ret    
c00173cf:	90                   	nop

c00173d0 <VCache::read(unsigned long long, int, void*)>:
c00173d0:	55                   	push   ebp
c00173d1:	57                   	push   edi
c00173d2:	56                   	push   esi
c00173d3:	53                   	push   ebx
c00173d4:	83 ec 28             	sub    esp,0x28
c00173d7:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00173db:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00173df:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00173e3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00173e7:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00173eb:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00173ef:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c00173f3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00173f6:	e8 ef 73 00 00       	call   c001e7ea <Semaphore::acquire()>
c00173fb:	83 c4 10             	add    esp,0x10
c00173fe:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0017402:	74 0c                	je     c0017410 <VCache::read(unsigned long long, int, void*)+0x40>
c0017404:	83 ec 0c             	sub    esp,0xc
c0017407:	53                   	push   ebx
c0017408:	e8 15 fe ff ff       	call   c0017222 <VCache::writeWriteBuffer()>
c001740d:	83 c4 10             	add    esp,0x10
c0017410:	83 fe 01             	cmp    esi,0x1
c0017413:	0f 85 80 00 00 00    	jne    c0017499 <VCache::read(unsigned long long, int, void*)+0xc9>
c0017419:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001741c:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c0017423:	75 74                	jne    c0017499 <VCache::read(unsigned long long, int, void*)+0xc9>
c0017425:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0017428:	89 d1                	mov    ecx,edx
c001742a:	f7 d9                	neg    ecx
c001742c:	89 cf                	mov    edi,ecx
c001742e:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0017432:	c1 ff 1f             	sar    edi,0x1f
c0017435:	23 0c 24             	and    ecx,DWORD PTR [esp]
c0017438:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001743c:	89 ce                	mov    esi,ecx
c001743e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017442:	23 4c 24 04          	and    ecx,DWORD PTR [esp+0x4]
c0017446:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c001744a:	89 cf                	mov    edi,ecx
c001744c:	74 0a                	je     c0017458 <VCache::read(unsigned long long, int, void*)+0x88>
c001744e:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c0017451:	75 05                	jne    c0017458 <VCache::read(unsigned long long, int, void*)+0x88>
c0017453:	39 73 30             	cmp    DWORD PTR [ebx+0x30],esi
c0017456:	74 1c                	je     c0017474 <VCache::read(unsigned long long, int, void*)+0xa4>
c0017458:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c001745c:	89 73 30             	mov    DWORD PTR [ebx+0x30],esi
c001745f:	89 7b 34             	mov    DWORD PTR [ebx+0x34],edi
c0017462:	83 ec 0c             	sub    esp,0xc
c0017465:	8b 08                	mov    ecx,DWORD PTR [eax]
c0017467:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c001746a:	52                   	push   edx
c001746b:	57                   	push   edi
c001746c:	56                   	push   esi
c001746d:	50                   	push   eax
c001746e:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c0017471:	83 c4 20             	add    esp,0x20
c0017474:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0017477:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001747d:	50                   	push   eax
c001747e:	52                   	push   edx
c001747f:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0017482:	48                   	dec    eax
c0017483:	23 44 24 08          	and    eax,DWORD PTR [esp+0x8]
c0017487:	0f af c2             	imul   eax,edx
c001748a:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c001748d:	50                   	push   eax
c001748e:	55                   	push   ebp
c001748f:	e8 d4 92 fe ff       	call   c0000768 <memcpy>
c0017494:	83 c4 10             	add    esp,0x10
c0017497:	eb 21                	jmp    c00174ba <VCache::read(unsigned long long, int, void*)+0xea>
c0017499:	83 ec 0c             	sub    esp,0xc
c001749c:	53                   	push   ebx
c001749d:	e8 70 fd ff ff       	call   c0017212 <VCache::invalidateReadBuffer()>
c00174a2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00174a5:	8b 10                	mov    edx,DWORD PTR [eax]
c00174a7:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00174aa:	56                   	push   esi
c00174ab:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00174af:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00174b3:	50                   	push   eax
c00174b4:	ff 52 28             	call   DWORD PTR [edx+0x28]
c00174b7:	83 c4 20             	add    esp,0x20
c00174ba:	83 ec 0c             	sub    esp,0xc
c00174bd:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00174c0:	e8 5f 7a 00 00       	call   c001ef24 <Semaphore::release()>
c00174c5:	83 c4 2c             	add    esp,0x2c
c00174c8:	31 c0                	xor    eax,eax
c00174ca:	5b                   	pop    ebx
c00174cb:	5e                   	pop    esi
c00174cc:	5f                   	pop    edi
c00174cd:	5d                   	pop    ebp
c00174ce:	c3                   	ret    
c00174cf:	90                   	nop

c00174d0 <Video::putrect(int, int, int, int, unsigned int)>:
c00174d0:	55                   	push   ebp
c00174d1:	57                   	push   edi
c00174d2:	56                   	push   esi
c00174d3:	53                   	push   ebx
c00174d4:	83 ec 1c             	sub    esp,0x1c
c00174d7:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00174db:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00174df:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c00174e3:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c00174e7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00174eb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00174ef:	01 df                	add    edi,ebx
c00174f1:	39 fb                	cmp    ebx,edi
c00174f3:	7d 1f                	jge    c0017514 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c00174f5:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00174f9:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c00174fd:	7d 12                	jge    c0017511 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c00174ff:	8b 16                	mov    edx,DWORD PTR [esi]
c0017501:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0017505:	53                   	push   ebx
c0017506:	55                   	push   ebp
c0017507:	45                   	inc    ebp
c0017508:	56                   	push   esi
c0017509:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001750c:	83 c4 10             	add    esp,0x10
c001750f:	eb e8                	jmp    c00174f9 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c0017511:	43                   	inc    ebx
c0017512:	eb dd                	jmp    c00174f1 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c0017514:	83 c4 1c             	add    esp,0x1c
c0017517:	5b                   	pop    ebx
c0017518:	5e                   	pop    esi
c0017519:	5f                   	pop    edi
c001751a:	5d                   	pop    ebp
c001751b:	c3                   	ret    

c001751c <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c001751c:	55                   	push   ebp
c001751d:	57                   	push   edi
c001751e:	31 ff                	xor    edi,edi
c0017520:	56                   	push   esi
c0017521:	53                   	push   ebx
c0017522:	83 ec 1c             	sub    esp,0x1c
c0017525:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0017529:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001752d:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c0017534:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c0017539:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001753d:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0017541:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017545:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c0017548:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001754c:	01 f9                	add    ecx,edi
c001754e:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c0017552:	7d 2f                	jge    c0017583 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c0017554:	31 f6                	xor    esi,esi
c0017556:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001755a:	01 f2                	add    edx,esi
c001755c:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c0017560:	7d 1a                	jge    c001757c <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c0017562:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0017565:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c0017568:	46                   	inc    esi
c0017569:	51                   	push   ecx
c001756a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001756e:	52                   	push   edx
c001756f:	55                   	push   ebp
c0017570:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0017573:	83 c4 10             	add    esp,0x10
c0017576:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001757a:	eb da                	jmp    c0017556 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c001757c:	47                   	inc    edi
c001757d:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c0017581:	eb c5                	jmp    c0017548 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c0017583:	83 c4 1c             	add    esp,0x1c
c0017586:	5b                   	pop    ebx
c0017587:	5e                   	pop    esi
c0017588:	5f                   	pop    edi
c0017589:	5d                   	pop    ebp
c001758a:	c3                   	ret    
c001758b:	90                   	nop

c001758c <Video::blit(unsigned int*, int, int, int, int)>:
c001758c:	55                   	push   ebp
c001758d:	57                   	push   edi
c001758e:	56                   	push   esi
c001758f:	53                   	push   ebx
c0017590:	83 ec 1c             	sub    esp,0x1c
c0017593:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017597:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001759b:	85 c0                	test   eax,eax
c001759d:	79 02                	jns    c00175a1 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c001759f:	31 c0                	xor    eax,eax
c00175a1:	c1 e0 02             	shl    eax,0x2
c00175a4:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00175a8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00175ac:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00175b0:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c00175b4:	39 d8                	cmp    eax,ebx
c00175b6:	7e 49                	jle    c0017601 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c00175b8:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c00175be:	7c 41                	jl     c0017601 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c00175c0:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00175c4:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00175c8:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00175cc:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c00175d0:	39 f9                	cmp    ecx,edi
c00175d2:	7e 22                	jle    c00175f6 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c00175d4:	83 c5 04             	add    ebp,0x4
c00175d7:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c00175dd:	7c 14                	jl     c00175f3 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c00175df:	8b 0e                	mov    ecx,DWORD PTR [esi]
c00175e1:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c00175e4:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00175e8:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00175ec:	56                   	push   esi
c00175ed:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c00175f0:	83 c4 10             	add    esp,0x10
c00175f3:	47                   	inc    edi
c00175f4:	eb d2                	jmp    c00175c8 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c00175f6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00175fa:	43                   	inc    ebx
c00175fb:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c00175ff:	eb ab                	jmp    c00175ac <Video::blit(unsigned int*, int, int, int, int)+0x20>
c0017601:	83 c4 1c             	add    esp,0x1c
c0017604:	5b                   	pop    ebx
c0017605:	5e                   	pop    esi
c0017606:	5f                   	pop    edi
c0017607:	5d                   	pop    ebp
c0017608:	c3                   	ret    
c0017609:	90                   	nop

c001760a <Video::clearScreen(unsigned int)>:
c001760a:	57                   	push   edi
c001760b:	56                   	push   esi
c001760c:	53                   	push   ebx
c001760d:	31 db                	xor    ebx,ebx
c001760f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0017613:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0017619:	7e 1f                	jle    c001763a <Video::clearScreen(unsigned int)+0x30>
c001761b:	31 ff                	xor    edi,edi
c001761d:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0017623:	7e 12                	jle    c0017637 <Video::clearScreen(unsigned int)+0x2d>
c0017625:	8b 06                	mov    eax,DWORD PTR [esi]
c0017627:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001762b:	53                   	push   ebx
c001762c:	57                   	push   edi
c001762d:	47                   	inc    edi
c001762e:	56                   	push   esi
c001762f:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0017632:	83 c4 10             	add    esp,0x10
c0017635:	eb e6                	jmp    c001761d <Video::clearScreen(unsigned int)+0x13>
c0017637:	43                   	inc    ebx
c0017638:	eb d9                	jmp    c0017613 <Video::clearScreen(unsigned int)+0x9>
c001763a:	5b                   	pop    ebx
c001763b:	5e                   	pop    esi
c001763c:	5f                   	pop    edi
c001763d:	c3                   	ret    

c001763e <Video::putpixel(int, int, unsigned int)>:
c001763e:	c7 44 24 04 a8 bc 02 c0 	mov    DWORD PTR [esp+0x4],0xc002bca8
c0017646:	e9 66 32 00 00       	jmp    c001a8b1 <Krnl::panic(char const*)>
c001764b:	90                   	nop

c001764c <Video::Video(char const*)>:
c001764c:	83 ec 0c             	sub    esp,0xc
c001764f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017653:	83 ec 08             	sub    esp,0x8
c0017656:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001765a:	50                   	push   eax
c001765b:	e8 b6 ce ff ff       	call   c0014516 <Device::Device(char const*)>
c0017660:	83 c4 10             	add    esp,0x10
c0017663:	ba 2c bd 02 c0       	mov    edx,0xc002bd2c
c0017668:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001766c:	89 10                	mov    DWORD PTR [eax],edx
c001766e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017672:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c001767c:	90                   	nop
c001767d:	83 c4 0c             	add    esp,0xc
c0017680:	c3                   	ret    
c0017681:	90                   	nop

c0017682 <Video::~Video()>:
c0017682:	83 ec 0c             	sub    esp,0xc
c0017685:	ba 2c bd 02 c0       	mov    edx,0xc002bd2c
c001768a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001768e:	89 10                	mov    DWORD PTR [eax],edx
c0017690:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017694:	83 ec 0c             	sub    esp,0xc
c0017697:	50                   	push   eax
c0017698:	e8 5b cb ff ff       	call   c00141f8 <Device::~Device()>
c001769d:	83 c4 10             	add    esp,0x10
c00176a0:	90                   	nop
c00176a1:	83 c4 0c             	add    esp,0xc
c00176a4:	c3                   	ret    
c00176a5:	90                   	nop

c00176a6 <Video::~Video()>:
c00176a6:	83 ec 0c             	sub    esp,0xc
c00176a9:	83 ec 0c             	sub    esp,0xc
c00176ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00176b0:	e8 cd ff ff ff       	call   c0017682 <Video::~Video()>
c00176b5:	83 c4 10             	add    esp,0x10
c00176b8:	83 ec 08             	sub    esp,0x8
c00176bb:	68 64 01 00 00       	push   0x164
c00176c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00176c4:	e8 48 b7 ff ff       	call   c0012e11 <operator delete(void*, unsigned long)>
c00176c9:	83 c4 10             	add    esp,0x10
c00176cc:	83 c4 0c             	add    esp,0xc
c00176cf:	c3                   	ret    

c00176d0 <Video::isMonochrome()>:
c00176d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00176d4:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c00176da:	c3                   	ret    
c00176db:	90                   	nop

c00176dc <Video::getWidth()>:
c00176dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00176e0:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00176e6:	c3                   	ret    
c00176e7:	90                   	nop

c00176e8 <Video::getHeight()>:
c00176e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00176ec:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00176f2:	c3                   	ret    
c00176f3:	90                   	nop

c00176f4 <Video::drawCursor(int, int, unsigned char*, int)>:
c00176f4:	55                   	push   ebp
c00176f5:	57                   	push   edi
c00176f6:	56                   	push   esi
c00176f7:	53                   	push   ebx
c00176f8:	83 ec 2c             	sub    esp,0x2c
c00176fb:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00176ff:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0017703:	83 f8 01             	cmp    eax,0x1
c0017706:	19 c9                	sbb    ecx,ecx
c0017708:	31 db                	xor    ebx,ebx
c001770a:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c001770e:	89 cd                	mov    ebp,ecx
c0017710:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c0017718:	f7 d5                	not    ebp
c001771a:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c0017720:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0017724:	01 d8                	add    eax,ebx
c0017726:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001772a:	56                   	push   esi
c001772b:	e8 b8 ff ff ff       	call   c00176e8 <Video::getHeight()>
c0017730:	59                   	pop    ecx
c0017731:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0017735:	7e 70                	jle    c00177a7 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c0017737:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001773b:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c001773f:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c0017742:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017746:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001774a:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c0017751:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017755:	89 f8                	mov    eax,edi
c0017757:	83 c0 20             	add    eax,0x20
c001775a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001775e:	56                   	push   esi
c001775f:	e8 78 ff ff ff       	call   c00176dc <Video::getWidth()>
c0017764:	5a                   	pop    edx
c0017765:	39 c7                	cmp    edi,eax
c0017767:	7d 34                	jge    c001779d <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c0017769:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c001776e:	74 05                	je     c0017775 <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c0017770:	8b 06                	mov    eax,DWORD PTR [esi]
c0017772:	55                   	push   ebp
c0017773:	eb 0d                	jmp    c0017782 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c0017775:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c001777a:	74 12                	je     c001778e <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c001777c:	8b 06                	mov    eax,DWORD PTR [esi]
c001777e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017782:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017786:	57                   	push   edi
c0017787:	56                   	push   esi
c0017788:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001778b:	83 c4 10             	add    esp,0x10
c001778e:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c0017792:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c0017796:	47                   	inc    edi
c0017797:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c001779b:	75 c1                	jne    c001775e <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c001779d:	43                   	inc    ebx
c001779e:	83 fb 20             	cmp    ebx,0x20
c00177a1:	0f 85 79 ff ff ff    	jne    c0017720 <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c00177a7:	83 c4 2c             	add    esp,0x2c
c00177aa:	5b                   	pop    ebx
c00177ab:	5e                   	pop    esi
c00177ac:	5f                   	pop    edi
c00177ad:	5d                   	pop    ebp
c00177ae:	c3                   	ret    
c00177af:	90                   	nop

c00177b0 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c00177b0:	55                   	push   ebp
c00177b1:	57                   	push   edi
c00177b2:	56                   	push   esi
c00177b3:	53                   	push   ebx
c00177b4:	83 ec 28             	sub    esp,0x28
c00177b7:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00177bb:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c00177bf:	0f b6 7b 0d          	movzx  edi,BYTE PTR [ebx+0xd]
c00177c3:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c00177c7:	c1 e7 08             	shl    edi,0x8
c00177ca:	01 c7                	add    edi,eax
c00177cc:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c00177d0:	c1 e0 08             	shl    eax,0x8
c00177d3:	01 d0                	add    eax,edx
c00177d5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00177d9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00177dd:	0f af c7             	imul   eax,edi
c00177e0:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c00177e7:	50                   	push   eax
c00177e8:	e8 45 81 ff ff       	call   c000f932 <malloc>
c00177ed:	83 c4 10             	add    esp,0x10
c00177f0:	89 c5                	mov    ebp,eax
c00177f2:	85 c0                	test   eax,eax
c00177f4:	75 15                	jne    c001780b <Video::tgaParse(unsigned char*, int, int*, int*)+0x5b>
c00177f6:	83 ec 0c             	sub    esp,0xc
c00177f9:	68 c9 bc 02 c0       	push   0xc002bcc9
c00177fe:	e8 ee b6 ff ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c0017803:	83 c4 10             	add    esp,0x10
c0017806:	e9 1c 01 00 00       	jmp    c0017927 <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c001780b:	be 12 00 00 00       	mov    esi,0x12
c0017810:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c0017814:	74 11                	je     c0017827 <Video::tgaParse(unsigned char*, int, int*, int*)+0x77>
c0017816:	0f b6 73 07          	movzx  esi,BYTE PTR [ebx+0x7]
c001781a:	0f b7 43 05          	movzx  eax,WORD PTR [ebx+0x5]
c001781e:	c1 fe 03             	sar    esi,0x3
c0017821:	0f af f0             	imul   esi,eax
c0017824:	83 c6 12             	add    esi,0x12
c0017827:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c001782b:	74 04                	je     c0017831 <Video::tgaParse(unsigned char*, int, int*, int*)+0x81>
c001782d:	85 ff                	test   edi,edi
c001782f:	75 12                	jne    c0017843 <Video::tgaParse(unsigned char*, int, int*, int*)+0x93>
c0017831:	83 ec 0c             	sub    esp,0xc
c0017834:	68 e0 bc 02 c0       	push   0xc002bce0
c0017839:	e8 b3 b6 ff ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c001783e:	e9 ce 00 00 00       	jmp    c0017911 <Video::tgaParse(unsigned char*, int, int*, int*)+0x161>
c0017843:	52                   	push   edx
c0017844:	52                   	push   edx
c0017845:	0f b6 43 02          	movzx  eax,BYTE PTR [ebx+0x2]
c0017849:	50                   	push   eax
c001784a:	68 f5 bc 02 c0       	push   0xc002bcf5
c001784f:	e8 9d b6 ff ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c0017854:	0f b6 53 02          	movzx  edx,BYTE PTR [ebx+0x2]
c0017858:	83 c4 10             	add    esp,0x10
c001785b:	80 fa 02             	cmp    dl,0x2
c001785e:	0f 85 98 00 00 00    	jne    c00178fc <Video::tgaParse(unsigned char*, int, int*, int*)+0x14c>
c0017864:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c0017869:	75 10                	jne    c001787b <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c001786b:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c001786f:	75 0a                	jne    c001787b <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c0017871:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0017874:	83 e8 18             	sub    eax,0x18
c0017877:	a8 f7                	test   al,0xf7
c0017879:	74 0a                	je     c0017885 <Video::tgaParse(unsigned char*, int, int*, int*)+0xd5>
c001787b:	83 ec 0c             	sub    esp,0xc
c001787e:	68 02 bd 02 c0       	push   0xc002bd02
c0017883:	eb 7f                	jmp    c0017904 <Video::tgaParse(unsigned char*, int, int*, int*)+0x154>
c0017885:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001788d:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0017895:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0017899:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00178a1:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c00178a5:	75 0c                	jne    c00178b3 <Video::tgaParse(unsigned char*, int, int*, int*)+0x103>
c00178a7:	0f b6 44 33 03       	movzx  eax,BYTE PTR [ebx+esi*1+0x3]
c00178ac:	c1 e0 18             	shl    eax,0x18
c00178af:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00178b3:	41                   	inc    ecx
c00178b4:	0f b6 54 33 02       	movzx  edx,BYTE PTR [ebx+esi*1+0x2]
c00178b9:	c1 e2 10             	shl    edx,0x10
c00178bc:	89 d0                	mov    eax,edx
c00178be:	0f b6 54 33 01       	movzx  edx,BYTE PTR [ebx+esi*1+0x1]
c00178c3:	c1 e2 08             	shl    edx,0x8
c00178c6:	09 c2                	or     edx,eax
c00178c8:	0f b6 04 33          	movzx  eax,BYTE PTR [ebx+esi*1]
c00178cc:	09 c2                	or     edx,eax
c00178ce:	0b 54 24 08          	or     edx,DWORD PTR [esp+0x8]
c00178d2:	89 54 8d fc          	mov    DWORD PTR [ebp+ecx*4-0x4],edx
c00178d6:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c00178da:	c1 f8 03             	sar    eax,0x3
c00178dd:	01 c6                	add    esi,eax
c00178df:	89 c8                	mov    eax,ecx
c00178e1:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c00178e5:	39 c7                	cmp    edi,eax
c00178e7:	7f b0                	jg     c0017899 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c00178e9:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00178ed:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00178f1:	39 14 24             	cmp    DWORD PTR [esp],edx
c00178f4:	7e 22                	jle    c0017918 <Video::tgaParse(unsigned char*, int, int*, int*)+0x168>
c00178f6:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c00178fa:	eb 99                	jmp    c0017895 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe5>
c00178fc:	50                   	push   eax
c00178fd:	50                   	push   eax
c00178fe:	52                   	push   edx
c00178ff:	68 10 bd 02 c0       	push   0xc002bd10
c0017904:	e8 e8 b5 ff ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c0017909:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001790c:	e8 31 80 ff ff       	call   c000f942 <free>
c0017911:	83 c4 10             	add    esp,0x10
c0017914:	31 ed                	xor    ebp,ebp
c0017916:	eb 0f                	jmp    c0017927 <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c0017918:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001791c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c001791f:	89 38                	mov    DWORD PTR [eax],edi
c0017921:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017925:	89 08                	mov    DWORD PTR [eax],ecx
c0017927:	83 c4 1c             	add    esp,0x1c
c001792a:	89 e8                	mov    eax,ebp
c001792c:	5b                   	pop    ebx
c001792d:	5e                   	pop    esi
c001792e:	5f                   	pop    edi
c001792f:	5d                   	pop    ebp
c0017930:	c3                   	ret    
c0017931:	90                   	nop

c0017932 <Video::putTGA(int, int, unsigned char*, int)>:
c0017932:	55                   	push   ebp
c0017933:	57                   	push   edi
c0017934:	56                   	push   esi
c0017935:	53                   	push   ebx
c0017936:	83 ec 28             	sub    esp,0x28
c0017939:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001793d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017941:	50                   	push   eax
c0017942:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017946:	50                   	push   eax
c0017947:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001794b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001794f:	56                   	push   esi
c0017950:	e8 5b fe ff ff       	call   c00177b0 <Video::tgaParse(unsigned char*, int, int*, int*)>
c0017955:	83 c4 20             	add    esp,0x20
c0017958:	85 c0                	test   eax,eax
c001795a:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001795e:	74 35                	je     c0017995 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0017960:	89 c7                	mov    edi,eax
c0017962:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017966:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c001796a:	39 d8                	cmp    eax,ebx
c001796c:	7e 27                	jle    c0017995 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c001796e:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0017972:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017976:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001797a:	39 e8                	cmp    eax,ebp
c001797c:	7e 14                	jle    c0017992 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c001797e:	8b 06                	mov    eax,DWORD PTR [esi]
c0017980:	83 c7 04             	add    edi,0x4
c0017983:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c0017986:	53                   	push   ebx
c0017987:	55                   	push   ebp
c0017988:	45                   	inc    ebp
c0017989:	56                   	push   esi
c001798a:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001798d:	83 c4 10             	add    esp,0x10
c0017990:	eb e0                	jmp    c0017972 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c0017992:	43                   	inc    ebx
c0017993:	eb cd                	jmp    c0017962 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c0017995:	83 c4 1c             	add    esp,0x1c
c0017998:	5b                   	pop    ebx
c0017999:	5e                   	pop    esi
c001799a:	5f                   	pop    edi
c001799b:	5d                   	pop    ebp
c001799c:	c3                   	ret    
c001799d:	90                   	nop

c001799e <ACPI::close(int, int, void*)>:
c001799e:	83 ec 1c             	sub    esp,0x1c
c00179a1:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c00179a9:	74 0a                	je     c00179b5 <ACPI::close(int, int, void*)+0x17>
c00179ab:	b8 00 00 00 00       	mov    eax,0x0
c00179b0:	e9 9a 00 00 00       	jmp    c0017a4f <ACPI::close(int, int, void*)+0xb1>
c00179b5:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00179ba:	75 37                	jne    c00179f3 <ACPI::close(int, int, void*)+0x55>
c00179bc:	83 ec 0c             	sub    esp,0xc
c00179bf:	68 6c bd 02 c0       	push   0xc002bd6c
c00179c4:	e8 28 b5 ff ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c00179c9:	83 c4 10             	add    esp,0x10
c00179cc:	a1 28 15 03 c0       	mov    eax,ds:0xc0031528
c00179d1:	85 c0                	test   eax,eax
c00179d3:	74 07                	je     c00179dc <ACPI::close(int, int, void*)+0x3e>
c00179d5:	a1 28 15 03 c0       	mov    eax,ds:0xc0031528
c00179da:	ff d0                	call   eax
c00179dc:	83 ec 0c             	sub    esp,0xc
c00179df:	68 e0 be 02 c0       	push   0xc002bee0
c00179e4:	e8 c8 2e 00 00       	call   c001a8b1 <Krnl::panic(char const*)>
c00179e9:	83 c4 10             	add    esp,0x10
c00179ec:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00179f1:	eb 5c                	jmp    c0017a4f <ACPI::close(int, int, void*)+0xb1>
c00179f3:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c00179f8:	75 50                	jne    c0017a4a <ACPI::close(int, int, void*)+0xac>
c00179fa:	a1 24 15 03 c0       	mov    eax,ds:0xc0031524
c00179ff:	85 c0                	test   eax,eax
c0017a01:	74 07                	je     c0017a0a <ACPI::close(int, int, void*)+0x6c>
c0017a03:	a1 24 15 03 c0       	mov    eax,ds:0xc0031524
c0017a08:	ff d0                	call   eax
c0017a0a:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c0017a0f:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0017a14:	83 e0 02             	and    eax,0x2
c0017a17:	74 1c                	je     c0017a35 <ACPI::close(int, int, void*)+0x97>
c0017a19:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c0017a20:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017a24:	89 c2                	mov    edx,eax
c0017a26:	ec                   	in     al,dx
c0017a27:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0017a2b:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0017a2f:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017a33:	eb da                	jmp    c0017a0f <ACPI::close(int, int, void*)+0x71>
c0017a35:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c0017a3c:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c0017a41:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0017a45:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017a49:	ee                   	out    dx,al
c0017a4a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0017a4f:	83 c4 1c             	add    esp,0x1c
c0017a52:	c3                   	ret    

c0017a53 <findRSDP()>:
c0017a53:	83 ec 1c             	sub    esp,0x1c
c0017a56:	83 ec 0c             	sub    esp,0xc
c0017a59:	68 79 bd 02 c0       	push   0xc002bd79
c0017a5e:	e8 8e b4 ff ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c0017a63:	83 c4 10             	add    esp,0x10
c0017a66:	a1 68 ee 02 c0       	mov    eax,ds:0xc002ee68
c0017a6b:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017a71:	83 e0 04             	and    eax,0x4
c0017a74:	84 c0                	test   al,al
c0017a76:	75 07                	jne    c0017a7f <findRSDP()+0x2c>
c0017a78:	b8 00 00 00 00       	mov    eax,0x0
c0017a7d:	eb 6a                	jmp    c0017ae9 <findRSDP()+0x96>
c0017a7f:	a1 b4 ee 02 c0       	mov    eax,ds:0xc002eeb4
c0017a84:	3d ff 07 00 00       	cmp    eax,0x7ff
c0017a89:	7f 1b                	jg     c0017aa6 <findRSDP()+0x53>
c0017a8b:	a1 68 ee 02 c0       	mov    eax,ds:0xc002ee68
c0017a90:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017a96:	83 e2 fb             	and    edx,0xfffffffb
c0017a99:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017a9f:	b8 00 00 00 00       	mov    eax,0x0
c0017aa4:	eb 43                	jmp    c0017ae9 <findRSDP()+0x96>
c0017aa6:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c0017aae:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c0017ab6:	77 2c                	ja     c0017ae4 <findRSDP()+0x91>
c0017ab8:	83 ec 04             	sub    esp,0x4
c0017abb:	6a 08                	push   0x8
c0017abd:	68 87 bd 02 c0       	push   0xc002bd87
c0017ac2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017ac6:	e8 99 8b fe ff       	call   c0000664 <memcmp>
c0017acb:	83 c4 10             	add    esp,0x10
c0017ace:	85 c0                	test   eax,eax
c0017ad0:	0f 94 c0             	sete   al
c0017ad3:	84 c0                	test   al,al
c0017ad5:	74 06                	je     c0017add <findRSDP()+0x8a>
c0017ad7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017adb:	eb 0c                	jmp    c0017ae9 <findRSDP()+0x96>
c0017add:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c0017ae2:	eb ca                	jmp    c0017aae <findRSDP()+0x5b>
c0017ae4:	b8 00 00 00 00       	mov    eax,0x0
c0017ae9:	83 c4 1c             	add    esp,0x1c
c0017aec:	c3                   	ret    

c0017aed <loadACPITables(unsigned char*)>:
c0017aed:	56                   	push   esi
c0017aee:	53                   	push   ebx
c0017aef:	83 ec 44             	sub    esp,0x44
c0017af2:	a1 68 ee 02 c0       	mov    eax,ds:0xc002ee68
c0017af7:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017afd:	83 e0 04             	and    eax,0x4
c0017b00:	84 c0                	test   al,al
c0017b02:	0f 84 05 02 00 00    	je     c0017d0d <loadACPITables(unsigned char*)+0x220>
c0017b08:	a0 40 17 03 c0       	mov    al,ds:0xc0031740
c0017b0d:	84 c0                	test   al,al
c0017b0f:	74 75                	je     c0017b86 <loadACPITables(unsigned char*)+0x99>
c0017b11:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017b15:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017b19:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017b1d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017b20:	83 e8 24             	sub    eax,0x24
c0017b23:	c1 e8 03             	shr    eax,0x3
c0017b26:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0017b2a:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c0017b32:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017b36:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0017b3a:	0f 8d b2 00 00 00    	jge    c0017bf2 <loadACPITables(unsigned char*)+0x105>
c0017b40:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017b44:	83 c0 24             	add    eax,0x24
c0017b47:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017b4b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017b4f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017b53:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017b57:	c1 e0 03             	shl    eax,0x3
c0017b5a:	01 44 24 24          	add    DWORD PTR [esp+0x24],eax
c0017b5e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017b62:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0017b65:	8b 00                	mov    eax,DWORD PTR [eax]
c0017b67:	89 c1                	mov    ecx,eax
c0017b69:	a1 2c 15 03 c0       	mov    eax,ds:0xc003152c
c0017b6e:	8d 50 01             	lea    edx,[eax+0x1]
c0017b71:	89 15 2c 15 03 c0    	mov    DWORD PTR ds:0xc003152c,edx
c0017b77:	89 ca                	mov    edx,ecx
c0017b79:	89 14 c5 44 15 03 c0 	mov    DWORD PTR [eax*8-0x3ffceabc],edx
c0017b80:	ff 44 24 3c          	inc    DWORD PTR [esp+0x3c]
c0017b84:	eb ac                	jmp    c0017b32 <loadACPITables(unsigned char*)+0x45>
c0017b86:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017b8a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0017b8e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017b92:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017b95:	83 e8 24             	sub    eax,0x24
c0017b98:	c1 e8 02             	shr    eax,0x2
c0017b9b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017b9f:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
c0017ba7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017bab:	3b 44 24 1c          	cmp    eax,DWORD PTR [esp+0x1c]
c0017baf:	7d 41                	jge    c0017bf2 <loadACPITables(unsigned char*)+0x105>
c0017bb1:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017bb5:	83 c0 24             	add    eax,0x24
c0017bb8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017bbc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017bc0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017bc4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017bc8:	c1 e0 02             	shl    eax,0x2
c0017bcb:	01 44 24 14          	add    DWORD PTR [esp+0x14],eax
c0017bcf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017bd3:	8b 08                	mov    ecx,DWORD PTR [eax]
c0017bd5:	a1 2c 15 03 c0       	mov    eax,ds:0xc003152c
c0017bda:	8d 50 01             	lea    edx,[eax+0x1]
c0017bdd:	89 15 2c 15 03 c0    	mov    DWORD PTR ds:0xc003152c,edx
c0017be3:	89 ca                	mov    edx,ecx
c0017be5:	89 14 c5 44 15 03 c0 	mov    DWORD PTR [eax*8-0x3ffceabc],edx
c0017bec:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c0017bf0:	eb b5                	jmp    c0017ba7 <loadACPITables(unsigned char*)+0xba>
c0017bf2:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c0017bfa:	a1 2c 15 03 c0       	mov    eax,ds:0xc003152c
c0017bff:	39 44 24 34          	cmp    DWORD PTR [esp+0x34],eax
c0017c03:	0f 8d 05 01 00 00    	jge    c0017d0e <loadACPITables(unsigned char*)+0x221>
c0017c09:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017c0d:	8b 04 c5 44 15 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffceabc]
c0017c14:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017c18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017c1c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017c20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017c24:	25 ff 0f 00 00       	and    eax,0xfff
c0017c29:	89 c6                	mov    esi,eax
c0017c2b:	e8 f4 a0 ff ff       	call   c0011d24 <Virt::getAKernelVAS()>
c0017c30:	89 c3                	mov    ebx,eax
c0017c32:	83 ec 0c             	sub    esp,0xc
c0017c35:	6a 01                	push   0x1
c0017c37:	e8 a9 9e ff ff       	call   c0011ae5 <Virt::allocateKernelVirtualPages(int)>
c0017c3c:	83 c4 10             	add    esp,0x10
c0017c3f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017c43:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017c49:	83 ec 0c             	sub    esp,0xc
c0017c4c:	6a 01                	push   0x1
c0017c4e:	6a 01                	push   0x1
c0017c50:	50                   	push   eax
c0017c51:	52                   	push   edx
c0017c52:	53                   	push   ebx
c0017c53:	e8 be a9 ff ff       	call   c0012616 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017c58:	83 c4 20             	add    esp,0x20
c0017c5b:	09 f0                	or     eax,esi
c0017c5d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017c61:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017c65:	c1 e0 03             	shl    eax,0x3
c0017c68:	05 40 15 03 c0       	add    eax,0xc0031540
c0017c6d:	83 ec 04             	sub    esp,0x4
c0017c70:	6a 04                	push   0x4
c0017c72:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017c76:	50                   	push   eax
c0017c77:	e8 ec 8a fe ff       	call   c0000768 <memcpy>
c0017c7c:	83 c4 10             	add    esp,0x10
c0017c7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017c83:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017c86:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017c8a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017c8e:	05 00 10 00 00       	add    eax,0x1000
c0017c93:	c1 e8 0c             	shr    eax,0xc
c0017c96:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017c9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017c9e:	89 04 24             	mov    DWORD PTR [esp],eax
c0017ca1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017ca5:	25 ff 0f 00 00       	and    eax,0xfff
c0017caa:	89 c6                	mov    esi,eax
c0017cac:	e8 73 a0 ff ff       	call   c0011d24 <Virt::getAKernelVAS()>
c0017cb1:	89 c3                	mov    ebx,eax
c0017cb3:	83 ec 0c             	sub    esp,0xc
c0017cb6:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017cba:	e8 26 9e ff ff       	call   c0011ae5 <Virt::allocateKernelVirtualPages(int)>
c0017cbf:	83 c4 10             	add    esp,0x10
c0017cc2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017cc6:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017ccc:	83 ec 0c             	sub    esp,0xc
c0017ccf:	6a 01                	push   0x1
c0017cd1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017cd5:	50                   	push   eax
c0017cd6:	52                   	push   edx
c0017cd7:	53                   	push   ebx
c0017cd8:	e8 39 a9 ff ff       	call   c0012616 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017cdd:	83 c4 20             	add    esp,0x20
c0017ce0:	09 f0                	or     eax,esi
c0017ce2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017ce6:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0017ce9:	83 ec 0c             	sub    esp,0xc
c0017cec:	50                   	push   eax
c0017ced:	e8 b9 a2 ff ff       	call   c0011fab <Virt::freeKernelVirtualPages(unsigned long)>
c0017cf2:	83 c4 10             	add    esp,0x10
c0017cf5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017cf9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0017cfd:	89 14 c5 44 15 03 c0 	mov    DWORD PTR [eax*8-0x3ffceabc],edx
c0017d04:	ff 44 24 34          	inc    DWORD PTR [esp+0x34]
c0017d08:	e9 ed fe ff ff       	jmp    c0017bfa <loadACPITables(unsigned char*)+0x10d>
c0017d0d:	90                   	nop
c0017d0e:	83 c4 44             	add    esp,0x44
c0017d11:	5b                   	pop    ebx
c0017d12:	5e                   	pop    esi
c0017d13:	c3                   	ret    

c0017d14 <findRSDT(unsigned char*)>:
c0017d14:	56                   	push   esi
c0017d15:	53                   	push   ebx
c0017d16:	83 ec 44             	sub    esp,0x44
c0017d19:	a1 68 ee 02 c0       	mov    eax,ds:0xc002ee68
c0017d1e:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017d24:	83 e0 04             	and    eax,0x4
c0017d27:	84 c0                	test   al,al
c0017d29:	75 0a                	jne    c0017d35 <findRSDT(unsigned char*)+0x21>
c0017d2b:	b8 00 00 00 00       	mov    eax,0x0
c0017d30:	e9 f7 00 00 00       	jmp    c0017e2c <findRSDT(unsigned char*)+0x118>
c0017d35:	83 ec 04             	sub    esp,0x4
c0017d38:	6a 24                	push   0x24
c0017d3a:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0017d3e:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017d42:	50                   	push   eax
c0017d43:	e8 20 8a fe ff       	call   c0000768 <memcpy>
c0017d48:	83 c4 10             	add    esp,0x10
c0017d4b:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0017d4f:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c0017d53:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c0017d5b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017d5f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017d63:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017d67:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017d6b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017d6f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017d73:	25 ff 0f 00 00       	and    eax,0xfff
c0017d78:	89 c6                	mov    esi,eax
c0017d7a:	e8 a5 9f ff ff       	call   c0011d24 <Virt::getAKernelVAS()>
c0017d7f:	89 c3                	mov    ebx,eax
c0017d81:	83 ec 0c             	sub    esp,0xc
c0017d84:	6a 02                	push   0x2
c0017d86:	e8 5a 9d ff ff       	call   c0011ae5 <Virt::allocateKernelVirtualPages(int)>
c0017d8b:	83 c4 10             	add    esp,0x10
c0017d8e:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0017d92:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017d98:	83 ec 0c             	sub    esp,0xc
c0017d9b:	6a 01                	push   0x1
c0017d9d:	6a 02                	push   0x2
c0017d9f:	50                   	push   eax
c0017da0:	52                   	push   edx
c0017da1:	53                   	push   ebx
c0017da2:	e8 6f a8 ff ff       	call   c0012616 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017da7:	83 c4 20             	add    esp,0x20
c0017daa:	09 f0                	or     eax,esi
c0017dac:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017db0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017db4:	25 ff 0f 00 00       	and    eax,0xfff
c0017db9:	89 c6                	mov    esi,eax
c0017dbb:	e8 64 9f ff ff       	call   c0011d24 <Virt::getAKernelVAS()>
c0017dc0:	89 c3                	mov    ebx,eax
c0017dc2:	83 ec 0c             	sub    esp,0xc
c0017dc5:	6a 02                	push   0x2
c0017dc7:	e8 19 9d ff ff       	call   c0011ae5 <Virt::allocateKernelVirtualPages(int)>
c0017dcc:	83 c4 10             	add    esp,0x10
c0017dcf:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017dd3:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017dd9:	83 ec 0c             	sub    esp,0xc
c0017ddc:	6a 01                	push   0x1
c0017dde:	6a 02                	push   0x2
c0017de0:	50                   	push   eax
c0017de1:	52                   	push   edx
c0017de2:	53                   	push   ebx
c0017de3:	e8 2e a8 ff ff       	call   c0012616 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017de8:	83 c4 20             	add    esp,0x20
c0017deb:	09 f0                	or     eax,esi
c0017ded:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017df1:	80 7c 24 3b 00       	cmp    BYTE PTR [esp+0x3b],0x0
c0017df6:	75 11                	jne    c0017e09 <findRSDT(unsigned char*)+0xf5>
c0017df8:	c6 05 40 17 03 c0 00 	mov    BYTE PTR ds:0xc0031740,0x0
c0017dff:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017e03:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017e07:	eb 1f                	jmp    c0017e28 <findRSDT(unsigned char*)+0x114>
c0017e09:	80 7c 24 3b 02       	cmp    BYTE PTR [esp+0x3b],0x2
c0017e0e:	75 11                	jne    c0017e21 <findRSDT(unsigned char*)+0x10d>
c0017e10:	c6 05 40 17 03 c0 01 	mov    BYTE PTR ds:0xc0031740,0x1
c0017e17:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017e1b:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017e1f:	eb 07                	jmp    c0017e28 <findRSDT(unsigned char*)+0x114>
c0017e21:	b8 00 00 00 00       	mov    eax,0x0
c0017e26:	eb 04                	jmp    c0017e2c <findRSDT(unsigned char*)+0x118>
c0017e28:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017e2c:	83 c4 44             	add    esp,0x44
c0017e2f:	5b                   	pop    ebx
c0017e30:	5e                   	pop    esi
c0017e31:	c3                   	ret    

c0017e32 <findDataTable(unsigned char*, char*)>:
c0017e32:	83 ec 1c             	sub    esp,0x1c
c0017e35:	a1 68 ee 02 c0       	mov    eax,ds:0xc002ee68
c0017e3a:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017e40:	83 e0 04             	and    eax,0x4
c0017e43:	84 c0                	test   al,al
c0017e45:	75 07                	jne    c0017e4e <findDataTable(unsigned char*, char*)+0x1c>
c0017e47:	b8 00 00 00 00       	mov    eax,0x0
c0017e4c:	eb 7c                	jmp    c0017eca <findDataTable(unsigned char*, char*)+0x98>
c0017e4e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017e56:	a1 2c 15 03 c0       	mov    eax,ds:0xc003152c
c0017e5b:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0017e5f:	7d 3a                	jge    c0017e9b <findDataTable(unsigned char*, char*)+0x69>
c0017e61:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017e65:	c1 e0 03             	shl    eax,0x3
c0017e68:	05 40 15 03 c0       	add    eax,0xc0031540
c0017e6d:	83 ec 04             	sub    esp,0x4
c0017e70:	6a 04                	push   0x4
c0017e72:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017e76:	50                   	push   eax
c0017e77:	e8 e8 87 fe ff       	call   c0000664 <memcmp>
c0017e7c:	83 c4 10             	add    esp,0x10
c0017e7f:	85 c0                	test   eax,eax
c0017e81:	0f 94 c0             	sete   al
c0017e84:	84 c0                	test   al,al
c0017e86:	74 0d                	je     c0017e95 <findDataTable(unsigned char*, char*)+0x63>
c0017e88:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017e8c:	8b 04 c5 44 15 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffceabc]
c0017e93:	eb 35                	jmp    c0017eca <findDataTable(unsigned char*, char*)+0x98>
c0017e95:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017e99:	eb bb                	jmp    c0017e56 <findDataTable(unsigned char*, char*)+0x24>
c0017e9b:	a0 40 17 03 c0       	mov    al,ds:0xc0031740
c0017ea0:	84 c0                	test   al,al
c0017ea2:	74 07                	je     c0017eab <findDataTable(unsigned char*, char*)+0x79>
c0017ea4:	b8 58 00 00 00       	mov    eax,0x58
c0017ea9:	eb 05                	jmp    c0017eb0 <findDataTable(unsigned char*, char*)+0x7e>
c0017eab:	b8 52 00 00 00       	mov    eax,0x52
c0017eb0:	83 ec 04             	sub    esp,0x4
c0017eb3:	50                   	push   eax
c0017eb4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017eb8:	68 04 bf 02 c0       	push   0xc002bf04
c0017ebd:	e8 2f b0 ff ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c0017ec2:	83 c4 10             	add    esp,0x10
c0017ec5:	b8 00 00 00 00       	mov    eax,0x0
c0017eca:	83 c4 1c             	add    esp,0x1c
c0017ecd:	c3                   	ret    

c0017ece <scanMADT()>:
c0017ece:	53                   	push   ebx
c0017ecf:	83 ec 38             	sub    esp,0x38
c0017ed2:	a1 68 ee 02 c0       	mov    eax,ds:0xc002ee68
c0017ed7:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017edd:	83 e0 04             	and    eax,0x4
c0017ee0:	84 c0                	test   al,al
c0017ee2:	0f 84 63 04 00 00    	je     c001834b <scanMADT()+0x47d>
c0017ee8:	e8 66 fb ff ff       	call   c0017a53 <findRSDP()>
c0017eed:	a3 4c 17 03 c0       	mov    ds:0xc003174c,eax
c0017ef2:	a1 4c 17 03 c0       	mov    eax,ds:0xc003174c
c0017ef7:	85 c0                	test   eax,eax
c0017ef9:	75 19                	jne    c0017f14 <scanMADT()+0x46>
c0017efb:	a1 68 ee 02 c0       	mov    eax,ds:0xc002ee68
c0017f00:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017f06:	83 e2 fb             	and    edx,0xfffffffb
c0017f09:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017f0f:	e9 3b 04 00 00       	jmp    c001834f <scanMADT()+0x481>
c0017f14:	a1 4c 17 03 c0       	mov    eax,ds:0xc003174c
c0017f19:	83 ec 0c             	sub    esp,0xc
c0017f1c:	50                   	push   eax
c0017f1d:	e8 f2 fd ff ff       	call   c0017d14 <findRSDT(unsigned char*)>
c0017f22:	83 c4 10             	add    esp,0x10
c0017f25:	a3 48 17 03 c0       	mov    ds:0xc0031748,eax
c0017f2a:	a1 48 17 03 c0       	mov    eax,ds:0xc0031748
c0017f2f:	85 c0                	test   eax,eax
c0017f31:	75 19                	jne    c0017f4c <scanMADT()+0x7e>
c0017f33:	a1 68 ee 02 c0       	mov    eax,ds:0xc002ee68
c0017f38:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017f3e:	83 e2 fb             	and    edx,0xfffffffb
c0017f41:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017f47:	e9 03 04 00 00       	jmp    c001834f <scanMADT()+0x481>
c0017f4c:	a1 48 17 03 c0       	mov    eax,ds:0xc0031748
c0017f51:	83 ec 0c             	sub    esp,0xc
c0017f54:	50                   	push   eax
c0017f55:	e8 93 fb ff ff       	call   c0017aed <loadACPITables(unsigned char*)>
c0017f5a:	83 c4 10             	add    esp,0x10
c0017f5d:	a1 48 17 03 c0       	mov    eax,ds:0xc0031748
c0017f62:	83 ec 08             	sub    esp,0x8
c0017f65:	68 90 bd 02 c0       	push   0xc002bd90
c0017f6a:	50                   	push   eax
c0017f6b:	e8 c2 fe ff ff       	call   c0017e32 <findDataTable(unsigned char*, char*)>
c0017f70:	83 c4 10             	add    esp,0x10
c0017f73:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017f77:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c0017f7c:	75 19                	jne    c0017f97 <scanMADT()+0xc9>
c0017f7e:	a1 68 ee 02 c0       	mov    eax,ds:0xc002ee68
c0017f83:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017f89:	83 e2 fe             	and    edx,0xfffffffe
c0017f8c:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017f92:	e9 b8 03 00 00       	jmp    c001834f <scanMADT()+0x481>
c0017f97:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0017f9f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017fa3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017fa6:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c0017faa:	0f 87 9f 03 00 00    	ja     c001834f <scanMADT()+0x481>
c0017fb0:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c0017fb8:	0f 87 91 03 00 00    	ja     c001834f <scanMADT()+0x481>
c0017fbe:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017fc2:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017fc6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017fca:	8d 50 01             	lea    edx,[eax+0x1]
c0017fcd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017fd1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017fd5:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017fd9:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0017fdd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017fe1:	8d 50 01             	lea    edx,[eax+0x1]
c0017fe4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017fe8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017fec:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017ff0:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0017ff4:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c0017ff9:	0f 86 4f 03 00 00    	jbe    c001834e <scanMADT()+0x480>
c0017fff:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c0018004:	75 57                	jne    c001805d <scanMADT()+0x18f>
c0018006:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001800a:	8d 50 01             	lea    edx,[eax+0x1]
c001800d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0018011:	8a 15 40 19 03 c0    	mov    dl,BYTE PTR ds:0xc0031940
c0018017:	0f b6 d2             	movzx  edx,dl
c001801a:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001801e:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0018022:	88 82 80 19 03 c0    	mov    BYTE PTR [edx-0x3ffce680],al
c0018028:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001802c:	8d 50 01             	lea    edx,[eax+0x1]
c001802f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0018033:	8a 15 40 19 03 c0    	mov    dl,BYTE PTR ds:0xc0031940
c0018039:	8d 4a 01             	lea    ecx,[edx+0x1]
c001803c:	88 0d 40 19 03 c0    	mov    BYTE PTR ds:0xc0031940,cl
c0018042:	0f b6 d2             	movzx  edx,dl
c0018045:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0018049:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c001804d:	88 82 60 19 03 c0    	mov    BYTE PTR [edx-0x3ffce6a0],al
c0018053:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0018058:	e9 da 02 00 00       	jmp    c0018337 <scanMADT()+0x469>
c001805d:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c0018062:	0f 85 14 01 00 00    	jne    c001817c <scanMADT()+0x2ae>
c0018068:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001806c:	8d 50 01             	lea    edx,[eax+0x1]
c001806f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0018073:	8a 15 00 18 03 c0    	mov    dl,BYTE PTR ds:0xc0031800
c0018079:	0f b6 d2             	movzx  edx,dl
c001807c:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0018080:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0018084:	88 82 20 18 03 c0    	mov    BYTE PTR [edx-0x3ffce7e0],al
c001808a:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c001808e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018092:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018096:	01 d0                	add    eax,edx
c0018098:	83 c0 2c             	add    eax,0x2c
c001809b:	8a 00                	mov    al,BYTE PTR [eax]
c001809d:	0f b6 d0             	movzx  edx,al
c00180a0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00180a4:	8d 48 01             	lea    ecx,[eax+0x1]
c00180a7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00180ab:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c00180af:	0f b6 c0             	movzx  eax,al
c00180b2:	c1 e0 08             	shl    eax,0x8
c00180b5:	89 d1                	mov    ecx,edx
c00180b7:	09 c1                	or     ecx,eax
c00180b9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00180bd:	8d 50 02             	lea    edx,[eax+0x2]
c00180c0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00180c4:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00180c8:	0f b6 c0             	movzx  eax,al
c00180cb:	c1 e0 10             	shl    eax,0x10
c00180ce:	09 c1                	or     ecx,eax
c00180d0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00180d4:	8d 50 03             	lea    edx,[eax+0x3]
c00180d7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00180db:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00180df:	0f b6 c0             	movzx  eax,al
c00180e2:	c1 e0 18             	shl    eax,0x18
c00180e5:	09 c1                	or     ecx,eax
c00180e7:	89 ca                	mov    edx,ecx
c00180e9:	a0 00 18 03 c0       	mov    al,ds:0xc0031800
c00180ee:	0f b6 c0             	movzx  eax,al
c00180f1:	89 14 85 40 18 03 c0 	mov    DWORD PTR [eax*4-0x3ffce7c0],edx
c00180f8:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c00180fd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018101:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018105:	01 d0                	add    eax,edx
c0018107:	83 c0 2c             	add    eax,0x2c
c001810a:	8a 00                	mov    al,BYTE PTR [eax]
c001810c:	0f b6 d0             	movzx  edx,al
c001810f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018113:	8d 48 01             	lea    ecx,[eax+0x1]
c0018116:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001811a:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001811e:	0f b6 c0             	movzx  eax,al
c0018121:	c1 e0 08             	shl    eax,0x8
c0018124:	89 d1                	mov    ecx,edx
c0018126:	09 c1                	or     ecx,eax
c0018128:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001812c:	8d 50 02             	lea    edx,[eax+0x2]
c001812f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018133:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0018137:	0f b6 c0             	movzx  eax,al
c001813a:	c1 e0 10             	shl    eax,0x10
c001813d:	09 c1                	or     ecx,eax
c001813f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018143:	8d 50 03             	lea    edx,[eax+0x3]
c0018146:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001814a:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001814e:	0f b6 c0             	movzx  eax,al
c0018151:	c1 e0 18             	shl    eax,0x18
c0018154:	09 c1                	or     ecx,eax
c0018156:	89 ca                	mov    edx,ecx
c0018158:	a0 00 18 03 c0       	mov    al,ds:0xc0031800
c001815d:	0f b6 c0             	movzx  eax,al
c0018160:	89 14 85 c0 18 03 c0 	mov    DWORD PTR [eax*4-0x3ffce740],edx
c0018167:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c001816c:	a0 00 18 03 c0       	mov    al,ds:0xc0031800
c0018171:	40                   	inc    eax
c0018172:	a2 00 18 03 c0       	mov    ds:0xc0031800,al
c0018177:	e9 bb 01 00 00       	jmp    c0018337 <scanMADT()+0x469>
c001817c:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c0018181:	0f 85 e9 00 00 00    	jne    c0018270 <scanMADT()+0x3a2>
c0018187:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001818b:	8d 50 01             	lea    edx,[eax+0x1]
c001818e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0018192:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018196:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001819a:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c001819e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00181a2:	8d 50 01             	lea    edx,[eax+0x1]
c00181a5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00181a9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00181ad:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00181b1:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c00181b5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00181b9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00181bd:	01 d0                	add    eax,edx
c00181bf:	83 c0 2c             	add    eax,0x2c
c00181c2:	8a 00                	mov    al,BYTE PTR [eax]
c00181c4:	0f b6 d0             	movzx  edx,al
c00181c7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00181cb:	8d 48 01             	lea    ecx,[eax+0x1]
c00181ce:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00181d2:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c00181d6:	0f b6 c0             	movzx  eax,al
c00181d9:	c1 e0 08             	shl    eax,0x8
c00181dc:	89 d1                	mov    ecx,edx
c00181de:	09 c1                	or     ecx,eax
c00181e0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00181e4:	8d 50 02             	lea    edx,[eax+0x2]
c00181e7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00181eb:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00181ef:	0f b6 c0             	movzx  eax,al
c00181f2:	c1 e0 10             	shl    eax,0x10
c00181f5:	09 c1                	or     ecx,eax
c00181f7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00181fb:	8d 50 03             	lea    edx,[eax+0x3]
c00181fe:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018202:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0018206:	0f b6 c0             	movzx  eax,al
c0018209:	c1 e0 18             	shl    eax,0x18
c001820c:	09 c8                	or     eax,ecx
c001820e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0018212:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0018217:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001821b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001821f:	01 d0                	add    eax,edx
c0018221:	83 c0 2c             	add    eax,0x2c
c0018224:	8a 00                	mov    al,BYTE PTR [eax]
c0018226:	0f b6 c0             	movzx  eax,al
c0018229:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001822d:	8d 4a 01             	lea    ecx,[edx+0x1]
c0018230:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018234:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c0018238:	0f b6 d2             	movzx  edx,dl
c001823b:	c1 e2 08             	shl    edx,0x8
c001823e:	09 d0                	or     eax,edx
c0018240:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c0018245:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c001824a:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c001824f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018253:	88 90 c0 e0 02 c0    	mov    BYTE PTR [eax-0x3ffd1f40],dl
c0018259:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c001825e:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0018263:	66 89 84 12 e0 17 03 c0 	mov    WORD PTR [edx+edx*1-0x3ffce820],ax
c001826b:	e9 c7 00 00 00       	jmp    c0018337 <scanMADT()+0x469>
c0018270:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c0018275:	0f 85 b0 00 00 00    	jne    c001832b <scanMADT()+0x45d>
c001827b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001827f:	8d 50 01             	lea    edx,[eax+0x1]
c0018282:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0018286:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001828a:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001828e:	0f b6 c0             	movzx  eax,al
c0018291:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018295:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018299:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001829d:	01 d0                	add    eax,edx
c001829f:	83 c0 2c             	add    eax,0x2c
c00182a2:	8a 00                	mov    al,BYTE PTR [eax]
c00182a4:	0f b6 d0             	movzx  edx,al
c00182a7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00182ab:	8d 48 01             	lea    ecx,[eax+0x1]
c00182ae:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00182b2:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c00182b6:	0f b6 c0             	movzx  eax,al
c00182b9:	c1 e0 08             	shl    eax,0x8
c00182bc:	09 d0                	or     eax,edx
c00182be:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00182c2:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c00182c7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00182cb:	8d 50 01             	lea    edx,[eax+0x1]
c00182ce:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00182d2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00182d6:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00182da:	0f b6 c0             	movzx  eax,al
c00182dd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00182e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00182e5:	c1 e0 08             	shl    eax,0x8
c00182e8:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c00182ec:	89 c1                	mov    ecx,eax
c00182ee:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00182f2:	c1 e0 18             	shl    eax,0x18
c00182f5:	89 c3                	mov    ebx,eax
c00182f7:	a1 50 17 03 c0       	mov    eax,ds:0xc0031750
c00182fc:	8d 50 01             	lea    edx,[eax+0x1]
c00182ff:	89 15 50 17 03 c0    	mov    DWORD PTR ds:0xc0031750,edx
c0018305:	09 d9                	or     ecx,ebx
c0018307:	89 ca                	mov    edx,ecx
c0018309:	89 14 85 60 17 03 c0 	mov    DWORD PTR [eax*4-0x3ffce8a0],edx
c0018310:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0018314:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0018318:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001831c:	68 34 bf 02 c0       	push   0xc002bf34
c0018321:	e8 cb ab ff ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c0018326:	83 c4 10             	add    esp,0x10
c0018329:	eb 0c                	jmp    c0018337 <scanMADT()+0x469>
c001832b:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c0018330:	75 05                	jne    c0018337 <scanMADT()+0x469>
c0018332:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c0018337:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c001833c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018340:	01 d0                	add    eax,edx
c0018342:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0018346:	e9 54 fc ff ff       	jmp    c0017f9f <scanMADT()+0xd1>
c001834b:	90                   	nop
c001834c:	eb 01                	jmp    c001834f <scanMADT()+0x481>
c001834e:	90                   	nop
c001834f:	83 c4 38             	add    esp,0x38
c0018352:	5b                   	pop    ebx
c0018353:	c3                   	ret    

c0018354 <ACPI::ACPI()>:
c0018354:	83 ec 0c             	sub    esp,0xc
c0018357:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001835b:	83 ec 08             	sub    esp,0x8
c001835e:	68 95 bd 02 c0       	push   0xc002bd95
c0018363:	50                   	push   eax
c0018364:	e8 ad c1 ff ff       	call   c0014516 <Device::Device(char const*)>
c0018369:	83 c4 10             	add    esp,0x10
c001836c:	ba d0 bf 02 c0       	mov    edx,0xc002bfd0
c0018371:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018375:	89 10                	mov    DWORD PTR [eax],edx
c0018377:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001837b:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0018382:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018386:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0018390:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018394:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c001839e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00183a2:	c6 80 64 12 00 00 00 	mov    BYTE PTR [eax+0x1264],0x0
c00183a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00183ad:	c6 80 65 12 00 00 00 	mov    BYTE PTR [eax+0x1265],0x0
c00183b4:	e8 15 fb ff ff       	call   c0017ece <scanMADT()>
c00183b9:	90                   	nop
c00183ba:	83 c4 0c             	add    esp,0xc
c00183bd:	c3                   	ret    

c00183be <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c00183be:	83 ec 2c             	sub    esp,0x2c
c00183c1:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00183c5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00183c9:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00183cd:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c00183d1:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00183d6:	88 d0                	mov    al,dl
c00183d8:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c00183dc:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00183e1:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00183e9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00183ed:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c00183f3:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c00183f7:	0f 8d 97 00 00 00    	jge    c0018494 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c00183fd:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018401:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018405:	83 c2 2a             	add    edx,0x2a
c0018408:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c001840c:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c0018411:	75 78                	jne    c001848b <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0018413:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018417:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001841b:	83 c2 2a             	add    edx,0x2a
c001841e:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c0018422:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c0018426:	75 63                	jne    c001848b <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0018428:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001842d:	74 3a                	je     c0018469 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c001842f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018433:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018437:	83 c2 2a             	add    edx,0x2a
c001843a:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c001843e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018442:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0018445:	39 c2                	cmp    edx,eax
c0018447:	74 10                	je     c0018459 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c0018449:	83 ec 0c             	sub    esp,0xc
c001844c:	68 70 bf 02 c0       	push   0xc002bf70
c0018451:	e8 5b 24 00 00       	call   c001a8b1 <Krnl::panic(char const*)>
c0018456:	83 c4 10             	add    esp,0x10
c0018459:	83 ec 0c             	sub    esp,0xc
c001845c:	68 9a bd 02 c0       	push   0xc002bd9a
c0018461:	e8 4b 24 00 00       	call   c001a8b1 <Krnl::panic(char const*)>
c0018466:	83 c4 10             	add    esp,0x10
c0018469:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001846d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018471:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018475:	83 c2 2a             	add    edx,0x2a
c0018478:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c001847c:	8b 02                	mov    eax,DWORD PTR [edx]
c001847e:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0018481:	89 01                	mov    DWORD PTR [ecx],eax
c0018483:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0018486:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c001848b:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c001848f:	e9 55 ff ff ff       	jmp    c00183e9 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c0018494:	90                   	nop
c0018495:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018499:	83 c4 2c             	add    esp,0x2c
c001849c:	c2 04 00             	ret    0x4
c001849f:	90                   	nop

c00184a0 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c00184a0:	83 ec 1c             	sub    esp,0x1c
c00184a3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00184a7:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00184ab:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00184af:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00184b4:	88 c8                	mov    al,cl
c00184b6:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00184ba:	88 d0                	mov    al,dl
c00184bc:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c00184c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00184c4:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c00184ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00184ce:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c00184d1:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c00184d5:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c00184d9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00184dd:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c00184e3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00184e7:	8d 48 2a             	lea    ecx,[eax+0x2a]
c00184ea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00184ee:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c00184f3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00184f7:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c00184fd:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0018501:	8d 48 01             	lea    ecx,[eax+0x1]
c0018504:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018508:	83 c2 2a             	add    edx,0x2a
c001850b:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c001850f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018513:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0018519:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001851d:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0018520:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0018524:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c0018528:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001852c:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0018532:	8d 50 01             	lea    edx,[eax+0x1]
c0018535:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018539:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c001853f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018543:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0018549:	3d 00 02 00 00       	cmp    eax,0x200
c001854e:	75 10                	jne    c0018560 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c0018550:	83 ec 0c             	sub    esp,0xc
c0018553:	68 a9 bd 02 c0       	push   0xc002bda9
c0018558:	e8 54 23 00 00       	call   c001a8b1 <Krnl::panic(char const*)>
c001855d:	83 c4 10             	add    esp,0x10
c0018560:	90                   	nop
c0018561:	83 c4 1c             	add    esp,0x1c
c0018564:	c3                   	ret    
c0018565:	90                   	nop

c0018566 <ACPI::setScreenBrightnessLevel(void*, int)>:
c0018566:	b8 00 00 00 00       	mov    eax,0x0
c001856b:	c3                   	ret    

c001856c <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c001856c:	83 ec 1c             	sub    esp,0x1c
c001856f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018573:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0018576:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001857a:	a1 68 ee 02 c0       	mov    eax,ds:0xc002ee68
c001857f:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0018584:	83 ec 08             	sub    esp,0x8
c0018587:	52                   	push   edx
c0018588:	50                   	push   eax
c0018589:	e8 b2 69 ff ff       	call   c000ef40 <Computer::readCMOS(unsigned char)>
c001858e:	83 c4 10             	add    esp,0x10
c0018591:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0018595:	a1 68 ee 02 c0       	mov    eax,ds:0xc002ee68
c001859a:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c001859f:	83 ec 04             	sub    esp,0x4
c00185a2:	6a 01                	push   0x1
c00185a4:	52                   	push   edx
c00185a5:	50                   	push   eax
c00185a6:	e8 ab 6a ff ff       	call   c000f056 <Computer::writeCMOS(unsigned char, unsigned char)>
c00185ab:	83 c4 10             	add    esp,0x10
c00185ae:	90                   	nop
c00185af:	83 c4 1c             	add    esp,0x1c
c00185b2:	c3                   	ret    
c00185b3:	90                   	nop

c00185b4 <ACPI::sleep()>:
c00185b4:	83 ec 0c             	sub    esp,0xc
c00185b7:	a1 20 15 03 c0       	mov    eax,ds:0xc0031520
c00185bc:	85 c0                	test   eax,eax
c00185be:	74 07                	je     c00185c7 <ACPI::sleep()+0x13>
c00185c0:	a1 20 15 03 c0       	mov    eax,ds:0xc0031520
c00185c5:	ff d0                	call   eax
c00185c7:	90                   	nop
c00185c8:	83 c4 0c             	add    esp,0xc
c00185cb:	c3                   	ret    

c00185cc <ACPI::open(int, int, void*)>:
c00185cc:	57                   	push   edi
c00185cd:	56                   	push   esi
c00185ce:	53                   	push   ebx
c00185cf:	83 ec 60             	sub    esp,0x60
c00185d2:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00185d6:	c6 80 64 12 00 00 00 	mov    BYTE PTR [eax+0x1264],0x0
c00185dd:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00185e1:	c6 80 65 12 00 00 00 	mov    BYTE PTR [eax+0x1265],0x0
c00185e8:	a1 68 ee 02 c0       	mov    eax,ds:0xc002ee68
c00185ed:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00185f3:	83 e0 04             	and    eax,0x4
c00185f6:	84 c0                	test   al,al
c00185f8:	74 47                	je     c0018641 <ACPI::open(int, int, void*)+0x75>
c00185fa:	a1 48 17 03 c0       	mov    eax,ds:0xc0031748
c00185ff:	83 ec 08             	sub    esp,0x8
c0018602:	68 c6 bd 02 c0       	push   0xc002bdc6
c0018607:	50                   	push   eax
c0018608:	e8 25 f8 ff ff       	call   c0017e32 <findDataTable(unsigned char*, char*)>
c001860d:	83 c4 10             	add    esp,0x10
c0018610:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c0018614:	83 7c 24 5c 00       	cmp    DWORD PTR [esp+0x5c],0x0
c0018619:	74 26                	je     c0018641 <ACPI::open(int, int, void*)+0x75>
c001861b:	83 ec 0c             	sub    esp,0xc
c001861e:	68 cb bd 02 c0       	push   0xc002bdcb
c0018623:	e8 c9 a8 ff ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c0018628:	83 c4 10             	add    esp,0x10
c001862b:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001862f:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c0018636:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001863a:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c0018641:	c7 44 24 58 5f 0c 00 00 	mov    DWORD PTR [esp+0x58],0xc5f
c0018649:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001864d:	8a 00                	mov    al,BYTE PTR [eax]
c001864f:	3c 01                	cmp    al,0x1
c0018651:	75 28                	jne    c001867b <ACPI::open(int, int, void*)+0xaf>
c0018653:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0018657:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c001865e:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0018662:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c0018669:	83 ec 0c             	sub    esp,0xc
c001866c:	68 dc bd 02 c0       	push   0xc002bddc
c0018671:	e8 7b a8 ff ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c0018676:	83 c4 10             	add    esp,0x10
c0018679:	eb 25                	jmp    c00186a0 <ACPI::open(int, int, void*)+0xd4>
c001867b:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001867f:	8a 00                	mov    al,BYTE PTR [eax]
c0018681:	3c 02                	cmp    al,0x2
c0018683:	75 1b                	jne    c00186a0 <ACPI::open(int, int, void*)+0xd4>
c0018685:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0018689:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c0018690:	83 ec 0c             	sub    esp,0xc
c0018693:	68 e4 bd 02 c0       	push   0xc002bde4
c0018698:	e8 54 a8 ff ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c001869d:	83 c4 10             	add    esp,0x10
c00186a0:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00186a4:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c00186aa:	83 f0 01             	xor    eax,0x1
c00186ad:	84 c0                	test   al,al
c00186af:	74 6a                	je     c001871b <ACPI::open(int, int, void*)+0x14f>
c00186b1:	83 ec 0c             	sub    esp,0xc
c00186b4:	68 ec bd 02 c0       	push   0xc002bdec
c00186b9:	e8 33 a8 ff ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c00186be:	83 c4 10             	add    esp,0x10
c00186c1:	e8 8a 7a fe ff       	call   c0000150 <manualPCIProbe>
c00186c6:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00186ca:	83 7c 24 54 01       	cmp    DWORD PTR [esp+0x54],0x1
c00186cf:	75 28                	jne    c00186f9 <ACPI::open(int, int, void*)+0x12d>
c00186d1:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00186d5:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c00186dc:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00186e0:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c00186e7:	83 ec 0c             	sub    esp,0xc
c00186ea:	68 fa bd 02 c0       	push   0xc002bdfa
c00186ef:	e8 fd a7 ff ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c00186f4:	83 c4 10             	add    esp,0x10
c00186f7:	eb 22                	jmp    c001871b <ACPI::open(int, int, void*)+0x14f>
c00186f9:	83 7c 24 54 02       	cmp    DWORD PTR [esp+0x54],0x2
c00186fe:	75 1b                	jne    c001871b <ACPI::open(int, int, void*)+0x14f>
c0018700:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0018704:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c001870b:	83 ec 0c             	sub    esp,0xc
c001870e:	68 04 be 02 c0       	push   0xc002be04
c0018713:	e8 d9 a7 ff ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c0018718:	83 c4 10             	add    esp,0x10
c001871b:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001871f:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c0018725:	84 c0                	test   al,al
c0018727:	74 13                	je     c001873c <ACPI::open(int, int, void*)+0x170>
c0018729:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001872d:	8a 80 65 12 00 00    	mov    al,BYTE PTR [eax+0x1265]
c0018733:	83 f0 01             	xor    eax,0x1
c0018736:	0f b6 c0             	movzx  eax,al
c0018739:	40                   	inc    eax
c001873a:	eb 05                	jmp    c0018741 <ACPI::open(int, int, void*)+0x175>
c001873c:	b8 00 00 00 00       	mov    eax,0x0
c0018741:	83 ec 08             	sub    esp,0x8
c0018744:	50                   	push   eax
c0018745:	68 0e be 02 c0       	push   0xc002be0e
c001874a:	e8 a2 a7 ff ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c001874f:	83 c4 10             	add    esp,0x10
c0018752:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0018756:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c001875c:	84 c0                	test   al,al
c001875e:	74 67                	je     c00187c7 <ACPI::open(int, int, void*)+0x1fb>
c0018760:	c7 44 24 38 58 01 00 00 	mov    DWORD PTR [esp+0x38],0x158
c0018768:	83 ec 0c             	sub    esp,0xc
c001876b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001876f:	e8 be 71 ff ff       	call   c000f932 <malloc>
c0018774:	83 c4 10             	add    esp,0x10
c0018777:	89 c3                	mov    ebx,eax
c0018779:	83 ec 0c             	sub    esp,0xc
c001877c:	53                   	push   ebx
c001877d:	e8 a6 a8 00 00       	call   c0023028 <PCI::PCI()>
c0018782:	83 c4 10             	add    esp,0x10
c0018785:	89 5c 24 50          	mov    DWORD PTR [esp+0x50],ebx
c0018789:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001878d:	83 ec 08             	sub    esp,0x8
c0018790:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0018794:	50                   	push   eax
c0018795:	e8 8c bb ff ff       	call   c0014326 <Device::addChild(Device*)>
c001879a:	83 c4 10             	add    esp,0x10
c001879d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00187a1:	8b 00                	mov    eax,DWORD PTR [eax]
c00187a3:	83 c0 08             	add    eax,0x8
c00187a6:	8b 00                	mov    eax,DWORD PTR [eax]
c00187a8:	6a 00                	push   0x0
c00187aa:	6a 00                	push   0x0
c00187ac:	6a 00                	push   0x0
c00187ae:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00187b2:	ff d0                	call   eax
c00187b4:	83 c4 10             	add    esp,0x10
c00187b7:	83 ec 0c             	sub    esp,0xc
c00187ba:	68 17 be 02 c0       	push   0xc002be17
c00187bf:	e8 2d a7 ff ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c00187c4:	83 c4 10             	add    esp,0x10
c00187c7:	83 ec 0c             	sub    esp,0xc
c00187ca:	68 22 be 02 c0       	push   0xc002be22
c00187cf:	e8 7f 48 00 00       	call   c001d053 <Thr::loadKernelSymbolTable(char const*)>
c00187d4:	83 c4 10             	add    esp,0x10
c00187d7:	83 ec 0c             	sub    esp,0xc
c00187da:	6a 0c                	push   0xc
c00187dc:	e8 49 95 ff ff       	call   c0011d2a <Virt::setupPageSwapping(int)>
c00187e1:	83 c4 10             	add    esp,0x10
c00187e4:	8d 44 24 28          	lea    eax,[esp+0x28]
c00187e8:	83 ec 08             	sub    esp,0x8
c00187eb:	6a 12                	push   0x12
c00187ed:	50                   	push   eax
c00187ee:	e8 a3 be ff ff       	call   c0014696 <getDevicesOfType(DeviceType)>
c00187f3:	83 c4 0c             	add    esp,0xc
c00187f6:	83 ec 0c             	sub    esp,0xc
c00187f9:	8d 44 24 34          	lea    eax,[esp+0x34]
c00187fd:	50                   	push   eax
c00187fe:	e8 4d 0c 01 00       	call   c0029450 <LinkedList<Device>::isEmpty()>
c0018803:	83 c4 10             	add    esp,0x10
c0018806:	83 f0 01             	xor    eax,0x1
c0018809:	84 c0                	test   al,al
c001880b:	0f 84 fd 00 00 00    	je     c001890e <ACPI::open(int, int, void*)+0x342>
c0018811:	83 ec 0c             	sub    esp,0xc
c0018814:	8d 44 24 34          	lea    eax,[esp+0x34]
c0018818:	50                   	push   eax
c0018819:	e8 4e 0c 01 00       	call   c002946c <LinkedList<Device>::getFirstElement()>
c001881e:	83 c4 10             	add    esp,0x10
c0018821:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0018825:	83 ec 0c             	sub    esp,0xc
c0018828:	8d 44 24 34          	lea    eax,[esp+0x34]
c001882c:	50                   	push   eax
c001882d:	e8 42 0c 01 00       	call   c0029474 <LinkedList<Device>::removeFirst()>
c0018832:	83 c4 10             	add    esp,0x10
c0018835:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0018839:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c001883d:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0018841:	83 ec 0c             	sub    esp,0xc
c0018844:	50                   	push   eax
c0018845:	e8 c8 bd ff ff       	call   c0014612 <Device::getName()>
c001884a:	83 c4 10             	add    esp,0x10
c001884d:	83 ec 08             	sub    esp,0x8
c0018850:	50                   	push   eax
c0018851:	68 a0 bf 02 c0       	push   0xc002bfa0
c0018856:	e8 96 a6 ff ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c001885b:	83 c4 10             	add    esp,0x10
c001885e:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0018862:	8d 44 24 04          	lea    eax,[esp+0x4]
c0018866:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c001886c:	ba 09 00 00 00       	mov    edx,0x9
c0018871:	fc                   	cld    
c0018872:	89 c7                	mov    edi,eax
c0018874:	89 de                	mov    esi,ebx
c0018876:	89 d1                	mov    ecx,edx
c0018878:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001887a:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001887e:	0f b6 c0             	movzx  eax,al
c0018881:	83 ec 08             	sub    esp,0x8
c0018884:	50                   	push   eax
c0018885:	68 40 be 02 c0       	push   0xc002be40
c001888a:	e8 62 a6 ff ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c001888f:	83 c4 10             	add    esp,0x10
c0018892:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0018896:	0f b6 c0             	movzx  eax,al
c0018899:	83 ec 08             	sub    esp,0x8
c001889c:	50                   	push   eax
c001889d:	68 52 be 02 c0       	push   0xc002be52
c00188a2:	e8 4a a6 ff ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c00188a7:	83 c4 10             	add    esp,0x10
c00188aa:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c00188af:	0f b7 c0             	movzx  eax,ax
c00188b2:	83 ec 08             	sub    esp,0x8
c00188b5:	50                   	push   eax
c00188b6:	68 64 be 02 c0       	push   0xc002be64
c00188bb:	e8 31 a6 ff ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c00188c0:	83 c4 10             	add    esp,0x10
c00188c3:	83 ec 0c             	sub    esp,0xc
c00188c6:	83 ec 24             	sub    esp,0x24
c00188c9:	89 e0                	mov    eax,esp
c00188cb:	89 c3                	mov    ebx,eax
c00188cd:	8d 44 24 34          	lea    eax,[esp+0x34]
c00188d1:	ba 09 00 00 00       	mov    edx,0x9
c00188d6:	89 df                	mov    edi,ebx
c00188d8:	89 c6                	mov    esi,eax
c00188da:	89 d1                	mov    ecx,edx
c00188dc:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00188de:	e8 a7 aa 00 00       	call   c002338a <PCI::pciDetailsToFilepath(PCIDeviceInfo)>
c00188e3:	83 c4 30             	add    esp,0x30
c00188e6:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00188ea:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c00188ef:	0f 84 01 ff ff ff    	je     c00187f6 <ACPI::open(int, int, void*)+0x22a>
c00188f5:	83 ec 08             	sub    esp,0x8
c00188f8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00188fc:	68 76 be 02 c0       	push   0xc002be76
c0018901:	e8 eb a5 ff ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c0018906:	83 c4 10             	add    esp,0x10
c0018909:	e9 e8 fe ff ff       	jmp    c00187f6 <ACPI::open(int, int, void*)+0x22a>
c001890e:	83 ec 0c             	sub    esp,0xc
c0018911:	8d 44 24 34          	lea    eax,[esp+0x34]
c0018915:	50                   	push   eax
c0018916:	e8 33 0b 01 00       	call   c002944e <LinkedList<Device>::~LinkedList()>
c001891b:	83 c4 10             	add    esp,0x10
c001891e:	8b 1d 68 ee 02 c0    	mov    ebx,DWORD PTR ds:0xc002ee68
c0018924:	83 ec 08             	sub    esp,0x8
c0018927:	6a 01                	push   0x1
c0018929:	68 82 be 02 c0       	push   0xc002be82
c001892e:	e8 97 51 00 00       	call   c001daca <Thr::loadDLL(char const*, bool)>
c0018933:	83 c4 10             	add    esp,0x10
c0018936:	83 ec 08             	sub    esp,0x8
c0018939:	53                   	push   ebx
c001893a:	50                   	push   eax
c001893b:	e8 be 53 00 00       	call   c001dcfe <Thr::executeDLL(unsigned long, void*)>
c0018940:	83 c4 10             	add    esp,0x10
c0018943:	8b 1d 68 ee 02 c0    	mov    ebx,DWORD PTR ds:0xc002ee68
c0018949:	83 ec 08             	sub    esp,0x8
c001894c:	6a 01                	push   0x1
c001894e:	68 9f be 02 c0       	push   0xc002be9f
c0018953:	e8 72 51 00 00       	call   c001daca <Thr::loadDLL(char const*, bool)>
c0018958:	83 c4 10             	add    esp,0x10
c001895b:	83 ec 08             	sub    esp,0x8
c001895e:	53                   	push   ebx
c001895f:	50                   	push   eax
c0018960:	e8 99 53 00 00       	call   c001dcfe <Thr::executeDLL(unsigned long, void*)>
c0018965:	83 c4 10             	add    esp,0x10
c0018968:	a1 68 ee 02 c0       	mov    eax,ds:0xc002ee68
c001896d:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0018973:	83 e0 04             	and    eax,0x4
c0018976:	84 c0                	test   al,al
c0018978:	0f 84 d3 00 00 00    	je     c0018a51 <ACPI::open(int, int, void*)+0x485>
c001897e:	c7 44 24 34 14 01 00 00 	mov    DWORD PTR [esp+0x34],0x114
c0018986:	83 ec 0c             	sub    esp,0xc
c0018989:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001898d:	e8 a0 6f ff ff       	call   c000f932 <malloc>
c0018992:	83 c4 10             	add    esp,0x10
c0018995:	89 c3                	mov    ebx,eax
c0018997:	a1 d0 23 03 c0       	mov    eax,ds:0xc00323d0
c001899c:	83 ec 04             	sub    esp,0x4
c001899f:	50                   	push   eax
c00189a0:	68 bc be 02 c0       	push   0xc002bebc
c00189a5:	53                   	push   ebx
c00189a6:	e8 a5 aa ff ff       	call   c0013450 <File::File(char const*, Process*)>
c00189ab:	83 c4 10             	add    esp,0x10
c00189ae:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c00189b2:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c00189b7:	74 17                	je     c00189d0 <ACPI::open(int, int, void*)+0x404>
c00189b9:	83 ec 0c             	sub    esp,0xc
c00189bc:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00189c0:	e8 5d ad ff ff       	call   c0013722 <File::exists()>
c00189c5:	83 c4 10             	add    esp,0x10
c00189c8:	84 c0                	test   al,al
c00189ca:	74 04                	je     c00189d0 <ACPI::open(int, int, void*)+0x404>
c00189cc:	b0 01                	mov    al,0x1
c00189ce:	eb 02                	jmp    c00189d2 <ACPI::open(int, int, void*)+0x406>
c00189d0:	b0 00                	mov    al,0x0
c00189d2:	84 c0                	test   al,al
c00189d4:	74 22                	je     c00189f8 <ACPI::open(int, int, void*)+0x42c>
c00189d6:	83 ec 08             	sub    esp,0x8
c00189d9:	6a 01                	push   0x1
c00189db:	68 bc be 02 c0       	push   0xc002bebc
c00189e0:	e8 e5 50 00 00       	call   c001daca <Thr::loadDLL(char const*, bool)>
c00189e5:	83 c4 10             	add    esp,0x10
c00189e8:	83 ec 08             	sub    esp,0x8
c00189eb:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c00189ef:	50                   	push   eax
c00189f0:	e8 09 53 00 00       	call   c001dcfe <Thr::executeDLL(unsigned long, void*)>
c00189f5:	83 c4 10             	add    esp,0x10
c00189f8:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c00189fd:	74 1e                	je     c0018a1d <ACPI::open(int, int, void*)+0x451>
c00189ff:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0018a04:	74 17                	je     c0018a1d <ACPI::open(int, int, void*)+0x451>
c0018a06:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0018a0a:	8b 00                	mov    eax,DWORD PTR [eax]
c0018a0c:	83 c0 08             	add    eax,0x8
c0018a0f:	8b 00                	mov    eax,DWORD PTR [eax]
c0018a11:	83 ec 0c             	sub    esp,0xc
c0018a14:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0018a18:	ff d0                	call   eax
c0018a1a:	83 c4 10             	add    esp,0x10
c0018a1d:	a1 48 17 03 c0       	mov    eax,ds:0xc0031748
c0018a22:	83 ec 08             	sub    esp,0x8
c0018a25:	68 d9 be 02 c0       	push   0xc002bed9
c0018a2a:	50                   	push   eax
c0018a2b:	e8 02 f4 ff ff       	call   c0017e32 <findDataTable(unsigned char*, char*)>
c0018a30:	83 c4 10             	add    esp,0x10
c0018a33:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0018a37:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c0018a3c:	74 13                	je     c0018a51 <ACPI::open(int, int, void*)+0x485>
c0018a3e:	83 ec 08             	sub    esp,0x8
c0018a41:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0018a45:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0018a49:	e8 1e fb ff ff       	call   c001856c <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c0018a4e:	83 c4 10             	add    esp,0x10
c0018a51:	b8 00 00 00 00       	mov    eax,0x0
c0018a56:	83 c4 60             	add    esp,0x60
c0018a59:	5b                   	pop    ebx
c0018a5a:	5e                   	pop    esi
c0018a5b:	5f                   	pop    edi
c0018a5c:	c3                   	ret    
c0018a5d:	90                   	nop

c0018a5e <CPU::close(int, int, void*)>:
c0018a5e:	31 c0                	xor    eax,eax
c0018a60:	c3                   	ret    
c0018a61:	90                   	nop

c0018a62 <CPU::lookupAMDName(unsigned char, unsigned char)>:
c0018a62:	55                   	push   ebp
c0018a63:	57                   	push   edi
c0018a64:	56                   	push   esi
c0018a65:	53                   	push   ebx
c0018a66:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0018a6a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018a6e:	89 ce                	mov    esi,ecx
c0018a70:	89 d5                	mov    ebp,edx
c0018a72:	80 f9 04             	cmp    cl,0x4
c0018a75:	75 28                	jne    c0018a9f <CPU::lookupAMDName(unsigned char, unsigned char)+0x3d>
c0018a77:	8d 42 f9             	lea    eax,[edx-0x7]
c0018a7a:	3c 03                	cmp    al,0x3
c0018a7c:	0f 86 63 01 00 00    	jbe    c0018be5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0018a82:	80 fa 03             	cmp    dl,0x3
c0018a85:	0f 84 5a 01 00 00    	je     c0018be5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0018a8b:	8d 7a f2             	lea    edi,[edx-0xe]
c0018a8e:	b8 90 e2 02 c0       	mov    eax,0xc002e290
c0018a93:	89 fb                	mov    ebx,edi
c0018a95:	80 fb 01             	cmp    bl,0x1
c0018a98:	77 4e                	ja     c0018ae8 <CPU::lookupAMDName(unsigned char, unsigned char)+0x86>
c0018a9a:	e9 52 01 00 00       	jmp    c0018bf1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018a9f:	80 f9 05             	cmp    cl,0x5
c0018aa2:	75 4d                	jne    c0018af1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x8f>
c0018aa4:	b8 a0 e2 02 c0       	mov    eax,0xc002e2a0
c0018aa9:	80 fa 03             	cmp    dl,0x3
c0018aac:	0f 86 3f 01 00 00    	jbe    c0018bf1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018ab2:	8d 7a fa             	lea    edi,[edx-0x6]
c0018ab5:	b8 b0 e2 02 c0       	mov    eax,0xc002e2b0
c0018aba:	89 fb                	mov    ebx,edi
c0018abc:	80 fb 01             	cmp    bl,0x1
c0018abf:	0f 86 2c 01 00 00    	jbe    c0018bf1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018ac5:	b8 c0 e2 02 c0       	mov    eax,0xc002e2c0
c0018aca:	80 fa 08             	cmp    dl,0x8
c0018acd:	0f 84 1e 01 00 00    	je     c0018bf1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018ad3:	89 d7                	mov    edi,edx
c0018ad5:	b8 d0 e2 02 c0       	mov    eax,0xc002e2d0
c0018ada:	83 e7 fb             	and    edi,0xfffffffb
c0018add:	89 fb                	mov    ebx,edi
c0018adf:	80 fb 09             	cmp    bl,0x9
c0018ae2:	0f 84 09 01 00 00    	je     c0018bf1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018ae8:	31 c0                	xor    eax,eax
c0018aea:	89 eb                	mov    ebx,ebp
c0018aec:	0f b6 fb             	movzx  edi,bl
c0018aef:	eb 30                	jmp    c0018b21 <CPU::lookupAMDName(unsigned char, unsigned char)+0xbf>
c0018af1:	31 c0                	xor    eax,eax
c0018af3:	80 f9 06             	cmp    cl,0x6
c0018af6:	75 f2                	jne    c0018aea <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0018af8:	80 fa 0a             	cmp    dl,0xa
c0018afb:	77 ed                	ja     c0018aea <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0018afd:	bf de 05 00 00       	mov    edi,0x5de
c0018b02:	0f a3 d7             	bt     edi,edx
c0018b05:	73 e3                	jae    c0018aea <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0018b07:	b8 e0 e2 02 c0       	mov    eax,0xc002e2e0
c0018b0c:	e9 e0 00 00 00       	jmp    c0018bf1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018b11:	39 c7                	cmp    edi,eax
c0018b13:	0f 84 d3 00 00 00    	je     c0018bec <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0018b19:	40                   	inc    eax
c0018b1a:	3d d0 00 00 00       	cmp    eax,0xd0
c0018b1f:	74 09                	je     c0018b2a <CPU::lookupAMDName(unsigned char, unsigned char)+0xc8>
c0018b21:	89 f3                	mov    ebx,esi
c0018b23:	80 fb 0f             	cmp    bl,0xf
c0018b26:	75 f1                	jne    c0018b19 <CPU::lookupAMDName(unsigned char, unsigned char)+0xb7>
c0018b28:	eb e7                	jmp    c0018b11 <CPU::lookupAMDName(unsigned char, unsigned char)+0xaf>
c0018b2a:	80 f9 10             	cmp    cl,0x10
c0018b2d:	75 14                	jne    c0018b43 <CPU::lookupAMDName(unsigned char, unsigned char)+0xe1>
c0018b2f:	8d 42 fc             	lea    eax,[edx-0x4]
c0018b32:	83 e0 fb             	and    eax,0xfffffffb
c0018b35:	3c 02                	cmp    al,0x2
c0018b37:	76 34                	jbe    c0018b6d <CPU::lookupAMDName(unsigned char, unsigned char)+0x10b>
c0018b39:	b8 e6 c2 02 c0       	mov    eax,0xc002c2e6
c0018b3e:	80 fa 02             	cmp    dl,0x2
c0018b41:	eb 24                	jmp    c0018b67 <CPU::lookupAMDName(unsigned char, unsigned char)+0x105>
c0018b43:	80 f9 11             	cmp    cl,0x11
c0018b46:	75 13                	jne    c0018b5b <CPU::lookupAMDName(unsigned char, unsigned char)+0xf9>
c0018b48:	b8 e6 c2 02 c0       	mov    eax,0xc002c2e6
c0018b4d:	80 fa 03             	cmp    dl,0x3
c0018b50:	0f 85 9b 00 00 00    	jne    c0018bf1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018b56:	e9 91 00 00 00       	jmp    c0018bec <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0018b5b:	80 f9 12             	cmp    cl,0x12
c0018b5e:	75 14                	jne    c0018b74 <CPU::lookupAMDName(unsigned char, unsigned char)+0x112>
c0018b60:	b8 e6 c2 02 c0       	mov    eax,0xc002c2e6
c0018b65:	fe ca                	dec    dl
c0018b67:	0f 85 84 00 00 00    	jne    c0018bf1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018b6d:	b8 00 e3 02 c0       	mov    eax,0xc002e300
c0018b72:	eb 7d                	jmp    c0018bf1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018b74:	80 f9 14             	cmp    cl,0x14
c0018b77:	75 12                	jne    c0018b8b <CPU::lookupAMDName(unsigned char, unsigned char)+0x129>
c0018b79:	4a                   	dec    edx
c0018b7a:	b8 e6 c2 02 c0       	mov    eax,0xc002c2e6
c0018b7f:	80 fa 01             	cmp    dl,0x1
c0018b82:	77 6d                	ja     c0018bf1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018b84:	b8 10 e3 02 c0       	mov    eax,0xc002e310
c0018b89:	eb 66                	jmp    c0018bf1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018b8b:	80 f9 15             	cmp    cl,0x15
c0018b8e:	75 31                	jne    c0018bc1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x15f>
c0018b90:	b8 20 e3 02 c0       	mov    eax,0xc002e320
c0018b95:	80 fa 01             	cmp    dl,0x1
c0018b98:	74 57                	je     c0018bf1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018b9a:	b8 e6 c2 02 c0       	mov    eax,0xc002c2e6
c0018b9f:	80 fa 13             	cmp    dl,0x13
c0018ba2:	76 0c                	jbe    c0018bb0 <CPU::lookupAMDName(unsigned char, unsigned char)+0x14e>
c0018ba4:	80 fa 30             	cmp    dl,0x30
c0018ba7:	75 48                	jne    c0018bf1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018ba9:	b8 40 e3 02 c0       	mov    eax,0xc002e340
c0018bae:	eb 41                	jmp    c0018bf1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018bb0:	b9 04 00 09 00       	mov    ecx,0x90004
c0018bb5:	0f a3 d1             	bt     ecx,edx
c0018bb8:	73 37                	jae    c0018bf1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018bba:	b8 30 e3 02 c0       	mov    eax,0xc002e330
c0018bbf:	eb 30                	jmp    c0018bf1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018bc1:	b8 e6 c2 02 c0       	mov    eax,0xc002c2e6
c0018bc6:	80 f9 16             	cmp    cl,0x16
c0018bc9:	75 26                	jne    c0018bf1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018bcb:	b8 50 e3 02 c0       	mov    eax,0xc002e350
c0018bd0:	84 d2                	test   dl,dl
c0018bd2:	74 1d                	je     c0018bf1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018bd4:	b8 e6 c2 02 c0       	mov    eax,0xc002c2e6
c0018bd9:	80 fa 30             	cmp    dl,0x30
c0018bdc:	75 13                	jne    c0018bf1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018bde:	b8 60 e3 02 c0       	mov    eax,0xc002e360
c0018be3:	eb 0c                	jmp    c0018bf1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018be5:	b8 80 e2 02 c0       	mov    eax,0xc002e280
c0018bea:	eb 05                	jmp    c0018bf1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018bec:	b8 f0 e2 02 c0       	mov    eax,0xc002e2f0
c0018bf1:	5b                   	pop    ebx
c0018bf2:	5e                   	pop    esi
c0018bf3:	5f                   	pop    edi
c0018bf4:	5d                   	pop    ebp
c0018bf5:	c3                   	ret    

c0018bf6 <CPU::lookupIntelName(unsigned char, unsigned char)>:
c0018bf6:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018bfa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018bfe:	80 f9 04             	cmp    cl,0x4
c0018c01:	75 6b                	jne    c0018c6e <CPU::lookupIntelName(unsigned char, unsigned char)+0x78>
c0018c03:	b8 e0 e0 02 c0       	mov    eax,0xc002e0e0
c0018c08:	80 fa 01             	cmp    dl,0x1
c0018c0b:	0f 86 92 02 00 00    	jbe    c0018ea3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c11:	b8 f0 e0 02 c0       	mov    eax,0xc002e0f0
c0018c16:	80 fa 02             	cmp    dl,0x2
c0018c19:	0f 84 84 02 00 00    	je     c0018ea3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c1f:	b8 00 e1 02 c0       	mov    eax,0xc002e100
c0018c24:	80 fa 03             	cmp    dl,0x3
c0018c27:	0f 84 76 02 00 00    	je     c0018ea3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c2d:	b8 10 e1 02 c0       	mov    eax,0xc002e110
c0018c32:	80 fa 04             	cmp    dl,0x4
c0018c35:	0f 84 68 02 00 00    	je     c0018ea3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c3b:	b8 20 e1 02 c0       	mov    eax,0xc002e120
c0018c40:	80 fa 05             	cmp    dl,0x5
c0018c43:	0f 84 5a 02 00 00    	je     c0018ea3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c49:	b8 00 e1 02 c0       	mov    eax,0xc002e100
c0018c4e:	80 fa 07             	cmp    dl,0x7
c0018c51:	0f 84 4c 02 00 00    	je     c0018ea3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c57:	83 ea 08             	sub    edx,0x8
c0018c5a:	b8 e6 c2 02 c0       	mov    eax,0xc002c2e6
c0018c5f:	80 fa 01             	cmp    dl,0x1
c0018c62:	0f 87 3b 02 00 00    	ja     c0018ea3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c68:	b8 30 e1 02 c0       	mov    eax,0xc002e130
c0018c6d:	c3                   	ret    
c0018c6e:	80 f9 05             	cmp    cl,0x5
c0018c71:	75 45                	jne    c0018cb8 <CPU::lookupIntelName(unsigned char, unsigned char)+0xc2>
c0018c73:	8d 4a ff             	lea    ecx,[edx-0x1]
c0018c76:	b8 40 e1 02 c0       	mov    eax,0xc002e140
c0018c7b:	80 f9 02             	cmp    cl,0x2
c0018c7e:	0f 86 1f 02 00 00    	jbe    c0018ea3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c84:	80 fa 04             	cmp    dl,0x4
c0018c87:	0f 84 f3 01 00 00    	je     c0018e80 <CPU::lookupIntelName(unsigned char, unsigned char)+0x28a>
c0018c8d:	80 fa 07             	cmp    dl,0x7
c0018c90:	0f 84 0d 02 00 00    	je     c0018ea3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c96:	b8 50 e1 02 c0       	mov    eax,0xc002e150
c0018c9b:	80 fa 08             	cmp    dl,0x8
c0018c9e:	0f 84 ff 01 00 00    	je     c0018ea3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ca4:	b8 e6 c2 02 c0       	mov    eax,0xc002c2e6
c0018ca9:	80 fa 09             	cmp    dl,0x9
c0018cac:	0f 85 f1 01 00 00    	jne    c0018ea3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018cb2:	b8 60 e1 02 c0       	mov    eax,0xc002e160
c0018cb7:	c3                   	ret    
c0018cb8:	80 f9 06             	cmp    cl,0x6
c0018cbb:	0f 85 85 01 00 00    	jne    c0018e46 <CPU::lookupIntelName(unsigned char, unsigned char)+0x250>
c0018cc1:	b8 70 e1 02 c0       	mov    eax,0xc002e170
c0018cc6:	80 fa 01             	cmp    dl,0x1
c0018cc9:	0f 84 d4 01 00 00    	je     c0018ea3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ccf:	8d 42 fb             	lea    eax,[edx-0x5]
c0018cd2:	3c 01                	cmp    al,0x1
c0018cd4:	0f 86 ac 01 00 00    	jbe    c0018e86 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0018cda:	80 fa 03             	cmp    dl,0x3
c0018cdd:	0f 84 a3 01 00 00    	je     c0018e86 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0018ce3:	8d 4a f9             	lea    ecx,[edx-0x7]
c0018ce6:	b8 90 e1 02 c0       	mov    eax,0xc002e190
c0018ceb:	80 f9 01             	cmp    cl,0x1
c0018cee:	0f 86 af 01 00 00    	jbe    c0018ea3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018cf4:	80 fa 09             	cmp    dl,0x9
c0018cf7:	0f 84 8f 01 00 00    	je     c0018e8c <CPU::lookupIntelName(unsigned char, unsigned char)+0x296>
c0018cfd:	8d 4a f6             	lea    ecx,[edx-0xa]
c0018d00:	80 f9 01             	cmp    cl,0x1
c0018d03:	0f 86 9a 01 00 00    	jbe    c0018ea3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018d09:	b8 a0 e1 02 c0       	mov    eax,0xc002e1a0
c0018d0e:	80 fa 0d             	cmp    dl,0xd
c0018d11:	0f 84 8c 01 00 00    	je     c0018ea3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018d17:	b8 b0 e1 02 c0       	mov    eax,0xc002e1b0
c0018d1c:	80 fa 0e             	cmp    dl,0xe
c0018d1f:	0f 84 7e 01 00 00    	je     c0018ea3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018d25:	b8 c0 e1 02 c0       	mov    eax,0xc002e1c0
c0018d2a:	80 fa 0f             	cmp    dl,0xf
c0018d2d:	0f 84 70 01 00 00    	je     c0018ea3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018d33:	b8 a0 e1 02 c0       	mov    eax,0xc002e1a0
c0018d38:	80 fa 15             	cmp    dl,0x15
c0018d3b:	0f 84 62 01 00 00    	je     c0018ea3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018d41:	8d 4a ea             	lea    ecx,[edx-0x16]
c0018d44:	b8 c0 e1 02 c0       	mov    eax,0xc002e1c0
c0018d49:	80 f9 01             	cmp    cl,0x1
c0018d4c:	0f 86 51 01 00 00    	jbe    c0018ea3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018d52:	80 fa 1a             	cmp    dl,0x1a
c0018d55:	0f 84 37 01 00 00    	je     c0018e92 <CPU::lookupIntelName(unsigned char, unsigned char)+0x29c>
c0018d5b:	80 fa 1c             	cmp    dl,0x1c
c0018d5e:	0f 84 34 01 00 00    	je     c0018e98 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a2>
c0018d64:	80 fa 1d             	cmp    dl,0x1d
c0018d67:	0f 84 36 01 00 00    	je     c0018ea3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018d6d:	b8 f0 e1 02 c0       	mov    eax,0xc002e1f0
c0018d72:	80 fa 25             	cmp    dl,0x25
c0018d75:	0f 84 28 01 00 00    	je     c0018ea3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018d7b:	8d 4a da             	lea    ecx,[edx-0x26]
c0018d7e:	b8 e0 e1 02 c0       	mov    eax,0xc002e1e0
c0018d83:	80 f9 01             	cmp    cl,0x1
c0018d86:	0f 86 17 01 00 00    	jbe    c0018ea3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018d8c:	b8 00 e2 02 c0       	mov    eax,0xc002e200
c0018d91:	80 fa 2a             	cmp    dl,0x2a
c0018d94:	0f 84 09 01 00 00    	je     c0018ea3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018d9a:	b8 f0 e1 02 c0       	mov    eax,0xc002e1f0
c0018d9f:	80 fa 2c             	cmp    dl,0x2c
c0018da2:	0f 84 fb 00 00 00    	je     c0018ea3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018da8:	b8 00 e2 02 c0       	mov    eax,0xc002e200
c0018dad:	80 fa 2d             	cmp    dl,0x2d
c0018db0:	0f 84 ed 00 00 00    	je     c0018ea3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018db6:	b8 d0 e1 02 c0       	mov    eax,0xc002e1d0
c0018dbb:	80 fa 2e             	cmp    dl,0x2e
c0018dbe:	0f 84 df 00 00 00    	je     c0018ea3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018dc4:	b8 f0 e1 02 c0       	mov    eax,0xc002e1f0
c0018dc9:	80 fa 2f             	cmp    dl,0x2f
c0018dcc:	0f 84 d1 00 00 00    	je     c0018ea3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018dd2:	8d 4a cb             	lea    ecx,[edx-0x35]
c0018dd5:	b8 e0 e1 02 c0       	mov    eax,0xc002e1e0
c0018dda:	80 f9 01             	cmp    cl,0x1
c0018ddd:	0f 86 c0 00 00 00    	jbe    c0018ea3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018de3:	b8 10 e2 02 c0       	mov    eax,0xc002e210
c0018de8:	80 fa 37             	cmp    dl,0x37
c0018deb:	0f 84 b2 00 00 00    	je     c0018ea3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018df1:	b8 20 e2 02 c0       	mov    eax,0xc002e220
c0018df6:	80 fa 3a             	cmp    dl,0x3a
c0018df9:	0f 84 a4 00 00 00    	je     c0018ea3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018dff:	b8 30 e2 02 c0       	mov    eax,0xc002e230
c0018e04:	80 fa 3c             	cmp    dl,0x3c
c0018e07:	0f 84 96 00 00 00    	je     c0018ea3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018e0d:	b8 40 e2 02 c0       	mov    eax,0xc002e240
c0018e12:	80 fa 3d             	cmp    dl,0x3d
c0018e15:	0f 84 88 00 00 00    	je     c0018ea3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018e1b:	b8 20 e2 02 c0       	mov    eax,0xc002e220
c0018e20:	80 fa 3e             	cmp    dl,0x3e
c0018e23:	74 7e                	je     c0018ea3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018e25:	8d 42 bb             	lea    eax,[edx-0x45]
c0018e28:	3c 01                	cmp    al,0x1
c0018e2a:	76 72                	jbe    c0018e9e <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0018e2c:	80 fa 3f             	cmp    dl,0x3f
c0018e2f:	74 6d                	je     c0018e9e <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0018e31:	80 fa 4a             	cmp    dl,0x4a
c0018e34:	74 0a                	je     c0018e40 <CPU::lookupIntelName(unsigned char, unsigned char)+0x24a>
c0018e36:	b8 e6 c2 02 c0       	mov    eax,0xc002c2e6
c0018e3b:	80 fa 4d             	cmp    dl,0x4d
c0018e3e:	75 63                	jne    c0018ea3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018e40:	b8 10 e2 02 c0       	mov    eax,0xc002e210
c0018e45:	c3                   	ret    
c0018e46:	b8 e6 c2 02 c0       	mov    eax,0xc002c2e6
c0018e4b:	80 f9 0b             	cmp    cl,0xb
c0018e4e:	75 0a                	jne    c0018e5a <CPU::lookupIntelName(unsigned char, unsigned char)+0x264>
c0018e50:	fe ca                	dec    dl
c0018e52:	75 4f                	jne    c0018ea3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018e54:	b8 50 e2 02 c0       	mov    eax,0xc002e250
c0018e59:	c3                   	ret    
c0018e5a:	80 f9 0f             	cmp    cl,0xf
c0018e5d:	75 44                	jne    c0018ea3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018e5f:	b8 60 e2 02 c0       	mov    eax,0xc002e260
c0018e64:	80 fa 02             	cmp    dl,0x2
c0018e67:	76 3a                	jbe    c0018ea3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018e69:	8d 42 fd             	lea    eax,[edx-0x3]
c0018e6c:	3c 01                	cmp    al,0x1
c0018e6e:	76 0a                	jbe    c0018e7a <CPU::lookupIntelName(unsigned char, unsigned char)+0x284>
c0018e70:	b8 e6 c2 02 c0       	mov    eax,0xc002c2e6
c0018e75:	80 fa 06             	cmp    dl,0x6
c0018e78:	75 29                	jne    c0018ea3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018e7a:	b8 70 e2 02 c0       	mov    eax,0xc002e270
c0018e7f:	c3                   	ret    
c0018e80:	b8 50 e1 02 c0       	mov    eax,0xc002e150
c0018e85:	c3                   	ret    
c0018e86:	b8 80 e1 02 c0       	mov    eax,0xc002e180
c0018e8b:	c3                   	ret    
c0018e8c:	b8 a0 e1 02 c0       	mov    eax,0xc002e1a0
c0018e91:	c3                   	ret    
c0018e92:	b8 d0 e1 02 c0       	mov    eax,0xc002e1d0
c0018e97:	c3                   	ret    
c0018e98:	b8 e0 e1 02 c0       	mov    eax,0xc002e1e0
c0018e9d:	c3                   	ret    
c0018e9e:	b8 30 e2 02 c0       	mov    eax,0xc002e230
c0018ea3:	c3                   	ret    

c0018ea4 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c0018ea4:	60                   	pusha  
c0018ea5:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018ea9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018ead:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018eb1:	9c                   	pushf  
c0018eb2:	fa                   	cli    
c0018eb3:	0f 09                	wbinvd 
c0018eb5:	0f 30                	wrmsr  
c0018eb7:	9d                   	popf   
c0018eb8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018ebc:	89 02                	mov    DWORD PTR [edx],eax
c0018ebe:	61                   	popa   
c0018ebf:	c3                   	ret    

c0018ec0 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c0018ec0:	60                   	pusha  
c0018ec1:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018ec5:	9c                   	pushf  
c0018ec6:	fa                   	cli    
c0018ec7:	0f 09                	wbinvd 
c0018ec9:	31 c0                	xor    eax,eax
c0018ecb:	31 d2                	xor    edx,edx
c0018ecd:	0f 32                	rdmsr  
c0018ecf:	9d                   	popf   
c0018ed0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018ed4:	89 02                	mov    DWORD PTR [edx],eax
c0018ed6:	61                   	popa   
c0018ed7:	c3                   	ret    

c0018ed8 <CPU::AMD_K6_writeback(int, int, int)>:
c0018ed8:	56                   	push   esi
c0018ed9:	53                   	push   ebx
c0018eda:	83 ec 10             	sub    esp,0x10
c0018edd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018ee1:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c0018ee6:	75 5d                	jne    c0018f45 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018ee8:	83 f8 08             	cmp    eax,0x8
c0018eeb:	75 09                	jne    c0018ef6 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c0018eed:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c0018ef2:	7e 13                	jle    c0018f07 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018ef4:	eb 30                	jmp    c0018f26 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018ef6:	83 f8 06             	cmp    eax,0x6
c0018ef9:	7c 4a                	jl     c0018f45 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018efb:	83 f8 07             	cmp    eax,0x7
c0018efe:	7e 07                	jle    c0018f07 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018f00:	83 f8 09             	cmp    eax,0x9
c0018f03:	74 21                	je     c0018f26 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018f05:	eb 3e                	jmp    c0018f45 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018f07:	89 e6                	mov    esi,esp
c0018f09:	8b 1d a8 ee 02 c0    	mov    ebx,DWORD PTR ds:0xc002eea8
c0018f0f:	56                   	push   esi
c0018f10:	c1 eb 15             	shr    ebx,0x15
c0018f13:	68 82 00 00 c0       	push   0xc0000082
c0018f18:	83 e3 7e             	and    ebx,0x7e
c0018f1b:	e8 a0 ff ff ff       	call   c0018ec0 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018f20:	56                   	push   esi
c0018f21:	6a 00                	push   0x0
c0018f23:	53                   	push   ebx
c0018f24:	eb 12                	jmp    c0018f38 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c0018f26:	89 e3                	mov    ebx,esp
c0018f28:	53                   	push   ebx
c0018f29:	68 82 00 00 c0       	push   0xc0000082
c0018f2e:	e8 8d ff ff ff       	call   c0018ec0 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018f33:	53                   	push   ebx
c0018f34:	6a 00                	push   0x0
c0018f36:	6a 00                	push   0x0
c0018f38:	68 82 00 00 c0       	push   0xc0000082
c0018f3d:	e8 62 ff ff ff       	call   c0018ea4 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c0018f42:	83 c4 18             	add    esp,0x18
c0018f45:	83 c4 10             	add    esp,0x10
c0018f48:	5b                   	pop    ebx
c0018f49:	5e                   	pop    esi
c0018f4a:	c3                   	ret    
c0018f4b:	90                   	nop

c0018f4c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0018f4c:	55                   	push   ebp
c0018f4d:	57                   	push   edi
c0018f4e:	56                   	push   esi
c0018f4f:	53                   	push   ebx
c0018f50:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018f54:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0018f58:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0018f5c:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0018f60:	39 05 80 e3 02 c0    	cmp    DWORD PTR ds:0xc002e380,eax
c0018f66:	75 23                	jne    c0018f8b <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0018f68:	a1 ac 19 03 c0       	mov    eax,ds:0xc00319ac
c0018f6d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0018f71:	89 06                	mov    DWORD PTR [esi],eax
c0018f73:	a1 a8 19 03 c0       	mov    eax,ds:0xc00319a8
c0018f78:	89 07                	mov    DWORD PTR [edi],eax
c0018f7a:	a1 a4 19 03 c0       	mov    eax,ds:0xc00319a4
c0018f7f:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0018f82:	a1 a0 19 03 c0       	mov    eax,ds:0xc00319a0
c0018f87:	89 02                	mov    DWORD PTR [edx],eax
c0018f89:	eb 3f                	jmp    c0018fca <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c0018f8b:	31 c9                	xor    ecx,ecx
c0018f8d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018f91:	0f a2                	cpuid  
c0018f93:	89 06                	mov    DWORD PTR [esi],eax
c0018f95:	89 1f                	mov    DWORD PTR [edi],ebx
c0018f97:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018f9b:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c0018f9e:	89 10                	mov    DWORD PTR [eax],edx
c0018fa0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018fa4:	a3 80 e3 02 c0       	mov    ds:0xc002e380,eax
c0018fa9:	8b 06                	mov    eax,DWORD PTR [esi]
c0018fab:	a3 ac 19 03 c0       	mov    ds:0xc00319ac,eax
c0018fb0:	8b 07                	mov    eax,DWORD PTR [edi]
c0018fb2:	a3 a8 19 03 c0       	mov    ds:0xc00319a8,eax
c0018fb7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0018fba:	a3 a4 19 03 c0       	mov    ds:0xc00319a4,eax
c0018fbf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018fc3:	8b 00                	mov    eax,DWORD PTR [eax]
c0018fc5:	a3 a0 19 03 c0       	mov    ds:0xc00319a0,eax
c0018fca:	5b                   	pop    ebx
c0018fcb:	5e                   	pop    esi
c0018fcc:	5f                   	pop    edi
c0018fcd:	5d                   	pop    ebp
c0018fce:	c3                   	ret    
c0018fcf:	90                   	nop

c0018fd0 <CPU::cpuidCheckEDX(unsigned int)>:
c0018fd0:	83 ec 10             	sub    esp,0x10
c0018fd3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018fd7:	50                   	push   eax
c0018fd8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018fdc:	50                   	push   eax
c0018fdd:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018fe1:	50                   	push   eax
c0018fe2:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018fe6:	50                   	push   eax
c0018fe7:	6a 01                	push   0x1
c0018fe9:	e8 5e ff ff ff       	call   c0018f4c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018fee:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018ff2:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c0018ff6:	0f 95 c0             	setne  al
c0018ff9:	83 c4 24             	add    esp,0x24
c0018ffc:	c3                   	ret    
c0018ffd:	90                   	nop

c0018ffe <CPU::cpuidCheckECX(unsigned int)>:
c0018ffe:	83 ec 10             	sub    esp,0x10
c0019001:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019005:	50                   	push   eax
c0019006:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001900a:	50                   	push   eax
c001900b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001900f:	50                   	push   eax
c0019010:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019014:	50                   	push   eax
c0019015:	6a 01                	push   0x1
c0019017:	e8 30 ff ff ff       	call   c0018f4c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001901c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019020:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0019024:	0f 95 c0             	setne  al
c0019027:	83 c4 24             	add    esp,0x24
c001902a:	c3                   	ret    
c001902b:	90                   	nop

c001902c <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c001902c:	83 ec 10             	sub    esp,0x10
c001902f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019033:	50                   	push   eax
c0019034:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019038:	50                   	push   eax
c0019039:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001903d:	50                   	push   eax
c001903e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019042:	50                   	push   eax
c0019043:	6a 07                	push   0x7
c0019045:	e8 02 ff ff ff       	call   c0018f4c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001904a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001904e:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c0019052:	0f 95 c0             	setne  al
c0019055:	83 c4 24             	add    esp,0x24
c0019058:	c3                   	ret    
c0019059:	90                   	nop

c001905a <CPU::cpuidCheckExtendedECX(unsigned int)>:
c001905a:	83 ec 10             	sub    esp,0x10
c001905d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019061:	50                   	push   eax
c0019062:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019066:	50                   	push   eax
c0019067:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001906b:	50                   	push   eax
c001906c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019070:	50                   	push   eax
c0019071:	6a 07                	push   0x7
c0019073:	e8 d4 fe ff ff       	call   c0018f4c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019078:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001907c:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0019080:	0f 95 c0             	setne  al
c0019083:	83 c4 24             	add    esp,0x24
c0019086:	c3                   	ret    
c0019087:	90                   	nop

c0019088 <CPU::CPU()>:
c0019088:	83 ec 0c             	sub    esp,0xc
c001908b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001908f:	83 ec 08             	sub    esp,0x8
c0019092:	68 e6 c2 02 c0       	push   0xc002c2e6
c0019097:	50                   	push   eax
c0019098:	e8 79 b4 ff ff       	call   c0014516 <Device::Device(char const*)>
c001909d:	83 c4 10             	add    esp,0x10
c00190a0:	ba c0 c3 02 c0       	mov    edx,0xc002c3c0
c00190a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00190a9:	89 10                	mov    DWORD PTR [eax],edx
c00190ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00190af:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c00190b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00190bd:	05 78 01 00 00       	add    eax,0x178
c00190c2:	83 ec 0c             	sub    esp,0xc
c00190c5:	50                   	push   eax
c00190c6:	e8 75 60 ff ff       	call   c000f140 <GDT::GDT()>
c00190cb:	83 c4 10             	add    esp,0x10
c00190ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00190d2:	05 7c 09 00 00       	add    eax,0x97c
c00190d7:	83 ec 0c             	sub    esp,0xc
c00190da:	50                   	push   eax
c00190db:	e8 ca 62 ff ff       	call   c000f3aa <IDT::IDT()>
c00190e0:	83 c4 10             	add    esp,0x10
c00190e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00190e7:	05 7c 11 00 00       	add    eax,0x117c
c00190ec:	83 ec 0c             	sub    esp,0xc
c00190ef:	50                   	push   eax
c00190f0:	e8 21 83 ff ff       	call   c0011416 <TSS::TSS()>
c00190f5:	83 c4 10             	add    esp,0x10
c00190f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00190fc:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c0019103:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019107:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c0019111:	90                   	nop
c0019112:	83 c4 0c             	add    esp,0xc
c0019115:	c3                   	ret    

c0019116 <CPU::displayFeatures()>:
c0019116:	53                   	push   ebx
c0019117:	83 ec 10             	sub    esp,0x10
c001911a:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001911e:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0019124:	68 f4 bf 02 c0       	push   0xc002bff4
c0019129:	e8 c3 9d ff ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c001912e:	59                   	pop    ecx
c001912f:	58                   	pop    eax
c0019130:	8d 83 5f 01 00 00    	lea    eax,[ebx+0x15f]
c0019136:	50                   	push   eax
c0019137:	68 05 c0 02 c0       	push   0xc002c005
c001913c:	e8 b0 9d ff ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c0019141:	58                   	pop    eax
c0019142:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019148:	5a                   	pop    edx
c0019149:	c1 e8 0e             	shr    eax,0xe
c001914c:	0f b6 c0             	movzx  eax,al
c001914f:	50                   	push   eax
c0019150:	68 16 c0 02 c0       	push   0xc002c016
c0019155:	e8 97 9d ff ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c001915a:	59                   	pop    ecx
c001915b:	58                   	pop    eax
c001915c:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019162:	66 c1 e8 06          	shr    ax,0x6
c0019166:	0f b6 c0             	movzx  eax,al
c0019169:	50                   	push   eax
c001916a:	68 27 c0 02 c0       	push   0xc002c027
c001916f:	e8 7d 9d ff ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c0019174:	c7 04 24 d4 c4 02 c0 	mov    DWORD PTR [esp],0xc002c4d4
c001917b:	e8 71 9d ff ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c0019180:	83 c4 10             	add    esp,0x10
c0019183:	b8 36 a9 02 c0       	mov    eax,0xc002a936
c0019188:	f6 83 90 11 00 00 01 	test   BYTE PTR [ebx+0x1190],0x1
c001918f:	74 05                	je     c0019196 <CPU::displayFeatures()+0x80>
c0019191:	b8 32 a9 02 c0       	mov    eax,0xc002a932
c0019196:	52                   	push   edx
c0019197:	52                   	push   edx
c0019198:	50                   	push   eax
c0019199:	68 38 c0 02 c0       	push   0xc002c038
c001919e:	e8 4e 9d ff ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c00191a3:	83 c4 10             	add    esp,0x10
c00191a6:	b8 32 a9 02 c0       	mov    eax,0xc002a932
c00191ab:	80 bb 90 11 00 00 00 	cmp    BYTE PTR [ebx+0x1190],0x0
c00191b2:	78 05                	js     c00191b9 <CPU::displayFeatures()+0xa3>
c00191b4:	b8 36 a9 02 c0       	mov    eax,0xc002a936
c00191b9:	51                   	push   ecx
c00191ba:	51                   	push   ecx
c00191bb:	50                   	push   eax
c00191bc:	68 4f c0 02 c0       	push   0xc002c04f
c00191c1:	e8 2b 9d ff ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c00191c6:	83 c4 10             	add    esp,0x10
c00191c9:	b8 32 a9 02 c0       	mov    eax,0xc002a932
c00191ce:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c00191d5:	75 05                	jne    c00191dc <CPU::displayFeatures()+0xc6>
c00191d7:	b8 36 a9 02 c0       	mov    eax,0xc002a936
c00191dc:	52                   	push   edx
c00191dd:	52                   	push   edx
c00191de:	50                   	push   eax
c00191df:	68 66 c0 02 c0       	push   0xc002c066
c00191e4:	e8 08 9d ff ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c00191e9:	83 c4 10             	add    esp,0x10
c00191ec:	b8 32 a9 02 c0       	mov    eax,0xc002a932
c00191f1:	f6 83 90 11 00 00 04 	test   BYTE PTR [ebx+0x1190],0x4
c00191f8:	75 05                	jne    c00191ff <CPU::displayFeatures()+0xe9>
c00191fa:	b8 36 a9 02 c0       	mov    eax,0xc002a936
c00191ff:	51                   	push   ecx
c0019200:	51                   	push   ecx
c0019201:	50                   	push   eax
c0019202:	68 7d c0 02 c0       	push   0xc002c07d
c0019207:	e8 e5 9c ff ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c001920c:	83 c4 10             	add    esp,0x10
c001920f:	b8 32 a9 02 c0       	mov    eax,0xc002a932
c0019214:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c001921b:	75 05                	jne    c0019222 <CPU::displayFeatures()+0x10c>
c001921d:	b8 36 a9 02 c0       	mov    eax,0xc002a936
c0019222:	52                   	push   edx
c0019223:	52                   	push   edx
c0019224:	50                   	push   eax
c0019225:	68 94 c0 02 c0       	push   0xc002c094
c001922a:	e8 c2 9c ff ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c001922f:	83 c4 10             	add    esp,0x10
c0019232:	b8 32 a9 02 c0       	mov    eax,0xc002a932
c0019237:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c001923e:	75 05                	jne    c0019245 <CPU::displayFeatures()+0x12f>
c0019240:	b8 36 a9 02 c0       	mov    eax,0xc002a936
c0019245:	51                   	push   ecx
c0019246:	51                   	push   ecx
c0019247:	50                   	push   eax
c0019248:	68 ab c0 02 c0       	push   0xc002c0ab
c001924d:	e8 9f 9c ff ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c0019252:	83 c4 10             	add    esp,0x10
c0019255:	b8 32 a9 02 c0       	mov    eax,0xc002a932
c001925a:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c0019261:	75 05                	jne    c0019268 <CPU::displayFeatures()+0x152>
c0019263:	b8 36 a9 02 c0       	mov    eax,0xc002a936
c0019268:	52                   	push   edx
c0019269:	52                   	push   edx
c001926a:	50                   	push   eax
c001926b:	68 c2 c0 02 c0       	push   0xc002c0c2
c0019270:	e8 7c 9c ff ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c0019275:	83 c4 10             	add    esp,0x10
c0019278:	b8 32 a9 02 c0       	mov    eax,0xc002a932
c001927d:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c0019284:	75 05                	jne    c001928b <CPU::displayFeatures()+0x175>
c0019286:	b8 36 a9 02 c0       	mov    eax,0xc002a936
c001928b:	51                   	push   ecx
c001928c:	51                   	push   ecx
c001928d:	50                   	push   eax
c001928e:	68 d9 c0 02 c0       	push   0xc002c0d9
c0019293:	e8 59 9c ff ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c0019298:	83 c4 10             	add    esp,0x10
c001929b:	b8 32 a9 02 c0       	mov    eax,0xc002a932
c00192a0:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c00192a7:	75 05                	jne    c00192ae <CPU::displayFeatures()+0x198>
c00192a9:	b8 36 a9 02 c0       	mov    eax,0xc002a936
c00192ae:	52                   	push   edx
c00192af:	52                   	push   edx
c00192b0:	50                   	push   eax
c00192b1:	68 f0 c0 02 c0       	push   0xc002c0f0
c00192b6:	e8 36 9c ff ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c00192bb:	83 c4 10             	add    esp,0x10
c00192be:	b8 32 a9 02 c0       	mov    eax,0xc002a932
c00192c3:	f6 83 92 11 00 00 01 	test   BYTE PTR [ebx+0x1192],0x1
c00192ca:	75 05                	jne    c00192d1 <CPU::displayFeatures()+0x1bb>
c00192cc:	b8 36 a9 02 c0       	mov    eax,0xc002a936
c00192d1:	51                   	push   ecx
c00192d2:	51                   	push   ecx
c00192d3:	50                   	push   eax
c00192d4:	68 07 c1 02 c0       	push   0xc002c107
c00192d9:	e8 13 9c ff ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c00192de:	83 c4 10             	add    esp,0x10
c00192e1:	b8 32 a9 02 c0       	mov    eax,0xc002a932
c00192e6:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c00192ed:	75 05                	jne    c00192f4 <CPU::displayFeatures()+0x1de>
c00192ef:	b8 36 a9 02 c0       	mov    eax,0xc002a936
c00192f4:	52                   	push   edx
c00192f5:	52                   	push   edx
c00192f6:	50                   	push   eax
c00192f7:	68 1e c1 02 c0       	push   0xc002c11e
c00192fc:	e8 f0 9b ff ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c0019301:	83 c4 10             	add    esp,0x10
c0019304:	b8 32 a9 02 c0       	mov    eax,0xc002a932
c0019309:	f6 83 91 11 00 00 20 	test   BYTE PTR [ebx+0x1191],0x20
c0019310:	75 05                	jne    c0019317 <CPU::displayFeatures()+0x201>
c0019312:	b8 36 a9 02 c0       	mov    eax,0xc002a936
c0019317:	51                   	push   ecx
c0019318:	51                   	push   ecx
c0019319:	50                   	push   eax
c001931a:	68 35 c1 02 c0       	push   0xc002c135
c001931f:	e8 cd 9b ff ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c0019324:	83 c4 10             	add    esp,0x10
c0019327:	b8 32 a9 02 c0       	mov    eax,0xc002a932
c001932c:	f6 83 91 11 00 00 40 	test   BYTE PTR [ebx+0x1191],0x40
c0019333:	75 05                	jne    c001933a <CPU::displayFeatures()+0x224>
c0019335:	b8 36 a9 02 c0       	mov    eax,0xc002a936
c001933a:	52                   	push   edx
c001933b:	52                   	push   edx
c001933c:	50                   	push   eax
c001933d:	68 4c c1 02 c0       	push   0xc002c14c
c0019342:	e8 aa 9b ff ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c0019347:	83 c4 10             	add    esp,0x10
c001934a:	b8 32 a9 02 c0       	mov    eax,0xc002a932
c001934f:	80 bb 91 11 00 00 00 	cmp    BYTE PTR [ebx+0x1191],0x0
c0019356:	78 05                	js     c001935d <CPU::displayFeatures()+0x247>
c0019358:	b8 36 a9 02 c0       	mov    eax,0xc002a936
c001935d:	51                   	push   ecx
c001935e:	51                   	push   ecx
c001935f:	50                   	push   eax
c0019360:	68 63 c1 02 c0       	push   0xc002c163
c0019365:	e8 87 9b ff ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c001936a:	83 c4 10             	add    esp,0x10
c001936d:	b8 32 a9 02 c0       	mov    eax,0xc002a932
c0019372:	f6 83 92 11 00 00 04 	test   BYTE PTR [ebx+0x1192],0x4
c0019379:	75 05                	jne    c0019380 <CPU::displayFeatures()+0x26a>
c001937b:	b8 36 a9 02 c0       	mov    eax,0xc002a936
c0019380:	52                   	push   edx
c0019381:	52                   	push   edx
c0019382:	50                   	push   eax
c0019383:	68 7a c1 02 c0       	push   0xc002c17a
c0019388:	e8 64 9b ff ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c001938d:	83 c4 18             	add    esp,0x18
c0019390:	5b                   	pop    ebx
c0019391:	c3                   	ret    

c0019392 <CPU::detectFeatures()>:
c0019392:	55                   	push   ebp
c0019393:	57                   	push   edi
c0019394:	56                   	push   esi
c0019395:	53                   	push   ebx
c0019396:	83 ec 50             	sub    esp,0x50
c0019399:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c001939d:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c00193a7:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c00193ae:	8d bb 5f 01 00 00    	lea    edi,[ebx+0x15f]
c00193b4:	6a 0d                	push   0xd
c00193b6:	6a 00                	push   0x0
c00193b8:	57                   	push   edi
c00193b9:	e8 de 73 fe ff       	call   c000079c <memset>
c00193be:	83 c4 10             	add    esp,0x10
c00193c1:	a1 68 ee 02 c0       	mov    eax,ds:0xc002ee68
c00193c6:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c00193cd:	0f 84 20 09 00 00    	je     c0019cf3 <CPU::detectFeatures()+0x961>
c00193d3:	83 ec 0c             	sub    esp,0xc
c00193d6:	6a 10                	push   0x10
c00193d8:	e8 f3 fb ff ff       	call   c0018fd0 <CPU::cpuidCheckEDX(unsigned int)>
c00193dd:	83 e0 01             	and    eax,0x1
c00193e0:	8d 14 00             	lea    edx,[eax+eax*1]
c00193e3:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00193e9:	83 e0 fd             	and    eax,0xfffffffd
c00193ec:	09 d0                	or     eax,edx
c00193ee:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00193f4:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c00193fb:	e8 d0 fb ff ff       	call   c0018fd0 <CPU::cpuidCheckEDX(unsigned int)>
c0019400:	83 e0 01             	and    eax,0x1
c0019403:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c001940a:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0019410:	83 e0 fb             	and    eax,0xfffffffb
c0019413:	09 d0                	or     eax,edx
c0019415:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001941b:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0019422:	e8 a9 fb ff ff       	call   c0018fd0 <CPU::cpuidCheckEDX(unsigned int)>
c0019427:	83 e0 01             	and    eax,0x1
c001942a:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0019431:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0019437:	83 e0 f7             	and    eax,0xfffffff7
c001943a:	09 d0                	or     eax,edx
c001943c:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019442:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c0019449:	e8 82 fb ff ff       	call   c0018fd0 <CPU::cpuidCheckEDX(unsigned int)>
c001944e:	83 e0 01             	and    eax,0x1
c0019451:	c1 e0 04             	shl    eax,0x4
c0019454:	88 c2                	mov    dl,al
c0019456:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001945c:	83 e0 ef             	and    eax,0xffffffef
c001945f:	09 d0                	or     eax,edx
c0019461:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019467:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c001946e:	e8 5d fb ff ff       	call   c0018fd0 <CPU::cpuidCheckEDX(unsigned int)>
c0019473:	83 e0 01             	and    eax,0x1
c0019476:	c1 e0 05             	shl    eax,0x5
c0019479:	88 c2                	mov    dl,al
c001947b:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0019481:	83 e0 df             	and    eax,0xffffffdf
c0019484:	09 d0                	or     eax,edx
c0019486:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001948c:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0019493:	e8 38 fb ff ff       	call   c0018fd0 <CPU::cpuidCheckEDX(unsigned int)>
c0019498:	83 e0 01             	and    eax,0x1
c001949b:	8d 14 00             	lea    edx,[eax+eax*1]
c001949e:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c00194a4:	83 e0 fd             	and    eax,0xfffffffd
c00194a7:	09 d0                	or     eax,edx
c00194a9:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c00194af:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c00194b6:	e8 15 fb ff ff       	call   c0018fd0 <CPU::cpuidCheckEDX(unsigned int)>
c00194bb:	83 e0 01             	and    eax,0x1
c00194be:	c1 e0 06             	shl    eax,0x6
c00194c1:	88 c2                	mov    dl,al
c00194c3:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c00194c9:	83 e0 bf             	and    eax,0xffffffbf
c00194cc:	09 d0                	or     eax,edx
c00194ce:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c00194d4:	58                   	pop    eax
c00194d5:	8d 74 24 28          	lea    esi,[esp+0x28]
c00194d9:	56                   	push   esi
c00194da:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c00194de:	55                   	push   ebp
c00194df:	8d 44 24 28          	lea    eax,[esp+0x28]
c00194e3:	50                   	push   eax
c00194e4:	8d 54 24 28          	lea    edx,[esp+0x28]
c00194e8:	52                   	push   edx
c00194e9:	6a 00                	push   0x0
c00194eb:	e8 5c fa ff ff       	call   c0018f4c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00194f0:	83 c4 1c             	add    esp,0x1c
c00194f3:	6a 04                	push   0x4
c00194f5:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00194f9:	50                   	push   eax
c00194fa:	57                   	push   edi
c00194fb:	e8 68 72 fe ff       	call   c0000768 <memcpy>
c0019500:	83 c4 0c             	add    esp,0xc
c0019503:	8d 83 63 01 00 00    	lea    eax,[ebx+0x163]
c0019509:	6a 04                	push   0x4
c001950b:	56                   	push   esi
c001950c:	50                   	push   eax
c001950d:	e8 56 72 fe ff       	call   c0000768 <memcpy>
c0019512:	83 c4 0c             	add    esp,0xc
c0019515:	8d 83 67 01 00 00    	lea    eax,[ebx+0x167]
c001951b:	6a 04                	push   0x4
c001951d:	55                   	push   ebp
c001951e:	50                   	push   eax
c001951f:	e8 44 72 fe ff       	call   c0000768 <memcpy>
c0019524:	58                   	pop    eax
c0019525:	5a                   	pop    edx
c0019526:	68 91 c1 02 c0       	push   0xc002c191
c001952b:	57                   	push   edi
c001952c:	e8 b3 73 fe ff       	call   c00008e4 <strcmp>
c0019531:	83 c4 10             	add    esp,0x10
c0019534:	85 c0                	test   eax,eax
c0019536:	75 0f                	jne    c0019547 <CPU::detectFeatures()+0x1b5>
c0019538:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c0019542:	e9 22 02 00 00       	jmp    c0019769 <CPU::detectFeatures()+0x3d7>
c0019547:	50                   	push   eax
c0019548:	50                   	push   eax
c0019549:	68 9e c1 02 c0       	push   0xc002c19e
c001954e:	57                   	push   edi
c001954f:	e8 90 73 fe ff       	call   c00008e4 <strcmp>
c0019554:	83 c4 10             	add    esp,0x10
c0019557:	85 c0                	test   eax,eax
c0019559:	74 dd                	je     c0019538 <CPU::detectFeatures()+0x1a6>
c001955b:	51                   	push   ecx
c001955c:	51                   	push   ecx
c001955d:	68 ab c1 02 c0       	push   0xc002c1ab
c0019562:	57                   	push   edi
c0019563:	e8 7c 73 fe ff       	call   c00008e4 <strcmp>
c0019568:	83 c4 10             	add    esp,0x10
c001956b:	85 c0                	test   eax,eax
c001956d:	74 2a                	je     c0019599 <CPU::detectFeatures()+0x207>
c001956f:	52                   	push   edx
c0019570:	52                   	push   edx
c0019571:	68 b8 c1 02 c0       	push   0xc002c1b8
c0019576:	57                   	push   edi
c0019577:	e8 68 73 fe ff       	call   c00008e4 <strcmp>
c001957c:	83 c4 10             	add    esp,0x10
c001957f:	85 c0                	test   eax,eax
c0019581:	74 16                	je     c0019599 <CPU::detectFeatures()+0x207>
c0019583:	50                   	push   eax
c0019584:	50                   	push   eax
c0019585:	68 c5 c1 02 c0       	push   0xc002c1c5
c001958a:	57                   	push   edi
c001958b:	e8 54 73 fe ff       	call   c00008e4 <strcmp>
c0019590:	83 c4 10             	add    esp,0x10
c0019593:	85 c0                	test   eax,eax
c0019595:	74 48                	je     c00195df <CPU::detectFeatures()+0x24d>
c0019597:	eb 0f                	jmp    c00195a8 <CPU::detectFeatures()+0x216>
c0019599:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c00195a3:	e9 c1 01 00 00       	jmp    c0019769 <CPU::detectFeatures()+0x3d7>
c00195a8:	50                   	push   eax
c00195a9:	50                   	push   eax
c00195aa:	68 d2 c1 02 c0       	push   0xc002c1d2
c00195af:	57                   	push   edi
c00195b0:	e8 2f 73 fe ff       	call   c00008e4 <strcmp>
c00195b5:	83 c4 10             	add    esp,0x10
c00195b8:	85 c0                	test   eax,eax
c00195ba:	74 23                	je     c00195df <CPU::detectFeatures()+0x24d>
c00195bc:	50                   	push   eax
c00195bd:	50                   	push   eax
c00195be:	68 df c1 02 c0       	push   0xc002c1df
c00195c3:	57                   	push   edi
c00195c4:	e8 1b 73 fe ff       	call   c00008e4 <strcmp>
c00195c9:	83 c4 10             	add    esp,0x10
c00195cc:	85 c0                	test   eax,eax
c00195ce:	75 1e                	jne    c00195ee <CPU::detectFeatures()+0x25c>
c00195d0:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c00195da:	e9 8a 01 00 00       	jmp    c0019769 <CPU::detectFeatures()+0x3d7>
c00195df:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c00195e9:	e9 7b 01 00 00       	jmp    c0019769 <CPU::detectFeatures()+0x3d7>
c00195ee:	50                   	push   eax
c00195ef:	50                   	push   eax
c00195f0:	68 ec c1 02 c0       	push   0xc002c1ec
c00195f5:	57                   	push   edi
c00195f6:	e8 e9 72 fe ff       	call   c00008e4 <strcmp>
c00195fb:	83 c4 10             	add    esp,0x10
c00195fe:	85 c0                	test   eax,eax
c0019600:	75 0f                	jne    c0019611 <CPU::detectFeatures()+0x27f>
c0019602:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c001960c:	e9 58 01 00 00       	jmp    c0019769 <CPU::detectFeatures()+0x3d7>
c0019611:	50                   	push   eax
c0019612:	50                   	push   eax
c0019613:	68 ab c1 02 c0       	push   0xc002c1ab
c0019618:	57                   	push   edi
c0019619:	e8 c6 72 fe ff       	call   c00008e4 <strcmp>
c001961e:	83 c4 10             	add    esp,0x10
c0019621:	85 c0                	test   eax,eax
c0019623:	75 0f                	jne    c0019634 <CPU::detectFeatures()+0x2a2>
c0019625:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c001962f:	e9 35 01 00 00       	jmp    c0019769 <CPU::detectFeatures()+0x3d7>
c0019634:	50                   	push   eax
c0019635:	50                   	push   eax
c0019636:	68 f9 c1 02 c0       	push   0xc002c1f9
c001963b:	57                   	push   edi
c001963c:	e8 a3 72 fe ff       	call   c00008e4 <strcmp>
c0019641:	83 c4 10             	add    esp,0x10
c0019644:	85 c0                	test   eax,eax
c0019646:	75 0f                	jne    c0019657 <CPU::detectFeatures()+0x2c5>
c0019648:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c0019652:	e9 12 01 00 00       	jmp    c0019769 <CPU::detectFeatures()+0x3d7>
c0019657:	51                   	push   ecx
c0019658:	51                   	push   ecx
c0019659:	68 06 c2 02 c0       	push   0xc002c206
c001965e:	57                   	push   edi
c001965f:	e8 80 72 fe ff       	call   c00008e4 <strcmp>
c0019664:	83 c4 10             	add    esp,0x10
c0019667:	85 c0                	test   eax,eax
c0019669:	75 0f                	jne    c001967a <CPU::detectFeatures()+0x2e8>
c001966b:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c0019675:	e9 ef 00 00 00       	jmp    c0019769 <CPU::detectFeatures()+0x3d7>
c001967a:	52                   	push   edx
c001967b:	52                   	push   edx
c001967c:	68 13 c2 02 c0       	push   0xc002c213
c0019681:	57                   	push   edi
c0019682:	e8 5d 72 fe ff       	call   c00008e4 <strcmp>
c0019687:	83 c4 10             	add    esp,0x10
c001968a:	85 c0                	test   eax,eax
c001968c:	75 0f                	jne    c001969d <CPU::detectFeatures()+0x30b>
c001968e:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c0019698:	e9 cc 00 00 00       	jmp    c0019769 <CPU::detectFeatures()+0x3d7>
c001969d:	50                   	push   eax
c001969e:	50                   	push   eax
c001969f:	68 20 c2 02 c0       	push   0xc002c220
c00196a4:	57                   	push   edi
c00196a5:	e8 3a 72 fe ff       	call   c00008e4 <strcmp>
c00196aa:	83 c4 10             	add    esp,0x10
c00196ad:	85 c0                	test   eax,eax
c00196af:	75 0f                	jne    c00196c0 <CPU::detectFeatures()+0x32e>
c00196b1:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c00196bb:	e9 a9 00 00 00       	jmp    c0019769 <CPU::detectFeatures()+0x3d7>
c00196c0:	50                   	push   eax
c00196c1:	50                   	push   eax
c00196c2:	68 2d c2 02 c0       	push   0xc002c22d
c00196c7:	57                   	push   edi
c00196c8:	e8 17 72 fe ff       	call   c00008e4 <strcmp>
c00196cd:	83 c4 10             	add    esp,0x10
c00196d0:	85 c0                	test   eax,eax
c00196d2:	75 0f                	jne    c00196e3 <CPU::detectFeatures()+0x351>
c00196d4:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c00196de:	e9 86 00 00 00       	jmp    c0019769 <CPU::detectFeatures()+0x3d7>
c00196e3:	50                   	push   eax
c00196e4:	50                   	push   eax
c00196e5:	68 3a c2 02 c0       	push   0xc002c23a
c00196ea:	57                   	push   edi
c00196eb:	e8 f4 71 fe ff       	call   c00008e4 <strcmp>
c00196f0:	83 c4 10             	add    esp,0x10
c00196f3:	85 c0                	test   eax,eax
c00196f5:	75 0c                	jne    c0019703 <CPU::detectFeatures()+0x371>
c00196f7:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c0019701:	eb 66                	jmp    c0019769 <CPU::detectFeatures()+0x3d7>
c0019703:	50                   	push   eax
c0019704:	50                   	push   eax
c0019705:	68 47 c2 02 c0       	push   0xc002c247
c001970a:	57                   	push   edi
c001970b:	e8 d4 71 fe ff       	call   c00008e4 <strcmp>
c0019710:	83 c4 10             	add    esp,0x10
c0019713:	85 c0                	test   eax,eax
c0019715:	75 0c                	jne    c0019723 <CPU::detectFeatures()+0x391>
c0019717:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c0019721:	eb 46                	jmp    c0019769 <CPU::detectFeatures()+0x3d7>
c0019723:	50                   	push   eax
c0019724:	50                   	push   eax
c0019725:	68 54 c2 02 c0       	push   0xc002c254
c001972a:	57                   	push   edi
c001972b:	e8 b4 71 fe ff       	call   c00008e4 <strcmp>
c0019730:	83 c4 10             	add    esp,0x10
c0019733:	85 c0                	test   eax,eax
c0019735:	74 e0                	je     c0019717 <CPU::detectFeatures()+0x385>
c0019737:	50                   	push   eax
c0019738:	50                   	push   eax
c0019739:	68 61 c2 02 c0       	push   0xc002c261
c001973e:	57                   	push   edi
c001973f:	e8 a0 71 fe ff       	call   c00008e4 <strcmp>
c0019744:	83 c4 10             	add    esp,0x10
c0019747:	85 c0                	test   eax,eax
c0019749:	74 cc                	je     c0019717 <CPU::detectFeatures()+0x385>
c001974b:	51                   	push   ecx
c001974c:	51                   	push   ecx
c001974d:	68 6e c2 02 c0       	push   0xc002c26e
c0019752:	57                   	push   edi
c0019753:	e8 8c 71 fe ff       	call   c00008e4 <strcmp>
c0019758:	83 c4 10             	add    esp,0x10
c001975b:	85 c0                	test   eax,eax
c001975d:	74 b8                	je     c0019717 <CPU::detectFeatures()+0x385>
c001975f:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c0019769:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c001976e:	0f 86 be 00 00 00    	jbe    c0019832 <CPU::detectFeatures()+0x4a0>
c0019774:	83 ec 0c             	sub    esp,0xc
c0019777:	68 80 00 00 00       	push   0x80
c001977c:	e8 ab f8 ff ff       	call   c001902c <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0019781:	83 e0 01             	and    eax,0x1
c0019784:	c1 e0 06             	shl    eax,0x6
c0019787:	88 c2                	mov    dl,al
c0019789:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001978f:	83 e0 bf             	and    eax,0xffffffbf
c0019792:	09 d0                	or     eax,edx
c0019794:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001979a:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c00197a1:	e8 86 f8 ff ff       	call   c001902c <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00197a6:	83 e0 01             	and    eax,0x1
c00197a9:	c1 e0 04             	shl    eax,0x4
c00197ac:	88 c2                	mov    dl,al
c00197ae:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c00197b4:	83 e0 ef             	and    eax,0xffffffef
c00197b7:	09 d0                	or     eax,edx
c00197b9:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c00197bf:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c00197c6:	e8 61 f8 ff ff       	call   c001902c <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00197cb:	c1 e0 07             	shl    eax,0x7
c00197ce:	88 c2                	mov    dl,al
c00197d0:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00197d6:	83 e0 7f             	and    eax,0x7f
c00197d9:	09 d0                	or     eax,edx
c00197db:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00197e1:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00197e8:	e8 6d f8 ff ff       	call   c001905a <CPU::cpuidCheckExtendedECX(unsigned int)>
c00197ed:	83 e0 01             	and    eax,0x1
c00197f0:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c00197f7:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c00197fd:	83 e0 f7             	and    eax,0xfffffff7
c0019800:	09 d0                	or     eax,edx
c0019802:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0019808:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c001980f:	e8 46 f8 ff ff       	call   c001905a <CPU::cpuidCheckExtendedECX(unsigned int)>
c0019814:	83 c4 10             	add    esp,0x10
c0019817:	83 e0 01             	and    eax,0x1
c001981a:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0019821:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0019827:	83 e0 fb             	and    eax,0xfffffffb
c001982a:	09 d0                	or     eax,edx
c001982c:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0019832:	83 ec 0c             	sub    esp,0xc
c0019835:	56                   	push   esi
c0019836:	55                   	push   ebp
c0019837:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001983b:	57                   	push   edi
c001983c:	8d 44 24 28          	lea    eax,[esp+0x28]
c0019840:	50                   	push   eax
c0019841:	6a 01                	push   0x1
c0019843:	e8 04 f7 ff ff       	call   c0018f4c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019848:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001984c:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0019852:	88 ca                	mov    dl,cl
c0019854:	83 e0 f0             	and    eax,0xfffffff0
c0019857:	83 e2 0f             	and    edx,0xf
c001985a:	09 d0                	or     eax,edx
c001985c:	88 ca                	mov    dl,cl
c001985e:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c0019864:	c0 ea 04             	shr    dl,0x4
c0019867:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c001986b:	0f b6 c2             	movzx  eax,dl
c001986e:	83 c4 20             	add    esp,0x20
c0019871:	c1 e0 06             	shl    eax,0x6
c0019874:	89 c5                	mov    ebp,eax
c0019876:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001987c:	66 25 3f c0          	and    ax,0xc03f
c0019880:	09 e8                	or     eax,ebp
c0019882:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0019889:	89 c8                	mov    eax,ecx
c001988b:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c0019891:	c1 e8 08             	shr    eax,0x8
c0019894:	83 e2 3f             	and    edx,0x3f
c0019897:	83 e0 0f             	and    eax,0xf
c001989a:	89 c5                	mov    ebp,eax
c001989c:	c1 e5 06             	shl    ebp,0x6
c001989f:	09 d5                	or     ebp,edx
c00198a1:	89 ea                	mov    edx,ebp
c00198a3:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c00198a9:	88 c2                	mov    dl,al
c00198ab:	c0 ea 02             	shr    dl,0x2
c00198ae:	89 d5                	mov    ebp,edx
c00198b0:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c00198b6:	83 e2 c0             	and    edx,0xffffffc0
c00198b9:	09 d5                	or     ebp,edx
c00198bb:	89 ea                	mov    edx,ebp
c00198bd:	89 cd                	mov    ebp,ecx
c00198bf:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c00198c5:	c1 ed 0c             	shr    ebp,0xc
c00198c8:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c00198ce:	83 e5 03             	and    ebp,0x3
c00198d1:	83 e2 cf             	and    edx,0xffffffcf
c00198d4:	c1 e5 04             	shl    ebp,0x4
c00198d7:	09 d5                	or     ebp,edx
c00198d9:	3c 06                	cmp    al,0x6
c00198db:	89 ea                	mov    edx,ebp
c00198dd:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c00198e3:	74 04                	je     c00198e9 <CPU::detectFeatures()+0x557>
c00198e5:	3c 0f                	cmp    al,0xf
c00198e7:	75 5c                	jne    c0019945 <CPU::detectFeatures()+0x5b3>
c00198e9:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00198ed:	89 cd                	mov    ebp,ecx
c00198ef:	c1 ed 10             	shr    ebp,0x10
c00198f2:	c1 e5 04             	shl    ebp,0x4
c00198f5:	09 ea                	or     edx,ebp
c00198f7:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c00198fd:	0f b6 d2             	movzx  edx,dl
c0019900:	66 81 e5 3f c0       	and    bp,0xc03f
c0019905:	c1 e2 06             	shl    edx,0x6
c0019908:	09 ea                	or     edx,ebp
c001990a:	3c 0f                	cmp    al,0xf
c001990c:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c0019913:	75 30                	jne    c0019945 <CPU::detectFeatures()+0x5b3>
c0019915:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c001991b:	c1 e9 14             	shr    ecx,0x14
c001991e:	83 e0 3f             	and    eax,0x3f
c0019921:	83 c1 0f             	add    ecx,0xf
c0019924:	88 ca                	mov    dl,cl
c0019926:	c0 e9 02             	shr    cl,0x2
c0019929:	c1 e2 06             	shl    edx,0x6
c001992c:	09 d0                	or     eax,edx
c001992e:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c0019934:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c001993a:	83 e0 c0             	and    eax,0xffffffc0
c001993d:	09 c1                	or     ecx,eax
c001993f:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c0019945:	83 ec 0c             	sub    esp,0xc
c0019948:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c001994f:	56                   	push   esi
c0019950:	8d 44 24 28          	lea    eax,[esp+0x28]
c0019954:	50                   	push   eax
c0019955:	57                   	push   edi
c0019956:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001995a:	55                   	push   ebp
c001995b:	68 00 00 00 80       	push   0x80000000
c0019960:	e8 e7 f5 ff ff       	call   c0018f4c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019965:	83 c4 20             	add    esp,0x20
c0019968:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c0019970:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019974:	76 1e                	jbe    c0019994 <CPU::detectFeatures()+0x602>
c0019976:	83 ec 0c             	sub    esp,0xc
c0019979:	56                   	push   esi
c001997a:	50                   	push   eax
c001997b:	57                   	push   edi
c001997c:	55                   	push   ebp
c001997d:	68 01 00 00 80       	push   0x80000001
c0019982:	e8 c5 f5 ff ff       	call   c0018f4c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019987:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c0019991:	83 c4 20             	add    esp,0x20
c0019994:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001999a:	83 f8 01             	cmp    eax,0x1
c001999d:	75 6f                	jne    c0019a0e <CPU::detectFeatures()+0x67c>
c001999f:	51                   	push   ecx
c00199a0:	51                   	push   ecx
c00199a1:	68 7a c2 02 c0       	push   0xc002c27a
c00199a6:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00199aa:	56                   	push   esi
c00199ab:	e8 a8 6e fe ff       	call   c0000858 <strcpy>
c00199b0:	5f                   	pop    edi
c00199b1:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00199b7:	5d                   	pop    ebp
c00199b8:	66 c1 e8 06          	shr    ax,0x6
c00199bc:	0f b6 c0             	movzx  eax,al
c00199bf:	50                   	push   eax
c00199c0:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00199c6:	c1 e8 0e             	shr    eax,0xe
c00199c9:	0f b6 c0             	movzx  eax,al
c00199cc:	50                   	push   eax
c00199cd:	e8 24 f2 ff ff       	call   c0018bf6 <CPU::lookupIntelName(unsigned char, unsigned char)>
c00199d2:	5a                   	pop    edx
c00199d3:	59                   	pop    ecx
c00199d4:	50                   	push   eax
c00199d5:	56                   	push   esi
c00199d6:	e8 bd 6f fe ff       	call   c0000998 <strcat>
c00199db:	5f                   	pop    edi
c00199dc:	5d                   	pop    ebp
c00199dd:	56                   	push   esi
c00199de:	53                   	push   ebx
c00199df:	e8 24 ab ff ff       	call   c0014508 <Device::setName(char const*)>
c00199e4:	58                   	pop    eax
c00199e5:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c00199eb:	5a                   	pop    edx
c00199ec:	68 81 c2 02 c0       	push   0xc002c281
c00199f1:	50                   	push   eax
c00199f2:	e8 ed 6e fe ff       	call   c00008e4 <strcmp>
c00199f7:	83 c4 10             	add    esp,0x10
c00199fa:	85 c0                	test   eax,eax
c00199fc:	0f 85 71 03 00 00    	jne    c0019d73 <CPU::detectFeatures()+0x9e1>
c0019a02:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c0019a09:	e9 65 03 00 00       	jmp    c0019d73 <CPU::detectFeatures()+0x9e1>
c0019a0e:	83 f8 02             	cmp    eax,0x2
c0019a11:	0f 85 b5 00 00 00    	jne    c0019acc <CPU::detectFeatures()+0x73a>
c0019a17:	57                   	push   edi
c0019a18:	57                   	push   edi
c0019a19:	68 93 c2 02 c0       	push   0xc002c293
c0019a1e:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0019a22:	56                   	push   esi
c0019a23:	e8 30 6e fe ff       	call   c0000858 <strcpy>
c0019a28:	5d                   	pop    ebp
c0019a29:	58                   	pop    eax
c0019a2a:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019a30:	66 c1 e8 06          	shr    ax,0x6
c0019a34:	0f b6 c0             	movzx  eax,al
c0019a37:	50                   	push   eax
c0019a38:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019a3e:	c1 e8 0e             	shr    eax,0xe
c0019a41:	0f b6 c0             	movzx  eax,al
c0019a44:	50                   	push   eax
c0019a45:	e8 18 f0 ff ff       	call   c0018a62 <CPU::lookupAMDName(unsigned char, unsigned char)>
c0019a4a:	5a                   	pop    edx
c0019a4b:	59                   	pop    ecx
c0019a4c:	50                   	push   eax
c0019a4d:	56                   	push   esi
c0019a4e:	e8 45 6f fe ff       	call   c0000998 <strcat>
c0019a53:	5f                   	pop    edi
c0019a54:	5d                   	pop    ebp
c0019a55:	56                   	push   esi
c0019a56:	53                   	push   ebx
c0019a57:	e8 ac aa ff ff       	call   c0014508 <Device::setName(char const*)>
c0019a5c:	58                   	pop    eax
c0019a5d:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0019a63:	5a                   	pop    edx
c0019a64:	68 98 c2 02 c0       	push   0xc002c298
c0019a69:	50                   	push   eax
c0019a6a:	e8 75 6e fe ff       	call   c00008e4 <strcmp>
c0019a6f:	83 c4 10             	add    esp,0x10
c0019a72:	85 c0                	test   eax,eax
c0019a74:	75 20                	jne    c0019a96 <CPU::detectFeatures()+0x704>
c0019a76:	8b 15 68 ee 02 c0    	mov    edx,DWORD PTR ds:0xc002ee68
c0019a7c:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c0019a82:	a8 01                	test   al,0x1
c0019a84:	74 10                	je     c0019a96 <CPU::detectFeatures()+0x704>
c0019a86:	83 e0 fe             	and    eax,0xfffffffe
c0019a89:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0019a8f:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c0019a96:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019a9c:	c1 e8 0e             	shr    eax,0xe
c0019a9f:	3c 05                	cmp    al,0x5
c0019aa1:	0f 85 cc 02 00 00    	jne    c0019d73 <CPU::detectFeatures()+0x9e1>
c0019aa7:	56                   	push   esi
c0019aa8:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0019aae:	83 e0 0f             	and    eax,0xf
c0019ab1:	50                   	push   eax
c0019ab2:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019ab8:	66 c1 e8 06          	shr    ax,0x6
c0019abc:	0f b6 c0             	movzx  eax,al
c0019abf:	50                   	push   eax
c0019ac0:	6a 05                	push   0x5
c0019ac2:	e8 11 f4 ff ff       	call   c0018ed8 <CPU::AMD_K6_writeback(int, int, int)>
c0019ac7:	e9 1f 02 00 00       	jmp    c0019ceb <CPU::detectFeatures()+0x959>
c0019acc:	8d 50 fd             	lea    edx,[eax-0x3]
c0019acf:	83 fa 01             	cmp    edx,0x1
c0019ad2:	76 09                	jbe    c0019add <CPU::detectFeatures()+0x74b>
c0019ad4:	83 f8 06             	cmp    eax,0x6
c0019ad7:	0f 85 91 01 00 00    	jne    c0019c6e <CPU::detectFeatures()+0x8dc>
c0019add:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0019ae3:	c1 ea 0e             	shr    edx,0xe
c0019ae6:	80 fa 05             	cmp    dl,0x5
c0019ae9:	75 7b                	jne    c0019b66 <CPU::detectFeatures()+0x7d4>
c0019aeb:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0019af1:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0019af6:	66 81 fa 00 01       	cmp    dx,0x100
c0019afb:	75 0c                	jne    c0019b09 <CPU::detectFeatures()+0x777>
c0019afd:	51                   	push   ecx
c0019afe:	51                   	push   ecx
c0019aff:	68 9f c2 02 c0       	push   0xc002c29f
c0019b04:	e9 dc 01 00 00       	jmp    c0019ce5 <CPU::detectFeatures()+0x953>
c0019b09:	66 81 fa 00 02       	cmp    dx,0x200
c0019b0e:	75 0c                	jne    c0019b1c <CPU::detectFeatures()+0x78a>
c0019b10:	52                   	push   edx
c0019b11:	52                   	push   edx
c0019b12:	68 b2 c2 02 c0       	push   0xc002c2b2
c0019b17:	e9 c9 01 00 00       	jmp    c0019ce5 <CPU::detectFeatures()+0x953>
c0019b1c:	66 81 fa 40 02       	cmp    dx,0x240
c0019b21:	75 0c                	jne    c0019b2f <CPU::detectFeatures()+0x79d>
c0019b23:	50                   	push   eax
c0019b24:	50                   	push   eax
c0019b25:	68 c4 c2 02 c0       	push   0xc002c2c4
c0019b2a:	e9 b6 01 00 00       	jmp    c0019ce5 <CPU::detectFeatures()+0x953>
c0019b2f:	83 f8 06             	cmp    eax,0x6
c0019b32:	75 0c                	jne    c0019b40 <CPU::detectFeatures()+0x7ae>
c0019b34:	50                   	push   eax
c0019b35:	50                   	push   eax
c0019b36:	68 d6 c2 02 c0       	push   0xc002c2d6
c0019b3b:	e9 a5 01 00 00       	jmp    c0019ce5 <CPU::detectFeatures()+0x953>
c0019b40:	83 f8 04             	cmp    eax,0x4
c0019b43:	75 0c                	jne    c0019b51 <CPU::detectFeatures()+0x7bf>
c0019b45:	50                   	push   eax
c0019b46:	50                   	push   eax
c0019b47:	68 e2 c2 02 c0       	push   0xc002c2e2
c0019b4c:	e9 94 01 00 00       	jmp    c0019ce5 <CPU::detectFeatures()+0x953>
c0019b51:	83 f8 03             	cmp    eax,0x3
c0019b54:	0f 85 19 02 00 00    	jne    c0019d73 <CPU::detectFeatures()+0x9e1>
c0019b5a:	50                   	push   eax
c0019b5b:	50                   	push   eax
c0019b5c:	68 ea c2 02 c0       	push   0xc002c2ea
c0019b61:	e9 7f 01 00 00       	jmp    c0019ce5 <CPU::detectFeatures()+0x953>
c0019b66:	80 fa 06             	cmp    dl,0x6
c0019b69:	0f 85 db 00 00 00    	jne    c0019c4a <CPU::detectFeatures()+0x8b8>
c0019b6f:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0019b75:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0019b7a:	66 81 fa 80 01       	cmp    dx,0x180
c0019b7f:	75 0c                	jne    c0019b8d <CPU::detectFeatures()+0x7fb>
c0019b81:	50                   	push   eax
c0019b82:	50                   	push   eax
c0019b83:	68 f5 c2 02 c0       	push   0xc002c2f5
c0019b88:	e9 58 01 00 00       	jmp    c0019ce5 <CPU::detectFeatures()+0x953>
c0019b8d:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c0019b93:	66 f7 c1 80 ff       	test   cx,0xff80
c0019b98:	75 0c                	jne    c0019ba6 <CPU::detectFeatures()+0x814>
c0019b9a:	50                   	push   eax
c0019b9b:	50                   	push   eax
c0019b9c:	68 05 c3 02 c0       	push   0xc002c305
c0019ba1:	e9 3f 01 00 00       	jmp    c0019ce5 <CPU::detectFeatures()+0x953>
c0019ba6:	66 81 fa 40 02       	cmp    dx,0x240
c0019bab:	75 0c                	jne    c0019bb9 <CPU::detectFeatures()+0x827>
c0019bad:	55                   	push   ebp
c0019bae:	55                   	push   ebp
c0019baf:	68 0c c3 02 c0       	push   0xc002c30c
c0019bb4:	e9 2c 01 00 00       	jmp    c0019ce5 <CPU::detectFeatures()+0x953>
c0019bb9:	66 81 fa 80 02       	cmp    dx,0x280
c0019bbe:	75 0c                	jne    c0019bcc <CPU::detectFeatures()+0x83a>
c0019bc0:	57                   	push   edi
c0019bc1:	57                   	push   edi
c0019bc2:	68 15 c3 02 c0       	push   0xc002c315
c0019bc7:	e9 19 01 00 00       	jmp    c0019ce5 <CPU::detectFeatures()+0x953>
c0019bcc:	66 81 fa 40 03       	cmp    dx,0x340
c0019bd1:	74 ed                	je     c0019bc0 <CPU::detectFeatures()+0x82e>
c0019bd3:	66 81 fa c0 03       	cmp    dx,0x3c0
c0019bd8:	75 0c                	jne    c0019be6 <CPU::detectFeatures()+0x854>
c0019bda:	56                   	push   esi
c0019bdb:	56                   	push   esi
c0019bdc:	68 1c c3 02 c0       	push   0xc002c31c
c0019be1:	e9 ff 00 00 00       	jmp    c0019ce5 <CPU::detectFeatures()+0x953>
c0019be6:	83 f8 06             	cmp    eax,0x6
c0019be9:	0f 84 45 ff ff ff    	je     c0019b34 <CPU::detectFeatures()+0x7a2>
c0019bef:	83 f8 04             	cmp    eax,0x4
c0019bf2:	0f 84 4d ff ff ff    	je     c0019b45 <CPU::detectFeatures()+0x7b3>
c0019bf8:	83 f8 03             	cmp    eax,0x3
c0019bfb:	0f 85 72 01 00 00    	jne    c0019d73 <CPU::detectFeatures()+0x9e1>
c0019c01:	51                   	push   ecx
c0019c02:	51                   	push   ecx
c0019c03:	68 25 c3 02 c0       	push   0xc002c325
c0019c08:	53                   	push   ebx
c0019c09:	e8 fa a8 ff ff       	call   c0014508 <Device::setName(char const*)>
c0019c0e:	b1 c1                	mov    cl,0xc1
c0019c10:	88 c8                	mov    al,cl
c0019c12:	e6 22                	out    0x22,al
c0019c14:	e4 23                	in     al,0x23
c0019c16:	88 c2                	mov    dl,al
c0019c18:	88 c8                	mov    al,cl
c0019c1a:	e6 22                	out    0x22,al
c0019c1c:	88 d0                	mov    al,dl
c0019c1e:	83 c8 10             	or     eax,0x10
c0019c21:	e6 23                	out    0x23,al
c0019c23:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0019c2a:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0019c2d:	89 d0                	mov    eax,edx
c0019c2f:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c0019c35:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c0019c39:	40                   	inc    eax
c0019c3a:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0019c40:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0019c45:	e9 a1 00 00 00       	jmp    c0019ceb <CPU::detectFeatures()+0x959>
c0019c4a:	83 f8 06             	cmp    eax,0x6
c0019c4d:	0f 84 e1 fe ff ff    	je     c0019b34 <CPU::detectFeatures()+0x7a2>
c0019c53:	83 f8 04             	cmp    eax,0x4
c0019c56:	0f 84 e9 fe ff ff    	je     c0019b45 <CPU::detectFeatures()+0x7b3>
c0019c5c:	83 f8 03             	cmp    eax,0x3
c0019c5f:	0f 85 0e 01 00 00    	jne    c0019d73 <CPU::detectFeatures()+0x9e1>
c0019c65:	52                   	push   edx
c0019c66:	52                   	push   edx
c0019c67:	68 30 c3 02 c0       	push   0xc002c330
c0019c6c:	eb 77                	jmp    c0019ce5 <CPU::detectFeatures()+0x953>
c0019c6e:	83 f8 07             	cmp    eax,0x7
c0019c71:	75 09                	jne    c0019c7c <CPU::detectFeatures()+0x8ea>
c0019c73:	50                   	push   eax
c0019c74:	50                   	push   eax
c0019c75:	68 3a c3 02 c0       	push   0xc002c33a
c0019c7a:	eb 69                	jmp    c0019ce5 <CPU::detectFeatures()+0x953>
c0019c7c:	83 f8 0a             	cmp    eax,0xa
c0019c7f:	75 09                	jne    c0019c8a <CPU::detectFeatures()+0x8f8>
c0019c81:	50                   	push   eax
c0019c82:	50                   	push   eax
c0019c83:	68 45 c3 02 c0       	push   0xc002c345
c0019c88:	eb 5b                	jmp    c0019ce5 <CPU::detectFeatures()+0x953>
c0019c8a:	83 f8 0b             	cmp    eax,0xb
c0019c8d:	75 09                	jne    c0019c98 <CPU::detectFeatures()+0x906>
c0019c8f:	50                   	push   eax
c0019c90:	50                   	push   eax
c0019c91:	68 4d c3 02 c0       	push   0xc002c34d
c0019c96:	eb 4d                	jmp    c0019ce5 <CPU::detectFeatures()+0x953>
c0019c98:	83 f8 08             	cmp    eax,0x8
c0019c9b:	75 09                	jne    c0019ca6 <CPU::detectFeatures()+0x914>
c0019c9d:	50                   	push   eax
c0019c9e:	50                   	push   eax
c0019c9f:	68 56 c3 02 c0       	push   0xc002c356
c0019ca4:	eb 3f                	jmp    c0019ce5 <CPU::detectFeatures()+0x953>
c0019ca6:	83 f8 09             	cmp    eax,0x9
c0019ca9:	75 09                	jne    c0019cb4 <CPU::detectFeatures()+0x922>
c0019cab:	50                   	push   eax
c0019cac:	50                   	push   eax
c0019cad:	68 5e c3 02 c0       	push   0xc002c35e
c0019cb2:	eb 31                	jmp    c0019ce5 <CPU::detectFeatures()+0x953>
c0019cb4:	83 f8 05             	cmp    eax,0x5
c0019cb7:	75 09                	jne    c0019cc2 <CPU::detectFeatures()+0x930>
c0019cb9:	50                   	push   eax
c0019cba:	50                   	push   eax
c0019cbb:	68 66 c3 02 c0       	push   0xc002c366
c0019cc0:	eb 23                	jmp    c0019ce5 <CPU::detectFeatures()+0x953>
c0019cc2:	83 f8 0c             	cmp    eax,0xc
c0019cc5:	75 09                	jne    c0019cd0 <CPU::detectFeatures()+0x93e>
c0019cc7:	55                   	push   ebp
c0019cc8:	55                   	push   ebp
c0019cc9:	68 74 c3 02 c0       	push   0xc002c374
c0019cce:	eb 15                	jmp    c0019ce5 <CPU::detectFeatures()+0x953>
c0019cd0:	83 f8 0d             	cmp    eax,0xd
c0019cd3:	75 09                	jne    c0019cde <CPU::detectFeatures()+0x94c>
c0019cd5:	57                   	push   edi
c0019cd6:	57                   	push   edi
c0019cd7:	68 7f c3 02 c0       	push   0xc002c37f
c0019cdc:	eb 07                	jmp    c0019ce5 <CPU::detectFeatures()+0x953>
c0019cde:	56                   	push   esi
c0019cdf:	56                   	push   esi
c0019ce0:	68 93 c3 02 c0       	push   0xc002c393
c0019ce5:	53                   	push   ebx
c0019ce6:	e8 1d a8 ff ff       	call   c0014508 <Device::setName(char const*)>
c0019ceb:	83 c4 10             	add    esp,0x10
c0019cee:	e9 80 00 00 00       	jmp    c0019d73 <CPU::detectFeatures()+0x9e1>
c0019cf3:	51                   	push   ecx
c0019cf4:	51                   	push   ecx
c0019cf5:	68 df c1 02 c0       	push   0xc002c1df
c0019cfa:	57                   	push   edi
c0019cfb:	e8 58 6b fe ff       	call   c0000858 <strcpy>
c0019d00:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0019d0a:	e8 9f 65 fe ff       	call   c00002ae <is486>
c0019d0f:	83 c4 10             	add    esp,0x10
c0019d12:	85 c0                	test   eax,eax
c0019d14:	74 2b                	je     c0019d41 <CPU::detectFeatures()+0x9af>
c0019d16:	52                   	push   edx
c0019d17:	52                   	push   edx
c0019d18:	68 9f c3 02 c0       	push   0xc002c39f
c0019d1d:	53                   	push   ebx
c0019d1e:	e8 e5 a7 ff ff       	call   c0014508 <Device::setName(char const*)>
c0019d23:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0019d2a:	0f 20 c0             	mov    eax,cr0
c0019d2d:	83 e0 14             	and    eax,0x14
c0019d30:	83 c4 10             	add    esp,0x10
c0019d33:	83 f8 04             	cmp    eax,0x4
c0019d36:	75 1f                	jne    c0019d57 <CPU::detectFeatures()+0x9c5>
c0019d38:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c0019d3f:	eb 32                	jmp    c0019d73 <CPU::detectFeatures()+0x9e1>
c0019d41:	50                   	push   eax
c0019d42:	50                   	push   eax
c0019d43:	68 aa c3 02 c0       	push   0xc002c3aa
c0019d48:	53                   	push   ebx
c0019d49:	e8 ba a7 ff ff       	call   c0014508 <Device::setName(char const*)>
c0019d4e:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c0019d55:	eb d3                	jmp    c0019d2a <CPU::detectFeatures()+0x998>
c0019d57:	e8 2d 65 fe ff       	call   c0000289 <hasLegacyFPU>
c0019d5c:	83 e0 01             	and    eax,0x1
c0019d5f:	8d 14 00             	lea    edx,[eax+eax*1]
c0019d62:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0019d68:	83 e0 fd             	and    eax,0xfffffffd
c0019d6b:	09 d0                	or     eax,edx
c0019d6d:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0019d73:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c0019d7a:	83 c4 4c             	add    esp,0x4c
c0019d7d:	5b                   	pop    ebx
c0019d7e:	5e                   	pop    esi
c0019d7f:	5f                   	pop    edi
c0019d80:	5d                   	pop    ebp
c0019d81:	c3                   	ret    

c0019d82 <CPU::setupSMEP()>:
c0019d82:	0f 20 e0             	mov    eax,cr4
c0019d85:	0d 00 00 10 00       	or     eax,0x100000
c0019d8a:	0f 22 e0             	mov    cr4,eax
c0019d8d:	c3                   	ret    

c0019d8e <CPU::setupUMIP()>:
c0019d8e:	0f 20 e0             	mov    eax,cr4
c0019d91:	80 cc 08             	or     ah,0x8
c0019d94:	0f 22 e0             	mov    cr4,eax
c0019d97:	c3                   	ret    

c0019d98 <CPU::setupTSC()>:
c0019d98:	0f 20 e0             	mov    eax,cr4
c0019d9b:	83 c8 04             	or     eax,0x4
c0019d9e:	0f 22 e0             	mov    cr4,eax
c0019da1:	c3                   	ret    

c0019da2 <CPU::setupLargePages()>:
c0019da2:	0f 20 e0             	mov    eax,cr4
c0019da5:	83 c8 10             	or     eax,0x10
c0019da8:	0f 22 e0             	mov    cr4,eax
c0019dab:	c3                   	ret    

c0019dac <CPU::setupPAT()>:
c0019dac:	a1 68 ee 02 c0       	mov    eax,ds:0xc002ee68
c0019db1:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0019db8:	74 2c                	je     c0019de6 <CPU::setupPAT()+0x3a>
c0019dba:	53                   	push   ebx
c0019dbb:	83 ec 10             	sub    esp,0x10
c0019dbe:	68 77 02 00 00       	push   0x277
c0019dc3:	50                   	push   eax
c0019dc4:	e8 07 51 ff ff       	call   c000eed0 <Computer::rdmsr(unsigned int)>
c0019dc9:	83 e2 f8             	and    edx,0xfffffff8
c0019dcc:	83 ca 01             	or     edx,0x1
c0019dcf:	52                   	push   edx
c0019dd0:	50                   	push   eax
c0019dd1:	68 77 02 00 00       	push   0x277
c0019dd6:	ff 35 68 ee 02 c0    	push   DWORD PTR ds:0xc002ee68
c0019ddc:	e8 1b 51 ff ff       	call   c000eefc <Computer::wrmsr(unsigned int, unsigned long long)>
c0019de1:	83 c4 28             	add    esp,0x28
c0019de4:	5b                   	pop    ebx
c0019de5:	c3                   	ret    
c0019de6:	c3                   	ret    
c0019de7:	90                   	nop

c0019de8 <CPU::setupMTRR()>:
c0019de8:	c3                   	ret    
c0019de9:	90                   	nop

c0019dea <CPU::setupGlobalPages()>:
c0019dea:	0f 20 e0             	mov    eax,cr4
c0019ded:	0c 80                	or     al,0x80
c0019def:	0f 22 e0             	mov    cr4,eax
c0019df2:	c3                   	ret    
c0019df3:	90                   	nop

c0019df4 <CPU::allowUsermodeDataAccess()>:
c0019df4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019df8:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0019dff:	74 03                	je     c0019e04 <CPU::allowUsermodeDataAccess()+0x10>
c0019e01:	0f 01 cb             	stac   
c0019e04:	c3                   	ret    
c0019e05:	90                   	nop

c0019e06 <CPU::prohibitUsermodeDataAccess()>:
c0019e06:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019e0a:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0019e11:	74 03                	je     c0019e16 <CPU::prohibitUsermodeDataAccess()+0x10>
c0019e13:	0f 01 ca             	clac   
c0019e16:	c3                   	ret    
c0019e17:	90                   	nop

c0019e18 <CPU::setupSMAP()>:
c0019e18:	0f 20 e0             	mov    eax,cr4
c0019e1b:	0d 00 00 20 00       	or     eax,0x200000
c0019e20:	0f 22 e0             	mov    cr4,eax
c0019e23:	eb e1                	jmp    c0019e06 <CPU::prohibitUsermodeDataAccess()>
c0019e25:	90                   	nop

c0019e26 <CPU::setupFeatures()>:
c0019e26:	83 ec 0c             	sub    esp,0xc
c0019e29:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019e2d:	f6 82 90 11 00 00 40 	test   BYTE PTR [edx+0x1190],0x40
c0019e34:	74 07                	je     c0019e3d <CPU::setupFeatures()+0x17>
c0019e36:	52                   	push   edx
c0019e37:	e8 46 ff ff ff       	call   c0019d82 <CPU::setupSMEP()>
c0019e3c:	58                   	pop    eax
c0019e3d:	f6 82 91 11 00 00 10 	test   BYTE PTR [edx+0x1191],0x10
c0019e44:	74 07                	je     c0019e4d <CPU::setupFeatures()+0x27>
c0019e46:	52                   	push   edx
c0019e47:	e8 cc ff ff ff       	call   c0019e18 <CPU::setupSMAP()>
c0019e4c:	58                   	pop    eax
c0019e4d:	f6 82 91 11 00 00 08 	test   BYTE PTR [edx+0x1191],0x8
c0019e54:	74 07                	je     c0019e5d <CPU::setupFeatures()+0x37>
c0019e56:	52                   	push   edx
c0019e57:	e8 32 ff ff ff       	call   c0019d8e <CPU::setupUMIP()>
c0019e5c:	58                   	pop    eax
c0019e5d:	f6 82 90 11 00 00 02 	test   BYTE PTR [edx+0x1190],0x2
c0019e64:	74 07                	je     c0019e6d <CPU::setupFeatures()+0x47>
c0019e66:	52                   	push   edx
c0019e67:	e8 2c ff ff ff       	call   c0019d98 <CPU::setupTSC()>
c0019e6c:	58                   	pop    eax
c0019e6d:	f6 82 90 11 00 00 08 	test   BYTE PTR [edx+0x1190],0x8
c0019e74:	74 07                	je     c0019e7d <CPU::setupFeatures()+0x57>
c0019e76:	52                   	push   edx
c0019e77:	e8 26 ff ff ff       	call   c0019da2 <CPU::setupLargePages()>
c0019e7c:	59                   	pop    ecx
c0019e7d:	f6 82 90 11 00 00 10 	test   BYTE PTR [edx+0x1190],0x10
c0019e84:	74 07                	je     c0019e8d <CPU::setupFeatures()+0x67>
c0019e86:	52                   	push   edx
c0019e87:	e8 5e ff ff ff       	call   c0019dea <CPU::setupGlobalPages()>
c0019e8c:	58                   	pop    eax
c0019e8d:	f6 82 90 11 00 00 20 	test   BYTE PTR [edx+0x1190],0x20
c0019e94:	74 0c                	je     c0019ea2 <CPU::setupFeatures()+0x7c>
c0019e96:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0019e9a:	83 c4 0c             	add    esp,0xc
c0019e9d:	e9 0a ff ff ff       	jmp    c0019dac <CPU::setupPAT()>
c0019ea2:	83 c4 0c             	add    esp,0xc
c0019ea5:	c3                   	ret    

c0019ea6 <CPU::open(int, int, void*)>:
c0019ea6:	57                   	push   edi
c0019ea7:	56                   	push   esi
c0019ea8:	53                   	push   ebx
c0019ea9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019ead:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019eb1:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0019eb7:	83 ec 0c             	sub    esp,0xc
c0019eba:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c0019ec0:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c0019ec6:	50                   	push   eax
c0019ec7:	e8 f0 52 ff ff       	call   c000f1bc <GDT::setup()>
c0019ecc:	83 c4 0c             	add    esp,0xc
c0019ecf:	6a 00                	push   0x0
c0019ed1:	68 ef be ad de       	push   0xdeadbeef
c0019ed6:	57                   	push   edi
c0019ed7:	e8 7a 75 ff ff       	call   c0011456 <TSS::setup(unsigned long, unsigned long)>
c0019edc:	89 3c 24             	mov    DWORD PTR [esp],edi
c0019edf:	e8 52 75 ff ff       	call   c0011436 <TSS::flush()>
c0019ee4:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0019eea:	89 04 24             	mov    DWORD PTR [esp],eax
c0019eed:	e8 2e 55 ff ff       	call   c000f420 <IDT::setup()>
c0019ef2:	b8 00 04 00 00       	mov    eax,0x400
c0019ef7:	0f 23 f8             	mov    db7,eax
c0019efa:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0019f04:	e8 95 60 ff ff       	call   c000ff9e <Phys::allocatePage()>
c0019f09:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0019f0f:	89 30                	mov    DWORD PTR [eax],esi
c0019f11:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0019f17:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0019f1a:	58                   	pop    eax
c0019f1b:	5a                   	pop    edx
c0019f1c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019f22:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019f26:	e8 cf 86 ff ff       	call   c00125fa <VAS::setCPUSpecific(unsigned long)>
c0019f2b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019f2e:	e8 5f f4 ff ff       	call   c0019392 <CPU::detectFeatures()>
c0019f33:	e8 27 ba ff ff       	call   c001595f <setupInterruptController()>
c0019f38:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0019f3e:	a1 80 ee 02 c0       	mov    eax,ds:0xc002ee80
c0019f43:	83 e0 10             	and    eax,0x10
c0019f46:	83 f8 01             	cmp    eax,0x1
c0019f49:	19 c0                	sbb    eax,eax
c0019f4b:	83 e0 46             	and    eax,0x46
c0019f4e:	83 c0 1e             	add    eax,0x1e
c0019f51:	89 04 24             	mov    DWORD PTR [esp],eax
c0019f54:	e8 5e d0 ff ff       	call   c0016fb7 <setupTimer(int)>
c0019f59:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c0019f5f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019f62:	e8 bf fe ff ff       	call   c0019e26 <CPU::setupFeatures()>
c0019f67:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019f6a:	e8 a7 f1 ff ff       	call   c0019116 <CPU::displayFeatures()>
c0019f6f:	83 c4 10             	add    esp,0x10
c0019f72:	31 c0                	xor    eax,eax
c0019f74:	5b                   	pop    ebx
c0019f75:	5e                   	pop    esi
c0019f76:	5f                   	pop    edi
c0019f77:	c3                   	ret    

c0019f78 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c0019f78:	57                   	push   edi
c0019f79:	56                   	push   esi
c0019f7a:	53                   	push   ebx
c0019f7b:	51                   	push   ecx
c0019f7c:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019f80:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c0019f83:	0f 02 c0             	lar    eax,ax
c0019f86:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c0019f89:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0019f8d:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c0019f90:	88 ca                	mov    dl,cl
c0019f92:	c0 ea 06             	shr    dl,0x6
c0019f95:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c0019f99:	89 ca                	mov    edx,ecx
c0019f9b:	66 c1 ea 03          	shr    dx,0x3
c0019f9f:	83 e2 07             	and    edx,0x7
c0019fa2:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c0019fa7:	88 17                	mov    BYTE PTR [edi],dl
c0019fa9:	0f 84 a6 01 00 00    	je     c001a155 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c0019faf:	83 e1 07             	and    ecx,0x7
c0019fb2:	80 f9 04             	cmp    cl,0x4
c0019fb5:	0f 84 98 00 00 00    	je     c001a053 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c0019fbb:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019fc0:	0f 95 c0             	setne  al
c0019fc3:	80 f9 05             	cmp    cl,0x5
c0019fc6:	0f 95 c2             	setne  dl
c0019fc9:	08 c2                	or     dl,al
c0019fcb:	74 79                	je     c001a046 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c0019fcd:	84 c9                	test   cl,cl
c0019fcf:	75 05                	jne    c0019fd6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c0019fd1:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0019fd4:	eb 3c                	jmp    c001a012 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019fd6:	80 f9 01             	cmp    cl,0x1
c0019fd9:	75 05                	jne    c0019fe0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c0019fdb:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019fde:	eb 32                	jmp    c001a012 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019fe0:	80 f9 02             	cmp    cl,0x2
c0019fe3:	75 05                	jne    c0019fea <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c0019fe5:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0019fe8:	eb 28                	jmp    c001a012 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019fea:	31 c0                	xor    eax,eax
c0019fec:	80 f9 03             	cmp    cl,0x3
c0019fef:	75 05                	jne    c0019ff6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c0019ff1:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019ff4:	eb 1c                	jmp    c001a012 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019ff6:	80 f9 05             	cmp    cl,0x5
c0019ff9:	75 05                	jne    c001a000 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c0019ffb:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0019ffe:	eb 12                	jmp    c001a012 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001a000:	80 f9 06             	cmp    cl,0x6
c001a003:	75 05                	jne    c001a00a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c001a005:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001a008:	eb 08                	jmp    c001a012 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001a00a:	80 f9 07             	cmp    cl,0x7
c001a00d:	75 03                	jne    c001a012 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001a00f:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001a012:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c001a017:	75 10                	jne    c001a029 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c001a019:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c001a01d:	b9 03 00 00 00       	mov    ecx,0x3
c001a022:	01 d0                	add    eax,edx
c001a024:	e9 37 01 00 00       	jmp    c001a160 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c001a029:	b9 02 00 00 00       	mov    ecx,0x2
c001a02e:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c001a033:	0f 85 27 01 00 00    	jne    c001a160 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c001a039:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c001a03c:	b9 06 00 00 00       	mov    ecx,0x6
c001a041:	e9 1a 01 00 00       	jmp    c001a160 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c001a046:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c001a049:	b9 06 00 00 00       	mov    ecx,0x6
c001a04e:	e9 0f 01 00 00       	jmp    c001a162 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c001a053:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c001a056:	88 ca                	mov    dl,cl
c001a058:	c0 ea 06             	shr    dl,0x6
c001a05b:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c001a05f:	89 ca                	mov    edx,ecx
c001a061:	66 c1 ea 03          	shr    dx,0x3
c001a065:	83 e2 07             	and    edx,0x7
c001a068:	80 e1 07             	and    cl,0x7
c001a06b:	75 05                	jne    c001a072 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c001a06d:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c001a070:	eb 4c                	jmp    c001a0be <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001a072:	80 f9 01             	cmp    cl,0x1
c001a075:	75 05                	jne    c001a07c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c001a077:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c001a07a:	eb 42                	jmp    c001a0be <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001a07c:	80 f9 02             	cmp    cl,0x2
c001a07f:	75 05                	jne    c001a086 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c001a081:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001a084:	eb 38                	jmp    c001a0be <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001a086:	80 f9 03             	cmp    cl,0x3
c001a089:	75 05                	jne    c001a090 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c001a08b:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c001a08e:	eb 2e                	jmp    c001a0be <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001a090:	80 f9 04             	cmp    cl,0x4
c001a093:	75 12                	jne    c001a0a7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c001a095:	f6 c4 60             	test   ah,0x60
c001a098:	75 08                	jne    c001a0a2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c001a09a:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c001a09d:	8d 78 14             	lea    edi,[eax+0x14]
c001a0a0:	eb 1c                	jmp    c001a0be <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001a0a2:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c001a0a5:	eb 17                	jmp    c001a0be <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001a0a7:	80 f9 05             	cmp    cl,0x5
c001a0aa:	75 05                	jne    c001a0b1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c001a0ac:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c001a0af:	eb 0d                	jmp    c001a0be <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001a0b1:	80 f9 06             	cmp    cl,0x6
c001a0b4:	75 05                	jne    c001a0bb <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c001a0b6:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c001a0b9:	eb 03                	jmp    c001a0be <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001a0bb:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c001a0be:	84 d2                	test   dl,dl
c001a0c0:	75 05                	jne    c001a0c7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c001a0c2:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c001a0c5:	eb 3c                	jmp    c001a103 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001a0c7:	80 fa 01             	cmp    dl,0x1
c001a0ca:	75 05                	jne    c001a0d1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c001a0cc:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001a0cf:	eb 32                	jmp    c001a103 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001a0d1:	80 fa 02             	cmp    dl,0x2
c001a0d4:	75 05                	jne    c001a0db <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c001a0d6:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001a0d9:	eb 28                	jmp    c001a103 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001a0db:	80 fa 03             	cmp    dl,0x3
c001a0de:	75 05                	jne    c001a0e5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c001a0e0:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001a0e3:	eb 1e                	jmp    c001a103 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001a0e5:	31 c0                	xor    eax,eax
c001a0e7:	80 fa 04             	cmp    dl,0x4
c001a0ea:	74 17                	je     c001a103 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001a0ec:	80 fa 05             	cmp    dl,0x5
c001a0ef:	75 05                	jne    c001a0f6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c001a0f1:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c001a0f4:	eb 0d                	jmp    c001a103 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001a0f6:	80 fa 06             	cmp    dl,0x6
c001a0f9:	75 05                	jne    c001a100 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c001a0fb:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001a0fe:	eb 03                	jmp    c001a103 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001a100:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001a103:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c001a108:	0f 94 c2             	sete   dl
c001a10b:	80 f9 05             	cmp    cl,0x5
c001a10e:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c001a112:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c001a117:	d3 e0                	shl    eax,cl
c001a119:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c001a11d:	74 0a                	je     c001a129 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c001a11f:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c001a122:	b9 07 00 00 00       	mov    ecx,0x7
c001a127:	eb 37                	jmp    c001a160 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c001a129:	01 f8                	add    eax,edi
c001a12b:	b9 03 00 00 00       	mov    ecx,0x3
c001a130:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c001a135:	74 2b                	je     c001a162 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c001a137:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c001a13c:	75 0d                	jne    c001a14b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c001a13e:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c001a142:	01 c8                	add    eax,ecx
c001a144:	b9 04 00 00 00       	mov    ecx,0x4
c001a149:	eb 17                	jmp    c001a162 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c001a14b:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c001a14e:	b9 07 00 00 00       	mov    ecx,0x7
c001a153:	eb 0d                	jmp    c001a162 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c001a155:	b9 02 00 00 00       	mov    ecx,0x2
c001a15a:	b2 01                	mov    dl,0x1
c001a15c:	31 c0                	xor    eax,eax
c001a15e:	eb 02                	jmp    c001a162 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c001a160:	31 d2                	xor    edx,edx
c001a162:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a166:	89 0b                	mov    DWORD PTR [ebx],ecx
c001a168:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001a16c:	88 11                	mov    BYTE PTR [ecx],dl
c001a16e:	5a                   	pop    edx
c001a16f:	5b                   	pop    ebx
c001a170:	5e                   	pop    esi
c001a171:	5f                   	pop    edi
c001a172:	c3                   	ret    

c001a173 <Krnl::smpEntry()>:
c001a173:	eb fe                	jmp    c001a173 <Krnl::smpEntry()>

c001a175 <Krnl::startCPU(int)>:
c001a175:	a1 68 ee 02 c0       	mov    eax,ds:0xc002ee68
c001a17a:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c001a181:	0f 84 36 01 00 00    	je     c001a2bd <Krnl::startCPU(int)+0x148>
c001a187:	53                   	push   ebx
c001a188:	83 ec 10             	sub    esp,0x10
c001a18b:	fa                   	cli    
c001a18c:	ff 05 a8 23 03 c0    	inc    DWORD PTR ds:0xc00323a8
c001a192:	6a 1b                	push   0x1b
c001a194:	ff 35 68 ee 02 c0    	push   DWORD PTR ds:0xc002ee68
c001a19a:	e8 31 4d ff ff       	call   c000eed0 <Computer::rdmsr(unsigned int)>
c001a19f:	25 00 f0 ff ff       	and    eax,0xfffff000
c001a1a4:	89 c3                	mov    ebx,eax
c001a1a6:	58                   	pop    eax
c001a1a7:	5a                   	pop    edx
c001a1a8:	53                   	push   ebx
c001a1a9:	68 e4 c3 02 c0       	push   0xc002c3e4
c001a1ae:	e8 3e 8d ff ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c001a1b3:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c001a1bd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a1c1:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c001a1cb:	c1 e0 18             	shl    eax,0x18
c001a1ce:	8b 93 10 03 00 00    	mov    edx,DWORD PTR [ebx+0x310]
c001a1d4:	83 c4 10             	add    esp,0x10
c001a1d7:	81 e2 ff ff ff 00    	and    edx,0xffffff
c001a1dd:	09 c2                	or     edx,eax
c001a1df:	89 93 10 03 00 00    	mov    DWORD PTR [ebx+0x310],edx
c001a1e5:	8d 93 00 03 00 00    	lea    edx,[ebx+0x300]
c001a1eb:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c001a1f1:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c001a1f7:	80 cd c5             	or     ch,0xc5
c001a1fa:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c001a200:	f3 90                	pause  
c001a202:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001a204:	0f ba e1 0c          	bt     ecx,0xc
c001a208:	72 f6                	jb     c001a200 <Krnl::startCPU(int)+0x8b>
c001a20a:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c001a210:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c001a216:	09 c1                	or     ecx,eax
c001a218:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c001a21e:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c001a224:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c001a22a:	80 cd 85             	or     ch,0x85
c001a22d:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c001a233:	f3 90                	pause  
c001a235:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001a237:	0f ba e1 0c          	bt     ecx,0xc
c001a23b:	72 f6                	jb     c001a233 <Krnl::startCPU(int)+0xbe>
c001a23d:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c001a247:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c001a24d:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c001a253:	09 c1                	or     ecx,eax
c001a255:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c001a25b:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c001a261:	81 e1 00 f8 f0 ff    	and    ecx,0xfff0f800
c001a267:	81 c9 02 06 00 00    	or     ecx,0x602
c001a26d:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c001a273:	f3 90                	pause  
c001a275:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001a277:	0f ba e1 0c          	bt     ecx,0xc
c001a27b:	72 f6                	jb     c001a273 <Krnl::startCPU(int)+0xfe>
c001a27d:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c001a287:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c001a28d:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c001a293:	09 c8                	or     eax,ecx
c001a295:	89 83 10 03 00 00    	mov    DWORD PTR [ebx+0x310],eax
c001a29b:	8b 83 00 03 00 00    	mov    eax,DWORD PTR [ebx+0x300]
c001a2a1:	25 00 f8 f0 ff       	and    eax,0xfff0f800
c001a2a6:	0d 02 06 00 00       	or     eax,0x602
c001a2ab:	89 83 00 03 00 00    	mov    DWORD PTR [ebx+0x300],eax
c001a2b1:	f3 90                	pause  
c001a2b3:	8b 02                	mov    eax,DWORD PTR [edx]
c001a2b5:	0f ba e0 0c          	bt     eax,0xc
c001a2b9:	72 f6                	jb     c001a2b1 <Krnl::startCPU(int)+0x13c>
c001a2bb:	eb fe                	jmp    c001a2bb <Krnl::startCPU(int)+0x146>
c001a2bd:	c3                   	ret    

c001a2be <Krnl::startCPUs()>:
c001a2be:	a1 68 ee 02 c0       	mov    eax,ds:0xc002ee68
c001a2c3:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001a2c9:	88 c2                	mov    dl,al
c001a2cb:	83 e2 0a             	and    edx,0xa
c001a2ce:	80 fa 0a             	cmp    dl,0xa
c001a2d1:	75 09                	jne    c001a2dc <Krnl::startCPUs()+0x1e>
c001a2d3:	a8 01                	test   al,0x1
c001a2d5:	74 05                	je     c001a2dc <Krnl::startCPUs()+0x1e>
c001a2d7:	e9 bf 5e fe ff       	jmp    c000019b <prepareTramp>
c001a2dc:	c3                   	ret    
c001a2dd:	90                   	nop

c001a2de <EnvVarContainer::getEnv(char const*)>:
c001a2de:	57                   	push   edi
c001a2df:	56                   	push   esi
c001a2e0:	53                   	push   ebx
c001a2e1:	31 db                	xor    ebx,ebx
c001a2e3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a2e7:	39 1e                	cmp    DWORD PTR [esi],ebx
c001a2e9:	7e 2b                	jle    c001a316 <EnvVarContainer::getEnv(char const*)+0x38>
c001a2eb:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c001a2f2:	50                   	push   eax
c001a2f3:	50                   	push   eax
c001a2f4:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001a2f7:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c001a2fa:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001a2fe:	e8 e1 65 fe ff       	call   c00008e4 <strcmp>
c001a303:	83 c4 10             	add    esp,0x10
c001a306:	85 c0                	test   eax,eax
c001a308:	75 09                	jne    c001a313 <EnvVarContainer::getEnv(char const*)+0x35>
c001a30a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001a30d:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c001a311:	eb 05                	jmp    c001a318 <EnvVarContainer::getEnv(char const*)+0x3a>
c001a313:	43                   	inc    ebx
c001a314:	eb d1                	jmp    c001a2e7 <EnvVarContainer::getEnv(char const*)+0x9>
c001a316:	31 c0                	xor    eax,eax
c001a318:	5b                   	pop    ebx
c001a319:	5e                   	pop    esi
c001a31a:	5f                   	pop    edi
c001a31b:	c3                   	ret    

c001a31c <EnvVarContainer::setEnv(char const*, char const*)>:
c001a31c:	57                   	push   edi
c001a31d:	56                   	push   esi
c001a31e:	53                   	push   ebx
c001a31f:	83 ec 1c             	sub    esp,0x1c
c001a322:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001a326:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001a32a:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001a32e:	57                   	push   edi
c001a32f:	e8 84 64 fe ff       	call   c00007b8 <strlen>
c001a334:	40                   	inc    eax
c001a335:	89 04 24             	mov    DWORD PTR [esp],eax
c001a338:	e8 f5 55 ff ff       	call   c000f932 <malloc>
c001a33d:	89 34 24             	mov    DWORD PTR [esp],esi
c001a340:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a344:	e8 6f 64 fe ff       	call   c00007b8 <strlen>
c001a349:	40                   	inc    eax
c001a34a:	89 04 24             	mov    DWORD PTR [esp],eax
c001a34d:	e8 e0 55 ff ff       	call   c000f932 <malloc>
c001a352:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a355:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a359:	e8 5a 64 fe ff       	call   c00007b8 <strlen>
c001a35e:	83 c4 0c             	add    esp,0xc
c001a361:	40                   	inc    eax
c001a362:	50                   	push   eax
c001a363:	6a 00                	push   0x0
c001a365:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001a369:	e8 2e 64 fe ff       	call   c000079c <memset>
c001a36e:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a371:	e8 42 64 fe ff       	call   c00007b8 <strlen>
c001a376:	83 c4 0c             	add    esp,0xc
c001a379:	40                   	inc    eax
c001a37a:	50                   	push   eax
c001a37b:	57                   	push   edi
c001a37c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001a380:	e8 e3 63 fe ff       	call   c0000768 <memcpy>
c001a385:	89 34 24             	mov    DWORD PTR [esp],esi
c001a388:	e8 2b 64 fe ff       	call   c00007b8 <strlen>
c001a38d:	83 c4 0c             	add    esp,0xc
c001a390:	40                   	inc    eax
c001a391:	50                   	push   eax
c001a392:	6a 00                	push   0x0
c001a394:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a398:	e8 ff 63 fe ff       	call   c000079c <memset>
c001a39d:	89 34 24             	mov    DWORD PTR [esp],esi
c001a3a0:	e8 13 64 fe ff       	call   c00007b8 <strlen>
c001a3a5:	83 c4 0c             	add    esp,0xc
c001a3a8:	40                   	inc    eax
c001a3a9:	50                   	push   eax
c001a3aa:	56                   	push   esi
c001a3ab:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a3af:	e8 b4 63 fe ff       	call   c0000768 <memcpy>
c001a3b4:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a3b6:	40                   	inc    eax
c001a3b7:	89 03                	mov    DWORD PTR [ebx],eax
c001a3b9:	c1 e0 03             	shl    eax,0x3
c001a3bc:	5a                   	pop    edx
c001a3bd:	59                   	pop    ecx
c001a3be:	50                   	push   eax
c001a3bf:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001a3c2:	e8 57 55 ff ff       	call   c000f91e <realloc>
c001a3c7:	83 c4 0c             	add    esp,0xc
c001a3ca:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001a3cd:	6a 08                	push   0x8
c001a3cf:	8d 54 24 10          	lea    edx,[esp+0x10]
c001a3d3:	52                   	push   edx
c001a3d4:	8b 13                	mov    edx,DWORD PTR [ebx]
c001a3d6:	8d 44 d0 f8          	lea    eax,[eax+edx*8-0x8]
c001a3da:	50                   	push   eax
c001a3db:	e8 88 63 fe ff       	call   c0000768 <memcpy>
c001a3e0:	83 c4 20             	add    esp,0x20
c001a3e3:	5b                   	pop    ebx
c001a3e4:	5e                   	pop    esi
c001a3e5:	5f                   	pop    edi
c001a3e6:	c3                   	ret    
c001a3e7:	90                   	nop

c001a3e8 <EnvVarContainer::deleteEnv(char const*)>:
c001a3e8:	c3                   	ret    
c001a3e9:	90                   	nop

c001a3ea <EnvVarContainer::loadFrom(char const*, char const*)>:
c001a3ea:	55                   	push   ebp
c001a3eb:	57                   	push   edi
c001a3ec:	56                   	push   esi
c001a3ed:	53                   	push   ebx
c001a3ee:	81 ec 38 01 00 00    	sub    esp,0x138
c001a3f4:	8b b4 24 4c 01 00 00 	mov    esi,DWORD PTR [esp+0x14c]
c001a3fb:	8b ac 24 54 01 00 00 	mov    ebp,DWORD PTR [esp+0x154]
c001a402:	68 14 01 00 00       	push   0x114
c001a407:	e8 26 55 ff ff       	call   c000f932 <malloc>
c001a40c:	83 c4 0c             	add    esp,0xc
c001a40f:	89 c7                	mov    edi,eax
c001a411:	ff 76 08             	push   DWORD PTR [esi+0x8]
c001a414:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001a41b:	50                   	push   eax
c001a41c:	e8 2f 90 ff ff       	call   c0013450 <File::File(char const*, Process*)>
c001a421:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a424:	e8 f9 92 ff ff       	call   c0013722 <File::exists()>
c001a429:	83 c4 10             	add    esp,0x10
c001a42c:	84 c0                	test   al,al
c001a42e:	75 31                	jne    c001a461 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c001a430:	51                   	push   ecx
c001a431:	51                   	push   ecx
c001a432:	6a 12                	push   0x12
c001a434:	57                   	push   edi
c001a435:	e8 7a 90 ff ff       	call   c00134b4 <File::open(FileOpenMode)>
c001a43a:	8b 07                	mov    eax,DWORD PTR [edi]
c001a43c:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001a43f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001a442:	e8 71 63 fe ff       	call   c00007b8 <strlen>
c001a447:	5a                   	pop    edx
c001a448:	31 d2                	xor    edx,edx
c001a44a:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001a44e:	51                   	push   ecx
c001a44f:	55                   	push   ebp
c001a450:	52                   	push   edx
c001a451:	50                   	push   eax
c001a452:	57                   	push   edi
c001a453:	ff d3                	call   ebx
c001a455:	83 c4 14             	add    esp,0x14
c001a458:	57                   	push   edi
c001a459:	e8 b4 90 ff ff       	call   c0013512 <File::close()>
c001a45e:	83 c4 10             	add    esp,0x10
c001a461:	31 db                	xor    ebx,ebx
c001a463:	50                   	push   eax
c001a464:	31 ed                	xor    ebp,ebp
c001a466:	68 00 01 00 00       	push   0x100
c001a46b:	6a 00                	push   0x0
c001a46d:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001a471:	50                   	push   eax
c001a472:	e8 25 63 fe ff       	call   c000079c <memset>
c001a477:	58                   	pop    eax
c001a478:	5a                   	pop    edx
c001a479:	6a 01                	push   0x1
c001a47b:	57                   	push   edi
c001a47c:	e8 33 90 ff ff       	call   c00134b4 <File::open(FileOpenMode)>
c001a481:	83 c4 10             	add    esp,0x10
c001a484:	83 ec 0c             	sub    esp,0xc
c001a487:	8b 07                	mov    eax,DWORD PTR [edi]
c001a489:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001a48d:	51                   	push   ecx
c001a48e:	8d 54 24 23          	lea    edx,[esp+0x23]
c001a492:	52                   	push   edx
c001a493:	6a 00                	push   0x0
c001a495:	6a 01                	push   0x1
c001a497:	57                   	push   edi
c001a498:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001a49b:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c001a49f:	83 c4 20             	add    esp,0x20
c001a4a2:	3c 0d                	cmp    al,0xd
c001a4a4:	0f 84 12 01 00 00    	je     c001a5bc <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c001a4aa:	85 db                	test   ebx,ebx
c001a4ac:	0f 84 fd 00 00 00    	je     c001a5af <EnvVarContainer::loadFrom(char const*, char const*)+0x1c5>
c001a4b2:	3c 0a                	cmp    al,0xa
c001a4b4:	74 13                	je     c001a4c9 <EnvVarContainer::loadFrom(char const*, char const*)+0xdf>
c001a4b6:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a4bb:	74 0c                	je     c001a4c9 <EnvVarContainer::loadFrom(char const*, char const*)+0xdf>
c001a4bd:	81 fd fe 00 00 00    	cmp    ebp,0xfe
c001a4c3:	0f 8e e6 00 00 00    	jle    c001a5af <EnvVarContainer::loadFrom(char const*, char const*)+0x1c5>
c001a4c9:	83 ec 0c             	sub    esp,0xc
c001a4cc:	8d 53 01             	lea    edx,[ebx+0x1]
c001a4cf:	29 dd                	sub    ebp,ebx
c001a4d1:	52                   	push   edx
c001a4d2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001a4d6:	e8 57 54 ff ff       	call   c000f932 <malloc>
c001a4db:	8d 4d 04             	lea    ecx,[ebp+0x4]
c001a4de:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a4e2:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001a4e5:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c001a4e9:	e8 44 54 ff ff       	call   c000f932 <malloc>
c001a4ee:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001a4f2:	83 c4 0c             	add    esp,0xc
c001a4f5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a4f9:	52                   	push   edx
c001a4fa:	6a 00                	push   0x0
c001a4fc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a500:	e8 97 62 fe ff       	call   c000079c <memset>
c001a505:	83 c4 0c             	add    esp,0xc
c001a508:	53                   	push   ebx
c001a509:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001a50d:	55                   	push   ebp
c001a50e:	01 eb                	add    ebx,ebp
c001a510:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a514:	e8 4f 62 fe ff       	call   c0000768 <memcpy>
c001a519:	83 c4 0c             	add    esp,0xc
c001a51c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001a520:	51                   	push   ecx
c001a521:	6a 00                	push   0x0
c001a523:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a527:	e8 70 62 fe ff       	call   c000079c <memset>
c001a52c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a52f:	e8 84 62 fe ff       	call   c00007b8 <strlen>
c001a534:	83 c4 0c             	add    esp,0xc
c001a537:	50                   	push   eax
c001a538:	53                   	push   ebx
c001a539:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a53d:	e8 26 62 fe ff       	call   c0000768 <memcpy>
c001a542:	5b                   	pop    ebx
c001a543:	58                   	pop    eax
c001a544:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a548:	68 f5 c3 02 c0       	push   0xc002c3f5
c001a54d:	e8 9f 89 ff ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c001a552:	8b 06                	mov    eax,DWORD PTR [esi]
c001a554:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c001a557:	40                   	inc    eax
c001a558:	83 c4 10             	add    esp,0x10
c001a55b:	89 06                	mov    DWORD PTR [esi],eax
c001a55d:	85 d2                	test   edx,edx
c001a55f:	75 0c                	jne    c001a56d <EnvVarContainer::loadFrom(char const*, char const*)+0x183>
c001a561:	83 ec 0c             	sub    esp,0xc
c001a564:	6a 08                	push   0x8
c001a566:	e8 c7 53 ff ff       	call   c000f932 <malloc>
c001a56b:	eb 0c                	jmp    c001a579 <EnvVarContainer::loadFrom(char const*, char const*)+0x18f>
c001a56d:	c1 e0 03             	shl    eax,0x3
c001a570:	51                   	push   ecx
c001a571:	51                   	push   ecx
c001a572:	50                   	push   eax
c001a573:	52                   	push   edx
c001a574:	e8 a5 53 ff ff       	call   c000f91e <realloc>
c001a579:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c001a57c:	83 c4 10             	add    esp,0x10
c001a57f:	31 db                	xor    ebx,ebx
c001a581:	52                   	push   edx
c001a582:	6a 08                	push   0x8
c001a584:	8d 44 24 20          	lea    eax,[esp+0x20]
c001a588:	50                   	push   eax
c001a589:	8b 16                	mov    edx,DWORD PTR [esi]
c001a58b:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001a58e:	8d 44 d0 f8          	lea    eax,[eax+edx*8-0x8]
c001a592:	50                   	push   eax
c001a593:	e8 d0 61 fe ff       	call   c0000768 <memcpy>
c001a598:	83 c4 0c             	add    esp,0xc
c001a59b:	68 00 01 00 00       	push   0x100
c001a5a0:	6a 00                	push   0x0
c001a5a2:	55                   	push   ebp
c001a5a3:	31 ed                	xor    ebp,ebp
c001a5a5:	e8 f2 61 fe ff       	call   c000079c <memset>
c001a5aa:	83 c4 10             	add    esp,0x10
c001a5ad:	eb 0d                	jmp    c001a5bc <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c001a5af:	3c 3d                	cmp    al,0x3d
c001a5b1:	74 07                	je     c001a5ba <EnvVarContainer::loadFrom(char const*, char const*)+0x1d0>
c001a5b3:	88 44 2c 20          	mov    BYTE PTR [esp+ebp*1+0x20],al
c001a5b7:	45                   	inc    ebp
c001a5b8:	eb 02                	jmp    c001a5bc <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c001a5ba:	89 eb                	mov    ebx,ebp
c001a5bc:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a5c1:	0f 85 bd fe ff ff    	jne    c001a484 <EnvVarContainer::loadFrom(char const*, char const*)+0x9a>
c001a5c7:	50                   	push   eax
c001a5c8:	50                   	push   eax
c001a5c9:	ff 36                	push   DWORD PTR [esi]
c001a5cb:	68 03 c4 02 c0       	push   0xc002c403
c001a5d0:	e8 1c 89 ff ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c001a5d5:	81 c4 3c 01 00 00    	add    esp,0x13c
c001a5db:	5b                   	pop    ebx
c001a5dc:	5e                   	pop    esi
c001a5dd:	5f                   	pop    edi
c001a5de:	5d                   	pop    ebp
c001a5df:	c3                   	ret    

c001a5e0 <EnvVarContainer::__loadSystem()>:
c001a5e0:	83 ec 10             	sub    esp,0x10
c001a5e3:	68 a0 e3 02 c0       	push   0xc002e3a0
c001a5e8:	68 2e c4 02 c0       	push   0xc002c42e
c001a5ed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a5f1:	e8 f4 fd ff ff       	call   c001a3ea <EnvVarContainer::loadFrom(char const*, char const*)>
c001a5f6:	83 c4 1c             	add    esp,0x1c
c001a5f9:	c3                   	ret    

c001a5fa <EnvVarContainer::__loadUser()>:
c001a5fa:	c3                   	ret    
c001a5fb:	90                   	nop

c001a5fc <EnvVarContainer::EnvVarContainer(Process*)>:
c001a5fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a600:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001a606:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a60a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a60e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001a611:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a615:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001a61c:	90                   	nop
c001a61d:	c3                   	ret    

c001a61e <EnvVarContainer::~EnvVarContainer()>:
c001a61e:	83 ec 0c             	sub    esp,0xc
c001a621:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a625:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a628:	85 c0                	test   eax,eax
c001a62a:	74 1d                	je     c001a649 <EnvVarContainer::~EnvVarContainer()+0x2b>
c001a62c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a630:	8b 00                	mov    eax,DWORD PTR [eax]
c001a632:	85 c0                	test   eax,eax
c001a634:	74 13                	je     c001a649 <EnvVarContainer::~EnvVarContainer()+0x2b>
c001a636:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a63a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a63d:	83 ec 0c             	sub    esp,0xc
c001a640:	50                   	push   eax
c001a641:	e8 fc 52 ff ff       	call   c000f942 <free>
c001a646:	83 c4 10             	add    esp,0x10
c001a649:	90                   	nop
c001a64a:	83 c4 0c             	add    esp,0xc
c001a64d:	c3                   	ret    

c001a64e <Krnl::getEnv(Process*, char const*)>:
c001a64e:	53                   	push   ebx
c001a64f:	83 ec 08             	sub    esp,0x8
c001a652:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a656:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a65a:	39 05 d0 23 03 c0    	cmp    DWORD PTR ds:0xc00323d0,eax
c001a660:	74 04                	je     c001a666 <Krnl::getEnv(Process*, char const*)+0x18>
c001a662:	85 c0                	test   eax,eax
c001a664:	75 0b                	jne    c001a671 <Krnl::getEnv(Process*, char const*)+0x23>
c001a666:	a1 b4 19 03 c0       	mov    eax,ds:0xc00319b4
c001a66b:	85 c0                	test   eax,eax
c001a66d:	75 19                	jne    c001a688 <Krnl::getEnv(Process*, char const*)+0x3a>
c001a66f:	eb 27                	jmp    c001a698 <Krnl::getEnv(Process*, char const*)+0x4a>
c001a671:	52                   	push   edx
c001a672:	52                   	push   edx
c001a673:	53                   	push   ebx
c001a674:	ff b0 3a 07 00 00    	push   DWORD PTR [eax+0x73a]
c001a67a:	e8 5f fc ff ff       	call   c001a2de <EnvVarContainer::getEnv(char const*)>
c001a67f:	83 c4 10             	add    esp,0x10
c001a682:	85 c0                	test   eax,eax
c001a684:	75 28                	jne    c001a6ae <Krnl::getEnv(Process*, char const*)+0x60>
c001a686:	eb de                	jmp    c001a666 <Krnl::getEnv(Process*, char const*)+0x18>
c001a688:	52                   	push   edx
c001a689:	52                   	push   edx
c001a68a:	53                   	push   ebx
c001a68b:	50                   	push   eax
c001a68c:	e8 4d fc ff ff       	call   c001a2de <EnvVarContainer::getEnv(char const*)>
c001a691:	83 c4 10             	add    esp,0x10
c001a694:	85 c0                	test   eax,eax
c001a696:	75 16                	jne    c001a6ae <Krnl::getEnv(Process*, char const*)+0x60>
c001a698:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001a69c:	a1 b8 19 03 c0       	mov    eax,ds:0xc00319b8
c001a6a1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001a6a5:	83 c4 08             	add    esp,0x8
c001a6a8:	5b                   	pop    ebx
c001a6a9:	e9 30 fc ff ff       	jmp    c001a2de <EnvVarContainer::getEnv(char const*)>
c001a6ae:	83 c4 08             	add    esp,0x8
c001a6b1:	5b                   	pop    ebx
c001a6b2:	c3                   	ret    

c001a6b3 <Krnl::setEnvSystem(char const*, char const*)>:
c001a6b3:	83 ec 10             	sub    esp,0x10
c001a6b6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a6ba:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a6be:	ff 35 b8 19 03 c0    	push   DWORD PTR ds:0xc00319b8
c001a6c4:	e8 53 fc ff ff       	call   c001a31c <EnvVarContainer::setEnv(char const*, char const*)>
c001a6c9:	83 c4 1c             	add    esp,0x1c
c001a6cc:	c3                   	ret    

c001a6cd <Krnl::setEnvUser(char const*, char const*)>:
c001a6cd:	a1 b4 19 03 c0       	mov    eax,ds:0xc00319b4
c001a6d2:	85 c0                	test   eax,eax
c001a6d4:	74 15                	je     c001a6eb <Krnl::setEnvUser(char const*, char const*)+0x1e>
c001a6d6:	83 ec 10             	sub    esp,0x10
c001a6d9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a6dd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a6e1:	50                   	push   eax
c001a6e2:	e8 35 fc ff ff       	call   c001a31c <EnvVarContainer::setEnv(char const*, char const*)>
c001a6e7:	83 c4 1c             	add    esp,0x1c
c001a6ea:	c3                   	ret    
c001a6eb:	c3                   	ret    

c001a6ec <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c001a6ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a6f0:	8b 80 3a 07 00 00    	mov    eax,DWORD PTR [eax+0x73a]
c001a6f6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a6fa:	e9 1d fc ff ff       	jmp    c001a31c <EnvVarContainer::setEnv(char const*, char const*)>

c001a6ff <Krnl::deleteEnvSystem(char const*)>:
c001a6ff:	c3                   	ret    

c001a700 <Krnl::deleteEnvUser(char const*)>:
c001a700:	c3                   	ret    

c001a701 <Krnl::deleteEnvProcess(Process*, char const*)>:
c001a701:	c3                   	ret    

c001a702 <Krnl::newProcessEnv(Process*)>:
c001a702:	83 ec 28             	sub    esp,0x28
c001a705:	6a 0c                	push   0xc
c001a707:	e8 26 52 ff ff       	call   c000f932 <malloc>
c001a70c:	5a                   	pop    edx
c001a70d:	59                   	pop    ecx
c001a70e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a712:	50                   	push   eax
c001a713:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a717:	e8 e0 fe ff ff       	call   c001a5fc <EnvVarContainer::EnvVarContainer(Process*)>
c001a71c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a720:	83 c4 2c             	add    esp,0x2c
c001a723:	c3                   	ret    

c001a724 <Krnl::copyProcessEnv(Process*, Process*)>:
c001a724:	56                   	push   esi
c001a725:	53                   	push   ebx
c001a726:	83 ec 10             	sub    esp,0x10
c001a729:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a72d:	8b b0 3a 07 00 00    	mov    esi,DWORD PTR [eax+0x73a]
c001a733:	6a 0c                	push   0xc
c001a735:	e8 f8 51 ff ff       	call   c000f932 <malloc>
c001a73a:	89 c3                	mov    ebx,eax
c001a73c:	58                   	pop    eax
c001a73d:	5a                   	pop    edx
c001a73e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a742:	53                   	push   ebx
c001a743:	e8 b4 fe ff ff       	call   c001a5fc <EnvVarContainer::EnvVarContainer(Process*)>
c001a748:	8b 06                	mov    eax,DWORD PTR [esi]
c001a74a:	89 03                	mov    DWORD PTR [ebx],eax
c001a74c:	c1 e0 03             	shl    eax,0x3
c001a74f:	89 04 24             	mov    DWORD PTR [esp],eax
c001a752:	e8 db 51 ff ff       	call   c000f932 <malloc>
c001a757:	83 c4 0c             	add    esp,0xc
c001a75a:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001a75d:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001a75f:	8d 14 cd 00 00 00 00 	lea    edx,[ecx*8+0x0]
c001a766:	52                   	push   edx
c001a767:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a76a:	50                   	push   eax
c001a76b:	e8 f8 5f fe ff       	call   c0000768 <memcpy>
c001a770:	89 d8                	mov    eax,ebx
c001a772:	83 c4 14             	add    esp,0x14
c001a775:	5b                   	pop    ebx
c001a776:	5e                   	pop    esi
c001a777:	c3                   	ret    

c001a778 <Krnl::loadSystemEnv()>:
c001a778:	53                   	push   ebx
c001a779:	83 ec 14             	sub    esp,0x14
c001a77c:	6a 0c                	push   0xc
c001a77e:	e8 af 51 ff ff       	call   c000f932 <malloc>
c001a783:	89 c3                	mov    ebx,eax
c001a785:	58                   	pop    eax
c001a786:	5a                   	pop    edx
c001a787:	ff 35 d0 23 03 c0    	push   DWORD PTR ds:0xc00323d0
c001a78d:	53                   	push   ebx
c001a78e:	e8 69 fe ff ff       	call   c001a5fc <EnvVarContainer::EnvVarContainer(Process*)>
c001a793:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a796:	89 1d b8 19 03 c0    	mov    DWORD PTR ds:0xc00319b8,ebx
c001a79c:	e8 3f fe ff ff       	call   c001a5e0 <EnvVarContainer::__loadSystem()>
c001a7a1:	83 c4 18             	add    esp,0x18
c001a7a4:	5b                   	pop    ebx
c001a7a5:	c3                   	ret    

c001a7a6 <Krnl::loadUserEnv()>:
c001a7a6:	53                   	push   ebx
c001a7a7:	83 ec 14             	sub    esp,0x14
c001a7aa:	6a 0c                	push   0xc
c001a7ac:	e8 81 51 ff ff       	call   c000f932 <malloc>
c001a7b1:	89 c3                	mov    ebx,eax
c001a7b3:	58                   	pop    eax
c001a7b4:	5a                   	pop    edx
c001a7b5:	ff 35 d0 23 03 c0    	push   DWORD PTR ds:0xc00323d0
c001a7bb:	53                   	push   ebx
c001a7bc:	e8 3b fe ff ff       	call   c001a5fc <EnvVarContainer::EnvVarContainer(Process*)>
c001a7c1:	89 1d b4 19 03 c0    	mov    DWORD PTR ds:0xc00319b4,ebx
c001a7c7:	83 c4 18             	add    esp,0x18
c001a7ca:	5b                   	pop    ebx
c001a7cb:	c3                   	ret    

c001a7cc <Krnl::flushEnv()>:
c001a7cc:	c3                   	ret    

c001a7cd <Krnl::getProcessTotalEnvCount(Process*)>:
c001a7cd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a7d1:	8b 15 b4 19 03 c0    	mov    edx,DWORD PTR ds:0xc00319b4
c001a7d7:	8b 88 3a 07 00 00    	mov    ecx,DWORD PTR [eax+0x73a]
c001a7dd:	a1 b8 19 03 c0       	mov    eax,ds:0xc00319b8
c001a7e2:	8b 00                	mov    eax,DWORD PTR [eax]
c001a7e4:	03 01                	add    eax,DWORD PTR [ecx]
c001a7e6:	85 d2                	test   edx,edx
c001a7e8:	74 02                	je     c001a7ec <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c001a7ea:	03 02                	add    eax,DWORD PTR [edx]
c001a7ec:	c3                   	ret    

c001a7ed <Krnl::getProcessEnvPair(Process*, int)>:
c001a7ed:	57                   	push   edi
c001a7ee:	8b 0d b4 19 03 c0    	mov    ecx,DWORD PTR ds:0xc00319b4
c001a7f4:	56                   	push   esi
c001a7f5:	85 c9                	test   ecx,ecx
c001a7f7:	53                   	push   ebx
c001a7f8:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001a7fc:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a800:	8b 97 3a 07 00 00    	mov    edx,DWORD PTR [edi+0x73a]
c001a806:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a80a:	8b 02                	mov    eax,DWORD PTR [edx]
c001a80c:	75 47                	jne    c001a855 <Krnl::getProcessEnvPair(Process*, int)+0x68>
c001a80e:	39 c3                	cmp    ebx,eax
c001a810:	7c 47                	jl     c001a859 <Krnl::getProcessEnvPair(Process*, int)+0x6c>
c001a812:	8b 15 b8 19 03 c0    	mov    edx,DWORD PTR ds:0xc00319b8
c001a818:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001a81a:	01 c1                	add    ecx,eax
c001a81c:	39 d9                	cmp    ecx,ebx
c001a81e:	7e 6c                	jle    c001a88c <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c001a820:	51                   	push   ecx
c001a821:	89 d9                	mov    ecx,ebx
c001a823:	29 c1                	sub    ecx,eax
c001a825:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c001a828:	ff 74 c8 04          	push   DWORD PTR [eax+ecx*8+0x4]
c001a82c:	53                   	push   ebx
c001a82d:	68 50 c4 02 c0       	push   0xc002c450
c001a832:	e8 ba 86 ff ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c001a837:	8b 87 3a 07 00 00    	mov    eax,DWORD PTR [edi+0x73a]
c001a83d:	2b 18                	sub    ebx,DWORD PTR [eax]
c001a83f:	a1 b8 19 03 c0       	mov    eax,ds:0xc00319b8
c001a844:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a847:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c001a84b:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001a84e:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001a851:	89 06                	mov    DWORD PTR [esi],eax
c001a853:	eb 51                	jmp    c001a8a6 <Krnl::getProcessEnvPair(Process*, int)+0xb9>
c001a855:	39 c3                	cmp    ebx,eax
c001a857:	7d 05                	jge    c001a85e <Krnl::getProcessEnvPair(Process*, int)+0x71>
c001a859:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c001a85c:	eb 20                	jmp    c001a87e <Krnl::getProcessEnvPair(Process*, int)+0x91>
c001a85e:	8b 39                	mov    edi,DWORD PTR [ecx]
c001a860:	8d 14 07             	lea    edx,[edi+eax*1]
c001a863:	39 da                	cmp    edx,ebx
c001a865:	7e 04                	jle    c001a86b <Krnl::getProcessEnvPair(Process*, int)+0x7e>
c001a867:	29 c3                	sub    ebx,eax
c001a869:	eb 10                	jmp    c001a87b <Krnl::getProcessEnvPair(Process*, int)+0x8e>
c001a86b:	8b 0d b8 19 03 c0    	mov    ecx,DWORD PTR ds:0xc00319b8
c001a871:	03 11                	add    edx,DWORD PTR [ecx]
c001a873:	39 da                	cmp    edx,ebx
c001a875:	7e 15                	jle    c001a88c <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c001a877:	29 c3                	sub    ebx,eax
c001a879:	29 fb                	sub    ebx,edi
c001a87b:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c001a87e:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c001a882:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001a885:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001a888:	89 06                	mov    DWORD PTR [esi],eax
c001a88a:	eb 1d                	jmp    c001a8a9 <Krnl::getProcessEnvPair(Process*, int)+0xbc>
c001a88c:	83 ec 0c             	sub    esp,0xc
c001a88f:	68 64 c4 02 c0       	push   0xc002c464
c001a894:	e8 18 00 00 00       	call   c001a8b1 <Krnl::panic(char const*)>
c001a899:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c001a89f:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c001a8a6:	83 c4 10             	add    esp,0x10
c001a8a9:	89 f0                	mov    eax,esi
c001a8ab:	5b                   	pop    ebx
c001a8ac:	5e                   	pop    esi
c001a8ad:	5f                   	pop    edi
c001a8ae:	c2 04 00             	ret    0x4

c001a8b1 <Krnl::panic(char const*)>:
c001a8b1:	55                   	push   ebp
c001a8b2:	89 e5                	mov    ebp,esp
c001a8b4:	53                   	push   ebx
c001a8b5:	83 ec 0c             	sub    esp,0xc
c001a8b8:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c001a8bb:	fa                   	cli    
c001a8bc:	c6 05 c4 19 03 c0 01 	mov    BYTE PTR ds:0xc00319c4,0x1
c001a8c3:	53                   	push   ebx
c001a8c4:	c6 05 a4 dd 02 c0 00 	mov    BYTE PTR ds:0xc002dda4,0x0
c001a8cb:	68 7e c4 02 c0       	push   0xc002c47e
c001a8d0:	e8 1c 86 ff ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c001a8d5:	58                   	pop    eax
c001a8d6:	a1 d0 23 03 c0       	mov    eax,ds:0xc00323d0
c001a8db:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a8e1:	e8 26 64 ff ff       	call   c0010d0c <setActiveTerminal(VgaText*)>
c001a8e6:	83 c4 0c             	add    esp,0xc
c001a8e9:	a1 d0 23 03 c0       	mov    eax,ds:0xc00323d0
c001a8ee:	6a 01                	push   0x1
c001a8f0:	6a 0f                	push   0xf
c001a8f2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a8f8:	e8 ad 5e ff ff       	call   c00107aa <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001a8fd:	58                   	pop    eax
c001a8fe:	a1 d0 23 03 c0       	mov    eax,ds:0xc00323d0
c001a903:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a909:	e8 44 66 ff ff       	call   c0010f52 <VgaText::clearScreen()>
c001a90e:	58                   	pop    eax
c001a90f:	a1 d0 23 03 c0       	mov    eax,ds:0xc00323d0
c001a914:	5a                   	pop    edx
c001a915:	68 97 c4 02 c0       	push   0xc002c497
c001a91a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a920:	e8 73 67 ff ff       	call   c0011098 <VgaText::puts(char const*)>
c001a925:	59                   	pop    ecx
c001a926:	58                   	pop    eax
c001a927:	a1 d0 23 03 c0       	mov    eax,ds:0xc00323d0
c001a92c:	68 3c c5 02 c0       	push   0xc002c53c
c001a931:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a937:	e8 5c 67 ff ff       	call   c0011098 <VgaText::puts(char const*)>
c001a93c:	58                   	pop    eax
c001a93d:	a1 d0 23 03 c0       	mov    eax,ds:0xc00323d0
c001a942:	5a                   	pop    edx
c001a943:	68 b3 c4 02 c0       	push   0xc002c4b3
c001a948:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a94e:	e8 45 67 ff ff       	call   c0011098 <VgaText::puts(char const*)>
c001a953:	59                   	pop    ecx
c001a954:	58                   	pop    eax
c001a955:	a1 d0 23 03 c0       	mov    eax,ds:0xc00323d0
c001a95a:	53                   	push   ebx
c001a95b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a961:	e8 32 67 ff ff       	call   c0011098 <VgaText::puts(char const*)>
c001a966:	58                   	pop    eax
c001a967:	a1 d0 23 03 c0       	mov    eax,ds:0xc00323d0
c001a96c:	5a                   	pop    edx
c001a96d:	68 d3 c4 02 c0       	push   0xc002c4d3
c001a972:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a978:	e8 1b 67 ff ff       	call   c0011098 <VgaText::puts(char const*)>
c001a97d:	a1 c0 19 03 c0       	mov    eax,ds:0xc00319c0
c001a982:	83 c4 10             	add    esp,0x10
c001a985:	85 c0                	test   eax,eax
c001a987:	74 02                	je     c001a98b <Krnl::panic(char const*)+0xda>
c001a989:	ff d0                	call   eax
c001a98b:	83 ec 0c             	sub    esp,0xc
c001a98e:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a991:	e8 e3 30 00 00       	call   c001da79 <Thr::getDriverNameFromAddress(unsigned long)>
c001a996:	83 c4 10             	add    esp,0x10
c001a999:	89 c3                	mov    ebx,eax
c001a99b:	85 c0                	test   eax,eax
c001a99d:	0f 84 50 02 00 00    	je     c001abf3 <Krnl::panic(char const*)+0x342>
c001a9a3:	83 ec 08             	sub    esp,0x8
c001a9a6:	8b 15 d0 23 03 c0    	mov    edx,DWORD PTR ds:0xc00323d0
c001a9ac:	68 78 c5 02 c0       	push   0xc002c578
c001a9b1:	ff b2 26 05 00 00    	push   DWORD PTR [edx+0x526]
c001a9b7:	e8 dc 66 ff ff       	call   c0011098 <VgaText::puts(char const*)>
c001a9bc:	58                   	pop    eax
c001a9bd:	5a                   	pop    edx
c001a9be:	8b 15 d0 23 03 c0    	mov    edx,DWORD PTR ds:0xc00323d0
c001a9c4:	68 b3 c4 02 c0       	push   0xc002c4b3
c001a9c9:	ff b2 26 05 00 00    	push   DWORD PTR [edx+0x526]
c001a9cf:	e8 c4 66 ff ff       	call   c0011098 <VgaText::puts(char const*)>
c001a9d4:	59                   	pop    ecx
c001a9d5:	58                   	pop    eax
c001a9d6:	a1 d0 23 03 c0       	mov    eax,ds:0xc00323d0
c001a9db:	53                   	push   ebx
c001a9dc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a9e2:	e8 b1 66 ff ff       	call   c0011098 <VgaText::puts(char const*)>
c001a9e7:	83 c4 10             	add    esp,0x10
c001a9ea:	83 ec 08             	sub    esp,0x8
c001a9ed:	a1 d0 23 03 c0       	mov    eax,ds:0xc00323d0
c001a9f2:	68 d2 c4 02 c0       	push   0xc002c4d2
c001a9f7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a9fd:	e8 96 66 ff ff       	call   c0011098 <VgaText::puts(char const*)>
c001aa02:	58                   	pop    eax
c001aa03:	a1 d0 23 03 c0       	mov    eax,ds:0xc00323d0
c001aa08:	5a                   	pop    edx
c001aa09:	68 d0 c5 02 c0       	push   0xc002c5d0
c001aa0e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001aa14:	e8 7f 66 ff ff       	call   c0011098 <VgaText::puts(char const*)>
c001aa19:	59                   	pop    ecx
c001aa1a:	a1 d0 23 03 c0       	mov    eax,ds:0xc00323d0
c001aa1f:	5b                   	pop    ebx
c001aa20:	68 10 c6 02 c0       	push   0xc002c610
c001aa25:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001aa2b:	e8 68 66 ff ff       	call   c0011098 <VgaText::puts(char const*)>
c001aa30:	58                   	pop    eax
c001aa31:	a1 d0 23 03 c0       	mov    eax,ds:0xc00323d0
c001aa36:	5a                   	pop    edx
c001aa37:	68 be c4 02 c0       	push   0xc002c4be
c001aa3c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001aa42:	e8 51 66 ff ff       	call   c0011098 <VgaText::puts(char const*)>
c001aa47:	59                   	pop    ecx
c001aa48:	5b                   	pop    ebx
c001aa49:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001aa4c:	68 d6 c4 02 c0       	push   0xc002c4d6
c001aa51:	e8 9b 84 ff ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c001aa56:	58                   	pop    eax
c001aa57:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001aa5a:	5a                   	pop    edx
c001aa5b:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001aa5e:	68 df c4 02 c0       	push   0xc002c4df
c001aa63:	e8 89 84 ff ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c001aa68:	59                   	pop    ecx
c001aa69:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001aa6c:	5b                   	pop    ebx
c001aa6d:	8b 00                	mov    eax,DWORD PTR [eax]
c001aa6f:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001aa72:	68 e8 c4 02 c0       	push   0xc002c4e8
c001aa77:	e8 75 84 ff ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c001aa7c:	58                   	pop    eax
c001aa7d:	a1 d0 23 03 c0       	mov    eax,ds:0xc00323d0
c001aa82:	5a                   	pop    edx
c001aa83:	68 54 c6 02 c0       	push   0xc002c654
c001aa88:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001aa8e:	e8 05 66 ff ff       	call   c0011098 <VgaText::puts(char const*)>
c001aa93:	59                   	pop    ecx
c001aa94:	a1 d0 23 03 c0       	mov    eax,ds:0xc00323d0
c001aa99:	5b                   	pop    ebx
c001aa9a:	68 f1 c4 02 c0       	push   0xc002c4f1
c001aa9f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001aaa5:	e8 ee 65 ff ff       	call   c0011098 <VgaText::puts(char const*)>
c001aaaa:	0f 20 c0             	mov    eax,cr0
c001aaad:	5a                   	pop    edx
c001aaae:	59                   	pop    ecx
c001aaaf:	50                   	push   eax
c001aab0:	a1 d0 23 03 c0       	mov    eax,ds:0xc00323d0
c001aab5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001aabb:	e8 fe 65 ff ff       	call   c00110be <VgaText::putx(unsigned int)>
c001aac0:	5b                   	pop    ebx
c001aac1:	58                   	pop    eax
c001aac2:	a1 d0 23 03 c0       	mov    eax,ds:0xc00323d0
c001aac7:	68 fb c4 02 c0       	push   0xc002c4fb
c001aacc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001aad2:	e8 c1 65 ff ff       	call   c0011098 <VgaText::puts(char const*)>
c001aad7:	0f 20 d0             	mov    eax,cr2
c001aada:	5a                   	pop    edx
c001aadb:	59                   	pop    ecx
c001aadc:	50                   	push   eax
c001aadd:	a1 d0 23 03 c0       	mov    eax,ds:0xc00323d0
c001aae2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001aae8:	e8 d1 65 ff ff       	call   c00110be <VgaText::putx(unsigned int)>
c001aaed:	5b                   	pop    ebx
c001aaee:	58                   	pop    eax
c001aaef:	a1 d0 23 03 c0       	mov    eax,ds:0xc00323d0
c001aaf4:	68 05 c5 02 c0       	push   0xc002c505
c001aaf9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001aaff:	e8 94 65 ff ff       	call   c0011098 <VgaText::puts(char const*)>
c001ab04:	0f 20 d8             	mov    eax,cr3
c001ab07:	5a                   	pop    edx
c001ab08:	59                   	pop    ecx
c001ab09:	50                   	push   eax
c001ab0a:	a1 d0 23 03 c0       	mov    eax,ds:0xc00323d0
c001ab0f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001ab15:	e8 a4 65 ff ff       	call   c00110be <VgaText::putx(unsigned int)>
c001ab1a:	5b                   	pop    ebx
c001ab1b:	58                   	pop    eax
c001ab1c:	a1 d0 23 03 c0       	mov    eax,ds:0xc00323d0
c001ab21:	68 18 c5 02 c0       	push   0xc002c518
c001ab26:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001ab2c:	e8 67 65 ff ff       	call   c0011098 <VgaText::puts(char const*)>
c001ab31:	0f 20 e0             	mov    eax,cr4
c001ab34:	5a                   	pop    edx
c001ab35:	59                   	pop    ecx
c001ab36:	50                   	push   eax
c001ab37:	a1 d0 23 03 c0       	mov    eax,ds:0xc00323d0
c001ab3c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001ab42:	e8 77 65 ff ff       	call   c00110be <VgaText::putx(unsigned int)>
c001ab47:	5b                   	pop    ebx
c001ab48:	58                   	pop    eax
c001ab49:	a1 d0 23 03 c0       	mov    eax,ds:0xc00323d0
c001ab4e:	68 22 c5 02 c0       	push   0xc002c522
c001ab53:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001ab59:	e8 3a 65 ff ff       	call   c0011098 <VgaText::puts(char const*)>
c001ab5e:	5a                   	pop    edx
c001ab5f:	a1 d0 23 03 c0       	mov    eax,ds:0xc00323d0
c001ab64:	59                   	pop    ecx
c001ab65:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001ab6b:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001ab6e:	50                   	push   eax
c001ab6f:	e8 4a 65 ff ff       	call   c00110be <VgaText::putx(unsigned int)>
c001ab74:	5b                   	pop    ebx
c001ab75:	58                   	pop    eax
c001ab76:	a1 d0 23 03 c0       	mov    eax,ds:0xc00323d0
c001ab7b:	68 39 c5 02 c0       	push   0xc002c539
c001ab80:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001ab86:	e8 0d 65 ff ff       	call   c0011098 <VgaText::puts(char const*)>
c001ab8b:	5a                   	pop    edx
c001ab8c:	a1 d0 23 03 c0       	mov    eax,ds:0xc00323d0
c001ab91:	59                   	pop    ecx
c001ab92:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001ab98:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001ab9b:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001ab9e:	50                   	push   eax
c001ab9f:	e8 1a 65 ff ff       	call   c00110be <VgaText::putx(unsigned int)>
c001aba4:	5b                   	pop    ebx
c001aba5:	58                   	pop    eax
c001aba6:	a1 d0 23 03 c0       	mov    eax,ds:0xc00323d0
c001abab:	68 39 c5 02 c0       	push   0xc002c539
c001abb0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001abb6:	e8 dd 64 ff ff       	call   c0011098 <VgaText::puts(char const*)>
c001abbb:	a1 d0 23 03 c0       	mov    eax,ds:0xc00323d0
c001abc0:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001abc3:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001abc9:	8b 12                	mov    edx,DWORD PTR [edx]
c001abcb:	59                   	pop    ecx
c001abcc:	5b                   	pop    ebx
c001abcd:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001abd0:	50                   	push   eax
c001abd1:	e8 e8 64 ff ff       	call   c00110be <VgaText::putx(unsigned int)>
c001abd6:	83 c4 10             	add    esp,0x10
c001abd9:	b2 fe                	mov    dl,0xfe
c001abdb:	e4 60                	in     al,0x60
c001abdd:	3c 1c                	cmp    al,0x1c
c001abdf:	74 04                	je     c001abe5 <Krnl::panic(char const*)+0x334>
c001abe1:	3c 5a                	cmp    al,0x5a
c001abe3:	75 f6                	jne    c001abdb <Krnl::panic(char const*)+0x32a>
c001abe5:	e4 64                	in     al,0x64
c001abe7:	a8 02                	test   al,0x2
c001abe9:	75 fa                	jne    c001abe5 <Krnl::panic(char const*)+0x334>
c001abeb:	88 d0                	mov    al,dl
c001abed:	e6 64                	out    0x64,al
c001abef:	fa                   	cli    
c001abf0:	f4                   	hlt    
c001abf1:	eb e8                	jmp    c001abdb <Krnl::panic(char const*)+0x32a>
c001abf3:	50                   	push   eax
c001abf4:	50                   	push   eax
c001abf5:	a1 d0 23 03 c0       	mov    eax,ds:0xc00323d0
c001abfa:	68 a4 c5 02 c0       	push   0xc002c5a4
c001abff:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001ac05:	e8 8e 64 ff ff       	call   c0011098 <VgaText::puts(char const*)>
c001ac0a:	58                   	pop    eax
c001ac0b:	a1 d0 23 03 c0       	mov    eax,ds:0xc00323d0
c001ac10:	5a                   	pop    edx
c001ac11:	68 b3 c4 02 c0       	push   0xc002c4b3
c001ac16:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001ac1c:	e8 77 64 ff ff       	call   c0011098 <VgaText::puts(char const*)>
c001ac21:	59                   	pop    ecx
c001ac22:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ac27:	5b                   	pop    ebx
c001ac28:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ac2b:	83 c0 0c             	add    eax,0xc
c001ac2e:	50                   	push   eax
c001ac2f:	a1 d0 23 03 c0       	mov    eax,ds:0xc00323d0
c001ac34:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001ac3a:	e8 59 64 ff ff       	call   c0011098 <VgaText::puts(char const*)>
c001ac3f:	83 c4 10             	add    esp,0x10
c001ac42:	e9 a3 fd ff ff       	jmp    c001a9ea <Krnl::panic(char const*)+0x139>

c001ac47 <Net::switchEndian16(unsigned short)>:
c001ac47:	83 ec 04             	sub    esp,0x4
c001ac4a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ac4e:	66 89 04 24          	mov    WORD PTR [esp],ax
c001ac52:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001ac56:	c1 f8 08             	sar    eax,0x8
c001ac59:	89 c2                	mov    edx,eax
c001ac5b:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001ac5f:	c1 e0 08             	shl    eax,0x8
c001ac62:	09 d0                	or     eax,edx
c001ac64:	83 c4 04             	add    esp,0x4
c001ac67:	c3                   	ret    

c001ac68 <Net::switchEndian32(unsigned int)>:
c001ac68:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ac6c:	c1 e8 18             	shr    eax,0x18
c001ac6f:	89 c2                	mov    edx,eax
c001ac71:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ac75:	c1 e0 08             	shl    eax,0x8
c001ac78:	25 00 00 ff 00       	and    eax,0xff0000
c001ac7d:	09 c2                	or     edx,eax
c001ac7f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ac83:	c1 e8 08             	shr    eax,0x8
c001ac86:	25 00 ff 00 00       	and    eax,0xff00
c001ac8b:	09 c2                	or     edx,eax
c001ac8d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ac91:	c1 e0 18             	shl    eax,0x18
c001ac94:	09 d0                	or     eax,edx
c001ac96:	c3                   	ret    

c001ac97 <Net::crc32Calc(unsigned char*, int)>:
c001ac97:	83 ec 10             	sub    esp,0x10
c001ac9a:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001ac9f:	75 07                	jne    c001aca8 <Net::crc32Calc(unsigned char*, int)+0x11>
c001aca1:	b8 00 00 00 00       	mov    eax,0x0
c001aca6:	eb 7c                	jmp    c001ad24 <Net::crc32Calc(unsigned char*, int)+0x8d>
c001aca8:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001acad:	7f 07                	jg     c001acb6 <Net::crc32Calc(unsigned char*, int)+0x1f>
c001acaf:	b8 00 00 00 00       	mov    eax,0x0
c001acb4:	eb 6e                	jmp    c001ad24 <Net::crc32Calc(unsigned char*, int)+0x8d>
c001acb6:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c001acbe:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001acc6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001acca:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c001acce:	7d 4e                	jge    c001ad1e <Net::crc32Calc(unsigned char*, int)+0x87>
c001acd0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001acd4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001acd8:	01 d0                	add    eax,edx
c001acda:	8a 00                	mov    al,BYTE PTR [eax]
c001acdc:	0f b6 c0             	movzx  eax,al
c001acdf:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c001ace3:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001aceb:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c001acf0:	7f 26                	jg     c001ad18 <Net::crc32Calc(unsigned char*, int)+0x81>
c001acf2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001acf6:	83 e0 01             	and    eax,0x1
c001acf9:	74 0d                	je     c001ad08 <Net::crc32Calc(unsigned char*, int)+0x71>
c001acfb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001acff:	d1 e8                	shr    eax,1
c001ad01:	35 20 83 b8 ed       	xor    eax,0xedb88320
c001ad06:	eb 06                	jmp    c001ad0e <Net::crc32Calc(unsigned char*, int)+0x77>
c001ad08:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ad0c:	d1 e8                	shr    eax,1
c001ad0e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ad12:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001ad16:	eb d3                	jmp    c001aceb <Net::crc32Calc(unsigned char*, int)+0x54>
c001ad18:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c001ad1c:	eb a8                	jmp    c001acc6 <Net::crc32Calc(unsigned char*, int)+0x2f>
c001ad1e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ad22:	f7 d0                	not    eax
c001ad24:	83 c4 10             	add    esp,0x10
c001ad27:	c3                   	ret    

c001ad28 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)>:
c001ad28:	83 ec 1c             	sub    esp,0x1c
c001ad2b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ad2f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ad33:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001ad3b:	83 7c 24 0c 06       	cmp    DWORD PTR [esp+0xc],0x6
c001ad40:	7f 14                	jg     c001ad56 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x2e>
c001ad42:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ad46:	8d 50 01             	lea    edx,[eax+0x1]
c001ad49:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001ad4d:	c6 00 aa             	mov    BYTE PTR [eax],0xaa
c001ad50:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001ad54:	eb e5                	jmp    c001ad3b <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x13>
c001ad56:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ad5a:	8d 50 01             	lea    edx,[eax+0x1]
c001ad5d:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001ad61:	c6 00 ab             	mov    BYTE PTR [eax],0xab
c001ad64:	83 ec 04             	sub    esp,0x4
c001ad67:	6a 06                	push   0x6
c001ad69:	8d 44 24 36          	lea    eax,[esp+0x36]
c001ad6d:	50                   	push   eax
c001ad6e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001ad72:	e8 f1 59 fe ff       	call   c0000768 <memcpy>
c001ad77:	83 c4 10             	add    esp,0x10
c001ad7a:	83 44 24 38 06       	add    DWORD PTR [esp+0x38],0x6
c001ad7f:	83 ec 04             	sub    esp,0x4
c001ad82:	6a 06                	push   0x6
c001ad84:	8d 44 24 30          	lea    eax,[esp+0x30]
c001ad88:	50                   	push   eax
c001ad89:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001ad8d:	e8 d6 59 fe ff       	call   c0000768 <memcpy>
c001ad92:	83 c4 10             	add    esp,0x10
c001ad95:	83 44 24 38 06       	add    DWORD PTR [esp+0x38],0x6
c001ad9a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ad9e:	0f b7 c0             	movzx  eax,ax
c001ada1:	c1 f8 08             	sar    eax,0x8
c001ada4:	89 c1                	mov    ecx,eax
c001ada6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001adaa:	8d 50 01             	lea    edx,[eax+0x1]
c001adad:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001adb1:	88 ca                	mov    dl,cl
c001adb3:	88 10                	mov    BYTE PTR [eax],dl
c001adb5:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001adb9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001adbd:	8d 48 01             	lea    ecx,[eax+0x1]
c001adc0:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001adc4:	88 10                	mov    BYTE PTR [eax],dl
c001adc6:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001adca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001adce:	83 ec 04             	sub    esp,0x4
c001add1:	52                   	push   edx
c001add2:	50                   	push   eax
c001add3:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001add7:	e8 8c 59 fe ff       	call   c0000768 <memcpy>
c001addc:	83 c4 10             	add    esp,0x10
c001addf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001ade3:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c001ade7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001adeb:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c001adef:	83 ec 08             	sub    esp,0x8
c001adf2:	50                   	push   eax
c001adf3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001adf7:	e8 9b fe ff ff       	call   c001ac97 <Net::crc32Calc(unsigned char*, int)>
c001adfc:	83 c4 10             	add    esp,0x10
c001adff:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ae03:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ae07:	c1 e8 18             	shr    eax,0x18
c001ae0a:	89 c1                	mov    ecx,eax
c001ae0c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ae10:	8d 50 01             	lea    edx,[eax+0x1]
c001ae13:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001ae17:	88 ca                	mov    dl,cl
c001ae19:	88 10                	mov    BYTE PTR [eax],dl
c001ae1b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ae1f:	c1 e8 10             	shr    eax,0x10
c001ae22:	89 c1                	mov    ecx,eax
c001ae24:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ae28:	8d 50 01             	lea    edx,[eax+0x1]
c001ae2b:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001ae2f:	88 ca                	mov    dl,cl
c001ae31:	88 10                	mov    BYTE PTR [eax],dl
c001ae33:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ae37:	c1 e8 08             	shr    eax,0x8
c001ae3a:	89 c1                	mov    ecx,eax
c001ae3c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ae40:	8d 50 01             	lea    edx,[eax+0x1]
c001ae43:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001ae47:	88 ca                	mov    dl,cl
c001ae49:	88 10                	mov    BYTE PTR [eax],dl
c001ae4b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ae4f:	8d 50 01             	lea    edx,[eax+0x1]
c001ae52:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001ae56:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ae5a:	88 10                	mov    BYTE PTR [eax],dl
c001ae5c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001ae60:	83 c4 1c             	add    esp,0x1c
c001ae63:	c3                   	ret    

c001ae64 <Net::unwrapEthernetFrame(unsigned char*, int)>:
c001ae64:	83 ec 2c             	sub    esp,0x2c
c001ae67:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ae6b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001ae6f:	83 44 24 34 08       	add    DWORD PTR [esp+0x34],0x8
c001ae74:	83 ec 04             	sub    esp,0x4
c001ae77:	6a 06                	push   0x6
c001ae79:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ae7d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001ae81:	83 c0 0e             	add    eax,0xe
c001ae84:	50                   	push   eax
c001ae85:	e8 de 58 fe ff       	call   c0000768 <memcpy>
c001ae8a:	83 c4 10             	add    esp,0x10
c001ae8d:	83 44 24 34 06       	add    DWORD PTR [esp+0x34],0x6
c001ae92:	83 ec 04             	sub    esp,0x4
c001ae95:	6a 06                	push   0x6
c001ae97:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ae9b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001ae9f:	83 c0 08             	add    eax,0x8
c001aea2:	50                   	push   eax
c001aea3:	e8 c0 58 fe ff       	call   c0000768 <memcpy>
c001aea8:	83 c4 10             	add    esp,0x10
c001aeab:	83 44 24 34 06       	add    DWORD PTR [esp+0x34],0x6
c001aeb0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001aeb4:	8d 50 01             	lea    edx,[eax+0x1]
c001aeb7:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001aebb:	8a 00                	mov    al,BYTE PTR [eax]
c001aebd:	0f b6 c0             	movzx  eax,al
c001aec0:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c001aec5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001aec9:	8d 50 01             	lea    edx,[eax+0x1]
c001aecc:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001aed0:	8a 00                	mov    al,BYTE PTR [eax]
c001aed2:	0f b6 c0             	movzx  eax,al
c001aed5:	66 89 44 24 18       	mov    WORD PTR [esp+0x18],ax
c001aeda:	0f b7 44 24 1a       	movzx  eax,WORD PTR [esp+0x1a]
c001aedf:	c1 e0 08             	shl    eax,0x8
c001aee2:	89 c2                	mov    edx,eax
c001aee4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001aee8:	09 d0                	or     eax,edx
c001aeea:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001aeee:	66 89 42 14          	mov    WORD PTR [edx+0x14],ax
c001aef2:	83 7c 24 38 ff       	cmp    DWORD PTR [esp+0x38],0xffffffff
c001aef7:	75 3a                	jne    c001af33 <Net::unwrapEthernetFrame(unsigned char*, int)+0xcf>
c001aef9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001aefd:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001af00:	66 3d dc 05          	cmp    ax,0x5dc
c001af04:	77 10                	ja     c001af16 <Net::unwrapEthernetFrame(unsigned char*, int)+0xb2>
c001af06:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001af0a:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001af0d:	0f b7 c0             	movzx  eax,ax
c001af10:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001af14:	eb 1d                	jmp    c001af33 <Net::unwrapEthernetFrame(unsigned char*, int)+0xcf>
c001af16:	83 ec 0c             	sub    esp,0xc
c001af19:	68 7c c6 02 c0       	push   0xc002c67c
c001af1e:	e8 ce 7f ff ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c001af23:	83 c4 10             	add    esp,0x10
c001af26:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001af2a:	c6 40 16 00          	mov    BYTE PTR [eax+0x16],0x0
c001af2e:	e9 c0 00 00 00       	jmp    c001aff3 <Net::unwrapEthernetFrame(unsigned char*, int)+0x18f>
c001af33:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001af37:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001af3b:	8b 00                	mov    eax,DWORD PTR [eax]
c001af3d:	83 ec 04             	sub    esp,0x4
c001af40:	52                   	push   edx
c001af41:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001af45:	50                   	push   eax
c001af46:	e8 1d 58 fe ff       	call   c0000768 <memcpy>
c001af4b:	83 c4 10             	add    esp,0x10
c001af4e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001af52:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c001af56:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001af5a:	8d 50 01             	lea    edx,[eax+0x1]
c001af5d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001af61:	8a 00                	mov    al,BYTE PTR [eax]
c001af63:	0f b6 c0             	movzx  eax,al
c001af66:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001af6a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001af6e:	8d 50 01             	lea    edx,[eax+0x1]
c001af71:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001af75:	8a 00                	mov    al,BYTE PTR [eax]
c001af77:	0f b6 c0             	movzx  eax,al
c001af7a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001af7e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001af82:	8d 50 01             	lea    edx,[eax+0x1]
c001af85:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001af89:	8a 00                	mov    al,BYTE PTR [eax]
c001af8b:	0f b6 c0             	movzx  eax,al
c001af8e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001af92:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001af96:	8d 50 01             	lea    edx,[eax+0x1]
c001af99:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001af9d:	8a 00                	mov    al,BYTE PTR [eax]
c001af9f:	0f b6 c0             	movzx  eax,al
c001afa2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001afa6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001afaa:	c1 e0 18             	shl    eax,0x18
c001afad:	89 c2                	mov    edx,eax
c001afaf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001afb3:	c1 e0 10             	shl    eax,0x10
c001afb6:	09 c2                	or     edx,eax
c001afb8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001afbc:	c1 e0 08             	shl    eax,0x8
c001afbf:	09 d0                	or     eax,edx
c001afc1:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c001afc5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001afc9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001afcd:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
c001afd1:	83 e8 04             	sub    eax,0x4
c001afd4:	83 ec 08             	sub    esp,0x8
c001afd7:	50                   	push   eax
c001afd8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001afdc:	e8 b6 fc ff ff       	call   c001ac97 <Net::crc32Calc(unsigned char*, int)>
c001afe1:	83 c4 10             	add    esp,0x10
c001afe4:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001afe8:	0f 94 c2             	sete   dl
c001afeb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001afef:	88 50 16             	mov    BYTE PTR [eax+0x16],dl
c001aff2:	90                   	nop
c001aff3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001aff7:	83 c4 2c             	add    esp,0x2c
c001affa:	c2 04 00             	ret    0x4

c001affd <Reg::findLineFromLoadedData(char*, char*, char*)>:
c001affd:	55                   	push   ebp
c001affe:	57                   	push   edi
c001afff:	56                   	push   esi
c001b000:	53                   	push   ebx
c001b001:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001b007:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c001b00e:	8a 1e                	mov    bl,BYTE PTR [esi]
c001b010:	8d 6e 01             	lea    ebp,[esi+0x1]
c001b013:	80 fb 40             	cmp    bl,0x40
c001b016:	75 1b                	jne    c001b033 <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c001b018:	8a 16                	mov    dl,BYTE PTR [esi]
c001b01a:	84 d2                	test   dl,dl
c001b01c:	0f 84 f1 00 00 00    	je     c001b113 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001b022:	8d 46 01             	lea    eax,[esi+0x1]
c001b025:	80 fa 3a             	cmp    dl,0x3a
c001b028:	74 04                	je     c001b02e <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c001b02a:	89 c6                	mov    esi,eax
c001b02c:	eb ea                	jmp    c001b018 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c001b02e:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001b031:	89 c6                	mov    esi,eax
c001b033:	50                   	push   eax
c001b034:	6a 40                	push   0x40
c001b036:	6a 00                	push   0x0
c001b038:	8d 44 24 24          	lea    eax,[esp+0x24]
c001b03c:	50                   	push   eax
c001b03d:	e8 5a 57 fe ff       	call   c000079c <memset>
c001b042:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c001b049:	31 c0                	xor    eax,eax
c001b04b:	83 c4 10             	add    esp,0x10
c001b04e:	8a 0f                	mov    cl,BYTE PTR [edi]
c001b050:	84 c9                	test   cl,cl
c001b052:	0f 84 bb 00 00 00    	je     c001b113 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001b058:	3d c7 00 00 00       	cmp    eax,0xc7
c001b05d:	0f 8f b0 00 00 00    	jg     c001b113 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001b063:	80 f9 0a             	cmp    cl,0xa
c001b066:	0f 85 98 00 00 00    	jne    c001b104 <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c001b06c:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c001b071:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c001b075:	a8 df                	test   al,0xdf
c001b077:	0f 94 c1             	sete   cl
c001b07a:	3c 23                	cmp    al,0x23
c001b07c:	0f 94 c2             	sete   dl
c001b07f:	08 d1                	or     cl,dl
c001b081:	75 4a                	jne    c001b0cd <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001b083:	8d 50 f7             	lea    edx,[eax-0x9]
c001b086:	80 fa 01             	cmp    dl,0x1
c001b089:	76 42                	jbe    c001b0cd <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001b08b:	3c 5b                	cmp    al,0x5b
c001b08d:	75 42                	jne    c001b0d1 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c001b08f:	80 fb 40             	cmp    bl,0x40
c001b092:	75 39                	jne    c001b0cd <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001b094:	83 ec 0c             	sub    esp,0xc
c001b097:	8d 54 24 65          	lea    edx,[esp+0x65]
c001b09b:	52                   	push   edx
c001b09c:	e8 17 57 fe ff       	call   c00007b8 <strlen>
c001b0a1:	83 c4 10             	add    esp,0x10
c001b0a4:	83 f8 3f             	cmp    eax,0x3f
c001b0a7:	77 6a                	ja     c001b113 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001b0a9:	50                   	push   eax
c001b0aa:	50                   	push   eax
c001b0ab:	8d 54 24 61          	lea    edx,[esp+0x61]
c001b0af:	52                   	push   edx
c001b0b0:	8d 54 24 24          	lea    edx,[esp+0x24]
c001b0b4:	52                   	push   edx
c001b0b5:	e8 9e 57 fe ff       	call   c0000858 <strcpy>
c001b0ba:	58                   	pop    eax
c001b0bb:	8d 54 24 24          	lea    edx,[esp+0x24]
c001b0bf:	52                   	push   edx
c001b0c0:	e8 f3 56 fe ff       	call   c00007b8 <strlen>
c001b0c5:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c001b0ca:	83 c4 10             	add    esp,0x10
c001b0cd:	31 d2                	xor    edx,edx
c001b0cf:	eb 3a                	jmp    c001b10b <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c001b0d1:	80 fb 40             	cmp    bl,0x40
c001b0d4:	74 06                	je     c001b0dc <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c001b0d6:	8d 44 24 58          	lea    eax,[esp+0x58]
c001b0da:	eb 20                	jmp    c001b0fc <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c001b0dc:	50                   	push   eax
c001b0dd:	50                   	push   eax
c001b0de:	55                   	push   ebp
c001b0df:	8d 44 24 24          	lea    eax,[esp+0x24]
c001b0e3:	50                   	push   eax
c001b0e4:	e8 fb 57 fe ff       	call   c00008e4 <strcmp>
c001b0e9:	83 c4 10             	add    esp,0x10
c001b0ec:	85 c0                	test   eax,eax
c001b0ee:	75 dd                	jne    c001b0cd <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001b0f0:	eb e4                	jmp    c001b0d6 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c001b0f2:	8d 50 01             	lea    edx,[eax+0x1]
c001b0f5:	80 f9 3d             	cmp    cl,0x3d
c001b0f8:	74 1d                	je     c001b117 <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c001b0fa:	89 d0                	mov    eax,edx
c001b0fc:	8a 08                	mov    cl,BYTE PTR [eax]
c001b0fe:	84 c9                	test   cl,cl
c001b100:	75 f0                	jne    c001b0f2 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c001b102:	eb 0f                	jmp    c001b113 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001b104:	8d 50 01             	lea    edx,[eax+0x1]
c001b107:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c001b10b:	47                   	inc    edi
c001b10c:	89 d0                	mov    eax,edx
c001b10e:	e9 3b ff ff ff       	jmp    c001b04e <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c001b113:	31 c0                	xor    eax,eax
c001b115:	eb 33                	jmp    c001b14a <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c001b117:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001b11b:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001b11e:	50                   	push   eax
c001b11f:	50                   	push   eax
c001b120:	8d 44 24 60          	lea    eax,[esp+0x60]
c001b124:	50                   	push   eax
c001b125:	56                   	push   esi
c001b126:	e8 b9 57 fe ff       	call   c00008e4 <strcmp>
c001b12b:	83 c4 10             	add    esp,0x10
c001b12e:	85 c0                	test   eax,eax
c001b130:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b134:	75 97                	jne    c001b0cd <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001b136:	51                   	push   ecx
c001b137:	51                   	push   ecx
c001b138:	52                   	push   edx
c001b139:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c001b140:	e8 13 57 fe ff       	call   c0000858 <strcpy>
c001b145:	83 c4 10             	add    esp,0x10
c001b148:	b0 01                	mov    al,0x1
c001b14a:	81 c4 2c 01 00 00    	add    esp,0x12c
c001b150:	5b                   	pop    ebx
c001b151:	5e                   	pop    esi
c001b152:	5f                   	pop    edi
c001b153:	5d                   	pop    ebp
c001b154:	c3                   	ret    

c001b155 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c001b155:	57                   	push   edi
c001b156:	56                   	push   esi
c001b157:	53                   	push   ebx
c001b158:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001b15e:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c001b165:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001b16c:	53                   	push   ebx
c001b16d:	e8 46 56 fe ff       	call   c00007b8 <strlen>
c001b172:	89 34 24             	mov    DWORD PTR [esp],esi
c001b175:	89 c7                	mov    edi,eax
c001b177:	e8 3c 56 fe ff       	call   c00007b8 <strlen>
c001b17c:	83 c4 10             	add    esp,0x10
c001b17f:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c001b183:	3d ff 00 00 00       	cmp    eax,0xff
c001b188:	0f 87 d3 00 00 00    	ja     c001b261 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001b18e:	57                   	push   edi
c001b18f:	57                   	push   edi
c001b190:	56                   	push   esi
c001b191:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001b195:	56                   	push   esi
c001b196:	e8 bd 56 fe ff       	call   c0000858 <strcpy>
c001b19b:	58                   	pop    eax
c001b19c:	5a                   	pop    edx
c001b19d:	68 d1 cb 02 c0       	push   0xc002cbd1
c001b1a2:	56                   	push   esi
c001b1a3:	e8 f0 57 fe ff       	call   c0000998 <strcat>
c001b1a8:	59                   	pop    ecx
c001b1a9:	5f                   	pop    edi
c001b1aa:	53                   	push   ebx
c001b1ab:	56                   	push   esi
c001b1ac:	e8 e7 57 fe ff       	call   c0000998 <strcat>
c001b1b1:	58                   	pop    eax
c001b1b2:	5a                   	pop    edx
c001b1b3:	68 c8 c6 02 c0       	push   0xc002c6c8
c001b1b8:	56                   	push   esi
c001b1b9:	e8 da 57 fe ff       	call   c0000998 <strcat>
c001b1be:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001b1c5:	e8 68 47 ff ff       	call   c000f932 <malloc>
c001b1ca:	83 c4 0c             	add    esp,0xc
c001b1cd:	89 c3                	mov    ebx,eax
c001b1cf:	ff 35 d0 23 03 c0    	push   DWORD PTR ds:0xc00323d0
c001b1d5:	56                   	push   esi
c001b1d6:	50                   	push   eax
c001b1d7:	e8 74 82 ff ff       	call   c0013450 <File::File(char const*, Process*)>
c001b1dc:	83 c4 10             	add    esp,0x10
c001b1df:	85 db                	test   ebx,ebx
c001b1e1:	74 7e                	je     c001b261 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001b1e3:	51                   	push   ecx
c001b1e4:	51                   	push   ecx
c001b1e5:	6a 01                	push   0x1
c001b1e7:	53                   	push   ebx
c001b1e8:	e8 c7 82 ff ff       	call   c00134b4 <File::open(FileOpenMode)>
c001b1ed:	83 c4 10             	add    esp,0x10
c001b1f0:	85 c0                	test   eax,eax
c001b1f2:	74 08                	je     c001b1fc <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c001b1f4:	83 ec 0c             	sub    esp,0xc
c001b1f7:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b1f9:	53                   	push   ebx
c001b1fa:	eb 5f                	jmp    c001b25b <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c001b1fc:	52                   	push   edx
c001b1fd:	8d 44 24 17          	lea    eax,[esp+0x17]
c001b201:	50                   	push   eax
c001b202:	8d 44 24 20          	lea    eax,[esp+0x20]
c001b206:	50                   	push   eax
c001b207:	53                   	push   ebx
c001b208:	e8 53 85 ff ff       	call   c0013760 <File::stat(unsigned long long*, bool*)>
c001b20d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b211:	83 c4 10             	add    esp,0x10
c001b214:	89 c1                	mov    ecx,eax
c001b216:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c001b21a:	74 31                	je     c001b24d <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001b21c:	83 ec 0c             	sub    esp,0xc
c001b21f:	50                   	push   eax
c001b220:	e8 0d 47 ff ff       	call   c000f932 <malloc>
c001b225:	89 c6                	mov    esi,eax
c001b227:	58                   	pop    eax
c001b228:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b22a:	8d 54 24 20          	lea    edx,[esp+0x20]
c001b22e:	52                   	push   edx
c001b22f:	56                   	push   esi
c001b230:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b234:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b238:	53                   	push   ebx
c001b239:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001b23c:	83 c4 20             	add    esp,0x20
c001b23f:	85 c0                	test   eax,eax
c001b241:	75 0a                	jne    c001b24d <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001b243:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b247:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001b24b:	74 18                	je     c001b265 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c001b24d:	83 ec 0c             	sub    esp,0xc
c001b250:	53                   	push   ebx
c001b251:	e8 bc 82 ff ff       	call   c0013512 <File::close()>
c001b256:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b258:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b25b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b25e:	83 c4 10             	add    esp,0x10
c001b261:	31 c0                	xor    eax,eax
c001b263:	eb 3b                	jmp    c001b2a0 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c001b265:	83 ec 0c             	sub    esp,0xc
c001b268:	53                   	push   ebx
c001b269:	e8 a4 82 ff ff       	call   c0013512 <File::close()>
c001b26e:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b270:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b273:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b276:	83 c4 0c             	add    esp,0xc
c001b279:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001b280:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001b287:	56                   	push   esi
c001b288:	e8 70 fd ff ff       	call   c001affd <Reg::findLineFromLoadedData(char*, char*, char*)>
c001b28d:	89 34 24             	mov    DWORD PTR [esp],esi
c001b290:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001b294:	e8 a9 46 ff ff       	call   c000f942 <free>
c001b299:	83 c4 10             	add    esp,0x10
c001b29c:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001b2a0:	81 c4 20 01 00 00    	add    esp,0x120
c001b2a6:	5b                   	pop    ebx
c001b2a7:	5e                   	pop    esi
c001b2a8:	5f                   	pop    edi
c001b2a9:	c3                   	ret    

c001b2aa <Reg::getLine(char*, char*, char*)>:
c001b2aa:	57                   	push   edi
c001b2ab:	56                   	push   esi
c001b2ac:	53                   	push   ebx
c001b2ad:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b2b1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001b2b5:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001b2b9:	57                   	push   edi
c001b2ba:	56                   	push   esi
c001b2bb:	53                   	push   ebx
c001b2bc:	68 cd c6 02 c0       	push   0xc002c6cd
c001b2c1:	e8 8f fe ff ff       	call   c001b155 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001b2c6:	83 c4 10             	add    esp,0x10
c001b2c9:	84 c0                	test   al,al
c001b2cb:	75 10                	jne    c001b2dd <Reg::getLine(char*, char*, char*)+0x33>
c001b2cd:	57                   	push   edi
c001b2ce:	56                   	push   esi
c001b2cf:	53                   	push   ebx
c001b2d0:	68 f2 c6 02 c0       	push   0xc002c6f2
c001b2d5:	e8 7b fe ff ff       	call   c001b155 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001b2da:	83 c4 10             	add    esp,0x10
c001b2dd:	5b                   	pop    ebx
c001b2de:	5e                   	pop    esi
c001b2df:	5f                   	pop    edi
c001b2e0:	c3                   	ret    

c001b2e1 <Reg::readInt(char*, char*, int*)>:
c001b2e1:	55                   	push   ebp
c001b2e2:	57                   	push   edi
c001b2e3:	56                   	push   esi
c001b2e4:	53                   	push   ebx
c001b2e5:	81 ec f0 00 00 00    	sub    esp,0xf0
c001b2eb:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001b2ef:	57                   	push   edi
c001b2f0:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001b2f7:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001b2fe:	e8 a7 ff ff ff       	call   c001b2aa <Reg::getLine(char*, char*, char*)>
c001b303:	83 c4 10             	add    esp,0x10
c001b306:	84 c0                	test   al,al
c001b308:	0f 84 b3 00 00 00    	je     c001b3c1 <Reg::readInt(char*, char*, int*)+0xe0>
c001b30e:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c001b312:	80 fa 2b             	cmp    dl,0x2b
c001b315:	74 0c                	je     c001b323 <Reg::readInt(char*, char*, int*)+0x42>
c001b317:	80 fa 2d             	cmp    dl,0x2d
c001b31a:	75 0e                	jne    c001b32a <Reg::readInt(char*, char*, int*)+0x49>
c001b31c:	ba 01 00 00 00       	mov    edx,0x1
c001b321:	eb 0b                	jmp    c001b32e <Reg::readInt(char*, char*, int*)+0x4d>
c001b323:	ba 01 00 00 00       	mov    edx,0x1
c001b328:	eb 02                	jmp    c001b32c <Reg::readInt(char*, char*, int*)+0x4b>
c001b32a:	31 d2                	xor    edx,edx
c001b32c:	31 c0                	xor    eax,eax
c001b32e:	be 0a 00 00 00       	mov    esi,0xa
c001b333:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c001b338:	75 20                	jne    c001b35a <Reg::readInt(char*, char*, int*)+0x79>
c001b33a:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c001b33e:	80 f9 78             	cmp    cl,0x78
c001b341:	75 0a                	jne    c001b34d <Reg::readInt(char*, char*, int*)+0x6c>
c001b343:	83 c2 02             	add    edx,0x2
c001b346:	be 10 00 00 00       	mov    esi,0x10
c001b34b:	eb 0d                	jmp    c001b35a <Reg::readInt(char*, char*, int*)+0x79>
c001b34d:	80 f9 62             	cmp    cl,0x62
c001b350:	75 08                	jne    c001b35a <Reg::readInt(char*, char*, int*)+0x79>
c001b352:	83 c2 02             	add    edx,0x2
c001b355:	be 02 00 00 00       	mov    esi,0x2
c001b35a:	01 d7                	add    edi,edx
c001b35c:	31 d2                	xor    edx,edx
c001b35e:	8a 1f                	mov    bl,BYTE PTR [edi]
c001b360:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c001b364:	80 fb 0d             	cmp    bl,0xd
c001b367:	0f 94 c3             	sete   bl
c001b36a:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001b36f:	0f 94 c1             	sete   cl
c001b372:	08 cb                	or     bl,cl
c001b374:	75 3a                	jne    c001b3b0 <Reg::readInt(char*, char*, int*)+0xcf>
c001b376:	0f af d6             	imul   edx,esi
c001b379:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c001b37e:	83 fe 10             	cmp    esi,0x10
c001b381:	75 26                	jne    c001b3a9 <Reg::readInt(char*, char*, int*)+0xc8>
c001b383:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001b387:	8d 69 bf             	lea    ebp,[ecx-0x41]
c001b38a:	89 e9                	mov    ecx,ebp
c001b38c:	80 f9 05             	cmp    cl,0x5
c001b38f:	77 06                	ja     c001b397 <Reg::readInt(char*, char*, int*)+0xb6>
c001b391:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c001b395:	eb 16                	jmp    c001b3ad <Reg::readInt(char*, char*, int*)+0xcc>
c001b397:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001b39b:	83 e9 61             	sub    ecx,0x61
c001b39e:	80 f9 05             	cmp    cl,0x5
c001b3a1:	77 06                	ja     c001b3a9 <Reg::readInt(char*, char*, int*)+0xc8>
c001b3a3:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c001b3a7:	eb 04                	jmp    c001b3ad <Reg::readInt(char*, char*, int*)+0xcc>
c001b3a9:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c001b3ad:	47                   	inc    edi
c001b3ae:	eb ae                	jmp    c001b35e <Reg::readInt(char*, char*, int*)+0x7d>
c001b3b0:	84 c0                	test   al,al
c001b3b2:	74 02                	je     c001b3b6 <Reg::readInt(char*, char*, int*)+0xd5>
c001b3b4:	f7 da                	neg    edx
c001b3b6:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c001b3bd:	89 10                	mov    DWORD PTR [eax],edx
c001b3bf:	88 d8                	mov    al,bl
c001b3c1:	81 c4 ec 00 00 00    	add    esp,0xec
c001b3c7:	5b                   	pop    ebx
c001b3c8:	5e                   	pop    esi
c001b3c9:	5f                   	pop    edi
c001b3ca:	5d                   	pop    ebp
c001b3cb:	c3                   	ret    

c001b3cc <Reg::readString(char*, char*, char*, int)>:
c001b3cc:	57                   	push   edi
c001b3cd:	56                   	push   esi
c001b3ce:	53                   	push   ebx
c001b3cf:	81 ec d4 00 00 00    	sub    esp,0xd4
c001b3d5:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c001b3dc:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c001b3e0:	57                   	push   edi
c001b3e1:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001b3e8:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001b3ef:	e8 b6 fe ff ff       	call   c001b2aa <Reg::getLine(char*, char*, char*)>
c001b3f4:	83 c4 10             	add    esp,0x10
c001b3f7:	89 c6                	mov    esi,eax
c001b3f9:	84 c0                	test   al,al
c001b3fb:	74 44                	je     c001b441 <Reg::readString(char*, char*, char*, int)+0x75>
c001b3fd:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c001b404:	31 c0                	xor    eax,eax
c001b406:	4a                   	dec    edx
c001b407:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c001b40a:	84 c9                	test   cl,cl
c001b40c:	74 0f                	je     c001b41d <Reg::readString(char*, char*, char*, int)+0x51>
c001b40e:	39 c2                	cmp    edx,eax
c001b410:	7e 0b                	jle    c001b41d <Reg::readString(char*, char*, char*, int)+0x51>
c001b412:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c001b415:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c001b41a:	40                   	inc    eax
c001b41b:	eb ea                	jmp    c001b407 <Reg::readString(char*, char*, char*, int)+0x3b>
c001b41d:	83 ec 0c             	sub    esp,0xc
c001b420:	53                   	push   ebx
c001b421:	e8 92 53 fe ff       	call   c00007b8 <strlen>
c001b426:	83 c4 10             	add    esp,0x10
c001b429:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c001b42e:	75 11                	jne    c001b441 <Reg::readString(char*, char*, char*, int)+0x75>
c001b430:	83 ec 0c             	sub    esp,0xc
c001b433:	53                   	push   ebx
c001b434:	e8 7f 53 fe ff       	call   c00007b8 <strlen>
c001b439:	83 c4 10             	add    esp,0x10
c001b43c:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001b441:	81 c4 d0 00 00 00    	add    esp,0xd0
c001b447:	89 f0                	mov    eax,esi
c001b449:	5b                   	pop    ebx
c001b44a:	5e                   	pop    esi
c001b44b:	5f                   	pop    edi
c001b44c:	c3                   	ret    

c001b44d <Reg::readBool(char*, char*, bool*)>:
c001b44d:	83 ec 20             	sub    esp,0x20
c001b450:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b454:	50                   	push   eax
c001b455:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b459:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b45d:	e8 7f fe ff ff       	call   c001b2e1 <Reg::readInt(char*, char*, int*)>
c001b462:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001b467:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001b46b:	0f 95 02             	setne  BYTE PTR [edx]
c001b46e:	83 c4 2c             	add    esp,0x2c
c001b471:	c3                   	ret    

c001b472 <Reg::readBoolWithDefault(char*, char*, bool)>:
c001b472:	53                   	push   ebx
c001b473:	83 ec 1c             	sub    esp,0x1c
c001b476:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001b47a:	8d 44 24 13          	lea    eax,[esp+0x13]
c001b47e:	50                   	push   eax
c001b47f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b483:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b487:	e8 c1 ff ff ff       	call   c001b44d <Reg::readBool(char*, char*, bool*)>
c001b48c:	83 c4 10             	add    esp,0x10
c001b48f:	84 c0                	test   al,al
c001b491:	74 04                	je     c001b497 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c001b493:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c001b497:	88 d8                	mov    al,bl
c001b499:	83 c4 18             	add    esp,0x18
c001b49c:	5b                   	pop    ebx
c001b49d:	c3                   	ret    

c001b49e <Reg::readIntWithDefault(char*, char*, int)>:
c001b49e:	53                   	push   ebx
c001b49f:	83 ec 1c             	sub    esp,0x1c
c001b4a2:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001b4a6:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b4aa:	50                   	push   eax
c001b4ab:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b4af:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b4b3:	e8 29 fe ff ff       	call   c001b2e1 <Reg::readInt(char*, char*, int*)>
c001b4b8:	83 c4 10             	add    esp,0x10
c001b4bb:	84 c0                	test   al,al
c001b4bd:	74 04                	je     c001b4c3 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c001b4bf:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001b4c3:	89 d8                	mov    eax,ebx
c001b4c5:	83 c4 18             	add    esp,0x18
c001b4c8:	5b                   	pop    ebx
c001b4c9:	c3                   	ret    

c001b4ca <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c001b4ca:	57                   	push   edi
c001b4cb:	56                   	push   esi
c001b4cc:	53                   	push   ebx
c001b4cd:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001b4d1:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001b4d5:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001b4d9:	56                   	push   esi
c001b4da:	53                   	push   ebx
c001b4db:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b4df:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b4e3:	e8 e4 fe ff ff       	call   c001b3cc <Reg::readString(char*, char*, char*, int)>
c001b4e8:	83 c4 10             	add    esp,0x10
c001b4eb:	84 c0                	test   al,al
c001b4ed:	75 1b                	jne    c001b50a <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x40>
c001b4ef:	50                   	push   eax
c001b4f0:	56                   	push   esi
c001b4f1:	4e                   	dec    esi
c001b4f2:	6a 00                	push   0x0
c001b4f4:	53                   	push   ebx
c001b4f5:	e8 a2 52 fe ff       	call   c000079c <memset>
c001b4fa:	83 c4 0c             	add    esp,0xc
c001b4fd:	56                   	push   esi
c001b4fe:	57                   	push   edi
c001b4ff:	53                   	push   ebx
c001b500:	89 fb                	mov    ebx,edi
c001b502:	e8 61 52 fe ff       	call   c0000768 <memcpy>
c001b507:	83 c4 10             	add    esp,0x10
c001b50a:	89 d8                	mov    eax,ebx
c001b50c:	5b                   	pop    ebx
c001b50d:	5e                   	pop    esi
c001b50e:	5f                   	pop    edi
c001b50f:	c3                   	ret    

c001b510 <Sys::eject(regs*)>:
c001b510:	83 ec 0c             	sub    esp,0xc
c001b513:	83 ca ff             	or     edx,0xffffffff
c001b516:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b51a:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c001b51d:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b522:	83 e9 41             	sub    ecx,0x41
c001b525:	83 f9 19             	cmp    ecx,0x19
c001b528:	77 18                	ja     c001b542 <Sys::eject(regs*)+0x32>
c001b52a:	8b 0c 8d 80 f4 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0b80]
c001b531:	85 c9                	test   ecx,ecx
c001b533:	74 0d                	je     c001b542 <Sys::eject(regs*)+0x32>
c001b535:	83 ec 0c             	sub    esp,0xc
c001b538:	51                   	push   ecx
c001b539:	e8 d4 b2 ff ff       	call   c0016812 <LogicalDisk::eject()>
c001b53e:	83 c4 10             	add    esp,0x10
c001b541:	99                   	cdq    
c001b542:	83 c4 0c             	add    esp,0xc
c001b545:	c3                   	ret    

c001b546 <Sys::exit(regs*)>:
c001b546:	83 ec 18             	sub    esp,0x18
c001b549:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b54d:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b550:	e8 90 38 00 00       	call   c001ede5 <terminateTask(int)>
c001b555:	83 c8 ff             	or     eax,0xffffffff
c001b558:	83 c4 1c             	add    esp,0x1c
c001b55b:	89 c2                	mov    edx,eax
c001b55d:	c3                   	ret    

c001b55e <Sys::getCwd(regs*)>:
c001b55e:	83 ec 10             	sub    esp,0x10
c001b561:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b565:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001b568:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b56b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b570:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b573:	e8 da 7c ff ff       	call   c0013252 <Fs::getcwd(Process*, char*, int)>
c001b578:	83 c4 1c             	add    esp,0x1c
c001b57b:	99                   	cdq    
c001b57c:	c3                   	ret    

c001b57d <Sys::getPID(regs*)>:
c001b57d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b582:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b585:	8b 00                	mov    eax,DWORD PTR [eax]
c001b587:	99                   	cdq    
c001b588:	c3                   	ret    

c001b589 <Sys::getRAMData(regs*)>:
c001b589:	8b 0d b4 ee 02 c0    	mov    ecx,DWORD PTR ds:0xc002eeb4
c001b58f:	6b 05 b0 ee 02 c0 64 	imul   eax,DWORD PTR ds:0xc002eeb0,0x64
c001b596:	99                   	cdq    
c001b597:	f7 f9                	idiv   ecx
c001b599:	c1 e0 18             	shl    eax,0x18
c001b59c:	09 c8                	or     eax,ecx
c001b59e:	99                   	cdq    
c001b59f:	c3                   	ret    

c001b5a0 <Sys::getVGAPtr(regs*)>:
c001b5a0:	56                   	push   esi
c001b5a1:	53                   	push   ebx
c001b5a2:	83 ec 10             	sub    esp,0x10
c001b5a5:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001b5a9:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001b5ac:	e8 16 33 00 00       	call   c001e8c7 <Thr::processFromPID(int)>
c001b5b1:	83 c4 10             	add    esp,0x10
c001b5b4:	89 c1                	mov    ecx,eax
c001b5b6:	b8 01 00 00 00       	mov    eax,0x1
c001b5bb:	85 c9                	test   ecx,ecx
c001b5bd:	74 5d                	je     c001b61c <Sys::getVGAPtr(regs*)+0x7c>
c001b5bf:	8b 99 26 05 00 00    	mov    ebx,DWORD PTR [ecx+0x526]
c001b5c5:	83 7e 24 00          	cmp    DWORD PTR [esi+0x24],0x0
c001b5c9:	74 0c                	je     c001b5d7 <Sys::getVGAPtr(regs*)+0x37>
c001b5cb:	83 ec 0c             	sub    esp,0xc
c001b5ce:	53                   	push   ebx
c001b5cf:	e8 38 57 ff ff       	call   c0010d0c <setActiveTerminal(VgaText*)>
c001b5d4:	83 c4 10             	add    esp,0x10
c001b5d7:	81 c3 82 00 00 00    	add    ebx,0x82
c001b5dd:	50                   	push   eax
c001b5de:	68 a0 0f 00 00       	push   0xfa0
c001b5e3:	ff 73 8a             	push   DWORD PTR [ebx-0x76]
c001b5e6:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001b5e9:	e8 7a 51 fe ff       	call   c0000768 <memcpy>
c001b5ee:	8b 53 92             	mov    edx,DWORD PTR [ebx-0x6e]
c001b5f1:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001b5f4:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c001b5fa:	8b 53 96             	mov    edx,DWORD PTR [ebx-0x6a]
c001b5fd:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001b600:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c001b606:	58                   	pop    eax
c001b607:	5a                   	pop    edx
c001b608:	53                   	push   ebx
c001b609:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001b60c:	05 a8 0f 00 00       	add    eax,0xfa8
c001b611:	50                   	push   eax
c001b612:	e8 41 52 fe ff       	call   c0000858 <strcpy>
c001b617:	83 c4 10             	add    esp,0x10
c001b61a:	31 c0                	xor    eax,eax
c001b61c:	59                   	pop    ecx
c001b61d:	31 d2                	xor    edx,edx
c001b61f:	5b                   	pop    ebx
c001b620:	5e                   	pop    esi
c001b621:	c3                   	ret    

c001b622 <Sys::loadDLL(regs*)>:
c001b622:	56                   	push   esi
c001b623:	53                   	push   ebx
c001b624:	31 d2                	xor    edx,edx
c001b626:	51                   	push   ecx
c001b627:	b8 01 00 00 00       	mov    eax,0x1
c001b62c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b630:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001b634:	0f 84 8c 00 00 00    	je     c001b6c6 <Sys::loadDLL(regs*)+0xa4>
c001b63a:	83 ec 0c             	sub    esp,0xc
c001b63d:	68 14 01 00 00       	push   0x114
c001b642:	e8 eb 42 ff ff       	call   c000f932 <malloc>
c001b647:	83 c4 0c             	add    esp,0xc
c001b64a:	89 c3                	mov    ebx,eax
c001b64c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b651:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b654:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001b657:	53                   	push   ebx
c001b658:	e8 f3 7d ff ff       	call   c0013450 <File::File(char const*, Process*)>
c001b65d:	83 c4 10             	add    esp,0x10
c001b660:	31 d2                	xor    edx,edx
c001b662:	b8 02 00 00 00       	mov    eax,0x2
c001b667:	85 db                	test   ebx,ebx
c001b669:	74 5b                	je     c001b6c6 <Sys::loadDLL(regs*)+0xa4>
c001b66b:	83 ec 0c             	sub    esp,0xc
c001b66e:	53                   	push   ebx
c001b66f:	e8 ae 80 ff ff       	call   c0013722 <File::exists()>
c001b674:	83 c4 10             	add    esp,0x10
c001b677:	84 c0                	test   al,al
c001b679:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b67b:	75 11                	jne    c001b68e <Sys::loadDLL(regs*)+0x6c>
c001b67d:	83 ec 0c             	sub    esp,0xc
c001b680:	53                   	push   ebx
c001b681:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b684:	83 c4 10             	add    esp,0x10
c001b687:	b8 03 00 00 00       	mov    eax,0x3
c001b68c:	eb 36                	jmp    c001b6c4 <Sys::loadDLL(regs*)+0xa2>
c001b68e:	83 ec 0c             	sub    esp,0xc
c001b691:	53                   	push   ebx
c001b692:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b695:	58                   	pop    eax
c001b696:	5a                   	pop    edx
c001b697:	6a 00                	push   0x0
c001b699:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001b69c:	e8 29 24 00 00       	call   c001daca <Thr::loadDLL(char const*, bool)>
c001b6a1:	83 c4 10             	add    esp,0x10
c001b6a4:	89 c1                	mov    ecx,eax
c001b6a6:	31 d2                	xor    edx,edx
c001b6a8:	b8 04 00 00 00       	mov    eax,0x4
c001b6ad:	85 c9                	test   ecx,ecx
c001b6af:	74 15                	je     c001b6c6 <Sys::loadDLL(regs*)+0xa4>
c001b6b1:	53                   	push   ebx
c001b6b2:	53                   	push   ebx
c001b6b3:	ff 35 68 ee 02 c0    	push   DWORD PTR ds:0xc002ee68
c001b6b9:	51                   	push   ecx
c001b6ba:	e8 3f 26 00 00       	call   c001dcfe <Thr::executeDLL(unsigned long, void*)>
c001b6bf:	83 c4 10             	add    esp,0x10
c001b6c2:	31 c0                	xor    eax,eax
c001b6c4:	31 d2                	xor    edx,edx
c001b6c6:	59                   	pop    ecx
c001b6c7:	5b                   	pop    ebx
c001b6c8:	5e                   	pop    esi
c001b6c9:	c3                   	ret    

c001b6ca <Sys::read(regs*)>:
c001b6ca:	57                   	push   edi
c001b6cb:	56                   	push   esi
c001b6cc:	53                   	push   ebx
c001b6cd:	83 ec 10             	sub    esp,0x10
c001b6d0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b6d4:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b6d7:	83 f8 02             	cmp    eax,0x2
c001b6da:	77 10                	ja     c001b6ec <Sys::read(regs*)+0x22>
c001b6dc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b6e1:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b6e4:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001b6ea:	eb 0e                	jmp    c001b6fa <Sys::read(regs*)+0x30>
c001b6ec:	83 ec 0c             	sub    esp,0xc
c001b6ef:	50                   	push   eax
c001b6f0:	e8 9a 62 ff ff       	call   c001198f <getFromFileDescriptor(int)>
c001b6f5:	83 c4 10             	add    esp,0x10
c001b6f8:	89 c1                	mov    ecx,eax
c001b6fa:	83 c8 ff             	or     eax,0xffffffff
c001b6fd:	85 c9                	test   ecx,ecx
c001b6ff:	89 c2                	mov    edx,eax
c001b701:	74 28                	je     c001b72b <Sys::read(regs*)+0x61>
c001b703:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b70b:	31 ff                	xor    edi,edi
c001b70d:	83 ec 0c             	sub    esp,0xc
c001b710:	8b 01                	mov    eax,DWORD PTR [ecx]
c001b712:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b716:	52                   	push   edx
c001b717:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b71a:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001b71d:	57                   	push   edi
c001b71e:	56                   	push   esi
c001b71f:	51                   	push   ecx
c001b720:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001b723:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b727:	83 c4 20             	add    esp,0x20
c001b72a:	99                   	cdq    
c001b72b:	83 c4 10             	add    esp,0x10
c001b72e:	5b                   	pop    ebx
c001b72f:	5e                   	pop    esi
c001b730:	5f                   	pop    edi
c001b731:	c3                   	ret    

c001b732 <Sys::sbrk(regs*)>:
c001b732:	56                   	push   esi
c001b733:	53                   	push   ebx
c001b734:	50                   	push   eax
c001b735:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b73a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b73e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b741:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c001b744:	8b 88 32 05 00 00    	mov    ecx,DWORD PTR [eax+0x532]
c001b74a:	85 db                	test   ebx,ebx
c001b74c:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c001b74f:	74 02                	je     c001b753 <Sys::sbrk(regs*)+0x21>
c001b751:	79 06                	jns    c001b759 <Sys::sbrk(regs*)+0x27>
c001b753:	89 f0                	mov    eax,esi
c001b755:	31 d2                	xor    edx,edx
c001b757:	eb 2a                	jmp    c001b783 <Sys::sbrk(regs*)+0x51>
c001b759:	83 c8 ff             	or     eax,0xffffffff
c001b75c:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c001b762:	89 c2                	mov    edx,eax
c001b764:	77 1d                	ja     c001b783 <Sys::sbrk(regs*)+0x51>
c001b766:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c001b76c:	50                   	push   eax
c001b76d:	c1 ea 0c             	shr    edx,0xc
c001b770:	68 07 0c 00 00       	push   0xc07
c001b775:	52                   	push   edx
c001b776:	51                   	push   ecx
c001b777:	e8 a6 6c ff ff       	call   c0012422 <VAS::allocatePages(int, int)>
c001b77c:	89 f0                	mov    eax,esi
c001b77e:	31 d2                	xor    edx,edx
c001b780:	83 c4 10             	add    esp,0x10
c001b783:	59                   	pop    ecx
c001b784:	5b                   	pop    ebx
c001b785:	5e                   	pop    esi
c001b786:	c3                   	ret    

c001b787 <Sys::setCwd(regs*)>:
c001b787:	83 ec 14             	sub    esp,0x14
c001b78a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b78e:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b791:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b796:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b799:	e8 23 80 ff ff       	call   c00137c1 <Fs::setcwd(Process*, char*)>
c001b79e:	83 c4 1c             	add    esp,0x1c
c001b7a1:	99                   	cdq    
c001b7a2:	c3                   	ret    

c001b7a3 <Sys::setTime(regs*)>:
c001b7a3:	55                   	push   ebp
c001b7a4:	31 d2                	xor    edx,edx
c001b7a6:	57                   	push   edi
c001b7a7:	bf 18 00 00 00       	mov    edi,0x18
c001b7ac:	56                   	push   esi
c001b7ad:	53                   	push   ebx
c001b7ae:	bb 3c 00 00 00       	mov    ebx,0x3c
c001b7b3:	83 ec 30             	sub    esp,0x30
c001b7b6:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c001b7ba:	8b 69 24             	mov    ebp,DWORD PTR [ecx+0x24]
c001b7bd:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001b7c0:	f7 f3                	div    ebx
c001b7c2:	89 d6                	mov    esi,edx
c001b7c4:	31 d2                	xor    edx,edx
c001b7c6:	f7 f3                	div    ebx
c001b7c8:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001b7cb:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001b7cf:	bb 10 0e 00 00       	mov    ebx,0xe10
c001b7d4:	31 d2                	xor    edx,edx
c001b7d6:	f7 f3                	div    ebx
c001b7d8:	31 d2                	xor    edx,edx
c001b7da:	bb 0c 00 00 00       	mov    ebx,0xc
c001b7df:	f7 f7                	div    edi
c001b7e1:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001b7e4:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001b7e8:	0f b7 cd             	movzx  ecx,bp
c001b7eb:	56                   	push   esi
c001b7ec:	89 c7                	mov    edi,eax
c001b7ee:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001b7f2:	c1 e6 10             	shl    esi,0x10
c001b7f5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b7f9:	83 e7 1f             	and    edi,0x1f
c001b7fc:	51                   	push   ecx
c001b7fd:	47                   	inc    edi
c001b7fe:	c1 e8 05             	shr    eax,0x5
c001b801:	31 d2                	xor    edx,edx
c001b803:	f7 f3                	div    ebx
c001b805:	31 db                	xor    ebx,ebx
c001b807:	52                   	push   edx
c001b808:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001b80c:	57                   	push   edi
c001b80d:	68 0d c7 02 c0       	push   0xc002c70d
c001b812:	e8 da 76 ff ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c001b817:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001b81b:	89 f8                	mov    eax,edi
c001b81d:	31 c9                	xor    ecx,ecx
c001b81f:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001b823:	88 c1                	mov    cl,al
c001b825:	8d 85 94 f8 ff ff    	lea    eax,[ebp-0x76c]
c001b82b:	88 d5                	mov    ch,dl
c001b82d:	c1 e0 10             	shl    eax,0x10
c001b830:	0f b7 d1             	movzx  edx,cx
c001b833:	09 c2                	or     edx,eax
c001b835:	89 d8                	mov    eax,ebx
c001b837:	25 ff ff 00 ff       	and    eax,0xff00ffff
c001b83c:	09 f0                	or     eax,esi
c001b83e:	89 c3                	mov    ebx,eax
c001b840:	8a 7c 24 20          	mov    bh,BYTE PTR [esp+0x20]
c001b844:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001b848:	83 c4 18             	add    esp,0x18
c001b84b:	53                   	push   ebx
c001b84c:	52                   	push   edx
c001b84d:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001b851:	8d 74 24 28          	lea    esi,[esp+0x28]
c001b855:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001b859:	e8 85 86 ff ff       	call   c0013ee3 <datetimeToSeconds(datetime_t)>
c001b85e:	83 c4 0c             	add    esp,0xc
c001b861:	52                   	push   edx
c001b862:	50                   	push   eax
c001b863:	56                   	push   esi
c001b864:	e8 01 88 ff ff       	call   c001406a <secondsToDatetime(unsigned long long)>
c001b869:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b86d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b871:	51                   	push   ecx
c001b872:	89 d6                	mov    esi,edx
c001b874:	51                   	push   ecx
c001b875:	c1 ee 10             	shr    esi,0x10
c001b878:	89 f3                	mov    ebx,esi
c001b87a:	0f b6 f3             	movzx  esi,bl
c001b87d:	56                   	push   esi
c001b87e:	0f b6 f6             	movzx  esi,dh
c001b881:	0f b6 d2             	movzx  edx,dl
c001b884:	56                   	push   esi
c001b885:	52                   	push   edx
c001b886:	89 c2                	mov    edx,eax
c001b888:	c1 ea 10             	shr    edx,0x10
c001b88b:	52                   	push   edx
c001b88c:	0f b6 d4             	movzx  edx,ah
c001b88f:	0f b6 c0             	movzx  eax,al
c001b892:	52                   	push   edx
c001b893:	50                   	push   eax
c001b894:	68 29 c7 02 c0       	push   0xc002c729
c001b899:	e8 53 76 ff ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c001b89e:	83 c4 2c             	add    esp,0x2c
c001b8a1:	a1 68 ee 02 c0       	mov    eax,ds:0xc002ee68
c001b8a6:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001b8aa:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001b8ae:	53                   	push   ebx
c001b8af:	51                   	push   ecx
c001b8b0:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001b8b6:	e8 4f 87 ff ff       	call   c001400a <Clock::setTimeInDatetimeLocal(datetime_t)>
c001b8bb:	83 f0 01             	xor    eax,0x1
c001b8be:	31 d2                	xor    edx,edx
c001b8c0:	0f b6 c0             	movzx  eax,al
c001b8c3:	83 c4 3c             	add    esp,0x3c
c001b8c6:	5b                   	pop    ebx
c001b8c7:	5e                   	pop    esi
c001b8c8:	5f                   	pop    edi
c001b8c9:	5d                   	pop    ebp
c001b8ca:	c3                   	ret    

c001b8cb <Sys::timezone(regs*)>:
c001b8cb:	53                   	push   ebx
c001b8cc:	83 ec 08             	sub    esp,0x8
c001b8cf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b8d3:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c001b8d7:	75 17                	jne    c001b8f0 <Sys::timezone(regs*)+0x25>
c001b8d9:	83 ec 0c             	sub    esp,0xc
c001b8dc:	68 45 c7 02 c0       	push   0xc002c745
c001b8e1:	e8 0b 76 ff ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c001b8e6:	83 c8 ff             	or     eax,0xffffffff
c001b8e9:	83 c4 10             	add    esp,0x10
c001b8ec:	89 c2                	mov    edx,eax
c001b8ee:	eb 20                	jmp    c001b910 <Sys::timezone(regs*)+0x45>
c001b8f0:	83 ec 0c             	sub    esp,0xc
c001b8f3:	68 7d c7 02 c0       	push   0xc002c77d
c001b8f8:	e8 f4 75 ff ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c001b8fd:	58                   	pop    eax
c001b8fe:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001b901:	e8 66 84 ff ff       	call   c0013d6c <User::loadClockSettings(int)>
c001b906:	83 c4 10             	add    esp,0x10
c001b909:	b8 01 00 00 00       	mov    eax,0x1
c001b90e:	31 d2                	xor    edx,edx
c001b910:	83 c4 08             	add    esp,0x8
c001b913:	5b                   	pop    ebx
c001b914:	c3                   	ret    

c001b915 <Sys::write(regs*)>:
c001b915:	57                   	push   edi
c001b916:	56                   	push   esi
c001b917:	53                   	push   ebx
c001b918:	83 ec 10             	sub    esp,0x10
c001b91b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b91f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b922:	83 f8 02             	cmp    eax,0x2
c001b925:	77 10                	ja     c001b937 <Sys::write(regs*)+0x22>
c001b927:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b92c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b92f:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001b935:	eb 0e                	jmp    c001b945 <Sys::write(regs*)+0x30>
c001b937:	83 ec 0c             	sub    esp,0xc
c001b93a:	50                   	push   eax
c001b93b:	e8 4f 60 ff ff       	call   c001198f <getFromFileDescriptor(int)>
c001b940:	83 c4 10             	add    esp,0x10
c001b943:	89 c1                	mov    ecx,eax
c001b945:	83 c8 ff             	or     eax,0xffffffff
c001b948:	85 c9                	test   ecx,ecx
c001b94a:	89 c2                	mov    edx,eax
c001b94c:	74 28                	je     c001b976 <Sys::write(regs*)+0x61>
c001b94e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b956:	31 ff                	xor    edi,edi
c001b958:	83 ec 0c             	sub    esp,0xc
c001b95b:	8b 01                	mov    eax,DWORD PTR [ecx]
c001b95d:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b961:	52                   	push   edx
c001b962:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b965:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001b968:	57                   	push   edi
c001b969:	56                   	push   esi
c001b96a:	51                   	push   ecx
c001b96b:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001b96e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b972:	83 c4 20             	add    esp,0x20
c001b975:	99                   	cdq    
c001b976:	83 c4 10             	add    esp,0x10
c001b979:	5b                   	pop    ebx
c001b97a:	5e                   	pop    esi
c001b97b:	5f                   	pop    edi
c001b97c:	c3                   	ret    

c001b97d <Sys::wsbe(regs*)>:
c001b97d:	57                   	push   edi
c001b97e:	b9 0b 00 00 00       	mov    ecx,0xb
c001b983:	56                   	push   esi
c001b984:	be bc c7 02 c0       	mov    esi,0xc002c7bc
c001b989:	53                   	push   ebx
c001b98a:	83 ec 30             	sub    esp,0x30
c001b98d:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001b991:	fc                   	cld    
c001b992:	83 ec 0c             	sub    esp,0xc
c001b995:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b997:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001b99b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b9a0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b9a3:	8b b0 26 05 00 00    	mov    esi,DWORD PTR [eax+0x526]
c001b9a9:	8b 06                	mov    eax,DWORD PTR [esi]
c001b9ab:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001b9ae:	57                   	push   edi
c001b9af:	e8 04 4e fe ff       	call   c00007b8 <strlen>
c001b9b4:	5a                   	pop    edx
c001b9b5:	8d 54 24 0c          	lea    edx,[esp+0xc]
c001b9b9:	52                   	push   edx
c001b9ba:	31 d2                	xor    edx,edx
c001b9bc:	57                   	push   edi
c001b9bd:	52                   	push   edx
c001b9be:	50                   	push   eax
c001b9bf:	56                   	push   esi
c001b9c0:	ff d3                	call   ebx
c001b9c2:	83 c4 14             	add    esp,0x14
c001b9c5:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001b9c9:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b9cc:	e8 14 34 00 00       	call   c001ede5 <terminateTask(int)>
c001b9d1:	83 c4 40             	add    esp,0x40
c001b9d4:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001b9d9:	5b                   	pop    ebx
c001b9da:	31 d2                	xor    edx,edx
c001b9dc:	5e                   	pop    esi
c001b9dd:	5f                   	pop    edi
c001b9de:	c3                   	ret    

c001b9df <Sys::yield(regs*)>:
c001b9df:	57                   	push   edi
c001b9e0:	56                   	push   esi
c001b9e1:	53                   	push   ebx
c001b9e2:	fa                   	cli    
c001b9e3:	ff 05 a8 23 03 c0    	inc    DWORD PTR ds:0xc00323a8
c001b9e9:	e8 c4 2a 00 00       	call   c001e4b2 <schedule()>
c001b9ee:	a1 a8 23 03 c0       	mov    eax,ds:0xc00323a8
c001b9f3:	48                   	dec    eax
c001b9f4:	a3 a8 23 03 c0       	mov    ds:0xc00323a8,eax
c001b9f9:	75 01                	jne    c001b9fc <Sys::yield(regs*)+0x1d>
c001b9fb:	fb                   	sti    
c001b9fc:	8b 35 f0 f4 02 c0    	mov    esi,DWORD PTR ds:0xc002f4f0
c001ba02:	8b 3d f4 f4 02 c0    	mov    edi,DWORD PTR ds:0xc002f4f4
c001ba08:	89 f0                	mov    eax,esi
c001ba0a:	89 fb                	mov    ebx,edi
c001ba0c:	89 f1                	mov    ecx,esi
c001ba0e:	c1 e0 07             	shl    eax,0x7
c001ba11:	0f ac d9 17          	shrd   ecx,ebx,0x17
c001ba15:	25 80 30 0f 00       	and    eax,0xf3080
c001ba1a:	c1 eb 17             	shr    ebx,0x17
c001ba1d:	31 c8                	xor    eax,ecx
c001ba1f:	89 da                	mov    edx,ebx
c001ba21:	5b                   	pop    ebx
c001ba22:	5e                   	pop    esi
c001ba23:	5f                   	pop    edi
c001ba24:	c3                   	ret    

c001ba25 <sysCallSeekDir(regs*)>:
c001ba25:	31 c0                	xor    eax,eax
c001ba27:	31 d2                	xor    edx,edx
c001ba29:	c3                   	ret    

c001ba2a <sysCallTellDir(regs*)>:
c001ba2a:	31 c0                	xor    eax,eax
c001ba2c:	31 d2                	xor    edx,edx
c001ba2e:	c3                   	ret    

c001ba2f <sysCallVerify(regs*)>:
c001ba2f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ba33:	31 d2                	xor    edx,edx
c001ba35:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001ba38:	c3                   	ret    

c001ba39 <sysFormatDisk(regs*)>:
c001ba39:	56                   	push   esi
c001ba3a:	53                   	push   ebx
c001ba3b:	53                   	push   ebx
c001ba3c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ba40:	8b 1d f4 ef 02 c0    	mov    ebx,DWORD PTR ds:0xc002eff4
c001ba46:	eb 25                	jmp    c001ba6d <sysFormatDisk(regs*)+0x34>
c001ba48:	83 ec 0c             	sub    esp,0xc
c001ba4b:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001ba4e:	8b 13                	mov    edx,DWORD PTR [ebx]
c001ba50:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001ba53:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001ba56:	50                   	push   eax
c001ba57:	ff 34 85 80 f4 02 c0 	push   DWORD PTR [eax*4-0x3ffd0b80]
c001ba5e:	53                   	push   ebx
c001ba5f:	ff 52 48             	call   DWORD PTR [edx+0x48]
c001ba62:	83 c4 20             	add    esp,0x20
c001ba65:	83 f8 08             	cmp    eax,0x8
c001ba68:	75 12                	jne    c001ba7c <sysFormatDisk(regs*)+0x43>
c001ba6a:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001ba6d:	85 db                	test   ebx,ebx
c001ba6f:	75 d7                	jne    c001ba48 <sysFormatDisk(regs*)+0xf>
c001ba71:	59                   	pop    ecx
c001ba72:	b8 03 00 00 00       	mov    eax,0x3
c001ba77:	31 d2                	xor    edx,edx
c001ba79:	5b                   	pop    ebx
c001ba7a:	5e                   	pop    esi
c001ba7b:	c3                   	ret    
c001ba7c:	85 c0                	test   eax,eax
c001ba7e:	74 1b                	je     c001ba9b <sysFormatDisk(regs*)+0x62>
c001ba80:	83 f8 09             	cmp    eax,0x9
c001ba83:	74 0b                	je     c001ba90 <sysFormatDisk(regs*)+0x57>
c001ba85:	59                   	pop    ecx
c001ba86:	b8 02 00 00 00       	mov    eax,0x2
c001ba8b:	31 d2                	xor    edx,edx
c001ba8d:	5b                   	pop    ebx
c001ba8e:	5e                   	pop    esi
c001ba8f:	c3                   	ret    
c001ba90:	59                   	pop    ecx
c001ba91:	b8 01 00 00 00       	mov    eax,0x1
c001ba96:	31 d2                	xor    edx,edx
c001ba98:	5b                   	pop    ebx
c001ba99:	5e                   	pop    esi
c001ba9a:	c3                   	ret    
c001ba9b:	59                   	pop    ecx
c001ba9c:	31 c0                	xor    eax,eax
c001ba9e:	31 d2                	xor    edx,edx
c001baa0:	5b                   	pop    ebx
c001baa1:	5e                   	pop    esi
c001baa2:	c3                   	ret    

c001baa3 <sysSetDiskVolumeLabel(regs*)>:
c001baa3:	56                   	push   esi
c001baa4:	53                   	push   ebx
c001baa5:	53                   	push   ebx
c001baa6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001baaa:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001baad:	83 f8 19             	cmp    eax,0x19
c001bab0:	77 29                	ja     c001badb <sysSetDiskVolumeLabel(regs*)+0x38>
c001bab2:	8b 0c 85 80 f4 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd0b80]
c001bab9:	85 c9                	test   ecx,ecx
c001babb:	74 1e                	je     c001badb <sysSetDiskVolumeLabel(regs*)+0x38>
c001babd:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c001bac0:	85 d2                	test   edx,edx
c001bac2:	74 17                	je     c001badb <sysSetDiskVolumeLabel(regs*)+0x38>
c001bac4:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c001baca:	8b 33                	mov    esi,DWORD PTR [ebx]
c001bacc:	52                   	push   edx
c001bacd:	50                   	push   eax
c001bace:	51                   	push   ecx
c001bacf:	53                   	push   ebx
c001bad0:	ff 56 58             	call   DWORD PTR [esi+0x58]
c001bad3:	83 c4 10             	add    esp,0x10
c001bad6:	99                   	cdq    
c001bad7:	59                   	pop    ecx
c001bad8:	5b                   	pop    ebx
c001bad9:	5e                   	pop    esi
c001bada:	c3                   	ret    
c001badb:	59                   	pop    ecx
c001badc:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001bae1:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bae6:	5b                   	pop    ebx
c001bae7:	5e                   	pop    esi
c001bae8:	c3                   	ret    

c001bae9 <sysGetDiskVolumeLabel(regs*)>:
c001bae9:	57                   	push   edi
c001baea:	56                   	push   esi
c001baeb:	53                   	push   ebx
c001baec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001baf0:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001baf3:	83 fa 19             	cmp    edx,0x19
c001baf6:	77 34                	ja     c001bb2c <sysGetDiskVolumeLabel(regs*)+0x43>
c001baf8:	8b 0c 95 80 f4 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd0b80]
c001baff:	85 c9                	test   ecx,ecx
c001bb01:	74 29                	je     c001bb2c <sysGetDiskVolumeLabel(regs*)+0x43>
c001bb03:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001bb06:	85 db                	test   ebx,ebx
c001bb08:	74 22                	je     c001bb2c <sysGetDiskVolumeLabel(regs*)+0x43>
c001bb0a:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001bb0d:	85 c0                	test   eax,eax
c001bb0f:	74 1b                	je     c001bb2c <sysGetDiskVolumeLabel(regs*)+0x43>
c001bb11:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c001bb17:	83 ec 0c             	sub    esp,0xc
c001bb1a:	8b 3e                	mov    edi,DWORD PTR [esi]
c001bb1c:	50                   	push   eax
c001bb1d:	53                   	push   ebx
c001bb1e:	52                   	push   edx
c001bb1f:	51                   	push   ecx
c001bb20:	56                   	push   esi
c001bb21:	ff 57 54             	call   DWORD PTR [edi+0x54]
c001bb24:	83 c4 20             	add    esp,0x20
c001bb27:	99                   	cdq    
c001bb28:	5b                   	pop    ebx
c001bb29:	5e                   	pop    esi
c001bb2a:	5f                   	pop    edi
c001bb2b:	c3                   	ret    
c001bb2c:	5b                   	pop    ebx
c001bb2d:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001bb32:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bb37:	5e                   	pop    esi
c001bb38:	5f                   	pop    edi
c001bb39:	c3                   	ret    

c001bb3a <sysShutdown(regs*)>:
c001bb3a:	83 ec 0c             	sub    esp,0xc
c001bb3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb41:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001bb44:	85 c0                	test   eax,eax
c001bb46:	74 18                	je     c001bb60 <sysShutdown(regs*)+0x26>
c001bb48:	83 f8 01             	cmp    eax,0x1
c001bb4b:	74 38                	je     c001bb85 <sysShutdown(regs*)+0x4b>
c001bb4d:	83 f8 02             	cmp    eax,0x2
c001bb50:	74 24                	je     c001bb76 <sysShutdown(regs*)+0x3c>
c001bb52:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bb57:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bb5c:	83 c4 0c             	add    esp,0xc
c001bb5f:	c3                   	ret    
c001bb60:	a1 68 ee 02 c0       	mov    eax,ds:0xc002ee68
c001bb65:	8b 10                	mov    edx,DWORD PTR [eax]
c001bb67:	6a 00                	push   0x0
c001bb69:	6a 00                	push   0x0
c001bb6b:	6a 00                	push   0x0
c001bb6d:	50                   	push   eax
c001bb6e:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001bb71:	83 c4 10             	add    esp,0x10
c001bb74:	eb dc                	jmp    c001bb52 <sysShutdown(regs*)+0x18>
c001bb76:	a1 68 ee 02 c0       	mov    eax,ds:0xc002ee68
c001bb7b:	8b 10                	mov    edx,DWORD PTR [eax]
c001bb7d:	6a 00                	push   0x0
c001bb7f:	6a 00                	push   0x0
c001bb81:	6a 01                	push   0x1
c001bb83:	eb e8                	jmp    c001bb6d <sysShutdown(regs*)+0x33>
c001bb85:	a1 20 15 03 c0       	mov    eax,ds:0xc0031520
c001bb8a:	85 c0                	test   eax,eax
c001bb8c:	74 02                	je     c001bb90 <sysShutdown(regs*)+0x56>
c001bb8e:	ff d0                	call   eax
c001bb90:	31 c0                	xor    eax,eax
c001bb92:	31 d2                	xor    edx,edx
c001bb94:	83 c4 0c             	add    esp,0xc
c001bb97:	c3                   	ret    

c001bb98 <sysCallRealpath(regs*)>:
c001bb98:	83 ec 0c             	sub    esp,0xc
c001bb9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb9f:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001bba2:	85 d2                	test   edx,edx
c001bba4:	74 07                	je     c001bbad <sysCallRealpath(regs*)+0x15>
c001bba6:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001bba9:	85 c0                	test   eax,eax
c001bbab:	75 0b                	jne    c001bbb8 <sysCallRealpath(regs*)+0x20>
c001bbad:	b8 01 00 00 00       	mov    eax,0x1
c001bbb2:	31 d2                	xor    edx,edx
c001bbb4:	83 c4 0c             	add    esp,0xc
c001bbb7:	c3                   	ret    
c001bbb8:	51                   	push   ecx
c001bbb9:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001bbbf:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001bbc2:	81 c1 0c 01 00 00    	add    ecx,0x10c
c001bbc8:	51                   	push   ecx
c001bbc9:	52                   	push   edx
c001bbca:	50                   	push   eax
c001bbcb:	e8 d6 76 ff ff       	call   c00132a6 <Fs::standardiseFiles(char*, char const*, char const*)>
c001bbd0:	83 c4 10             	add    esp,0x10
c001bbd3:	31 c0                	xor    eax,eax
c001bbd5:	31 d2                	xor    edx,edx
c001bbd7:	83 c4 0c             	add    esp,0xc
c001bbda:	c3                   	ret    

c001bbdb <sysCallGetArgc(regs*)>:
c001bbdb:	83 ec 14             	sub    esp,0x14
c001bbde:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bbe3:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bbe6:	ff b0 36 05 00 00    	push   DWORD PTR [eax+0x536]
c001bbec:	68 e8 c7 02 c0       	push   0xc002c7e8
c001bbf1:	e8 fb 72 ff ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c001bbf6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bbfb:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bbfe:	8b 80 36 05 00 00    	mov    eax,DWORD PTR [eax+0x536]
c001bc04:	83 c4 1c             	add    esp,0x1c
c001bc07:	99                   	cdq    
c001bc08:	c3                   	ret    

c001bc09 <sysCallReadDir(regs*)>:
c001bc09:	53                   	push   ebx
c001bc0a:	83 ec 18             	sub    esp,0x18
c001bc0d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001bc11:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001bc14:	83 f8 02             	cmp    eax,0x2
c001bc17:	76 53                	jbe    c001bc6c <sysCallReadDir(regs*)+0x63>
c001bc19:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001bc1c:	81 fa 00 ff ff 0f    	cmp    edx,0xfffff00
c001bc22:	77 4f                	ja     c001bc73 <sysCallReadDir(regs*)+0x6a>
c001bc24:	83 ec 0c             	sub    esp,0xc
c001bc27:	50                   	push   eax
c001bc28:	e8 62 5d ff ff       	call   c001198f <getFromFileDescriptor(int)>
c001bc2d:	83 c4 10             	add    esp,0x10
c001bc30:	85 c0                	test   eax,eax
c001bc32:	74 50                	je     c001bc84 <sysCallReadDir(regs*)+0x7b>
c001bc34:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001bc3c:	83 ec 0c             	sub    esp,0xc
c001bc3f:	8b 10                	mov    edx,DWORD PTR [eax]
c001bc41:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001bc45:	51                   	push   ecx
c001bc46:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bc49:	6a 00                	push   0x0
c001bc4b:	68 10 01 00 00       	push   0x110
c001bc50:	50                   	push   eax
c001bc51:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001bc54:	83 c4 20             	add    esp,0x20
c001bc57:	85 c0                	test   eax,eax
c001bc59:	74 38                	je     c001bc93 <sysCallReadDir(regs*)+0x8a>
c001bc5b:	83 f8 07             	cmp    eax,0x7
c001bc5e:	74 0c                	je     c001bc6c <sysCallReadDir(regs*)+0x63>
c001bc60:	b8 02 00 00 00       	mov    eax,0x2
c001bc65:	31 d2                	xor    edx,edx
c001bc67:	83 c4 18             	add    esp,0x18
c001bc6a:	5b                   	pop    ebx
c001bc6b:	c3                   	ret    
c001bc6c:	b8 01 00 00 00       	mov    eax,0x1
c001bc71:	eb f2                	jmp    c001bc65 <sysCallReadDir(regs*)+0x5c>
c001bc73:	83 ec 08             	sub    esp,0x8
c001bc76:	52                   	push   edx
c001bc77:	68 0c c9 02 c0       	push   0xc002c90c
c001bc7c:	e8 70 72 ff ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c001bc81:	83 c4 10             	add    esp,0x10
c001bc84:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bc89:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bc8e:	83 c4 18             	add    esp,0x18
c001bc91:	5b                   	pop    ebx
c001bc92:	c3                   	ret    
c001bc93:	31 c0                	xor    eax,eax
c001bc95:	eb ce                	jmp    c001bc65 <sysCallReadDir(regs*)+0x5c>

c001bc97 <sysCallIsATTY(regs*)>:
c001bc97:	83 ec 0c             	sub    esp,0xc
c001bc9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bc9e:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001bca1:	83 f8 02             	cmp    eax,0x2
c001bca4:	76 07                	jbe    c001bcad <sysCallIsATTY(regs*)+0x16>
c001bca6:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001bcab:	75 26                	jne    c001bcd3 <sysCallIsATTY(regs*)+0x3c>
c001bcad:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bcb2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bcb5:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001bcbb:	85 c0                	test   eax,eax
c001bcbd:	74 24                	je     c001bce3 <sysCallIsATTY(regs*)+0x4c>
c001bcbf:	83 ec 0c             	sub    esp,0xc
c001bcc2:	8b 10                	mov    edx,DWORD PTR [eax]
c001bcc4:	50                   	push   eax
c001bcc5:	ff 12                	call   DWORD PTR [edx]
c001bcc7:	31 d2                	xor    edx,edx
c001bcc9:	0f b6 c0             	movzx  eax,al
c001bccc:	83 c4 10             	add    esp,0x10
c001bccf:	83 c4 0c             	add    esp,0xc
c001bcd2:	c3                   	ret    
c001bcd3:	83 ec 0c             	sub    esp,0xc
c001bcd6:	50                   	push   eax
c001bcd7:	e8 b3 5c ff ff       	call   c001198f <getFromFileDescriptor(int)>
c001bcdc:	83 c4 10             	add    esp,0x10
c001bcdf:	85 c0                	test   eax,eax
c001bce1:	75 dc                	jne    c001bcbf <sysCallIsATTY(regs*)+0x28>
c001bce3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bce8:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bced:	83 c4 0c             	add    esp,0xc
c001bcf0:	c3                   	ret    

c001bcf1 <sysCallSeek(regs*)>:
c001bcf1:	53                   	push   ebx
c001bcf2:	83 ec 08             	sub    esp,0x8
c001bcf5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bcf9:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001bcfc:	83 f8 02             	cmp    eax,0x2
c001bcff:	76 4a                	jbe    c001bd4b <sysCallSeek(regs*)+0x5a>
c001bd01:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bd06:	77 32                	ja     c001bd3a <sysCallSeek(regs*)+0x49>
c001bd08:	83 ec 0c             	sub    esp,0xc
c001bd0b:	50                   	push   eax
c001bd0c:	e8 7e 5c ff ff       	call   c001198f <getFromFileDescriptor(int)>
c001bd11:	83 c4 0c             	add    esp,0xc
c001bd14:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001bd17:	31 db                	xor    ebx,ebx
c001bd19:	53                   	push   ebx
c001bd1a:	51                   	push   ecx
c001bd1b:	50                   	push   eax
c001bd1c:	e8 51 78 ff ff       	call   c0013572 <File::seek(unsigned long long)>
c001bd21:	83 c4 10             	add    esp,0x10
c001bd24:	85 c0                	test   eax,eax
c001bd26:	0f 95 c0             	setne  al
c001bd29:	31 d2                	xor    edx,edx
c001bd2b:	0f b6 c0             	movzx  eax,al
c001bd2e:	f7 d8                	neg    eax
c001bd30:	83 d2 00             	adc    edx,0x0
c001bd33:	83 c4 08             	add    esp,0x8
c001bd36:	f7 da                	neg    edx
c001bd38:	5b                   	pop    ebx
c001bd39:	c3                   	ret    
c001bd3a:	83 ec 08             	sub    esp,0x8
c001bd3d:	50                   	push   eax
c001bd3e:	68 f3 c7 02 c0       	push   0xc002c7f3
c001bd43:	e8 a9 71 ff ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c001bd48:	83 c4 10             	add    esp,0x10
c001bd4b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bd50:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bd55:	83 c4 08             	add    esp,0x8
c001bd58:	5b                   	pop    ebx
c001bd59:	c3                   	ret    

c001bd5a <sysCallTell(regs*)>:
c001bd5a:	53                   	push   ebx
c001bd5b:	83 ec 08             	sub    esp,0x8
c001bd5e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bd62:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001bd65:	83 f8 02             	cmp    eax,0x2
c001bd68:	76 5e                	jbe    c001bdc8 <sysCallTell(regs*)+0x6e>
c001bd6a:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bd6f:	77 2d                	ja     c001bd9e <sysCallTell(regs*)+0x44>
c001bd71:	83 ec 0c             	sub    esp,0xc
c001bd74:	50                   	push   eax
c001bd75:	e8 15 5c ff ff       	call   c001198f <getFromFileDescriptor(int)>
c001bd7a:	5a                   	pop    edx
c001bd7b:	59                   	pop    ecx
c001bd7c:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001bd7f:	50                   	push   eax
c001bd80:	e8 43 78 ff ff       	call   c00135c8 <File::tell(unsigned long long*)>
c001bd85:	83 c4 10             	add    esp,0x10
c001bd88:	85 c0                	test   eax,eax
c001bd8a:	0f 95 c0             	setne  al
c001bd8d:	31 d2                	xor    edx,edx
c001bd8f:	0f b6 c0             	movzx  eax,al
c001bd92:	f7 d8                	neg    eax
c001bd94:	83 d2 00             	adc    edx,0x0
c001bd97:	83 c4 08             	add    esp,0x8
c001bd9a:	f7 da                	neg    edx
c001bd9c:	5b                   	pop    ebx
c001bd9d:	c3                   	ret    
c001bd9e:	83 ec 08             	sub    esp,0x8
c001bda1:	50                   	push   eax
c001bda2:	68 0d c8 02 c0       	push   0xc002c80d
c001bda7:	e8 45 71 ff ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c001bdac:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001bdaf:	83 c4 10             	add    esp,0x10
c001bdb2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001bdb8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bdbf:	31 d2                	xor    edx,edx
c001bdc1:	31 c0                	xor    eax,eax
c001bdc3:	83 c4 08             	add    esp,0x8
c001bdc6:	5b                   	pop    ebx
c001bdc7:	c3                   	ret    
c001bdc8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bdcd:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bdd2:	83 c4 08             	add    esp,0x8
c001bdd5:	5b                   	pop    ebx
c001bdd6:	c3                   	ret    

c001bdd7 <sysCallSize(regs*)>:
c001bdd7:	53                   	push   ebx
c001bdd8:	83 ec 18             	sub    esp,0x18
c001bddb:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001bddf:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001bde2:	83 f8 02             	cmp    eax,0x2
c001bde5:	76 64                	jbe    c001be4b <sysCallSize(regs*)+0x74>
c001bde7:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bdec:	77 33                	ja     c001be21 <sysCallSize(regs*)+0x4a>
c001bdee:	83 ec 0c             	sub    esp,0xc
c001bdf1:	50                   	push   eax
c001bdf2:	e8 98 5b ff ff       	call   c001198f <getFromFileDescriptor(int)>
c001bdf7:	83 c4 0c             	add    esp,0xc
c001bdfa:	8d 54 24 13          	lea    edx,[esp+0x13]
c001bdfe:	52                   	push   edx
c001bdff:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001be02:	50                   	push   eax
c001be03:	e8 58 79 ff ff       	call   c0013760 <File::stat(unsigned long long*, bool*)>
c001be08:	83 c4 10             	add    esp,0x10
c001be0b:	85 c0                	test   eax,eax
c001be0d:	0f 95 c0             	setne  al
c001be10:	31 d2                	xor    edx,edx
c001be12:	0f b6 c0             	movzx  eax,al
c001be15:	f7 d8                	neg    eax
c001be17:	83 d2 00             	adc    edx,0x0
c001be1a:	83 c4 18             	add    esp,0x18
c001be1d:	f7 da                	neg    edx
c001be1f:	5b                   	pop    ebx
c001be20:	c3                   	ret    
c001be21:	83 ec 08             	sub    esp,0x8
c001be24:	50                   	push   eax
c001be25:	68 27 c8 02 c0       	push   0xc002c827
c001be2a:	e8 c2 70 ff ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c001be2f:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001be32:	83 c4 10             	add    esp,0x10
c001be35:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001be3b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001be42:	31 d2                	xor    edx,edx
c001be44:	31 c0                	xor    eax,eax
c001be46:	83 c4 18             	add    esp,0x18
c001be49:	5b                   	pop    ebx
c001be4a:	c3                   	ret    
c001be4b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001be50:	ba ff ff ff ff       	mov    edx,0xffffffff
c001be55:	83 c4 18             	add    esp,0x18
c001be58:	5b                   	pop    ebx
c001be59:	c3                   	ret    

c001be5a <sysCallSizeFromFilename(regs*)>:
c001be5a:	57                   	push   edi
c001be5b:	56                   	push   esi
c001be5c:	53                   	push   ebx
c001be5d:	83 ec 20             	sub    esp,0x20
c001be60:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001be64:	8b 5f 20             	mov    ebx,DWORD PTR [edi+0x20]
c001be67:	83 fb 02             	cmp    ebx,0x2
c001be6a:	0f 86 99 00 00 00    	jbe    c001bf09 <sysCallSizeFromFilename(regs*)+0xaf>
c001be70:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001be76:	77 65                	ja     c001bedd <sysCallSizeFromFilename(regs*)+0x83>
c001be78:	83 ec 0c             	sub    esp,0xc
c001be7b:	68 14 01 00 00       	push   0x114
c001be80:	e8 ad 3a ff ff       	call   c000f932 <malloc>
c001be85:	83 c4 0c             	add    esp,0xc
c001be88:	89 c6                	mov    esi,eax
c001be8a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001be8f:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001be92:	53                   	push   ebx
c001be93:	56                   	push   esi
c001be94:	e8 b7 75 ff ff       	call   c0013450 <File::File(char const*, Process*)>
c001be99:	83 c4 0c             	add    esp,0xc
c001be9c:	8d 44 24 23          	lea    eax,[esp+0x23]
c001bea0:	50                   	push   eax
c001bea1:	ff 77 28             	push   DWORD PTR [edi+0x28]
c001bea4:	56                   	push   esi
c001bea5:	e8 b6 78 ff ff       	call   c0013760 <File::stat(unsigned long long*, bool*)>
c001beaa:	83 c4 10             	add    esp,0x10
c001bead:	85 f6                	test   esi,esi
c001beaf:	74 14                	je     c001bec5 <sysCallSizeFromFilename(regs*)+0x6b>
c001beb1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001beb5:	8b 16                	mov    edx,DWORD PTR [esi]
c001beb7:	83 ec 0c             	sub    esp,0xc
c001beba:	56                   	push   esi
c001bebb:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001bebe:	83 c4 10             	add    esp,0x10
c001bec1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bec5:	85 c0                	test   eax,eax
c001bec7:	0f 95 c0             	setne  al
c001beca:	31 d2                	xor    edx,edx
c001becc:	0f b6 c0             	movzx  eax,al
c001becf:	f7 d8                	neg    eax
c001bed1:	83 d2 00             	adc    edx,0x0
c001bed4:	83 c4 20             	add    esp,0x20
c001bed7:	f7 da                	neg    edx
c001bed9:	5b                   	pop    ebx
c001beda:	5e                   	pop    esi
c001bedb:	5f                   	pop    edi
c001bedc:	c3                   	ret    
c001bedd:	83 ec 08             	sub    esp,0x8
c001bee0:	53                   	push   ebx
c001bee1:	68 27 c8 02 c0       	push   0xc002c827
c001bee6:	e8 06 70 ff ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c001beeb:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c001beee:	83 c4 10             	add    esp,0x10
c001bef1:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001bef7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001befe:	31 d2                	xor    edx,edx
c001bf00:	83 c4 20             	add    esp,0x20
c001bf03:	31 c0                	xor    eax,eax
c001bf05:	5b                   	pop    ebx
c001bf06:	5e                   	pop    esi
c001bf07:	5f                   	pop    edi
c001bf08:	c3                   	ret    
c001bf09:	83 c4 20             	add    esp,0x20
c001bf0c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bf11:	5b                   	pop    ebx
c001bf12:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bf17:	5e                   	pop    esi
c001bf18:	5f                   	pop    edi
c001bf19:	c3                   	ret    

c001bf1a <sysCallClose(regs*)>:
c001bf1a:	53                   	push   ebx
c001bf1b:	83 ec 08             	sub    esp,0x8
c001bf1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bf22:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001bf25:	83 f8 02             	cmp    eax,0x2
c001bf28:	76 50                	jbe    c001bf7a <sysCallClose(regs*)+0x60>
c001bf2a:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001bf2f:	74 58                	je     c001bf89 <sysCallClose(regs*)+0x6f>
c001bf31:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bf36:	74 60                	je     c001bf98 <sysCallClose(regs*)+0x7e>
c001bf38:	77 2f                	ja     c001bf69 <sysCallClose(regs*)+0x4f>
c001bf3a:	83 ec 0c             	sub    esp,0xc
c001bf3d:	50                   	push   eax
c001bf3e:	e8 4c 5a ff ff       	call   c001198f <getFromFileDescriptor(int)>
c001bf43:	89 c3                	mov    ebx,eax
c001bf45:	89 04 24             	mov    DWORD PTR [esp],eax
c001bf48:	e8 c5 75 ff ff       	call   c0013512 <File::close()>
c001bf4d:	83 c4 10             	add    esp,0x10
c001bf50:	85 db                	test   ebx,ebx
c001bf52:	74 0c                	je     c001bf60 <sysCallClose(regs*)+0x46>
c001bf54:	83 ec 0c             	sub    esp,0xc
c001bf57:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bf59:	53                   	push   ebx
c001bf5a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001bf5d:	83 c4 10             	add    esp,0x10
c001bf60:	31 c0                	xor    eax,eax
c001bf62:	31 d2                	xor    edx,edx
c001bf64:	83 c4 08             	add    esp,0x8
c001bf67:	5b                   	pop    ebx
c001bf68:	c3                   	ret    
c001bf69:	83 ec 08             	sub    esp,0x8
c001bf6c:	50                   	push   eax
c001bf6d:	68 30 c9 02 c0       	push   0xc002c930
c001bf72:	e8 7a 6f ff ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c001bf77:	83 c4 10             	add    esp,0x10
c001bf7a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bf7f:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bf84:	83 c4 08             	add    esp,0x8
c001bf87:	5b                   	pop    ebx
c001bf88:	c3                   	ret    
c001bf89:	83 ec 0c             	sub    esp,0xc
c001bf8c:	68 42 c8 02 c0       	push   0xc002c842
c001bf91:	e8 5b 6f ff ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c001bf96:	eb c5                	jmp    c001bf5d <sysCallClose(regs*)+0x43>
c001bf98:	83 ec 0c             	sub    esp,0xc
c001bf9b:	68 50 c8 02 c0       	push   0xc002c850
c001bfa0:	eb ef                	jmp    c001bf91 <sysCallClose(regs*)+0x77>

c001bfa2 <sysCallOpenDir(regs*)>:
c001bfa2:	56                   	push   esi
c001bfa3:	53                   	push   ebx
c001bfa4:	53                   	push   ebx
c001bfa5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bfa9:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c001bfac:	85 f6                	test   esi,esi
c001bfae:	74 59                	je     c001c009 <sysCallOpenDir(regs*)+0x67>
c001bfb0:	83 ec 0c             	sub    esp,0xc
c001bfb3:	68 14 01 00 00       	push   0x114
c001bfb8:	e8 75 39 ff ff       	call   c000f932 <malloc>
c001bfbd:	83 c4 0c             	add    esp,0xc
c001bfc0:	89 c6                	mov    esi,eax
c001bfc2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bfc7:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bfca:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bfcd:	56                   	push   esi
c001bfce:	e8 29 79 ff ff       	call   c00138fc <Directory::Directory(char const*, Process*)>
c001bfd3:	83 c4 10             	add    esp,0x10
c001bfd6:	85 f6                	test   esi,esi
c001bfd8:	74 2f                	je     c001c009 <sysCallOpenDir(regs*)+0x67>
c001bfda:	83 ec 0c             	sub    esp,0xc
c001bfdd:	56                   	push   esi
c001bfde:	e8 7d 79 ff ff       	call   c0013960 <Directory::open()>
c001bfe3:	83 c4 10             	add    esp,0x10
c001bfe6:	85 c0                	test   eax,eax
c001bfe8:	75 1f                	jne    c001c009 <sysCallOpenDir(regs*)+0x67>
c001bfea:	83 ec 0c             	sub    esp,0xc
c001bfed:	56                   	push   esi
c001bfee:	e8 a7 56 ff ff       	call   c001169a <UnixFile::getFileDescriptor()>
c001bff3:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001bff6:	83 c4 10             	add    esp,0x10
c001bff9:	89 02                	mov    DWORD PTR [edx],eax
c001bffb:	c1 f8 1f             	sar    eax,0x1f
c001bffe:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001c001:	31 c0                	xor    eax,eax
c001c003:	59                   	pop    ecx
c001c004:	31 d2                	xor    edx,edx
c001c006:	5b                   	pop    ebx
c001c007:	5e                   	pop    esi
c001c008:	c3                   	ret    
c001c009:	59                   	pop    ecx
c001c00a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c00f:	ba ff ff ff ff       	mov    edx,0xffffffff
c001c014:	5b                   	pop    ebx
c001c015:	5e                   	pop    esi
c001c016:	c3                   	ret    

c001c017 <sysCallCloseDir(regs*)>:
c001c017:	53                   	push   ebx
c001c018:	83 ec 08             	sub    esp,0x8
c001c01b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c01f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001c022:	83 f8 02             	cmp    eax,0x2
c001c025:	76 47                	jbe    c001c06e <sysCallCloseDir(regs*)+0x57>
c001c027:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001c02c:	77 2f                	ja     c001c05d <sysCallCloseDir(regs*)+0x46>
c001c02e:	83 ec 0c             	sub    esp,0xc
c001c031:	50                   	push   eax
c001c032:	e8 58 59 ff ff       	call   c001198f <getFromFileDescriptor(int)>
c001c037:	89 c3                	mov    ebx,eax
c001c039:	89 04 24             	mov    DWORD PTR [esp],eax
c001c03c:	e8 7b 79 ff ff       	call   c00139bc <Directory::close()>
c001c041:	83 c4 10             	add    esp,0x10
c001c044:	85 db                	test   ebx,ebx
c001c046:	74 0c                	je     c001c054 <sysCallCloseDir(regs*)+0x3d>
c001c048:	83 ec 0c             	sub    esp,0xc
c001c04b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c04d:	53                   	push   ebx
c001c04e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001c051:	83 c4 10             	add    esp,0x10
c001c054:	31 c0                	xor    eax,eax
c001c056:	31 d2                	xor    edx,edx
c001c058:	83 c4 08             	add    esp,0x8
c001c05b:	5b                   	pop    ebx
c001c05c:	c3                   	ret    
c001c05d:	83 ec 08             	sub    esp,0x8
c001c060:	50                   	push   eax
c001c061:	68 58 c9 02 c0       	push   0xc002c958
c001c066:	e8 86 6e ff ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c001c06b:	83 c4 10             	add    esp,0x10
c001c06e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c073:	ba ff ff ff ff       	mov    edx,0xffffffff
c001c078:	83 c4 08             	add    esp,0x8
c001c07b:	5b                   	pop    ebx
c001c07c:	c3                   	ret    

c001c07d <sysCallMakeDir(regs*)>:
c001c07d:	56                   	push   esi
c001c07e:	53                   	push   ebx
c001c07f:	83 ec 10             	sub    esp,0x10
c001c082:	68 14 01 00 00       	push   0x114
c001c087:	e8 a6 38 ff ff       	call   c000f932 <malloc>
c001c08c:	83 c4 0c             	add    esp,0xc
c001c08f:	89 c3                	mov    ebx,eax
c001c091:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c096:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c099:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c09d:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001c0a0:	53                   	push   ebx
c001c0a1:	e8 56 78 ff ff       	call   c00138fc <Directory::Directory(char const*, Process*)>
c001c0a6:	83 c4 10             	add    esp,0x10
c001c0a9:	85 db                	test   ebx,ebx
c001c0ab:	74 32                	je     c001c0df <sysCallMakeDir(regs*)+0x62>
c001c0ad:	83 ec 0c             	sub    esp,0xc
c001c0b0:	53                   	push   ebx
c001c0b1:	e8 8a 7a ff ff       	call   c0013b40 <Directory::create()>
c001c0b6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c0b9:	89 c6                	mov    esi,eax
c001c0bb:	e8 fc 78 ff ff       	call   c00139bc <Directory::close()>
c001c0c0:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c0c2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c0c5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001c0c8:	83 c4 10             	add    esp,0x10
c001c0cb:	31 c0                	xor    eax,eax
c001c0cd:	59                   	pop    ecx
c001c0ce:	85 f6                	test   esi,esi
c001c0d0:	5b                   	pop    ebx
c001c0d1:	0f 95 c0             	setne  al
c001c0d4:	5e                   	pop    esi
c001c0d5:	31 d2                	xor    edx,edx
c001c0d7:	f7 d8                	neg    eax
c001c0d9:	83 d2 00             	adc    edx,0x0
c001c0dc:	f7 da                	neg    edx
c001c0de:	c3                   	ret    
c001c0df:	59                   	pop    ecx
c001c0e0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c0e5:	ba ff ff ff ff       	mov    edx,0xffffffff
c001c0ea:	5b                   	pop    ebx
c001c0eb:	5e                   	pop    esi
c001c0ec:	c3                   	ret    

c001c0ed <sysCallWait(regs*)>:
c001c0ed:	83 ec 10             	sub    esp,0x10
c001c0f0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c0f4:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001c0f7:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001c0fa:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001c0fd:	e8 dc 25 00 00       	call   c001e6de <waitTask(int, int*, int)>
c001c102:	83 c4 1c             	add    esp,0x1c
c001c105:	99                   	cdq    
c001c106:	c3                   	ret    

c001c107 <sysCallNotImpl(regs*)>:
c001c107:	83 ec 18             	sub    esp,0x18
c001c10a:	68 5e c8 02 c0       	push   0xc002c85e
c001c10f:	e8 9d e7 ff ff       	call   c001a8b1 <Krnl::panic(char const*)>
c001c114:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c119:	ba ff ff ff ff       	mov    edx,0xffffffff
c001c11e:	83 c4 1c             	add    esp,0x1c
c001c121:	c3                   	ret    

c001c122 <sysPanic(regs*)>:
c001c122:	83 ec 18             	sub    esp,0x18
c001c125:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c129:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001c12c:	e8 80 e7 ff ff       	call   c001a8b1 <Krnl::panic(char const*)>
c001c131:	c7 04 24 78 c8 02 c0 	mov    DWORD PTR [esp],0xc002c878
c001c138:	e8 74 e7 ff ff       	call   c001a8b1 <Krnl::panic(char const*)>
c001c13d:	b8 01 00 00 00       	mov    eax,0x1
c001c142:	31 d2                	xor    edx,edx
c001c144:	83 c4 1c             	add    esp,0x1c
c001c147:	c3                   	ret    

c001c148 <sysCallRmdir(regs*)>:
c001c148:	56                   	push   esi
c001c149:	53                   	push   ebx
c001c14a:	83 ec 20             	sub    esp,0x20
c001c14d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001c151:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001c154:	68 14 01 00 00       	push   0x114
c001c159:	e8 d4 37 ff ff       	call   c000f932 <malloc>
c001c15e:	83 c4 0c             	add    esp,0xc
c001c161:	89 c3                	mov    ebx,eax
c001c163:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c168:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c16b:	56                   	push   esi
c001c16c:	53                   	push   ebx
c001c16d:	e8 de 72 ff ff       	call   c0013450 <File::File(char const*, Process*)>
c001c172:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c175:	e8 b2 74 ff ff       	call   c001362c <File::unlink()>
c001c17a:	83 c4 10             	add    esp,0x10
c001c17d:	85 db                	test   ebx,ebx
c001c17f:	74 14                	je     c001c195 <sysCallRmdir(regs*)+0x4d>
c001c181:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c185:	8b 13                	mov    edx,DWORD PTR [ebx]
c001c187:	83 ec 0c             	sub    esp,0xc
c001c18a:	53                   	push   ebx
c001c18b:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001c18e:	83 c4 10             	add    esp,0x10
c001c191:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c195:	85 c0                	test   eax,eax
c001c197:	0f 95 c0             	setne  al
c001c19a:	31 d2                	xor    edx,edx
c001c19c:	0f b6 c0             	movzx  eax,al
c001c19f:	f7 d8                	neg    eax
c001c1a1:	83 d2 00             	adc    edx,0x0
c001c1a4:	83 c4 14             	add    esp,0x14
c001c1a7:	f7 da                	neg    edx
c001c1a9:	5b                   	pop    ebx
c001c1aa:	5e                   	pop    esi
c001c1ab:	c3                   	ret    

c001c1ac <sysCallUnlink(regs*)>:
c001c1ac:	56                   	push   esi
c001c1ad:	53                   	push   ebx
c001c1ae:	83 ec 20             	sub    esp,0x20
c001c1b1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001c1b5:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001c1b8:	68 14 01 00 00       	push   0x114
c001c1bd:	e8 70 37 ff ff       	call   c000f932 <malloc>
c001c1c2:	83 c4 0c             	add    esp,0xc
c001c1c5:	89 c3                	mov    ebx,eax
c001c1c7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c1cc:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c1cf:	56                   	push   esi
c001c1d0:	53                   	push   ebx
c001c1d1:	e8 7a 72 ff ff       	call   c0013450 <File::File(char const*, Process*)>
c001c1d6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c1d9:	e8 4e 74 ff ff       	call   c001362c <File::unlink()>
c001c1de:	83 c4 10             	add    esp,0x10
c001c1e1:	85 db                	test   ebx,ebx
c001c1e3:	74 14                	je     c001c1f9 <sysCallUnlink(regs*)+0x4d>
c001c1e5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c1e9:	8b 13                	mov    edx,DWORD PTR [ebx]
c001c1eb:	83 ec 0c             	sub    esp,0xc
c001c1ee:	53                   	push   ebx
c001c1ef:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001c1f2:	83 c4 10             	add    esp,0x10
c001c1f5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c1f9:	85 c0                	test   eax,eax
c001c1fb:	0f 95 c0             	setne  al
c001c1fe:	31 d2                	xor    edx,edx
c001c200:	0f b6 c0             	movzx  eax,al
c001c203:	f7 d8                	neg    eax
c001c205:	83 d2 00             	adc    edx,0x0
c001c208:	83 c4 14             	add    esp,0x14
c001c20b:	f7 da                	neg    edx
c001c20d:	5b                   	pop    ebx
c001c20e:	5e                   	pop    esi
c001c20f:	c3                   	ret    

c001c210 <sysCallGetArgv(regs*)>:
c001c210:	83 ec 0c             	sub    esp,0xc
c001c213:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001c217:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001c21a:	85 c0                	test   eax,eax
c001c21c:	78 2b                	js     c001c249 <sysCallGetArgv(regs*)+0x39>
c001c21e:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001c224:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001c227:	3b 81 36 05 00 00    	cmp    eax,DWORD PTR [ecx+0x536]
c001c22d:	7d 1a                	jge    c001c249 <sysCallGetArgv(regs*)+0x39>
c001c22f:	8b 84 81 3a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x53a]
c001c236:	85 c0                	test   eax,eax
c001c238:	74 17                	je     c001c251 <sysCallGetArgv(regs*)+0x41>
c001c23a:	83 ec 08             	sub    esp,0x8
c001c23d:	50                   	push   eax
c001c23e:	ff 72 24             	push   DWORD PTR [edx+0x24]
c001c241:	e8 12 46 fe ff       	call   c0000858 <strcpy>
c001c246:	83 c4 10             	add    esp,0x10
c001c249:	31 c0                	xor    eax,eax
c001c24b:	31 d2                	xor    edx,edx
c001c24d:	83 c4 0c             	add    esp,0xc
c001c250:	c3                   	ret    
c001c251:	b8 01 00 00 00       	mov    eax,0x1
c001c256:	31 d2                	xor    edx,edx
c001c258:	83 c4 0c             	add    esp,0xc
c001c25b:	c3                   	ret    

c001c25c <sysCallTTYName(regs*)>:
c001c25c:	56                   	push   esi
c001c25d:	53                   	push   ebx
c001c25e:	53                   	push   ebx
c001c25f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c263:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001c266:	85 c0                	test   eax,eax
c001c268:	74 5f                	je     c001c2c9 <sysCallTTYName(regs*)+0x6d>
c001c26a:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001c26d:	83 f8 02             	cmp    eax,0x2
c001c270:	77 3e                	ja     c001c2b0 <sysCallTTYName(regs*)+0x54>
c001c272:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c277:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c27a:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001c280:	85 db                	test   ebx,ebx
c001c282:	74 45                	je     c001c2c9 <sysCallTTYName(regs*)+0x6d>
c001c284:	83 ec 0c             	sub    esp,0xc
c001c287:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c289:	53                   	push   ebx
c001c28a:	ff 10                	call   DWORD PTR [eax]
c001c28c:	83 c4 10             	add    esp,0x10
c001c28f:	84 c0                	test   al,al
c001c291:	74 41                	je     c001c2d4 <sysCallTTYName(regs*)+0x78>
c001c293:	83 ec 08             	sub    esp,0x8
c001c296:	81 c3 82 00 00 00    	add    ebx,0x82
c001c29c:	53                   	push   ebx
c001c29d:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001c2a0:	e8 b3 45 fe ff       	call   c0000858 <strcpy>
c001c2a5:	83 c4 10             	add    esp,0x10
c001c2a8:	31 c0                	xor    eax,eax
c001c2aa:	59                   	pop    ecx
c001c2ab:	31 d2                	xor    edx,edx
c001c2ad:	5b                   	pop    ebx
c001c2ae:	5e                   	pop    esi
c001c2af:	c3                   	ret    
c001c2b0:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001c2b5:	74 bb                	je     c001c272 <sysCallTTYName(regs*)+0x16>
c001c2b7:	83 ec 0c             	sub    esp,0xc
c001c2ba:	50                   	push   eax
c001c2bb:	e8 cf 56 ff ff       	call   c001198f <getFromFileDescriptor(int)>
c001c2c0:	83 c4 10             	add    esp,0x10
c001c2c3:	89 c3                	mov    ebx,eax
c001c2c5:	85 db                	test   ebx,ebx
c001c2c7:	75 bb                	jne    c001c284 <sysCallTTYName(regs*)+0x28>
c001c2c9:	59                   	pop    ecx
c001c2ca:	b8 01 00 00 00       	mov    eax,0x1
c001c2cf:	31 d2                	xor    edx,edx
c001c2d1:	5b                   	pop    ebx
c001c2d2:	5e                   	pop    esi
c001c2d3:	c3                   	ret    
c001c2d4:	59                   	pop    ecx
c001c2d5:	b8 02 00 00 00       	mov    eax,0x2
c001c2da:	31 d2                	xor    edx,edx
c001c2dc:	5b                   	pop    ebx
c001c2dd:	5e                   	pop    esi
c001c2de:	c3                   	ret    

c001c2df <sysCallUSleep(regs*)>:
c001c2df:	83 ec 14             	sub    esp,0x14
c001c2e2:	b8 e8 03 00 00       	mov    eax,0x3e8
c001c2e7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001c2eb:	69 4a 28 e8 03 00 00 	imul   ecx,DWORD PTR [edx+0x28],0x3e8
c001c2f2:	f7 62 20             	mul    DWORD PTR [edx+0x20]
c001c2f5:	01 ca                	add    edx,ecx
c001c2f7:	52                   	push   edx
c001c2f8:	50                   	push   eax
c001c2f9:	e8 b7 24 00 00       	call   c001e7b5 <nanoSleep(unsigned long long)>
c001c2fe:	31 c0                	xor    eax,eax
c001c300:	31 d2                	xor    edx,edx
c001c302:	83 c4 1c             	add    esp,0x1c
c001c305:	c3                   	ret    

c001c306 <sysCallSpawn(regs*)>:
c001c306:	56                   	push   esi
c001c307:	53                   	push   ebx
c001c308:	50                   	push   eax
c001c309:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c30d:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001c310:	85 c0                	test   eax,eax
c001c312:	75 08                	jne    c001c31c <sysCallSpawn(regs*)+0x16>
c001c314:	59                   	pop    ecx
c001c315:	31 c0                	xor    eax,eax
c001c317:	31 d2                	xor    edx,edx
c001c319:	5b                   	pop    ebx
c001c31a:	5e                   	pop    esi
c001c31b:	c3                   	ret    
c001c31c:	83 ec 08             	sub    esp,0x8
c001c31f:	50                   	push   eax
c001c320:	68 87 c8 02 c0       	push   0xc002c887
c001c325:	e8 c7 6b ff ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c001c32a:	c7 04 24 3f 07 00 00 	mov    DWORD PTR [esp],0x73f
c001c331:	e8 fc 35 ff ff       	call   c000f932 <malloc>
c001c336:	83 c4 10             	add    esp,0x10
c001c339:	89 c6                	mov    esi,eax
c001c33b:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001c33e:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c341:	85 c0                	test   eax,eax
c001c343:	75 32                	jne    c001c377 <sysCallSpawn(regs*)+0x71>
c001c345:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c34a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c34d:	52                   	push   edx
c001c34e:	50                   	push   eax
c001c34f:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c352:	56                   	push   esi
c001c353:	e8 3a 1b 00 00       	call   c001de92 <Process::Process(char const*, Process*, char**)>
c001c358:	83 c4 10             	add    esp,0x10
c001c35b:	80 be 3e 07 00 00 00 	cmp    BYTE PTR [esi+0x73e],0x0
c001c362:	75 b0                	jne    c001c314 <sysCallSpawn(regs*)+0xe>
c001c364:	83 ec 0c             	sub    esp,0xc
c001c367:	56                   	push   esi
c001c368:	e8 07 20 00 00       	call   c001e374 <Process::createUserThread()>
c001c36d:	8b 06                	mov    eax,DWORD PTR [esi]
c001c36f:	83 c4 10             	add    esp,0x10
c001c372:	99                   	cdq    
c001c373:	59                   	pop    ecx
c001c374:	5b                   	pop    ebx
c001c375:	5e                   	pop    esi
c001c376:	c3                   	ret    
c001c377:	31 c0                	xor    eax,eax
c001c379:	eb d2                	jmp    c001c34d <sysCallSpawn(regs*)+0x47>

c001c37b <sysCallGetEnv(regs*)>:
c001c37b:	55                   	push   ebp
c001c37c:	57                   	push   edi
c001c37d:	56                   	push   esi
c001c37e:	53                   	push   ebx
c001c37f:	83 ec 28             	sub    esp,0x28
c001c382:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001c386:	68 95 c8 02 c0       	push   0xc002c895
c001c38b:	e8 61 6b ff ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c001c390:	5f                   	pop    edi
c001c391:	8b 5e 24             	mov    ebx,DWORD PTR [esi+0x24]
c001c394:	5d                   	pop    ebp
c001c395:	53                   	push   ebx
c001c396:	68 c2 cb 02 c0       	push   0xc002cbc2
c001c39b:	e8 51 6b ff ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c001c3a0:	58                   	pop    eax
c001c3a1:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c001c3a4:	5a                   	pop    edx
c001c3a5:	57                   	push   edi
c001c3a6:	68 9e c8 02 c0       	push   0xc002c89e
c001c3ab:	e8 41 6b ff ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c001c3b0:	59                   	pop    ecx
c001c3b1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c3b6:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c3b9:	e8 0f e4 ff ff       	call   c001a7cd <Krnl::getProcessTotalEnvCount(Process*)>
c001c3be:	5a                   	pop    edx
c001c3bf:	89 c5                	mov    ebp,eax
c001c3c1:	59                   	pop    ecx
c001c3c2:	50                   	push   eax
c001c3c3:	68 a8 c8 02 c0       	push   0xc002c8a8
c001c3c8:	e8 24 6b ff ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c001c3cd:	83 c4 10             	add    esp,0x10
c001c3d0:	39 ef                	cmp    edi,ebp
c001c3d2:	7c 15                	jl     c001c3e9 <sysCallGetEnv(regs*)+0x6e>
c001c3d4:	85 db                	test   ebx,ebx
c001c3d6:	75 0c                	jne    c001c3e4 <sysCallGetEnv(regs*)+0x69>
c001c3d8:	83 c4 1c             	add    esp,0x1c
c001c3db:	31 c0                	xor    eax,eax
c001c3dd:	5b                   	pop    ebx
c001c3de:	31 d2                	xor    edx,edx
c001c3e0:	5e                   	pop    esi
c001c3e1:	5f                   	pop    edi
c001c3e2:	5d                   	pop    ebp
c001c3e3:	c3                   	ret    
c001c3e4:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001c3e7:	eb ef                	jmp    c001c3d8 <sysCallGetEnv(regs*)+0x5d>
c001c3e9:	83 ec 0c             	sub    esp,0xc
c001c3ec:	68 b4 c8 02 c0       	push   0xc002c8b4
c001c3f1:	e8 fb 6a ff ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c001c3f6:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c3fa:	83 c4 0c             	add    esp,0xc
c001c3fd:	57                   	push   edi
c001c3fe:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001c404:	ff 72 40             	push   DWORD PTR [edx+0x40]
c001c407:	50                   	push   eax
c001c408:	e8 e0 e3 ff ff       	call   c001a7ed <Krnl::getProcessEnvPair(Process*, int)>
c001c40d:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001c411:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001c415:	68 73 cc 02 c0       	push   0xc002cc73
c001c41a:	e8 d2 6a ff ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c001c41f:	83 c4 10             	add    esp,0x10
c001c422:	8b 76 28             	mov    esi,DWORD PTR [esi+0x28]
c001c425:	85 f6                	test   esi,esi
c001c427:	75 47                	jne    c001c470 <sysCallGetEnv(regs*)+0xf5>
c001c429:	83 ec 0c             	sub    esp,0xc
c001c42c:	55                   	push   ebp
c001c42d:	e8 86 43 fe ff       	call   c00007b8 <strlen>
c001c432:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c435:	89 c3                	mov    ebx,eax
c001c437:	e8 7c 43 fe ff       	call   c00007b8 <strlen>
c001c43c:	5a                   	pop    edx
c001c43d:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001c441:	59                   	pop    ecx
c001c442:	50                   	push   eax
c001c443:	68 b7 c8 02 c0       	push   0xc002c8b7
c001c448:	e8 a4 6a ff ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c001c44d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c450:	e8 63 43 fe ff       	call   c00007b8 <strlen>
c001c455:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c458:	89 c3                	mov    ebx,eax
c001c45a:	e8 59 43 fe ff       	call   c00007b8 <strlen>
c001c45f:	83 c4 10             	add    esp,0x10
c001c462:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001c466:	83 c4 1c             	add    esp,0x1c
c001c469:	31 d2                	xor    edx,edx
c001c46b:	5b                   	pop    ebx
c001c46c:	5e                   	pop    esi
c001c46d:	5f                   	pop    edi
c001c46e:	5d                   	pop    ebp
c001c46f:	c3                   	ret    
c001c470:	83 ec 0c             	sub    esp,0xc
c001c473:	68 8d cc 02 c0       	push   0xc002cc8d
c001c478:	e8 74 6a ff ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c001c47d:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001c480:	58                   	pop    eax
c001c481:	5a                   	pop    edx
c001c482:	55                   	push   ebp
c001c483:	53                   	push   ebx
c001c484:	e8 cf 43 fe ff       	call   c0000858 <strcpy>
c001c489:	59                   	pop    ecx
c001c48a:	5e                   	pop    esi
c001c48b:	68 c1 c8 02 c0       	push   0xc002c8c1
c001c490:	53                   	push   ebx
c001c491:	e8 02 45 fe ff       	call   c0000998 <strcat>
c001c496:	5d                   	pop    ebp
c001c497:	58                   	pop    eax
c001c498:	57                   	push   edi
c001c499:	53                   	push   ebx
c001c49a:	e8 f9 44 fe ff       	call   c0000998 <strcat>
c001c49f:	c7 04 24 a7 cc 02 c0 	mov    DWORD PTR [esp],0xc002cca7
c001c4a6:	e8 46 6a ff ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c001c4ab:	83 c4 10             	add    esp,0x10
c001c4ae:	e9 25 ff ff ff       	jmp    c001c3d8 <sysCallGetEnv(regs*)+0x5d>

c001c4b3 <sysAppSettings(regs*)>:
c001c4b3:	53                   	push   ebx
c001c4b4:	83 ec 08             	sub    esp,0x8
c001c4b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c4bb:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001c4be:	8b 83 00 01 00 00    	mov    eax,DWORD PTR [ebx+0x100]
c001c4c4:	25 e0 1f 00 00       	and    eax,0x1fe0
c001c4c9:	66 3d c0 09          	cmp    ax,0x9c0
c001c4cd:	75 2f                	jne    c001c4fe <sysAppSettings(regs*)+0x4b>
c001c4cf:	8a 83 00 01 00 00    	mov    al,BYTE PTR [ebx+0x100]
c001c4d5:	83 e0 1f             	and    eax,0x1f
c001c4d8:	3c 01                	cmp    al,0x1
c001c4da:	74 2e                	je     c001c50a <sysAppSettings(regs*)+0x57>
c001c4dc:	3c 07                	cmp    al,0x7
c001c4de:	0f 84 bd 00 00 00    	je     c001c5a1 <sysAppSettings(regs*)+0xee>
c001c4e4:	84 c0                	test   al,al
c001c4e6:	0f 84 dc 00 00 00    	je     c001c5c8 <sysAppSettings(regs*)+0x115>
c001c4ec:	3c 08                	cmp    al,0x8
c001c4ee:	74 6d                	je     c001c55d <sysAppSettings(regs*)+0xaa>
c001c4f0:	0f b6 c0             	movzx  eax,al
c001c4f3:	83 c4 08             	add    esp,0x8
c001c4f6:	05 e8 03 00 00       	add    eax,0x3e8
c001c4fb:	5b                   	pop    ebx
c001c4fc:	99                   	cdq    
c001c4fd:	c3                   	ret    
c001c4fe:	b8 01 00 00 00       	mov    eax,0x1
c001c503:	31 d2                	xor    edx,edx
c001c505:	83 c4 08             	add    esp,0x8
c001c508:	5b                   	pop    ebx
c001c509:	c3                   	ret    
c001c50a:	51                   	push   ecx
c001c50b:	68 00 01 00 00       	push   0x100
c001c510:	6a 00                	push   0x0
c001c512:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c517:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c51a:	83 c0 0c             	add    eax,0xc
c001c51d:	50                   	push   eax
c001c51e:	e8 79 42 fe ff       	call   c000079c <memset>
c001c523:	83 c4 0c             	add    esp,0xc
c001c526:	68 ff 00 00 00       	push   0xff
c001c52b:	53                   	push   ebx
c001c52c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c531:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c534:	83 c0 0c             	add    eax,0xc
c001c537:	50                   	push   eax
c001c538:	e8 2b 42 fe ff       	call   c0000768 <memcpy>
c001c53d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c542:	5b                   	pop    ebx
c001c543:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c546:	5a                   	pop    edx
c001c547:	8d 50 0c             	lea    edx,[eax+0xc]
c001c54a:	52                   	push   edx
c001c54b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c551:	e8 62 46 ff ff       	call   c0010bb8 <VgaText::setTitle(char*)>
c001c556:	83 c4 10             	add    esp,0x10
c001c559:	31 c0                	xor    eax,eax
c001c55b:	eb a6                	jmp    c001c503 <sysAppSettings(regs*)+0x50>
c001c55d:	83 ec 08             	sub    esp,0x8
c001c560:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c001c566:	83 e0 0f             	and    eax,0xf
c001c569:	50                   	push   eax
c001c56a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c56f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c572:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c578:	e8 2d 46 ff ff       	call   c0010baa <VgaText::setTitleColour(VgaColour)>
c001c57d:	58                   	pop    eax
c001c57e:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c001c584:	5a                   	pop    edx
c001c585:	c1 e8 04             	shr    eax,0x4
c001c588:	83 e0 0f             	and    eax,0xf
c001c58b:	50                   	push   eax
c001c58c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c591:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c594:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c59a:	e8 fd 45 ff ff       	call   c0010b9c <VgaText::setTitleTextColour(VgaColour)>
c001c59f:	eb b5                	jmp    c001c556 <sysAppSettings(regs*)+0xa3>
c001c5a1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c5a6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c5a9:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001c5af:	8a 83 01 01 00 00    	mov    al,BYTE PTR [ebx+0x101]
c001c5b5:	c0 e8 06             	shr    al,0x6
c001c5b8:	83 e0 01             	and    eax,0x1
c001c5bb:	88 82 80 00 00 00    	mov    BYTE PTR [edx+0x80],al
c001c5c1:	31 c0                	xor    eax,eax
c001c5c3:	e9 3b ff ff ff       	jmp    c001c503 <sysAppSettings(regs*)+0x50>
c001c5c8:	b8 02 00 00 00       	mov    eax,0x2
c001c5cd:	e9 31 ff ff ff       	jmp    c001c503 <sysAppSettings(regs*)+0x50>

c001c5d2 <sysSetFatAttrib(regs*)>:
c001c5d2:	57                   	push   edi
c001c5d3:	56                   	push   esi
c001c5d4:	53                   	push   ebx
c001c5d5:	83 ec 1c             	sub    esp,0x1c
c001c5d8:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001c5dc:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001c5df:	68 14 01 00 00       	push   0x114
c001c5e4:	e8 49 33 ff ff       	call   c000f932 <malloc>
c001c5e9:	83 c4 0c             	add    esp,0xc
c001c5ec:	89 c3                	mov    ebx,eax
c001c5ee:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c5f3:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c5f6:	57                   	push   edi
c001c5f7:	53                   	push   ebx
c001c5f8:	e8 53 6e ff ff       	call   c0013450 <File::File(char const*, Process*)>
c001c5fd:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001c600:	83 c4 0c             	add    esp,0xc
c001c603:	0f b6 d4             	movzx  edx,ah
c001c606:	0f b6 c0             	movzx  eax,al
c001c609:	52                   	push   edx
c001c60a:	50                   	push   eax
c001c60b:	53                   	push   ebx
c001c60c:	e8 b5 70 ff ff       	call   c00136c6 <File::chfatattr(unsigned char, unsigned char)>
c001c611:	83 c4 10             	add    esp,0x10
c001c614:	85 db                	test   ebx,ebx
c001c616:	74 14                	je     c001c62c <sysSetFatAttrib(regs*)+0x5a>
c001c618:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c61c:	8b 13                	mov    edx,DWORD PTR [ebx]
c001c61e:	83 ec 0c             	sub    esp,0xc
c001c621:	53                   	push   ebx
c001c622:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001c625:	83 c4 10             	add    esp,0x10
c001c628:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c62c:	85 c0                	test   eax,eax
c001c62e:	0f 95 c0             	setne  al
c001c631:	31 d2                	xor    edx,edx
c001c633:	0f b6 c0             	movzx  eax,al
c001c636:	f7 d8                	neg    eax
c001c638:	83 d2 00             	adc    edx,0x0
c001c63b:	83 c4 10             	add    esp,0x10
c001c63e:	f7 da                	neg    edx
c001c640:	5b                   	pop    ebx
c001c641:	5e                   	pop    esi
c001c642:	5f                   	pop    edi
c001c643:	c3                   	ret    

c001c644 <sysPipe(regs*)>:
c001c644:	57                   	push   edi
c001c645:	56                   	push   esi
c001c646:	53                   	push   ebx
c001c647:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c64b:	83 ec 0c             	sub    esp,0xc
c001c64e:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c001c651:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001c654:	6a 20                	push   0x20
c001c656:	e8 d7 32 ff ff       	call   c000f932 <malloc>
c001c65b:	89 c3                	mov    ebx,eax
c001c65d:	58                   	pop    eax
c001c65e:	5a                   	pop    edx
c001c65f:	68 00 50 00 00       	push   0x5000
c001c664:	53                   	push   ebx
c001c665:	e8 f6 3e ff ff       	call   c0010560 <Pipe::Pipe(int)>
c001c66a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c66d:	e8 28 50 ff ff       	call   c001169a <UnixFile::getFileDescriptor()>
c001c672:	89 07                	mov    DWORD PTR [edi],eax
c001c674:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c677:	e8 1e 50 ff ff       	call   c001169a <UnixFile::getFileDescriptor()>
c001c67c:	83 c4 10             	add    esp,0x10
c001c67f:	89 06                	mov    DWORD PTR [esi],eax
c001c681:	31 d2                	xor    edx,edx
c001c683:	5b                   	pop    ebx
c001c684:	31 c0                	xor    eax,eax
c001c686:	5e                   	pop    esi
c001c687:	5f                   	pop    edi
c001c688:	c3                   	ret    

c001c689 <sysGetUnixTime(regs*)>:
c001c689:	a1 68 ee 02 c0       	mov    eax,ds:0xc002ee68
c001c68e:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001c694:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c698:	e9 a5 77 ff ff       	jmp    c0013e42 <Clock::timeInSecondsLocal()>

c001c69d <string_ends_with(char const*, char const*)>:
c001c69d:	57                   	push   edi
c001c69e:	56                   	push   esi
c001c69f:	53                   	push   ebx
c001c6a0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c6a4:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001c6a8:	83 ec 0c             	sub    esp,0xc
c001c6ab:	53                   	push   ebx
c001c6ac:	e8 07 41 fe ff       	call   c00007b8 <strlen>
c001c6b1:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c6b4:	89 c6                	mov    esi,eax
c001c6b6:	e8 fd 40 fe ff       	call   c00007b8 <strlen>
c001c6bb:	83 c4 10             	add    esp,0x10
c001c6be:	39 c6                	cmp    esi,eax
c001c6c0:	7d 06                	jge    c001c6c8 <string_ends_with(char const*, char const*)+0x2b>
c001c6c2:	5b                   	pop    ebx
c001c6c3:	31 c0                	xor    eax,eax
c001c6c5:	5e                   	pop    esi
c001c6c6:	5f                   	pop    edi
c001c6c7:	c3                   	ret    
c001c6c8:	83 ec 08             	sub    esp,0x8
c001c6cb:	29 c6                	sub    esi,eax
c001c6cd:	57                   	push   edi
c001c6ce:	01 f3                	add    ebx,esi
c001c6d0:	53                   	push   ebx
c001c6d1:	e8 0e 42 fe ff       	call   c00008e4 <strcmp>
c001c6d6:	83 c4 10             	add    esp,0x10
c001c6d9:	85 c0                	test   eax,eax
c001c6db:	5b                   	pop    ebx
c001c6dc:	0f 94 c0             	sete   al
c001c6df:	5e                   	pop    esi
c001c6e0:	0f b6 c0             	movzx  eax,al
c001c6e3:	5f                   	pop    edi
c001c6e4:	c3                   	ret    

c001c6e5 <sysCallOpen(regs*)>:
c001c6e5:	56                   	push   esi
c001c6e6:	53                   	push   ebx
c001c6e7:	81 ec 04 01 00 00    	sub    esp,0x104
c001c6ed:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c001c6f4:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001c6f7:	85 c9                	test   ecx,ecx
c001c6f9:	0f 84 b3 00 00 00    	je     c001c7b2 <sysCallOpen(regs*)+0xcd>
c001c6ff:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001c702:	85 c0                	test   eax,eax
c001c704:	0f 84 a8 00 00 00    	je     c001c7b2 <sysCallOpen(regs*)+0xcd>
c001c70a:	52                   	push   edx
c001c70b:	68 c3 c8 02 c0       	push   0xc002c8c3
c001c710:	50                   	push   eax
c001c711:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001c715:	56                   	push   esi
c001c716:	e8 8b 6b ff ff       	call   c00132a6 <Fs::standardiseFiles(char*, char const*, char const*)>
c001c71b:	89 34 24             	mov    DWORD PTR [esp],esi
c001c71e:	e8 95 40 fe ff       	call   c00007b8 <strlen>
c001c723:	83 c4 10             	add    esp,0x10
c001c726:	48                   	dec    eax
c001c727:	74 1d                	je     c001c746 <sysCallOpen(regs*)+0x61>
c001c729:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c001c72c:	eb 0f                	jmp    c001c73d <sysCallOpen(regs*)+0x58>
c001c72e:	80 fa 3a             	cmp    dl,0x3a
c001c731:	74 0f                	je     c001c742 <sysCallOpen(regs*)+0x5d>
c001c733:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001c737:	48                   	dec    eax
c001c738:	74 0c                	je     c001c746 <sysCallOpen(regs*)+0x61>
c001c73a:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c001c73d:	80 fa 2e             	cmp    dl,0x2e
c001c740:	75 ec                	jne    c001c72e <sysCallOpen(regs*)+0x49>
c001c742:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001c746:	83 ec 08             	sub    esp,0x8
c001c749:	68 c7 c8 02 c0       	push   0xc002c8c7
c001c74e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c751:	e8 47 ff ff ff       	call   c001c69d <string_ends_with(char const*, char const*)>
c001c756:	83 c4 10             	add    esp,0x10
c001c759:	85 c0                	test   eax,eax
c001c75b:	75 17                	jne    c001c774 <sysCallOpen(regs*)+0x8f>
c001c75d:	83 ec 08             	sub    esp,0x8
c001c760:	68 e8 c8 02 c0       	push   0xc002c8e8
c001c765:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c768:	e8 30 ff ff ff       	call   c001c69d <string_ends_with(char const*, char const*)>
c001c76d:	83 c4 10             	add    esp,0x10
c001c770:	85 c0                	test   eax,eax
c001c772:	74 51                	je     c001c7c5 <sysCallOpen(regs*)+0xe0>
c001c774:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c777:	83 ec 08             	sub    esp,0x8
c001c77a:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001c780:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c787:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c78a:	ff 30                	push   DWORD PTR [eax]
c001c78c:	68 cc c8 02 c0       	push   0xc002c8cc
c001c791:	e8 5b 67 ff ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c001c796:	c7 04 24 db c8 02 c0 	mov    DWORD PTR [esp],0xc002c8db
c001c79d:	e8 4f 67 ff ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c001c7a2:	83 c4 10             	add    esp,0x10
c001c7a5:	81 c4 04 01 00 00    	add    esp,0x104
c001c7ab:	31 c0                	xor    eax,eax
c001c7ad:	31 d2                	xor    edx,edx
c001c7af:	5b                   	pop    ebx
c001c7b0:	5e                   	pop    esi
c001c7b1:	c3                   	ret    
c001c7b2:	81 c4 04 01 00 00    	add    esp,0x104
c001c7b8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c7bd:	ba ff ff ff ff       	mov    edx,0xffffffff
c001c7c2:	5b                   	pop    ebx
c001c7c3:	5e                   	pop    esi
c001c7c4:	c3                   	ret    
c001c7c5:	83 ec 08             	sub    esp,0x8
c001c7c8:	68 c8 c8 02 c0       	push   0xc002c8c8
c001c7cd:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c7d0:	e8 0f 41 fe ff       	call   c00008e4 <strcmp>
c001c7d5:	83 c4 10             	add    esp,0x10
c001c7d8:	85 c0                	test   eax,eax
c001c7da:	74 98                	je     c001c774 <sysCallOpen(regs*)+0x8f>
c001c7dc:	83 ec 08             	sub    esp,0x8
c001c7df:	68 c7 c8 02 c0       	push   0xc002c8c7
c001c7e4:	56                   	push   esi
c001c7e5:	e8 b3 fe ff ff       	call   c001c69d <string_ends_with(char const*, char const*)>
c001c7ea:	83 c4 10             	add    esp,0x10
c001c7ed:	85 c0                	test   eax,eax
c001c7ef:	75 83                	jne    c001c774 <sysCallOpen(regs*)+0x8f>
c001c7f1:	83 ec 08             	sub    esp,0x8
c001c7f4:	68 ed c8 02 c0       	push   0xc002c8ed
c001c7f9:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c7fc:	e8 9c fe ff ff       	call   c001c69d <string_ends_with(char const*, char const*)>
c001c801:	83 c4 10             	add    esp,0x10
c001c804:	85 c0                	test   eax,eax
c001c806:	0f 85 d9 00 00 00    	jne    c001c8e5 <sysCallOpen(regs*)+0x200>
c001c80c:	83 ec 08             	sub    esp,0x8
c001c80f:	68 f2 c8 02 c0       	push   0xc002c8f2
c001c814:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c817:	e8 81 fe ff ff       	call   c001c69d <string_ends_with(char const*, char const*)>
c001c81c:	83 c4 10             	add    esp,0x10
c001c81f:	85 c0                	test   eax,eax
c001c821:	0f 85 be 00 00 00    	jne    c001c8e5 <sysCallOpen(regs*)+0x200>
c001c827:	83 ec 08             	sub    esp,0x8
c001c82a:	68 ee c8 02 c0       	push   0xc002c8ee
c001c82f:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c832:	e8 ad 40 fe ff       	call   c00008e4 <strcmp>
c001c837:	83 c4 10             	add    esp,0x10
c001c83a:	85 c0                	test   eax,eax
c001c83c:	0f 84 a3 00 00 00    	je     c001c8e5 <sysCallOpen(regs*)+0x200>
c001c842:	83 ec 08             	sub    esp,0x8
c001c845:	68 ed c8 02 c0       	push   0xc002c8ed
c001c84a:	56                   	push   esi
c001c84b:	e8 4d fe ff ff       	call   c001c69d <string_ends_with(char const*, char const*)>
c001c850:	83 c4 10             	add    esp,0x10
c001c853:	85 c0                	test   eax,eax
c001c855:	0f 85 8a 00 00 00    	jne    c001c8e5 <sysCallOpen(regs*)+0x200>
c001c85b:	83 ec 0c             	sub    esp,0xc
c001c85e:	68 14 01 00 00       	push   0x114
c001c863:	e8 ca 30 ff ff       	call   c000f932 <malloc>
c001c868:	83 c4 0c             	add    esp,0xc
c001c86b:	89 c6                	mov    esi,eax
c001c86d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c872:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c875:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c878:	56                   	push   esi
c001c879:	e8 d2 6b ff ff       	call   c0013450 <File::File(char const*, Process*)>
c001c87e:	83 c4 10             	add    esp,0x10
c001c881:	85 f6                	test   esi,esi
c001c883:	0f 84 29 ff ff ff    	je     c001c7b2 <sysCallOpen(regs*)+0xcd>
c001c889:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001c88c:	0f b6 c2             	movzx  eax,dl
c001c88f:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001c892:	89 d0                	mov    eax,edx
c001c894:	83 e0 01             	and    eax,0x1
c001c897:	f6 c2 02             	test   dl,0x2
c001c89a:	74 03                	je     c001c89f <sysCallOpen(regs*)+0x1ba>
c001c89c:	83 c8 02             	or     eax,0x2
c001c89f:	f6 c2 04             	test   dl,0x4
c001c8a2:	74 03                	je     c001c8a7 <sysCallOpen(regs*)+0x1c2>
c001c8a4:	83 c8 04             	or     eax,0x4
c001c8a7:	f6 c2 08             	test   dl,0x8
c001c8aa:	74 03                	je     c001c8af <sysCallOpen(regs*)+0x1ca>
c001c8ac:	83 c8 0a             	or     eax,0xa
c001c8af:	83 e2 10             	and    edx,0x10
c001c8b2:	74 03                	je     c001c8b7 <sysCallOpen(regs*)+0x1d2>
c001c8b4:	83 c8 12             	or     eax,0x12
c001c8b7:	83 ec 08             	sub    esp,0x8
c001c8ba:	50                   	push   eax
c001c8bb:	56                   	push   esi
c001c8bc:	e8 f3 6b ff ff       	call   c00134b4 <File::open(FileOpenMode)>
c001c8c1:	83 c4 10             	add    esp,0x10
c001c8c4:	85 c0                	test   eax,eax
c001c8c6:	0f 85 e6 fe ff ff    	jne    c001c7b2 <sysCallOpen(regs*)+0xcd>
c001c8cc:	83 ec 0c             	sub    esp,0xc
c001c8cf:	56                   	push   esi
c001c8d0:	e8 c5 4d ff ff       	call   c001169a <UnixFile::getFileDescriptor()>
c001c8d5:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001c8d8:	89 02                	mov    DWORD PTR [edx],eax
c001c8da:	c1 f8 1f             	sar    eax,0x1f
c001c8dd:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001c8e0:	e9 bd fe ff ff       	jmp    c001c7a2 <sysCallOpen(regs*)+0xbd>
c001c8e5:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c8e8:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c001c8ee:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c8f5:	e9 ab fe ff ff       	jmp    c001c7a5 <sysCallOpen(regs*)+0xc0>

c001c8fa <Sys::loadSyscalls()>:
c001c8fa:	c7 05 e0 19 03 c0 df b9 01 c0 	mov    DWORD PTR ds:0xc00319e0,0xc001b9df
c001c904:	c7 05 e4 19 03 c0 46 b5 01 c0 	mov    DWORD PTR ds:0xc00319e4,0xc001b546
c001c90e:	c7 05 e8 19 03 c0 32 b7 01 c0 	mov    DWORD PTR ds:0xc00319e8,0xc001b732
c001c918:	c7 05 ec 19 03 c0 15 b9 01 c0 	mov    DWORD PTR ds:0xc00319ec,0xc001b915
c001c922:	c7 05 f0 19 03 c0 ca b6 01 c0 	mov    DWORD PTR ds:0xc00319f0,0xc001b6ca
c001c92c:	c7 05 f4 19 03 c0 7d b5 01 c0 	mov    DWORD PTR ds:0xc00319f4,0xc001b57d
c001c936:	c7 05 f8 19 03 c0 5e b5 01 c0 	mov    DWORD PTR ds:0xc00319f8,0xc001b55e
c001c940:	c7 05 fc 19 03 c0 87 b7 01 c0 	mov    DWORD PTR ds:0xc00319fc,0xc001b787
c001c94a:	c7 05 04 1a 03 c0 1a bf 01 c0 	mov    DWORD PTR ds:0xc0031a04,0xc001bf1a
c001c954:	c7 05 00 1a 03 c0 e5 c6 01 c0 	mov    DWORD PTR ds:0xc0031a00,0xc001c6e5
c001c95e:	c7 05 08 1a 03 c0 a2 bf 01 c0 	mov    DWORD PTR ds:0xc0031a08,0xc001bfa2
c001c968:	c7 05 0c 1a 03 c0 09 bc 01 c0 	mov    DWORD PTR ds:0xc0031a0c,0xc001bc09
c001c972:	c7 05 10 1a 03 c0 25 ba 01 c0 	mov    DWORD PTR ds:0xc0031a10,0xc001ba25
c001c97c:	c7 05 14 1a 03 c0 2a ba 01 c0 	mov    DWORD PTR ds:0xc0031a14,0xc001ba2a
c001c986:	c7 05 18 1a 03 c0 7d c0 01 c0 	mov    DWORD PTR ds:0xc0031a18,0xc001c07d
c001c990:	c7 05 1c 1a 03 c0 17 c0 01 c0 	mov    DWORD PTR ds:0xc0031a1c,0xc001c017
c001c99a:	c7 05 20 1a 03 c0 f1 bc 01 c0 	mov    DWORD PTR ds:0xc0031a20,0xc001bcf1
c001c9a4:	c7 05 24 1a 03 c0 5a bd 01 c0 	mov    DWORD PTR ds:0xc0031a24,0xc001bd5a
c001c9ae:	c7 05 28 1a 03 c0 d7 bd 01 c0 	mov    DWORD PTR ds:0xc0031a28,0xc001bdd7
c001c9b8:	c7 05 2c 1a 03 c0 2f ba 01 c0 	mov    DWORD PTR ds:0xc0031a2c,0xc001ba2f
c001c9c2:	c7 05 30 1a 03 c0 ed c0 01 c0 	mov    DWORD PTR ds:0xc0031a30,0xc001c0ed
c001c9cc:	c7 05 34 1a 03 c0 07 c1 01 c0 	mov    DWORD PTR ds:0xc0031a34,0xc001c107
c001c9d6:	c7 05 38 1a 03 c0 07 c1 01 c0 	mov    DWORD PTR ds:0xc0031a38,0xc001c107
c001c9e0:	c7 05 3c 1a 03 c0 48 c1 01 c0 	mov    DWORD PTR ds:0xc0031a3c,0xc001c148
c001c9ea:	c7 05 40 1a 03 c0 ac c1 01 c0 	mov    DWORD PTR ds:0xc0031a40,0xc001c1ac
c001c9f4:	c7 05 44 1a 03 c0 db bb 01 c0 	mov    DWORD PTR ds:0xc0031a44,0xc001bbdb
c001c9fe:	c7 05 48 1a 03 c0 10 c2 01 c0 	mov    DWORD PTR ds:0xc0031a48,0xc001c210
c001ca08:	c7 05 4c 1a 03 c0 98 bb 01 c0 	mov    DWORD PTR ds:0xc0031a4c,0xc001bb98
c001ca12:	c7 05 50 1a 03 c0 5c c2 01 c0 	mov    DWORD PTR ds:0xc0031a50,0xc001c25c
c001ca1c:	c7 05 54 1a 03 c0 97 bc 01 c0 	mov    DWORD PTR ds:0xc0031a54,0xc001bc97
c001ca26:	c7 05 58 1a 03 c0 df c2 01 c0 	mov    DWORD PTR ds:0xc0031a58,0xc001c2df
c001ca30:	c7 05 5c 1a 03 c0 5a be 01 c0 	mov    DWORD PTR ds:0xc0031a5c,0xc001be5a
c001ca3a:	c7 05 60 1a 03 c0 06 c3 01 c0 	mov    DWORD PTR ds:0xc0031a60,0xc001c306
c001ca44:	c7 05 64 1a 03 c0 7b c3 01 c0 	mov    DWORD PTR ds:0xc0031a64,0xc001c37b
c001ca4e:	c7 05 68 1a 03 c0 b3 c4 01 c0 	mov    DWORD PTR ds:0xc0031a68,0xc001c4b3
c001ca58:	c7 05 6c 1a 03 c0 39 ba 01 c0 	mov    DWORD PTR ds:0xc0031a6c,0xc001ba39
c001ca62:	c7 05 70 1a 03 c0 a3 ba 01 c0 	mov    DWORD PTR ds:0xc0031a70,0xc001baa3
c001ca6c:	c7 05 74 1a 03 c0 e9 ba 01 c0 	mov    DWORD PTR ds:0xc0031a74,0xc001bae9
c001ca76:	c7 05 78 1a 03 c0 d2 c5 01 c0 	mov    DWORD PTR ds:0xc0031a78,0xc001c5d2
c001ca80:	c7 05 7c 1a 03 c0 22 c1 01 c0 	mov    DWORD PTR ds:0xc0031a7c,0xc001c122
c001ca8a:	c7 05 80 1a 03 c0 3a bb 01 c0 	mov    DWORD PTR ds:0xc0031a80,0xc001bb3a
c001ca94:	c7 05 84 1a 03 c0 44 c6 01 c0 	mov    DWORD PTR ds:0xc0031a84,0xc001c644
c001ca9e:	c7 05 88 1a 03 c0 89 c6 01 c0 	mov    DWORD PTR ds:0xc0031a88,0xc001c689
c001caa8:	c7 05 8c 1a 03 c0 22 b6 01 c0 	mov    DWORD PTR ds:0xc0031a8c,0xc001b622
c001cab2:	c7 05 90 1a 03 c0 a3 b7 01 c0 	mov    DWORD PTR ds:0xc0031a90,0xc001b7a3
c001cabc:	c7 05 94 1a 03 c0 cb b8 01 c0 	mov    DWORD PTR ds:0xc0031a94,0xc001b8cb
c001cac6:	c7 05 98 1a 03 c0 10 b5 01 c0 	mov    DWORD PTR ds:0xc0031a98,0xc001b510
c001cad0:	c7 05 9c 1a 03 c0 7d b9 01 c0 	mov    DWORD PTR ds:0xc0031a9c,0xc001b97d
c001cada:	c7 05 a0 1a 03 c0 89 b5 01 c0 	mov    DWORD PTR ds:0xc0031aa0,0xc001b589
c001cae4:	c7 05 a4 1a 03 c0 a0 b5 01 c0 	mov    DWORD PTR ds:0xc0031aa4,0xc001b5a0
c001caee:	c3                   	ret    

c001caef <Sys::systemCall(regs*, void*)>:
c001caef:	53                   	push   ebx
c001caf0:	83 ec 08             	sub    esp,0x8
c001caf3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001caf7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001cafa:	83 f8 7f             	cmp    eax,0x7f
c001cafd:	77 16                	ja     c001cb15 <Sys::systemCall(regs*, void*)+0x26>
c001caff:	8b 14 85 e0 19 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffce620]
c001cb06:	85 d2                	test   edx,edx
c001cb08:	74 0b                	je     c001cb15 <Sys::systemCall(regs*, void*)+0x26>
c001cb0a:	83 ec 0c             	sub    esp,0xc
c001cb0d:	53                   	push   ebx
c001cb0e:	ff d2                	call   edx
c001cb10:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001cb13:	eb 0d                	jmp    c001cb22 <Sys::systemCall(regs*, void*)+0x33>
c001cb15:	52                   	push   edx
c001cb16:	52                   	push   edx
c001cb17:	50                   	push   eax
c001cb18:	68 f7 c8 02 c0       	push   0xc002c8f7
c001cb1d:	e8 cf 63 ff ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c001cb22:	83 c4 10             	add    esp,0x10
c001cb25:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001cb2a:	31 d2                	xor    edx,edx
c001cb2c:	83 c4 08             	add    esp,0x8
c001cb2f:	5b                   	pop    ebx
c001cb30:	c3                   	ret    

c001cb31 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001cb31:	55                   	push   ebp
c001cb32:	57                   	push   edi
c001cb33:	56                   	push   esi
c001cb34:	53                   	push   ebx
c001cb35:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001cb3b:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001cb42:	8b 9c 24 4c 10 00 00 	mov    ebx,DWORD PTR [esp+0x104c]
c001cb49:	85 c0                	test   eax,eax
c001cb4b:	0f 95 c1             	setne  cl
c001cb4e:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c001cb56:	0f 94 c2             	sete   dl
c001cb59:	84 d1                	test   cl,dl
c001cb5b:	74 23                	je     c001cb80 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001cb5d:	f7 c3 ff 0f 00 00    	test   ebx,0xfff
c001cb63:	74 1b                	je     c001cb80 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001cb65:	81 c3 00 10 00 00    	add    ebx,0x1000
c001cb6b:	89 da                	mov    edx,ebx
c001cb6d:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001cb73:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c001cb79:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c001cb80:	8b 8c 24 48 10 00 00 	mov    ecx,DWORD PTR [esp+0x1048]
c001cb87:	05 ff 0f 00 00       	add    eax,0xfff
c001cb8c:	83 ec 0c             	sub    esp,0xc
c001cb8f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001cb93:	8d a9 ff 0f 00 00    	lea    ebp,[ecx+0xfff]
c001cb99:	c1 e8 0c             	shr    eax,0xc
c001cb9c:	89 ef                	mov    edi,ebp
c001cb9e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001cba2:	c1 ef 0c             	shr    edi,0xc
c001cba5:	6a 01                	push   0x1
c001cba7:	e8 39 4f ff ff       	call   c0011ae5 <Virt::allocateKernelVirtualPages(int)>
c001cbac:	89 c6                	mov    esi,eax
c001cbae:	58                   	pop    eax
c001cbaf:	5a                   	pop    edx
c001cbb0:	57                   	push   edi
c001cbb1:	68 7b c9 02 c0       	push   0xc002c97b
c001cbb6:	e8 36 63 ff ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c001cbbb:	59                   	pop    ecx
c001cbbc:	58                   	pop    eax
c001cbbd:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001cbc1:	68 8d c9 02 c0       	push   0xc002c98d
c001cbc6:	e8 26 63 ff ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c001cbcb:	83 c4 10             	add    esp,0x10
c001cbce:	81 fd ff 0f 00 00    	cmp    ebp,0xfff
c001cbd4:	0f 86 31 01 00 00    	jbe    c001cd0b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1da>
c001cbda:	c1 e7 0c             	shl    edi,0xc
c001cbdd:	8d 04 1f             	lea    eax,[edi+ebx*1]
c001cbe0:	89 df                	mov    edi,ebx
c001cbe2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cbe6:	8b ac 24 48 10 00 00 	mov    ebp,DWORD PTR [esp+0x1048]
c001cbed:	01 dd                	add    ebp,ebx
c001cbef:	29 fd                	sub    ebp,edi
c001cbf1:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c001cbf5:	0f 84 0e 01 00 00    	je     c001cd09 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1d8>
c001cbfb:	81 fd 00 10 00 00    	cmp    ebp,0x1000
c001cc01:	76 05                	jbe    c001cc08 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xd7>
c001cc03:	bd 00 10 00 00       	mov    ebp,0x1000
c001cc08:	83 ec 0c             	sub    esp,0xc
c001cc0b:	31 d2                	xor    edx,edx
c001cc0d:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001cc14:	8b 08                	mov    ecx,DWORD PTR [eax]
c001cc16:	8d 44 24 28          	lea    eax,[esp+0x28]
c001cc1a:	50                   	push   eax
c001cc1b:	8d 44 24 30          	lea    eax,[esp+0x30]
c001cc1f:	50                   	push   eax
c001cc20:	52                   	push   edx
c001cc21:	55                   	push   ebp
c001cc22:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c001cc29:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cc2c:	83 c4 20             	add    esp,0x20
c001cc2f:	85 c0                	test   eax,eax
c001cc31:	74 0a                	je     c001cc3d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x10c>
c001cc33:	53                   	push   ebx
c001cc34:	53                   	push   ebx
c001cc35:	50                   	push   eax
c001cc36:	68 9f c9 02 c0       	push   0xc002c99f
c001cc3b:	eb 0f                	jmp    c001cc4c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x11b>
c001cc3d:	3b 6c 24 1c          	cmp    ebp,DWORD PTR [esp+0x1c]
c001cc41:	74 20                	je     c001cc63 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x132>
c001cc43:	51                   	push   ecx
c001cc44:	51                   	push   ecx
c001cc45:	6a 00                	push   0x0
c001cc47:	68 ca c9 02 c0       	push   0xc002c9ca
c001cc4c:	e8 a0 62 ff ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c001cc51:	89 34 24             	mov    DWORD PTR [esp],esi
c001cc54:	e8 52 53 ff ff       	call   c0011fab <Virt::freeKernelVirtualPages(unsigned long)>
c001cc59:	83 c4 10             	add    esp,0x10
c001cc5c:	31 c0                	xor    eax,eax
c001cc5e:	e9 6d 01 00 00       	jmp    c001cdd0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x29f>
c001cc63:	fa                   	cli    
c001cc64:	ff 05 a8 23 03 c0    	inc    DWORD PTR ds:0xc00323a8
c001cc6a:	e8 2f 33 ff ff       	call   c000ff9e <Phys::allocatePage()>
c001cc6f:	6a 07                	push   0x7
c001cc71:	89 c5                	mov    ebp,eax
c001cc73:	56                   	push   esi
c001cc74:	50                   	push   eax
c001cc75:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cc7a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001cc7d:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001cc83:	e8 9a 56 ff ff       	call   c0012322 <VAS::mapPage(unsigned long, unsigned long, int)>
c001cc88:	83 c4 0c             	add    esp,0xc
c001cc8b:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001cc92:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001cc98:	6a 00                	push   0x0
c001cc9a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cc9f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001cca2:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001cca8:	e8 cf 54 ff ff       	call   c001217c <VAS::mapOtherVASIn(bool, VAS*)>
c001ccad:	58                   	pop    eax
c001ccae:	5a                   	pop    edx
c001ccaf:	68 07 0c 00 00       	push   0xc07
c001ccb4:	57                   	push   edi
c001ccb5:	55                   	push   ebp
c001ccb6:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001ccbd:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ccc3:	6a 00                	push   0x0
c001ccc5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ccca:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001cccd:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ccd3:	e8 04 5a ff ff       	call   c00126dc <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001ccd8:	83 c4 1c             	add    esp,0x1c
c001ccdb:	68 00 10 00 00       	push   0x1000
c001cce0:	8d 44 24 28          	lea    eax,[esp+0x28]
c001cce4:	50                   	push   eax
c001cce5:	56                   	push   esi
c001cce6:	e8 7d 3a fe ff       	call   c0000768 <memcpy>
c001cceb:	a1 a8 23 03 c0       	mov    eax,ds:0xc00323a8
c001ccf0:	83 c4 10             	add    esp,0x10
c001ccf3:	48                   	dec    eax
c001ccf4:	a3 a8 23 03 c0       	mov    ds:0xc00323a8,eax
c001ccf9:	85 c0                	test   eax,eax
c001ccfb:	75 01                	jne    c001ccfe <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cd>
c001ccfd:	fb                   	sti    
c001ccfe:	81 c7 00 10 00 00    	add    edi,0x1000
c001cd04:	e9 dd fe ff ff       	jmp    c001cbe6 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xb5>
c001cd09:	89 fb                	mov    ebx,edi
c001cd0b:	81 7c 24 04 ff 0f 00 00 	cmp    DWORD PTR [esp+0x4],0xfff
c001cd13:	0f 86 a9 00 00 00    	jbe    c001cdc2 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c001cd19:	fa                   	cli    
c001cd1a:	ff 05 a8 23 03 c0    	inc    DWORD PTR ds:0xc00323a8
c001cd20:	51                   	push   ecx
c001cd21:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001cd28:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001cd2e:	6a 00                	push   0x0
c001cd30:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cd35:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001cd38:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001cd3e:	e8 39 54 ff ff       	call   c001217c <VAS::mapOtherVASIn(bool, VAS*)>
c001cd43:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001cd47:	c1 e7 0c             	shl    edi,0xc
c001cd4a:	01 df                	add    edi,ebx
c001cd4c:	83 c4 10             	add    esp,0x10
c001cd4f:	39 df                	cmp    edi,ebx
c001cd51:	74 61                	je     c001cdb4 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x283>
c001cd53:	e8 46 32 ff ff       	call   c000ff9e <Phys::allocatePage()>
c001cd58:	6a 07                	push   0x7
c001cd5a:	89 c5                	mov    ebp,eax
c001cd5c:	56                   	push   esi
c001cd5d:	50                   	push   eax
c001cd5e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cd63:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001cd66:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001cd6c:	e8 b1 55 ff ff       	call   c0012322 <VAS::mapPage(unsigned long, unsigned long, int)>
c001cd71:	58                   	pop    eax
c001cd72:	5a                   	pop    edx
c001cd73:	68 07 0c 00 00       	push   0xc07
c001cd78:	53                   	push   ebx
c001cd79:	81 c3 00 10 00 00    	add    ebx,0x1000
c001cd7f:	55                   	push   ebp
c001cd80:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001cd87:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001cd8d:	6a 00                	push   0x0
c001cd8f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cd94:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001cd97:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001cd9d:	e8 3a 59 ff ff       	call   c00126dc <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001cda2:	83 c4 1c             	add    esp,0x1c
c001cda5:	68 00 10 00 00       	push   0x1000
c001cdaa:	6a 00                	push   0x0
c001cdac:	56                   	push   esi
c001cdad:	e8 ea 39 fe ff       	call   c000079c <memset>
c001cdb2:	eb 98                	jmp    c001cd4c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x21b>
c001cdb4:	a1 a8 23 03 c0       	mov    eax,ds:0xc00323a8
c001cdb9:	48                   	dec    eax
c001cdba:	a3 a8 23 03 c0       	mov    ds:0xc00323a8,eax
c001cdbf:	75 01                	jne    c001cdc2 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c001cdc1:	fb                   	sti    
c001cdc2:	83 ec 0c             	sub    esp,0xc
c001cdc5:	56                   	push   esi
c001cdc6:	e8 e0 51 ff ff       	call   c0011fab <Virt::freeKernelVirtualPages(unsigned long)>
c001cdcb:	83 c4 10             	add    esp,0x10
c001cdce:	b0 01                	mov    al,0x1
c001cdd0:	81 c4 2c 10 00 00    	add    esp,0x102c
c001cdd6:	5b                   	pop    ebx
c001cdd7:	5e                   	pop    esi
c001cdd8:	5f                   	pop    edi
c001cdd9:	5d                   	pop    ebp
c001cdda:	c3                   	ret    

c001cddb <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001cddb:	55                   	push   ebp
c001cddc:	57                   	push   edi
c001cddd:	56                   	push   esi
c001cdde:	53                   	push   ebx
c001cddf:	83 ec 48             	sub    esp,0x48
c001cde2:	68 14 01 00 00       	push   0x114
c001cde7:	e8 46 2b ff ff       	call   c000f932 <malloc>
c001cdec:	83 c4 0c             	add    esp,0xc
c001cdef:	89 c6                	mov    esi,eax
c001cdf1:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001cdf5:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001cdf9:	50                   	push   eax
c001cdfa:	e8 51 66 ff ff       	call   c0013450 <File::File(char const*, Process*)>
c001cdff:	58                   	pop    eax
c001ce00:	5a                   	pop    edx
c001ce01:	6a 01                	push   0x1
c001ce03:	56                   	push   esi
c001ce04:	e8 ab 66 ff ff       	call   c00134b4 <File::open(FileOpenMode)>
c001ce09:	83 c4 10             	add    esp,0x10
c001ce0c:	85 c0                	test   eax,eax
c001ce0e:	0f 85 47 01 00 00    	jne    c001cf5b <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001ce14:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001ce1c:	83 ec 0c             	sub    esp,0xc
c001ce1f:	6a 34                	push   0x34
c001ce21:	e8 0c 2b ff ff       	call   c000f932 <malloc>
c001ce26:	89 c3                	mov    ebx,eax
c001ce28:	58                   	pop    eax
c001ce29:	8b 06                	mov    eax,DWORD PTR [esi]
c001ce2b:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001ce2f:	57                   	push   edi
c001ce30:	53                   	push   ebx
c001ce31:	6a 00                	push   0x0
c001ce33:	6a 34                	push   0x34
c001ce35:	56                   	push   esi
c001ce36:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001ce39:	83 c4 20             	add    esp,0x20
c001ce3c:	85 c0                	test   eax,eax
c001ce3e:	0f 85 17 01 00 00    	jne    c001cf5b <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001ce44:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001ce4a:	0f 85 0b 01 00 00    	jne    c001cf5b <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001ce50:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001ce53:	85 c0                	test   eax,eax
c001ce55:	0f 84 00 01 00 00    	je     c001cf5b <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001ce5b:	31 d2                	xor    edx,edx
c001ce5d:	55                   	push   ebp
c001ce5e:	52                   	push   edx
c001ce5f:	50                   	push   eax
c001ce60:	56                   	push   esi
c001ce61:	e8 0c 67 ff ff       	call   c0013572 <File::seek(unsigned long long)>
c001ce66:	83 c4 10             	add    esp,0x10
c001ce69:	85 c0                	test   eax,eax
c001ce6b:	0f 85 ea 00 00 00    	jne    c001cf5b <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001ce71:	83 ec 0c             	sub    esp,0xc
c001ce74:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001ce77:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001ce7b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001ce7f:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001ce83:	0f af c2             	imul   eax,edx
c001ce86:	50                   	push   eax
c001ce87:	e8 a6 2a ff ff       	call   c000f932 <malloc>
c001ce8c:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001ce8e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001ce92:	89 3c 24             	mov    DWORD PTR [esp],edi
c001ce95:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001ce99:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001ce9d:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001cea1:	0f af c2             	imul   eax,edx
c001cea4:	99                   	cdq    
c001cea5:	52                   	push   edx
c001cea6:	50                   	push   eax
c001cea7:	56                   	push   esi
c001cea8:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001ceab:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001ceae:	83 c4 20             	add    esp,0x20
c001ceb1:	85 c0                	test   eax,eax
c001ceb3:	0f 84 a2 00 00 00    	je     c001cf5b <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001ceb9:	31 d2                	xor    edx,edx
c001cebb:	51                   	push   ecx
c001cebc:	52                   	push   edx
c001cebd:	50                   	push   eax
c001cebe:	56                   	push   esi
c001cebf:	e8 ae 66 ff ff       	call   c0013572 <File::seek(unsigned long long)>
c001cec4:	83 c4 10             	add    esp,0x10
c001cec7:	85 c0                	test   eax,eax
c001cec9:	0f 85 8c 00 00 00    	jne    c001cf5b <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cecf:	83 ec 0c             	sub    esp,0xc
c001ced2:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001ced6:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001ceda:	31 ed                	xor    ebp,ebp
c001cedc:	0f af c2             	imul   eax,edx
c001cedf:	50                   	push   eax
c001cee0:	e8 4d 2a ff ff       	call   c000f932 <malloc>
c001cee5:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001cee7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001ceeb:	89 3c 24             	mov    DWORD PTR [esp],edi
c001ceee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cef2:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001cef6:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001cefa:	0f af c2             	imul   eax,edx
c001cefd:	99                   	cdq    
c001cefe:	52                   	push   edx
c001ceff:	50                   	push   eax
c001cf00:	56                   	push   esi
c001cf01:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cf04:	83 c4 20             	add    esp,0x20
c001cf07:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001cf0f:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c001cf13:	0f 86 80 00 00 00    	jbe    c001cf99 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c001cf19:	0f b7 fd             	movzx  edi,bp
c001cf1c:	c1 e7 05             	shl    edi,0x5
c001cf1f:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c001cf23:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c001cf26:	75 6b                	jne    c001cf93 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001cf28:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001cf2b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001cf2f:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001cf32:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cf36:	52                   	push   edx
c001cf37:	31 d2                	xor    edx,edx
c001cf39:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001cf3c:	52                   	push   edx
c001cf3d:	50                   	push   eax
c001cf3e:	56                   	push   esi
c001cf3f:	e8 2e 66 ff ff       	call   c0013572 <File::seek(unsigned long long)>
c001cf44:	83 c4 10             	add    esp,0x10
c001cf47:	85 c0                	test   eax,eax
c001cf49:	74 17                	je     c001cf62 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c001cf4b:	83 ec 0c             	sub    esp,0xc
c001cf4e:	68 f6 c9 02 c0       	push   0xc002c9f6
c001cf53:	e8 99 5f ff ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c001cf58:	83 c4 10             	add    esp,0x10
c001cf5b:	31 c0                	xor    eax,eax
c001cf5d:	e9 87 00 00 00       	jmp    c001cfe9 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c001cf62:	83 ec 0c             	sub    esp,0xc
c001cf65:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001cf68:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001cf6b:	50                   	push   eax
c001cf6c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001cf70:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cf74:	56                   	push   esi
c001cf75:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001cf79:	e8 b3 fb ff ff       	call   c001cb31 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001cf7e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001cf82:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c001cf86:	83 c4 20             	add    esp,0x20
c001cf89:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001cf8d:	73 04                	jae    c001cf93 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001cf8f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001cf93:	45                   	inc    ebp
c001cf94:	e9 76 ff ff ff       	jmp    c001cf0f <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c001cf99:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001cf9d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001cfa1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cfa5:	89 91 2e 05 00 00    	mov    DWORD PTR [ecx+0x52e],edx
c001cfab:	83 ec 0c             	sub    esp,0xc
c001cfae:	8b 91 32 05 00 00    	mov    edx,DWORD PTR [ecx+0x532]
c001cfb4:	25 00 f0 ff ff       	and    eax,0xfffff000
c001cfb9:	05 00 10 00 00       	add    eax,0x1000
c001cfbe:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001cfc1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cfc5:	e8 78 29 ff ff       	call   c000f942 <free>
c001cfca:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cfcd:	e8 70 29 ff ff       	call   c000f942 <free>
c001cfd2:	58                   	pop    eax
c001cfd3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cfd7:	e8 66 29 ff ff       	call   c000f942 <free>
c001cfdc:	89 34 24             	mov    DWORD PTR [esp],esi
c001cfdf:	e8 2e 65 ff ff       	call   c0013512 <File::close()>
c001cfe4:	83 c4 10             	add    esp,0x10
c001cfe7:	b0 01                	mov    al,0x1
c001cfe9:	83 c4 3c             	add    esp,0x3c
c001cfec:	5b                   	pop    ebx
c001cfed:	5e                   	pop    esi
c001cfee:	5f                   	pop    edi
c001cfef:	5d                   	pop    ebp
c001cff0:	c3                   	ret    

c001cff1 <Thr::runtimeReferenceHelper()>:
c001cff1:	83 ec 18             	sub    esp,0x18
c001cff4:	68 fe c9 02 c0       	push   0xc002c9fe
c001cff9:	e8 f3 5e ff ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c001cffe:	fa                   	cli    
c001cfff:	83 c4 10             	add    esp,0x10
c001d002:	eb fe                	jmp    c001d002 <Thr::runtimeReferenceHelper()+0x11>

c001d004 <Thr::getAddressOfKernelSymbol(char const*)>:
c001d004:	57                   	push   edi
c001d005:	56                   	push   esi
c001d006:	53                   	push   ebx
c001d007:	31 db                	xor    ebx,ebx
c001d009:	39 1d 80 23 03 c0    	cmp    DWORD PTR ds:0xc0032380,ebx
c001d00f:	7e 3c                	jle    c001d04d <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c001d011:	8b 34 9d 00 23 03 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffcdd00]
c001d018:	31 ff                	xor    edi,edi
c001d01a:	39 3c 9d 00 22 03 c0 	cmp    DWORD PTR [ebx*4-0x3ffcde00],edi
c001d021:	7e 27                	jle    c001d04a <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c001d023:	50                   	push   eax
c001d024:	50                   	push   eax
c001d025:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d029:	8b 06                	mov    eax,DWORD PTR [esi]
c001d02b:	03 04 9d 80 22 03 c0 	add    eax,DWORD PTR [ebx*4-0x3ffcdd80]
c001d032:	50                   	push   eax
c001d033:	e8 ac 38 fe ff       	call   c00008e4 <strcmp>
c001d038:	83 c4 10             	add    esp,0x10
c001d03b:	85 c0                	test   eax,eax
c001d03d:	75 05                	jne    c001d044 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001d03f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001d042:	eb 0b                	jmp    c001d04f <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c001d044:	83 c6 10             	add    esi,0x10
c001d047:	47                   	inc    edi
c001d048:	eb d0                	jmp    c001d01a <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001d04a:	43                   	inc    ebx
c001d04b:	eb bc                	jmp    c001d009 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001d04d:	31 c0                	xor    eax,eax
c001d04f:	5b                   	pop    ebx
c001d050:	5e                   	pop    esi
c001d051:	5f                   	pop    edi
c001d052:	c3                   	ret    

c001d053 <Thr::loadKernelSymbolTable(char const*)>:
c001d053:	55                   	push   ebp
c001d054:	57                   	push   edi
c001d055:	56                   	push   esi
c001d056:	53                   	push   ebx
c001d057:	83 ec 68             	sub    esp,0x68
c001d05a:	8b 35 d0 23 03 c0    	mov    esi,DWORD PTR ds:0xc00323d0
c001d060:	68 14 01 00 00       	push   0x114
c001d065:	e8 c8 28 ff ff       	call   c000f932 <malloc>
c001d06a:	83 c4 0c             	add    esp,0xc
c001d06d:	89 c3                	mov    ebx,eax
c001d06f:	56                   	push   esi
c001d070:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001d074:	50                   	push   eax
c001d075:	e8 d6 63 ff ff       	call   c0013450 <File::File(char const*, Process*)>
c001d07a:	5e                   	pop    esi
c001d07b:	5f                   	pop    edi
c001d07c:	6a 01                	push   0x1
c001d07e:	53                   	push   ebx
c001d07f:	e8 30 64 ff ff       	call   c00134b4 <File::open(FileOpenMode)>
c001d084:	83 c4 10             	add    esp,0x10
c001d087:	85 c0                	test   eax,eax
c001d089:	74 0a                	je     c001d095 <Thr::loadKernelSymbolTable(char const*)+0x42>
c001d08b:	83 ec 0c             	sub    esp,0xc
c001d08e:	68 20 ca 02 c0       	push   0xc002ca20
c001d093:	eb 34                	jmp    c001d0c9 <Thr::loadKernelSymbolTable(char const*)+0x76>
c001d095:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001d09d:	83 ec 0c             	sub    esp,0xc
c001d0a0:	6a 34                	push   0x34
c001d0a2:	e8 8b 28 ff ff       	call   c000f932 <malloc>
c001d0a7:	59                   	pop    ecx
c001d0a8:	89 c7                	mov    edi,eax
c001d0aa:	8d 74 24 34          	lea    esi,[esp+0x34]
c001d0ae:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d0b0:	56                   	push   esi
c001d0b1:	57                   	push   edi
c001d0b2:	6a 00                	push   0x0
c001d0b4:	6a 34                	push   0x34
c001d0b6:	53                   	push   ebx
c001d0b7:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d0ba:	83 c4 20             	add    esp,0x20
c001d0bd:	85 c0                	test   eax,eax
c001d0bf:	74 17                	je     c001d0d8 <Thr::loadKernelSymbolTable(char const*)+0x85>
c001d0c1:	83 ec 0c             	sub    esp,0xc
c001d0c4:	68 37 ca 02 c0       	push   0xc002ca37
c001d0c9:	e8 e3 d7 ff ff       	call   c001a8b1 <Krnl::panic(char const*)>
c001d0ce:	83 c4 10             	add    esp,0x10
c001d0d1:	31 c0                	xor    eax,eax
c001d0d3:	e9 31 02 00 00       	jmp    c001d309 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c001d0d8:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001d0de:	75 e1                	jne    c001d0c1 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001d0e0:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001d0e3:	85 c0                	test   eax,eax
c001d0e5:	74 da                	je     c001d0c1 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001d0e7:	52                   	push   edx
c001d0e8:	31 d2                	xor    edx,edx
c001d0ea:	52                   	push   edx
c001d0eb:	50                   	push   eax
c001d0ec:	53                   	push   ebx
c001d0ed:	e8 80 64 ff ff       	call   c0013572 <File::seek(unsigned long long)>
c001d0f2:	83 c4 10             	add    esp,0x10
c001d0f5:	85 c0                	test   eax,eax
c001d0f7:	75 c8                	jne    c001d0c1 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001d0f9:	83 ec 0c             	sub    esp,0xc
c001d0fc:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001d100:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d104:	31 ed                	xor    ebp,ebp
c001d106:	0f af c2             	imul   eax,edx
c001d109:	50                   	push   eax
c001d10a:	e8 23 28 ff ff       	call   c000f932 <malloc>
c001d10f:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001d111:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d115:	89 34 24             	mov    DWORD PTR [esp],esi
c001d118:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d11c:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001d120:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d124:	0f af c2             	imul   eax,edx
c001d127:	99                   	cdq    
c001d128:	52                   	push   edx
c001d129:	50                   	push   eax
c001d12a:	53                   	push   ebx
c001d12b:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d12e:	83 c4 20             	add    esp,0x20
c001d131:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001d139:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001d141:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001d149:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001d151:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c001d155:	0f 86 aa 00 00 00    	jbe    c001d205 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c001d15b:	0f b7 f5             	movzx  esi,bp
c001d15e:	6b f6 28             	imul   esi,esi,0x28
c001d161:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001d165:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001d168:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d16c:	50                   	push   eax
c001d16d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d171:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c001d175:	8b 16                	mov    edx,DWORD PTR [esi]
c001d177:	6b c0 28             	imul   eax,eax,0x28
c001d17a:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001d17e:	89 d0                	mov    eax,edx
c001d180:	31 d2                	xor    edx,edx
c001d182:	52                   	push   edx
c001d183:	50                   	push   eax
c001d184:	53                   	push   ebx
c001d185:	e8 e8 63 ff ff       	call   c0013572 <File::seek(unsigned long long)>
c001d18a:	83 c4 0c             	add    esp,0xc
c001d18d:	6a 20                	push   0x20
c001d18f:	6a 00                	push   0x0
c001d191:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001d195:	52                   	push   edx
c001d196:	e8 01 36 fe ff       	call   c000079c <memset>
c001d19b:	58                   	pop    eax
c001d19c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d19e:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001d1a2:	51                   	push   ecx
c001d1a3:	8d 54 24 40          	lea    edx,[esp+0x40]
c001d1a7:	52                   	push   edx
c001d1a8:	6a 00                	push   0x0
c001d1aa:	6a 1f                	push   0x1f
c001d1ac:	53                   	push   ebx
c001d1ad:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d1b0:	83 c4 18             	add    esp,0x18
c001d1b3:	68 4e ca 02 c0       	push   0xc002ca4e
c001d1b8:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001d1bc:	52                   	push   edx
c001d1bd:	e8 22 37 fe ff       	call   c00008e4 <strcmp>
c001d1c2:	83 c4 10             	add    esp,0x10
c001d1c5:	85 c0                	test   eax,eax
c001d1c7:	75 0f                	jne    c001d1d8 <Thr::loadKernelSymbolTable(char const*)+0x185>
c001d1c9:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d1cc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d1d0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d1d4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d1d8:	50                   	push   eax
c001d1d9:	50                   	push   eax
c001d1da:	68 56 ca 02 c0       	push   0xc002ca56
c001d1df:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001d1e3:	50                   	push   eax
c001d1e4:	e8 fb 36 fe ff       	call   c00008e4 <strcmp>
c001d1e9:	83 c4 10             	add    esp,0x10
c001d1ec:	85 c0                	test   eax,eax
c001d1ee:	75 0f                	jne    c001d1ff <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c001d1f0:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d1f3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d1f7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d1fb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001d1ff:	45                   	inc    ebp
c001d200:	e9 4c ff ff ff       	jmp    c001d151 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c001d205:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001d20a:	75 10                	jne    c001d21c <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c001d20c:	83 ec 0c             	sub    esp,0xc
c001d20f:	68 5e ca 02 c0       	push   0xc002ca5e
c001d214:	e8 98 d6 ff ff       	call   c001a8b1 <Krnl::panic(char const*)>
c001d219:	83 c4 10             	add    esp,0x10
c001d21c:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c001d221:	75 10                	jne    c001d233 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c001d223:	83 ec 0c             	sub    esp,0xc
c001d226:	68 5e ca 02 c0       	push   0xc002ca5e
c001d22b:	e8 81 d6 ff ff       	call   c001a8b1 <Krnl::panic(char const*)>
c001d230:	83 c4 10             	add    esp,0x10
c001d233:	31 d2                	xor    edx,edx
c001d235:	50                   	push   eax
c001d236:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d23a:	52                   	push   edx
c001d23b:	50                   	push   eax
c001d23c:	53                   	push   ebx
c001d23d:	e8 30 63 ff ff       	call   c0013572 <File::seek(unsigned long long)>
c001d242:	5a                   	pop    edx
c001d243:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001d247:	e8 e6 26 ff ff       	call   c000f932 <malloc>
c001d24c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d250:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d254:	31 c9                	xor    ecx,ecx
c001d256:	5e                   	pop    esi
c001d257:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d259:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001d25d:	55                   	push   ebp
c001d25e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d262:	51                   	push   ecx
c001d263:	52                   	push   edx
c001d264:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001d268:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001d26c:	53                   	push   ebx
c001d26d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d270:	83 c4 14             	add    esp,0x14
c001d273:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d277:	e8 b6 26 ff ff       	call   c000f932 <malloc>
c001d27c:	89 c6                	mov    esi,eax
c001d27e:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d280:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d283:	56                   	push   esi
c001d284:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001d288:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001d28c:	51                   	push   ecx
c001d28d:	52                   	push   edx
c001d28e:	53                   	push   ebx
c001d28f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d292:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d296:	8b 15 80 23 03 c0    	mov    edx,DWORD PTR ds:0xc0032380
c001d29c:	83 c4 1c             	add    esp,0x1c
c001d29f:	c1 e8 04             	shr    eax,0x4
c001d2a2:	89 04 95 00 22 03 c0 	mov    DWORD PTR [edx*4-0x3ffcde00],eax
c001d2a9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d2ad:	31 d2                	xor    edx,edx
c001d2af:	52                   	push   edx
c001d2b0:	50                   	push   eax
c001d2b1:	53                   	push   ebx
c001d2b2:	e8 bb 62 ff ff       	call   c0013572 <File::seek(unsigned long long)>
c001d2b7:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001d2b9:	31 d2                	xor    edx,edx
c001d2bb:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d2be:	56                   	push   esi
c001d2bf:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d2c3:	52                   	push   edx
c001d2c4:	50                   	push   eax
c001d2c5:	53                   	push   ebx
c001d2c6:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d2c9:	83 c4 14             	add    esp,0x14
c001d2cc:	53                   	push   ebx
c001d2cd:	e8 40 62 ff ff       	call   c0013512 <File::close()>
c001d2d2:	5d                   	pop    ebp
c001d2d3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d2d7:	e8 66 26 ff ff       	call   c000f942 <free>
c001d2dc:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d2df:	e8 5e 26 ff ff       	call   c000f942 <free>
c001d2e4:	a1 80 23 03 c0       	mov    eax,ds:0xc0032380
c001d2e9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001d2ed:	8d 50 01             	lea    edx,[eax+0x1]
c001d2f0:	89 0c 85 00 23 03 c0 	mov    DWORD PTR [eax*4-0x3ffcdd00],ecx
c001d2f7:	89 34 85 80 22 03 c0 	mov    DWORD PTR [eax*4-0x3ffcdd80],esi
c001d2fe:	89 15 80 23 03 c0    	mov    DWORD PTR ds:0xc0032380,edx
c001d304:	83 c4 10             	add    esp,0x10
c001d307:	b0 01                	mov    al,0x1
c001d309:	83 c4 5c             	add    esp,0x5c
c001d30c:	5b                   	pop    ebx
c001d30d:	5e                   	pop    esi
c001d30e:	5f                   	pop    edi
c001d30f:	5d                   	pop    ebp
c001d310:	c3                   	ret    

c001d311 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c001d311:	55                   	push   ebp
c001d312:	57                   	push   edi
c001d313:	56                   	push   esi
c001d314:	53                   	push   ebx
c001d315:	81 ec 68 03 00 00    	sub    esp,0x368
c001d31b:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c001d322:	8b 1d d0 23 03 c0    	mov    ebx,DWORD PTR ds:0xc00323d0
c001d328:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001d32c:	68 14 01 00 00       	push   0x114
c001d331:	e8 fc 25 ff ff       	call   c000f932 <malloc>
c001d336:	83 c4 0c             	add    esp,0xc
c001d339:	89 c5                	mov    ebp,eax
c001d33b:	53                   	push   ebx
c001d33c:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c001d343:	50                   	push   eax
c001d344:	e8 07 61 ff ff       	call   c0013450 <File::File(char const*, Process*)>
c001d349:	5e                   	pop    esi
c001d34a:	5f                   	pop    edi
c001d34b:	6a 01                	push   0x1
c001d34d:	55                   	push   ebp
c001d34e:	e8 61 61 ff ff       	call   c00134b4 <File::open(FileOpenMode)>
c001d353:	83 c4 10             	add    esp,0x10
c001d356:	85 c0                	test   eax,eax
c001d358:	0f 85 a7 06 00 00    	jne    c001da05 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d35e:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001d366:	83 ec 0c             	sub    esp,0xc
c001d369:	6a 34                	push   0x34
c001d36b:	e8 c2 25 ff ff       	call   c000f932 <malloc>
c001d370:	5b                   	pop    ebx
c001d371:	89 c7                	mov    edi,eax
c001d373:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001d377:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d37a:	53                   	push   ebx
c001d37b:	57                   	push   edi
c001d37c:	6a 00                	push   0x0
c001d37e:	6a 34                	push   0x34
c001d380:	55                   	push   ebp
c001d381:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d384:	83 c4 20             	add    esp,0x20
c001d387:	85 c0                	test   eax,eax
c001d389:	0f 85 76 06 00 00    	jne    c001da05 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d38f:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001d395:	0f 85 6a 06 00 00    	jne    c001da05 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d39b:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001d39e:	85 c0                	test   eax,eax
c001d3a0:	0f 84 5f 06 00 00    	je     c001da05 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d3a6:	31 d2                	xor    edx,edx
c001d3a8:	51                   	push   ecx
c001d3a9:	52                   	push   edx
c001d3aa:	50                   	push   eax
c001d3ab:	55                   	push   ebp
c001d3ac:	e8 c1 61 ff ff       	call   c0013572 <File::seek(unsigned long long)>
c001d3b1:	83 c4 10             	add    esp,0x10
c001d3b4:	85 c0                	test   eax,eax
c001d3b6:	0f 85 49 06 00 00    	jne    c001da05 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d3bc:	83 ec 0c             	sub    esp,0xc
c001d3bf:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c001d3c2:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001d3c6:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001d3ca:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d3ce:	0f af c2             	imul   eax,edx
c001d3d1:	50                   	push   eax
c001d3d2:	e8 5b 25 ff ff       	call   c000f932 <malloc>
c001d3d7:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d3da:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d3de:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d3e1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d3e5:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001d3e9:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d3ed:	0f af c2             	imul   eax,edx
c001d3f0:	99                   	cdq    
c001d3f1:	52                   	push   edx
c001d3f2:	50                   	push   eax
c001d3f3:	55                   	push   ebp
c001d3f4:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d3f7:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c001d3fa:	83 c4 20             	add    esp,0x20
c001d3fd:	85 c0                	test   eax,eax
c001d3ff:	0f 84 00 06 00 00    	je     c001da05 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d405:	52                   	push   edx
c001d406:	31 d2                	xor    edx,edx
c001d408:	52                   	push   edx
c001d409:	50                   	push   eax
c001d40a:	55                   	push   ebp
c001d40b:	e8 62 61 ff ff       	call   c0013572 <File::seek(unsigned long long)>
c001d410:	83 c4 10             	add    esp,0x10
c001d413:	85 c0                	test   eax,eax
c001d415:	0f 85 ea 05 00 00    	jne    c001da05 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d41b:	83 ec 0c             	sub    esp,0xc
c001d41e:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001d422:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001d426:	31 f6                	xor    esi,esi
c001d428:	0f af c2             	imul   eax,edx
c001d42b:	50                   	push   eax
c001d42c:	e8 01 25 ff ff       	call   c000f932 <malloc>
c001d431:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d434:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d438:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d43b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d43f:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001d443:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001d447:	0f af c2             	imul   eax,edx
c001d44a:	99                   	cdq    
c001d44b:	52                   	push   edx
c001d44c:	50                   	push   eax
c001d44d:	55                   	push   ebp
c001d44e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d451:	83 c4 20             	add    esp,0x20
c001d454:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c001d458:	0f 86 8a 00 00 00    	jbe    c001d4e8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c001d45e:	0f b7 de             	movzx  ebx,si
c001d461:	c1 e3 05             	shl    ebx,0x5
c001d464:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c001d468:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c001d46b:	75 75                	jne    c001d4e2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c001d46d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001d470:	31 d2                	xor    edx,edx
c001d472:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d476:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001d479:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d47d:	50                   	push   eax
c001d47e:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001d481:	52                   	push   edx
c001d482:	50                   	push   eax
c001d483:	55                   	push   ebp
c001d484:	e8 e9 60 ff ff       	call   c0013572 <File::seek(unsigned long long)>
c001d489:	83 c4 10             	add    esp,0x10
c001d48c:	85 c0                	test   eax,eax
c001d48e:	0f 85 71 05 00 00    	jne    c001da05 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d494:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001d49b:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d49e:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c001d4a2:	31 d2                	xor    edx,edx
c001d4a4:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001d4a8:	83 ec 0c             	sub    esp,0xc
c001d4ab:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001d4af:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d4b6:	50                   	push   eax
c001d4b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d4bb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d4bf:	52                   	push   edx
c001d4c0:	50                   	push   eax
c001d4c1:	55                   	push   ebp
c001d4c2:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d4c5:	83 c4 1c             	add    esp,0x1c
c001d4c8:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001d4cb:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001d4ce:	50                   	push   eax
c001d4cf:	6a 00                	push   0x0
c001d4d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d4d5:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001d4d9:	50                   	push   eax
c001d4da:	e8 bd 32 fe ff       	call   c000079c <memset>
c001d4df:	83 c4 10             	add    esp,0x10
c001d4e2:	46                   	inc    esi
c001d4e3:	e9 6c ff ff ff       	jmp    c001d454 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c001d4e8:	53                   	push   ebx
c001d4e9:	31 db                	xor    ebx,ebx
c001d4eb:	68 00 01 00 00       	push   0x100
c001d4f0:	6a 00                	push   0x0
c001d4f2:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001d4f6:	50                   	push   eax
c001d4f7:	e8 a0 32 fe ff       	call   c000079c <memset>
c001d4fc:	83 c4 0c             	add    esp,0xc
c001d4ff:	68 00 01 00 00       	push   0x100
c001d504:	6a 00                	push   0x0
c001d506:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001d50d:	50                   	push   eax
c001d50e:	e8 89 32 fe ff       	call   c000079c <memset>
c001d513:	83 c4 10             	add    esp,0x10
c001d516:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001d51e:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001d526:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c001d52e:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001d536:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001d53e:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c001d542:	0f 86 30 01 00 00    	jbe    c001d678 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c001d548:	0f b7 f3             	movzx  esi,bx
c001d54b:	6b f6 28             	imul   esi,esi,0x28
c001d54e:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001d552:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001d555:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d559:	52                   	push   edx
c001d55a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d55e:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c001d562:	8b 06                	mov    eax,DWORD PTR [esi]
c001d564:	6b d2 28             	imul   edx,edx,0x28
c001d567:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001d56b:	31 d2                	xor    edx,edx
c001d56d:	52                   	push   edx
c001d56e:	50                   	push   eax
c001d56f:	55                   	push   ebp
c001d570:	e8 fd 5f ff ff       	call   c0013572 <File::seek(unsigned long long)>
c001d575:	83 c4 0c             	add    esp,0xc
c001d578:	6a 20                	push   0x20
c001d57a:	6a 00                	push   0x0
c001d57c:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001d583:	51                   	push   ecx
c001d584:	e8 13 32 fe ff       	call   c000079c <memset>
c001d589:	59                   	pop    ecx
c001d58a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d58d:	8d 54 24 58          	lea    edx,[esp+0x58]
c001d591:	52                   	push   edx
c001d592:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c001d599:	51                   	push   ecx
c001d59a:	6a 00                	push   0x0
c001d59c:	6a 1f                	push   0x1f
c001d59e:	55                   	push   ebp
c001d59f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d5a2:	83 c4 1c             	add    esp,0x1c
c001d5a5:	6a 09                	push   0x9
c001d5a7:	68 78 ca 02 c0       	push   0xc002ca78
c001d5ac:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001d5b3:	51                   	push   ecx
c001d5b4:	e8 ab 30 fe ff       	call   c0000664 <memcmp>
c001d5b9:	83 c4 10             	add    esp,0x10
c001d5bc:	85 c0                	test   eax,eax
c001d5be:	75 21                	jne    c001d5e1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c001d5c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d5c4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d5c8:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001d5cc:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d5d0:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d5d3:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001d5da:	89 d0                	mov    eax,edx
c001d5dc:	40                   	inc    eax
c001d5dd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d5e1:	50                   	push   eax
c001d5e2:	6a 09                	push   0x9
c001d5e4:	68 82 ca 02 c0       	push   0xc002ca82
c001d5e9:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d5f0:	50                   	push   eax
c001d5f1:	e8 6e 30 fe ff       	call   c0000664 <memcmp>
c001d5f6:	83 c4 10             	add    esp,0x10
c001d5f9:	85 c0                	test   eax,eax
c001d5fb:	75 21                	jne    c001d61e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c001d5fd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d601:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d605:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001d609:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d60d:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d610:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001d617:	89 d0                	mov    eax,edx
c001d619:	40                   	inc    eax
c001d61a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d61e:	50                   	push   eax
c001d61f:	50                   	push   eax
c001d620:	68 4e ca 02 c0       	push   0xc002ca4e
c001d625:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d62c:	50                   	push   eax
c001d62d:	e8 b2 32 fe ff       	call   c00008e4 <strcmp>
c001d632:	83 c4 10             	add    esp,0x10
c001d635:	85 c0                	test   eax,eax
c001d637:	75 0f                	jne    c001d648 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c001d639:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d63c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d640:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d644:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d648:	50                   	push   eax
c001d649:	50                   	push   eax
c001d64a:	68 56 ca 02 c0       	push   0xc002ca56
c001d64f:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d656:	50                   	push   eax
c001d657:	e8 88 32 fe ff       	call   c00008e4 <strcmp>
c001d65c:	83 c4 10             	add    esp,0x10
c001d65f:	85 c0                	test   eax,eax
c001d661:	75 0f                	jne    c001d672 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c001d663:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d666:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d66a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d66e:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001d672:	43                   	inc    ebx
c001d673:	e9 c6 fe ff ff       	jmp    c001d53e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c001d678:	31 d2                	xor    edx,edx
c001d67a:	50                   	push   eax
c001d67b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d67f:	52                   	push   edx
c001d680:	50                   	push   eax
c001d681:	55                   	push   ebp
c001d682:	e8 eb 5e ff ff       	call   c0013572 <File::seek(unsigned long long)>
c001d687:	58                   	pop    eax
c001d688:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d68c:	e8 a1 22 ff ff       	call   c000f932 <malloc>
c001d691:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d694:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001d698:	31 d2                	xor    edx,edx
c001d69a:	58                   	pop    eax
c001d69b:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001d69f:	53                   	push   ebx
c001d6a0:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001d6a4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d6a8:	52                   	push   edx
c001d6a9:	50                   	push   eax
c001d6aa:	55                   	push   ebp
c001d6ab:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d6ae:	83 c4 14             	add    esp,0x14
c001d6b1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d6b5:	e8 78 22 ff ff       	call   c000f932 <malloc>
c001d6ba:	31 d2                	xor    edx,edx
c001d6bc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001d6c0:	83 c4 0c             	add    esp,0xc
c001d6c3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d6c7:	52                   	push   edx
c001d6c8:	50                   	push   eax
c001d6c9:	55                   	push   ebp
c001d6ca:	e8 a3 5e ff ff       	call   c0013572 <File::seek(unsigned long long)>
c001d6cf:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d6d2:	31 d2                	xor    edx,edx
c001d6d4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d6d7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001d6db:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d6df:	52                   	push   edx
c001d6e0:	50                   	push   eax
c001d6e1:	55                   	push   ebp
c001d6e2:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d6e5:	83 c4 20             	add    esp,0x20
c001d6e8:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001d6f0:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001d6f4:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c001d6f8:	0f 84 0b 03 00 00    	je     c001da09 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f8>
c001d6fe:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c001d705:	31 d2                	xor    edx,edx
c001d707:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d70b:	c1 e8 03             	shr    eax,0x3
c001d70e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001d712:	51                   	push   ecx
c001d713:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d717:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001d71b:	52                   	push   edx
c001d71c:	50                   	push   eax
c001d71d:	55                   	push   ebp
c001d71e:	e8 4f 5e ff ff       	call   c0013572 <File::seek(unsigned long long)>
c001d723:	5b                   	pop    ebx
c001d724:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d728:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001d72f:	e8 fe 21 ff ff       	call   c000f932 <malloc>
c001d734:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d737:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d73b:	31 d2                	xor    edx,edx
c001d73d:	5e                   	pop    esi
c001d73e:	8d 44 24 58          	lea    eax,[esp+0x58]
c001d742:	50                   	push   eax
c001d743:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d747:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d74b:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001d752:	52                   	push   edx
c001d753:	50                   	push   eax
c001d754:	55                   	push   ebp
c001d755:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d758:	83 c4 20             	add    esp,0x20
c001d75b:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001d763:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001d767:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c001d76b:	0f 8d 7c 02 00 00    	jge    c001d9ed <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6dc>
c001d771:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d775:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d779:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c001d77e:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001d781:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001d785:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d789:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c001d78d:	89 d8                	mov    eax,ebx
c001d78f:	c1 e8 08             	shr    eax,0x8
c001d792:	89 c6                	mov    esi,eax
c001d794:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001d798:	c1 e6 04             	shl    esi,0x4
c001d79b:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c001d79f:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c001d7a2:	85 d2                	test   edx,edx
c001d7a4:	0f 85 bf 00 00 00    	jne    c001d869 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d7aa:	83 ec 0c             	sub    esp,0xc
c001d7ad:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d7b1:	03 06                	add    eax,DWORD PTR [esi]
c001d7b3:	50                   	push   eax
c001d7b4:	e8 4b f8 ff ff       	call   c001d004 <Thr::getAddressOfKernelSymbol(char const*)>
c001d7b9:	83 c4 10             	add    esp,0x10
c001d7bc:	89 c2                	mov    edx,eax
c001d7be:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c001d7c3:	85 c0                	test   eax,eax
c001d7c5:	0f 85 9e 00 00 00    	jne    c001d869 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d7cb:	83 ec 0c             	sub    esp,0xc
c001d7ce:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d7d2:	03 06                	add    eax,DWORD PTR [esi]
c001d7d4:	50                   	push   eax
c001d7d5:	e8 02 0e ff ff       	call   c000e5dc <Krnl::resolveCompatibilitySymbol(char*)>
c001d7da:	83 c4 10             	add    esp,0x10
c001d7dd:	89 c2                	mov    edx,eax
c001d7df:	85 c0                	test   eax,eax
c001d7e1:	0f 85 82 00 00 00    	jne    c001d869 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d7e7:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001d7eb:	50                   	push   eax
c001d7ec:	50                   	push   eax
c001d7ed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d7f1:	03 06                	add    eax,DWORD PTR [esi]
c001d7f3:	50                   	push   eax
c001d7f4:	68 8c ca 02 c0       	push   0xc002ca8c
c001d7f9:	e8 f3 56 ff ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c001d7fe:	58                   	pop    eax
c001d7ff:	5a                   	pop    edx
c001d800:	68 a6 ca 02 c0       	push   0xc002caa6
c001d805:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d80c:	50                   	push   eax
c001d80d:	e8 46 30 fe ff       	call   c0000858 <strcpy>
c001d812:	59                   	pop    ecx
c001d813:	58                   	pop    eax
c001d814:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d818:	03 06                	add    eax,DWORD PTR [esi]
c001d81a:	50                   	push   eax
c001d81b:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d822:	50                   	push   eax
c001d823:	e8 70 31 fe ff       	call   c0000998 <strcat>
c001d828:	58                   	pop    eax
c001d829:	5a                   	pop    edx
c001d82a:	68 3c cb 02 c0       	push   0xc002cb3c
c001d82f:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d836:	50                   	push   eax
c001d837:	e8 5c 31 fe ff       	call   c0000998 <strcat>
c001d83c:	83 c4 10             	add    esp,0x10
c001d83f:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d844:	0f 84 5d 01 00 00    	je     c001d9a7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001d84a:	83 ec 0c             	sub    esp,0xc
c001d84d:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d854:	50                   	push   eax
c001d855:	e8 57 d0 ff ff       	call   c001a8b1 <Krnl::panic(char const*)>
c001d85a:	83 c4 10             	add    esp,0x10
c001d85d:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001d861:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001d865:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001d869:	80 fb 01             	cmp    bl,0x1
c001d86c:	0f 85 88 00 00 00    	jne    c001d8fa <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e9>
c001d872:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c001d879:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001d87d:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c001d881:	01 ce                	add    esi,ecx
c001d883:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001d889:	0f 94 c0             	sete   al
c001d88c:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001d892:	0f 94 c3             	sete   bl
c001d895:	09 c3                	or     ebx,eax
c001d897:	8b 06                	mov    eax,DWORD PTR [esi]
c001d899:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001d89e:	74 41                	je     c001d8e1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d0>
c001d8a0:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001d8a3:	84 db                	test   bl,bl
c001d8a5:	75 15                	jne    c001d8bc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ab>
c001d8a7:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d8ab:	66 83 f8 0c          	cmp    ax,0xc
c001d8af:	76 05                	jbe    c001d8b6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a5>
c001d8b1:	b8 0c 00 00 00       	mov    eax,0xc
c001d8b6:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d8ba:	76 37                	jbe    c001d8f3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001d8bc:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c001d8c0:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d8c5:	0f 84 dc 00 00 00    	je     c001d9a7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001d8cb:	83 ec 0c             	sub    esp,0xc
c001d8ce:	68 bd ca 02 c0       	push   0xc002cabd
c001d8d3:	e8 d9 cf ff ff       	call   c001a8b1 <Krnl::panic(char const*)>
c001d8d8:	83 c4 10             	add    esp,0x10
c001d8db:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001d8df:	eb 12                	jmp    c001d8f3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001d8e1:	01 c1                	add    ecx,eax
c001d8e3:	84 db                	test   bl,bl
c001d8e5:	75 0c                	jne    c001d8f3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001d8e7:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d8eb:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d8ef:	77 02                	ja     c001d8f3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001d8f1:	01 d1                	add    ecx,edx
c001d8f3:	89 0e                	mov    DWORD PTR [esi],ecx
c001d8f5:	e9 ea 00 00 00       	jmp    c001d9e4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001d8fa:	80 fb 02             	cmp    bl,0x2
c001d8fd:	75 7c                	jne    c001d97b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c001d8ff:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c001d906:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c001d90a:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c001d90e:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001d914:	74 20                	je     c001d936 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c001d916:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001d91c:	74 18                	je     c001d936 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c001d91e:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d922:	b9 0a 00 00 00       	mov    ecx,0xa
c001d927:	66 83 f8 0e          	cmp    ax,0xe
c001d92b:	77 03                	ja     c001d930 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x61f>
c001d92d:	8d 48 fc             	lea    ecx,[eax-0x4]
c001d930:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
c001d934:	76 1f                	jbe    c001d955 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x644>
c001d936:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c001d93a:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d93f:	74 66                	je     c001d9a7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001d941:	83 ec 0c             	sub    esp,0xc
c001d944:	68 d9 ca 02 c0       	push   0xc002cad9
c001d949:	e8 63 cf ff ff       	call   c001a8b1 <Krnl::panic(char const*)>
c001d94e:	83 c4 10             	add    esp,0x10
c001d951:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d955:	8b 06                	mov    eax,DWORD PTR [esi]
c001d957:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001d95c:	74 13                	je     c001d971 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x660>
c001d95e:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001d962:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c001d969:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c001d96d:	01 c8                	add    eax,ecx
c001d96f:	eb 04                	jmp    c001d975 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x664>
c001d971:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c001d975:	01 c2                	add    edx,eax
c001d977:	89 16                	mov    DWORD PTR [esi],edx
c001d979:	eb 69                	jmp    c001d9e4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001d97b:	0f b6 db             	movzx  ebx,bl
c001d97e:	50                   	push   eax
c001d97f:	50                   	push   eax
c001d980:	53                   	push   ebx
c001d981:	68 f5 ca 02 c0       	push   0xc002caf5
c001d986:	e8 66 55 ff ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c001d98b:	83 c4 10             	add    esp,0x10
c001d98e:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d993:	74 12                	je     c001d9a7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001d995:	83 ec 0c             	sub    esp,0xc
c001d998:	68 00 cb 02 c0       	push   0xc002cb00
c001d99d:	e8 0f cf ff ff       	call   c001a8b1 <Krnl::panic(char const*)>
c001d9a2:	83 c4 10             	add    esp,0x10
c001d9a5:	eb 3d                	jmp    c001d9e4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001d9a7:	83 ec 0c             	sub    esp,0xc
c001d9aa:	55                   	push   ebp
c001d9ab:	e8 62 5b ff ff       	call   c0013512 <File::close()>
c001d9b0:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d9b3:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d9b6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d9b9:	59                   	pop    ecx
c001d9ba:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d9be:	e8 7f 1f ff ff       	call   c000f942 <free>
c001d9c3:	5b                   	pop    ebx
c001d9c4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d9c8:	e8 75 1f ff ff       	call   c000f942 <free>
c001d9cd:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d9d0:	e8 6d 1f ff ff       	call   c000f942 <free>
c001d9d5:	5e                   	pop    esi
c001d9d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d9da:	e8 63 1f ff ff       	call   c000f942 <free>
c001d9df:	83 c4 10             	add    esp,0x10
c001d9e2:	eb 21                	jmp    c001da05 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d9e4:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c001d9e8:	e9 76 fd ff ff       	jmp    c001d763 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c001d9ed:	83 ec 0c             	sub    esp,0xc
c001d9f0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d9f4:	e8 49 1f ff ff       	call   c000f942 <free>
c001d9f9:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c001d9fd:	83 c4 10             	add    esp,0x10
c001da00:	e9 eb fc ff ff       	jmp    c001d6f0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c001da05:	31 c0                	xor    eax,eax
c001da07:	eb 33                	jmp    c001da3c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72b>
c001da09:	83 ec 0c             	sub    esp,0xc
c001da0c:	55                   	push   ebp
c001da0d:	e8 00 5b ff ff       	call   c0013512 <File::close()>
c001da12:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001da15:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001da18:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001da1b:	58                   	pop    eax
c001da1c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001da20:	e8 1d 1f ff ff       	call   c000f942 <free>
c001da25:	89 3c 24             	mov    DWORD PTR [esp],edi
c001da28:	e8 15 1f ff ff       	call   c000f942 <free>
c001da2d:	5a                   	pop    edx
c001da2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001da32:	e8 0b 1f ff ff       	call   c000f942 <free>
c001da37:	83 c4 10             	add    esp,0x10
c001da3a:	b0 01                	mov    al,0x1
c001da3c:	81 c4 5c 03 00 00    	add    esp,0x35c
c001da42:	5b                   	pop    ebx
c001da43:	5e                   	pop    esi
c001da44:	5f                   	pop    edi
c001da45:	5d                   	pop    ebp
c001da46:	c3                   	ret    

c001da47 <Thr::getDriverBaseFromAddress(unsigned long)>:
c001da47:	56                   	push   esi
c001da48:	31 d2                	xor    edx,edx
c001da4a:	53                   	push   ebx
c001da4b:	8b 1d e0 1b 03 c0    	mov    ebx,DWORD PTR ds:0xc0031be0
c001da51:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001da55:	39 d3                	cmp    ebx,edx
c001da57:	7e 1b                	jle    c001da74 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001da59:	8b 04 95 00 1e 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffce200]
c001da60:	39 c8                	cmp    eax,ecx
c001da62:	77 0d                	ja     c001da71 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001da64:	8b 34 95 00 1c 03 c0 	mov    esi,DWORD PTR [edx*4-0x3ffce400]
c001da6b:	01 c6                	add    esi,eax
c001da6d:	39 ce                	cmp    esi,ecx
c001da6f:	77 05                	ja     c001da76 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001da71:	42                   	inc    edx
c001da72:	eb e1                	jmp    c001da55 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001da74:	31 c0                	xor    eax,eax
c001da76:	5b                   	pop    ebx
c001da77:	5e                   	pop    esi
c001da78:	c3                   	ret    

c001da79 <Thr::getDriverNameFromAddress(unsigned long)>:
c001da79:	53                   	push   ebx
c001da7a:	31 c0                	xor    eax,eax
c001da7c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001da80:	8b 1d e0 1b 03 c0    	mov    ebx,DWORD PTR ds:0xc0031be0
c001da86:	39 c3                	cmp    ebx,eax
c001da88:	7e 22                	jle    c001daac <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001da8a:	8b 14 85 00 1e 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffce200]
c001da91:	39 ca                	cmp    edx,ecx
c001da93:	77 14                	ja     c001daa9 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001da95:	03 14 85 00 1c 03 c0 	add    edx,DWORD PTR [eax*4-0x3ffce400]
c001da9c:	39 ca                	cmp    edx,ecx
c001da9e:	76 09                	jbe    c001daa9 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001daa0:	8b 04 85 00 20 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce000]
c001daa7:	eb 05                	jmp    c001daae <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001daa9:	40                   	inc    eax
c001daaa:	eb da                	jmp    c001da86 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001daac:	31 c0                	xor    eax,eax
c001daae:	5b                   	pop    ebx
c001daaf:	c3                   	ret    

c001dab0 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001dab0:	53                   	push   ebx
c001dab1:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001dab5:	53                   	push   ebx
c001dab6:	e8 8c ff ff ff       	call   c001da47 <Thr::getDriverBaseFromAddress(unsigned long)>
c001dabb:	5a                   	pop    edx
c001dabc:	31 d2                	xor    edx,edx
c001dabe:	85 c0                	test   eax,eax
c001dac0:	74 04                	je     c001dac6 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001dac2:	89 da                	mov    edx,ebx
c001dac4:	29 c2                	sub    edx,eax
c001dac6:	89 d0                	mov    eax,edx
c001dac8:	5b                   	pop    ebx
c001dac9:	c3                   	ret    

c001daca <Thr::loadDLL(char const*, bool)>:
c001daca:	55                   	push   ebp
c001dacb:	57                   	push   edi
c001dacc:	56                   	push   esi
c001dacd:	53                   	push   ebx
c001dace:	81 ec 34 01 00 00    	sub    esp,0x134
c001dad4:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001dadb:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c001dae2:	56                   	push   esi
c001dae3:	68 18 cb 02 c0       	push   0xc002cb18
c001dae8:	e8 04 54 ff ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c001daed:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001daf4:	e8 39 1e ff ff       	call   c000f932 <malloc>
c001daf9:	83 c4 0c             	add    esp,0xc
c001dafc:	89 c3                	mov    ebx,eax
c001dafe:	ff 35 d0 23 03 c0    	push   DWORD PTR ds:0xc00323d0
c001db04:	56                   	push   esi
c001db05:	50                   	push   eax
c001db06:	e8 45 59 ff ff       	call   c0013450 <File::File(char const*, Process*)>
c001db0b:	83 c4 10             	add    esp,0x10
c001db0e:	85 db                	test   ebx,ebx
c001db10:	75 3c                	jne    c001db4e <Thr::loadDLL(char const*, bool)+0x84>
c001db12:	89 e8                	mov    eax,ebp
c001db14:	84 c0                	test   al,al
c001db16:	0f 84 d5 01 00 00    	je     c001dcf1 <Thr::loadDLL(char const*, bool)+0x227>
c001db1c:	57                   	push   edi
c001db1d:	57                   	push   edi
c001db1e:	68 29 cb 02 c0       	push   0xc002cb29
c001db23:	8d 7c 24 2c          	lea    edi,[esp+0x2c]
c001db27:	57                   	push   edi
c001db28:	e8 2b 2d fe ff       	call   c0000858 <strcpy>
c001db2d:	58                   	pop    eax
c001db2e:	5a                   	pop    edx
c001db2f:	56                   	push   esi
c001db30:	57                   	push   edi
c001db31:	e8 62 2e fe ff       	call   c0000998 <strcat>
c001db36:	59                   	pop    ecx
c001db37:	58                   	pop    eax
c001db38:	68 3c cb 02 c0       	push   0xc002cb3c
c001db3d:	57                   	push   edi
c001db3e:	e8 55 2e fe ff       	call   c0000998 <strcat>
c001db43:	89 3c 24             	mov    DWORD PTR [esp],edi
c001db46:	e8 66 cd ff ff       	call   c001a8b1 <Krnl::panic(char const*)>
c001db4b:	83 c4 10             	add    esp,0x10
c001db4e:	51                   	push   ecx
c001db4f:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c001db53:	50                   	push   eax
c001db54:	8d 44 24 20          	lea    eax,[esp+0x20]
c001db58:	50                   	push   eax
c001db59:	53                   	push   ebx
c001db5a:	e8 01 5c ff ff       	call   c0013760 <File::stat(unsigned long long*, bool*)>
c001db5f:	83 c4 10             	add    esp,0x10
c001db62:	85 db                	test   ebx,ebx
c001db64:	74 0c                	je     c001db72 <Thr::loadDLL(char const*, bool)+0xa8>
c001db66:	83 ec 0c             	sub    esp,0xc
c001db69:	8b 03                	mov    eax,DWORD PTR [ebx]
c001db6b:	53                   	push   ebx
c001db6c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001db6f:	83 c4 10             	add    esp,0x10
c001db72:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c001db77:	75 0a                	jne    c001db83 <Thr::loadDLL(char const*, bool)+0xb9>
c001db79:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001db7d:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c001db81:	75 3c                	jne    c001dbbf <Thr::loadDLL(char const*, bool)+0xf5>
c001db83:	89 e8                	mov    eax,ebp
c001db85:	84 c0                	test   al,al
c001db87:	0f 84 4c 01 00 00    	je     c001dcd9 <Thr::loadDLL(char const*, bool)+0x20f>
c001db8d:	51                   	push   ecx
c001db8e:	51                   	push   ecx
c001db8f:	68 29 cb 02 c0       	push   0xc002cb29
c001db94:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c001db98:	53                   	push   ebx
c001db99:	e8 ba 2c fe ff       	call   c0000858 <strcpy>
c001db9e:	5f                   	pop    edi
c001db9f:	58                   	pop    eax
c001dba0:	56                   	push   esi
c001dba1:	53                   	push   ebx
c001dba2:	e8 f1 2d fe ff       	call   c0000998 <strcat>
c001dba7:	58                   	pop    eax
c001dba8:	5a                   	pop    edx
c001dba9:	68 3c cb 02 c0       	push   0xc002cb3c
c001dbae:	53                   	push   ebx
c001dbaf:	e8 e4 2d fe ff       	call   c0000998 <strcat>
c001dbb4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001dbb7:	e8 f5 cc ff ff       	call   c001a8b1 <Krnl::panic(char const*)>
c001dbbc:	83 c4 10             	add    esp,0x10
c001dbbf:	e8 60 41 ff ff       	call   c0011d24 <Virt::getAKernelVAS()>
c001dbc4:	51                   	push   ecx
c001dbc5:	6a 03                	push   0x3
c001dbc7:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001dbcb:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001dbcf:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c001dbd5:	83 d3 00             	adc    ebx,0x0
c001dbd8:	89 ca                	mov    edx,ecx
c001dbda:	89 d1                	mov    ecx,edx
c001dbdc:	0f ac d9 0c          	shrd   ecx,ebx,0xc
c001dbe0:	51                   	push   ecx
c001dbe1:	50                   	push   eax
c001dbe2:	e8 3b 48 ff ff       	call   c0012422 <VAS::allocatePages(int, int)>
c001dbe7:	5f                   	pop    edi
c001dbe8:	89 c3                	mov    ebx,eax
c001dbea:	58                   	pop    eax
c001dbeb:	53                   	push   ebx
c001dbec:	68 3e cb 02 c0       	push   0xc002cb3e
c001dbf1:	e8 fb 52 ff ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c001dbf6:	89 34 24             	mov    DWORD PTR [esp],esi
c001dbf9:	e8 ba 2b fe ff       	call   c00007b8 <strlen>
c001dbfe:	8b 3d e0 1b 03 c0    	mov    edi,DWORD PTR ds:0xc0031be0
c001dc04:	40                   	inc    eax
c001dc05:	89 04 24             	mov    DWORD PTR [esp],eax
c001dc08:	e8 25 1d ff ff       	call   c000f932 <malloc>
c001dc0d:	89 04 bd 00 20 03 c0 	mov    DWORD PTR [edi*4-0x3ffce000],eax
c001dc14:	58                   	pop    eax
c001dc15:	a1 e0 1b 03 c0       	mov    eax,ds:0xc0031be0
c001dc1a:	5a                   	pop    edx
c001dc1b:	56                   	push   esi
c001dc1c:	ff 34 85 00 20 03 c0 	push   DWORD PTR [eax*4-0x3ffce000]
c001dc23:	e8 30 2c fe ff       	call   c0000858 <strcpy>
c001dc28:	a1 e0 1b 03 c0       	mov    eax,ds:0xc0031be0
c001dc2d:	8d 50 01             	lea    edx,[eax+0x1]
c001dc30:	89 1c 85 00 1e 03 c0 	mov    DWORD PTR [eax*4-0x3ffce200],ebx
c001dc37:	89 15 e0 1b 03 c0    	mov    DWORD PTR ds:0xc0031be0,edx
c001dc3d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001dc41:	83 c4 0c             	add    esp,0xc
c001dc44:	89 14 85 00 1c 03 c0 	mov    DWORD PTR [eax*4-0x3ffce400],edx
c001dc4b:	6a 01                	push   0x1
c001dc4d:	53                   	push   ebx
c001dc4e:	56                   	push   esi
c001dc4f:	e8 bd f6 ff ff       	call   c001d311 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001dc54:	83 c4 10             	add    esp,0x10
c001dc57:	89 c7                	mov    edi,eax
c001dc59:	84 c0                	test   al,al
c001dc5b:	0f 85 8c 00 00 00    	jne    c001dced <Thr::loadDLL(char const*, bool)+0x223>
c001dc61:	89 e8                	mov    eax,ebp
c001dc63:	84 c0                	test   al,al
c001dc65:	74 76                	je     c001dcdd <Thr::loadDLL(char const*, bool)+0x213>
c001dc67:	83 ec 0c             	sub    esp,0xc
c001dc6a:	68 4b cb 02 c0       	push   0xc002cb4b
c001dc6f:	e8 3d cc ff ff       	call   c001a8b1 <Krnl::panic(char const*)>
c001dc74:	83 c4 10             	add    esp,0x10
c001dc77:	eb 64                	jmp    c001dcdd <Thr::loadDLL(char const*, bool)+0x213>
c001dc79:	e8 a6 40 ff ff       	call   c0011d24 <Virt::getAKernelVAS()>
c001dc7e:	89 f5                	mov    ebp,esi
c001dc80:	c1 e5 0c             	shl    ebp,0xc
c001dc83:	52                   	push   edx
c001dc84:	01 dd                	add    ebp,ebx
c001dc86:	52                   	push   edx
c001dc87:	55                   	push   ebp
c001dc88:	50                   	push   eax
c001dc89:	e8 fe 42 ff ff       	call   c0011f8c <VAS::getPageTableEntry(unsigned long)>
c001dc8e:	83 c4 10             	add    esp,0x10
c001dc91:	f6 00 60             	test   BYTE PTR [eax],0x60
c001dc94:	75 0c                	jne    c001dca2 <Thr::loadDLL(char const*, bool)+0x1d8>
c001dc96:	83 ec 0c             	sub    esp,0xc
c001dc99:	55                   	push   ebp
c001dc9a:	e8 75 22 ff ff       	call   c000ff14 <Phys::freePage(unsigned long)>
c001dc9f:	83 c4 10             	add    esp,0x10
c001dca2:	46                   	inc    esi
c001dca3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001dca7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001dcab:	05 ff 0f 00 00       	add    eax,0xfff
c001dcb0:	83 d2 00             	adc    edx,0x0
c001dcb3:	0f ac d0 0c          	shrd   eax,edx,0xc
c001dcb7:	c1 ea 0c             	shr    edx,0xc
c001dcba:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001dcbe:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001dcc2:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c001dcc6:	ba 00 00 00 00       	mov    edx,0x0
c001dccb:	89 d0                	mov    eax,edx
c001dccd:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c001dcd1:	72 a6                	jb     c001dc79 <Thr::loadDLL(char const*, bool)+0x1af>
c001dcd3:	89 f8                	mov    eax,edi
c001dcd5:	84 c0                	test   al,al
c001dcd7:	75 18                	jne    c001dcf1 <Thr::loadDLL(char const*, bool)+0x227>
c001dcd9:	31 db                	xor    ebx,ebx
c001dcdb:	eb 14                	jmp    c001dcf1 <Thr::loadDLL(char const*, bool)+0x227>
c001dcdd:	83 ec 0c             	sub    esp,0xc
c001dce0:	68 6a cb 02 c0       	push   0xc002cb6a
c001dce5:	e8 c7 cb ff ff       	call   c001a8b1 <Krnl::panic(char const*)>
c001dcea:	83 c4 10             	add    esp,0x10
c001dced:	31 f6                	xor    esi,esi
c001dcef:	eb b2                	jmp    c001dca3 <Thr::loadDLL(char const*, bool)+0x1d9>
c001dcf1:	81 c4 2c 01 00 00    	add    esp,0x12c
c001dcf7:	89 d8                	mov    eax,ebx
c001dcf9:	5b                   	pop    ebx
c001dcfa:	5e                   	pop    esi
c001dcfb:	5f                   	pop    edi
c001dcfc:	5d                   	pop    ebp
c001dcfd:	c3                   	ret    

c001dcfe <Thr::executeDLL(unsigned long, void*)>:
c001dcfe:	56                   	push   esi
c001dcff:	53                   	push   ebx
c001dd00:	52                   	push   edx
c001dd01:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001dd05:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001dd09:	85 db                	test   ebx,ebx
c001dd0b:	75 10                	jne    c001dd1d <Thr::executeDLL(unsigned long, void*)+0x1f>
c001dd0d:	83 ec 0c             	sub    esp,0xc
c001dd10:	68 86 cb 02 c0       	push   0xc002cb86
c001dd15:	e8 97 cb ff ff       	call   c001a8b1 <Krnl::panic(char const*)>
c001dd1a:	83 c4 10             	add    esp,0x10
c001dd1d:	50                   	push   eax
c001dd1e:	50                   	push   eax
c001dd1f:	53                   	push   ebx
c001dd20:	68 b0 cb 02 c0       	push   0xc002cbb0
c001dd25:	e8 c7 51 ff ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c001dd2a:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001dd2e:	89 d8                	mov    eax,ebx
c001dd30:	83 c4 14             	add    esp,0x14
c001dd33:	5b                   	pop    ebx
c001dd34:	5e                   	pop    esi
c001dd35:	ff e0                	jmp    eax
c001dd37:	90                   	nop

c001dd38 <userModeEntryPoint(void*)>:
c001dd38:	a1 a8 23 03 c0       	mov    eax,ds:0xc00323a8
c001dd3d:	48                   	dec    eax
c001dd3e:	a3 a8 23 03 c0       	mov    ds:0xc00323a8,eax
c001dd43:	75 01                	jne    c001dd46 <userModeEntryPoint(void*)+0xe>
c001dd45:	fb                   	sti    
c001dd46:	fb                   	sti    
c001dd47:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dd4c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001dd4f:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c001dd55:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001dd59:	e9 cc 25 fe ff       	jmp    c000032a <goToUsermode>

c001dd5e <changeTSS>:
c001dd5e:	83 ec 14             	sub    esp,0x14
c001dd61:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dd66:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001dd69:	b8 00 00 e8 01       	mov    eax,0x1e80000
c001dd6e:	c1 e2 15             	shl    edx,0x15
c001dd71:	29 d0                	sub    eax,edx
c001dd73:	50                   	push   eax
c001dd74:	a1 68 ee 02 c0       	mov    eax,ds:0xc002ee68
c001dd79:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001dd7f:	05 7c 11 00 00       	add    eax,0x117c
c001dd84:	50                   	push   eax
c001dd85:	e8 9a 36 ff ff       	call   c0011424 <TSS::setESP(unsigned long)>
c001dd8a:	83 c4 1c             	add    esp,0x1c
c001dd8d:	c3                   	ret    

c001dd8e <switchToThread(ThreadControlBlock*)>:
c001dd8e:	57                   	push   edi
c001dd8f:	a1 a4 23 03 c0       	mov    eax,ds:0xc00323a4
c001dd94:	56                   	push   esi
c001dd95:	85 c0                	test   eax,eax
c001dd97:	53                   	push   ebx
c001dd98:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001dd9c:	0f 85 88 00 00 00    	jne    c001de2a <switchToThread(ThreadControlBlock*)+0x9c>
c001dda2:	8a 41 44             	mov    al,BYTE PTR [ecx+0x44]
c001dda5:	3c ff                	cmp    al,0xff
c001dda7:	74 7d                	je     c001de26 <switchToThread(ThreadControlBlock*)+0x98>
c001dda9:	0f b6 d0             	movzx  edx,al
c001ddac:	b8 84 03 00 00       	mov    eax,0x384
c001ddb1:	29 d0                	sub    eax,edx
c001ddb3:	c1 e0 10             	shl    eax,0x10
c001ddb6:	03 41 38             	add    eax,DWORD PTR [ecx+0x38]
c001ddb9:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001ddbc:	a1 68 ee 02 c0       	mov    eax,ds:0xc002ee68
c001ddc1:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001ddc7:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c001ddce:	74 4a                	je     c001de1a <switchToThread(ThreadControlBlock*)+0x8c>
c001ddd0:	0f 31                	rdtsc  
c001ddd2:	a3 e8 23 03 c0       	mov    ds:0xc00323e8,eax
c001ddd7:	89 c6                	mov    esi,eax
c001ddd9:	89 d7                	mov    edi,edx
c001dddb:	2b 35 d8 23 03 c0    	sub    esi,DWORD PTR ds:0xc00323d8
c001dde1:	89 15 ec 23 03 c0    	mov    DWORD PTR ds:0xc00323ec,edx
c001dde7:	1b 3d dc 23 03 c0    	sbb    edi,DWORD PTR ds:0xc00323dc
c001dded:	89 35 e0 23 03 c0    	mov    DWORD PTR ds:0xc00323e0,esi
c001ddf3:	a3 d8 23 03 c0       	mov    ds:0xc00323d8,eax
c001ddf8:	89 3d e4 23 03 c0    	mov    DWORD PTR ds:0xc00323e4,edi
c001ddfe:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c001de04:	89 15 dc 23 03 c0    	mov    DWORD PTR ds:0xc00323dc,edx
c001de0a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001de0d:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c001de10:	01 c6                	add    esi,eax
c001de12:	11 d7                	adc    edi,edx
c001de14:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c001de17:	89 7b 14             	mov    DWORD PTR [ebx+0x14],edi
c001de1a:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001de1e:	5b                   	pop    ebx
c001de1f:	5e                   	pop    esi
c001de20:	5f                   	pop    edi
c001de21:	e9 3c 25 fe ff       	jmp    c0000362 <switchToThreadASM>
c001de26:	31 c0                	xor    eax,eax
c001de28:	eb 8f                	jmp    c001ddb9 <switchToThread(ThreadControlBlock*)+0x2b>
c001de2a:	5b                   	pop    ebx
c001de2b:	c7 05 a0 23 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00323a0,0x1
c001de35:	5e                   	pop    esi
c001de36:	5f                   	pop    edi
c001de37:	c3                   	ret    

c001de38 <Process::addArgs(char**)>:
c001de38:	57                   	push   edi
c001de39:	56                   	push   esi
c001de3a:	53                   	push   ebx
c001de3b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001de3f:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001de43:	c7 86 36 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x536],0x0
c001de4d:	85 ff                	test   edi,edi
c001de4f:	74 3d                	je     c001de8e <Process::addArgs(char**)+0x56>
c001de51:	8b 07                	mov    eax,DWORD PTR [edi]
c001de53:	85 c0                	test   eax,eax
c001de55:	74 37                	je     c001de8e <Process::addArgs(char**)+0x56>
c001de57:	31 db                	xor    ebx,ebx
c001de59:	83 ec 0c             	sub    esp,0xc
c001de5c:	50                   	push   eax
c001de5d:	e8 56 29 fe ff       	call   c00007b8 <strlen>
c001de62:	40                   	inc    eax
c001de63:	89 04 24             	mov    DWORD PTR [esp],eax
c001de66:	e8 c7 1a ff ff       	call   c000f932 <malloc>
c001de6b:	89 84 9e 3a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x53a],eax
c001de72:	5a                   	pop    edx
c001de73:	59                   	pop    ecx
c001de74:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c001de77:	43                   	inc    ebx
c001de78:	50                   	push   eax
c001de79:	e8 da 29 fe ff       	call   c0000858 <strcpy>
c001de7e:	ff 86 36 05 00 00    	inc    DWORD PTR [esi+0x536]
c001de84:	83 c4 10             	add    esp,0x10
c001de87:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001de8a:	85 c0                	test   eax,eax
c001de8c:	75 cb                	jne    c001de59 <Process::addArgs(char**)+0x21>
c001de8e:	5b                   	pop    ebx
c001de8f:	5e                   	pop    esi
c001de90:	5f                   	pop    edi
c001de91:	c3                   	ret    

c001de92 <Process::Process(char const*, Process*, char**)>:
c001de92:	56                   	push   esi
c001de93:	53                   	push   ebx
c001de94:	83 ec 14             	sub    esp,0x14
c001de97:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001de9b:	05 0c 02 00 00       	add    eax,0x20c
c001dea0:	bb 07 00 00 00       	mov    ebx,0x7
c001dea5:	89 c6                	mov    esi,eax
c001dea7:	85 db                	test   ebx,ebx
c001dea9:	78 12                	js     c001debd <Process::Process(char const*, Process*, char**)+0x2b>
c001deab:	83 ec 0c             	sub    esp,0xc
c001deae:	56                   	push   esi
c001deaf:	e8 be b6 00 00       	call   c0029572 <ThreadControlBlock::ThreadControlBlock()>
c001deb4:	83 c4 10             	add    esp,0x10
c001deb7:	83 c6 63             	add    esi,0x63
c001deba:	4b                   	dec    ebx
c001debb:	eb ea                	jmp    c001dea7 <Process::Process(char const*, Process*, char**)+0x15>
c001debd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dec1:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001dec8:	83 ec 0c             	sub    esp,0xc
c001decb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001decf:	e8 2e c8 ff ff       	call   c001a702 <Krnl::newProcessEnv(Process*)>
c001ded4:	83 c4 10             	add    esp,0x10
c001ded7:	89 c2                	mov    edx,eax
c001ded9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dedd:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001dee3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dee7:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001def0:	a1 f0 e3 02 c0       	mov    eax,ds:0xc002e3f0
c001def5:	8d 50 01             	lea    edx,[eax+0x1]
c001def8:	89 15 f0 e3 02 c0    	mov    DWORD PTR ds:0xc002e3f0,edx
c001defe:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001df02:	89 02                	mov    DWORD PTR [edx],eax
c001df04:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c001df0c:	83 ec 0c             	sub    esp,0xc
c001df0f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001df13:	e8 1a 1a ff ff       	call   c000f932 <malloc>
c001df18:	83 c4 10             	add    esp,0x10
c001df1b:	89 c3                	mov    ebx,eax
c001df1d:	83 ec 08             	sub    esp,0x8
c001df20:	6a 00                	push   0x0
c001df22:	53                   	push   ebx
c001df23:	e8 a2 48 ff ff       	call   c00127ca <VAS::VAS(bool)>
c001df28:	83 c4 10             	add    esp,0x10
c001df2b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001df2f:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001df35:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001df39:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001df43:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001df47:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001df4b:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001df51:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001df55:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001df5b:	85 c0                	test   eax,eax
c001df5d:	74 42                	je     c001dfa1 <Process::Process(char const*, Process*, char**)+0x10f>
c001df5f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001df63:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001df69:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001df6f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001df73:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001df79:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001df7d:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001df83:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001df89:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001df8d:	05 0c 01 00 00       	add    eax,0x10c
c001df92:	83 ec 08             	sub    esp,0x8
c001df95:	52                   	push   edx
c001df96:	50                   	push   eax
c001df97:	e8 bc 28 fe ff       	call   c0000858 <strcpy>
c001df9c:	83 c4 10             	add    esp,0x10
c001df9f:	eb 63                	jmp    c001e004 <Process::Process(char const*, Process*, char**)+0x172>
c001dfa1:	c7 44 24 04 c4 02 00 00 	mov    DWORD PTR [esp+0x4],0x2c4
c001dfa9:	83 ec 0c             	sub    esp,0xc
c001dfac:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001dfb0:	e8 7d 19 ff ff       	call   c000f932 <malloc>
c001dfb5:	83 c4 10             	add    esp,0x10
c001dfb8:	89 c3                	mov    ebx,eax
c001dfba:	83 ec 08             	sub    esp,0x8
c001dfbd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dfc1:	53                   	push   ebx
c001dfc2:	e8 3d 31 ff ff       	call   c0011104 <VgaText::VgaText(char const*)>
c001dfc7:	83 c4 10             	add    esp,0x10
c001dfca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dfce:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001dfd4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dfd8:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001dfde:	83 ec 0c             	sub    esp,0xc
c001dfe1:	50                   	push   eax
c001dfe2:	e8 54 26 ff ff       	call   c001063b <addToTerminalCycle(VgaText*)>
c001dfe7:	83 c4 10             	add    esp,0x10
c001dfea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dfee:	05 0c 01 00 00       	add    eax,0x10c
c001dff3:	83 ec 08             	sub    esp,0x8
c001dff6:	68 cf cb 02 c0       	push   0xc002cbcf
c001dffb:	50                   	push   eax
c001dffc:	e8 57 28 fe ff       	call   c0000858 <strcpy>
c001e001:	83 c4 10             	add    esp,0x10
c001e004:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e008:	83 c0 0c             	add    eax,0xc
c001e00b:	83 ec 08             	sub    esp,0x8
c001e00e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e012:	50                   	push   eax
c001e013:	e8 40 28 fe ff       	call   c0000858 <strcpy>
c001e018:	83 c4 10             	add    esp,0x10
c001e01b:	83 ec 08             	sub    esp,0x8
c001e01e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001e022:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e026:	e8 0d fe ff ff       	call   c001de38 <Process::addArgs(char**)>
c001e02b:	83 c4 10             	add    esp,0x10
c001e02e:	83 ec 08             	sub    esp,0x8
c001e031:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e035:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e039:	e8 9d ed ff ff       	call   c001cddb <Thr::loadProgramIntoMemory(Process*, char const*)>
c001e03e:	83 c4 10             	add    esp,0x10
c001e041:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001e045:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001e049:	83 f0 01             	xor    eax,0x1
c001e04c:	88 c2                	mov    dl,al
c001e04e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e052:	88 90 3e 07 00 00    	mov    BYTE PTR [eax+0x73e],dl
c001e058:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001e05d:	83 ec 08             	sub    esp,0x8
c001e060:	50                   	push   eax
c001e061:	68 fc cc 02 c0       	push   0xc002ccfc
c001e066:	e8 86 4e ff ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c001e06b:	83 c4 10             	add    esp,0x10
c001e06e:	90                   	nop
c001e06f:	83 c4 14             	add    esp,0x14
c001e072:	5b                   	pop    ebx
c001e073:	5e                   	pop    esi
c001e074:	c3                   	ret    
c001e075:	90                   	nop

c001e076 <Process::Process(bool, char const*, Process*, char**)>:
c001e076:	56                   	push   esi
c001e077:	53                   	push   ebx
c001e078:	83 ec 24             	sub    esp,0x24
c001e07b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001e07f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001e083:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e087:	05 0c 02 00 00       	add    eax,0x20c
c001e08c:	bb 07 00 00 00       	mov    ebx,0x7
c001e091:	89 c6                	mov    esi,eax
c001e093:	85 db                	test   ebx,ebx
c001e095:	78 12                	js     c001e0a9 <Process::Process(bool, char const*, Process*, char**)+0x33>
c001e097:	83 ec 0c             	sub    esp,0xc
c001e09a:	56                   	push   esi
c001e09b:	e8 d2 b4 00 00       	call   c0029572 <ThreadControlBlock::ThreadControlBlock()>
c001e0a0:	83 c4 10             	add    esp,0x10
c001e0a3:	83 c6 63             	add    esi,0x63
c001e0a6:	4b                   	dec    ebx
c001e0a7:	eb ea                	jmp    c001e093 <Process::Process(bool, char const*, Process*, char**)+0x1d>
c001e0a9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e0ad:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001e0b4:	83 ec 0c             	sub    esp,0xc
c001e0b7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001e0bb:	e8 42 c6 ff ff       	call   c001a702 <Krnl::newProcessEnv(Process*)>
c001e0c0:	83 c4 10             	add    esp,0x10
c001e0c3:	89 c2                	mov    edx,eax
c001e0c5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e0c9:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001e0cf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e0d3:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001e0dc:	a1 f0 e3 02 c0       	mov    eax,ds:0xc002e3f0
c001e0e1:	8d 50 01             	lea    edx,[eax+0x1]
c001e0e4:	89 15 f0 e3 02 c0    	mov    DWORD PTR ds:0xc002e3f0,edx
c001e0ea:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001e0ee:	89 02                	mov    DWORD PTR [edx],eax
c001e0f0:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c001e0f8:	83 ec 0c             	sub    esp,0xc
c001e0fb:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001e0ff:	e8 2e 18 ff ff       	call   c000f932 <malloc>
c001e104:	83 c4 10             	add    esp,0x10
c001e107:	89 c3                	mov    ebx,eax
c001e109:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001e10e:	83 ec 08             	sub    esp,0x8
c001e111:	50                   	push   eax
c001e112:	53                   	push   ebx
c001e113:	e8 b2 46 ff ff       	call   c00127ca <VAS::VAS(bool)>
c001e118:	83 c4 10             	add    esp,0x10
c001e11b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e11f:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001e125:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e129:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001e133:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e137:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001e13b:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001e141:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e145:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001e14b:	85 c0                	test   eax,eax
c001e14d:	74 42                	je     c001e191 <Process::Process(bool, char const*, Process*, char**)+0x11b>
c001e14f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e153:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001e159:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001e15f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e163:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001e169:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e16d:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001e173:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001e179:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e17d:	05 0c 01 00 00       	add    eax,0x10c
c001e182:	83 ec 08             	sub    esp,0x8
c001e185:	52                   	push   edx
c001e186:	50                   	push   eax
c001e187:	e8 cc 26 fe ff       	call   c0000858 <strcpy>
c001e18c:	83 c4 10             	add    esp,0x10
c001e18f:	eb 63                	jmp    c001e1f4 <Process::Process(bool, char const*, Process*, char**)+0x17e>
c001e191:	c7 44 24 18 c4 02 00 00 	mov    DWORD PTR [esp+0x18],0x2c4
c001e199:	83 ec 0c             	sub    esp,0xc
c001e19c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001e1a0:	e8 8d 17 ff ff       	call   c000f932 <malloc>
c001e1a5:	83 c4 10             	add    esp,0x10
c001e1a8:	89 c3                	mov    ebx,eax
c001e1aa:	83 ec 08             	sub    esp,0x8
c001e1ad:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001e1b1:	53                   	push   ebx
c001e1b2:	e8 4d 2f ff ff       	call   c0011104 <VgaText::VgaText(char const*)>
c001e1b7:	83 c4 10             	add    esp,0x10
c001e1ba:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e1be:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001e1c4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e1c8:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001e1ce:	83 ec 0c             	sub    esp,0xc
c001e1d1:	50                   	push   eax
c001e1d2:	e8 64 24 ff ff       	call   c001063b <addToTerminalCycle(VgaText*)>
c001e1d7:	83 c4 10             	add    esp,0x10
c001e1da:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e1de:	05 0c 01 00 00       	add    eax,0x10c
c001e1e3:	83 ec 08             	sub    esp,0x8
c001e1e6:	68 cf cb 02 c0       	push   0xc002cbcf
c001e1eb:	50                   	push   eax
c001e1ec:	e8 67 26 fe ff       	call   c0000858 <strcpy>
c001e1f1:	83 c4 10             	add    esp,0x10
c001e1f4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e1f8:	83 c0 0c             	add    eax,0xc
c001e1fb:	83 ec 08             	sub    esp,0x8
c001e1fe:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001e202:	50                   	push   eax
c001e203:	e8 50 26 fe ff       	call   c0000858 <strcpy>
c001e208:	83 c4 10             	add    esp,0x10
c001e20b:	83 ec 08             	sub    esp,0x8
c001e20e:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001e212:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001e216:	e8 1d fc ff ff       	call   c001de38 <Process::addArgs(char**)>
c001e21b:	83 c4 10             	add    esp,0x10
c001e21e:	90                   	nop
c001e21f:	83 c4 24             	add    esp,0x24
c001e222:	5b                   	pop    ebx
c001e223:	5e                   	pop    esi
c001e224:	c3                   	ret    

c001e225 <taskStartupFunction>:
c001e225:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e22a:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001e22d:	c3                   	ret    

c001e22e <Semaphore::Semaphore(int)>:
c001e22e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e232:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001e236:	89 10                	mov    DWORD PTR [eax],edx
c001e238:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e23c:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001e243:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e247:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e24e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e252:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e259:	90                   	nop
c001e25a:	c3                   	ret    
c001e25b:	90                   	nop

c001e25c <Mutex::Mutex()>:
c001e25c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e260:	6a 01                	push   0x1
c001e262:	50                   	push   eax
c001e263:	e8 c6 ff ff ff       	call   c001e22e <Semaphore::Semaphore(int)>
c001e268:	83 c4 08             	add    esp,0x8
c001e26b:	90                   	nop
c001e26c:	c3                   	ret    
c001e26d:	90                   	nop

c001e26e <Process::createThread(void (*)(void*), void*, int)>:
c001e26e:	55                   	push   ebp
c001e26f:	31 c9                	xor    ecx,ecx
c001e271:	57                   	push   edi
c001e272:	56                   	push   esi
c001e273:	53                   	push   ebx
c001e274:	83 ec 1c             	sub    esp,0x1c
c001e277:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e27b:	66 8b b3 24 05 00 00 	mov    si,WORD PTR [ebx+0x524]
c001e282:	89 f2                	mov    edx,esi
c001e284:	0f b7 c2             	movzx  eax,dx
c001e287:	83 e2 01             	and    edx,0x1
c001e28a:	74 16                	je     c001e2a2 <Process::createThread(void (*)(void*), void*, int)+0x34>
c001e28c:	d1 f8                	sar    eax,1
c001e28e:	41                   	inc    ecx
c001e28f:	89 c2                	mov    edx,eax
c001e291:	83 f9 10             	cmp    ecx,0x10
c001e294:	75 ee                	jne    c001e284 <Process::createThread(void (*)(void*), void*, int)+0x16>
c001e296:	83 c4 1c             	add    esp,0x1c
c001e299:	31 db                	xor    ebx,ebx
c001e29b:	89 d8                	mov    eax,ebx
c001e29d:	5b                   	pop    ebx
c001e29e:	5e                   	pop    esi
c001e29f:	5f                   	pop    edi
c001e2a0:	5d                   	pop    ebp
c001e2a1:	c3                   	ret    
c001e2a2:	b8 01 00 00 00       	mov    eax,0x1
c001e2a7:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001e2aa:	d3 e0                	shl    eax,cl
c001e2ac:	09 c6                	or     esi,eax
c001e2ae:	8d 04 0a             	lea    eax,[edx+ecx*1]
c001e2b1:	66 89 b3 24 05 00 00 	mov    WORD PTR [ebx+0x524],si
c001e2b8:	89 c6                	mov    esi,eax
c001e2ba:	c1 e6 05             	shl    esi,0x5
c001e2bd:	01 f0                	add    eax,esi
c001e2bf:	01 d8                	add    eax,ebx
c001e2c1:	80 b8 6e 02 00 00 00 	cmp    BYTE PTR [eax+0x26e],0x0
c001e2c8:	75 0a                	jne    c001e2d4 <Process::createThread(void (*)(void*), void*, int)+0x66>
c001e2ca:	c7 80 65 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x265],0x0
c001e2d4:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001e2da:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001e2de:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c001e2e1:	01 ca                	add    edx,ecx
c001e2e3:	83 ec 08             	sub    esp,0x8
c001e2e6:	89 d0                	mov    eax,edx
c001e2e8:	c1 e0 05             	shl    eax,0x5
c001e2eb:	01 d0                	add    eax,edx
c001e2ed:	8a 54 24 44          	mov    dl,BYTE PTR [esp+0x44]
c001e2f1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001e2f5:	01 d8                	add    eax,ebx
c001e2f7:	89 b8 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edi
c001e2fd:	89 a8 51 02 00 00    	mov    DWORD PTR [eax+0x251],ebp
c001e303:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c001e309:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c001e30f:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c001e315:	89 cd                	mov    ebp,ecx
c001e317:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c001e31b:	f7 dd                	neg    ebp
c001e31d:	c1 e5 15             	shl    ebp,0x15
c001e320:	81 c5 e0 ff ff 01    	add    ebp,0x1ffffe0
c001e326:	89 a8 10 02 00 00    	mov    DWORD PTR [eax+0x210],ebp
c001e32c:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c001e336:	89 88 18 02 00 00    	mov    DWORD PTR [eax+0x218],ecx
c001e33c:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001e346:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c001e350:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e354:	8d 9c 03 0c 02 00 00 	lea    ebx,[ebx+eax*1+0x20c]
c001e35b:	53                   	push   ebx
c001e35c:	68 c4 23 03 c0       	push   0xc00323c4
c001e361:	e8 c6 af 00 00       	call   c002932c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e366:	89 d8                	mov    eax,ebx
c001e368:	83 c4 10             	add    esp,0x10
c001e36b:	83 c4 1c             	add    esp,0x1c
c001e36e:	5b                   	pop    ebx
c001e36f:	5e                   	pop    esi
c001e370:	5f                   	pop    edi
c001e371:	5d                   	pop    ebp
c001e372:	c3                   	ret    
c001e373:	90                   	nop

c001e374 <Process::createUserThread()>:
c001e374:	83 ec 0c             	sub    esp,0xc
c001e377:	68 80 00 00 00       	push   0x80
c001e37c:	6a 00                	push   0x0
c001e37e:	68 38 dd 01 c0       	push   0xc001dd38
c001e383:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e387:	e8 e2 fe ff ff       	call   c001e26e <Process::createThread(void (*)(void*), void*, int)>
c001e38c:	83 c4 1c             	add    esp,0x1c
c001e38f:	c3                   	ret    

c001e390 <setupMultitasking(void (*)())>:
c001e390:	56                   	push   esi
c001e391:	53                   	push   ebx
c001e392:	51                   	push   ecx
c001e393:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001e397:	eb 10                	jmp    c001e3a9 <setupMultitasking(void (*)())+0x19>
c001e399:	83 ec 0c             	sub    esp,0xc
c001e39c:	68 c4 23 03 c0       	push   0xc00323c4
c001e3a1:	e8 d8 ae 00 00       	call   c002927e <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e3a6:	83 c4 10             	add    esp,0x10
c001e3a9:	83 ec 0c             	sub    esp,0xc
c001e3ac:	68 c4 23 03 c0       	push   0xc00323c4
c001e3b1:	e8 a4 ae 00 00       	call   c002925a <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e3b6:	83 c4 10             	add    esp,0x10
c001e3b9:	84 c0                	test   al,al
c001e3bb:	74 dc                	je     c001e399 <setupMultitasking(void (*)())+0x9>
c001e3bd:	83 ec 0c             	sub    esp,0xc
c001e3c0:	68 3f 07 00 00       	push   0x73f
c001e3c5:	e8 68 15 ff ff       	call   c000f932 <malloc>
c001e3ca:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001e3d1:	89 c3                	mov    ebx,eax
c001e3d3:	6a 00                	push   0x0
c001e3d5:	68 d3 cb 02 c0       	push   0xc002cbd3
c001e3da:	6a 01                	push   0x1
c001e3dc:	50                   	push   eax
c001e3dd:	e8 94 fc ff ff       	call   c001e076 <Process::Process(bool, char const*, Process*, char**)>
c001e3e2:	83 c4 18             	add    esp,0x18
c001e3e5:	89 1d d0 23 03 c0    	mov    DWORD PTR ds:0xc00323d0,ebx
c001e3eb:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001e3f1:	68 24 cd 02 c0       	push   0xc002cd24
c001e3f6:	e8 f6 4a ff ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c001e3fb:	58                   	pop    eax
c001e3fc:	5a                   	pop    edx
c001e3fd:	6a 63                	push   0x63
c001e3ff:	68 58 cd 02 c0       	push   0xc002cd58
c001e404:	e8 e8 4a ff ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c001e409:	59                   	pop    ecx
c001e40a:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001e410:	e8 f7 28 ff ff       	call   c0010d0c <setActiveTerminal(VgaText*)>
c001e415:	66 83 8b 24 05 00 00 01 	or     WORD PTR [ebx+0x524],0x1
c001e41d:	c7 83 65 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x265],0x0
c001e427:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001e42d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001e430:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c001e43a:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c001e440:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c001e446:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c001e450:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c001e45a:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001e464:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c001e46a:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001e474:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c001e47a:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001e484:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c001e48a:	58                   	pop    eax
c001e48b:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001e491:	5a                   	pop    edx
c001e492:	68 cf cb 02 c0       	push   0xc002cbcf
c001e497:	50                   	push   eax
c001e498:	e8 bb 23 fe ff       	call   c0000858 <strcpy>
c001e49d:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c001e4a4:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001e4a8:	83 c4 14             	add    esp,0x14
c001e4ab:	5b                   	pop    ebx
c001e4ac:	5e                   	pop    esi
c001e4ad:	e9 a2 1e fe ff       	jmp    c0000354 <switchToThreadASMFirstTime>

c001e4b2 <schedule()>:
c001e4b2:	a1 a4 23 03 c0       	mov    eax,ds:0xc00323a4
c001e4b7:	85 c0                	test   eax,eax
c001e4b9:	74 0b                	je     c001e4c6 <schedule()+0x14>
c001e4bb:	c7 05 a0 23 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00323a0,0x1
c001e4c5:	c3                   	ret    
c001e4c6:	53                   	push   ebx
c001e4c7:	83 ec 14             	sub    esp,0x14
c001e4ca:	68 c4 23 03 c0       	push   0xc00323c4
c001e4cf:	e8 86 ad 00 00       	call   c002925a <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e4d4:	83 c4 10             	add    esp,0x10
c001e4d7:	84 c0                	test   al,al
c001e4d9:	75 38                	jne    c001e513 <schedule()+0x61>
c001e4db:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e4e0:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e4e3:	4a                   	dec    edx
c001e4e4:	74 32                	je     c001e518 <schedule()+0x66>
c001e4e6:	83 ec 0c             	sub    esp,0xc
c001e4e9:	68 c4 23 03 c0       	push   0xc00323c4
c001e4ee:	e8 83 ad 00 00       	call   c0029276 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e4f3:	c7 04 24 c4 23 03 c0 	mov    DWORD PTR [esp],0xc00323c4
c001e4fa:	89 c3                	mov    ebx,eax
c001e4fc:	e8 7d ad 00 00       	call   c002927e <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e501:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001e508:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e50b:	e8 7e f8 ff ff       	call   c001dd8e <switchToThread(ThreadControlBlock*)>
c001e510:	83 c4 10             	add    esp,0x10
c001e513:	83 c4 08             	add    esp,0x8
c001e516:	5b                   	pop    ebx
c001e517:	c3                   	ret    
c001e518:	83 ec 08             	sub    esp,0x8
c001e51b:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001e522:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001e528:	68 c4 23 03 c0       	push   0xc00323c4
c001e52d:	e8 fa ad 00 00       	call   c002932c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e532:	83 c4 10             	add    esp,0x10
c001e535:	eb af                	jmp    c001e4e6 <schedule()+0x34>
c001e537:	90                   	nop

c001e538 <Semaphore::tryAcquire()>:
c001e538:	53                   	push   ebx
c001e539:	83 ec 08             	sub    esp,0x8
c001e53c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e540:	fa                   	cli    
c001e541:	a1 a8 23 03 c0       	mov    eax,ds:0xc00323a8
c001e546:	8d 50 01             	lea    edx,[eax+0x1]
c001e549:	89 15 a8 23 03 c0    	mov    DWORD PTR ds:0xc00323a8,edx
c001e54f:	8b 15 a4 23 03 c0    	mov    edx,DWORD PTR ds:0xc00323a4
c001e555:	8d 5a 01             	lea    ebx,[edx+0x1]
c001e558:	89 1d a4 23 03 c0    	mov    DWORD PTR ds:0xc00323a4,ebx
c001e55e:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c001e561:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c001e563:	7c 2a                	jl     c001e58f <Semaphore::tryAcquire()+0x57>
c001e565:	89 15 a4 23 03 c0    	mov    DWORD PTR ds:0xc00323a4,edx
c001e56b:	85 d2                	test   edx,edx
c001e56d:	75 0a                	jne    c001e579 <Semaphore::tryAcquire()+0x41>
c001e56f:	8b 15 a0 23 03 c0    	mov    edx,DWORD PTR ds:0xc00323a0
c001e575:	85 d2                	test   edx,edx
c001e577:	75 5b                	jne    c001e5d4 <Semaphore::tryAcquire()+0x9c>
c001e579:	a3 a8 23 03 c0       	mov    ds:0xc00323a8,eax
c001e57e:	85 c0                	test   eax,eax
c001e580:	74 07                	je     c001e589 <Semaphore::tryAcquire()+0x51>
c001e582:	31 c0                	xor    eax,eax
c001e584:	83 c4 08             	add    esp,0x8
c001e587:	5b                   	pop    ebx
c001e588:	c3                   	ret    
c001e589:	fb                   	sti    
c001e58a:	83 c4 08             	add    esp,0x8
c001e58d:	5b                   	pop    ebx
c001e58e:	c3                   	ret    
c001e58f:	43                   	inc    ebx
c001e590:	89 15 a4 23 03 c0    	mov    DWORD PTR ds:0xc00323a4,edx
c001e596:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c001e599:	85 d2                	test   edx,edx
c001e59b:	75 1f                	jne    c001e5bc <Semaphore::tryAcquire()+0x84>
c001e59d:	8b 0d a0 23 03 c0    	mov    ecx,DWORD PTR ds:0xc00323a0
c001e5a3:	85 c9                	test   ecx,ecx
c001e5a5:	74 15                	je     c001e5bc <Semaphore::tryAcquire()+0x84>
c001e5a7:	c7 05 a0 23 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00323a0,0x0
c001e5b1:	e8 fc fe ff ff       	call   c001e4b2 <schedule()>
c001e5b6:	a1 a8 23 03 c0       	mov    eax,ds:0xc00323a8
c001e5bb:	48                   	dec    eax
c001e5bc:	a3 a8 23 03 c0       	mov    ds:0xc00323a8,eax
c001e5c1:	85 c0                	test   eax,eax
c001e5c3:	75 08                	jne    c001e5cd <Semaphore::tryAcquire()+0x95>
c001e5c5:	fb                   	sti    
c001e5c6:	b0 01                	mov    al,0x1
c001e5c8:	83 c4 08             	add    esp,0x8
c001e5cb:	5b                   	pop    ebx
c001e5cc:	c3                   	ret    
c001e5cd:	b0 01                	mov    al,0x1
c001e5cf:	83 c4 08             	add    esp,0x8
c001e5d2:	5b                   	pop    ebx
c001e5d3:	c3                   	ret    
c001e5d4:	c7 05 a0 23 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00323a0,0x0
c001e5de:	e8 cf fe ff ff       	call   c001e4b2 <schedule()>
c001e5e3:	a1 a8 23 03 c0       	mov    eax,ds:0xc00323a8
c001e5e8:	48                   	dec    eax
c001e5e9:	a3 a8 23 03 c0       	mov    ds:0xc00323a8,eax
c001e5ee:	85 c0                	test   eax,eax
c001e5f0:	75 90                	jne    c001e582 <Semaphore::tryAcquire()+0x4a>
c001e5f2:	eb 95                	jmp    c001e589 <Semaphore::tryAcquire()+0x51>

c001e5f4 <Semaphore::assertLocked(char const*)>:
c001e5f4:	83 ec 0c             	sub    esp,0xc
c001e5f7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e5fb:	fa                   	cli    
c001e5fc:	ff 05 a8 23 03 c0    	inc    DWORD PTR ds:0xc00323a8
c001e602:	a1 a4 23 03 c0       	mov    eax,ds:0xc00323a4
c001e607:	8d 48 01             	lea    ecx,[eax+0x1]
c001e60a:	89 0d a4 23 03 c0    	mov    DWORD PTR ds:0xc00323a4,ecx
c001e610:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001e612:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c001e615:	7c 24                	jl     c001e63b <Semaphore::assertLocked(char const*)+0x47>
c001e617:	a3 a4 23 03 c0       	mov    ds:0xc00323a4,eax
c001e61c:	85 c0                	test   eax,eax
c001e61e:	75 09                	jne    c001e629 <Semaphore::assertLocked(char const*)+0x35>
c001e620:	a1 a0 23 03 c0       	mov    eax,ds:0xc00323a0
c001e625:	85 c0                	test   eax,eax
c001e627:	75 29                	jne    c001e652 <Semaphore::assertLocked(char const*)+0x5e>
c001e629:	a1 a8 23 03 c0       	mov    eax,ds:0xc00323a8
c001e62e:	48                   	dec    eax
c001e62f:	a3 a8 23 03 c0       	mov    ds:0xc00323a8,eax
c001e634:	75 01                	jne    c001e637 <Semaphore::assertLocked(char const*)+0x43>
c001e636:	fb                   	sti    
c001e637:	83 c4 0c             	add    esp,0xc
c001e63a:	c3                   	ret    
c001e63b:	83 ec 0c             	sub    esp,0xc
c001e63e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001e642:	e8 6a c2 ff ff       	call   c001a8b1 <Krnl::panic(char const*)>
c001e647:	a1 a4 23 03 c0       	mov    eax,ds:0xc00323a4
c001e64c:	83 c4 10             	add    esp,0x10
c001e64f:	48                   	dec    eax
c001e650:	eb c5                	jmp    c001e617 <Semaphore::assertLocked(char const*)+0x23>
c001e652:	c7 05 a0 23 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00323a0,0x0
c001e65c:	e8 51 fe ff ff       	call   c001e4b2 <schedule()>
c001e661:	eb c6                	jmp    c001e629 <Semaphore::assertLocked(char const*)+0x35>

c001e663 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c001e663:	83 ec 14             	sub    esp,0x14
c001e666:	ff 35 a8 23 03 c0    	push   DWORD PTR ds:0xc00323a8
c001e66c:	68 7c cd 02 c0       	push   0xc002cd7c
c001e671:	e8 7b 48 ff ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c001e676:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e67b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e67f:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e682:	e8 2b fe ff ff       	call   c001e4b2 <schedule()>
c001e687:	a1 a8 23 03 c0       	mov    eax,ds:0xc00323a8
c001e68c:	83 c4 10             	add    esp,0x10
c001e68f:	48                   	dec    eax
c001e690:	a3 a8 23 03 c0       	mov    ds:0xc00323a8,eax
c001e695:	85 c0                	test   eax,eax
c001e697:	75 06                	jne    c001e69f <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x3c>
c001e699:	fb                   	sti    
c001e69a:	a1 a8 23 03 c0       	mov    eax,ds:0xc00323a8
c001e69f:	83 ec 08             	sub    esp,0x8
c001e6a2:	50                   	push   eax
c001e6a3:	68 b0 cd 02 c0       	push   0xc002cdb0
c001e6a8:	e8 44 48 ff ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c001e6ad:	83 c4 1c             	add    esp,0x1c
c001e6b0:	c3                   	ret    

c001e6b1 <blockTask(TaskState)>:
c001e6b1:	83 ec 0c             	sub    esp,0xc
c001e6b4:	fa                   	cli    
c001e6b5:	ff 05 a8 23 03 c0    	inc    DWORD PTR ds:0xc00323a8
c001e6bb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e6bf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e6c4:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e6c7:	e8 e6 fd ff ff       	call   c001e4b2 <schedule()>
c001e6cc:	a1 a8 23 03 c0       	mov    eax,ds:0xc00323a8
c001e6d1:	48                   	dec    eax
c001e6d2:	a3 a8 23 03 c0       	mov    ds:0xc00323a8,eax
c001e6d7:	75 01                	jne    c001e6da <blockTask(TaskState)+0x29>
c001e6d9:	fb                   	sti    
c001e6da:	83 c4 0c             	add    esp,0xc
c001e6dd:	c3                   	ret    

c001e6de <waitTask(int, int*, int)>:
c001e6de:	83 ec 18             	sub    esp,0x18
c001e6e1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e6e6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e6ea:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001e6ed:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e6f1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e6f6:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c001e6f9:	6a 07                	push   0x7
c001e6fb:	e8 b1 ff ff ff       	call   c001e6b1 <blockTask(TaskState)>
c001e700:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e705:	83 c4 10             	add    esp,0x10
c001e708:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c001e70b:	85 d2                	test   edx,edx
c001e70d:	74 0a                	je     c001e719 <waitTask(int, int*, int)+0x3b>
c001e70f:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c001e712:	89 02                	mov    DWORD PTR [edx],eax
c001e714:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e719:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c001e71c:	83 c4 0c             	add    esp,0xc
c001e71f:	c3                   	ret    

c001e720 <nanoSleepUntil(unsigned long long)>:
c001e720:	83 ec 0c             	sub    esp,0xc
c001e723:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e727:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e72b:	3b 05 f0 f4 02 c0    	cmp    eax,DWORD PTR ds:0xc002f4f0
c001e731:	89 d1                	mov    ecx,edx
c001e733:	1b 0d f4 f4 02 c0    	sbb    ecx,DWORD PTR ds:0xc002f4f4
c001e739:	73 04                	jae    c001e73f <nanoSleepUntil(unsigned long long)+0x1f>
c001e73b:	83 c4 0c             	add    esp,0xc
c001e73e:	c3                   	ret    
c001e73f:	fa                   	cli    
c001e740:	ff 05 a8 23 03 c0    	inc    DWORD PTR ds:0xc00323a8
c001e746:	83 ec 08             	sub    esp,0x8
c001e749:	ff 05 a4 23 03 c0    	inc    DWORD PTR ds:0xc00323a4
c001e74f:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001e755:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c001e758:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c001e75b:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001e761:	68 b8 23 03 c0       	push   0xc00323b8
c001e766:	e8 c1 ab 00 00       	call   c002932c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e76b:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001e772:	e8 3a ff ff ff       	call   c001e6b1 <blockTask(TaskState)>
c001e777:	a1 a4 23 03 c0       	mov    eax,ds:0xc00323a4
c001e77c:	83 c4 10             	add    esp,0x10
c001e77f:	48                   	dec    eax
c001e780:	a3 a4 23 03 c0       	mov    ds:0xc00323a4,eax
c001e785:	85 c0                	test   eax,eax
c001e787:	75 09                	jne    c001e792 <nanoSleepUntil(unsigned long long)+0x72>
c001e789:	a1 a0 23 03 c0       	mov    eax,ds:0xc00323a0
c001e78e:	85 c0                	test   eax,eax
c001e790:	75 12                	jne    c001e7a4 <nanoSleepUntil(unsigned long long)+0x84>
c001e792:	a1 a8 23 03 c0       	mov    eax,ds:0xc00323a8
c001e797:	48                   	dec    eax
c001e798:	a3 a8 23 03 c0       	mov    ds:0xc00323a8,eax
c001e79d:	75 9c                	jne    c001e73b <nanoSleepUntil(unsigned long long)+0x1b>
c001e79f:	fb                   	sti    
c001e7a0:	83 c4 0c             	add    esp,0xc
c001e7a3:	c3                   	ret    
c001e7a4:	c7 05 a0 23 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00323a0,0x0
c001e7ae:	e8 ff fc ff ff       	call   c001e4b2 <schedule()>
c001e7b3:	eb dd                	jmp    c001e792 <nanoSleepUntil(unsigned long long)+0x72>

c001e7b5 <nanoSleep(unsigned long long)>:
c001e7b5:	a1 f0 f4 02 c0       	mov    eax,ds:0xc002f4f0
c001e7ba:	8b 15 f4 f4 02 c0    	mov    edx,DWORD PTR ds:0xc002f4f4
c001e7c0:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c001e7c4:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c001e7c8:	e9 53 ff ff ff       	jmp    c001e720 <nanoSleepUntil(unsigned long long)>

c001e7cd <sleep(unsigned long long)>:
c001e7cd:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c001e7d5:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c001e7da:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c001e7de:	01 ca                	add    edx,ecx
c001e7e0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001e7e4:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001e7e8:	eb cb                	jmp    c001e7b5 <nanoSleep(unsigned long long)>

c001e7ea <Semaphore::acquire()>:
c001e7ea:	83 ec 0c             	sub    esp,0xc
c001e7ed:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e7f1:	fa                   	cli    
c001e7f2:	a1 a4 23 03 c0       	mov    eax,ds:0xc00323a4
c001e7f7:	ff 05 a8 23 03 c0    	inc    DWORD PTR ds:0xc00323a8
c001e7fd:	8d 48 01             	lea    ecx,[eax+0x1]
c001e800:	89 0d a4 23 03 c0    	mov    DWORD PTR ds:0xc00323a4,ecx
c001e806:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001e809:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c001e80b:	7d 28                	jge    c001e835 <Semaphore::acquire()+0x4b>
c001e80d:	41                   	inc    ecx
c001e80e:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c001e811:	a3 a4 23 03 c0       	mov    ds:0xc00323a4,eax
c001e816:	85 c0                	test   eax,eax
c001e818:	75 09                	jne    c001e823 <Semaphore::acquire()+0x39>
c001e81a:	a1 a0 23 03 c0       	mov    eax,ds:0xc00323a0
c001e81f:	85 c0                	test   eax,eax
c001e821:	75 4e                	jne    c001e871 <Semaphore::acquire()+0x87>
c001e823:	a1 a8 23 03 c0       	mov    eax,ds:0xc00323a8
c001e828:	48                   	dec    eax
c001e829:	a3 a8 23 03 c0       	mov    ds:0xc00323a8,eax
c001e82e:	75 01                	jne    c001e831 <Semaphore::acquire()+0x47>
c001e830:	fb                   	sti    
c001e831:	83 c4 0c             	add    esp,0xc
c001e834:	c3                   	ret    
c001e835:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e83a:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001e841:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001e844:	85 c9                	test   ecx,ecx
c001e846:	74 3a                	je     c001e882 <Semaphore::acquire()+0x98>
c001e848:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c001e84b:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001e851:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c001e854:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e859:	83 ec 0c             	sub    esp,0xc
c001e85c:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c001e85f:	6a 05                	push   0x5
c001e861:	e8 4b fe ff ff       	call   c001e6b1 <blockTask(TaskState)>
c001e866:	a1 a4 23 03 c0       	mov    eax,ds:0xc00323a4
c001e86b:	83 c4 10             	add    esp,0x10
c001e86e:	48                   	dec    eax
c001e86f:	eb a0                	jmp    c001e811 <Semaphore::acquire()+0x27>
c001e871:	c7 05 a0 23 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00323a0,0x0
c001e87b:	e8 32 fc ff ff       	call   c001e4b2 <schedule()>
c001e880:	eb a1                	jmp    c001e823 <Semaphore::acquire()+0x39>
c001e882:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e887:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001e88a:	eb c8                	jmp    c001e854 <Semaphore::acquire()+0x6a>

c001e88c <taskReturned>:
c001e88c:	83 ec 18             	sub    esp,0x18
c001e88f:	68 e4 cd 02 c0       	push   0xc002cde4
c001e894:	e8 18 c0 ff ff       	call   c001a8b1 <Krnl::panic(char const*)>
c001e899:	83 c4 10             	add    esp,0x10
c001e89c:	83 ec 0c             	sub    esp,0xc
c001e89f:	6a 02                	push   0x2
c001e8a1:	e8 0b fe ff ff       	call   c001e6b1 <blockTask(TaskState)>
c001e8a6:	fa                   	cli    
c001e8a7:	ff 05 a8 23 03 c0    	inc    DWORD PTR ds:0xc00323a8
c001e8ad:	e8 00 fc ff ff       	call   c001e4b2 <schedule()>
c001e8b2:	a1 a8 23 03 c0       	mov    eax,ds:0xc00323a8
c001e8b7:	83 c4 10             	add    esp,0x10
c001e8ba:	48                   	dec    eax
c001e8bb:	a3 a8 23 03 c0       	mov    ds:0xc00323a8,eax
c001e8c0:	85 c0                	test   eax,eax
c001e8c2:	75 d8                	jne    c001e89c <taskReturned+0x10>
c001e8c4:	fb                   	sti    
c001e8c5:	eb d5                	jmp    c001e89c <taskReturned+0x10>

c001e8c7 <Thr::processFromPID(int)>:
c001e8c7:	57                   	push   edi
c001e8c8:	56                   	push   esi
c001e8c9:	53                   	push   ebx
c001e8ca:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001e8ce:	83 ec 0c             	sub    esp,0xc
c001e8d1:	68 da cb 02 c0       	push   0xc002cbda
c001e8d6:	e8 16 46 ff ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c001e8db:	fa                   	cli    
c001e8dc:	ff 05 a8 23 03 c0    	inc    DWORD PTR ds:0xc00323a8
c001e8e2:	c7 04 24 c4 23 03 c0 	mov    DWORD PTR [esp],0xc00323c4
c001e8e9:	e8 88 a9 00 00       	call   c0029276 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e8ee:	83 c4 10             	add    esp,0x10
c001e8f1:	89 c7                	mov    edi,eax
c001e8f3:	eb 14                	jmp    c001e909 <Thr::processFromPID(int)+0x42>
c001e8f5:	83 ec 0c             	sub    esp,0xc
c001e8f8:	68 c4 23 03 c0       	push   0xc00323c4
c001e8fd:	e8 74 a9 00 00       	call   c0029276 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e902:	83 c4 10             	add    esp,0x10
c001e905:	39 f8                	cmp    eax,edi
c001e907:	74 49                	je     c001e952 <Thr::processFromPID(int)+0x8b>
c001e909:	83 ec 0c             	sub    esp,0xc
c001e90c:	68 c4 23 03 c0       	push   0xc00323c4
c001e911:	e8 60 a9 00 00       	call   c0029276 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e916:	c7 04 24 c4 23 03 c0 	mov    DWORD PTR [esp],0xc00323c4
c001e91d:	89 c3                	mov    ebx,eax
c001e91f:	e8 5a a9 00 00       	call   c002927e <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e924:	58                   	pop    eax
c001e925:	5a                   	pop    edx
c001e926:	53                   	push   ebx
c001e927:	68 c4 23 03 c0       	push   0xc00323c4
c001e92c:	e8 fb a9 00 00       	call   c002932c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e931:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e934:	83 c4 10             	add    esp,0x10
c001e937:	39 30                	cmp    DWORD PTR [eax],esi
c001e939:	75 ba                	jne    c001e8f5 <Thr::processFromPID(int)+0x2e>
c001e93b:	a1 a8 23 03 c0       	mov    eax,ds:0xc00323a8
c001e940:	48                   	dec    eax
c001e941:	a3 a8 23 03 c0       	mov    ds:0xc00323a8,eax
c001e946:	74 07                	je     c001e94f <Thr::processFromPID(int)+0x88>
c001e948:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e94b:	5b                   	pop    ebx
c001e94c:	5e                   	pop    esi
c001e94d:	5f                   	pop    edi
c001e94e:	c3                   	ret    
c001e94f:	fb                   	sti    
c001e950:	eb f6                	jmp    c001e948 <Thr::processFromPID(int)+0x81>
c001e952:	a1 a8 23 03 c0       	mov    eax,ds:0xc00323a8
c001e957:	48                   	dec    eax
c001e958:	a3 a8 23 03 c0       	mov    ds:0xc00323a8,eax
c001e95d:	75 01                	jne    c001e960 <Thr::processFromPID(int)+0x99>
c001e95f:	fb                   	sti    
c001e960:	83 ec 0c             	sub    esp,0xc
c001e963:	68 f5 cb 02 c0       	push   0xc002cbf5
c001e968:	e8 84 45 ff ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c001e96d:	83 c4 10             	add    esp,0x10
c001e970:	31 c0                	xor    eax,eax
c001e972:	5b                   	pop    ebx
c001e973:	5e                   	pop    esi
c001e974:	5f                   	pop    edi
c001e975:	c3                   	ret    

c001e976 <unblockTask(ThreadControlBlock*)>:
c001e976:	53                   	push   ebx
c001e977:	83 ec 08             	sub    esp,0x8
c001e97a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e97e:	fa                   	cli    
c001e97f:	ff 05 a8 23 03 c0    	inc    DWORD PTR ds:0xc00323a8
c001e985:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001e988:	85 c0                	test   eax,eax
c001e98a:	74 66                	je     c001e9f2 <unblockTask(ThreadControlBlock*)+0x7c>
c001e98c:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001e98f:	48                   	dec    eax
c001e990:	74 31                	je     c001e9c3 <unblockTask(ThreadControlBlock*)+0x4d>
c001e992:	83 ec 0c             	sub    esp,0xc
c001e995:	68 c4 23 03 c0       	push   0xc00323c4
c001e99a:	e8 d7 a8 00 00       	call   c0029276 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e99f:	83 c4 10             	add    esp,0x10
c001e9a2:	85 c0                	test   eax,eax
c001e9a4:	75 17                	jne    c001e9bd <unblockTask(ThreadControlBlock*)+0x47>
c001e9a6:	eb 68                	jmp    c001ea10 <unblockTask(ThreadControlBlock*)+0x9a>
c001e9a8:	83 ec 08             	sub    esp,0x8
c001e9ab:	50                   	push   eax
c001e9ac:	68 c4 23 03 c0       	push   0xc00323c4
c001e9b1:	e8 5e ac 00 00       	call   c0029614 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001e9b6:	83 c4 10             	add    esp,0x10
c001e9b9:	85 c0                	test   eax,eax
c001e9bb:	74 53                	je     c001ea10 <unblockTask(ThreadControlBlock*)+0x9a>
c001e9bd:	39 c3                	cmp    ebx,eax
c001e9bf:	75 e7                	jne    c001e9a8 <unblockTask(ThreadControlBlock*)+0x32>
c001e9c1:	eb 1c                	jmp    c001e9df <unblockTask(ThreadControlBlock*)+0x69>
c001e9c3:	83 ec 0c             	sub    esp,0xc
c001e9c6:	68 d4 ce 02 c0       	push   0xc002ced4
c001e9cb:	e8 21 45 ff ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c001e9d0:	c7 04 24 60 ce 02 c0 	mov    DWORD PTR [esp],0xc002ce60
c001e9d7:	e8 15 45 ff ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c001e9dc:	83 c4 10             	add    esp,0x10
c001e9df:	a1 a8 23 03 c0       	mov    eax,ds:0xc00323a8
c001e9e4:	48                   	dec    eax
c001e9e5:	a3 a8 23 03 c0       	mov    ds:0xc00323a8,eax
c001e9ea:	75 01                	jne    c001e9ed <unblockTask(ThreadControlBlock*)+0x77>
c001e9ec:	fb                   	sti    
c001e9ed:	83 c4 08             	add    esp,0x8
c001e9f0:	5b                   	pop    ebx
c001e9f1:	c3                   	ret    
c001e9f2:	83 ec 0c             	sub    esp,0xc
c001e9f5:	68 18 ce 02 c0       	push   0xc002ce18
c001e9fa:	e8 f2 44 ff ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c001e9ff:	c7 04 24 60 ce 02 c0 	mov    DWORD PTR [esp],0xc002ce60
c001ea06:	e8 e6 44 ff ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c001ea0b:	83 c4 10             	add    esp,0x10
c001ea0e:	eb cf                	jmp    c001e9df <unblockTask(ThreadControlBlock*)+0x69>
c001ea10:	83 ec 08             	sub    esp,0x8
c001ea13:	53                   	push   ebx
c001ea14:	68 c4 23 03 c0       	push   0xc00323c4
c001ea19:	e8 0e a9 00 00       	call   c002932c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001ea1e:	83 c4 10             	add    esp,0x10
c001ea21:	eb bc                	jmp    c001e9df <unblockTask(ThreadControlBlock*)+0x69>

c001ea23 <cleanupTerminatedTask(ThreadControlBlock*)>:
c001ea23:	55                   	push   ebp
c001ea24:	57                   	push   edi
c001ea25:	56                   	push   esi
c001ea26:	53                   	push   ebx
c001ea27:	83 ec 1c             	sub    esp,0x1c
c001ea2a:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001ea2e:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001ea31:	8b b8 36 05 00 00    	mov    edi,DWORD PTR [eax+0x536]
c001ea37:	85 ff                	test   edi,edi
c001ea39:	7e 20                	jle    c001ea5b <cleanupTerminatedTask(ThreadControlBlock*)+0x38>
c001ea3b:	31 f6                	xor    esi,esi
c001ea3d:	83 ec 0c             	sub    esp,0xc
c001ea40:	ff b4 b0 3a 05 00 00 	push   DWORD PTR [eax+esi*4+0x53a]
c001ea47:	46                   	inc    esi
c001ea48:	e8 f5 0e ff ff       	call   c000f942 <free>
c001ea4d:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001ea50:	83 c4 10             	add    esp,0x10
c001ea53:	39 b0 36 05 00 00    	cmp    DWORD PTR [eax+0x536],esi
c001ea59:	7f e2                	jg     c001ea3d <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c001ea5b:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001ea65:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001ea6a:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c001ea6d:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001ea70:	d3 c0                	rol    eax,cl
c001ea72:	66 21 82 24 05 00 00 	and    WORD PTR [edx+0x524],ax
c001ea79:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001ea7c:	89 f7                	mov    edi,esi
c001ea7e:	66 83 be 24 05 00 00 00 	cmp    WORD PTR [esi+0x524],0x0
c001ea86:	0f 85 74 01 00 00    	jne    c001ec00 <cleanupTerminatedTask(ThreadControlBlock*)+0x1dd>
c001ea8c:	8b ae 3a 07 00 00    	mov    ebp,DWORD PTR [esi+0x73a]
c001ea92:	85 ed                	test   ebp,ebp
c001ea94:	74 1b                	je     c001eab1 <cleanupTerminatedTask(ThreadControlBlock*)+0x8e>
c001ea96:	83 ec 0c             	sub    esp,0xc
c001ea99:	55                   	push   ebp
c001ea9a:	e8 7f bb ff ff       	call   c001a61e <EnvVarContainer::~EnvVarContainer()>
c001ea9f:	59                   	pop    ecx
c001eaa0:	5e                   	pop    esi
c001eaa1:	6a 0c                	push   0xc
c001eaa3:	55                   	push   ebp
c001eaa4:	e8 68 43 ff ff       	call   c0012e11 <operator delete(void*, unsigned long)>
c001eaa9:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001eaac:	83 c4 10             	add    esp,0x10
c001eaaf:	89 f7                	mov    edi,esi
c001eab1:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001eab7:	85 c0                	test   eax,eax
c001eab9:	0f 84 aa 00 00 00    	je     c001eb69 <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001eabf:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c001eac2:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001eac6:	31 c9                	xor    ecx,ecx
c001eac8:	eb 10                	jmp    c001eada <cleanupTerminatedTask(ThreadControlBlock*)+0xb7>
c001eaca:	41                   	inc    ecx
c001eacb:	83 f9 10             	cmp    ecx,0x10
c001eace:	0f 84 95 00 00 00    	je     c001eb69 <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001ead4:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001eada:	0f b7 90 24 05 00 00 	movzx  edx,WORD PTR [eax+0x524]
c001eae1:	d3 fa                	sar    edx,cl
c001eae3:	83 e2 01             	and    edx,0x1
c001eae6:	74 e2                	je     c001eaca <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001eae8:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001eaeb:	01 ca                	add    edx,ecx
c001eaed:	89 d5                	mov    ebp,edx
c001eaef:	c1 e5 05             	shl    ebp,0x5
c001eaf2:	01 ea                	add    edx,ebp
c001eaf4:	01 d0                	add    eax,edx
c001eaf6:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c001eafc:	83 fd 07             	cmp    ebp,0x7
c001eaff:	75 c9                	jne    c001eaca <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001eb01:	05 40 02 00 00       	add    eax,0x240
c001eb06:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c001eb09:	83 fd ff             	cmp    ebp,0xffffffff
c001eb0c:	0f 8c 08 01 00 00    	jl     c001ec1a <cleanupTerminatedTask(ThreadControlBlock*)+0x1f7>
c001eb12:	0f 84 b9 01 00 00    	je     c001ecd1 <cleanupTerminatedTask(ThreadControlBlock*)+0x2ae>
c001eb18:	85 ed                	test   ebp,ebp
c001eb1a:	0f 84 a0 01 00 00    	je     c001ecc0 <cleanupTerminatedTask(ThreadControlBlock*)+0x29d>
c001eb20:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001eb22:	75 a6                	jne    c001eaca <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001eb24:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001eb2a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001eb2e:	01 d0                	add    eax,edx
c001eb30:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001eb34:	83 ec 0c             	sub    esp,0xc
c001eb37:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c001eb3d:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001eb40:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001eb46:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c001eb4d:	50                   	push   eax
c001eb4e:	e8 23 fe ff ff       	call   c001e976 <unblockTask(ThreadControlBlock*)>
c001eb53:	83 c4 10             	add    esp,0x10
c001eb56:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001eb59:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001eb5d:	89 f7                	mov    edi,esi
c001eb5f:	41                   	inc    ecx
c001eb60:	83 f9 10             	cmp    ecx,0x10
c001eb63:	0f 85 6b ff ff ff    	jne    c001ead4 <cleanupTerminatedTask(ThreadControlBlock*)+0xb1>
c001eb69:	8b 86 26 05 00 00    	mov    eax,DWORD PTR [esi+0x526]
c001eb6f:	85 c0                	test   eax,eax
c001eb71:	74 5d                	je     c001ebd0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001eb73:	8b 96 2a 05 00 00    	mov    edx,DWORD PTR [esi+0x52a]
c001eb79:	3b 82 26 05 00 00    	cmp    eax,DWORD PTR [edx+0x526]
c001eb7f:	74 4f                	je     c001ebd0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001eb81:	83 ec 0c             	sub    esp,0xc
c001eb84:	68 c4 23 03 c0       	push   0xc00323c4
c001eb89:	e8 e8 a6 00 00       	call   c0029276 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001eb8e:	c7 04 24 c4 23 03 c0 	mov    DWORD PTR [esp],0xc00323c4
c001eb95:	89 c7                	mov    edi,eax
c001eb97:	e8 be a6 00 00       	call   c002925a <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001eb9c:	83 c4 10             	add    esp,0x10
c001eb9f:	84 c0                	test   al,al
c001eba1:	0f 84 e4 00 00 00    	je     c001ec8b <cleanupTerminatedTask(ThreadControlBlock*)+0x268>
c001eba7:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001ebaa:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001ebb0:	85 d2                	test   edx,edx
c001ebb2:	74 0f                	je     c001ebc3 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c001ebb4:	83 ec 0c             	sub    esp,0xc
c001ebb7:	8b 02                	mov    eax,DWORD PTR [edx]
c001ebb9:	52                   	push   edx
c001ebba:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001ebbd:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001ebc0:	83 c4 10             	add    esp,0x10
c001ebc3:	c7 80 26 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x526],0x0
c001ebcd:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c001ebd0:	8b 9f 32 05 00 00    	mov    ebx,DWORD PTR [edi+0x532]
c001ebd6:	85 db                	test   ebx,ebx
c001ebd8:	74 16                	je     c001ebf0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cd>
c001ebda:	83 ec 0c             	sub    esp,0xc
c001ebdd:	53                   	push   ebx
c001ebde:	e8 c3 35 ff ff       	call   c00121a6 <VAS::~VAS()>
c001ebe3:	58                   	pop    eax
c001ebe4:	5a                   	pop    edx
c001ebe5:	6a 14                	push   0x14
c001ebe7:	53                   	push   ebx
c001ebe8:	e8 24 42 ff ff       	call   c0012e11 <operator delete(void*, unsigned long)>
c001ebed:	83 c4 10             	add    esp,0x10
c001ebf0:	83 ec 0c             	sub    esp,0xc
c001ebf3:	68 0c cc 02 c0       	push   0xc002cc0c
c001ebf8:	e8 f4 42 ff ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c001ebfd:	83 c4 10             	add    esp,0x10
c001ec00:	83 ec 08             	sub    esp,0x8
c001ec03:	68 3f 07 00 00       	push   0x73f
c001ec08:	68 1a cc 02 c0       	push   0xc002cc1a
c001ec0d:	e8 df 42 ff ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c001ec12:	83 c4 2c             	add    esp,0x2c
c001ec15:	5b                   	pop    ebx
c001ec16:	5e                   	pop    esi
c001ec17:	5f                   	pop    edi
c001ec18:	5d                   	pop    ebp
c001ec19:	c3                   	ret    
c001ec1a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001ec1e:	83 ec 0c             	sub    esp,0xc
c001ec21:	68 18 cf 02 c0       	push   0xc002cf18
c001ec26:	e8 86 bc ff ff       	call   c001a8b1 <Krnl::panic(char const*)>
c001ec2b:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001ec2e:	83 c4 10             	add    esp,0x10
c001ec31:	89 f7                	mov    edi,esi
c001ec33:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ec37:	e9 8e fe ff ff       	jmp    c001eaca <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001ec3c:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001ec42:	39 82 26 05 00 00    	cmp    DWORD PTR [edx+0x526],eax
c001ec48:	75 1c                	jne    c001ec66 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001ec4a:	83 ec 0c             	sub    esp,0xc
c001ec4d:	68 80 cf 02 c0       	push   0xc002cf80
c001ec52:	e8 9a 42 ff ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c001ec57:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001ec5e:	e8 4e fa ff ff       	call   c001e6b1 <blockTask(TaskState)>
c001ec63:	83 c4 10             	add    esp,0x10
c001ec66:	83 ec 08             	sub    esp,0x8
c001ec69:	56                   	push   esi
c001ec6a:	68 c4 23 03 c0       	push   0xc00323c4
c001ec6f:	e8 b8 a6 00 00       	call   c002932c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001ec74:	c7 04 24 c4 23 03 c0 	mov    DWORD PTR [esp],0xc00323c4
c001ec7b:	e8 f6 a5 00 00       	call   c0029276 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001ec80:	83 c4 10             	add    esp,0x10
c001ec83:	39 f8                	cmp    eax,edi
c001ec85:	0f 84 1c ff ff ff    	je     c001eba7 <cleanupTerminatedTask(ThreadControlBlock*)+0x184>
c001ec8b:	83 ec 0c             	sub    esp,0xc
c001ec8e:	68 c4 23 03 c0       	push   0xc00323c4
c001ec93:	e8 de a5 00 00       	call   c0029276 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001ec98:	c7 04 24 c4 23 03 c0 	mov    DWORD PTR [esp],0xc00323c4
c001ec9f:	89 c6                	mov    esi,eax
c001eca1:	e8 d8 a5 00 00       	call   c002927e <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001eca6:	83 c4 10             	add    esp,0x10
c001eca9:	39 f3                	cmp    ebx,esi
c001ecab:	74 b9                	je     c001ec66 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001ecad:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c001ecb0:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001ecb3:	39 82 2a 05 00 00    	cmp    DWORD PTR [edx+0x52a],eax
c001ecb9:	75 ab                	jne    c001ec66 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001ecbb:	e9 7c ff ff ff       	jmp    c001ec3c <cleanupTerminatedTask(ThreadControlBlock*)+0x219>
c001ecc0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001ecc4:	83 ec 0c             	sub    esp,0xc
c001ecc7:	68 4c cf 02 c0       	push   0xc002cf4c
c001eccc:	e9 55 ff ff ff       	jmp    c001ec26 <cleanupTerminatedTask(ThreadControlBlock*)+0x203>
c001ecd1:	8b 36                	mov    esi,DWORD PTR [esi]
c001ecd3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001ecd7:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c001ecda:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001ecdd:	8b b8 2a 05 00 00    	mov    edi,DWORD PTR [eax+0x52a]
c001ece3:	01 d7                	add    edi,edx
c001ece5:	89 f8                	mov    eax,edi
c001ece7:	e9 44 fe ff ff       	jmp    c001eb30 <cleanupTerminatedTask(ThreadControlBlock*)+0x10d>

c001ecec <cleanerTaskFunction(void*)>:
c001ecec:	53                   	push   ebx
c001eced:	83 ec 08             	sub    esp,0x8
c001ecf0:	a1 a8 23 03 c0       	mov    eax,ds:0xc00323a8
c001ecf5:	48                   	dec    eax
c001ecf6:	a3 a8 23 03 c0       	mov    ds:0xc00323a8,eax
c001ecfb:	75 01                	jne    c001ecfe <cleanerTaskFunction(void*)+0x12>
c001ecfd:	fb                   	sti    
c001ecfe:	fa                   	cli    
c001ecff:	a1 a8 23 03 c0       	mov    eax,ds:0xc00323a8
c001ed04:	80 3d 8c 23 03 c0 00 	cmp    BYTE PTR ds:0xc003238c,0x0
c001ed0b:	8d 50 01             	lea    edx,[eax+0x1]
c001ed0e:	89 15 a8 23 03 c0    	mov    DWORD PTR ds:0xc00323a8,edx
c001ed14:	0f 84 b9 00 00 00    	je     c001edd3 <cleanerTaskFunction(void*)+0xe7>
c001ed1a:	a3 a8 23 03 c0       	mov    ds:0xc00323a8,eax
c001ed1f:	85 c0                	test   eax,eax
c001ed21:	75 01                	jne    c001ed24 <cleanerTaskFunction(void*)+0x38>
c001ed23:	fb                   	sti    
c001ed24:	c6 05 8c 23 03 c0 00 	mov    BYTE PTR ds:0xc003238c,0x0
c001ed2b:	fa                   	cli    
c001ed2c:	ff 05 a8 23 03 c0    	inc    DWORD PTR ds:0xc00323a8
c001ed32:	ff 05 a4 23 03 c0    	inc    DWORD PTR ds:0xc00323a4
c001ed38:	fa                   	cli    
c001ed39:	ff 05 a8 23 03 c0    	inc    DWORD PTR ds:0xc00323a8
c001ed3f:	eb 3e                	jmp    c001ed7f <cleanerTaskFunction(void*)+0x93>
c001ed41:	83 ec 0c             	sub    esp,0xc
c001ed44:	68 ac 23 03 c0       	push   0xc00323ac
c001ed49:	e8 28 a5 00 00       	call   c0029276 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001ed4e:	c7 04 24 ac 23 03 c0 	mov    DWORD PTR [esp],0xc00323ac
c001ed55:	89 c3                	mov    ebx,eax
c001ed57:	e8 22 a5 00 00       	call   c002927e <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001ed5c:	c7 04 24 30 cc 02 c0 	mov    DWORD PTR [esp],0xc002cc30
c001ed63:	e8 89 41 ff ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c001ed68:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ed6b:	e8 b3 fc ff ff       	call   c001ea23 <cleanupTerminatedTask(ThreadControlBlock*)>
c001ed70:	c7 04 24 49 cc 02 c0 	mov    DWORD PTR [esp],0xc002cc49
c001ed77:	e8 75 41 ff ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c001ed7c:	83 c4 10             	add    esp,0x10
c001ed7f:	83 ec 0c             	sub    esp,0xc
c001ed82:	68 ac 23 03 c0       	push   0xc00323ac
c001ed87:	e8 ce a4 00 00       	call   c002925a <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001ed8c:	83 c4 10             	add    esp,0x10
c001ed8f:	84 c0                	test   al,al
c001ed91:	74 ae                	je     c001ed41 <cleanerTaskFunction(void*)+0x55>
c001ed93:	a1 a8 23 03 c0       	mov    eax,ds:0xc00323a8
c001ed98:	48                   	dec    eax
c001ed99:	a3 a8 23 03 c0       	mov    ds:0xc00323a8,eax
c001ed9e:	75 01                	jne    c001eda1 <cleanerTaskFunction(void*)+0xb5>
c001eda0:	fb                   	sti    
c001eda1:	a1 a4 23 03 c0       	mov    eax,ds:0xc00323a4
c001eda6:	48                   	dec    eax
c001eda7:	a3 a4 23 03 c0       	mov    ds:0xc00323a4,eax
c001edac:	0f 85 3e ff ff ff    	jne    c001ecf0 <cleanerTaskFunction(void*)+0x4>
c001edb2:	a1 a0 23 03 c0       	mov    eax,ds:0xc00323a0
c001edb7:	85 c0                	test   eax,eax
c001edb9:	0f 84 31 ff ff ff    	je     c001ecf0 <cleanerTaskFunction(void*)+0x4>
c001edbf:	c7 05 a0 23 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00323a0,0x0
c001edc9:	e8 e4 f6 ff ff       	call   c001e4b2 <schedule()>
c001edce:	e9 1d ff ff ff       	jmp    c001ecf0 <cleanerTaskFunction(void*)+0x4>
c001edd3:	83 ec 0c             	sub    esp,0xc
c001edd6:	6a 02                	push   0x2
c001edd8:	e8 86 f8 ff ff       	call   c001e663 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001eddd:	83 c4 10             	add    esp,0x10
c001ede0:	e9 3f ff ff ff       	jmp    c001ed24 <cleanerTaskFunction(void*)+0x38>

c001ede5 <terminateTask(int)>:
c001ede5:	83 ec 14             	sub    esp,0x14
c001ede8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001eded:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001edf0:	83 c0 0c             	add    eax,0xc
c001edf3:	50                   	push   eax
c001edf4:	68 a8 cf 02 c0       	push   0xc002cfa8
c001edf9:	e8 f3 40 ff ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c001edfe:	fa                   	cli    
c001edff:	ff 05 a8 23 03 c0    	inc    DWORD PTR ds:0xc00323a8
c001ee05:	ff 05 a4 23 03 c0    	inc    DWORD PTR ds:0xc00323a4
c001ee0b:	fa                   	cli    
c001ee0c:	ff 05 a8 23 03 c0    	inc    DWORD PTR ds:0xc00323a8
c001ee12:	c7 04 24 5c cc 02 c0 	mov    DWORD PTR [esp],0xc002cc5c
c001ee19:	e8 d3 40 ff ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c001ee1e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001ee22:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ee27:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c001ee2a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ee2f:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001ee32:	5a                   	pop    edx
c001ee33:	59                   	pop    ecx
c001ee34:	50                   	push   eax
c001ee35:	68 ac 23 03 c0       	push   0xc00323ac
c001ee3a:	e8 ed a4 00 00       	call   c002932c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001ee3f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ee44:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001ee4b:	c7 04 24 76 cc 02 c0 	mov    DWORD PTR [esp],0xc002cc76
c001ee52:	e8 9a 40 ff ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c001ee57:	83 c4 10             	add    esp,0x10
c001ee5a:	a1 88 23 03 c0       	mov    eax,ds:0xc0032388
c001ee5f:	85 c0                	test   eax,eax
c001ee61:	0f 84 8d 00 00 00    	je     c001eef4 <terminateTask(int)+0x10f>
c001ee67:	83 ec 0c             	sub    esp,0xc
c001ee6a:	68 90 cc 02 c0       	push   0xc002cc90
c001ee6f:	e8 7d 40 ff ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c001ee74:	58                   	pop    eax
c001ee75:	c6 05 8c 23 03 c0 01 	mov    BYTE PTR ds:0xc003238c,0x1
c001ee7c:	ff 35 88 23 03 c0    	push   DWORD PTR ds:0xc0032388
c001ee82:	e8 ef fa ff ff       	call   c001e976 <unblockTask(ThreadControlBlock*)>
c001ee87:	c7 04 24 aa cc 02 c0 	mov    DWORD PTR [esp],0xc002ccaa
c001ee8e:	e8 5e 40 ff ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c001ee93:	83 c4 10             	add    esp,0x10
c001ee96:	a1 a8 23 03 c0       	mov    eax,ds:0xc00323a8
c001ee9b:	48                   	dec    eax
c001ee9c:	a3 a8 23 03 c0       	mov    ds:0xc00323a8,eax
c001eea1:	75 01                	jne    c001eea4 <terminateTask(int)+0xbf>
c001eea3:	fb                   	sti    
c001eea4:	a1 a4 23 03 c0       	mov    eax,ds:0xc00323a4
c001eea9:	48                   	dec    eax
c001eeaa:	a3 a4 23 03 c0       	mov    ds:0xc00323a4,eax
c001eeaf:	75 09                	jne    c001eeba <terminateTask(int)+0xd5>
c001eeb1:	83 3d a0 23 03 c0 00 	cmp    DWORD PTR ds:0xc00323a0,0x0
c001eeb8:	75 4c                	jne    c001ef06 <terminateTask(int)+0x121>
c001eeba:	a1 a8 23 03 c0       	mov    eax,ds:0xc00323a8
c001eebf:	48                   	dec    eax
c001eec0:	a3 a8 23 03 c0       	mov    ds:0xc00323a8,eax
c001eec5:	75 01                	jne    c001eec8 <terminateTask(int)+0xe3>
c001eec7:	fb                   	sti    
c001eec8:	83 ec 0c             	sub    esp,0xc
c001eecb:	68 e2 cc 02 c0       	push   0xc002cce2
c001eed0:	e8 1c 40 ff ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c001eed5:	83 c4 10             	add    esp,0x10
c001eed8:	fa                   	cli    
c001eed9:	ff 05 a8 23 03 c0    	inc    DWORD PTR ds:0xc00323a8
c001eedf:	e8 ce f5 ff ff       	call   c001e4b2 <schedule()>
c001eee4:	a1 a8 23 03 c0       	mov    eax,ds:0xc00323a8
c001eee9:	48                   	dec    eax
c001eeea:	a3 a8 23 03 c0       	mov    ds:0xc00323a8,eax
c001eeef:	75 e7                	jne    c001eed8 <terminateTask(int)+0xf3>
c001eef1:	fb                   	sti    
c001eef2:	eb e4                	jmp    c001eed8 <terminateTask(int)+0xf3>
c001eef4:	83 ec 0c             	sub    esp,0xc
c001eef7:	68 c4 cc 02 c0       	push   0xc002ccc4
c001eefc:	e8 f0 3f ff ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c001ef01:	83 c4 10             	add    esp,0x10
c001ef04:	eb 90                	jmp    c001ee96 <terminateTask(int)+0xb1>
c001ef06:	c7 05 a0 23 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00323a0,0x0
c001ef10:	e8 9d f5 ff ff       	call   c001e4b2 <schedule()>
c001ef15:	eb a3                	jmp    c001eeba <terminateTask(int)+0xd5>

c001ef17 <Thr::terminateFromIRQ(int)>:
c001ef17:	83 ec 18             	sub    esp,0x18
c001ef1a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ef1e:	e8 c2 fe ff ff       	call   c001ede5 <terminateTask(int)>
c001ef23:	90                   	nop

c001ef24 <Semaphore::release()>:
c001ef24:	83 ec 0c             	sub    esp,0xc
c001ef27:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ef2b:	fa                   	cli    
c001ef2c:	a1 a4 23 03 c0       	mov    eax,ds:0xc00323a4
c001ef31:	ff 05 a8 23 03 c0    	inc    DWORD PTR ds:0xc00323a8
c001ef37:	8d 48 01             	lea    ecx,[eax+0x1]
c001ef3a:	89 0d a4 23 03 c0    	mov    DWORD PTR ds:0xc00323a4,ecx
c001ef40:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001ef43:	85 c9                	test   ecx,ecx
c001ef45:	74 3c                	je     c001ef83 <Semaphore::release()+0x5f>
c001ef47:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001ef4a:	83 ec 0c             	sub    esp,0xc
c001ef4d:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001ef50:	51                   	push   ecx
c001ef51:	e8 20 fa ff ff       	call   c001e976 <unblockTask(ThreadControlBlock*)>
c001ef56:	a1 a4 23 03 c0       	mov    eax,ds:0xc00323a4
c001ef5b:	83 c4 10             	add    esp,0x10
c001ef5e:	48                   	dec    eax
c001ef5f:	a3 a4 23 03 c0       	mov    ds:0xc00323a4,eax
c001ef64:	85 c0                	test   eax,eax
c001ef66:	75 09                	jne    c001ef71 <Semaphore::release()+0x4d>
c001ef68:	a1 a0 23 03 c0       	mov    eax,ds:0xc00323a0
c001ef6d:	85 c0                	test   eax,eax
c001ef6f:	75 17                	jne    c001ef88 <Semaphore::release()+0x64>
c001ef71:	a1 a8 23 03 c0       	mov    eax,ds:0xc00323a8
c001ef76:	48                   	dec    eax
c001ef77:	a3 a8 23 03 c0       	mov    ds:0xc00323a8,eax
c001ef7c:	75 01                	jne    c001ef7f <Semaphore::release()+0x5b>
c001ef7e:	fb                   	sti    
c001ef7f:	83 c4 0c             	add    esp,0xc
c001ef82:	c3                   	ret    
c001ef83:	ff 4a 0c             	dec    DWORD PTR [edx+0xc]
c001ef86:	eb d7                	jmp    c001ef5f <Semaphore::release()+0x3b>
c001ef88:	c7 05 a0 23 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00323a0,0x0
c001ef92:	e8 1b f5 ff ff       	call   c001e4b2 <schedule()>
c001ef97:	eb d8                	jmp    c001ef71 <Semaphore::release()+0x4d>

c001ef99 <__static_initialization_and_destruction_0(int, int)>:
c001ef99:	83 ec 0c             	sub    esp,0xc
c001ef9c:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001efa1:	0f 85 88 00 00 00    	jne    c001f02f <__static_initialization_and_destruction_0(int, int)+0x96>
c001efa7:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001efaf:	75 7e                	jne    c001f02f <__static_initialization_and_destruction_0(int, int)+0x96>
c001efb1:	83 ec 0c             	sub    esp,0xc
c001efb4:	68 c4 23 03 c0       	push   0xc00323c4
c001efb9:	e8 fe a5 00 00       	call   c00295bc <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001efbe:	83 c4 10             	add    esp,0x10
c001efc1:	83 ec 04             	sub    esp,0x4
c001efc4:	68 90 dd 02 c0       	push   0xc002dd90
c001efc9:	68 c4 23 03 c0       	push   0xc00323c4
c001efce:	68 70 95 02 c0       	push   0xc0029570
c001efd3:	e8 b3 3d ff ff       	call   c0012d8b <__cxa_atexit>
c001efd8:	83 c4 10             	add    esp,0x10
c001efdb:	83 ec 0c             	sub    esp,0xc
c001efde:	68 b8 23 03 c0       	push   0xc00323b8
c001efe3:	e8 d4 a5 00 00       	call   c00295bc <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001efe8:	83 c4 10             	add    esp,0x10
c001efeb:	83 ec 04             	sub    esp,0x4
c001efee:	68 90 dd 02 c0       	push   0xc002dd90
c001eff3:	68 b8 23 03 c0       	push   0xc00323b8
c001eff8:	68 70 95 02 c0       	push   0xc0029570
c001effd:	e8 89 3d ff ff       	call   c0012d8b <__cxa_atexit>
c001f002:	83 c4 10             	add    esp,0x10
c001f005:	83 ec 0c             	sub    esp,0xc
c001f008:	68 ac 23 03 c0       	push   0xc00323ac
c001f00d:	e8 aa a5 00 00       	call   c00295bc <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001f012:	83 c4 10             	add    esp,0x10
c001f015:	83 ec 04             	sub    esp,0x4
c001f018:	68 90 dd 02 c0       	push   0xc002dd90
c001f01d:	68 ac 23 03 c0       	push   0xc00323ac
c001f022:	68 70 95 02 c0       	push   0xc0029570
c001f027:	e8 5f 3d ff ff       	call   c0012d8b <__cxa_atexit>
c001f02c:	83 c4 10             	add    esp,0x10
c001f02f:	90                   	nop
c001f030:	83 c4 0c             	add    esp,0xc
c001f033:	c3                   	ret    

c001f034 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c001f034:	83 ec 0c             	sub    esp,0xc
c001f037:	83 ec 08             	sub    esp,0x8
c001f03a:	68 ff ff 00 00       	push   0xffff
c001f03f:	6a 01                	push   0x1
c001f041:	e8 53 ff ff ff       	call   c001ef99 <__static_initialization_and_destruction_0(int, int)>
c001f046:	83 c4 10             	add    esp,0x10
c001f049:	83 c4 0c             	add    esp,0xc
c001f04c:	c3                   	ret    

c001f04d <Vm::inbv(unsigned short)>:
c001f04d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f051:	66 81 fa fe fe       	cmp    dx,0xfefe
c001f056:	75 06                	jne    c001f05e <Vm::inbv(unsigned short)+0x11>
c001f058:	a0 0c 24 03 c0       	mov    al,ds:0xc003240c
c001f05d:	c3                   	ret    
c001f05e:	ec                   	in     al,dx
c001f05f:	c3                   	ret    

c001f060 <Vm::outbv(unsigned short, unsigned char)>:
c001f060:	53                   	push   ebx
c001f061:	83 ec 08             	sub    esp,0x8
c001f064:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f068:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f06c:	66 81 fa fe fe       	cmp    dx,0xfefe
c001f071:	75 38                	jne    c001f0ab <Vm::outbv(unsigned short, unsigned char)+0x4b>
c001f073:	0f b6 c3             	movzx  eax,bl
c001f076:	51                   	push   ecx
c001f077:	51                   	push   ecx
c001f078:	50                   	push   eax
c001f079:	68 c7 cf 02 c0       	push   0xc002cfc7
c001f07e:	e8 6e 3e ff ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c001f083:	8b 15 0c 24 03 c0    	mov    edx,DWORD PTR ds:0xc003240c
c001f089:	83 c4 10             	add    esp,0x10
c001f08c:	8d 42 01             	lea    eax,[edx+0x1]
c001f08f:	88 9a 20 24 03 c0    	mov    BYTE PTR [edx-0x3ffcdbe0],bl
c001f095:	a3 0c 24 03 c0       	mov    ds:0xc003240c,eax
c001f09a:	83 f8 20             	cmp    eax,0x20
c001f09d:	75 0f                	jne    c001f0ae <Vm::outbv(unsigned short, unsigned char)+0x4e>
c001f09f:	c7 05 0c 24 03 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc003240c,0x1f
c001f0a9:	eb 03                	jmp    c001f0ae <Vm::outbv(unsigned short, unsigned char)+0x4e>
c001f0ab:	88 d8                	mov    al,bl
c001f0ad:	ee                   	out    dx,al
c001f0ae:	83 c4 08             	add    esp,0x8
c001f0b1:	5b                   	pop    ebx
c001f0b2:	c3                   	ret    

c001f0b3 <Vm::realToLinear(unsigned short, unsigned short)>:
c001f0b3:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001f0b8:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001f0bd:	c1 e0 04             	shl    eax,0x4
c001f0c0:	01 d0                	add    eax,edx
c001f0c2:	c3                   	ret    

c001f0c3 <Vm::getSegment(unsigned int)>:
c001f0c3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f0c7:	c1 e8 10             	shr    eax,0x10
c001f0ca:	c3                   	ret    

c001f0cb <Vm::getOffset(unsigned int)>:
c001f0cb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f0cf:	c3                   	ret    

c001f0d0 <Vm::mainloop2()>:
c001f0d0:	83 ec 18             	sub    esp,0x18
c001f0d3:	fa                   	cli    
c001f0d4:	ff 05 a8 23 03 c0    	inc    DWORD PTR ds:0xc00323a8
c001f0da:	6a 02                	push   0x2
c001f0dc:	c6 05 05 24 03 c0 01 	mov    BYTE PTR ds:0xc0032405,0x1
c001f0e3:	e8 7b f5 ff ff       	call   c001e663 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001f0e8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f0ed:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c001f0f1:	52                   	push   edx
c001f0f2:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c001f0f6:	52                   	push   edx
c001f0f7:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c001f0fb:	52                   	push   edx
c001f0fc:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c001f100:	50                   	push   eax
c001f101:	e8 f4 11 fe ff       	call   c00002fa <goToVM86>
c001f106:	83 c4 2c             	add    esp,0x2c
c001f109:	c3                   	ret    

c001f10a <Vm::mainVm8086Loop(void*)>:
c001f10a:	a1 a8 23 03 c0       	mov    eax,ds:0xc00323a8
c001f10f:	48                   	dec    eax
c001f110:	a3 a8 23 03 c0       	mov    ds:0xc00323a8,eax
c001f115:	75 01                	jne    c001f118 <Vm::mainVm8086Loop(void*)+0xe>
c001f117:	fb                   	sti    
c001f118:	eb b6                	jmp    c001f0d0 <Vm::mainloop2()>

c001f11a <Vm::mainloop3(unsigned long)>:
c001f11a:	83 ec 18             	sub    esp,0x18
c001f11d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001f121:	fa                   	cli    
c001f122:	ff 05 a8 23 03 c0    	inc    DWORD PTR ds:0xc00323a8
c001f128:	6a 02                	push   0x2
c001f12a:	c6 05 04 24 03 c0 01 	mov    BYTE PTR ds:0xc0032404,0x1
c001f131:	a3 00 24 03 c0       	mov    ds:0xc0032400,eax
c001f136:	e8 28 f5 ff ff       	call   c001e663 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001f13b:	83 c4 1c             	add    esp,0x1c
c001f13e:	eb 90                	jmp    c001f0d0 <Vm::mainloop2()>

c001f140 <Vm::initialise8086()>:
c001f140:	83 ec 0c             	sub    esp,0xc
c001f143:	68 80 00 00 00       	push   0x80
c001f148:	6a 00                	push   0x0
c001f14a:	68 0a f1 01 c0       	push   0xc001f10a
c001f14f:	ff 35 d0 23 03 c0    	push   DWORD PTR ds:0xc00323d0
c001f155:	e8 14 f1 ff ff       	call   c001e26e <Process::createThread(void (*)(void*), void*, int)>
c001f15a:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001f161:	a3 08 24 03 c0       	mov    ds:0xc0032408,eax
c001f166:	68 00 01 00 00       	push   0x100
c001f16b:	a1 d0 23 03 c0       	mov    eax,ds:0xc00323d0
c001f170:	6a 00                	push   0x0
c001f172:	6a 00                	push   0x0
c001f174:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001f17a:	e8 97 34 ff ff       	call   c0012616 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001f17f:	83 c4 2c             	add    esp,0x2c
c001f182:	c3                   	ret    

c001f183 <Vm::finish8086()>:
c001f183:	53                   	push   ebx
c001f184:	83 ec 08             	sub    esp,0x8
c001f187:	fa                   	cli    
c001f188:	ff 05 a8 23 03 c0    	inc    DWORD PTR ds:0xc00323a8
c001f18e:	80 3d 04 24 03 c0 00 	cmp    BYTE PTR ds:0xc0032404,0x0
c001f195:	75 15                	jne    c001f1ac <Vm::finish8086()+0x29>
c001f197:	e8 16 f3 ff ff       	call   c001e4b2 <schedule()>
c001f19c:	a1 a8 23 03 c0       	mov    eax,ds:0xc00323a8
c001f1a1:	48                   	dec    eax
c001f1a2:	a3 a8 23 03 c0       	mov    ds:0xc00323a8,eax
c001f1a7:	75 de                	jne    c001f187 <Vm::finish8086()+0x4>
c001f1a9:	fb                   	sti    
c001f1aa:	eb db                	jmp    c001f187 <Vm::finish8086()+0x4>
c001f1ac:	83 ec 0c             	sub    esp,0xc
c001f1af:	8b 1d 00 24 03 c0    	mov    ebx,DWORD PTR ds:0xc0032400
c001f1b5:	ff 35 08 24 03 c0    	push   DWORD PTR ds:0xc0032408
c001f1bb:	c6 05 04 24 03 c0 00 	mov    BYTE PTR ds:0xc0032404,0x0
c001f1c2:	e8 af f7 ff ff       	call   c001e976 <unblockTask(ThreadControlBlock*)>
c001f1c7:	a1 a8 23 03 c0       	mov    eax,ds:0xc00323a8
c001f1cc:	83 c4 10             	add    esp,0x10
c001f1cf:	8d 50 ff             	lea    edx,[eax-0x1]
c001f1d2:	89 15 a8 23 03 c0    	mov    DWORD PTR ds:0xc00323a8,edx
c001f1d8:	85 d2                	test   edx,edx
c001f1da:	75 01                	jne    c001f1dd <Vm::finish8086()+0x5a>
c001f1dc:	fb                   	sti    
c001f1dd:	89 d8                	mov    eax,ebx
c001f1df:	83 c4 08             	add    esp,0x8
c001f1e2:	5b                   	pop    ebx
c001f1e3:	c3                   	ret    

c001f1e4 <Vm::getOutput8086(unsigned char*)>:
c001f1e4:	83 ec 10             	sub    esp,0x10
c001f1e7:	ff 35 0c 24 03 c0    	push   DWORD PTR ds:0xc003240c
c001f1ed:	68 20 24 03 c0       	push   0xc0032420
c001f1f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f1f6:	e8 6d 15 fe ff       	call   c0000768 <memcpy>
c001f1fb:	a1 0c 24 03 c0       	mov    eax,ds:0xc003240c
c001f200:	c7 05 0c 24 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003240c,0x0
c001f20a:	83 c4 1c             	add    esp,0x1c
c001f20d:	c3                   	ret    

c001f20e <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001f20e:	55                   	push   ebp
c001f20f:	57                   	push   edi
c001f210:	56                   	push   esi
c001f211:	53                   	push   ebx
c001f212:	83 ec 2c             	sub    esp,0x2c
c001f215:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001f219:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001f21d:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001f221:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c001f225:	fa                   	cli    
c001f226:	ff 05 a8 23 03 c0    	inc    DWORD PTR ds:0xc00323a8
c001f22c:	0f b6 35 05 24 03 c0 	movzx  esi,BYTE PTR ds:0xc0032405
c001f233:	89 f0                	mov    eax,esi
c001f235:	84 c0                	test   al,al
c001f237:	75 1d                	jne    c001f256 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x48>
c001f239:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001f23d:	e8 70 f2 ff ff       	call   c001e4b2 <schedule()>
c001f242:	a1 a8 23 03 c0       	mov    eax,ds:0xc00323a8
c001f247:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f24b:	48                   	dec    eax
c001f24c:	a3 a8 23 03 c0       	mov    ds:0xc00323a8,eax
c001f251:	75 d2                	jne    c001f225 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001f253:	fb                   	sti    
c001f254:	eb cf                	jmp    c001f225 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001f256:	a1 08 24 03 c0       	mov    eax,ds:0xc0032408
c001f25b:	c7 05 0c 24 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003240c,0x0
c001f265:	66 89 50 5d          	mov    WORD PTR [eax+0x5d],dx
c001f269:	66 89 58 5f          	mov    WORD PTR [eax+0x5f],bx
c001f26d:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c001f271:	66 89 78 5b          	mov    WORD PTR [eax+0x5b],di
c001f275:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c001f279:	50                   	push   eax
c001f27a:	6a 20                	push   0x20
c001f27c:	6a 00                	push   0x0
c001f27e:	68 20 24 03 c0       	push   0xc0032420
c001f283:	e8 14 15 fe ff       	call   c000079c <memset>
c001f288:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001f28f:	e8 9e 06 ff ff       	call   c000f932 <malloc>
c001f294:	83 c4 0c             	add    esp,0xc
c001f297:	89 c3                	mov    ebx,eax
c001f299:	ff 35 d0 23 03 c0    	push   DWORD PTR ds:0xc00323d0
c001f29f:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001f2a3:	50                   	push   eax
c001f2a4:	e8 a7 41 ff ff       	call   c0013450 <File::File(char const*, Process*)>
c001f2a9:	83 c4 10             	add    esp,0x10
c001f2ac:	85 db                	test   ebx,ebx
c001f2ae:	75 0a                	jne    c001f2ba <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xac>
c001f2b0:	83 ec 0c             	sub    esp,0xc
c001f2b3:	68 e3 cf 02 c0       	push   0xc002cfe3
c001f2b8:	eb 3e                	jmp    c001f2f8 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c001f2ba:	50                   	push   eax
c001f2bb:	8d 44 24 17          	lea    eax,[esp+0x17]
c001f2bf:	50                   	push   eax
c001f2c0:	8d 44 24 20          	lea    eax,[esp+0x20]
c001f2c4:	50                   	push   eax
c001f2c5:	53                   	push   ebx
c001f2c6:	e8 95 44 ff ff       	call   c0013760 <File::stat(unsigned long long*, bool*)>
c001f2cb:	83 c4 10             	add    esp,0x10
c001f2ce:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c001f2d3:	74 0a                	je     c001f2df <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c001f2d5:	83 ec 0c             	sub    esp,0xc
c001f2d8:	68 f7 cf 02 c0       	push   0xc002cff7
c001f2dd:	eb 19                	jmp    c001f2f8 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c001f2df:	51                   	push   ecx
c001f2e0:	51                   	push   ecx
c001f2e1:	6a 01                	push   0x1
c001f2e3:	53                   	push   ebx
c001f2e4:	e8 cb 41 ff ff       	call   c00134b4 <File::open(FileOpenMode)>
c001f2e9:	83 c4 10             	add    esp,0x10
c001f2ec:	85 c0                	test   eax,eax
c001f2ee:	74 24                	je     c001f314 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x106>
c001f2f0:	83 ec 0c             	sub    esp,0xc
c001f2f3:	68 10 d0 02 c0       	push   0xc002d010
c001f2f8:	e8 b4 b5 ff ff       	call   c001a8b1 <Krnl::panic(char const*)>
c001f2fd:	a1 a8 23 03 c0       	mov    eax,ds:0xc00323a8
c001f302:	83 c4 10             	add    esp,0x10
c001f305:	48                   	dec    eax
c001f306:	a3 a8 23 03 c0       	mov    ds:0xc00323a8,eax
c001f30b:	85 c0                	test   eax,eax
c001f30d:	75 01                	jne    c001f310 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x102>
c001f30f:	fb                   	sti    
c001f310:	31 f6                	xor    esi,esi
c001f312:	eb 58                	jmp    c001f36c <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x15e>
c001f314:	0f b7 ed             	movzx  ebp,bp
c001f317:	50                   	push   eax
c001f318:	0f b7 ff             	movzx  edi,di
c001f31b:	50                   	push   eax
c001f31c:	55                   	push   ebp
c001f31d:	57                   	push   edi
c001f31e:	e8 90 fd ff ff       	call   c001f0b3 <Vm::realToLinear(unsigned short, unsigned short)>
c001f323:	5a                   	pop    edx
c001f324:	8b 13                	mov    edx,DWORD PTR [ebx]
c001f326:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001f32a:	51                   	push   ecx
c001f32b:	50                   	push   eax
c001f32c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001f330:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001f334:	53                   	push   ebx
c001f335:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001f338:	83 c4 14             	add    esp,0x14
c001f33b:	53                   	push   ebx
c001f33c:	e8 d1 41 ff ff       	call   c0013512 <File::close()>
c001f341:	a1 a8 23 03 c0       	mov    eax,ds:0xc00323a8
c001f346:	83 c4 10             	add    esp,0x10
c001f349:	48                   	dec    eax
c001f34a:	c6 05 05 24 03 c0 00 	mov    BYTE PTR ds:0xc0032405,0x0
c001f351:	a3 a8 23 03 c0       	mov    ds:0xc00323a8,eax
c001f356:	85 c0                	test   eax,eax
c001f358:	75 01                	jne    c001f35b <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x14d>
c001f35a:	fb                   	sti    
c001f35b:	83 ec 0c             	sub    esp,0xc
c001f35e:	ff 35 08 24 03 c0    	push   DWORD PTR ds:0xc0032408
c001f364:	e8 0d f6 ff ff       	call   c001e976 <unblockTask(ThreadControlBlock*)>
c001f369:	83 c4 10             	add    esp,0x10
c001f36c:	83 c4 2c             	add    esp,0x2c
c001f36f:	89 f0                	mov    eax,esi
c001f371:	5b                   	pop    ebx
c001f372:	5e                   	pop    esi
c001f373:	5f                   	pop    edi
c001f374:	5d                   	pop    ebp
c001f375:	c3                   	ret    

c001f376 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001f376:	57                   	push   edi
c001f377:	56                   	push   esi
c001f378:	53                   	push   ebx
c001f379:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f37d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001f381:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f385:	83 e8 06             	sub    eax,0x6
c001f388:	0f b7 c0             	movzx  eax,ax
c001f38b:	50                   	push   eax
c001f38c:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001f391:	50                   	push   eax
c001f392:	e8 1c fd ff ff       	call   c001f0b3 <Vm::realToLinear(unsigned short, unsigned short)>
c001f397:	5a                   	pop    edx
c001f398:	5e                   	pop    esi
c001f399:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c001f39c:	8d 56 fa             	lea    edx,[esi-0x6]
c001f39f:	81 e2 ff ff 00 00    	and    edx,0xffff
c001f3a5:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001f3a8:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c001f3ab:	83 c2 02             	add    edx,0x2
c001f3ae:	66 89 10             	mov    WORD PTR [eax],dx
c001f3b1:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c001f3b4:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001f3b8:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c001f3bb:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001f3bf:	89 d6                	mov    esi,edx
c001f3c1:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001f3c7:	66 81 e6 ff fd       	and    si,0xfdff
c001f3cc:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c001f3d0:	74 07                	je     c001f3d9 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c001f3d2:	89 d6                	mov    esi,edx
c001f3d4:	66 81 ce 00 02       	or     si,0x200
c001f3d9:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c001f3dd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f3e2:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001f3e6:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c001f3ee:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c001f3f1:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001f3f9:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001f3fc:	5b                   	pop    ebx
c001f3fd:	5e                   	pop    esi
c001f3fe:	5f                   	pop    edi
c001f3ff:	c3                   	ret    

c001f400 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001f400:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001f405:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001f40a:	c1 e0 04             	shl    eax,0x4
c001f40d:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001f410:	c3                   	ret    

c001f411 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001f411:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001f416:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001f41b:	c1 e0 04             	shl    eax,0x4
c001f41e:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001f422:	c3                   	ret    

c001f423 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001f423:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001f428:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001f42d:	c1 e0 04             	shl    eax,0x4
c001f430:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001f433:	c3                   	ret    

c001f434 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001f434:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001f439:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001f43e:	c1 e0 04             	shl    eax,0x4
c001f441:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f445:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001f448:	c3                   	ret    

c001f449 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001f449:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001f44e:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001f453:	c1 e0 04             	shl    eax,0x4
c001f456:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f45a:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c001f45e:	c3                   	ret    

c001f45f <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001f45f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001f464:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001f469:	c1 e0 04             	shl    eax,0x4
c001f46c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f470:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001f473:	c3                   	ret    

c001f474 <Vm::faultHandler(regs*)>:
c001f474:	55                   	push   ebp
c001f475:	57                   	push   edi
c001f476:	56                   	push   esi
c001f477:	53                   	push   ebx
c001f478:	83 ec 1c             	sub    esp,0x1c
c001f47b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001f47f:	8b 4f 38             	mov    ecx,DWORD PTR [edi+0x38]
c001f482:	8b 5f 3c             	mov    ebx,DWORD PTR [edi+0x3c]
c001f485:	0f b7 c1             	movzx  eax,cx
c001f488:	50                   	push   eax
c001f489:	0f b7 c3             	movzx  eax,bx
c001f48c:	c1 e3 04             	shl    ebx,0x4
c001f48f:	50                   	push   eax
c001f490:	e8 1e fc ff ff       	call   c001f0b3 <Vm::realToLinear(unsigned short, unsigned short)>
c001f495:	5a                   	pop    edx
c001f496:	89 c5                	mov    ebp,eax
c001f498:	5e                   	pop    esi
c001f499:	0f b7 47 44          	movzx  eax,WORD PTR [edi+0x44]
c001f49d:	50                   	push   eax
c001f49e:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001f4a2:	50                   	push   eax
c001f4a3:	e8 0b fc ff ff       	call   c001f0b3 <Vm::realToLinear(unsigned short, unsigned short)>
c001f4a8:	01 cb                	add    ebx,ecx
c001f4aa:	89 c6                	mov    esi,eax
c001f4ac:	0f b6 45 02          	movzx  eax,BYTE PTR [ebp+0x2]
c001f4b0:	50                   	push   eax
c001f4b1:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f4b5:	50                   	push   eax
c001f4b6:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001f4ba:	50                   	push   eax
c001f4bb:	55                   	push   ebp
c001f4bc:	53                   	push   ebx
c001f4bd:	b3 06                	mov    bl,0x6
c001f4bf:	68 29 d0 02 c0       	push   0xc002d029
c001f4c4:	e8 28 3a ff ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c001f4c9:	83 c4 20             	add    esp,0x20
c001f4cc:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001f4d1:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001f4d6:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001f4da:	3c 9d                	cmp    al,0x9d
c001f4dc:	0f 84 d7 02 00 00    	je     c001f7b9 <Vm::faultHandler(regs*)+0x345>
c001f4e2:	0f 87 a3 00 00 00    	ja     c001f58b <Vm::faultHandler(regs*)+0x117>
c001f4e8:	3c 66                	cmp    al,0x66
c001f4ea:	0f 84 15 02 00 00    	je     c001f705 <Vm::faultHandler(regs*)+0x291>
c001f4f0:	77 5f                	ja     c001f551 <Vm::faultHandler(regs*)+0xdd>
c001f4f2:	3c 36                	cmp    al,0x36
c001f4f4:	0f 84 f1 01 00 00    	je     c001f6eb <Vm::faultHandler(regs*)+0x277>
c001f4fa:	77 28                	ja     c001f524 <Vm::faultHandler(regs*)+0xb0>
c001f4fc:	3c 26                	cmp    al,0x26
c001f4fe:	0f 84 99 01 00 00    	je     c001f69d <Vm::faultHandler(regs*)+0x229>
c001f504:	3c 2e                	cmp    al,0x2e
c001f506:	0f 85 3b 07 00 00    	jne    c001fc47 <Vm::faultHandler(regs*)+0x7d3>
c001f50c:	83 ec 0c             	sub    esp,0xc
c001f50f:	31 db                	xor    ebx,ebx
c001f511:	68 3e d0 02 c0       	push   0xc002d03e
c001f516:	e8 d6 39 ff ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c001f51b:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f51e:	83 c4 10             	add    esp,0x10
c001f521:	45                   	inc    ebp
c001f522:	eb b2                	jmp    c001f4d6 <Vm::faultHandler(regs*)+0x62>
c001f524:	3c 64                	cmp    al,0x64
c001f526:	0f 84 8b 01 00 00    	je     c001f6b7 <Vm::faultHandler(regs*)+0x243>
c001f52c:	0f 87 9f 01 00 00    	ja     c001f6d1 <Vm::faultHandler(regs*)+0x25d>
c001f532:	3c 3e                	cmp    al,0x3e
c001f534:	0f 85 0d 07 00 00    	jne    c001fc47 <Vm::faultHandler(regs*)+0x7d3>
c001f53a:	83 ec 0c             	sub    esp,0xc
c001f53d:	b3 01                	mov    bl,0x1
c001f53f:	68 42 d0 02 c0       	push   0xc002d042
c001f544:	e8 a8 39 ff ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c001f549:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f54c:	83 c4 10             	add    esp,0x10
c001f54f:	eb d0                	jmp    c001f521 <Vm::faultHandler(regs*)+0xad>
c001f551:	3c 6d                	cmp    al,0x6d
c001f553:	0f 84 af 03 00 00    	je     c001f908 <Vm::faultHandler(regs*)+0x494>
c001f559:	77 15                	ja     c001f570 <Vm::faultHandler(regs*)+0xfc>
c001f55b:	3c 67                	cmp    al,0x67
c001f55d:	0f 84 bf 01 00 00    	je     c001f722 <Vm::faultHandler(regs*)+0x2ae>
c001f563:	3c 6c                	cmp    al,0x6c
c001f565:	0f 84 3f 03 00 00    	je     c001f8aa <Vm::faultHandler(regs*)+0x436>
c001f56b:	e9 d7 06 00 00       	jmp    c001fc47 <Vm::faultHandler(regs*)+0x7d3>
c001f570:	3c 6f                	cmp    al,0x6f
c001f572:	0f 84 a4 04 00 00    	je     c001fa1c <Vm::faultHandler(regs*)+0x5a8>
c001f578:	0f 82 11 04 00 00    	jb     c001f98f <Vm::faultHandler(regs*)+0x51b>
c001f57e:	3c 9c                	cmp    al,0x9c
c001f580:	0f 84 ba 01 00 00    	je     c001f740 <Vm::faultHandler(regs*)+0x2cc>
c001f586:	e9 bc 06 00 00       	jmp    c001fc47 <Vm::faultHandler(regs*)+0x7d3>
c001f58b:	3c ec                	cmp    al,0xec
c001f58d:	0f 84 24 06 00 00    	je     c001fbb7 <Vm::faultHandler(regs*)+0x743>
c001f593:	0f 87 93 00 00 00    	ja     c001f62c <Vm::faultHandler(regs*)+0x1b8>
c001f599:	3c e4                	cmp    al,0xe4
c001f59b:	0f 84 5c 05 00 00    	je     c001fafd <Vm::faultHandler(regs*)+0x689>
c001f5a1:	77 6a                	ja     c001f60d <Vm::faultHandler(regs*)+0x199>
c001f5a3:	3c cd                	cmp    al,0xcd
c001f5a5:	0f 84 7e 02 00 00    	je     c001f829 <Vm::faultHandler(regs*)+0x3b5>
c001f5ab:	3c cf                	cmp    al,0xcf
c001f5ad:	0f 85 94 06 00 00    	jne    c001fc47 <Vm::faultHandler(regs*)+0x7d3>
c001f5b3:	83 ec 0c             	sub    esp,0xc
c001f5b6:	68 86 d0 02 c0       	push   0xc002d086
c001f5bb:	e8 31 39 ff ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c001f5c0:	0f b7 16             	movzx  edx,WORD PTR [esi]
c001f5c3:	89 57 38             	mov    DWORD PTR [edi+0x38],edx
c001f5c6:	0f b7 5e 02          	movzx  ebx,WORD PTR [esi+0x2]
c001f5ca:	89 5f 3c             	mov    DWORD PTR [edi+0x3c],ebx
c001f5cd:	0f b7 46 04          	movzx  eax,WORD PTR [esi+0x4]
c001f5d1:	0d 00 02 02 00       	or     eax,0x20200
c001f5d6:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001f5d9:	56                   	push   esi
c001f5da:	53                   	push   ebx
c001f5db:	52                   	push   edx
c001f5dc:	68 8c d0 02 c0       	push   0xc002d08c
c001f5e1:	e8 0b 39 ff ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c001f5e6:	66 8b 46 04          	mov    ax,WORD PTR [esi+0x4]
c001f5ea:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f5f0:	66 c1 e8 09          	shr    ax,0x9
c001f5f4:	83 e0 01             	and    eax,0x1
c001f5f7:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001f5fa:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001f5fd:	83 c0 06             	add    eax,0x6
c001f600:	25 ff ff 00 00       	and    eax,0xffff
c001f605:	89 47 44             	mov    DWORD PTR [edi+0x44],eax
c001f608:	e9 95 02 00 00       	jmp    c001f8a2 <Vm::faultHandler(regs*)+0x42e>
c001f60d:	3c e6                	cmp    al,0xe6
c001f60f:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c001f613:	0f 84 4e 05 00 00    	je     c001fb67 <Vm::faultHandler(regs*)+0x6f3>
c001f619:	0f 82 0a 05 00 00    	jb     c001fb29 <Vm::faultHandler(regs*)+0x6b5>
c001f61f:	3c e7                	cmp    al,0xe7
c001f621:	0f 84 69 05 00 00    	je     c001fb90 <Vm::faultHandler(regs*)+0x71c>
c001f627:	e9 1b 06 00 00       	jmp    c001fc47 <Vm::faultHandler(regs*)+0x7d3>
c001f62c:	3c ef                	cmp    al,0xef
c001f62e:	0f 84 e6 05 00 00    	je     c001fc1a <Vm::faultHandler(regs*)+0x7a6>
c001f634:	77 37                	ja     c001f66d <Vm::faultHandler(regs*)+0x1f9>
c001f636:	3c ed                	cmp    al,0xed
c001f638:	0f 84 a3 05 00 00    	je     c001fbe1 <Vm::faultHandler(regs*)+0x76d>
c001f63e:	3c ee                	cmp    al,0xee
c001f640:	0f 85 01 06 00 00    	jne    c001fc47 <Vm::faultHandler(regs*)+0x7d3>
c001f646:	52                   	push   edx
c001f647:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f64a:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001f64d:	68 27 d1 02 c0       	push   0xc002d127
c001f652:	e8 9a 38 ff ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c001f657:	59                   	pop    ecx
c001f658:	0f b6 47 2c          	movzx  eax,BYTE PTR [edi+0x2c]
c001f65c:	5b                   	pop    ebx
c001f65d:	50                   	push   eax
c001f65e:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f662:	50                   	push   eax
c001f663:	e8 f8 f9 ff ff       	call   c001f060 <Vm::outbv(unsigned short, unsigned char)>
c001f668:	e9 a5 05 00 00       	jmp    c001fc12 <Vm::faultHandler(regs*)+0x79e>
c001f66d:	3c fa                	cmp    al,0xfa
c001f66f:	0f 84 f7 01 00 00    	je     c001f86c <Vm::faultHandler(regs*)+0x3f8>
c001f675:	3c fb                	cmp    al,0xfb
c001f677:	0f 84 0a 02 00 00    	je     c001f887 <Vm::faultHandler(regs*)+0x413>
c001f67d:	3c f3                	cmp    al,0xf3
c001f67f:	0f 85 c2 05 00 00    	jne    c001fc47 <Vm::faultHandler(regs*)+0x7d3>
c001f685:	83 ec 0c             	sub    esp,0xc
c001f688:	68 5f d0 02 c0       	push   0xc002d05f
c001f68d:	e8 5f 38 ff ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c001f692:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f695:	83 c4 10             	add    esp,0x10
c001f698:	e9 84 fe ff ff       	jmp    c001f521 <Vm::faultHandler(regs*)+0xad>
c001f69d:	83 ec 0c             	sub    esp,0xc
c001f6a0:	b3 02                	mov    bl,0x2
c001f6a2:	68 3a d0 02 c0       	push   0xc002d03a
c001f6a7:	e8 45 38 ff ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c001f6ac:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f6af:	83 c4 10             	add    esp,0x10
c001f6b2:	e9 6a fe ff ff       	jmp    c001f521 <Vm::faultHandler(regs*)+0xad>
c001f6b7:	83 ec 0c             	sub    esp,0xc
c001f6ba:	b3 03                	mov    bl,0x3
c001f6bc:	68 46 d0 02 c0       	push   0xc002d046
c001f6c1:	e8 2b 38 ff ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c001f6c6:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f6c9:	83 c4 10             	add    esp,0x10
c001f6cc:	e9 50 fe ff ff       	jmp    c001f521 <Vm::faultHandler(regs*)+0xad>
c001f6d1:	83 ec 0c             	sub    esp,0xc
c001f6d4:	b3 04                	mov    bl,0x4
c001f6d6:	68 4a d0 02 c0       	push   0xc002d04a
c001f6db:	e8 11 38 ff ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c001f6e0:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f6e3:	83 c4 10             	add    esp,0x10
c001f6e6:	e9 36 fe ff ff       	jmp    c001f521 <Vm::faultHandler(regs*)+0xad>
c001f6eb:	83 ec 0c             	sub    esp,0xc
c001f6ee:	b3 05                	mov    bl,0x5
c001f6f0:	68 4e d0 02 c0       	push   0xc002d04e
c001f6f5:	e8 f7 37 ff ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c001f6fa:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f6fd:	83 c4 10             	add    esp,0x10
c001f700:	e9 1c fe ff ff       	jmp    c001f521 <Vm::faultHandler(regs*)+0xad>
c001f705:	83 ec 0c             	sub    esp,0xc
c001f708:	68 52 d0 02 c0       	push   0xc002d052
c001f70d:	e8 df 37 ff ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c001f712:	83 c4 10             	add    esp,0x10
c001f715:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f718:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001f71d:	e9 ff fd ff ff       	jmp    c001f521 <Vm::faultHandler(regs*)+0xad>
c001f722:	50                   	push   eax
c001f723:	50                   	push   eax
c001f724:	6a 01                	push   0x1
c001f726:	68 57 d0 02 c0       	push   0xc002d057
c001f72b:	e8 c1 37 ff ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c001f730:	83 c4 10             	add    esp,0x10
c001f733:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f736:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c001f73b:	e9 e1 fd ff ff       	jmp    c001f521 <Vm::faultHandler(regs*)+0xad>
c001f740:	83 ec 0c             	sub    esp,0xc
c001f743:	68 65 d0 02 c0       	push   0xc002d065
c001f748:	e8 a4 37 ff ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c001f74d:	83 c4 10             	add    esp,0x10
c001f750:	8b 57 44             	mov    edx,DWORD PTR [edi+0x44]
c001f753:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f758:	8b 47 40             	mov    eax,DWORD PTR [edi+0x40]
c001f75b:	74 2f                	je     c001f78c <Vm::faultHandler(regs*)+0x318>
c001f75d:	83 ea 04             	sub    edx,0x4
c001f760:	25 ff 0d 00 00       	and    eax,0xdff
c001f765:	81 e2 ff ff 00 00    	and    edx,0xffff
c001f76b:	89 57 44             	mov    DWORD PTR [edi+0x44],edx
c001f76e:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c001f771:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f777:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c001f77b:	0f 84 bf 04 00 00    	je     c001fc40 <Vm::faultHandler(regs*)+0x7cc>
c001f781:	80 cc 02             	or     ah,0x2
c001f784:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c001f787:	e9 b4 04 00 00       	jmp    c001fc40 <Vm::faultHandler(regs*)+0x7cc>
c001f78c:	83 ea 02             	sub    edx,0x2
c001f78f:	81 e2 ff ff 00 00    	and    edx,0xffff
c001f795:	89 57 44             	mov    DWORD PTR [edi+0x44],edx
c001f798:	66 89 46 fe          	mov    WORD PTR [esi-0x2],ax
c001f79c:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f7a2:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c001f7a6:	74 05                	je     c001f7ad <Vm::faultHandler(regs*)+0x339>
c001f7a8:	80 cc 02             	or     ah,0x2
c001f7ab:	eb 03                	jmp    c001f7b0 <Vm::faultHandler(regs*)+0x33c>
c001f7ad:	80 e4 fd             	and    ah,0xfd
c001f7b0:	66 89 46 fe          	mov    WORD PTR [esi-0x2],ax
c001f7b4:	e9 87 04 00 00       	jmp    c001fc40 <Vm::faultHandler(regs*)+0x7cc>
c001f7b9:	83 ec 0c             	sub    esp,0xc
c001f7bc:	68 6c d0 02 c0       	push   0xc002d06c
c001f7c1:	e8 2b 37 ff ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c001f7c6:	83 c4 10             	add    esp,0x10
c001f7c9:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f7ce:	74 28                	je     c001f7f8 <Vm::faultHandler(regs*)+0x384>
c001f7d0:	8b 06                	mov    eax,DWORD PTR [esi]
c001f7d2:	25 ff 0d 00 00       	and    eax,0xdff
c001f7d7:	0d 00 02 02 00       	or     eax,0x20200
c001f7dc:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001f7df:	8b 06                	mov    eax,DWORD PTR [esi]
c001f7e1:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f7e7:	c1 e8 09             	shr    eax,0x9
c001f7ea:	83 e0 01             	and    eax,0x1
c001f7ed:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001f7f0:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001f7f3:	83 c0 04             	add    eax,0x4
c001f7f6:	eb 24                	jmp    c001f81c <Vm::faultHandler(regs*)+0x3a8>
c001f7f8:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001f7fb:	0d 00 02 02 00       	or     eax,0x20200
c001f800:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001f803:	66 8b 06             	mov    ax,WORD PTR [esi]
c001f806:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f80c:	66 c1 e8 09          	shr    ax,0x9
c001f810:	83 e0 01             	and    eax,0x1
c001f813:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001f816:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001f819:	83 c0 02             	add    eax,0x2
c001f81c:	25 ff ff 00 00       	and    eax,0xffff
c001f821:	89 47 44             	mov    DWORD PTR [edi+0x44],eax
c001f824:	e9 17 04 00 00       	jmp    c001fc40 <Vm::faultHandler(regs*)+0x7cc>
c001f829:	53                   	push   ebx
c001f82a:	53                   	push   ebx
c001f82b:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f82f:	50                   	push   eax
c001f830:	68 72 d0 02 c0       	push   0xc002d072
c001f835:	e8 b7 36 ff ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c001f83a:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f83e:	83 c4 10             	add    esp,0x10
c001f841:	3c ee                	cmp    al,0xee
c001f843:	75 10                	jne    c001f855 <Vm::faultHandler(regs*)+0x3e1>
c001f845:	83 ec 0c             	sub    esp,0xc
c001f848:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f84b:	e8 ca f8 ff ff       	call   c001f11a <Vm::mainloop3(unsigned long)>
c001f850:	e9 c0 03 00 00       	jmp    c001fc15 <Vm::faultHandler(regs*)+0x7a1>
c001f855:	0f b7 5f 44          	movzx  ebx,WORD PTR [edi+0x44]
c001f859:	83 ec 0c             	sub    esp,0xc
c001f85c:	53                   	push   ebx
c001f85d:	0f b7 5f 48          	movzx  ebx,WORD PTR [edi+0x48]
c001f861:	53                   	push   ebx
c001f862:	55                   	push   ebp
c001f863:	50                   	push   eax
c001f864:	57                   	push   edi
c001f865:	e8 0c fb ff ff       	call   c001f376 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001f86a:	eb 36                	jmp    c001f8a2 <Vm::faultHandler(regs*)+0x42e>
c001f86c:	83 ec 0c             	sub    esp,0xc
c001f86f:	68 7c d0 02 c0       	push   0xc002d07c
c001f874:	e8 78 36 ff ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c001f879:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f87e:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001f882:	e9 8b 03 00 00       	jmp    c001fc12 <Vm::faultHandler(regs*)+0x79e>
c001f887:	83 ec 0c             	sub    esp,0xc
c001f88a:	68 81 d0 02 c0       	push   0xc002d081
c001f88f:	e8 5d 36 ff ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c001f894:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f899:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c001f89d:	e9 70 03 00 00       	jmp    c001fc12 <Vm::faultHandler(regs*)+0x79e>
c001f8a2:	83 c4 20             	add    esp,0x20
c001f8a5:	e9 99 03 00 00       	jmp    c001fc43 <Vm::faultHandler(regs*)+0x7cf>
c001f8aa:	83 ec 0c             	sub    esp,0xc
c001f8ad:	68 bf d0 02 c0       	push   0xc002d0bf
c001f8b2:	e8 3a 36 ff ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c001f8b7:	83 c4 10             	add    esp,0x10
c001f8ba:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001f8bd:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f8c2:	74 0d                	je     c001f8d1 <Vm::faultHandler(regs*)+0x45d>
c001f8c4:	81 7f 10 ff ff 00 00 	cmp    DWORD PTR [edi+0x10],0xffff
c001f8cb:	0f 87 9e 01 00 00    	ja     c001fa6f <Vm::faultHandler(regs*)+0x5fb>
c001f8d1:	83 ec 0c             	sub    esp,0xc
c001f8d4:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f8d8:	0f b7 db             	movzx  ebx,bx
c001f8db:	50                   	push   eax
c001f8dc:	e8 6c f7 ff ff       	call   c001f04d <Vm::inbv(unsigned short)>
c001f8e1:	83 c4 0c             	add    esp,0xc
c001f8e4:	0f b6 c0             	movzx  eax,al
c001f8e7:	50                   	push   eax
c001f8e8:	0f b7 47 10          	movzx  eax,WORD PTR [edi+0x10]
c001f8ec:	50                   	push   eax
c001f8ed:	53                   	push   ebx
c001f8ee:	e8 41 fb ff ff       	call   c001f434 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001f8f3:	83 c4 10             	add    esp,0x10
c001f8f6:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001f8f9:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f8fd:	74 03                	je     c001f902 <Vm::faultHandler(regs*)+0x48e>
c001f8ff:	48                   	dec    eax
c001f900:	eb 01                	jmp    c001f903 <Vm::faultHandler(regs*)+0x48f>
c001f902:	40                   	inc    eax
c001f903:	0f b7 c0             	movzx  eax,ax
c001f906:	eb 7f                	jmp    c001f987 <Vm::faultHandler(regs*)+0x513>
c001f908:	83 ec 0c             	sub    esp,0xc
c001f90b:	68 f1 d0 02 c0       	push   0xc002d0f1
c001f910:	e8 dc 35 ff ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c001f915:	83 c4 10             	add    esp,0x10
c001f918:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001f91b:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f920:	74 0d                	je     c001f92f <Vm::faultHandler(regs*)+0x4bb>
c001f922:	81 7f 10 ff ff 00 00 	cmp    DWORD PTR [edi+0x10],0xffff
c001f929:	0f 87 40 01 00 00    	ja     c001fa6f <Vm::faultHandler(regs*)+0x5fb>
c001f92f:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001f932:	0f b7 77 10          	movzx  esi,WORD PTR [edi+0x10]
c001f936:	0f b7 db             	movzx  ebx,bx
c001f939:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f93e:	74 20                	je     c001f960 <Vm::faultHandler(regs*)+0x4ec>
c001f940:	ed                   	in     eax,dx
c001f941:	51                   	push   ecx
c001f942:	50                   	push   eax
c001f943:	56                   	push   esi
c001f944:	53                   	push   ebx
c001f945:	e8 15 fb ff ff       	call   c001f45f <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001f94a:	83 c4 10             	add    esp,0x10
c001f94d:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001f950:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f954:	74 05                	je     c001f95b <Vm::faultHandler(regs*)+0x4e7>
c001f956:	83 e8 04             	sub    eax,0x4
c001f959:	eb 27                	jmp    c001f982 <Vm::faultHandler(regs*)+0x50e>
c001f95b:	83 c0 04             	add    eax,0x4
c001f95e:	eb 22                	jmp    c001f982 <Vm::faultHandler(regs*)+0x50e>
c001f960:	66 ed                	in     ax,dx
c001f962:	0f b7 c0             	movzx  eax,ax
c001f965:	52                   	push   edx
c001f966:	50                   	push   eax
c001f967:	56                   	push   esi
c001f968:	53                   	push   ebx
c001f969:	e8 db fa ff ff       	call   c001f449 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001f96e:	83 c4 10             	add    esp,0x10
c001f971:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001f974:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f978:	74 05                	je     c001f97f <Vm::faultHandler(regs*)+0x50b>
c001f97a:	83 e8 02             	sub    eax,0x2
c001f97d:	eb 03                	jmp    c001f982 <Vm::faultHandler(regs*)+0x50e>
c001f97f:	83 c0 02             	add    eax,0x2
c001f982:	25 ff ff 00 00       	and    eax,0xffff
c001f987:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c001f98a:	e9 b1 02 00 00       	jmp    c001fc40 <Vm::faultHandler(regs*)+0x7cc>
c001f98f:	83 ec 0c             	sub    esp,0xc
c001f992:	4b                   	dec    ebx
c001f993:	68 f7 d0 02 c0       	push   0xc002d0f7
c001f998:	e8 54 35 ff ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c001f99d:	83 c4 10             	add    esp,0x10
c001f9a0:	80 fb 05             	cmp    bl,0x5
c001f9a3:	77 0a                	ja     c001f9af <Vm::faultHandler(regs*)+0x53b>
c001f9a5:	0f b6 db             	movzx  ebx,bl
c001f9a8:	ff 24 9d 68 d1 02 c0 	jmp    DWORD PTR [ebx*4-0x3ffd2e98]
c001f9af:	0f b7 47 3c          	movzx  eax,WORD PTR [edi+0x3c]
c001f9b3:	eb 1b                	jmp    c001f9d0 <Vm::faultHandler(regs*)+0x55c>
c001f9b5:	0f b7 47 0c          	movzx  eax,WORD PTR [edi+0xc]
c001f9b9:	eb 15                	jmp    c001f9d0 <Vm::faultHandler(regs*)+0x55c>
c001f9bb:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c001f9bf:	eb 0f                	jmp    c001f9d0 <Vm::faultHandler(regs*)+0x55c>
c001f9c1:	0f b7 47 04          	movzx  eax,WORD PTR [edi+0x4]
c001f9c5:	eb 09                	jmp    c001f9d0 <Vm::faultHandler(regs*)+0x55c>
c001f9c7:	0f b7 07             	movzx  eax,WORD PTR [edi]
c001f9ca:	eb 04                	jmp    c001f9d0 <Vm::faultHandler(regs*)+0x55c>
c001f9cc:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001f9d0:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f9d5:	74 0d                	je     c001f9e4 <Vm::faultHandler(regs*)+0x570>
c001f9d7:	81 7f 14 ff ff 00 00 	cmp    DWORD PTR [edi+0x14],0xffff
c001f9de:	0f 87 8b 00 00 00    	ja     c001fa6f <Vm::faultHandler(regs*)+0x5fb>
c001f9e4:	53                   	push   ebx
c001f9e5:	53                   	push   ebx
c001f9e6:	0f b7 57 14          	movzx  edx,WORD PTR [edi+0x14]
c001f9ea:	52                   	push   edx
c001f9eb:	50                   	push   eax
c001f9ec:	e8 0f fa ff ff       	call   c001f400 <Vm::readByteFromReal(unsigned short, unsigned short)>
c001f9f1:	5e                   	pop    esi
c001f9f2:	0f b6 c0             	movzx  eax,al
c001f9f5:	5d                   	pop    ebp
c001f9f6:	50                   	push   eax
c001f9f7:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f9fb:	50                   	push   eax
c001f9fc:	e8 5f f6 ff ff       	call   c001f060 <Vm::outbv(unsigned short, unsigned char)>
c001fa01:	83 c4 10             	add    esp,0x10
c001fa04:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001fa07:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001fa0b:	74 03                	je     c001fa10 <Vm::faultHandler(regs*)+0x59c>
c001fa0d:	48                   	dec    eax
c001fa0e:	eb 01                	jmp    c001fa11 <Vm::faultHandler(regs*)+0x59d>
c001fa10:	40                   	inc    eax
c001fa11:	0f b7 c0             	movzx  eax,ax
c001fa14:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c001fa17:	e9 24 02 00 00       	jmp    c001fc40 <Vm::faultHandler(regs*)+0x7cc>
c001fa1c:	83 ec 0c             	sub    esp,0xc
c001fa1f:	4b                   	dec    ebx
c001fa20:	68 f7 d0 02 c0       	push   0xc002d0f7
c001fa25:	e8 c7 34 ff ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c001fa2a:	83 c4 10             	add    esp,0x10
c001fa2d:	80 fb 05             	cmp    bl,0x5
c001fa30:	77 0a                	ja     c001fa3c <Vm::faultHandler(regs*)+0x5c8>
c001fa32:	0f b6 db             	movzx  ebx,bl
c001fa35:	ff 24 9d 80 d1 02 c0 	jmp    DWORD PTR [ebx*4-0x3ffd2e80]
c001fa3c:	0f b7 47 3c          	movzx  eax,WORD PTR [edi+0x3c]
c001fa40:	eb 1b                	jmp    c001fa5d <Vm::faultHandler(regs*)+0x5e9>
c001fa42:	0f b7 47 0c          	movzx  eax,WORD PTR [edi+0xc]
c001fa46:	eb 15                	jmp    c001fa5d <Vm::faultHandler(regs*)+0x5e9>
c001fa48:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c001fa4c:	eb 0f                	jmp    c001fa5d <Vm::faultHandler(regs*)+0x5e9>
c001fa4e:	0f b7 47 04          	movzx  eax,WORD PTR [edi+0x4]
c001fa52:	eb 09                	jmp    c001fa5d <Vm::faultHandler(regs*)+0x5e9>
c001fa54:	0f b7 07             	movzx  eax,WORD PTR [edi]
c001fa57:	eb 04                	jmp    c001fa5d <Vm::faultHandler(regs*)+0x5e9>
c001fa59:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001fa5d:	8b 5f 14             	mov    ebx,DWORD PTR [edi+0x14]
c001fa60:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001fa65:	74 39                	je     c001faa0 <Vm::faultHandler(regs*)+0x62c>
c001fa67:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c001fa6d:	76 31                	jbe    c001faa0 <Vm::faultHandler(regs*)+0x62c>
c001fa6f:	0f b6 4d 05          	movzx  ecx,BYTE PTR [ebp+0x5]
c001fa73:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001fa77:	51                   	push   ecx
c001fa78:	0f b6 4d 04          	movzx  ecx,BYTE PTR [ebp+0x4]
c001fa7c:	51                   	push   ecx
c001fa7d:	0f b6 4d 03          	movzx  ecx,BYTE PTR [ebp+0x3]
c001fa81:	51                   	push   ecx
c001fa82:	0f b6 4d 02          	movzx  ecx,BYTE PTR [ebp+0x2]
c001fa86:	51                   	push   ecx
c001fa87:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001fa8b:	52                   	push   edx
c001fa8c:	50                   	push   eax
c001fa8d:	50                   	push   eax
c001fa8e:	68 c4 d0 02 c0       	push   0xc002d0c4
c001fa93:	e8 59 34 ff ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c001fa98:	83 c4 20             	add    esp,0x20
c001fa9b:	e9 fb 01 00 00       	jmp    c001fc9b <Vm::faultHandler(regs*)+0x827>
c001faa0:	8b 77 40             	mov    esi,DWORD PTR [edi+0x40]
c001faa3:	0f b7 d3             	movzx  edx,bx
c001faa6:	81 e6 00 04 00 00    	and    esi,0x400
c001faac:	8b 6f 24             	mov    ebp,DWORD PTR [edi+0x24]
c001faaf:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001fab4:	74 1d                	je     c001fad3 <Vm::faultHandler(regs*)+0x65f>
c001fab6:	51                   	push   ecx
c001fab7:	51                   	push   ecx
c001fab8:	52                   	push   edx
c001fab9:	50                   	push   eax
c001faba:	e8 64 f9 ff ff       	call   c001f423 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001fabf:	83 c4 10             	add    esp,0x10
c001fac2:	89 ea                	mov    edx,ebp
c001fac4:	ef                   	out    dx,eax
c001fac5:	85 f6                	test   esi,esi
c001fac7:	74 05                	je     c001face <Vm::faultHandler(regs*)+0x65a>
c001fac9:	83 eb 04             	sub    ebx,0x4
c001facc:	eb 21                	jmp    c001faef <Vm::faultHandler(regs*)+0x67b>
c001face:	83 c3 04             	add    ebx,0x4
c001fad1:	eb 1c                	jmp    c001faef <Vm::faultHandler(regs*)+0x67b>
c001fad3:	51                   	push   ecx
c001fad4:	51                   	push   ecx
c001fad5:	52                   	push   edx
c001fad6:	50                   	push   eax
c001fad7:	e8 35 f9 ff ff       	call   c001f411 <Vm::readWordFromReal(unsigned short, unsigned short)>
c001fadc:	83 c4 10             	add    esp,0x10
c001fadf:	89 ea                	mov    edx,ebp
c001fae1:	66 ef                	out    dx,ax
c001fae3:	85 f6                	test   esi,esi
c001fae5:	74 05                	je     c001faec <Vm::faultHandler(regs*)+0x678>
c001fae7:	83 eb 02             	sub    ebx,0x2
c001faea:	eb 03                	jmp    c001faef <Vm::faultHandler(regs*)+0x67b>
c001faec:	83 c3 02             	add    ebx,0x2
c001faef:	81 e3 ff ff 00 00    	and    ebx,0xffff
c001faf5:	89 5f 14             	mov    DWORD PTR [edi+0x14],ebx
c001faf8:	e9 43 01 00 00       	jmp    c001fc40 <Vm::faultHandler(regs*)+0x7cc>
c001fafd:	53                   	push   ebx
c001fafe:	53                   	push   ebx
c001faff:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fb03:	50                   	push   eax
c001fb04:	68 fd d0 02 c0       	push   0xc002d0fd
c001fb09:	e8 e3 33 ff ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c001fb0e:	81 67 2c 00 ff ff ff 	and    DWORD PTR [edi+0x2c],0xffffff00
c001fb15:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fb19:	89 04 24             	mov    DWORD PTR [esp],eax
c001fb1c:	e8 2c f5 ff ff       	call   c001f04d <Vm::inbv(unsigned short)>
c001fb21:	0f b6 c0             	movzx  eax,al
c001fb24:	09 47 2c             	or     DWORD PTR [edi+0x2c],eax
c001fb27:	eb 5e                	jmp    c001fb87 <Vm::faultHandler(regs*)+0x713>
c001fb29:	51                   	push   ecx
c001fb2a:	51                   	push   ecx
c001fb2b:	53                   	push   ebx
c001fb2c:	68 03 d1 02 c0       	push   0xc002d103
c001fb31:	e8 bb 33 ff ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c001fb36:	83 c4 10             	add    esp,0x10
c001fb39:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001fb3e:	74 07                	je     c001fb47 <Vm::faultHandler(regs*)+0x6d3>
c001fb40:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001fb44:	ed                   	in     eax,dx
c001fb45:	eb 14                	jmp    c001fb5b <Vm::faultHandler(regs*)+0x6e7>
c001fb47:	8b 5f 2c             	mov    ebx,DWORD PTR [edi+0x2c]
c001fb4a:	66 31 db             	xor    bx,bx
c001fb4d:	89 5f 2c             	mov    DWORD PTR [edi+0x2c],ebx
c001fb50:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001fb54:	66 ed                	in     ax,dx
c001fb56:	0f b7 c0             	movzx  eax,ax
c001fb59:	09 d8                	or     eax,ebx
c001fb5b:	89 47 2c             	mov    DWORD PTR [edi+0x2c],eax
c001fb5e:	83 47 38 02          	add    DWORD PTR [edi+0x38],0x2
c001fb62:	e9 dc 00 00 00       	jmp    c001fc43 <Vm::faultHandler(regs*)+0x7cf>
c001fb67:	50                   	push   eax
c001fb68:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001fb6b:	53                   	push   ebx
c001fb6c:	68 09 d1 02 c0       	push   0xc002d109
c001fb71:	e8 7b 33 ff ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c001fb76:	58                   	pop    eax
c001fb77:	0f b6 47 2c          	movzx  eax,BYTE PTR [edi+0x2c]
c001fb7b:	5a                   	pop    edx
c001fb7c:	50                   	push   eax
c001fb7d:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fb81:	50                   	push   eax
c001fb82:	e8 d9 f4 ff ff       	call   c001f060 <Vm::outbv(unsigned short, unsigned char)>
c001fb87:	83 47 38 02          	add    DWORD PTR [edi+0x38],0x2
c001fb8b:	e9 85 00 00 00       	jmp    c001fc15 <Vm::faultHandler(regs*)+0x7a1>
c001fb90:	50                   	push   eax
c001fb91:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001fb94:	53                   	push   ebx
c001fb95:	68 12 d1 02 c0       	push   0xc002d112
c001fb9a:	e8 52 33 ff ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c001fb9f:	83 c4 10             	add    esp,0x10
c001fba2:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001fba6:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001fbab:	8b 47 2c             	mov    eax,DWORD PTR [edi+0x2c]
c001fbae:	74 03                	je     c001fbb3 <Vm::faultHandler(regs*)+0x73f>
c001fbb0:	ef                   	out    dx,eax
c001fbb1:	eb ab                	jmp    c001fb5e <Vm::faultHandler(regs*)+0x6ea>
c001fbb3:	66 ef                	out    dx,ax
c001fbb5:	eb a7                	jmp    c001fb5e <Vm::faultHandler(regs*)+0x6ea>
c001fbb7:	55                   	push   ebp
c001fbb8:	55                   	push   ebp
c001fbb9:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001fbbc:	68 1b d1 02 c0       	push   0xc002d11b
c001fbc1:	e8 2b 33 ff ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c001fbc6:	81 67 2c 00 ff ff ff 	and    DWORD PTR [edi+0x2c],0xffffff00
c001fbcd:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001fbd1:	89 04 24             	mov    DWORD PTR [esp],eax
c001fbd4:	e8 74 f4 ff ff       	call   c001f04d <Vm::inbv(unsigned short)>
c001fbd9:	0f b6 c0             	movzx  eax,al
c001fbdc:	09 47 2c             	or     DWORD PTR [edi+0x2c],eax
c001fbdf:	eb 31                	jmp    c001fc12 <Vm::faultHandler(regs*)+0x79e>
c001fbe1:	56                   	push   esi
c001fbe2:	56                   	push   esi
c001fbe3:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001fbe6:	68 21 d1 02 c0       	push   0xc002d121
c001fbeb:	e8 01 33 ff ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c001fbf0:	83 c4 10             	add    esp,0x10
c001fbf3:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001fbf6:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001fbfb:	74 03                	je     c001fc00 <Vm::faultHandler(regs*)+0x78c>
c001fbfd:	ed                   	in     eax,dx
c001fbfe:	eb 0d                	jmp    c001fc0d <Vm::faultHandler(regs*)+0x799>
c001fc00:	66 ed                	in     ax,dx
c001fc02:	8b 57 2c             	mov    edx,DWORD PTR [edi+0x2c]
c001fc05:	0f b7 c0             	movzx  eax,ax
c001fc08:	66 31 d2             	xor    dx,dx
c001fc0b:	09 d0                	or     eax,edx
c001fc0d:	89 47 2c             	mov    DWORD PTR [edi+0x2c],eax
c001fc10:	eb 2e                	jmp    c001fc40 <Vm::faultHandler(regs*)+0x7cc>
c001fc12:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001fc15:	83 c4 10             	add    esp,0x10
c001fc18:	eb 29                	jmp    c001fc43 <Vm::faultHandler(regs*)+0x7cf>
c001fc1a:	50                   	push   eax
c001fc1b:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001fc1e:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001fc21:	68 30 d1 02 c0       	push   0xc002d130
c001fc26:	e8 c6 32 ff ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c001fc2b:	83 c4 10             	add    esp,0x10
c001fc2e:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001fc31:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001fc36:	8b 47 2c             	mov    eax,DWORD PTR [edi+0x2c]
c001fc39:	74 03                	je     c001fc3e <Vm::faultHandler(regs*)+0x7ca>
c001fc3b:	ef                   	out    dx,eax
c001fc3c:	eb 02                	jmp    c001fc40 <Vm::faultHandler(regs*)+0x7cc>
c001fc3e:	66 ef                	out    dx,ax
c001fc40:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001fc43:	b0 01                	mov    al,0x1
c001fc45:	eb 56                	jmp    c001fc9d <Vm::faultHandler(regs*)+0x829>
c001fc47:	0f b6 4d 05          	movzx  ecx,BYTE PTR [ebp+0x5]
c001fc4b:	51                   	push   ecx
c001fc4c:	0f b6 4d 04          	movzx  ecx,BYTE PTR [ebp+0x4]
c001fc50:	51                   	push   ecx
c001fc51:	0f b6 4d 03          	movzx  ecx,BYTE PTR [ebp+0x3]
c001fc55:	51                   	push   ecx
c001fc56:	0f b6 4d 02          	movzx  ecx,BYTE PTR [ebp+0x2]
c001fc5a:	51                   	push   ecx
c001fc5b:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001fc5f:	52                   	push   edx
c001fc60:	50                   	push   eax
c001fc61:	50                   	push   eax
c001fc62:	68 39 d1 02 c0       	push   0xc002d139
c001fc67:	e8 85 32 ff ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c001fc6c:	83 c4 20             	add    esp,0x20
c001fc6f:	83 ec 0c             	sub    esp,0xc
c001fc72:	6a 60                	push   0x60
c001fc74:	e8 d4 f3 ff ff       	call   c001f04d <Vm::inbv(unsigned short)>
c001fc79:	83 c4 10             	add    esp,0x10
c001fc7c:	3c 1c                	cmp    al,0x1c
c001fc7e:	74 04                	je     c001fc84 <Vm::faultHandler(regs*)+0x810>
c001fc80:	3c 5a                	cmp    al,0x5a
c001fc82:	75 eb                	jne    c001fc6f <Vm::faultHandler(regs*)+0x7fb>
c001fc84:	3c 1c                	cmp    al,0x1c
c001fc86:	74 04                	je     c001fc8c <Vm::faultHandler(regs*)+0x818>
c001fc88:	3c 5a                	cmp    al,0x5a
c001fc8a:	75 0f                	jne    c001fc9b <Vm::faultHandler(regs*)+0x827>
c001fc8c:	83 ec 0c             	sub    esp,0xc
c001fc8f:	6a 60                	push   0x60
c001fc91:	e8 b7 f3 ff ff       	call   c001f04d <Vm::inbv(unsigned short)>
c001fc96:	83 c4 10             	add    esp,0x10
c001fc99:	eb e9                	jmp    c001fc84 <Vm::faultHandler(regs*)+0x810>
c001fc9b:	31 c0                	xor    eax,eax
c001fc9d:	83 c4 1c             	add    esp,0x1c
c001fca0:	5b                   	pop    ebx
c001fca1:	5e                   	pop    esi
c001fca2:	5f                   	pop    edi
c001fca3:	5d                   	pop    ebp
c001fca4:	c3                   	ret    

c001fca5 <Vm::fpuInternalTo32(unsigned long long)>:
c001fca5:	57                   	push   edi
c001fca6:	56                   	push   esi
c001fca7:	53                   	push   ebx
c001fca8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fcac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcb0:	89 d6                	mov    esi,edx
c001fcb2:	89 d7                	mov    edi,edx
c001fcb4:	89 c1                	mov    ecx,eax
c001fcb6:	c1 ef 14             	shr    edi,0x14
c001fcb9:	89 d3                	mov    ebx,edx
c001fcbb:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001fcc1:	31 d2                	xor    edx,edx
c001fcc3:	89 f8                	mov    eax,edi
c001fcc5:	81 e6 00 00 00 80    	and    esi,0x80000000
c001fccb:	bf ff 00 00 00       	mov    edi,0xff
c001fcd0:	05 80 fc ff ff       	add    eax,0xfffffc80
c001fcd5:	83 d2 ff             	adc    edx,0xffffffff
c001fcd8:	39 c7                	cmp    edi,eax
c001fcda:	bf 00 00 00 00       	mov    edi,0x0
c001fcdf:	19 d7                	sbb    edi,edx
c001fce1:	72 15                	jb     c001fcf8 <Vm::fpuInternalTo32(unsigned long long)+0x53>
c001fce3:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c001fce7:	c1 e0 17             	shl    eax,0x17
c001fcea:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c001fcf0:	09 f1                	or     ecx,esi
c001fcf2:	09 c1                	or     ecx,eax
c001fcf4:	89 cf                	mov    edi,ecx
c001fcf6:	eb 02                	jmp    c001fcfa <Vm::fpuInternalTo32(unsigned long long)+0x55>
c001fcf8:	31 ff                	xor    edi,edi
c001fcfa:	89 f8                	mov    eax,edi
c001fcfc:	5b                   	pop    ebx
c001fcfd:	5e                   	pop    esi
c001fcfe:	5f                   	pop    edi
c001fcff:	c3                   	ret    

c001fd00 <Vm::fpuInternalTo64(unsigned long long)>:
c001fd00:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fd04:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001fd08:	c3                   	ret    

c001fd09 <Vm::fpu32ToInternal(unsigned int)>:
c001fd09:	57                   	push   edi
c001fd0a:	31 ff                	xor    edi,edi
c001fd0c:	56                   	push   esi
c001fd0d:	53                   	push   ebx
c001fd0e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001fd12:	89 cb                	mov    ebx,ecx
c001fd14:	89 ce                	mov    esi,ecx
c001fd16:	81 e3 00 00 00 80    	and    ebx,0x80000000
c001fd1c:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c001fd22:	c1 e9 17             	shr    ecx,0x17
c001fd25:	89 f0                	mov    eax,esi
c001fd27:	0f b6 d1             	movzx  edx,cl
c001fd2a:	81 c2 80 03 00 00    	add    edx,0x380
c001fd30:	89 d1                	mov    ecx,edx
c001fd32:	89 fa                	mov    edx,edi
c001fd34:	c1 e1 14             	shl    ecx,0x14
c001fd37:	0f a4 c2 1d          	shld   edx,eax,0x1d
c001fd3b:	c1 e0 1d             	shl    eax,0x1d
c001fd3e:	89 d7                	mov    edi,edx
c001fd40:	89 c6                	mov    esi,eax
c001fd42:	89 ca                	mov    edx,ecx
c001fd44:	89 f0                	mov    eax,esi
c001fd46:	09 fa                	or     edx,edi
c001fd48:	09 da                	or     edx,ebx
c001fd4a:	5b                   	pop    ebx
c001fd4b:	5e                   	pop    esi
c001fd4c:	5f                   	pop    edi
c001fd4d:	c3                   	ret    

c001fd4e <Vm::fpu64ToInternal(unsigned long long)>:
c001fd4e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fd52:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001fd56:	c3                   	ret    

c001fd57 <Vm::fpuFloatToLong(unsigned long long)>:
c001fd57:	57                   	push   edi
c001fd58:	31 c0                	xor    eax,eax
c001fd5a:	56                   	push   esi
c001fd5b:	31 d2                	xor    edx,edx
c001fd5d:	53                   	push   ebx
c001fd5e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001fd62:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001fd66:	89 d9                	mov    ecx,ebx
c001fd68:	c1 e9 14             	shr    ecx,0x14
c001fd6b:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001fd71:	89 cf                	mov    edi,ecx
c001fd73:	81 ef ff 03 00 00    	sub    edi,0x3ff
c001fd79:	78 33                	js     c001fdae <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001fd7b:	89 d9                	mov    ecx,ebx
c001fd7d:	89 f0                	mov    eax,esi
c001fd7f:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001fd85:	81 c9 00 00 10 00    	or     ecx,0x100000
c001fd8b:	89 ca                	mov    edx,ecx
c001fd8d:	b9 34 00 00 00       	mov    ecx,0x34
c001fd92:	29 f9                	sub    ecx,edi
c001fd94:	0f ad d0             	shrd   eax,edx,cl
c001fd97:	d3 fa                	sar    edx,cl
c001fd99:	f6 c1 20             	test   cl,0x20
c001fd9c:	74 05                	je     c001fda3 <Vm::fpuFloatToLong(unsigned long long)+0x4c>
c001fd9e:	89 d0                	mov    eax,edx
c001fda0:	c1 fa 1f             	sar    edx,0x1f
c001fda3:	85 db                	test   ebx,ebx
c001fda5:	79 07                	jns    c001fdae <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001fda7:	f7 d8                	neg    eax
c001fda9:	83 d2 00             	adc    edx,0x0
c001fdac:	f7 da                	neg    edx
c001fdae:	5b                   	pop    ebx
c001fdaf:	5e                   	pop    esi
c001fdb0:	5f                   	pop    edi
c001fdb1:	c3                   	ret    

c001fdb2 <Vm::fpuULongToFloat(unsigned long long)>:
c001fdb2:	57                   	push   edi
c001fdb3:	31 c9                	xor    ecx,ecx
c001fdb5:	56                   	push   esi
c001fdb6:	53                   	push   ebx
c001fdb7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001fdbb:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001fdbf:	0f ba e7 14          	bt     edi,0x14
c001fdc3:	72 07                	jb     c001fdcc <Vm::fpuULongToFloat(unsigned long long)+0x1a>
c001fdc5:	01 f6                	add    esi,esi
c001fdc7:	11 ff                	adc    edi,edi
c001fdc9:	41                   	inc    ecx
c001fdca:	eb f3                	jmp    c001fdbf <Vm::fpuULongToFloat(unsigned long long)+0xd>
c001fdcc:	89 fa                	mov    edx,edi
c001fdce:	89 f0                	mov    eax,esi
c001fdd0:	bb 33 04 00 00       	mov    ebx,0x433
c001fdd5:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c001fddb:	29 cb                	sub    ebx,ecx
c001fddd:	89 d9                	mov    ecx,ebx
c001fddf:	5b                   	pop    ebx
c001fde0:	c1 e1 14             	shl    ecx,0x14
c001fde3:	5e                   	pop    esi
c001fde4:	09 ca                	or     edx,ecx
c001fde6:	5f                   	pop    edi
c001fde7:	c3                   	ret    

c001fde8 <Vm::fpuLongToFloat(long long)>:
c001fde8:	56                   	push   esi
c001fde9:	31 c0                	xor    eax,eax
c001fdeb:	53                   	push   ebx
c001fdec:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001fdf0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001fdf4:	39 c8                	cmp    eax,ecx
c001fdf6:	19 d8                	sbb    eax,ebx
c001fdf8:	7d 04                	jge    c001fdfe <Vm::fpuLongToFloat(long long)+0x16>
c001fdfa:	31 f6                	xor    esi,esi
c001fdfc:	eb 0c                	jmp    c001fe0a <Vm::fpuLongToFloat(long long)+0x22>
c001fdfe:	f7 d9                	neg    ecx
c001fe00:	be 01 00 00 00       	mov    esi,0x1
c001fe05:	83 d3 00             	adc    ebx,0x0
c001fe08:	f7 db                	neg    ebx
c001fe0a:	31 c0                	xor    eax,eax
c001fe0c:	0f ba e3 14          	bt     ebx,0x14
c001fe10:	72 07                	jb     c001fe19 <Vm::fpuLongToFloat(long long)+0x31>
c001fe12:	01 c9                	add    ecx,ecx
c001fe14:	11 db                	adc    ebx,ebx
c001fe16:	40                   	inc    eax
c001fe17:	eb f3                	jmp    c001fe0c <Vm::fpuLongToFloat(long long)+0x24>
c001fe19:	ba 33 04 00 00       	mov    edx,0x433
c001fe1e:	29 c2                	sub    edx,eax
c001fe20:	89 c8                	mov    eax,ecx
c001fe22:	c1 e2 14             	shl    edx,0x14
c001fe25:	89 d9                	mov    ecx,ebx
c001fe27:	89 f3                	mov    ebx,esi
c001fe29:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001fe2f:	09 ca                	or     edx,ecx
c001fe31:	84 db                	test   bl,bl
c001fe33:	74 06                	je     c001fe3b <Vm::fpuLongToFloat(long long)+0x53>
c001fe35:	81 ca 00 00 00 80    	or     edx,0x80000000
c001fe3b:	5b                   	pop    ebx
c001fe3c:	5e                   	pop    esi
c001fe3d:	c3                   	ret    

c001fe3e <Vm::fpuGet0()>:
c001fe3e:	31 c0                	xor    eax,eax
c001fe40:	31 d2                	xor    edx,edx
c001fe42:	c3                   	ret    

c001fe43 <Vm::fpuGet1()>:
c001fe43:	b8 01 00 00 00       	mov    eax,0x1
c001fe48:	31 d2                	xor    edx,edx
c001fe4a:	c3                   	ret    

c001fe4b <Vm::fpuGetPi()>:
c001fe4b:	b8 03 00 00 00       	mov    eax,0x3
c001fe50:	31 d2                	xor    edx,edx
c001fe52:	c3                   	ret    

c001fe53 <Vm::fpuGetLog2E()>:
c001fe53:	83 ec 18             	sub    esp,0x18
c001fe56:	68 98 d1 02 c0       	push   0xc002d198
c001fe5b:	e8 51 aa ff ff       	call   c001a8b1 <Krnl::panic(char const*)>
c001fe60:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001fe65:	31 d2                	xor    edx,edx
c001fe67:	83 c4 1c             	add    esp,0x1c
c001fe6a:	c3                   	ret    

c001fe6b <Vm::fpuGetLogE2()>:
c001fe6b:	83 ec 18             	sub    esp,0x18
c001fe6e:	68 a4 d1 02 c0       	push   0xc002d1a4
c001fe73:	e8 39 aa ff ff       	call   c001a8b1 <Krnl::panic(char const*)>
c001fe78:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001fe7d:	31 d2                	xor    edx,edx
c001fe7f:	83 c4 1c             	add    esp,0x1c
c001fe82:	c3                   	ret    

c001fe83 <Vm::fpuGetLog210()>:
c001fe83:	83 ec 18             	sub    esp,0x18
c001fe86:	68 b0 d1 02 c0       	push   0xc002d1b0
c001fe8b:	e8 21 aa ff ff       	call   c001a8b1 <Krnl::panic(char const*)>
c001fe90:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001fe95:	31 d2                	xor    edx,edx
c001fe97:	83 c4 1c             	add    esp,0x1c
c001fe9a:	c3                   	ret    

c001fe9b <Vm::fpuGetLog102()>:
c001fe9b:	83 ec 18             	sub    esp,0x18
c001fe9e:	68 bd d1 02 c0       	push   0xc002d1bd
c001fea3:	e8 09 aa ff ff       	call   c001a8b1 <Krnl::panic(char const*)>
c001fea8:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001fead:	31 d2                	xor    edx,edx
c001feaf:	83 c4 1c             	add    esp,0x1c
c001feb2:	c3                   	ret    

c001feb3 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c001feb3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001feb7:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001febb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001febf:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c001fec3:	0f 92 c0             	setb   al
c001fec6:	c3                   	ret    

c001fec7 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c001fec7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001fecb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fecf:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c001fed3:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c001fed7:	09 c2                	or     edx,eax
c001fed9:	0f 94 c0             	sete   al
c001fedc:	c3                   	ret    

c001fedd <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c001fedd:	57                   	push   edi
c001fede:	56                   	push   esi
c001fedf:	53                   	push   ebx
c001fee0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001fee4:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001fee8:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001feec:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001fef0:	57                   	push   edi
c001fef1:	56                   	push   esi
c001fef2:	53                   	push   ebx
c001fef3:	51                   	push   ecx
c001fef4:	e8 ce ff ff ff       	call   c001fec7 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c001fef9:	83 c4 10             	add    esp,0x10
c001fefc:	88 c2                	mov    dl,al
c001fefe:	31 c0                	xor    eax,eax
c001ff00:	84 d2                	test   dl,dl
c001ff02:	75 0c                	jne    c001ff10 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x33>
c001ff04:	57                   	push   edi
c001ff05:	56                   	push   esi
c001ff06:	53                   	push   ebx
c001ff07:	51                   	push   ecx
c001ff08:	e8 a6 ff ff ff       	call   c001feb3 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c001ff0d:	83 c4 10             	add    esp,0x10
c001ff10:	83 e0 01             	and    eax,0x1
c001ff13:	5b                   	pop    ebx
c001ff14:	88 c1                	mov    cl,al
c001ff16:	83 e2 01             	and    edx,0x1
c001ff19:	a0 41 24 03 c0       	mov    al,ds:0xc0032441
c001ff1e:	c1 e2 06             	shl    edx,0x6
c001ff21:	83 e0 ba             	and    eax,0xffffffba
c001ff24:	5e                   	pop    esi
c001ff25:	09 c8                	or     eax,ecx
c001ff27:	5f                   	pop    edi
c001ff28:	09 d0                	or     eax,edx
c001ff2a:	a2 41 24 03 c0       	mov    ds:0xc0032441,al
c001ff2f:	c3                   	ret    

c001ff30 <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c001ff30:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ff34:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ff38:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001ff3c:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c001ff40:	c3                   	ret    

c001ff41 <Vm::fpuAbs(unsigned long long)>:
c001ff41:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ff45:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ff49:	c3                   	ret    

c001ff4a <Vm::fpuChs(unsigned long long)>:
c001ff4a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ff4e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ff52:	f7 d8                	neg    eax
c001ff54:	83 d2 00             	adc    edx,0x0
c001ff57:	f7 da                	neg    edx
c001ff59:	c3                   	ret    

c001ff5a <Vm::fpuSub(unsigned long long, unsigned long long)>:
c001ff5a:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c001ff5e:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c001ff63:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c001ff67:	eb c7                	jmp    c001ff30 <Vm::fpuAdd(unsigned long long, unsigned long long)>

c001ff69 <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c001ff69:	53                   	push   ebx
c001ff6a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ff6e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ff72:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ff76:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001ff7a:	0f af ca             	imul   ecx,edx
c001ff7d:	0f af d8             	imul   ebx,eax
c001ff80:	f7 e2                	mul    edx
c001ff82:	01 d9                	add    ecx,ebx
c001ff84:	5b                   	pop    ebx
c001ff85:	01 ca                	add    edx,ecx
c001ff87:	c3                   	ret    

c001ff88 <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c001ff88:	83 ec 0c             	sub    esp,0xc
c001ff8b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ff8f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ff93:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ff97:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ff9b:	e8 34 72 00 00       	call   c00271d4 <__udivdi3>
c001ffa0:	83 c4 1c             	add    esp,0x1c
c001ffa3:	c3                   	ret    

c001ffa4 <Vm::fpuSquare(unsigned long long)>:
c001ffa4:	50                   	push   eax
c001ffa5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ffa9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ffad:	52                   	push   edx
c001ffae:	50                   	push   eax
c001ffaf:	52                   	push   edx
c001ffb0:	50                   	push   eax
c001ffb1:	e8 b3 ff ff ff       	call   c001ff69 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001ffb6:	83 c4 14             	add    esp,0x14
c001ffb9:	c3                   	ret    

c001ffba <Vm::fpuGetReg(int)>:
c001ffba:	83 ec 0c             	sub    esp,0xc
c001ffbd:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001ffc2:	76 10                	jbe    c001ffd4 <Vm::fpuGetReg(int)+0x1a>
c001ffc4:	83 ec 0c             	sub    esp,0xc
c001ffc7:	68 ca d1 02 c0       	push   0xc002d1ca
c001ffcc:	e8 e0 a8 ff ff       	call   c001a8b1 <Krnl::panic(char const*)>
c001ffd1:	83 c4 10             	add    esp,0x10
c001ffd4:	a0 41 24 03 c0       	mov    al,ds:0xc0032441
c001ffd9:	b9 08 00 00 00       	mov    ecx,0x8
c001ffde:	c0 e8 03             	shr    al,0x3
c001ffe1:	83 e0 07             	and    eax,0x7
c001ffe4:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001ffe8:	99                   	cdq    
c001ffe9:	f7 f9                	idiv   ecx
c001ffeb:	8b 04 d5 44 24 03 c0 	mov    eax,DWORD PTR [edx*8-0x3ffcdbbc]
c001fff2:	8b 14 d5 48 24 03 c0 	mov    edx,DWORD PTR [edx*8-0x3ffcdbb8]
c001fff9:	83 c4 0c             	add    esp,0xc
c001fffc:	c3                   	ret    

c001fffd <Vm::fpuSetReg(int, unsigned long long)>:
c001fffd:	57                   	push   edi
c001fffe:	56                   	push   esi
c001ffff:	52                   	push   edx
c0020000:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0020004:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0020008:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c002000d:	76 10                	jbe    c002001f <Vm::fpuSetReg(int, unsigned long long)+0x22>
c002000f:	83 ec 0c             	sub    esp,0xc
c0020012:	68 dd d1 02 c0       	push   0xc002d1dd
c0020017:	e8 95 a8 ff ff       	call   c001a8b1 <Krnl::panic(char const*)>
c002001c:	83 c4 10             	add    esp,0x10
c002001f:	a0 41 24 03 c0       	mov    al,ds:0xc0032441
c0020024:	b9 08 00 00 00       	mov    ecx,0x8
c0020029:	c0 e8 03             	shr    al,0x3
c002002c:	83 e0 07             	and    eax,0x7
c002002f:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0020033:	99                   	cdq    
c0020034:	f7 f9                	idiv   ecx
c0020036:	89 34 d5 44 24 03 c0 	mov    DWORD PTR [edx*8-0x3ffcdbbc],esi
c002003d:	89 3c d5 48 24 03 c0 	mov    DWORD PTR [edx*8-0x3ffcdbb8],edi
c0020044:	58                   	pop    eax
c0020045:	5e                   	pop    esi
c0020046:	5f                   	pop    edi
c0020047:	c3                   	ret    

c0020048 <Vm::fpuPush(unsigned long long)>:
c0020048:	a0 41 24 03 c0       	mov    al,ds:0xc0032441
c002004d:	c0 e8 03             	shr    al,0x3
c0020050:	83 e0 07             	and    eax,0x7
c0020053:	83 c0 07             	add    eax,0x7
c0020056:	88 c2                	mov    dl,al
c0020058:	83 e0 07             	and    eax,0x7
c002005b:	83 e2 07             	and    edx,0x7
c002005e:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c0020065:	8a 15 41 24 03 c0    	mov    dl,BYTE PTR ds:0xc0032441
c002006b:	83 e2 c7             	and    edx,0xffffffc7
c002006e:	09 ca                	or     edx,ecx
c0020070:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0020074:	88 15 41 24 03 c0    	mov    BYTE PTR ds:0xc0032441,dl
c002007a:	89 0c c5 48 24 03 c0 	mov    DWORD PTR [eax*8-0x3ffcdbb8],ecx
c0020081:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0020085:	89 14 c5 44 24 03 c0 	mov    DWORD PTR [eax*8-0x3ffcdbbc],edx
c002008c:	a1 84 24 03 c0       	mov    eax,ds:0xc0032484
c0020091:	83 f8 08             	cmp    eax,0x8
c0020094:	75 08                	jne    c002009e <Vm::fpuPush(unsigned long long)+0x56>
c0020096:	80 0d 40 24 03 c0 40 	or     BYTE PTR ds:0xc0032440,0x40
c002009d:	c3                   	ret    
c002009e:	40                   	inc    eax
c002009f:	a3 84 24 03 c0       	mov    ds:0xc0032484,eax
c00200a4:	c3                   	ret    

c00200a5 <Vm::fpuPop()>:
c00200a5:	8a 0d 41 24 03 c0    	mov    cl,BYTE PTR ds:0xc0032441
c00200ab:	53                   	push   ebx
c00200ac:	c0 e9 03             	shr    cl,0x3
c00200af:	8a 1d 41 24 03 c0    	mov    bl,BYTE PTR ds:0xc0032441
c00200b5:	83 e1 07             	and    ecx,0x7
c00200b8:	83 e3 c7             	and    ebx,0xffffffc7
c00200bb:	8b 04 cd 44 24 03 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffcdbbc]
c00200c2:	8b 14 cd 48 24 03 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffcdbb8]
c00200c9:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c00200d0:	83 e1 38             	and    ecx,0x38
c00200d3:	09 d9                	or     ecx,ebx
c00200d5:	88 0d 41 24 03 c0    	mov    BYTE PTR ds:0xc0032441,cl
c00200db:	8b 0d 84 24 03 c0    	mov    ecx,DWORD PTR ds:0xc0032484
c00200e1:	85 c9                	test   ecx,ecx
c00200e3:	74 09                	je     c00200ee <Vm::fpuPop()+0x49>
c00200e5:	49                   	dec    ecx
c00200e6:	89 0d 84 24 03 c0    	mov    DWORD PTR ds:0xc0032484,ecx
c00200ec:	eb 07                	jmp    c00200f5 <Vm::fpuPop()+0x50>
c00200ee:	80 0d 40 24 03 c0 40 	or     BYTE PTR ds:0xc0032440,0x40
c00200f5:	5b                   	pop    ebx
c00200f6:	c3                   	ret    

c00200f7 <Vm::x87Handler(regs*)>:
c00200f7:	55                   	push   ebp
c00200f8:	57                   	push   edi
c00200f9:	56                   	push   esi
c00200fa:	53                   	push   ebx
c00200fb:	83 ec 1c             	sub    esp,0x1c
c00200fe:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0020102:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c0020107:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c002010a:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c0020112:	8d 44 24 0b          	lea    eax,[esp+0xb]
c0020116:	50                   	push   eax
c0020117:	8d 44 24 0e          	lea    eax,[esp+0xe]
c002011b:	50                   	push   eax
c002011c:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020120:	50                   	push   eax
c0020121:	53                   	push   ebx
c0020122:	e8 51 9e ff ff       	call   c0019f78 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0020127:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c002012a:	83 c4 10             	add    esp,0x10
c002012d:	89 c6                	mov    esi,eax
c002012f:	80 fa d9             	cmp    dl,0xd9
c0020132:	0f 85 52 01 00 00    	jne    c002028a <Vm::x87Handler(regs*)+0x193>
c0020138:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c002013c:	8d 50 20             	lea    edx,[eax+0x20]
c002013f:	80 fa 0e             	cmp    dl,0xe
c0020142:	0f 87 86 00 00 00    	ja     c00201ce <Vm::x87Handler(regs*)+0xd7>
c0020148:	0f b6 d2             	movzx  edx,dl
c002014b:	ff 24 95 f0 d1 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd2e10]
c0020152:	e8 e7 fc ff ff       	call   c001fe3e <Vm::fpuGet0()>
c0020157:	eb 05                	jmp    c002015e <Vm::x87Handler(regs*)+0x67>
c0020159:	e8 e5 fc ff ff       	call   c001fe43 <Vm::fpuGet1()>
c002015e:	57                   	push   edi
c002015f:	57                   	push   edi
c0020160:	52                   	push   edx
c0020161:	50                   	push   eax
c0020162:	e8 e1 fe ff ff       	call   c0020048 <Vm::fpuPush(unsigned long long)>
c0020167:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c002016b:	83 c4 10             	add    esp,0x10
c002016e:	b0 01                	mov    al,0x1
c0020170:	e9 e3 09 00 00       	jmp    c0020b58 <Vm::x87Handler(regs*)+0xa61>
c0020175:	83 ec 0c             	sub    esp,0xc
c0020178:	6a 00                	push   0x0
c002017a:	e8 3b fe ff ff       	call   c001ffba <Vm::fpuGetReg(int)>
c002017f:	59                   	pop    ecx
c0020180:	5e                   	pop    esi
c0020181:	52                   	push   edx
c0020182:	50                   	push   eax
c0020183:	e8 c2 fd ff ff       	call   c001ff4a <Vm::fpuChs(unsigned long long)>
c0020188:	eb 13                	jmp    c002019d <Vm::x87Handler(regs*)+0xa6>
c002018a:	83 ec 0c             	sub    esp,0xc
c002018d:	6a 00                	push   0x0
c002018f:	e8 26 fe ff ff       	call   c001ffba <Vm::fpuGetReg(int)>
c0020194:	5f                   	pop    edi
c0020195:	5d                   	pop    ebp
c0020196:	52                   	push   edx
c0020197:	50                   	push   eax
c0020198:	e8 a4 fd ff ff       	call   c001ff41 <Vm::fpuAbs(unsigned long long)>
c002019d:	83 c4 0c             	add    esp,0xc
c00201a0:	52                   	push   edx
c00201a1:	50                   	push   eax
c00201a2:	6a 00                	push   0x0
c00201a4:	e8 54 fe ff ff       	call   c001fffd <Vm::fpuSetReg(int, unsigned long long)>
c00201a9:	eb bc                	jmp    c0020167 <Vm::x87Handler(regs*)+0x70>
c00201ab:	e8 d3 fc ff ff       	call   c001fe83 <Vm::fpuGetLog210()>
c00201b0:	eb ac                	jmp    c002015e <Vm::x87Handler(regs*)+0x67>
c00201b2:	e8 9c fc ff ff       	call   c001fe53 <Vm::fpuGetLog2E()>
c00201b7:	eb a5                	jmp    c002015e <Vm::x87Handler(regs*)+0x67>
c00201b9:	e8 8d fc ff ff       	call   c001fe4b <Vm::fpuGetPi()>
c00201be:	eb 9e                	jmp    c002015e <Vm::x87Handler(regs*)+0x67>
c00201c0:	e8 d6 fc ff ff       	call   c001fe9b <Vm::fpuGetLog102()>
c00201c5:	eb 97                	jmp    c002015e <Vm::x87Handler(regs*)+0x67>
c00201c7:	e8 9f fc ff ff       	call   c001fe6b <Vm::fpuGetLogE2()>
c00201cc:	eb 90                	jmp    c002015e <Vm::x87Handler(regs*)+0x67>
c00201ce:	8d 50 40             	lea    edx,[eax+0x40]
c00201d1:	80 fa 07             	cmp    dl,0x7
c00201d4:	77 15                	ja     c00201eb <Vm::x87Handler(regs*)+0xf4>
c00201d6:	83 ec 0c             	sub    esp,0xc
c00201d9:	2d c0 00 00 00       	sub    eax,0xc0
c00201de:	50                   	push   eax
c00201df:	e8 d6 fd ff ff       	call   c001ffba <Vm::fpuGetReg(int)>
c00201e4:	59                   	pop    ecx
c00201e5:	5e                   	pop    esi
c00201e6:	e9 75 ff ff ff       	jmp    c0020160 <Vm::x87Handler(regs*)+0x69>
c00201eb:	8d 50 38             	lea    edx,[eax+0x38]
c00201ee:	80 fa 07             	cmp    dl,0x7
c00201f1:	77 3c                	ja     c002022f <Vm::x87Handler(regs*)+0x138>
c00201f3:	83 ec 0c             	sub    esp,0xc
c00201f6:	2d c8 00 00 00       	sub    eax,0xc8
c00201fb:	50                   	push   eax
c00201fc:	e8 b9 fd ff ff       	call   c001ffba <Vm::fpuGetReg(int)>
c0020201:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020208:	89 c6                	mov    esi,eax
c002020a:	89 d7                	mov    edi,edx
c002020c:	e8 a9 fd ff ff       	call   c001ffba <Vm::fpuGetReg(int)>
c0020211:	83 c4 0c             	add    esp,0xc
c0020214:	52                   	push   edx
c0020215:	50                   	push   eax
c0020216:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c002021a:	2d c8 00 00 00       	sub    eax,0xc8
c002021f:	50                   	push   eax
c0020220:	e8 d8 fd ff ff       	call   c001fffd <Vm::fpuSetReg(int, unsigned long long)>
c0020225:	83 c4 0c             	add    esp,0xc
c0020228:	57                   	push   edi
c0020229:	56                   	push   esi
c002022a:	e9 73 ff ff ff       	jmp    c00201a2 <Vm::x87Handler(regs*)+0xab>
c002022f:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0020233:	84 d2                	test   dl,dl
c0020235:	75 0f                	jne    c0020246 <Vm::x87Handler(regs*)+0x14f>
c0020237:	83 ec 0c             	sub    esp,0xc
c002023a:	ff 36                	push   DWORD PTR [esi]
c002023c:	e8 c8 fa ff ff       	call   c001fd09 <Vm::fpu32ToInternal(unsigned int)>
c0020241:	e9 bf 00 00 00       	jmp    c0020305 <Vm::x87Handler(regs*)+0x20e>
c0020246:	80 fa 03             	cmp    dl,0x3
c0020249:	75 13                	jne    c002025e <Vm::x87Handler(regs*)+0x167>
c002024b:	e8 55 fe ff ff       	call   c00200a5 <Vm::fpuPop()>
c0020250:	55                   	push   ebp
c0020251:	55                   	push   ebp
c0020252:	52                   	push   edx
c0020253:	50                   	push   eax
c0020254:	e8 4c fa ff ff       	call   c001fca5 <Vm::fpuInternalTo32(unsigned long long)>
c0020259:	e9 88 00 00 00       	jmp    c00202e6 <Vm::x87Handler(regs*)+0x1ef>
c002025e:	80 fa 05             	cmp    dl,0x5
c0020261:	75 0e                	jne    c0020271 <Vm::x87Handler(regs*)+0x17a>
c0020263:	66 8b 06             	mov    ax,WORD PTR [esi]
c0020266:	66 a3 42 24 03 c0    	mov    ds:0xc0032442,ax
c002026c:	e9 df 00 00 00       	jmp    c0020350 <Vm::x87Handler(regs*)+0x259>
c0020271:	31 c0                	xor    eax,eax
c0020273:	80 fa 07             	cmp    dl,0x7
c0020276:	0f 85 dc 08 00 00    	jne    c0020b58 <Vm::x87Handler(regs*)+0xa61>
c002027c:	66 a1 42 24 03 c0    	mov    ax,ds:0xc0032442
c0020282:	66 89 06             	mov    WORD PTR [esi],ax
c0020285:	e9 c6 00 00 00       	jmp    c0020350 <Vm::x87Handler(regs*)+0x259>
c002028a:	80 fa d8             	cmp    dl,0xd8
c002028d:	0f 84 c9 00 00 00    	je     c002035c <Vm::x87Handler(regs*)+0x265>
c0020293:	80 fa dc             	cmp    dl,0xdc
c0020296:	0f 84 0d 02 00 00    	je     c00204a9 <Vm::x87Handler(regs*)+0x3b2>
c002029c:	80 fa de             	cmp    dl,0xde
c002029f:	0f 84 cd 02 00 00    	je     c0020572 <Vm::x87Handler(regs*)+0x47b>
c00202a5:	80 fa dd             	cmp    dl,0xdd
c00202a8:	0f 84 5f 04 00 00    	je     c002070d <Vm::x87Handler(regs*)+0x616>
c00202ae:	80 fa da             	cmp    dl,0xda
c00202b1:	0f 84 24 05 00 00    	je     c00207db <Vm::x87Handler(regs*)+0x6e4>
c00202b7:	80 fa df             	cmp    dl,0xdf
c00202ba:	0f 84 68 05 00 00    	je     c0020828 <Vm::x87Handler(regs*)+0x731>
c00202c0:	31 c0                	xor    eax,eax
c00202c2:	80 fa db             	cmp    dl,0xdb
c00202c5:	0f 85 8d 08 00 00    	jne    c0020b58 <Vm::x87Handler(regs*)+0xa61>
c00202cb:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c00202cf:	80 fa 03             	cmp    dl,0x3
c00202d2:	0f 85 70 06 00 00    	jne    c0020948 <Vm::x87Handler(regs*)+0x851>
c00202d8:	e8 c8 fd ff ff       	call   c00200a5 <Vm::fpuPop()>
c00202dd:	55                   	push   ebp
c00202de:	55                   	push   ebp
c00202df:	52                   	push   edx
c00202e0:	50                   	push   eax
c00202e1:	e8 71 fa ff ff       	call   c001fd57 <Vm::fpuFloatToLong(unsigned long long)>
c00202e6:	83 c4 10             	add    esp,0x10
c00202e9:	89 06                	mov    DWORD PTR [esi],eax
c00202eb:	eb 63                	jmp    c0020350 <Vm::x87Handler(regs*)+0x259>
c00202ed:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c00202f1:	84 d2                	test   dl,dl
c00202f3:	0f 85 e6 05 00 00    	jne    c00208df <Vm::x87Handler(regs*)+0x7e8>
c00202f9:	57                   	push   edi
c00202fa:	57                   	push   edi
c00202fb:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00202fe:	ff 36                	push   DWORD PTR [esi]
c0020300:	e8 49 fa ff ff       	call   c001fd4e <Vm::fpu64ToInternal(unsigned long long)>
c0020305:	5e                   	pop    esi
c0020306:	5f                   	pop    edi
c0020307:	52                   	push   edx
c0020308:	50                   	push   eax
c0020309:	e8 3a fd ff ff       	call   c0020048 <Vm::fpuPush(unsigned long long)>
c002030e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020312:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c0020315:	e9 51 fe ff ff       	jmp    c002016b <Vm::x87Handler(regs*)+0x74>
c002031a:	80 fa 03             	cmp    dl,0x3
c002031d:	0f 85 d7 06 00 00    	jne    c00209fa <Vm::x87Handler(regs*)+0x903>
c0020323:	57                   	push   edi
c0020324:	57                   	push   edi
c0020325:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020328:	ff 36                	push   DWORD PTR [esi]
c002032a:	e8 1f fa ff ff       	call   c001fd4e <Vm::fpu64ToInternal(unsigned long long)>
c002032f:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020336:	89 c6                	mov    esi,eax
c0020338:	89 d7                	mov    edi,edx
c002033a:	e8 7b fc ff ff       	call   c001ffba <Vm::fpuGetReg(int)>
c002033f:	57                   	push   edi
c0020340:	56                   	push   esi
c0020341:	52                   	push   edx
c0020342:	50                   	push   eax
c0020343:	e8 95 fb ff ff       	call   c001fedd <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0020348:	83 c4 20             	add    esp,0x20
c002034b:	e8 55 fd ff ff       	call   c00200a5 <Vm::fpuPop()>
c0020350:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020354:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c0020357:	e9 12 fe ff ff       	jmp    c002016e <Vm::x87Handler(regs*)+0x77>
c002035c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020360:	8d 50 40             	lea    edx,[eax+0x40]
c0020363:	80 fa 07             	cmp    dl,0x7
c0020366:	77 29                	ja     c0020391 <Vm::x87Handler(regs*)+0x29a>
c0020368:	83 ec 0c             	sub    esp,0xc
c002036b:	2d c0 00 00 00       	sub    eax,0xc0
c0020370:	50                   	push   eax
c0020371:	e8 44 fc ff ff       	call   c001ffba <Vm::fpuGetReg(int)>
c0020376:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002037d:	89 c6                	mov    esi,eax
c002037f:	89 d7                	mov    edi,edx
c0020381:	e8 34 fc ff ff       	call   c001ffba <Vm::fpuGetReg(int)>
c0020386:	57                   	push   edi
c0020387:	56                   	push   esi
c0020388:	52                   	push   edx
c0020389:	50                   	push   eax
c002038a:	e8 a1 fb ff ff       	call   c001ff30 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c002038f:	eb 2f                	jmp    c00203c0 <Vm::x87Handler(regs*)+0x2c9>
c0020391:	8d 50 38             	lea    edx,[eax+0x38]
c0020394:	80 fa 07             	cmp    dl,0x7
c0020397:	77 2f                	ja     c00203c8 <Vm::x87Handler(regs*)+0x2d1>
c0020399:	83 ec 0c             	sub    esp,0xc
c002039c:	2d c8 00 00 00       	sub    eax,0xc8
c00203a1:	50                   	push   eax
c00203a2:	e8 13 fc ff ff       	call   c001ffba <Vm::fpuGetReg(int)>
c00203a7:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00203ae:	89 c6                	mov    esi,eax
c00203b0:	89 d7                	mov    edi,edx
c00203b2:	e8 03 fc ff ff       	call   c001ffba <Vm::fpuGetReg(int)>
c00203b7:	57                   	push   edi
c00203b8:	56                   	push   esi
c00203b9:	52                   	push   edx
c00203ba:	50                   	push   eax
c00203bb:	e8 a9 fb ff ff       	call   c001ff69 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c00203c0:	83 c4 1c             	add    esp,0x1c
c00203c3:	e9 d8 fd ff ff       	jmp    c00201a0 <Vm::x87Handler(regs*)+0xa9>
c00203c8:	8d 50 30             	lea    edx,[eax+0x30]
c00203cb:	80 fa 07             	cmp    dl,0x7
c00203ce:	77 0d                	ja     c00203dd <Vm::x87Handler(regs*)+0x2e6>
c00203d0:	83 ec 0c             	sub    esp,0xc
c00203d3:	2d d0 00 00 00       	sub    eax,0xd0
c00203d8:	e9 99 03 00 00       	jmp    c0020776 <Vm::x87Handler(regs*)+0x67f>
c00203dd:	8d 50 28             	lea    edx,[eax+0x28]
c00203e0:	80 fa 07             	cmp    dl,0x7
c00203e3:	77 0d                	ja     c00203f2 <Vm::x87Handler(regs*)+0x2fb>
c00203e5:	83 ec 0c             	sub    esp,0xc
c00203e8:	2d d8 00 00 00       	sub    eax,0xd8
c00203ed:	e9 c0 03 00 00       	jmp    c00207b2 <Vm::x87Handler(regs*)+0x6bb>
c00203f2:	8d 50 20             	lea    edx,[eax+0x20]
c00203f5:	80 fa 07             	cmp    dl,0x7
c00203f8:	77 1b                	ja     c0020415 <Vm::x87Handler(regs*)+0x31e>
c00203fa:	83 ec 0c             	sub    esp,0xc
c00203fd:	2d e0 00 00 00       	sub    eax,0xe0
c0020402:	50                   	push   eax
c0020403:	e8 b2 fb ff ff       	call   c001ffba <Vm::fpuGetReg(int)>
c0020408:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002040f:	89 c6                	mov    esi,eax
c0020411:	89 d7                	mov    edi,edx
c0020413:	eb 22                	jmp    c0020437 <Vm::x87Handler(regs*)+0x340>
c0020415:	8d 50 18             	lea    edx,[eax+0x18]
c0020418:	80 fa 07             	cmp    dl,0x7
c002041b:	77 2d                	ja     c002044a <Vm::x87Handler(regs*)+0x353>
c002041d:	83 ec 0c             	sub    esp,0xc
c0020420:	6a 00                	push   0x0
c0020422:	e8 93 fb ff ff       	call   c001ffba <Vm::fpuGetReg(int)>
c0020427:	89 c6                	mov    esi,eax
c0020429:	89 d7                	mov    edi,edx
c002042b:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c002042f:	2d e8 00 00 00       	sub    eax,0xe8
c0020434:	89 04 24             	mov    DWORD PTR [esp],eax
c0020437:	e8 7e fb ff ff       	call   c001ffba <Vm::fpuGetReg(int)>
c002043c:	57                   	push   edi
c002043d:	56                   	push   esi
c002043e:	52                   	push   edx
c002043f:	50                   	push   eax
c0020440:	e8 15 fb ff ff       	call   c001ff5a <Vm::fpuSub(unsigned long long, unsigned long long)>
c0020445:	e9 76 ff ff ff       	jmp    c00203c0 <Vm::x87Handler(regs*)+0x2c9>
c002044a:	8d 50 10             	lea    edx,[eax+0x10]
c002044d:	80 fa 07             	cmp    dl,0x7
c0020450:	77 1b                	ja     c002046d <Vm::x87Handler(regs*)+0x376>
c0020452:	83 ec 0c             	sub    esp,0xc
c0020455:	2d f0 00 00 00       	sub    eax,0xf0
c002045a:	50                   	push   eax
c002045b:	e8 5a fb ff ff       	call   c001ffba <Vm::fpuGetReg(int)>
c0020460:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020467:	89 c6                	mov    esi,eax
c0020469:	89 d7                	mov    edi,edx
c002046b:	eb 22                	jmp    c002048f <Vm::x87Handler(regs*)+0x398>
c002046d:	3c f7                	cmp    al,0xf7
c002046f:	0f 86 d1 03 00 00    	jbe    c0020846 <Vm::x87Handler(regs*)+0x74f>
c0020475:	83 ec 0c             	sub    esp,0xc
c0020478:	6a 00                	push   0x0
c002047a:	e8 3b fb ff ff       	call   c001ffba <Vm::fpuGetReg(int)>
c002047f:	89 c6                	mov    esi,eax
c0020481:	89 d7                	mov    edi,edx
c0020483:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020487:	2d f8 00 00 00       	sub    eax,0xf8
c002048c:	89 04 24             	mov    DWORD PTR [esp],eax
c002048f:	e8 26 fb ff ff       	call   c001ffba <Vm::fpuGetReg(int)>
c0020494:	57                   	push   edi
c0020495:	56                   	push   esi
c0020496:	52                   	push   edx
c0020497:	50                   	push   eax
c0020498:	e8 eb fa ff ff       	call   c001ff88 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c002049d:	83 c4 1c             	add    esp,0x1c
c00204a0:	52                   	push   edx
c00204a1:	50                   	push   eax
c00204a2:	6a 00                	push   0x0
c00204a4:	e9 51 02 00 00       	jmp    c00206fa <Vm::x87Handler(regs*)+0x603>
c00204a9:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00204ad:	8d 50 40             	lea    edx,[eax+0x40]
c00204b0:	80 fa 07             	cmp    dl,0x7
c00204b3:	77 37                	ja     c00204ec <Vm::x87Handler(regs*)+0x3f5>
c00204b5:	83 ec 0c             	sub    esp,0xc
c00204b8:	2d c0 00 00 00       	sub    eax,0xc0
c00204bd:	50                   	push   eax
c00204be:	e8 f7 fa ff ff       	call   c001ffba <Vm::fpuGetReg(int)>
c00204c3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00204ca:	89 c6                	mov    esi,eax
c00204cc:	89 d7                	mov    edi,edx
c00204ce:	e8 e7 fa ff ff       	call   c001ffba <Vm::fpuGetReg(int)>
c00204d3:	57                   	push   edi
c00204d4:	56                   	push   esi
c00204d5:	52                   	push   edx
c00204d6:	50                   	push   eax
c00204d7:	e8 54 fa ff ff       	call   c001ff30 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c00204dc:	83 c4 1c             	add    esp,0x1c
c00204df:	52                   	push   edx
c00204e0:	50                   	push   eax
c00204e1:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00204e5:	2d c0 00 00 00       	sub    eax,0xc0
c00204ea:	eb 3d                	jmp    c0020529 <Vm::x87Handler(regs*)+0x432>
c00204ec:	8d 50 38             	lea    edx,[eax+0x38]
c00204ef:	80 fa 07             	cmp    dl,0x7
c00204f2:	77 3b                	ja     c002052f <Vm::x87Handler(regs*)+0x438>
c00204f4:	83 ec 0c             	sub    esp,0xc
c00204f7:	2d c8 00 00 00       	sub    eax,0xc8
c00204fc:	50                   	push   eax
c00204fd:	e8 b8 fa ff ff       	call   c001ffba <Vm::fpuGetReg(int)>
c0020502:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020509:	89 c6                	mov    esi,eax
c002050b:	89 d7                	mov    edi,edx
c002050d:	e8 a8 fa ff ff       	call   c001ffba <Vm::fpuGetReg(int)>
c0020512:	57                   	push   edi
c0020513:	56                   	push   esi
c0020514:	52                   	push   edx
c0020515:	50                   	push   eax
c0020516:	e8 4e fa ff ff       	call   c001ff69 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c002051b:	83 c4 1c             	add    esp,0x1c
c002051e:	52                   	push   edx
c002051f:	50                   	push   eax
c0020520:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020524:	2d c8 00 00 00       	sub    eax,0xc8
c0020529:	50                   	push   eax
c002052a:	e9 75 fc ff ff       	jmp    c00201a4 <Vm::x87Handler(regs*)+0xad>
c002052f:	83 c0 18             	add    eax,0x18
c0020532:	3c 07                	cmp    al,0x7
c0020534:	0f 87 3b 04 00 00    	ja     c0020975 <Vm::x87Handler(regs*)+0x87e>
c002053a:	83 ec 0c             	sub    esp,0xc
c002053d:	6a 00                	push   0x0
c002053f:	e8 76 fa ff ff       	call   c001ffba <Vm::fpuGetReg(int)>
c0020544:	89 c6                	mov    esi,eax
c0020546:	89 d7                	mov    edi,edx
c0020548:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c002054c:	2d e8 00 00 00       	sub    eax,0xe8
c0020551:	89 04 24             	mov    DWORD PTR [esp],eax
c0020554:	e8 61 fa ff ff       	call   c001ffba <Vm::fpuGetReg(int)>
c0020559:	57                   	push   edi
c002055a:	56                   	push   esi
c002055b:	52                   	push   edx
c002055c:	50                   	push   eax
c002055d:	e8 f8 f9 ff ff       	call   c001ff5a <Vm::fpuSub(unsigned long long, unsigned long long)>
c0020562:	83 c4 1c             	add    esp,0x1c
c0020565:	52                   	push   edx
c0020566:	50                   	push   eax
c0020567:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c002056b:	2d e8 00 00 00       	sub    eax,0xe8
c0020570:	eb b7                	jmp    c0020529 <Vm::x87Handler(regs*)+0x432>
c0020572:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020576:	8d 50 40             	lea    edx,[eax+0x40]
c0020579:	80 fa 07             	cmp    dl,0x7
c002057c:	77 3a                	ja     c00205b8 <Vm::x87Handler(regs*)+0x4c1>
c002057e:	83 ec 0c             	sub    esp,0xc
c0020581:	2d c0 00 00 00       	sub    eax,0xc0
c0020586:	50                   	push   eax
c0020587:	e8 2e fa ff ff       	call   c001ffba <Vm::fpuGetReg(int)>
c002058c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020593:	89 c6                	mov    esi,eax
c0020595:	89 d7                	mov    edi,edx
c0020597:	e8 1e fa ff ff       	call   c001ffba <Vm::fpuGetReg(int)>
c002059c:	57                   	push   edi
c002059d:	56                   	push   esi
c002059e:	52                   	push   edx
c002059f:	50                   	push   eax
c00205a0:	e8 8b f9 ff ff       	call   c001ff30 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c00205a5:	83 c4 1c             	add    esp,0x1c
c00205a8:	52                   	push   edx
c00205a9:	50                   	push   eax
c00205aa:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00205ae:	2d c0 00 00 00       	sub    eax,0xc0
c00205b3:	e9 9e 01 00 00       	jmp    c0020756 <Vm::x87Handler(regs*)+0x65f>
c00205b8:	8d 50 20             	lea    edx,[eax+0x20]
c00205bb:	80 fa 07             	cmp    dl,0x7
c00205be:	77 3a                	ja     c00205fa <Vm::x87Handler(regs*)+0x503>
c00205c0:	83 ec 0c             	sub    esp,0xc
c00205c3:	2d e0 00 00 00       	sub    eax,0xe0
c00205c8:	50                   	push   eax
c00205c9:	e8 ec f9 ff ff       	call   c001ffba <Vm::fpuGetReg(int)>
c00205ce:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00205d5:	89 c6                	mov    esi,eax
c00205d7:	89 d7                	mov    edi,edx
c00205d9:	e8 dc f9 ff ff       	call   c001ffba <Vm::fpuGetReg(int)>
c00205de:	57                   	push   edi
c00205df:	56                   	push   esi
c00205e0:	52                   	push   edx
c00205e1:	50                   	push   eax
c00205e2:	e8 73 f9 ff ff       	call   c001ff5a <Vm::fpuSub(unsigned long long, unsigned long long)>
c00205e7:	83 c4 1c             	add    esp,0x1c
c00205ea:	52                   	push   edx
c00205eb:	50                   	push   eax
c00205ec:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00205f0:	2d e0 00 00 00       	sub    eax,0xe0
c00205f5:	e9 5c 01 00 00       	jmp    c0020756 <Vm::x87Handler(regs*)+0x65f>
c00205fa:	8d 50 18             	lea    edx,[eax+0x18]
c00205fd:	80 fa 07             	cmp    dl,0x7
c0020600:	77 3b                	ja     c002063d <Vm::x87Handler(regs*)+0x546>
c0020602:	83 ec 0c             	sub    esp,0xc
c0020605:	6a 00                	push   0x0
c0020607:	e8 ae f9 ff ff       	call   c001ffba <Vm::fpuGetReg(int)>
c002060c:	89 c6                	mov    esi,eax
c002060e:	89 d7                	mov    edi,edx
c0020610:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020614:	2d e8 00 00 00       	sub    eax,0xe8
c0020619:	89 04 24             	mov    DWORD PTR [esp],eax
c002061c:	e8 99 f9 ff ff       	call   c001ffba <Vm::fpuGetReg(int)>
c0020621:	57                   	push   edi
c0020622:	56                   	push   esi
c0020623:	52                   	push   edx
c0020624:	50                   	push   eax
c0020625:	e8 30 f9 ff ff       	call   c001ff5a <Vm::fpuSub(unsigned long long, unsigned long long)>
c002062a:	83 c4 1c             	add    esp,0x1c
c002062d:	52                   	push   edx
c002062e:	50                   	push   eax
c002062f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020633:	2d e8 00 00 00       	sub    eax,0xe8
c0020638:	e9 19 01 00 00       	jmp    c0020756 <Vm::x87Handler(regs*)+0x65f>
c002063d:	8d 50 38             	lea    edx,[eax+0x38]
c0020640:	80 fa 07             	cmp    dl,0x7
c0020643:	77 37                	ja     c002067c <Vm::x87Handler(regs*)+0x585>
c0020645:	83 ec 0c             	sub    esp,0xc
c0020648:	2d c8 00 00 00       	sub    eax,0xc8
c002064d:	50                   	push   eax
c002064e:	e8 67 f9 ff ff       	call   c001ffba <Vm::fpuGetReg(int)>
c0020653:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002065a:	89 c6                	mov    esi,eax
c002065c:	89 d7                	mov    edi,edx
c002065e:	e8 57 f9 ff ff       	call   c001ffba <Vm::fpuGetReg(int)>
c0020663:	57                   	push   edi
c0020664:	56                   	push   esi
c0020665:	52                   	push   edx
c0020666:	50                   	push   eax
c0020667:	e8 fd f8 ff ff       	call   c001ff69 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c002066c:	83 c4 1c             	add    esp,0x1c
c002066f:	52                   	push   edx
c0020670:	50                   	push   eax
c0020671:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020675:	2d c8 00 00 00       	sub    eax,0xc8
c002067a:	eb 7d                	jmp    c00206f9 <Vm::x87Handler(regs*)+0x602>
c002067c:	3c f7                	cmp    al,0xf7
c002067e:	76 38                	jbe    c00206b8 <Vm::x87Handler(regs*)+0x5c1>
c0020680:	83 ec 0c             	sub    esp,0xc
c0020683:	6a 00                	push   0x0
c0020685:	e8 30 f9 ff ff       	call   c001ffba <Vm::fpuGetReg(int)>
c002068a:	89 c6                	mov    esi,eax
c002068c:	89 d7                	mov    edi,edx
c002068e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020692:	2d f8 00 00 00       	sub    eax,0xf8
c0020697:	89 04 24             	mov    DWORD PTR [esp],eax
c002069a:	e8 1b f9 ff ff       	call   c001ffba <Vm::fpuGetReg(int)>
c002069f:	57                   	push   edi
c00206a0:	56                   	push   esi
c00206a1:	52                   	push   edx
c00206a2:	50                   	push   eax
c00206a3:	e8 e0 f8 ff ff       	call   c001ff88 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c00206a8:	83 c4 1c             	add    esp,0x1c
c00206ab:	52                   	push   edx
c00206ac:	50                   	push   eax
c00206ad:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00206b1:	2d f8 00 00 00       	sub    eax,0xf8
c00206b6:	eb 41                	jmp    c00206f9 <Vm::x87Handler(regs*)+0x602>
c00206b8:	8d 50 10             	lea    edx,[eax+0x10]
c00206bb:	80 fa 07             	cmp    dl,0x7
c00206be:	0f 87 5a 01 00 00    	ja     c002081e <Vm::x87Handler(regs*)+0x727>
c00206c4:	83 ec 0c             	sub    esp,0xc
c00206c7:	2d f0 00 00 00       	sub    eax,0xf0
c00206cc:	50                   	push   eax
c00206cd:	e8 e8 f8 ff ff       	call   c001ffba <Vm::fpuGetReg(int)>
c00206d2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00206d9:	89 c6                	mov    esi,eax
c00206db:	89 d7                	mov    edi,edx
c00206dd:	e8 d8 f8 ff ff       	call   c001ffba <Vm::fpuGetReg(int)>
c00206e2:	57                   	push   edi
c00206e3:	56                   	push   esi
c00206e4:	52                   	push   edx
c00206e5:	50                   	push   eax
c00206e6:	e8 9d f8 ff ff       	call   c001ff88 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c00206eb:	83 c4 1c             	add    esp,0x1c
c00206ee:	52                   	push   edx
c00206ef:	50                   	push   eax
c00206f0:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00206f4:	2d f0 00 00 00       	sub    eax,0xf0
c00206f9:	50                   	push   eax
c00206fa:	e8 fe f8 ff ff       	call   c001fffd <Vm::fpuSetReg(int, unsigned long long)>
c00206ff:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0020703:	e8 9d f9 ff ff       	call   c00200a5 <Vm::fpuPop()>
c0020708:	e9 5e fa ff ff       	jmp    c002016b <Vm::x87Handler(regs*)+0x74>
c002070d:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020711:	8d 50 30             	lea    edx,[eax+0x30]
c0020714:	80 fa 07             	cmp    dl,0x7
c0020717:	77 1d                	ja     c0020736 <Vm::x87Handler(regs*)+0x63f>
c0020719:	83 ec 0c             	sub    esp,0xc
c002071c:	6a 00                	push   0x0
c002071e:	e8 97 f8 ff ff       	call   c001ffba <Vm::fpuGetReg(int)>
c0020723:	83 c4 0c             	add    esp,0xc
c0020726:	52                   	push   edx
c0020727:	50                   	push   eax
c0020728:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c002072c:	2d d0 00 00 00       	sub    eax,0xd0
c0020731:	e9 f3 fd ff ff       	jmp    c0020529 <Vm::x87Handler(regs*)+0x432>
c0020736:	8d 50 28             	lea    edx,[eax+0x28]
c0020739:	80 fa 07             	cmp    dl,0x7
c002073c:	77 28                	ja     c0020766 <Vm::x87Handler(regs*)+0x66f>
c002073e:	83 ec 0c             	sub    esp,0xc
c0020741:	6a 00                	push   0x0
c0020743:	e8 72 f8 ff ff       	call   c001ffba <Vm::fpuGetReg(int)>
c0020748:	83 c4 0c             	add    esp,0xc
c002074b:	52                   	push   edx
c002074c:	50                   	push   eax
c002074d:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020751:	2d d8 00 00 00       	sub    eax,0xd8
c0020756:	50                   	push   eax
c0020757:	e8 a1 f8 ff ff       	call   c001fffd <Vm::fpuSetReg(int, unsigned long long)>
c002075c:	e8 44 f9 ff ff       	call   c00200a5 <Vm::fpuPop()>
c0020761:	e9 01 fa ff ff       	jmp    c0020167 <Vm::x87Handler(regs*)+0x70>
c0020766:	8d 50 20             	lea    edx,[eax+0x20]
c0020769:	80 fa 07             	cmp    dl,0x7
c002076c:	77 30                	ja     c002079e <Vm::x87Handler(regs*)+0x6a7>
c002076e:	83 ec 0c             	sub    esp,0xc
c0020771:	2d e0 00 00 00       	sub    eax,0xe0
c0020776:	50                   	push   eax
c0020777:	e8 3e f8 ff ff       	call   c001ffba <Vm::fpuGetReg(int)>
c002077c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020783:	89 c6                	mov    esi,eax
c0020785:	89 d7                	mov    edi,edx
c0020787:	e8 2e f8 ff ff       	call   c001ffba <Vm::fpuGetReg(int)>
c002078c:	57                   	push   edi
c002078d:	56                   	push   esi
c002078e:	52                   	push   edx
c002078f:	50                   	push   eax
c0020790:	e8 48 f7 ff ff       	call   c001fedd <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0020795:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0020799:	e9 54 02 00 00       	jmp    c00209f2 <Vm::x87Handler(regs*)+0x8fb>
c002079e:	8d 50 18             	lea    edx,[eax+0x18]
c00207a1:	80 fa 07             	cmp    dl,0x7
c00207a4:	0f 87 43 fb ff ff    	ja     c00202ed <Vm::x87Handler(regs*)+0x1f6>
c00207aa:	83 ec 0c             	sub    esp,0xc
c00207ad:	2d e8 00 00 00       	sub    eax,0xe8
c00207b2:	50                   	push   eax
c00207b3:	e8 02 f8 ff ff       	call   c001ffba <Vm::fpuGetReg(int)>
c00207b8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00207bf:	89 c6                	mov    esi,eax
c00207c1:	89 d7                	mov    edi,edx
c00207c3:	e8 f2 f7 ff ff       	call   c001ffba <Vm::fpuGetReg(int)>
c00207c8:	57                   	push   edi
c00207c9:	56                   	push   esi
c00207ca:	52                   	push   edx
c00207cb:	50                   	push   eax
c00207cc:	e8 0c f7 ff ff       	call   c001fedd <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c00207d1:	83 c4 20             	add    esp,0x20
c00207d4:	e8 cc f8 ff ff       	call   c00200a5 <Vm::fpuPop()>
c00207d9:	eb 62                	jmp    c002083d <Vm::x87Handler(regs*)+0x746>
c00207db:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c00207df:	0f 85 0f 01 00 00    	jne    c00208f4 <Vm::x87Handler(regs*)+0x7fd>
c00207e5:	83 ec 0c             	sub    esp,0xc
c00207e8:	6a 01                	push   0x1
c00207ea:	e8 cb f7 ff ff       	call   c001ffba <Vm::fpuGetReg(int)>
c00207ef:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00207f6:	89 c6                	mov    esi,eax
c00207f8:	89 d7                	mov    edi,edx
c00207fa:	e8 bb f7 ff ff       	call   c001ffba <Vm::fpuGetReg(int)>
c00207ff:	57                   	push   edi
c0020800:	56                   	push   esi
c0020801:	52                   	push   edx
c0020802:	50                   	push   eax
c0020803:	e8 d5 f6 ff ff       	call   c001fedd <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0020808:	83 c4 20             	add    esp,0x20
c002080b:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c002080f:	e8 91 f8 ff ff       	call   c00200a5 <Vm::fpuPop()>
c0020814:	e8 8c f8 ff ff       	call   c00200a5 <Vm::fpuPop()>
c0020819:	e9 50 f9 ff ff       	jmp    c002016e <Vm::x87Handler(regs*)+0x77>
c002081e:	3c d9                	cmp    al,0xd9
c0020820:	0f 85 b5 02 00 00    	jne    c0020adb <Vm::x87Handler(regs*)+0x9e4>
c0020826:	eb bd                	jmp    c00207e5 <Vm::x87Handler(regs*)+0x6ee>
c0020828:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c002082c:	0f 85 ea 02 00 00    	jne    c0020b1c <Vm::x87Handler(regs*)+0xa25>
c0020832:	0f b7 05 40 24 03 c0 	movzx  eax,WORD PTR ds:0xc0032440
c0020839:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c002083d:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0020841:	e9 28 f9 ff ff       	jmp    c002016e <Vm::x87Handler(regs*)+0x77>
c0020846:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c002084a:	84 d2                	test   dl,dl
c002084c:	75 0f                	jne    c002085d <Vm::x87Handler(regs*)+0x766>
c002084e:	83 ec 0c             	sub    esp,0xc
c0020851:	ff 36                	push   DWORD PTR [esi]
c0020853:	e8 b1 f4 ff ff       	call   c001fd09 <Vm::fpu32ToInternal(unsigned int)>
c0020858:	e9 2c 01 00 00       	jmp    c0020989 <Vm::x87Handler(regs*)+0x892>
c002085d:	80 fa 01             	cmp    dl,0x1
c0020860:	75 0f                	jne    c0020871 <Vm::x87Handler(regs*)+0x77a>
c0020862:	83 ec 0c             	sub    esp,0xc
c0020865:	ff 36                	push   DWORD PTR [esi]
c0020867:	e8 9d f4 ff ff       	call   c001fd09 <Vm::fpu32ToInternal(unsigned int)>
c002086c:	e9 81 02 00 00       	jmp    c0020af2 <Vm::x87Handler(regs*)+0x9fb>
c0020871:	80 fa 04             	cmp    dl,0x4
c0020874:	75 0f                	jne    c0020885 <Vm::x87Handler(regs*)+0x78e>
c0020876:	83 ec 0c             	sub    esp,0xc
c0020879:	ff 36                	push   DWORD PTR [esi]
c002087b:	e8 89 f4 ff ff       	call   c001fd09 <Vm::fpu32ToInternal(unsigned int)>
c0020880:	e9 86 01 00 00       	jmp    c0020a0b <Vm::x87Handler(regs*)+0x914>
c0020885:	80 fa 05             	cmp    dl,0x5
c0020888:	75 1b                	jne    c00208a5 <Vm::x87Handler(regs*)+0x7ae>
c002088a:	83 ec 0c             	sub    esp,0xc
c002088d:	6a 00                	push   0x0
c002088f:	e8 26 f7 ff ff       	call   c001ffba <Vm::fpuGetReg(int)>
c0020894:	89 c7                	mov    edi,eax
c0020896:	89 d5                	mov    ebp,edx
c0020898:	58                   	pop    eax
c0020899:	ff 36                	push   DWORD PTR [esi]
c002089b:	e8 69 f4 ff ff       	call   c001fd09 <Vm::fpu32ToInternal(unsigned int)>
c00208a0:	e9 a3 01 00 00       	jmp    c0020a48 <Vm::x87Handler(regs*)+0x951>
c00208a5:	80 fa 06             	cmp    dl,0x6
c00208a8:	75 0f                	jne    c00208b9 <Vm::x87Handler(regs*)+0x7c2>
c00208aa:	83 ec 0c             	sub    esp,0xc
c00208ad:	ff 36                	push   DWORD PTR [esi]
c00208af:	e8 55 f4 ff ff       	call   c001fd09 <Vm::fpu32ToInternal(unsigned int)>
c00208b4:	e9 ae 01 00 00       	jmp    c0020a67 <Vm::x87Handler(regs*)+0x970>
c00208b9:	31 c0                	xor    eax,eax
c00208bb:	80 fa 07             	cmp    dl,0x7
c00208be:	0f 85 94 02 00 00    	jne    c0020b58 <Vm::x87Handler(regs*)+0xa61>
c00208c4:	83 ec 0c             	sub    esp,0xc
c00208c7:	6a 00                	push   0x0
c00208c9:	e8 ec f6 ff ff       	call   c001ffba <Vm::fpuGetReg(int)>
c00208ce:	89 c7                	mov    edi,eax
c00208d0:	89 d5                	mov    ebp,edx
c00208d2:	58                   	pop    eax
c00208d3:	ff 36                	push   DWORD PTR [esi]
c00208d5:	e8 2f f4 ff ff       	call   c001fd09 <Vm::fpu32ToInternal(unsigned int)>
c00208da:	e9 cb 01 00 00       	jmp    c0020aaa <Vm::x87Handler(regs*)+0x9b3>
c00208df:	80 fa 03             	cmp    dl,0x3
c00208e2:	0f 85 d3 01 00 00    	jne    c0020abb <Vm::x87Handler(regs*)+0x9c4>
c00208e8:	e8 b8 f7 ff ff       	call   c00200a5 <Vm::fpuPop()>
c00208ed:	51                   	push   ecx
c00208ee:	51                   	push   ecx
c00208ef:	e9 de 01 00 00       	jmp    c0020ad2 <Vm::x87Handler(regs*)+0x9db>
c00208f4:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c00208f8:	80 fa 01             	cmp    dl,0x1
c00208fb:	75 09                	jne    c0020906 <Vm::x87Handler(regs*)+0x80f>
c00208fd:	57                   	push   edi
c00208fe:	57                   	push   edi
c00208ff:	8b 06                	mov    eax,DWORD PTR [esi]
c0020901:	e9 e3 01 00 00       	jmp    c0020ae9 <Vm::x87Handler(regs*)+0x9f2>
c0020906:	80 fa 04             	cmp    dl,0x4
c0020909:	75 12                	jne    c002091d <Vm::x87Handler(regs*)+0x826>
c002090b:	31 d2                	xor    edx,edx
c002090d:	51                   	push   ecx
c002090e:	51                   	push   ecx
c002090f:	8b 06                	mov    eax,DWORD PTR [esi]
c0020911:	52                   	push   edx
c0020912:	50                   	push   eax
c0020913:	e8 d0 f4 ff ff       	call   c001fde8 <Vm::fpuLongToFloat(long long)>
c0020918:	e9 ee 00 00 00       	jmp    c0020a0b <Vm::x87Handler(regs*)+0x914>
c002091d:	31 c0                	xor    eax,eax
c002091f:	80 fa 07             	cmp    dl,0x7
c0020922:	0f 85 30 02 00 00    	jne    c0020b58 <Vm::x87Handler(regs*)+0xa61>
c0020928:	83 ec 0c             	sub    esp,0xc
c002092b:	6a 00                	push   0x0
c002092d:	e8 88 f6 ff ff       	call   c001ffba <Vm::fpuGetReg(int)>
c0020932:	89 c7                	mov    edi,eax
c0020934:	89 d5                	mov    ebp,edx
c0020936:	58                   	pop    eax
c0020937:	8b 06                	mov    eax,DWORD PTR [esi]
c0020939:	5a                   	pop    edx
c002093a:	31 d2                	xor    edx,edx
c002093c:	52                   	push   edx
c002093d:	50                   	push   eax
c002093e:	e8 a5 f4 ff ff       	call   c001fde8 <Vm::fpuLongToFloat(long long)>
c0020943:	e9 62 01 00 00       	jmp    c0020aaa <Vm::x87Handler(regs*)+0x9b3>
c0020948:	84 d2                	test   dl,dl
c002094a:	75 0d                	jne    c0020959 <Vm::x87Handler(regs*)+0x862>
c002094c:	31 d2                	xor    edx,edx
c002094e:	55                   	push   ebp
c002094f:	55                   	push   ebp
c0020950:	8b 06                	mov    eax,DWORD PTR [esi]
c0020952:	52                   	push   edx
c0020953:	50                   	push   eax
c0020954:	e9 d3 01 00 00       	jmp    c0020b2c <Vm::x87Handler(regs*)+0xa35>
c0020959:	31 c0                	xor    eax,eax
c002095b:	80 fa 02             	cmp    dl,0x2
c002095e:	0f 85 f4 01 00 00    	jne    c0020b58 <Vm::x87Handler(regs*)+0xa61>
c0020964:	83 ec 0c             	sub    esp,0xc
c0020967:	6a 00                	push   0x0
c0020969:	e8 4c f6 ff ff       	call   c001ffba <Vm::fpuGetReg(int)>
c002096e:	59                   	pop    ecx
c002096f:	5f                   	pop    edi
c0020970:	e9 6a f9 ff ff       	jmp    c00202df <Vm::x87Handler(regs*)+0x1e8>
c0020975:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0020979:	84 d2                	test   dl,dl
c002097b:	75 2a                	jne    c00209a7 <Vm::x87Handler(regs*)+0x8b0>
c002097d:	50                   	push   eax
c002097e:	50                   	push   eax
c002097f:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020982:	ff 36                	push   DWORD PTR [esi]
c0020984:	e8 c5 f3 ff ff       	call   c001fd4e <Vm::fpu64ToInternal(unsigned long long)>
c0020989:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020990:	89 c6                	mov    esi,eax
c0020992:	89 d7                	mov    edi,edx
c0020994:	e8 21 f6 ff ff       	call   c001ffba <Vm::fpuGetReg(int)>
c0020999:	57                   	push   edi
c002099a:	56                   	push   esi
c002099b:	52                   	push   edx
c002099c:	50                   	push   eax
c002099d:	e8 8e f5 ff ff       	call   c001ff30 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c00209a2:	e9 64 01 00 00       	jmp    c0020b0b <Vm::x87Handler(regs*)+0xa14>
c00209a7:	80 fa 01             	cmp    dl,0x1
c00209aa:	75 11                	jne    c00209bd <Vm::x87Handler(regs*)+0x8c6>
c00209ac:	50                   	push   eax
c00209ad:	50                   	push   eax
c00209ae:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00209b1:	ff 36                	push   DWORD PTR [esi]
c00209b3:	e8 96 f3 ff ff       	call   c001fd4e <Vm::fpu64ToInternal(unsigned long long)>
c00209b8:	e9 35 01 00 00       	jmp    c0020af2 <Vm::x87Handler(regs*)+0x9fb>
c00209bd:	80 fa 02             	cmp    dl,0x2
c00209c0:	0f 85 54 f9 ff ff    	jne    c002031a <Vm::x87Handler(regs*)+0x223>
c00209c6:	55                   	push   ebp
c00209c7:	55                   	push   ebp
c00209c8:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00209cb:	ff 36                	push   DWORD PTR [esi]
c00209cd:	e8 7c f3 ff ff       	call   c001fd4e <Vm::fpu64ToInternal(unsigned long long)>
c00209d2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00209d9:	89 c6                	mov    esi,eax
c00209db:	89 d7                	mov    edi,edx
c00209dd:	e8 d8 f5 ff ff       	call   c001ffba <Vm::fpuGetReg(int)>
c00209e2:	57                   	push   edi
c00209e3:	56                   	push   esi
c00209e4:	52                   	push   edx
c00209e5:	50                   	push   eax
c00209e6:	e8 f2 f4 ff ff       	call   c001fedd <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c00209eb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00209ef:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c00209f2:	83 c4 20             	add    esp,0x20
c00209f5:	e9 74 f7 ff ff       	jmp    c002016e <Vm::x87Handler(regs*)+0x77>
c00209fa:	80 fa 04             	cmp    dl,0x4
c00209fd:	75 2a                	jne    c0020a29 <Vm::x87Handler(regs*)+0x932>
c00209ff:	51                   	push   ecx
c0020a00:	51                   	push   ecx
c0020a01:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020a04:	ff 36                	push   DWORD PTR [esi]
c0020a06:	e8 43 f3 ff ff       	call   c001fd4e <Vm::fpu64ToInternal(unsigned long long)>
c0020a0b:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020a12:	89 c6                	mov    esi,eax
c0020a14:	89 d7                	mov    edi,edx
c0020a16:	e8 9f f5 ff ff       	call   c001ffba <Vm::fpuGetReg(int)>
c0020a1b:	57                   	push   edi
c0020a1c:	56                   	push   esi
c0020a1d:	52                   	push   edx
c0020a1e:	50                   	push   eax
c0020a1f:	e8 36 f5 ff ff       	call   c001ff5a <Vm::fpuSub(unsigned long long, unsigned long long)>
c0020a24:	e9 e2 00 00 00       	jmp    c0020b0b <Vm::x87Handler(regs*)+0xa14>
c0020a29:	80 fa 05             	cmp    dl,0x5
c0020a2c:	75 28                	jne    c0020a56 <Vm::x87Handler(regs*)+0x95f>
c0020a2e:	83 ec 0c             	sub    esp,0xc
c0020a31:	6a 00                	push   0x0
c0020a33:	e8 82 f5 ff ff       	call   c001ffba <Vm::fpuGetReg(int)>
c0020a38:	89 c7                	mov    edi,eax
c0020a3a:	89 d5                	mov    ebp,edx
c0020a3c:	58                   	pop    eax
c0020a3d:	5a                   	pop    edx
c0020a3e:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020a41:	ff 36                	push   DWORD PTR [esi]
c0020a43:	e8 06 f3 ff ff       	call   c001fd4e <Vm::fpu64ToInternal(unsigned long long)>
c0020a48:	83 c4 10             	add    esp,0x10
c0020a4b:	55                   	push   ebp
c0020a4c:	57                   	push   edi
c0020a4d:	52                   	push   edx
c0020a4e:	50                   	push   eax
c0020a4f:	e8 06 f5 ff ff       	call   c001ff5a <Vm::fpuSub(unsigned long long, unsigned long long)>
c0020a54:	eb 60                	jmp    c0020ab6 <Vm::x87Handler(regs*)+0x9bf>
c0020a56:	80 fa 06             	cmp    dl,0x6
c0020a59:	75 2a                	jne    c0020a85 <Vm::x87Handler(regs*)+0x98e>
c0020a5b:	51                   	push   ecx
c0020a5c:	51                   	push   ecx
c0020a5d:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020a60:	ff 36                	push   DWORD PTR [esi]
c0020a62:	e8 e7 f2 ff ff       	call   c001fd4e <Vm::fpu64ToInternal(unsigned long long)>
c0020a67:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020a6e:	89 c6                	mov    esi,eax
c0020a70:	89 d7                	mov    edi,edx
c0020a72:	e8 43 f5 ff ff       	call   c001ffba <Vm::fpuGetReg(int)>
c0020a77:	57                   	push   edi
c0020a78:	56                   	push   esi
c0020a79:	52                   	push   edx
c0020a7a:	50                   	push   eax
c0020a7b:	e8 08 f5 ff ff       	call   c001ff88 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0020a80:	e9 86 00 00 00       	jmp    c0020b0b <Vm::x87Handler(regs*)+0xa14>
c0020a85:	31 c0                	xor    eax,eax
c0020a87:	80 fa 07             	cmp    dl,0x7
c0020a8a:	0f 85 c8 00 00 00    	jne    c0020b58 <Vm::x87Handler(regs*)+0xa61>
c0020a90:	83 ec 0c             	sub    esp,0xc
c0020a93:	6a 00                	push   0x0
c0020a95:	e8 20 f5 ff ff       	call   c001ffba <Vm::fpuGetReg(int)>
c0020a9a:	89 c7                	mov    edi,eax
c0020a9c:	89 d5                	mov    ebp,edx
c0020a9e:	58                   	pop    eax
c0020a9f:	5a                   	pop    edx
c0020aa0:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020aa3:	ff 36                	push   DWORD PTR [esi]
c0020aa5:	e8 a4 f2 ff ff       	call   c001fd4e <Vm::fpu64ToInternal(unsigned long long)>
c0020aaa:	83 c4 10             	add    esp,0x10
c0020aad:	55                   	push   ebp
c0020aae:	57                   	push   edi
c0020aaf:	52                   	push   edx
c0020ab0:	50                   	push   eax
c0020ab1:	e8 d2 f4 ff ff       	call   c001ff88 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0020ab6:	83 c4 0c             	add    esp,0xc
c0020ab9:	eb 53                	jmp    c0020b0e <Vm::x87Handler(regs*)+0xa17>
c0020abb:	31 c0                	xor    eax,eax
c0020abd:	80 fa 02             	cmp    dl,0x2
c0020ac0:	0f 85 92 00 00 00    	jne    c0020b58 <Vm::x87Handler(regs*)+0xa61>
c0020ac6:	83 ec 0c             	sub    esp,0xc
c0020ac9:	6a 00                	push   0x0
c0020acb:	e8 ea f4 ff ff       	call   c001ffba <Vm::fpuGetReg(int)>
c0020ad0:	59                   	pop    ecx
c0020ad1:	5f                   	pop    edi
c0020ad2:	52                   	push   edx
c0020ad3:	50                   	push   eax
c0020ad4:	e8 27 f2 ff ff       	call   c001fd00 <Vm::fpuInternalTo64(unsigned long long)>
c0020ad9:	eb 70                	jmp    c0020b4b <Vm::x87Handler(regs*)+0xa54>
c0020adb:	31 c0                	xor    eax,eax
c0020add:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c0020ae2:	75 74                	jne    c0020b58 <Vm::x87Handler(regs*)+0xa61>
c0020ae4:	50                   	push   eax
c0020ae5:	50                   	push   eax
c0020ae6:	0f b7 06             	movzx  eax,WORD PTR [esi]
c0020ae9:	31 d2                	xor    edx,edx
c0020aeb:	52                   	push   edx
c0020aec:	50                   	push   eax
c0020aed:	e8 f6 f2 ff ff       	call   c001fde8 <Vm::fpuLongToFloat(long long)>
c0020af2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020af9:	89 c6                	mov    esi,eax
c0020afb:	89 d7                	mov    edi,edx
c0020afd:	e8 b8 f4 ff ff       	call   c001ffba <Vm::fpuGetReg(int)>
c0020b02:	57                   	push   edi
c0020b03:	56                   	push   esi
c0020b04:	52                   	push   edx
c0020b05:	50                   	push   eax
c0020b06:	e8 5e f4 ff ff       	call   c001ff69 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c0020b0b:	83 c4 1c             	add    esp,0x1c
c0020b0e:	52                   	push   edx
c0020b0f:	50                   	push   eax
c0020b10:	6a 00                	push   0x0
c0020b12:	e8 e6 f4 ff ff       	call   c001fffd <Vm::fpuSetReg(int, unsigned long long)>
c0020b17:	e9 f2 f7 ff ff       	jmp    c002030e <Vm::x87Handler(regs*)+0x217>
c0020b1c:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0020b20:	80 fa 05             	cmp    dl,0x5
c0020b23:	75 11                	jne    c0020b36 <Vm::x87Handler(regs*)+0xa3f>
c0020b25:	55                   	push   ebp
c0020b26:	55                   	push   ebp
c0020b27:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020b2a:	ff 36                	push   DWORD PTR [esi]
c0020b2c:	e8 81 f2 ff ff       	call   c001fdb2 <Vm::fpuULongToFloat(unsigned long long)>
c0020b31:	e9 cf f7 ff ff       	jmp    c0020305 <Vm::x87Handler(regs*)+0x20e>
c0020b36:	31 c0                	xor    eax,eax
c0020b38:	80 fa 07             	cmp    dl,0x7
c0020b3b:	75 1b                	jne    c0020b58 <Vm::x87Handler(regs*)+0xa61>
c0020b3d:	e8 63 f5 ff ff       	call   c00200a5 <Vm::fpuPop()>
c0020b42:	51                   	push   ecx
c0020b43:	51                   	push   ecx
c0020b44:	52                   	push   edx
c0020b45:	50                   	push   eax
c0020b46:	e8 0c f2 ff ff       	call   c001fd57 <Vm::fpuFloatToLong(unsigned long long)>
c0020b4b:	83 c4 10             	add    esp,0x10
c0020b4e:	89 06                	mov    DWORD PTR [esi],eax
c0020b50:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c0020b53:	e9 f8 f7 ff ff       	jmp    c0020350 <Vm::x87Handler(regs*)+0x259>
c0020b58:	83 c4 1c             	add    esp,0x1c
c0020b5b:	5b                   	pop    ebx
c0020b5c:	5e                   	pop    esi
c0020b5d:	5f                   	pop    edi
c0020b5e:	5d                   	pop    ebp
c0020b5f:	c3                   	ret    

c0020b60 <__static_initialization_and_destruction_0(int, int)>:
c0020b60:	83 ec 0c             	sub    esp,0xc
c0020b63:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0020b68:	75 1a                	jne    c0020b84 <__static_initialization_and_destruction_0(int, int)+0x24>
c0020b6a:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0020b72:	75 10                	jne    c0020b84 <__static_initialization_and_destruction_0(int, int)+0x24>
c0020b74:	83 ec 0c             	sub    esp,0xc
c0020b77:	68 40 24 03 c0       	push   0xc0032440
c0020b7c:	e8 9b 8a 00 00       	call   c002961c <Vm::_FPUState::_FPUState()>
c0020b81:	83 c4 10             	add    esp,0x10
c0020b84:	90                   	nop
c0020b85:	83 c4 0c             	add    esp,0xc
c0020b88:	c3                   	ret    

c0020b89 <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c0020b89:	83 ec 0c             	sub    esp,0xc
c0020b8c:	83 ec 08             	sub    esp,0x8
c0020b8f:	68 ff ff 00 00       	push   0xffff
c0020b94:	6a 01                	push   0x1
c0020b96:	e8 c5 ff ff ff       	call   c0020b60 <__static_initialization_and_destruction_0(int, int)>
c0020b9b:	83 c4 10             	add    esp,0x10
c0020b9e:	83 c4 0c             	add    esp,0xc
c0020ba1:	c3                   	ret    

c0020ba2 <FAT::getName()>:
c0020ba2:	b8 2c d2 02 c0       	mov    eax,0xc002d22c
c0020ba7:	c3                   	ret    

c0020ba8 <FAT::tell(void*, unsigned long long*)>:
c0020ba8:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0020bad:	75 06                	jne    c0020bb5 <FAT::tell(void*, unsigned long long*)+0xd>
c0020baf:	b8 04 00 00 00       	mov    eax,0x4
c0020bb4:	c3                   	ret    
c0020bb5:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0020bba:	75 06                	jne    c0020bc2 <FAT::tell(void*, unsigned long long*)+0x1a>
c0020bbc:	b8 04 00 00 00       	mov    eax,0x4
c0020bc1:	c3                   	ret    
c0020bc2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020bc6:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c0020bc9:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0020bcc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0020bd0:	89 01                	mov    DWORD PTR [ecx],eax
c0020bd2:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020bd5:	b8 00 00 00 00       	mov    eax,0x0
c0020bda:	c3                   	ret    
c0020bdb:	90                   	nop

c0020bdc <FAT::stat(void*, unsigned long long*)>:
c0020bdc:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0020be1:	75 06                	jne    c0020be9 <FAT::stat(void*, unsigned long long*)+0xd>
c0020be3:	b8 04 00 00 00       	mov    eax,0x4
c0020be8:	c3                   	ret    
c0020be9:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0020bee:	75 06                	jne    c0020bf6 <FAT::stat(void*, unsigned long long*)+0x1a>
c0020bf0:	b8 04 00 00 00       	mov    eax,0x4
c0020bf5:	c3                   	ret    
c0020bf6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020bfa:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0020bfd:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0020c00:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0020c04:	89 01                	mov    DWORD PTR [ecx],eax
c0020c06:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020c09:	b8 00 00 00 00       	mov    eax,0x0
c0020c0e:	c3                   	ret    
c0020c0f:	90                   	nop

c0020c10 <FAT::~FAT()>:
c0020c10:	83 ec 0c             	sub    esp,0xc
c0020c13:	ba bc d2 02 c0       	mov    edx,0xc002d2bc
c0020c18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020c1c:	89 10                	mov    DWORD PTR [eax],edx
c0020c1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020c22:	83 ec 0c             	sub    esp,0xc
c0020c25:	50                   	push   eax
c0020c26:	e8 f5 25 ff ff       	call   c0013220 <Filesystem::~Filesystem()>
c0020c2b:	83 c4 10             	add    esp,0x10
c0020c2e:	90                   	nop
c0020c2f:	83 c4 0c             	add    esp,0xc
c0020c32:	c3                   	ret    
c0020c33:	90                   	nop

c0020c34 <FAT::~FAT()>:
c0020c34:	83 ec 0c             	sub    esp,0xc
c0020c37:	83 ec 0c             	sub    esp,0xc
c0020c3a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020c3e:	e8 cd ff ff ff       	call   c0020c10 <FAT::~FAT()>
c0020c43:	83 c4 10             	add    esp,0x10
c0020c46:	83 ec 08             	sub    esp,0x8
c0020c49:	6a 08                	push   0x8
c0020c4b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020c4f:	e8 bd 21 ff ff       	call   c0012e11 <operator delete(void*, unsigned long)>
c0020c54:	83 c4 10             	add    esp,0x10
c0020c57:	83 c4 0c             	add    esp,0xc
c0020c5a:	c3                   	ret    
c0020c5b:	90                   	nop

c0020c5c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0020c5c:	83 ec 1c             	sub    esp,0x1c
c0020c5f:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c0020c66:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0020c6b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020c6f:	8b 04 85 c0 24 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcdb40]
c0020c76:	83 f8 ff             	cmp    eax,0xffffffff
c0020c79:	75 34                	jne    c0020caf <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c0020c7b:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0020c7f:	88 c2                	mov    dl,al
c0020c81:	a1 a0 24 03 c0       	mov    eax,ds:0xc00324a0
c0020c86:	01 d0                	add    eax,edx
c0020c88:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0020c8c:	8b 15 a0 24 03 c0    	mov    edx,DWORD PTR ds:0xc00324a0
c0020c92:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020c96:	89 14 85 c0 24 03 c0 	mov    DWORD PTR [eax*4-0x3ffcdb40],edx
c0020c9d:	a1 a0 24 03 c0       	mov    eax,ds:0xc00324a0
c0020ca2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0020ca6:	89 14 85 40 25 03 c0 	mov    DWORD PTR [eax*4-0x3ffcdac0],edx
c0020cad:	eb 17                	jmp    c0020cc6 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c0020caf:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0020cb3:	88 c2                	mov    dl,al
c0020cb5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020cb9:	8b 04 85 c0 24 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcdb40]
c0020cc0:	01 d0                	add    eax,edx
c0020cc2:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0020cc6:	83 ec 04             	sub    esp,0x4
c0020cc9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020ccd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020cd1:	8d 44 24 15          	lea    eax,[esp+0x15]
c0020cd5:	50                   	push   eax
c0020cd6:	e8 81 60 fe ff       	call   c0006d5c <f_getlabel>
c0020cdb:	83 c4 10             	add    esp,0x10
c0020cde:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020ce2:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0020ce7:	75 07                	jne    c0020cf0 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c0020ce9:	b8 00 00 00 00       	mov    eax,0x0
c0020cee:	eb 05                	jmp    c0020cf5 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c0020cf0:	b8 01 00 00 00       	mov    eax,0x1
c0020cf5:	83 c4 1c             	add    esp,0x1c
c0020cf8:	c3                   	ret    
c0020cf9:	90                   	nop

c0020cfa <FAT::setlabel(LogicalDisk*, int, char*)>:
c0020cfa:	57                   	push   edi
c0020cfb:	83 ec 58             	sub    esp,0x58
c0020cfe:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c0020d06:	8d 54 24 10          	lea    edx,[esp+0x10]
c0020d0a:	b9 0f 00 00 00       	mov    ecx,0xf
c0020d0f:	b8 00 00 00 00       	mov    eax,0x0
c0020d14:	fc                   	cld    
c0020d15:	89 d7                	mov    edi,edx
c0020d17:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0020d19:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0020d1d:	8b 04 85 c0 24 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcdb40]
c0020d24:	83 f8 ff             	cmp    eax,0xffffffff
c0020d27:	75 34                	jne    c0020d5d <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c0020d29:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0020d2d:	88 c2                	mov    dl,al
c0020d2f:	a1 a0 24 03 c0       	mov    eax,ds:0xc00324a0
c0020d34:	01 d0                	add    eax,edx
c0020d36:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020d3a:	8b 15 a0 24 03 c0    	mov    edx,DWORD PTR ds:0xc00324a0
c0020d40:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0020d44:	89 14 85 c0 24 03 c0 	mov    DWORD PTR [eax*4-0x3ffcdb40],edx
c0020d4b:	a1 a0 24 03 c0       	mov    eax,ds:0xc00324a0
c0020d50:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c0020d54:	89 14 85 40 25 03 c0 	mov    DWORD PTR [eax*4-0x3ffcdac0],edx
c0020d5b:	eb 17                	jmp    c0020d74 <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c0020d5d:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0020d61:	88 c2                	mov    dl,al
c0020d63:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0020d67:	8b 04 85 c0 24 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcdb40]
c0020d6e:	01 d0                	add    eax,edx
c0020d70:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020d74:	83 ec 08             	sub    esp,0x8
c0020d77:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c0020d7b:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020d7f:	50                   	push   eax
c0020d80:	e8 13 fc fd ff       	call   c0000998 <strcat>
c0020d85:	83 c4 10             	add    esp,0x10
c0020d88:	83 ec 0c             	sub    esp,0xc
c0020d8b:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020d8f:	50                   	push   eax
c0020d90:	e8 b5 61 fe ff       	call   c0006f4a <f_setlabel>
c0020d95:	83 c4 10             	add    esp,0x10
c0020d98:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0020d9c:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c0020da1:	75 07                	jne    c0020daa <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c0020da3:	b8 00 00 00 00       	mov    eax,0x0
c0020da8:	eb 05                	jmp    c0020daf <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c0020daa:	b8 01 00 00 00       	mov    eax,0x1
c0020daf:	83 c4 58             	add    esp,0x58
c0020db2:	5f                   	pop    edi
c0020db3:	c3                   	ret    

c0020db4 <FAT::format(LogicalDisk*, int, char const*, int)>:
c0020db4:	83 ec 2c             	sub    esp,0x2c
c0020db7:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0020dbf:	83 ec 08             	sub    esp,0x8
c0020dc2:	68 50 d2 02 c0       	push   0xc002d250
c0020dc7:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020dcb:	e8 14 fb fd ff       	call   c00008e4 <strcmp>
c0020dd0:	83 c4 10             	add    esp,0x10
c0020dd3:	85 c0                	test   eax,eax
c0020dd5:	0f 94 c0             	sete   al
c0020dd8:	84 c0                	test   al,al
c0020dda:	74 0d                	je     c0020de9 <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c0020ddc:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0020de4:	e9 a6 00 00 00       	jmp    c0020e8f <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020de9:	83 ec 08             	sub    esp,0x8
c0020dec:	68 42 d2 02 c0       	push   0xc002d242
c0020df1:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020df5:	e8 ea fa fd ff       	call   c00008e4 <strcmp>
c0020dfa:	83 c4 10             	add    esp,0x10
c0020dfd:	85 c0                	test   eax,eax
c0020dff:	0f 94 c0             	sete   al
c0020e02:	84 c0                	test   al,al
c0020e04:	74 0a                	je     c0020e10 <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c0020e06:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0020e0e:	eb 7f                	jmp    c0020e8f <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020e10:	83 ec 08             	sub    esp,0x8
c0020e13:	68 48 d2 02 c0       	push   0xc002d248
c0020e18:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020e1c:	e8 c3 fa fd ff       	call   c00008e4 <strcmp>
c0020e21:	83 c4 10             	add    esp,0x10
c0020e24:	85 c0                	test   eax,eax
c0020e26:	0f 94 c0             	sete   al
c0020e29:	84 c0                	test   al,al
c0020e2b:	74 0a                	je     c0020e37 <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c0020e2d:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0020e35:	eb 58                	jmp    c0020e8f <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020e37:	83 ec 08             	sub    esp,0x8
c0020e3a:	68 8c 9d 02 c0       	push   0xc0029d8c
c0020e3f:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020e43:	e8 9c fa fd ff       	call   c00008e4 <strcmp>
c0020e48:	83 c4 10             	add    esp,0x10
c0020e4b:	85 c0                	test   eax,eax
c0020e4d:	0f 94 c0             	sete   al
c0020e50:	84 c0                	test   al,al
c0020e52:	74 0a                	je     c0020e5e <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c0020e54:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c0020e5c:	eb 31                	jmp    c0020e8f <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020e5e:	83 ec 08             	sub    esp,0x8
c0020e61:	68 4e d2 02 c0       	push   0xc002d24e
c0020e66:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020e6a:	e8 75 fa fd ff       	call   c00008e4 <strcmp>
c0020e6f:	83 c4 10             	add    esp,0x10
c0020e72:	85 c0                	test   eax,eax
c0020e74:	0f 94 c0             	sete   al
c0020e77:	84 c0                	test   al,al
c0020e79:	74 0a                	je     c0020e85 <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c0020e7b:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c0020e83:	eb 0a                	jmp    c0020e8f <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020e85:	b8 08 00 00 00       	mov    eax,0x8
c0020e8a:	e9 04 01 00 00       	jmp    c0020f93 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c0020e8f:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c0020e96:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0020e9b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020e9f:	8b 04 85 c0 24 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcdb40]
c0020ea6:	83 f8 ff             	cmp    eax,0xffffffff
c0020ea9:	75 34                	jne    c0020edf <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c0020eab:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0020eaf:	88 c2                	mov    dl,al
c0020eb1:	a1 a0 24 03 c0       	mov    eax,ds:0xc00324a0
c0020eb6:	01 d0                	add    eax,edx
c0020eb8:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0020ebc:	8b 15 a0 24 03 c0    	mov    edx,DWORD PTR ds:0xc00324a0
c0020ec2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020ec6:	89 14 85 c0 24 03 c0 	mov    DWORD PTR [eax*4-0x3ffcdb40],edx
c0020ecd:	a1 a0 24 03 c0       	mov    eax,ds:0xc00324a0
c0020ed2:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0020ed6:	89 14 85 40 25 03 c0 	mov    DWORD PTR [eax*4-0x3ffcdac0],edx
c0020edd:	eb 17                	jmp    c0020ef6 <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c0020edf:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0020ee3:	88 c2                	mov    dl,al
c0020ee5:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020ee9:	8b 04 85 c0 24 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcdb40]
c0020ef0:	01 d0                	add    eax,edx
c0020ef2:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0020ef6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020efa:	88 04 24             	mov    BYTE PTR [esp],al
c0020efd:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0020f01:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020f05:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0020f0d:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c0020f12:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0020f1a:	83 ec 0c             	sub    esp,0xc
c0020f1d:	68 00 20 00 00       	push   0x2000
c0020f22:	e8 0b ea fe ff       	call   c000f932 <malloc>
c0020f27:	83 c4 10             	add    esp,0x10
c0020f2a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020f2e:	68 00 20 00 00       	push   0x2000
c0020f33:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020f37:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020f3b:	50                   	push   eax
c0020f3c:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c0020f40:	50                   	push   eax
c0020f41:	e8 4f 64 fe ff       	call   c0007395 <f_mkfs>
c0020f46:	83 c4 10             	add    esp,0x10
c0020f49:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020f4d:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0020f52:	75 07                	jne    c0020f5b <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c0020f54:	b8 00 00 00 00       	mov    eax,0x0
c0020f59:	eb 38                	jmp    c0020f93 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c0020f5b:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c0020f60:	75 17                	jne    c0020f79 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c5>
c0020f62:	83 ec 0c             	sub    esp,0xc
c0020f65:	68 8c d2 02 c0       	push   0xc002d28c
c0020f6a:	e8 82 1f ff ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c0020f6f:	83 c4 10             	add    esp,0x10
c0020f72:	b8 09 00 00 00       	mov    eax,0x9
c0020f77:	eb 1a                	jmp    c0020f93 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c0020f79:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020f7d:	83 ec 08             	sub    esp,0x8
c0020f80:	50                   	push   eax
c0020f81:	68 54 d2 02 c0       	push   0xc002d254
c0020f86:	e8 66 1f ff ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c0020f8b:	83 c4 10             	add    esp,0x10
c0020f8e:	b8 01 00 00 00       	mov    eax,0x1
c0020f93:	83 c4 2c             	add    esp,0x2c
c0020f96:	c3                   	ret    
c0020f97:	90                   	nop

c0020f98 <FAT::tryMount(LogicalDisk*, int)>:
c0020f98:	81 ec 6c 03 00 00    	sub    esp,0x36c
c0020f9e:	a1 a0 24 03 c0       	mov    eax,ds:0xc00324a0
c0020fa3:	83 f8 14             	cmp    eax,0x14
c0020fa6:	75 17                	jne    c0020fbf <FAT::tryMount(LogicalDisk*, int)+0x27>
c0020fa8:	83 ec 0c             	sub    esp,0xc
c0020fab:	68 66 d2 02 c0       	push   0xc002d266
c0020fb0:	e8 fc 98 ff ff       	call   c001a8b1 <Krnl::panic(char const*)>
c0020fb5:	83 c4 10             	add    esp,0x10
c0020fb8:	b0 00                	mov    al,0x0
c0020fba:	e9 d7 01 00 00       	jmp    c0021196 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020fbf:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0020fc6:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020fcc:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0020fd2:	3d 00 02 00 00       	cmp    eax,0x200
c0020fd7:	74 07                	je     c0020fe0 <FAT::tryMount(LogicalDisk*, int)+0x48>
c0020fd9:	b0 00                	mov    al,0x0
c0020fdb:	e9 b6 01 00 00       	jmp    c0021196 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020fe0:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c0020fe8:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c0020fef:	8b 04 85 c0 24 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcdb40]
c0020ff6:	83 f8 ff             	cmp    eax,0xffffffff
c0020ff9:	74 07                	je     c0021002 <FAT::tryMount(LogicalDisk*, int)+0x6a>
c0020ffb:	b0 01                	mov    al,0x1
c0020ffd:	e9 94 01 00 00       	jmp    c0021196 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0021002:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c002100c:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c0021014:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c002101b:	88 c2                	mov    dl,al
c002101d:	a1 a0 24 03 c0       	mov    eax,ds:0xc00324a0
c0021022:	01 d0                	add    eax,edx
c0021024:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c002102b:	8b 15 a0 24 03 c0    	mov    edx,DWORD PTR ds:0xc00324a0
c0021031:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c0021038:	89 14 85 c0 24 03 c0 	mov    DWORD PTR [eax*4-0x3ffcdb40],edx
c002103f:	a1 a0 24 03 c0       	mov    eax,ds:0xc00324a0
c0021044:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c002104b:	89 14 85 40 25 03 c0 	mov    DWORD PTR [eax*4-0x3ffcdac0],edx
c0021052:	83 ec 0c             	sub    esp,0xc
c0021055:	68 54 02 00 00       	push   0x254
c002105a:	e8 d3 e8 fe ff       	call   c000f932 <malloc>
c002105f:	83 c4 10             	add    esp,0x10
c0021062:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c0021069:	83 ec 04             	sub    esp,0x4
c002106c:	6a 00                	push   0x0
c002106e:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0021075:	50                   	push   eax
c0021076:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c002107d:	e8 d1 3e fe ff       	call   c0004f53 <f_mount>
c0021082:	83 c4 10             	add    esp,0x10
c0021085:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c002108c:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c0021094:	74 19                	je     c00210af <FAT::tryMount(LogicalDisk*, int)+0x117>
c0021096:	83 ec 0c             	sub    esp,0xc
c0021099:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c00210a0:	e8 ad e8 fe ff       	call   c000f952 <rfree>
c00210a5:	83 c4 10             	add    esp,0x10
c00210a8:	b0 00                	mov    al,0x0
c00210aa:	e9 e7 00 00 00       	jmp    c0021196 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c00210af:	83 ec 04             	sub    esp,0x4
c00210b2:	68 00 01 00 00       	push   0x100
c00210b7:	6a 00                	push   0x0
c00210b9:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c00210c0:	50                   	push   eax
c00210c1:	e8 d6 f6 fd ff       	call   c000079c <memset>
c00210c6:	83 c4 10             	add    esp,0x10
c00210c9:	83 ec 08             	sub    esp,0x8
c00210cc:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c00210d3:	50                   	push   eax
c00210d4:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c00210db:	50                   	push   eax
c00210dc:	e8 b7 f8 fd ff       	call   c0000998 <strcat>
c00210e1:	83 c4 10             	add    esp,0x10
c00210e4:	83 ec 08             	sub    esp,0x8
c00210e7:	68 74 d2 02 c0       	push   0xc002d274
c00210ec:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c00210f3:	50                   	push   eax
c00210f4:	e8 9f f8 fd ff       	call   c0000998 <strcat>
c00210f9:	83 c4 10             	add    esp,0x10
c00210fc:	83 ec 04             	sub    esp,0x4
c00210ff:	6a 01                	push   0x1
c0021101:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c0021108:	50                   	push   eax
c0021109:	8d 44 24 0c          	lea    eax,[esp+0xc]
c002110d:	50                   	push   eax
c002110e:	e8 a2 3e fe ff       	call   c0004fb5 <f_open>
c0021113:	83 c4 10             	add    esp,0x10
c0021116:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c002111d:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c0021124:	85 c0                	test   eax,eax
c0021126:	74 0a                	je     c0021132 <FAT::tryMount(LogicalDisk*, int)+0x19a>
c0021128:	78 2d                	js     c0021157 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c002112a:	83 e8 04             	sub    eax,0x4
c002112d:	83 f8 01             	cmp    eax,0x1
c0021130:	77 25                	ja     c0021157 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c0021132:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c002113a:	83 ec 0c             	sub    esp,0xc
c002113d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0021141:	50                   	push   eax
c0021142:	e8 c0 49 fe ff       	call   c0005b07 <f_close>
c0021147:	83 c4 10             	add    esp,0x10
c002114a:	90                   	nop
c002114b:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c0021153:	74 3a                	je     c002118f <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c0021155:	eb 2d                	jmp    c0021184 <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c0021157:	83 ec 0c             	sub    esp,0xc
c002115a:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0021161:	e8 ec e7 fe ff       	call   c000f952 <rfree>
c0021166:	83 c4 10             	add    esp,0x10
c0021169:	83 ec 04             	sub    esp,0x4
c002116c:	6a 00                	push   0x0
c002116e:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0021175:	50                   	push   eax
c0021176:	6a 00                	push   0x0
c0021178:	e8 d6 3d fe ff       	call   c0004f53 <f_mount>
c002117d:	83 c4 10             	add    esp,0x10
c0021180:	b0 00                	mov    al,0x0
c0021182:	eb 12                	jmp    c0021196 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0021184:	a1 a0 24 03 c0       	mov    eax,ds:0xc00324a0
c0021189:	40                   	inc    eax
c002118a:	a3 a0 24 03 c0       	mov    ds:0xc00324a0,eax
c002118f:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c0021196:	81 c4 6c 03 00 00    	add    esp,0x36c
c002119c:	c3                   	ret    
c002119d:	90                   	nop

c002119e <FAT::getFileFirstSector(char const*)>:
c002119e:	53                   	push   ebx
c002119f:	83 ec 28             	sub    esp,0x28
c00211a2:	c7 44 24 10 14 01 00 00 	mov    DWORD PTR [esp+0x10],0x114
c00211aa:	83 ec 0c             	sub    esp,0xc
c00211ad:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00211b1:	e8 7c e7 fe ff       	call   c000f932 <malloc>
c00211b6:	83 c4 10             	add    esp,0x10
c00211b9:	89 c3                	mov    ebx,eax
c00211bb:	a1 d0 23 03 c0       	mov    eax,ds:0xc00323d0
c00211c0:	83 ec 04             	sub    esp,0x4
c00211c3:	50                   	push   eax
c00211c4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00211c8:	53                   	push   ebx
c00211c9:	e8 82 22 ff ff       	call   c0013450 <File::File(char const*, Process*)>
c00211ce:	83 c4 10             	add    esp,0x10
c00211d1:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c00211d5:	83 ec 08             	sub    esp,0x8
c00211d8:	6a 01                	push   0x1
c00211da:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00211de:	e8 d1 22 ff ff       	call   c00134b4 <File::open(FileOpenMode)>
c00211e3:	83 c4 10             	add    esp,0x10
c00211e6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00211ea:	8b 00                	mov    eax,DWORD PTR [eax]
c00211ec:	83 c0 0c             	add    eax,0xc
c00211ef:	8b 00                	mov    eax,DWORD PTR [eax]
c00211f1:	83 ec 0c             	sub    esp,0xc
c00211f4:	8d 54 24 14          	lea    edx,[esp+0x14]
c00211f8:	52                   	push   edx
c00211f9:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00211fd:	52                   	push   edx
c00211fe:	6a 00                	push   0x0
c0021200:	6a 04                	push   0x4
c0021202:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0021206:	ff d0                	call   eax
c0021208:	83 c4 20             	add    esp,0x20
c002120b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002120f:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0021215:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0021219:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002121d:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0021220:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0021223:	83 ec 04             	sub    esp,0x4
c0021226:	52                   	push   edx
c0021227:	50                   	push   eax
c0021228:	68 7f d2 02 c0       	push   0xc002d27f
c002122d:	e8 bf 1c ff ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c0021232:	83 c4 10             	add    esp,0x10
c0021235:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0021239:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c002123c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c002123f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0021243:	83 ec 0c             	sub    esp,0xc
c0021246:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c002124a:	e8 c3 22 ff ff       	call   c0013512 <File::close()>
c002124f:	83 c4 10             	add    esp,0x10
c0021252:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021256:	ba 00 00 00 00       	mov    edx,0x0
c002125b:	83 c4 28             	add    esp,0x28
c002125e:	5b                   	pop    ebx
c002125f:	c3                   	ret    

c0021260 <FAT::readDir(void*, unsigned long, void*, int*)>:
c0021260:	81 ec 3c 02 00 00    	sub    esp,0x23c
c0021266:	83 bc 24 44 02 00 00 00 	cmp    DWORD PTR [esp+0x244],0x0
c002126e:	74 0a                	je     c002127a <FAT::readDir(void*, unsigned long, void*, int*)+0x1a>
c0021270:	83 bc 24 50 02 00 00 00 	cmp    DWORD PTR [esp+0x250],0x0
c0021278:	75 0a                	jne    c0021284 <FAT::readDir(void*, unsigned long, void*, int*)+0x24>
c002127a:	b8 04 00 00 00       	mov    eax,0x4
c002127f:	e9 db 00 00 00       	jmp    c002135f <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c0021284:	83 ec 08             	sub    esp,0x8
c0021287:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c002128e:	50                   	push   eax
c002128f:	ff b4 24 50 02 00 00 	push   DWORD PTR [esp+0x250]
c0021296:	e8 76 4e fe ff       	call   c0006111 <f_readdir>
c002129b:	83 c4 10             	add    esp,0x10
c002129e:	89 84 24 2c 02 00 00 	mov    DWORD PTR [esp+0x22c],eax
c00212a5:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c00212ab:	83 ec 0c             	sub    esp,0xc
c00212ae:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c00212b5:	83 c0 1a             	add    eax,0x1a
c00212b8:	50                   	push   eax
c00212b9:	e8 fa f4 fd ff       	call   c00007b8 <strlen>
c00212be:	83 c4 10             	add    esp,0x10
c00212c1:	ba 00 00 00 00       	mov    edx,0x0
c00212c6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00212ca:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00212ce:	8a 84 24 1c 01 00 00 	mov    al,BYTE PTR [esp+0x11c]
c00212d5:	0f b6 c0             	movzx  eax,al
c00212d8:	83 e0 10             	and    eax,0x10
c00212db:	74 07                	je     c00212e4 <FAT::readDir(void*, unsigned long, void*, int*)+0x84>
c00212dd:	b8 02 00 00 00       	mov    eax,0x2
c00212e2:	eb 05                	jmp    c00212e9 <FAT::readDir(void*, unsigned long, void*, int*)+0x89>
c00212e4:	b8 01 00 00 00       	mov    eax,0x1
c00212e9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00212ed:	83 ec 08             	sub    esp,0x8
c00212f0:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c00212f7:	83 c0 1a             	add    eax,0x1a
c00212fa:	50                   	push   eax
c00212fb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00212ff:	83 c0 10             	add    eax,0x10
c0021302:	50                   	push   eax
c0021303:	e8 50 f5 fd ff       	call   c0000858 <strcpy>
c0021308:	83 c4 10             	add    esp,0x10
c002130b:	83 ec 04             	sub    esp,0x4
c002130e:	ff b4 24 4c 02 00 00 	push   DWORD PTR [esp+0x24c]
c0021315:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021319:	50                   	push   eax
c002131a:	ff b4 24 58 02 00 00 	push   DWORD PTR [esp+0x258]
c0021321:	e8 42 f4 fd ff       	call   c0000768 <memcpy>
c0021326:	83 c4 10             	add    esp,0x10
c0021329:	8b 84 24 50 02 00 00 	mov    eax,DWORD PTR [esp+0x250]
c0021330:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0021336:	8a 84 24 2a 01 00 00 	mov    al,BYTE PTR [esp+0x12a]
c002133d:	84 c0                	test   al,al
c002133f:	75 07                	jne    c0021348 <FAT::readDir(void*, unsigned long, void*, int*)+0xe8>
c0021341:	b8 07 00 00 00       	mov    eax,0x7
c0021346:	eb 17                	jmp    c002135f <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c0021348:	8b 84 24 2c 02 00 00 	mov    eax,DWORD PTR [esp+0x22c]
c002134f:	85 c0                	test   eax,eax
c0021351:	75 07                	jne    c002135a <FAT::readDir(void*, unsigned long, void*, int*)+0xfa>
c0021353:	b8 00 00 00 00       	mov    eax,0x0
c0021358:	eb 05                	jmp    c002135f <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c002135a:	b8 01 00 00 00       	mov    eax,0x1
c002135f:	81 c4 3c 02 00 00    	add    esp,0x23c
c0021365:	c3                   	ret    

c0021366 <FAT::read(void*, unsigned long, void*, int*)>:
c0021366:	83 ec 1c             	sub    esp,0x1c
c0021369:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c002136e:	74 07                	je     c0021377 <FAT::read(void*, unsigned long, void*, int*)+0x11>
c0021370:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0021375:	75 07                	jne    c002137e <FAT::read(void*, unsigned long, void*, int*)+0x18>
c0021377:	b8 04 00 00 00       	mov    eax,0x4
c002137c:	eb 3d                	jmp    c00213bb <FAT::read(void*, unsigned long, void*, int*)+0x55>
c002137e:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021382:	50                   	push   eax
c0021383:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0021387:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c002138b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c002138f:	e8 5d 40 fe ff       	call   c00053f1 <f_read>
c0021394:	83 c4 10             	add    esp,0x10
c0021397:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002139b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002139f:	89 c2                	mov    edx,eax
c00213a1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00213a5:	89 10                	mov    DWORD PTR [eax],edx
c00213a7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00213ab:	85 c0                	test   eax,eax
c00213ad:	75 07                	jne    c00213b6 <FAT::read(void*, unsigned long, void*, int*)+0x50>
c00213af:	b8 00 00 00 00       	mov    eax,0x0
c00213b4:	eb 05                	jmp    c00213bb <FAT::read(void*, unsigned long, void*, int*)+0x55>
c00213b6:	b8 01 00 00 00       	mov    eax,0x1
c00213bb:	83 c4 1c             	add    esp,0x1c
c00213be:	c3                   	ret    
c00213bf:	90                   	nop

c00213c0 <FAT::write(void*, unsigned long, void*, int*)>:
c00213c0:	83 ec 1c             	sub    esp,0x1c
c00213c3:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00213c8:	74 07                	je     c00213d1 <FAT::write(void*, unsigned long, void*, int*)+0x11>
c00213ca:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00213cf:	75 07                	jne    c00213d8 <FAT::write(void*, unsigned long, void*, int*)+0x18>
c00213d1:	b8 04 00 00 00       	mov    eax,0x4
c00213d6:	eb 3d                	jmp    c0021415 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c00213d8:	8d 44 24 08          	lea    eax,[esp+0x8]
c00213dc:	50                   	push   eax
c00213dd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00213e1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00213e5:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00213e9:	e8 83 42 fe ff       	call   c0005671 <f_write>
c00213ee:	83 c4 10             	add    esp,0x10
c00213f1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00213f5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00213f9:	89 c2                	mov    edx,eax
c00213fb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00213ff:	89 10                	mov    DWORD PTR [eax],edx
c0021401:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021405:	85 c0                	test   eax,eax
c0021407:	75 07                	jne    c0021410 <FAT::write(void*, unsigned long, void*, int*)+0x50>
c0021409:	b8 00 00 00 00       	mov    eax,0x0
c002140e:	eb 05                	jmp    c0021415 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0021410:	b8 01 00 00 00       	mov    eax,0x1
c0021415:	83 c4 1c             	add    esp,0x1c
c0021418:	c3                   	ret    
c0021419:	90                   	nop

c002141a <FAT::close(void*)>:
c002141a:	83 ec 1c             	sub    esp,0x1c
c002141d:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0021422:	75 07                	jne    c002142b <FAT::close(void*)+0x11>
c0021424:	b8 04 00 00 00       	mov    eax,0x4
c0021429:	eb 36                	jmp    c0021461 <FAT::close(void*)+0x47>
c002142b:	83 ec 0c             	sub    esp,0xc
c002142e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0021432:	e8 d0 46 fe ff       	call   c0005b07 <f_close>
c0021437:	83 c4 10             	add    esp,0x10
c002143a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002143e:	83 ec 0c             	sub    esp,0xc
c0021441:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0021445:	e8 f8 e4 fe ff       	call   c000f942 <free>
c002144a:	83 c4 10             	add    esp,0x10
c002144d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021451:	85 c0                	test   eax,eax
c0021453:	75 07                	jne    c002145c <FAT::close(void*)+0x42>
c0021455:	b8 00 00 00 00       	mov    eax,0x0
c002145a:	eb 05                	jmp    c0021461 <FAT::close(void*)+0x47>
c002145c:	b8 01 00 00 00       	mov    eax,0x1
c0021461:	83 c4 1c             	add    esp,0x1c
c0021464:	c3                   	ret    
c0021465:	90                   	nop

c0021466 <FAT::closeDir(void*)>:
c0021466:	83 ec 1c             	sub    esp,0x1c
c0021469:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c002146e:	75 07                	jne    c0021477 <FAT::closeDir(void*)+0x11>
c0021470:	b8 04 00 00 00       	mov    eax,0x4
c0021475:	eb 36                	jmp    c00214ad <FAT::closeDir(void*)+0x47>
c0021477:	83 ec 0c             	sub    esp,0xc
c002147a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c002147e:	e8 6c 4c fe ff       	call   c00060ef <f_closedir>
c0021483:	83 c4 10             	add    esp,0x10
c0021486:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002148a:	83 ec 0c             	sub    esp,0xc
c002148d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0021491:	e8 ac e4 fe ff       	call   c000f942 <free>
c0021496:	83 c4 10             	add    esp,0x10
c0021499:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002149d:	85 c0                	test   eax,eax
c002149f:	75 07                	jne    c00214a8 <FAT::closeDir(void*)+0x42>
c00214a1:	b8 00 00 00 00       	mov    eax,0x0
c00214a6:	eb 05                	jmp    c00214ad <FAT::closeDir(void*)+0x47>
c00214a8:	b8 01 00 00 00       	mov    eax,0x1
c00214ad:	83 c4 1c             	add    esp,0x1c
c00214b0:	c3                   	ret    
c00214b1:	90                   	nop

c00214b2 <FAT::seek(void*, unsigned long long)>:
c00214b2:	83 ec 2c             	sub    esp,0x2c
c00214b5:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00214b9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00214bd:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00214c1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00214c5:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c00214ca:	75 07                	jne    c00214d3 <FAT::seek(void*, unsigned long long)+0x21>
c00214cc:	b8 04 00 00 00       	mov    eax,0x4
c00214d1:	eb 2f                	jmp    c0021502 <FAT::seek(void*, unsigned long long)+0x50>
c00214d3:	83 ec 04             	sub    esp,0x4
c00214d6:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00214da:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00214de:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00214e2:	e8 4f 46 fe ff       	call   c0005b36 <f_lseek>
c00214e7:	83 c4 10             	add    esp,0x10
c00214ea:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00214ee:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00214f2:	85 c0                	test   eax,eax
c00214f4:	75 07                	jne    c00214fd <FAT::seek(void*, unsigned long long)+0x4b>
c00214f6:	b8 00 00 00 00       	mov    eax,0x0
c00214fb:	eb 05                	jmp    c0021502 <FAT::seek(void*, unsigned long long)+0x50>
c00214fd:	b8 01 00 00 00       	mov    eax,0x1
c0021502:	83 c4 2c             	add    esp,0x2c
c0021505:	c3                   	ret    

c0021506 <fatWrapperReadDisk>:
c0021506:	83 ec 1c             	sub    esp,0x1c
c0021509:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002150d:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0021511:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0021515:	89 04 24             	mov    DWORD PTR [esp],eax
c0021518:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c002151c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0021520:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021525:	8b 04 85 80 f4 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0b80]
c002152c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0021530:	83 ec 0c             	sub    esp,0xc
c0021533:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0021537:	52                   	push   edx
c0021538:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002153c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0021540:	50                   	push   eax
c0021541:	e8 36 53 ff ff       	call   c001687c <LogicalDisk::read(unsigned long long, int, void*)>
c0021546:	83 c4 20             	add    esp,0x20
c0021549:	83 c4 1c             	add    esp,0x1c
c002154c:	c3                   	ret    

c002154d <fatWrapperWriteDisk>:
c002154d:	83 ec 1c             	sub    esp,0x1c
c0021550:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021554:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0021558:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c002155c:	89 04 24             	mov    DWORD PTR [esp],eax
c002155f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0021563:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0021567:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c002156c:	8b 04 85 80 f4 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0b80]
c0021573:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0021577:	83 ec 0c             	sub    esp,0xc
c002157a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c002157e:	52                   	push   edx
c002157f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0021583:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0021587:	50                   	push   eax
c0021588:	e8 5b 53 ff ff       	call   c00168e8 <LogicalDisk::write(unsigned long long, int, void*)>
c002158d:	83 c4 20             	add    esp,0x20
c0021590:	83 c4 1c             	add    esp,0x1c
c0021593:	c3                   	ret    

c0021594 <fatWrapperIoctl>:
c0021594:	53                   	push   ebx
c0021595:	83 ec 28             	sub    esp,0x28
c0021598:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c002159c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00215a0:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c00215a4:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00215a8:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c00215ad:	75 31                	jne    c00215e0 <fatWrapperIoctl+0x4c>
c00215af:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00215b3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00215b7:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00215bc:	8b 04 85 80 f4 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0b80]
c00215c3:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00215c9:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00215cf:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00215d3:	66 89 02             	mov    WORD PTR [edx],ax
c00215d6:	b8 00 00 00 00       	mov    eax,0x0
c00215db:	e9 b2 00 00 00       	jmp    c0021692 <fatWrapperIoctl+0xfe>
c00215e0:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c00215e5:	75 6a                	jne    c0021651 <fatWrapperIoctl+0xbd>
c00215e7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00215eb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00215ef:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00215f4:	8b 04 85 80 f4 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0b80]
c00215fb:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0021601:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0021607:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c002160d:	89 c8                	mov    eax,ecx
c002160f:	89 da                	mov    edx,ebx
c0021611:	0f a4 c2 0a          	shld   edx,eax,0xa
c0021615:	c1 e0 0a             	shl    eax,0xa
c0021618:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c002161d:	8b 0c 8d 80 f4 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0b80]
c0021624:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c002162a:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0021630:	89 cb                	mov    ebx,ecx
c0021632:	c1 fb 1f             	sar    ebx,0x1f
c0021635:	53                   	push   ebx
c0021636:	51                   	push   ecx
c0021637:	52                   	push   edx
c0021638:	50                   	push   eax
c0021639:	e8 96 5b 00 00       	call   c00271d4 <__udivdi3>
c002163e:	83 c4 10             	add    esp,0x10
c0021641:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0021645:	89 01                	mov    DWORD PTR [ecx],eax
c0021647:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c002164a:	b8 00 00 00 00       	mov    eax,0x0
c002164f:	eb 41                	jmp    c0021692 <fatWrapperIoctl+0xfe>
c0021651:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0021656:	75 07                	jne    c002165f <fatWrapperIoctl+0xcb>
c0021658:	b8 00 00 00 00       	mov    eax,0x0
c002165d:	eb 33                	jmp    c0021692 <fatWrapperIoctl+0xfe>
c002165f:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c0021664:	75 19                	jne    c002167f <fatWrapperIoctl+0xeb>
c0021666:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002166a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002166e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021672:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0021678:	b8 00 00 00 00       	mov    eax,0x0
c002167d:	eb 13                	jmp    c0021692 <fatWrapperIoctl+0xfe>
c002167f:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c0021684:	75 07                	jne    c002168d <fatWrapperIoctl+0xf9>
c0021686:	b8 00 00 00 00       	mov    eax,0x0
c002168b:	eb 05                	jmp    c0021692 <fatWrapperIoctl+0xfe>
c002168d:	b8 04 00 00 00       	mov    eax,0x4
c0021692:	83 c4 28             	add    esp,0x28
c0021695:	5b                   	pop    ebx
c0021696:	c3                   	ret    
c0021697:	90                   	nop

c0021698 <FAT::FAT()>:
c0021698:	83 ec 1c             	sub    esp,0x1c
c002169b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002169f:	83 ec 0c             	sub    esp,0xc
c00216a2:	50                   	push   eax
c00216a3:	e8 54 1b ff ff       	call   c00131fc <Filesystem::Filesystem()>
c00216a8:	83 c4 10             	add    esp,0x10
c00216ab:	ba bc d2 02 c0       	mov    edx,0xc002d2bc
c00216b0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00216b4:	89 10                	mov    DWORD PTR [eax],edx
c00216b6:	c7 05 a0 24 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00324a0,0x0
c00216c0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00216c8:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c00216cd:	7f 15                	jg     c00216e4 <FAT::FAT()+0x4c>
c00216cf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00216d3:	c7 04 85 c0 24 03 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffcdb40],0xffffffff
c00216de:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00216e2:	eb e4                	jmp    c00216c8 <FAT::FAT()+0x30>
c00216e4:	90                   	nop
c00216e5:	83 c4 1c             	add    esp,0x1c
c00216e8:	c3                   	ret    
c00216e9:	90                   	nop

c00216ea <FAT::fixFilepath(char*)>:
c00216ea:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00216ee:	8a 00                	mov    al,BYTE PTR [eax]
c00216f0:	3c 40                	cmp    al,0x40
c00216f2:	7e 2c                	jle    c0021720 <FAT::fixFilepath(char*)+0x36>
c00216f4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00216f8:	8a 00                	mov    al,BYTE PTR [eax]
c00216fa:	83 e8 41             	sub    eax,0x41
c00216fd:	88 c2                	mov    dl,al
c00216ff:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021703:	88 10                	mov    BYTE PTR [eax],dl
c0021705:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021709:	8a 00                	mov    al,BYTE PTR [eax]
c002170b:	0f be c0             	movsx  eax,al
c002170e:	8b 04 85 c0 24 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcdb40]
c0021715:	83 c0 30             	add    eax,0x30
c0021718:	88 c2                	mov    dl,al
c002171a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002171e:	88 10                	mov    BYTE PTR [eax],dl
c0021720:	90                   	nop
c0021721:	c3                   	ret    

c0021722 <FAT::open(char const*, void**, FileOpenMode)>:
c0021722:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021728:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0021730:	74 0a                	je     c002173c <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c0021732:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c002173a:	75 0a                	jne    c0021746 <FAT::open(char const*, void**, FileOpenMode)+0x24>
c002173c:	b8 04 00 00 00       	mov    eax,0x4
c0021741:	e9 fd 00 00 00       	jmp    c0021843 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c0021746:	83 ec 08             	sub    esp,0x8
c0021749:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021750:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021754:	50                   	push   eax
c0021755:	e8 fe f0 fd ff       	call   c0000858 <strcpy>
c002175a:	83 c4 10             	add    esp,0x10
c002175d:	83 ec 08             	sub    esp,0x8
c0021760:	8d 44 24 10          	lea    eax,[esp+0x10]
c0021764:	50                   	push   eax
c0021765:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002176c:	e8 79 ff ff ff       	call   c00216ea <FAT::fixFilepath(char*)>
c0021771:	83 c4 10             	add    esp,0x10
c0021774:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c002177c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0021783:	83 e0 01             	and    eax,0x1
c0021786:	74 08                	je     c0021790 <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c0021788:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c0021790:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0021797:	83 e0 04             	and    eax,0x4
c002179a:	74 10                	je     c00217ac <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c002179c:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c00217a4:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c00217ac:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00217b3:	83 e0 02             	and    eax,0x2
c00217b6:	74 08                	je     c00217c0 <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c00217b8:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c00217c0:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00217c7:	83 e0 08             	and    eax,0x8
c00217ca:	74 08                	je     c00217d4 <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c00217cc:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c00217d4:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00217db:	83 e0 10             	and    eax,0x10
c00217de:	74 08                	je     c00217e8 <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c00217e0:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c00217e8:	83 ec 0c             	sub    esp,0xc
c00217eb:	68 50 02 00 00       	push   0x250
c00217f0:	e8 3d e1 fe ff       	call   c000f932 <malloc>
c00217f5:	83 c4 10             	add    esp,0x10
c00217f8:	89 c2                	mov    edx,eax
c00217fa:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0021801:	89 10                	mov    DWORD PTR [eax],edx
c0021803:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c002180b:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0021812:	8b 00                	mov    eax,DWORD PTR [eax]
c0021814:	83 ec 04             	sub    esp,0x4
c0021817:	52                   	push   edx
c0021818:	8d 54 24 10          	lea    edx,[esp+0x10]
c002181c:	52                   	push   edx
c002181d:	50                   	push   eax
c002181e:	e8 92 37 fe ff       	call   c0004fb5 <f_open>
c0021823:	83 c4 10             	add    esp,0x10
c0021826:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c002182d:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c0021835:	74 07                	je     c002183e <FAT::open(char const*, void**, FileOpenMode)+0x11c>
c0021837:	b8 01 00 00 00       	mov    eax,0x1
c002183c:	eb 05                	jmp    c0021843 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c002183e:	b8 00 00 00 00       	mov    eax,0x0
c0021843:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021849:	c3                   	ret    

c002184a <FAT::openDir(char const*, void**)>:
c002184a:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021850:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0021858:	74 0a                	je     c0021864 <FAT::openDir(char const*, void**)+0x1a>
c002185a:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0021862:	75 07                	jne    c002186b <FAT::openDir(char const*, void**)+0x21>
c0021864:	b8 04 00 00 00       	mov    eax,0x4
c0021869:	eb 7d                	jmp    c00218e8 <FAT::openDir(char const*, void**)+0x9e>
c002186b:	83 ec 08             	sub    esp,0x8
c002186e:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021875:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021879:	50                   	push   eax
c002187a:	e8 d9 ef fd ff       	call   c0000858 <strcpy>
c002187f:	83 c4 10             	add    esp,0x10
c0021882:	83 ec 08             	sub    esp,0x8
c0021885:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021889:	50                   	push   eax
c002188a:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021891:	e8 54 fe ff ff       	call   c00216ea <FAT::fixFilepath(char*)>
c0021896:	83 c4 10             	add    esp,0x10
c0021899:	83 ec 0c             	sub    esp,0xc
c002189c:	6a 4c                	push   0x4c
c002189e:	e8 8f e0 fe ff       	call   c000f932 <malloc>
c00218a3:	83 c4 10             	add    esp,0x10
c00218a6:	89 c2                	mov    edx,eax
c00218a8:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00218af:	89 10                	mov    DWORD PTR [eax],edx
c00218b1:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00218b8:	8b 00                	mov    eax,DWORD PTR [eax]
c00218ba:	83 ec 08             	sub    esp,0x8
c00218bd:	8d 54 24 14          	lea    edx,[esp+0x14]
c00218c1:	52                   	push   edx
c00218c2:	50                   	push   eax
c00218c3:	e8 25 47 fe ff       	call   c0005fed <f_opendir>
c00218c8:	83 c4 10             	add    esp,0x10
c00218cb:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00218d2:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c00218da:	74 07                	je     c00218e3 <FAT::openDir(char const*, void**)+0x99>
c00218dc:	b8 01 00 00 00       	mov    eax,0x1
c00218e1:	eb 05                	jmp    c00218e8 <FAT::openDir(char const*, void**)+0x9e>
c00218e3:	b8 00 00 00 00       	mov    eax,0x0
c00218e8:	81 c4 1c 01 00 00    	add    esp,0x11c
c00218ee:	c3                   	ret    
c00218ef:	90                   	nop

c00218f0 <FAT::stat(char const*, unsigned long long*, bool*)>:
c00218f0:	81 ec 2c 02 00 00    	sub    esp,0x22c
c00218f6:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c00218fe:	75 0a                	jne    c002190a <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c0021900:	b8 04 00 00 00       	mov    eax,0x4
c0021905:	e9 c9 00 00 00       	jmp    c00219d3 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c002190a:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0021912:	75 0a                	jne    c002191e <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c0021914:	b8 04 00 00 00       	mov    eax,0x4
c0021919:	e9 b5 00 00 00       	jmp    c00219d3 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c002191e:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0021926:	75 0a                	jne    c0021932 <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c0021928:	b8 04 00 00 00       	mov    eax,0x4
c002192d:	e9 a1 00 00 00       	jmp    c00219d3 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0021932:	83 ec 08             	sub    esp,0x8
c0021935:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c002193c:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0021943:	50                   	push   eax
c0021944:	e8 0f ef fd ff       	call   c0000858 <strcpy>
c0021949:	83 c4 10             	add    esp,0x10
c002194c:	83 ec 08             	sub    esp,0x8
c002194f:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0021956:	50                   	push   eax
c0021957:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c002195e:	e8 87 fd ff ff       	call   c00216ea <FAT::fixFilepath(char*)>
c0021963:	83 c4 10             	add    esp,0x10
c0021966:	83 ec 08             	sub    esp,0x8
c0021969:	8d 44 24 08          	lea    eax,[esp+0x8]
c002196d:	50                   	push   eax
c002196e:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0021975:	50                   	push   eax
c0021976:	e8 31 48 fe ff       	call   c00061ac <f_stat>
c002197b:	83 c4 10             	add    esp,0x10
c002197e:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0021985:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c002198c:	85 c0                	test   eax,eax
c002198e:	74 07                	je     c0021997 <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c0021990:	83 f8 04             	cmp    eax,0x4
c0021993:	74 32                	je     c00219c7 <FAT::stat(char const*, unsigned long long*, bool*)+0xd7>
c0021995:	eb 37                	jmp    c00219ce <FAT::stat(char const*, unsigned long long*, bool*)+0xde>
c0021997:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c002199b:	0f b6 c0             	movzx  eax,al
c002199e:	83 e0 10             	and    eax,0x10
c00219a1:	0f 95 c2             	setne  dl
c00219a4:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c00219ab:	88 10                	mov    BYTE PTR [eax],dl
c00219ad:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00219b0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00219b4:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c00219bb:	89 01                	mov    DWORD PTR [ecx],eax
c00219bd:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00219c0:	b8 00 00 00 00       	mov    eax,0x0
c00219c5:	eb 0c                	jmp    c00219d3 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00219c7:	b8 02 00 00 00       	mov    eax,0x2
c00219cc:	eb 05                	jmp    c00219d3 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00219ce:	b8 01 00 00 00       	mov    eax,0x1
c00219d3:	81 c4 2c 02 00 00    	add    esp,0x22c
c00219d9:	c3                   	ret    

c00219da <FAT::unlink(char const*)>:
c00219da:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00219e0:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00219e8:	75 07                	jne    c00219f1 <FAT::unlink(char const*)+0x17>
c00219ea:	b8 04 00 00 00       	mov    eax,0x4
c00219ef:	eb 5c                	jmp    c0021a4d <FAT::unlink(char const*)+0x73>
c00219f1:	83 ec 08             	sub    esp,0x8
c00219f4:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00219fb:	8d 44 24 18          	lea    eax,[esp+0x18]
c00219ff:	50                   	push   eax
c0021a00:	e8 53 ee fd ff       	call   c0000858 <strcpy>
c0021a05:	83 c4 10             	add    esp,0x10
c0021a08:	83 ec 08             	sub    esp,0x8
c0021a0b:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021a0f:	50                   	push   eax
c0021a10:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021a17:	e8 ce fc ff ff       	call   c00216ea <FAT::fixFilepath(char*)>
c0021a1c:	83 c4 10             	add    esp,0x10
c0021a1f:	83 ec 0c             	sub    esp,0xc
c0021a22:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021a26:	50                   	push   eax
c0021a27:	e8 d2 4a fe ff       	call   c00064fe <f_unlink>
c0021a2c:	83 c4 10             	add    esp,0x10
c0021a2f:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0021a36:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0021a3d:	85 c0                	test   eax,eax
c0021a3f:	75 07                	jne    c0021a48 <FAT::unlink(char const*)+0x6e>
c0021a41:	b8 00 00 00 00       	mov    eax,0x0
c0021a46:	eb 05                	jmp    c0021a4d <FAT::unlink(char const*)+0x73>
c0021a48:	b8 01 00 00 00       	mov    eax,0x1
c0021a4d:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021a53:	c3                   	ret    

c0021a54 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0021a54:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0021a5a:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c0021a61:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c0021a68:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0021a6c:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0021a70:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0021a78:	75 0a                	jne    c0021a84 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c0021a7a:	b8 04 00 00 00       	mov    eax,0x4
c0021a7f:	e9 1c 01 00 00       	jmp    c0021ba0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0021a84:	83 ec 08             	sub    esp,0x8
c0021a87:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0021a8e:	8d 44 24 24          	lea    eax,[esp+0x24]
c0021a92:	50                   	push   eax
c0021a93:	e8 c0 ed fd ff       	call   c0000858 <strcpy>
c0021a98:	83 c4 10             	add    esp,0x10
c0021a9b:	83 ec 08             	sub    esp,0x8
c0021a9e:	8d 44 24 20          	lea    eax,[esp+0x20]
c0021aa2:	50                   	push   eax
c0021aa3:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0021aaa:	e8 3b fc ff ff       	call   c00216ea <FAT::fixFilepath(char*)>
c0021aaf:	83 c4 10             	add    esp,0x10
c0021ab2:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0021aba:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c0021ac2:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021ac7:	83 e0 01             	and    eax,0x1
c0021aca:	74 08                	je     c0021ad4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c0021acc:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c0021ad4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021ad9:	83 e0 02             	and    eax,0x2
c0021adc:	74 08                	je     c0021ae6 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x92>
c0021ade:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c0021ae6:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021aeb:	83 e0 04             	and    eax,0x4
c0021aee:	74 08                	je     c0021af8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa4>
c0021af0:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c0021af8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021afd:	83 e0 08             	and    eax,0x8
c0021b00:	74 08                	je     c0021b0a <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb6>
c0021b02:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c0021b0a:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021b0f:	83 e0 01             	and    eax,0x1
c0021b12:	74 08                	je     c0021b1c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c0021b14:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c0021b1c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021b21:	83 e0 02             	and    eax,0x2
c0021b24:	74 08                	je     c0021b2e <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xda>
c0021b26:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c0021b2e:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021b33:	83 e0 04             	and    eax,0x4
c0021b36:	74 08                	je     c0021b40 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xec>
c0021b38:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c0021b40:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021b45:	83 e0 08             	and    eax,0x8
c0021b48:	74 08                	je     c0021b52 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfe>
c0021b4a:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c0021b52:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0021b59:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c0021b60:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c0021b68:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c0021b70:	83 ec 04             	sub    esp,0x4
c0021b73:	52                   	push   edx
c0021b74:	50                   	push   eax
c0021b75:	8d 44 24 24          	lea    eax,[esp+0x24]
c0021b79:	50                   	push   eax
c0021b7a:	e8 21 50 fe ff       	call   c0006ba0 <f_chmod>
c0021b7f:	83 c4 10             	add    esp,0x10
c0021b82:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c0021b89:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c0021b90:	85 c0                	test   eax,eax
c0021b92:	75 07                	jne    c0021b9b <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x147>
c0021b94:	b8 00 00 00 00       	mov    eax,0x0
c0021b99:	eb 05                	jmp    c0021ba0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0021b9b:	b8 01 00 00 00       	mov    eax,0x1
c0021ba0:	81 c4 2c 01 00 00    	add    esp,0x12c
c0021ba6:	c3                   	ret    
c0021ba7:	90                   	nop

c0021ba8 <FAT::rename(char const*, char const*)>:
c0021ba8:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0021bae:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c0021bb6:	74 0a                	je     c0021bc2 <FAT::rename(char const*, char const*)+0x1a>
c0021bb8:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c0021bc0:	75 0a                	jne    c0021bcc <FAT::rename(char const*, char const*)+0x24>
c0021bc2:	b8 04 00 00 00       	mov    eax,0x4
c0021bc7:	e9 98 00 00 00       	jmp    c0021c64 <FAT::rename(char const*, char const*)+0xbc>
c0021bcc:	83 ec 08             	sub    esp,0x8
c0021bcf:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0021bd6:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0021bdd:	50                   	push   eax
c0021bde:	e8 75 ec fd ff       	call   c0000858 <strcpy>
c0021be3:	83 c4 10             	add    esp,0x10
c0021be6:	83 ec 08             	sub    esp,0x8
c0021be9:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0021bf0:	50                   	push   eax
c0021bf1:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0021bf8:	e8 ed fa ff ff       	call   c00216ea <FAT::fixFilepath(char*)>
c0021bfd:	83 c4 10             	add    esp,0x10
c0021c00:	83 ec 08             	sub    esp,0x8
c0021c03:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c0021c0a:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021c0e:	50                   	push   eax
c0021c0f:	e8 44 ec fd ff       	call   c0000858 <strcpy>
c0021c14:	83 c4 10             	add    esp,0x10
c0021c17:	83 ec 08             	sub    esp,0x8
c0021c1a:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021c1e:	50                   	push   eax
c0021c1f:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0021c26:	e8 bf fa ff ff       	call   c00216ea <FAT::fixFilepath(char*)>
c0021c2b:	83 c4 10             	add    esp,0x10
c0021c2e:	83 ec 08             	sub    esp,0x8
c0021c31:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021c35:	50                   	push   eax
c0021c36:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0021c3d:	50                   	push   eax
c0021c3e:	e8 6a 4c fe ff       	call   c00068ad <f_rename>
c0021c43:	83 c4 10             	add    esp,0x10
c0021c46:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c0021c4d:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c0021c54:	85 c0                	test   eax,eax
c0021c56:	75 07                	jne    c0021c5f <FAT::rename(char const*, char const*)+0xb7>
c0021c58:	b8 00 00 00 00       	mov    eax,0x0
c0021c5d:	eb 05                	jmp    c0021c64 <FAT::rename(char const*, char const*)+0xbc>
c0021c5f:	b8 01 00 00 00       	mov    eax,0x1
c0021c64:	81 c4 1c 02 00 00    	add    esp,0x21c
c0021c6a:	c3                   	ret    
c0021c6b:	90                   	nop

c0021c6c <FAT::mkdir(char const*)>:
c0021c6c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021c72:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0021c7a:	75 07                	jne    c0021c83 <FAT::mkdir(char const*)+0x17>
c0021c7c:	b8 04 00 00 00       	mov    eax,0x4
c0021c81:	eb 5c                	jmp    c0021cdf <FAT::mkdir(char const*)+0x73>
c0021c83:	83 ec 08             	sub    esp,0x8
c0021c86:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021c8d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021c91:	50                   	push   eax
c0021c92:	e8 c1 eb fd ff       	call   c0000858 <strcpy>
c0021c97:	83 c4 10             	add    esp,0x10
c0021c9a:	83 ec 08             	sub    esp,0x8
c0021c9d:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021ca1:	50                   	push   eax
c0021ca2:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021ca9:	e8 3c fa ff ff       	call   c00216ea <FAT::fixFilepath(char*)>
c0021cae:	83 c4 10             	add    esp,0x10
c0021cb1:	83 ec 0c             	sub    esp,0xc
c0021cb4:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021cb8:	50                   	push   eax
c0021cb9:	e8 c3 49 fe ff       	call   c0006681 <f_mkdir>
c0021cbe:	83 c4 10             	add    esp,0x10
c0021cc1:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0021cc8:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0021ccf:	85 c0                	test   eax,eax
c0021cd1:	75 07                	jne    c0021cda <FAT::mkdir(char const*)+0x6e>
c0021cd3:	b8 00 00 00 00       	mov    eax,0x0
c0021cd8:	eb 05                	jmp    c0021cdf <FAT::mkdir(char const*)+0x73>
c0021cda:	b8 01 00 00 00       	mov    eax,0x1
c0021cdf:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021ce5:	c3                   	ret    

c0021ce6 <FAT::exists(char const*)>:
c0021ce6:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0021cec:	83 ec 08             	sub    esp,0x8
c0021cef:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0021cf6:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0021cfa:	50                   	push   eax
c0021cfb:	e8 58 eb fd ff       	call   c0000858 <strcpy>
c0021d00:	83 c4 10             	add    esp,0x10
c0021d03:	83 ec 08             	sub    esp,0x8
c0021d06:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021d0a:	50                   	push   eax
c0021d0b:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0021d12:	e8 d3 f9 ff ff       	call   c00216ea <FAT::fixFilepath(char*)>
c0021d17:	83 c4 10             	add    esp,0x10
c0021d1a:	83 ec 08             	sub    esp,0x8
c0021d1d:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c0021d24:	50                   	push   eax
c0021d25:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0021d29:	50                   	push   eax
c0021d2a:	e8 7d 44 fe ff       	call   c00061ac <f_stat>
c0021d2f:	83 c4 10             	add    esp,0x10
c0021d32:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0021d39:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0021d40:	85 c0                	test   eax,eax
c0021d42:	75 04                	jne    c0021d48 <FAT::exists(char const*)+0x62>
c0021d44:	b0 01                	mov    al,0x1
c0021d46:	eb 02                	jmp    c0021d4a <FAT::exists(char const*)+0x64>
c0021d48:	b0 00                	mov    al,0x0
c0021d4a:	81 c4 2c 02 00 00    	add    esp,0x22c
c0021d50:	c3                   	ret    
c0021d51:	90                   	nop

c0021d52 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c0021d52:	b8 08 00 00 00       	mov    eax,0x8
c0021d57:	c3                   	ret    

c0021d58 <ISO9660::seek(void*, unsigned long long)>:
c0021d58:	53                   	push   ebx
c0021d59:	b8 04 00 00 00       	mov    eax,0x4
c0021d5e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021d62:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0021d66:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0021d6a:	85 d2                	test   edx,edx
c0021d6c:	74 17                	je     c0021d85 <ISO9660::seek(void*, unsigned long long)+0x2d>
c0021d6e:	89 c8                	mov    eax,ecx
c0021d70:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c0021d73:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c0021d76:	b8 01 00 00 00       	mov    eax,0x1
c0021d7b:	73 08                	jae    c0021d85 <ISO9660::seek(void*, unsigned long long)+0x2d>
c0021d7d:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c0021d80:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c0021d83:	31 c0                	xor    eax,eax
c0021d85:	5b                   	pop    ebx
c0021d86:	c3                   	ret    
c0021d87:	90                   	nop

c0021d88 <ISO9660::tell(void*, unsigned long long*)>:
c0021d88:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0021d8c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021d90:	85 d2                	test   edx,edx
c0021d92:	74 12                	je     c0021da6 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0021d94:	85 c0                	test   eax,eax
c0021d96:	74 0e                	je     c0021da6 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0021d98:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0021d9b:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c0021d9e:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0021da1:	89 10                	mov    DWORD PTR [eax],edx
c0021da3:	31 c0                	xor    eax,eax
c0021da5:	c3                   	ret    
c0021da6:	b8 04 00 00 00       	mov    eax,0x4
c0021dab:	c3                   	ret    

c0021dac <ISO9660::getName()>:
c0021dac:	b8 1c d3 02 c0       	mov    eax,0xc002d31c
c0021db1:	c3                   	ret    

c0021db2 <ISO9660::stat(void*, unsigned long long*)>:
c0021db2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0021db6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021dba:	85 d2                	test   edx,edx
c0021dbc:	74 12                	je     c0021dd0 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0021dbe:	85 c0                	test   eax,eax
c0021dc0:	74 0e                	je     c0021dd0 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0021dc2:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0021dc5:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0021dc8:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0021dcb:	89 10                	mov    DWORD PTR [eax],edx
c0021dcd:	31 c0                	xor    eax,eax
c0021dcf:	c3                   	ret    
c0021dd0:	b8 04 00 00 00       	mov    eax,0x4
c0021dd5:	c3                   	ret    

c0021dd6 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c0021dd6:	b8 01 00 00 00       	mov    eax,0x1
c0021ddb:	c3                   	ret    

c0021ddc <ISO9660::unlink(char const*)>:
c0021ddc:	b8 01 00 00 00       	mov    eax,0x1
c0021de1:	c3                   	ret    

c0021de2 <ISO9660::write(void*, unsigned long, void*, int*)>:
c0021de2:	b8 01 00 00 00       	mov    eax,0x1
c0021de7:	c3                   	ret    

c0021de8 <ISO9660::rename(char const*, char const*)>:
c0021de8:	b8 01 00 00 00       	mov    eax,0x1
c0021ded:	c3                   	ret    

c0021dee <ISO9660::mkdir(char const*)>:
c0021dee:	b8 01 00 00 00       	mov    eax,0x1
c0021df3:	c3                   	ret    

c0021df4 <ISO9660::close(void*)>:
c0021df4:	83 ec 0c             	sub    esp,0xc
c0021df7:	b8 04 00 00 00       	mov    eax,0x4
c0021dfc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021e00:	85 d2                	test   edx,edx
c0021e02:	74 0e                	je     c0021e12 <ISO9660::close(void*)+0x1e>
c0021e04:	83 ec 0c             	sub    esp,0xc
c0021e07:	52                   	push   edx
c0021e08:	e8 35 db fe ff       	call   c000f942 <free>
c0021e0d:	83 c4 10             	add    esp,0x10
c0021e10:	31 c0                	xor    eax,eax
c0021e12:	83 c4 0c             	add    esp,0xc
c0021e15:	c3                   	ret    

c0021e16 <ISO9660::closeDir(void*)>:
c0021e16:	83 ec 0c             	sub    esp,0xc
c0021e19:	b8 04 00 00 00       	mov    eax,0x4
c0021e1e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021e22:	85 d2                	test   edx,edx
c0021e24:	74 0e                	je     c0021e34 <ISO9660::closeDir(void*)+0x1e>
c0021e26:	83 ec 0c             	sub    esp,0xc
c0021e29:	52                   	push   edx
c0021e2a:	e8 13 db fe ff       	call   c000f942 <free>
c0021e2f:	83 c4 10             	add    esp,0x10
c0021e32:	31 c0                	xor    eax,eax
c0021e34:	83 c4 0c             	add    esp,0xc
c0021e37:	c3                   	ret    

c0021e38 <ISO9660::~ISO9660()>:
c0021e38:	83 ec 0c             	sub    esp,0xc
c0021e3b:	ba 80 d3 02 c0       	mov    edx,0xc002d380
c0021e40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021e44:	89 10                	mov    DWORD PTR [eax],edx
c0021e46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021e4a:	83 ec 0c             	sub    esp,0xc
c0021e4d:	50                   	push   eax
c0021e4e:	e8 cd 13 ff ff       	call   c0013220 <Filesystem::~Filesystem()>
c0021e53:	83 c4 10             	add    esp,0x10
c0021e56:	90                   	nop
c0021e57:	83 c4 0c             	add    esp,0xc
c0021e5a:	c3                   	ret    
c0021e5b:	90                   	nop

c0021e5c <ISO9660::~ISO9660()>:
c0021e5c:	83 ec 0c             	sub    esp,0xc
c0021e5f:	83 ec 0c             	sub    esp,0xc
c0021e62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021e66:	e8 cd ff ff ff       	call   c0021e38 <ISO9660::~ISO9660()>
c0021e6b:	83 c4 10             	add    esp,0x10
c0021e6e:	83 ec 08             	sub    esp,0x8
c0021e71:	6a 08                	push   0x8
c0021e73:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021e77:	e8 95 0f ff ff       	call   c0012e11 <operator delete(void*, unsigned long)>
c0021e7c:	83 c4 10             	add    esp,0x10
c0021e7f:	83 c4 0c             	add    esp,0xc
c0021e82:	c3                   	ret    

c0021e83 <__memmem(unsigned char*, int, unsigned char*, int)>:
c0021e83:	55                   	push   ebp
c0021e84:	31 c9                	xor    ecx,ecx
c0021e86:	57                   	push   edi
c0021e87:	56                   	push   esi
c0021e88:	53                   	push   ebx
c0021e89:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0021e8d:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0021e91:	89 eb                	mov    ebx,ebp
c0021e93:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c0021e97:	39 ce                	cmp    esi,ecx
c0021e99:	7e 17                	jle    c0021eb2 <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c0021e9b:	31 d2                	xor    edx,edx
c0021e9d:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c0021ea1:	7d 13                	jge    c0021eb6 <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c0021ea3:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0021ea7:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0021eaa:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c0021ead:	75 0d                	jne    c0021ebc <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c0021eaf:	42                   	inc    edx
c0021eb0:	eb eb                	jmp    c0021e9d <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c0021eb2:	31 c0                	xor    eax,eax
c0021eb4:	eb 0a                	jmp    c0021ec0 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c0021eb6:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0021eba:	eb 04                	jmp    c0021ec0 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c0021ebc:	41                   	inc    ecx
c0021ebd:	43                   	inc    ebx
c0021ebe:	eb d7                	jmp    c0021e97 <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c0021ec0:	5b                   	pop    ebx
c0021ec1:	5e                   	pop    esi
c0021ec2:	5f                   	pop    edi
c0021ec3:	5d                   	pop    ebp
c0021ec4:	c3                   	ret    

c0021ec5 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c0021ec5:	56                   	push   esi
c0021ec6:	53                   	push   ebx
c0021ec7:	52                   	push   edx
c0021ec8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021ecc:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0021ed0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0021ed4:	39 0d a0 25 03 c0    	cmp    DWORD PTR ds:0xc00325a0,ecx
c0021eda:	75 08                	jne    c0021ee4 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c0021edc:	38 05 f4 e3 02 c0    	cmp    BYTE PTR ds:0xc002e3f4,al
c0021ee2:	74 2b                	je     c0021f0f <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x4a>
c0021ee4:	83 ec 0c             	sub    esp,0xc
c0021ee7:	a2 f4 e3 02 c0       	mov    ds:0xc002e3f4,al
c0021eec:	68 c0 25 03 c0       	push   0xc00325c0
c0021ef1:	0f be c0             	movsx  eax,al
c0021ef4:	6a 01                	push   0x1
c0021ef6:	89 0d a0 25 03 c0    	mov    DWORD PTR ds:0xc00325a0,ecx
c0021efc:	31 db                	xor    ebx,ebx
c0021efe:	53                   	push   ebx
c0021eff:	51                   	push   ecx
c0021f00:	ff 34 85 7c f3 02 c0 	push   DWORD PTR [eax*4-0x3ffd0c84]
c0021f07:	e8 70 49 ff ff       	call   c001687c <LogicalDisk::read(unsigned long long, int, void*)>
c0021f0c:	83 c4 20             	add    esp,0x20
c0021f0f:	c7 44 24 18 00 08 00 00 	mov    DWORD PTR [esp+0x18],0x800
c0021f17:	c7 44 24 14 c0 25 03 c0 	mov    DWORD PTR [esp+0x14],0xc00325c0
c0021f1f:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0021f23:	58                   	pop    eax
c0021f24:	5b                   	pop    ebx
c0021f25:	5e                   	pop    esi
c0021f26:	e9 3d e8 fd ff       	jmp    c0000768 <memcpy>
c0021f2b:	90                   	nop

c0021f2c <ISO9660::tryMount(LogicalDisk*, int)>:
c0021f2c:	81 ec 10 08 00 00    	sub    esp,0x810
c0021f32:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c0021f39:	83 c0 41             	add    eax,0x41
c0021f3c:	0f be c0             	movsx  eax,al
c0021f3f:	50                   	push   eax
c0021f40:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021f44:	50                   	push   eax
c0021f45:	6a 10                	push   0x10
c0021f47:	e8 79 ff ff ff       	call   c0021ec5 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021f4c:	83 c4 10             	add    esp,0x10
c0021f4f:	31 c0                	xor    eax,eax
c0021f51:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c0021f56:	75 1d                	jne    c0021f75 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021f58:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c0021f5d:	75 16                	jne    c0021f75 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021f5f:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c0021f64:	75 0f                	jne    c0021f75 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021f66:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c0021f6b:	75 08                	jne    c0021f75 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021f6d:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c0021f72:	0f 94 c0             	sete   al
c0021f75:	81 c4 0c 08 00 00    	add    esp,0x80c
c0021f7b:	c3                   	ret    

c0021f7c <ISO9660::read(void*, unsigned long, void*, int*)>:
c0021f7c:	55                   	push   ebp
c0021f7d:	57                   	push   edi
c0021f7e:	56                   	push   esi
c0021f7f:	53                   	push   ebx
c0021f80:	81 ec 2c 08 00 00    	sub    esp,0x82c
c0021f86:	8b ac 24 44 08 00 00 	mov    ebp,DWORD PTR [esp+0x844]
c0021f8d:	85 ed                	test   ebp,ebp
c0021f8f:	0f 84 d6 01 00 00    	je     c002216b <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c0021f95:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c0021f9d:	0f 84 c8 01 00 00    	je     c002216b <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c0021fa3:	b8 01 00 00 00       	mov    eax,0x1
c0021fa8:	80 7d 18 00          	cmp    BYTE PTR [ebp+0x18],0x0
c0021fac:	0f 85 be 01 00 00    	jne    c0022170 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f4>
c0021fb2:	31 d2                	xor    edx,edx
c0021fb4:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c0021fbb:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0021fbe:	8b 75 10             	mov    esi,DWORD PTR [ebp+0x10]
c0021fc1:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0021fc5:	8b 7d 14             	mov    edi,DWORD PTR [ebp+0x14]
c0021fc8:	89 04 24             	mov    DWORD PTR [esp],eax
c0021fcb:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021fcf:	01 f0                	add    eax,esi
c0021fd1:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0021fd4:	11 fa                	adc    edx,edi
c0021fd6:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0021fda:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0021fde:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0021fe2:	19 d1                	sbb    ecx,edx
c0021fe4:	72 0a                	jb     c0021ff0 <ISO9660::read(void*, unsigned long, void*, int*)+0x74>
c0021fe6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021fea:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021fee:	eb 13                	jmp    c0022003 <ISO9660::read(void*, unsigned long, void*, int*)+0x87>
c0021ff0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021ff4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021ff8:	29 f0                	sub    eax,esi
c0021ffa:	19 fa                	sbb    edx,edi
c0021ffc:	89 04 24             	mov    DWORD PTR [esp],eax
c0021fff:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0022003:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0022006:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0022009:	0f a4 c2 0b          	shld   edx,eax,0xb
c002200d:	51                   	push   ecx
c002200e:	c1 e0 0b             	shl    eax,0xb
c0022011:	01 c6                	add    esi,eax
c0022013:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0022017:	11 d7                	adc    edi,edx
c0022019:	50                   	push   eax
c002201a:	89 fa                	mov    edx,edi
c002201c:	8d 5c 24 28          	lea    ebx,[esp+0x28]
c0022020:	89 f0                	mov    eax,esi
c0022022:	53                   	push   ebx
c0022023:	0f ac d0 0b          	shrd   eax,edx,0xb
c0022027:	50                   	push   eax
c0022028:	e8 98 fe ff ff       	call   c0021ec5 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c002202d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022031:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0022034:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0022038:	81 e2 ff 07 00 00    	and    edx,0x7ff
c002203e:	83 c4 10             	add    esp,0x10
c0022041:	b8 00 08 00 00       	mov    eax,0x800
c0022046:	29 d0                	sub    eax,edx
c0022048:	39 c1                	cmp    ecx,eax
c002204a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c002204e:	83 d9 00             	sbb    ecx,0x0
c0022051:	7d 1c                	jge    c002206f <ISO9660::read(void*, unsigned long, void*, int*)+0xf3>
c0022053:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0022058:	75 12                	jne    c002206c <ISO9660::read(void*, unsigned long, void*, int*)+0xf0>
c002205a:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0022061:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0022067:	e9 fb 00 00 00       	jmp    c0022167 <ISO9660::read(void*, unsigned long, void*, int*)+0x1eb>
c002206c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c002206f:	8d 0c 13             	lea    ecx,[ebx+edx*1]
c0022072:	31 d2                	xor    edx,edx
c0022074:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0022078:	39 c2                	cmp    edx,eax
c002207a:	7d 14                	jge    c0022090 <ISO9660::read(void*, unsigned long, void*, int*)+0x114>
c002207c:	8b 9c 24 4c 08 00 00 	mov    ebx,DWORD PTR [esp+0x84c]
c0022083:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022087:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c002208a:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c002208d:	42                   	inc    edx
c002208e:	eb e8                	jmp    c0022078 <ISO9660::read(void*, unsigned long, void*, int*)+0xfc>
c0022090:	89 c3                	mov    ebx,eax
c0022092:	85 c0                	test   eax,eax
c0022094:	79 02                	jns    c0022098 <ISO9660::read(void*, unsigned long, void*, int*)+0x11c>
c0022096:	31 db                	xor    ebx,ebx
c0022098:	99                   	cdq    
c0022099:	01 c3                	add    ebx,eax
c002209b:	03 9c 24 4c 08 00 00 	add    ebx,DWORD PTR [esp+0x84c]
c00220a2:	01 c6                	add    esi,eax
c00220a4:	11 d7                	adc    edi,edx
c00220a6:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c00220aa:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c00220ae:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00220b1:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c00220b5:	29 c6                	sub    esi,eax
c00220b7:	19 d7                	sbb    edi,edx
c00220b9:	89 34 24             	mov    DWORD PTR [esp],esi
c00220bc:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c00220c0:	b8 ff 07 00 00       	mov    eax,0x7ff
c00220c5:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c00220c8:	b8 00 00 00 00       	mov    eax,0x0
c00220cd:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00220d1:	7d 3e                	jge    c0022111 <ISO9660::read(void*, unsigned long, void*, int*)+0x195>
c00220d3:	52                   	push   edx
c00220d4:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c00220d8:	50                   	push   eax
c00220d9:	53                   	push   ebx
c00220da:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00220de:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00220e2:	0f ac d0 0b          	shrd   eax,edx,0xb
c00220e6:	50                   	push   eax
c00220e7:	e8 d9 fd ff ff       	call   c0021ec5 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00220ec:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c00220f4:	83 54 24 24 00       	adc    DWORD PTR [esp+0x24],0x0
c00220f9:	81 c3 00 08 00 00    	add    ebx,0x800
c00220ff:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c0022107:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c002210c:	83 c4 10             	add    esp,0x10
c002210f:	eb af                	jmp    c00220c0 <ISO9660::read(void*, unsigned long, void*, int*)+0x144>
c0022111:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022115:	0b 04 24             	or     eax,DWORD PTR [esp]
c0022118:	74 32                	je     c002214c <ISO9660::read(void*, unsigned long, void*, int*)+0x1d0>
c002211a:	50                   	push   eax
c002211b:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c002211f:	50                   	push   eax
c0022120:	8d 44 24 28          	lea    eax,[esp+0x28]
c0022124:	50                   	push   eax
c0022125:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0022129:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c002212d:	0f ac fe 0b          	shrd   esi,edi,0xb
c0022131:	56                   	push   esi
c0022132:	e8 8e fd ff ff       	call   c0021ec5 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0022137:	83 c4 0c             	add    esp,0xc
c002213a:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c002213e:	8d 44 24 28          	lea    eax,[esp+0x28]
c0022142:	50                   	push   eax
c0022143:	53                   	push   ebx
c0022144:	e8 1f e6 fd ff       	call   c0000768 <memcpy>
c0022149:	83 c4 10             	add    esp,0x10
c002214c:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0022153:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0022157:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c002215b:	89 38                	mov    DWORD PTR [eax],edi
c002215d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022161:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0022164:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0022167:	31 c0                	xor    eax,eax
c0022169:	eb 05                	jmp    c0022170 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f4>
c002216b:	b8 04 00 00 00       	mov    eax,0x4
c0022170:	81 c4 2c 08 00 00    	add    esp,0x82c
c0022176:	5b                   	pop    ebx
c0022177:	5e                   	pop    esi
c0022178:	5f                   	pop    edi
c0022179:	5d                   	pop    ebp
c002217a:	c3                   	ret    
c002217b:	90                   	nop

c002217c <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c002217c:	55                   	push   ebp
c002217d:	57                   	push   edi
c002217e:	56                   	push   esi
c002217f:	53                   	push   ebx
c0022180:	81 ec 5c 09 00 00    	sub    esp,0x95c
c0022186:	8b b4 24 74 09 00 00 	mov    esi,DWORD PTR [esp+0x974]
c002218d:	85 f6                	test   esi,esi
c002218f:	0f 84 64 02 00 00    	je     c00223f9 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c0022195:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c002219d:	0f 84 56 02 00 00    	je     c00223f9 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c00221a3:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00221a6:	0b 46 08             	or     eax,DWORD PTR [esi+0x8]
c00221a9:	75 0a                	jne    c00221b5 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c00221ab:	b8 07 00 00 00       	mov    eax,0x7
c00221b0:	e9 49 02 00 00       	jmp    c00223fe <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c00221b5:	50                   	push   eax
c00221b6:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c00221ba:	50                   	push   eax
c00221bb:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c00221c2:	53                   	push   ebx
c00221c3:	8b 06                	mov    eax,DWORD PTR [esi]
c00221c5:	c1 e0 0b             	shl    eax,0xb
c00221c8:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c00221cb:	c1 e8 0b             	shr    eax,0xb
c00221ce:	50                   	push   eax
c00221cf:	e8 f1 fc ff ff       	call   c0021ec5 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00221d4:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00221d7:	83 c4 10             	add    esp,0x10
c00221da:	89 c1                	mov    ecx,eax
c00221dc:	8b 56 14             	mov    edx,DWORD PTR [esi+0x14]
c00221df:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c00221e5:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c00221e8:	84 db                	test   bl,bl
c00221ea:	0f 85 90 00 00 00    	jne    c0022280 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x104>
c00221f0:	8d b8 ff 07 00 00    	lea    edi,[eax+0x7ff]
c00221f6:	81 e7 ff 07 00 00    	and    edi,0x7ff
c00221fc:	29 c7                	sub    edi,eax
c00221fe:	89 fb                	mov    ebx,edi
c0022200:	c1 fb 1f             	sar    ebx,0x1f
c0022203:	01 f8                	add    eax,edi
c0022205:	11 da                	adc    edx,ebx
c0022207:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002220b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002220f:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0022212:	89 56 14             	mov    DWORD PTR [esi+0x14],edx
c0022215:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0022218:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c002221b:	89 04 24             	mov    DWORD PTR [esp],eax
c002221e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0022222:	89 d8                	mov    eax,ebx
c0022224:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c0022227:	ba 00 00 00 00       	mov    edx,0x0
c002222c:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0022230:	b8 00 00 00 00       	mov    eax,0x0
c0022235:	73 0b                	jae    c0022242 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c0022237:	8b 04 24             	mov    eax,DWORD PTR [esp]
c002223a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002223e:	29 f8                	sub    eax,edi
c0022240:	19 da                	sbb    edx,ebx
c0022242:	89 d3                	mov    ebx,edx
c0022244:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c0022247:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c002224a:	09 c3                	or     ebx,eax
c002224c:	0f 84 59 ff ff ff    	je     c00221ab <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c0022252:	55                   	push   ebp
c0022253:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c0022257:	50                   	push   eax
c0022258:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c002225f:	53                   	push   ebx
c0022260:	8b 06                	mov    eax,DWORD PTR [esi]
c0022262:	c1 e0 0b             	shl    eax,0xb
c0022265:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c0022269:	c1 e8 0b             	shr    eax,0xb
c002226c:	50                   	push   eax
c002226d:	e8 53 fc ff ff       	call   c0021ec5 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0022272:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0022275:	83 c4 10             	add    esp,0x10
c0022278:	25 ff 07 00 00       	and    eax,0x7ff
c002227d:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c0022280:	57                   	push   edi
c0022281:	6a 28                	push   0x28
c0022283:	6a 00                	push   0x0
c0022285:	8d 44 24 24          	lea    eax,[esp+0x24]
c0022289:	50                   	push   eax
c002228a:	e8 0d e5 fd ff       	call   c000079c <memset>
c002228f:	31 d2                	xor    edx,edx
c0022291:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0022294:	81 e7 ff 07 00 00    	and    edi,0x7ff
c002229a:	89 f8                	mov    eax,edi
c002229c:	83 c0 21             	add    eax,0x21
c002229f:	83 d2 00             	adc    edx,0x0
c00222a2:	89 c7                	mov    edi,eax
c00222a4:	89 d5                	mov    ebp,edx
c00222a6:	83 c4 10             	add    esp,0x10
c00222a9:	31 c9                	xor    ecx,ecx
c00222ab:	8a 84 3c 50 01 00 00 	mov    al,BYTE PTR [esp+edi*1+0x150]
c00222b2:	83 f9 28             	cmp    ecx,0x28
c00222b5:	88 04 24             	mov    BYTE PTR [esp],al
c00222b8:	0f 94 c2             	sete   dl
c00222bb:	88 d0                	mov    al,dl
c00222bd:	ba ff 07 00 00       	mov    edx,0x7ff
c00222c2:	39 fa                	cmp    edx,edi
c00222c4:	ba 00 00 00 00       	mov    edx,0x0
c00222c9:	19 ea                	sbb    edx,ebp
c00222cb:	0f 92 c2             	setb   dl
c00222ce:	09 c2                	or     edx,eax
c00222d0:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c00222d4:	0f 94 c0             	sete   al
c00222d7:	08 d0                	or     al,dl
c00222d9:	75 16                	jne    c00222f1 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c00222db:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c00222df:	74 10                	je     c00222f1 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c00222e1:	8a 04 24             	mov    al,BYTE PTR [esp]
c00222e4:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c00222e8:	41                   	inc    ecx
c00222e9:	83 c7 01             	add    edi,0x1
c00222ec:	83 d5 00             	adc    ebp,0x0
c00222ef:	eb ba                	jmp    c00222ab <ISO9660::readDir(void*, unsigned long, void*, int*)+0x12f>
c00222f1:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c00222f8:	83 ec 0c             	sub    esp,0xc
c00222fb:	8d 7c 24 24          	lea    edi,[esp+0x24]
c00222ff:	57                   	push   edi
c0022300:	e8 b3 e4 fd ff       	call   c00007b8 <strlen>
c0022305:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c002230d:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0022311:	8d 8c 24 60 09 00 00 	lea    ecx,[esp+0x960]
c0022318:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c002231b:	5a                   	pop    edx
c002231c:	25 ff 07 00 00       	and    eax,0x7ff
c0022321:	01 c8                	add    eax,ecx
c0022323:	59                   	pop    ecx
c0022324:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c002232a:	83 e0 02             	and    eax,0x2
c002232d:	3c 01                	cmp    al,0x1
c002232f:	19 c0                	sbb    eax,eax
c0022331:	83 c0 02             	add    eax,0x2
c0022334:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0022338:	57                   	push   edi
c0022339:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c002233d:	50                   	push   eax
c002233e:	e8 15 e5 fd ff       	call   c0000858 <strcpy>
c0022343:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c0022347:	83 c4 10             	add    esp,0x10
c002234a:	84 c0                	test   al,al
c002234c:	75 21                	jne    c002236f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1f3>
c002234e:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c0022356:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c002235e:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0022366:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c002236d:	eb 28                	jmp    c0022397 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c002236f:	fe c8                	dec    al
c0022371:	75 24                	jne    c0022397 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c0022373:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c002237b:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0022383:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c002238b:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c0022392:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c0022397:	0f b6 fb             	movzx  edi,bl
c002239a:	31 db                	xor    ebx,ebx
c002239c:	50                   	push   eax
c002239d:	ff b4 24 7c 09 00 00 	push   DWORD PTR [esp+0x97c]
c00223a4:	8d 44 24 48          	lea    eax,[esp+0x48]
c00223a8:	50                   	push   eax
c00223a9:	ff b4 24 88 09 00 00 	push   DWORD PTR [esp+0x988]
c00223b0:	e8 b3 e3 fd ff       	call   c0000768 <memcpy>
c00223b5:	8b 84 24 90 09 00 00 	mov    eax,DWORD PTR [esp+0x990]
c00223bc:	89 f9                	mov    ecx,edi
c00223be:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c00223c4:	01 7e 10             	add    DWORD PTR [esi+0x10],edi
c00223c7:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c00223ca:	11 5e 14             	adc    DWORD PTR [esi+0x14],ebx
c00223cd:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c00223d0:	83 c4 10             	add    esp,0x10
c00223d3:	39 c7                	cmp    edi,eax
c00223d5:	89 df                	mov    edi,ebx
c00223d7:	19 d7                	sbb    edi,edx
c00223d9:	72 10                	jb     c00223eb <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c00223db:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c00223e2:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00223e9:	eb 0a                	jmp    c00223f5 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x279>
c00223eb:	29 c8                	sub    eax,ecx
c00223ed:	19 da                	sbb    edx,ebx
c00223ef:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c00223f2:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c00223f5:	31 c0                	xor    eax,eax
c00223f7:	eb 05                	jmp    c00223fe <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c00223f9:	b8 04 00 00 00       	mov    eax,0x4
c00223fe:	81 c4 5c 09 00 00    	add    esp,0x95c
c0022404:	5b                   	pop    ebx
c0022405:	5e                   	pop    esi
c0022406:	5f                   	pop    edi
c0022407:	5d                   	pop    ebp
c0022408:	c3                   	ret    

c0022409 <readRoot(unsigned int*, unsigned int*, char)>:
c0022409:	81 ec 40 08 00 00    	sub    esp,0x840
c002240f:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c0022417:	50                   	push   eax
c0022418:	8d 44 24 38          	lea    eax,[esp+0x38]
c002241c:	50                   	push   eax
c002241d:	6a 10                	push   0x10
c002241f:	e8 a1 fa ff ff       	call   c0021ec5 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0022424:	83 c4 0c             	add    esp,0xc
c0022427:	6a 22                	push   0x22
c0022429:	8d 84 24 d4 00 00 00 	lea    eax,[esp+0xd4]
c0022430:	50                   	push   eax
c0022431:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c0022435:	50                   	push   eax
c0022436:	e8 2d e3 fd ff       	call   c0000768 <memcpy>
c002243b:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0022442:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0022446:	89 10                	mov    DWORD PTR [eax],edx
c0022448:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c002244f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0022453:	89 10                	mov    DWORD PTR [eax],edx
c0022455:	b0 01                	mov    al,0x1
c0022457:	81 c4 4c 08 00 00    	add    esp,0x84c
c002245d:	c3                   	ret    

c002245e <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c002245e:	55                   	push   ebp
c002245f:	57                   	push   edi
c0022460:	56                   	push   esi
c0022461:	53                   	push   ebx
c0022462:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0022468:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c002246f:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c0022476:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c002247a:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c002247e:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0022482:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0022486:	75 03                	jne    c002248b <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0022488:	83 c3 02             	add    ebx,0x2
c002248b:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c002248e:	75 03                	jne    c0022493 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c0022490:	43                   	inc    ebx
c0022491:	eb f8                	jmp    c002248b <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0022493:	51                   	push   ecx
c0022494:	68 00 01 00 00       	push   0x100
c0022499:	6a 00                	push   0x0
c002249b:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002249f:	50                   	push   eax
c00224a0:	e8 f7 e2 fd ff       	call   c000079c <memset>
c00224a5:	83 c4 10             	add    esp,0x10
c00224a8:	31 d2                	xor    edx,edx
c00224aa:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00224ad:	84 c0                	test   al,al
c00224af:	74 21                	je     c00224d2 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c00224b1:	3c 2f                	cmp    al,0x2f
c00224b3:	75 0b                	jne    c00224c0 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c00224b5:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c00224b9:	bd 01 00 00 00       	mov    ebp,0x1
c00224be:	eb 14                	jmp    c00224d4 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c00224c0:	8d 48 9f             	lea    ecx,[eax-0x61]
c00224c3:	80 f9 19             	cmp    cl,0x19
c00224c6:	77 03                	ja     c00224cb <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c00224c8:	83 e8 20             	sub    eax,0x20
c00224cb:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c00224cf:	42                   	inc    edx
c00224d0:	eb d8                	jmp    c00224aa <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c00224d2:	31 ed                	xor    ebp,ebp
c00224d4:	83 ec 0c             	sub    esp,0xc
c00224d7:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c00224de:	e8 4f d4 fe ff       	call   c000f932 <malloc>
c00224e3:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c00224ea:	89 c6                	mov    esi,eax
c00224ec:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c00224f2:	c1 ef 0b             	shr    edi,0xb
c00224f5:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c00224fc:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0022500:	83 c4 10             	add    esp,0x10
c0022503:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c0022508:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c002250c:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c0022513:	74 28                	je     c002253d <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c0022515:	52                   	push   edx
c0022516:	57                   	push   edi
c0022517:	50                   	push   eax
c0022518:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002251c:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0022523:	e8 9d f9 ff ff       	call   c0021ec5 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0022528:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002252c:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c0022533:	05 00 08 00 00       	add    eax,0x800
c0022538:	83 c4 10             	add    esp,0x10
c002253b:	eb cb                	jmp    c0022508 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c002253d:	83 ec 0c             	sub    esp,0xc
c0022540:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0022544:	57                   	push   edi
c0022545:	e8 6e e2 fd ff       	call   c00007b8 <strlen>
c002254a:	50                   	push   eax
c002254b:	57                   	push   edi
c002254c:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c0022553:	56                   	push   esi
c0022554:	e8 2a f9 ff ff       	call   c0021e83 <__memmem(unsigned char*, int, unsigned char*, int)>
c0022559:	83 c4 20             	add    esp,0x20
c002255c:	85 c0                	test   eax,eax
c002255e:	75 13                	jne    c0022573 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c0022560:	83 ec 0c             	sub    esp,0xc
c0022563:	56                   	push   esi
c0022564:	e8 d9 d3 fe ff       	call   c000f942 <free>
c0022569:	83 c4 10             	add    esp,0x10
c002256c:	31 c0                	xor    eax,eax
c002256e:	e9 b3 00 00 00       	jmp    c0022626 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0022573:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c0022577:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c002257b:	c1 e7 08             	shl    edi,0x8
c002257e:	c1 e2 10             	shl    edx,0x10
c0022581:	09 d7                	or     edi,edx
c0022583:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c0022587:	09 d7                	or     edi,edx
c0022589:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c002258d:	c1 e2 18             	shl    edx,0x18
c0022590:	09 d7                	or     edi,edx
c0022592:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c0022596:	89 d1                	mov    ecx,edx
c0022598:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c002259c:	c1 e1 08             	shl    ecx,0x8
c002259f:	c1 e2 10             	shl    edx,0x10
c00225a2:	09 ca                	or     edx,ecx
c00225a4:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c00225a8:	09 ca                	or     edx,ecx
c00225aa:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c00225ae:	c1 e1 18             	shl    ecx,0x18
c00225b1:	09 ca                	or     edx,ecx
c00225b3:	89 e9                	mov    ecx,ebp
c00225b5:	84 c9                	test   cl,cl
c00225b7:	74 3c                	je     c00225f5 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c00225b9:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00225bd:	83 ec 0c             	sub    esp,0xc
c00225c0:	56                   	push   esi
c00225c1:	e8 7c d3 fe ff       	call   c000f942 <free>
c00225c6:	83 c4 0c             	add    esp,0xc
c00225c9:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c00225d0:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c00225d5:	50                   	push   eax
c00225d6:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c00225dd:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c00225e4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00225e8:	52                   	push   edx
c00225e9:	57                   	push   edi
c00225ea:	53                   	push   ebx
c00225eb:	e8 6e fe ff ff       	call   c002245e <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c00225f0:	83 c4 20             	add    esp,0x20
c00225f3:	eb 31                	jmp    c0022626 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c00225f5:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c00225f8:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c00225ff:	d0 e8                	shr    al,1
c0022601:	89 3b                	mov    DWORD PTR [ebx],edi
c0022603:	83 e0 01             	and    eax,0x1
c0022606:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c002260d:	83 ec 0c             	sub    esp,0xc
c0022610:	89 13                	mov    DWORD PTR [ebx],edx
c0022612:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c0022619:	89 03                	mov    DWORD PTR [ebx],eax
c002261b:	56                   	push   esi
c002261c:	e8 21 d3 fe ff       	call   c000f942 <free>
c0022621:	83 c4 10             	add    esp,0x10
c0022624:	b0 01                	mov    al,0x1
c0022626:	81 c4 1c 01 00 00    	add    esp,0x11c
c002262c:	5b                   	pop    ebx
c002262d:	5e                   	pop    esi
c002262e:	5f                   	pop    edi
c002262f:	5d                   	pop    ebp
c0022630:	c3                   	ret    

c0022631 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c0022631:	55                   	push   ebp
c0022632:	57                   	push   edi
c0022633:	56                   	push   esi
c0022634:	53                   	push   ebx
c0022635:	83 ec 20             	sub    esp,0x20
c0022638:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c002263c:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0022640:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0022644:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c002264c:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0022654:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c0022659:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c002265f:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c0022665:	57                   	push   edi
c0022666:	8d 44 24 14          	lea    eax,[esp+0x14]
c002266a:	50                   	push   eax
c002266b:	8d 44 24 14          	lea    eax,[esp+0x14]
c002266f:	50                   	push   eax
c0022670:	e8 94 fd ff ff       	call   c0022409 <readRoot(unsigned int*, unsigned int*, char)>
c0022675:	5a                   	pop    edx
c0022676:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002267a:	e8 39 e1 fd ff       	call   c00007b8 <strlen>
c002267f:	83 c4 10             	add    esp,0x10
c0022682:	83 f8 03             	cmp    eax,0x3
c0022685:	77 17                	ja     c002269e <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c0022687:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002268b:	89 03                	mov    DWORD PTR [ebx],eax
c002268d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022691:	89 06                	mov    DWORD PTR [esi],eax
c0022693:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c002269a:	b0 01                	mov    al,0x1
c002269c:	eb 19                	jmp    c00226b7 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c002269e:	50                   	push   eax
c002269f:	55                   	push   ebp
c00226a0:	57                   	push   edi
c00226a1:	56                   	push   esi
c00226a2:	53                   	push   ebx
c00226a3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00226a7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00226ab:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00226af:	e8 aa fd ff ff       	call   c002245e <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c00226b4:	83 c4 20             	add    esp,0x20
c00226b7:	83 c4 1c             	add    esp,0x1c
c00226ba:	5b                   	pop    ebx
c00226bb:	5e                   	pop    esi
c00226bc:	5f                   	pop    edi
c00226bd:	5d                   	pop    ebp
c00226be:	c3                   	ret    
c00226bf:	90                   	nop

c00226c0 <ISO9660::open(char const*, void**, FileOpenMode)>:
c00226c0:	57                   	push   edi
c00226c1:	56                   	push   esi
c00226c2:	53                   	push   ebx
c00226c3:	83 ec 10             	sub    esp,0x10
c00226c6:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00226ca:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00226ce:	85 ff                	test   edi,edi
c00226d0:	0f 84 9d 00 00 00    	je     c0022773 <ISO9660::open(char const*, void**, FileOpenMode)+0xb3>
c00226d6:	85 f6                	test   esi,esi
c00226d8:	0f 84 95 00 00 00    	je     c0022773 <ISO9660::open(char const*, void**, FileOpenMode)+0xb3>
c00226de:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c00226e3:	74 17                	je     c00226fc <ISO9660::open(char const*, void**, FileOpenMode)+0x3c>
c00226e5:	83 ec 0c             	sub    esp,0xc
c00226e8:	68 37 d3 02 c0       	push   0xc002d337
c00226ed:	e8 ff 07 ff ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c00226f2:	83 c4 10             	add    esp,0x10
c00226f5:	b8 03 00 00 00       	mov    eax,0x3
c00226fa:	eb 7c                	jmp    c0022778 <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c00226fc:	83 ec 0c             	sub    esp,0xc
c00226ff:	6a 1c                	push   0x1c
c0022701:	e8 2c d2 fe ff       	call   c000f932 <malloc>
c0022706:	89 07                	mov    DWORD PTR [edi],eax
c0022708:	89 c3                	mov    ebx,eax
c002270a:	58                   	pop    eax
c002270b:	8d 44 24 18          	lea    eax,[esp+0x18]
c002270f:	50                   	push   eax
c0022710:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0022713:	50                   	push   eax
c0022714:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0022718:	50                   	push   eax
c0022719:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002271d:	50                   	push   eax
c002271e:	56                   	push   esi
c002271f:	e8 0d ff ff ff       	call   c0022631 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0022724:	83 c4 20             	add    esp,0x20
c0022727:	84 c0                	test   al,al
c0022729:	74 07                	je     c0022732 <ISO9660::open(char const*, void**, FileOpenMode)+0x72>
c002272b:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0022730:	74 0b                	je     c002273d <ISO9660::open(char const*, void**, FileOpenMode)+0x7d>
c0022732:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c0022736:	b8 01 00 00 00       	mov    eax,0x1
c002273b:	eb 3b                	jmp    c0022778 <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c002273d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022741:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0022745:	89 03                	mov    DWORD PTR [ebx],eax
c0022747:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c002274e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022752:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0022759:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0022760:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0022763:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c002276a:	8a 06                	mov    al,BYTE PTR [esi]
c002276c:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c002276f:	31 c0                	xor    eax,eax
c0022771:	eb 05                	jmp    c0022778 <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c0022773:	b8 04 00 00 00       	mov    eax,0x4
c0022778:	83 c4 10             	add    esp,0x10
c002277b:	5b                   	pop    ebx
c002277c:	5e                   	pop    esi
c002277d:	5f                   	pop    edi
c002277e:	c3                   	ret    
c002277f:	90                   	nop

c0022780 <ISO9660::exists(char const*)>:
c0022780:	83 ec 28             	sub    esp,0x28
c0022783:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022787:	8d 54 24 18          	lea    edx,[esp+0x18]
c002278b:	52                   	push   edx
c002278c:	0f be 10             	movsx  edx,BYTE PTR [eax]
c002278f:	52                   	push   edx
c0022790:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0022794:	52                   	push   edx
c0022795:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0022799:	52                   	push   edx
c002279a:	50                   	push   eax
c002279b:	e8 91 fe ff ff       	call   c0022631 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c00227a0:	83 c4 3c             	add    esp,0x3c
c00227a3:	c3                   	ret    

c00227a4 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c00227a4:	56                   	push   esi
c00227a5:	53                   	push   ebx
c00227a6:	83 ec 14             	sub    esp,0x14
c00227a9:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c00227ad:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00227b1:	85 db                	test   ebx,ebx
c00227b3:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00227b7:	0f 94 c2             	sete   dl
c00227ba:	85 f6                	test   esi,esi
c00227bc:	0f 94 c0             	sete   al
c00227bf:	08 c2                	or     dl,al
c00227c1:	75 68                	jne    c002282b <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c00227c3:	85 c9                	test   ecx,ecx
c00227c5:	74 64                	je     c002282b <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c00227c7:	83 ec 0c             	sub    esp,0xc
c00227ca:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00227cd:	8d 44 24 18          	lea    eax,[esp+0x18]
c00227d1:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00227d7:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00227de:	50                   	push   eax
c00227df:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c00227e2:	50                   	push   eax
c00227e3:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00227e7:	50                   	push   eax
c00227e8:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00227ec:	50                   	push   eax
c00227ed:	51                   	push   ecx
c00227ee:	e8 3e fe ff ff       	call   c0022631 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c00227f3:	83 c4 20             	add    esp,0x20
c00227f6:	ba 01 00 00 00       	mov    edx,0x1
c00227fb:	84 c0                	test   al,al
c00227fd:	74 31                	je     c0022830 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c00227ff:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022803:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c002280a:	89 03                	mov    DWORD PTR [ebx],eax
c002280c:	ba 00 00 00 00       	mov    edx,0x0
c0022811:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022815:	85 c0                	test   eax,eax
c0022817:	0f 95 06             	setne  BYTE PTR [esi]
c002281a:	74 14                	je     c0022830 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c002281c:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0022822:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0022829:	eb 05                	jmp    c0022830 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c002282b:	ba 04 00 00 00       	mov    edx,0x4
c0022830:	83 c4 14             	add    esp,0x14
c0022833:	89 d0                	mov    eax,edx
c0022835:	5b                   	pop    ebx
c0022836:	5e                   	pop    esi
c0022837:	c3                   	ret    

c0022838 <ISO9660::openDir(char const*, void**)>:
c0022838:	57                   	push   edi
c0022839:	56                   	push   esi
c002283a:	53                   	push   ebx
c002283b:	83 ec 10             	sub    esp,0x10
c002283e:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0022842:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0022846:	85 ff                	test   edi,edi
c0022848:	0f 84 95 00 00 00    	je     c00228e3 <ISO9660::openDir(char const*, void**)+0xab>
c002284e:	85 f6                	test   esi,esi
c0022850:	0f 84 8d 00 00 00    	je     c00228e3 <ISO9660::openDir(char const*, void**)+0xab>
c0022856:	83 ec 0c             	sub    esp,0xc
c0022859:	6a 1c                	push   0x1c
c002285b:	e8 d2 d0 fe ff       	call   c000f932 <malloc>
c0022860:	89 07                	mov    DWORD PTR [edi],eax
c0022862:	89 c3                	mov    ebx,eax
c0022864:	59                   	pop    ecx
c0022865:	8d 44 24 18          	lea    eax,[esp+0x18]
c0022869:	50                   	push   eax
c002286a:	0f be 06             	movsx  eax,BYTE PTR [esi]
c002286d:	50                   	push   eax
c002286e:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0022872:	50                   	push   eax
c0022873:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0022877:	50                   	push   eax
c0022878:	56                   	push   esi
c0022879:	e8 b3 fd ff ff       	call   c0022631 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c002287e:	83 c4 20             	add    esp,0x20
c0022881:	84 c0                	test   al,al
c0022883:	74 07                	je     c002288c <ISO9660::openDir(char const*, void**)+0x54>
c0022885:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c002288a:	75 21                	jne    c00228ad <ISO9660::openDir(char const*, void**)+0x75>
c002288c:	0f b6 c0             	movzx  eax,al
c002288f:	52                   	push   edx
c0022890:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0022894:	50                   	push   eax
c0022895:	68 5d d3 02 c0       	push   0xc002d35d
c002289a:	e8 52 06 ff ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c002289f:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c00228a3:	83 c4 10             	add    esp,0x10
c00228a6:	b8 01 00 00 00       	mov    eax,0x1
c00228ab:	eb 3b                	jmp    c00228e8 <ISO9660::openDir(char const*, void**)+0xb0>
c00228ad:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00228b1:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c00228b5:	89 03                	mov    DWORD PTR [ebx],eax
c00228b7:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00228be:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00228c2:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00228c9:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00228d0:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00228d3:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c00228da:	8a 06                	mov    al,BYTE PTR [esi]
c00228dc:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c00228df:	31 c0                	xor    eax,eax
c00228e1:	eb 05                	jmp    c00228e8 <ISO9660::openDir(char const*, void**)+0xb0>
c00228e3:	b8 04 00 00 00       	mov    eax,0x4
c00228e8:	83 c4 10             	add    esp,0x10
c00228eb:	5b                   	pop    ebx
c00228ec:	5e                   	pop    esi
c00228ed:	5f                   	pop    edi
c00228ee:	c3                   	ret    
c00228ef:	90                   	nop

c00228f0 <ISO9660::ISO9660()>:
c00228f0:	83 ec 0c             	sub    esp,0xc
c00228f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00228f7:	83 ec 0c             	sub    esp,0xc
c00228fa:	50                   	push   eax
c00228fb:	e8 fc 08 ff ff       	call   c00131fc <Filesystem::Filesystem()>
c0022900:	83 c4 10             	add    esp,0x10
c0022903:	ba 80 d3 02 c0       	mov    edx,0xc002d380
c0022908:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002290c:	89 10                	mov    DWORD PTR [eax],edx
c002290e:	90                   	nop
c002290f:	83 c4 0c             	add    esp,0xc
c0022912:	c3                   	ret    
c0022913:	90                   	nop

c0022914 <SoundChannel::~SoundChannel()>:
c0022914:	83 ec 0c             	sub    esp,0xc
c0022917:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002291b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c002291e:	83 ec 0c             	sub    esp,0xc
c0022921:	50                   	push   eax
c0022922:	e8 1b d0 fe ff       	call   c000f942 <free>
c0022927:	83 c4 10             	add    esp,0x10
c002292a:	90                   	nop
c002292b:	83 c4 0c             	add    esp,0xc
c002292e:	c3                   	ret    
c002292f:	90                   	nop

c0022930 <SoundChannel::setSpeed(float)>:
c0022930:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022934:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022938:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c002293b:	c3                   	ret    

c002293c <SoundChannel::getSpeed()>:
c002293c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022940:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0022943:	c3                   	ret    

c0022944 <SoundChannel::setVolume(int)>:
c0022944:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022948:	83 f8 64             	cmp    eax,0x64
c002294b:	7e 05                	jle    c0022952 <SoundChannel::setVolume(int)+0xe>
c002294d:	b8 64 00 00 00       	mov    eax,0x64
c0022952:	85 c0                	test   eax,eax
c0022954:	79 02                	jns    c0022958 <SoundChannel::setVolume(int)+0x14>
c0022956:	31 c0                	xor    eax,eax
c0022958:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002295c:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c002295f:	c3                   	ret    

c0022960 <SoundChannel::getVolume()>:
c0022960:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022964:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0022967:	c3                   	ret    

c0022968 <SoundChannel::pause()>:
c0022968:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002296c:	c6 40 20 01          	mov    BYTE PTR [eax+0x20],0x1
c0022970:	c3                   	ret    
c0022971:	90                   	nop

c0022972 <SoundChannel::SoundChannel(int, int, int, int)>:
c0022972:	83 ec 1c             	sub    esp,0x1c
c0022975:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0022979:	e8 ea ff ff ff       	call   c0022968 <SoundChannel::pause()>
c002297e:	83 c4 04             	add    esp,0x4
c0022981:	6a 50                	push   0x50
c0022983:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0022987:	e8 b8 ff ff ff       	call   c0022944 <SoundChannel::setVolume(int)>
c002298c:	83 c4 08             	add    esp,0x8
c002298f:	a1 fc d3 02 c0       	mov    eax,ds:0xc002d3fc
c0022994:	50                   	push   eax
c0022995:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0022999:	e8 92 ff ff ff       	call   c0022930 <SoundChannel::setSpeed(float)>
c002299e:	83 c4 08             	add    esp,0x8
c00229a1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00229a5:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00229a9:	89 10                	mov    DWORD PTR [eax],edx
c00229ab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00229af:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00229b3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00229b6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00229ba:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00229be:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00229c1:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c00229c6:	75 23                	jne    c00229eb <SoundChannel::SoundChannel(int, int, int, int)+0x79>
c00229c8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00229cc:	8b 10                	mov    edx,DWORD PTR [eax]
c00229ce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00229d2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00229d5:	0f af c2             	imul   eax,edx
c00229d8:	85 c0                	test   eax,eax
c00229da:	79 03                	jns    c00229df <SoundChannel::SoundChannel(int, int, int, int)+0x6d>
c00229dc:	83 c0 03             	add    eax,0x3
c00229df:	c1 f8 02             	sar    eax,0x2
c00229e2:	05 a0 0f 00 00       	add    eax,0xfa0
c00229e7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00229eb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00229ef:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00229f3:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00229f6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00229fa:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0022a01:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022a05:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0022a0c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022a10:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0022a13:	c1 e0 02             	shl    eax,0x2
c0022a16:	83 ec 0c             	sub    esp,0xc
c0022a19:	50                   	push   eax
c0022a1a:	e8 13 cf fe ff       	call   c000f932 <malloc>
c0022a1f:	83 c4 10             	add    esp,0x10
c0022a22:	89 c2                	mov    edx,eax
c0022a24:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022a28:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0022a2b:	83 ec 04             	sub    esp,0x4
c0022a2e:	8d 44 24 08          	lea    eax,[esp+0x8]
c0022a32:	50                   	push   eax
c0022a33:	6a 01                	push   0x1
c0022a35:	6a 04                	push   0x4
c0022a37:	e8 87 61 fe ff       	call   c0008bc3 <src_new>
c0022a3c:	83 c4 10             	add    esp,0x10
c0022a3f:	89 c2                	mov    edx,eax
c0022a41:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022a45:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0022a48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022a4c:	85 c0                	test   eax,eax
c0022a4e:	74 10                	je     c0022a60 <SoundChannel::SoundChannel(int, int, int, int)+0xee>
c0022a50:	83 ec 0c             	sub    esp,0xc
c0022a53:	68 e0 d3 02 c0       	push   0xc002d3e0
c0022a58:	e8 54 7e ff ff       	call   c001a8b1 <Krnl::panic(char const*)>
c0022a5d:	83 c4 10             	add    esp,0x10
c0022a60:	a0 c0 31 03 c0       	mov    al,ds:0xc00331c0
c0022a65:	83 f0 01             	xor    eax,0x1
c0022a68:	84 c0                	test   al,al
c0022a6a:	74 57                	je     c0022ac3 <SoundChannel::SoundChannel(int, int, int, int)+0x151>
c0022a6c:	a1 00 d4 02 c0       	mov    eax,ds:0xc002d400
c0022a71:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022a75:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0022a7d:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0022a85:	7f 35                	jg     c0022abc <SoundChannel::SoundChannel(int, int, int, int)+0x14a>
c0022a87:	83 ec 0c             	sub    esp,0xc
c0022a8a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0022a8e:	e8 6c 50 00 00       	call   c0027aff <__floatsisf>
c0022a93:	83 c4 10             	add    esp,0x10
c0022a96:	8b 15 00 d4 02 c0    	mov    edx,DWORD PTR ds:0xc002d400
c0022a9c:	83 ec 08             	sub    esp,0x8
c0022a9f:	52                   	push   edx
c0022aa0:	50                   	push   eax
c0022aa1:	e8 6b 4c 00 00       	call   c0027711 <__mulsf3>
c0022aa6:	83 c4 10             	add    esp,0x10
c0022aa9:	89 c2                	mov    edx,eax
c0022aab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022aaf:	89 14 85 c0 2d 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd240],edx
c0022ab6:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0022aba:	eb c1                	jmp    c0022a7d <SoundChannel::SoundChannel(int, int, int, int)+0x10b>
c0022abc:	c6 05 c0 31 03 c0 01 	mov    BYTE PTR ds:0xc00331c0,0x1
c0022ac3:	90                   	nop
c0022ac4:	83 c4 1c             	add    esp,0x1c
c0022ac7:	c3                   	ret    

c0022ac8 <SoundChannel::play()>:
c0022ac8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022acc:	c6 40 20 00          	mov    BYTE PTR [eax+0x20],0x0
c0022ad0:	c3                   	ret    
c0022ad1:	90                   	nop

c0022ad2 <SoundChannel::paused()>:
c0022ad2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022ad6:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c0022ad9:	c3                   	ret    

c0022ada <SoundChannel::getSampleRate()>:
c0022ada:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022ade:	8b 00                	mov    eax,DWORD PTR [eax]
c0022ae0:	c3                   	ret    
c0022ae1:	90                   	nop

c0022ae2 <SoundChannel::getBits()>:
c0022ae2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022ae6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022ae9:	c3                   	ret    

c0022aea <SoundChannel::getBufferUsed()>:
c0022aea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022aee:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0022af1:	c3                   	ret    

c0022af2 <SoundChannel::getBufferSize()>:
c0022af2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022af6:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0022af9:	c3                   	ret    

c0022afa <SoundChannel::unbuffer(float*, int, int)>:
c0022afa:	56                   	push   esi
c0022afb:	53                   	push   ebx
c0022afc:	83 ec 40             	sub    esp,0x40
c0022aff:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0022b03:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0022b06:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0022b0a:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0022b0d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0022b11:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0022b15:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0022b19:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0022b1d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0022b21:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0022b25:	e8 d5 4f 00 00       	call   c0027aff <__floatsisf>
c0022b2a:	5a                   	pop    edx
c0022b2b:	89 c6                	mov    esi,eax
c0022b2d:	ff 33                	push   DWORD PTR [ebx]
c0022b2f:	e8 cb 4f 00 00       	call   c0027aff <__floatsisf>
c0022b34:	59                   	pop    ecx
c0022b35:	5a                   	pop    edx
c0022b36:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0022b39:	50                   	push   eax
c0022b3a:	e8 d2 4b 00 00       	call   c0027711 <__mulsf3>
c0022b3f:	59                   	pop    ecx
c0022b40:	5a                   	pop    edx
c0022b41:	50                   	push   eax
c0022b42:	56                   	push   esi
c0022b43:	e8 8c 4d 00 00       	call   c00278d4 <__divsf3>
c0022b48:	89 04 24             	mov    DWORD PTR [esp],eax
c0022b4b:	e8 7f 62 00 00       	call   c0028dcf <__extendsfdf2>
c0022b50:	59                   	pop    ecx
c0022b51:	5e                   	pop    esi
c0022b52:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0022b56:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0022b5a:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0022b62:	8d 44 24 14          	lea    eax,[esp+0x14]
c0022b66:	50                   	push   eax
c0022b67:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0022b6a:	e8 49 5c fe ff       	call   c00087b8 <src_process>
c0022b6f:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0022b73:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0022b76:	83 c4 0c             	add    esp,0xc
c0022b79:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0022b7c:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c0022b7f:	29 d0                	sub    eax,edx
c0022b81:	c1 e0 02             	shl    eax,0x2
c0022b84:	50                   	push   eax
c0022b85:	8d 04 91             	lea    eax,[ecx+edx*4]
c0022b88:	50                   	push   eax
c0022b89:	51                   	push   ecx
c0022b8a:	e8 11 db fd ff       	call   c00006a0 <memmove>
c0022b8f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022b93:	83 c4 44             	add    esp,0x44
c0022b96:	5b                   	pop    ebx
c0022b97:	5e                   	pop    esi
c0022b98:	c3                   	ret    
c0022b99:	90                   	nop

c0022b9a <SoundChannel::buffer8(unsigned char*, int)>:
c0022b9a:	55                   	push   ebp
c0022b9b:	57                   	push   edi
c0022b9c:	56                   	push   esi
c0022b9d:	53                   	push   ebx
c0022b9e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022ba2:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c0022ba6:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0022ba9:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0022bad:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c0022bb0:	74 7a                	je     c0022c2c <SoundChannel::buffer8(unsigned char*, int)+0x92>
c0022bb2:	85 ff                	test   edi,edi
c0022bb4:	7e 76                	jle    c0022c2c <SoundChannel::buffer8(unsigned char*, int)+0x92>
c0022bb6:	0f b6 5d 00          	movzx  ebx,BYTE PTR [ebp+0x0]
c0022bba:	8d 70 01             	lea    esi,[eax+0x1]
c0022bbd:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0022bc0:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0022bc3:	8b 1c 9d c0 2d 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcd240]
c0022bca:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c0022bcd:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0022bd0:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c0022bd3:	74 5e                	je     c0022c33 <SoundChannel::buffer8(unsigned char*, int)+0x99>
c0022bd5:	83 ff 01             	cmp    edi,0x1
c0022bd8:	74 4b                	je     c0022c25 <SoundChannel::buffer8(unsigned char*, int)+0x8b>
c0022bda:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0022bde:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0022be1:	8d 70 01             	lea    esi,[eax+0x1]
c0022be4:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0022be7:	8b 1c 9d c0 2d 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcd240]
c0022bee:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c0022bf1:	b8 02 00 00 00       	mov    eax,0x2
c0022bf6:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c0022bf9:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c0022bfc:	75 23                	jne    c0022c21 <SoundChannel::buffer8(unsigned char*, int)+0x87>
c0022bfe:	eb 27                	jmp    c0022c27 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c0022c00:	0f b6 5c 05 00       	movzx  ebx,BYTE PTR [ebp+eax*1+0x0]
c0022c05:	8d 71 01             	lea    esi,[ecx+0x1]
c0022c08:	40                   	inc    eax
c0022c09:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0022c0c:	8b 72 10             	mov    esi,DWORD PTR [edx+0x10]
c0022c0f:	8b 1c 9d c0 2d 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcd240]
c0022c16:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c0022c19:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c0022c1c:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c0022c1f:	74 06                	je     c0022c27 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c0022c21:	39 c7                	cmp    edi,eax
c0022c23:	75 db                	jne    c0022c00 <SoundChannel::buffer8(unsigned char*, int)+0x66>
c0022c25:	89 f8                	mov    eax,edi
c0022c27:	5b                   	pop    ebx
c0022c28:	5e                   	pop    esi
c0022c29:	5f                   	pop    edi
c0022c2a:	5d                   	pop    ebp
c0022c2b:	c3                   	ret    
c0022c2c:	5b                   	pop    ebx
c0022c2d:	31 c0                	xor    eax,eax
c0022c2f:	5e                   	pop    esi
c0022c30:	5f                   	pop    edi
c0022c31:	5d                   	pop    ebp
c0022c32:	c3                   	ret    
c0022c33:	b8 01 00 00 00       	mov    eax,0x1
c0022c38:	eb ed                	jmp    c0022c27 <SoundChannel::buffer8(unsigned char*, int)+0x8d>

c0022c3a <SoundDevice::SoundDevice(char const*)>:
c0022c3a:	83 ec 1c             	sub    esp,0x1c
c0022c3d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022c41:	83 ec 08             	sub    esp,0x8
c0022c44:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022c48:	50                   	push   eax
c0022c49:	e8 c8 18 ff ff       	call   c0014516 <Device::Device(char const*)>
c0022c4e:	83 c4 10             	add    esp,0x10
c0022c51:	ba 0c d4 02 c0       	mov    edx,0xc002d40c
c0022c56:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022c5a:	89 10                	mov    DWORD PTR [eax],edx
c0022c5c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022c60:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c0022c6a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022c6e:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0022c78:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0022c80:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0022c85:	7f 19                	jg     c0022ca0 <SoundDevice::SoundDevice(char const*)+0x66>
c0022c87:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022c8b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0022c8f:	83 c2 54             	add    edx,0x54
c0022c92:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c0022c9a:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0022c9e:	eb e0                	jmp    c0022c80 <SoundDevice::SoundDevice(char const*)+0x46>
c0022ca0:	90                   	nop
c0022ca1:	83 c4 1c             	add    esp,0x1c
c0022ca4:	c3                   	ret    
c0022ca5:	90                   	nop

c0022ca6 <SoundDevice::~SoundDevice()>:
c0022ca6:	53                   	push   ebx
c0022ca7:	83 ec 18             	sub    esp,0x18
c0022caa:	ba 0c d4 02 c0       	mov    edx,0xc002d40c
c0022caf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022cb3:	89 10                	mov    DWORD PTR [eax],edx
c0022cb5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0022cbd:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0022cc2:	7f 46                	jg     c0022d0a <SoundDevice::~SoundDevice()+0x64>
c0022cc4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022cc8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0022ccc:	83 c2 54             	add    edx,0x54
c0022ccf:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c0022cd3:	85 c0                	test   eax,eax
c0022cd5:	74 2d                	je     c0022d04 <SoundDevice::~SoundDevice()+0x5e>
c0022cd7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022cdb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0022cdf:	83 c2 54             	add    edx,0x54
c0022ce2:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c0022ce6:	85 db                	test   ebx,ebx
c0022ce8:	74 1a                	je     c0022d04 <SoundDevice::~SoundDevice()+0x5e>
c0022cea:	83 ec 0c             	sub    esp,0xc
c0022ced:	53                   	push   ebx
c0022cee:	e8 21 fc ff ff       	call   c0022914 <SoundChannel::~SoundChannel()>
c0022cf3:	83 c4 10             	add    esp,0x10
c0022cf6:	83 ec 08             	sub    esp,0x8
c0022cf9:	6a 2c                	push   0x2c
c0022cfb:	53                   	push   ebx
c0022cfc:	e8 10 01 ff ff       	call   c0012e11 <operator delete(void*, unsigned long)>
c0022d01:	83 c4 10             	add    esp,0x10
c0022d04:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0022d08:	eb b3                	jmp    c0022cbd <SoundDevice::~SoundDevice()+0x17>
c0022d0a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022d0e:	83 ec 0c             	sub    esp,0xc
c0022d11:	50                   	push   eax
c0022d12:	e8 e1 14 ff ff       	call   c00141f8 <Device::~Device()>
c0022d17:	83 c4 10             	add    esp,0x10
c0022d1a:	90                   	nop
c0022d1b:	83 c4 18             	add    esp,0x18
c0022d1e:	5b                   	pop    ebx
c0022d1f:	c3                   	ret    

c0022d20 <SoundDevice::~SoundDevice()>:
c0022d20:	83 ec 0c             	sub    esp,0xc
c0022d23:	83 ec 0c             	sub    esp,0xc
c0022d26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022d2a:	e8 77 ff ff ff       	call   c0022ca6 <SoundDevice::~SoundDevice()>
c0022d2f:	83 c4 10             	add    esp,0x10
c0022d32:	83 ec 08             	sub    esp,0x8
c0022d35:	68 e4 01 00 00       	push   0x1e4
c0022d3a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022d3e:	e8 ce 00 ff ff       	call   c0012e11 <operator delete(void*, unsigned long)>
c0022d43:	83 c4 10             	add    esp,0x10
c0022d46:	83 c4 0c             	add    esp,0xc
c0022d49:	c3                   	ret    

c0022d4a <SoundDevice::getFreeChannelNum()>:
c0022d4a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0022d4e:	31 c0                	xor    eax,eax
c0022d50:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c0022d58:	74 09                	je     c0022d63 <SoundDevice::getFreeChannelNum()+0x19>
c0022d5a:	40                   	inc    eax
c0022d5b:	83 f8 20             	cmp    eax,0x20
c0022d5e:	75 f0                	jne    c0022d50 <SoundDevice::getFreeChannelNum()+0x6>
c0022d60:	83 c8 ff             	or     eax,0xffffffff
c0022d63:	c3                   	ret    

c0022d64 <SoundDevice::addChannel(SoundChannel*)>:
c0022d64:	56                   	push   esi
c0022d65:	53                   	push   ebx
c0022d66:	51                   	push   ecx
c0022d67:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0022d6b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0022d6f:	53                   	push   ebx
c0022d70:	e8 d5 ff ff ff       	call   c0022d4a <SoundDevice::getFreeChannelNum()>
c0022d75:	5a                   	pop    edx
c0022d76:	83 f8 ff             	cmp    eax,0xffffffff
c0022d79:	74 51                	je     c0022dcc <SoundDevice::addChannel(SoundChannel*)+0x68>
c0022d7b:	85 f6                	test   esi,esi
c0022d7d:	74 4d                	je     c0022dcc <SoundDevice::addChannel(SoundChannel*)+0x68>
c0022d7f:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c0022d86:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c0022d8d:	75 30                	jne    c0022dbf <SoundDevice::addChannel(SoundChannel*)+0x5b>
c0022d8f:	83 ec 0c             	sub    esp,0xc
c0022d92:	56                   	push   esi
c0022d93:	e8 42 fd ff ff       	call   c0022ada <SoundChannel::getSampleRate()>
c0022d98:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c0022d9e:	89 34 24             	mov    DWORD PTR [esp],esi
c0022da1:	e8 3c fd ff ff       	call   c0022ae2 <SoundChannel::getBits()>
c0022da6:	83 c4 0c             	add    esp,0xc
c0022da9:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c0022daf:	8b 13                	mov    edx,DWORD PTR [ebx]
c0022db1:	50                   	push   eax
c0022db2:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c0022db8:	53                   	push   ebx
c0022db9:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0022dbc:	83 c4 10             	add    esp,0x10
c0022dbf:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c0022dc5:	b8 01 00 00 00       	mov    eax,0x1
c0022dca:	eb 03                	jmp    c0022dcf <SoundDevice::addChannel(SoundChannel*)+0x6b>
c0022dcc:	83 c8 ff             	or     eax,0xffffffff
c0022dcf:	5a                   	pop    edx
c0022dd0:	5b                   	pop    ebx
c0022dd1:	5e                   	pop    esi
c0022dd2:	c3                   	ret    
c0022dd3:	90                   	nop

c0022dd4 <SoundDevice::removeChannel(int)>:
c0022dd4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022dd8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022ddc:	83 fa 1f             	cmp    edx,0x1f
c0022ddf:	77 23                	ja     c0022e04 <SoundDevice::removeChannel(int)+0x30>
c0022de1:	8d 14 90             	lea    edx,[eax+edx*4]
c0022de4:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c0022deb:	74 17                	je     c0022e04 <SoundDevice::removeChannel(int)+0x30>
c0022ded:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c0022df7:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c0022dfd:	75 05                	jne    c0022e04 <SoundDevice::removeChannel(int)+0x30>
c0022dff:	8b 00                	mov    eax,DWORD PTR [eax]
c0022e01:	ff 60 2c             	jmp    DWORD PTR [eax+0x2c]
c0022e04:	c3                   	ret    
c0022e05:	90                   	nop

c0022e06 <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c0022e06:	57                   	push   edi
c0022e07:	56                   	push   esi
c0022e08:	53                   	push   ebx
c0022e09:	31 db                	xor    ebx,ebx
c0022e0b:	83 ec 10             	sub    esp,0x10
c0022e0e:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0022e12:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c0022e16:	0f 8d cb 00 00 00    	jge    c0022ee7 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xe1>
c0022e1c:	83 ec 0c             	sub    esp,0xc
c0022e1f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022e23:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0022e26:	e8 a4 5f 00 00       	call   c0028dcf <__extendsfdf2>
c0022e2b:	83 c4 10             	add    esp,0x10
c0022e2e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022e32:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022e36:	68 00 00 f0 3f       	push   0x3ff00000
c0022e3b:	6a 00                	push   0x0
c0022e3d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022e41:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022e45:	e8 11 4f 00 00       	call   c0027d5b <__adddf3>
c0022e4a:	83 c4 10             	add    esp,0x10
c0022e4d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022e51:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022e55:	68 00 00 e0 3f       	push   0x3fe00000
c0022e5a:	6a 00                	push   0x0
c0022e5c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022e60:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022e64:	e8 6f 55 00 00       	call   c00283d8 <__muldf3>
c0022e69:	83 c4 10             	add    esp,0x10
c0022e6c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022e70:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022e74:	68 00 00 60 40       	push   0x40600000
c0022e79:	6a 00                	push   0x0
c0022e7b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022e7f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022e83:	e8 50 55 00 00       	call   c00283d8 <__muldf3>
c0022e88:	59                   	pop    ecx
c0022e89:	5f                   	pop    edi
c0022e8a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0022e8e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0022e92:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022e96:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022e9a:	e8 0c 5e 00 00       	call   c0028cab <__truncdfsf2>
c0022e9f:	5a                   	pop    edx
c0022ea0:	89 c7                	mov    edi,eax
c0022ea2:	59                   	pop    ecx
c0022ea3:	68 00 00 fe 42       	push   0x42fe0000
c0022ea8:	50                   	push   eax
c0022ea9:	e8 a7 4e 00 00       	call   c0027d55 <__gesf2>
c0022eae:	83 c4 10             	add    esp,0x10
c0022eb1:	85 c0                	test   eax,eax
c0022eb3:	78 06                	js     c0022ebb <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb5>
c0022eb5:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c0022eb9:	eb 26                	jmp    c0022ee1 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c0022ebb:	50                   	push   eax
c0022ebc:	50                   	push   eax
c0022ebd:	6a 00                	push   0x0
c0022ebf:	57                   	push   edi
c0022ec0:	e8 94 4e 00 00       	call   c0027d59 <__lesf2>
c0022ec5:	83 c4 10             	add    esp,0x10
c0022ec8:	85 c0                	test   eax,eax
c0022eca:	7f 06                	jg     c0022ed2 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xcc>
c0022ecc:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c0022ed0:	eb 0f                	jmp    c0022ee1 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c0022ed2:	83 ec 0c             	sub    esp,0xc
c0022ed5:	57                   	push   edi
c0022ed6:	e8 91 5f 00 00       	call   c0028e6c <lrintf>
c0022edb:	83 c4 10             	add    esp,0x10
c0022ede:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c0022ee1:	43                   	inc    ebx
c0022ee2:	e9 2b ff ff ff       	jmp    c0022e12 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xc>
c0022ee7:	83 c4 10             	add    esp,0x10
c0022eea:	5b                   	pop    ebx
c0022eeb:	5e                   	pop    esi
c0022eec:	5f                   	pop    edi
c0022eed:	c3                   	ret    

c0022eee <SoundDevice::getAudio(int, float*, float*)>:
c0022eee:	55                   	push   ebp
c0022eef:	57                   	push   edi
c0022ef0:	56                   	push   esi
c0022ef1:	53                   	push   ebx
c0022ef2:	31 db                	xor    ebx,ebx
c0022ef4:	83 ec 20             	sub    esp,0x20
c0022ef7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0022efb:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0022eff:	c1 e0 02             	shl    eax,0x2
c0022f02:	50                   	push   eax
c0022f03:	6a 00                	push   0x0
c0022f05:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0022f09:	e8 8e d8 fd ff       	call   c000079c <memset>
c0022f0e:	83 c4 10             	add    esp,0x10
c0022f11:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0022f15:	8b 84 9e 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*4+0x15c]
c0022f1c:	85 c0                	test   eax,eax
c0022f1e:	0f 84 d7 00 00 00    	je     c0022ffb <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0022f24:	83 ec 0c             	sub    esp,0xc
c0022f27:	50                   	push   eax
c0022f28:	e8 a5 fb ff ff       	call   c0022ad2 <SoundChannel::paused()>
c0022f2d:	83 c4 10             	add    esp,0x10
c0022f30:	84 c0                	test   al,al
c0022f32:	0f 85 c3 00 00 00    	jne    c0022ffb <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0022f38:	83 ec 0c             	sub    esp,0xc
c0022f3b:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c0022f42:	e8 19 fa ff ff       	call   c0022960 <SoundChannel::getVolume()>
c0022f47:	83 c4 10             	add    esp,0x10
c0022f4a:	85 c0                	test   eax,eax
c0022f4c:	0f 84 a9 00 00 00    	je     c0022ffb <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0022f52:	83 ec 0c             	sub    esp,0xc
c0022f55:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c0022f5c:	e8 ff f9 ff ff       	call   c0022960 <SoundChannel::getVolume()>
c0022f61:	83 ec 0c             	sub    esp,0xc
c0022f64:	50                   	push   eax
c0022f65:	e8 95 4b 00 00       	call   c0027aff <__floatsisf>
c0022f6a:	59                   	pop    ecx
c0022f6b:	5d                   	pop    ebp
c0022f6c:	31 ed                	xor    ebp,ebp
c0022f6e:	68 00 00 c8 42       	push   0x42c80000
c0022f73:	50                   	push   eax
c0022f74:	e8 5b 49 00 00       	call   c00278d4 <__divsf3>
c0022f79:	83 c4 10             	add    esp,0x10
c0022f7c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0022f80:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0022f84:	ff b6 dc 01 00 00    	push   DWORD PTR [esi+0x1dc]
c0022f8a:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0022f8e:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c0022f95:	e8 60 fb ff ff       	call   c0022afa <SoundChannel::unbuffer(float*, int, int)>
c0022f9a:	83 c4 20             	add    esp,0x20
c0022f9d:	89 c1                	mov    ecx,eax
c0022f9f:	39 cd                	cmp    ebp,ecx
c0022fa1:	7d 52                	jge    c0022ff5 <SoundDevice::getAudio(int, float*, float*)+0x107>
c0022fa3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0022fa7:	50                   	push   eax
c0022fa8:	50                   	push   eax
c0022fa9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0022fad:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c0022fb0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0022fb4:	e8 58 47 00 00       	call   c0027711 <__mulsf3>
c0022fb9:	5a                   	pop    edx
c0022fba:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0022fbe:	ff b6 58 01 00 00    	push   DWORD PTR [esi+0x158]
c0022fc4:	e8 36 4b 00 00       	call   c0027aff <__floatsisf>
c0022fc9:	59                   	pop    ecx
c0022fca:	5a                   	pop    edx
c0022fcb:	50                   	push   eax
c0022fcc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022fd0:	e8 ff 48 00 00       	call   c00278d4 <__divsf3>
c0022fd5:	59                   	pop    ecx
c0022fd6:	5a                   	pop    edx
c0022fd7:	50                   	push   eax
c0022fd8:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0022fdc:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c0022fdf:	e8 0a 44 00 00       	call   c00273ee <__addsf3>
c0022fe4:	83 c4 10             	add    esp,0x10
c0022fe7:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0022feb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0022fef:	89 04 aa             	mov    DWORD PTR [edx+ebp*4],eax
c0022ff2:	45                   	inc    ebp
c0022ff3:	eb aa                	jmp    c0022f9f <SoundDevice::getAudio(int, float*, float*)+0xb1>
c0022ff5:	39 cf                	cmp    edi,ecx
c0022ff7:	7e 02                	jle    c0022ffb <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0022ff9:	89 cf                	mov    edi,ecx
c0022ffb:	43                   	inc    ebx
c0022ffc:	83 fb 20             	cmp    ebx,0x20
c0022fff:	0f 85 10 ff ff ff    	jne    c0022f15 <SoundDevice::getAudio(int, float*, float*)+0x27>
c0023005:	83 c4 1c             	add    esp,0x1c
c0023008:	89 f8                	mov    eax,edi
c002300a:	5b                   	pop    ebx
c002300b:	5e                   	pop    esi
c002300c:	5f                   	pop    edi
c002300d:	5d                   	pop    ebp
c002300e:	c3                   	ret    
c002300f:	90                   	nop

c0023010 <PCI::open(int, int, void*)>:
c0023010:	83 ec 18             	sub    esp,0x18
c0023013:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0023017:	8b 10                	mov    edx,DWORD PTR [eax]
c0023019:	50                   	push   eax
c002301a:	ff 52 18             	call   DWORD PTR [edx+0x18]
c002301d:	31 c0                	xor    eax,eax
c002301f:	83 c4 1c             	add    esp,0x1c
c0023022:	c3                   	ret    
c0023023:	90                   	nop

c0023024 <PCI::close(int, int, void*)>:
c0023024:	31 c0                	xor    eax,eax
c0023026:	c3                   	ret    
c0023027:	90                   	nop

c0023028 <PCI::PCI()>:
c0023028:	83 ec 0c             	sub    esp,0xc
c002302b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002302f:	83 ec 08             	sub    esp,0x8
c0023032:	68 3c d4 02 c0       	push   0xc002d43c
c0023037:	50                   	push   eax
c0023038:	e8 55 0b ff ff       	call   c0013b92 <Bus::Bus(char const*)>
c002303d:	83 c4 10             	add    esp,0x10
c0023040:	ba c4 d4 02 c0       	mov    edx,0xc002d4c4
c0023045:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023049:	89 10                	mov    DWORD PTR [eax],edx
c002304b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002304f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0023055:	0f b6 d0             	movzx  edx,al
c0023058:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002305c:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c0023063:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023067:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002306d:	0f b6 d0             	movzx  edx,al
c0023070:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023074:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c0023079:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002307d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0023083:	8d 50 01             	lea    edx,[eax+0x1]
c0023086:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002308a:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0023090:	0f b6 d0             	movzx  edx,al
c0023093:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023097:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c002309b:	83 c9 c0             	or     ecx,0xffffffc0
c002309e:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00230a2:	90                   	nop
c00230a3:	83 c4 0c             	add    esp,0xc
c00230a6:	c3                   	ret    
c00230a7:	90                   	nop

c00230a8 <PCI::readBAR8(unsigned int, int)>:
c00230a8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00230ac:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00230b0:	f6 c2 01             	test   dl,0x1
c00230b3:	74 07                	je     c00230bc <PCI::readBAR8(unsigned int, int)+0x14>
c00230b5:	83 e2 fc             	and    edx,0xfffffffc
c00230b8:	01 c2                	add    edx,eax
c00230ba:	ec                   	in     al,dx
c00230bb:	c3                   	ret    
c00230bc:	83 e2 f0             	and    edx,0xfffffff0
c00230bf:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c00230c2:	c3                   	ret    
c00230c3:	90                   	nop

c00230c4 <PCI::readBAR16(unsigned int, int)>:
c00230c4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00230c8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00230cc:	f6 c2 01             	test   dl,0x1
c00230cf:	74 08                	je     c00230d9 <PCI::readBAR16(unsigned int, int)+0x15>
c00230d1:	83 e2 fc             	and    edx,0xfffffffc
c00230d4:	01 c2                	add    edx,eax
c00230d6:	66 ed                	in     ax,dx
c00230d8:	c3                   	ret    
c00230d9:	83 e2 f0             	and    edx,0xfffffff0
c00230dc:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c00230e0:	c3                   	ret    
c00230e1:	90                   	nop

c00230e2 <PCI::readBAR32(unsigned int, int)>:
c00230e2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00230e6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00230ea:	f6 c2 01             	test   dl,0x1
c00230ed:	74 07                	je     c00230f6 <PCI::readBAR32(unsigned int, int)+0x14>
c00230ef:	83 e2 fc             	and    edx,0xfffffffc
c00230f2:	01 c2                	add    edx,eax
c00230f4:	ed                   	in     eax,dx
c00230f5:	c3                   	ret    
c00230f6:	83 e2 f0             	and    edx,0xfffffff0
c00230f9:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c00230fc:	c3                   	ret    
c00230fd:	90                   	nop

c00230fe <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c00230fe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0023102:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023106:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002310a:	f6 c2 01             	test   dl,0x1
c002310d:	74 07                	je     c0023116 <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c002310f:	83 e2 fc             	and    edx,0xfffffffc
c0023112:	01 ca                	add    edx,ecx
c0023114:	ee                   	out    dx,al
c0023115:	c3                   	ret    
c0023116:	83 e2 f0             	and    edx,0xfffffff0
c0023119:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c002311c:	c3                   	ret    
c002311d:	90                   	nop

c002311e <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c002311e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0023122:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023126:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002312a:	f6 c2 01             	test   dl,0x1
c002312d:	74 08                	je     c0023137 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c002312f:	83 e2 fc             	and    edx,0xfffffffc
c0023132:	01 ca                	add    edx,ecx
c0023134:	66 ef                	out    dx,ax
c0023136:	c3                   	ret    
c0023137:	83 e2 f0             	and    edx,0xfffffff0
c002313a:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c002313e:	c3                   	ret    
c002313f:	90                   	nop

c0023140 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c0023140:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0023144:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023148:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002314c:	f6 c2 01             	test   dl,0x1
c002314f:	74 07                	je     c0023158 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c0023151:	83 e2 fc             	and    edx,0xfffffffc
c0023154:	01 ca                	add    edx,ecx
c0023156:	ef                   	out    dx,eax
c0023157:	c3                   	ret    
c0023158:	83 e2 f0             	and    edx,0xfffffff0
c002315b:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c002315e:	c3                   	ret    
c002315f:	90                   	nop

c0023160 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0023160:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0023164:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0023169:	89 ca                	mov    edx,ecx
c002316b:	c1 e0 10             	shl    eax,0x10
c002316e:	81 e2 fc 00 00 00    	and    edx,0xfc
c0023174:	09 d0                	or     eax,edx
c0023176:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c002317b:	c1 e2 08             	shl    edx,0x8
c002317e:	09 d0                	or     eax,edx
c0023180:	0f b6 54 24 0c       	movzx  edx,BYTE PTR [esp+0xc]
c0023185:	c1 e2 0b             	shl    edx,0xb
c0023188:	09 d0                	or     eax,edx
c002318a:	ba f8 0c 00 00       	mov    edx,0xcf8
c002318f:	0d 00 00 00 80       	or     eax,0x80000000
c0023194:	ef                   	out    dx,eax
c0023195:	ba fc 0c 00 00       	mov    edx,0xcfc
c002319a:	ed                   	in     eax,dx
c002319b:	83 e1 02             	and    ecx,0x2
c002319e:	0f b6 c9             	movzx  ecx,cl
c00231a1:	c1 e1 03             	shl    ecx,0x3
c00231a4:	d3 e8                	shr    eax,cl
c00231a6:	c3                   	ret    
c00231a7:	90                   	nop

c00231a8 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c00231a8:	6a 00                	push   0x0
c00231aa:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00231af:	50                   	push   eax
c00231b0:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00231b5:	50                   	push   eax
c00231b6:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00231bb:	50                   	push   eax
c00231bc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00231c0:	e8 9b ff ff ff       	call   c0023160 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00231c5:	83 c4 14             	add    esp,0x14
c00231c8:	c3                   	ret    
c00231c9:	90                   	nop

c00231ca <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c00231ca:	6a 0e                	push   0xe
c00231cc:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00231d1:	50                   	push   eax
c00231d2:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00231d7:	50                   	push   eax
c00231d8:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00231dd:	50                   	push   eax
c00231de:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00231e2:	e8 79 ff ff ff       	call   c0023160 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00231e7:	83 c4 14             	add    esp,0x14
c00231ea:	0f b6 c0             	movzx  eax,al
c00231ed:	c3                   	ret    

c00231ee <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c00231ee:	55                   	push   ebp
c00231ef:	57                   	push   edi
c00231f0:	56                   	push   esi
c00231f1:	53                   	push   ebx
c00231f2:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c00231f7:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c00231fc:	0f b6 7c 24 18       	movzx  edi,BYTE PTR [esp+0x18]
c0023201:	6a 0a                	push   0xa
c0023203:	56                   	push   esi
c0023204:	55                   	push   ebp
c0023205:	57                   	push   edi
c0023206:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c002320a:	e8 51 ff ff ff       	call   c0023160 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002320f:	6a 0a                	push   0xa
c0023211:	89 c3                	mov    ebx,eax
c0023213:	56                   	push   esi
c0023214:	0f b6 db             	movzx  ebx,bl
c0023217:	55                   	push   ebp
c0023218:	57                   	push   edi
c0023219:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c002321d:	e8 3e ff ff ff       	call   c0023160 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0023222:	83 c4 28             	add    esp,0x28
c0023225:	25 00 ff 00 00       	and    eax,0xff00
c002322a:	09 d8                	or     eax,ebx
c002322c:	5b                   	pop    ebx
c002322d:	5e                   	pop    esi
c002322e:	5f                   	pop    edi
c002322f:	5d                   	pop    ebp
c0023230:	c3                   	ret    
c0023231:	90                   	nop

c0023232 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c0023232:	6a 08                	push   0x8
c0023234:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0023239:	50                   	push   eax
c002323a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002323f:	50                   	push   eax
c0023240:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0023245:	50                   	push   eax
c0023246:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002324a:	e8 11 ff ff ff       	call   c0023160 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002324f:	83 c4 14             	add    esp,0x14
c0023252:	0f b6 c4             	movzx  eax,ah
c0023255:	c3                   	ret    

c0023256 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c0023256:	6a 08                	push   0x8
c0023258:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002325d:	50                   	push   eax
c002325e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0023263:	50                   	push   eax
c0023264:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0023269:	50                   	push   eax
c002326a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002326e:	e8 ed fe ff ff       	call   c0023160 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0023273:	83 c4 14             	add    esp,0x14
c0023276:	c3                   	ret    
c0023277:	90                   	nop

c0023278 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c0023278:	6a 3c                	push   0x3c
c002327a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002327f:	50                   	push   eax
c0023280:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0023285:	50                   	push   eax
c0023286:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002328b:	50                   	push   eax
c002328c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0023290:	e8 cb fe ff ff       	call   c0023160 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0023295:	83 c4 14             	add    esp,0x14
c0023298:	c3                   	ret    
c0023299:	90                   	nop

c002329a <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c002329a:	6a 18                	push   0x18
c002329c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00232a1:	50                   	push   eax
c00232a2:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00232a7:	50                   	push   eax
c00232a8:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00232ad:	50                   	push   eax
c00232ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00232b2:	e8 a9 fe ff ff       	call   c0023160 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00232b7:	83 c4 14             	add    esp,0x14
c00232ba:	0f b6 c4             	movzx  eax,ah
c00232bd:	c3                   	ret    

c00232be <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c00232be:	55                   	push   ebp
c00232bf:	57                   	push   edi
c00232c0:	56                   	push   esi
c00232c1:	53                   	push   ebx
c00232c2:	50                   	push   eax
c00232c3:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c00232c7:	0f b6 4c 24 28       	movzx  ecx,BYTE PTR [esp+0x28]
c00232cc:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c00232d1:	0f b6 6c 24 20       	movzx  ebp,BYTE PTR [esp+0x20]
c00232d6:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c00232dd:	8d 43 12             	lea    eax,[ebx+0x12]
c00232e0:	83 c3 10             	add    ebx,0x10
c00232e3:	0f b6 c0             	movzx  eax,al
c00232e6:	0f b6 db             	movzx  ebx,bl
c00232e9:	50                   	push   eax
c00232ea:	51                   	push   ecx
c00232eb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00232ef:	57                   	push   edi
c00232f0:	55                   	push   ebp
c00232f1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00232f5:	e8 66 fe ff ff       	call   c0023160 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00232fa:	53                   	push   ebx
c00232fb:	89 c6                	mov    esi,eax
c00232fd:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0023301:	c1 e6 10             	shl    esi,0x10
c0023304:	51                   	push   ecx
c0023305:	57                   	push   edi
c0023306:	55                   	push   ebp
c0023307:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002330b:	e8 50 fe ff ff       	call   c0023160 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0023310:	83 c4 2c             	add    esp,0x2c
c0023313:	0f b7 c0             	movzx  eax,ax
c0023316:	5b                   	pop    ebx
c0023317:	09 f0                	or     eax,esi
c0023319:	5e                   	pop    esi
c002331a:	5f                   	pop    edi
c002331b:	5d                   	pop    ebp
c002331c:	c3                   	ret    
c002331d:	90                   	nop

c002331e <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c002331e:	53                   	push   ebx
c002331f:	ba f8 0c 00 00       	mov    edx,0xcf8
c0023324:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0023329:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002332d:	c1 e1 10             	shl    ecx,0x10
c0023330:	25 fc 00 00 00       	and    eax,0xfc
c0023335:	09 c1                	or     ecx,eax
c0023337:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002333c:	c1 e0 08             	shl    eax,0x8
c002333f:	09 c1                	or     ecx,eax
c0023341:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0023346:	c1 e0 0b             	shl    eax,0xb
c0023349:	09 c1                	or     ecx,eax
c002334b:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0023351:	89 c8                	mov    eax,ecx
c0023353:	ef                   	out    dx,eax
c0023354:	ba fc 0c 00 00       	mov    edx,0xcfc
c0023359:	ed                   	in     eax,dx
c002335a:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c002335f:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0023364:	74 0a                	je     c0023370 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x52>
c0023366:	0f b7 d8             	movzx  ebx,ax
c0023369:	89 d0                	mov    eax,edx
c002336b:	c1 e0 10             	shl    eax,0x10
c002336e:	eb 05                	jmp    c0023375 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x57>
c0023370:	66 31 c0             	xor    ax,ax
c0023373:	89 d3                	mov    ebx,edx
c0023375:	09 c3                	or     ebx,eax
c0023377:	ba f8 0c 00 00       	mov    edx,0xcf8
c002337c:	89 c8                	mov    eax,ecx
c002337e:	ef                   	out    dx,eax
c002337f:	ba fc 0c 00 00       	mov    edx,0xcfc
c0023384:	89 d8                	mov    eax,ebx
c0023386:	ef                   	out    dx,eax
c0023387:	5b                   	pop    ebx
c0023388:	c3                   	ret    
c0023389:	90                   	nop

c002338a <PCI::pciDetailsToFilepath(PCIDeviceInfo)>:
c002338a:	31 c0                	xor    eax,eax
c002338c:	c3                   	ret    
c002338d:	90                   	nop

c002338e <PCI::checkBus(unsigned char)>:
c002338e:	56                   	push   esi
c002338f:	53                   	push   ebx
c0023390:	31 db                	xor    ebx,ebx
c0023392:	51                   	push   ecx
c0023393:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0023398:	52                   	push   edx
c0023399:	53                   	push   ebx
c002339a:	43                   	inc    ebx
c002339b:	56                   	push   esi
c002339c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00233a0:	e8 41 03 00 00       	call   c00236e6 <PCI::checkDevice(unsigned char, unsigned char)>
c00233a5:	83 c4 10             	add    esp,0x10
c00233a8:	83 fb 20             	cmp    ebx,0x20
c00233ab:	75 eb                	jne    c0023398 <PCI::checkBus(unsigned char)+0xa>
c00233ad:	58                   	pop    eax
c00233ae:	5b                   	pop    ebx
c00233af:	5e                   	pop    esi
c00233b0:	c3                   	ret    
c00233b1:	90                   	nop

c00233b2 <PCI::foundDevice(PCIDeviceInfo)>:
c00233b2:	55                   	push   ebp
c00233b3:	57                   	push   edi
c00233b4:	56                   	push   esi
c00233b5:	53                   	push   ebx
c00233b6:	83 ec 1c             	sub    esp,0x1c
c00233b9:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00233bd:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c00233c3:	0f 84 68 01 00 00    	je     c0023531 <PCI::foundDevice(PCIDeviceInfo)+0x17f>
c00233c9:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c00233cd:	66 81 f9 06 04       	cmp    cx,0x406
c00233d2:	75 2c                	jne    c0023400 <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c00233d4:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c00233d9:	50                   	push   eax
c00233da:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c00233df:	50                   	push   eax
c00233e0:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c00233e5:	50                   	push   eax
c00233e6:	56                   	push   esi
c00233e7:	e8 ae fe ff ff       	call   c002329a <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c00233ec:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c00233f0:	0f b6 c0             	movzx  eax,al
c00233f3:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00233f7:	83 c4 2c             	add    esp,0x2c
c00233fa:	5b                   	pop    ebx
c00233fb:	5e                   	pop    esi
c00233fc:	5f                   	pop    edi
c00233fd:	5d                   	pop    ebp
c00233fe:	eb 8e                	jmp    c002338e <PCI::checkBus(unsigned char)>
c0023400:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0023404:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c002340a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002340e:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0023412:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c0023416:	88 d3                	mov    bl,dl
c0023418:	85 c0                	test   eax,eax
c002341a:	74 33                	je     c002344f <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c002341c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c002341f:	85 d2                	test   edx,edx
c0023421:	74 28                	je     c002344b <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0023423:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c0023429:	31 ef                	xor    edi,ebp
c002342b:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c0023431:	75 18                	jne    c002344b <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0023433:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0023437:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c002343d:	75 0c                	jne    c002344b <PCI::foundDevice(PCIDeviceInfo)+0x99>
c002343f:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c0023445:	0f 84 e6 00 00 00    	je     c0023531 <PCI::foundDevice(PCIDeviceInfo)+0x17f>
c002344b:	8b 00                	mov    eax,DWORD PTR [eax]
c002344d:	eb c9                	jmp    c0023418 <PCI::foundDevice(PCIDeviceInfo)+0x66>
c002344f:	66 81 f9 01 06       	cmp    cx,0x601
c0023454:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c0023458:	75 19                	jne    c0023473 <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c002345a:	83 ec 0c             	sub    esp,0xc
c002345d:	68 64 01 00 00       	push   0x164
c0023462:	e8 cb c4 fe ff       	call   c000f932 <malloc>
c0023467:	89 c5                	mov    ebp,eax
c0023469:	89 04 24             	mov    DWORD PTR [esp],eax
c002346c:	e8 ab 0f 00 00       	call   c002441c <SATABus::SATABus()>
c0023471:	eb 1e                	jmp    c0023491 <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c0023473:	66 81 f9 01 01       	cmp    cx,0x101
c0023478:	75 60                	jne    c00234da <PCI::foundDevice(PCIDeviceInfo)+0x128>
c002347a:	83 ec 0c             	sub    esp,0xc
c002347d:	68 70 02 00 00       	push   0x270
c0023482:	e8 ab c4 fe ff       	call   c000f932 <malloc>
c0023487:	89 c5                	mov    ebp,eax
c0023489:	89 04 24             	mov    DWORD PTR [esp],eax
c002348c:	e8 19 03 00 00       	call   c00237aa <IDE::IDE()>
c0023491:	58                   	pop    eax
c0023492:	5a                   	pop    edx
c0023493:	55                   	push   ebp
c0023494:	56                   	push   esi
c0023495:	e8 8c 0e ff ff       	call   c0014326 <Device::addChild(Device*)>
c002349a:	83 ec 1c             	sub    esp,0x1c
c002349d:	b9 09 00 00 00       	mov    ecx,0x9
c00234a2:	fc                   	cld    
c00234a3:	89 e7                	mov    edi,esp
c00234a5:	89 de                	mov    esi,ebx
c00234a7:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00234a9:	55                   	push   ebp
c00234aa:	e8 81 0d ff ff       	call   c0014230 <Device::preOpenPCI(PCIDeviceInfo)>
c00234af:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00234b2:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c00234b6:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c00234be:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c00234c6:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c00234ce:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00234d1:	83 c4 4c             	add    esp,0x4c
c00234d4:	5b                   	pop    ebx
c00234d5:	5e                   	pop    esi
c00234d6:	5f                   	pop    edi
c00234d7:	5d                   	pop    ebp
c00234d8:	ff e0                	jmp    eax
c00234da:	50                   	push   eax
c00234db:	0f b6 44 24 39       	movzx  eax,BYTE PTR [esp+0x39]
c00234e0:	50                   	push   eax
c00234e1:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c00234e6:	50                   	push   eax
c00234e7:	68 44 d4 02 c0       	push   0xc002d444
c00234ec:	e8 00 fa fe ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c00234f1:	c7 04 24 58 01 00 00 	mov    DWORD PTR [esp],0x158
c00234f8:	e8 35 c4 fe ff       	call   c000f932 <malloc>
c00234fd:	5a                   	pop    edx
c00234fe:	89 c5                	mov    ebp,eax
c0023500:	59                   	pop    ecx
c0023501:	68 60 d4 02 c0       	push   0xc002d460
c0023506:	50                   	push   eax
c0023507:	e8 10 11 ff ff       	call   c001461c <DriverlessDevice::DriverlessDevice(char const*)>
c002350c:	5f                   	pop    edi
c002350d:	58                   	pop    eax
c002350e:	55                   	push   ebp
c002350f:	56                   	push   esi
c0023510:	e8 11 0e ff ff       	call   c0014326 <Device::addChild(Device*)>
c0023515:	b9 09 00 00 00       	mov    ecx,0x9
c002351a:	fc                   	cld    
c002351b:	89 df                	mov    edi,ebx
c002351d:	89 de                	mov    esi,ebx
c002351f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0023521:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c0023525:	83 c4 2c             	add    esp,0x2c
c0023528:	5b                   	pop    ebx
c0023529:	5e                   	pop    esi
c002352a:	5f                   	pop    edi
c002352b:	5d                   	pop    ebp
c002352c:	e9 ff 0c ff ff       	jmp    c0014230 <Device::preOpenPCI(PCIDeviceInfo)>
c0023531:	83 c4 1c             	add    esp,0x1c
c0023534:	5b                   	pop    ebx
c0023535:	5e                   	pop    esi
c0023536:	5f                   	pop    edi
c0023537:	5d                   	pop    ebp
c0023538:	c3                   	ret    
c0023539:	90                   	nop

c002353a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c002353a:	55                   	push   ebp
c002353b:	57                   	push   edi
c002353c:	56                   	push   esi
c002353d:	53                   	push   ebx
c002353e:	83 ec 5c             	sub    esp,0x5c
c0023541:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0023545:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0023549:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c002354d:	0f b6 7c 24 10       	movzx  edi,BYTE PTR [esp+0x10]
c0023552:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0023556:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c002355a:	0f b6 5c 24 14       	movzx  ebx,BYTE PTR [esp+0x14]
c002355f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0023563:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c0023568:	6a 0c                	push   0xc
c002356a:	55                   	push   ebp
c002356b:	53                   	push   ebx
c002356c:	57                   	push   edi
c002356d:	ff b4 24 80 00 00 00 	push   DWORD PTR [esp+0x80]
c0023574:	e8 e7 fb ff ff       	call   c0023160 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0023579:	55                   	push   ebp
c002357a:	53                   	push   ebx
c002357b:	57                   	push   edi
c002357c:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0023583:	e8 66 fc ff ff       	call   c00231ee <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c0023588:	66 89 44 24 42       	mov    WORD PTR [esp+0x42],ax
c002358d:	83 c4 24             	add    esp,0x24
c0023590:	55                   	push   ebp
c0023591:	53                   	push   ebx
c0023592:	57                   	push   edi
c0023593:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0023597:	e8 dc fc ff ff       	call   c0023278 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c002359c:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c00235a0:	6a 3c                	push   0x3c
c00235a2:	55                   	push   ebp
c00235a3:	53                   	push   ebx
c00235a4:	57                   	push   edi
c00235a5:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c00235ac:	e8 af fb ff ff       	call   c0023160 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00235b1:	0f b6 c4             	movzx  eax,ah
c00235b4:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00235b8:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c00235bc:	88 44 24 71          	mov    BYTE PTR [esp+0x71],al
c00235c0:	a1 68 ee 02 c0       	mov    eax,ds:0xc002ee68
c00235c5:	83 c4 24             	add    esp,0x24
c00235c8:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c00235ce:	83 b8 5c 11 00 00 00 	cmp    DWORD PTR [eax+0x115c],0x0
c00235d5:	74 6c                	je     c0023643 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c00235d7:	31 f6                	xor    esi,esi
c00235d9:	8b 15 68 ee 02 c0    	mov    edx,DWORD PTR ds:0xc002ee68
c00235df:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c00235e5:	39 b2 5c 11 00 00    	cmp    DWORD PTR [edx+0x115c],esi
c00235eb:	7e 56                	jle    c0023643 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c00235ed:	8d 14 f2             	lea    edx,[edx+esi*8]
c00235f0:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c00235f7:	39 cb                	cmp    ebx,ecx
c00235f9:	75 45                	jne    c0023640 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c00235fb:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c0023602:	3b 54 24 0c          	cmp    edx,DWORD PTR [esp+0xc]
c0023606:	75 38                	jne    c0023640 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c0023608:	83 ec 0c             	sub    esp,0xc
c002360b:	68 7a d4 02 c0       	push   0xc002d47a
c0023610:	e8 dc f8 fe ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c0023615:	8b 15 68 ee 02 c0    	mov    edx,DWORD PTR ds:0xc002ee68
c002361b:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0023621:	0f b6 94 f2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+esi*8+0x15f]
c0023629:	88 54 24 2d          	mov    BYTE PTR [esp+0x2d],dl
c002362d:	52                   	push   edx
c002362e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0023632:	53                   	push   ebx
c0023633:	68 9f d4 02 c0       	push   0xc002d49f
c0023638:	e8 b4 f8 fe ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c002363d:	83 c4 20             	add    esp,0x20
c0023640:	46                   	inc    esi
c0023641:	eb 96                	jmp    c00235d9 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x9f>
c0023643:	31 d2                	xor    edx,edx
c0023645:	83 ec 0c             	sub    esp,0xc
c0023648:	55                   	push   ebp
c0023649:	53                   	push   ebx
c002364a:	57                   	push   edi
c002364b:	52                   	push   edx
c002364c:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0023650:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0023657:	e8 62 fc ff ff       	call   c00232be <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c002365c:	8d 74 24 4c          	lea    esi,[esp+0x4c]
c0023660:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0023664:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c0023668:	42                   	inc    edx
c0023669:	83 c4 20             	add    esp,0x20
c002366c:	83 fa 06             	cmp    edx,0x6
c002366f:	75 d4                	jne    c0023645 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x10b>
c0023671:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0023675:	88 44 24 30          	mov    BYTE PTR [esp+0x30],al
c0023679:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c002367d:	88 44 24 31          	mov    BYTE PTR [esp+0x31],al
c0023681:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0023685:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c0023689:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c002368e:	86 e0                	xchg   al,ah
c0023690:	66 89 44 24 2c       	mov    WORD PTR [esp+0x2c],ax
c0023695:	55                   	push   ebp
c0023696:	53                   	push   ebx
c0023697:	57                   	push   edi
c0023698:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c002369c:	e8 91 fb ff ff       	call   c0023232 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c00236a1:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c00236a5:	55                   	push   ebp
c00236a6:	53                   	push   ebx
c00236a7:	57                   	push   edi
c00236a8:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c00236af:	e8 f4 fa ff ff       	call   c00231a8 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c00236b4:	83 ec 0c             	sub    esp,0xc
c00236b7:	66 89 44 24 5a       	mov    WORD PTR [esp+0x5a],ax
c00236bc:	b9 09 00 00 00       	mov    ecx,0x9
c00236c1:	8a 44 24 49          	mov    al,BYTE PTR [esp+0x49]
c00236c5:	88 44 24 78          	mov    BYTE PTR [esp+0x78],al
c00236c9:	fc                   	cld    
c00236ca:	89 e7                	mov    edi,esp
c00236cc:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00236ce:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c00236d5:	e8 d8 fc ff ff       	call   c00233b2 <PCI::foundDevice(PCIDeviceInfo)>
c00236da:	81 c4 8c 00 00 00    	add    esp,0x8c
c00236e0:	5b                   	pop    ebx
c00236e1:	5e                   	pop    esi
c00236e2:	5f                   	pop    edi
c00236e3:	5d                   	pop    ebp
c00236e4:	c3                   	ret    
c00236e5:	90                   	nop

c00236e6 <PCI::checkDevice(unsigned char, unsigned char)>:
c00236e6:	55                   	push   ebp
c00236e7:	57                   	push   edi
c00236e8:	56                   	push   esi
c00236e9:	53                   	push   ebx
c00236ea:	83 ec 0c             	sub    esp,0xc
c00236ed:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00236f1:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c00236f6:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c00236fb:	6a 00                	push   0x0
c00236fd:	56                   	push   esi
c00236fe:	57                   	push   edi
c00236ff:	55                   	push   ebp
c0023700:	e8 a3 fa ff ff       	call   c00231a8 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0023705:	6a 00                	push   0x0
c0023707:	56                   	push   esi
c0023708:	57                   	push   edi
c0023709:	55                   	push   ebp
c002370a:	e8 2b fe ff ff       	call   c002353a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c002370f:	83 c4 20             	add    esp,0x20
c0023712:	6a 00                	push   0x0
c0023714:	56                   	push   esi
c0023715:	57                   	push   edi
c0023716:	55                   	push   ebp
c0023717:	e8 ae fa ff ff       	call   c00231ca <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c002371c:	83 c4 10             	add    esp,0x10
c002371f:	84 c0                	test   al,al
c0023721:	79 27                	jns    c002374a <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c0023723:	bb 01 00 00 00       	mov    ebx,0x1
c0023728:	53                   	push   ebx
c0023729:	56                   	push   esi
c002372a:	57                   	push   edi
c002372b:	55                   	push   ebp
c002372c:	e8 77 fa ff ff       	call   c00231a8 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0023731:	83 c4 10             	add    esp,0x10
c0023734:	66 40                	inc    ax
c0023736:	74 0c                	je     c0023744 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c0023738:	53                   	push   ebx
c0023739:	56                   	push   esi
c002373a:	57                   	push   edi
c002373b:	55                   	push   ebp
c002373c:	e8 f9 fd ff ff       	call   c002353a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0023741:	83 c4 10             	add    esp,0x10
c0023744:	43                   	inc    ebx
c0023745:	83 fb 08             	cmp    ebx,0x8
c0023748:	75 de                	jne    c0023728 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c002374a:	83 c4 0c             	add    esp,0xc
c002374d:	5b                   	pop    ebx
c002374e:	5e                   	pop    esi
c002374f:	5f                   	pop    edi
c0023750:	5d                   	pop    ebp
c0023751:	c3                   	ret    

c0023752 <PCI::detect()>:
c0023752:	56                   	push   esi
c0023753:	53                   	push   ebx
c0023754:	53                   	push   ebx
c0023755:	31 db                	xor    ebx,ebx
c0023757:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002375b:	6a 00                	push   0x0
c002375d:	6a 00                	push   0x0
c002375f:	6a 00                	push   0x0
c0023761:	56                   	push   esi
c0023762:	e8 63 fa ff ff       	call   c00231ca <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0023767:	83 c4 10             	add    esp,0x10
c002376a:	a8 80                	test   al,0x80
c002376c:	75 21                	jne    c002378f <PCI::detect()+0x3d>
c002376e:	51                   	push   ecx
c002376f:	51                   	push   ecx
c0023770:	6a 00                	push   0x0
c0023772:	56                   	push   esi
c0023773:	e8 16 fc ff ff       	call   c002338e <PCI::checkBus(unsigned char)>
c0023778:	83 c4 10             	add    esp,0x10
c002377b:	eb 24                	jmp    c00237a1 <PCI::detect()+0x4f>
c002377d:	52                   	push   edx
c002377e:	52                   	push   edx
c002377f:	53                   	push   ebx
c0023780:	43                   	inc    ebx
c0023781:	56                   	push   esi
c0023782:	e8 07 fc ff ff       	call   c002338e <PCI::checkBus(unsigned char)>
c0023787:	83 c4 10             	add    esp,0x10
c002378a:	83 fb 08             	cmp    ebx,0x8
c002378d:	74 12                	je     c00237a1 <PCI::detect()+0x4f>
c002378f:	53                   	push   ebx
c0023790:	6a 00                	push   0x0
c0023792:	6a 00                	push   0x0
c0023794:	56                   	push   esi
c0023795:	e8 0e fa ff ff       	call   c00231a8 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c002379a:	83 c4 10             	add    esp,0x10
c002379d:	66 40                	inc    ax
c002379f:	74 dc                	je     c002377d <PCI::detect()+0x2b>
c00237a1:	58                   	pop    eax
c00237a2:	5b                   	pop    ebx
c00237a3:	5e                   	pop    esi
c00237a4:	c3                   	ret    
c00237a5:	90                   	nop

c00237a6 <IDE::close(int, int, void*)>:
c00237a6:	83 c8 ff             	or     eax,0xffffffff
c00237a9:	c3                   	ret    

c00237aa <IDE::IDE()>:
c00237aa:	83 ec 0c             	sub    esp,0xc
c00237ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00237b1:	83 ec 08             	sub    esp,0x8
c00237b4:	68 e8 d4 02 c0       	push   0xc002d4e8
c00237b9:	50                   	push   eax
c00237ba:	e8 01 0f ff ff       	call   c00146c0 <HardDiskController::HardDiskController(char const*)>
c00237bf:	83 c4 10             	add    esp,0x10
c00237c2:	ba 28 d7 02 c0       	mov    edx,0xc002d728
c00237c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00237cb:	89 10                	mov    DWORD PTR [eax],edx
c00237cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00237d1:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c00237d8:	90                   	nop
c00237d9:	83 c4 0c             	add    esp,0xc
c00237dc:	c3                   	ret    
c00237dd:	90                   	nop

c00237de <IDE::prepareInterrupt(unsigned char)>:
c00237de:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00237e3:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00237e7:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c00237ef:	c3                   	ret    

c00237f0 <selectDrive(unsigned char, unsigned char)>:
c00237f0:	c3                   	ret    
c00237f1:	90                   	nop

c00237f2 <IDE::getBase(unsigned char)>:
c00237f2:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00237f7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00237fb:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c0023803:	c3                   	ret    

c0023804 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c0023804:	55                   	push   ebp
c0023805:	57                   	push   edi
c0023806:	56                   	push   esi
c0023807:	53                   	push   ebx
c0023808:	83 ec 1c             	sub    esp,0x1c
c002380b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c002380f:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0023813:	8d 4b f8             	lea    ecx,[ebx-0x8]
c0023816:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c002381a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c002381e:	80 f9 03             	cmp    cl,0x3
c0023821:	77 51                	ja     c0023874 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c0023823:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023827:	0f b6 f2             	movzx  esi,dl
c002382a:	0f b6 db             	movzx  ebx,bl
c002382d:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0023830:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c0023834:	83 ca 80             	or     edx,0xffffff80
c0023837:	0f b6 d2             	movzx  edx,dl
c002383a:	52                   	push   edx
c002383b:	6a 0c                	push   0xc
c002383d:	56                   	push   esi
c002383e:	57                   	push   edi
c002383f:	e8 c0 ff ff ff       	call   c0023804 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023844:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c0023849:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002384d:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c0023851:	ee                   	out    dx,al
c0023852:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c0023857:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c002385b:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c002385f:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0023863:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c002386b:	83 c4 2c             	add    esp,0x2c
c002386e:	5b                   	pop    ebx
c002386f:	5e                   	pop    esi
c0023870:	5f                   	pop    edi
c0023871:	5d                   	pop    ebp
c0023872:	eb 90                	jmp    c0023804 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023874:	80 fb 07             	cmp    bl,0x7
c0023877:	77 12                	ja     c002388b <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c0023879:	0f b6 d2             	movzx  edx,dl
c002387c:	0f b6 db             	movzx  ebx,bl
c002387f:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c0023887:	89 da                	mov    edx,ebx
c0023889:	eb 2f                	jmp    c00238ba <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c002388b:	80 fb 0d             	cmp    bl,0xd
c002388e:	77 13                	ja     c00238a3 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c0023890:	0f b6 d2             	movzx  edx,dl
c0023893:	0f b6 db             	movzx  ebx,bl
c0023896:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c002389d:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c00238a1:	eb 17                	jmp    c00238ba <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c00238a3:	80 fb 15             	cmp    bl,0x15
c00238a6:	77 13                	ja     c00238bb <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c00238a8:	0f b6 d2             	movzx  edx,dl
c00238ab:	0f b6 db             	movzx  ebx,bl
c00238ae:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c00238b6:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c00238ba:	ee                   	out    dx,al
c00238bb:	83 c4 1c             	add    esp,0x1c
c00238be:	5b                   	pop    ebx
c00238bf:	5e                   	pop    esi
c00238c0:	5f                   	pop    edi
c00238c1:	5d                   	pop    ebp
c00238c2:	c3                   	ret    
c00238c3:	90                   	nop

c00238c4 <IDE::read(unsigned char, unsigned char)>:
c00238c4:	55                   	push   ebp
c00238c5:	57                   	push   edi
c00238c6:	56                   	push   esi
c00238c7:	53                   	push   ebx
c00238c8:	83 ec 1c             	sub    esp,0x1c
c00238cb:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00238cf:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00238d3:	8d 43 f8             	lea    eax,[ebx-0x8]
c00238d6:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00238da:	3c 03                	cmp    al,0x3
c00238dc:	77 43                	ja     c0023921 <IDE::read(unsigned char, unsigned char)+0x5d>
c00238de:	0f b6 f2             	movzx  esi,dl
c00238e1:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c00238e4:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c00238e8:	83 c8 80             	or     eax,0xffffff80
c00238eb:	0f b6 c0             	movzx  eax,al
c00238ee:	50                   	push   eax
c00238ef:	6a 0c                	push   0xc
c00238f1:	56                   	push   esi
c00238f2:	57                   	push   edi
c00238f3:	e8 0c ff ff ff       	call   c0023804 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00238f8:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c00238fd:	0f b6 c3             	movzx  eax,bl
c0023900:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c0023904:	ec                   	in     al,dx
c0023905:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0023909:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c002390e:	52                   	push   edx
c002390f:	6a 0c                	push   0xc
c0023911:	56                   	push   esi
c0023912:	57                   	push   edi
c0023913:	e8 ec fe ff ff       	call   c0023804 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023918:	83 c4 20             	add    esp,0x20
c002391b:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c002391f:	eb 49                	jmp    c002396a <IDE::read(unsigned char, unsigned char)+0xa6>
c0023921:	80 fb 07             	cmp    bl,0x7
c0023924:	77 12                	ja     c0023938 <IDE::read(unsigned char, unsigned char)+0x74>
c0023926:	0f b6 d2             	movzx  edx,dl
c0023929:	0f b6 c3             	movzx  eax,bl
c002392c:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c0023934:	89 c2                	mov    edx,eax
c0023936:	eb 31                	jmp    c0023969 <IDE::read(unsigned char, unsigned char)+0xa5>
c0023938:	80 fb 0d             	cmp    bl,0xd
c002393b:	77 13                	ja     c0023950 <IDE::read(unsigned char, unsigned char)+0x8c>
c002393d:	0f b6 d2             	movzx  edx,dl
c0023940:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c0023947:	0f b6 d3             	movzx  edx,bl
c002394a:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c002394e:	eb 19                	jmp    c0023969 <IDE::read(unsigned char, unsigned char)+0xa5>
c0023950:	31 c0                	xor    eax,eax
c0023952:	80 fb 15             	cmp    bl,0x15
c0023955:	77 13                	ja     c002396a <IDE::read(unsigned char, unsigned char)+0xa6>
c0023957:	0f b6 d2             	movzx  edx,dl
c002395a:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c0023962:	0f b6 d3             	movzx  edx,bl
c0023965:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c0023969:	ec                   	in     al,dx
c002396a:	83 c4 1c             	add    esp,0x1c
c002396d:	5b                   	pop    ebx
c002396e:	5e                   	pop    esi
c002396f:	5f                   	pop    edi
c0023970:	5d                   	pop    ebp
c0023971:	c3                   	ret    

c0023972 <IDE::waitInterrupt(unsigned char)>:
c0023972:	55                   	push   ebp
c0023973:	57                   	push   edi
c0023974:	56                   	push   esi
c0023975:	53                   	push   ebx
c0023976:	31 db                	xor    ebx,ebx
c0023978:	83 ec 0c             	sub    esp,0xc
c002397b:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c002397f:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c0023984:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c002398c:	89 e8                	mov    eax,ebp
c002398e:	84 c0                	test   al,al
c0023990:	75 34                	jne    c00239c6 <IDE::waitInterrupt(unsigned char)+0x54>
c0023992:	52                   	push   edx
c0023993:	6a 0c                	push   0xc
c0023995:	56                   	push   esi
c0023996:	57                   	push   edi
c0023997:	e8 28 ff ff ff       	call   c00238c4 <IDE::read(unsigned char, unsigned char)>
c002399c:	83 c4 10             	add    esp,0x10
c002399f:	a8 01                	test   al,0x1
c00239a1:	75 2b                	jne    c00239ce <IDE::waitInterrupt(unsigned char)+0x5c>
c00239a3:	f6 c3 04             	test   bl,0x4
c00239a6:	75 16                	jne    c00239be <IDE::waitInterrupt(unsigned char)+0x4c>
c00239a8:	83 fb 32             	cmp    ebx,0x32
c00239ab:	7e 11                	jle    c00239be <IDE::waitInterrupt(unsigned char)+0x4c>
c00239ad:	50                   	push   eax
c00239ae:	50                   	push   eax
c00239af:	6a 00                	push   0x0
c00239b1:	68 80 96 98 00       	push   0x989680
c00239b6:	e8 fa ad ff ff       	call   c001e7b5 <nanoSleep(unsigned long long)>
c00239bb:	83 c4 10             	add    esp,0x10
c00239be:	83 fb 3c             	cmp    ebx,0x3c
c00239c1:	74 0b                	je     c00239ce <IDE::waitInterrupt(unsigned char)+0x5c>
c00239c3:	43                   	inc    ebx
c00239c4:	eb be                	jmp    c0023984 <IDE::waitInterrupt(unsigned char)+0x12>
c00239c6:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c00239ce:	83 c4 0c             	add    esp,0xc
c00239d1:	89 e8                	mov    eax,ebp
c00239d3:	5b                   	pop    ebx
c00239d4:	5e                   	pop    esi
c00239d5:	5f                   	pop    edi
c00239d6:	5d                   	pop    ebp
c00239d7:	c3                   	ret    

c00239d8 <ideChannel0IRQHandler(regs*, void*)>:
c00239d8:	83 ec 10             	sub    esp,0x10
c00239db:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00239df:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c00239e6:	6a 07                	push   0x7
c00239e8:	6a 00                	push   0x0
c00239ea:	50                   	push   eax
c00239eb:	e8 d4 fe ff ff       	call   c00238c4 <IDE::read(unsigned char, unsigned char)>
c00239f0:	83 c4 1c             	add    esp,0x1c
c00239f3:	c3                   	ret    

c00239f4 <ideChannel1IRQHandler(regs*, void*)>:
c00239f4:	83 ec 10             	sub    esp,0x10
c00239f7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00239fb:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c0023a02:	6a 07                	push   0x7
c0023a04:	6a 01                	push   0x1
c0023a06:	50                   	push   eax
c0023a07:	e8 b8 fe ff ff       	call   c00238c4 <IDE::read(unsigned char, unsigned char)>
c0023a0c:	83 c4 1c             	add    esp,0x1c
c0023a0f:	c3                   	ret    

c0023a10 <IDE::enableIRQs(unsigned char, bool)>:
c0023a10:	57                   	push   edi
c0023a11:	56                   	push   esi
c0023a12:	be 04 00 00 00       	mov    esi,0x4
c0023a17:	53                   	push   ebx
c0023a18:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0023a1d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0023a21:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c0023a26:	0f 94 c0             	sete   al
c0023a29:	d1 e0                	shl    eax,1
c0023a2b:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c0023a32:	0f b6 c0             	movzx  eax,al
c0023a35:	50                   	push   eax
c0023a36:	6a 0c                	push   0xc
c0023a38:	57                   	push   edi
c0023a39:	53                   	push   ebx
c0023a3a:	e8 c5 fd ff ff       	call   c0023804 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023a3f:	83 c4 10             	add    esp,0x10
c0023a42:	50                   	push   eax
c0023a43:	6a 0c                	push   0xc
c0023a45:	57                   	push   edi
c0023a46:	53                   	push   ebx
c0023a47:	e8 78 fe ff ff       	call   c00238c4 <IDE::read(unsigned char, unsigned char)>
c0023a4c:	83 c4 10             	add    esp,0x10
c0023a4f:	4e                   	dec    esi
c0023a50:	75 f0                	jne    c0023a42 <IDE::enableIRQs(unsigned char, bool)+0x32>
c0023a52:	5b                   	pop    ebx
c0023a53:	5e                   	pop    esi
c0023a54:	5f                   	pop    edi
c0023a55:	c3                   	ret    

c0023a56 <IDE::open(int, int, void*)>:
c0023a56:	55                   	push   ebp
c0023a57:	57                   	push   edi
c0023a58:	56                   	push   esi
c0023a59:	53                   	push   ebx
c0023a5a:	83 ec 1c             	sub    esp,0x1c
c0023a5d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0023a61:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c0023a6a:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c0023a73:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c0023a7a:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c0023a81:	0f 85 b0 02 00 00    	jne    c0023d37 <IDE::open(int, int, void*)+0x2e1>
c0023a87:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c0023a8d:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0023a91:	83 e0 7f             	and    eax,0x7f
c0023a94:	3c 05                	cmp    al,0x5
c0023a96:	74 04                	je     c0023a9c <IDE::open(int, int, void*)+0x46>
c0023a98:	3c 0f                	cmp    al,0xf
c0023a9a:	75 32                	jne    c0023ace <IDE::open(int, int, void*)+0x78>
c0023a9c:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c0023aa2:	83 e0 fc             	and    eax,0xfffffffc
c0023aa5:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c0023aac:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c0023ab2:	83 e0 fc             	and    eax,0xfffffffc
c0023ab5:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c0023abc:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c0023ac2:	83 e0 fc             	and    eax,0xfffffffc
c0023ac5:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0023acc:	eb 14                	jmp    c0023ae2 <IDE::open(int, int, void*)+0x8c>
c0023ace:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c0023ad8:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c0023ae2:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c0023ae9:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c0023af0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0023af4:	89 c6                	mov    esi,eax
c0023af6:	bf f8 0c 00 00       	mov    edi,0xcf8
c0023afb:	c1 e6 10             	shl    esi,0x10
c0023afe:	89 e8                	mov    eax,ebp
c0023b00:	89 fa                	mov    edx,edi
c0023b02:	c1 e0 0b             	shl    eax,0xb
c0023b05:	09 f0                	or     eax,esi
c0023b07:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c0023b0e:	c1 e6 08             	shl    esi,0x8
c0023b11:	09 c6                	or     esi,eax
c0023b13:	89 f0                	mov    eax,esi
c0023b15:	0d 08 00 00 80       	or     eax,0x80000008
c0023b1a:	ef                   	out    dx,eax
c0023b1b:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c0023b20:	89 ca                	mov    edx,ecx
c0023b22:	ed                   	in     eax,dx
c0023b23:	c1 e8 10             	shr    eax,0x10
c0023b26:	3d ff ff 00 00       	cmp    eax,0xffff
c0023b2b:	0f 84 f5 00 00 00    	je     c0023c26 <IDE::open(int, int, void*)+0x1d0>
c0023b31:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c0023b37:	89 fa                	mov    edx,edi
c0023b39:	89 f0                	mov    eax,esi
c0023b3b:	ef                   	out    dx,eax
c0023b3c:	b0 fe                	mov    al,0xfe
c0023b3e:	89 ca                	mov    edx,ecx
c0023b40:	ee                   	out    dx,al
c0023b41:	89 f0                	mov    eax,esi
c0023b43:	89 fa                	mov    edx,edi
c0023b45:	ef                   	out    dx,eax
c0023b46:	89 ca                	mov    edx,ecx
c0023b48:	ed                   	in     eax,dx
c0023b49:	3c fe                	cmp    al,0xfe
c0023b4b:	0f 85 a9 00 00 00    	jne    c0023bfa <IDE::open(int, int, void*)+0x1a4>
c0023b51:	8b 15 68 ee 02 c0    	mov    edx,DWORD PTR ds:0xc002ee68
c0023b57:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c0023b5e:	74 33                	je     c0023b93 <IDE::open(int, int, void*)+0x13d>
c0023b60:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c0023b66:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c0023b6a:	40                   	inc    eax
c0023b6b:	83 ec 0c             	sub    esp,0xc
c0023b6e:	0f b6 c0             	movzx  eax,al
c0023b71:	50                   	push   eax
c0023b72:	55                   	push   ebp
c0023b73:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0023b77:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c0023b7d:	51                   	push   ecx
c0023b7e:	e8 3b 48 ff ff       	call   c00183be <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c0023b83:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c0023b88:	83 c4 1c             	add    esp,0x1c
c0023b8b:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0023b91:	eb 0a                	jmp    c0023b9d <IDE::open(int, int, void*)+0x147>
c0023b93:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c0023b9d:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c0023ba4:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c0023bab:	c1 e1 10             	shl    ecx,0x10
c0023bae:	c1 e0 08             	shl    eax,0x8
c0023bb1:	bf f8 0c 00 00       	mov    edi,0xcf8
c0023bb6:	09 c1                	or     ecx,eax
c0023bb8:	89 fa                	mov    edx,edi
c0023bba:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c0023bc1:	c1 e0 0b             	shl    eax,0xb
c0023bc4:	09 c1                	or     ecx,eax
c0023bc6:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c0023bcc:	89 c8                	mov    eax,ecx
c0023bce:	ef                   	out    dx,eax
c0023bcf:	be fc 0c 00 00       	mov    esi,0xcfc
c0023bd4:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c0023bda:	89 f2                	mov    edx,esi
c0023bdc:	ee                   	out    dx,al
c0023bdd:	89 c8                	mov    eax,ecx
c0023bdf:	89 fa                	mov    edx,edi
c0023be1:	ef                   	out    dx,eax
c0023be2:	89 f2                	mov    edx,esi
c0023be4:	ed                   	in     eax,dx
c0023be5:	0f b6 c0             	movzx  eax,al
c0023be8:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c0023bee:	74 46                	je     c0023c36 <IDE::open(int, int, void*)+0x1e0>
c0023bf0:	83 ec 0c             	sub    esp,0xc
c0023bf3:	68 00 d5 02 c0       	push   0xc002d500
c0023bf8:	eb 34                	jmp    c0023c2e <IDE::open(int, int, void*)+0x1d8>
c0023bfa:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c0023c03:	75 17                	jne    c0023c1c <IDE::open(int, int, void*)+0x1c6>
c0023c05:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c0023c0a:	74 07                	je     c0023c13 <IDE::open(int, int, void*)+0x1bd>
c0023c0c:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c0023c11:	75 09                	jne    c0023c1c <IDE::open(int, int, void*)+0x1c6>
c0023c13:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0023c1a:	eb 1a                	jmp    c0023c36 <IDE::open(int, int, void*)+0x1e0>
c0023c1c:	83 ec 0c             	sub    esp,0xc
c0023c1f:	68 08 d5 02 c0       	push   0xc002d508
c0023c24:	eb 08                	jmp    c0023c2e <IDE::open(int, int, void*)+0x1d8>
c0023c26:	83 ec 0c             	sub    esp,0xc
c0023c29:	68 39 d5 02 c0       	push   0xc002d539
c0023c2e:	e8 7e 6c ff ff       	call   c001a8b1 <Krnl::panic(char const*)>
c0023c33:	83 c4 10             	add    esp,0x10
c0023c36:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c0023c3d:	79 1a                	jns    c0023c59 <IDE::open(int, int, void*)+0x203>
c0023c3f:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c0023c45:	83 e0 fc             	and    eax,0xfffffffc
c0023c48:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c0023c4f:	83 c0 08             	add    eax,0x8
c0023c52:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c0023c59:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0023c5f:	89 c2                	mov    edx,eax
c0023c61:	83 e2 0f             	and    edx,0xf
c0023c64:	66 83 fa 08          	cmp    dx,0x8
c0023c68:	75 0a                	jne    c0023c74 <IDE::open(int, int, void*)+0x21e>
c0023c6a:	83 e8 02             	sub    eax,0x2
c0023c6d:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0023c74:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c0023c7a:	89 c2                	mov    edx,eax
c0023c7c:	83 e2 0f             	and    edx,0xf
c0023c7f:	66 83 fa 08          	cmp    dx,0x8
c0023c83:	75 0a                	jne    c0023c8f <IDE::open(int, int, void*)+0x239>
c0023c85:	83 e8 02             	sub    eax,0x2
c0023c88:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c0023c8f:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0023c96:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c0023c9d:	89 d0                	mov    eax,edx
c0023c9f:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0023ca2:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0023ca6:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c0023caa:	8d 4a 01             	lea    ecx,[edx+0x1]
c0023cad:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0023cb2:	0f b6 c9             	movzx  ecx,cl
c0023cb5:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c0023cbc:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0023cbf:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0023cc3:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c0023cc7:	8d 50 02             	lea    edx,[eax+0x2]
c0023cca:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0023ccf:	0f b6 d2             	movzx  edx,dl
c0023cd2:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0023cd8:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0023cdb:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0023cdf:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c0023ce3:	8d 48 03             	lea    ecx,[eax+0x3]
c0023ce6:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0023ceb:	0f b6 c9             	movzx  ecx,cl
c0023cee:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c0023cf4:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0023cf7:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0023cfb:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c0023cff:	8d 50 04             	lea    edx,[eax+0x4]
c0023d02:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c0023d08:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0023d0d:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c0023d14:	66 85 f6             	test   si,si
c0023d17:	74 3e                	je     c0023d57 <IDE::open(int, int, void*)+0x301>
c0023d19:	0f b6 d2             	movzx  edx,dl
c0023d1c:	83 c0 05             	add    eax,0x5
c0023d1f:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0023d22:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0023d26:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c0023d2a:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0023d30:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0023d35:	eb 20                	jmp    c0023d57 <IDE::open(int, int, void*)+0x301>
c0023d37:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c0023d41:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c0023d4b:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0023d52:	e9 02 ff ff ff       	jmp    c0023c59 <IDE::open(int, int, void*)+0x203>
c0023d57:	52                   	push   edx
c0023d58:	52                   	push   edx
c0023d59:	6a 00                	push   0x0
c0023d5b:	53                   	push   ebx
c0023d5c:	e8 7d fa ff ff       	call   c00237de <IDE::prepareInterrupt(unsigned char)>
c0023d61:	59                   	pop    ecx
c0023d62:	5e                   	pop    esi
c0023d63:	6a 01                	push   0x1
c0023d65:	53                   	push   ebx
c0023d66:	e8 73 fa ff ff       	call   c00237de <IDE::prepareInterrupt(unsigned char)>
c0023d6b:	83 c4 0c             	add    esp,0xc
c0023d6e:	6a 00                	push   0x0
c0023d70:	6a 00                	push   0x0
c0023d72:	53                   	push   ebx
c0023d73:	e8 98 fc ff ff       	call   c0023a10 <IDE::enableIRQs(unsigned char, bool)>
c0023d78:	83 c4 0c             	add    esp,0xc
c0023d7b:	6a 00                	push   0x0
c0023d7d:	6a 01                	push   0x1
c0023d7f:	53                   	push   ebx
c0023d80:	e8 8b fc ff ff       	call   c0023a10 <IDE::enableIRQs(unsigned char, bool)>
c0023d85:	83 c4 10             	add    esp,0x10
c0023d88:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c0023d8f:	74 40                	je     c0023dd1 <IDE::open(int, int, void*)+0x37b>
c0023d91:	83 ec 0c             	sub    esp,0xc
c0023d94:	68 63 d5 02 c0       	push   0xc002d563
c0023d99:	e8 53 f1 fe ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c0023d9e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023da1:	6a 01                	push   0x1
c0023da3:	68 d8 39 02 c0       	push   0xc00239d8
c0023da8:	6a 0e                	push   0xe
c0023daa:	53                   	push   ebx
c0023dab:	e8 fa 04 ff ff       	call   c00142aa <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023db0:	83 c4 14             	add    esp,0x14
c0023db3:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0023db9:	53                   	push   ebx
c0023dba:	6a 01                	push   0x1
c0023dbc:	68 f4 39 02 c0       	push   0xc00239f4
c0023dc1:	6a 0f                	push   0xf
c0023dc3:	53                   	push   ebx
c0023dc4:	e8 e1 04 ff ff       	call   c00142aa <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023dc9:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c0023dcf:	eb 4a                	jmp    c0023e1b <IDE::open(int, int, void*)+0x3c5>
c0023dd1:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c0023ddb:	50                   	push   eax
c0023ddc:	6a 0f                	push   0xf
c0023dde:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c0023de4:	68 7f d5 02 c0       	push   0xc002d57f
c0023de9:	e8 03 f1 fe ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c0023dee:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023df1:	6a 00                	push   0x0
c0023df3:	68 d8 39 02 c0       	push   0xc00239d8
c0023df8:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c0023dfe:	53                   	push   ebx
c0023dff:	e8 a6 04 ff ff       	call   c00142aa <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023e04:	83 c4 14             	add    esp,0x14
c0023e07:	53                   	push   ebx
c0023e08:	6a 00                	push   0x0
c0023e0a:	68 f4 39 02 c0       	push   0xc00239f4
c0023e0f:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c0023e15:	53                   	push   ebx
c0023e16:	e8 8f 04 ff ff       	call   c00142aa <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023e1b:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023e1d:	83 c4 20             	add    esp,0x20
c0023e20:	83 ec 0c             	sub    esp,0xc
c0023e23:	53                   	push   ebx
c0023e24:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0023e27:	83 c4 0c             	add    esp,0xc
c0023e2a:	6a 07                	push   0x7
c0023e2c:	6a 00                	push   0x0
c0023e2e:	53                   	push   ebx
c0023e2f:	e8 90 fa ff ff       	call   c00238c4 <IDE::read(unsigned char, unsigned char)>
c0023e34:	83 c4 0c             	add    esp,0xc
c0023e37:	6a 07                	push   0x7
c0023e39:	6a 01                	push   0x1
c0023e3b:	53                   	push   ebx
c0023e3c:	e8 83 fa ff ff       	call   c00238c4 <IDE::read(unsigned char, unsigned char)>
c0023e41:	83 c4 0c             	add    esp,0xc
c0023e44:	6a 01                	push   0x1
c0023e46:	6a 00                	push   0x0
c0023e48:	53                   	push   ebx
c0023e49:	e8 c2 fb ff ff       	call   c0023a10 <IDE::enableIRQs(unsigned char, bool)>
c0023e4e:	83 c4 0c             	add    esp,0xc
c0023e51:	6a 01                	push   0x1
c0023e53:	6a 01                	push   0x1
c0023e55:	53                   	push   ebx
c0023e56:	e8 b5 fb ff ff       	call   c0023a10 <IDE::enableIRQs(unsigned char, bool)>
c0023e5b:	83 c4 2c             	add    esp,0x2c
c0023e5e:	31 c0                	xor    eax,eax
c0023e60:	5b                   	pop    ebx
c0023e61:	5e                   	pop    esi
c0023e62:	5f                   	pop    edi
c0023e63:	5d                   	pop    ebp
c0023e64:	c3                   	ret    
c0023e65:	90                   	nop

c0023e66 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c0023e66:	55                   	push   ebp
c0023e67:	57                   	push   edi
c0023e68:	56                   	push   esi
c0023e69:	53                   	push   ebx
c0023e6a:	83 ec 1c             	sub    esp,0x1c
c0023e6d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0023e71:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0023e75:	8d 50 f8             	lea    edx,[eax-0x8]
c0023e78:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0023e7c:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0023e80:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0023e84:	80 fa 03             	cmp    dl,0x3
c0023e87:	77 5d                	ja     c0023ee6 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c0023e89:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0023e8d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0023e91:	0f b6 db             	movzx  ebx,bl
c0023e94:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c0023e97:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c0023e9b:	83 ca 80             	or     edx,0xffffff80
c0023e9e:	0f b6 d2             	movzx  edx,dl
c0023ea1:	52                   	push   edx
c0023ea2:	6a 0c                	push   0xc
c0023ea4:	53                   	push   ebx
c0023ea5:	56                   	push   esi
c0023ea6:	e8 59 f9 ff ff       	call   c0023804 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023eab:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c0023eb0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023eb4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0023eb8:	0f b6 c0             	movzx  eax,al
c0023ebb:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c0023ebf:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0023ec1:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c0023ec6:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c0023eca:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0023ece:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0023ed2:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0023eda:	83 c4 2c             	add    esp,0x2c
c0023edd:	5b                   	pop    ebx
c0023ede:	5e                   	pop    esi
c0023edf:	5f                   	pop    edi
c0023ee0:	5d                   	pop    ebp
c0023ee1:	e9 1e f9 ff ff       	jmp    c0023804 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023ee6:	3c 07                	cmp    al,0x7
c0023ee8:	77 10                	ja     c0023efa <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c0023eea:	0f b6 db             	movzx  ebx,bl
c0023eed:	0f b6 d0             	movzx  edx,al
c0023ef0:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c0023ef8:	eb 2d                	jmp    c0023f27 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0023efa:	3c 0d                	cmp    al,0xd
c0023efc:	77 13                	ja     c0023f11 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c0023efe:	0f b6 db             	movzx  ebx,bl
c0023f01:	0f b6 c0             	movzx  eax,al
c0023f04:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c0023f0b:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c0023f0f:	eb 16                	jmp    c0023f27 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0023f11:	3c 15                	cmp    al,0x15
c0023f13:	77 14                	ja     c0023f29 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c0023f15:	0f b6 db             	movzx  ebx,bl
c0023f18:	0f b6 c0             	movzx  eax,al
c0023f1b:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c0023f23:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c0023f27:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0023f29:	83 c4 1c             	add    esp,0x1c
c0023f2c:	5b                   	pop    ebx
c0023f2d:	5e                   	pop    esi
c0023f2e:	5f                   	pop    edi
c0023f2f:	5d                   	pop    ebp
c0023f30:	c3                   	ret    
c0023f31:	90                   	nop

c0023f32 <IDE::detect()>:
c0023f32:	55                   	push   ebp
c0023f33:	57                   	push   edi
c0023f34:	56                   	push   esi
c0023f35:	53                   	push   ebx
c0023f36:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0023f3c:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c0023f43:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c0023f4a:	0f 85 be 02 00 00    	jne    c002420e <IDE::detect()+0x2dc>
c0023f50:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c0023f57:	31 f6                	xor    esi,esi
c0023f59:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0023f61:	31 ed                	xor    ebp,ebp
c0023f63:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023f67:	c1 e0 06             	shl    eax,0x6
c0023f6a:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c0023f72:	89 e8                	mov    eax,ebp
c0023f74:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0023f78:	c1 e0 04             	shl    eax,0x4
c0023f7b:	83 c8 a0             	or     eax,0xffffffa0
c0023f7e:	0f b6 c0             	movzx  eax,al
c0023f81:	50                   	push   eax
c0023f82:	6a 06                	push   0x6
c0023f84:	56                   	push   esi
c0023f85:	53                   	push   ebx
c0023f86:	e8 79 f8 ff ff       	call   c0023804 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023f8b:	83 c4 0c             	add    esp,0xc
c0023f8e:	6a 0c                	push   0xc
c0023f90:	56                   	push   esi
c0023f91:	53                   	push   ebx
c0023f92:	e8 2d f9 ff ff       	call   c00238c4 <IDE::read(unsigned char, unsigned char)>
c0023f97:	83 c4 0c             	add    esp,0xc
c0023f9a:	6a 0c                	push   0xc
c0023f9c:	56                   	push   esi
c0023f9d:	53                   	push   ebx
c0023f9e:	e8 21 f9 ff ff       	call   c00238c4 <IDE::read(unsigned char, unsigned char)>
c0023fa3:	83 c4 0c             	add    esp,0xc
c0023fa6:	6a 0c                	push   0xc
c0023fa8:	56                   	push   esi
c0023fa9:	53                   	push   ebx
c0023faa:	e8 15 f9 ff ff       	call   c00238c4 <IDE::read(unsigned char, unsigned char)>
c0023faf:	83 c4 0c             	add    esp,0xc
c0023fb2:	6a 0c                	push   0xc
c0023fb4:	56                   	push   esi
c0023fb5:	53                   	push   ebx
c0023fb6:	e8 09 f9 ff ff       	call   c00238c4 <IDE::read(unsigned char, unsigned char)>
c0023fbb:	68 ec 00 00 00       	push   0xec
c0023fc0:	6a 07                	push   0x7
c0023fc2:	56                   	push   esi
c0023fc3:	53                   	push   ebx
c0023fc4:	e8 3b f8 ff ff       	call   c0023804 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023fc9:	83 c4 1c             	add    esp,0x1c
c0023fcc:	6a 0c                	push   0xc
c0023fce:	56                   	push   esi
c0023fcf:	53                   	push   ebx
c0023fd0:	e8 ef f8 ff ff       	call   c00238c4 <IDE::read(unsigned char, unsigned char)>
c0023fd5:	83 c4 0c             	add    esp,0xc
c0023fd8:	6a 0c                	push   0xc
c0023fda:	56                   	push   esi
c0023fdb:	53                   	push   ebx
c0023fdc:	e8 e3 f8 ff ff       	call   c00238c4 <IDE::read(unsigned char, unsigned char)>
c0023fe1:	83 c4 0c             	add    esp,0xc
c0023fe4:	6a 0c                	push   0xc
c0023fe6:	56                   	push   esi
c0023fe7:	53                   	push   ebx
c0023fe8:	e8 d7 f8 ff ff       	call   c00238c4 <IDE::read(unsigned char, unsigned char)>
c0023fed:	83 c4 0c             	add    esp,0xc
c0023ff0:	6a 0c                	push   0xc
c0023ff2:	56                   	push   esi
c0023ff3:	53                   	push   ebx
c0023ff4:	e8 cb f8 ff ff       	call   c00238c4 <IDE::read(unsigned char, unsigned char)>
c0023ff9:	83 c4 0c             	add    esp,0xc
c0023ffc:	6a 0c                	push   0xc
c0023ffe:	56                   	push   esi
c0023fff:	53                   	push   ebx
c0024000:	e8 bf f8 ff ff       	call   c00238c4 <IDE::read(unsigned char, unsigned char)>
c0024005:	83 c4 10             	add    esp,0x10
c0024008:	84 c0                	test   al,al
c002400a:	0f 84 8b 01 00 00    	je     c002419b <IDE::detect()+0x269>
c0024010:	31 ff                	xor    edi,edi
c0024012:	50                   	push   eax
c0024013:	6a 0c                	push   0xc
c0024015:	56                   	push   esi
c0024016:	53                   	push   ebx
c0024017:	e8 a8 f8 ff ff       	call   c00238c4 <IDE::read(unsigned char, unsigned char)>
c002401c:	83 c4 10             	add    esp,0x10
c002401f:	a8 01                	test   al,0x1
c0024021:	0f 85 8e 01 00 00    	jne    c00241b5 <IDE::detect()+0x283>
c0024027:	84 c0                	test   al,al
c0024029:	78 04                	js     c002402f <IDE::detect()+0xfd>
c002402b:	a8 08                	test   al,0x8
c002402d:	75 27                	jne    c0024056 <IDE::detect()+0x124>
c002402f:	47                   	inc    edi
c0024030:	81 ff 17 01 00 00    	cmp    edi,0x117
c0024036:	7e da                	jle    c0024012 <IDE::detect()+0xe0>
c0024038:	50                   	push   eax
c0024039:	50                   	push   eax
c002403a:	6a 00                	push   0x0
c002403c:	68 40 4b 4c 00       	push   0x4c4b40
c0024041:	e8 6f a7 ff ff       	call   c001e7b5 <nanoSleep(unsigned long long)>
c0024046:	83 c4 10             	add    esp,0x10
c0024049:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c002404f:	75 c1                	jne    c0024012 <IDE::detect()+0xe0>
c0024051:	e9 5f 01 00 00       	jmp    c00241b5 <IDE::detect()+0x283>
c0024056:	31 c9                	xor    ecx,ecx
c0024058:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c002405c:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0024060:	83 ec 0c             	sub    esp,0xc
c0024063:	68 80 00 00 00       	push   0x80
c0024068:	57                   	push   edi
c0024069:	6a 00                	push   0x0
c002406b:	56                   	push   esi
c002406c:	53                   	push   ebx
c002406d:	e8 f4 fd ff ff       	call   c0023e66 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c0024072:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c0024077:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002407b:	89 d1                	mov    ecx,edx
c002407d:	c1 e0 06             	shl    eax,0x6
c0024080:	01 d8                	add    eax,ebx
c0024082:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c0024089:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c0024090:	89 f2                	mov    edx,esi
c0024092:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c0024098:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c002409c:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c00240a2:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00240a6:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c00240ad:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c00240b5:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c00240bc:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c00240c4:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c00240ca:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c00240d1:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c00240d7:	8d 54 24 58          	lea    edx,[esp+0x58]
c00240db:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00240df:	83 c4 20             	add    esp,0x20
c00240e2:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c00240e5:	83 c0 02             	add    eax,0x2
c00240e8:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c00240ee:	83 c7 02             	add    edi,0x2
c00240f1:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c00240f4:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c00240fa:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c00240fe:	75 e2                	jne    c00240e2 <IDE::detect()+0x1b0>
c0024100:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0024104:	c1 e0 06             	shl    eax,0x6
c0024107:	01 d8                	add    eax,ebx
c0024109:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c002410f:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c0024116:	66 c1 ea 09          	shr    dx,0x9
c002411a:	83 e2 01             	and    edx,0x1
c002411d:	84 c9                	test   cl,cl
c002411f:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c0024125:	75 2f                	jne    c0024156 <IDE::detect()+0x224>
c0024127:	8b 80 7c 01 00 00    	mov    eax,DWORD PTR [eax+0x17c]
c002412d:	85 c0                	test   eax,eax
c002412f:	74 66                	je     c0024197 <IDE::detect()+0x265>
c0024131:	50                   	push   eax
c0024132:	55                   	push   ebp
c0024133:	56                   	push   esi
c0024134:	68 9b d5 02 c0       	push   0xc002d59b
c0024139:	e8 b3 ed fe ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c002413e:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0024145:	e8 e8 b7 fe ff       	call   c000f932 <malloc>
c002414a:	89 c7                	mov    edi,eax
c002414c:	89 04 24             	mov    DWORD PTR [esp],eax
c002414f:	e8 78 06 00 00       	call   c00247cc <ATA::ATA()>
c0024154:	eb 28                	jmp    c002417e <IDE::detect()+0x24c>
c0024156:	ff b0 7c 01 00 00    	push   DWORD PTR [eax+0x17c]
c002415c:	55                   	push   ebp
c002415d:	56                   	push   esi
c002415e:	68 ca d5 02 c0       	push   0xc002d5ca
c0024163:	e8 89 ed fe ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c0024168:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c002416f:	e8 be b7 fe ff       	call   c000f932 <malloc>
c0024174:	89 c7                	mov    edi,eax
c0024176:	89 04 24             	mov    DWORD PTR [esp],eax
c0024179:	e8 8e 0c 00 00       	call   c0024e0c <ATAPI::ATAPI()>
c002417e:	5a                   	pop    edx
c002417f:	59                   	pop    ecx
c0024180:	57                   	push   edi
c0024181:	53                   	push   ebx
c0024182:	e8 9f 01 ff ff       	call   c0014326 <Device::addChild(Device*)>
c0024187:	8b 07                	mov    eax,DWORD PTR [edi]
c0024189:	53                   	push   ebx
c002418a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002418e:	6a 00                	push   0x0
c0024190:	57                   	push   edi
c0024191:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0024194:	83 c4 20             	add    esp,0x20
c0024197:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c002419b:	4d                   	dec    ebp
c002419c:	74 0a                	je     c00241a8 <IDE::detect()+0x276>
c002419e:	bd 01 00 00 00       	mov    ebp,0x1
c00241a3:	e9 bb fd ff ff       	jmp    c0023f63 <IDE::detect()+0x31>
c00241a8:	4e                   	dec    esi
c00241a9:	74 63                	je     c002420e <IDE::detect()+0x2dc>
c00241ab:	be 01 00 00 00       	mov    esi,0x1
c00241b0:	e9 ac fd ff ff       	jmp    c0023f61 <IDE::detect()+0x2f>
c00241b5:	50                   	push   eax
c00241b6:	6a 04                	push   0x4
c00241b8:	56                   	push   esi
c00241b9:	53                   	push   ebx
c00241ba:	e8 05 f7 ff ff       	call   c00238c4 <IDE::read(unsigned char, unsigned char)>
c00241bf:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00241c3:	83 c4 0c             	add    esp,0xc
c00241c6:	6a 05                	push   0x5
c00241c8:	56                   	push   esi
c00241c9:	53                   	push   ebx
c00241ca:	e8 f5 f6 ff ff       	call   c00238c4 <IDE::read(unsigned char, unsigned char)>
c00241cf:	83 c4 10             	add    esp,0x10
c00241d2:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00241d6:	80 fa 14             	cmp    dl,0x14
c00241d9:	75 04                	jne    c00241df <IDE::detect()+0x2ad>
c00241db:	3c eb                	cmp    al,0xeb
c00241dd:	eb 07                	jmp    c00241e6 <IDE::detect()+0x2b4>
c00241df:	3c 96                	cmp    al,0x96
c00241e1:	75 b8                	jne    c002419b <IDE::detect()+0x269>
c00241e3:	80 fa 69             	cmp    dl,0x69
c00241e6:	75 b3                	jne    c002419b <IDE::detect()+0x269>
c00241e8:	68 a1 00 00 00       	push   0xa1
c00241ed:	6a 07                	push   0x7
c00241ef:	56                   	push   esi
c00241f0:	53                   	push   ebx
c00241f1:	e8 0e f6 ff ff       	call   c0023804 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00241f6:	5f                   	pop    edi
c00241f7:	58                   	pop    eax
c00241f8:	6a 00                	push   0x0
c00241fa:	68 40 42 0f 00       	push   0xf4240
c00241ff:	e8 b1 a5 ff ff       	call   c001e7b5 <nanoSleep(unsigned long long)>
c0024204:	83 c4 10             	add    esp,0x10
c0024207:	b1 01                	mov    cl,0x1
c0024209:	e9 4a fe ff ff       	jmp    c0024058 <IDE::detect()+0x126>
c002420e:	81 c4 1c 02 00 00    	add    esp,0x21c
c0024214:	5b                   	pop    ebx
c0024215:	5e                   	pop    esi
c0024216:	5f                   	pop    edi
c0024217:	5d                   	pop    ebp
c0024218:	c3                   	ret    
c0024219:	90                   	nop

c002421a <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c002421a:	55                   	push   ebp
c002421b:	57                   	push   edi
c002421c:	56                   	push   esi
c002421d:	53                   	push   ebx
c002421e:	83 ec 1c             	sub    esp,0x1c
c0024221:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0024225:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0024229:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c002422d:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0024231:	88 c3                	mov    bl,al
c0024233:	84 c0                	test   al,al
c0024235:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024239:	0f 84 67 01 00 00    	je     c00243a6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x18c>
c002423f:	83 ec 0c             	sub    esp,0xc
c0024242:	68 fb d5 02 c0       	push   0xc002d5fb
c0024247:	e8 a5 ec fe ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c002424c:	83 c4 10             	add    esp,0x10
c002424f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024253:	3c 01                	cmp    al,0x1
c0024255:	75 17                	jne    c002426e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x54>
c0024257:	83 ec 0c             	sub    esp,0xc
c002425a:	b3 13                	mov    bl,0x13
c002425c:	68 07 d6 02 c0       	push   0xc002d607
c0024261:	e8 8b ec fe ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c0024266:	83 c4 10             	add    esp,0x10
c0024269:	e9 25 01 00 00       	jmp    c0024393 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c002426e:	3c 02                	cmp    al,0x2
c0024270:	0f 85 ef 00 00 00    	jne    c0024365 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x14b>
c0024276:	d1 e6                	shl    esi,1
c0024278:	09 ee                	or     esi,ebp
c002427a:	52                   	push   edx
c002427b:	89 f0                	mov    eax,esi
c002427d:	6a 01                	push   0x1
c002427f:	0f b6 f0             	movzx  esi,al
c0024282:	c1 e6 06             	shl    esi,0x6
c0024285:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c002428d:	50                   	push   eax
c002428e:	57                   	push   edi
c002428f:	e8 30 f6 ff ff       	call   c00238c4 <IDE::read(unsigned char, unsigned char)>
c0024294:	83 c4 10             	add    esp,0x10
c0024297:	89 c6                	mov    esi,eax
c0024299:	a8 01                	test   al,0x1
c002429b:	74 12                	je     c00242af <IDE::printError(unsigned char, unsigned char, unsigned char)+0x95>
c002429d:	83 ec 0c             	sub    esp,0xc
c00242a0:	b3 07                	mov    bl,0x7
c00242a2:	68 1c d6 02 c0       	push   0xc002d61c
c00242a7:	e8 45 ec fe ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c00242ac:	83 c4 10             	add    esp,0x10
c00242af:	f7 c6 02 00 00 00    	test   esi,0x2
c00242b5:	74 12                	je     c00242c9 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaf>
c00242b7:	83 ec 0c             	sub    esp,0xc
c00242ba:	b3 03                	mov    bl,0x3
c00242bc:	68 3a d6 02 c0       	push   0xc002d63a
c00242c1:	e8 2b ec fe ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c00242c6:	83 c4 10             	add    esp,0x10
c00242c9:	f7 c6 04 00 00 00    	test   esi,0x4
c00242cf:	74 12                	je     c00242e3 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c00242d1:	83 ec 0c             	sub    esp,0xc
c00242d4:	b3 14                	mov    bl,0x14
c00242d6:	68 5a d6 02 c0       	push   0xc002d65a
c00242db:	e8 11 ec fe ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c00242e0:	83 c4 10             	add    esp,0x10
c00242e3:	f7 c6 08 00 00 00    	test   esi,0x8
c00242e9:	74 12                	je     c00242fd <IDE::printError(unsigned char, unsigned char, unsigned char)+0xe3>
c00242eb:	83 ec 0c             	sub    esp,0xc
c00242ee:	b3 03                	mov    bl,0x3
c00242f0:	68 3a d6 02 c0       	push   0xc002d63a
c00242f5:	e8 f7 eb fe ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c00242fa:	83 c4 10             	add    esp,0x10
c00242fd:	f7 c6 10 00 00 00    	test   esi,0x10
c0024303:	74 12                	je     c0024317 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xfd>
c0024305:	83 ec 0c             	sub    esp,0xc
c0024308:	b3 15                	mov    bl,0x15
c002430a:	68 72 d6 02 c0       	push   0xc002d672
c002430f:	e8 dd eb fe ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c0024314:	83 c4 10             	add    esp,0x10
c0024317:	f7 c6 20 00 00 00    	test   esi,0x20
c002431d:	74 12                	je     c0024331 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x117>
c002431f:	83 ec 0c             	sub    esp,0xc
c0024322:	b3 03                	mov    bl,0x3
c0024324:	68 3a d6 02 c0       	push   0xc002d63a
c0024329:	e8 c3 eb fe ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c002432e:	83 c4 10             	add    esp,0x10
c0024331:	f7 c6 40 00 00 00    	test   esi,0x40
c0024337:	74 12                	je     c002434b <IDE::printError(unsigned char, unsigned char, unsigned char)+0x131>
c0024339:	83 ec 0c             	sub    esp,0xc
c002433c:	b3 16                	mov    bl,0x16
c002433e:	68 8c d6 02 c0       	push   0xc002d68c
c0024343:	e8 a9 eb fe ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c0024348:	83 c4 10             	add    esp,0x10
c002434b:	89 f0                	mov    eax,esi
c002434d:	84 c0                	test   al,al
c002434f:	79 42                	jns    c0024393 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0024351:	83 ec 0c             	sub    esp,0xc
c0024354:	b3 0d                	mov    bl,0xd
c0024356:	68 ad d6 02 c0       	push   0xc002d6ad
c002435b:	e8 91 eb fe ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c0024360:	83 c4 10             	add    esp,0x10
c0024363:	eb 2e                	jmp    c0024393 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0024365:	3c 03                	cmp    al,0x3
c0024367:	75 14                	jne    c002437d <IDE::printError(unsigned char, unsigned char, unsigned char)+0x163>
c0024369:	83 ec 0c             	sub    esp,0xc
c002436c:	b3 17                	mov    bl,0x17
c002436e:	68 c1 d6 02 c0       	push   0xc002d6c1
c0024373:	e8 79 eb fe ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c0024378:	83 c4 10             	add    esp,0x10
c002437b:	eb 16                	jmp    c0024393 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c002437d:	3c 04                	cmp    al,0x4
c002437f:	75 12                	jne    c0024393 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0024381:	83 ec 0c             	sub    esp,0xc
c0024384:	b3 08                	mov    bl,0x8
c0024386:	68 d7 d6 02 c0       	push   0xc002d6d7
c002438b:	e8 61 eb fe ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c0024390:	83 c4 10             	add    esp,0x10
c0024393:	50                   	push   eax
c0024394:	50                   	push   eax
c0024395:	0f b6 c3             	movzx  eax,bl
c0024398:	50                   	push   eax
c0024399:	68 ef d6 02 c0       	push   0xc002d6ef
c002439e:	e8 4e eb fe ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c00243a3:	83 c4 10             	add    esp,0x10
c00243a6:	83 c4 1c             	add    esp,0x1c
c00243a9:	88 d8                	mov    al,bl
c00243ab:	5b                   	pop    ebx
c00243ac:	5e                   	pop    esi
c00243ad:	5f                   	pop    edi
c00243ae:	5d                   	pop    ebp
c00243af:	c3                   	ret    

c00243b0 <IDE::polling(unsigned char, unsigned int)>:
c00243b0:	57                   	push   edi
c00243b1:	56                   	push   esi
c00243b2:	53                   	push   ebx
c00243b3:	bb 04 00 00 00       	mov    ebx,0x4
c00243b8:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c00243bc:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c00243c1:	52                   	push   edx
c00243c2:	6a 0c                	push   0xc
c00243c4:	56                   	push   esi
c00243c5:	57                   	push   edi
c00243c6:	e8 f9 f4 ff ff       	call   c00238c4 <IDE::read(unsigned char, unsigned char)>
c00243cb:	83 c4 10             	add    esp,0x10
c00243ce:	4b                   	dec    ebx
c00243cf:	75 f0                	jne    c00243c1 <IDE::polling(unsigned char, unsigned int)+0x11>
c00243d1:	bb a0 86 01 00       	mov    ebx,0x186a0
c00243d6:	50                   	push   eax
c00243d7:	6a 0c                	push   0xc
c00243d9:	56                   	push   esi
c00243da:	57                   	push   edi
c00243db:	e8 e4 f4 ff ff       	call   c00238c4 <IDE::read(unsigned char, unsigned char)>
c00243e0:	83 c4 10             	add    esp,0x10
c00243e3:	a8 01                	test   al,0x1
c00243e5:	74 12                	je     c00243f9 <IDE::polling(unsigned char, unsigned int)+0x49>
c00243e7:	83 ec 0c             	sub    esp,0xc
c00243ea:	68 09 d7 02 c0       	push   0xc002d709
c00243ef:	e8 fd ea fe ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c00243f4:	83 c4 10             	add    esp,0x10
c00243f7:	eb 17                	jmp    c0024410 <IDE::polling(unsigned char, unsigned int)+0x60>
c00243f9:	a8 20                	test   al,0x20
c00243fb:	75 0f                	jne    c002440c <IDE::polling(unsigned char, unsigned int)+0x5c>
c00243fd:	4b                   	dec    ebx
c00243fe:	74 10                	je     c0024410 <IDE::polling(unsigned char, unsigned int)+0x60>
c0024400:	84 c0                	test   al,al
c0024402:	78 d2                	js     c00243d6 <IDE::polling(unsigned char, unsigned int)+0x26>
c0024404:	a8 08                	test   al,0x8
c0024406:	74 ce                	je     c00243d6 <IDE::polling(unsigned char, unsigned int)+0x26>
c0024408:	31 c0                	xor    eax,eax
c002440a:	eb 06                	jmp    c0024412 <IDE::polling(unsigned char, unsigned int)+0x62>
c002440c:	b0 01                	mov    al,0x1
c002440e:	eb 02                	jmp    c0024412 <IDE::polling(unsigned char, unsigned int)+0x62>
c0024410:	b0 02                	mov    al,0x2
c0024412:	5b                   	pop    ebx
c0024413:	5e                   	pop    esi
c0024414:	5f                   	pop    edi
c0024415:	c3                   	ret    

c0024416 <SATABus::close(int, int, void*)>:
c0024416:	31 c0                	xor    eax,eax
c0024418:	c3                   	ret    
c0024419:	90                   	nop

c002441a <SATABus::detect()>:
c002441a:	c3                   	ret    
c002441b:	90                   	nop

c002441c <SATABus::SATABus()>:
c002441c:	83 ec 0c             	sub    esp,0xc
c002441f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024423:	83 ec 08             	sub    esp,0x8
c0024426:	68 4c d7 02 c0       	push   0xc002d74c
c002442b:	50                   	push   eax
c002442c:	e8 8f 02 ff ff       	call   c00146c0 <HardDiskController::HardDiskController(char const*)>
c0024431:	83 c4 10             	add    esp,0x10
c0024434:	ba 08 d8 02 c0       	mov    edx,0xc002d808
c0024439:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002443d:	89 10                	mov    DWORD PTR [eax],edx
c002443f:	83 ec 0c             	sub    esp,0xc
c0024442:	6a 50                	push   0x50
c0024444:	e8 3a bc fe ff       	call   c0010083 <Phys::allocateContiguousPages(int)>
c0024449:	83 c4 10             	add    esp,0x10
c002444c:	89 c2                	mov    edx,eax
c002444e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024452:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0024458:	83 ec 0c             	sub    esp,0xc
c002445b:	6a 50                	push   0x50
c002445d:	e8 83 d6 fe ff       	call   c0011ae5 <Virt::allocateKernelVirtualPages(int)>
c0024462:	83 c4 10             	add    esp,0x10
c0024465:	89 c2                	mov    edx,eax
c0024467:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002446b:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0024471:	e8 ae d8 fe ff       	call   c0011d24 <Virt::getAKernelVAS()>
c0024476:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002447a:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c0024480:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0024484:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c002448a:	83 ec 0c             	sub    esp,0xc
c002448d:	6a 03                	push   0x3
c002448f:	6a 50                	push   0x50
c0024491:	51                   	push   ecx
c0024492:	52                   	push   edx
c0024493:	50                   	push   eax
c0024494:	e8 7d e1 fe ff       	call   c0012616 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0024499:	83 c4 20             	add    esp,0x20
c002449c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00244a0:	8b 90 58 01 00 00    	mov    edx,DWORD PTR [eax+0x158]
c00244a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00244aa:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00244b0:	83 ec 04             	sub    esp,0x4
c00244b3:	52                   	push   edx
c00244b4:	50                   	push   eax
c00244b5:	68 70 d7 02 c0       	push   0xc002d770
c00244ba:	e8 32 ea fe ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c00244bf:	83 c4 10             	add    esp,0x10
c00244c2:	90                   	nop
c00244c3:	83 c4 0c             	add    esp,0xc
c00244c6:	c3                   	ret    
c00244c7:	90                   	nop

c00244c8 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c00244c8:	83 ec 0c             	sub    esp,0xc
c00244cb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00244cf:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c00244d2:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00244d5:	09 c2                	or     edx,eax
c00244d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00244db:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00244e1:	8b 08                	mov    ecx,DWORD PTR [eax]
c00244e3:	31 c0                	xor    eax,eax
c00244e5:	c1 e9 08             	shr    ecx,0x8
c00244e8:	83 e1 0f             	and    ecx,0xf
c00244eb:	39 c8                	cmp    eax,ecx
c00244ed:	74 0a                	je     c00244f9 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c00244ef:	f6 c2 01             	test   dl,0x1
c00244f2:	74 18                	je     c002450c <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x44>
c00244f4:	d1 ea                	shr    edx,1
c00244f6:	40                   	inc    eax
c00244f7:	eb f2                	jmp    c00244eb <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x23>
c00244f9:	83 ec 0c             	sub    esp,0xc
c00244fc:	68 94 d7 02 c0       	push   0xc002d794
c0024501:	e8 ab 63 ff ff       	call   c001a8b1 <Krnl::panic(char const*)>
c0024506:	83 c4 10             	add    esp,0x10
c0024509:	83 c8 ff             	or     eax,0xffffffff
c002450c:	83 c4 0c             	add    esp,0xc
c002450f:	c3                   	ret    

c0024510 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c0024510:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0024514:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0024517:	89 c2                	mov    edx,eax
c0024519:	c1 ea 08             	shr    edx,0x8
c002451c:	83 e2 0f             	and    edx,0xf
c002451f:	fe ca                	dec    dl
c0024521:	75 31                	jne    c0024554 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0024523:	83 e0 0f             	and    eax,0xf
c0024526:	3c 03                	cmp    al,0x3
c0024528:	75 2a                	jne    c0024554 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c002452a:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c002452d:	b8 02 00 00 00       	mov    eax,0x2
c0024532:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c0024538:	74 1c                	je     c0024556 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c002453a:	b8 04 00 00 00       	mov    eax,0x4
c002453f:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c0024545:	74 0f                	je     c0024556 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0024547:	31 c0                	xor    eax,eax
c0024549:	83 fa 03             	cmp    edx,0x3
c002454c:	0f 94 c0             	sete   al
c002454f:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c0024553:	c3                   	ret    
c0024554:	31 c0                	xor    eax,eax
c0024556:	c3                   	ret    
c0024557:	90                   	nop

c0024558 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c0024558:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002455c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002455f:	0f ba e2 0f          	bt     edx,0xf
c0024563:	72 f7                	jb     c002455c <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c0024565:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0024568:	83 ca 10             	or     edx,0x10
c002456b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c002456e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0024571:	83 ca 01             	or     edx,0x1
c0024574:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0024577:	c3                   	ret    

c0024578 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c0024578:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002457c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002457f:	83 e2 fe             	and    edx,0xfffffffe
c0024582:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0024585:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0024588:	83 e2 ef             	and    edx,0xffffffef
c002458b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c002458e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0024591:	0f ba e2 0e          	bt     edx,0xe
c0024595:	72 f7                	jb     c002458e <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0024597:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002459a:	0f ba e2 0f          	bt     edx,0xf
c002459e:	72 ee                	jb     c002458e <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c00245a0:	c3                   	ret    
c00245a1:	90                   	nop

c00245a2 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c00245a2:	55                   	push   ebp
c00245a3:	57                   	push   edi
c00245a4:	56                   	push   esi
c00245a5:	53                   	push   ebx
c00245a6:	83 ec 1c             	sub    esp,0x1c
c00245a9:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00245ad:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00245b1:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00245b5:	53                   	push   ebx
c00245b6:	89 fd                	mov    ebp,edi
c00245b8:	56                   	push   esi
c00245b9:	c1 e5 0a             	shl    ebp,0xa
c00245bc:	e8 b7 ff ff ff       	call   c0024578 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c00245c1:	83 ec 0c             	sub    esp,0xc
c00245c4:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c00245ca:	01 e8                	add    eax,ebp
c00245cc:	89 03                	mov    DWORD PTR [ebx],eax
c00245ce:	8b 03                	mov    eax,DWORD PTR [ebx]
c00245d0:	68 00 04 00 00       	push   0x400
c00245d5:	6a 00                	push   0x0
c00245d7:	50                   	push   eax
c00245d8:	e8 bf c1 fd ff       	call   c000079c <memset>
c00245dd:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c00245e3:	89 fa                	mov    edx,edi
c00245e5:	01 e8                	add    eax,ebp
c00245e7:	c1 e7 0d             	shl    edi,0xd
c00245ea:	89 03                	mov    DWORD PTR [ebx],eax
c00245ec:	c1 e2 08             	shl    edx,0x8
c00245ef:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00245f6:	81 c2 00 80 00 00    	add    edx,0x8000
c00245fc:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0024600:	89 d0                	mov    eax,edx
c0024602:	83 c4 1c             	add    esp,0x1c
c0024605:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c002460b:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c002460e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0024611:	68 00 01 00 00       	push   0x100
c0024616:	6a 00                	push   0x0
c0024618:	50                   	push   eax
c0024619:	e8 7e c1 fd ff       	call   c000079c <memset>
c002461e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024622:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c0024628:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c002462e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0024632:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0024635:	83 c4 10             	add    esp,0x10
c0024638:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c002463f:	31 ff                	xor    edi,edi
c0024641:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c0024647:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c002464d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024651:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0024657:	83 c5 20             	add    ebp,0x20
c002465a:	01 f8                	add    eax,edi
c002465c:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c002465f:	52                   	push   edx
c0024660:	68 00 01 00 00       	push   0x100
c0024665:	6a 00                	push   0x0
c0024667:	50                   	push   eax
c0024668:	e8 2f c1 fd ff       	call   c000079c <memset>
c002466d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024671:	83 c4 10             	add    esp,0x10
c0024674:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c002467a:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0024681:	01 f8                	add    eax,edi
c0024683:	81 c7 00 01 00 00    	add    edi,0x100
c0024689:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c002468c:	81 ff 00 20 00 00    	cmp    edi,0x2000
c0024692:	75 b3                	jne    c0024647 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c0024694:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c0024698:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c002469c:	83 c4 1c             	add    esp,0x1c
c002469f:	5b                   	pop    ebx
c00246a0:	5e                   	pop    esi
c00246a1:	5f                   	pop    edi
c00246a2:	5d                   	pop    ebp
c00246a3:	e9 b0 fe ff ff       	jmp    c0024558 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c00246a8 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c00246a8:	55                   	push   ebp
c00246a9:	57                   	push   edi
c00246aa:	56                   	push   esi
c00246ab:	53                   	push   ebx
c00246ac:	31 db                	xor    ebx,ebx
c00246ae:	83 ec 0c             	sub    esp,0xc
c00246b1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00246b5:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00246b9:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c00246bc:	f7 c7 01 00 00 00    	test   edi,0x1
c00246c2:	0f 84 aa 00 00 00    	je     c0024772 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xca>
c00246c8:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00246cc:	89 d8                	mov    eax,ebx
c00246ce:	c1 e0 07             	shl    eax,0x7
c00246d1:	8d ac 02 00 01 00 00 	lea    ebp,[edx+eax*1+0x100]
c00246d8:	55                   	push   ebp
c00246d9:	56                   	push   esi
c00246da:	e8 31 fe ff ff       	call   c0024510 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c00246df:	5a                   	pop    edx
c00246e0:	83 f8 01             	cmp    eax,0x1
c00246e3:	59                   	pop    ecx
c00246e4:	75 30                	jne    c0024716 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x6e>
c00246e6:	50                   	push   eax
c00246e7:	50                   	push   eax
c00246e8:	53                   	push   ebx
c00246e9:	68 b9 d7 02 c0       	push   0xc002d7b9
c00246ee:	e8 fe e7 fe ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c00246f3:	83 c4 0c             	add    esp,0xc
c00246f6:	53                   	push   ebx
c00246f7:	55                   	push   ebp
c00246f8:	56                   	push   esi
c00246f9:	e8 a4 fe ff ff       	call   c00245a2 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c00246fe:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0024705:	e8 28 b2 fe ff       	call   c000f932 <malloc>
c002470a:	89 c5                	mov    ebp,eax
c002470c:	89 04 24             	mov    DWORD PTR [esp],eax
c002470f:	e8 60 0d 00 00       	call   c0025474 <SATA::SATA()>
c0024714:	eb 33                	jmp    c0024749 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xa1>
c0024716:	83 f8 04             	cmp    eax,0x4
c0024719:	75 47                	jne    c0024762 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xba>
c002471b:	50                   	push   eax
c002471c:	50                   	push   eax
c002471d:	53                   	push   ebx
c002471e:	68 d0 d7 02 c0       	push   0xc002d7d0
c0024723:	e8 c9 e7 fe ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c0024728:	83 c4 0c             	add    esp,0xc
c002472b:	53                   	push   ebx
c002472c:	55                   	push   ebp
c002472d:	56                   	push   esi
c002472e:	e8 6f fe ff ff       	call   c00245a2 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0024733:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c002473a:	e8 f3 b1 fe ff       	call   c000f932 <malloc>
c002473f:	89 c5                	mov    ebp,eax
c0024741:	89 04 24             	mov    DWORD PTR [esp],eax
c0024744:	e8 d7 10 00 00       	call   c0025820 <SATAPI::SATAPI()>
c0024749:	5a                   	pop    edx
c002474a:	59                   	pop    ecx
c002474b:	55                   	push   ebp
c002474c:	56                   	push   esi
c002474d:	e8 d4 fb fe ff       	call   c0014326 <Device::addChild(Device*)>
c0024752:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0024755:	56                   	push   esi
c0024756:	6a 00                	push   0x0
c0024758:	53                   	push   ebx
c0024759:	55                   	push   ebp
c002475a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c002475d:	83 c4 20             	add    esp,0x20
c0024760:	eb 10                	jmp    c0024772 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xca>
c0024762:	50                   	push   eax
c0024763:	50                   	push   eax
c0024764:	53                   	push   ebx
c0024765:	68 e9 d7 02 c0       	push   0xc002d7e9
c002476a:	e8 82 e7 fe ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c002476f:	83 c4 10             	add    esp,0x10
c0024772:	d1 ef                	shr    edi,1
c0024774:	43                   	inc    ebx
c0024775:	83 fb 20             	cmp    ebx,0x20
c0024778:	0f 85 3e ff ff ff    	jne    c00246bc <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c002477e:	83 c4 0c             	add    esp,0xc
c0024781:	5b                   	pop    ebx
c0024782:	5e                   	pop    esi
c0024783:	5f                   	pop    edi
c0024784:	5d                   	pop    ebp
c0024785:	c3                   	ret    

c0024786 <SATABus::open(int, int, void*)>:
c0024786:	83 ec 14             	sub    esp,0x14
c0024789:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002478d:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c0024793:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0024799:	52                   	push   edx
c002479a:	50                   	push   eax
c002479b:	e8 08 ff ff ff       	call   c00246a8 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c00247a0:	31 c0                	xor    eax,eax
c00247a2:	83 c4 1c             	add    esp,0x1c
c00247a5:	c3                   	ret    

c00247a6 <ATA::close(int, int, void*)>:
c00247a6:	83 ec 0c             	sub    esp,0xc
c00247a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00247ad:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00247b3:	85 c0                	test   eax,eax
c00247b5:	74 0c                	je     c00247c3 <ATA::close(int, int, void*)+0x1d>
c00247b7:	83 ec 0c             	sub    esp,0xc
c00247ba:	8b 10                	mov    edx,DWORD PTR [eax]
c00247bc:	50                   	push   eax
c00247bd:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00247c0:	83 c4 10             	add    esp,0x10
c00247c3:	31 c0                	xor    eax,eax
c00247c5:	83 c4 0c             	add    esp,0xc
c00247c8:	c3                   	ret    
c00247c9:	90                   	nop

c00247ca <ATA::powerSaving(PowerSavingLevel)>:
c00247ca:	c3                   	ret    
c00247cb:	90                   	nop

c00247cc <ATA::ATA()>:
c00247cc:	83 ec 0c             	sub    esp,0xc
c00247cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00247d3:	83 ec 04             	sub    esp,0x4
c00247d6:	68 00 02 00 00       	push   0x200
c00247db:	68 d1 d8 02 c0       	push   0xc002d8d1
c00247e0:	50                   	push   eax
c00247e1:	e8 72 ff fe ff       	call   c0014758 <PhysicalDisk::PhysicalDisk(char const*, int)>
c00247e6:	83 c4 10             	add    esp,0x10
c00247e9:	ba 54 d8 02 c0       	mov    edx,0xc002d854
c00247ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00247f2:	89 10                	mov    DWORD PTR [eax],edx
c00247f4:	90                   	nop
c00247f5:	83 c4 0c             	add    esp,0xc
c00247f8:	c3                   	ret    
c00247f9:	90                   	nop

c00247fa <ATA::flush(bool)>:
c00247fa:	53                   	push   ebx
c00247fb:	83 ec 08             	sub    esp,0x8
c00247fe:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c0024803:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024807:	19 c0                	sbb    eax,eax
c0024809:	83 e0 fd             	and    eax,0xfffffffd
c002480c:	05 ea 00 00 00       	add    eax,0xea
c0024811:	50                   	push   eax
c0024812:	6a 07                	push   0x7
c0024814:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002481b:	50                   	push   eax
c002481c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024822:	e8 dd ef ff ff       	call   c0023804 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024827:	83 c4 0c             	add    esp,0xc
c002482a:	6a 00                	push   0x0
c002482c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024833:	50                   	push   eax
c0024834:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002483a:	e8 71 fb ff ff       	call   c00243b0 <IDE::polling(unsigned char, unsigned int)>
c002483f:	83 c4 18             	add    esp,0x18
c0024842:	5b                   	pop    ebx
c0024843:	c3                   	ret    

c0024844 <ATA::readyForCommand()>:
c0024844:	56                   	push   esi
c0024845:	53                   	push   ebx
c0024846:	31 db                	xor    ebx,ebx
c0024848:	50                   	push   eax
c0024849:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002484d:	50                   	push   eax
c002484e:	6a 0c                	push   0xc
c0024850:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0024857:	50                   	push   eax
c0024858:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c002485e:	e8 61 f0 ff ff       	call   c00238c4 <IDE::read(unsigned char, unsigned char)>
c0024863:	83 c4 10             	add    esp,0x10
c0024866:	a8 88                	test   al,0x88
c0024868:	74 23                	je     c002488d <ATA::readyForCommand()+0x49>
c002486a:	43                   	inc    ebx
c002486b:	83 fb 63             	cmp    ebx,0x63
c002486e:	7e dd                	jle    c002484d <ATA::readyForCommand()+0x9>
c0024870:	51                   	push   ecx
c0024871:	51                   	push   ecx
c0024872:	6a 00                	push   0x0
c0024874:	68 40 42 0f 00       	push   0xf4240
c0024879:	e8 37 9f ff ff       	call   c001e7b5 <nanoSleep(unsigned long long)>
c002487e:	83 c4 10             	add    esp,0x10
c0024881:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0024887:	75 c4                	jne    c002484d <ATA::readyForCommand()+0x9>
c0024889:	31 c0                	xor    eax,eax
c002488b:	eb 02                	jmp    c002488f <ATA::readyForCommand()+0x4b>
c002488d:	b0 01                	mov    al,0x1
c002488f:	5a                   	pop    edx
c0024890:	5b                   	pop    ebx
c0024891:	5e                   	pop    esi
c0024892:	c3                   	ret    
c0024893:	90                   	nop

c0024894 <ATA::access(unsigned long long, int, void*, bool)>:
c0024894:	55                   	push   ebp
c0024895:	57                   	push   edi
c0024896:	56                   	push   esi
c0024897:	53                   	push   ebx
c0024898:	83 ec 2c             	sub    esp,0x2c
c002489b:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c002489f:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00248a3:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c00248a7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00248ab:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c00248af:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c00248b3:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00248b7:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c00248bd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00248c1:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c00248c7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00248cb:	c1 e0 06             	shl    eax,0x6
c00248ce:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c00248d6:	74 5d                	je     c0024935 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c00248d8:	89 fa                	mov    edx,edi
c00248da:	89 f0                	mov    eax,esi
c00248dc:	0f ac d0 1c          	shrd   eax,edx,0x1c
c00248e0:	c1 ea 1c             	shr    edx,0x1c
c00248e3:	89 d1                	mov    ecx,edx
c00248e5:	09 c1                	or     ecx,eax
c00248e7:	74 25                	je     c002490e <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c00248e9:	31 ed                	xor    ebp,ebp
c00248eb:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c00248f2:	89 fa                	mov    edx,edi
c00248f4:	89 f0                	mov    eax,esi
c00248f6:	0f ad d0             	shrd   eax,edx,cl
c00248f9:	d3 ea                	shr    edx,cl
c00248fb:	f6 c1 20             	test   cl,0x20
c00248fe:	74 02                	je     c0024902 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c0024900:	89 d0                	mov    eax,edx
c0024902:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c0024906:	45                   	inc    ebp
c0024907:	83 fd 06             	cmp    ebp,0x6
c002490a:	75 df                	jne    c00248eb <ATA::access(unsigned long long, int, void*, bool)+0x57>
c002490c:	eb 76                	jmp    c0024984 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c002490e:	89 f0                	mov    eax,esi
c0024910:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0024915:	89 fa                	mov    edx,edi
c0024917:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c002491e:	0f ac d0 10          	shrd   eax,edx,0x10
c0024922:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0024927:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c002492b:	c1 ee 18             	shr    esi,0x18
c002492e:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c0024933:	eb 56                	jmp    c002498b <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0024935:	6a 00                	push   0x0
c0024937:	6a 3f                	push   0x3f
c0024939:	57                   	push   edi
c002493a:	56                   	push   esi
c002493b:	e8 94 29 00 00       	call   c00272d4 <__umoddi3>
c0024940:	83 c4 10             	add    esp,0x10
c0024943:	40                   	inc    eax
c0024944:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0024948:	6a 00                	push   0x0
c002494a:	68 f0 03 00 00       	push   0x3f0
c002494f:	57                   	push   edi
c0024950:	56                   	push   esi
c0024951:	e8 7e 28 00 00       	call   c00271d4 <__udivdi3>
c0024956:	83 c4 10             	add    esp,0x10
c0024959:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c002495e:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0024965:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c002496a:	6a 00                	push   0x0
c002496c:	6a 3f                	push   0x3f
c002496e:	57                   	push   edi
c002496f:	56                   	push   esi
c0024970:	e8 5f 28 00 00       	call   c00271d4 <__udivdi3>
c0024975:	83 c4 10             	add    esp,0x10
c0024978:	89 c6                	mov    esi,eax
c002497a:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c002497f:	83 e6 0f             	and    esi,0xf
c0024982:	eb 07                	jmp    c002498b <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0024984:	31 f6                	xor    esi,esi
c0024986:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c002498b:	bf 01 00 00 00       	mov    edi,0x1
c0024990:	50                   	push   eax
c0024991:	6a 00                	push   0x0
c0024993:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002499a:	50                   	push   eax
c002499b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002499f:	e8 6c f0 ff ff       	call   c0023a10 <IDE::enableIRQs(unsigned char, bool)>
c00249a4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00249a7:	e8 98 fe ff ff       	call   c0024844 <ATA::readyForCommand()>
c00249ac:	83 c4 10             	add    esp,0x10
c00249af:	84 c0                	test   al,al
c00249b1:	0f 84 5a 02 00 00    	je     c0024c11 <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c00249b7:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c00249bd:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c00249c3:	c1 e0 04             	shl    eax,0x4
c00249c6:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c00249cd:	09 c6                	or     esi,eax
c00249cf:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c00249d4:	75 05                	jne    c00249db <ATA::access(unsigned long long, int, void*, bool)+0x147>
c00249d6:	83 ce a0             	or     esi,0xffffffa0
c00249d9:	eb 03                	jmp    c00249de <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c00249db:	83 ce e0             	or     esi,0xffffffe0
c00249de:	89 f0                	mov    eax,esi
c00249e0:	0f b6 f0             	movzx  esi,al
c00249e3:	56                   	push   esi
c00249e4:	6a 06                	push   0x6
c00249e6:	51                   	push   ecx
c00249e7:	52                   	push   edx
c00249e8:	e8 17 ee ff ff       	call   c0023804 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00249ed:	83 c4 10             	add    esp,0x10
c00249f0:	6a 00                	push   0x0
c00249f2:	6a 01                	push   0x1
c00249f4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00249fb:	50                   	push   eax
c00249fc:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024a02:	e8 fd ed ff ff       	call   c0023804 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024a07:	83 c4 10             	add    esp,0x10
c0024a0a:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0024a0f:	75 6e                	jne    c0024a7f <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c0024a11:	6a 00                	push   0x0
c0024a13:	6a 08                	push   0x8
c0024a15:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024a1c:	50                   	push   eax
c0024a1d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024a23:	e8 dc ed ff ff       	call   c0023804 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024a28:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c0024a2d:	50                   	push   eax
c0024a2e:	6a 09                	push   0x9
c0024a30:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024a37:	50                   	push   eax
c0024a38:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024a3e:	e8 c1 ed ff ff       	call   c0023804 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024a43:	83 c4 20             	add    esp,0x20
c0024a46:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c0024a4b:	50                   	push   eax
c0024a4c:	6a 0a                	push   0xa
c0024a4e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024a55:	50                   	push   eax
c0024a56:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024a5c:	e8 a3 ed ff ff       	call   c0023804 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024a61:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c0024a66:	50                   	push   eax
c0024a67:	6a 0b                	push   0xb
c0024a69:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024a70:	50                   	push   eax
c0024a71:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024a77:	e8 88 ed ff ff       	call   c0023804 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024a7c:	83 c4 20             	add    esp,0x20
c0024a7f:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c0024a84:	50                   	push   eax
c0024a85:	6a 02                	push   0x2
c0024a87:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024a8e:	50                   	push   eax
c0024a8f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024a95:	e8 6a ed ff ff       	call   c0023804 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024a9a:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c0024a9f:	50                   	push   eax
c0024aa0:	6a 03                	push   0x3
c0024aa2:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024aa9:	50                   	push   eax
c0024aaa:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024ab0:	e8 4f ed ff ff       	call   c0023804 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024ab5:	83 c4 20             	add    esp,0x20
c0024ab8:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0024abd:	50                   	push   eax
c0024abe:	6a 04                	push   0x4
c0024ac0:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024ac7:	50                   	push   eax
c0024ac8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024ace:	e8 31 ed ff ff       	call   c0023804 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024ad3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0024ad8:	50                   	push   eax
c0024ad9:	6a 05                	push   0x5
c0024adb:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024ae2:	50                   	push   eax
c0024ae3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024ae9:	e8 16 ed ff ff       	call   c0023804 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024aee:	83 c4 20             	add    esp,0x20
c0024af1:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0024af6:	0f 94 c0             	sete   al
c0024af9:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0024afe:	74 09                	je     c0024b09 <ATA::access(unsigned long long, int, void*, bool)+0x275>
c0024b00:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c0024b07:	eb 07                	jmp    c0024b10 <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c0024b09:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0024b10:	0f b6 c0             	movzx  eax,al
c0024b13:	50                   	push   eax
c0024b14:	6a 07                	push   0x7
c0024b16:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024b1d:	50                   	push   eax
c0024b1e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024b24:	e8 db ec ff ff       	call   c0023804 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024b29:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c0024b2d:	83 c4 10             	add    esp,0x10
c0024b30:	85 f6                	test   esi,esi
c0024b32:	0f 84 ba 00 00 00    	je     c0024bf2 <ATA::access(unsigned long long, int, void*, bool)+0x35e>
c0024b38:	50                   	push   eax
c0024b39:	6a 01                	push   0x1
c0024b3b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024b42:	50                   	push   eax
c0024b43:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024b49:	e8 62 f8 ff ff       	call   c00243b0 <IDE::polling(unsigned char, unsigned int)>
c0024b4e:	83 c4 10             	add    esp,0x10
c0024b51:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c0024b57:	84 c0                	test   al,al
c0024b59:	74 2c                	je     c0024b87 <ATA::access(unsigned long long, int, void*, bool)+0x2f3>
c0024b5b:	0f b6 f8             	movzx  edi,al
c0024b5e:	0f b6 d2             	movzx  edx,dl
c0024b61:	57                   	push   edi
c0024b62:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c0024b69:	50                   	push   eax
c0024b6a:	52                   	push   edx
c0024b6b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024b71:	e8 a4 f6 ff ff       	call   c002421a <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0024b76:	c7 04 24 2c d8 02 c0 	mov    DWORD PTR [esp],0xc002d82c
c0024b7d:	e8 6f e3 fe ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c0024b82:	e9 87 00 00 00       	jmp    c0024c0e <ATA::access(unsigned long long, int, void*, bool)+0x37a>
c0024b87:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0024b8c:	74 33                	je     c0024bc1 <ATA::access(unsigned long long, int, void*, bool)+0x32d>
c0024b8e:	31 ed                	xor    ebp,ebp
c0024b90:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0024b94:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c0024b98:	50                   	push   eax
c0024b99:	50                   	push   eax
c0024b9a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024ba1:	50                   	push   eax
c0024ba2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024ba8:	e8 45 ec ff ff       	call   c00237f2 <IDE::getBase(unsigned char)>
c0024bad:	89 c2                	mov    edx,eax
c0024baf:	89 f8                	mov    eax,edi
c0024bb1:	66 ef                	out    dx,ax
c0024bb3:	45                   	inc    ebp
c0024bb4:	83 c4 10             	add    esp,0x10
c0024bb7:	81 fd 00 01 00 00    	cmp    ebp,0x100
c0024bbd:	75 d1                	jne    c0024b90 <ATA::access(unsigned long long, int, void*, bool)+0x2fc>
c0024bbf:	eb 23                	jmp    c0024be4 <ATA::access(unsigned long long, int, void*, bool)+0x350>
c0024bc1:	0f b6 d2             	movzx  edx,dl
c0024bc4:	51                   	push   ecx
c0024bc5:	51                   	push   ecx
c0024bc6:	52                   	push   edx
c0024bc7:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024bcd:	e8 20 ec ff ff       	call   c00237f2 <IDE::getBase(unsigned char)>
c0024bd2:	b9 00 01 00 00       	mov    ecx,0x100
c0024bd7:	89 c2                	mov    edx,eax
c0024bd9:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c0024bdd:	fc                   	cld    
c0024bde:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c0024be1:	83 c4 10             	add    esp,0x10
c0024be4:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c0024bec:	4e                   	dec    esi
c0024bed:	e9 3e ff ff ff       	jmp    c0024b30 <ATA::access(unsigned long long, int, void*, bool)+0x29c>
c0024bf2:	31 ff                	xor    edi,edi
c0024bf4:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0024bf9:	74 16                	je     c0024c11 <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c0024bfb:	50                   	push   eax
c0024bfc:	50                   	push   eax
c0024bfd:	31 c0                	xor    eax,eax
c0024bff:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c0024c04:	0f 94 c0             	sete   al
c0024c07:	50                   	push   eax
c0024c08:	53                   	push   ebx
c0024c09:	e8 ec fb ff ff       	call   c00247fa <ATA::flush(bool)>
c0024c0e:	83 c4 10             	add    esp,0x10
c0024c11:	83 c4 2c             	add    esp,0x2c
c0024c14:	89 f8                	mov    eax,edi
c0024c16:	5b                   	pop    ebx
c0024c17:	5e                   	pop    esi
c0024c18:	5f                   	pop    edi
c0024c19:	5d                   	pop    ebp
c0024c1a:	c3                   	ret    
c0024c1b:	90                   	nop

c0024c1c <ATA::read(unsigned long long, int, void*)>:
c0024c1c:	57                   	push   edi
c0024c1d:	b8 04 00 00 00       	mov    eax,0x4
c0024c22:	56                   	push   esi
c0024c23:	53                   	push   ebx
c0024c24:	83 ec 10             	sub    esp,0x10
c0024c27:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0024c2b:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0024c2f:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0024c32:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0024c36:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0024c3a:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0024c40:	77 3b                	ja     c0024c7d <ATA::read(unsigned long long, int, void*)+0x61>
c0024c42:	b8 06 00 00 00       	mov    eax,0x6
c0024c47:	85 d2                	test   edx,edx
c0024c49:	74 32                	je     c0024c7d <ATA::read(unsigned long long, int, void*)+0x61>
c0024c4b:	50                   	push   eax
c0024c4c:	50                   	push   eax
c0024c4d:	6a 00                	push   0x0
c0024c4f:	52                   	push   edx
c0024c50:	53                   	push   ebx
c0024c51:	57                   	push   edi
c0024c52:	56                   	push   esi
c0024c53:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0024c57:	e8 38 fc ff ff       	call   c0024894 <ATA::access(unsigned long long, int, void*, bool)>
c0024c5c:	83 c4 20             	add    esp,0x20
c0024c5f:	85 c0                	test   eax,eax
c0024c61:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024c65:	75 11                	jne    c0024c78 <ATA::read(unsigned long long, int, void*)+0x5c>
c0024c67:	01 1d c8 31 03 c0    	add    DWORD PTR ds:0xc00331c8,ebx
c0024c6d:	e8 7c bd fe ff       	call   c00109ee <VgaText::updateDiskUsage()>
c0024c72:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024c76:	eb 05                	jmp    c0024c7d <ATA::read(unsigned long long, int, void*)+0x61>
c0024c78:	b8 01 00 00 00       	mov    eax,0x1
c0024c7d:	83 c4 10             	add    esp,0x10
c0024c80:	5b                   	pop    ebx
c0024c81:	5e                   	pop    esi
c0024c82:	5f                   	pop    edi
c0024c83:	c3                   	ret    

c0024c84 <ATA::write(unsigned long long, int, void*)>:
c0024c84:	57                   	push   edi
c0024c85:	b8 04 00 00 00       	mov    eax,0x4
c0024c8a:	56                   	push   esi
c0024c8b:	53                   	push   ebx
c0024c8c:	83 ec 10             	sub    esp,0x10
c0024c8f:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0024c93:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0024c97:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0024c9a:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0024c9e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0024ca2:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0024ca8:	77 3b                	ja     c0024ce5 <ATA::write(unsigned long long, int, void*)+0x61>
c0024caa:	b8 06 00 00 00       	mov    eax,0x6
c0024caf:	85 d2                	test   edx,edx
c0024cb1:	74 32                	je     c0024ce5 <ATA::write(unsigned long long, int, void*)+0x61>
c0024cb3:	50                   	push   eax
c0024cb4:	50                   	push   eax
c0024cb5:	6a 01                	push   0x1
c0024cb7:	52                   	push   edx
c0024cb8:	53                   	push   ebx
c0024cb9:	57                   	push   edi
c0024cba:	56                   	push   esi
c0024cbb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0024cbf:	e8 d0 fb ff ff       	call   c0024894 <ATA::access(unsigned long long, int, void*, bool)>
c0024cc4:	83 c4 20             	add    esp,0x20
c0024cc7:	85 c0                	test   eax,eax
c0024cc9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024ccd:	75 11                	jne    c0024ce0 <ATA::write(unsigned long long, int, void*)+0x5c>
c0024ccf:	01 1d c4 31 03 c0    	add    DWORD PTR ds:0xc00331c4,ebx
c0024cd5:	e8 14 bd fe ff       	call   c00109ee <VgaText::updateDiskUsage()>
c0024cda:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024cde:	eb 05                	jmp    c0024ce5 <ATA::write(unsigned long long, int, void*)+0x61>
c0024ce0:	b8 01 00 00 00       	mov    eax,0x1
c0024ce5:	83 c4 10             	add    esp,0x10
c0024ce8:	5b                   	pop    ebx
c0024ce9:	5e                   	pop    esi
c0024cea:	5f                   	pop    edi
c0024ceb:	c3                   	ret    

c0024cec <ATA::detectCHS()>:
c0024cec:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0024cf0:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c0024cf6:	c1 e0 06             	shl    eax,0x6
c0024cf9:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c0024cff:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c0024d09:	c7 44 24 04 37 d8 02 c0 	mov    DWORD PTR [esp+0x4],0xc002d837
c0024d11:	e9 9b 5b ff ff       	jmp    c001a8b1 <Krnl::panic(char const*)>

c0024d16 <ATA::open(int, int, void*)>:
c0024d16:	53                   	push   ebx
c0024d17:	83 ec 08             	sub    esp,0x8
c0024d1a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024d1e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024d22:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024d26:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0024d2c:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024d32:	c1 e0 06             	shl    eax,0x6
c0024d35:	01 d0                	add    eax,edx
c0024d37:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c0024d3e:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c0024d44:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c0024d4b:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0024d55:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c0024d5b:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0024d62:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c0024d69:	75 0c                	jne    c0024d77 <ATA::open(int, int, void*)+0x61>
c0024d6b:	83 ec 0c             	sub    esp,0xc
c0024d6e:	53                   	push   ebx
c0024d6f:	e8 78 ff ff ff       	call   c0024cec <ATA::detectCHS()>
c0024d74:	83 c4 10             	add    esp,0x10
c0024d77:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0024d7d:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0024d83:	c1 e0 06             	shl    eax,0x6
c0024d86:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c0024d8d:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0024d97:	d1 e8                	shr    eax,1
c0024d99:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c0024d9f:	6a 04                	push   0x4
c0024da1:	6a 0c                	push   0xc
c0024da3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024daa:	50                   	push   eax
c0024dab:	52                   	push   edx
c0024dac:	e8 53 ea ff ff       	call   c0023804 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024db1:	90                   	nop
c0024db2:	90                   	nop
c0024db3:	6a 00                	push   0x0
c0024db5:	6a 0c                	push   0xc
c0024db7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024dbe:	50                   	push   eax
c0024dbf:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024dc5:	e8 3a ea ff ff       	call   c0023804 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024dca:	83 c4 14             	add    esp,0x14
c0024dcd:	53                   	push   ebx
c0024dce:	e8 ed f9 fe ff       	call   c00147c0 <PhysicalDisk::startCache()>
c0024dd3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024dd6:	e8 c5 1c ff ff       	call   c0016aa0 <createPartitionsForDisk(PhysicalDisk*)>
c0024ddb:	31 c0                	xor    eax,eax
c0024ddd:	83 c4 18             	add    esp,0x18
c0024de0:	5b                   	pop    ebx
c0024de1:	c3                   	ret    

c0024de2 <ATAPI::write(unsigned long long, int, void*)>:
c0024de2:	b8 03 00 00 00       	mov    eax,0x3
c0024de7:	c3                   	ret    

c0024de8 <ATAPI::close(int, int, void*)>:
c0024de8:	83 ec 0c             	sub    esp,0xc
c0024deb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024def:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024df5:	85 c0                	test   eax,eax
c0024df7:	74 0c                	je     c0024e05 <ATAPI::close(int, int, void*)+0x1d>
c0024df9:	83 ec 0c             	sub    esp,0xc
c0024dfc:	8b 10                	mov    edx,DWORD PTR [eax]
c0024dfe:	50                   	push   eax
c0024dff:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024e02:	83 c4 10             	add    esp,0x10
c0024e05:	31 c0                	xor    eax,eax
c0024e07:	83 c4 0c             	add    esp,0xc
c0024e0a:	c3                   	ret    
c0024e0b:	90                   	nop

c0024e0c <ATAPI::ATAPI()>:
c0024e0c:	83 ec 0c             	sub    esp,0xc
c0024e0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024e13:	83 ec 04             	sub    esp,0x4
c0024e16:	68 00 08 00 00       	push   0x800
c0024e1b:	68 71 d9 02 c0       	push   0xc002d971
c0024e20:	50                   	push   eax
c0024e21:	e8 32 f9 fe ff       	call   c0014758 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024e26:	83 c4 10             	add    esp,0x10
c0024e29:	ba 8c d8 02 c0       	mov    edx,0xc002d88c
c0024e2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024e32:	89 10                	mov    DWORD PTR [eax],edx
c0024e34:	90                   	nop
c0024e35:	83 c4 0c             	add    esp,0xc
c0024e38:	c3                   	ret    
c0024e39:	90                   	nop

c0024e3a <ATAPI::readyForCommand()>:
c0024e3a:	56                   	push   esi
c0024e3b:	53                   	push   ebx
c0024e3c:	31 db                	xor    ebx,ebx
c0024e3e:	50                   	push   eax
c0024e3f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0024e43:	50                   	push   eax
c0024e44:	6a 0c                	push   0xc
c0024e46:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0024e4d:	50                   	push   eax
c0024e4e:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0024e54:	e8 6b ea ff ff       	call   c00238c4 <IDE::read(unsigned char, unsigned char)>
c0024e59:	83 c4 10             	add    esp,0x10
c0024e5c:	a8 88                	test   al,0x88
c0024e5e:	74 23                	je     c0024e83 <ATAPI::readyForCommand()+0x49>
c0024e60:	43                   	inc    ebx
c0024e61:	83 fb 63             	cmp    ebx,0x63
c0024e64:	7e dd                	jle    c0024e43 <ATAPI::readyForCommand()+0x9>
c0024e66:	51                   	push   ecx
c0024e67:	51                   	push   ecx
c0024e68:	6a 00                	push   0x0
c0024e6a:	68 40 42 0f 00       	push   0xf4240
c0024e6f:	e8 41 99 ff ff       	call   c001e7b5 <nanoSleep(unsigned long long)>
c0024e74:	83 c4 10             	add    esp,0x10
c0024e77:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0024e7d:	75 c4                	jne    c0024e43 <ATAPI::readyForCommand()+0x9>
c0024e7f:	31 c0                	xor    eax,eax
c0024e81:	eb 02                	jmp    c0024e85 <ATAPI::readyForCommand()+0x4b>
c0024e83:	b0 01                	mov    al,0x1
c0024e85:	5a                   	pop    edx
c0024e86:	5b                   	pop    ebx
c0024e87:	5e                   	pop    esi
c0024e88:	c3                   	ret    
c0024e89:	90                   	nop

c0024e8a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c0024e8a:	55                   	push   ebp
c0024e8b:	57                   	push   edi
c0024e8c:	56                   	push   esi
c0024e8d:	53                   	push   ebx
c0024e8e:	83 ec 20             	sub    esp,0x20
c0024e91:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0024e95:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c0024e99:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0024e9d:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0024ea1:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0024ea5:	6a 01                	push   0x1
c0024ea7:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024eae:	50                   	push   eax
c0024eaf:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024eb5:	e8 56 eb ff ff       	call   c0023a10 <IDE::enableIRQs(unsigned char, bool)>
c0024eba:	5e                   	pop    esi
c0024ebb:	58                   	pop    eax
c0024ebc:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024ec3:	50                   	push   eax
c0024ec4:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024eca:	e8 0f e9 ff ff       	call   c00237de <IDE::prepareInterrupt(unsigned char)>
c0024ecf:	89 3c 24             	mov    DWORD PTR [esp],edi
c0024ed2:	e8 63 ff ff ff       	call   c0024e3a <ATAPI::readyForCommand()>
c0024ed7:	83 c4 10             	add    esp,0x10
c0024eda:	84 c0                	test   al,al
c0024edc:	75 0a                	jne    c0024ee8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c0024ede:	bb 01 00 00 00       	mov    ebx,0x1
c0024ee3:	e9 57 02 00 00       	jmp    c002513f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0024ee8:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c0024eee:	c1 e0 04             	shl    eax,0x4
c0024ef1:	0f b6 c0             	movzx  eax,al
c0024ef4:	50                   	push   eax
c0024ef5:	6a 06                	push   0x6
c0024ef7:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024efe:	50                   	push   eax
c0024eff:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024f05:	e8 fa e8 ff ff       	call   c0023804 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024f0a:	6a 00                	push   0x0
c0024f0c:	6a 01                	push   0x1
c0024f0e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024f15:	50                   	push   eax
c0024f16:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024f1c:	e8 e3 e8 ff ff       	call   c0023804 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024f21:	83 c4 20             	add    esp,0x20
c0024f24:	0f b6 c3             	movzx  eax,bl
c0024f27:	0f b6 df             	movzx  ebx,bh
c0024f2a:	50                   	push   eax
c0024f2b:	6a 04                	push   0x4
c0024f2d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024f34:	50                   	push   eax
c0024f35:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024f3b:	e8 c4 e8 ff ff       	call   c0023804 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024f40:	53                   	push   ebx
c0024f41:	6a 05                	push   0x5
c0024f43:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024f4a:	50                   	push   eax
c0024f4b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024f51:	e8 ae e8 ff ff       	call   c0023804 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024f56:	83 c4 20             	add    esp,0x20
c0024f59:	68 a0 00 00 00       	push   0xa0
c0024f5e:	6a 07                	push   0x7
c0024f60:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024f67:	50                   	push   eax
c0024f68:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024f6e:	e8 91 e8 ff ff       	call   c0023804 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024f73:	83 c4 0c             	add    esp,0xc
c0024f76:	6a 01                	push   0x1
c0024f78:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024f7f:	50                   	push   eax
c0024f80:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024f86:	e8 25 f4 ff ff       	call   c00243b0 <IDE::polling(unsigned char, unsigned int)>
c0024f8b:	83 c4 10             	add    esp,0x10
c0024f8e:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c0024f94:	84 c0                	test   al,al
c0024f96:	74 23                	je     c0024fbb <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c0024f98:	0f b6 d8             	movzx  ebx,al
c0024f9b:	0f b6 d2             	movzx  edx,dl
c0024f9e:	53                   	push   ebx
c0024f9f:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c0024fa6:	50                   	push   eax
c0024fa7:	52                   	push   edx
c0024fa8:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024fae:	e8 67 f2 ff ff       	call   c002421a <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0024fb3:	83 c4 10             	add    esp,0x10
c0024fb6:	e9 84 01 00 00       	jmp    c002513f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0024fbb:	0f b6 d2             	movzx  edx,dl
c0024fbe:	53                   	push   ebx
c0024fbf:	53                   	push   ebx
c0024fc0:	52                   	push   edx
c0024fc1:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024fc7:	e8 26 e8 ff ff       	call   c00237f2 <IDE::getBase(unsigned char)>
c0024fcc:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0024fd0:	b9 06 00 00 00       	mov    ecx,0x6
c0024fd5:	89 c2                	mov    edx,eax
c0024fd7:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c0024fda:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0024fde:	83 c4 10             	add    esp,0x10
c0024fe1:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0024fe7:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0024fee:	85 db                	test   ebx,ebx
c0024ff0:	0f 84 ec 00 00 00    	je     c00250e2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c0024ff6:	51                   	push   ecx
c0024ff7:	51                   	push   ecx
c0024ff8:	52                   	push   edx
c0024ff9:	50                   	push   eax
c0024ffa:	e8 73 e9 ff ff       	call   c0023972 <IDE::waitInterrupt(unsigned char)>
c0024fff:	83 c4 10             	add    esp,0x10
c0025002:	84 c0                	test   al,al
c0025004:	0f 84 d4 fe ff ff    	je     c0024ede <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c002500a:	56                   	push   esi
c002500b:	56                   	push   esi
c002500c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0025013:	50                   	push   eax
c0025014:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002501a:	e8 bf e7 ff ff       	call   c00237de <IDE::prepareInterrupt(unsigned char)>
c002501f:	83 c4 0c             	add    esp,0xc
c0025022:	6a 04                	push   0x4
c0025024:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002502b:	50                   	push   eax
c002502c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0025032:	e8 8d e8 ff ff       	call   c00238c4 <IDE::read(unsigned char, unsigned char)>
c0025037:	83 c4 0c             	add    esp,0xc
c002503a:	89 c6                	mov    esi,eax
c002503c:	6a 05                	push   0x5
c002503e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0025045:	50                   	push   eax
c0025046:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002504c:	e8 73 e8 ff ff       	call   c00238c4 <IDE::read(unsigned char, unsigned char)>
c0025051:	89 f1                	mov    ecx,esi
c0025053:	0f b6 c0             	movzx  eax,al
c0025056:	0f b6 f1             	movzx  esi,cl
c0025059:	c1 e0 08             	shl    eax,0x8
c002505c:	09 c6                	or     esi,eax
c002505e:	d1 fe                	sar    esi,1
c0025060:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0025064:	83 c4 10             	add    esp,0x10
c0025067:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c002506c:	74 41                	je     c00250af <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c002506e:	31 c9                	xor    ecx,ecx
c0025070:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0025076:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c002507d:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c0025081:	75 0a                	jne    c002508d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c0025083:	01 c9                	add    ecx,ecx
c0025085:	01 cd                	add    ebp,ecx
c0025087:	4b                   	dec    ebx
c0025088:	e9 54 ff ff ff       	jmp    c0024fe1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c002508d:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c0025092:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0025096:	51                   	push   ecx
c0025097:	51                   	push   ecx
c0025098:	52                   	push   edx
c0025099:	50                   	push   eax
c002509a:	e8 53 e7 ff ff       	call   c00237f2 <IDE::getBase(unsigned char)>
c002509f:	89 c2                	mov    edx,eax
c00250a1:	89 f0                	mov    eax,esi
c00250a3:	66 ef                	out    dx,ax
c00250a5:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00250a9:	83 c4 10             	add    esp,0x10
c00250ac:	41                   	inc    ecx
c00250ad:	eb c1                	jmp    c0025070 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c00250af:	31 f6                	xor    esi,esi
c00250b1:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c00250b7:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c00250be:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c00250c2:	75 06                	jne    c00250ca <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c00250c4:	01 f6                	add    esi,esi
c00250c6:	01 f5                	add    ebp,esi
c00250c8:	eb bd                	jmp    c0025087 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c00250ca:	51                   	push   ecx
c00250cb:	51                   	push   ecx
c00250cc:	52                   	push   edx
c00250cd:	50                   	push   eax
c00250ce:	e8 1f e7 ff ff       	call   c00237f2 <IDE::getBase(unsigned char)>
c00250d3:	89 c2                	mov    edx,eax
c00250d5:	66 ed                	in     ax,dx
c00250d7:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c00250dc:	83 c4 10             	add    esp,0x10
c00250df:	46                   	inc    esi
c00250e0:	eb cf                	jmp    c00250b1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c00250e2:	51                   	push   ecx
c00250e3:	51                   	push   ecx
c00250e4:	52                   	push   edx
c00250e5:	50                   	push   eax
c00250e6:	e8 87 e8 ff ff       	call   c0023972 <IDE::waitInterrupt(unsigned char)>
c00250eb:	83 c4 10             	add    esp,0x10
c00250ee:	84 c0                	test   al,al
c00250f0:	0f 84 e8 fd ff ff    	je     c0024ede <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c00250f6:	bb a0 86 01 00       	mov    ebx,0x186a0
c00250fb:	52                   	push   edx
c00250fc:	52                   	push   edx
c00250fd:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0025104:	50                   	push   eax
c0025105:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002510b:	e8 ce e6 ff ff       	call   c00237de <IDE::prepareInterrupt(unsigned char)>
c0025110:	83 c4 10             	add    esp,0x10
c0025113:	50                   	push   eax
c0025114:	50                   	push   eax
c0025115:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002511c:	50                   	push   eax
c002511d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0025123:	e8 ca e6 ff ff       	call   c00237f2 <IDE::getBase(unsigned char)>
c0025128:	8d 50 07             	lea    edx,[eax+0x7]
c002512b:	ec                   	in     al,dx
c002512c:	83 c4 10             	add    esp,0x10
c002512f:	a8 88                	test   al,0x88
c0025131:	74 0a                	je     c002513d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c0025133:	4b                   	dec    ebx
c0025134:	75 dd                	jne    c0025113 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c0025136:	bb 02 00 00 00       	mov    ebx,0x2
c002513b:	eb 02                	jmp    c002513f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c002513d:	31 db                	xor    ebx,ebx
c002513f:	83 c4 1c             	add    esp,0x1c
c0025142:	89 d8                	mov    eax,ebx
c0025144:	5b                   	pop    ebx
c0025145:	5e                   	pop    esi
c0025146:	5f                   	pop    edi
c0025147:	5d                   	pop    ebp
c0025148:	c3                   	ret    
c0025149:	90                   	nop

c002514a <ATAPI::diskRemoved()>:
c002514a:	83 ec 18             	sub    esp,0x18
c002514d:	68 7d d9 02 c0       	push   0xc002d97d
c0025152:	e8 9a dd fe ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c0025157:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002515b:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c0025162:	83 c4 1c             	add    esp,0x1c
c0025165:	c3                   	ret    

c0025166 <ATAPI::eject()>:
c0025166:	57                   	push   edi
c0025167:	b9 03 00 00 00       	mov    ecx,0x3
c002516c:	53                   	push   ebx
c002516d:	83 ec 14             	sub    esp,0x14
c0025170:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0025174:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0025178:	fc                   	cld    
c0025179:	31 c0                	xor    eax,eax
c002517b:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002517d:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0025182:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0025187:	50                   	push   eax
c0025188:	50                   	push   eax
c0025189:	6a 00                	push   0x0
c002518b:	6a 00                	push   0x0
c002518d:	6a 00                	push   0x0
c002518f:	6a 02                	push   0x2
c0025191:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0025195:	50                   	push   eax
c0025196:	53                   	push   ebx
c0025197:	e8 ee fc ff ff       	call   c0024e8a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c002519c:	83 c4 14             	add    esp,0x14
c002519f:	53                   	push   ebx
c00251a0:	e8 a5 ff ff ff       	call   c002514a <ATAPI::diskRemoved()>
c00251a5:	83 c4 24             	add    esp,0x24
c00251a8:	31 c0                	xor    eax,eax
c00251aa:	5b                   	pop    ebx
c00251ab:	5f                   	pop    edi
c00251ac:	c3                   	ret    
c00251ad:	90                   	nop

c00251ae <ATAPI::diskInserted()>:
c00251ae:	53                   	push   ebx
c00251af:	83 ec 14             	sub    esp,0x14
c00251b2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00251b6:	68 94 d9 02 c0       	push   0xc002d994
c00251bb:	e8 31 dd fe ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c00251c0:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c00251c7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00251ca:	e8 f1 f5 fe ff       	call   c00147c0 <PhysicalDisk::startCache()>
c00251cf:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00251d3:	83 c4 18             	add    esp,0x18
c00251d6:	5b                   	pop    ebx
c00251d7:	e9 c4 18 ff ff       	jmp    c0016aa0 <createPartitionsForDisk(PhysicalDisk*)>

c00251dc <ATAPI::detectMedia()>:
c00251dc:	56                   	push   esi
c00251dd:	53                   	push   ebx
c00251de:	83 ec 28             	sub    esp,0x28
c00251e1:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00251e5:	6a 0c                	push   0xc
c00251e7:	6a 00                	push   0x0
c00251e9:	8d 74 24 0e          	lea    esi,[esp+0xe]
c00251ed:	56                   	push   esi
c00251ee:	e8 a9 b5 fd ff       	call   c000079c <memset>
c00251f3:	58                   	pop    eax
c00251f4:	5a                   	pop    edx
c00251f5:	6a 00                	push   0x0
c00251f7:	6a 00                	push   0x0
c00251f9:	6a 00                	push   0x0
c00251fb:	6a 00                	push   0x0
c00251fd:	56                   	push   esi
c00251fe:	53                   	push   ebx
c00251ff:	e8 86 fc ff ff       	call   c0024e8a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0025204:	83 c4 1c             	add    esp,0x1c
c0025207:	6a 0c                	push   0xc
c0025209:	6a 00                	push   0x0
c002520b:	56                   	push   esi
c002520c:	e8 8b b5 fd ff       	call   c000079c <memset>
c0025211:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0025216:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c002521b:	59                   	pop    ecx
c002521c:	58                   	pop    eax
c002521d:	6a 01                	push   0x1
c002521f:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c0025223:	50                   	push   eax
c0025224:	6a 00                	push   0x0
c0025226:	6a 12                	push   0x12
c0025228:	56                   	push   esi
c0025229:	53                   	push   ebx
c002522a:	e8 5b fc ff ff       	call   c0024e8a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c002522f:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0025233:	83 c4 20             	add    esp,0x20
c0025236:	83 e0 7f             	and    eax,0x7f
c0025239:	3c 70                	cmp    al,0x70
c002523b:	74 15                	je     c0025252 <ATAPI::detectMedia()+0x76>
c002523d:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0025244:	75 0c                	jne    c0025252 <ATAPI::detectMedia()+0x76>
c0025246:	83 ec 0c             	sub    esp,0xc
c0025249:	53                   	push   ebx
c002524a:	e8 5f ff ff ff       	call   c00251ae <ATAPI::diskInserted()>
c002524f:	83 c4 10             	add    esp,0x10
c0025252:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0025256:	83 e0 0f             	and    eax,0xf
c0025259:	3c 02                	cmp    al,0x2
c002525b:	75 1b                	jne    c0025278 <ATAPI::detectMedia()+0x9c>
c002525d:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0025262:	75 2d                	jne    c0025291 <ATAPI::detectMedia()+0xb5>
c0025264:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c002526b:	74 24                	je     c0025291 <ATAPI::detectMedia()+0xb5>
c002526d:	83 ec 0c             	sub    esp,0xc
c0025270:	53                   	push   ebx
c0025271:	e8 d4 fe ff ff       	call   c002514a <ATAPI::diskRemoved()>
c0025276:	eb 16                	jmp    c002528e <ATAPI::detectMedia()+0xb2>
c0025278:	84 c0                	test   al,al
c002527a:	75 15                	jne    c0025291 <ATAPI::detectMedia()+0xb5>
c002527c:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0025283:	75 0c                	jne    c0025291 <ATAPI::detectMedia()+0xb5>
c0025285:	83 ec 0c             	sub    esp,0xc
c0025288:	53                   	push   ebx
c0025289:	e8 20 ff ff ff       	call   c00251ae <ATAPI::diskInserted()>
c002528e:	83 c4 10             	add    esp,0x10
c0025291:	83 c4 24             	add    esp,0x24
c0025294:	5b                   	pop    ebx
c0025295:	5e                   	pop    esi
c0025296:	c3                   	ret    
c0025297:	90                   	nop

c0025298 <ATAPI::open(int, int, void*)>:
c0025298:	53                   	push   ebx
c0025299:	83 ec 08             	sub    esp,0x8
c002529c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00252a0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00252a4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00252a8:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c00252ae:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c00252b4:	c1 e0 06             	shl    eax,0x6
c00252b7:	01 d0                	add    eax,edx
c00252b9:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c00252c0:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c00252c6:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c00252cd:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c00252d7:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c00252dd:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c00252e4:	6a 04                	push   0x4
c00252e6:	6a 0c                	push   0xc
c00252e8:	51                   	push   ecx
c00252e9:	52                   	push   edx
c00252ea:	e8 15 e5 ff ff       	call   c0023804 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00252ef:	90                   	nop
c00252f0:	90                   	nop
c00252f1:	6a 00                	push   0x0
c00252f3:	6a 0c                	push   0xc
c00252f5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00252fc:	50                   	push   eax
c00252fd:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0025303:	e8 fc e4 ff ff       	call   c0023804 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0025308:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c002530f:	83 c4 14             	add    esp,0x14
c0025312:	53                   	push   ebx
c0025313:	e8 c4 fe ff ff       	call   c00251dc <ATAPI::detectMedia()>
c0025318:	31 c0                	xor    eax,eax
c002531a:	83 c4 18             	add    esp,0x18
c002531d:	5b                   	pop    ebx
c002531e:	c3                   	ret    
c002531f:	90                   	nop

c0025320 <ATAPI::read(unsigned long long, int, void*)>:
c0025320:	55                   	push   ebp
c0025321:	57                   	push   edi
c0025322:	56                   	push   esi
c0025323:	53                   	push   ebx
c0025324:	83 ec 1c             	sub    esp,0x1c
c0025327:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002532b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002532f:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0025333:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c002533a:	74 41                	je     c002537d <ATAPI::read(unsigned long long, int, void*)+0x5d>
c002533c:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0025340:	b9 03 00 00 00       	mov    ecx,0x3
c0025345:	fc                   	cld    
c0025346:	31 c0                	xor    eax,eax
c0025348:	86 fb                	xchg   bl,bh
c002534a:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002534c:	c1 c3 10             	rol    ebx,0x10
c002534f:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0025354:	89 e8                	mov    eax,ebp
c0025356:	86 fb                	xchg   bl,bh
c0025358:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c002535c:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c0025360:	50                   	push   eax
c0025361:	50                   	push   eax
c0025362:	55                   	push   ebp
c0025363:	c1 e5 0b             	shl    ebp,0xb
c0025366:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c002536a:	6a 00                	push   0x0
c002536c:	55                   	push   ebp
c002536d:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0025371:	50                   	push   eax
c0025372:	56                   	push   esi
c0025373:	e8 12 fb ff ff       	call   c0024e8a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0025378:	83 c4 20             	add    esp,0x20
c002537b:	eb 1a                	jmp    c0025397 <ATAPI::read(unsigned long long, int, void*)+0x77>
c002537d:	83 ec 0c             	sub    esp,0xc
c0025380:	56                   	push   esi
c0025381:	e8 56 fe ff ff       	call   c00251dc <ATAPI::detectMedia()>
c0025386:	83 c4 10             	add    esp,0x10
c0025389:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0025390:	75 aa                	jne    c002533c <ATAPI::read(unsigned long long, int, void*)+0x1c>
c0025392:	b8 02 00 00 00       	mov    eax,0x2
c0025397:	83 c4 1c             	add    esp,0x1c
c002539a:	5b                   	pop    ebx
c002539b:	5e                   	pop    esi
c002539c:	5f                   	pop    edi
c002539d:	5d                   	pop    ebp
c002539e:	c3                   	ret    
c002539f:	90                   	nop

c00253a0 <SATA::close(int, int, void*)>:
c00253a0:	83 ec 0c             	sub    esp,0xc
c00253a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00253a7:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00253ad:	85 c0                	test   eax,eax
c00253af:	74 0c                	je     c00253bd <SATA::close(int, int, void*)+0x1d>
c00253b1:	83 ec 0c             	sub    esp,0xc
c00253b4:	8b 10                	mov    edx,DWORD PTR [eax]
c00253b6:	50                   	push   eax
c00253b7:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00253ba:	83 c4 10             	add    esp,0x10
c00253bd:	31 c0                	xor    eax,eax
c00253bf:	83 c4 0c             	add    esp,0xc
c00253c2:	c3                   	ret    
c00253c3:	90                   	nop

c00253c4 <SATA::powerSaving(PowerSavingLevel)>:
c00253c4:	c3                   	ret    
c00253c5:	90                   	nop

c00253c6 <SATA::open(int, int, void*)>:
c00253c6:	56                   	push   esi
c00253c7:	53                   	push   ebx
c00253c8:	50                   	push   eax
c00253c9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00253cd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00253d1:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c00253db:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c00253e1:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c00253eb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00253ef:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c00253f9:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c00253ff:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0025406:	e8 93 ab fe ff       	call   c000ff9e <Phys::allocatePage()>
c002540b:	89 c6                	mov    esi,eax
c002540d:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0025413:	81 c6 00 10 00 00    	add    esi,0x1000
c0025419:	e8 80 ab fe ff       	call   c000ff9e <Phys::allocatePage()>
c002541e:	39 c6                	cmp    esi,eax
c0025420:	74 10                	je     c0025432 <SATA::open(int, int, void*)+0x6c>
c0025422:	83 ec 0c             	sub    esp,0xc
c0025425:	68 bc d8 02 c0       	push   0xc002d8bc
c002542a:	e8 82 54 ff ff       	call   c001a8b1 <Krnl::panic(char const*)>
c002542f:	83 c4 10             	add    esp,0x10
c0025432:	83 ec 0c             	sub    esp,0xc
c0025435:	6a 02                	push   0x2
c0025437:	e8 a9 c6 fe ff       	call   c0011ae5 <Virt::allocateKernelVirtualPages(int)>
c002543c:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0025442:	e8 dd c8 fe ff       	call   c0011d24 <Virt::getAKernelVAS()>
c0025447:	6a 03                	push   0x3
c0025449:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c002544f:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0025455:	50                   	push   eax
c0025456:	e8 c7 ce fe ff       	call   c0012322 <VAS::mapPage(unsigned long, unsigned long, int)>
c002545b:	83 c4 14             	add    esp,0x14
c002545e:	53                   	push   ebx
c002545f:	e8 5c f3 fe ff       	call   c00147c0 <PhysicalDisk::startCache()>
c0025464:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0025467:	e8 34 16 ff ff       	call   c0016aa0 <createPartitionsForDisk(PhysicalDisk*)>
c002546c:	83 c4 14             	add    esp,0x14
c002546f:	31 c0                	xor    eax,eax
c0025471:	5b                   	pop    ebx
c0025472:	5e                   	pop    esi
c0025473:	c3                   	ret    

c0025474 <SATA::SATA()>:
c0025474:	83 ec 0c             	sub    esp,0xc
c0025477:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002547b:	83 ec 04             	sub    esp,0x4
c002547e:	68 00 02 00 00       	push   0x200
c0025483:	68 d0 d8 02 c0       	push   0xc002d8d0
c0025488:	50                   	push   eax
c0025489:	e8 ca f2 fe ff       	call   c0014758 <PhysicalDisk::PhysicalDisk(char const*, int)>
c002548e:	83 c4 10             	add    esp,0x10
c0025491:	ba 40 d9 02 c0       	mov    edx,0xc002d940
c0025496:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002549a:	89 10                	mov    DWORD PTR [eax],edx
c002549c:	90                   	nop
c002549d:	83 c4 0c             	add    esp,0xc
c00254a0:	c3                   	ret    
c00254a1:	90                   	nop

c00254a2 <SATA::access(unsigned long long, int, void*, bool)>:
c00254a2:	55                   	push   ebp
c00254a3:	57                   	push   edi
c00254a4:	56                   	push   esi
c00254a5:	53                   	push   ebx
c00254a6:	83 ec 2c             	sub    esp,0x2c
c00254a9:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00254ad:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c00254b1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00254b5:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00254b9:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00254bd:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c00254c2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00254c6:	7e 10                	jle    c00254d8 <SATA::access(unsigned long long, int, void*, bool)+0x36>
c00254c8:	83 ec 0c             	sub    esp,0xc
c00254cb:	68 e0 d8 02 c0       	push   0xc002d8e0
c00254d0:	e8 dc 53 ff ff       	call   c001a8b1 <Krnl::panic(char const*)>
c00254d5:	83 c4 10             	add    esp,0x10
c00254d8:	8b b5 6c 01 00 00    	mov    esi,DWORD PTR [ebp+0x16c]
c00254de:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c00254e4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00254ea:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00254ee:	89 f0                	mov    eax,esi
c00254f0:	c1 e0 07             	shl    eax,0x7
c00254f3:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c00254f7:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0025501:	53                   	push   ebx
c0025502:	8d 46 02             	lea    eax,[esi+0x2]
c0025505:	53                   	push   ebx
c0025506:	c1 e0 07             	shl    eax,0x7
c0025509:	bb 01 00 00 00       	mov    ebx,0x1
c002550e:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c0025512:	50                   	push   eax
c0025513:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c0025519:	e8 aa ef ff ff       	call   c00244c8 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c002551e:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0025522:	83 c4 10             	add    esp,0x10
c0025525:	83 7c 24 14 ff       	cmp    DWORD PTR [esp+0x14],0xffffffff
c002552a:	0f 84 ce 01 00 00    	je     c00256fe <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0025530:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0025534:	c1 e0 09             	shl    eax,0x9
c0025537:	80 7c 24 10 00       	cmp    BYTE PTR [esp+0x10],0x0
c002553c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0025540:	74 17                	je     c0025559 <SATA::access(unsigned long long, int, void*, bool)+0xb7>
c0025542:	51                   	push   ecx
c0025543:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025547:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c002554b:	ff b5 78 01 00 00    	push   DWORD PTR [ebp+0x178]
c0025551:	e8 12 b2 fd ff       	call   c0000768 <memcpy>
c0025556:	83 c4 10             	add    esp,0x10
c0025559:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c002555f:	8d 46 02             	lea    eax,[esi+0x2]
c0025562:	c1 e0 07             	shl    eax,0x7
c0025565:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0025569:	8b 00                	mov    eax,DWORD PTR [eax]
c002556b:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0025571:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0025577:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c002557b:	c1 e1 05             	shl    ecx,0x5
c002557e:	01 c8                	add    eax,ecx
c0025580:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0025584:	8a 18                	mov    bl,BYTE PTR [eax]
c0025586:	83 e1 01             	and    ecx,0x1
c0025589:	83 e3 bf             	and    ebx,0xffffffbf
c002558c:	c1 e1 06             	shl    ecx,0x6
c002558f:	09 d9                	or     ecx,ebx
c0025591:	88 08                	mov    BYTE PTR [eax],cl
c0025593:	8b 08                	mov    ecx,DWORD PTR [eax]
c0025595:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c002559b:	81 c9 05 00 01 00    	or     ecx,0x10005
c00255a1:	89 08                	mov    DWORD PTR [eax],ecx
c00255a3:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c00255a9:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c00255af:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c00255b5:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c00255b8:	52                   	push   edx
c00255b9:	68 90 00 00 00       	push   0x90
c00255be:	6a 00                	push   0x0
c00255c0:	53                   	push   ebx
c00255c1:	e8 d6 b1 fd ff       	call   c000079c <memset>
c00255c6:	8b 85 74 01 00 00    	mov    eax,DWORD PTR [ebp+0x174]
c00255cc:	66 89 7b 04          	mov    WORD PTR [ebx+0x4],di
c00255d0:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c00255d6:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c00255da:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00255de:	83 c4 10             	add    esp,0x10
c00255e1:	8d 48 ff             	lea    ecx,[eax-0x1]
c00255e4:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c00255ea:	81 e1 ff ff 3f 00    	and    ecx,0x3fffff
c00255f0:	25 00 00 c0 ff       	and    eax,0xffc00000
c00255f5:	09 c8                	or     eax,ecx
c00255f7:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c00255fd:	66 8b 03             	mov    ax,WORD PTR [ebx]
c0025600:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c0025607:	66 25 00 7f          	and    ax,0x7f00
c002560b:	66 0d 27 80          	or     ax,0x8027
c002560f:	80 7c 24 10 01       	cmp    BYTE PTR [esp+0x10],0x1
c0025614:	66 89 03             	mov    WORD PTR [ebx],ax
c0025617:	19 c0                	sbb    eax,eax
c0025619:	83 e0 f0             	and    eax,0xfffffff0
c002561c:	83 c0 35             	add    eax,0x35
c002561f:	88 43 02             	mov    BYTE PTR [ebx+0x2],al
c0025622:	89 f8                	mov    eax,edi
c0025624:	c1 e8 10             	shr    eax,0x10
c0025627:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c002562a:	89 f8                	mov    eax,edi
c002562c:	c1 e8 18             	shr    eax,0x18
c002562f:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c0025632:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0025636:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c0025639:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002563d:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c0025640:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0025644:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c0025648:	89 f3                	mov    ebx,esi
c002564a:	31 c0                	xor    eax,eax
c002564c:	c1 e3 07             	shl    ebx,0x7
c002564f:	03 5c 24 0c          	add    ebx,DWORD PTR [esp+0xc]
c0025653:	8b 8b 20 01 00 00    	mov    ecx,DWORD PTR [ebx+0x120]
c0025659:	80 e1 88             	and    cl,0x88
c002565c:	74 0a                	je     c0025668 <SATA::access(unsigned long long, int, void*, bool)+0x1c6>
c002565e:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0025663:	74 0a                	je     c002566f <SATA::access(unsigned long long, int, void*, bool)+0x1cd>
c0025665:	40                   	inc    eax
c0025666:	eb eb                	jmp    c0025653 <SATA::access(unsigned long long, int, void*, bool)+0x1b1>
c0025668:	3d 40 42 0f 00       	cmp    eax,0xf4240
c002566d:	75 0a                	jne    c0025679 <SATA::access(unsigned long long, int, void*, bool)+0x1d7>
c002566f:	83 ec 0c             	sub    esp,0xc
c0025672:	68 19 d9 02 c0       	push   0xc002d919
c0025677:	eb 56                	jmp    c00256cf <SATA::access(unsigned long long, int, void*, bool)+0x22d>
c0025679:	b8 01 00 00 00       	mov    eax,0x1
c002567e:	8a 4c 24 14          	mov    cl,BYTE PTR [esp+0x14]
c0025682:	c1 e6 07             	shl    esi,0x7
c0025685:	d3 e0                	shl    eax,cl
c0025687:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c002568b:	89 83 38 01 00 00    	mov    DWORD PTR [ebx+0x138],eax
c0025691:	8b 8e 38 01 00 00    	mov    ecx,DWORD PTR [esi+0x138]
c0025697:	85 c8                	test   eax,ecx
c0025699:	74 20                	je     c00256bb <SATA::access(unsigned long long, int, void*, bool)+0x219>
c002569b:	8b 8e 10 01 00 00    	mov    ecx,DWORD PTR [esi+0x110]
c00256a1:	0f ba e1 1e          	bt     ecx,0x1e
c00256a5:	73 ea                	jae    c0025691 <SATA::access(unsigned long long, int, void*, bool)+0x1ef>
c00256a7:	83 ec 0c             	sub    esp,0xc
c00256aa:	31 db                	xor    ebx,ebx
c00256ac:	68 27 d9 02 c0       	push   0xc002d927
c00256b1:	e8 fb 51 ff ff       	call   c001a8b1 <Krnl::panic(char const*)>
c00256b6:	83 c4 10             	add    esp,0x10
c00256b9:	eb 43                	jmp    c00256fe <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c00256bb:	8b 86 10 01 00 00    	mov    eax,DWORD PTR [esi+0x110]
c00256c1:	0f ba e0 1e          	bt     eax,0x1e
c00256c5:	73 17                	jae    c00256de <SATA::access(unsigned long long, int, void*, bool)+0x23c>
c00256c7:	83 ec 0c             	sub    esp,0xc
c00256ca:	68 27 d9 02 c0       	push   0xc002d927
c00256cf:	e8 dd 51 ff ff       	call   c001a8b1 <Krnl::panic(char const*)>
c00256d4:	bb 01 00 00 00       	mov    ebx,0x1
c00256d9:	83 c4 10             	add    esp,0x10
c00256dc:	eb 20                	jmp    c00256fe <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c00256de:	31 db                	xor    ebx,ebx
c00256e0:	80 7c 24 10 00       	cmp    BYTE PTR [esp+0x10],0x0
c00256e5:	75 17                	jne    c00256fe <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c00256e7:	50                   	push   eax
c00256e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00256ec:	ff b5 78 01 00 00    	push   DWORD PTR [ebp+0x178]
c00256f2:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00256f6:	e8 6d b0 fd ff       	call   c0000768 <memcpy>
c00256fb:	83 c4 10             	add    esp,0x10
c00256fe:	83 c4 2c             	add    esp,0x2c
c0025701:	89 d8                	mov    eax,ebx
c0025703:	5b                   	pop    ebx
c0025704:	5e                   	pop    esi
c0025705:	5f                   	pop    edi
c0025706:	5d                   	pop    ebp
c0025707:	c3                   	ret    

c0025708 <SATA::read(unsigned long long, int, void*)>:
c0025708:	57                   	push   edi
c0025709:	b8 04 00 00 00       	mov    eax,0x4
c002570e:	56                   	push   esi
c002570f:	53                   	push   ebx
c0025710:	83 ec 10             	sub    esp,0x10
c0025713:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0025717:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c002571b:	8d 4b ff             	lea    ecx,[ebx-0x1]
c002571e:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0025722:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0025726:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c002572c:	77 3b                	ja     c0025769 <SATA::read(unsigned long long, int, void*)+0x61>
c002572e:	b8 06 00 00 00       	mov    eax,0x6
c0025733:	85 d2                	test   edx,edx
c0025735:	74 32                	je     c0025769 <SATA::read(unsigned long long, int, void*)+0x61>
c0025737:	50                   	push   eax
c0025738:	50                   	push   eax
c0025739:	6a 00                	push   0x0
c002573b:	52                   	push   edx
c002573c:	53                   	push   ebx
c002573d:	57                   	push   edi
c002573e:	56                   	push   esi
c002573f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0025743:	e8 5a fd ff ff       	call   c00254a2 <SATA::access(unsigned long long, int, void*, bool)>
c0025748:	83 c4 20             	add    esp,0x20
c002574b:	85 c0                	test   eax,eax
c002574d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0025751:	75 11                	jne    c0025764 <SATA::read(unsigned long long, int, void*)+0x5c>
c0025753:	01 1d c8 31 03 c0    	add    DWORD PTR ds:0xc00331c8,ebx
c0025759:	e8 90 b2 fe ff       	call   c00109ee <VgaText::updateDiskUsage()>
c002575e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0025762:	eb 05                	jmp    c0025769 <SATA::read(unsigned long long, int, void*)+0x61>
c0025764:	b8 01 00 00 00       	mov    eax,0x1
c0025769:	83 c4 10             	add    esp,0x10
c002576c:	5b                   	pop    ebx
c002576d:	5e                   	pop    esi
c002576e:	5f                   	pop    edi
c002576f:	c3                   	ret    

c0025770 <SATA::write(unsigned long long, int, void*)>:
c0025770:	55                   	push   ebp
c0025771:	b8 04 00 00 00       	mov    eax,0x4
c0025776:	57                   	push   edi
c0025777:	56                   	push   esi
c0025778:	53                   	push   ebx
c0025779:	83 ec 1c             	sub    esp,0x1c
c002577c:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0025780:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0025784:	8d 75 ff             	lea    esi,[ebp-0x1]
c0025787:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c002578b:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c002578f:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0025795:	77 56                	ja     c00257ed <SATA::write(unsigned long long, int, void*)+0x7d>
c0025797:	b8 06 00 00 00       	mov    eax,0x6
c002579c:	85 ff                	test   edi,edi
c002579e:	74 4d                	je     c00257ed <SATA::write(unsigned long long, int, void*)+0x7d>
c00257a0:	89 ee                	mov    esi,ebp
c00257a2:	c1 e6 09             	shl    esi,0x9
c00257a5:	01 fe                	add    esi,edi
c00257a7:	89 c8                	mov    eax,ecx
c00257a9:	89 da                	mov    edx,ebx
c00257ab:	83 c0 01             	add    eax,0x1
c00257ae:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00257b2:	83 d2 00             	adc    edx,0x0
c00257b5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00257b9:	50                   	push   eax
c00257ba:	50                   	push   eax
c00257bb:	6a 01                	push   0x1
c00257bd:	57                   	push   edi
c00257be:	81 c7 00 02 00 00    	add    edi,0x200
c00257c4:	6a 01                	push   0x1
c00257c6:	53                   	push   ebx
c00257c7:	51                   	push   ecx
c00257c8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00257cc:	e8 d1 fc ff ff       	call   c00254a2 <SATA::access(unsigned long long, int, void*, bool)>
c00257d1:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c00257d5:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00257d9:	83 c4 20             	add    esp,0x20
c00257dc:	39 f7                	cmp    edi,esi
c00257de:	75 c7                	jne    c00257a7 <SATA::write(unsigned long long, int, void*)+0x37>
c00257e0:	01 2d c4 31 03 c0    	add    DWORD PTR ds:0xc00331c4,ebp
c00257e6:	e8 03 b2 fe ff       	call   c00109ee <VgaText::updateDiskUsage()>
c00257eb:	31 c0                	xor    eax,eax
c00257ed:	83 c4 1c             	add    esp,0x1c
c00257f0:	5b                   	pop    ebx
c00257f1:	5e                   	pop    esi
c00257f2:	5f                   	pop    edi
c00257f3:	5d                   	pop    ebp
c00257f4:	c3                   	ret    
c00257f5:	90                   	nop

c00257f6 <SATAPI::write(unsigned long long, int, void*)>:
c00257f6:	b8 03 00 00 00       	mov    eax,0x3
c00257fb:	c3                   	ret    

c00257fc <SATAPI::close(int, int, void*)>:
c00257fc:	83 ec 0c             	sub    esp,0xc
c00257ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025803:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0025809:	85 c0                	test   eax,eax
c002580b:	74 0c                	je     c0025819 <SATAPI::close(int, int, void*)+0x1d>
c002580d:	83 ec 0c             	sub    esp,0xc
c0025810:	8b 10                	mov    edx,DWORD PTR [eax]
c0025812:	50                   	push   eax
c0025813:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0025816:	83 c4 10             	add    esp,0x10
c0025819:	31 c0                	xor    eax,eax
c002581b:	83 c4 0c             	add    esp,0xc
c002581e:	c3                   	ret    
c002581f:	90                   	nop

c0025820 <SATAPI::SATAPI()>:
c0025820:	83 ec 0c             	sub    esp,0xc
c0025823:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025827:	83 ec 04             	sub    esp,0x4
c002582a:	68 00 08 00 00       	push   0x800
c002582f:	68 70 d9 02 c0       	push   0xc002d970
c0025834:	50                   	push   eax
c0025835:	e8 1e ef fe ff       	call   c0014758 <PhysicalDisk::PhysicalDisk(char const*, int)>
c002583a:	83 c4 10             	add    esp,0x10
c002583d:	ba 1c da 02 c0       	mov    edx,0xc002da1c
c0025842:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025846:	89 10                	mov    DWORD PTR [eax],edx
c0025848:	90                   	nop
c0025849:	83 c4 0c             	add    esp,0xc
c002584c:	c3                   	ret    
c002584d:	90                   	nop

c002584e <SATAPI::diskRemoved()>:
c002584e:	83 ec 18             	sub    esp,0x18
c0025851:	68 7c d9 02 c0       	push   0xc002d97c
c0025856:	e8 96 d6 fe ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c002585b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002585f:	c6 80 74 01 00 00 00 	mov    BYTE PTR [eax+0x174],0x0
c0025866:	83 c4 1c             	add    esp,0x1c
c0025869:	c3                   	ret    

c002586a <SATAPI::diskInserted()>:
c002586a:	53                   	push   ebx
c002586b:	83 ec 14             	sub    esp,0x14
c002586e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0025872:	68 93 d9 02 c0       	push   0xc002d993
c0025877:	e8 75 d6 fe ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c002587c:	c6 83 74 01 00 00 01 	mov    BYTE PTR [ebx+0x174],0x1
c0025883:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0025886:	e8 35 ef fe ff       	call   c00147c0 <PhysicalDisk::startCache()>
c002588b:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c002588f:	83 c4 18             	add    esp,0x18
c0025892:	5b                   	pop    ebx
c0025893:	e9 08 12 ff ff       	jmp    c0016aa0 <createPartitionsForDisk(PhysicalDisk*)>

c0025898 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c0025898:	55                   	push   ebp
c0025899:	57                   	push   edi
c002589a:	56                   	push   esi
c002589b:	53                   	push   ebx
c002589c:	83 ec 24             	sub    esp,0x24
c002589f:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00258a3:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00258a7:	8b be 6c 01 00 00    	mov    edi,DWORD PTR [esi+0x16c]
c00258ad:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00258b1:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c00258b5:	8b 86 70 01 00 00    	mov    eax,DWORD PTR [esi+0x170]
c00258bb:	8d 5f 02             	lea    ebx,[edi+0x2]
c00258be:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00258c4:	c1 e3 07             	shl    ebx,0x7
c00258c7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00258cb:	89 f8                	mov    eax,edi
c00258cd:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c00258d1:	c1 e0 07             	shl    eax,0x7
c00258d4:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00258d8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00258dc:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c00258e6:	53                   	push   ebx
c00258e7:	ff b6 70 01 00 00    	push   DWORD PTR [esi+0x170]
c00258ed:	e8 d6 eb ff ff       	call   c00244c8 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c00258f2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00258f6:	83 c4 10             	add    esp,0x10
c00258f9:	b8 01 00 00 00       	mov    eax,0x1
c00258fe:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0025903:	0f 84 8a 01 00 00    	je     c0025a93 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fb>
c0025909:	8b 8e 70 01 00 00    	mov    ecx,DWORD PTR [esi+0x170]
c002590f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0025911:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0025917:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c002591d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0025921:	c1 e1 05             	shl    ecx,0x5
c0025924:	01 c8                	add    eax,ecx
c0025926:	8b 08                	mov    ecx,DWORD PTR [eax]
c0025928:	81 e1 80 ff 00 00    	and    ecx,0xff80
c002592e:	81 c9 25 00 01 00    	or     ecx,0x10025
c0025934:	89 08                	mov    DWORD PTR [eax],ecx
c0025936:	8b 8e 70 01 00 00    	mov    ecx,DWORD PTR [esi+0x170]
c002593c:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c0025942:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c0025948:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c002594b:	52                   	push   edx
c002594c:	68 90 00 00 00       	push   0x90
c0025951:	6a 00                	push   0x0
c0025953:	53                   	push   ebx
c0025954:	e8 43 ae fd ff       	call   c000079c <memset>
c0025959:	83 c4 0c             	add    esp,0xc
c002595c:	8d 43 40             	lea    eax,[ebx+0x40]
c002595f:	6a 0c                	push   0xc
c0025961:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0025965:	50                   	push   eax
c0025966:	e8 fd ad fd ff       	call   c0000768 <memcpy>
c002596b:	8b 86 78 01 00 00    	mov    eax,DWORD PTR [esi+0x178]
c0025971:	89 ea                	mov    edx,ebp
c0025973:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c0025979:	c1 ea 18             	shr    edx,0x18
c002597c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0025980:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c0025983:	8d 48 ff             	lea    ecx,[eax-0x1]
c0025986:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c002598a:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c0025990:	81 e1 ff ff 3f 00    	and    ecx,0x3fffff
c0025996:	25 00 00 c0 ff       	and    eax,0xffc00000
c002599b:	66 89 6b 04          	mov    WORD PTR [ebx+0x4],bp
c002599f:	09 c8                	or     eax,ecx
c00259a1:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c00259a5:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c00259ab:	66 8b 03             	mov    ax,WORD PTR [ebx]
c00259ae:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c00259b5:	66 25 00 7f          	and    ax,0x7f00
c00259b9:	66 0d 27 80          	or     ax,0x8027
c00259bd:	66 89 03             	mov    WORD PTR [ebx],ax
c00259c0:	89 e8                	mov    eax,ebp
c00259c2:	c1 e8 10             	shr    eax,0x10
c00259c5:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00259c8:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c00259cc:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c00259cf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00259d3:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c00259d6:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00259da:	83 c4 10             	add    esp,0x10
c00259dd:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c00259e1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00259e5:	31 c0                	xor    eax,eax
c00259e7:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c00259ed:	80 e1 88             	and    cl,0x88
c00259f0:	74 0a                	je     c00259fc <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x164>
c00259f2:	3d 40 42 0f 00       	cmp    eax,0xf4240
c00259f7:	74 0a                	je     c0025a03 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c00259f9:	40                   	inc    eax
c00259fa:	eb eb                	jmp    c00259e7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x14f>
c00259fc:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0025a01:	75 0f                	jne    c0025a12 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x17a>
c0025a03:	83 ec 0c             	sub    esp,0xc
c0025a06:	68 19 d9 02 c0       	push   0xc002d919
c0025a0b:	e8 a1 4e ff ff       	call   c001a8b1 <Krnl::panic(char const*)>
c0025a10:	eb 3a                	jmp    c0025a4c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1b4>
c0025a12:	b8 01 00 00 00       	mov    eax,0x1
c0025a17:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0025a1b:	c1 e7 07             	shl    edi,0x7
c0025a1e:	d3 e0                	shl    eax,cl
c0025a20:	03 3c 24             	add    edi,DWORD PTR [esp]
c0025a23:	89 82 38 01 00 00    	mov    DWORD PTR [edx+0x138],eax
c0025a29:	8b 97 38 01 00 00    	mov    edx,DWORD PTR [edi+0x138]
c0025a2f:	85 d0                	test   eax,edx
c0025a31:	74 23                	je     c0025a56 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1be>
c0025a33:	8b 97 10 01 00 00    	mov    edx,DWORD PTR [edi+0x110]
c0025a39:	0f ba e2 1e          	bt     edx,0x1e
c0025a3d:	73 ea                	jae    c0025a29 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x191>
c0025a3f:	83 ec 0c             	sub    esp,0xc
c0025a42:	68 ab d9 02 c0       	push   0xc002d9ab
c0025a47:	e8 a5 d4 fe ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c0025a4c:	83 c4 10             	add    esp,0x10
c0025a4f:	b8 01 00 00 00       	mov    eax,0x1
c0025a54:	eb 3d                	jmp    c0025a93 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fb>
c0025a56:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c0025a5c:	0f ba e0 1e          	bt     eax,0x1e
c0025a60:	73 0a                	jae    c0025a6c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1d4>
c0025a62:	83 ec 0c             	sub    esp,0xc
c0025a65:	68 be d9 02 c0       	push   0xc002d9be
c0025a6a:	eb db                	jmp    c0025a47 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1af>
c0025a6c:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c0025a71:	74 1e                	je     c0025a91 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f9>
c0025a73:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0025a78:	74 17                	je     c0025a91 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f9>
c0025a7a:	50                   	push   eax
c0025a7b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0025a7f:	ff b6 7c 01 00 00    	push   DWORD PTR [esi+0x17c]
c0025a85:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0025a89:	e8 da ac fd ff       	call   c0000768 <memcpy>
c0025a8e:	83 c4 10             	add    esp,0x10
c0025a91:	31 c0                	xor    eax,eax
c0025a93:	83 c4 1c             	add    esp,0x1c
c0025a96:	5b                   	pop    ebx
c0025a97:	5e                   	pop    esi
c0025a98:	5f                   	pop    edi
c0025a99:	5d                   	pop    ebp
c0025a9a:	c3                   	ret    
c0025a9b:	90                   	nop

c0025a9c <SATAPI::eject()>:
c0025a9c:	57                   	push   edi
c0025a9d:	b9 03 00 00 00       	mov    ecx,0x3
c0025aa2:	53                   	push   ebx
c0025aa3:	83 ec 14             	sub    esp,0x14
c0025aa6:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0025aaa:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0025aae:	fc                   	cld    
c0025aaf:	31 c0                	xor    eax,eax
c0025ab1:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0025ab3:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0025ab8:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0025abd:	50                   	push   eax
c0025abe:	6a 00                	push   0x0
c0025ac0:	6a 00                	push   0x0
c0025ac2:	6a 00                	push   0x0
c0025ac4:	6a 00                	push   0x0
c0025ac6:	6a 02                	push   0x2
c0025ac8:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0025acc:	50                   	push   eax
c0025acd:	53                   	push   ebx
c0025ace:	e8 c5 fd ff ff       	call   c0025898 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025ad3:	83 c4 14             	add    esp,0x14
c0025ad6:	53                   	push   ebx
c0025ad7:	e8 72 fd ff ff       	call   c002584e <SATAPI::diskRemoved()>
c0025adc:	83 c4 24             	add    esp,0x24
c0025adf:	31 c0                	xor    eax,eax
c0025ae1:	5b                   	pop    ebx
c0025ae2:	5f                   	pop    edi
c0025ae3:	c3                   	ret    

c0025ae4 <SATAPI::detectMedia()>:
c0025ae4:	56                   	push   esi
c0025ae5:	53                   	push   ebx
c0025ae6:	83 ec 28             	sub    esp,0x28
c0025ae9:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0025aed:	6a 0c                	push   0xc
c0025aef:	6a 00                	push   0x0
c0025af1:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0025af5:	56                   	push   esi
c0025af6:	e8 a1 ac fd ff       	call   c000079c <memset>
c0025afb:	83 c4 0c             	add    esp,0xc
c0025afe:	6a 00                	push   0x0
c0025b00:	6a 00                	push   0x0
c0025b02:	6a 00                	push   0x0
c0025b04:	6a 00                	push   0x0
c0025b06:	6a 00                	push   0x0
c0025b08:	56                   	push   esi
c0025b09:	53                   	push   ebx
c0025b0a:	e8 89 fd ff ff       	call   c0025898 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025b0f:	83 c4 1c             	add    esp,0x1c
c0025b12:	6a 0c                	push   0xc
c0025b14:	6a 00                	push   0x0
c0025b16:	56                   	push   esi
c0025b17:	e8 80 ac fd ff       	call   c000079c <memset>
c0025b1c:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0025b21:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0025b26:	83 c4 0c             	add    esp,0xc
c0025b29:	6a 01                	push   0x1
c0025b2b:	8d 44 24 16          	lea    eax,[esp+0x16]
c0025b2f:	50                   	push   eax
c0025b30:	6a 00                	push   0x0
c0025b32:	6a 00                	push   0x0
c0025b34:	6a 12                	push   0x12
c0025b36:	56                   	push   esi
c0025b37:	53                   	push   ebx
c0025b38:	e8 5b fd ff ff       	call   c0025898 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025b3d:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0025b41:	83 c4 20             	add    esp,0x20
c0025b44:	83 e0 7f             	and    eax,0x7f
c0025b47:	3c 70                	cmp    al,0x70
c0025b49:	74 15                	je     c0025b60 <SATAPI::detectMedia()+0x7c>
c0025b4b:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0025b52:	75 0c                	jne    c0025b60 <SATAPI::detectMedia()+0x7c>
c0025b54:	83 ec 0c             	sub    esp,0xc
c0025b57:	53                   	push   ebx
c0025b58:	e8 0d fd ff ff       	call   c002586a <SATAPI::diskInserted()>
c0025b5d:	83 c4 10             	add    esp,0x10
c0025b60:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0025b64:	83 e0 0f             	and    eax,0xf
c0025b67:	3c 02                	cmp    al,0x2
c0025b69:	75 1b                	jne    c0025b86 <SATAPI::detectMedia()+0xa2>
c0025b6b:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0025b70:	75 2d                	jne    c0025b9f <SATAPI::detectMedia()+0xbb>
c0025b72:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0025b79:	74 24                	je     c0025b9f <SATAPI::detectMedia()+0xbb>
c0025b7b:	83 ec 0c             	sub    esp,0xc
c0025b7e:	53                   	push   ebx
c0025b7f:	e8 ca fc ff ff       	call   c002584e <SATAPI::diskRemoved()>
c0025b84:	eb 16                	jmp    c0025b9c <SATAPI::detectMedia()+0xb8>
c0025b86:	84 c0                	test   al,al
c0025b88:	75 15                	jne    c0025b9f <SATAPI::detectMedia()+0xbb>
c0025b8a:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0025b91:	75 0c                	jne    c0025b9f <SATAPI::detectMedia()+0xbb>
c0025b93:	83 ec 0c             	sub    esp,0xc
c0025b96:	53                   	push   ebx
c0025b97:	e8 ce fc ff ff       	call   c002586a <SATAPI::diskInserted()>
c0025b9c:	83 c4 10             	add    esp,0x10
c0025b9f:	83 c4 24             	add    esp,0x24
c0025ba2:	5b                   	pop    ebx
c0025ba3:	5e                   	pop    esi
c0025ba4:	c3                   	ret    
c0025ba5:	90                   	nop

c0025ba6 <SATAPI::open(int, int, void*)>:
c0025ba6:	56                   	push   esi
c0025ba7:	53                   	push   ebx
c0025ba8:	50                   	push   eax
c0025ba9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0025bad:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025bb1:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0025bbb:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0025bc1:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0025bcb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025bcf:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0025bd9:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0025bdf:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0025be6:	e8 b3 a3 fe ff       	call   c000ff9e <Phys::allocatePage()>
c0025beb:	89 c6                	mov    esi,eax
c0025bed:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0025bf3:	81 c6 00 10 00 00    	add    esi,0x1000
c0025bf9:	e8 a0 a3 fe ff       	call   c000ff9e <Phys::allocatePage()>
c0025bfe:	39 c6                	cmp    esi,eax
c0025c00:	74 10                	je     c0025c12 <SATAPI::open(int, int, void*)+0x6c>
c0025c02:	83 ec 0c             	sub    esp,0xc
c0025c05:	68 d3 d9 02 c0       	push   0xc002d9d3
c0025c0a:	e8 a2 4c ff ff       	call   c001a8b1 <Krnl::panic(char const*)>
c0025c0f:	83 c4 10             	add    esp,0x10
c0025c12:	83 ec 0c             	sub    esp,0xc
c0025c15:	6a 02                	push   0x2
c0025c17:	e8 c9 be fe ff       	call   c0011ae5 <Virt::allocateKernelVirtualPages(int)>
c0025c1c:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c0025c22:	e8 fd c0 fe ff       	call   c0011d24 <Virt::getAKernelVAS()>
c0025c27:	6a 03                	push   0x3
c0025c29:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c0025c2f:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c0025c35:	50                   	push   eax
c0025c36:	e8 e7 c6 fe ff       	call   c0012322 <VAS::mapPage(unsigned long, unsigned long, int)>
c0025c3b:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c0025c42:	83 c4 14             	add    esp,0x14
c0025c45:	53                   	push   ebx
c0025c46:	e8 99 fe ff ff       	call   c0025ae4 <SATAPI::detectMedia()>
c0025c4b:	83 c4 14             	add    esp,0x14
c0025c4e:	31 c0                	xor    eax,eax
c0025c50:	5b                   	pop    ebx
c0025c51:	5e                   	pop    esi
c0025c52:	c3                   	ret    
c0025c53:	90                   	nop

c0025c54 <SATAPI::read(unsigned long long, int, void*)>:
c0025c54:	55                   	push   ebp
c0025c55:	57                   	push   edi
c0025c56:	56                   	push   esi
c0025c57:	53                   	push   ebx
c0025c58:	83 ec 1c             	sub    esp,0x1c
c0025c5b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0025c5f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0025c63:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0025c67:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c0025c6e:	74 19                	je     c0025c89 <SATAPI::read(unsigned long long, int, void*)+0x35>
c0025c70:	83 7c 24 3c 04       	cmp    DWORD PTR [esp+0x3c],0x4
c0025c75:	7e 2e                	jle    c0025ca5 <SATAPI::read(unsigned long long, int, void*)+0x51>
c0025c77:	83 ec 0c             	sub    esp,0xc
c0025c7a:	68 e9 d9 02 c0       	push   0xc002d9e9
c0025c7f:	e8 2d 4c ff ff       	call   c001a8b1 <Krnl::panic(char const*)>
c0025c84:	83 c4 10             	add    esp,0x10
c0025c87:	eb 1c                	jmp    c0025ca5 <SATAPI::read(unsigned long long, int, void*)+0x51>
c0025c89:	83 ec 0c             	sub    esp,0xc
c0025c8c:	55                   	push   ebp
c0025c8d:	e8 52 fe ff ff       	call   c0025ae4 <SATAPI::detectMedia()>
c0025c92:	83 c4 10             	add    esp,0x10
c0025c95:	b8 02 00 00 00       	mov    eax,0x2
c0025c9a:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c0025ca1:	75 cd                	jne    c0025c70 <SATAPI::read(unsigned long long, int, void*)+0x1c>
c0025ca3:	eb 49                	jmp    c0025cee <SATAPI::read(unsigned long long, int, void*)+0x9a>
c0025ca5:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0025ca9:	b9 03 00 00 00       	mov    ecx,0x3
c0025cae:	fc                   	cld    
c0025caf:	31 c0                	xor    eax,eax
c0025cb1:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0025cb3:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0025cb8:	89 d8                	mov    eax,ebx
c0025cba:	86 e0                	xchg   al,ah
c0025cbc:	c1 c0 10             	rol    eax,0x10
c0025cbf:	86 e0                	xchg   al,ah
c0025cc1:	89 44 24 06          	mov    DWORD PTR [esp+0x6],eax
c0025cc5:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c0025cc9:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0025ccd:	50                   	push   eax
c0025cce:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0025cd2:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0025cd6:	56                   	push   esi
c0025cd7:	53                   	push   ebx
c0025cd8:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0025cdc:	c1 e0 0b             	shl    eax,0xb
c0025cdf:	50                   	push   eax
c0025ce0:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0025ce4:	50                   	push   eax
c0025ce5:	55                   	push   ebp
c0025ce6:	e8 ad fb ff ff       	call   c0025898 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025ceb:	83 c4 20             	add    esp,0x20
c0025cee:	83 c4 1c             	add    esp,0x1c
c0025cf1:	5b                   	pop    ebx
c0025cf2:	5e                   	pop    esi
c0025cf3:	5f                   	pop    edi
c0025cf4:	5d                   	pop    ebp
c0025cf5:	c3                   	ret    

c0025cf6 <AVX::open(int, int, void*)>:
c0025cf6:	83 ec 0c             	sub    esp,0xc
c0025cf9:	e8 3a 11 00 00       	call   c0026e38 <avxInit>
c0025cfe:	b8 00 00 00 00       	mov    eax,0x0
c0025d03:	83 c4 0c             	add    esp,0xc
c0025d06:	c3                   	ret    
c0025d07:	90                   	nop

c0025d08 <AVX::close(int, int, void*)>:
c0025d08:	83 ec 0c             	sub    esp,0xc
c0025d0b:	e8 29 11 00 00       	call   c0026e39 <avxClose>
c0025d10:	b8 00 00 00 00       	mov    eax,0x0
c0025d15:	83 c4 0c             	add    esp,0xc
c0025d18:	c3                   	ret    
c0025d19:	90                   	nop

c0025d1a <AVX::available()>:
c0025d1a:	83 ec 0c             	sub    esp,0xc
c0025d1d:	e8 0e 11 00 00       	call   c0026e30 <avxDetect>
c0025d22:	85 c0                	test   eax,eax
c0025d24:	0f 95 c0             	setne  al
c0025d27:	83 c4 0c             	add    esp,0xc
c0025d2a:	c3                   	ret    
c0025d2b:	90                   	nop

c0025d2c <AVX::save(void*)>:
c0025d2c:	83 ec 0c             	sub    esp,0xc
c0025d2f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025d33:	83 ec 0c             	sub    esp,0xc
c0025d36:	50                   	push   eax
c0025d37:	e8 fa 10 00 00       	call   c0026e36 <avxSave>
c0025d3c:	83 c4 10             	add    esp,0x10
c0025d3f:	90                   	nop
c0025d40:	83 c4 0c             	add    esp,0xc
c0025d43:	c3                   	ret    

c0025d44 <AVX::load(void*)>:
c0025d44:	83 ec 0c             	sub    esp,0xc
c0025d47:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025d4b:	83 ec 0c             	sub    esp,0xc
c0025d4e:	50                   	push   eax
c0025d4f:	e8 e3 10 00 00       	call   c0026e37 <avxLoad>
c0025d54:	83 c4 10             	add    esp,0x10
c0025d57:	90                   	nop
c0025d58:	83 c4 0c             	add    esp,0xc
c0025d5b:	c3                   	ret    

c0025d5c <AVX::AVX()>:
c0025d5c:	83 ec 0c             	sub    esp,0xc
c0025d5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025d63:	83 ec 08             	sub    esp,0x8
c0025d66:	68 4c da 02 c0       	push   0xc002da4c
c0025d6b:	50                   	push   eax
c0025d6c:	e8 c5 ea fe ff       	call   c0014836 <FPU::FPU(char const*)>
c0025d71:	83 c4 10             	add    esp,0x10
c0025d74:	ba 5c da 02 c0       	mov    edx,0xc002da5c
c0025d79:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025d7d:	89 10                	mov    DWORD PTR [eax],edx
c0025d7f:	90                   	nop
c0025d80:	83 c4 0c             	add    esp,0xc
c0025d83:	c3                   	ret    

c0025d84 <MMX::available()>:
c0025d84:	a1 68 ee 02 c0       	mov    eax,ds:0xc002ee68
c0025d89:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0025d8f:	83 e0 20             	and    eax,0x20
c0025d92:	84 c0                	test   al,al
c0025d94:	0f 95 c0             	setne  al
c0025d97:	c3                   	ret    

c0025d98 <MMX::open(int, int, void*)>:
c0025d98:	83 ec 0c             	sub    esp,0xc
c0025d9b:	e8 22 11 00 00       	call   c0026ec2 <x87Init>
c0025da0:	b8 00 00 00 00       	mov    eax,0x0
c0025da5:	83 c4 0c             	add    esp,0xc
c0025da8:	c3                   	ret    
c0025da9:	90                   	nop

c0025daa <MMX::close(int, int, void*)>:
c0025daa:	83 ec 0c             	sub    esp,0xc
c0025dad:	e8 2a 11 00 00       	call   c0026edc <x87Close>
c0025db2:	b8 00 00 00 00       	mov    eax,0x0
c0025db7:	83 c4 0c             	add    esp,0xc
c0025dba:	c3                   	ret    
c0025dbb:	90                   	nop

c0025dbc <MMX::save(void*)>:
c0025dbc:	83 ec 0c             	sub    esp,0xc
c0025dbf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025dc3:	83 ec 0c             	sub    esp,0xc
c0025dc6:	50                   	push   eax
c0025dc7:	e8 e5 10 00 00       	call   c0026eb1 <x87Save>
c0025dcc:	83 c4 10             	add    esp,0x10
c0025dcf:	90                   	nop
c0025dd0:	83 c4 0c             	add    esp,0xc
c0025dd3:	c3                   	ret    

c0025dd4 <MMX::load(void*)>:
c0025dd4:	83 ec 0c             	sub    esp,0xc
c0025dd7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025ddb:	83 ec 0c             	sub    esp,0xc
c0025dde:	50                   	push   eax
c0025ddf:	e8 d6 10 00 00       	call   c0026eba <x87Load>
c0025de4:	83 c4 10             	add    esp,0x10
c0025de7:	90                   	nop
c0025de8:	83 c4 0c             	add    esp,0xc
c0025deb:	c3                   	ret    

c0025dec <MMX::MMX()>:
c0025dec:	83 ec 0c             	sub    esp,0xc
c0025def:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025df3:	83 ec 08             	sub    esp,0x8
c0025df6:	68 8c da 02 c0       	push   0xc002da8c
c0025dfb:	50                   	push   eax
c0025dfc:	e8 35 ea fe ff       	call   c0014836 <FPU::FPU(char const*)>
c0025e01:	83 c4 10             	add    esp,0x10
c0025e04:	ba 9c da 02 c0       	mov    edx,0xc002da9c
c0025e09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e0d:	89 10                	mov    DWORD PTR [eax],edx
c0025e0f:	90                   	nop
c0025e10:	83 c4 0c             	add    esp,0xc
c0025e13:	c3                   	ret    

c0025e14 <SSE::open(int, int, void*)>:
c0025e14:	83 ec 0c             	sub    esp,0xc
c0025e17:	e8 58 10 00 00       	call   c0026e74 <sseInit>
c0025e1c:	b8 00 00 00 00       	mov    eax,0x0
c0025e21:	83 c4 0c             	add    esp,0xc
c0025e24:	c3                   	ret    
c0025e25:	90                   	nop

c0025e26 <SSE::close(int, int, void*)>:
c0025e26:	83 ec 0c             	sub    esp,0xc
c0025e29:	e8 56 10 00 00       	call   c0026e84 <sseClose>
c0025e2e:	b8 00 00 00 00       	mov    eax,0x0
c0025e33:	83 c4 0c             	add    esp,0xc
c0025e36:	c3                   	ret    
c0025e37:	90                   	nop

c0025e38 <SSE::available()>:
c0025e38:	83 ec 1c             	sub    esp,0x1c
c0025e3b:	e8 10 10 00 00       	call   c0026e50 <absolutelyNoChanceInHell>
c0025e40:	85 c0                	test   eax,eax
c0025e42:	0f 95 c0             	setne  al
c0025e45:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0025e49:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0025e4d:	83 c4 1c             	add    esp,0x1c
c0025e50:	c3                   	ret    
c0025e51:	90                   	nop

c0025e52 <SSE::save(void*)>:
c0025e52:	83 ec 0c             	sub    esp,0xc
c0025e55:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025e59:	83 ec 0c             	sub    esp,0xc
c0025e5c:	50                   	push   eax
c0025e5d:	e8 06 10 00 00       	call   c0026e68 <sseSave>
c0025e62:	83 c4 10             	add    esp,0x10
c0025e65:	90                   	nop
c0025e66:	83 c4 0c             	add    esp,0xc
c0025e69:	c3                   	ret    

c0025e6a <SSE::load(void*)>:
c0025e6a:	83 ec 0c             	sub    esp,0xc
c0025e6d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025e71:	83 ec 0c             	sub    esp,0xc
c0025e74:	50                   	push   eax
c0025e75:	e8 f4 0f 00 00       	call   c0026e6e <sseLoad>
c0025e7a:	83 c4 10             	add    esp,0x10
c0025e7d:	90                   	nop
c0025e7e:	83 c4 0c             	add    esp,0xc
c0025e81:	c3                   	ret    

c0025e82 <SSE::SSE()>:
c0025e82:	83 ec 0c             	sub    esp,0xc
c0025e85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e89:	83 ec 08             	sub    esp,0x8
c0025e8c:	68 cc da 02 c0       	push   0xc002dacc
c0025e91:	50                   	push   eax
c0025e92:	e8 9f e9 fe ff       	call   c0014836 <FPU::FPU(char const*)>
c0025e97:	83 c4 10             	add    esp,0x10
c0025e9a:	ba dc da 02 c0       	mov    edx,0xc002dadc
c0025e9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ea3:	89 10                	mov    DWORD PTR [eax],edx
c0025ea5:	90                   	nop
c0025ea6:	83 c4 0c             	add    esp,0xc
c0025ea9:	c3                   	ret    

c0025eaa <x87::open(int, int, void*)>:
c0025eaa:	83 ec 0c             	sub    esp,0xc
c0025ead:	e8 10 10 00 00       	call   c0026ec2 <x87Init>
c0025eb2:	b8 00 00 00 00       	mov    eax,0x0
c0025eb7:	83 c4 0c             	add    esp,0xc
c0025eba:	c3                   	ret    
c0025ebb:	90                   	nop

c0025ebc <x87::close(int, int, void*)>:
c0025ebc:	83 ec 0c             	sub    esp,0xc
c0025ebf:	e8 18 10 00 00       	call   c0026edc <x87Close>
c0025ec4:	b8 00 00 00 00       	mov    eax,0x0
c0025ec9:	83 c4 0c             	add    esp,0xc
c0025ecc:	c3                   	ret    
c0025ecd:	90                   	nop

c0025ece <x87::available()>:
c0025ece:	83 ec 0c             	sub    esp,0xc
c0025ed1:	e8 c0 0f 00 00       	call   c0026e96 <x87Detect>
c0025ed6:	85 c0                	test   eax,eax
c0025ed8:	0f 95 c0             	setne  al
c0025edb:	83 c4 0c             	add    esp,0xc
c0025ede:	c3                   	ret    
c0025edf:	90                   	nop

c0025ee0 <x87::save(void*)>:
c0025ee0:	83 ec 0c             	sub    esp,0xc
c0025ee3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025ee7:	83 ec 0c             	sub    esp,0xc
c0025eea:	50                   	push   eax
c0025eeb:	e8 c1 0f 00 00       	call   c0026eb1 <x87Save>
c0025ef0:	83 c4 10             	add    esp,0x10
c0025ef3:	90                   	nop
c0025ef4:	83 c4 0c             	add    esp,0xc
c0025ef7:	c3                   	ret    

c0025ef8 <x87::load(void*)>:
c0025ef8:	83 ec 0c             	sub    esp,0xc
c0025efb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025eff:	83 ec 0c             	sub    esp,0xc
c0025f02:	50                   	push   eax
c0025f03:	e8 b2 0f 00 00       	call   c0026eba <x87Load>
c0025f08:	83 c4 10             	add    esp,0x10
c0025f0b:	90                   	nop
c0025f0c:	83 c4 0c             	add    esp,0xc
c0025f0f:	c3                   	ret    

c0025f10 <x87::x87()>:
c0025f10:	83 ec 0c             	sub    esp,0xc
c0025f13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f17:	83 ec 08             	sub    esp,0x8
c0025f1a:	68 0c db 02 c0       	push   0xc002db0c
c0025f1f:	50                   	push   eax
c0025f20:	e8 11 e9 fe ff       	call   c0014836 <FPU::FPU(char const*)>
c0025f25:	83 c4 10             	add    esp,0x10
c0025f28:	ba 1c db 02 c0       	mov    edx,0xc002db1c
c0025f2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f31:	89 10                	mov    DWORD PTR [eax],edx
c0025f33:	90                   	nop
c0025f34:	83 c4 0c             	add    esp,0xc
c0025f37:	c3                   	ret    

c0025f38 <APIC::disable()>:
c0025f38:	90                   	nop
c0025f39:	c3                   	ret    

c0025f3a <APIC::close(int, int, void*)>:
c0025f3a:	55                   	push   ebp
c0025f3b:	89 e5                	mov    ebp,esp
c0025f3d:	83 ec 08             	sub    esp,0x8
c0025f40:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025f43:	8b 00                	mov    eax,DWORD PTR [eax]
c0025f45:	83 c0 3c             	add    eax,0x3c
c0025f48:	8b 00                	mov    eax,DWORD PTR [eax]
c0025f4a:	83 ec 0c             	sub    esp,0xc
c0025f4d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025f50:	ff d0                	call   eax
c0025f52:	83 c4 10             	add    esp,0x10
c0025f55:	b8 00 00 00 00       	mov    eax,0x0
c0025f5a:	c9                   	leave  
c0025f5b:	c3                   	ret    

c0025f5c <IOAPIC::close(int, int, void*)>:
c0025f5c:	b8 00 00 00 00       	mov    eax,0x0
c0025f61:	c3                   	ret    

c0025f62 <APIC::io_wait()>:
c0025f62:	eb 00                	jmp    c0025f64 <APIC::io_wait()+0x2>
c0025f64:	eb 00                	jmp    c0025f66 <APIC::io_wait()+0x4>
c0025f66:	90                   	nop
c0025f67:	c3                   	ret    

c0025f68 <APIC::getBase()>:
c0025f68:	55                   	push   ebp
c0025f69:	89 e5                	mov    ebp,esp
c0025f6b:	83 ec 18             	sub    esp,0x18
c0025f6e:	a1 68 ee 02 c0       	mov    eax,ds:0xc002ee68
c0025f73:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0025f79:	83 e0 08             	and    eax,0x8
c0025f7c:	84 c0                	test   al,al
c0025f7e:	75 07                	jne    c0025f87 <APIC::getBase()+0x1f>
c0025f80:	b8 00 00 00 00       	mov    eax,0x0
c0025f85:	eb 21                	jmp    c0025fa8 <APIC::getBase()+0x40>
c0025f87:	a1 68 ee 02 c0       	mov    eax,ds:0xc002ee68
c0025f8c:	83 ec 08             	sub    esp,0x8
c0025f8f:	6a 1b                	push   0x1b
c0025f91:	50                   	push   eax
c0025f92:	e8 39 8f fe ff       	call   c000eed0 <Computer::rdmsr(unsigned int)>
c0025f97:	83 c4 10             	add    esp,0x10
c0025f9a:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0025f9d:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0025fa0:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025fa3:	25 00 f0 ff ff       	and    eax,0xfffff000
c0025fa8:	c9                   	leave  
c0025fa9:	c3                   	ret    

c0025faa <APIC::eoi(unsigned char)>:
c0025faa:	55                   	push   ebp
c0025fab:	89 e5                	mov    ebp,esp
c0025fad:	83 ec 28             	sub    esp,0x28
c0025fb0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025fb3:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0025fb6:	83 ec 0c             	sub    esp,0xc
c0025fb9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025fbc:	e8 a7 ff ff ff       	call   c0025f68 <APIC::getBase()>
c0025fc1:	83 c4 10             	add    esp,0x10
c0025fc4:	05 b0 00 00 00       	add    eax,0xb0
c0025fc9:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0025fcc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0025fcf:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0025fd5:	90                   	nop
c0025fd6:	c9                   	leave  
c0025fd7:	c3                   	ret    

c0025fd8 <APIC::open(int, int, void*)>:
c0025fd8:	55                   	push   ebp
c0025fd9:	89 e5                	mov    ebp,esp
c0025fdb:	57                   	push   edi
c0025fdc:	56                   	push   esi
c0025fdd:	53                   	push   ebx
c0025fde:	83 ec 2c             	sub    esp,0x2c
c0025fe1:	83 ec 0c             	sub    esp,0xc
c0025fe4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025fe7:	e8 7c ff ff ff       	call   c0025f68 <APIC::getBase()>
c0025fec:	83 c4 10             	add    esp,0x10
c0025fef:	89 c2                	mov    edx,eax
c0025ff1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025ff4:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025ffa:	0f b6 f8             	movzx  edi,al
c0025ffd:	89 d0                	mov    eax,edx
c0025fff:	ba 00 00 00 00       	mov    edx,0x0
c0026004:	89 c1                	mov    ecx,eax
c0026006:	80 e5 ff             	and    ch,0xff
c0026009:	89 cb                	mov    ebx,ecx
c002600b:	0f b6 f2             	movzx  esi,dl
c002600e:	89 d8                	mov    eax,ebx
c0026010:	89 f2                	mov    edx,esi
c0026012:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0026015:	8d 5f 08             	lea    ebx,[edi+0x8]
c0026018:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c002601c:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0026020:	83 e0 00             	and    eax,0x0
c0026023:	09 d0                	or     eax,edx
c0026025:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0026029:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002602c:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0026032:	8d 50 01             	lea    edx,[eax+0x1]
c0026035:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0026038:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c002603e:	0f b6 d0             	movzx  edx,al
c0026041:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026044:	83 c2 08             	add    edx,0x8
c0026047:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c002604b:	0f b6 c9             	movzx  ecx,cl
c002604e:	81 c9 00 00 01 00    	or     ecx,0x10000
c0026054:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0026058:	83 ec 0c             	sub    esp,0xc
c002605b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002605e:	e8 05 ff ff ff       	call   c0025f68 <APIC::getBase()>
c0026063:	83 c4 10             	add    esp,0x10
c0026066:	05 f0 00 00 00       	add    eax,0xf0
c002606b:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c002606e:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0026071:	8b 00                	mov    eax,DWORD PTR [eax]
c0026073:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0026076:	81 4d dc 00 01 00 00 	or     DWORD PTR [ebp-0x24],0x100
c002607d:	81 4d dc ff 00 00 00 	or     DWORD PTR [ebp-0x24],0xff
c0026084:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0026087:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c002608a:	89 10                	mov    DWORD PTR [eax],edx
c002608c:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c0026093:	a1 50 17 03 c0       	mov    eax,ds:0xc0031750
c0026098:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
c002609b:	7d 7c                	jge    c0026119 <APIC::open(int, int, void*)+0x141>
c002609d:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00260a0:	8b 04 85 60 17 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce8a0]
c00260a7:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c00260aa:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00260ad:	8b 04 85 60 17 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce8a0]
c00260b4:	c1 e8 08             	shr    eax,0x8
c00260b7:	66 89 45 d8          	mov    WORD PTR [ebp-0x28],ax
c00260bb:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00260be:	8b 04 85 60 17 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce8a0]
c00260c5:	c1 e8 18             	shr    eax,0x18
c00260c8:	88 45 d7             	mov    BYTE PTR [ebp-0x29],al
c00260cb:	80 7d db ff          	cmp    BYTE PTR [ebp-0x25],0xff
c00260cf:	75 40                	jne    c0026111 <APIC::open(int, int, void*)+0x139>
c00260d1:	83 ec 0c             	sub    esp,0xc
c00260d4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00260d7:	e8 8c fe ff ff       	call   c0025f68 <APIC::getBase()>
c00260dc:	83 c4 10             	add    esp,0x10
c00260df:	80 7d d7 01          	cmp    BYTE PTR [ebp-0x29],0x1
c00260e3:	75 07                	jne    c00260ec <APIC::open(int, int, void*)+0x114>
c00260e5:	ba 60 03 00 00       	mov    edx,0x360
c00260ea:	eb 05                	jmp    c00260f1 <APIC::open(int, int, void*)+0x119>
c00260ec:	ba 50 03 00 00       	mov    edx,0x350
c00260f1:	01 d0                	add    eax,edx
c00260f3:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00260f6:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00260f9:	8b 00                	mov    eax,DWORD PTR [eax]
c00260fb:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c00260fe:	81 65 cc 00 ff ff ff 	and    DWORD PTR [ebp-0x34],0xffffff00
c0026105:	83 4d cc 02          	or     DWORD PTR [ebp-0x34],0x2
c0026109:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c002610c:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c002610f:	89 10                	mov    DWORD PTR [eax],edx
c0026111:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
c0026114:	e9 7a ff ff ff       	jmp    c0026093 <APIC::open(int, int, void*)+0xbb>
c0026119:	b8 00 00 00 00       	mov    eax,0x0
c002611e:	8d 65 f4             	lea    esp,[ebp-0xc]
c0026121:	5b                   	pop    ebx
c0026122:	5e                   	pop    esi
c0026123:	5f                   	pop    edi
c0026124:	5d                   	pop    ebp
c0026125:	c3                   	ret    

c0026126 <IOAPIC::IOAPIC()>:
c0026126:	83 ec 0c             	sub    esp,0xc
c0026129:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002612d:	83 ec 08             	sub    esp,0x8
c0026130:	68 4c db 02 c0       	push   0xc002db4c
c0026135:	50                   	push   eax
c0026136:	e8 db e3 fe ff       	call   c0014516 <Device::Device(char const*)>
c002613b:	83 c4 10             	add    esp,0x10
c002613e:	ba 74 dc 02 c0       	mov    edx,0xc002dc74
c0026143:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026147:	89 10                	mov    DWORD PTR [eax],edx
c0026149:	90                   	nop
c002614a:	83 c4 0c             	add    esp,0xc
c002614d:	c3                   	ret    

c002614e <APIC::APIC()>:
c002614e:	53                   	push   ebx
c002614f:	83 ec 18             	sub    esp,0x18
c0026152:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026156:	83 ec 08             	sub    esp,0x8
c0026159:	68 54 db 02 c0       	push   0xc002db54
c002615e:	50                   	push   eax
c002615f:	e8 2c eb fe ff       	call   c0014c90 <InterruptController::InterruptController(char const*)>
c0026164:	83 c4 10             	add    esp,0x10
c0026167:	ba 2c dc 02 c0       	mov    edx,0xc002dc2c
c002616c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026170:	89 10                	mov    DWORD PTR [eax],edx
c0026172:	a0 20 32 03 c0       	mov    al,ds:0xc0033220
c0026177:	83 f0 01             	xor    eax,0x1
c002617a:	84 c0                	test   al,al
c002617c:	0f 84 a1 00 00 00    	je     c0026223 <APIC::APIC()+0xd5>
c0026182:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0026187:	a0 00 18 03 c0       	mov    al,ds:0xc0031800
c002618c:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c0026190:	0f 83 86 00 00 00    	jae    c002621c <APIC::APIC()+0xce>
c0026196:	c7 44 24 04 68 01 00 00 	mov    DWORD PTR [esp+0x4],0x168
c002619e:	83 ec 0c             	sub    esp,0xc
c00261a1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00261a5:	e8 88 97 fe ff       	call   c000f932 <malloc>
c00261aa:	83 c4 10             	add    esp,0x10
c00261ad:	89 c3                	mov    ebx,eax
c00261af:	83 ec 0c             	sub    esp,0xc
c00261b2:	53                   	push   ebx
c00261b3:	e8 6e ff ff ff       	call   c0026126 <IOAPIC::IOAPIC()>
c00261b8:	83 c4 10             	add    esp,0x10
c00261bb:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00261bf:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00261c4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00261c8:	89 14 85 00 32 03 c0 	mov    DWORD PTR [eax*4-0x3ffcce00],edx
c00261cf:	a1 e0 31 03 c0       	mov    eax,ds:0xc00331e0
c00261d4:	40                   	inc    eax
c00261d5:	a3 e0 31 03 c0       	mov    ds:0xc00331e0,eax
c00261da:	a1 68 ee 02 c0       	mov    eax,ds:0xc002ee68
c00261df:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c00261e5:	83 ec 08             	sub    esp,0x8
c00261e8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00261ec:	50                   	push   eax
c00261ed:	e8 34 e1 fe ff       	call   c0014326 <Device::addChild(Device*)>
c00261f2:	83 c4 10             	add    esp,0x10
c00261f5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00261f9:	8b 00                	mov    eax,DWORD PTR [eax]
c00261fb:	83 c0 08             	add    eax,0x8
c00261fe:	8b 00                	mov    eax,DWORD PTR [eax]
c0026200:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0026205:	6a 00                	push   0x0
c0026207:	6a 00                	push   0x0
c0026209:	52                   	push   edx
c002620a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002620e:	ff d0                	call   eax
c0026210:	83 c4 10             	add    esp,0x10
c0026213:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c0026217:	e9 6b ff ff ff       	jmp    c0026187 <APIC::APIC()+0x39>
c002621c:	c6 05 20 32 03 c0 01 	mov    BYTE PTR ds:0xc0033220,0x1
c0026223:	90                   	nop
c0026224:	83 c4 18             	add    esp,0x18
c0026227:	5b                   	pop    ebx
c0026228:	c3                   	ret    
c0026229:	90                   	nop

c002622a <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c002622a:	55                   	push   ebp
c002622b:	89 e5                	mov    ebp,esp
c002622d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026230:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0026236:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0026239:	72 1d                	jb     c0026258 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c002623b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002623e:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c0026244:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026247:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c002624d:	01 d0                	add    eax,edx
c002624f:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0026252:	73 04                	jae    c0026258 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0026254:	b0 01                	mov    al,0x1
c0026256:	eb 02                	jmp    c002625a <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c0026258:	b0 00                	mov    al,0x0
c002625a:	5d                   	pop    ebp
c002625b:	c3                   	ret    

c002625c <IOAPIC::read(int)>:
c002625c:	55                   	push   ebp
c002625d:	89 e5                	mov    ebp,esp
c002625f:	83 ec 10             	sub    esp,0x10
c0026262:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026265:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c002626b:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c002626e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026271:	0f b6 d0             	movzx  edx,al
c0026274:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0026277:	89 10                	mov    DWORD PTR [eax],edx
c0026279:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002627c:	83 c0 10             	add    eax,0x10
c002627f:	8b 00                	mov    eax,DWORD PTR [eax]
c0026281:	c9                   	leave  
c0026282:	c3                   	ret    
c0026283:	90                   	nop

c0026284 <IOAPIC::open(int, int, void*)>:
c0026284:	55                   	push   ebp
c0026285:	89 e5                	mov    ebp,esp
c0026287:	57                   	push   edi
c0026288:	56                   	push   esi
c0026289:	53                   	push   ebx
c002628a:	83 ec 0c             	sub    esp,0xc
c002628d:	83 ec 0c             	sub    esp,0xc
c0026290:	68 7f db 02 c0       	push   0xc002db7f
c0026295:	e8 57 cc fe ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c002629a:	83 c4 10             	add    esp,0x10
c002629d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00262a0:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00262a3:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00262a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00262ac:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00262b2:	8b 14 85 40 18 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffce7c0]
c00262b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00262bc:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00262c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00262c5:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00262cb:	8b 14 85 c0 18 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffce740]
c00262d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00262d5:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c00262db:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00262de:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c00262e4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00262e7:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00262ed:	0f b6 f8             	movzx  edi,al
c00262f0:	89 d0                	mov    eax,edx
c00262f2:	ba 00 00 00 00       	mov    edx,0x0
c00262f7:	89 c1                	mov    ecx,eax
c00262f9:	80 e5 ff             	and    ch,0xff
c00262fc:	89 cb                	mov    ebx,ecx
c00262fe:	0f b6 f2             	movzx  esi,dl
c0026301:	89 d8                	mov    eax,ebx
c0026303:	89 f2                	mov    edx,esi
c0026305:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0026308:	8d 5f 08             	lea    ebx,[edi+0x8]
c002630b:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c002630f:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0026313:	83 e0 00             	and    eax,0x0
c0026316:	09 d0                	or     eax,edx
c0026318:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c002631c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002631f:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0026325:	8d 50 01             	lea    edx,[eax+0x1]
c0026328:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c002632b:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0026331:	0f b6 d0             	movzx  edx,al
c0026334:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026337:	83 c2 08             	add    edx,0x8
c002633a:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c002633e:	0f b6 c9             	movzx  ecx,cl
c0026341:	81 c9 00 ad de 00    	or     ecx,0xdead00
c0026347:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c002634b:	83 ec 08             	sub    esp,0x8
c002634e:	6a 01                	push   0x1
c0026350:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026353:	e8 04 ff ff ff       	call   c002625c <IOAPIC::read(int)>
c0026358:	83 c4 10             	add    esp,0x10
c002635b:	c1 f8 10             	sar    eax,0x10
c002635e:	0f b6 c0             	movzx  eax,al
c0026361:	8d 50 01             	lea    edx,[eax+0x1]
c0026364:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026367:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c002636d:	b8 00 00 00 00       	mov    eax,0x0
c0026372:	8d 65 f4             	lea    esp,[ebp-0xc]
c0026375:	5b                   	pop    ebx
c0026376:	5e                   	pop    esi
c0026377:	5f                   	pop    edi
c0026378:	5d                   	pop    ebp
c0026379:	c3                   	ret    

c002637a <IOAPIC::write(int, int)>:
c002637a:	55                   	push   ebp
c002637b:	89 e5                	mov    ebp,esp
c002637d:	83 ec 10             	sub    esp,0x10
c0026380:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026383:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0026389:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c002638c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002638f:	0f b6 d0             	movzx  edx,al
c0026392:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0026395:	89 10                	mov    DWORD PTR [eax],edx
c0026397:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002639a:	8d 50 10             	lea    edx,[eax+0x10]
c002639d:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00263a0:	89 02                	mov    DWORD PTR [edx],eax
c00263a2:	90                   	nop
c00263a3:	c9                   	leave  
c00263a4:	c3                   	ret    
c00263a5:	90                   	nop

c00263a6 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c00263a6:	55                   	push   ebp
c00263a7:	89 e5                	mov    ebp,esp
c00263a9:	53                   	push   ebx
c00263aa:	83 ec 2c             	sub    esp,0x2c
c00263ad:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00263b0:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c00263b3:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c00263b6:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c00263b9:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c00263bc:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00263bf:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c00263c2:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c00263c5:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00263c8:	88 d8                	mov    al,bl
c00263ca:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c00263cd:	88 c8                	mov    al,cl
c00263cf:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c00263d2:	88 d0                	mov    al,dl
c00263d4:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c00263d7:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c00263db:	83 c0 08             	add    eax,0x8
c00263de:	01 c0                	add    eax,eax
c00263e0:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00263e3:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c00263e7:	83 c0 08             	add    eax,0x8
c00263ea:	01 c0                	add    eax,eax
c00263ec:	40                   	inc    eax
c00263ed:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00263f0:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00263f3:	50                   	push   eax
c00263f4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00263f7:	e8 60 fe ff ff       	call   c002625c <IOAPIC::read(int)>
c00263fc:	83 c4 08             	add    esp,0x8
c00263ff:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0026402:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c0026409:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c002640c:	c1 e0 18             	shl    eax,0x18
c002640f:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c0026412:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0026415:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0026418:	52                   	push   edx
c0026419:	50                   	push   eax
c002641a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002641d:	e8 58 ff ff ff       	call   c002637a <IOAPIC::write(int, int)>
c0026422:	83 c4 0c             	add    esp,0xc
c0026425:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026428:	50                   	push   eax
c0026429:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002642c:	e8 2b fe ff ff       	call   c002625c <IOAPIC::read(int)>
c0026431:	83 c4 08             	add    esp,0x8
c0026434:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0026437:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c002643e:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c0026445:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c002644c:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0026450:	74 09                	je     c002645b <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c0026452:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c0026459:	eb 07                	jmp    c0026462 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c002645b:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c0026462:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c0026466:	74 09                	je     c0026471 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c0026468:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c002646f:	eb 07                	jmp    c0026478 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c0026471:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c0026478:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c002647f:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c0026483:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c0026486:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0026489:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002648c:	52                   	push   edx
c002648d:	50                   	push   eax
c002648e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026491:	e8 e4 fe ff ff       	call   c002637a <IOAPIC::write(int, int)>
c0026496:	83 c4 0c             	add    esp,0xc
c0026499:	90                   	nop
c002649a:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c002649d:	c9                   	leave  
c002649e:	c3                   	ret    
c002649f:	90                   	nop

c00264a0 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c00264a0:	55                   	push   ebp
c00264a1:	89 e5                	mov    ebp,esp
c00264a3:	57                   	push   edi
c00264a4:	56                   	push   esi
c00264a5:	53                   	push   ebx
c00264a6:	83 ec 2c             	sub    esp,0x2c
c00264a9:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c00264ac:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c00264af:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c00264b3:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
c00264b7:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c00264bb:	74 5a                	je     c0026517 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c00264bd:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c00264c1:	7f 44                	jg     c0026507 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x67>
c00264c3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00264c6:	05 c0 e0 02 c0       	add    eax,0xc002e0c0
c00264cb:	8a 00                	mov    al,BYTE PTR [eax]
c00264cd:	0f b6 c0             	movzx  eax,al
c00264d0:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c00264d3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00264d6:	66 8b 84 00 e0 17 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffce820]
c00264de:	0f b7 c0             	movzx  eax,ax
c00264e1:	83 e0 02             	and    eax,0x2
c00264e4:	85 c0                	test   eax,eax
c00264e6:	74 04                	je     c00264ec <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x4c>
c00264e8:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
c00264ec:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00264ef:	66 8b 84 00 e0 17 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffce820]
c00264f7:	0f b7 c0             	movzx  eax,ax
c00264fa:	83 e0 08             	and    eax,0x8
c00264fd:	85 c0                	test   eax,eax
c00264ff:	74 16                	je     c0026517 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0026501:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0026505:	eb 10                	jmp    c0026517 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0026507:	83 ec 0c             	sub    esp,0xc
c002650a:	68 90 db 02 c0       	push   0xc002db90
c002650f:	e8 9d 43 ff ff       	call   c001a8b1 <Krnl::panic(char const*)>
c0026514:	83 c4 10             	add    esp,0x10
c0026517:	c6 45 e5 00          	mov    BYTE PTR [ebp-0x1b],0x0
c002651b:	a1 e0 31 03 c0       	mov    eax,ds:0xc00331e0
c0026520:	83 ec 08             	sub    esp,0x8
c0026523:	50                   	push   eax
c0026524:	68 c8 db 02 c0       	push   0xc002dbc8
c0026529:	e8 c3 c9 fe ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c002652e:	83 c4 10             	add    esp,0x10
c0026531:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
c0026538:	a1 e0 31 03 c0       	mov    eax,ds:0xc00331e0
c002653d:	39 45 e0             	cmp    DWORD PTR [ebp-0x20],eax
c0026540:	7d 67                	jge    c00265a9 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0026542:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0026545:	8b 04 85 00 32 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcce00]
c002654c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002654f:	83 ec 08             	sub    esp,0x8
c0026552:	52                   	push   edx
c0026553:	50                   	push   eax
c0026554:	e8 d1 fc ff ff       	call   c002622a <IOAPIC::handlesGSIWithNumber(unsigned int)>
c0026559:	83 c4 10             	add    esp,0x10
c002655c:	84 c0                	test   al,al
c002655e:	74 44                	je     c00265a4 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x104>
c0026560:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0026563:	8b 1c 85 00 32 03 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffcce00]
c002656a:	0f b6 45 e6          	movzx  eax,BYTE PTR [ebp-0x1a]
c002656e:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0026571:	0f b6 7d e7          	movzx  edi,BYTE PTR [ebp-0x19]
c0026575:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026578:	83 c0 20             	add    eax,0x20
c002657b:	0f b6 f0             	movzx  esi,al
c002657e:	b8 00 00 00 00       	mov    eax,0x0
c0026583:	99                   	cdq    
c0026584:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0026587:	0f b6 c9             	movzx  ecx,cl
c002658a:	83 ec 04             	sub    esp,0x4
c002658d:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c0026590:	57                   	push   edi
c0026591:	56                   	push   esi
c0026592:	52                   	push   edx
c0026593:	50                   	push   eax
c0026594:	51                   	push   ecx
c0026595:	53                   	push   ebx
c0026596:	e8 0b fe ff ff       	call   c00263a6 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c002659b:	83 c4 20             	add    esp,0x20
c002659e:	c6 45 e5 01          	mov    BYTE PTR [ebp-0x1b],0x1
c00265a2:	eb 05                	jmp    c00265a9 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c00265a4:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
c00265a7:	eb 8f                	jmp    c0026538 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x98>
c00265a9:	8a 45 e5             	mov    al,BYTE PTR [ebp-0x1b]
c00265ac:	83 f0 01             	xor    eax,0x1
c00265af:	84 c0                	test   al,al
c00265b1:	74 10                	je     c00265c3 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x123>
c00265b3:	83 ec 0c             	sub    esp,0xc
c00265b6:	68 df db 02 c0       	push   0xc002dbdf
c00265bb:	e8 f1 42 ff ff       	call   c001a8b1 <Krnl::panic(char const*)>
c00265c0:	83 c4 10             	add    esp,0x10
c00265c3:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c00265c7:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c00265ce:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
c00265d2:	7f 65                	jg     c0026639 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x199>
c00265d4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00265d7:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00265da:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00265e1:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00265e4:	01 ca                	add    edx,ecx
c00265e6:	83 c2 54             	add    edx,0x54
c00265e9:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c00265ed:	85 c0                	test   eax,eax
c00265ef:	75 43                	jne    c0026634 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x194>
c00265f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00265f4:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00265f7:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00265fe:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0026601:	01 ca                	add    edx,ecx
c0026603:	8d 4a 54             	lea    ecx,[edx+0x54]
c0026606:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0026609:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c002660d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026610:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0026613:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c002661a:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c002661d:	01 ca                	add    edx,ecx
c002661f:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c0026625:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0026628:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c002662c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002662f:	83 e8 20             	sub    eax,0x20
c0026632:	eb 1a                	jmp    c002664e <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1ae>
c0026634:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
c0026637:	eb 95                	jmp    c00265ce <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12e>
c0026639:	83 ec 0c             	sub    esp,0xc
c002663c:	68 ec db 02 c0       	push   0xc002dbec
c0026641:	e8 6b 42 ff ff       	call   c001a8b1 <Krnl::panic(char const*)>
c0026646:	83 c4 10             	add    esp,0x10
c0026649:	b8 ff ff ff ff       	mov    eax,0xffffffff
c002664e:	8d 65 f4             	lea    esp,[ebp-0xc]
c0026651:	5b                   	pop    ebx
c0026652:	5e                   	pop    esi
c0026653:	5f                   	pop    edi
c0026654:	5d                   	pop    ebp
c0026655:	c3                   	ret    

c0026656 <PIC::disable()>:
c0026656:	55                   	push   ebp
c0026657:	89 e5                	mov    ebp,esp
c0026659:	83 ec 10             	sub    esp,0x10
c002665c:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c0026662:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c0026666:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0026669:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c002666d:	ee                   	out    dx,al
c002666e:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c0026674:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c0026678:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c002667b:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c002667f:	ee                   	out    dx,al
c0026680:	90                   	nop
c0026681:	c9                   	leave  
c0026682:	c3                   	ret    
c0026683:	90                   	nop

c0026684 <PIC::close(int, int, void*)>:
c0026684:	55                   	push   ebp
c0026685:	89 e5                	mov    ebp,esp
c0026687:	83 ec 08             	sub    esp,0x8
c002668a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002668d:	8b 00                	mov    eax,DWORD PTR [eax]
c002668f:	83 c0 3c             	add    eax,0x3c
c0026692:	8b 00                	mov    eax,DWORD PTR [eax]
c0026694:	83 ec 0c             	sub    esp,0xc
c0026697:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002669a:	ff d0                	call   eax
c002669c:	83 c4 10             	add    esp,0x10
c002669f:	b8 00 00 00 00       	mov    eax,0x0
c00266a4:	c9                   	leave  
c00266a5:	c3                   	ret    

c00266a6 <PIC::PIC()>:
c00266a6:	83 ec 0c             	sub    esp,0xc
c00266a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00266ad:	83 ec 08             	sub    esp,0x8
c00266b0:	68 98 dc 02 c0       	push   0xc002dc98
c00266b5:	50                   	push   eax
c00266b6:	e8 d5 e5 fe ff       	call   c0014c90 <InterruptController::InterruptController(char const*)>
c00266bb:	83 c4 10             	add    esp,0x10
c00266be:	ba c4 dc 02 c0       	mov    edx,0xc002dcc4
c00266c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00266c7:	89 10                	mov    DWORD PTR [eax],edx
c00266c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00266cd:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00266d3:	0f b6 d0             	movzx  edx,al
c00266d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00266da:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c00266e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00266e5:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00266eb:	0f b6 d0             	movzx  edx,al
c00266ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00266f2:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c00266f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00266fb:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026701:	8d 50 01             	lea    edx,[eax+0x1]
c0026704:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026708:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c002670e:	0f b6 d0             	movzx  edx,al
c0026711:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026715:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0026719:	83 e1 3f             	and    ecx,0x3f
c002671c:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0026720:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026724:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002672a:	0f b6 d0             	movzx  edx,al
c002672d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026731:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c0026738:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002673c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026742:	0f b6 d0             	movzx  edx,al
c0026745:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026749:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c002674e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026752:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026758:	8d 50 01             	lea    edx,[eax+0x1]
c002675b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002675f:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0026765:	0f b6 d0             	movzx  edx,al
c0026768:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002676c:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0026770:	83 e1 3f             	and    ecx,0x3f
c0026773:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0026777:	90                   	nop
c0026778:	83 c4 0c             	add    esp,0xc
c002677b:	c3                   	ret    

c002677c <PIC::ioWait()>:
c002677c:	eb 00                	jmp    c002677e <PIC::ioWait()+0x2>
c002677e:	eb 00                	jmp    c0026780 <PIC::ioWait()+0x4>
c0026780:	90                   	nop
c0026781:	c3                   	ret    

c0026782 <PIC::getIRQReg(int)>:
c0026782:	55                   	push   ebp
c0026783:	89 e5                	mov    ebp,esp
c0026785:	83 ec 10             	sub    esp,0x10
c0026788:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002678b:	0f b6 c0             	movzx  eax,al
c002678e:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0026794:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c0026797:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c002679a:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c002679e:	ee                   	out    dx,al
c002679f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00267a2:	0f b6 c0             	movzx  eax,al
c00267a5:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c00267ab:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c00267ae:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c00267b1:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c00267b5:	ee                   	out    dx,al
c00267b6:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c00267bc:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c00267c0:	89 c2                	mov    edx,eax
c00267c2:	ec                   	in     al,dx
c00267c3:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c00267c6:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c00267c9:	0f b6 c0             	movzx  eax,al
c00267cc:	c1 e0 08             	shl    eax,0x8
c00267cf:	89 c1                	mov    ecx,eax
c00267d1:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c00267d7:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c00267db:	89 c2                	mov    edx,eax
c00267dd:	ec                   	in     al,dx
c00267de:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c00267e1:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c00267e4:	0f b6 c0             	movzx  eax,al
c00267e7:	09 c8                	or     eax,ecx
c00267e9:	c9                   	leave  
c00267ea:	c3                   	ret    
c00267eb:	90                   	nop

c00267ec <PIC::eoi(unsigned char)>:
c00267ec:	55                   	push   ebp
c00267ed:	89 e5                	mov    ebp,esp
c00267ef:	83 ec 14             	sub    esp,0x14
c00267f2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00267f5:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c00267f8:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c00267fc:	75 1e                	jne    c002681c <PIC::eoi(unsigned char)+0x30>
c00267fe:	6a 0b                	push   0xb
c0026800:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026803:	e8 7a ff ff ff       	call   c0026782 <PIC::getIRQReg(int)>
c0026808:	83 c4 08             	add    esp,0x8
c002680b:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c002680f:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c0026813:	25 80 00 00 00       	and    eax,0x80
c0026818:	85 c0                	test   eax,eax
c002681a:	74 5f                	je     c002687b <PIC::eoi(unsigned char)+0x8f>
c002681c:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c0026820:	75 2d                	jne    c002684f <PIC::eoi(unsigned char)+0x63>
c0026822:	6a 0b                	push   0xb
c0026824:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026827:	e8 56 ff ff ff       	call   c0026782 <PIC::getIRQReg(int)>
c002682c:	83 c4 08             	add    esp,0x8
c002682f:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c0026833:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0026836:	66 85 c0             	test   ax,ax
c0026839:	78 14                	js     c002684f <PIC::eoi(unsigned char)+0x63>
c002683b:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c0026841:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c0026845:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0026848:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c002684c:	ee                   	out    dx,al
c002684d:	eb 2d                	jmp    c002687c <PIC::eoi(unsigned char)+0x90>
c002684f:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0026853:	76 12                	jbe    c0026867 <PIC::eoi(unsigned char)+0x7b>
c0026855:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c002685b:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c002685f:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0026862:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0026866:	ee                   	out    dx,al
c0026867:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c002686d:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c0026871:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0026874:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0026878:	ee                   	out    dx,al
c0026879:	eb 01                	jmp    c002687c <PIC::eoi(unsigned char)+0x90>
c002687b:	90                   	nop
c002687c:	c9                   	leave  
c002687d:	c3                   	ret    

c002687e <PIC::remap()>:
c002687e:	55                   	push   ebp
c002687f:	89 e5                	mov    ebp,esp
c0026881:	83 ec 48             	sub    esp,0x48
c0026884:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c002688b:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c0026892:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c0026898:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c002689b:	89 c2                	mov    edx,eax
c002689d:	ec                   	in     al,dx
c002689e:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c00268a1:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c00268a4:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c00268a7:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c00268ad:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c00268b0:	89 c2                	mov    edx,eax
c00268b2:	ec                   	in     al,dx
c00268b3:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c00268b6:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c00268b9:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c00268bc:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c00268c2:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c00268c6:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c00268c9:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c00268cc:	ee                   	out    dx,al
c00268cd:	83 ec 0c             	sub    esp,0xc
c00268d0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00268d3:	e8 a4 fe ff ff       	call   c002677c <PIC::ioWait()>
c00268d8:	83 c4 10             	add    esp,0x10
c00268db:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c00268e1:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c00268e5:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c00268e8:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00268eb:	ee                   	out    dx,al
c00268ec:	83 ec 0c             	sub    esp,0xc
c00268ef:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00268f2:	e8 85 fe ff ff       	call   c002677c <PIC::ioWait()>
c00268f7:	83 c4 10             	add    esp,0x10
c00268fa:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00268fd:	0f b6 c0             	movzx  eax,al
c0026900:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c0026906:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c0026909:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c002690c:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c002690f:	ee                   	out    dx,al
c0026910:	83 ec 0c             	sub    esp,0xc
c0026913:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026916:	e8 61 fe ff ff       	call   c002677c <PIC::ioWait()>
c002691b:	83 c4 10             	add    esp,0x10
c002691e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026921:	0f b6 c0             	movzx  eax,al
c0026924:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c002692a:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c002692d:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c0026930:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0026933:	ee                   	out    dx,al
c0026934:	83 ec 0c             	sub    esp,0xc
c0026937:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002693a:	e8 3d fe ff ff       	call   c002677c <PIC::ioWait()>
c002693f:	83 c4 10             	add    esp,0x10
c0026942:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c0026948:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c002694c:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c002694f:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c0026952:	ee                   	out    dx,al
c0026953:	83 ec 0c             	sub    esp,0xc
c0026956:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026959:	e8 1e fe ff ff       	call   c002677c <PIC::ioWait()>
c002695e:	83 c4 10             	add    esp,0x10
c0026961:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c0026967:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c002696b:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c002696e:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0026971:	ee                   	out    dx,al
c0026972:	83 ec 0c             	sub    esp,0xc
c0026975:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026978:	e8 ff fd ff ff       	call   c002677c <PIC::ioWait()>
c002697d:	83 c4 10             	add    esp,0x10
c0026980:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c0026986:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c002698a:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c002698d:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0026990:	ee                   	out    dx,al
c0026991:	83 ec 0c             	sub    esp,0xc
c0026994:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026997:	e8 e0 fd ff ff       	call   c002677c <PIC::ioWait()>
c002699c:	83 c4 10             	add    esp,0x10
c002699f:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c00269a5:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c00269a9:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c00269ac:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c00269af:	ee                   	out    dx,al
c00269b0:	83 ec 0c             	sub    esp,0xc
c00269b3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00269b6:	e8 c1 fd ff ff       	call   c002677c <PIC::ioWait()>
c00269bb:	83 c4 10             	add    esp,0x10
c00269be:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c00269c2:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c00269c8:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c00269cb:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c00269ce:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c00269d1:	ee                   	out    dx,al
c00269d2:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c00269d6:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c00269dc:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c00269df:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c00269e2:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00269e5:	ee                   	out    dx,al
c00269e6:	90                   	nop
c00269e7:	c9                   	leave  
c00269e8:	c3                   	ret    
c00269e9:	90                   	nop

c00269ea <PIC::open(int, int, void*)>:
c00269ea:	55                   	push   ebp
c00269eb:	89 e5                	mov    ebp,esp
c00269ed:	83 ec 18             	sub    esp,0x18
c00269f0:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c00269f6:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c00269fa:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c00269fd:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0026a01:	ee                   	out    dx,al
c0026a02:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c0026a08:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c0026a0c:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0026a0f:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0026a13:	ee                   	out    dx,al
c0026a14:	83 ec 0c             	sub    esp,0xc
c0026a17:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026a1a:	e8 5f fe ff ff       	call   c002687e <PIC::remap()>
c0026a1f:	83 c4 10             	add    esp,0x10
c0026a22:	b8 00 00 00 00       	mov    eax,0x0
c0026a27:	c9                   	leave  
c0026a28:	c3                   	ret    
c0026a29:	90                   	nop

c0026a2a <APICTimer::close(int, int, void*)>:
c0026a2a:	b8 00 00 00 00       	mov    eax,0x0
c0026a2f:	c3                   	ret    

c0026a30 <apicTimerHandler(regs*, void*)>:
c0026a30:	83 ec 0c             	sub    esp,0xc
c0026a33:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026a37:	8b 00                	mov    eax,DWORD PTR [eax]
c0026a39:	99                   	cdq    
c0026a3a:	52                   	push   edx
c0026a3b:	50                   	push   eax
c0026a3c:	6a 00                	push   0x0
c0026a3e:	68 00 ca 9a 3b       	push   0x3b9aca00
c0026a43:	e8 8c 07 00 00       	call   c00271d4 <__udivdi3>
c0026a48:	83 c4 10             	add    esp,0x10
c0026a4b:	83 ec 08             	sub    esp,0x8
c0026a4e:	52                   	push   edx
c0026a4f:	50                   	push   eax
c0026a50:	e8 f0 03 ff ff       	call   c0016e45 <timerHandler(unsigned long long)>
c0026a55:	83 c4 10             	add    esp,0x10
c0026a58:	90                   	nop
c0026a59:	83 c4 0c             	add    esp,0xc
c0026a5c:	c3                   	ret    
c0026a5d:	90                   	nop

c0026a5e <APICTimer::write(int)>:
c0026a5e:	53                   	push   ebx
c0026a5f:	83 ec 28             	sub    esp,0x28
c0026a62:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0026a66:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0026a6a:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0026a70:	a1 68 ee 02 c0       	mov    eax,ds:0xc002ee68
c0026a75:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0026a7b:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0026a81:	83 ec 0c             	sub    esp,0xc
c0026a84:	50                   	push   eax
c0026a85:	e8 de f4 ff ff       	call   c0025f68 <APIC::getBase()>
c0026a8a:	83 c4 10             	add    esp,0x10
c0026a8d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0026a91:	a1 f0 f4 02 c0       	mov    eax,ds:0xc002f4f0
c0026a96:	8b 15 f4 f4 02 c0    	mov    edx,DWORD PTR ds:0xc002f4f4
c0026a9c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0026aa0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0026aa4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026aa8:	05 e0 03 00 00       	add    eax,0x3e0
c0026aad:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0026ab3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026ab7:	05 80 03 00 00       	add    eax,0x380
c0026abc:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0026ac2:	fb                   	sti    
c0026ac3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026ac7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0026acb:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c0026ad0:	83 d2 00             	adc    edx,0x0
c0026ad3:	89 c1                	mov    ecx,eax
c0026ad5:	89 d3                	mov    ebx,edx
c0026ad7:	a1 f0 f4 02 c0       	mov    eax,ds:0xc002f4f0
c0026adc:	8b 15 f4 f4 02 c0    	mov    edx,DWORD PTR ds:0xc002f4f4
c0026ae2:	39 c8                	cmp    eax,ecx
c0026ae4:	89 d0                	mov    eax,edx
c0026ae6:	19 d8                	sbb    eax,ebx
c0026ae8:	73 02                	jae    c0026aec <APICTimer::write(int)+0x8e>
c0026aea:	eb d7                	jmp    c0026ac3 <APICTimer::write(int)+0x65>
c0026aec:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026af0:	05 20 03 00 00       	add    eax,0x320
c0026af5:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c0026afb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026aff:	05 90 03 00 00       	add    eax,0x390
c0026b04:	8b 00                	mov    eax,DWORD PTR [eax]
c0026b06:	f7 d0                	not    eax
c0026b08:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026b0c:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0026b10:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026b14:	ba 00 00 00 00       	mov    edx,0x0
c0026b19:	f7 f3                	div    ebx
c0026b1b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0026b1f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0026b23:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0026b29:	0d 00 00 02 00       	or     eax,0x20000
c0026b2e:	89 c2                	mov    edx,eax
c0026b30:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026b34:	05 20 03 00 00       	add    eax,0x320
c0026b39:	89 10                	mov    DWORD PTR [eax],edx
c0026b3b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026b3f:	05 e0 03 00 00       	add    eax,0x3e0
c0026b44:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0026b4a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026b4e:	05 80 03 00 00       	add    eax,0x380
c0026b53:	89 c2                	mov    edx,eax
c0026b55:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0026b59:	89 02                	mov    DWORD PTR [edx],eax
c0026b5b:	90                   	nop
c0026b5c:	83 c4 28             	add    esp,0x28
c0026b5f:	5b                   	pop    ebx
c0026b60:	c3                   	ret    
c0026b61:	90                   	nop

c0026b62 <APICTimer::open(int, int, void*)>:
c0026b62:	57                   	push   edi
c0026b63:	56                   	push   esi
c0026b64:	53                   	push   ebx
c0026b65:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026b69:	8b 00                	mov    eax,DWORD PTR [eax]
c0026b6b:	83 c0 24             	add    eax,0x24
c0026b6e:	8b 00                	mov    eax,DWORD PTR [eax]
c0026b70:	83 ec 08             	sub    esp,0x8
c0026b73:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026b77:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026b7b:	ff d0                	call   eax
c0026b7d:	83 c4 10             	add    esp,0x10
c0026b80:	a1 68 ee 02 c0       	mov    eax,ds:0xc002ee68
c0026b85:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0026b8b:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0026b91:	83 ec 0c             	sub    esp,0xc
c0026b94:	50                   	push   eax
c0026b95:	e8 ce f3 ff ff       	call   c0025f68 <APIC::getBase()>
c0026b9a:	83 c4 10             	add    esp,0x10
c0026b9d:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c0026ba3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026ba7:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0026bad:	0f b6 f8             	movzx  edi,al
c0026bb0:	89 d0                	mov    eax,edx
c0026bb2:	ba 00 00 00 00       	mov    edx,0x0
c0026bb7:	89 c1                	mov    ecx,eax
c0026bb9:	80 e5 ff             	and    ch,0xff
c0026bbc:	89 cb                	mov    ebx,ecx
c0026bbe:	0f b6 f2             	movzx  esi,dl
c0026bc1:	89 d8                	mov    eax,ebx
c0026bc3:	89 f2                	mov    edx,esi
c0026bc5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026bc9:	8d 5f 08             	lea    ebx,[edi+0x8]
c0026bcc:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0026bd0:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0026bd4:	83 e0 00             	and    eax,0x0
c0026bd7:	09 d0                	or     eax,edx
c0026bd9:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0026bdd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026be1:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0026be7:	8d 50 01             	lea    edx,[eax+0x1]
c0026bea:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026bee:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0026bf4:	0f b6 d0             	movzx  edx,al
c0026bf7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026bfb:	83 c2 08             	add    edx,0x8
c0026bfe:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0026c02:	0f b6 c9             	movzx  ecx,cl
c0026c05:	81 c9 00 00 01 00    	or     ecx,0x10000
c0026c0b:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0026c0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026c13:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0026c17:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0026c1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026c21:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0026c25:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c0026c2b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0026c2f:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0026c35:	83 ec 0c             	sub    esp,0xc
c0026c38:	51                   	push   ecx
c0026c39:	6a 01                	push   0x1
c0026c3b:	68 30 6a 02 c0       	push   0xc0026a30
c0026c40:	52                   	push   edx
c0026c41:	50                   	push   eax
c0026c42:	e8 63 d6 fe ff       	call   c00142aa <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0026c47:	83 c4 20             	add    esp,0x20
c0026c4a:	89 c2                	mov    edx,eax
c0026c4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026c50:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0026c56:	b8 00 00 00 00       	mov    eax,0x0
c0026c5b:	5b                   	pop    ebx
c0026c5c:	5e                   	pop    esi
c0026c5d:	5f                   	pop    edi
c0026c5e:	c3                   	ret    
c0026c5f:	90                   	nop

c0026c60 <APICTimer::APICTimer()>:
c0026c60:	83 ec 0c             	sub    esp,0xc
c0026c63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026c67:	83 ec 08             	sub    esp,0x8
c0026c6a:	68 04 dd 02 c0       	push   0xc002dd04
c0026c6f:	50                   	push   eax
c0026c70:	e8 41 01 ff ff       	call   c0016db6 <Timer::Timer(char const*)>
c0026c75:	83 c4 10             	add    esp,0x10
c0026c78:	ba 18 dd 02 c0       	mov    edx,0xc002dd18
c0026c7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026c81:	89 10                	mov    DWORD PTR [eax],edx
c0026c83:	90                   	nop
c0026c84:	83 c4 0c             	add    esp,0xc
c0026c87:	c3                   	ret    

c0026c88 <PIT::write(int)>:
c0026c88:	83 ec 10             	sub    esp,0x10
c0026c8b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026c8f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0026c93:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0026c99:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0026c9d:	a3 24 32 03 c0       	mov    ds:0xc0033224,eax
c0026ca2:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0026ca7:	99                   	cdq    
c0026ca8:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c0026cac:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026cb0:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c0026cb7:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c0026cbc:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0026cc0:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0026cc5:	ee                   	out    dx,al
c0026cc6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026cca:	0f b6 c0             	movzx  eax,al
c0026ccd:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c0026cd4:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0026cd8:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0026cdc:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0026ce1:	ee                   	out    dx,al
c0026ce2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026ce6:	c1 f8 08             	sar    eax,0x8
c0026ce9:	0f b6 c0             	movzx  eax,al
c0026cec:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c0026cf3:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0026cf7:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0026cfb:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0026d00:	ee                   	out    dx,al
c0026d01:	90                   	nop
c0026d02:	83 c4 10             	add    esp,0x10
c0026d05:	c3                   	ret    

c0026d06 <pitHandler(regs*, void*)>:
c0026d06:	83 ec 0c             	sub    esp,0xc
c0026d09:	a1 24 32 03 c0       	mov    eax,ds:0xc0033224
c0026d0e:	99                   	cdq    
c0026d0f:	52                   	push   edx
c0026d10:	50                   	push   eax
c0026d11:	6a 00                	push   0x0
c0026d13:	68 00 ca 9a 3b       	push   0x3b9aca00
c0026d18:	e8 b7 04 00 00       	call   c00271d4 <__udivdi3>
c0026d1d:	83 c4 10             	add    esp,0x10
c0026d20:	83 ec 08             	sub    esp,0x8
c0026d23:	52                   	push   edx
c0026d24:	50                   	push   eax
c0026d25:	e8 1b 01 ff ff       	call   c0016e45 <timerHandler(unsigned long long)>
c0026d2a:	83 c4 10             	add    esp,0x10
c0026d2d:	90                   	nop
c0026d2e:	83 c4 0c             	add    esp,0xc
c0026d31:	c3                   	ret    

c0026d32 <PIT::open(int, int, void*)>:
c0026d32:	83 ec 0c             	sub    esp,0xc
c0026d35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026d39:	8b 00                	mov    eax,DWORD PTR [eax]
c0026d3b:	83 c0 24             	add    eax,0x24
c0026d3e:	8b 00                	mov    eax,DWORD PTR [eax]
c0026d40:	83 ec 08             	sub    esp,0x8
c0026d43:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026d47:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026d4b:	ff d0                	call   eax
c0026d4d:	83 c4 10             	add    esp,0x10
c0026d50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026d54:	83 ec 0c             	sub    esp,0xc
c0026d57:	6a 00                	push   0x0
c0026d59:	6a 01                	push   0x1
c0026d5b:	68 06 6d 02 c0       	push   0xc0026d06
c0026d60:	6a 00                	push   0x0
c0026d62:	50                   	push   eax
c0026d63:	e8 42 d5 fe ff       	call   c00142aa <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0026d68:	83 c4 20             	add    esp,0x20
c0026d6b:	89 c2                	mov    edx,eax
c0026d6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026d71:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0026d77:	b8 00 00 00 00       	mov    eax,0x0
c0026d7c:	83 c4 0c             	add    esp,0xc
c0026d7f:	c3                   	ret    

c0026d80 <PIT::close(int, int, void*)>:
c0026d80:	83 ec 0c             	sub    esp,0xc
c0026d83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026d87:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0026d91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026d95:	6a 01                	push   0x1
c0026d97:	68 06 6d 02 c0       	push   0xc0026d06
c0026d9c:	6a 00                	push   0x0
c0026d9e:	50                   	push   eax
c0026d9f:	e8 44 d5 fe ff       	call   c00142e8 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c0026da4:	83 c4 10             	add    esp,0x10
c0026da7:	b8 00 00 00 00       	mov    eax,0x0
c0026dac:	83 c4 0c             	add    esp,0xc
c0026daf:	c3                   	ret    

c0026db0 <PIT::PIT()>:
c0026db0:	83 ec 0c             	sub    esp,0xc
c0026db3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026db7:	83 ec 08             	sub    esp,0x8
c0026dba:	68 40 dd 02 c0       	push   0xc002dd40
c0026dbf:	50                   	push   eax
c0026dc0:	e8 f1 ff fe ff       	call   c0016db6 <Timer::Timer(char const*)>
c0026dc5:	83 c4 10             	add    esp,0x10
c0026dc8:	ba 68 dd 02 c0       	mov    edx,0xc002dd68
c0026dcd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026dd1:	89 10                	mov    DWORD PTR [eax],edx
c0026dd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026dd7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026ddd:	0f b6 d0             	movzx  edx,al
c0026de0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026de4:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c0026deb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026def:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026df5:	0f b6 d0             	movzx  edx,al
c0026df8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026dfc:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c0026e01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026e05:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026e0b:	8d 50 01             	lea    edx,[eax+0x1]
c0026e0e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026e12:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0026e18:	0f b6 d0             	movzx  edx,al
c0026e1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026e1f:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0026e23:	83 e1 3f             	and    ecx,0x3f
c0026e26:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0026e2a:	90                   	nop
c0026e2b:	83 c4 0c             	add    esp,0xc
c0026e2e:	c3                   	ret    
c0026e2f:	90                   	nop

c0026e30 <avxDetect>:
c0026e30:	b8 00 00 00 00       	mov    eax,0x0
c0026e35:	c3                   	ret    

c0026e36 <avxSave>:
c0026e36:	c3                   	ret    

c0026e37 <avxLoad>:
c0026e37:	c3                   	ret    

c0026e38 <avxInit>:
c0026e38:	c3                   	ret    

c0026e39 <avxClose>:
c0026e39:	c3                   	ret    

c0026e3a <wouldSheSayYes>:
c0026e3a:	c3                   	ret    
c0026e3b:	49                   	dec    ecx
c0026e3c:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c0026e40:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c0026e44:	75 20                	jne    c0026e66 <sseDetect.noSSE+0x1>
c0026e46:	4e                   	dec    esi
c0026e47:	79 61                	jns    c0026eaa <x87Detect+0x14>
c0026e49:	68 2e 2e 2e 00       	push   0x2e2e2e
c0026e4e:	66 90                	xchg   ax,ax

c0026e50 <absolutelyNoChanceInHell>:
c0026e50:	b8 01 00 00 00       	mov    eax,0x1
c0026e55:	0f a2                	cpuid  
c0026e57:	f7 c2 00 00 00 02    	test   edx,0x2000000
c0026e5d:	74 06                	je     c0026e65 <sseDetect.noSSE>
c0026e5f:	b8 01 00 00 00       	mov    eax,0x1
c0026e64:	c3                   	ret    

c0026e65 <sseDetect.noSSE>:
c0026e65:	31 c0                	xor    eax,eax
c0026e67:	c3                   	ret    

c0026e68 <sseSave>:
c0026e68:	0f ae 44 24 04       	fxsave [esp+0x4]
c0026e6d:	c3                   	ret    

c0026e6e <sseLoad>:
c0026e6e:	0f ae 4c 24 04       	fxrstor [esp+0x4]
c0026e73:	c3                   	ret    

c0026e74 <sseInit>:
c0026e74:	e8 49 00 00 00       	call   c0026ec2 <x87Init>
c0026e79:	0f 20 e0             	mov    eax,cr4
c0026e7c:	66 0d 00 06          	or     ax,0x600
c0026e80:	0f 22 e0             	mov    cr4,eax
c0026e83:	c3                   	ret    

c0026e84 <sseClose>:
c0026e84:	c3                   	ret    
c0026e85:	66 90                	xchg   ax,ax
c0026e87:	66 90                	xchg   ax,ax
c0026e89:	66 90                	xchg   ax,ax
c0026e8b:	66 90                	xchg   ax,ax
c0026e8d:	66 90                	xchg   ax,ax
c0026e8f:	90                   	nop

c0026e90 <value_37F>:
c0026e90:	7f 03                	jg     c0026e95 <value_37A+0x1>

c0026e92 <value_37E>:
c0026e92:	7e 03                	jle    c0026e97 <x87Detect+0x1>

c0026e94 <value_37A>:
c0026e94:	7a 03                	jp     c0026e99 <x87Detect+0x3>

c0026e96 <x87Detect>:
c0026e96:	b8 01 00 00 00       	mov    eax,0x1
c0026e9b:	0f a2                	cpuid  
c0026e9d:	f7 c2 01 00 00 00    	test   edx,0x1
c0026ea3:	74 06                	je     c0026eab <x87Detect.nox87>
c0026ea5:	b8 01 00 00 00       	mov    eax,0x1
c0026eaa:	c3                   	ret    

c0026eab <x87Detect.nox87>:
c0026eab:	b8 00 00 00 00       	mov    eax,0x0
c0026eb0:	c3                   	ret    

c0026eb1 <x87Save>:
c0026eb1:	55                   	push   ebp
c0026eb2:	89 e5                	mov    ebp,esp
c0026eb4:	9b dd 75 08          	fsave  [ebp+0x8]
c0026eb8:	c9                   	leave  
c0026eb9:	c3                   	ret    

c0026eba <x87Load>:
c0026eba:	55                   	push   ebp
c0026ebb:	89 e5                	mov    ebp,esp
c0026ebd:	dd 65 08             	frstor [ebp+0x8]
c0026ec0:	c9                   	leave  
c0026ec1:	c3                   	ret    

c0026ec2 <x87Init>:
c0026ec2:	9b db e3             	finit  
c0026ec5:	0f 20 c0             	mov    eax,cr0
c0026ec8:	66 25 fb ff          	and    ax,0xfffb
c0026ecc:	66 0d 22 00          	or     ax,0x22
c0026ed0:	0f 22 c0             	mov    cr0,eax
c0026ed3:	0f 06                	clts   
c0026ed5:	d9 2d 94 6e 02 c0    	fldcw  WORD PTR ds:0xc0026e94
c0026edb:	c3                   	ret    

c0026edc <x87Close>:
c0026edc:	c3                   	ret    
c0026edd:	66 90                	xchg   ax,ax
c0026edf:	90                   	nop

c0026ee0 <__do_global_ctors_aux>:
c0026ee0:	a1 18 9b 02 c0       	mov    eax,ds:0xc0029b18
c0026ee5:	83 f8 ff             	cmp    eax,0xffffffff
c0026ee8:	74 1a                	je     c0026f04 <__do_global_ctors_aux+0x24>
c0026eea:	55                   	push   ebp
c0026eeb:	89 e5                	mov    ebp,esp
c0026eed:	53                   	push   ebx
c0026eee:	52                   	push   edx
c0026eef:	bb 18 9b 02 c0       	mov    ebx,0xc0029b18
c0026ef4:	ff d0                	call   eax
c0026ef6:	83 eb 04             	sub    ebx,0x4
c0026ef9:	8b 03                	mov    eax,DWORD PTR [ebx]
c0026efb:	83 f8 ff             	cmp    eax,0xffffffff
c0026efe:	75 f4                	jne    c0026ef4 <__do_global_ctors_aux+0x14>
c0026f00:	58                   	pop    eax
c0026f01:	5b                   	pop    ebx
c0026f02:	5d                   	pop    ebp
c0026f03:	c3                   	ret    
c0026f04:	c3                   	ret    
c0026f05:	66 90                	xchg   ax,ax
c0026f07:	90                   	nop

c0026f08 <__divdi3>:
c0026f08:	55                   	push   ebp
c0026f09:	57                   	push   edi
c0026f0a:	56                   	push   esi
c0026f0b:	53                   	push   ebx
c0026f0c:	83 ec 1c             	sub    esp,0x1c
c0026f0f:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0026f13:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0026f17:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0026f1a:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0026f1e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0026f22:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0026f26:	85 db                	test   ebx,ebx
c0026f28:	0f 88 8e 00 00 00    	js     c0026fbc <__divdi3+0xb4>
c0026f2e:	89 dd                	mov    ebp,ebx
c0026f30:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0026f38:	89 d3                	mov    ebx,edx
c0026f3a:	85 d2                	test   edx,edx
c0026f3c:	79 0d                	jns    c0026f4b <__divdi3+0x43>
c0026f3e:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c0026f42:	f7 d8                	neg    eax
c0026f44:	83 d2 00             	adc    edx,0x0
c0026f47:	f7 da                	neg    edx
c0026f49:	89 d3                	mov    ebx,edx
c0026f4b:	89 c7                	mov    edi,eax
c0026f4d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0026f50:	85 db                	test   ebx,ebx
c0026f52:	75 48                	jne    c0026f9c <__divdi3+0x94>
c0026f54:	39 ef                	cmp    edi,ebp
c0026f56:	76 24                	jbe    c0026f7c <__divdi3+0x74>
c0026f58:	89 ea                	mov    edx,ebp
c0026f5a:	f7 f7                	div    edi
c0026f5c:	89 c1                	mov    ecx,eax
c0026f5e:	31 f6                	xor    esi,esi
c0026f60:	89 c8                	mov    eax,ecx
c0026f62:	89 f2                	mov    edx,esi
c0026f64:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026f68:	85 c9                	test   ecx,ecx
c0026f6a:	74 07                	je     c0026f73 <__divdi3+0x6b>
c0026f6c:	f7 d8                	neg    eax
c0026f6e:	83 d2 00             	adc    edx,0x0
c0026f71:	f7 da                	neg    edx
c0026f73:	83 c4 1c             	add    esp,0x1c
c0026f76:	5b                   	pop    ebx
c0026f77:	5e                   	pop    esi
c0026f78:	5f                   	pop    edi
c0026f79:	5d                   	pop    ebp
c0026f7a:	c3                   	ret    
c0026f7b:	90                   	nop
c0026f7c:	85 ff                	test   edi,edi
c0026f7e:	75 0b                	jne    c0026f8b <__divdi3+0x83>
c0026f80:	b8 01 00 00 00       	mov    eax,0x1
c0026f85:	31 d2                	xor    edx,edx
c0026f87:	f7 f3                	div    ebx
c0026f89:	89 c7                	mov    edi,eax
c0026f8b:	31 d2                	xor    edx,edx
c0026f8d:	89 e8                	mov    eax,ebp
c0026f8f:	f7 f7                	div    edi
c0026f91:	89 c6                	mov    esi,eax
c0026f93:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0026f96:	f7 f7                	div    edi
c0026f98:	89 c1                	mov    ecx,eax
c0026f9a:	eb c4                	jmp    c0026f60 <__divdi3+0x58>
c0026f9c:	39 eb                	cmp    ebx,ebp
c0026f9e:	77 3c                	ja     c0026fdc <__divdi3+0xd4>
c0026fa0:	0f bd f3             	bsr    esi,ebx
c0026fa3:	83 f6 1f             	xor    esi,0x1f
c0026fa6:	75 40                	jne    c0026fe8 <__divdi3+0xe0>
c0026fa8:	39 eb                	cmp    ebx,ebp
c0026faa:	72 09                	jb     c0026fb5 <__divdi3+0xad>
c0026fac:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c0026faf:	0f 87 97 00 00 00    	ja     c002704c <__divdi3+0x144>
c0026fb5:	b9 01 00 00 00       	mov    ecx,0x1
c0026fba:	eb a4                	jmp    c0026f60 <__divdi3+0x58>
c0026fbc:	f7 d9                	neg    ecx
c0026fbe:	83 d3 00             	adc    ebx,0x0
c0026fc1:	f7 db                	neg    ebx
c0026fc3:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0026fc6:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0026fca:	89 dd                	mov    ebp,ebx
c0026fcc:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c0026fd4:	e9 5f ff ff ff       	jmp    c0026f38 <__divdi3+0x30>
c0026fd9:	8d 76 00             	lea    esi,[esi+0x0]
c0026fdc:	31 f6                	xor    esi,esi
c0026fde:	31 c9                	xor    ecx,ecx
c0026fe0:	e9 7b ff ff ff       	jmp    c0026f60 <__divdi3+0x58>
c0026fe5:	8d 76 00             	lea    esi,[esi+0x0]
c0026fe8:	b8 20 00 00 00       	mov    eax,0x20
c0026fed:	29 f0                	sub    eax,esi
c0026fef:	89 f1                	mov    ecx,esi
c0026ff1:	d3 e3                	shl    ebx,cl
c0026ff3:	89 fa                	mov    edx,edi
c0026ff5:	88 c1                	mov    cl,al
c0026ff7:	d3 ea                	shr    edx,cl
c0026ff9:	09 da                	or     edx,ebx
c0026ffb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0026fff:	89 f1                	mov    ecx,esi
c0027001:	d3 e7                	shl    edi,cl
c0027003:	89 eb                	mov    ebx,ebp
c0027005:	88 c1                	mov    cl,al
c0027007:	d3 eb                	shr    ebx,cl
c0027009:	89 f1                	mov    ecx,esi
c002700b:	d3 e5                	shl    ebp,cl
c002700d:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0027010:	88 c1                	mov    cl,al
c0027012:	d3 ea                	shr    edx,cl
c0027014:	09 d5                	or     ebp,edx
c0027016:	89 e8                	mov    eax,ebp
c0027018:	89 da                	mov    edx,ebx
c002701a:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c002701e:	89 d3                	mov    ebx,edx
c0027020:	89 c5                	mov    ebp,eax
c0027022:	f7 e7                	mul    edi
c0027024:	39 d3                	cmp    ebx,edx
c0027026:	72 18                	jb     c0027040 <__divdi3+0x138>
c0027028:	74 0a                	je     c0027034 <__divdi3+0x12c>
c002702a:	89 e9                	mov    ecx,ebp
c002702c:	31 f6                	xor    esi,esi
c002702e:	e9 2d ff ff ff       	jmp    c0026f60 <__divdi3+0x58>
c0027033:	90                   	nop
c0027034:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0027037:	89 f1                	mov    ecx,esi
c0027039:	d3 e7                	shl    edi,cl
c002703b:	39 c7                	cmp    edi,eax
c002703d:	73 eb                	jae    c002702a <__divdi3+0x122>
c002703f:	90                   	nop
c0027040:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0027043:	31 f6                	xor    esi,esi
c0027045:	e9 16 ff ff ff       	jmp    c0026f60 <__divdi3+0x58>
c002704a:	66 90                	xchg   ax,ax
c002704c:	31 c9                	xor    ecx,ecx
c002704e:	e9 0d ff ff ff       	jmp    c0026f60 <__divdi3+0x58>
c0027053:	90                   	nop

c0027054 <__moddi3>:
c0027054:	55                   	push   ebp
c0027055:	57                   	push   edi
c0027056:	56                   	push   esi
c0027057:	53                   	push   ebx
c0027058:	83 ec 2c             	sub    esp,0x2c
c002705b:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c002705f:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0027063:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0027067:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c002706b:	85 db                	test   ebx,ebx
c002706d:	0f 88 85 00 00 00    	js     c00270f8 <__moddi3+0xa4>
c0027073:	89 de                	mov    esi,ebx
c0027075:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c002707d:	89 d7                	mov    edi,edx
c002707f:	85 d2                	test   edx,edx
c0027081:	79 09                	jns    c002708c <__moddi3+0x38>
c0027083:	f7 d8                	neg    eax
c0027085:	83 d2 00             	adc    edx,0x0
c0027088:	f7 da                	neg    edx
c002708a:	89 d7                	mov    edi,edx
c002708c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0027090:	89 cd                	mov    ebp,ecx
c0027092:	85 ff                	test   edi,edi
c0027094:	75 52                	jne    c00270e8 <__moddi3+0x94>
c0027096:	89 c3                	mov    ebx,eax
c0027098:	39 f0                	cmp    eax,esi
c002709a:	76 24                	jbe    c00270c0 <__moddi3+0x6c>
c002709c:	89 c8                	mov    eax,ecx
c002709e:	89 f2                	mov    edx,esi
c00270a0:	f7 f3                	div    ebx
c00270a2:	89 d6                	mov    esi,edx
c00270a4:	89 f0                	mov    eax,esi
c00270a6:	31 d2                	xor    edx,edx
c00270a8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00270ac:	85 c9                	test   ecx,ecx
c00270ae:	74 07                	je     c00270b7 <__moddi3+0x63>
c00270b0:	f7 d8                	neg    eax
c00270b2:	83 d2 00             	adc    edx,0x0
c00270b5:	f7 da                	neg    edx
c00270b7:	83 c4 2c             	add    esp,0x2c
c00270ba:	5b                   	pop    ebx
c00270bb:	5e                   	pop    esi
c00270bc:	5f                   	pop    edi
c00270bd:	5d                   	pop    ebp
c00270be:	c3                   	ret    
c00270bf:	90                   	nop
c00270c0:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00270c4:	85 db                	test   ebx,ebx
c00270c6:	75 0d                	jne    c00270d5 <__moddi3+0x81>
c00270c8:	b8 01 00 00 00       	mov    eax,0x1
c00270cd:	31 d2                	xor    edx,edx
c00270cf:	f7 f7                	div    edi
c00270d1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00270d5:	89 f0                	mov    eax,esi
c00270d7:	31 d2                	xor    edx,edx
c00270d9:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00270dd:	f7 f7                	div    edi
c00270df:	89 e8                	mov    eax,ebp
c00270e1:	f7 f7                	div    edi
c00270e3:	89 d6                	mov    esi,edx
c00270e5:	eb bd                	jmp    c00270a4 <__moddi3+0x50>
c00270e7:	90                   	nop
c00270e8:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00270ec:	39 f7                	cmp    edi,esi
c00270ee:	76 20                	jbe    c0027110 <__moddi3+0xbc>
c00270f0:	89 c8                	mov    eax,ecx
c00270f2:	89 f2                	mov    edx,esi
c00270f4:	eb b2                	jmp    c00270a8 <__moddi3+0x54>
c00270f6:	66 90                	xchg   ax,ax
c00270f8:	f7 d9                	neg    ecx
c00270fa:	83 d3 00             	adc    ebx,0x0
c00270fd:	f7 db                	neg    ebx
c00270ff:	89 de                	mov    esi,ebx
c0027101:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c0027109:	e9 6f ff ff ff       	jmp    c002707d <__moddi3+0x29>
c002710e:	66 90                	xchg   ax,ax
c0027110:	0f bd c7             	bsr    eax,edi
c0027113:	83 f0 1f             	xor    eax,0x1f
c0027116:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002711a:	75 24                	jne    c0027140 <__moddi3+0xec>
c002711c:	39 f7                	cmp    edi,esi
c002711e:	72 06                	jb     c0027126 <__moddi3+0xd2>
c0027120:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0027124:	77 0c                	ja     c0027132 <__moddi3+0xde>
c0027126:	89 e9                	mov    ecx,ebp
c0027128:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c002712c:	19 fe                	sbb    esi,edi
c002712e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0027132:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0027136:	89 f2                	mov    edx,esi
c0027138:	e9 6b ff ff ff       	jmp    c00270a8 <__moddi3+0x54>
c002713d:	8d 76 00             	lea    esi,[esi+0x0]
c0027140:	b8 20 00 00 00       	mov    eax,0x20
c0027145:	89 c2                	mov    edx,eax
c0027147:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c002714b:	29 da                	sub    edx,ebx
c002714d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0027151:	88 d9                	mov    cl,bl
c0027153:	d3 e7                	shl    edi,cl
c0027155:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0027159:	88 d1                	mov    cl,dl
c002715b:	d3 e8                	shr    eax,cl
c002715d:	09 c7                	or     edi,eax
c002715f:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c0027163:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0027167:	89 d8                	mov    eax,ebx
c0027169:	88 d9                	mov    cl,bl
c002716b:	d3 e7                	shl    edi,cl
c002716d:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0027171:	89 f3                	mov    ebx,esi
c0027173:	88 d1                	mov    cl,dl
c0027175:	d3 eb                	shr    ebx,cl
c0027177:	89 c7                	mov    edi,eax
c0027179:	88 c1                	mov    cl,al
c002717b:	d3 e6                	shl    esi,cl
c002717d:	89 e8                	mov    eax,ebp
c002717f:	88 d1                	mov    cl,dl
c0027181:	d3 e8                	shr    eax,cl
c0027183:	09 f0                	or     eax,esi
c0027185:	89 f9                	mov    ecx,edi
c0027187:	d3 e5                	shl    ebp,cl
c0027189:	89 da                	mov    edx,ebx
c002718b:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c002718f:	89 d3                	mov    ebx,edx
c0027191:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0027195:	89 c6                	mov    esi,eax
c0027197:	89 d1                	mov    ecx,edx
c0027199:	39 d3                	cmp    ebx,edx
c002719b:	72 27                	jb     c00271c4 <__moddi3+0x170>
c002719d:	74 21                	je     c00271c0 <__moddi3+0x16c>
c002719f:	29 f5                	sub    ebp,esi
c00271a1:	19 cb                	sbb    ebx,ecx
c00271a3:	89 de                	mov    esi,ebx
c00271a5:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c00271a9:	d3 e6                	shl    esi,cl
c00271ab:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00271af:	89 f9                	mov    ecx,edi
c00271b1:	d3 ed                	shr    ebp,cl
c00271b3:	09 ee                	or     esi,ebp
c00271b5:	89 f0                	mov    eax,esi
c00271b7:	d3 eb                	shr    ebx,cl
c00271b9:	89 da                	mov    edx,ebx
c00271bb:	e9 e8 fe ff ff       	jmp    c00270a8 <__moddi3+0x54>
c00271c0:	39 c5                	cmp    ebp,eax
c00271c2:	73 db                	jae    c002719f <__moddi3+0x14b>
c00271c4:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00271c8:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c00271cc:	89 d1                	mov    ecx,edx
c00271ce:	89 c6                	mov    esi,eax
c00271d0:	eb cd                	jmp    c002719f <__moddi3+0x14b>
c00271d2:	66 90                	xchg   ax,ax

c00271d4 <__udivdi3>:
c00271d4:	55                   	push   ebp
c00271d5:	57                   	push   edi
c00271d6:	56                   	push   esi
c00271d7:	53                   	push   ebx
c00271d8:	83 ec 1c             	sub    esp,0x1c
c00271db:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00271df:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00271e3:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00271e7:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00271eb:	85 d2                	test   edx,edx
c00271ed:	75 41                	jne    c0027230 <__udivdi3+0x5c>
c00271ef:	39 f7                	cmp    edi,esi
c00271f1:	76 15                	jbe    c0027208 <__udivdi3+0x34>
c00271f3:	89 e8                	mov    eax,ebp
c00271f5:	89 f2                	mov    edx,esi
c00271f7:	f7 f7                	div    edi
c00271f9:	31 db                	xor    ebx,ebx
c00271fb:	89 da                	mov    edx,ebx
c00271fd:	83 c4 1c             	add    esp,0x1c
c0027200:	5b                   	pop    ebx
c0027201:	5e                   	pop    esi
c0027202:	5f                   	pop    edi
c0027203:	5d                   	pop    ebp
c0027204:	c3                   	ret    
c0027205:	8d 76 00             	lea    esi,[esi+0x0]
c0027208:	89 f9                	mov    ecx,edi
c002720a:	85 ff                	test   edi,edi
c002720c:	75 0b                	jne    c0027219 <__udivdi3+0x45>
c002720e:	b8 01 00 00 00       	mov    eax,0x1
c0027213:	31 d2                	xor    edx,edx
c0027215:	f7 f7                	div    edi
c0027217:	89 c1                	mov    ecx,eax
c0027219:	31 d2                	xor    edx,edx
c002721b:	89 f0                	mov    eax,esi
c002721d:	f7 f1                	div    ecx
c002721f:	89 c3                	mov    ebx,eax
c0027221:	89 e8                	mov    eax,ebp
c0027223:	f7 f1                	div    ecx
c0027225:	89 da                	mov    edx,ebx
c0027227:	83 c4 1c             	add    esp,0x1c
c002722a:	5b                   	pop    ebx
c002722b:	5e                   	pop    esi
c002722c:	5f                   	pop    edi
c002722d:	5d                   	pop    ebp
c002722e:	c3                   	ret    
c002722f:	90                   	nop
c0027230:	39 f2                	cmp    edx,esi
c0027232:	77 1c                	ja     c0027250 <__udivdi3+0x7c>
c0027234:	0f bd da             	bsr    ebx,edx
c0027237:	83 f3 1f             	xor    ebx,0x1f
c002723a:	75 24                	jne    c0027260 <__udivdi3+0x8c>
c002723c:	39 f2                	cmp    edx,esi
c002723e:	72 08                	jb     c0027248 <__udivdi3+0x74>
c0027240:	39 ef                	cmp    edi,ebp
c0027242:	0f 87 84 00 00 00    	ja     c00272cc <__udivdi3+0xf8>
c0027248:	b8 01 00 00 00       	mov    eax,0x1
c002724d:	eb ac                	jmp    c00271fb <__udivdi3+0x27>
c002724f:	90                   	nop
c0027250:	31 db                	xor    ebx,ebx
c0027252:	31 c0                	xor    eax,eax
c0027254:	89 da                	mov    edx,ebx
c0027256:	83 c4 1c             	add    esp,0x1c
c0027259:	5b                   	pop    ebx
c002725a:	5e                   	pop    esi
c002725b:	5f                   	pop    edi
c002725c:	5d                   	pop    ebp
c002725d:	c3                   	ret    
c002725e:	66 90                	xchg   ax,ax
c0027260:	b8 20 00 00 00       	mov    eax,0x20
c0027265:	29 d8                	sub    eax,ebx
c0027267:	88 d9                	mov    cl,bl
c0027269:	d3 e2                	shl    edx,cl
c002726b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c002726f:	89 fa                	mov    edx,edi
c0027271:	88 c1                	mov    cl,al
c0027273:	d3 ea                	shr    edx,cl
c0027275:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0027279:	09 d1                	or     ecx,edx
c002727b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002727f:	88 d9                	mov    cl,bl
c0027281:	d3 e7                	shl    edi,cl
c0027283:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0027287:	89 f7                	mov    edi,esi
c0027289:	88 c1                	mov    cl,al
c002728b:	d3 ef                	shr    edi,cl
c002728d:	88 d9                	mov    cl,bl
c002728f:	d3 e6                	shl    esi,cl
c0027291:	89 ea                	mov    edx,ebp
c0027293:	88 c1                	mov    cl,al
c0027295:	d3 ea                	shr    edx,cl
c0027297:	09 d6                	or     esi,edx
c0027299:	89 f0                	mov    eax,esi
c002729b:	89 fa                	mov    edx,edi
c002729d:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00272a1:	89 d7                	mov    edi,edx
c00272a3:	89 c6                	mov    esi,eax
c00272a5:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c00272a9:	39 d7                	cmp    edi,edx
c00272ab:	72 13                	jb     c00272c0 <__udivdi3+0xec>
c00272ad:	74 09                	je     c00272b8 <__udivdi3+0xe4>
c00272af:	89 f0                	mov    eax,esi
c00272b1:	31 db                	xor    ebx,ebx
c00272b3:	e9 43 ff ff ff       	jmp    c00271fb <__udivdi3+0x27>
c00272b8:	88 d9                	mov    cl,bl
c00272ba:	d3 e5                	shl    ebp,cl
c00272bc:	39 c5                	cmp    ebp,eax
c00272be:	73 ef                	jae    c00272af <__udivdi3+0xdb>
c00272c0:	8d 46 ff             	lea    eax,[esi-0x1]
c00272c3:	31 db                	xor    ebx,ebx
c00272c5:	e9 31 ff ff ff       	jmp    c00271fb <__udivdi3+0x27>
c00272ca:	66 90                	xchg   ax,ax
c00272cc:	31 c0                	xor    eax,eax
c00272ce:	e9 28 ff ff ff       	jmp    c00271fb <__udivdi3+0x27>
c00272d3:	90                   	nop

c00272d4 <__umoddi3>:
c00272d4:	55                   	push   ebp
c00272d5:	57                   	push   edi
c00272d6:	56                   	push   esi
c00272d7:	53                   	push   ebx
c00272d8:	83 ec 1c             	sub    esp,0x1c
c00272db:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00272df:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00272e3:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00272e7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00272eb:	89 da                	mov    edx,ebx
c00272ed:	85 c0                	test   eax,eax
c00272ef:	75 37                	jne    c0027328 <__umoddi3+0x54>
c00272f1:	39 df                	cmp    edi,ebx
c00272f3:	76 13                	jbe    c0027308 <__umoddi3+0x34>
c00272f5:	89 f0                	mov    eax,esi
c00272f7:	f7 f7                	div    edi
c00272f9:	89 d0                	mov    eax,edx
c00272fb:	31 d2                	xor    edx,edx
c00272fd:	83 c4 1c             	add    esp,0x1c
c0027300:	5b                   	pop    ebx
c0027301:	5e                   	pop    esi
c0027302:	5f                   	pop    edi
c0027303:	5d                   	pop    ebp
c0027304:	c3                   	ret    
c0027305:	8d 76 00             	lea    esi,[esi+0x0]
c0027308:	89 fd                	mov    ebp,edi
c002730a:	85 ff                	test   edi,edi
c002730c:	75 0b                	jne    c0027319 <__umoddi3+0x45>
c002730e:	b8 01 00 00 00       	mov    eax,0x1
c0027313:	31 d2                	xor    edx,edx
c0027315:	f7 f7                	div    edi
c0027317:	89 c5                	mov    ebp,eax
c0027319:	89 d8                	mov    eax,ebx
c002731b:	31 d2                	xor    edx,edx
c002731d:	f7 f5                	div    ebp
c002731f:	89 f0                	mov    eax,esi
c0027321:	f7 f5                	div    ebp
c0027323:	89 d0                	mov    eax,edx
c0027325:	eb d4                	jmp    c00272fb <__umoddi3+0x27>
c0027327:	90                   	nop
c0027328:	89 f1                	mov    ecx,esi
c002732a:	39 d8                	cmp    eax,ebx
c002732c:	76 0a                	jbe    c0027338 <__umoddi3+0x64>
c002732e:	89 f0                	mov    eax,esi
c0027330:	83 c4 1c             	add    esp,0x1c
c0027333:	5b                   	pop    ebx
c0027334:	5e                   	pop    esi
c0027335:	5f                   	pop    edi
c0027336:	5d                   	pop    ebp
c0027337:	c3                   	ret    
c0027338:	0f bd e8             	bsr    ebp,eax
c002733b:	83 f5 1f             	xor    ebp,0x1f
c002733e:	75 1c                	jne    c002735c <__umoddi3+0x88>
c0027340:	39 d8                	cmp    eax,ebx
c0027342:	72 04                	jb     c0027348 <__umoddi3+0x74>
c0027344:	39 f7                	cmp    edi,esi
c0027346:	77 08                	ja     c0027350 <__umoddi3+0x7c>
c0027348:	89 da                	mov    edx,ebx
c002734a:	29 fe                	sub    esi,edi
c002734c:	19 c2                	sbb    edx,eax
c002734e:	89 f1                	mov    ecx,esi
c0027350:	89 c8                	mov    eax,ecx
c0027352:	83 c4 1c             	add    esp,0x1c
c0027355:	5b                   	pop    ebx
c0027356:	5e                   	pop    esi
c0027357:	5f                   	pop    edi
c0027358:	5d                   	pop    ebp
c0027359:	c3                   	ret    
c002735a:	66 90                	xchg   ax,ax
c002735c:	ba 20 00 00 00       	mov    edx,0x20
c0027361:	29 ea                	sub    edx,ebp
c0027363:	89 e9                	mov    ecx,ebp
c0027365:	d3 e0                	shl    eax,cl
c0027367:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002736b:	89 f8                	mov    eax,edi
c002736d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0027371:	88 d1                	mov    cl,dl
c0027373:	d3 e8                	shr    eax,cl
c0027375:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0027379:	09 c1                	or     ecx,eax
c002737b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002737f:	89 e9                	mov    ecx,ebp
c0027381:	d3 e7                	shl    edi,cl
c0027383:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0027387:	89 d8                	mov    eax,ebx
c0027389:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002738d:	88 d1                	mov    cl,dl
c002738f:	d3 e8                	shr    eax,cl
c0027391:	89 c7                	mov    edi,eax
c0027393:	89 e9                	mov    ecx,ebp
c0027395:	d3 e3                	shl    ebx,cl
c0027397:	89 f0                	mov    eax,esi
c0027399:	88 d1                	mov    cl,dl
c002739b:	d3 e8                	shr    eax,cl
c002739d:	09 d8                	or     eax,ebx
c002739f:	89 e9                	mov    ecx,ebp
c00273a1:	d3 e6                	shl    esi,cl
c00273a3:	89 f3                	mov    ebx,esi
c00273a5:	89 fa                	mov    edx,edi
c00273a7:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00273ab:	89 d1                	mov    ecx,edx
c00273ad:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c00273b1:	89 c6                	mov    esi,eax
c00273b3:	89 d7                	mov    edi,edx
c00273b5:	39 d1                	cmp    ecx,edx
c00273b7:	72 27                	jb     c00273e0 <__umoddi3+0x10c>
c00273b9:	74 21                	je     c00273dc <__umoddi3+0x108>
c00273bb:	89 ca                	mov    edx,ecx
c00273bd:	29 f3                	sub    ebx,esi
c00273bf:	19 fa                	sbb    edx,edi
c00273c1:	89 d0                	mov    eax,edx
c00273c3:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c00273c7:	d3 e0                	shl    eax,cl
c00273c9:	89 e9                	mov    ecx,ebp
c00273cb:	d3 eb                	shr    ebx,cl
c00273cd:	09 d8                	or     eax,ebx
c00273cf:	d3 ea                	shr    edx,cl
c00273d1:	83 c4 1c             	add    esp,0x1c
c00273d4:	5b                   	pop    ebx
c00273d5:	5e                   	pop    esi
c00273d6:	5f                   	pop    edi
c00273d7:	5d                   	pop    ebp
c00273d8:	c3                   	ret    
c00273d9:	8d 76 00             	lea    esi,[esi+0x0]
c00273dc:	39 c3                	cmp    ebx,eax
c00273de:	73 db                	jae    c00273bb <__umoddi3+0xe7>
c00273e0:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00273e4:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c00273e8:	89 d7                	mov    edi,edx
c00273ea:	89 c6                	mov    esi,eax
c00273ec:	eb cd                	jmp    c00273bb <__umoddi3+0xe7>

c00273ee <__addsf3>:
c00273ee:	55                   	push   ebp
c00273ef:	89 e5                	mov    ebp,esp
c00273f1:	57                   	push   edi
c00273f2:	56                   	push   esi
c00273f3:	53                   	push   ebx
c00273f4:	83 ec 08             	sub    esp,0x8
c00273f7:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c00273fa:	89 fa                	mov    edx,edi
c00273fc:	89 f8                	mov    eax,edi
c00273fe:	c1 f8 17             	sar    eax,0x17
c0027401:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027404:	c1 e2 08             	shl    edx,0x8
c0027407:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c002740d:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0027410:	89 de                	mov    esi,ebx
c0027412:	c1 fe 17             	sar    esi,0x17
c0027415:	c1 e3 08             	shl    ebx,0x8
c0027418:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c002741e:	31 f0                	xor    eax,esi
c0027420:	0f 88 3b 01 00 00    	js     c0027561 <__addsf3+0x173>
c0027426:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0027429:	29 f1                	sub    ecx,esi
c002742b:	85 c9                	test   ecx,ecx
c002742d:	7e 54                	jle    c0027483 <__addsf3+0x95>
c002742f:	89 f0                	mov    eax,esi
c0027431:	84 c0                	test   al,al
c0027433:	75 10                	jne    c0027445 <__addsf3+0x57>
c0027435:	85 db                	test   ebx,ebx
c0027437:	0f 84 aa 02 00 00    	je     c00276e7 <__addsf3+0x2f9>
c002743d:	49                   	dec    ecx
c002743e:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0027441:	74 38                	je     c002747b <__addsf3+0x8d>
c0027443:	eb 13                	jmp    c0027458 <__addsf3+0x6a>
c0027445:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0027448:	f7 d0                	not    eax
c002744a:	84 c0                	test   al,al
c002744c:	0f 84 95 02 00 00    	je     c00276e7 <__addsf3+0x2f9>
c0027452:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0027458:	83 f9 1f             	cmp    ecx,0x1f
c002745b:	0f 8f 86 02 00 00    	jg     c00276e7 <__addsf3+0x2f9>
c0027461:	89 de                	mov    esi,ebx
c0027463:	d3 ee                	shr    esi,cl
c0027465:	b8 20 00 00 00       	mov    eax,0x20
c002746a:	29 c8                	sub    eax,ecx
c002746c:	89 c1                	mov    ecx,eax
c002746e:	d3 e3                	shl    ebx,cl
c0027470:	31 c0                	xor    eax,eax
c0027472:	85 db                	test   ebx,ebx
c0027474:	0f 95 c0             	setne  al
c0027477:	09 f0                	or     eax,esi
c0027479:	01 d0                	add    eax,edx
c002747b:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c002747e:	e9 b6 00 00 00       	jmp    c0027539 <__addsf3+0x14b>
c0027483:	74 5c                	je     c00274e1 <__addsf3+0xf3>
c0027485:	89 f1                	mov    ecx,esi
c0027487:	2b 4d f0             	sub    ecx,DWORD PTR [ebp-0x10]
c002748a:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c002748d:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0027491:	75 14                	jne    c00274a7 <__addsf3+0xb9>
c0027493:	85 d2                	test   edx,edx
c0027495:	0f 84 4c 02 00 00    	je     c00276e7 <__addsf3+0x2f9>
c002749b:	49                   	dec    ecx
c002749c:	8d 04 1a             	lea    eax,[edx+ebx*1]
c002749f:	0f 84 94 00 00 00    	je     c0027539 <__addsf3+0x14b>
c00274a5:	eb 12                	jmp    c00274b9 <__addsf3+0xcb>
c00274a7:	89 f0                	mov    eax,esi
c00274a9:	f7 d0                	not    eax
c00274ab:	84 c0                	test   al,al
c00274ad:	0f 84 34 02 00 00    	je     c00276e7 <__addsf3+0x2f9>
c00274b3:	81 ca 00 00 00 80    	or     edx,0x80000000
c00274b9:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00274bc:	83 f9 1f             	cmp    ecx,0x1f
c00274bf:	0f 8f 22 02 00 00    	jg     c00276e7 <__addsf3+0x2f9>
c00274c5:	89 d7                	mov    edi,edx
c00274c7:	d3 ef                	shr    edi,cl
c00274c9:	b8 20 00 00 00       	mov    eax,0x20
c00274ce:	29 c8                	sub    eax,ecx
c00274d0:	89 c1                	mov    ecx,eax
c00274d2:	d3 e2                	shl    edx,cl
c00274d4:	31 c0                	xor    eax,eax
c00274d6:	85 d2                	test   edx,edx
c00274d8:	0f 95 c0             	setne  al
c00274db:	09 f8                	or     eax,edi
c00274dd:	01 d8                	add    eax,ebx
c00274df:	eb 58                	jmp    c0027539 <__addsf3+0x14b>
c00274e1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00274e4:	8d 70 01             	lea    esi,[eax+0x1]
c00274e7:	f7 c6 fe 00 00 00    	test   esi,0xfe
c00274ed:	75 32                	jne    c0027521 <__addsf3+0x133>
c00274ef:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c00274f3:	75 1f                	jne    c0027514 <__addsf3+0x126>
c00274f5:	85 d2                	test   edx,edx
c00274f7:	0f 84 e0 01 00 00    	je     c00276dd <__addsf3+0x2ef>
c00274fd:	85 db                	test   ebx,ebx
c00274ff:	0f 84 e2 01 00 00    	je     c00276e7 <__addsf3+0x2f9>
c0027505:	89 d0                	mov    eax,edx
c0027507:	01 d8                	add    eax,ebx
c0027509:	0f 89 a9 01 00 00    	jns    c00276b8 <__addsf3+0x2ca>
c002750f:	e9 9d 01 00 00       	jmp    c00276b1 <__addsf3+0x2c3>
c0027514:	85 d2                	test   edx,edx
c0027516:	0f 85 cb 01 00 00    	jne    c00276e7 <__addsf3+0x2f9>
c002751c:	e9 bc 01 00 00       	jmp    c00276dd <__addsf3+0x2ef>
c0027521:	31 c0                	xor    eax,eax
c0027523:	89 f1                	mov    ecx,esi
c0027525:	f7 d1                	not    ecx
c0027527:	84 c9                	test   cl,cl
c0027529:	0f 84 90 01 00 00    	je     c00276bf <__addsf3+0x2d1>
c002752f:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0027532:	d1 e8                	shr    eax,1
c0027534:	e9 86 01 00 00       	jmp    c00276bf <__addsf3+0x2d1>
c0027539:	85 c0                	test   eax,eax
c002753b:	0f 89 7e 01 00 00    	jns    c00276bf <__addsf3+0x2d1>
c0027541:	46                   	inc    esi
c0027542:	89 f2                	mov    edx,esi
c0027544:	f7 d2                	not    edx
c0027546:	84 d2                	test   dl,dl
c0027548:	0f 84 6f 01 00 00    	je     c00276bd <__addsf3+0x2cf>
c002754e:	89 c2                	mov    edx,eax
c0027550:	83 e2 01             	and    edx,0x1
c0027553:	d1 e8                	shr    eax,1
c0027555:	25 ff ff ff 3f       	and    eax,0x3fffffff
c002755a:	09 d0                	or     eax,edx
c002755c:	e9 5e 01 00 00       	jmp    c00276bf <__addsf3+0x2d1>
c0027561:	0f b6 45 f0          	movzx  eax,BYTE PTR [ebp-0x10]
c0027565:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027568:	89 f0                	mov    eax,esi
c002756a:	0f b6 c0             	movzx  eax,al
c002756d:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027570:	29 c1                	sub    ecx,eax
c0027572:	85 c9                	test   ecx,ecx
c0027574:	7e 55                	jle    c00275cb <__addsf3+0x1dd>
c0027576:	85 c0                	test   eax,eax
c0027578:	75 11                	jne    c002758b <__addsf3+0x19d>
c002757a:	85 db                	test   ebx,ebx
c002757c:	0f 84 65 01 00 00    	je     c00276e7 <__addsf3+0x2f9>
c0027582:	49                   	dec    ecx
c0027583:	75 19                	jne    c002759e <__addsf3+0x1b0>
c0027585:	89 d0                	mov    eax,edx
c0027587:	29 d8                	sub    eax,ebx
c0027589:	eb 38                	jmp    c00275c3 <__addsf3+0x1d5>
c002758b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002758e:	f7 d0                	not    eax
c0027590:	84 c0                	test   al,al
c0027592:	0f 84 4f 01 00 00    	je     c00276e7 <__addsf3+0x2f9>
c0027598:	81 cb 00 00 00 80    	or     ebx,0x80000000
c002759e:	83 f9 1f             	cmp    ecx,0x1f
c00275a1:	0f 8f 40 01 00 00    	jg     c00276e7 <__addsf3+0x2f9>
c00275a7:	89 de                	mov    esi,ebx
c00275a9:	d3 ee                	shr    esi,cl
c00275ab:	b8 20 00 00 00       	mov    eax,0x20
c00275b0:	29 c8                	sub    eax,ecx
c00275b2:	89 c1                	mov    ecx,eax
c00275b4:	d3 e3                	shl    ebx,cl
c00275b6:	31 c0                	xor    eax,eax
c00275b8:	85 db                	test   ebx,ebx
c00275ba:	0f 95 c0             	setne  al
c00275bd:	09 f0                	or     eax,esi
c00275bf:	29 c2                	sub    edx,eax
c00275c1:	89 d0                	mov    eax,edx
c00275c3:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c00275c6:	e9 af 00 00 00       	jmp    c002767a <__addsf3+0x28c>
c00275cb:	74 5c                	je     c0027629 <__addsf3+0x23b>
c00275cd:	2b 45 ec             	sub    eax,DWORD PTR [ebp-0x14]
c00275d0:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00275d3:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c00275d7:	75 14                	jne    c00275ed <__addsf3+0x1ff>
c00275d9:	85 d2                	test   edx,edx
c00275db:	0f 84 06 01 00 00    	je     c00276e7 <__addsf3+0x2f9>
c00275e1:	48                   	dec    eax
c00275e2:	75 1b                	jne    c00275ff <__addsf3+0x211>
c00275e4:	89 d8                	mov    eax,ebx
c00275e6:	29 d0                	sub    eax,edx
c00275e8:	e9 8d 00 00 00       	jmp    c002767a <__addsf3+0x28c>
c00275ed:	89 f1                	mov    ecx,esi
c00275ef:	f7 d1                	not    ecx
c00275f1:	84 c9                	test   cl,cl
c00275f3:	0f 84 ee 00 00 00    	je     c00276e7 <__addsf3+0x2f9>
c00275f9:	81 ca 00 00 00 80    	or     edx,0x80000000
c00275ff:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0027602:	83 f8 1f             	cmp    eax,0x1f
c0027605:	0f 8f dc 00 00 00    	jg     c00276e7 <__addsf3+0x2f9>
c002760b:	89 d7                	mov    edi,edx
c002760d:	88 c1                	mov    cl,al
c002760f:	d3 ef                	shr    edi,cl
c0027611:	b9 20 00 00 00       	mov    ecx,0x20
c0027616:	29 c1                	sub    ecx,eax
c0027618:	d3 e2                	shl    edx,cl
c002761a:	31 c0                	xor    eax,eax
c002761c:	85 d2                	test   edx,edx
c002761e:	0f 95 c0             	setne  al
c0027621:	09 f8                	or     eax,edi
c0027623:	29 c3                	sub    ebx,eax
c0027625:	89 d8                	mov    eax,ebx
c0027627:	eb 51                	jmp    c002767a <__addsf3+0x28c>
c0027629:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002762c:	40                   	inc    eax
c002762d:	a8 fe                	test   al,0xfe
c002762f:	75 3d                	jne    c002766e <__addsf3+0x280>
c0027631:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0027635:	0f 85 a7 00 00 00    	jne    c00276e2 <__addsf3+0x2f4>
c002763b:	85 d2                	test   edx,edx
c002763d:	75 12                	jne    c0027651 <__addsf3+0x263>
c002763f:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0027642:	85 db                	test   ebx,ebx
c0027644:	0f 85 9d 00 00 00    	jne    c00276e7 <__addsf3+0x2f9>
c002764a:	31 ff                	xor    edi,edi
c002764c:	e9 96 00 00 00       	jmp    c00276e7 <__addsf3+0x2f9>
c0027651:	85 db                	test   ebx,ebx
c0027653:	0f 84 8e 00 00 00    	je     c00276e7 <__addsf3+0x2f9>
c0027659:	89 d0                	mov    eax,edx
c002765b:	29 d8                	sub    eax,ebx
c002765d:	79 06                	jns    c0027665 <__addsf3+0x277>
c002765f:	89 d8                	mov    eax,ebx
c0027661:	29 d0                	sub    eax,edx
c0027663:	eb 5a                	jmp    c00276bf <__addsf3+0x2d1>
c0027665:	bf 00 00 00 00       	mov    edi,0x0
c002766a:	74 7b                	je     c00276e7 <__addsf3+0x2f9>
c002766c:	eb 4a                	jmp    c00276b8 <__addsf3+0x2ca>
c002766e:	89 d0                	mov    eax,edx
c0027670:	29 d8                	sub    eax,ebx
c0027672:	79 12                	jns    c0027686 <__addsf3+0x298>
c0027674:	89 d8                	mov    eax,ebx
c0027676:	29 d0                	sub    eax,edx
c0027678:	eb 09                	jmp    c0027683 <__addsf3+0x295>
c002767a:	85 c0                	test   eax,eax
c002767c:	79 41                	jns    c00276bf <__addsf3+0x2d1>
c002767e:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027683:	89 75 f0             	mov    DWORD PTR [ebp-0x10],esi
c0027686:	31 f6                	xor    esi,esi
c0027688:	85 c0                	test   eax,eax
c002768a:	74 33                	je     c00276bf <__addsf3+0x2d1>
c002768c:	0f bd c8             	bsr    ecx,eax
c002768f:	83 f1 1f             	xor    ecx,0x1f
c0027692:	d3 e0                	shl    eax,cl
c0027694:	0f b6 55 f0          	movzx  edx,BYTE PTR [ebp-0x10]
c0027698:	39 ca                	cmp    edx,ecx
c002769a:	7f 10                	jg     c00276ac <__addsf3+0x2be>
c002769c:	29 d1                	sub    ecx,edx
c002769e:	41                   	inc    ecx
c002769f:	d3 e8                	shr    eax,cl
c00276a1:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c00276a4:	81 e6 00 ff ff ff    	and    esi,0xffffff00
c00276aa:	eb 13                	jmp    c00276bf <__addsf3+0x2d1>
c00276ac:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c00276af:	29 ce                	sub    esi,ecx
c00276b1:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00276b6:	eb 07                	jmp    c00276bf <__addsf3+0x2d1>
c00276b8:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c00276bb:	eb 02                	jmp    c00276bf <__addsf3+0x2d1>
c00276bd:	31 c0                	xor    eax,eax
c00276bf:	89 c2                	mov    edx,eax
c00276c1:	c1 ea 08             	shr    edx,0x8
c00276c4:	a8 7f                	test   al,0x7f
c00276c6:	0f 95 c1             	setne  cl
c00276c9:	09 d1                	or     ecx,edx
c00276cb:	83 e1 01             	and    ecx,0x1
c00276ce:	c1 e8 07             	shr    eax,0x7
c00276d1:	21 c8                	and    eax,ecx
c00276d3:	c1 e6 17             	shl    esi,0x17
c00276d6:	09 d6                	or     esi,edx
c00276d8:	8d 3c 30             	lea    edi,[eax+esi*1]
c00276db:	eb 0a                	jmp    c00276e7 <__addsf3+0x2f9>
c00276dd:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00276e0:	eb 05                	jmp    c00276e7 <__addsf3+0x2f9>
c00276e2:	bf 00 00 c0 7f       	mov    edi,0x7fc00000
c00276e7:	89 f8                	mov    eax,edi
c00276e9:	5a                   	pop    edx
c00276ea:	59                   	pop    ecx
c00276eb:	5b                   	pop    ebx
c00276ec:	5e                   	pop    esi
c00276ed:	5f                   	pop    edi
c00276ee:	5d                   	pop    ebp
c00276ef:	c3                   	ret    

c00276f0 <__subsf3>:
c00276f0:	55                   	push   ebp
c00276f1:	89 e5                	mov    ebp,esp
c00276f3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00276f6:	05 00 00 00 80       	add    eax,0x80000000
c00276fb:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c00276fe:	5d                   	pop    ebp
c00276ff:	e9 ea fc ff ff       	jmp    c00273ee <__addsf3>

c0027704 <__negsf2>:
c0027704:	55                   	push   ebp
c0027705:	89 e5                	mov    ebp,esp
c0027707:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002770a:	05 00 00 00 80       	add    eax,0x80000000
c002770f:	5d                   	pop    ebp
c0027710:	c3                   	ret    

c0027711 <__mulsf3>:
c0027711:	55                   	push   ebp
c0027712:	89 e5                	mov    ebp,esp
c0027714:	57                   	push   edi
c0027715:	56                   	push   esi
c0027716:	53                   	push   ebx
c0027717:	83 ec 1c             	sub    esp,0x1c
c002771a:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c002771d:	89 f0                	mov    eax,esi
c002771f:	89 f1                	mov    ecx,esi
c0027721:	c1 f9 17             	sar    ecx,0x17
c0027724:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0027727:	c1 e0 08             	shl    eax,0x8
c002772a:	25 00 ff ff 7f       	and    eax,0x7fffff00
c002772f:	89 c1                	mov    ecx,eax
c0027731:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0027734:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027737:	89 c7                	mov    edi,eax
c0027739:	c1 ff 17             	sar    edi,0x17
c002773c:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0027740:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0027743:	89 f8                	mov    eax,edi
c0027745:	0f b6 c0             	movzx  eax,al
c0027748:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c002774b:	8d 5c 03 82          	lea    ebx,[ebx+eax*1-0x7e]
c002774f:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0027752:	42                   	inc    edx
c0027753:	80 e2 fe             	and    dl,0xfe
c0027756:	75 7b                	jne    c00277d3 <__mulsf3+0xc2>
c0027758:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c002775c:	74 54                	je     c00277b2 <__mulsf3+0xa1>
c002775e:	85 c9                	test   ecx,ecx
c0027760:	0f 85 64 01 00 00    	jne    c00278ca <__mulsf3+0x1b9>
c0027766:	8d 57 01             	lea    edx,[edi+0x1]
c0027769:	80 e2 fe             	and    dl,0xfe
c002776c:	75 1f                	jne    c002778d <__mulsf3+0x7c>
c002776e:	85 c0                	test   eax,eax
c0027770:	b8 00 00 00 00       	mov    eax,0x0
c0027775:	74 29                	je     c00277a0 <__mulsf3+0x8f>
c0027777:	53                   	push   ebx
c0027778:	53                   	push   ebx
c0027779:	50                   	push   eax
c002777a:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002777d:	e8 96 05 00 00       	call   c0027d18 <__nesf2>
c0027782:	83 c4 10             	add    esp,0x10
c0027785:	85 c0                	test   eax,eax
c0027787:	0f 85 3a 01 00 00    	jne    c00278c7 <__mulsf3+0x1b6>
c002778d:	85 ff                	test   edi,edi
c002778f:	0f 89 35 01 00 00    	jns    c00278ca <__mulsf3+0x1b9>
c0027795:	81 c6 00 00 00 80    	add    esi,0x80000000
c002779b:	e9 2a 01 00 00       	jmp    c00278ca <__mulsf3+0x1b9>
c00277a0:	51                   	push   ecx
c00277a1:	51                   	push   ecx
c00277a2:	50                   	push   eax
c00277a3:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00277a6:	e8 6d 05 00 00       	call   c0027d18 <__nesf2>
c00277ab:	83 c4 10             	add    esp,0x10
c00277ae:	85 c0                	test   eax,eax
c00277b0:	eb 15                	jmp    c00277c7 <__mulsf3+0xb6>
c00277b2:	85 c9                	test   ecx,ecx
c00277b4:	74 0b                	je     c00277c1 <__mulsf3+0xb0>
c00277b6:	8d 53 ff             	lea    edx,[ebx-0x1]
c00277b9:	01 c9                	add    ecx,ecx
c00277bb:	78 16                	js     c00277d3 <__mulsf3+0xc2>
c00277bd:	89 d3                	mov    ebx,edx
c00277bf:	eb f5                	jmp    c00277b6 <__mulsf3+0xa5>
c00277c1:	89 f8                	mov    eax,edi
c00277c3:	f7 d0                	not    eax
c00277c5:	84 c0                	test   al,al
c00277c7:	75 c4                	jne    c002778d <__mulsf3+0x7c>
c00277c9:	be 00 00 c0 7f       	mov    esi,0x7fc00000
c00277ce:	e9 f7 00 00 00       	jmp    c00278ca <__mulsf3+0x1b9>
c00277d3:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c00277d6:	c1 e6 08             	shl    esi,0x8
c00277d9:	81 e6 00 ff ff 7f    	and    esi,0x7fffff00
c00277df:	8d 57 01             	lea    edx,[edi+0x1]
c00277e2:	80 e2 fe             	and    dl,0xfe
c00277e5:	75 63                	jne    c002784a <__mulsf3+0x139>
c00277e7:	85 c0                	test   eax,eax
c00277e9:	74 2f                	je     c002781a <__mulsf3+0x109>
c00277eb:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c00277ef:	0f 89 d2 00 00 00    	jns    c00278c7 <__mulsf3+0x1b6>
c00277f5:	52                   	push   edx
c00277f6:	52                   	push   edx
c00277f7:	6a 00                	push   0x0
c00277f9:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00277fc:	e8 dc 04 00 00       	call   c0027cdd <__eqsf2>
c0027801:	83 c4 10             	add    esp,0x10
c0027804:	85 c0                	test   eax,eax
c0027806:	0f 85 bb 00 00 00    	jne    c00278c7 <__mulsf3+0x1b6>
c002780c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002780f:	8d b0 00 00 00 80    	lea    esi,[eax-0x80000000]
c0027815:	e9 b0 00 00 00       	jmp    c00278ca <__mulsf3+0x1b9>
c002781a:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c002781d:	50                   	push   eax
c002781e:	50                   	push   eax
c002781f:	6a 00                	push   0x0
c0027821:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027824:	e8 b4 04 00 00       	call   c0027cdd <__eqsf2>
c0027829:	83 c4 10             	add    esp,0x10
c002782c:	85 c0                	test   eax,eax
c002782e:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027831:	75 0c                	jne    c002783f <__mulsf3+0x12e>
c0027833:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0027837:	0f 89 8a 00 00 00    	jns    c00278c7 <__mulsf3+0x1b6>
c002783d:	eb cd                	jmp    c002780c <__mulsf3+0xfb>
c002783f:	8d 43 ff             	lea    eax,[ebx-0x1]
c0027842:	01 f6                	add    esi,esi
c0027844:	78 04                	js     c002784a <__mulsf3+0x139>
c0027846:	89 c3                	mov    ebx,eax
c0027848:	eb f5                	jmp    c002783f <__mulsf3+0x12e>
c002784a:	89 c8                	mov    eax,ecx
c002784c:	0d 00 00 00 80       	or     eax,0x80000000
c0027851:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027857:	f7 e6                	mul    esi
c0027859:	85 c0                	test   eax,eax
c002785b:	0f 95 c0             	setne  al
c002785e:	0f b6 c0             	movzx  eax,al
c0027861:	09 c2                	or     edx,eax
c0027863:	78 03                	js     c0027868 <__mulsf3+0x157>
c0027865:	01 d2                	add    edx,edx
c0027867:	4b                   	dec    ebx
c0027868:	81 fb fe 00 00 00    	cmp    ebx,0xfe
c002786e:	7f 22                	jg     c0027892 <__mulsf3+0x181>
c0027870:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0027876:	85 db                	test   ebx,ebx
c0027878:	7f 23                	jg     c002789d <__mulsf3+0x18c>
c002787a:	83 fb e9             	cmp    ebx,0xffffffe9
c002787d:	7c 1a                	jl     c0027899 <__mulsf3+0x188>
c002787f:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027885:	b9 01 00 00 00       	mov    ecx,0x1
c002788a:	29 d9                	sub    ecx,ebx
c002788c:	d3 ea                	shr    edx,cl
c002788e:	31 db                	xor    ebx,ebx
c0027890:	eb 0b                	jmp    c002789d <__mulsf3+0x18c>
c0027892:	bb ff 00 00 00       	mov    ebx,0xff
c0027897:	eb 02                	jmp    c002789b <__mulsf3+0x18a>
c0027899:	31 db                	xor    ebx,ebx
c002789b:	31 d2                	xor    edx,edx
c002789d:	89 d0                	mov    eax,edx
c002789f:	c1 e8 08             	shr    eax,0x8
c00278a2:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c00278a5:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c00278ab:	09 fb                	or     ebx,edi
c00278ad:	c1 e3 17             	shl    ebx,0x17
c00278b0:	09 c3                	or     ebx,eax
c00278b2:	f6 c2 7f             	test   dl,0x7f
c00278b5:	0f 95 c1             	setne  cl
c00278b8:	09 c8                	or     eax,ecx
c00278ba:	83 e0 01             	and    eax,0x1
c00278bd:	c1 ea 07             	shr    edx,0x7
c00278c0:	21 c2                	and    edx,eax
c00278c2:	8d 34 13             	lea    esi,[ebx+edx*1]
c00278c5:	eb 03                	jmp    c00278ca <__mulsf3+0x1b9>
c00278c7:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c00278ca:	89 f0                	mov    eax,esi
c00278cc:	8d 65 f4             	lea    esp,[ebp-0xc]
c00278cf:	5b                   	pop    ebx
c00278d0:	5e                   	pop    esi
c00278d1:	5f                   	pop    edi
c00278d2:	5d                   	pop    ebp
c00278d3:	c3                   	ret    

c00278d4 <__divsf3>:
c00278d4:	55                   	push   ebp
c00278d5:	89 e5                	mov    ebp,esp
c00278d7:	57                   	push   edi
c00278d8:	56                   	push   esi
c00278d9:	53                   	push   ebx
c00278da:	83 ec 1c             	sub    esp,0x1c
c00278dd:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00278e0:	89 d8                	mov    eax,ebx
c00278e2:	89 d9                	mov    ecx,ebx
c00278e4:	c1 f9 17             	sar    ecx,0x17
c00278e7:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c00278ea:	c1 e0 08             	shl    eax,0x8
c00278ed:	25 00 ff ff 7f       	and    eax,0x7fffff00
c00278f2:	89 c1                	mov    ecx,eax
c00278f4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00278f7:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00278fa:	89 c7                	mov    edi,eax
c00278fc:	c1 ff 17             	sar    edi,0x17
c00278ff:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0027903:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0027906:	89 f8                	mov    eax,edi
c0027908:	0f b6 c0             	movzx  eax,al
c002790b:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c002790e:	29 c6                	sub    esi,eax
c0027910:	83 c6 7f             	add    esi,0x7f
c0027913:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0027916:	42                   	inc    edx
c0027917:	80 e2 fe             	and    dl,0xfe
c002791a:	0f 85 9c 00 00 00    	jne    c00279bc <__divsf3+0xe8>
c0027920:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0027924:	74 33                	je     c0027959 <__divsf3+0x85>
c0027926:	85 c9                	test   ecx,ecx
c0027928:	0f 85 c7 01 00 00    	jne    c0027af5 <__divsf3+0x221>
c002792e:	8d 57 01             	lea    edx,[edi+0x1]
c0027931:	80 e2 fe             	and    dl,0xfe
c0027934:	75 2f                	jne    c0027965 <__divsf3+0x91>
c0027936:	85 c0                	test   eax,eax
c0027938:	74 2b                	je     c0027965 <__divsf3+0x91>
c002793a:	51                   	push   ecx
c002793b:	51                   	push   ecx
c002793c:	6a 00                	push   0x0
c002793e:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027941:	e8 d2 03 00 00       	call   c0027d18 <__nesf2>
c0027946:	83 c4 10             	add    esp,0x10
c0027949:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c002794c:	85 c0                	test   eax,eax
c002794e:	0f 85 a1 01 00 00    	jne    c0027af5 <__divsf3+0x221>
c0027954:	e9 92 01 00 00       	jmp    c0027aeb <__divsf3+0x217>
c0027959:	85 c9                	test   ecx,ecx
c002795b:	75 1b                	jne    c0027978 <__divsf3+0xa4>
c002795d:	8d 57 01             	lea    edx,[edi+0x1]
c0027960:	80 e2 fe             	and    dl,0xfe
c0027963:	74 1e                	je     c0027983 <__divsf3+0xaf>
c0027965:	85 ff                	test   edi,edi
c0027967:	0f 89 88 01 00 00    	jns    c0027af5 <__divsf3+0x221>
c002796d:	81 c3 00 00 00 80    	add    ebx,0x80000000
c0027973:	e9 7d 01 00 00       	jmp    c0027af5 <__divsf3+0x221>
c0027978:	8d 56 ff             	lea    edx,[esi-0x1]
c002797b:	01 c9                	add    ecx,ecx
c002797d:	78 3d                	js     c00279bc <__divsf3+0xe8>
c002797f:	89 d6                	mov    esi,edx
c0027981:	eb f5                	jmp    c0027978 <__divsf3+0xa4>
c0027983:	85 c0                	test   eax,eax
c0027985:	b8 00 00 00 00       	mov    eax,0x0
c002798a:	74 18                	je     c00279a4 <__divsf3+0xd0>
c002798c:	52                   	push   edx
c002798d:	52                   	push   edx
c002798e:	50                   	push   eax
c002798f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027992:	e8 81 03 00 00       	call   c0027d18 <__nesf2>
c0027997:	83 c4 10             	add    esp,0x10
c002799a:	85 c0                	test   eax,eax
c002799c:	0f 85 50 01 00 00    	jne    c0027af2 <__divsf3+0x21e>
c00279a2:	eb c1                	jmp    c0027965 <__divsf3+0x91>
c00279a4:	56                   	push   esi
c00279a5:	56                   	push   esi
c00279a6:	50                   	push   eax
c00279a7:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00279aa:	e8 69 03 00 00       	call   c0027d18 <__nesf2>
c00279af:	83 c4 10             	add    esp,0x10
c00279b2:	85 c0                	test   eax,eax
c00279b4:	0f 84 31 01 00 00    	je     c0027aeb <__divsf3+0x217>
c00279ba:	eb a9                	jmp    c0027965 <__divsf3+0x91>
c00279bc:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
c00279bf:	c1 e3 08             	shl    ebx,0x8
c00279c2:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c00279c8:	8d 57 01             	lea    edx,[edi+0x1]
c00279cb:	80 e2 fe             	and    dl,0xfe
c00279ce:	75 71                	jne    c0027a41 <__divsf3+0x16d>
c00279d0:	85 c0                	test   eax,eax
c00279d2:	ba 00 00 00 00       	mov    edx,0x0
c00279d7:	74 2f                	je     c0027a08 <__divsf3+0x134>
c00279d9:	51                   	push   ecx
c00279da:	51                   	push   ecx
c00279db:	52                   	push   edx
c00279dc:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00279df:	e8 f9 02 00 00       	call   c0027cdd <__eqsf2>
c00279e4:	83 c4 10             	add    esp,0x10
c00279e7:	85 c0                	test   eax,eax
c00279e9:	0f 85 03 01 00 00    	jne    c0027af2 <__divsf3+0x21e>
c00279ef:	31 d2                	xor    edx,edx
c00279f1:	89 d3                	mov    ebx,edx
c00279f3:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00279f6:	31 f8                	xor    eax,edi
c00279f8:	0f 89 f7 00 00 00    	jns    c0027af5 <__divsf3+0x221>
c00279fe:	bb 00 00 00 80       	mov    ebx,0x80000000
c0027a03:	e9 ed 00 00 00       	jmp    c0027af5 <__divsf3+0x221>
c0027a08:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0027a0b:	50                   	push   eax
c0027a0c:	50                   	push   eax
c0027a0d:	52                   	push   edx
c0027a0e:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027a11:	e8 c7 02 00 00       	call   c0027cdd <__eqsf2>
c0027a16:	83 c4 10             	add    esp,0x10
c0027a19:	85 c0                	test   eax,eax
c0027a1b:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027a1e:	75 16                	jne    c0027a36 <__divsf3+0x162>
c0027a20:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027a23:	31 fb                	xor    ebx,edi
c0027a25:	81 e3 00 00 00 80    	and    ebx,0x80000000
c0027a2b:	81 cb 00 00 80 7f    	or     ebx,0x7f800000
c0027a31:	e9 bf 00 00 00       	jmp    c0027af5 <__divsf3+0x221>
c0027a36:	8d 46 01             	lea    eax,[esi+0x1]
c0027a39:	01 db                	add    ebx,ebx
c0027a3b:	78 04                	js     c0027a41 <__divsf3+0x16d>
c0027a3d:	89 c6                	mov    esi,eax
c0027a3f:	eb f5                	jmp    c0027a36 <__divsf3+0x162>
c0027a41:	89 c8                	mov    eax,ecx
c0027a43:	0d 00 00 00 80       	or     eax,0x80000000
c0027a48:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0027a4e:	31 d2                	xor    edx,edx
c0027a50:	39 d8                	cmp    eax,ebx
c0027a52:	72 07                	jb     c0027a5b <__divsf3+0x187>
c0027a54:	29 d8                	sub    eax,ebx
c0027a56:	ba 01 00 00 00       	mov    edx,0x1
c0027a5b:	c7 45 e0 19 00 00 00 	mov    DWORD PTR [ebp-0x20],0x19
c0027a62:	01 d2                	add    edx,edx
c0027a64:	89 c1                	mov    ecx,eax
c0027a66:	01 c0                	add    eax,eax
c0027a68:	85 c9                	test   ecx,ecx
c0027a6a:	78 04                	js     c0027a70 <__divsf3+0x19c>
c0027a6c:	39 c3                	cmp    ebx,eax
c0027a6e:	77 05                	ja     c0027a75 <__divsf3+0x1a1>
c0027a70:	29 d8                	sub    eax,ebx
c0027a72:	83 ca 01             	or     edx,0x1
c0027a75:	ff 4d e0             	dec    DWORD PTR [ebp-0x20]
c0027a78:	75 e8                	jne    c0027a62 <__divsf3+0x18e>
c0027a7a:	85 c0                	test   eax,eax
c0027a7c:	0f 95 c0             	setne  al
c0027a7f:	0f b6 c0             	movzx  eax,al
c0027a82:	c1 e2 06             	shl    edx,0x6
c0027a85:	09 c2                	or     edx,eax
c0027a87:	78 03                	js     c0027a8c <__divsf3+0x1b8>
c0027a89:	01 d2                	add    edx,edx
c0027a8b:	4e                   	dec    esi
c0027a8c:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0027a92:	7f 22                	jg     c0027ab6 <__divsf3+0x1e2>
c0027a94:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0027a9a:	85 f6                	test   esi,esi
c0027a9c:	7f 23                	jg     c0027ac1 <__divsf3+0x1ed>
c0027a9e:	83 fe e9             	cmp    esi,0xffffffe9
c0027aa1:	7c 1a                	jl     c0027abd <__divsf3+0x1e9>
c0027aa3:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027aa9:	b9 01 00 00 00       	mov    ecx,0x1
c0027aae:	29 f1                	sub    ecx,esi
c0027ab0:	d3 ea                	shr    edx,cl
c0027ab2:	31 f6                	xor    esi,esi
c0027ab4:	eb 0b                	jmp    c0027ac1 <__divsf3+0x1ed>
c0027ab6:	be ff 00 00 00       	mov    esi,0xff
c0027abb:	eb 02                	jmp    c0027abf <__divsf3+0x1eb>
c0027abd:	31 f6                	xor    esi,esi
c0027abf:	31 d2                	xor    edx,edx
c0027ac1:	89 d0                	mov    eax,edx
c0027ac3:	c1 e8 08             	shr    eax,0x8
c0027ac6:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0027ac9:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0027acf:	09 fe                	or     esi,edi
c0027ad1:	c1 e6 17             	shl    esi,0x17
c0027ad4:	09 c6                	or     esi,eax
c0027ad6:	f6 c2 7f             	test   dl,0x7f
c0027ad9:	0f 95 c1             	setne  cl
c0027adc:	09 c8                	or     eax,ecx
c0027ade:	83 e0 01             	and    eax,0x1
c0027ae1:	c1 ea 07             	shr    edx,0x7
c0027ae4:	21 c2                	and    edx,eax
c0027ae6:	8d 1c 16             	lea    ebx,[esi+edx*1]
c0027ae9:	eb 0a                	jmp    c0027af5 <__divsf3+0x221>
c0027aeb:	bb 00 00 c0 7f       	mov    ebx,0x7fc00000
c0027af0:	eb 03                	jmp    c0027af5 <__divsf3+0x221>
c0027af2:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0027af5:	89 d8                	mov    eax,ebx
c0027af7:	8d 65 f4             	lea    esp,[ebp-0xc]
c0027afa:	5b                   	pop    ebx
c0027afb:	5e                   	pop    esi
c0027afc:	5f                   	pop    edi
c0027afd:	5d                   	pop    ebp
c0027afe:	c3                   	ret    

c0027aff <__floatsisf>:
c0027aff:	55                   	push   ebp
c0027b00:	89 e5                	mov    ebp,esp
c0027b02:	53                   	push   ebx
c0027b03:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027b06:	85 d2                	test   edx,edx
c0027b08:	7e 2b                	jle    c0027b35 <__floatsisf+0x36>
c0027b0a:	0f bd ca             	bsr    ecx,edx
c0027b0d:	83 f1 1f             	xor    ecx,0x1f
c0027b10:	d3 e2                	shl    edx,cl
c0027b12:	89 d0                	mov    eax,edx
c0027b14:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027b19:	89 c3                	mov    ebx,eax
c0027b1b:	c1 eb 08             	shr    ebx,0x8
c0027b1e:	80 e2 7f             	and    dl,0x7f
c0027b21:	0f 95 c2             	setne  dl
c0027b24:	09 da                	or     edx,ebx
c0027b26:	83 e2 01             	and    edx,0x1
c0027b29:	c1 e8 07             	shr    eax,0x7
c0027b2c:	21 c2                	and    edx,eax
c0027b2e:	b8 9e 00 00 00       	mov    eax,0x9e
c0027b33:	eb 32                	jmp    c0027b67 <__floatsisf+0x68>
c0027b35:	b8 00 00 00 00       	mov    eax,0x0
c0027b3a:	74 34                	je     c0027b70 <__floatsisf+0x71>
c0027b3c:	f7 da                	neg    edx
c0027b3e:	0f bd ca             	bsr    ecx,edx
c0027b41:	83 f1 1f             	xor    ecx,0x1f
c0027b44:	d3 e2                	shl    edx,cl
c0027b46:	89 d0                	mov    eax,edx
c0027b48:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027b4d:	89 c3                	mov    ebx,eax
c0027b4f:	c1 eb 08             	shr    ebx,0x8
c0027b52:	80 e2 7f             	and    dl,0x7f
c0027b55:	0f 95 c2             	setne  dl
c0027b58:	09 da                	or     edx,ebx
c0027b5a:	83 e2 01             	and    edx,0x1
c0027b5d:	c1 e8 07             	shr    eax,0x7
c0027b60:	21 c2                	and    edx,eax
c0027b62:	b8 9e 01 00 00       	mov    eax,0x19e
c0027b67:	29 c8                	sub    eax,ecx
c0027b69:	c1 e0 17             	shl    eax,0x17
c0027b6c:	09 d8                	or     eax,ebx
c0027b6e:	01 d0                	add    eax,edx
c0027b70:	5b                   	pop    ebx
c0027b71:	5d                   	pop    ebp
c0027b72:	c3                   	ret    

c0027b73 <__floatunsisf>:
c0027b73:	55                   	push   ebp
c0027b74:	89 e5                	mov    ebp,esp
c0027b76:	53                   	push   ebx
c0027b77:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027b7a:	31 c0                	xor    eax,eax
c0027b7c:	85 d2                	test   edx,edx
c0027b7e:	74 32                	je     c0027bb2 <__floatunsisf+0x3f>
c0027b80:	0f bd ca             	bsr    ecx,edx
c0027b83:	83 f1 1f             	xor    ecx,0x1f
c0027b86:	d3 e2                	shl    edx,cl
c0027b88:	89 d0                	mov    eax,edx
c0027b8a:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027b8f:	89 c3                	mov    ebx,eax
c0027b91:	c1 eb 08             	shr    ebx,0x8
c0027b94:	80 e2 7f             	and    dl,0x7f
c0027b97:	0f 95 c2             	setne  dl
c0027b9a:	09 da                	or     edx,ebx
c0027b9c:	83 e2 01             	and    edx,0x1
c0027b9f:	c1 e8 07             	shr    eax,0x7
c0027ba2:	21 c2                	and    edx,eax
c0027ba4:	b8 9e 00 00 00       	mov    eax,0x9e
c0027ba9:	29 c8                	sub    eax,ecx
c0027bab:	c1 e0 17             	shl    eax,0x17
c0027bae:	09 d8                	or     eax,ebx
c0027bb0:	01 d0                	add    eax,edx
c0027bb2:	5b                   	pop    ebx
c0027bb3:	5d                   	pop    ebp
c0027bb4:	c3                   	ret    

c0027bb5 <__fixsfsi>:
c0027bb5:	55                   	push   ebp
c0027bb6:	89 e5                	mov    ebp,esp
c0027bb8:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027bbb:	89 d1                	mov    ecx,edx
c0027bbd:	c1 e1 08             	shl    ecx,0x8
c0027bc0:	81 e1 00 ff ff 7f    	and    ecx,0x7fffff00
c0027bc6:	c1 fa 17             	sar    edx,0x17
c0027bc9:	78 1c                	js     c0027be7 <__fixsfsi+0x32>
c0027bcb:	83 ea 7f             	sub    edx,0x7f
c0027bce:	31 c0                	xor    eax,eax
c0027bd0:	83 fa 1e             	cmp    edx,0x1e
c0027bd3:	77 40                	ja     c0027c15 <__fixsfsi+0x60>
c0027bd5:	89 c8                	mov    eax,ecx
c0027bd7:	0d 00 00 00 80       	or     eax,0x80000000
c0027bdc:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027be1:	29 d1                	sub    ecx,edx
c0027be3:	d3 e8                	shr    eax,cl
c0027be5:	eb 2e                	jmp    c0027c15 <__fixsfsi+0x60>
c0027be7:	31 c0                	xor    eax,eax
c0027be9:	81 c2 81 00 00 00    	add    edx,0x81
c0027bef:	78 24                	js     c0027c15 <__fixsfsi+0x60>
c0027bf1:	83 fa 1e             	cmp    edx,0x1e
c0027bf4:	7e 09                	jle    c0027bff <__fixsfsi+0x4a>
c0027bf6:	83 fa 1f             	cmp    edx,0x1f
c0027bf9:	75 18                	jne    c0027c13 <__fixsfsi+0x5e>
c0027bfb:	85 c9                	test   ecx,ecx
c0027bfd:	75 14                	jne    c0027c13 <__fixsfsi+0x5e>
c0027bff:	89 c8                	mov    eax,ecx
c0027c01:	0d 00 00 00 80       	or     eax,0x80000000
c0027c06:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027c0b:	29 d1                	sub    ecx,edx
c0027c0d:	d3 e8                	shr    eax,cl
c0027c0f:	f7 d8                	neg    eax
c0027c11:	eb 02                	jmp    c0027c15 <__fixsfsi+0x60>
c0027c13:	31 c0                	xor    eax,eax
c0027c15:	5d                   	pop    ebp
c0027c16:	c3                   	ret    

c0027c17 <__fixunssfsi>:
c0027c17:	55                   	push   ebp
c0027c18:	89 e5                	mov    ebp,esp
c0027c1a:	53                   	push   ebx
c0027c1b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027c1e:	89 d3                	mov    ebx,edx
c0027c20:	c1 fb 17             	sar    ebx,0x17
c0027c23:	83 eb 7f             	sub    ebx,0x7f
c0027c26:	31 c0                	xor    eax,eax
c0027c28:	83 fb 1f             	cmp    ebx,0x1f
c0027c2b:	77 18                	ja     c0027c45 <__fixunssfsi+0x2e>
c0027c2d:	89 d0                	mov    eax,edx
c0027c2f:	c1 e0 08             	shl    eax,0x8
c0027c32:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0027c37:	0d 00 00 00 80       	or     eax,0x80000000
c0027c3c:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027c41:	29 d9                	sub    ecx,ebx
c0027c43:	d3 e8                	shr    eax,cl
c0027c45:	5b                   	pop    ebx
c0027c46:	5d                   	pop    ebp
c0027c47:	c3                   	ret    

c0027c48 <__cmpsf2>:
c0027c48:	55                   	push   ebp
c0027c49:	89 e5                	mov    ebp,esp
c0027c4b:	57                   	push   edi
c0027c4c:	56                   	push   esi
c0027c4d:	53                   	push   ebx
c0027c4e:	83 ec 24             	sub    esp,0x24
c0027c51:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027c54:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0027c57:	e8 4f 10 00 00       	call   c0028cab <__truncdfsf2>
c0027c5c:	5a                   	pop    edx
c0027c5d:	59                   	pop    ecx
c0027c5e:	89 c3                	mov    ebx,eax
c0027c60:	c1 e8 17             	shr    eax,0x17
c0027c63:	0f b6 f0             	movzx  esi,al
c0027c66:	89 d8                	mov    eax,ebx
c0027c68:	c1 e8 1f             	shr    eax,0x1f
c0027c6b:	31 c6                	xor    esi,eax
c0027c6d:	c1 e3 08             	shl    ebx,0x8
c0027c70:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0027c73:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0027c76:	e8 30 10 00 00       	call   c0028cab <__truncdfsf2>
c0027c7b:	83 c4 10             	add    esp,0x10
c0027c7e:	89 c1                	mov    ecx,eax
c0027c80:	c1 e9 17             	shr    ecx,0x17
c0027c83:	0f b6 c9             	movzx  ecx,cl
c0027c86:	89 c7                	mov    edi,eax
c0027c88:	c1 ef 1f             	shr    edi,0x1f
c0027c8b:	89 ca                	mov    edx,ecx
c0027c8d:	31 fa                	xor    edx,edi
c0027c8f:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0027c92:	c1 e0 08             	shl    eax,0x8
c0027c95:	89 c2                	mov    edx,eax
c0027c97:	89 d8                	mov    eax,ebx
c0027c99:	09 d0                	or     eax,edx
c0027c9b:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0027ca0:	09 f0                	or     eax,esi
c0027ca2:	75 08                	jne    c0027cac <__cmpsf2+0x64>
c0027ca4:	31 c0                	xor    eax,eax
c0027ca6:	39 f9                	cmp    ecx,edi
c0027ca8:	75 0c                	jne    c0027cb6 <__cmpsf2+0x6e>
c0027caa:	eb 29                	jmp    c0027cd5 <__cmpsf2+0x8d>
c0027cac:	b8 01 00 00 00       	mov    eax,0x1
c0027cb1:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c0027cb4:	7f 1f                	jg     c0027cd5 <__cmpsf2+0x8d>
c0027cb6:	83 c8 ff             	or     eax,0xffffffff
c0027cb9:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c0027cbc:	7c 17                	jl     c0027cd5 <__cmpsf2+0x8d>
c0027cbe:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0027cc4:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0027cca:	b8 01 00 00 00       	mov    eax,0x1
c0027ccf:	39 d3                	cmp    ebx,edx
c0027cd1:	77 02                	ja     c0027cd5 <__cmpsf2+0x8d>
c0027cd3:	19 c0                	sbb    eax,eax
c0027cd5:	8d 65 f4             	lea    esp,[ebp-0xc]
c0027cd8:	5b                   	pop    ebx
c0027cd9:	5e                   	pop    esi
c0027cda:	5f                   	pop    edi
c0027cdb:	5d                   	pop    ebp
c0027cdc:	c3                   	ret    

c0027cdd <__eqsf2>:
c0027cdd:	55                   	push   ebp
c0027cde:	89 e5                	mov    ebp,esp
c0027ce0:	83 ec 24             	sub    esp,0x24
c0027ce3:	6a 01                	push   0x1
c0027ce5:	83 ec 0c             	sub    esp,0xc
c0027ce8:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027ceb:	e8 df 10 00 00       	call   c0028dcf <__extendsfdf2>
c0027cf0:	83 c4 10             	add    esp,0x10
c0027cf3:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027cf6:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027cf9:	52                   	push   edx
c0027cfa:	50                   	push   eax
c0027cfb:	50                   	push   eax
c0027cfc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0027cff:	e8 cb 10 00 00       	call   c0028dcf <__extendsfdf2>
c0027d04:	59                   	pop    ecx
c0027d05:	59                   	pop    ecx
c0027d06:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027d09:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027d0c:	52                   	push   edx
c0027d0d:	50                   	push   eax
c0027d0e:	e8 35 ff ff ff       	call   c0027c48 <__cmpsf2>
c0027d13:	83 c4 20             	add    esp,0x20
c0027d16:	c9                   	leave  
c0027d17:	c3                   	ret    

c0027d18 <__nesf2>:
c0027d18:	eb c3                	jmp    c0027cdd <__eqsf2>

c0027d1a <__gtsf2>:
c0027d1a:	55                   	push   ebp
c0027d1b:	89 e5                	mov    ebp,esp
c0027d1d:	83 ec 24             	sub    esp,0x24
c0027d20:	6a ff                	push   0xffffffff
c0027d22:	83 ec 0c             	sub    esp,0xc
c0027d25:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027d28:	e8 a2 10 00 00       	call   c0028dcf <__extendsfdf2>
c0027d2d:	83 c4 10             	add    esp,0x10
c0027d30:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027d33:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027d36:	52                   	push   edx
c0027d37:	50                   	push   eax
c0027d38:	50                   	push   eax
c0027d39:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0027d3c:	e8 8e 10 00 00       	call   c0028dcf <__extendsfdf2>
c0027d41:	59                   	pop    ecx
c0027d42:	59                   	pop    ecx
c0027d43:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027d46:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027d49:	52                   	push   edx
c0027d4a:	50                   	push   eax
c0027d4b:	e8 f8 fe ff ff       	call   c0027c48 <__cmpsf2>
c0027d50:	83 c4 20             	add    esp,0x20
c0027d53:	c9                   	leave  
c0027d54:	c3                   	ret    

c0027d55 <__gesf2>:
c0027d55:	eb c3                	jmp    c0027d1a <__gtsf2>

c0027d57 <__ltsf2>:
c0027d57:	eb 84                	jmp    c0027cdd <__eqsf2>

c0027d59 <__lesf2>:
c0027d59:	eb 82                	jmp    c0027cdd <__eqsf2>

c0027d5b <__adddf3>:
c0027d5b:	55                   	push   ebp
c0027d5c:	89 e5                	mov    ebp,esp
c0027d5e:	57                   	push   edi
c0027d5f:	56                   	push   esi
c0027d60:	53                   	push   ebx
c0027d61:	83 ec 24             	sub    esp,0x24
c0027d64:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027d67:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027d6a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027d6d:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027d70:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0027d73:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0027d76:	89 c8                	mov    eax,ecx
c0027d78:	89 ce                	mov    esi,ecx
c0027d7a:	c1 fe 14             	sar    esi,0x14
c0027d7d:	89 75 e4             	mov    DWORD PTR [ebp-0x1c],esi
c0027d80:	89 fb                	mov    ebx,edi
c0027d82:	89 fa                	mov    edx,edi
c0027d84:	c1 e2 0b             	shl    edx,0xb
c0027d87:	c1 e0 0b             	shl    eax,0xb
c0027d8a:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0027d8f:	c1 eb 15             	shr    ebx,0x15
c0027d92:	09 d8                	or     eax,ebx
c0027d94:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0027d97:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0027d9a:	c1 fe 14             	sar    esi,0x14
c0027d9d:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c0027da0:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0027da3:	89 f3                	mov    ebx,esi
c0027da5:	c1 e3 0b             	shl    ebx,0xb
c0027da8:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c0027dab:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0027dae:	c1 e3 0b             	shl    ebx,0xb
c0027db1:	81 e3 00 f8 ff 7f    	and    ebx,0x7ffff800
c0027db7:	c1 ee 15             	shr    esi,0x15
c0027dba:	09 f3                	or     ebx,esi
c0027dbc:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
c0027dbf:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027dc2:	33 75 ec             	xor    esi,DWORD PTR [ebp-0x14]
c0027dc5:	0f 88 5f 02 00 00    	js     c002802a <__adddf3+0x2cf>
c0027dcb:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027dce:	2b 5d ec             	sub    ebx,DWORD PTR [ebp-0x14]
c0027dd1:	85 db                	test   ebx,ebx
c0027dd3:	0f 8e c7 00 00 00    	jle    c0027ea0 <__adddf3+0x145>
c0027dd9:	f7 45 ec ff 07 00 00 	test   DWORD PTR [ebp-0x14],0x7ff
c0027de0:	75 1a                	jne    c0027dfc <__adddf3+0xa1>
c0027de2:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027de5:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c0027de8:	0f 84 b2 05 00 00    	je     c00283a0 <__adddf3+0x645>
c0027dee:	4b                   	dec    ebx
c0027def:	75 23                	jne    c0027e14 <__adddf3+0xb9>
c0027df1:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0027df4:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0027df7:	e9 99 00 00 00       	jmp    c0027e95 <__adddf3+0x13a>
c0027dfc:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027dff:	f7 d6                	not    esi
c0027e01:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027e07:	0f 84 93 05 00 00    	je     c00283a0 <__adddf3+0x645>
c0027e0d:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c0027e14:	83 fb 1f             	cmp    ebx,0x1f
c0027e17:	7e 42                	jle    c0027e5b <__adddf3+0x100>
c0027e19:	83 fb 3f             	cmp    ebx,0x3f
c0027e1c:	0f 8f 7e 05 00 00    	jg     c00283a0 <__adddf3+0x645>
c0027e22:	83 e3 1f             	and    ebx,0x1f
c0027e25:	89 d9                	mov    ecx,ebx
c0027e27:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027e2a:	d3 ef                	shr    edi,cl
c0027e2c:	31 db                	xor    ebx,ebx
c0027e2e:	85 c9                	test   ecx,ecx
c0027e30:	74 15                	je     c0027e47 <__adddf3+0xec>
c0027e32:	be 20 00 00 00       	mov    esi,0x20
c0027e37:	29 ce                	sub    esi,ecx
c0027e39:	89 f1                	mov    ecx,esi
c0027e3b:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027e3e:	d3 e6                	shl    esi,cl
c0027e40:	31 db                	xor    ebx,ebx
c0027e42:	85 f6                	test   esi,esi
c0027e44:	0f 95 c3             	setne  bl
c0027e47:	31 c9                	xor    ecx,ecx
c0027e49:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0027e4d:	0f 95 c1             	setne  cl
c0027e50:	09 cf                	or     edi,ecx
c0027e52:	09 fb                	or     ebx,edi
c0027e54:	01 da                	add    edx,ebx
c0027e56:	83 d0 00             	adc    eax,0x0
c0027e59:	eb 3a                	jmp    c0027e95 <__adddf3+0x13a>
c0027e5b:	bf 20 00 00 00       	mov    edi,0x20
c0027e60:	29 df                	sub    edi,ebx
c0027e62:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027e65:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027e68:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0027e6b:	d3 e6                	shl    esi,cl
c0027e6d:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027e70:	88 d9                	mov    cl,bl
c0027e72:	d3 ef                	shr    edi,cl
c0027e74:	09 fe                	or     esi,edi
c0027e76:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027e79:	88 d9                	mov    cl,bl
c0027e7b:	d3 ef                	shr    edi,cl
c0027e7d:	89 fb                	mov    ebx,edi
c0027e7f:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027e82:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0027e85:	d3 e7                	shl    edi,cl
c0027e87:	85 ff                	test   edi,edi
c0027e89:	0f 95 c1             	setne  cl
c0027e8c:	0f b6 c9             	movzx  ecx,cl
c0027e8f:	09 ce                	or     esi,ecx
c0027e91:	01 f2                	add    edx,esi
c0027e93:	11 d8                	adc    eax,ebx
c0027e95:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027e98:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027e9b:	e9 52 01 00 00       	jmp    c0027ff2 <__adddf3+0x297>
c0027ea0:	0f 84 d5 00 00 00    	je     c0027f7b <__adddf3+0x220>
c0027ea6:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027ea9:	2b 5d e4             	sub    ebx,DWORD PTR [ebp-0x1c]
c0027eac:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027eaf:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027eb2:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c0027eb9:	75 20                	jne    c0027edb <__adddf3+0x180>
c0027ebb:	89 d6                	mov    esi,edx
c0027ebd:	09 c6                	or     esi,eax
c0027ebf:	0f 84 db 04 00 00    	je     c00283a0 <__adddf3+0x645>
c0027ec5:	4b                   	dec    ebx
c0027ec6:	75 29                	jne    c0027ef1 <__adddf3+0x196>
c0027ec8:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027ecb:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027ece:	01 d1                	add    ecx,edx
c0027ed0:	11 c6                	adc    esi,eax
c0027ed2:	89 f0                	mov    eax,esi
c0027ed4:	89 ca                	mov    edx,ecx
c0027ed6:	e9 17 01 00 00       	jmp    c0027ff2 <__adddf3+0x297>
c0027edb:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0027ede:	f7 d6                	not    esi
c0027ee0:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027ee6:	0f 84 b4 04 00 00    	je     c00283a0 <__adddf3+0x645>
c0027eec:	0d 00 00 00 80       	or     eax,0x80000000
c0027ef1:	83 fb 1f             	cmp    ebx,0x1f
c0027ef4:	7e 48                	jle    c0027f3e <__adddf3+0x1e3>
c0027ef6:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027ef9:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027efc:	83 fb 3f             	cmp    ebx,0x3f
c0027eff:	0f 8f 9b 04 00 00    	jg     c00283a0 <__adddf3+0x645>
c0027f05:	83 e3 1f             	and    ebx,0x1f
c0027f08:	89 d9                	mov    ecx,ebx
c0027f0a:	89 c7                	mov    edi,eax
c0027f0c:	d3 ef                	shr    edi,cl
c0027f0e:	31 db                	xor    ebx,ebx
c0027f10:	85 c9                	test   ecx,ecx
c0027f12:	74 12                	je     c0027f26 <__adddf3+0x1cb>
c0027f14:	be 20 00 00 00       	mov    esi,0x20
c0027f19:	29 ce                	sub    esi,ecx
c0027f1b:	89 f1                	mov    ecx,esi
c0027f1d:	d3 e0                	shl    eax,cl
c0027f1f:	31 db                	xor    ebx,ebx
c0027f21:	85 c0                	test   eax,eax
c0027f23:	0f 95 c3             	setne  bl
c0027f26:	31 c0                	xor    eax,eax
c0027f28:	85 d2                	test   edx,edx
c0027f2a:	0f 95 c0             	setne  al
c0027f2d:	09 c7                	or     edi,eax
c0027f2f:	09 fb                	or     ebx,edi
c0027f31:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027f34:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027f37:	01 da                	add    edx,ebx
c0027f39:	83 d6 00             	adc    esi,0x0
c0027f3c:	eb 39                	jmp    c0027f77 <__adddf3+0x21c>
c0027f3e:	be 20 00 00 00       	mov    esi,0x20
c0027f43:	29 de                	sub    esi,ebx
c0027f45:	89 c7                	mov    edi,eax
c0027f47:	89 f1                	mov    ecx,esi
c0027f49:	d3 e7                	shl    edi,cl
c0027f4b:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0027f4e:	89 d7                	mov    edi,edx
c0027f50:	88 d9                	mov    cl,bl
c0027f52:	d3 ef                	shr    edi,cl
c0027f54:	89 f9                	mov    ecx,edi
c0027f56:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027f59:	09 cf                	or     edi,ecx
c0027f5b:	88 d9                	mov    cl,bl
c0027f5d:	d3 e8                	shr    eax,cl
c0027f5f:	89 f1                	mov    ecx,esi
c0027f61:	d3 e2                	shl    edx,cl
c0027f63:	85 d2                	test   edx,edx
c0027f65:	0f 95 c2             	setne  dl
c0027f68:	0f b6 d2             	movzx  edx,dl
c0027f6b:	09 d7                	or     edi,edx
c0027f6d:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027f70:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027f73:	01 fa                	add    edx,edi
c0027f75:	11 c6                	adc    esi,eax
c0027f77:	89 f0                	mov    eax,esi
c0027f79:	eb 77                	jmp    c0027ff2 <__adddf3+0x297>
c0027f7b:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027f7e:	46                   	inc    esi
c0027f7f:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c0027f82:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0027f88:	75 41                	jne    c0027fcb <__adddf3+0x270>
c0027f8a:	89 d3                	mov    ebx,edx
c0027f8c:	09 c3                	or     ebx,eax
c0027f8e:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c0027f95:	75 27                	jne    c0027fbe <__adddf3+0x263>
c0027f97:	85 db                	test   ebx,ebx
c0027f99:	0f 84 fb 03 00 00    	je     c002839a <__adddf3+0x63f>
c0027f9f:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027fa2:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c0027fa5:	0f 84 f5 03 00 00    	je     c00283a0 <__adddf3+0x645>
c0027fab:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0027fae:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0027fb1:	85 c0                	test   eax,eax
c0027fb3:	0f 89 91 03 00 00    	jns    c002834a <__adddf3+0x5ef>
c0027fb9:	e9 85 03 00 00       	jmp    c0028343 <__adddf3+0x5e8>
c0027fbe:	85 db                	test   ebx,ebx
c0027fc0:	0f 85 da 03 00 00    	jne    c00283a0 <__adddf3+0x645>
c0027fc6:	e9 cf 03 00 00       	jmp    c002839a <__adddf3+0x63f>
c0027fcb:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0027fce:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0027fd1:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027fd4:	f7 d1                	not    ecx
c0027fd6:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0027fdc:	0f 84 70 03 00 00    	je     c0028352 <__adddf3+0x5f7>
c0027fe2:	d1 ea                	shr    edx,1
c0027fe4:	89 c1                	mov    ecx,eax
c0027fe6:	c1 e1 1f             	shl    ecx,0x1f
c0027fe9:	09 ca                	or     edx,ecx
c0027feb:	d1 e8                	shr    eax,1
c0027fed:	e9 6f 03 00 00       	jmp    c0028361 <__adddf3+0x606>
c0027ff2:	85 c0                	test   eax,eax
c0027ff4:	0f 89 67 03 00 00    	jns    c0028361 <__adddf3+0x606>
c0027ffa:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c0027ffd:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0028000:	f7 d1                	not    ecx
c0028002:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0028008:	0f 84 44 03 00 00    	je     c0028352 <__adddf3+0x5f7>
c002800e:	89 d1                	mov    ecx,edx
c0028010:	d1 e9                	shr    ecx,1
c0028012:	83 e2 01             	and    edx,0x1
c0028015:	09 ca                	or     edx,ecx
c0028017:	89 c1                	mov    ecx,eax
c0028019:	c1 e1 1f             	shl    ecx,0x1f
c002801c:	09 ca                	or     edx,ecx
c002801e:	d1 e8                	shr    eax,1
c0028020:	25 ff ff ff 3f       	and    eax,0x3fffffff
c0028025:	e9 37 03 00 00       	jmp    c0028361 <__adddf3+0x606>
c002802a:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c002802d:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0028033:	89 75 d4             	mov    DWORD PTR [ebp-0x2c],esi
c0028036:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0028039:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c002803f:	29 de                	sub    esi,ebx
c0028041:	85 f6                	test   esi,esi
c0028043:	0f 8e bd 00 00 00    	jle    c0028106 <__adddf3+0x3ab>
c0028049:	85 db                	test   ebx,ebx
c002804b:	75 17                	jne    c0028064 <__adddf3+0x309>
c002804d:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0028050:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0028053:	0f 84 47 03 00 00    	je     c00283a0 <__adddf3+0x645>
c0028059:	4e                   	dec    esi
c002805a:	75 20                	jne    c002807c <__adddf3+0x321>
c002805c:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c002805f:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c0028062:	eb 5b                	jmp    c00280bf <__adddf3+0x364>
c0028064:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0028067:	f7 d3                	not    ebx
c0028069:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c002806f:	0f 84 2b 03 00 00    	je     c00283a0 <__adddf3+0x645>
c0028075:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c002807c:	83 fe 1f             	cmp    esi,0x1f
c002807f:	7e 49                	jle    c00280ca <__adddf3+0x36f>
c0028081:	83 fe 3f             	cmp    esi,0x3f
c0028084:	0f 8f 16 03 00 00    	jg     c00283a0 <__adddf3+0x645>
c002808a:	83 e6 1f             	and    esi,0x1f
c002808d:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0028090:	89 f1                	mov    ecx,esi
c0028092:	d3 ef                	shr    edi,cl
c0028094:	31 db                	xor    ebx,ebx
c0028096:	85 f6                	test   esi,esi
c0028098:	74 13                	je     c00280ad <__adddf3+0x352>
c002809a:	b9 20 00 00 00       	mov    ecx,0x20
c002809f:	29 f1                	sub    ecx,esi
c00280a1:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00280a4:	d3 e6                	shl    esi,cl
c00280a6:	31 db                	xor    ebx,ebx
c00280a8:	85 f6                	test   esi,esi
c00280aa:	0f 95 c3             	setne  bl
c00280ad:	31 c9                	xor    ecx,ecx
c00280af:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c00280b3:	0f 95 c1             	setne  cl
c00280b6:	09 cf                	or     edi,ecx
c00280b8:	09 fb                	or     ebx,edi
c00280ba:	29 da                	sub    edx,ebx
c00280bc:	83 d8 00             	sbb    eax,0x0
c00280bf:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00280c2:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00280c5:	e9 aa 01 00 00       	jmp    c0028274 <__adddf3+0x519>
c00280ca:	bf 20 00 00 00       	mov    edi,0x20
c00280cf:	29 f7                	sub    edi,esi
c00280d1:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00280d4:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c00280d7:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c00280da:	d3 e3                	shl    ebx,cl
c00280dc:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00280df:	89 f1                	mov    ecx,esi
c00280e1:	d3 ef                	shr    edi,cl
c00280e3:	09 fb                	or     ebx,edi
c00280e5:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c00280e8:	89 f1                	mov    ecx,esi
c00280ea:	d3 ef                	shr    edi,cl
c00280ec:	89 fe                	mov    esi,edi
c00280ee:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00280f1:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c00280f4:	d3 e7                	shl    edi,cl
c00280f6:	85 ff                	test   edi,edi
c00280f8:	0f 95 c1             	setne  cl
c00280fb:	0f b6 c9             	movzx  ecx,cl
c00280fe:	09 cb                	or     ebx,ecx
c0028100:	29 da                	sub    edx,ebx
c0028102:	19 f0                	sbb    eax,esi
c0028104:	eb b9                	jmp    c00280bf <__adddf3+0x364>
c0028106:	0f 84 cd 00 00 00    	je     c00281d9 <__adddf3+0x47e>
c002810c:	2b 5d d4             	sub    ebx,DWORD PTR [ebp-0x2c]
c002810f:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0028112:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0028115:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0028119:	75 1b                	jne    c0028136 <__adddf3+0x3db>
c002811b:	89 d6                	mov    esi,edx
c002811d:	09 c6                	or     esi,eax
c002811f:	0f 84 7b 02 00 00    	je     c00283a0 <__adddf3+0x645>
c0028125:	4b                   	dec    ebx
c0028126:	75 24                	jne    c002814c <__adddf3+0x3f1>
c0028128:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002812b:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c002812e:	29 d1                	sub    ecx,edx
c0028130:	19 c6                	sbb    esi,eax
c0028132:	89 ca                	mov    edx,ecx
c0028134:	eb 61                	jmp    c0028197 <__adddf3+0x43c>
c0028136:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0028139:	f7 d6                	not    esi
c002813b:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0028141:	0f 84 59 02 00 00    	je     c00283a0 <__adddf3+0x645>
c0028147:	0d 00 00 00 80       	or     eax,0x80000000
c002814c:	83 fb 1f             	cmp    ebx,0x1f
c002814f:	7e 4d                	jle    c002819e <__adddf3+0x443>
c0028151:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0028154:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0028157:	83 fb 3f             	cmp    ebx,0x3f
c002815a:	0f 8f 40 02 00 00    	jg     c00283a0 <__adddf3+0x645>
c0028160:	83 e3 1f             	and    ebx,0x1f
c0028163:	89 d9                	mov    ecx,ebx
c0028165:	89 c7                	mov    edi,eax
c0028167:	d3 ef                	shr    edi,cl
c0028169:	31 db                	xor    ebx,ebx
c002816b:	85 c9                	test   ecx,ecx
c002816d:	74 12                	je     c0028181 <__adddf3+0x426>
c002816f:	be 20 00 00 00       	mov    esi,0x20
c0028174:	29 ce                	sub    esi,ecx
c0028176:	89 f1                	mov    ecx,esi
c0028178:	d3 e0                	shl    eax,cl
c002817a:	31 db                	xor    ebx,ebx
c002817c:	85 c0                	test   eax,eax
c002817e:	0f 95 c3             	setne  bl
c0028181:	31 c0                	xor    eax,eax
c0028183:	85 d2                	test   edx,edx
c0028185:	0f 95 c0             	setne  al
c0028188:	09 c7                	or     edi,eax
c002818a:	09 fb                	or     ebx,edi
c002818c:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002818f:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0028192:	29 da                	sub    edx,ebx
c0028194:	83 de 00             	sbb    esi,0x0
c0028197:	89 f0                	mov    eax,esi
c0028199:	e9 d6 00 00 00       	jmp    c0028274 <__adddf3+0x519>
c002819e:	be 20 00 00 00       	mov    esi,0x20
c00281a3:	29 de                	sub    esi,ebx
c00281a5:	89 c7                	mov    edi,eax
c00281a7:	89 f1                	mov    ecx,esi
c00281a9:	d3 e7                	shl    edi,cl
c00281ab:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c00281ae:	89 d7                	mov    edi,edx
c00281b0:	88 d9                	mov    cl,bl
c00281b2:	d3 ef                	shr    edi,cl
c00281b4:	89 f9                	mov    ecx,edi
c00281b6:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00281b9:	09 cf                	or     edi,ecx
c00281bb:	88 d9                	mov    cl,bl
c00281bd:	d3 e8                	shr    eax,cl
c00281bf:	89 f1                	mov    ecx,esi
c00281c1:	d3 e2                	shl    edx,cl
c00281c3:	85 d2                	test   edx,edx
c00281c5:	0f 95 c2             	setne  dl
c00281c8:	0f b6 d2             	movzx  edx,dl
c00281cb:	09 d7                	or     edi,edx
c00281cd:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00281d0:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00281d3:	29 fa                	sub    edx,edi
c00281d5:	19 c6                	sbb    esi,eax
c00281d7:	eb be                	jmp    c0028197 <__adddf3+0x43c>
c00281d9:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00281dc:	8d 5e 01             	lea    ebx,[esi+0x1]
c00281df:	81 e3 fe 07 00 00    	and    ebx,0x7fe
c00281e5:	75 6a                	jne    c0028251 <__adddf3+0x4f6>
c00281e7:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c00281eb:	75 58                	jne    c0028245 <__adddf3+0x4ea>
c00281ed:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c00281f0:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c00281f3:	89 d6                	mov    esi,edx
c00281f5:	09 c6                	or     esi,eax
c00281f7:	75 17                	jne    c0028210 <__adddf3+0x4b5>
c00281f9:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00281fc:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00281ff:	85 db                	test   ebx,ebx
c0028201:	0f 85 99 01 00 00    	jne    c00283a0 <__adddf3+0x645>
c0028207:	31 ff                	xor    edi,edi
c0028209:	31 c9                	xor    ecx,ecx
c002820b:	e9 90 01 00 00       	jmp    c00283a0 <__adddf3+0x645>
c0028210:	85 db                	test   ebx,ebx
c0028212:	0f 84 88 01 00 00    	je     c00283a0 <__adddf3+0x645>
c0028218:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c002821b:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c002821e:	85 c0                	test   eax,eax
c0028220:	79 10                	jns    c0028232 <__adddf3+0x4d7>
c0028222:	31 c9                	xor    ecx,ecx
c0028224:	f7 da                	neg    edx
c0028226:	0f 95 c1             	setne  cl
c0028229:	01 c8                	add    eax,ecx
c002822b:	f7 d8                	neg    eax
c002822d:	e9 2f 01 00 00       	jmp    c0028361 <__adddf3+0x606>
c0028232:	31 ff                	xor    edi,edi
c0028234:	31 c9                	xor    ecx,ecx
c0028236:	89 c3                	mov    ebx,eax
c0028238:	09 d3                	or     ebx,edx
c002823a:	0f 84 60 01 00 00    	je     c00283a0 <__adddf3+0x645>
c0028240:	e9 05 01 00 00       	jmp    c002834a <__adddf3+0x5ef>
c0028245:	31 ff                	xor    edi,edi
c0028247:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c002824c:	e9 4f 01 00 00       	jmp    c00283a0 <__adddf3+0x645>
c0028251:	89 c1                	mov    ecx,eax
c0028253:	89 d0                	mov    eax,edx
c0028255:	2b 45 e0             	sub    eax,DWORD PTR [ebp-0x20]
c0028258:	1b 4d e8             	sbb    ecx,DWORD PTR [ebp-0x18]
c002825b:	89 ca                	mov    edx,ecx
c002825d:	85 c9                	test   ecx,ecx
c002825f:	79 2c                	jns    c002828d <__adddf3+0x532>
c0028261:	31 c9                	xor    ecx,ecx
c0028263:	f7 d8                	neg    eax
c0028265:	0f 95 c1             	setne  cl
c0028268:	01 ca                	add    edx,ecx
c002826a:	f7 da                	neg    edx
c002826c:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c002826f:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0028272:	eb 19                	jmp    c002828d <__adddf3+0x532>
c0028274:	85 c0                	test   eax,eax
c0028276:	0f 89 e5 00 00 00    	jns    c0028361 <__adddf3+0x606>
c002827c:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0028281:	89 c1                	mov    ecx,eax
c0028283:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0028286:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0028289:	89 d0                	mov    eax,edx
c002828b:	89 ca                	mov    edx,ecx
c002828d:	85 d2                	test   edx,edx
c002828f:	74 59                	je     c00282ea <__adddf3+0x58f>
c0028291:	0f bd da             	bsr    ebx,edx
c0028294:	83 f3 1f             	xor    ebx,0x1f
c0028297:	88 d9                	mov    cl,bl
c0028299:	d3 e2                	shl    edx,cl
c002829b:	bf 20 00 00 00       	mov    edi,0x20
c00282a0:	89 f9                	mov    ecx,edi
c00282a2:	29 d9                	sub    ecx,ebx
c00282a4:	89 c6                	mov    esi,eax
c00282a6:	d3 ee                	shr    esi,cl
c00282a8:	09 d6                	or     esi,edx
c00282aa:	88 d9                	mov    cl,bl
c00282ac:	d3 e0                	shl    eax,cl
c00282ae:	89 c2                	mov    edx,eax
c00282b0:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00282b3:	25 ff 07 00 00       	and    eax,0x7ff
c00282b8:	39 d8                	cmp    eax,ebx
c00282ba:	7f 22                	jg     c00282de <__adddf3+0x583>
c00282bc:	29 c3                	sub    ebx,eax
c00282be:	43                   	inc    ebx
c00282bf:	88 d9                	mov    cl,bl
c00282c1:	d3 ea                	shr    edx,cl
c00282c3:	29 df                	sub    edi,ebx
c00282c5:	89 f9                	mov    ecx,edi
c00282c7:	89 f0                	mov    eax,esi
c00282c9:	d3 e0                	shl    eax,cl
c00282cb:	09 c2                	or     edx,eax
c00282cd:	89 f0                	mov    eax,esi
c00282cf:	88 d9                	mov    cl,bl
c00282d1:	d3 e8                	shr    eax,cl
c00282d3:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00282d6:	81 e7 00 f8 ff ff    	and    edi,0xfffff800
c00282dc:	eb 6f                	jmp    c002834d <__adddf3+0x5f2>
c00282de:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00282e1:	29 d8                	sub    eax,ebx
c00282e3:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00282e6:	89 f0                	mov    eax,esi
c00282e8:	eb 59                	jmp    c0028343 <__adddf3+0x5e8>
c00282ea:	85 c0                	test   eax,eax
c00282ec:	74 6a                	je     c0028358 <__adddf3+0x5fd>
c00282ee:	0f bd c8             	bsr    ecx,eax
c00282f1:	83 f1 1f             	xor    ecx,0x1f
c00282f4:	d3 e0                	shl    eax,cl
c00282f6:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c00282f9:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00282ff:	83 c1 20             	add    ecx,0x20
c0028302:	39 cb                	cmp    ebx,ecx
c0028304:	7f 35                	jg     c002833b <__adddf3+0x5e0>
c0028306:	29 d9                	sub    ecx,ebx
c0028308:	8d 71 01             	lea    esi,[ecx+0x1]
c002830b:	83 fe 1f             	cmp    esi,0x1f
c002830e:	7e 09                	jle    c0028319 <__adddf3+0x5be>
c0028310:	83 e9 1f             	sub    ecx,0x1f
c0028313:	d3 e8                	shr    eax,cl
c0028315:	89 c3                	mov    ebx,eax
c0028317:	eb 11                	jmp    c002832a <__adddf3+0x5cf>
c0028319:	b9 20 00 00 00       	mov    ecx,0x20
c002831e:	29 f1                	sub    ecx,esi
c0028320:	89 c3                	mov    ebx,eax
c0028322:	d3 e3                	shl    ebx,cl
c0028324:	89 f1                	mov    ecx,esi
c0028326:	d3 e8                	shr    eax,cl
c0028328:	89 c2                	mov    edx,eax
c002832a:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002832d:	25 00 f8 ff ff       	and    eax,0xfffff800
c0028332:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0028335:	89 d0                	mov    eax,edx
c0028337:	89 da                	mov    edx,ebx
c0028339:	eb 26                	jmp    c0028361 <__adddf3+0x606>
c002833b:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002833e:	29 cf                	sub    edi,ecx
c0028340:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028343:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0028348:	eb 17                	jmp    c0028361 <__adddf3+0x606>
c002834a:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002834d:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028350:	eb 0f                	jmp    c0028361 <__adddf3+0x606>
c0028352:	31 d2                	xor    edx,edx
c0028354:	31 c0                	xor    eax,eax
c0028356:	eb 09                	jmp    c0028361 <__adddf3+0x606>
c0028358:	89 c2                	mov    edx,eax
c002835a:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0028361:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0028364:	c1 e1 14             	shl    ecx,0x14
c0028367:	89 c3                	mov    ebx,eax
c0028369:	c1 eb 0b             	shr    ebx,0xb
c002836c:	09 d9                	or     ecx,ebx
c002836e:	89 d3                	mov    ebx,edx
c0028370:	c1 eb 0b             	shr    ebx,0xb
c0028373:	c1 e0 15             	shl    eax,0x15
c0028376:	09 d8                	or     eax,ebx
c0028378:	89 c7                	mov    edi,eax
c002837a:	f7 c2 ff 03 00 00    	test   edx,0x3ff
c0028380:	0f 95 c0             	setne  al
c0028383:	89 c6                	mov    esi,eax
c0028385:	09 f3                	or     ebx,esi
c0028387:	83 e3 01             	and    ebx,0x1
c002838a:	c1 ea 0a             	shr    edx,0xa
c002838d:	21 da                	and    edx,ebx
c002838f:	89 f8                	mov    eax,edi
c0028391:	01 d0                	add    eax,edx
c0028393:	83 d1 00             	adc    ecx,0x0
c0028396:	89 c7                	mov    edi,eax
c0028398:	eb 06                	jmp    c00283a0 <__adddf3+0x645>
c002839a:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c002839d:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00283a0:	89 f8                	mov    eax,edi
c00283a2:	89 ca                	mov    edx,ecx
c00283a4:	83 c4 24             	add    esp,0x24
c00283a7:	5b                   	pop    ebx
c00283a8:	5e                   	pop    esi
c00283a9:	5f                   	pop    edi
c00283aa:	5d                   	pop    ebp
c00283ab:	c3                   	ret    

c00283ac <__subdf3>:
c00283ac:	55                   	push   ebp
c00283ad:	89 e5                	mov    ebp,esp
c00283af:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00283b2:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c00283b5:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c00283bb:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c00283be:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c00283c1:	5d                   	pop    ebp
c00283c2:	e9 94 f9 ff ff       	jmp    c0027d5b <__adddf3>

c00283c7 <__negdf2>:
c00283c7:	55                   	push   ebp
c00283c8:	89 e5                	mov    ebp,esp
c00283ca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00283cd:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00283d0:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c00283d6:	5d                   	pop    ebp
c00283d7:	c3                   	ret    

c00283d8 <__muldf3>:
c00283d8:	55                   	push   ebp
c00283d9:	89 e5                	mov    ebp,esp
c00283db:	57                   	push   edi
c00283dc:	56                   	push   esi
c00283dd:	53                   	push   ebx
c00283de:	83 ec 24             	sub    esp,0x24
c00283e1:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c00283e4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00283e7:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00283ea:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00283ed:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c00283f0:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00283f3:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00283f6:	89 c8                	mov    eax,ecx
c00283f8:	c1 f8 14             	sar    eax,0x14
c00283fb:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00283fe:	89 f8                	mov    eax,edi
c0028400:	89 fb                	mov    ebx,edi
c0028402:	c1 e3 0b             	shl    ebx,0xb
c0028405:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
c0028408:	c1 e1 0b             	shl    ecx,0xb
c002840b:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0028411:	c1 e8 15             	shr    eax,0x15
c0028414:	09 c1                	or     ecx,eax
c0028416:	89 d6                	mov    esi,edx
c0028418:	89 d0                	mov    eax,edx
c002841a:	c1 f8 14             	sar    eax,0x14
c002841d:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0028420:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0028423:	89 c3                	mov    ebx,eax
c0028425:	c1 e3 0b             	shl    ebx,0xb
c0028428:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c002842b:	c1 e6 0b             	shl    esi,0xb
c002842e:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0028434:	c1 e8 15             	shr    eax,0x15
c0028437:	09 c6                	or     esi,eax
c0028439:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c002843c:	25 ff 07 00 00       	and    eax,0x7ff
c0028441:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0028444:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0028447:	25 ff 07 00 00       	and    eax,0x7ff
c002844c:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c002844f:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0028452:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0028455:	8d 9c 18 02 fc ff ff 	lea    ebx,[eax+ebx*1-0x3fe]
c002845c:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c002845f:	40                   	inc    eax
c0028460:	a9 fe 07 00 00       	test   eax,0x7fe
c0028465:	0f 85 8d 00 00 00    	jne    c00284f8 <__muldf3+0x120>
c002846b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002846e:	09 c8                	or     eax,ecx
c0028470:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c0028474:	74 44                	je     c00284ba <__muldf3+0xe2>
c0028476:	85 c0                	test   eax,eax
c0028478:	0f 85 31 02 00 00    	jne    c00286af <__muldf3+0x2d7>
c002847e:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0028481:	40                   	inc    eax
c0028482:	a9 fe 07 00 00       	test   eax,0x7fe
c0028487:	75 13                	jne    c002849c <__muldf3+0xc4>
c0028489:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c002848c:	09 f1                	or     ecx,esi
c002848e:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0028492:	74 22                	je     c00284b6 <__muldf3+0xde>
c0028494:	85 c9                	test   ecx,ecx
c0028496:	0f 85 0d 02 00 00    	jne    c00286a9 <__muldf3+0x2d1>
c002849c:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
c00284a0:	0f 89 09 02 00 00    	jns    c00286af <__muldf3+0x2d7>
c00284a6:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00284a9:	05 00 00 00 80       	add    eax,0x80000000
c00284ae:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00284b1:	e9 f9 01 00 00       	jmp    c00286af <__muldf3+0x2d7>
c00284b6:	85 c9                	test   ecx,ecx
c00284b8:	eb 2e                	jmp    c00284e8 <__muldf3+0x110>
c00284ba:	85 c0                	test   eax,eax
c00284bc:	74 20                	je     c00284de <__muldf3+0x106>
c00284be:	8d 04 09             	lea    eax,[ecx+ecx*1]
c00284c1:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00284c4:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00284c7:	c1 ef 1f             	shr    edi,0x1f
c00284ca:	8b 4d e4             	mov    ecx,DWORD PTR [ebp-0x1c]
c00284cd:	01 4d e4             	add    DWORD PTR [ebp-0x1c],ecx
c00284d0:	8d 43 ff             	lea    eax,[ebx-0x1]
c00284d3:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00284d6:	09 f9                	or     ecx,edi
c00284d8:	78 1e                	js     c00284f8 <__muldf3+0x120>
c00284da:	89 c3                	mov    ebx,eax
c00284dc:	eb e0                	jmp    c00284be <__muldf3+0xe6>
c00284de:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00284e1:	f7 d0                	not    eax
c00284e3:	a9 ff 07 00 00       	test   eax,0x7ff
c00284e8:	75 b2                	jne    c002849c <__muldf3+0xc4>
c00284ea:	31 ff                	xor    edi,edi
c00284ec:	c7 45 ec 00 00 f8 7f 	mov    DWORD PTR [ebp-0x14],0x7ff80000
c00284f3:	e9 b7 01 00 00       	jmp    c00286af <__muldf3+0x2d7>
c00284f8:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00284fb:	40                   	inc    eax
c00284fc:	a9 fe 07 00 00       	test   eax,0x7fe
c0028501:	75 57                	jne    c002855a <__muldf3+0x182>
c0028503:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0028506:	09 f0                	or     eax,esi
c0028508:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c002850c:	74 23                	je     c0028531 <__muldf3+0x159>
c002850e:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0028512:	0f 89 91 01 00 00    	jns    c00286a9 <__muldf3+0x2d1>
c0028518:	85 c0                	test   eax,eax
c002851a:	0f 85 89 01 00 00    	jne    c00286a9 <__muldf3+0x2d1>
c0028520:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0028523:	8d 82 00 00 00 80    	lea    eax,[edx-0x80000000]
c0028529:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002852c:	e9 7e 01 00 00       	jmp    c00286af <__muldf3+0x2d7>
c0028531:	85 c0                	test   eax,eax
c0028533:	75 0c                	jne    c0028541 <__muldf3+0x169>
c0028535:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0028539:	0f 89 6a 01 00 00    	jns    c00286a9 <__muldf3+0x2d1>
c002853f:	eb df                	jmp    c0028520 <__muldf3+0x148>
c0028541:	01 f6                	add    esi,esi
c0028543:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0028546:	c1 ea 1f             	shr    edx,0x1f
c0028549:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c002854c:	01 7d e0             	add    DWORD PTR [ebp-0x20],edi
c002854f:	8d 43 ff             	lea    eax,[ebx-0x1]
c0028552:	09 d6                	or     esi,edx
c0028554:	78 04                	js     c002855a <__muldf3+0x182>
c0028556:	89 c3                	mov    ebx,eax
c0028558:	eb e7                	jmp    c0028541 <__muldf3+0x169>
c002855a:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0028560:	81 ce 00 00 00 80    	or     esi,0x80000000
c0028566:	89 c8                	mov    eax,ecx
c0028568:	f7 e6                	mul    esi
c002856a:	89 55 d8             	mov    DWORD PTR [ebp-0x28],edx
c002856d:	89 c7                	mov    edi,eax
c002856f:	89 c8                	mov    eax,ecx
c0028571:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0028574:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0028577:	89 c1                	mov    ecx,eax
c0028579:	89 f0                	mov    eax,esi
c002857b:	f7 65 e4             	mul    DWORD PTR [ebp-0x1c]
c002857e:	89 55 d0             	mov    DWORD PTR [ebp-0x30],edx
c0028581:	89 c6                	mov    esi,eax
c0028583:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0028586:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0028589:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c002858c:	31 c0                	xor    eax,eax
c002858e:	01 f1                	add    ecx,esi
c0028590:	0f 92 c0             	setb   al
c0028593:	03 7d d4             	add    edi,DWORD PTR [ebp-0x2c]
c0028596:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0028599:	83 d6 00             	adc    esi,0x0
c002859c:	01 c7                	add    edi,eax
c002859e:	83 d6 00             	adc    esi,0x0
c00285a1:	01 ca                	add    edx,ecx
c00285a3:	0f 92 c1             	setb   cl
c00285a6:	0f b6 c9             	movzx  ecx,cl
c00285a9:	03 7d d0             	add    edi,DWORD PTR [ebp-0x30]
c00285ac:	83 d6 00             	adc    esi,0x0
c00285af:	01 cf                	add    edi,ecx
c00285b1:	83 d6 00             	adc    esi,0x0
c00285b4:	31 c9                	xor    ecx,ecx
c00285b6:	0b 55 e4             	or     edx,DWORD PTR [ebp-0x1c]
c00285b9:	0f 95 c1             	setne  cl
c00285bc:	09 cf                	or     edi,ecx
c00285be:	85 f6                	test   esi,esi
c00285c0:	78 0c                	js     c00285ce <__muldf3+0x1f6>
c00285c2:	01 f6                	add    esi,esi
c00285c4:	89 f8                	mov    eax,edi
c00285c6:	c1 e8 1f             	shr    eax,0x1f
c00285c9:	09 c6                	or     esi,eax
c00285cb:	01 ff                	add    edi,edi
c00285cd:	4b                   	dec    ebx
c00285ce:	81 fb fe 07 00 00    	cmp    ebx,0x7fe
c00285d4:	0f 8f 85 00 00 00    	jg     c002865f <__muldf3+0x287>
c00285da:	81 e6 ff ff ff 7f    	and    esi,0x7fffffff
c00285e0:	85 db                	test   ebx,ebx
c00285e2:	0f 8f 84 00 00 00    	jg     c002866c <__muldf3+0x294>
c00285e8:	83 fb cc             	cmp    ebx,0xffffffcc
c00285eb:	7c 79                	jl     c0028666 <__muldf3+0x28e>
c00285ed:	ba 01 00 00 00       	mov    edx,0x1
c00285f2:	29 da                	sub    edx,ebx
c00285f4:	81 ce 00 00 00 80    	or     esi,0x80000000
c00285fa:	83 fa 1f             	cmp    edx,0x1f
c00285fd:	7e 30                	jle    c002862f <__muldf3+0x257>
c00285ff:	83 fa 20             	cmp    edx,0x20
c0028602:	75 0b                	jne    c002860f <__muldf3+0x237>
c0028604:	31 c0                	xor    eax,eax
c0028606:	85 ff                	test   edi,edi
c0028608:	0f 95 c0             	setne  al
c002860b:	89 c7                	mov    edi,eax
c002860d:	eb 1a                	jmp    c0028629 <__muldf3+0x251>
c002860f:	8d 4b 3f             	lea    ecx,[ebx+0x3f]
c0028612:	89 f0                	mov    eax,esi
c0028614:	d3 e0                	shl    eax,cl
c0028616:	09 f8                	or     eax,edi
c0028618:	0f 95 c0             	setne  al
c002861b:	0f b6 c0             	movzx  eax,al
c002861e:	89 c7                	mov    edi,eax
c0028620:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0028625:	29 d9                	sub    ecx,ebx
c0028627:	d3 ee                	shr    esi,cl
c0028629:	09 f7                	or     edi,esi
c002862b:	31 db                	xor    ebx,ebx
c002862d:	eb 3b                	jmp    c002866a <__muldf3+0x292>
c002862f:	83 c3 1f             	add    ebx,0x1f
c0028632:	89 f0                	mov    eax,esi
c0028634:	88 d9                	mov    cl,bl
c0028636:	d3 e0                	shl    eax,cl
c0028638:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002863b:	89 f8                	mov    eax,edi
c002863d:	88 d1                	mov    cl,dl
c002863f:	d3 e8                	shr    eax,cl
c0028641:	89 c1                	mov    ecx,eax
c0028643:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0028646:	09 c8                	or     eax,ecx
c0028648:	88 d9                	mov    cl,bl
c002864a:	d3 e7                	shl    edi,cl
c002864c:	31 db                	xor    ebx,ebx
c002864e:	85 ff                	test   edi,edi
c0028650:	0f 95 c3             	setne  bl
c0028653:	89 df                	mov    edi,ebx
c0028655:	09 c7                	or     edi,eax
c0028657:	88 d1                	mov    cl,dl
c0028659:	d3 ee                	shr    esi,cl
c002865b:	31 db                	xor    ebx,ebx
c002865d:	eb 0d                	jmp    c002866c <__muldf3+0x294>
c002865f:	bb ff 07 00 00       	mov    ebx,0x7ff
c0028664:	eb 02                	jmp    c0028668 <__muldf3+0x290>
c0028666:	31 db                	xor    ebx,ebx
c0028668:	31 ff                	xor    edi,edi
c002866a:	31 f6                	xor    esi,esi
c002866c:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c002866f:	33 45 e8             	xor    eax,DWORD PTR [ebp-0x18]
c0028672:	25 00 f8 ff ff       	and    eax,0xfffff800
c0028677:	09 c3                	or     ebx,eax
c0028679:	c1 e3 14             	shl    ebx,0x14
c002867c:	89 f0                	mov    eax,esi
c002867e:	c1 e8 0b             	shr    eax,0xb
c0028681:	09 c3                	or     ebx,eax
c0028683:	89 f8                	mov    eax,edi
c0028685:	c1 e8 0b             	shr    eax,0xb
c0028688:	c1 e6 15             	shl    esi,0x15
c002868b:	09 c6                	or     esi,eax
c002868d:	f7 c7 ff 03 00 00    	test   edi,0x3ff
c0028693:	0f 95 c1             	setne  cl
c0028696:	09 c8                	or     eax,ecx
c0028698:	83 e0 01             	and    eax,0x1
c002869b:	c1 ef 0a             	shr    edi,0xa
c002869e:	21 c7                	and    edi,eax
c00286a0:	01 f7                	add    edi,esi
c00286a2:	83 d3 00             	adc    ebx,0x0
c00286a5:	89 da                	mov    edx,ebx
c00286a7:	eb 03                	jmp    c00286ac <__muldf3+0x2d4>
c00286a9:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c00286ac:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c00286af:	89 f8                	mov    eax,edi
c00286b1:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00286b4:	83 c4 24             	add    esp,0x24
c00286b7:	5b                   	pop    ebx
c00286b8:	5e                   	pop    esi
c00286b9:	5f                   	pop    edi
c00286ba:	5d                   	pop    ebp
c00286bb:	c3                   	ret    

c00286bc <__divdf3>:
c00286bc:	55                   	push   ebp
c00286bd:	89 e5                	mov    ebp,esp
c00286bf:	57                   	push   edi
c00286c0:	56                   	push   esi
c00286c1:	53                   	push   ebx
c00286c2:	83 ec 2c             	sub    esp,0x2c
c00286c5:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c00286c8:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00286cb:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00286ce:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c00286d1:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c00286d4:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00286d7:	89 ce                	mov    esi,ecx
c00286d9:	89 c8                	mov    eax,ecx
c00286db:	c1 f8 14             	sar    eax,0x14
c00286de:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00286e1:	89 f8                	mov    eax,edi
c00286e3:	89 fb                	mov    ebx,edi
c00286e5:	c1 e3 0b             	shl    ebx,0xb
c00286e8:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c00286eb:	c1 e6 0b             	shl    esi,0xb
c00286ee:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c00286f4:	c1 e8 15             	shr    eax,0x15
c00286f7:	09 c6                	or     esi,eax
c00286f9:	89 75 e0             	mov    DWORD PTR [ebp-0x20],esi
c00286fc:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00286ff:	89 c2                	mov    edx,eax
c0028701:	c1 fa 14             	sar    edx,0x14
c0028704:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0028707:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c002870a:	89 de                	mov    esi,ebx
c002870c:	c1 e6 0b             	shl    esi,0xb
c002870f:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0028712:	c1 e0 0b             	shl    eax,0xb
c0028715:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c002871a:	c1 eb 15             	shr    ebx,0x15
c002871d:	09 d8                	or     eax,ebx
c002871f:	89 c2                	mov    edx,eax
c0028721:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0028724:	25 ff 07 00 00       	and    eax,0x7ff
c0028729:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c002872c:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c002872f:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0028735:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c0028738:	29 d8                	sub    eax,ebx
c002873a:	05 ff 03 00 00       	add    eax,0x3ff
c002873f:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0028742:	46                   	inc    esi
c0028743:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0028749:	0f 85 a5 00 00 00    	jne    c00287f4 <__divdf3+0x138>
c002874f:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0028752:	0b 75 e0             	or     esi,DWORD PTR [ebp-0x20]
c0028755:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
c0028759:	74 2a                	je     c0028785 <__divdf3+0xc9>
c002875b:	85 f6                	test   esi,esi
c002875d:	0f 85 cc 02 00 00    	jne    c0028a2f <__divdf3+0x373>
c0028763:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0028766:	40                   	inc    eax
c0028767:	a9 fe 07 00 00       	test   eax,0x7fe
c002876c:	75 26                	jne    c0028794 <__divdf3+0xd8>
c002876e:	85 db                	test   ebx,ebx
c0028770:	74 22                	je     c0028794 <__divdf3+0xd8>
c0028772:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0028775:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0028778:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c002877b:	09 d0                	or     eax,edx
c002877d:	0f 85 ac 02 00 00    	jne    c0028a2f <__divdf3+0x373>
c0028783:	eb 63                	jmp    c00287e8 <__divdf3+0x12c>
c0028785:	85 f6                	test   esi,esi
c0028787:	75 22                	jne    c00287ab <__divdf3+0xef>
c0028789:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002878c:	40                   	inc    eax
c002878d:	a9 fe 07 00 00       	test   eax,0x7fe
c0028792:	74 36                	je     c00287ca <__divdf3+0x10e>
c0028794:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0028798:	0f 89 91 02 00 00    	jns    c0028a2f <__divdf3+0x373>
c002879e:	89 f8                	mov    eax,edi
c00287a0:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c00287a6:	e9 80 02 00 00       	jmp    c0028a2b <__divdf3+0x36f>
c00287ab:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c00287ae:	01 f6                	add    esi,esi
c00287b0:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c00287b3:	c1 ef 1f             	shr    edi,0x1f
c00287b6:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c00287b9:	01 5d ec             	add    DWORD PTR [ebp-0x14],ebx
c00287bc:	8d 48 ff             	lea    ecx,[eax-0x1]
c00287bf:	09 f7                	or     edi,esi
c00287c1:	89 7d e0             	mov    DWORD PTR [ebp-0x20],edi
c00287c4:	78 2e                	js     c00287f4 <__divdf3+0x138>
c00287c6:	89 c8                	mov    eax,ecx
c00287c8:	eb e1                	jmp    c00287ab <__divdf3+0xef>
c00287ca:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00287cd:	09 d0                	or     eax,edx
c00287cf:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c00287d3:	74 0f                	je     c00287e4 <__divdf3+0x128>
c00287d5:	85 c0                	test   eax,eax
c00287d7:	74 bb                	je     c0028794 <__divdf3+0xd8>
c00287d9:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c00287dc:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c00287df:	e9 4b 02 00 00       	jmp    c0028a2f <__divdf3+0x373>
c00287e4:	85 c0                	test   eax,eax
c00287e6:	75 ac                	jne    c0028794 <__divdf3+0xd8>
c00287e8:	31 ff                	xor    edi,edi
c00287ea:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c00287ef:	e9 3b 02 00 00       	jmp    c0028a2f <__divdf3+0x373>
c00287f4:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00287f7:	8d 4f 01             	lea    ecx,[edi+0x1]
c00287fa:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c0028800:	75 6b                	jne    c002886d <__divdf3+0x1b1>
c0028802:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0028805:	09 d6                	or     esi,edx
c0028807:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c002880b:	74 28                	je     c0028835 <__divdf3+0x179>
c002880d:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0028810:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0028813:	85 f6                	test   esi,esi
c0028815:	0f 85 14 02 00 00    	jne    c0028a2f <__divdf3+0x373>
c002881b:	31 ff                	xor    edi,edi
c002881d:	31 c9                	xor    ecx,ecx
c002881f:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0028822:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0028825:	0f 89 04 02 00 00    	jns    c0028a2f <__divdf3+0x373>
c002882b:	b9 00 00 00 80       	mov    ecx,0x80000000
c0028830:	e9 fa 01 00 00       	jmp    c0028a2f <__divdf3+0x373>
c0028835:	85 f6                	test   esi,esi
c0028837:	75 1b                	jne    c0028854 <__divdf3+0x198>
c0028839:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c002883c:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c002883f:	25 00 00 00 80       	and    eax,0x80000000
c0028844:	31 c9                	xor    ecx,ecx
c0028846:	0d 00 00 f0 7f       	or     eax,0x7ff00000
c002884b:	89 cf                	mov    edi,ecx
c002884d:	89 c1                	mov    ecx,eax
c002884f:	e9 db 01 00 00       	jmp    c0028a2f <__divdf3+0x373>
c0028854:	01 d2                	add    edx,edx
c0028856:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0028859:	c1 eb 1f             	shr    ebx,0x1f
c002885c:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002885f:	01 75 e8             	add    DWORD PTR [ebp-0x18],esi
c0028862:	8d 48 01             	lea    ecx,[eax+0x1]
c0028865:	09 da                	or     edx,ebx
c0028867:	78 04                	js     c002886d <__divdf3+0x1b1>
c0028869:	89 c8                	mov    eax,ecx
c002886b:	eb e7                	jmp    c0028854 <__divdf3+0x198>
c002886d:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0028870:	81 ce 00 00 00 80    	or     esi,0x80000000
c0028876:	81 ca 00 00 00 80    	or     edx,0x80000000
c002887c:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
c002887f:	39 d6                	cmp    esi,edx
c0028881:	77 0d                	ja     c0028890 <__divdf3+0x1d4>
c0028883:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0028886:	39 55 ec             	cmp    DWORD PTR [ebp-0x14],edx
c0028889:	72 1b                	jb     c00288a6 <__divdf3+0x1ea>
c002888b:	3b 75 e0             	cmp    esi,DWORD PTR [ebp-0x20]
c002888e:	75 16                	jne    c00288a6 <__divdf3+0x1ea>
c0028890:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0028893:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0028896:	39 5d ec             	cmp    DWORD PTR [ebp-0x14],ebx
c0028899:	83 de 00             	sbb    esi,0x0
c002889c:	29 5d ec             	sub    DWORD PTR [ebp-0x14],ebx
c002889f:	ba 01 00 00 00       	mov    edx,0x1
c00288a4:	eb 02                	jmp    c00288a8 <__divdf3+0x1ec>
c00288a6:	31 d2                	xor    edx,edx
c00288a8:	c7 45 d0 36 00 00 00 	mov    DWORD PTR [ebp-0x30],0x36
c00288af:	31 ff                	xor    edi,edi
c00288b1:	01 ff                	add    edi,edi
c00288b3:	89 d1                	mov    ecx,edx
c00288b5:	c1 e9 1f             	shr    ecx,0x1f
c00288b8:	09 cf                	or     edi,ecx
c00288ba:	8d 1c 12             	lea    ebx,[edx+edx*1]
c00288bd:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c00288c0:	89 da                	mov    edx,ebx
c00288c2:	89 f3                	mov    ebx,esi
c00288c4:	8d 34 36             	lea    esi,[esi+esi*1]
c00288c7:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00288ca:	c1 e9 1f             	shr    ecx,0x1f
c00288cd:	09 ce                	or     esi,ecx
c00288cf:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00288d2:	01 c9                	add    ecx,ecx
c00288d4:	89 4d d8             	mov    DWORD PTR [ebp-0x28],ecx
c00288d7:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c00288da:	85 db                	test   ebx,ebx
c00288dc:	78 29                	js     c0028907 <__divdf3+0x24b>
c00288de:	39 75 e0             	cmp    DWORD PTR [ebp-0x20],esi
c00288e1:	72 07                	jb     c00288ea <__divdf3+0x22e>
c00288e3:	75 3c                	jne    c0028921 <__divdf3+0x265>
c00288e5:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c00288e8:	77 37                	ja     c0028921 <__divdf3+0x265>
c00288ea:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c00288ed:	8b 5d d8             	mov    ebx,DWORD PTR [ebp-0x28]
c00288f0:	31 d2                	xor    edx,edx
c00288f2:	39 5d e8             	cmp    DWORD PTR [ebp-0x18],ebx
c00288f5:	0f 97 c2             	seta   dl
c00288f8:	29 d6                	sub    esi,edx
c00288fa:	89 d9                	mov    ecx,ebx
c00288fc:	2b 4d e8             	sub    ecx,DWORD PTR [ebp-0x18]
c00288ff:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0028902:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0028905:	eb 17                	jmp    c002891e <__divdf3+0x262>
c0028907:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c002890a:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002890d:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0028910:	0f 97 c1             	seta   cl
c0028913:	0f b6 c9             	movzx  ecx,cl
c0028916:	29 ce                	sub    esi,ecx
c0028918:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c002891b:	29 4d ec             	sub    DWORD PTR [ebp-0x14],ecx
c002891e:	83 ca 01             	or     edx,0x1
c0028921:	ff 4d d0             	dec    DWORD PTR [ebp-0x30]
c0028924:	75 8b                	jne    c00288b1 <__divdf3+0x1f5>
c0028926:	c1 e7 09             	shl    edi,0x9
c0028929:	89 d1                	mov    ecx,edx
c002892b:	c1 e9 17             	shr    ecx,0x17
c002892e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0028931:	09 f3                	or     ebx,esi
c0028933:	0f 95 c3             	setne  bl
c0028936:	0f b6 db             	movzx  ebx,bl
c0028939:	c1 e2 09             	shl    edx,0x9
c002893c:	09 d3                	or     ebx,edx
c002893e:	89 ca                	mov    edx,ecx
c0028940:	09 fa                	or     edx,edi
c0028942:	78 0c                	js     c0028950 <__divdf3+0x294>
c0028944:	01 d2                	add    edx,edx
c0028946:	89 d9                	mov    ecx,ebx
c0028948:	c1 e9 1f             	shr    ecx,0x1f
c002894b:	09 ca                	or     edx,ecx
c002894d:	01 db                	add    ebx,ebx
c002894f:	48                   	dec    eax
c0028950:	3d fe 07 00 00       	cmp    eax,0x7fe
c0028955:	0f 8f 83 00 00 00    	jg     c00289de <__divdf3+0x322>
c002895b:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0028961:	85 c0                	test   eax,eax
c0028963:	0f 8f 82 00 00 00    	jg     c00289eb <__divdf3+0x32f>
c0028969:	83 f8 cc             	cmp    eax,0xffffffcc
c002896c:	7c 77                	jl     c00289e5 <__divdf3+0x329>
c002896e:	be 01 00 00 00       	mov    esi,0x1
c0028973:	29 c6                	sub    esi,eax
c0028975:	81 ca 00 00 00 80    	or     edx,0x80000000
c002897b:	83 fe 1f             	cmp    esi,0x1f
c002897e:	7e 2f                	jle    c00289af <__divdf3+0x2f3>
c0028980:	83 fe 20             	cmp    esi,0x20
c0028983:	75 0a                	jne    c002898f <__divdf3+0x2d3>
c0028985:	85 db                	test   ebx,ebx
c0028987:	0f 95 c3             	setne  bl
c002898a:	0f b6 db             	movzx  ebx,bl
c002898d:	eb 1a                	jmp    c00289a9 <__divdf3+0x2ed>
c002898f:	8d 48 3f             	lea    ecx,[eax+0x3f]
c0028992:	89 d7                	mov    edi,edx
c0028994:	d3 e7                	shl    edi,cl
c0028996:	89 f9                	mov    ecx,edi
c0028998:	09 d9                	or     ecx,ebx
c002899a:	0f 95 c3             	setne  bl
c002899d:	0f b6 db             	movzx  ebx,bl
c00289a0:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c00289a5:	29 c1                	sub    ecx,eax
c00289a7:	d3 ea                	shr    edx,cl
c00289a9:	09 d3                	or     ebx,edx
c00289ab:	31 c0                	xor    eax,eax
c00289ad:	eb 3a                	jmp    c00289e9 <__divdf3+0x32d>
c00289af:	83 c0 1f             	add    eax,0x1f
c00289b2:	89 d7                	mov    edi,edx
c00289b4:	88 c1                	mov    cl,al
c00289b6:	d3 e7                	shl    edi,cl
c00289b8:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00289bb:	89 df                	mov    edi,ebx
c00289bd:	89 f1                	mov    ecx,esi
c00289bf:	d3 ef                	shr    edi,cl
c00289c1:	89 f9                	mov    ecx,edi
c00289c3:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c00289c6:	09 cf                	or     edi,ecx
c00289c8:	88 c1                	mov    cl,al
c00289ca:	d3 e3                	shl    ebx,cl
c00289cc:	85 db                	test   ebx,ebx
c00289ce:	0f 95 c3             	setne  bl
c00289d1:	0f b6 db             	movzx  ebx,bl
c00289d4:	09 fb                	or     ebx,edi
c00289d6:	89 f1                	mov    ecx,esi
c00289d8:	d3 ea                	shr    edx,cl
c00289da:	31 c0                	xor    eax,eax
c00289dc:	eb 0d                	jmp    c00289eb <__divdf3+0x32f>
c00289de:	b8 ff 07 00 00       	mov    eax,0x7ff
c00289e3:	eb 02                	jmp    c00289e7 <__divdf3+0x32b>
c00289e5:	31 c0                	xor    eax,eax
c00289e7:	31 db                	xor    ebx,ebx
c00289e9:	31 d2                	xor    edx,edx
c00289eb:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
c00289ee:	33 4d e4             	xor    ecx,DWORD PTR [ebp-0x1c]
c00289f1:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c00289f7:	09 c8                	or     eax,ecx
c00289f9:	c1 e0 14             	shl    eax,0x14
c00289fc:	89 d1                	mov    ecx,edx
c00289fe:	c1 e9 0b             	shr    ecx,0xb
c0028a01:	09 c8                	or     eax,ecx
c0028a03:	89 c6                	mov    esi,eax
c0028a05:	89 d9                	mov    ecx,ebx
c0028a07:	c1 e9 0b             	shr    ecx,0xb
c0028a0a:	c1 e2 15             	shl    edx,0x15
c0028a0d:	09 ca                	or     edx,ecx
c0028a0f:	f7 c3 ff 03 00 00    	test   ebx,0x3ff
c0028a15:	0f 95 c0             	setne  al
c0028a18:	09 c1                	or     ecx,eax
c0028a1a:	83 e1 01             	and    ecx,0x1
c0028a1d:	c1 eb 0a             	shr    ebx,0xa
c0028a20:	21 cb                	and    ebx,ecx
c0028a22:	01 d3                	add    ebx,edx
c0028a24:	89 d8                	mov    eax,ebx
c0028a26:	83 d6 00             	adc    esi,0x0
c0028a29:	89 f2                	mov    edx,esi
c0028a2b:	89 c7                	mov    edi,eax
c0028a2d:	89 d1                	mov    ecx,edx
c0028a2f:	89 f8                	mov    eax,edi
c0028a31:	89 ca                	mov    edx,ecx
c0028a33:	83 c4 2c             	add    esp,0x2c
c0028a36:	5b                   	pop    ebx
c0028a37:	5e                   	pop    esi
c0028a38:	5f                   	pop    edi
c0028a39:	5d                   	pop    ebp
c0028a3a:	c3                   	ret    

c0028a3b <__floatsidf>:
c0028a3b:	55                   	push   ebp
c0028a3c:	89 e5                	mov    ebp,esp
c0028a3e:	56                   	push   esi
c0028a3f:	53                   	push   ebx
c0028a40:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028a43:	85 db                	test   ebx,ebx
c0028a45:	7e 15                	jle    c0028a5c <__floatsidf+0x21>
c0028a47:	0f bd cb             	bsr    ecx,ebx
c0028a4a:	83 f1 1f             	xor    ecx,0x1f
c0028a4d:	d3 e3                	shl    ebx,cl
c0028a4f:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0028a55:	b8 1e 04 00 00       	mov    eax,0x41e
c0028a5a:	eb 21                	jmp    c0028a7d <__floatsidf+0x42>
c0028a5c:	b8 00 00 00 00       	mov    eax,0x0
c0028a61:	ba 00 00 00 00       	mov    edx,0x0
c0028a66:	74 2a                	je     c0028a92 <__floatsidf+0x57>
c0028a68:	f7 db                	neg    ebx
c0028a6a:	0f bd cb             	bsr    ecx,ebx
c0028a6d:	83 f1 1f             	xor    ecx,0x1f
c0028a70:	d3 e3                	shl    ebx,cl
c0028a72:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0028a78:	b8 1e 0c 00 00       	mov    eax,0xc1e
c0028a7d:	29 c8                	sub    eax,ecx
c0028a7f:	c1 e0 14             	shl    eax,0x14
c0028a82:	89 c1                	mov    ecx,eax
c0028a84:	89 de                	mov    esi,ebx
c0028a86:	c1 ee 0b             	shr    esi,0xb
c0028a89:	09 f1                	or     ecx,esi
c0028a8b:	89 ca                	mov    edx,ecx
c0028a8d:	c1 e3 15             	shl    ebx,0x15
c0028a90:	89 d8                	mov    eax,ebx
c0028a92:	5b                   	pop    ebx
c0028a93:	5e                   	pop    esi
c0028a94:	5d                   	pop    ebp
c0028a95:	c3                   	ret    

c0028a96 <__floatunsidf>:
c0028a96:	55                   	push   ebp
c0028a97:	89 e5                	mov    ebp,esp
c0028a99:	56                   	push   esi
c0028a9a:	53                   	push   ebx
c0028a9b:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028a9e:	85 db                	test   ebx,ebx
c0028aa0:	74 2a                	je     c0028acc <__floatunsidf+0x36>
c0028aa2:	0f bd cb             	bsr    ecx,ebx
c0028aa5:	83 f1 1f             	xor    ecx,0x1f
c0028aa8:	d3 e3                	shl    ebx,cl
c0028aaa:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0028ab0:	b8 1e 04 00 00       	mov    eax,0x41e
c0028ab5:	29 c8                	sub    eax,ecx
c0028ab7:	c1 e0 14             	shl    eax,0x14
c0028aba:	89 c1                	mov    ecx,eax
c0028abc:	89 de                	mov    esi,ebx
c0028abe:	c1 ee 0b             	shr    esi,0xb
c0028ac1:	09 f1                	or     ecx,esi
c0028ac3:	89 ca                	mov    edx,ecx
c0028ac5:	c1 e3 15             	shl    ebx,0x15
c0028ac8:	89 d8                	mov    eax,ebx
c0028aca:	eb 04                	jmp    c0028ad0 <__floatunsidf+0x3a>
c0028acc:	31 c0                	xor    eax,eax
c0028ace:	31 d2                	xor    edx,edx
c0028ad0:	5b                   	pop    ebx
c0028ad1:	5e                   	pop    esi
c0028ad2:	5d                   	pop    ebp
c0028ad3:	c3                   	ret    

c0028ad4 <__fixdfsi>:
c0028ad4:	55                   	push   ebp
c0028ad5:	89 e5                	mov    ebp,esp
c0028ad7:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0028ada:	89 d1                	mov    ecx,edx
c0028adc:	c1 e1 0b             	shl    ecx,0xb
c0028adf:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0028ae5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0028ae8:	c1 e8 15             	shr    eax,0x15
c0028aeb:	09 c1                	or     ecx,eax
c0028aed:	c1 fa 14             	sar    edx,0x14
c0028af0:	78 1f                	js     c0028b11 <__fixdfsi+0x3d>
c0028af2:	81 ea ff 03 00 00    	sub    edx,0x3ff
c0028af8:	31 c0                	xor    eax,eax
c0028afa:	83 fa 1e             	cmp    edx,0x1e
c0028afd:	77 40                	ja     c0028b3f <__fixdfsi+0x6b>
c0028aff:	89 c8                	mov    eax,ecx
c0028b01:	0d 00 00 00 80       	or     eax,0x80000000
c0028b06:	b9 1f 00 00 00       	mov    ecx,0x1f
c0028b0b:	29 d1                	sub    ecx,edx
c0028b0d:	d3 e8                	shr    eax,cl
c0028b0f:	eb 2e                	jmp    c0028b3f <__fixdfsi+0x6b>
c0028b11:	31 c0                	xor    eax,eax
c0028b13:	81 c2 01 04 00 00    	add    edx,0x401
c0028b19:	78 24                	js     c0028b3f <__fixdfsi+0x6b>
c0028b1b:	83 fa 1e             	cmp    edx,0x1e
c0028b1e:	7e 09                	jle    c0028b29 <__fixdfsi+0x55>
c0028b20:	83 fa 1f             	cmp    edx,0x1f
c0028b23:	75 18                	jne    c0028b3d <__fixdfsi+0x69>
c0028b25:	85 c9                	test   ecx,ecx
c0028b27:	75 14                	jne    c0028b3d <__fixdfsi+0x69>
c0028b29:	89 c8                	mov    eax,ecx
c0028b2b:	0d 00 00 00 80       	or     eax,0x80000000
c0028b30:	b9 1f 00 00 00       	mov    ecx,0x1f
c0028b35:	29 d1                	sub    ecx,edx
c0028b37:	d3 e8                	shr    eax,cl
c0028b39:	f7 d8                	neg    eax
c0028b3b:	eb 02                	jmp    c0028b3f <__fixdfsi+0x6b>
c0028b3d:	31 c0                	xor    eax,eax
c0028b3f:	5d                   	pop    ebp
c0028b40:	c3                   	ret    

c0028b41 <__fixunsdfsi>:
c0028b41:	55                   	push   ebp
c0028b42:	89 e5                	mov    ebp,esp
c0028b44:	53                   	push   ebx
c0028b45:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0028b48:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0028b4b:	89 d3                	mov    ebx,edx
c0028b4d:	c1 fb 14             	sar    ebx,0x14
c0028b50:	81 eb ff 03 00 00    	sub    ebx,0x3ff
c0028b56:	31 c0                	xor    eax,eax
c0028b58:	83 fb 1f             	cmp    ebx,0x1f
c0028b5b:	77 1d                	ja     c0028b7a <__fixunsdfsi+0x39>
c0028b5d:	89 d0                	mov    eax,edx
c0028b5f:	c1 e0 0b             	shl    eax,0xb
c0028b62:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0028b67:	c1 e9 15             	shr    ecx,0x15
c0028b6a:	09 c8                	or     eax,ecx
c0028b6c:	0d 00 00 00 80       	or     eax,0x80000000
c0028b71:	b9 1f 00 00 00       	mov    ecx,0x1f
c0028b76:	29 d9                	sub    ecx,ebx
c0028b78:	d3 e8                	shr    eax,cl
c0028b7a:	5b                   	pop    ebx
c0028b7b:	5d                   	pop    ebp
c0028b7c:	c3                   	ret    

c0028b7d <__cmpdf2>:
c0028b7d:	55                   	push   ebp
c0028b7e:	89 e5                	mov    ebp,esp
c0028b80:	57                   	push   edi
c0028b81:	56                   	push   esi
c0028b82:	53                   	push   ebx
c0028b83:	83 ec 0c             	sub    esp,0xc
c0028b86:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0028b89:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0028b8c:	89 ca                	mov    edx,ecx
c0028b8e:	c1 ea 14             	shr    edx,0x14
c0028b91:	81 e2 ff 07 00 00    	and    edx,0x7ff
c0028b97:	89 cb                	mov    ebx,ecx
c0028b99:	c1 fb 1f             	sar    ebx,0x1f
c0028b9c:	31 da                	xor    edx,ebx
c0028b9e:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028ba1:	89 df                	mov    edi,ebx
c0028ba3:	c1 e7 0b             	shl    edi,0xb
c0028ba6:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028ba9:	c1 e1 0b             	shl    ecx,0xb
c0028bac:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0028bb2:	c1 eb 15             	shr    ebx,0x15
c0028bb5:	09 d9                	or     ecx,ebx
c0028bb7:	89 4d e8             	mov    DWORD PTR [ebp-0x18],ecx
c0028bba:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0028bbd:	89 ce                	mov    esi,ecx
c0028bbf:	c1 ee 14             	shr    esi,0x14
c0028bc2:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0028bc8:	89 cb                	mov    ebx,ecx
c0028bca:	c1 fb 1f             	sar    ebx,0x1f
c0028bcd:	31 de                	xor    esi,ebx
c0028bcf:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c0028bd2:	89 df                	mov    edi,ebx
c0028bd4:	c1 e7 0b             	shl    edi,0xb
c0028bd7:	c1 e1 0b             	shl    ecx,0xb
c0028bda:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0028be0:	c1 eb 15             	shr    ebx,0x15
c0028be3:	09 d9                	or     ecx,ebx
c0028be5:	89 d3                	mov    ebx,edx
c0028be7:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c0028bed:	43                   	inc    ebx
c0028bee:	83 fb 01             	cmp    ebx,0x1
c0028bf1:	77 08                	ja     c0028bfb <__cmpdf2+0x7e>
c0028bf3:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0028bf6:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0028bf9:	75 68                	jne    c0028c63 <__cmpdf2+0xe6>
c0028bfb:	89 f3                	mov    ebx,esi
c0028bfd:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c0028c03:	43                   	inc    ebx
c0028c04:	83 fb 01             	cmp    ebx,0x1
c0028c07:	77 06                	ja     c0028c0f <__cmpdf2+0x92>
c0028c09:	89 fb                	mov    ebx,edi
c0028c0b:	09 cb                	or     ebx,ecx
c0028c0d:	75 54                	jne    c0028c63 <__cmpdf2+0xe6>
c0028c0f:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0028c12:	09 f8                	or     eax,edi
c0028c14:	09 c8                	or     eax,ecx
c0028c16:	0b 45 e8             	or     eax,DWORD PTR [ebp-0x18]
c0028c19:	75 12                	jne    c0028c2d <__cmpdf2+0xb0>
c0028c1b:	8d 42 01             	lea    eax,[edx+0x1]
c0028c1e:	83 f8 01             	cmp    eax,0x1
c0028c21:	77 0a                	ja     c0028c2d <__cmpdf2+0xb0>
c0028c23:	8d 5e 01             	lea    ebx,[esi+0x1]
c0028c26:	31 c0                	xor    eax,eax
c0028c28:	83 fb 01             	cmp    ebx,0x1
c0028c2b:	76 36                	jbe    c0028c63 <__cmpdf2+0xe6>
c0028c2d:	b8 01 00 00 00       	mov    eax,0x1
c0028c32:	39 f2                	cmp    edx,esi
c0028c34:	7f 2d                	jg     c0028c63 <__cmpdf2+0xe6>
c0028c36:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0028c3b:	7c 26                	jl     c0028c63 <__cmpdf2+0xe6>
c0028c3d:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0028c40:	77 07                	ja     c0028c49 <__cmpdf2+0xcc>
c0028c42:	72 16                	jb     c0028c5a <__cmpdf2+0xdd>
c0028c44:	39 7d ec             	cmp    DWORD PTR [ebp-0x14],edi
c0028c47:	76 0a                	jbe    c0028c53 <__cmpdf2+0xd6>
c0028c49:	89 d0                	mov    eax,edx
c0028c4b:	c1 f8 1f             	sar    eax,0x1f
c0028c4e:	83 c8 01             	or     eax,0x1
c0028c51:	eb 10                	jmp    c0028c63 <__cmpdf2+0xe6>
c0028c53:	b8 00 00 00 00       	mov    eax,0x0
c0028c58:	73 09                	jae    c0028c63 <__cmpdf2+0xe6>
c0028c5a:	89 d0                	mov    eax,edx
c0028c5c:	c1 f8 1f             	sar    eax,0x1f
c0028c5f:	83 e0 02             	and    eax,0x2
c0028c62:	48                   	dec    eax
c0028c63:	83 c4 0c             	add    esp,0xc
c0028c66:	5b                   	pop    ebx
c0028c67:	5e                   	pop    esi
c0028c68:	5f                   	pop    edi
c0028c69:	5d                   	pop    ebp
c0028c6a:	c3                   	ret    

c0028c6b <__eqdf2>:
c0028c6b:	55                   	push   ebp
c0028c6c:	89 e5                	mov    ebp,esp
c0028c6e:	50                   	push   eax
c0028c6f:	6a 01                	push   0x1
c0028c71:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0028c74:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0028c77:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0028c7a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0028c7d:	e8 fb fe ff ff       	call   c0028b7d <__cmpdf2>
c0028c82:	83 c4 18             	add    esp,0x18
c0028c85:	c9                   	leave  
c0028c86:	c3                   	ret    

c0028c87 <__nedf2>:
c0028c87:	eb e2                	jmp    c0028c6b <__eqdf2>

c0028c89 <__gtdf2>:
c0028c89:	55                   	push   ebp
c0028c8a:	89 e5                	mov    ebp,esp
c0028c8c:	50                   	push   eax
c0028c8d:	6a ff                	push   0xffffffff
c0028c8f:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0028c92:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0028c95:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0028c98:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0028c9b:	e8 dd fe ff ff       	call   c0028b7d <__cmpdf2>
c0028ca0:	83 c4 18             	add    esp,0x18
c0028ca3:	c9                   	leave  
c0028ca4:	c3                   	ret    

c0028ca5 <__gedf2>:
c0028ca5:	eb e2                	jmp    c0028c89 <__gtdf2>

c0028ca7 <__ltdf2>:
c0028ca7:	eb c2                	jmp    c0028c6b <__eqdf2>

c0028ca9 <__ledf2>:
c0028ca9:	eb c0                	jmp    c0028c6b <__eqdf2>

c0028cab <__truncdfsf2>:
c0028cab:	55                   	push   ebp
c0028cac:	89 e5                	mov    ebp,esp
c0028cae:	57                   	push   edi
c0028caf:	56                   	push   esi
c0028cb0:	53                   	push   ebx
c0028cb1:	83 ec 0c             	sub    esp,0xc
c0028cb4:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0028cb7:	89 d1                	mov    ecx,edx
c0028cb9:	c1 f9 14             	sar    ecx,0x14
c0028cbc:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028cbf:	89 df                	mov    edi,ebx
c0028cc1:	c1 e7 0b             	shl    edi,0xb
c0028cc4:	89 d0                	mov    eax,edx
c0028cc6:	c1 e0 0b             	shl    eax,0xb
c0028cc9:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0028cce:	c1 eb 15             	shr    ebx,0x15
c0028cd1:	09 d8                	or     eax,ebx
c0028cd3:	89 cb                	mov    ebx,ecx
c0028cd5:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0028cdb:	8d b3 7f fc ff ff    	lea    esi,[ebx-0x381]
c0028ce1:	81 fe fd 00 00 00    	cmp    esi,0xfd
c0028ce7:	0f 86 9e 00 00 00    	jbe    c0028d8b <__truncdfsf2+0xe0>
c0028ced:	85 db                	test   ebx,ebx
c0028cef:	75 0a                	jne    c0028cfb <__truncdfsf2+0x50>
c0028cf1:	c1 fa 17             	sar    edx,0x17
c0028cf4:	30 d2                	xor    dl,dl
c0028cf6:	e9 84 00 00 00       	jmp    c0028d7f <__truncdfsf2+0xd4>
c0028cfb:	8d b3 02 fc ff ff    	lea    esi,[ebx-0x3fe]
c0028d01:	83 fe 83             	cmp    esi,0xffffff83
c0028d04:	7d 4b                	jge    c0028d51 <__truncdfsf2+0xa6>
c0028d06:	b9 83 ff ff ff       	mov    ecx,0xffffff83
c0028d0b:	29 f1                	sub    ecx,esi
c0028d0d:	83 f9 1f             	cmp    ecx,0x1f
c0028d10:	7f 6b                	jg     c0028d7d <__truncdfsf2+0xd2>
c0028d12:	0d 00 00 00 80       	or     eax,0x80000000
c0028d17:	89 c3                	mov    ebx,eax
c0028d19:	d3 eb                	shr    ebx,cl
c0028d1b:	be 01 00 00 00       	mov    esi,0x1
c0028d20:	d3 e6                	shl    esi,cl
c0028d22:	4e                   	dec    esi
c0028d23:	21 f0                	and    eax,esi
c0028d25:	09 f8                	or     eax,edi
c0028d27:	0f 95 c0             	setne  al
c0028d2a:	0f b6 c0             	movzx  eax,al
c0028d2d:	09 c3                	or     ebx,eax
c0028d2f:	89 d9                	mov    ecx,ebx
c0028d31:	c1 e9 08             	shr    ecx,0x8
c0028d34:	f6 c3 7f             	test   bl,0x7f
c0028d37:	0f 95 c0             	setne  al
c0028d3a:	09 c8                	or     eax,ecx
c0028d3c:	83 e0 01             	and    eax,0x1
c0028d3f:	c1 eb 07             	shr    ebx,0x7
c0028d42:	21 c3                	and    ebx,eax
c0028d44:	81 e2 00 00 00 80    	and    edx,0x80000000
c0028d4a:	09 d1                	or     ecx,edx
c0028d4c:	8d 04 0b             	lea    eax,[ebx+ecx*1]
c0028d4f:	eb 76                	jmp    c0028dc7 <__truncdfsf2+0x11c>
c0028d51:	83 c6 80             	add    esi,0xffffff80
c0028d54:	7e 1d                	jle    c0028d73 <__truncdfsf2+0xc8>
c0028d56:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0028d5c:	75 0b                	jne    c0028d69 <__truncdfsf2+0xbe>
c0028d5e:	09 f8                	or     eax,edi
c0028d60:	74 09                	je     c0028d6b <__truncdfsf2+0xc0>
c0028d62:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
c0028d67:	eb 02                	jmp    c0028d6b <__truncdfsf2+0xc0>
c0028d69:	31 c0                	xor    eax,eax
c0028d6b:	c1 fa 17             	sar    edx,0x17
c0028d6e:	80 ca ff             	or     dl,0xff
c0028d71:	eb 0e                	jmp    c0028d81 <__truncdfsf2+0xd6>
c0028d73:	c1 fa 1f             	sar    edx,0x1f
c0028d76:	c1 e2 08             	shl    edx,0x8
c0028d79:	09 ca                	or     edx,ecx
c0028d7b:	eb 04                	jmp    c0028d81 <__truncdfsf2+0xd6>
c0028d7d:	31 d2                	xor    edx,edx
c0028d7f:	31 c0                	xor    eax,eax
c0028d81:	c1 e2 17             	shl    edx,0x17
c0028d84:	c1 e8 08             	shr    eax,0x8
c0028d87:	09 d0                	or     eax,edx
c0028d89:	eb 3c                	jmp    c0028dc7 <__truncdfsf2+0x11c>
c0028d8b:	81 e9 80 03 00 00    	sub    ecx,0x380
c0028d91:	89 ca                	mov    edx,ecx
c0028d93:	c1 fa 0b             	sar    edx,0xb
c0028d96:	c1 e2 08             	shl    edx,0x8
c0028d99:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0028d9c:	31 db                	xor    ebx,ebx
c0028d9e:	85 ff                	test   edi,edi
c0028da0:	0f 95 c3             	setne  bl
c0028da3:	09 d8                	or     eax,ebx
c0028da5:	89 c3                	mov    ebx,eax
c0028da7:	c1 eb 08             	shr    ebx,0x8
c0028daa:	a8 7f                	test   al,0x7f
c0028dac:	0f 95 c2             	setne  dl
c0028daf:	89 d6                	mov    esi,edx
c0028db1:	09 de                	or     esi,ebx
c0028db3:	83 e6 01             	and    esi,0x1
c0028db6:	c1 e8 07             	shr    eax,0x7
c0028db9:	21 f0                	and    eax,esi
c0028dbb:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0028dbe:	09 ca                	or     edx,ecx
c0028dc0:	c1 e2 17             	shl    edx,0x17
c0028dc3:	09 da                	or     edx,ebx
c0028dc5:	01 d0                	add    eax,edx
c0028dc7:	83 c4 0c             	add    esp,0xc
c0028dca:	5b                   	pop    ebx
c0028dcb:	5e                   	pop    esi
c0028dcc:	5f                   	pop    edi
c0028dcd:	5d                   	pop    ebp
c0028dce:	c3                   	ret    

c0028dcf <__extendsfdf2>:
c0028dcf:	55                   	push   ebp
c0028dd0:	89 e5                	mov    ebp,esp
c0028dd2:	57                   	push   edi
c0028dd3:	56                   	push   esi
c0028dd4:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0028dd7:	89 d1                	mov    ecx,edx
c0028dd9:	c1 f9 17             	sar    ecx,0x17
c0028ddc:	c1 e2 08             	shl    edx,0x8
c0028ddf:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0028de5:	89 c8                	mov    eax,ecx
c0028de7:	80 e4 f8             	and    ah,0xf8
c0028dea:	8d 71 01             	lea    esi,[ecx+0x1]
c0028ded:	81 e6 fe 00 00 00    	and    esi,0xfe
c0028df3:	75 27                	jne    c0028e1c <__extendsfdf2+0x4d>
c0028df5:	81 e1 ff 00 00 00    	and    ecx,0xff
c0028dfb:	75 18                	jne    c0028e15 <__extendsfdf2+0x46>
c0028dfd:	85 d2                	test   edx,edx
c0028dff:	74 20                	je     c0028e21 <__extendsfdf2+0x52>
c0028e01:	41                   	inc    ecx
c0028e02:	01 d2                	add    edx,edx
c0028e04:	79 fb                	jns    c0028e01 <__extendsfdf2+0x32>
c0028e06:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0028e0c:	29 c8                	sub    eax,ecx
c0028e0e:	05 81 03 00 00       	add    eax,0x381
c0028e13:	eb 0c                	jmp    c0028e21 <__extendsfdf2+0x52>
c0028e15:	05 00 07 00 00       	add    eax,0x700
c0028e1a:	eb 05                	jmp    c0028e21 <__extendsfdf2+0x52>
c0028e1c:	05 80 03 00 00       	add    eax,0x380
c0028e21:	c1 e0 14             	shl    eax,0x14
c0028e24:	89 c1                	mov    ecx,eax
c0028e26:	89 d0                	mov    eax,edx
c0028e28:	c1 e8 0b             	shr    eax,0xb
c0028e2b:	09 c1                	or     ecx,eax
c0028e2d:	c1 e2 15             	shl    edx,0x15
c0028e30:	89 d0                	mov    eax,edx
c0028e32:	89 ca                	mov    edx,ecx
c0028e34:	5e                   	pop    esi
c0028e35:	5f                   	pop    edi
c0028e36:	5d                   	pop    ebp
c0028e37:	c3                   	ret    
c0028e38:	66 90                	xchg   ax,ax
c0028e3a:	66 90                	xchg   ax,ax
c0028e3c:	66 90                	xchg   ax,ax
c0028e3e:	66 90                	xchg   ax,ax

c0028e40 <fabs>:
c0028e40:	83 ec 0c             	sub    esp,0xc
c0028e43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e47:	89 04 24             	mov    DWORD PTR [esp],eax
c0028e4a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0028e4e:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0028e53:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0028e57:	dd 04 24             	fld    QWORD PTR [esp]
c0028e5a:	83 c4 0c             	add    esp,0xc
c0028e5d:	c3                   	ret    
c0028e5e:	66 90                	xchg   ax,ax

c0028e60 <lrint>:
c0028e60:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c0028e64:	83 ec 04             	sub    esp,0x4
c0028e67:	db 1c 24             	fistp  DWORD PTR [esp]
c0028e6a:	58                   	pop    eax
c0028e6b:	c3                   	ret    

c0028e6c <lrintf>:
c0028e6c:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c0028e70:	83 ec 04             	sub    esp,0x4
c0028e73:	db 1c 24             	fistp  DWORD PTR [esp]
c0028e76:	58                   	pop    eax
c0028e77:	c3                   	ret    

Disassembly of section .init:

c0028e78 <_init>:
c0028e78:	55                   	push   ebp
c0028e79:	89 e5                	mov    ebp,esp
c0028e7b:	e8 98 72 fd ff       	call   c0000118 <frame_dummy>
c0028e80:	e8 5b e0 ff ff       	call   c0026ee0 <__do_global_ctors_aux>
c0028e85:	5d                   	pop    ebp
c0028e86:	c3                   	ret    

Disassembly of section .fini:

c0028e87 <_fini>:
c0028e87:	55                   	push   ebp
c0028e88:	89 e5                	mov    ebp,esp
c0028e8a:	e8 19 72 fd ff       	call   c00000a8 <__do_global_dtors_aux>
c0028e8f:	5d                   	pop    ebp
c0028e90:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c0028e92 <Computer::~Computer()>:
c0028e92:	83 ec 0c             	sub    esp,0xc
c0028e95:	ba c8 aa 02 c0       	mov    edx,0xc002aac8
c0028e9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e9e:	89 10                	mov    DWORD PTR [eax],edx
c0028ea0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ea4:	83 ec 0c             	sub    esp,0xc
c0028ea7:	50                   	push   eax
c0028ea8:	e8 4b b3 fe ff       	call   c00141f8 <Device::~Device()>
c0028ead:	83 c4 10             	add    esp,0x10
c0028eb0:	90                   	nop
c0028eb1:	83 c4 0c             	add    esp,0xc
c0028eb4:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c0028eb6 <Computer::~Computer()>:
c0028eb6:	83 ec 0c             	sub    esp,0xc
c0028eb9:	83 ec 0c             	sub    esp,0xc
c0028ebc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ec0:	e8 cd ff ff ff       	call   c0028e92 <Computer::~Computer()>
c0028ec5:	83 c4 10             	add    esp,0x10
c0028ec8:	83 ec 08             	sub    esp,0x8
c0028ecb:	68 ec 01 00 00       	push   0x1ec
c0028ed0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ed4:	e8 38 9f fe ff       	call   c0012e11 <operator delete(void*, unsigned long)>
c0028ed9:	83 c4 10             	add    esp,0x10
c0028edc:	83 c4 0c             	add    esp,0xc
c0028edf:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c0028ee0 <idleCommon()>:
c0028ee0:	83 ec 0c             	sub    esp,0xc
c0028ee3:	fa                   	cli    
c0028ee4:	ff 05 a8 23 03 c0    	inc    DWORD PTR ds:0xc00323a8
c0028eea:	e8 c3 55 ff ff       	call   c001e4b2 <schedule()>
c0028eef:	a1 a8 23 03 c0       	mov    eax,ds:0xc00323a8
c0028ef4:	48                   	dec    eax
c0028ef5:	a3 a8 23 03 c0       	mov    ds:0xc00323a8,eax
c0028efa:	75 01                	jne    c0028efd <idleCommon()+0x1d>
c0028efc:	fb                   	sti    
c0028efd:	83 c4 0c             	add    esp,0xc
c0028f00:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c0028f02 <LinkedList<UnixFile>::~LinkedList()>:
c0028f02:	90                   	nop
c0028f03:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c0028f04 <LinkedList<UnixFile>::LinkedList()>:
c0028f04:	83 ec 0c             	sub    esp,0xc
c0028f07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f0b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028f11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f15:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028f1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f20:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028f27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f2b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028f31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f35:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028f3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f40:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028f47:	83 ec 0c             	sub    esp,0xc
c0028f4a:	68 86 ad 02 c0       	push   0xc002ad86
c0028f4f:	e8 9d 9f fe ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c0028f54:	83 c4 10             	add    esp,0x10
c0028f57:	90                   	nop
c0028f58:	83 c4 0c             	add    esp,0xc
c0028f5b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c0028f5c <LinkedList<UnixFile>::addElement(UnixFile*)>:
c0028f5c:	83 ec 0c             	sub    esp,0xc
c0028f5f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028f64:	75 10                	jne    c0028f76 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c0028f66:	83 ec 0c             	sub    esp,0xc
c0028f69:	68 a0 ad 02 c0       	push   0xc002ada0
c0028f6e:	e8 3e 19 ff ff       	call   c001a8b1 <Krnl::panic(char const*)>
c0028f73:	83 c4 10             	add    esp,0x10
c0028f76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f7a:	8b 00                	mov    eax,DWORD PTR [eax]
c0028f7c:	85 c0                	test   eax,eax
c0028f7e:	74 34                	je     c0028fb4 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0028f80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f84:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028f87:	85 c0                	test   eax,eax
c0028f89:	74 29                	je     c0028fb4 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0028f8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f8f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028f92:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028f96:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028f99:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f9d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028fa1:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028fa4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fa8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028fab:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028fb2:	eb 65                	jmp    c0029019 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0028fb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fb8:	8b 00                	mov    eax,DWORD PTR [eax]
c0028fba:	85 c0                	test   eax,eax
c0028fbc:	75 4b                	jne    c0029009 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0028fbe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fc2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028fc5:	85 c0                	test   eax,eax
c0028fc7:	75 40                	jne    c0029009 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0028fc9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fcd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028fd1:	89 10                	mov    DWORD PTR [eax],edx
c0028fd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fd7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028fdb:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028fde:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fe2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028fe5:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028fec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ff0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028ff3:	85 c0                	test   eax,eax
c0028ff5:	74 22                	je     c0029019 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0028ff7:	83 ec 0c             	sub    esp,0xc
c0028ffa:	68 c2 ad 02 c0       	push   0xc002adc2
c0028fff:	e8 ad 18 ff ff       	call   c001a8b1 <Krnl::panic(char const*)>
c0029004:	83 c4 10             	add    esp,0x10
c0029007:	eb 10                	jmp    c0029019 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0029009:	83 ec 0c             	sub    esp,0xc
c002900c:	68 cc ad 02 c0       	push   0xc002adcc
c0029011:	e8 9b 18 ff ff       	call   c001a8b1 <Krnl::panic(char const*)>
c0029016:	83 c4 10             	add    esp,0x10
c0029019:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002901d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029020:	8d 50 01             	lea    edx,[eax+0x1]
c0029023:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029027:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002902a:	90                   	nop
c002902b:	83 c4 0c             	add    esp,0xc
c002902e:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c0029030 <LinkedList<UnixFile>::getFirstElement()>:
c0029030:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029034:	8b 00                	mov    eax,DWORD PTR [eax]
c0029036:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c0029038 <LinkedList<UnixFile>::removeFirst()>:
c0029038:	83 ec 0c             	sub    esp,0xc
c002903b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002903f:	8b 00                	mov    eax,DWORD PTR [eax]
c0029041:	85 c0                	test   eax,eax
c0029043:	75 12                	jne    c0029057 <LinkedList<UnixFile>::removeFirst()+0x1f>
c0029045:	83 ec 0c             	sub    esp,0xc
c0029048:	68 d8 ad 02 c0       	push   0xc002add8
c002904d:	e8 5f 18 ff ff       	call   c001a8b1 <Krnl::panic(char const*)>
c0029052:	83 c4 10             	add    esp,0x10
c0029055:	eb 7e                	jmp    c00290d5 <LinkedList<UnixFile>::removeFirst()+0x9d>
c0029057:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002905b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002905e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029061:	85 c0                	test   eax,eax
c0029063:	74 10                	je     c0029075 <LinkedList<UnixFile>::removeFirst()+0x3d>
c0029065:	83 ec 0c             	sub    esp,0xc
c0029068:	68 23 ae 02 c0       	push   0xc002ae23
c002906d:	e8 3f 18 ff ff       	call   c001a8b1 <Krnl::panic(char const*)>
c0029072:	83 c4 10             	add    esp,0x10
c0029075:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029079:	8b 00                	mov    eax,DWORD PTR [eax]
c002907b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002907e:	85 c0                	test   eax,eax
c0029080:	75 33                	jne    c00290b5 <LinkedList<UnixFile>::removeFirst()+0x7d>
c0029082:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029086:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002908c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029090:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0029097:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002909b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002909e:	83 f8 01             	cmp    eax,0x1
c00290a1:	74 21                	je     c00290c4 <LinkedList<UnixFile>::removeFirst()+0x8c>
c00290a3:	83 ec 0c             	sub    esp,0xc
c00290a6:	68 fc ad 02 c0       	push   0xc002adfc
c00290ab:	e8 01 18 ff ff       	call   c001a8b1 <Krnl::panic(char const*)>
c00290b0:	83 c4 10             	add    esp,0x10
c00290b3:	eb 0f                	jmp    c00290c4 <LinkedList<UnixFile>::removeFirst()+0x8c>
c00290b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290b9:	8b 00                	mov    eax,DWORD PTR [eax]
c00290bb:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c00290be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290c2:	89 10                	mov    DWORD PTR [eax],edx
c00290c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290c8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00290cb:	8d 50 ff             	lea    edx,[eax-0x1]
c00290ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290d2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00290d5:	83 c4 0c             	add    esp,0xc
c00290d8:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c00290da <LinkedList<UnixFile>::getNext(UnixFile*)>:
c00290da:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00290de:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00290e1:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c00290e2 <DriverlessDevice::~DriverlessDevice()>:
c00290e2:	ba a4 b5 02 c0       	mov    edx,0xc002b5a4
c00290e7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00290eb:	89 10                	mov    DWORD PTR [eax],edx
c00290ed:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00290f1:	50                   	push   eax
c00290f2:	e8 01 b1 fe ff       	call   c00141f8 <Device::~Device()>
c00290f7:	83 c4 04             	add    esp,0x4
c00290fa:	90                   	nop
c00290fb:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c00290fc <DriverlessDevice::~DriverlessDevice()>:
c00290fc:	83 ec 0c             	sub    esp,0xc
c00290ff:	83 ec 0c             	sub    esp,0xc
c0029102:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029106:	e8 d7 ff ff ff       	call   c00290e2 <DriverlessDevice::~DriverlessDevice()>
c002910b:	83 c4 10             	add    esp,0x10
c002910e:	83 ec 08             	sub    esp,0x8
c0029111:	68 58 01 00 00       	push   0x158
c0029116:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002911a:	e8 f2 9c fe ff       	call   c0012e11 <operator delete(void*, unsigned long)>
c002911f:	83 c4 10             	add    esp,0x10
c0029122:	83 c4 0c             	add    esp,0xc
c0029125:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c0029126 <LinkedList<Device>::addElement(Device*)>:
c0029126:	83 ec 0c             	sub    esp,0xc
c0029129:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c002912e:	75 10                	jne    c0029140 <LinkedList<Device>::addElement(Device*)+0x1a>
c0029130:	83 ec 0c             	sub    esp,0xc
c0029133:	68 a0 ad 02 c0       	push   0xc002ada0
c0029138:	e8 74 17 ff ff       	call   c001a8b1 <Krnl::panic(char const*)>
c002913d:	83 c4 10             	add    esp,0x10
c0029140:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029144:	8b 00                	mov    eax,DWORD PTR [eax]
c0029146:	85 c0                	test   eax,eax
c0029148:	74 3a                	je     c0029184 <LinkedList<Device>::addElement(Device*)+0x5e>
c002914a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002914e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029151:	85 c0                	test   eax,eax
c0029153:	74 2f                	je     c0029184 <LinkedList<Device>::addElement(Device*)+0x5e>
c0029155:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029159:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002915c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029160:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c0029166:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002916a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002916e:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0029171:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029175:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029178:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0029182:	eb 68                	jmp    c00291ec <LinkedList<Device>::addElement(Device*)+0xc6>
c0029184:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029188:	8b 00                	mov    eax,DWORD PTR [eax]
c002918a:	85 c0                	test   eax,eax
c002918c:	75 4e                	jne    c00291dc <LinkedList<Device>::addElement(Device*)+0xb6>
c002918e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029192:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029195:	85 c0                	test   eax,eax
c0029197:	75 43                	jne    c00291dc <LinkedList<Device>::addElement(Device*)+0xb6>
c0029199:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002919d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00291a1:	89 10                	mov    DWORD PTR [eax],edx
c00291a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291a7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00291ab:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00291ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291b2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00291b5:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c00291bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291c3:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00291c6:	85 c0                	test   eax,eax
c00291c8:	74 22                	je     c00291ec <LinkedList<Device>::addElement(Device*)+0xc6>
c00291ca:	83 ec 0c             	sub    esp,0xc
c00291cd:	68 c2 ad 02 c0       	push   0xc002adc2
c00291d2:	e8 da 16 ff ff       	call   c001a8b1 <Krnl::panic(char const*)>
c00291d7:	83 c4 10             	add    esp,0x10
c00291da:	eb 10                	jmp    c00291ec <LinkedList<Device>::addElement(Device*)+0xc6>
c00291dc:	83 ec 0c             	sub    esp,0xc
c00291df:	68 cc ad 02 c0       	push   0xc002adcc
c00291e4:	e8 c8 16 ff ff       	call   c001a8b1 <Krnl::panic(char const*)>
c00291e9:	83 c4 10             	add    esp,0x10
c00291ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291f0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00291f3:	8d 50 01             	lea    edx,[eax+0x1]
c00291f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291fa:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00291fd:	90                   	nop
c00291fe:	83 c4 0c             	add    esp,0xc
c0029201:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c0029202 <LinkedList<Device>::LinkedList()>:
c0029202:	83 ec 0c             	sub    esp,0xc
c0029205:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029209:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002920f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029213:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002921a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002921e:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0029225:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029229:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002922f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029233:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002923a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002923e:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0029245:	83 ec 0c             	sub    esp,0xc
c0029248:	68 86 ad 02 c0       	push   0xc002ad86
c002924d:	e8 9f 9c fe ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c0029252:	83 c4 10             	add    esp,0x10
c0029255:	90                   	nop
c0029256:	83 c4 0c             	add    esp,0xc
c0029259:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c002925a <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c002925a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002925e:	8b 00                	mov    eax,DWORD PTR [eax]
c0029260:	85 c0                	test   eax,eax
c0029262:	75 0e                	jne    c0029272 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0029264:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029268:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002926b:	85 c0                	test   eax,eax
c002926d:	75 03                	jne    c0029272 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c002926f:	b0 01                	mov    al,0x1
c0029271:	c3                   	ret    
c0029272:	b0 00                	mov    al,0x0
c0029274:	90                   	nop
c0029275:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c0029276 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c0029276:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002927a:	8b 00                	mov    eax,DWORD PTR [eax]
c002927c:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c002927e <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c002927e:	83 ec 0c             	sub    esp,0xc
c0029281:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029285:	8b 00                	mov    eax,DWORD PTR [eax]
c0029287:	85 c0                	test   eax,eax
c0029289:	75 15                	jne    c00292a0 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c002928b:	83 ec 0c             	sub    esp,0xc
c002928e:	68 d8 ad 02 c0       	push   0xc002add8
c0029293:	e8 19 16 ff ff       	call   c001a8b1 <Krnl::panic(char const*)>
c0029298:	83 c4 10             	add    esp,0x10
c002929b:	e9 88 00 00 00       	jmp    c0029328 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c00292a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00292a4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00292a7:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00292aa:	85 c0                	test   eax,eax
c00292ac:	0f 95 c0             	setne  al
c00292af:	84 c0                	test   al,al
c00292b1:	74 10                	je     c00292c3 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c00292b3:	83 ec 0c             	sub    esp,0xc
c00292b6:	68 23 ae 02 c0       	push   0xc002ae23
c00292bb:	e8 f1 15 ff ff       	call   c001a8b1 <Krnl::panic(char const*)>
c00292c0:	83 c4 10             	add    esp,0x10
c00292c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00292c7:	8b 00                	mov    eax,DWORD PTR [eax]
c00292c9:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00292cc:	85 c0                	test   eax,eax
c00292ce:	0f 94 c0             	sete   al
c00292d1:	84 c0                	test   al,al
c00292d3:	74 33                	je     c0029308 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c00292d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00292d9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00292df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00292e3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00292ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00292ee:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00292f1:	83 f8 01             	cmp    eax,0x1
c00292f4:	74 21                	je     c0029317 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c00292f6:	83 ec 0c             	sub    esp,0xc
c00292f9:	68 fc ad 02 c0       	push   0xc002adfc
c00292fe:	e8 ae 15 ff ff       	call   c001a8b1 <Krnl::panic(char const*)>
c0029303:	83 c4 10             	add    esp,0x10
c0029306:	eb 0f                	jmp    c0029317 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c0029308:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002930c:	8b 00                	mov    eax,DWORD PTR [eax]
c002930e:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0029311:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029315:	89 10                	mov    DWORD PTR [eax],edx
c0029317:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002931b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002931e:	8d 50 ff             	lea    edx,[eax-0x1]
c0029321:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029325:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0029328:	83 c4 0c             	add    esp,0xc
c002932b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c002932c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c002932c:	83 ec 0c             	sub    esp,0xc
c002932f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0029334:	75 10                	jne    c0029346 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c0029336:	83 ec 0c             	sub    esp,0xc
c0029339:	68 a0 ad 02 c0       	push   0xc002ada0
c002933e:	e8 6e 15 ff ff       	call   c001a8b1 <Krnl::panic(char const*)>
c0029343:	83 c4 10             	add    esp,0x10
c0029346:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002934a:	8b 00                	mov    eax,DWORD PTR [eax]
c002934c:	85 c0                	test   eax,eax
c002934e:	74 34                	je     c0029384 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c0029350:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029354:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029357:	85 c0                	test   eax,eax
c0029359:	74 29                	je     c0029384 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c002935b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002935f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029362:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029366:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0029369:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002936d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029371:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0029374:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029378:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002937b:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0029382:	eb 65                	jmp    c00293e9 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0029384:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029388:	8b 00                	mov    eax,DWORD PTR [eax]
c002938a:	85 c0                	test   eax,eax
c002938c:	75 4b                	jne    c00293d9 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c002938e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029392:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029395:	85 c0                	test   eax,eax
c0029397:	75 40                	jne    c00293d9 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c0029399:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002939d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00293a1:	89 10                	mov    DWORD PTR [eax],edx
c00293a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00293a7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00293ab:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00293ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00293b2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00293b5:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00293bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00293c0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00293c3:	85 c0                	test   eax,eax
c00293c5:	74 22                	je     c00293e9 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c00293c7:	83 ec 0c             	sub    esp,0xc
c00293ca:	68 c2 ad 02 c0       	push   0xc002adc2
c00293cf:	e8 dd 14 ff ff       	call   c001a8b1 <Krnl::panic(char const*)>
c00293d4:	83 c4 10             	add    esp,0x10
c00293d7:	eb 10                	jmp    c00293e9 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c00293d9:	83 ec 0c             	sub    esp,0xc
c00293dc:	68 cc ad 02 c0       	push   0xc002adcc
c00293e1:	e8 cb 14 ff ff       	call   c001a8b1 <Krnl::panic(char const*)>
c00293e6:	83 c4 10             	add    esp,0x10
c00293e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00293ed:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00293f0:	8d 50 01             	lea    edx,[eax+0x1]
c00293f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00293f7:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00293fa:	90                   	nop
c00293fb:	83 c4 0c             	add    esp,0xc
c00293fe:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c0029400 <ACPI::~ACPI()>:
c0029400:	83 ec 0c             	sub    esp,0xc
c0029403:	ba d0 bf 02 c0       	mov    edx,0xc002bfd0
c0029408:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002940c:	89 10                	mov    DWORD PTR [eax],edx
c002940e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029412:	83 ec 0c             	sub    esp,0xc
c0029415:	50                   	push   eax
c0029416:	e8 dd ad fe ff       	call   c00141f8 <Device::~Device()>
c002941b:	83 c4 10             	add    esp,0x10
c002941e:	90                   	nop
c002941f:	83 c4 0c             	add    esp,0xc
c0029422:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c0029424 <ACPI::~ACPI()>:
c0029424:	83 ec 0c             	sub    esp,0xc
c0029427:	83 ec 0c             	sub    esp,0xc
c002942a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002942e:	e8 cd ff ff ff       	call   c0029400 <ACPI::~ACPI()>
c0029433:	83 c4 10             	add    esp,0x10
c0029436:	83 ec 08             	sub    esp,0x8
c0029439:	68 68 12 00 00       	push   0x1268
c002943e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029442:	e8 ca 99 fe ff       	call   c0012e11 <operator delete(void*, unsigned long)>
c0029447:	83 c4 10             	add    esp,0x10
c002944a:	83 c4 0c             	add    esp,0xc
c002944d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c002944e <LinkedList<Device>::~LinkedList()>:
c002944e:	90                   	nop
c002944f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c0029450 <LinkedList<Device>::isEmpty()>:
c0029450:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029454:	8b 00                	mov    eax,DWORD PTR [eax]
c0029456:	85 c0                	test   eax,eax
c0029458:	75 0e                	jne    c0029468 <LinkedList<Device>::isEmpty()+0x18>
c002945a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002945e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029461:	85 c0                	test   eax,eax
c0029463:	75 03                	jne    c0029468 <LinkedList<Device>::isEmpty()+0x18>
c0029465:	b0 01                	mov    al,0x1
c0029467:	c3                   	ret    
c0029468:	b0 00                	mov    al,0x0
c002946a:	90                   	nop
c002946b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c002946c <LinkedList<Device>::getFirstElement()>:
c002946c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029470:	8b 00                	mov    eax,DWORD PTR [eax]
c0029472:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c0029474 <LinkedList<Device>::removeFirst()>:
c0029474:	83 ec 0c             	sub    esp,0xc
c0029477:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002947b:	8b 00                	mov    eax,DWORD PTR [eax]
c002947d:	85 c0                	test   eax,eax
c002947f:	75 15                	jne    c0029496 <LinkedList<Device>::removeFirst()+0x22>
c0029481:	83 ec 0c             	sub    esp,0xc
c0029484:	68 d8 ad 02 c0       	push   0xc002add8
c0029489:	e8 23 14 ff ff       	call   c001a8b1 <Krnl::panic(char const*)>
c002948e:	83 c4 10             	add    esp,0x10
c0029491:	e9 87 00 00 00       	jmp    c002951d <LinkedList<Device>::removeFirst()+0xa9>
c0029496:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002949a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002949d:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c00294a3:	85 c0                	test   eax,eax
c00294a5:	74 10                	je     c00294b7 <LinkedList<Device>::removeFirst()+0x43>
c00294a7:	83 ec 0c             	sub    esp,0xc
c00294aa:	68 23 ae 02 c0       	push   0xc002ae23
c00294af:	e8 fd 13 ff ff       	call   c001a8b1 <Krnl::panic(char const*)>
c00294b4:	83 c4 10             	add    esp,0x10
c00294b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00294bb:	8b 00                	mov    eax,DWORD PTR [eax]
c00294bd:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c00294c3:	85 c0                	test   eax,eax
c00294c5:	75 33                	jne    c00294fa <LinkedList<Device>::removeFirst()+0x86>
c00294c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00294cb:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00294d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00294d5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00294dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00294e0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00294e3:	83 f8 01             	cmp    eax,0x1
c00294e6:	74 24                	je     c002950c <LinkedList<Device>::removeFirst()+0x98>
c00294e8:	83 ec 0c             	sub    esp,0xc
c00294eb:	68 fc ad 02 c0       	push   0xc002adfc
c00294f0:	e8 bc 13 ff ff       	call   c001a8b1 <Krnl::panic(char const*)>
c00294f5:	83 c4 10             	add    esp,0x10
c00294f8:	eb 12                	jmp    c002950c <LinkedList<Device>::removeFirst()+0x98>
c00294fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00294fe:	8b 00                	mov    eax,DWORD PTR [eax]
c0029500:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c0029506:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002950a:	89 10                	mov    DWORD PTR [eax],edx
c002950c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029510:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029513:	8d 50 ff             	lea    edx,[eax-0x1]
c0029516:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002951a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002951d:	83 c4 0c             	add    esp,0xc
c0029520:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c0029522 <CPU::~CPU()>:
c0029522:	83 ec 0c             	sub    esp,0xc
c0029525:	ba c0 c3 02 c0       	mov    edx,0xc002c3c0
c002952a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002952e:	89 10                	mov    DWORD PTR [eax],edx
c0029530:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029534:	83 ec 0c             	sub    esp,0xc
c0029537:	50                   	push   eax
c0029538:	e8 bb ac fe ff       	call   c00141f8 <Device::~Device()>
c002953d:	83 c4 10             	add    esp,0x10
c0029540:	90                   	nop
c0029541:	83 c4 0c             	add    esp,0xc
c0029544:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c0029546 <CPU::~CPU()>:
c0029546:	83 ec 0c             	sub    esp,0xc
c0029549:	83 ec 0c             	sub    esp,0xc
c002954c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029550:	e8 cd ff ff ff       	call   c0029522 <CPU::~CPU()>
c0029555:	83 c4 10             	add    esp,0x10
c0029558:	83 ec 08             	sub    esp,0x8
c002955b:	68 98 11 00 00       	push   0x1198
c0029560:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029564:	e8 a8 98 fe ff       	call   c0012e11 <operator delete(void*, unsigned long)>
c0029569:	83 c4 10             	add    esp,0x10
c002956c:	83 c4 0c             	add    esp,0xc
c002956f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c0029570 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c0029570:	90                   	nop
c0029571:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0029572 <ThreadControlBlock::ThreadControlBlock()>:
c0029572:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029576:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c002957d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029581:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0029588:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002958c:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0029593:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029597:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c002959e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00295a2:	c7 40 59 00 00 00 00 	mov    DWORD PTR [eax+0x59],0x0
c00295a9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00295ad:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c00295b1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00295b5:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c00295b9:	90                   	nop
c00295ba:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c00295bc <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c00295bc:	83 ec 0c             	sub    esp,0xc
c00295bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00295c3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00295c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00295cd:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00295d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00295d8:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00295df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00295e3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00295e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00295ed:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00295f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00295f8:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00295ff:	83 ec 0c             	sub    esp,0xc
c0029602:	68 86 ad 02 c0       	push   0xc002ad86
c0029607:	e8 e5 98 fe ff       	call   c0012ef1 <Dbg::kprintf(char const*, ...)>
c002960c:	83 c4 10             	add    esp,0x10
c002960f:	90                   	nop
c0029610:	83 c4 0c             	add    esp,0xc
c0029613:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c0029614 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c0029614:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0029618:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002961b:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c002961c <Vm::_FPUState::_FPUState()>:
c002961c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029620:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c0029627:	90                   	nop
c0029628:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c002962a <PCI::~PCI()>:
c002962a:	83 ec 0c             	sub    esp,0xc
c002962d:	ba c4 d4 02 c0       	mov    edx,0xc002d4c4
c0029632:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029636:	89 10                	mov    DWORD PTR [eax],edx
c0029638:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002963c:	83 ec 0c             	sub    esp,0xc
c002963f:	50                   	push   eax
c0029640:	e8 83 a5 fe ff       	call   c0013bc8 <Bus::~Bus()>
c0029645:	83 c4 10             	add    esp,0x10
c0029648:	90                   	nop
c0029649:	83 c4 0c             	add    esp,0xc
c002964c:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c002964e <PCI::~PCI()>:
c002964e:	83 ec 0c             	sub    esp,0xc
c0029651:	83 ec 0c             	sub    esp,0xc
c0029654:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029658:	e8 cd ff ff ff       	call   c002962a <PCI::~PCI()>
c002965d:	83 c4 10             	add    esp,0x10
c0029660:	83 ec 08             	sub    esp,0x8
c0029663:	68 58 01 00 00       	push   0x158
c0029668:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002966c:	e8 a0 97 fe ff       	call   c0012e11 <operator delete(void*, unsigned long)>
c0029671:	83 c4 10             	add    esp,0x10
c0029674:	83 c4 0c             	add    esp,0xc
c0029677:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c0029678 <IDE::~IDE()>:
c0029678:	83 ec 0c             	sub    esp,0xc
c002967b:	ba 28 d7 02 c0       	mov    edx,0xc002d728
c0029680:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029684:	89 10                	mov    DWORD PTR [eax],edx
c0029686:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002968a:	83 ec 0c             	sub    esp,0xc
c002968d:	50                   	push   eax
c002968e:	e8 63 b0 fe ff       	call   c00146f6 <HardDiskController::~HardDiskController()>
c0029693:	83 c4 10             	add    esp,0x10
c0029696:	90                   	nop
c0029697:	83 c4 0c             	add    esp,0xc
c002969a:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c002969c <IDE::~IDE()>:
c002969c:	83 ec 0c             	sub    esp,0xc
c002969f:	83 ec 0c             	sub    esp,0xc
c00296a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00296a6:	e8 cd ff ff ff       	call   c0029678 <IDE::~IDE()>
c00296ab:	83 c4 10             	add    esp,0x10
c00296ae:	83 ec 08             	sub    esp,0x8
c00296b1:	68 70 02 00 00       	push   0x270
c00296b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00296ba:	e8 52 97 fe ff       	call   c0012e11 <operator delete(void*, unsigned long)>
c00296bf:	83 c4 10             	add    esp,0x10
c00296c2:	83 c4 0c             	add    esp,0xc
c00296c5:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c00296c6 <SATABus::~SATABus()>:
c00296c6:	83 ec 0c             	sub    esp,0xc
c00296c9:	ba 08 d8 02 c0       	mov    edx,0xc002d808
c00296ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00296d2:	89 10                	mov    DWORD PTR [eax],edx
c00296d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00296d8:	83 ec 0c             	sub    esp,0xc
c00296db:	50                   	push   eax
c00296dc:	e8 15 b0 fe ff       	call   c00146f6 <HardDiskController::~HardDiskController()>
c00296e1:	83 c4 10             	add    esp,0x10
c00296e4:	90                   	nop
c00296e5:	83 c4 0c             	add    esp,0xc
c00296e8:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c00296ea <SATABus::~SATABus()>:
c00296ea:	83 ec 0c             	sub    esp,0xc
c00296ed:	83 ec 0c             	sub    esp,0xc
c00296f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00296f4:	e8 cd ff ff ff       	call   c00296c6 <SATABus::~SATABus()>
c00296f9:	83 c4 10             	add    esp,0x10
c00296fc:	83 ec 08             	sub    esp,0x8
c00296ff:	68 64 01 00 00       	push   0x164
c0029704:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029708:	e8 04 97 fe ff       	call   c0012e11 <operator delete(void*, unsigned long)>
c002970d:	83 c4 10             	add    esp,0x10
c0029710:	83 c4 0c             	add    esp,0xc
c0029713:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0029714 <ATA::~ATA()>:
c0029714:	83 ec 0c             	sub    esp,0xc
c0029717:	ba 54 d8 02 c0       	mov    edx,0xc002d854
c002971c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029720:	89 10                	mov    DWORD PTR [eax],edx
c0029722:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029726:	83 ec 0c             	sub    esp,0xc
c0029729:	50                   	push   eax
c002972a:	e8 b9 b0 fe ff       	call   c00147e8 <PhysicalDisk::~PhysicalDisk()>
c002972f:	83 c4 10             	add    esp,0x10
c0029732:	90                   	nop
c0029733:	83 c4 0c             	add    esp,0xc
c0029736:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c0029738 <ATA::~ATA()>:
c0029738:	83 ec 0c             	sub    esp,0xc
c002973b:	83 ec 0c             	sub    esp,0xc
c002973e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029742:	e8 cd ff ff ff       	call   c0029714 <ATA::~ATA()>
c0029747:	83 c4 10             	add    esp,0x10
c002974a:	83 ec 08             	sub    esp,0x8
c002974d:	68 7c 01 00 00       	push   0x17c
c0029752:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029756:	e8 b6 96 fe ff       	call   c0012e11 <operator delete(void*, unsigned long)>
c002975b:	83 c4 10             	add    esp,0x10
c002975e:	83 c4 0c             	add    esp,0xc
c0029761:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c0029762 <ATAPI::~ATAPI()>:
c0029762:	83 ec 0c             	sub    esp,0xc
c0029765:	ba 8c d8 02 c0       	mov    edx,0xc002d88c
c002976a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002976e:	89 10                	mov    DWORD PTR [eax],edx
c0029770:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029774:	83 ec 0c             	sub    esp,0xc
c0029777:	50                   	push   eax
c0029778:	e8 6b b0 fe ff       	call   c00147e8 <PhysicalDisk::~PhysicalDisk()>
c002977d:	83 c4 10             	add    esp,0x10
c0029780:	90                   	nop
c0029781:	83 c4 0c             	add    esp,0xc
c0029784:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c0029786 <ATAPI::~ATAPI()>:
c0029786:	83 ec 0c             	sub    esp,0xc
c0029789:	83 ec 0c             	sub    esp,0xc
c002978c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029790:	e8 cd ff ff ff       	call   c0029762 <ATAPI::~ATAPI()>
c0029795:	83 c4 10             	add    esp,0x10
c0029798:	83 ec 08             	sub    esp,0x8
c002979b:	68 80 01 00 00       	push   0x180
c00297a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00297a4:	e8 68 96 fe ff       	call   c0012e11 <operator delete(void*, unsigned long)>
c00297a9:	83 c4 10             	add    esp,0x10
c00297ac:	83 c4 0c             	add    esp,0xc
c00297af:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c00297b0 <SATA::~SATA()>:
c00297b0:	83 ec 0c             	sub    esp,0xc
c00297b3:	ba 40 d9 02 c0       	mov    edx,0xc002d940
c00297b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00297bc:	89 10                	mov    DWORD PTR [eax],edx
c00297be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00297c2:	83 ec 0c             	sub    esp,0xc
c00297c5:	50                   	push   eax
c00297c6:	e8 1d b0 fe ff       	call   c00147e8 <PhysicalDisk::~PhysicalDisk()>
c00297cb:	83 c4 10             	add    esp,0x10
c00297ce:	90                   	nop
c00297cf:	83 c4 0c             	add    esp,0xc
c00297d2:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c00297d4 <SATA::~SATA()>:
c00297d4:	83 ec 0c             	sub    esp,0xc
c00297d7:	83 ec 0c             	sub    esp,0xc
c00297da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00297de:	e8 cd ff ff ff       	call   c00297b0 <SATA::~SATA()>
c00297e3:	83 c4 10             	add    esp,0x10
c00297e6:	83 ec 08             	sub    esp,0x8
c00297e9:	68 7c 01 00 00       	push   0x17c
c00297ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00297f2:	e8 1a 96 fe ff       	call   c0012e11 <operator delete(void*, unsigned long)>
c00297f7:	83 c4 10             	add    esp,0x10
c00297fa:	83 c4 0c             	add    esp,0xc
c00297fd:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c00297fe <SATAPI::~SATAPI()>:
c00297fe:	83 ec 0c             	sub    esp,0xc
c0029801:	ba 1c da 02 c0       	mov    edx,0xc002da1c
c0029806:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002980a:	89 10                	mov    DWORD PTR [eax],edx
c002980c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029810:	83 ec 0c             	sub    esp,0xc
c0029813:	50                   	push   eax
c0029814:	e8 cf af fe ff       	call   c00147e8 <PhysicalDisk::~PhysicalDisk()>
c0029819:	83 c4 10             	add    esp,0x10
c002981c:	90                   	nop
c002981d:	83 c4 0c             	add    esp,0xc
c0029820:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c0029822 <SATAPI::~SATAPI()>:
c0029822:	83 ec 0c             	sub    esp,0xc
c0029825:	83 ec 0c             	sub    esp,0xc
c0029828:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002982c:	e8 cd ff ff ff       	call   c00297fe <SATAPI::~SATAPI()>
c0029831:	83 c4 10             	add    esp,0x10
c0029834:	83 ec 08             	sub    esp,0x8
c0029837:	68 80 01 00 00       	push   0x180
c002983c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029840:	e8 cc 95 fe ff       	call   c0012e11 <operator delete(void*, unsigned long)>
c0029845:	83 c4 10             	add    esp,0x10
c0029848:	83 c4 0c             	add    esp,0xc
c002984b:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c002984c <AVX::~AVX()>:
c002984c:	83 ec 0c             	sub    esp,0xc
c002984f:	ba 5c da 02 c0       	mov    edx,0xc002da5c
c0029854:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029858:	89 10                	mov    DWORD PTR [eax],edx
c002985a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002985e:	83 ec 0c             	sub    esp,0xc
c0029861:	50                   	push   eax
c0029862:	e8 05 b0 fe ff       	call   c001486c <FPU::~FPU()>
c0029867:	83 c4 10             	add    esp,0x10
c002986a:	90                   	nop
c002986b:	83 c4 0c             	add    esp,0xc
c002986e:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c0029870 <AVX::~AVX()>:
c0029870:	83 ec 0c             	sub    esp,0xc
c0029873:	83 ec 0c             	sub    esp,0xc
c0029876:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002987a:	e8 cd ff ff ff       	call   c002984c <AVX::~AVX()>
c002987f:	83 c4 10             	add    esp,0x10
c0029882:	83 ec 08             	sub    esp,0x8
c0029885:	68 58 01 00 00       	push   0x158
c002988a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002988e:	e8 7e 95 fe ff       	call   c0012e11 <operator delete(void*, unsigned long)>
c0029893:	83 c4 10             	add    esp,0x10
c0029896:	83 c4 0c             	add    esp,0xc
c0029899:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c002989a <MMX::~MMX()>:
c002989a:	83 ec 0c             	sub    esp,0xc
c002989d:	ba 9c da 02 c0       	mov    edx,0xc002da9c
c00298a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00298a6:	89 10                	mov    DWORD PTR [eax],edx
c00298a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00298ac:	83 ec 0c             	sub    esp,0xc
c00298af:	50                   	push   eax
c00298b0:	e8 b7 af fe ff       	call   c001486c <FPU::~FPU()>
c00298b5:	83 c4 10             	add    esp,0x10
c00298b8:	90                   	nop
c00298b9:	83 c4 0c             	add    esp,0xc
c00298bc:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c00298be <MMX::~MMX()>:
c00298be:	83 ec 0c             	sub    esp,0xc
c00298c1:	83 ec 0c             	sub    esp,0xc
c00298c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00298c8:	e8 cd ff ff ff       	call   c002989a <MMX::~MMX()>
c00298cd:	83 c4 10             	add    esp,0x10
c00298d0:	83 ec 08             	sub    esp,0x8
c00298d3:	68 58 01 00 00       	push   0x158
c00298d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00298dc:	e8 30 95 fe ff       	call   c0012e11 <operator delete(void*, unsigned long)>
c00298e1:	83 c4 10             	add    esp,0x10
c00298e4:	83 c4 0c             	add    esp,0xc
c00298e7:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c00298e8 <SSE::~SSE()>:
c00298e8:	83 ec 0c             	sub    esp,0xc
c00298eb:	ba dc da 02 c0       	mov    edx,0xc002dadc
c00298f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00298f4:	89 10                	mov    DWORD PTR [eax],edx
c00298f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00298fa:	83 ec 0c             	sub    esp,0xc
c00298fd:	50                   	push   eax
c00298fe:	e8 69 af fe ff       	call   c001486c <FPU::~FPU()>
c0029903:	83 c4 10             	add    esp,0x10
c0029906:	90                   	nop
c0029907:	83 c4 0c             	add    esp,0xc
c002990a:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c002990c <SSE::~SSE()>:
c002990c:	83 ec 0c             	sub    esp,0xc
c002990f:	83 ec 0c             	sub    esp,0xc
c0029912:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029916:	e8 cd ff ff ff       	call   c00298e8 <SSE::~SSE()>
c002991b:	83 c4 10             	add    esp,0x10
c002991e:	83 ec 08             	sub    esp,0x8
c0029921:	68 58 01 00 00       	push   0x158
c0029926:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002992a:	e8 e2 94 fe ff       	call   c0012e11 <operator delete(void*, unsigned long)>
c002992f:	83 c4 10             	add    esp,0x10
c0029932:	83 c4 0c             	add    esp,0xc
c0029935:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c0029936 <x87::~x87()>:
c0029936:	83 ec 0c             	sub    esp,0xc
c0029939:	ba 1c db 02 c0       	mov    edx,0xc002db1c
c002993e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029942:	89 10                	mov    DWORD PTR [eax],edx
c0029944:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029948:	83 ec 0c             	sub    esp,0xc
c002994b:	50                   	push   eax
c002994c:	e8 1b af fe ff       	call   c001486c <FPU::~FPU()>
c0029951:	83 c4 10             	add    esp,0x10
c0029954:	90                   	nop
c0029955:	83 c4 0c             	add    esp,0xc
c0029958:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c002995a <x87::~x87()>:
c002995a:	83 ec 0c             	sub    esp,0xc
c002995d:	83 ec 0c             	sub    esp,0xc
c0029960:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029964:	e8 cd ff ff ff       	call   c0029936 <x87::~x87()>
c0029969:	83 c4 10             	add    esp,0x10
c002996c:	83 ec 08             	sub    esp,0x8
c002996f:	68 58 01 00 00       	push   0x158
c0029974:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029978:	e8 94 94 fe ff       	call   c0012e11 <operator delete(void*, unsigned long)>
c002997d:	83 c4 10             	add    esp,0x10
c0029980:	83 c4 0c             	add    esp,0xc
c0029983:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0029984 <IOAPIC::~IOAPIC()>:
c0029984:	83 ec 0c             	sub    esp,0xc
c0029987:	ba 74 dc 02 c0       	mov    edx,0xc002dc74
c002998c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029990:	89 10                	mov    DWORD PTR [eax],edx
c0029992:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029996:	83 ec 0c             	sub    esp,0xc
c0029999:	50                   	push   eax
c002999a:	e8 59 a8 fe ff       	call   c00141f8 <Device::~Device()>
c002999f:	83 c4 10             	add    esp,0x10
c00299a2:	90                   	nop
c00299a3:	83 c4 0c             	add    esp,0xc
c00299a6:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c00299a8 <IOAPIC::~IOAPIC()>:
c00299a8:	83 ec 0c             	sub    esp,0xc
c00299ab:	83 ec 0c             	sub    esp,0xc
c00299ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00299b2:	e8 cd ff ff ff       	call   c0029984 <IOAPIC::~IOAPIC()>
c00299b7:	83 c4 10             	add    esp,0x10
c00299ba:	83 ec 08             	sub    esp,0x8
c00299bd:	68 68 01 00 00       	push   0x168
c00299c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00299c6:	e8 46 94 fe ff       	call   c0012e11 <operator delete(void*, unsigned long)>
c00299cb:	83 c4 10             	add    esp,0x10
c00299ce:	83 c4 0c             	add    esp,0xc
c00299d1:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c00299d2 <APIC::~APIC()>:
c00299d2:	83 ec 0c             	sub    esp,0xc
c00299d5:	ba 2c dc 02 c0       	mov    edx,0xc002dc2c
c00299da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00299de:	89 10                	mov    DWORD PTR [eax],edx
c00299e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00299e4:	83 ec 0c             	sub    esp,0xc
c00299e7:	50                   	push   eax
c00299e8:	e8 49 b3 fe ff       	call   c0014d36 <InterruptController::~InterruptController()>
c00299ed:	83 c4 10             	add    esp,0x10
c00299f0:	90                   	nop
c00299f1:	83 c4 0c             	add    esp,0xc
c00299f4:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c00299f6 <APIC::~APIC()>:
c00299f6:	83 ec 0c             	sub    esp,0xc
c00299f9:	83 ec 0c             	sub    esp,0xc
c00299fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029a00:	e8 cd ff ff ff       	call   c00299d2 <APIC::~APIC()>
c0029a05:	83 c4 10             	add    esp,0x10
c0029a08:	83 ec 08             	sub    esp,0x8
c0029a0b:	68 58 21 00 00       	push   0x2158
c0029a10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029a14:	e8 f8 93 fe ff       	call   c0012e11 <operator delete(void*, unsigned long)>
c0029a19:	83 c4 10             	add    esp,0x10
c0029a1c:	83 c4 0c             	add    esp,0xc
c0029a1f:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c0029a20 <PIC::~PIC()>:
c0029a20:	83 ec 0c             	sub    esp,0xc
c0029a23:	ba c4 dc 02 c0       	mov    edx,0xc002dcc4
c0029a28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029a2c:	89 10                	mov    DWORD PTR [eax],edx
c0029a2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029a32:	83 ec 0c             	sub    esp,0xc
c0029a35:	50                   	push   eax
c0029a36:	e8 fb b2 fe ff       	call   c0014d36 <InterruptController::~InterruptController()>
c0029a3b:	83 c4 10             	add    esp,0x10
c0029a3e:	90                   	nop
c0029a3f:	83 c4 0c             	add    esp,0xc
c0029a42:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c0029a44 <PIC::~PIC()>:
c0029a44:	83 ec 0c             	sub    esp,0xc
c0029a47:	83 ec 0c             	sub    esp,0xc
c0029a4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029a4e:	e8 cd ff ff ff       	call   c0029a20 <PIC::~PIC()>
c0029a53:	83 c4 10             	add    esp,0x10
c0029a56:	83 ec 08             	sub    esp,0x8
c0029a59:	68 58 21 00 00       	push   0x2158
c0029a5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029a62:	e8 aa 93 fe ff       	call   c0012e11 <operator delete(void*, unsigned long)>
c0029a67:	83 c4 10             	add    esp,0x10
c0029a6a:	83 c4 0c             	add    esp,0xc
c0029a6d:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0029a6e <APICTimer::~APICTimer()>:
c0029a6e:	83 ec 0c             	sub    esp,0xc
c0029a71:	ba 18 dd 02 c0       	mov    edx,0xc002dd18
c0029a76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029a7a:	89 10                	mov    DWORD PTR [eax],edx
c0029a7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029a80:	83 ec 0c             	sub    esp,0xc
c0029a83:	50                   	push   eax
c0029a84:	e8 63 d3 fe ff       	call   c0016dec <Timer::~Timer()>
c0029a89:	83 c4 10             	add    esp,0x10
c0029a8c:	90                   	nop
c0029a8d:	83 c4 0c             	add    esp,0xc
c0029a90:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0029a92 <APICTimer::~APICTimer()>:
c0029a92:	83 ec 0c             	sub    esp,0xc
c0029a95:	83 ec 0c             	sub    esp,0xc
c0029a98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029a9c:	e8 cd ff ff ff       	call   c0029a6e <APICTimer::~APICTimer()>
c0029aa1:	83 c4 10             	add    esp,0x10
c0029aa4:	83 ec 08             	sub    esp,0x8
c0029aa7:	68 60 01 00 00       	push   0x160
c0029aac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029ab0:	e8 5c 93 fe ff       	call   c0012e11 <operator delete(void*, unsigned long)>
c0029ab5:	83 c4 10             	add    esp,0x10
c0029ab8:	83 c4 0c             	add    esp,0xc
c0029abb:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0029abc <PIT::~PIT()>:
c0029abc:	83 ec 0c             	sub    esp,0xc
c0029abf:	ba 68 dd 02 c0       	mov    edx,0xc002dd68
c0029ac4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029ac8:	89 10                	mov    DWORD PTR [eax],edx
c0029aca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029ace:	83 ec 0c             	sub    esp,0xc
c0029ad1:	50                   	push   eax
c0029ad2:	e8 15 d3 fe ff       	call   c0016dec <Timer::~Timer()>
c0029ad7:	83 c4 10             	add    esp,0x10
c0029ada:	90                   	nop
c0029adb:	83 c4 0c             	add    esp,0xc
c0029ade:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c0029ae0 <PIT::~PIT()>:
c0029ae0:	83 ec 0c             	sub    esp,0xc
c0029ae3:	83 ec 0c             	sub    esp,0xc
c0029ae6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029aea:	e8 cd ff ff ff       	call   c0029abc <PIT::~PIT()>
c0029aef:	83 c4 10             	add    esp,0x10
c0029af2:	83 ec 08             	sub    esp,0x8
c0029af5:	68 5c 01 00 00       	push   0x15c
c0029afa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029afe:	e8 0e 93 fe ff       	call   c0012e11 <operator delete(void*, unsigned long)>
c0029b03:	83 c4 10             	add    esp,0x10
c0029b06:	83 c4 0c             	add    esp,0xc
c0029b09:	c3                   	ret    
