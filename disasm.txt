
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 f3 77 00 00       	call   c0007813 <KeEntryPoint>

c0000020 <deregister_tm_clones>:
c0000020:	b8 54 02 02 c0       	mov    eax,0xc0020254
c0000025:	3d 54 02 02 c0       	cmp    eax,0xc0020254
c000002a:	74 1c                	je     c0000048 <deregister_tm_clones+0x28>
c000002c:	b8 00 00 00 00       	mov    eax,0x0
c0000031:	85 c0                	test   eax,eax
c0000033:	74 13                	je     c0000048 <deregister_tm_clones+0x28>
c0000035:	55                   	push   ebp
c0000036:	89 e5                	mov    ebp,esp
c0000038:	83 ec 14             	sub    esp,0x14
c000003b:	68 54 02 02 c0       	push   0xc0020254
c0000040:	ff d0                	call   eax
c0000042:	83 c4 10             	add    esp,0x10
c0000045:	c9                   	leave  
c0000046:	c3                   	ret    
c0000047:	90                   	nop
c0000048:	c3                   	ret    
c0000049:	8d 76 00             	lea    esi,[esi+0x0]

c000004c <register_tm_clones>:
c000004c:	b8 54 02 02 c0       	mov    eax,0xc0020254
c0000051:	2d 54 02 02 c0       	sub    eax,0xc0020254
c0000056:	c1 f8 02             	sar    eax,0x2
c0000059:	89 c2                	mov    edx,eax
c000005b:	c1 ea 1f             	shr    edx,0x1f
c000005e:	01 d0                	add    eax,edx
c0000060:	d1 f8                	sar    eax,1
c0000062:	74 1c                	je     c0000080 <register_tm_clones+0x34>
c0000064:	ba 00 00 00 00       	mov    edx,0x0
c0000069:	85 d2                	test   edx,edx
c000006b:	74 13                	je     c0000080 <register_tm_clones+0x34>
c000006d:	55                   	push   ebp
c000006e:	89 e5                	mov    ebp,esp
c0000070:	83 ec 10             	sub    esp,0x10
c0000073:	50                   	push   eax
c0000074:	68 54 02 02 c0       	push   0xc0020254
c0000079:	ff d2                	call   edx
c000007b:	83 c4 10             	add    esp,0x10
c000007e:	c9                   	leave  
c000007f:	c3                   	ret    
c0000080:	c3                   	ret    
c0000081:	8d 76 00             	lea    esi,[esi+0x0]

c0000084 <__do_global_dtors_aux>:
c0000084:	80 3d c0 20 02 c0 00 	cmp    BYTE PTR ds:0xc00220c0,0x0
c000008b:	75 63                	jne    c00000f0 <__do_global_dtors_aux+0x6c>
c000008d:	55                   	push   ebp
c000008e:	89 e5                	mov    ebp,esp
c0000090:	56                   	push   esi
c0000091:	53                   	push   ebx
c0000092:	bb a8 d5 01 c0       	mov    ebx,0xc001d5a8
c0000097:	81 eb a4 d5 01 c0    	sub    ebx,0xc001d5a4
c000009d:	c1 fb 02             	sar    ebx,0x2
c00000a0:	4b                   	dec    ebx
c00000a1:	be a4 d5 01 c0       	mov    esi,0xc001d5a4
c00000a6:	a1 c4 20 02 c0       	mov    eax,ds:0xc00220c4
c00000ab:	39 d8                	cmp    eax,ebx
c00000ad:	73 13                	jae    c00000c2 <__do_global_dtors_aux+0x3e>
c00000af:	90                   	nop
c00000b0:	40                   	inc    eax
c00000b1:	a3 c4 20 02 c0       	mov    ds:0xc00220c4,eax
c00000b6:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000b9:	a1 c4 20 02 c0       	mov    eax,ds:0xc00220c4
c00000be:	39 d8                	cmp    eax,ebx
c00000c0:	72 ee                	jb     c00000b0 <__do_global_dtors_aux+0x2c>
c00000c2:	e8 59 ff ff ff       	call   c0000020 <deregister_tm_clones>
c00000c7:	b8 00 00 00 00       	mov    eax,0x0
c00000cc:	85 c0                	test   eax,eax
c00000ce:	74 10                	je     c00000e0 <__do_global_dtors_aux+0x5c>
c00000d0:	83 ec 0c             	sub    esp,0xc
c00000d3:	68 54 02 02 c0       	push   0xc0020254
c00000d8:	e8 23 ff ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c00000dd:	83 c4 10             	add    esp,0x10
c00000e0:	c6 05 c0 20 02 c0 01 	mov    BYTE PTR ds:0xc00220c0,0x1
c00000e7:	8d 65 f8             	lea    esp,[ebp-0x8]
c00000ea:	5b                   	pop    ebx
c00000eb:	5e                   	pop    esi
c00000ec:	5d                   	pop    ebp
c00000ed:	c3                   	ret    
c00000ee:	66 90                	xchg   ax,ax
c00000f0:	c3                   	ret    
c00000f1:	8d 76 00             	lea    esi,[esi+0x0]

c00000f4 <frame_dummy>:
c00000f4:	b8 00 00 00 00       	mov    eax,0x0
c00000f9:	85 c0                	test   eax,eax
c00000fb:	74 1f                	je     c000011c <frame_dummy+0x28>
c00000fd:	55                   	push   ebp
c00000fe:	89 e5                	mov    ebp,esp
c0000100:	83 ec 10             	sub    esp,0x10
c0000103:	68 c8 20 02 c0       	push   0xc00220c8
c0000108:	68 54 02 02 c0       	push   0xc0020254
c000010d:	e8 ee fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000112:	83 c4 10             	add    esp,0x10
c0000115:	c9                   	leave  
c0000116:	e9 31 ff ff ff       	jmp    c000004c <register_tm_clones>
c000011b:	90                   	nop
c000011c:	e9 2b ff ff ff       	jmp    c000004c <register_tm_clones>
c0000121:	66 90                	xchg   ax,ax
c0000123:	66 90                	xchg   ax,ax
c0000125:	66 90                	xchg   ax,ax
c0000127:	66 90                	xchg   ax,ax
c0000129:	66 90                	xchg   ax,ax
c000012b:	66 90                	xchg   ax,ax
c000012d:	66 90                	xchg   ax,ax
c000012f:	90                   	nop

c0000130 <manualPCIProbe>:
c0000130:	31 c0                	xor    eax,eax
c0000132:	66 ba f8 0c          	mov    dx,0xcf8
c0000136:	ed                   	in     eax,dx
c0000137:	89 c3                	mov    ebx,eax
c0000139:	b8 00 00 00 80       	mov    eax,0x80000000
c000013e:	ef                   	out    dx,eax
c000013f:	ed                   	in     eax,dx
c0000140:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000145:	75 0a                	jne    c0000151 <manualPCIProbe.noMech1>
c0000147:	b8 01 00 00 00       	mov    eax,0x1
c000014c:	e9 26 00 00 00       	jmp    c0000177 <manualPCIProbe.gotPCI>

c0000151 <manualPCIProbe.noMech1>:
c0000151:	89 d8                	mov    eax,ebx
c0000153:	ef                   	out    dx,eax
c0000154:	66 ba f8 0c          	mov    dx,0xcf8
c0000158:	ec                   	in     al,dx
c0000159:	88 c3                	mov    bl,al
c000015b:	30 c0                	xor    al,al
c000015d:	ee                   	out    dx,al
c000015e:	ec                   	in     al,dx
c000015f:	84 c0                	test   al,al
c0000161:	75 15                	jne    c0000178 <manualPCIProbe.noPCI>
c0000163:	66 ba fa 0c          	mov    dx,0xcfa
c0000167:	ec                   	in     al,dx
c0000168:	88 c7                	mov    bh,al
c000016a:	30 c0                	xor    al,al
c000016c:	ee                   	out    dx,al
c000016d:	ec                   	in     al,dx
c000016e:	84 c0                	test   al,al
c0000170:	75 06                	jne    c0000178 <manualPCIProbe.noPCI>
c0000172:	b8 02 00 00 00       	mov    eax,0x2

c0000177 <manualPCIProbe.gotPCI>:
c0000177:	c3                   	ret    

c0000178 <manualPCIProbe.noPCI>:
c0000178:	31 c0                	xor    eax,eax
c000017a:	c3                   	ret    

c000017b <prepareTramp>:
c000017b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000182:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c0000189:	50                   	push   eax
c000018a:	0f 20 d8             	mov    eax,cr3
c000018d:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000192:	58                   	pop    eax
c0000193:	c3                   	ret    

c0000194 <doTPAUSE>:
c0000194:	fb                   	sti    
c0000195:	31 c0                	xor    eax,eax
c0000197:	31 d2                	xor    edx,edx
c0000199:	66 0f ae f0          	tpause eax
c000019d:	c3                   	ret    

c000019e <hasLegacyFPU>:
c000019e:	0f 20 c2             	mov    edx,cr0
c00001a1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001a7:	0f 22 c2             	mov    cr0,edx
c00001aa:	db e3                	fninit 
c00001ac:	dd 3d c1 01 00 c0    	fnstsw WORD PTR ds:0xc00001c1
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	66 81 3d c1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001c1,0x0
c00001bd:	75 01                	jne    c00001c0 <hasLegacyFPU.nofpu>

c00001bf <hasLegacyFPU.hasfpu>:
c00001bf:	40                   	inc    eax

c00001c0 <hasLegacyFPU.nofpu>:
c00001c0:	c3                   	ret    

c00001c1 <testword>:
c00001c1:	aa                   	stos   BYTE PTR es:[edi],al
c00001c2:	55                   	push   ebp

c00001c3 <is486>:
c00001c3:	0f 09                	wbinvd 
c00001c5:	31 c0                	xor    eax,eax
c00001c7:	40                   	inc    eax
c00001c8:	c3                   	ret    
c00001c9:	90                   	nop
c00001ca:	90                   	nop
c00001cb:	90                   	nop
c00001cc:	90                   	nop
c00001cd:	90                   	nop
c00001ce:	90                   	nop
c00001cf:	90                   	nop
c00001d0:	90                   	nop
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	31 c0                	xor    eax,eax
c00001f8:	c3                   	ret    

c00001f9 <detectCPUID>:
c00001f9:	9c                   	pushf  
c00001fa:	9c                   	pushf  
c00001fb:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000202:	9d                   	popf   
c0000203:	9c                   	pushf  
c0000204:	58                   	pop    eax
c0000205:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000208:	9d                   	popf   
c0000209:	25 00 00 20 00       	and    eax,0x200000
c000020e:	c3                   	ret    

c000020f <goToVM86>:
c000020f:	55                   	push   ebp
c0000210:	89 e5                	mov    ebp,esp
c0000212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000215:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000218:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000021b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000021e:	25 ff ff 00 00       	and    eax,0xffff
c0000223:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000229:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000022f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000235:	52                   	push   edx
c0000236:	51                   	push   ecx
c0000237:	68 02 02 02 00       	push   0x20202
c000023c:	53                   	push   ebx
c000023d:	50                   	push   eax
c000023e:	cf                   	iret   

c000023f <goToUsermode>:
c000023f:	55                   	push   ebp
c0000240:	89 e5                	mov    ebp,esp
c0000242:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000245:	66 b8 23 00          	mov    ax,0x23
c0000249:	66 8e d8             	mov    ds,ax
c000024c:	66 8e c0             	mov    es,ax
c000024f:	66 8e e0             	mov    fs,ax
c0000252:	66 8e e8             	mov    gs,ax
c0000255:	89 e0                	mov    eax,esp
c0000257:	68 23 00 00 00       	push   0x23
c000025c:	50                   	push   eax
c000025d:	68 02 02 00 00       	push   0x202
c0000262:	68 1b 00 00 00       	push   0x1b
c0000267:	53                   	push   ebx
c0000268:	cf                   	iret   

c0000269 <switchToThreadASMFirstTime>:
c0000269:	9c                   	pushf  
c000026a:	fa                   	cli    
c000026b:	50                   	push   eax
c000026c:	53                   	push   ebx
c000026d:	51                   	push   ecx
c000026e:	52                   	push   edx
c000026f:	56                   	push   esi
c0000270:	57                   	push   edi
c0000271:	55                   	push   ebp
c0000272:	e9 11 00 00 00       	jmp    c0000288 <commonThreadSwitch>

c0000277 <switchToThreadASM>:
c0000277:	9c                   	pushf  
c0000278:	50                   	push   eax
c0000279:	53                   	push   ebx
c000027a:	51                   	push   ecx
c000027b:	52                   	push   edx
c000027c:	56                   	push   esi
c000027d:	57                   	push   edi
c000027e:	55                   	push   ebp
c000027f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000285:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000288 <commonThreadSwitch>:
c0000288:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000028c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000292:	8b 06                	mov    eax,DWORD PTR [esi]
c0000294:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000297:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000029a:	0f 20 d9             	mov    ecx,cr3
c000029d:	39 c8                	cmp    eax,ecx
c000029f:	74 03                	je     c00002a4 <commonThreadSwitch.doneVAS>
c00002a1:	0f 22 d8             	mov    cr3,eax

c00002a4 <commonThreadSwitch.doneVAS>:
c00002a4:	85 d2                	test   edx,edx
c00002a6:	75 11                	jne    c00002b9 <commonThreadSwitch.firstTime>
c00002a8:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002ab:	e8 7c 2d 01 00       	call   c001302c <changeTSS>
c00002b0:	5d                   	pop    ebp
c00002b1:	5f                   	pop    edi
c00002b2:	5e                   	pop    esi
c00002b3:	5a                   	pop    edx
c00002b4:	59                   	pop    ecx
c00002b5:	5b                   	pop    ebx
c00002b6:	58                   	pop    eax
c00002b7:	9d                   	popf   
c00002b8:	c3                   	ret    

c00002b9 <commonThreadSwitch.firstTime>:
c00002b9:	fa                   	cli    
c00002ba:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002bd:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002c2:	60                   	pusha  
c00002c3:	e8 4e a0 00 00       	call   c000a316 <mapVASFirstTime>
c00002c8:	61                   	popa   
c00002c9:	89 c4                	mov    esp,eax
c00002cb:	56                   	push   esi
c00002cc:	52                   	push   edx
c00002cd:	e8 5a 2d 01 00       	call   c001302c <changeTSS>
c00002d2:	5a                   	pop    edx
c00002d3:	5e                   	pop    esi
c00002d4:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002db:	5d                   	pop    ebp
c00002dc:	5f                   	pop    edi
c00002dd:	5e                   	pop    esi
c00002de:	59                   	pop    ecx
c00002df:	59                   	pop    ecx
c00002e0:	5b                   	pop    ebx
c00002e1:	58                   	pop    eax
c00002e2:	81 c4 04 00 00 00    	add    esp,0x4
c00002e8:	6a 02                	push   0x2
c00002ea:	9d                   	popf   
c00002eb:	52                   	push   edx
c00002ec:	e8 63 32 01 00       	call   c0013554 <taskStartupFunction>
c00002f1:	5a                   	pop    edx
c00002f2:	50                   	push   eax
c00002f3:	ff d2                	call   edx
c00002f5:	e8 b2 38 01 00       	call   c0013bac <taskReturned>
c00002fa:	e9 fb ff ff ff       	jmp    c00002fa <commonThreadSwitch.firstTime+0x41>

c00002ff <asmQuickAcquireLock>:
c00002ff:	55                   	push   ebp
c0000300:	89 e5                	mov    ebp,esp
c0000302:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000305 <asmQuickAcquireLock.retry>:
c0000305:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c000030a:	72 02                	jb     c000030e <asmQuickAcquireLock.spin_with_pause>
c000030c:	fa                   	cli    
c000030d:	c3                   	ret    

c000030e <asmQuickAcquireLock.spin_with_pause>:
c000030e:	f3 90                	pause  
c0000310:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000316:	75 f6                	jne    c000030e <asmQuickAcquireLock.spin_with_pause>
c0000318:	e9 e8 ff ff ff       	jmp    c0000305 <asmQuickAcquireLock.retry>

c000031d <asmQuickReleaseLock>:
c000031d:	55                   	push   ebp
c000031e:	89 e5                	mov    ebp,esp
c0000320:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000327:	5d                   	pop    ebp
c0000328:	c3                   	ret    

c0000329 <asmAcquireLock>:
c0000329:	55                   	push   ebp
c000032a:	89 e5                	mov    ebp,esp
c000032c:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032f <asmAcquireLock.retry>:
c000032f:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000334:	72 05                	jb     c000033b <asmAcquireLock.spin_with_pause>
c0000336:	9c                   	pushf  
c0000337:	58                   	pop    eax
c0000338:	fa                   	cli    
c0000339:	5d                   	pop    ebp
c000033a:	c3                   	ret    

c000033b <asmAcquireLock.spin_with_pause>:
c000033b:	f3 90                	pause  
c000033d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000343:	75 f6                	jne    c000033b <asmAcquireLock.spin_with_pause>
c0000345:	e9 e5 ff ff ff       	jmp    c000032f <asmAcquireLock.retry>

c000034a <asmReleaseLock>:
c000034a:	55                   	push   ebp
c000034b:	89 e5                	mov    ebp,esp
c000034d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000350:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000353:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000359:	52                   	push   edx
c000035a:	9d                   	popf   
c000035b:	5d                   	pop    ebp
c000035c:	c3                   	ret    

c000035d <loadGDT>:
c000035d:	0f 01 15 c0 2e 02 c0 	lgdtd  ds:0xc0022ec0
c0000364:	66 b8 10 00          	mov    ax,0x10
c0000368:	66 8e d8             	mov    ds,ax
c000036b:	66 8e c0             	mov    es,ax
c000036e:	66 8e e0             	mov    fs,ax
c0000371:	66 8e e8             	mov    gs,ax
c0000374:	66 8e d0             	mov    ss,ax
c0000377:	e9 00 00 00 00       	jmp    c000037c <flush2>

c000037c <flush2>:
c000037c:	c3                   	ret    

c000037d <memcpy>:
c000037d:	e9 10 ff 00 00       	jmp    c0010292 <__not_memcpy>
c0000382:	66 90                	xchg   ax,ax
c0000384:	66 90                	xchg   ax,ax
c0000386:	66 90                	xchg   ax,ax
c0000388:	66 90                	xchg   ax,ax
c000038a:	66 90                	xchg   ax,ax
c000038c:	66 90                	xchg   ax,ax
c000038e:	66 90                	xchg   ax,ax

c0000390 <memcmp>:
c0000390:	56                   	push   esi
c0000391:	53                   	push   ebx
c0000392:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000396:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000039a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000039e:	85 f6                	test   esi,esi
c00003a0:	74 1c                	je     c00003be <memcmp+0x2e>
c00003a2:	8a 08                	mov    cl,BYTE PTR [eax]
c00003a4:	8a 1a                	mov    bl,BYTE PTR [edx]
c00003a6:	38 cb                	cmp    bl,cl
c00003a8:	75 26                	jne    c00003d0 <memcmp+0x40>
c00003aa:	01 c6                	add    esi,eax
c00003ac:	eb 0a                	jmp    c00003b8 <memcmp+0x28>
c00003ae:	66 90                	xchg   ax,ax
c00003b0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003b2:	8a 1a                	mov    bl,BYTE PTR [edx]
c00003b4:	38 d9                	cmp    cl,bl
c00003b6:	75 18                	jne    c00003d0 <memcmp+0x40>
c00003b8:	40                   	inc    eax
c00003b9:	42                   	inc    edx
c00003ba:	39 f0                	cmp    eax,esi
c00003bc:	75 f2                	jne    c00003b0 <memcmp+0x20>
c00003be:	31 c0                	xor    eax,eax
c00003c0:	5b                   	pop    ebx
c00003c1:	5e                   	pop    esi
c00003c2:	c3                   	ret    
c00003c3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00003c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00003d0:	81 e3 ff 00 00 00    	and    ebx,0xff
c00003d6:	31 c0                	xor    eax,eax
c00003d8:	88 c8                	mov    al,cl
c00003da:	29 d8                	sub    eax,ebx
c00003dc:	5b                   	pop    ebx
c00003dd:	5e                   	pop    esi
c00003de:	c3                   	ret    
c00003df:	90                   	nop

c00003e0 <memmove>:
c00003e0:	55                   	push   ebp
c00003e1:	57                   	push   edi
c00003e2:	56                   	push   esi
c00003e3:	53                   	push   ebx
c00003e4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00003e8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00003ec:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00003f0:	39 dd                	cmp    ebp,ebx
c00003f2:	0f 83 98 00 00 00    	jae    c0000490 <memmove+0xb0>
c00003f8:	85 d2                	test   edx,edx
c00003fa:	0f 84 7c 00 00 00    	je     c000047c <memmove+0x9c>
c0000400:	8d 4b 04             	lea    ecx,[ebx+0x4]
c0000403:	8d 75 04             	lea    esi,[ebp+0x4]
c0000406:	39 cd                	cmp    ebp,ecx
c0000408:	0f 93 c1             	setae  cl
c000040b:	39 f3                	cmp    ebx,esi
c000040d:	0f 93 c0             	setae  al
c0000410:	89 c6                	mov    esi,eax
c0000412:	09 ce                	or     esi,ecx
c0000414:	8d 4a ff             	lea    ecx,[edx-0x1]
c0000417:	89 f0                	mov    eax,esi
c0000419:	83 f9 0c             	cmp    ecx,0xc
c000041c:	0f 97 c1             	seta   cl
c000041f:	84 c8                	test   al,cl
c0000421:	0f 84 89 00 00 00    	je     c00004b0 <memmove+0xd0>
c0000427:	89 e9                	mov    ecx,ebp
c0000429:	09 d9                	or     ecx,ebx
c000042b:	83 e1 03             	and    ecx,0x3
c000042e:	0f 85 7c 00 00 00    	jne    c00004b0 <memmove+0xd0>
c0000434:	89 d7                	mov    edi,edx
c0000436:	89 d9                	mov    ecx,ebx
c0000438:	83 e7 fc             	and    edi,0xfffffffc
c000043b:	89 ee                	mov    esi,ebp
c000043d:	01 df                	add    edi,ebx
c000043f:	90                   	nop
c0000440:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000442:	83 c6 04             	add    esi,0x4
c0000445:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c0000448:	83 c1 04             	add    ecx,0x4
c000044b:	39 f9                	cmp    ecx,edi
c000044d:	75 f1                	jne    c0000440 <memmove+0x60>
c000044f:	89 d1                	mov    ecx,edx
c0000451:	89 d7                	mov    edi,edx
c0000453:	83 e1 fc             	and    ecx,0xfffffffc
c0000456:	29 cf                	sub    edi,ecx
c0000458:	01 cb                	add    ebx,ecx
c000045a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000045e:	39 ca                	cmp    edx,ecx
c0000460:	74 1a                	je     c000047c <memmove+0x9c>
c0000462:	8a 03                	mov    al,BYTE PTR [ebx]
c0000464:	83 ff 01             	cmp    edi,0x1
c0000467:	88 06                	mov    BYTE PTR [esi],al
c0000469:	74 11                	je     c000047c <memmove+0x9c>
c000046b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000046e:	83 ff 02             	cmp    edi,0x2
c0000471:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000474:	74 06                	je     c000047c <memmove+0x9c>
c0000476:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000479:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000047c:	5b                   	pop    ebx
c000047d:	89 e8                	mov    eax,ebp
c000047f:	5e                   	pop    esi
c0000480:	5f                   	pop    edi
c0000481:	5d                   	pop    ebp
c0000482:	c3                   	ret    
c0000483:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000489:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000490:	76 ea                	jbe    c000047c <memmove+0x9c>
c0000492:	85 d2                	test   edx,edx
c0000494:	74 e6                	je     c000047c <memmove+0x9c>
c0000496:	4b                   	dec    ebx
c0000497:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000049a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004a0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00004a3:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c00004a6:	4a                   	dec    edx
c00004a7:	75 f7                	jne    c00004a0 <memmove+0xc0>
c00004a9:	5b                   	pop    ebx
c00004aa:	89 e8                	mov    eax,ebp
c00004ac:	5e                   	pop    esi
c00004ad:	5f                   	pop    edi
c00004ae:	5d                   	pop    ebp
c00004af:	c3                   	ret    
c00004b0:	01 ea                	add    edx,ebp
c00004b2:	89 e9                	mov    ecx,ebp
c00004b4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004ba:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004c0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004c2:	41                   	inc    ecx
c00004c3:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004c6:	43                   	inc    ebx
c00004c7:	39 d1                	cmp    ecx,edx
c00004c9:	75 f5                	jne    c00004c0 <memmove+0xe0>
c00004cb:	eb af                	jmp    c000047c <memmove+0x9c>
c00004cd:	8d 76 00             	lea    esi,[esi+0x0]

c00004d0 <memset>:
c00004d0:	57                   	push   edi
c00004d1:	53                   	push   ebx
c00004d2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00004d6:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00004da:	85 d2                	test   edx,edx
c00004dc:	74 1f                	je     c00004fd <memset+0x2d>
c00004de:	31 c0                	xor    eax,eax
c00004e0:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00004e4:	88 c4                	mov    ah,al
c00004e6:	89 c1                	mov    ecx,eax
c00004e8:	c1 e1 10             	shl    ecx,0x10
c00004eb:	09 c8                	or     eax,ecx
c00004ed:	83 fa 04             	cmp    edx,0x4
c00004f0:	73 1e                	jae    c0000510 <memset+0x40>
c00004f2:	85 d2                	test   edx,edx
c00004f4:	74 07                	je     c00004fd <memset+0x2d>
c00004f6:	88 03                	mov    BYTE PTR [ebx],al
c00004f8:	f6 c2 02             	test   dl,0x2
c00004fb:	75 30                	jne    c000052d <memset+0x5d>
c00004fd:	89 d8                	mov    eax,ebx
c00004ff:	5b                   	pop    ebx
c0000500:	5f                   	pop    edi
c0000501:	c3                   	ret    
c0000502:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000509:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000510:	89 03                	mov    DWORD PTR [ebx],eax
c0000512:	8d 7b 04             	lea    edi,[ebx+0x4]
c0000515:	89 d9                	mov    ecx,ebx
c0000517:	83 e7 fc             	and    edi,0xfffffffc
c000051a:	89 44 13 fc          	mov    DWORD PTR [ebx+edx*1-0x4],eax
c000051e:	29 f9                	sub    ecx,edi
c0000520:	01 d1                	add    ecx,edx
c0000522:	c1 e9 02             	shr    ecx,0x2
c0000525:	fc                   	cld    
c0000526:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000528:	89 d8                	mov    eax,ebx
c000052a:	5b                   	pop    ebx
c000052b:	5f                   	pop    edi
c000052c:	c3                   	ret    
c000052d:	66 89 44 13 fe       	mov    WORD PTR [ebx+edx*1-0x2],ax
c0000532:	eb c9                	jmp    c00004fd <memset+0x2d>
c0000534:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000053a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000540 <strlen>:
c0000540:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000544:	31 c0                	xor    eax,eax
c0000546:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000549:	74 15                	je     c0000560 <strlen+0x20>
c000054b:	90                   	nop
c000054c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000550:	40                   	inc    eax
c0000551:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000555:	75 f9                	jne    c0000550 <strlen+0x10>
c0000557:	c3                   	ret    
c0000558:	90                   	nop
c0000559:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000560:	c3                   	ret    
c0000561:	eb 0d                	jmp    c0000570 <strpbrk>
c0000563:	90                   	nop
c0000564:	90                   	nop
c0000565:	90                   	nop
c0000566:	90                   	nop
c0000567:	90                   	nop
c0000568:	90                   	nop
c0000569:	90                   	nop
c000056a:	90                   	nop
c000056b:	90                   	nop
c000056c:	90                   	nop
c000056d:	90                   	nop
c000056e:	90                   	nop
c000056f:	90                   	nop

c0000570 <strpbrk>:
c0000570:	57                   	push   edi
c0000571:	56                   	push   esi
c0000572:	53                   	push   ebx
c0000573:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000577:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000057b:	8a 1e                	mov    bl,BYTE PTR [esi]
c000057d:	84 db                	test   bl,bl
c000057f:	74 21                	je     c00005a2 <strpbrk+0x32>
c0000581:	8a 07                	mov    al,BYTE PTR [edi]
c0000583:	84 c0                	test   al,al
c0000585:	74 14                	je     c000059b <strpbrk+0x2b>
c0000587:	38 d8                	cmp    al,bl
c0000589:	74 19                	je     c00005a4 <strpbrk+0x34>
c000058b:	89 fa                	mov    edx,edi
c000058d:	eb 05                	jmp    c0000594 <strpbrk+0x24>
c000058f:	90                   	nop
c0000590:	38 d9                	cmp    cl,bl
c0000592:	74 10                	je     c00005a4 <strpbrk+0x34>
c0000594:	42                   	inc    edx
c0000595:	8a 0a                	mov    cl,BYTE PTR [edx]
c0000597:	84 c9                	test   cl,cl
c0000599:	75 f5                	jne    c0000590 <strpbrk+0x20>
c000059b:	46                   	inc    esi
c000059c:	8a 1e                	mov    bl,BYTE PTR [esi]
c000059e:	84 db                	test   bl,bl
c00005a0:	75 e1                	jne    c0000583 <strpbrk+0x13>
c00005a2:	31 f6                	xor    esi,esi
c00005a4:	89 f0                	mov    eax,esi
c00005a6:	5b                   	pop    ebx
c00005a7:	5e                   	pop    esi
c00005a8:	5f                   	pop    edi
c00005a9:	c3                   	ret    
c00005aa:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00005b0 <strtok>:
c00005b0:	56                   	push   esi
c00005b1:	53                   	push   ebx
c00005b2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00005b6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00005ba:	85 db                	test   ebx,ebx
c00005bc:	75 07                	jne    c00005c5 <strtok+0x15>
c00005be:	eb 30                	jmp    c00005f0 <strtok+0x40>
c00005c0:	43                   	inc    ebx
c00005c1:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c00005c5:	56                   	push   esi
c00005c6:	53                   	push   ebx
c00005c7:	e8 a4 ff ff ff       	call   c0000570 <strpbrk>
c00005cc:	5a                   	pop    edx
c00005cd:	a3 e0 20 02 c0       	mov    ds:0xc00220e0,eax
c00005d2:	59                   	pop    ecx
c00005d3:	39 d8                	cmp    eax,ebx
c00005d5:	74 e9                	je     c00005c0 <strtok+0x10>
c00005d7:	85 c0                	test   eax,eax
c00005d9:	74 1f                	je     c00005fa <strtok+0x4a>
c00005db:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00005de:	8d 50 01             	lea    edx,[eax+0x1]
c00005e1:	89 d8                	mov    eax,ebx
c00005e3:	89 15 e0 20 02 c0    	mov    DWORD PTR ds:0xc00220e0,edx
c00005e9:	5b                   	pop    ebx
c00005ea:	5e                   	pop    esi
c00005eb:	c3                   	ret    
c00005ec:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00005f0:	8b 1d e0 20 02 c0    	mov    ebx,DWORD PTR ds:0xc00220e0
c00005f6:	85 db                	test   ebx,ebx
c00005f8:	75 cb                	jne    c00005c5 <strtok+0x15>
c00005fa:	31 c0                	xor    eax,eax
c00005fc:	5b                   	pop    ebx
c00005fd:	5e                   	pop    esi
c00005fe:	c3                   	ret    
c00005ff:	90                   	nop

c0000600 <strcpy>:
c0000600:	53                   	push   ebx
c0000601:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000605:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000609:	89 c3                	mov    ebx,eax
c000060b:	8a 11                	mov    dl,BYTE PTR [ecx]
c000060d:	84 d2                	test   dl,dl
c000060f:	74 19                	je     c000062a <strcpy+0x2a>
c0000611:	eb 0d                	jmp    c0000620 <strcpy+0x20>
c0000613:	90                   	nop
c0000614:	90                   	nop
c0000615:	90                   	nop
c0000616:	90                   	nop
c0000617:	90                   	nop
c0000618:	90                   	nop
c0000619:	90                   	nop
c000061a:	90                   	nop
c000061b:	90                   	nop
c000061c:	90                   	nop
c000061d:	90                   	nop
c000061e:	90                   	nop
c000061f:	90                   	nop
c0000620:	88 13                	mov    BYTE PTR [ebx],dl
c0000622:	41                   	inc    ecx
c0000623:	43                   	inc    ebx
c0000624:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000626:	84 d2                	test   dl,dl
c0000628:	75 f6                	jne    c0000620 <strcpy+0x20>
c000062a:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000062d:	5b                   	pop    ebx
c000062e:	c3                   	ret    
c000062f:	90                   	nop

c0000630 <strncpy>:
c0000630:	57                   	push   edi
c0000631:	56                   	push   esi
c0000632:	53                   	push   ebx
c0000633:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000637:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000063b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000063f:	85 ff                	test   edi,edi
c0000641:	74 3e                	je     c0000681 <strncpy+0x51>
c0000643:	8a 1e                	mov    bl,BYTE PTR [esi]
c0000645:	8d 47 ff             	lea    eax,[edi-0x1]
c0000648:	8d 4a 01             	lea    ecx,[edx+0x1]
c000064b:	88 1a                	mov    BYTE PTR [edx],bl
c000064d:	84 db                	test   bl,bl
c000064f:	74 3f                	je     c0000690 <strncpy+0x60>
c0000651:	85 c0                	test   eax,eax
c0000653:	74 2c                	je     c0000681 <strncpy+0x51>
c0000655:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c0000658:	8d 47 fe             	lea    eax,[edi-0x2]
c000065b:	8d 4a 02             	lea    ecx,[edx+0x2]
c000065e:	8d 7e 02             	lea    edi,[esi+0x2]
c0000661:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0000664:	84 db                	test   bl,bl
c0000666:	75 15                	jne    c000067d <strncpy+0x4d>
c0000668:	eb 26                	jmp    c0000690 <strncpy+0x60>
c000066a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000670:	47                   	inc    edi
c0000671:	41                   	inc    ecx
c0000672:	8a 5f ff             	mov    bl,BYTE PTR [edi-0x1]
c0000675:	48                   	dec    eax
c0000676:	88 59 ff             	mov    BYTE PTR [ecx-0x1],bl
c0000679:	84 db                	test   bl,bl
c000067b:	74 13                	je     c0000690 <strncpy+0x60>
c000067d:	85 c0                	test   eax,eax
c000067f:	75 ef                	jne    c0000670 <strncpy+0x40>
c0000681:	5b                   	pop    ebx
c0000682:	89 d0                	mov    eax,edx
c0000684:	5e                   	pop    esi
c0000685:	5f                   	pop    edi
c0000686:	c3                   	ret    
c0000687:	89 f6                	mov    esi,esi
c0000689:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000690:	85 c0                	test   eax,eax
c0000692:	74 ed                	je     c0000681 <strncpy+0x51>
c0000694:	83 f8 04             	cmp    eax,0x4
c0000697:	73 17                	jae    c00006b0 <strncpy+0x80>
c0000699:	85 c0                	test   eax,eax
c000069b:	74 e4                	je     c0000681 <strncpy+0x51>
c000069d:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c00006a0:	a8 02                	test   al,0x2
c00006a2:	74 dd                	je     c0000681 <strncpy+0x51>
c00006a4:	66 c7 44 01 fe 00 00 	mov    WORD PTR [ecx+eax*1-0x2],0x0
c00006ab:	eb d4                	jmp    c0000681 <strncpy+0x51>
c00006ad:	8d 76 00             	lea    esi,[esi+0x0]
c00006b0:	c7 01 00 00 00 00    	mov    DWORD PTR [ecx],0x0
c00006b6:	8d 79 04             	lea    edi,[ecx+0x4]
c00006b9:	c7 44 01 fc 00 00 00 00 	mov    DWORD PTR [ecx+eax*1-0x4],0x0
c00006c1:	83 e7 fc             	and    edi,0xfffffffc
c00006c4:	29 f9                	sub    ecx,edi
c00006c6:	01 c1                	add    ecx,eax
c00006c8:	c1 e9 02             	shr    ecx,0x2
c00006cb:	fc                   	cld    
c00006cc:	31 c0                	xor    eax,eax
c00006ce:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00006d0:	89 d0                	mov    eax,edx
c00006d2:	5b                   	pop    ebx
c00006d3:	5e                   	pop    esi
c00006d4:	5f                   	pop    edi
c00006d5:	c3                   	ret    
c00006d6:	8d 76 00             	lea    esi,[esi+0x0]
c00006d9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00006e0 <strcmp>:
c00006e0:	56                   	push   esi
c00006e1:	53                   	push   ebx
c00006e2:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00006e6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00006ea:	8a 16                	mov    dl,BYTE PTR [esi]
c00006ec:	8a 0b                	mov    cl,BYTE PTR [ebx]
c00006ee:	38 d1                	cmp    cl,dl
c00006f0:	75 1d                	jne    c000070f <strcmp+0x2f>
c00006f2:	84 c9                	test   cl,cl
c00006f4:	74 2a                	je     c0000720 <strcmp+0x40>
c00006f6:	b8 01 00 00 00       	mov    eax,0x1
c00006fb:	eb 08                	jmp    c0000705 <strcmp+0x25>
c00006fd:	8d 76 00             	lea    esi,[esi+0x0]
c0000700:	40                   	inc    eax
c0000701:	84 d2                	test   dl,dl
c0000703:	74 1b                	je     c0000720 <strcmp+0x40>
c0000705:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c0000708:	8a 0c 03             	mov    cl,BYTE PTR [ebx+eax*1]
c000070b:	38 ca                	cmp    dl,cl
c000070d:	74 f1                	je     c0000700 <strcmp+0x20>
c000070f:	31 c0                	xor    eax,eax
c0000711:	81 e1 ff 00 00 00    	and    ecx,0xff
c0000717:	88 d0                	mov    al,dl
c0000719:	5b                   	pop    ebx
c000071a:	29 c8                	sub    eax,ecx
c000071c:	5e                   	pop    esi
c000071d:	c3                   	ret    
c000071e:	66 90                	xchg   ax,ax
c0000720:	31 c0                	xor    eax,eax
c0000722:	5b                   	pop    ebx
c0000723:	5e                   	pop    esi
c0000724:	c3                   	ret    
c0000725:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000729:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000730 <strchr>:
c0000730:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000734:	8a 10                	mov    dl,BYTE PTR [eax]
c0000736:	84 d2                	test   dl,dl
c0000738:	74 21                	je     c000075b <strchr+0x2b>
c000073a:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000073e:	38 ca                	cmp    dl,cl
c0000740:	75 12                	jne    c0000754 <strchr+0x24>
c0000742:	eb 1a                	jmp    c000075e <strchr+0x2e>
c0000744:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000074a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000750:	38 ca                	cmp    dl,cl
c0000752:	74 09                	je     c000075d <strchr+0x2d>
c0000754:	40                   	inc    eax
c0000755:	8a 10                	mov    dl,BYTE PTR [eax]
c0000757:	84 d2                	test   dl,dl
c0000759:	75 f5                	jne    c0000750 <strchr+0x20>
c000075b:	31 c0                	xor    eax,eax
c000075d:	c3                   	ret    
c000075e:	c3                   	ret    
c000075f:	90                   	nop

c0000760 <strncmp>:
c0000760:	57                   	push   edi
c0000761:	56                   	push   esi
c0000762:	53                   	push   ebx
c0000763:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000767:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000076b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000076f:	85 ff                	test   edi,edi
c0000771:	74 2f                	je     c00007a2 <strncmp+0x42>
c0000773:	8a 16                	mov    dl,BYTE PTR [esi]
c0000775:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000777:	38 d1                	cmp    cl,dl
c0000779:	75 35                	jne    c00007b0 <strncmp+0x50>
c000077b:	8d 46 01             	lea    eax,[esi+0x1]
c000077e:	84 c9                	test   cl,cl
c0000780:	74 20                	je     c00007a2 <strncmp+0x42>
c0000782:	01 fe                	add    esi,edi
c0000784:	eb 17                	jmp    c000079d <strncmp+0x3d>
c0000786:	8d 76 00             	lea    esi,[esi+0x0]
c0000789:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000790:	8a 10                	mov    dl,BYTE PTR [eax]
c0000792:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000794:	38 ca                	cmp    dl,cl
c0000796:	75 18                	jne    c00007b0 <strncmp+0x50>
c0000798:	40                   	inc    eax
c0000799:	84 d2                	test   dl,dl
c000079b:	74 05                	je     c00007a2 <strncmp+0x42>
c000079d:	43                   	inc    ebx
c000079e:	39 c6                	cmp    esi,eax
c00007a0:	75 ee                	jne    c0000790 <strncmp+0x30>
c00007a2:	5b                   	pop    ebx
c00007a3:	31 c0                	xor    eax,eax
c00007a5:	5e                   	pop    esi
c00007a6:	5f                   	pop    edi
c00007a7:	c3                   	ret    
c00007a8:	90                   	nop
c00007a9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007b0:	5b                   	pop    ebx
c00007b1:	31 c0                	xor    eax,eax
c00007b3:	81 e1 ff 00 00 00    	and    ecx,0xff
c00007b9:	88 d0                	mov    al,dl
c00007bb:	5e                   	pop    esi
c00007bc:	29 c8                	sub    eax,ecx
c00007be:	5f                   	pop    edi
c00007bf:	c3                   	ret    

c00007c0 <strcat>:
c00007c0:	56                   	push   esi
c00007c1:	53                   	push   ebx
c00007c2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00007c6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007ca:	89 c3                	mov    ebx,eax
c00007cc:	eb 04                	jmp    c00007d2 <strcat+0x12>
c00007ce:	66 90                	xchg   ax,ax
c00007d0:	89 d3                	mov    ebx,edx
c00007d2:	8d 53 01             	lea    edx,[ebx+0x1]
c00007d5:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00007d9:	75 f5                	jne    c00007d0 <strcat+0x10>
c00007db:	31 d2                	xor    edx,edx
c00007dd:	8d 76 00             	lea    esi,[esi+0x0]
c00007e0:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c00007e3:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c00007e6:	42                   	inc    edx
c00007e7:	84 c9                	test   cl,cl
c00007e9:	75 f5                	jne    c00007e0 <strcat+0x20>
c00007eb:	5b                   	pop    ebx
c00007ec:	5e                   	pop    esi
c00007ed:	c3                   	ret    
c00007ee:	66 90                	xchg   ax,ax

c00007f0 <strncat>:
c00007f0:	56                   	push   esi
c00007f1:	53                   	push   ebx
c00007f2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00007f6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00007fa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00007fe:	85 f6                	test   esi,esi
c0000800:	74 2e                	je     c0000830 <strncat+0x40>
c0000802:	89 c2                	mov    edx,eax
c0000804:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000080a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000810:	42                   	inc    edx
c0000811:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000815:	75 f9                	jne    c0000810 <strncat+0x20>
c0000817:	01 ce                	add    esi,ecx
c0000819:	eb 0a                	jmp    c0000825 <strncat+0x35>
c000081b:	90                   	nop
c000081c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000820:	39 f1                	cmp    ecx,esi
c0000822:	74 1c                	je     c0000840 <strncat+0x50>
c0000824:	42                   	inc    edx
c0000825:	41                   	inc    ecx
c0000826:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c0000829:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c000082c:	84 db                	test   bl,bl
c000082e:	75 f0                	jne    c0000820 <strncat+0x30>
c0000830:	5b                   	pop    ebx
c0000831:	5e                   	pop    esi
c0000832:	c3                   	ret    
c0000833:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000839:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000840:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0000843:	5b                   	pop    ebx
c0000844:	5e                   	pop    esi
c0000845:	c3                   	ret    
c0000846:	8d 76 00             	lea    esi,[esi+0x0]
c0000849:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000850 <strstr>:
c0000850:	57                   	push   edi
c0000851:	56                   	push   esi
c0000852:	53                   	push   ebx
c0000853:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000857:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000085b:	57                   	push   edi
c000085c:	e8 df fc ff ff       	call   c0000540 <strlen>
c0000861:	59                   	pop    ecx
c0000862:	85 c0                	test   eax,eax
c0000864:	74 3a                	je     c00008a0 <strstr+0x50>
c0000866:	89 c6                	mov    esi,eax
c0000868:	eb 16                	jmp    c0000880 <strstr+0x30>
c000086a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000870:	56                   	push   esi
c0000871:	57                   	push   edi
c0000872:	53                   	push   ebx
c0000873:	e8 18 fb ff ff       	call   c0000390 <memcmp>
c0000878:	83 c4 0c             	add    esp,0xc
c000087b:	85 c0                	test   eax,eax
c000087d:	74 21                	je     c00008a0 <strstr+0x50>
c000087f:	43                   	inc    ebx
c0000880:	53                   	push   ebx
c0000881:	e8 ba fc ff ff       	call   c0000540 <strlen>
c0000886:	5a                   	pop    edx
c0000887:	39 f0                	cmp    eax,esi
c0000889:	73 e5                	jae    c0000870 <strstr+0x20>
c000088b:	5b                   	pop    ebx
c000088c:	31 c0                	xor    eax,eax
c000088e:	5e                   	pop    esi
c000088f:	5f                   	pop    edi
c0000890:	c3                   	ret    
c0000891:	eb 0d                	jmp    c00008a0 <strstr+0x50>
c0000893:	90                   	nop
c0000894:	90                   	nop
c0000895:	90                   	nop
c0000896:	90                   	nop
c0000897:	90                   	nop
c0000898:	90                   	nop
c0000899:	90                   	nop
c000089a:	90                   	nop
c000089b:	90                   	nop
c000089c:	90                   	nop
c000089d:	90                   	nop
c000089e:	90                   	nop
c000089f:	90                   	nop
c00008a0:	89 d8                	mov    eax,ebx
c00008a2:	5b                   	pop    ebx
c00008a3:	5e                   	pop    esi
c00008a4:	5f                   	pop    edi
c00008a5:	c3                   	ret    
c00008a6:	8d 76 00             	lea    esi,[esi+0x0]
c00008a9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008b0 <toupper>:
c00008b0:	31 d2                	xor    edx,edx
c00008b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008b6:	88 c2                	mov    dl,al
c00008b8:	f6 82 c0 d5 01 c0 02 	test   BYTE PTR [edx-0x3ffe2a40],0x2
c00008bf:	74 03                	je     c00008c4 <toupper+0x14>
c00008c1:	83 e8 20             	sub    eax,0x20
c00008c4:	c3                   	ret    
c00008c5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00008c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008d0 <tolower>:
c00008d0:	31 d2                	xor    edx,edx
c00008d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008d6:	88 c2                	mov    dl,al
c00008d8:	f6 82 c0 d5 01 c0 01 	test   BYTE PTR [edx-0x3ffe2a40],0x1
c00008df:	74 03                	je     c00008e4 <tolower+0x14>
c00008e1:	83 c0 20             	add    eax,0x20
c00008e4:	c3                   	ret    
c00008e5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00008e9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008f0 <simple_strtoul>:
c00008f0:	55                   	push   ebp
c00008f1:	57                   	push   edi
c00008f2:	56                   	push   esi
c00008f3:	53                   	push   ebx
c00008f4:	83 ec 08             	sub    esp,0x8
c00008f7:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00008fb:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00008ff:	90                   	nop
c0000900:	31 d2                	xor    edx,edx
c0000902:	8a 01                	mov    al,BYTE PTR [ecx]
c0000904:	88 c2                	mov    dl,al
c0000906:	f6 82 c0 d5 01 c0 08 	test   BYTE PTR [edx-0x3ffe2a40],0x8
c000090d:	75 04                	jne    c0000913 <simple_strtoul+0x23>
c000090f:	3c 09                	cmp    al,0x9
c0000911:	75 0d                	jne    c0000920 <simple_strtoul+0x30>
c0000913:	41                   	inc    ecx
c0000914:	eb ea                	jmp    c0000900 <simple_strtoul+0x10>
c0000916:	8d 76 00             	lea    esi,[esi+0x0]
c0000919:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000920:	3c 2d                	cmp    al,0x2d
c0000922:	0f 84 48 01 00 00    	je     c0000a70 <simple_strtoul+0x180>
c0000928:	3c 2b                	cmp    al,0x2b
c000092a:	0f 84 e0 00 00 00    	je     c0000a10 <simple_strtoul+0x120>
c0000930:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000938:	85 f6                	test   esi,esi
c000093a:	0f 85 e1 00 00 00    	jne    c0000a21 <simple_strtoul+0x131>
c0000940:	0f be 11             	movsx  edx,BYTE PTR [ecx]
c0000943:	80 fa 30             	cmp    dl,0x30
c0000946:	0f 84 75 01 00 00    	je     c0000ac1 <simple_strtoul+0x1d1>
c000094c:	be 0a 00 00 00       	mov    esi,0xa
c0000951:	84 d2                	test   dl,dl
c0000953:	0f 84 9f 01 00 00    	je     c0000af8 <simple_strtoul+0x208>
c0000959:	31 ed                	xor    ebp,ebp
c000095b:	31 ff                	xor    edi,edi
c000095d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000964:	eb 35                	jmp    c000099b <simple_strtoul+0xab>
c0000966:	8d 76 00             	lea    esi,[esi+0x0]
c0000969:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000970:	83 eb 30             	sub    ebx,0x30
c0000973:	39 f3                	cmp    ebx,esi
c0000975:	73 59                	jae    c00009d0 <simple_strtoul+0xe0>
c0000977:	31 d2                	xor    edx,edx
c0000979:	89 d8                	mov    eax,ebx
c000097b:	f7 d0                	not    eax
c000097d:	f7 f6                	div    esi
c000097f:	39 f8                	cmp    eax,edi
c0000981:	0f 82 c9 00 00 00    	jb     c0000a50 <simple_strtoul+0x160>
c0000987:	0f af fe             	imul   edi,esi
c000098a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000991:	01 df                	add    edi,ebx
c0000993:	41                   	inc    ecx
c0000994:	0f be 11             	movsx  edx,BYTE PTR [ecx]
c0000997:	84 d2                	test   dl,dl
c0000999:	74 35                	je     c00009d0 <simple_strtoul+0xe0>
c000099b:	31 db                	xor    ebx,ebx
c000099d:	88 d3                	mov    bl,dl
c000099f:	f6 83 c0 d5 01 c0 04 	test   BYTE PTR [ebx-0x3ffe2a40],0x4
c00009a6:	75 c8                	jne    c0000970 <simple_strtoul+0x80>
c00009a8:	52                   	push   edx
c00009a9:	e8 02 ff ff ff       	call   c00008b0 <toupper>
c00009ae:	31 d2                	xor    edx,edx
c00009b0:	5b                   	pop    ebx
c00009b1:	88 c2                	mov    dl,al
c00009b3:	f6 82 c0 d5 01 c0 01 	test   BYTE PTR [edx-0x3ffe2a40],0x1
c00009ba:	74 14                	je     c00009d0 <simple_strtoul+0xe0>
c00009bc:	8d 58 c9             	lea    ebx,[eax-0x37]
c00009bf:	39 f3                	cmp    ebx,esi
c00009c1:	72 b4                	jb     c0000977 <simple_strtoul+0x87>
c00009c3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00009c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00009d0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00009d4:	85 c0                	test   eax,eax
c00009d6:	74 18                	je     c00009f0 <simple_strtoul+0x100>
c00009d8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00009db:	09 f8                	or     eax,edi
c00009dd:	0f 85 7d 00 00 00    	jne    c0000a60 <simple_strtoul+0x170>
c00009e3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00009e7:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00009eb:	31 ff                	xor    edi,edi
c00009ed:	89 30                	mov    DWORD PTR [eax],esi
c00009ef:	90                   	nop
c00009f0:	4d                   	dec    ebp
c00009f1:	75 05                	jne    c00009f8 <simple_strtoul+0x108>
c00009f3:	bf ff ff ff ff       	mov    edi,0xffffffff
c00009f8:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c00009fd:	75 02                	jne    c0000a01 <simple_strtoul+0x111>
c00009ff:	f7 df                	neg    edi
c0000a01:	83 c4 08             	add    esp,0x8
c0000a04:	89 f8                	mov    eax,edi
c0000a06:	5b                   	pop    ebx
c0000a07:	5e                   	pop    esi
c0000a08:	5f                   	pop    edi
c0000a09:	5d                   	pop    ebp
c0000a0a:	c3                   	ret    
c0000a0b:	90                   	nop
c0000a0c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a10:	41                   	inc    ecx
c0000a11:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a19:	85 f6                	test   esi,esi
c0000a1b:	0f 84 1f ff ff ff    	je     c0000940 <simple_strtoul+0x50>
c0000a21:	8d 46 fe             	lea    eax,[esi-0x2]
c0000a24:	83 f8 22             	cmp    eax,0x22
c0000a27:	77 7b                	ja     c0000aa4 <simple_strtoul+0x1b4>
c0000a29:	0f be 11             	movsx  edx,BYTE PTR [ecx]
c0000a2c:	83 fe 08             	cmp    esi,0x8
c0000a2f:	0f 84 b3 00 00 00    	je     c0000ae8 <simple_strtoul+0x1f8>
c0000a35:	83 fe 10             	cmp    esi,0x10
c0000a38:	0f 85 13 ff ff ff    	jne    c0000951 <simple_strtoul+0x61>
c0000a3e:	80 fa 30             	cmp    dl,0x30
c0000a41:	74 3b                	je     c0000a7e <simple_strtoul+0x18e>
c0000a43:	be 10 00 00 00       	mov    esi,0x10
c0000a48:	e9 04 ff ff ff       	jmp    c0000951 <simple_strtoul+0x61>
c0000a4d:	8d 76 00             	lea    esi,[esi+0x0]
c0000a50:	bd 01 00 00 00       	mov    ebp,0x1
c0000a55:	31 ff                	xor    edi,edi
c0000a57:	e9 37 ff ff ff       	jmp    c0000993 <simple_strtoul+0xa3>
c0000a5c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a64:	89 08                	mov    DWORD PTR [eax],ecx
c0000a66:	eb 88                	jmp    c00009f0 <simple_strtoul+0x100>
c0000a68:	90                   	nop
c0000a69:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000a70:	41                   	inc    ecx
c0000a71:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000a79:	e9 ba fe ff ff       	jmp    c0000938 <simple_strtoul+0x48>
c0000a7e:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000a82:	88 04 24             	mov    BYTE PTR [esp],al
c0000a85:	50                   	push   eax
c0000a86:	e8 45 fe ff ff       	call   c00008d0 <tolower>
c0000a8b:	5e                   	pop    esi
c0000a8c:	83 f8 78             	cmp    eax,0x78
c0000a8f:	0f 84 88 00 00 00    	je     c0000b1d <simple_strtoul+0x22d>
c0000a95:	41                   	inc    ecx
c0000a96:	be 10 00 00 00       	mov    esi,0x10
c0000a9b:	0f be 14 24          	movsx  edx,BYTE PTR [esp]
c0000a9f:	e9 ad fe ff ff       	jmp    c0000951 <simple_strtoul+0x61>
c0000aa4:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000aa8:	85 ff                	test   edi,edi
c0000aaa:	74 5e                	je     c0000b0a <simple_strtoul+0x21a>
c0000aac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000ab0:	85 c9                	test   ecx,ecx
c0000ab2:	75 50                	jne    c0000b04 <simple_strtoul+0x214>
c0000ab4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000aba:	31 ff                	xor    edi,edi
c0000abc:	e9 37 ff ff ff       	jmp    c00009f8 <simple_strtoul+0x108>
c0000ac1:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000ac5:	88 04 24             	mov    BYTE PTR [esp],al
c0000ac8:	50                   	push   eax
c0000ac9:	e8 02 fe ff ff       	call   c00008d0 <tolower>
c0000ace:	5d                   	pop    ebp
c0000acf:	83 f8 78             	cmp    eax,0x78
c0000ad2:	74 3d                	je     c0000b11 <simple_strtoul+0x221>
c0000ad4:	41                   	inc    ecx
c0000ad5:	0f be 14 24          	movsx  edx,BYTE PTR [esp]
c0000ad9:	80 fa 30             	cmp    dl,0x30
c0000adc:	74 13                	je     c0000af1 <simple_strtoul+0x201>
c0000ade:	be 08 00 00 00       	mov    esi,0x8
c0000ae3:	e9 69 fe ff ff       	jmp    c0000951 <simple_strtoul+0x61>
c0000ae8:	80 fa 30             	cmp    dl,0x30
c0000aeb:	0f 85 60 fe ff ff    	jne    c0000951 <simple_strtoul+0x61>
c0000af1:	0f be 51 01          	movsx  edx,BYTE PTR [ecx+0x1]
c0000af5:	41                   	inc    ecx
c0000af6:	eb e6                	jmp    c0000ade <simple_strtoul+0x1ee>
c0000af8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000afc:	85 d2                	test   edx,edx
c0000afe:	74 0a                	je     c0000b0a <simple_strtoul+0x21a>
c0000b00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b04:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000b08:	89 30                	mov    DWORD PTR [eax],esi
c0000b0a:	31 ff                	xor    edi,edi
c0000b0c:	e9 e7 fe ff ff       	jmp    c00009f8 <simple_strtoul+0x108>
c0000b11:	0f be 51 02          	movsx  edx,BYTE PTR [ecx+0x2]
c0000b15:	83 c1 02             	add    ecx,0x2
c0000b18:	e9 21 ff ff ff       	jmp    c0000a3e <simple_strtoul+0x14e>
c0000b1d:	0f be 51 02          	movsx  edx,BYTE PTR [ecx+0x2]
c0000b21:	be 10 00 00 00       	mov    esi,0x10
c0000b26:	83 c1 02             	add    ecx,0x2
c0000b29:	e9 23 fe ff ff       	jmp    c0000951 <simple_strtoul+0x61>

c0000b2e <largebin_index>:
c0000b2e:	89 c2                	mov    edx,eax
c0000b30:	c1 ea 08             	shr    edx,0x8
c0000b33:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000b39:	77 10                	ja     c0000b4b <largebin_index+0x1d>
c0000b3b:	0f bd d2             	bsr    edx,edx
c0000b3e:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000b41:	d3 e8                	shr    eax,cl
c0000b43:	83 e0 03             	and    eax,0x3
c0000b46:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000b4a:	c3                   	ret    
c0000b4b:	b8 5f 00 00 00       	mov    eax,0x5f
c0000b50:	c3                   	ret    

c0000b51 <malloc_init_state>:
c0000b51:	53                   	push   ebx
c0000b52:	8d 50 34             	lea    edx,[eax+0x34]
c0000b55:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000b5b:	89 d1                	mov    ecx,edx
c0000b5d:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000b60:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000b63:	83 c2 08             	add    edx,0x8
c0000b66:	39 da                	cmp    edx,ebx
c0000b68:	75 f3                	jne    c0000b5d <malloc_init_state+0xc>
c0000b6a:	8b 10                	mov    edx,DWORD PTR [eax]
c0000b6c:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000b76:	83 e2 03             	and    edx,0x3
c0000b79:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000b83:	83 ca 48             	or     edx,0x48
c0000b86:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000b90:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000b9a:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000ba1:	89 10                	mov    DWORD PTR [eax],edx
c0000ba3:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000ba6:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000bb0:	5b                   	pop    ebx
c0000bb1:	c3                   	ret    

c0000bb2 <malloc_consolidate>:
c0000bb2:	8b 10                	mov    edx,DWORD PTR [eax]
c0000bb4:	85 d2                	test   edx,edx
c0000bb6:	0f 84 d8 00 00 00    	je     c0000c94 <malloc_consolidate+0xe2>
c0000bbc:	55                   	push   ebp
c0000bbd:	83 e2 fd             	and    edx,0xfffffffd
c0000bc0:	57                   	push   edi
c0000bc1:	89 c5                	mov    ebp,eax
c0000bc3:	56                   	push   esi
c0000bc4:	8d 78 34             	lea    edi,[eax+0x34]
c0000bc7:	53                   	push   ebx
c0000bc8:	83 ec 10             	sub    esp,0x10
c0000bcb:	89 10                	mov    DWORD PTR [eax],edx
c0000bcd:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000bd1:	c1 ea 03             	shr    edx,0x3
c0000bd4:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000bd8:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000bdc:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000bdf:	85 d2                	test   edx,edx
c0000be1:	0f 84 98 00 00 00    	je     c0000c7f <malloc_consolidate+0xcd>
c0000be7:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000bee:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000bf1:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000bf4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000bf8:	89 f9                	mov    ecx,edi
c0000bfa:	83 e1 fe             	and    ecx,0xfffffffe
c0000bfd:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000c00:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000c03:	83 e3 fc             	and    ebx,0xfffffffc
c0000c06:	83 e7 01             	and    edi,0x1
c0000c09:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000c0c:	75 14                	jne    c0000c22 <malloc_consolidate+0x70>
c0000c0e:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000c10:	29 fa                	sub    edx,edi
c0000c12:	01 f9                	add    ecx,edi
c0000c14:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000c17:	89 fb                	mov    ebx,edi
c0000c19:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000c1c:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000c1f:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000c22:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000c25:	74 40                	je     c0000c67 <malloc_consolidate+0xb5>
c0000c27:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000c2a:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000c2d:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000c31:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000c34:	83 e7 01             	and    edi,0x1
c0000c37:	75 0e                	jne    c0000c47 <malloc_consolidate+0x95>
c0000c39:	01 d9                	add    ecx,ebx
c0000c3b:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000c3e:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000c41:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000c44:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000c47:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000c4a:	89 ce                	mov    esi,ecx
c0000c4c:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000c4f:	83 ce 01             	or     esi,0x1
c0000c52:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000c55:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000c58:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000c5b:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000c5f:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000c62:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000c65:	eb 0c                	jmp    c0000c73 <malloc_consolidate+0xc1>
c0000c67:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000c6a:	83 c9 01             	or     ecx,0x1
c0000c6d:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c70:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000c73:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000c77:	85 d2                	test   edx,edx
c0000c79:	0f 85 6f ff ff ff    	jne    c0000bee <malloc_consolidate+0x3c>
c0000c7f:	83 c5 04             	add    ebp,0x4
c0000c82:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000c86:	0f 85 50 ff ff ff    	jne    c0000bdc <malloc_consolidate+0x2a>
c0000c8c:	83 c4 10             	add    esp,0x10
c0000c8f:	5b                   	pop    ebx
c0000c90:	5e                   	pop    esi
c0000c91:	5f                   	pop    edi
c0000c92:	5d                   	pop    ebp
c0000c93:	c3                   	ret    
c0000c94:	e9 b8 fe ff ff       	jmp    c0000b51 <malloc_init_state>

c0000c99 <dlfree>:
c0000c99:	57                   	push   edi
c0000c9a:	56                   	push   esi
c0000c9b:	53                   	push   ebx
c0000c9c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000ca0:	85 db                	test   ebx,ebx
c0000ca2:	0f 84 e2 00 00 00    	je     c0000d8a <dlfree+0xf1>
c0000ca8:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000cab:	8b 0d 00 21 02 c0    	mov    ecx,DWORD PTR ds:0xc0022100
c0000cb1:	89 f0                	mov    eax,esi
c0000cb3:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000cb6:	83 e0 fc             	and    eax,0xfffffffc
c0000cb9:	39 c1                	cmp    ecx,eax
c0000cbb:	72 24                	jb     c0000ce1 <dlfree+0x48>
c0000cbd:	83 c9 03             	or     ecx,0x3
c0000cc0:	c1 e8 03             	shr    eax,0x3
c0000cc3:	89 0d 00 21 02 c0    	mov    DWORD PTR ds:0xc0022100,ecx
c0000cc9:	83 e8 02             	sub    eax,0x2
c0000ccc:	8b 0c 85 04 21 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffddefc]
c0000cd3:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000cd5:	89 14 85 04 21 02 c0 	mov    DWORD PTR [eax*4-0x3ffddefc],edx
c0000cdc:	e9 a9 00 00 00       	jmp    c0000d8a <dlfree+0xf1>
c0000ce1:	83 e6 02             	and    esi,0x2
c0000ce4:	0f 85 a0 00 00 00    	jne    c0000d8a <dlfree+0xf1>
c0000cea:	83 c9 01             	or     ecx,0x1
c0000ced:	8d 34 02             	lea    esi,[edx+eax*1]
c0000cf0:	89 0d 00 21 02 c0    	mov    DWORD PTR ds:0xc0022100,ecx
c0000cf6:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000cf9:	83 e1 fc             	and    ecx,0xfffffffc
c0000cfc:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000d00:	75 13                	jne    c0000d15 <dlfree+0x7c>
c0000d02:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000d05:	29 da                	sub    edx,ebx
c0000d07:	01 d8                	add    eax,ebx
c0000d09:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d0c:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000d0f:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d12:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d15:	39 35 2c 21 02 c0    	cmp    DWORD PTR ds:0xc002212c,esi
c0000d1b:	74 40                	je     c0000d5d <dlfree+0xc4>
c0000d1d:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000d21:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000d24:	80 e3 01             	and    bl,0x1
c0000d27:	75 0e                	jne    c0000d37 <dlfree+0x9e>
c0000d29:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000d2c:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000d2f:	01 c8                	add    eax,ecx
c0000d31:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d34:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d37:	8b 0d 3c 21 02 c0    	mov    ecx,DWORD PTR ds:0xc002213c
c0000d3d:	c7 42 0c 34 21 02 c0 	mov    DWORD PTR [edx+0xc],0xc0022134
c0000d44:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000d47:	89 15 3c 21 02 c0    	mov    DWORD PTR ds:0xc002213c,edx
c0000d4d:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000d50:	89 c1                	mov    ecx,eax
c0000d52:	83 c9 01             	or     ecx,0x1
c0000d55:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d58:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000d5b:	eb 10                	jmp    c0000d6d <dlfree+0xd4>
c0000d5d:	01 c8                	add    eax,ecx
c0000d5f:	89 c1                	mov    ecx,eax
c0000d61:	83 c9 01             	or     ecx,0x1
c0000d64:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d67:	89 15 2c 21 02 c0    	mov    DWORD PTR ds:0xc002212c,edx
c0000d6d:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000d72:	76 16                	jbe    c0000d8a <dlfree+0xf1>
c0000d74:	f6 05 00 21 02 c0 02 	test   BYTE PTR ds:0xc0022100,0x2
c0000d7b:	74 0d                	je     c0000d8a <dlfree+0xf1>
c0000d7d:	5b                   	pop    ebx
c0000d7e:	b8 00 21 02 c0       	mov    eax,0xc0022100
c0000d83:	5e                   	pop    esi
c0000d84:	5f                   	pop    edi
c0000d85:	e9 28 fe ff ff       	jmp    c0000bb2 <malloc_consolidate>
c0000d8a:	5b                   	pop    ebx
c0000d8b:	5e                   	pop    esi
c0000d8c:	5f                   	pop    edi
c0000d8d:	c3                   	ret    

c0000d8e <sYSMALLOc>:
c0000d8e:	55                   	push   ebp
c0000d8f:	57                   	push   edi
c0000d90:	56                   	push   esi
c0000d91:	53                   	push   ebx
c0000d92:	89 d3                	mov    ebx,edx
c0000d94:	83 ec 2c             	sub    esp,0x2c
c0000d97:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000d9b:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000da1:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000da4:	8d 42 ff             	lea    eax,[edx-0x1]
c0000da7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000dab:	74 1f                	je     c0000dcc <sYSMALLOc+0x3e>
c0000dad:	89 d8                	mov    eax,ebx
c0000daf:	e8 fe fd ff ff       	call   c0000bb2 <malloc_consolidate>
c0000db4:	83 ec 0c             	sub    esp,0xc
c0000db7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000dbb:	83 e8 07             	sub    eax,0x7
c0000dbe:	50                   	push   eax
c0000dbf:	e8 30 02 00 00       	call   c0000ff4 <dlmalloc>
c0000dc4:	83 c4 10             	add    esp,0x10
c0000dc7:	e9 20 02 00 00       	jmp    c0000fec <sYSMALLOc+0x25e>
c0000dcc:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000dcf:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000dd5:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000dd8:	83 e0 fc             	and    eax,0xfffffffc
c0000ddb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000ddf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000de3:	83 c0 10             	add    eax,0x10
c0000de6:	01 c1                	add    ecx,eax
c0000de8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000dec:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000df3:	74 04                	je     c0000df9 <sYSMALLOc+0x6b>
c0000df5:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000df9:	f7 da                	neg    edx
c0000dfb:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000dff:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000e03:	21 d1                	and    ecx,edx
c0000e05:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000e09:	7f 07                	jg     c0000e12 <sYSMALLOc+0x84>
c0000e0b:	31 c0                	xor    eax,eax
c0000e0d:	e9 da 01 00 00       	jmp    c0000fec <sYSMALLOc+0x25e>
c0000e12:	83 ec 0c             	sub    esp,0xc
c0000e15:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000e19:	e8 72 68 00 00       	call   c0007690 <sbrk>
c0000e1e:	83 c4 10             	add    esp,0x10
c0000e21:	89 c6                	mov    esi,eax
c0000e23:	83 f8 ff             	cmp    eax,0xffffffff
c0000e26:	74 e3                	je     c0000e0b <sYSMALLOc+0x7d>
c0000e28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000e2c:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000e30:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000e33:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000e39:	39 f1                	cmp    ecx,esi
c0000e3b:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000e41:	75 13                	jne    c0000e56 <sYSMALLOc+0xc8>
c0000e43:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000e47:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000e4b:	83 c8 01             	or     eax,0x1
c0000e4e:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000e51:	e9 3e 01 00 00       	jmp    c0000f94 <sYSMALLOc+0x206>
c0000e56:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000e5c:	88 d0                	mov    al,dl
c0000e5e:	83 e0 01             	and    eax,0x1
c0000e61:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000e66:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000e6a:	0f 95 c0             	setne  al
c0000e6d:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000e71:	39 f1                	cmp    ecx,esi
c0000e73:	76 12                	jbe    c0000e87 <sYSMALLOc+0xf9>
c0000e75:	84 c0                	test   al,al
c0000e77:	74 0e                	je     c0000e87 <sYSMALLOc+0xf9>
c0000e79:	83 e2 fe             	and    edx,0xfffffffe
c0000e7c:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000e82:	e9 83 00 00 00       	jmp    c0000f0a <sYSMALLOc+0x17c>
c0000e87:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000e8c:	74 7c                	je     c0000f0a <sYSMALLOc+0x17c>
c0000e8e:	84 c0                	test   al,al
c0000e90:	74 0c                	je     c0000e9e <sYSMALLOc+0x110>
c0000e92:	89 f0                	mov    eax,esi
c0000e94:	29 c8                	sub    eax,ecx
c0000e96:	01 e8                	add    eax,ebp
c0000e98:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000e9e:	89 f2                	mov    edx,esi
c0000ea0:	83 e2 07             	and    edx,0x7
c0000ea3:	74 0c                	je     c0000eb1 <sYSMALLOc+0x123>
c0000ea5:	b8 08 00 00 00       	mov    eax,0x8
c0000eaa:	29 d0                	sub    eax,edx
c0000eac:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000eaf:	eb 04                	jmp    c0000eb5 <sYSMALLOc+0x127>
c0000eb1:	89 f5                	mov    ebp,esi
c0000eb3:	31 c0                	xor    eax,eax
c0000eb5:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000eb9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000ebd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000ec1:	01 c1                	add    ecx,eax
c0000ec3:	83 ec 0c             	sub    esp,0xc
c0000ec6:	01 f1                	add    ecx,esi
c0000ec8:	01 ca                	add    edx,ecx
c0000eca:	29 c8                	sub    eax,ecx
c0000ecc:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000ed0:	01 c2                	add    edx,eax
c0000ed2:	52                   	push   edx
c0000ed3:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000ed7:	e8 b4 67 00 00       	call   c0007690 <sbrk>
c0000edc:	83 c4 10             	add    esp,0x10
c0000edf:	83 f8 ff             	cmp    eax,0xffffffff
c0000ee2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000ee6:	75 0f                	jne    c0000ef7 <sYSMALLOc+0x169>
c0000ee8:	83 ec 0c             	sub    esp,0xc
c0000eeb:	6a 00                	push   0x0
c0000eed:	e8 9e 67 00 00       	call   c0007690 <sbrk>
c0000ef2:	83 c4 10             	add    esp,0x10
c0000ef5:	eb 30                	jmp    c0000f27 <sYSMALLOc+0x199>
c0000ef7:	39 c6                	cmp    esi,eax
c0000ef9:	76 33                	jbe    c0000f2e <sYSMALLOc+0x1a0>
c0000efb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000eff:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000f06:	01 f0                	add    eax,esi
c0000f08:	eb 1d                	jmp    c0000f27 <sYSMALLOc+0x199>
c0000f0a:	83 ec 0c             	sub    esp,0xc
c0000f0d:	89 f5                	mov    ebp,esi
c0000f0f:	6a 00                	push   0x0
c0000f11:	e8 7a 67 00 00       	call   c0007690 <sbrk>
c0000f16:	89 c2                	mov    edx,eax
c0000f18:	29 f2                	sub    edx,esi
c0000f1a:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000f1e:	83 c4 10             	add    esp,0x10
c0000f21:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f27:	31 d2                	xor    edx,edx
c0000f29:	83 f8 ff             	cmp    eax,0xffffffff
c0000f2c:	74 66                	je     c0000f94 <sYSMALLOc+0x206>
c0000f2e:	29 e8                	sub    eax,ebp
c0000f30:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000f33:	01 d0                	add    eax,edx
c0000f35:	83 c8 01             	or     eax,0x1
c0000f38:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000f3b:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f41:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f46:	74 4c                	je     c0000f94 <sYSMALLOc+0x206>
c0000f48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f4c:	83 e8 0c             	sub    eax,0xc
c0000f4f:	83 e0 f8             	and    eax,0xfffffff8
c0000f52:	89 c2                	mov    edx,eax
c0000f54:	83 ca 01             	or     edx,0x1
c0000f57:	83 f8 0f             	cmp    eax,0xf
c0000f5a:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0000f5d:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0000f65:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0000f6d:	76 25                	jbe    c0000f94 <sYSMALLOc+0x206>
c0000f6f:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0000f75:	83 ec 0c             	sub    esp,0xc
c0000f78:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0000f82:	83 c7 08             	add    edi,0x8
c0000f85:	57                   	push   edi
c0000f86:	e8 0e fd ff ff       	call   c0000c99 <dlfree>
c0000f8b:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0000f91:	83 c4 10             	add    esp,0x10
c0000f94:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000f9a:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000fa0:	73 06                	jae    c0000fa8 <sYSMALLOc+0x21a>
c0000fa2:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000fa8:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000fae:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000fb4:	73 06                	jae    c0000fbc <sYSMALLOc+0x22e>
c0000fb6:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000fbc:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000fbf:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000fc2:	83 e2 fc             	and    edx,0xfffffffc
c0000fc5:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0000fc9:	0f 82 3c fe ff ff    	jb     c0000e0b <sYSMALLOc+0x7d>
c0000fcf:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0000fd3:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0000fd6:	29 fa                	sub    edx,edi
c0000fd8:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0000fdb:	83 ca 01             	or     edx,0x1
c0000fde:	89 fb                	mov    ebx,edi
c0000fe0:	83 c0 08             	add    eax,0x8
c0000fe3:	83 cb 01             	or     ebx,0x1
c0000fe6:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0000fe9:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0000fec:	83 c4 2c             	add    esp,0x2c
c0000fef:	5b                   	pop    ebx
c0000ff0:	5e                   	pop    esi
c0000ff1:	5f                   	pop    edi
c0000ff2:	5d                   	pop    ebp
c0000ff3:	c3                   	ret    

c0000ff4 <dlmalloc>:
c0000ff4:	55                   	push   ebp
c0000ff5:	57                   	push   edi
c0000ff6:	56                   	push   esi
c0000ff7:	53                   	push   ebx
c0000ff8:	83 ec 1c             	sub    esp,0x1c
c0000ffb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0000fff:	83 f8 df             	cmp    eax,0xffffffdf
c0001002:	0f 87 70 03 00 00    	ja     c0001378 <dlmalloc+0x384>
c0001008:	83 c0 0b             	add    eax,0xb
c000100b:	be 10 00 00 00       	mov    esi,0x10
c0001010:	83 f8 0f             	cmp    eax,0xf
c0001013:	76 05                	jbe    c000101a <dlmalloc+0x26>
c0001015:	83 e0 f8             	and    eax,0xfffffff8
c0001018:	89 c6                	mov    esi,eax
c000101a:	8b 3d 00 21 02 c0    	mov    edi,DWORD PTR ds:0xc0022100
c0001020:	f7 c7 01 00 00 00    	test   edi,0x1
c0001026:	75 17                	jne    c000103f <dlmalloc+0x4b>
c0001028:	85 ff                	test   edi,edi
c000102a:	0f 85 05 03 00 00    	jne    c0001335 <dlmalloc+0x341>
c0001030:	b8 00 21 02 c0       	mov    eax,0xc0022100
c0001035:	e8 78 fb ff ff       	call   c0000bb2 <malloc_consolidate>
c000103a:	e9 f6 02 00 00       	jmp    c0001335 <dlmalloc+0x341>
c000103f:	39 f7                	cmp    edi,esi
c0001041:	72 1f                	jb     c0001062 <dlmalloc+0x6e>
c0001043:	89 f2                	mov    edx,esi
c0001045:	c1 ea 03             	shr    edx,0x3
c0001048:	83 ea 02             	sub    edx,0x2
c000104b:	8b 04 95 04 21 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffddefc]
c0001052:	85 c0                	test   eax,eax
c0001054:	74 0c                	je     c0001062 <dlmalloc+0x6e>
c0001056:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001059:	89 0c 95 04 21 02 c0 	mov    DWORD PTR [edx*4-0x3ffddefc],ecx
c0001060:	eb 30                	jmp    c0001092 <dlmalloc+0x9e>
c0001062:	89 f0                	mov    eax,esi
c0001064:	81 fe ff 00 00 00    	cmp    esi,0xff
c000106a:	77 2e                	ja     c000109a <dlmalloc+0xa6>
c000106c:	c1 e8 03             	shr    eax,0x3
c000106f:	8d 14 c5 34 21 02 c0 	lea    edx,[eax*8-0x3ffddecc]
c0001076:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000107a:	8d 5a f8             	lea    ebx,[edx-0x8]
c000107d:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0001080:	39 c3                	cmp    ebx,eax
c0001082:	74 2e                	je     c00010b2 <dlmalloc+0xbe>
c0001084:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0001087:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c000108c:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c000108f:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0001092:	83 c0 08             	add    eax,0x8
c0001095:	e9 e0 02 00 00       	jmp    c000137a <dlmalloc+0x386>
c000109a:	e8 8f fa ff ff       	call   c0000b2e <largebin_index>
c000109f:	83 e7 02             	and    edi,0x2
c00010a2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00010a6:	74 0a                	je     c00010b2 <dlmalloc+0xbe>
c00010a8:	b8 00 21 02 c0       	mov    eax,0xc0022100
c00010ad:	e8 00 fb ff ff       	call   c0000bb2 <malloc_consolidate>
c00010b2:	8d 46 10             	lea    eax,[esi+0x10]
c00010b5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00010b9:	8b 1d 40 21 02 c0    	mov    ebx,DWORD PTR ds:0xc0022140
c00010bf:	81 fb 34 21 02 c0    	cmp    ebx,0xc0022134
c00010c5:	0f 84 13 01 00 00    	je     c00011de <dlmalloc+0x1ea>
c00010cb:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00010ce:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00010d1:	83 e7 fc             	and    edi,0xfffffffc
c00010d4:	81 fe ff 00 00 00    	cmp    esi,0xff
c00010da:	77 4c                	ja     c0001128 <dlmalloc+0x134>
c00010dc:	3d 34 21 02 c0       	cmp    eax,0xc0022134
c00010e1:	75 45                	jne    c0001128 <dlmalloc+0x134>
c00010e3:	39 1d 30 21 02 c0    	cmp    DWORD PTR ds:0xc0022130,ebx
c00010e9:	75 3d                	jne    c0001128 <dlmalloc+0x134>
c00010eb:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c00010ef:	73 37                	jae    c0001128 <dlmalloc+0x134>
c00010f1:	8d 04 33             	lea    eax,[ebx+esi*1]
c00010f4:	89 fa                	mov    edx,edi
c00010f6:	a3 3c 21 02 c0       	mov    ds:0xc002213c,eax
c00010fb:	a3 40 21 02 c0       	mov    ds:0xc0022140,eax
c0001100:	a3 30 21 02 c0       	mov    ds:0xc0022130,eax
c0001105:	29 f2                	sub    edx,esi
c0001107:	c7 40 08 34 21 02 c0 	mov    DWORD PTR [eax+0x8],0xc0022134
c000110e:	c7 40 0c 34 21 02 c0 	mov    DWORD PTR [eax+0xc],0xc0022134
c0001115:	83 ce 01             	or     esi,0x1
c0001118:	89 d1                	mov    ecx,edx
c000111a:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c000111d:	83 c9 01             	or     ecx,0x1
c0001120:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001123:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001126:	eb 15                	jmp    c000113d <dlmalloc+0x149>
c0001128:	a3 40 21 02 c0       	mov    ds:0xc0022140,eax
c000112d:	39 fe                	cmp    esi,edi
c000112f:	c7 40 08 34 21 02 c0 	mov    DWORD PTR [eax+0x8],0xc0022134
c0001136:	75 0d                	jne    c0001145 <dlmalloc+0x151>
c0001138:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c000113d:	8d 43 08             	lea    eax,[ebx+0x8]
c0001140:	e9 35 02 00 00       	jmp    c000137a <dlmalloc+0x386>
c0001145:	89 f8                	mov    eax,edi
c0001147:	81 ff ff 00 00 00    	cmp    edi,0xff
c000114d:	77 19                	ja     c0001168 <dlmalloc+0x174>
c000114f:	c1 e8 03             	shr    eax,0x3
c0001152:	8d 14 00             	lea    edx,[eax+eax*1]
c0001155:	83 c2 0d             	add    edx,0xd
c0001158:	8d 2c 95 f8 20 02 c0 	lea    ebp,[edx*4-0x3ffddf08]
c000115f:	8b 14 95 00 21 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffddf00]
c0001166:	eb 46                	jmp    c00011ae <dlmalloc+0x1ba>
c0001168:	e8 c1 f9 ff ff       	call   c0000b2e <largebin_index>
c000116d:	8d 14 00             	lea    edx,[eax+eax*1]
c0001170:	83 c2 0d             	add    edx,0xd
c0001173:	8d 0c 95 00 21 02 c0 	lea    ecx,[edx*4-0x3ffddf00]
c000117a:	8b 14 95 00 21 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffddf00]
c0001181:	8d 69 f8             	lea    ebp,[ecx-0x8]
c0001184:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0001188:	89 d5                	mov    ebp,edx
c000118a:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c000118e:	74 1e                	je     c00011ae <dlmalloc+0x1ba>
c0001190:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c0001193:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c0001196:	77 12                	ja     c00011aa <dlmalloc+0x1b6>
c0001198:	83 cf 01             	or     edi,0x1
c000119b:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c000119e:	76 05                	jbe    c00011a5 <dlmalloc+0x1b1>
c00011a0:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00011a3:	eb f6                	jmp    c000119b <dlmalloc+0x1a7>
c00011a5:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00011a8:	eb 04                	jmp    c00011ae <dlmalloc+0x1ba>
c00011aa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00011ae:	89 c7                	mov    edi,eax
c00011b0:	88 c1                	mov    cl,al
c00011b2:	c1 ff 05             	sar    edi,0x5
c00011b5:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00011b9:	bf 01 00 00 00       	mov    edi,0x1
c00011be:	d3 e7                	shl    edi,cl
c00011c0:	89 f8                	mov    eax,edi
c00011c2:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00011c6:	09 04 bd 34 24 02 c0 	or     DWORD PTR [edi*4-0x3ffddbcc],eax
c00011cd:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00011d0:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00011d3:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00011d6:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00011d9:	e9 db fe ff ff       	jmp    c00010b9 <dlmalloc+0xc5>
c00011de:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011e4:	76 78                	jbe    c000125e <dlmalloc+0x26a>
c00011e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00011ea:	8d 04 c5 34 21 02 c0 	lea    eax,[eax*8-0x3ffddecc]
c00011f1:	8d 48 f8             	lea    ecx,[eax-0x8]
c00011f4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00011f7:	39 ca                	cmp    edx,ecx
c00011f9:	74 63                	je     c000125e <dlmalloc+0x26a>
c00011fb:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00011fe:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001201:	83 e3 fc             	and    ebx,0xfffffffc
c0001204:	39 de                	cmp    esi,ebx
c0001206:	77 52                	ja     c000125a <dlmalloc+0x266>
c0001208:	89 df                	mov    edi,ebx
c000120a:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c000120d:	29 f7                	sub    edi,esi
c000120f:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001212:	01 d3                	add    ebx,edx
c0001214:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001217:	83 ff 0f             	cmp    edi,0xf
c000121a:	8d 42 08             	lea    eax,[edx+0x8]
c000121d:	77 09                	ja     c0001228 <dlmalloc+0x234>
c000121f:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001223:	e9 52 01 00 00       	jmp    c000137a <dlmalloc+0x386>
c0001228:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000122b:	83 ce 01             	or     esi,0x1
c000122e:	89 0d 3c 21 02 c0    	mov    DWORD PTR ds:0xc002213c,ecx
c0001234:	89 0d 40 21 02 c0    	mov    DWORD PTR ds:0xc0022140,ecx
c000123a:	c7 41 08 34 21 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0022134
c0001241:	c7 41 0c 34 21 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0022134
c0001248:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000124b:	89 fa                	mov    edx,edi
c000124d:	83 ca 01             	or     edx,0x1
c0001250:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001253:	89 3b                	mov    DWORD PTR [ebx],edi
c0001255:	e9 20 01 00 00       	jmp    c000137a <dlmalloc+0x386>
c000125a:	89 c2                	mov    edx,eax
c000125c:	eb 99                	jmp    c00011f7 <dlmalloc+0x203>
c000125e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001262:	b8 01 00 00 00       	mov    eax,0x1
c0001267:	41                   	inc    ecx
c0001268:	89 cb                	mov    ebx,ecx
c000126a:	8d 14 cd 2c 21 02 c0 	lea    edx,[ecx*8-0x3ffdded4]
c0001271:	c1 eb 05             	shr    ebx,0x5
c0001274:	d3 e0                	shl    eax,cl
c0001276:	8b 3c 9d 34 24 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffddbcc]
c000127d:	39 f8                	cmp    eax,edi
c000127f:	77 04                	ja     c0001285 <dlmalloc+0x291>
c0001281:	85 c0                	test   eax,eax
c0001283:	75 26                	jne    c00012ab <dlmalloc+0x2b7>
c0001285:	43                   	inc    ebx
c0001286:	83 fb 02             	cmp    ebx,0x2
c0001289:	0f 87 a6 00 00 00    	ja     c0001335 <dlmalloc+0x341>
c000128f:	8b 3c 9d 34 24 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffddbcc]
c0001296:	85 ff                	test   edi,edi
c0001298:	74 eb                	je     c0001285 <dlmalloc+0x291>
c000129a:	89 d8                	mov    eax,ebx
c000129c:	c1 e0 06             	shl    eax,0x6
c000129f:	8d 14 85 2c 21 02 c0 	lea    edx,[eax*4-0x3ffdded4]
c00012a6:	b8 01 00 00 00       	mov    eax,0x1
c00012ab:	85 f8                	test   eax,edi
c00012ad:	75 07                	jne    c00012b6 <dlmalloc+0x2c2>
c00012af:	83 c2 08             	add    edx,0x8
c00012b2:	01 c0                	add    eax,eax
c00012b4:	eb f5                	jmp    c00012ab <dlmalloc+0x2b7>
c00012b6:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00012b9:	39 ca                	cmp    edx,ecx
c00012bb:	75 14                	jne    c00012d1 <dlmalloc+0x2dd>
c00012bd:	89 c1                	mov    ecx,eax
c00012bf:	83 c2 08             	add    edx,0x8
c00012c2:	f7 d1                	not    ecx
c00012c4:	01 c0                	add    eax,eax
c00012c6:	21 cf                	and    edi,ecx
c00012c8:	89 3c 9d 34 24 02 c0 	mov    DWORD PTR [ebx*4-0x3ffddbcc],edi
c00012cf:	eb ac                	jmp    c000127d <dlmalloc+0x289>
c00012d1:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00012d4:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00012d7:	83 e0 fc             	and    eax,0xfffffffc
c00012da:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00012dd:	89 c3                	mov    ebx,eax
c00012df:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00012e2:	29 f3                	sub    ebx,esi
c00012e4:	8d 14 01             	lea    edx,[ecx+eax*1]
c00012e7:	83 fb 0f             	cmp    ebx,0xf
c00012ea:	8d 41 08             	lea    eax,[ecx+0x8]
c00012ed:	77 09                	ja     c00012f8 <dlmalloc+0x304>
c00012ef:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00012f3:	e9 82 00 00 00       	jmp    c000137a <dlmalloc+0x386>
c00012f8:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00012fb:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001301:	89 3d 3c 21 02 c0    	mov    DWORD PTR ds:0xc002213c,edi
c0001307:	89 3d 40 21 02 c0    	mov    DWORD PTR ds:0xc0022140,edi
c000130d:	c7 47 08 34 21 02 c0 	mov    DWORD PTR [edi+0x8],0xc0022134
c0001314:	c7 47 0c 34 21 02 c0 	mov    DWORD PTR [edi+0xc],0xc0022134
c000131b:	77 06                	ja     c0001323 <dlmalloc+0x32f>
c000131d:	89 3d 30 21 02 c0    	mov    DWORD PTR ds:0xc0022130,edi
c0001323:	83 ce 01             	or     esi,0x1
c0001326:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001329:	89 d9                	mov    ecx,ebx
c000132b:	83 c9 01             	or     ecx,0x1
c000132e:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001331:	89 1a                	mov    DWORD PTR [edx],ebx
c0001333:	eb 45                	jmp    c000137a <dlmalloc+0x386>
c0001335:	a1 2c 21 02 c0       	mov    eax,ds:0xc002212c
c000133a:	8d 4e 10             	lea    ecx,[esi+0x10]
c000133d:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001340:	83 e2 fc             	and    edx,0xfffffffc
c0001343:	39 d1                	cmp    ecx,edx
c0001345:	77 1e                	ja     c0001365 <dlmalloc+0x371>
c0001347:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000134a:	89 f3                	mov    ebx,esi
c000134c:	89 0d 2c 21 02 c0    	mov    DWORD PTR ds:0xc002212c,ecx
c0001352:	83 cb 01             	or     ebx,0x1
c0001355:	29 f2                	sub    edx,esi
c0001357:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000135a:	83 ca 01             	or     edx,0x1
c000135d:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001360:	e9 2d fd ff ff       	jmp    c0001092 <dlmalloc+0x9e>
c0001365:	83 c4 1c             	add    esp,0x1c
c0001368:	89 f0                	mov    eax,esi
c000136a:	5b                   	pop    ebx
c000136b:	ba 00 21 02 c0       	mov    edx,0xc0022100
c0001370:	5e                   	pop    esi
c0001371:	5f                   	pop    edi
c0001372:	5d                   	pop    ebp
c0001373:	e9 16 fa ff ff       	jmp    c0000d8e <sYSMALLOc>
c0001378:	31 c0                	xor    eax,eax
c000137a:	83 c4 1c             	add    esp,0x1c
c000137d:	5b                   	pop    ebx
c000137e:	5e                   	pop    esi
c000137f:	5f                   	pop    edi
c0001380:	5d                   	pop    ebp
c0001381:	c3                   	ret    

c0001382 <iALLOc>:
c0001382:	55                   	push   ebp
c0001383:	89 c5                	mov    ebp,eax
c0001385:	57                   	push   edi
c0001386:	56                   	push   esi
c0001387:	53                   	push   ebx
c0001388:	83 ec 2c             	sub    esp,0x2c
c000138b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000138f:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0001393:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001397:	83 3d 00 21 02 c0 00 	cmp    DWORD PTR ds:0xc0022100,0x0
c000139e:	75 12                	jne    c00013b2 <iALLOc+0x30>
c00013a0:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00013a4:	b8 00 21 02 c0       	mov    eax,0xc0022100
c00013a9:	e8 04 f8 ff ff       	call   c0000bb2 <malloc_consolidate>
c00013ae:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00013b2:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00013b7:	74 12                	je     c00013cb <iALLOc+0x49>
c00013b9:	85 ed                	test   ebp,ebp
c00013bb:	0f 84 64 01 00 00    	je     c0001525 <iALLOc+0x1a3>
c00013c1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00013c9:	eb 33                	jmp    c00013fe <iALLOc+0x7c>
c00013cb:	85 ed                	test   ebp,ebp
c00013cd:	75 14                	jne    c00013e3 <iALLOc+0x61>
c00013cf:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00013d7:	83 c4 2c             	add    esp,0x2c
c00013da:	5b                   	pop    ebx
c00013db:	5e                   	pop    esi
c00013dc:	5f                   	pop    edi
c00013dd:	5d                   	pop    ebp
c00013de:	e9 11 fc ff ff       	jmp    c0000ff4 <dlmalloc>
c00013e3:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00013ea:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00013f2:	83 f8 0f             	cmp    eax,0xf
c00013f5:	76 07                	jbe    c00013fe <iALLOc+0x7c>
c00013f7:	83 e0 f8             	and    eax,0xfffffff8
c00013fa:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00013fe:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001403:	75 09                	jne    c000140e <iALLOc+0x8c>
c0001405:	89 d0                	mov    eax,edx
c0001407:	8d 3c aa             	lea    edi,[edx+ebp*4]
c000140a:	31 f6                	xor    esi,esi
c000140c:	eb 3b                	jmp    c0001449 <iALLOc+0xc7>
c000140e:	8b 02                	mov    eax,DWORD PTR [edx]
c0001410:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001418:	83 c0 0b             	add    eax,0xb
c000141b:	83 f8 0f             	cmp    eax,0xf
c000141e:	76 07                	jbe    c0001427 <iALLOc+0xa5>
c0001420:	83 e0 f8             	and    eax,0xfffffff8
c0001423:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001427:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000142b:	0f af f5             	imul   esi,ebp
c000142e:	eb 25                	jmp    c0001455 <iALLOc+0xd3>
c0001430:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001432:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001435:	bb 10 00 00 00       	mov    ebx,0x10
c000143a:	83 f9 0f             	cmp    ecx,0xf
c000143d:	76 05                	jbe    c0001444 <iALLOc+0xc2>
c000143f:	83 e1 f8             	and    ecx,0xfffffff8
c0001442:	89 cb                	mov    ebx,ecx
c0001444:	01 de                	add    esi,ebx
c0001446:	83 c0 04             	add    eax,0x4
c0001449:	39 c7                	cmp    edi,eax
c000144b:	75 e3                	jne    c0001430 <iALLOc+0xae>
c000144d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001455:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001459:	8b 1d 54 24 02 c0    	mov    ebx,DWORD PTR ds:0xc0022454
c000145f:	83 ec 0c             	sub    esp,0xc
c0001462:	c7 05 54 24 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022454,0x0
c000146c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001470:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c0001474:	50                   	push   eax
c0001475:	e8 7a fb ff ff       	call   c0000ff4 <dlmalloc>
c000147a:	83 c4 10             	add    esp,0x10
c000147d:	89 1d 54 24 02 c0    	mov    DWORD PTR ds:0xc0022454,ebx
c0001483:	85 c0                	test   eax,eax
c0001485:	0f 84 92 00 00 00    	je     c000151d <iALLOc+0x19b>
c000148b:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c000148e:	8d 78 f8             	lea    edi,[eax-0x8]
c0001491:	83 e3 fc             	and    ebx,0xfffffffc
c0001494:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0001498:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c000149d:	74 1e                	je     c00014bd <iALLOc+0x13b>
c000149f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00014a3:	89 d9                	mov    ecx,ebx
c00014a5:	52                   	push   edx
c00014a6:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00014aa:	83 e9 04             	sub    ecx,0x4
c00014ad:	51                   	push   ecx
c00014ae:	6a 00                	push   0x0
c00014b0:	50                   	push   eax
c00014b1:	e8 1a f0 ff ff       	call   c00004d0 <memset>
c00014b6:	83 c4 10             	add    esp,0x10
c00014b9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00014bd:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014c2:	75 14                	jne    c00014d8 <iALLOc+0x156>
c00014c4:	8d 04 37             	lea    eax,[edi+esi*1]
c00014c7:	29 f3                	sub    ebx,esi
c00014c9:	8d 48 08             	lea    ecx,[eax+0x8]
c00014cc:	83 cb 01             	or     ebx,0x1
c00014cf:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00014d3:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00014d6:	89 f3                	mov    ebx,esi
c00014d8:	31 c0                	xor    eax,eax
c00014da:	4d                   	dec    ebp
c00014db:	8d 4f 08             	lea    ecx,[edi+0x8]
c00014de:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00014e2:	39 c5                	cmp    ebp,eax
c00014e4:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c00014e7:	74 2c                	je     c0001515 <iALLOc+0x193>
c00014e9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00014ed:	85 c9                	test   ecx,ecx
c00014ef:	75 15                	jne    c0001506 <iALLOc+0x184>
c00014f1:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00014f4:	8d 71 0b             	lea    esi,[ecx+0xb]
c00014f7:	b9 10 00 00 00       	mov    ecx,0x10
c00014fc:	83 fe 0f             	cmp    esi,0xf
c00014ff:	76 05                	jbe    c0001506 <iALLOc+0x184>
c0001501:	83 e6 f8             	and    esi,0xfffffff8
c0001504:	89 f1                	mov    ecx,esi
c0001506:	89 ce                	mov    esi,ecx
c0001508:	29 cb                	sub    ebx,ecx
c000150a:	83 ce 01             	or     esi,0x1
c000150d:	40                   	inc    eax
c000150e:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001511:	01 cf                	add    edi,ecx
c0001513:	eb c6                	jmp    c00014db <iALLOc+0x159>
c0001515:	83 cb 01             	or     ebx,0x1
c0001518:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000151b:	eb 08                	jmp    c0001525 <iALLOc+0x1a3>
c000151d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001525:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001529:	83 c4 2c             	add    esp,0x2c
c000152c:	5b                   	pop    ebx
c000152d:	5e                   	pop    esi
c000152e:	5f                   	pop    edi
c000152f:	5d                   	pop    ebp
c0001530:	c3                   	ret    

c0001531 <dlrealloc>:
c0001531:	55                   	push   ebp
c0001532:	57                   	push   edi
c0001533:	56                   	push   esi
c0001534:	53                   	push   ebx
c0001535:	83 ec 1c             	sub    esp,0x1c
c0001538:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000153c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001540:	85 db                	test   ebx,ebx
c0001542:	75 10                	jne    c0001554 <dlrealloc+0x23>
c0001544:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001548:	83 c4 1c             	add    esp,0x1c
c000154b:	5b                   	pop    ebx
c000154c:	5e                   	pop    esi
c000154d:	5f                   	pop    edi
c000154e:	5d                   	pop    ebp
c000154f:	e9 a0 fa ff ff       	jmp    c0000ff4 <dlmalloc>
c0001554:	83 f8 df             	cmp    eax,0xffffffdf
c0001557:	76 07                	jbe    c0001560 <dlrealloc+0x2f>
c0001559:	31 db                	xor    ebx,ebx
c000155b:	e9 6a 01 00 00       	jmp    c00016ca <dlrealloc+0x199>
c0001560:	83 c0 0b             	add    eax,0xb
c0001563:	bd 10 00 00 00       	mov    ebp,0x10
c0001568:	83 f8 0f             	cmp    eax,0xf
c000156b:	76 05                	jbe    c0001572 <dlrealloc+0x41>
c000156d:	83 e0 f8             	and    eax,0xfffffff8
c0001570:	89 c5                	mov    ebp,eax
c0001572:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001575:	8d 7b f8             	lea    edi,[ebx-0x8]
c0001578:	89 c6                	mov    esi,eax
c000157a:	83 e6 fc             	and    esi,0xfffffffc
c000157d:	a8 02                	test   al,0x2
c000157f:	75 d8                	jne    c0001559 <dlrealloc+0x28>
c0001581:	39 f5                	cmp    ebp,esi
c0001583:	0f 86 04 01 00 00    	jbe    c000168d <dlrealloc+0x15c>
c0001589:	8d 14 37             	lea    edx,[edi+esi*1]
c000158c:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c000158f:	39 15 2c 21 02 c0    	cmp    DWORD PTR ds:0xc002212c,edx
c0001595:	75 33                	jne    c00015ca <dlrealloc+0x99>
c0001597:	83 e1 fc             	and    ecx,0xfffffffc
c000159a:	01 f1                	add    ecx,esi
c000159c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015a0:	8d 4d 10             	lea    ecx,[ebp+0x10]
c00015a3:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00015a7:	77 49                	ja     c00015f2 <dlrealloc+0xc1>
c00015a9:	01 ef                	add    edi,ebp
c00015ab:	83 e0 01             	and    eax,0x1
c00015ae:	09 e8                	or     eax,ebp
c00015b0:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00015b3:	89 3d 2c 21 02 c0    	mov    DWORD PTR ds:0xc002212c,edi
c00015b9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00015bd:	29 e8                	sub    eax,ebp
c00015bf:	83 c8 01             	or     eax,0x1
c00015c2:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00015c5:	e9 00 01 00 00       	jmp    c00016ca <dlrealloc+0x199>
c00015ca:	89 c8                	mov    eax,ecx
c00015cc:	83 e0 fe             	and    eax,0xfffffffe
c00015cf:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00015d4:	75 1c                	jne    c00015f2 <dlrealloc+0xc1>
c00015d6:	83 e1 fc             	and    ecx,0xfffffffc
c00015d9:	01 f1                	add    ecx,esi
c00015db:	39 cd                	cmp    ebp,ecx
c00015dd:	77 13                	ja     c00015f2 <dlrealloc+0xc1>
c00015df:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c00015e2:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00015e5:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c00015e8:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c00015eb:	89 ce                	mov    esi,ecx
c00015ed:	e9 9b 00 00 00       	jmp    c000168d <dlrealloc+0x15c>
c00015f2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00015f6:	8d 45 f9             	lea    eax,[ebp-0x7]
c00015f9:	83 ec 0c             	sub    esp,0xc
c00015fc:	50                   	push   eax
c00015fd:	e8 f2 f9 ff ff       	call   c0000ff4 <dlmalloc>
c0001602:	83 c4 10             	add    esp,0x10
c0001605:	85 c0                	test   eax,eax
c0001607:	0f 84 4c ff ff ff    	je     c0001559 <dlrealloc+0x28>
c000160d:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001610:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001614:	39 ca                	cmp    edx,ecx
c0001616:	75 0a                	jne    c0001622 <dlrealloc+0xf1>
c0001618:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c000161b:	83 e0 fc             	and    eax,0xfffffffc
c000161e:	01 c6                	add    esi,eax
c0001620:	eb 6b                	jmp    c000168d <dlrealloc+0x15c>
c0001622:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001625:	83 f9 27             	cmp    ecx,0x27
c0001628:	76 08                	jbe    c0001632 <dlrealloc+0x101>
c000162a:	89 de                	mov    esi,ebx
c000162c:	89 c7                	mov    edi,eax
c000162e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001630:	eb 43                	jmp    c0001675 <dlrealloc+0x144>
c0001632:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001634:	83 f9 13             	cmp    ecx,0x13
c0001637:	89 10                	mov    DWORD PTR [eax],edx
c0001639:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000163c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000163f:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001642:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001645:	76 2e                	jbe    c0001675 <dlrealloc+0x144>
c0001647:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000164a:	83 f9 1b             	cmp    ecx,0x1b
c000164d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0001650:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0001653:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0001656:	76 1d                	jbe    c0001675 <dlrealloc+0x144>
c0001658:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000165b:	83 f9 23             	cmp    ecx,0x23
c000165e:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001661:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0001664:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0001667:	76 0c                	jbe    c0001675 <dlrealloc+0x144>
c0001669:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000166c:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000166f:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0001672:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0001675:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001679:	83 ec 0c             	sub    esp,0xc
c000167c:	53                   	push   ebx
c000167d:	e8 17 f6 ff ff       	call   c0000c99 <dlfree>
c0001682:	83 c4 10             	add    esp,0x10
c0001685:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001689:	89 c3                	mov    ebx,eax
c000168b:	eb 3d                	jmp    c00016ca <dlrealloc+0x199>
c000168d:	89 f2                	mov    edx,esi
c000168f:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c0001692:	29 ea                	sub    edx,ebp
c0001694:	83 e1 01             	and    ecx,0x1
c0001697:	8d 04 37             	lea    eax,[edi+esi*1]
c000169a:	83 fa 0f             	cmp    edx,0xf
c000169d:	77 0b                	ja     c00016aa <dlrealloc+0x179>
c000169f:	09 ce                	or     esi,ecx
c00016a1:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00016a4:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00016a8:	eb 20                	jmp    c00016ca <dlrealloc+0x199>
c00016aa:	01 ef                	add    edi,ebp
c00016ac:	83 ec 0c             	sub    esp,0xc
c00016af:	09 cd                	or     ebp,ecx
c00016b1:	83 ca 01             	or     edx,0x1
c00016b4:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00016b7:	83 c7 08             	add    edi,0x8
c00016ba:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00016bd:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00016c1:	57                   	push   edi
c00016c2:	e8 d2 f5 ff ff       	call   c0000c99 <dlfree>
c00016c7:	83 c4 10             	add    esp,0x10
c00016ca:	83 c4 1c             	add    esp,0x1c
c00016cd:	89 d8                	mov    eax,ebx
c00016cf:	5b                   	pop    ebx
c00016d0:	5e                   	pop    esi
c00016d1:	5f                   	pop    edi
c00016d2:	5d                   	pop    ebp
c00016d3:	c3                   	ret    

c00016d4 <dlmemalign>:
c00016d4:	55                   	push   ebp
c00016d5:	57                   	push   edi
c00016d6:	56                   	push   esi
c00016d7:	53                   	push   ebx
c00016d8:	83 ec 0c             	sub    esp,0xc
c00016db:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00016df:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00016e3:	83 fa 08             	cmp    edx,0x8
c00016e6:	77 10                	ja     c00016f8 <dlmemalign+0x24>
c00016e8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00016ec:	83 c4 0c             	add    esp,0xc
c00016ef:	5b                   	pop    ebx
c00016f0:	5e                   	pop    esi
c00016f1:	5f                   	pop    edi
c00016f2:	5d                   	pop    ebp
c00016f3:	e9 fc f8 ff ff       	jmp    c0000ff4 <dlmalloc>
c00016f8:	bf 10 00 00 00       	mov    edi,0x10
c00016fd:	83 fa 0f             	cmp    edx,0xf
c0001700:	76 13                	jbe    c0001715 <dlmemalign+0x41>
c0001702:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001705:	85 d1                	test   ecx,edx
c0001707:	75 04                	jne    c000170d <dlmemalign+0x39>
c0001709:	89 d7                	mov    edi,edx
c000170b:	eb 08                	jmp    c0001715 <dlmemalign+0x41>
c000170d:	39 d7                	cmp    edi,edx
c000170f:	73 04                	jae    c0001715 <dlmemalign+0x41>
c0001711:	01 ff                	add    edi,edi
c0001713:	eb f8                	jmp    c000170d <dlmemalign+0x39>
c0001715:	83 f8 df             	cmp    eax,0xffffffdf
c0001718:	76 07                	jbe    c0001721 <dlmemalign+0x4d>
c000171a:	31 c0                	xor    eax,eax
c000171c:	e9 ce 00 00 00       	jmp    c00017ef <dlmemalign+0x11b>
c0001721:	83 c0 0b             	add    eax,0xb
c0001724:	bd 10 00 00 00       	mov    ebp,0x10
c0001729:	83 f8 0f             	cmp    eax,0xf
c000172c:	76 05                	jbe    c0001733 <dlmemalign+0x5f>
c000172e:	83 e0 f8             	and    eax,0xfffffff8
c0001731:	89 c5                	mov    ebp,eax
c0001733:	83 ec 0c             	sub    esp,0xc
c0001736:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c000173a:	50                   	push   eax
c000173b:	e8 b4 f8 ff ff       	call   c0000ff4 <dlmalloc>
c0001740:	83 c4 10             	add    esp,0x10
c0001743:	89 c1                	mov    ecx,eax
c0001745:	85 c0                	test   eax,eax
c0001747:	74 d1                	je     c000171a <dlmemalign+0x46>
c0001749:	31 d2                	xor    edx,edx
c000174b:	8d 70 f8             	lea    esi,[eax-0x8]
c000174e:	f7 f7                	div    edi
c0001750:	85 d2                	test   edx,edx
c0001752:	74 62                	je     c00017b6 <dlmemalign+0xe2>
c0001754:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001758:	89 f8                	mov    eax,edi
c000175a:	f7 d8                	neg    eax
c000175c:	21 c3                	and    ebx,eax
c000175e:	83 eb 08             	sub    ebx,0x8
c0001761:	89 d8                	mov    eax,ebx
c0001763:	29 f0                	sub    eax,esi
c0001765:	83 f8 0f             	cmp    eax,0xf
c0001768:	77 02                	ja     c000176c <dlmemalign+0x98>
c000176a:	01 fb                	add    ebx,edi
c000176c:	89 d8                	mov    eax,ebx
c000176e:	29 f0                	sub    eax,esi
c0001770:	89 c6                	mov    esi,eax
c0001772:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001775:	89 c2                	mov    edx,eax
c0001777:	83 e2 fc             	and    edx,0xfffffffc
c000177a:	29 f2                	sub    edx,esi
c000177c:	a8 02                	test   al,0x2
c000177e:	74 10                	je     c0001790 <dlmemalign+0xbc>
c0001780:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c0001783:	83 ca 02             	or     edx,0x2
c0001786:	8d 43 08             	lea    eax,[ebx+0x8]
c0001789:	89 33                	mov    DWORD PTR [ebx],esi
c000178b:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000178e:	eb 5f                	jmp    c00017ef <dlmemalign+0x11b>
c0001790:	83 ec 0c             	sub    esp,0xc
c0001793:	89 d0                	mov    eax,edx
c0001795:	83 c8 01             	or     eax,0x1
c0001798:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000179b:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00017a0:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00017a3:	83 e0 01             	and    eax,0x1
c00017a6:	09 f0                	or     eax,esi
c00017a8:	89 de                	mov    esi,ebx
c00017aa:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00017ad:	51                   	push   ecx
c00017ae:	e8 e6 f4 ff ff       	call   c0000c99 <dlfree>
c00017b3:	83 c4 10             	add    esp,0x10
c00017b6:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00017b9:	a8 02                	test   al,0x2
c00017bb:	75 2f                	jne    c00017ec <dlmemalign+0x118>
c00017bd:	83 e0 fc             	and    eax,0xfffffffc
c00017c0:	8d 55 10             	lea    edx,[ebp+0x10]
c00017c3:	39 c2                	cmp    edx,eax
c00017c5:	73 25                	jae    c00017ec <dlmemalign+0x118>
c00017c7:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00017ca:	83 ec 0c             	sub    esp,0xc
c00017cd:	29 e8                	sub    eax,ebp
c00017cf:	83 c2 08             	add    edx,0x8
c00017d2:	83 c8 01             	or     eax,0x1
c00017d5:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c00017d8:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00017db:	83 e0 01             	and    eax,0x1
c00017de:	09 c5                	or     ebp,eax
c00017e0:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c00017e3:	52                   	push   edx
c00017e4:	e8 b0 f4 ff ff       	call   c0000c99 <dlfree>
c00017e9:	83 c4 10             	add    esp,0x10
c00017ec:	8d 46 08             	lea    eax,[esi+0x8]
c00017ef:	83 c4 0c             	add    esp,0xc
c00017f2:	5b                   	pop    ebx
c00017f3:	5e                   	pop    esi
c00017f4:	5f                   	pop    edi
c00017f5:	5d                   	pop    ebp
c00017f6:	c3                   	ret    

c00017f7 <dlcalloc>:
c00017f7:	53                   	push   ebx
c00017f8:	83 ec 14             	sub    esp,0x14
c00017fb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00017ff:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001804:	50                   	push   eax
c0001805:	e8 ea f7 ff ff       	call   c0000ff4 <dlmalloc>
c000180a:	83 c4 10             	add    esp,0x10
c000180d:	89 c3                	mov    ebx,eax
c000180f:	85 c0                	test   eax,eax
c0001811:	74 77                	je     c000188a <dlcalloc+0x93>
c0001813:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001816:	89 d0                	mov    eax,edx
c0001818:	83 e0 fc             	and    eax,0xfffffffc
c000181b:	80 e2 02             	and    dl,0x2
c000181e:	75 5a                	jne    c000187a <dlcalloc+0x83>
c0001820:	83 e8 04             	sub    eax,0x4
c0001823:	83 f8 27             	cmp    eax,0x27
c0001826:	76 03                	jbe    c000182b <dlcalloc+0x34>
c0001828:	51                   	push   ecx
c0001829:	eb 53                	jmp    c000187e <dlcalloc+0x87>
c000182b:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001831:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001838:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000183f:	83 f8 13             	cmp    eax,0x13
c0001842:	76 46                	jbe    c000188a <dlcalloc+0x93>
c0001844:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000184b:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001852:	83 f8 1b             	cmp    eax,0x1b
c0001855:	76 33                	jbe    c000188a <dlcalloc+0x93>
c0001857:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000185e:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001865:	83 f8 23             	cmp    eax,0x23
c0001868:	76 20                	jbe    c000188a <dlcalloc+0x93>
c000186a:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001871:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001878:	eb 10                	jmp    c000188a <dlcalloc+0x93>
c000187a:	83 e8 08             	sub    eax,0x8
c000187d:	52                   	push   edx
c000187e:	50                   	push   eax
c000187f:	6a 00                	push   0x0
c0001881:	53                   	push   ebx
c0001882:	e8 49 ec ff ff       	call   c00004d0 <memset>
c0001887:	83 c4 10             	add    esp,0x10
c000188a:	89 d8                	mov    eax,ebx
c000188c:	83 c4 08             	add    esp,0x8
c000188f:	5b                   	pop    ebx
c0001890:	c3                   	ret    

c0001891 <dlcfree>:
c0001891:	e9 03 f4 ff ff       	jmp    c0000c99 <dlfree>

c0001896 <dlindependent_calloc>:
c0001896:	83 ec 28             	sub    esp,0x28
c0001899:	b9 03 00 00 00       	mov    ecx,0x3
c000189e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00018a2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00018a6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00018aa:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00018ae:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00018b2:	e8 cb fa ff ff       	call   c0001382 <iALLOc>
c00018b7:	83 c4 2c             	add    esp,0x2c
c00018ba:	c3                   	ret    

c00018bb <dlindependent_comalloc>:
c00018bb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00018bf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00018c3:	31 c9                	xor    ecx,ecx
c00018c5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00018c9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00018cd:	e9 b0 fa ff ff       	jmp    c0001382 <iALLOc>

c00018d2 <dlvalloc>:
c00018d2:	83 ec 0c             	sub    esp,0xc
c00018d5:	83 3d 00 21 02 c0 00 	cmp    DWORD PTR ds:0xc0022100,0x0
c00018dc:	75 0a                	jne    c00018e8 <dlvalloc+0x16>
c00018de:	b8 00 21 02 c0       	mov    eax,0xc0022100
c00018e3:	e8 ca f2 ff ff       	call   c0000bb2 <malloc_consolidate>
c00018e8:	50                   	push   eax
c00018e9:	50                   	push   eax
c00018ea:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00018ee:	ff 35 5c 24 02 c0    	push   DWORD PTR ds:0xc002245c
c00018f4:	e8 db fd ff ff       	call   c00016d4 <dlmemalign>
c00018f9:	83 c4 1c             	add    esp,0x1c
c00018fc:	c3                   	ret    

c00018fd <dlpvalloc>:
c00018fd:	83 ec 0c             	sub    esp,0xc
c0001900:	83 3d 00 21 02 c0 00 	cmp    DWORD PTR ds:0xc0022100,0x0
c0001907:	75 0a                	jne    c0001913 <dlpvalloc+0x16>
c0001909:	b8 00 21 02 c0       	mov    eax,0xc0022100
c000190e:	e8 9f f2 ff ff       	call   c0000bb2 <malloc_consolidate>
c0001913:	a1 5c 24 02 c0       	mov    eax,ds:0xc002245c
c0001918:	89 c1                	mov    ecx,eax
c000191a:	52                   	push   edx
c000191b:	f7 d9                	neg    ecx
c000191d:	52                   	push   edx
c000191e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001922:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001926:	21 ca                	and    edx,ecx
c0001928:	52                   	push   edx
c0001929:	50                   	push   eax
c000192a:	e8 a5 fd ff ff       	call   c00016d4 <dlmemalign>
c000192f:	83 c4 1c             	add    esp,0x1c
c0001932:	c3                   	ret    

c0001933 <dlmalloc_trim>:
c0001933:	b8 00 21 02 c0       	mov    eax,0xc0022100
c0001938:	e8 75 f2 ff ff       	call   c0000bb2 <malloc_consolidate>
c000193d:	31 c0                	xor    eax,eax
c000193f:	c3                   	ret    

c0001940 <dlmalloc_usable_size>:
c0001940:	53                   	push   ebx
c0001941:	31 c0                	xor    eax,eax
c0001943:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001947:	85 c9                	test   ecx,ecx
c0001949:	74 24                	je     c000196f <dlmalloc_usable_size+0x2f>
c000194b:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c000194e:	f6 c2 02             	test   dl,0x2
c0001951:	74 08                	je     c000195b <dlmalloc_usable_size+0x1b>
c0001953:	83 e2 fc             	and    edx,0xfffffffc
c0001956:	8d 42 f8             	lea    eax,[edx-0x8]
c0001959:	eb 14                	jmp    c000196f <dlmalloc_usable_size+0x2f>
c000195b:	89 d3                	mov    ebx,edx
c000195d:	31 c0                	xor    eax,eax
c000195f:	83 e3 fe             	and    ebx,0xfffffffe
c0001962:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001967:	74 06                	je     c000196f <dlmalloc_usable_size+0x2f>
c0001969:	83 e2 fc             	and    edx,0xfffffffc
c000196c:	8d 42 fc             	lea    eax,[edx-0x4]
c000196f:	5b                   	pop    ebx
c0001970:	c3                   	ret    

c0001971 <dlmallinfo>:
c0001971:	55                   	push   ebp
c0001972:	57                   	push   edi
c0001973:	56                   	push   esi
c0001974:	53                   	push   ebx
c0001975:	83 ec 08             	sub    esp,0x8
c0001978:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000197c:	83 3d 2c 21 02 c0 00 	cmp    DWORD PTR ds:0xc002212c,0x0
c0001983:	75 0a                	jne    c000198f <dlmallinfo+0x1e>
c0001985:	b8 00 21 02 c0       	mov    eax,0xc0022100
c000198a:	e8 23 f2 ff ff       	call   c0000bb2 <malloc_consolidate>
c000198f:	a1 2c 21 02 c0       	mov    eax,ds:0xc002212c
c0001994:	31 ed                	xor    ebp,ebp
c0001996:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001999:	31 c9                	xor    ecx,ecx
c000199b:	83 e0 fc             	and    eax,0xfffffffc
c000199e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00019a2:	31 c0                	xor    eax,eax
c00019a4:	8b 14 85 04 21 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffddefc]
c00019ab:	85 d2                	test   edx,edx
c00019ad:	74 0e                	je     c00019bd <dlmallinfo+0x4c>
c00019af:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c00019b2:	45                   	inc    ebp
c00019b3:	83 e6 fc             	and    esi,0xfffffffc
c00019b6:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00019b9:	01 f1                	add    ecx,esi
c00019bb:	eb ee                	jmp    c00019ab <dlmallinfo+0x3a>
c00019bd:	40                   	inc    eax
c00019be:	83 f8 0a             	cmp    eax,0xa
c00019c1:	75 e1                	jne    c00019a4 <dlmallinfo+0x33>
c00019c3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019c7:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00019ce:	8d 14 01             	lea    edx,[ecx+eax*1]
c00019d1:	b8 34 21 02 c0       	mov    eax,0xc0022134
c00019d6:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c00019d9:	39 f0                	cmp    eax,esi
c00019db:	74 10                	je     c00019ed <dlmallinfo+0x7c>
c00019dd:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c00019e0:	ff 04 24             	inc    DWORD PTR [esp]
c00019e3:	83 e7 fc             	and    edi,0xfffffffc
c00019e6:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c00019e9:	01 fa                	add    edx,edi
c00019eb:	eb ec                	jmp    c00019d9 <dlmallinfo+0x68>
c00019ed:	83 c0 08             	add    eax,0x8
c00019f0:	3d 2c 24 02 c0       	cmp    eax,0xc002242c
c00019f5:	75 df                	jne    c00019d6 <dlmallinfo+0x65>
c00019f7:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c00019fa:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c00019fd:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001a00:	a1 68 24 02 c0       	mov    eax,ds:0xc0022468
c0001a05:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001a08:	89 03                	mov    DWORD PTR [ebx],eax
c0001a0a:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001a0d:	8b 35 50 24 02 c0    	mov    esi,DWORD PTR ds:0xc0022450
c0001a13:	29 d0                	sub    eax,edx
c0001a15:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001a18:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001a1b:	8b 35 64 24 02 c0    	mov    esi,DWORD PTR ds:0xc0022464
c0001a21:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001a25:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001a28:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001a2b:	8b 35 74 24 02 c0    	mov    esi,DWORD PTR ds:0xc0022474
c0001a31:	89 d8                	mov    eax,ebx
c0001a33:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001a36:	83 c4 08             	add    esp,0x8
c0001a39:	5b                   	pop    ebx
c0001a3a:	5e                   	pop    esi
c0001a3b:	5f                   	pop    edi
c0001a3c:	5d                   	pop    ebp
c0001a3d:	c2 04 00             	ret    0x4

c0001a40 <dlmalloc_stats>:
c0001a40:	83 ec 30             	sub    esp,0x30
c0001a43:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001a47:	50                   	push   eax
c0001a48:	e8 24 ff ff ff       	call   c0001971 <dlmallinfo>
c0001a4d:	83 c4 30             	add    esp,0x30
c0001a50:	c3                   	ret    

c0001a51 <dlmallopt>:
c0001a51:	56                   	push   esi
c0001a52:	b8 00 21 02 c0       	mov    eax,0xc0022100
c0001a57:	53                   	push   ebx
c0001a58:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001a5c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001a60:	e8 4d f1 ff ff       	call   c0000bb2 <malloc_consolidate>
c0001a65:	8d 46 04             	lea    eax,[esi+0x4]
c0001a68:	83 f8 05             	cmp    eax,0x5
c0001a6b:	77 67                	ja     c0001ad4 <dlmallopt+0x83>
c0001a6d:	ff 24 85 c4 d6 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe293c]
c0001a74:	83 fb 50             	cmp    ebx,0x50
c0001a77:	77 5b                	ja     c0001ad4 <dlmallopt+0x83>
c0001a79:	ba 08 00 00 00       	mov    edx,0x8
c0001a7e:	85 db                	test   ebx,ebx
c0001a80:	74 12                	je     c0001a94 <dlmallopt+0x43>
c0001a82:	83 c3 0b             	add    ebx,0xb
c0001a85:	ba 10 00 00 00       	mov    edx,0x10
c0001a8a:	83 fb 0f             	cmp    ebx,0xf
c0001a8d:	76 05                	jbe    c0001a94 <dlmallopt+0x43>
c0001a8f:	89 da                	mov    edx,ebx
c0001a91:	83 e2 f8             	and    edx,0xfffffff8
c0001a94:	a1 00 21 02 c0       	mov    eax,ds:0xc0022100
c0001a99:	83 e0 03             	and    eax,0x3
c0001a9c:	09 d0                	or     eax,edx
c0001a9e:	a3 00 21 02 c0       	mov    ds:0xc0022100,eax
c0001aa3:	eb 31                	jmp    c0001ad6 <dlmallopt+0x85>
c0001aa5:	89 1d 44 24 02 c0    	mov    DWORD PTR ds:0xc0022444,ebx
c0001aab:	eb 06                	jmp    c0001ab3 <dlmallopt+0x62>
c0001aad:	89 1d 48 24 02 c0    	mov    DWORD PTR ds:0xc0022448,ebx
c0001ab3:	be 01 00 00 00       	mov    esi,0x1
c0001ab8:	eb 1c                	jmp    c0001ad6 <dlmallopt+0x85>
c0001aba:	89 1d 4c 24 02 c0    	mov    DWORD PTR ds:0xc002244c,ebx
c0001ac0:	eb f1                	jmp    c0001ab3 <dlmallopt+0x62>
c0001ac2:	31 f6                	xor    esi,esi
c0001ac4:	85 db                	test   ebx,ebx
c0001ac6:	75 0e                	jne    c0001ad6 <dlmallopt+0x85>
c0001ac8:	c7 05 54 24 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022454,0x0
c0001ad2:	eb df                	jmp    c0001ab3 <dlmallopt+0x62>
c0001ad4:	31 f6                	xor    esi,esi
c0001ad6:	89 f0                	mov    eax,esi
c0001ad8:	5b                   	pop    ebx
c0001ad9:	5e                   	pop    esi
c0001ada:	c3                   	ret    
c0001adb:	90                   	nop

c0001adc <isblank>:
c0001adc:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001ae1:	74 09                	je     c0001aec <isblank+0x10>
c0001ae3:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001ae8:	75 0a                	jne    c0001af4 <isblank+0x18>
c0001aea:	66 90                	xchg   ax,ax
c0001aec:	b8 01 00 00 00       	mov    eax,0x1
c0001af1:	c3                   	ret    
c0001af2:	66 90                	xchg   ax,ax
c0001af4:	b8 00 00 00 00       	mov    eax,0x0
c0001af9:	c3                   	ret    
c0001afa:	66 90                	xchg   ax,ax

c0001afc <iscntrl>:
c0001afc:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001b01:	7e 09                	jle    c0001b0c <iscntrl+0x10>
c0001b03:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001b08:	75 0a                	jne    c0001b14 <iscntrl+0x18>
c0001b0a:	66 90                	xchg   ax,ax
c0001b0c:	b8 01 00 00 00       	mov    eax,0x1
c0001b11:	c3                   	ret    
c0001b12:	66 90                	xchg   ax,ax
c0001b14:	b8 00 00 00 00       	mov    eax,0x0
c0001b19:	c3                   	ret    
c0001b1a:	66 90                	xchg   ax,ax

c0001b1c <isdigit>:
c0001b1c:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001b21:	7e 0d                	jle    c0001b30 <isdigit+0x14>
c0001b23:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001b28:	7f 06                	jg     c0001b30 <isdigit+0x14>
c0001b2a:	b8 01 00 00 00       	mov    eax,0x1
c0001b2f:	c3                   	ret    
c0001b30:	b8 00 00 00 00       	mov    eax,0x0
c0001b35:	c3                   	ret    
c0001b36:	66 90                	xchg   ax,ax

c0001b38 <islower>:
c0001b38:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001b3d:	7e 0d                	jle    c0001b4c <islower+0x14>
c0001b3f:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001b44:	7f 06                	jg     c0001b4c <islower+0x14>
c0001b46:	b8 01 00 00 00       	mov    eax,0x1
c0001b4b:	c3                   	ret    
c0001b4c:	b8 00 00 00 00       	mov    eax,0x0
c0001b51:	c3                   	ret    
c0001b52:	66 90                	xchg   ax,ax

c0001b54 <isspace>:
c0001b54:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001b59:	7c 19                	jl     c0001b74 <isspace+0x20>
c0001b5b:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001b60:	7e 0a                	jle    c0001b6c <isspace+0x18>
c0001b62:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001b67:	75 0b                	jne    c0001b74 <isspace+0x20>
c0001b69:	8d 76 00             	lea    esi,[esi+0x0]
c0001b6c:	b8 01 00 00 00       	mov    eax,0x1
c0001b71:	c3                   	ret    
c0001b72:	66 90                	xchg   ax,ax
c0001b74:	b8 00 00 00 00       	mov    eax,0x0
c0001b79:	c3                   	ret    
c0001b7a:	66 90                	xchg   ax,ax

c0001b7c <isupper>:
c0001b7c:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001b81:	7e 0d                	jle    c0001b90 <isupper+0x14>
c0001b83:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001b88:	7f 06                	jg     c0001b90 <isupper+0x14>
c0001b8a:	b8 01 00 00 00       	mov    eax,0x1
c0001b8f:	c3                   	ret    
c0001b90:	b8 00 00 00 00       	mov    eax,0x0
c0001b95:	c3                   	ret    
c0001b96:	66 90                	xchg   ax,ax

c0001b98 <isalpha>:
c0001b98:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001b9c:	e8 db ff ff ff       	call   c0001b7c <isupper>
c0001ba1:	83 c4 04             	add    esp,0x4
c0001ba4:	85 c0                	test   eax,eax
c0001ba6:	75 10                	jne    c0001bb8 <isalpha+0x20>
c0001ba8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bac:	e8 87 ff ff ff       	call   c0001b38 <islower>
c0001bb1:	83 c4 04             	add    esp,0x4
c0001bb4:	85 c0                	test   eax,eax
c0001bb6:	74 08                	je     c0001bc0 <isalpha+0x28>
c0001bb8:	b8 01 00 00 00       	mov    eax,0x1
c0001bbd:	c3                   	ret    
c0001bbe:	66 90                	xchg   ax,ax
c0001bc0:	b8 00 00 00 00       	mov    eax,0x0
c0001bc5:	c3                   	ret    
c0001bc6:	66 90                	xchg   ax,ax

c0001bc8 <isalnum>:
c0001bc8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bcc:	e8 c7 ff ff ff       	call   c0001b98 <isalpha>
c0001bd1:	83 c4 04             	add    esp,0x4
c0001bd4:	85 c0                	test   eax,eax
c0001bd6:	75 10                	jne    c0001be8 <isalnum+0x20>
c0001bd8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bdc:	e8 3b ff ff ff       	call   c0001b1c <isdigit>
c0001be1:	83 c4 04             	add    esp,0x4
c0001be4:	85 c0                	test   eax,eax
c0001be6:	74 08                	je     c0001bf0 <isalnum+0x28>
c0001be8:	b8 01 00 00 00       	mov    eax,0x1
c0001bed:	c3                   	ret    
c0001bee:	66 90                	xchg   ax,ax
c0001bf0:	b8 00 00 00 00       	mov    eax,0x0
c0001bf5:	c3                   	ret    
c0001bf6:	66 90                	xchg   ax,ax

c0001bf8 <ispunct>:
c0001bf8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bfc:	e8 c7 ff ff ff       	call   c0001bc8 <isalnum>
c0001c01:	83 c4 04             	add    esp,0x4
c0001c04:	85 c0                	test   eax,eax
c0001c06:	75 28                	jne    c0001c30 <ispunct+0x38>
c0001c08:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c0c:	e8 43 ff ff ff       	call   c0001b54 <isspace>
c0001c11:	83 c4 04             	add    esp,0x4
c0001c14:	85 c0                	test   eax,eax
c0001c16:	75 18                	jne    c0001c30 <ispunct+0x38>
c0001c18:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c1c:	e8 db fe ff ff       	call   c0001afc <iscntrl>
c0001c21:	83 c4 04             	add    esp,0x4
c0001c24:	85 c0                	test   eax,eax
c0001c26:	75 08                	jne    c0001c30 <ispunct+0x38>
c0001c28:	b8 01 00 00 00       	mov    eax,0x1
c0001c2d:	c3                   	ret    
c0001c2e:	66 90                	xchg   ax,ax
c0001c30:	b8 00 00 00 00       	mov    eax,0x0
c0001c35:	c3                   	ret    
c0001c36:	66 90                	xchg   ax,ax

c0001c38 <isgraph>:
c0001c38:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c3c:	e8 87 ff ff ff       	call   c0001bc8 <isalnum>
c0001c41:	83 c4 04             	add    esp,0x4
c0001c44:	85 c0                	test   eax,eax
c0001c46:	75 10                	jne    c0001c58 <isgraph+0x20>
c0001c48:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c4c:	e8 a7 ff ff ff       	call   c0001bf8 <ispunct>
c0001c51:	83 c4 04             	add    esp,0x4
c0001c54:	85 c0                	test   eax,eax
c0001c56:	74 08                	je     c0001c60 <isgraph+0x28>
c0001c58:	b8 01 00 00 00       	mov    eax,0x1
c0001c5d:	c3                   	ret    
c0001c5e:	66 90                	xchg   ax,ax
c0001c60:	b8 00 00 00 00       	mov    eax,0x0
c0001c65:	c3                   	ret    
c0001c66:	66 90                	xchg   ax,ax

c0001c68 <isprint>:
c0001c68:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c6c:	e8 c7 ff ff ff       	call   c0001c38 <isgraph>
c0001c71:	83 c4 04             	add    esp,0x4
c0001c74:	85 c0                	test   eax,eax
c0001c76:	75 08                	jne    c0001c80 <isprint+0x18>
c0001c78:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001c7d:	75 09                	jne    c0001c88 <isprint+0x20>
c0001c7f:	90                   	nop
c0001c80:	b8 01 00 00 00       	mov    eax,0x1
c0001c85:	c3                   	ret    
c0001c86:	66 90                	xchg   ax,ax
c0001c88:	b8 00 00 00 00       	mov    eax,0x0
c0001c8d:	c3                   	ret    
c0001c8e:	66 90                	xchg   ax,ax

c0001c90 <isxdigit>:
c0001c90:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c94:	e8 83 fe ff ff       	call   c0001b1c <isdigit>
c0001c99:	83 c4 04             	add    esp,0x4
c0001c9c:	85 c0                	test   eax,eax
c0001c9e:	75 20                	jne    c0001cc0 <isxdigit+0x30>
c0001ca0:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001ca5:	7e 09                	jle    c0001cb0 <isxdigit+0x20>
c0001ca7:	83 7c 24 04 46       	cmp    DWORD PTR [esp+0x4],0x46
c0001cac:	7e 12                	jle    c0001cc0 <isxdigit+0x30>
c0001cae:	66 90                	xchg   ax,ax
c0001cb0:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001cb5:	7e 11                	jle    c0001cc8 <isxdigit+0x38>
c0001cb7:	83 7c 24 04 66       	cmp    DWORD PTR [esp+0x4],0x66
c0001cbc:	7f 0a                	jg     c0001cc8 <isxdigit+0x38>
c0001cbe:	66 90                	xchg   ax,ax
c0001cc0:	b8 01 00 00 00       	mov    eax,0x1
c0001cc5:	c3                   	ret    
c0001cc6:	66 90                	xchg   ax,ax
c0001cc8:	b8 00 00 00 00       	mov    eax,0x0
c0001ccd:	c3                   	ret    

c0001cce <disk_status>:
c0001cce:	31 c0                	xor    eax,eax
c0001cd0:	c3                   	ret    

c0001cd1 <disk_initialize>:
c0001cd1:	31 c0                	xor    eax,eax
c0001cd3:	c3                   	ret    

c0001cd4 <disk_read>:
c0001cd4:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001cd9:	0f b6 04 85 c0 62 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd9d40]
c0001ce1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001ce5:	e9 52 52 01 00       	jmp    c0016f3c <fatWrapperReadDisk>

c0001cea <disk_write>:
c0001cea:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001cef:	0f b6 04 85 c0 62 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd9d40]
c0001cf7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001cfb:	e9 80 52 01 00       	jmp    c0016f80 <fatWrapperWriteDisk>

c0001d00 <disk_ioctl>:
c0001d00:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001d05:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001d09:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001d0e:	0f b6 04 85 c0 62 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd9d40]
c0001d16:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001d1a:	e9 a5 52 01 00       	jmp    c0016fc4 <fatWrapperIoctl>

c0001d1f <ld_word>:
c0001d1f:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001d23:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001d26:	c1 e2 08             	shl    edx,0x8
c0001d29:	09 d0                	or     eax,edx
c0001d2b:	c3                   	ret    

c0001d2c <ld_dword>:
c0001d2c:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001d30:	89 d1                	mov    ecx,edx
c0001d32:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001d36:	c1 e1 08             	shl    ecx,0x8
c0001d39:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001d3c:	09 ca                	or     edx,ecx
c0001d3e:	c1 e2 08             	shl    edx,0x8
c0001d41:	09 d0                	or     eax,edx
c0001d43:	c3                   	ret    

c0001d44 <st_word>:
c0001d44:	66 89 10             	mov    WORD PTR [eax],dx
c0001d47:	c3                   	ret    

c0001d48 <st_dword>:
c0001d48:	89 10                	mov    DWORD PTR [eax],edx
c0001d4a:	c3                   	ret    

c0001d4b <mem_cpy>:
c0001d4b:	85 c9                	test   ecx,ecx
c0001d4d:	74 10                	je     c0001d5f <mem_cpy+0x14>
c0001d4f:	57                   	push   edi
c0001d50:	01 c1                	add    ecx,eax
c0001d52:	56                   	push   esi
c0001d53:	89 c7                	mov    edi,eax
c0001d55:	89 d6                	mov    esi,edx
c0001d57:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001d58:	39 f9                	cmp    ecx,edi
c0001d5a:	75 fb                	jne    c0001d57 <mem_cpy+0xc>
c0001d5c:	5e                   	pop    esi
c0001d5d:	5f                   	pop    edi
c0001d5e:	c3                   	ret    
c0001d5f:	c3                   	ret    

c0001d60 <mem_set>:
c0001d60:	01 c1                	add    ecx,eax
c0001d62:	40                   	inc    eax
c0001d63:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001d66:	39 c8                	cmp    eax,ecx
c0001d68:	75 f8                	jne    c0001d62 <mem_set+0x2>
c0001d6a:	c3                   	ret    

c0001d6b <mem_cmp>:
c0001d6b:	57                   	push   edi
c0001d6c:	56                   	push   esi
c0001d6d:	89 c6                	mov    esi,eax
c0001d6f:	53                   	push   ebx
c0001d70:	46                   	inc    esi
c0001d71:	42                   	inc    edx
c0001d72:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001d76:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001d7a:	29 fb                	sub    ebx,edi
c0001d7c:	89 cf                	mov    edi,ecx
c0001d7e:	29 f7                	sub    edi,esi
c0001d80:	01 c7                	add    edi,eax
c0001d82:	74 04                	je     c0001d88 <mem_cmp+0x1d>
c0001d84:	85 db                	test   ebx,ebx
c0001d86:	74 e8                	je     c0001d70 <mem_cmp+0x5>
c0001d88:	89 d8                	mov    eax,ebx
c0001d8a:	5b                   	pop    ebx
c0001d8b:	5e                   	pop    esi
c0001d8c:	5f                   	pop    edi
c0001d8d:	c3                   	ret    

c0001d8e <chk_chr>:
c0001d8e:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001d91:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001d94:	74 07                	je     c0001d9d <chk_chr+0xf>
c0001d96:	39 d1                	cmp    ecx,edx
c0001d98:	74 03                	je     c0001d9d <chk_chr+0xf>
c0001d9a:	40                   	inc    eax
c0001d9b:	eb f1                	jmp    c0001d8e <chk_chr>
c0001d9d:	89 c8                	mov    eax,ecx
c0001d9f:	c3                   	ret    

c0001da0 <dbc_1st>:
c0001da0:	31 c0                	xor    eax,eax
c0001da2:	c3                   	ret    

c0001da3 <dbc_2nd>:
c0001da3:	31 c0                	xor    eax,eax
c0001da5:	c3                   	ret    

c0001da6 <tchar2uni>:
c0001da6:	57                   	push   edi
c0001da7:	89 c7                	mov    edi,eax
c0001da9:	56                   	push   esi
c0001daa:	53                   	push   ebx
c0001dab:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001dad:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001daf:	8d 73 01             	lea    esi,[ebx+0x1]
c0001db2:	84 c9                	test   cl,cl
c0001db4:	78 0a                	js     c0001dc0 <tchar2uni+0x1a>
c0001db6:	0f b6 d1             	movzx  edx,cl
c0001db9:	89 f3                	mov    ebx,esi
c0001dbb:	e9 9f 00 00 00       	jmp    c0001e5f <tchar2uni+0xb9>
c0001dc0:	88 ca                	mov    dl,cl
c0001dc2:	83 e2 e0             	and    edx,0xffffffe0
c0001dc5:	80 fa c0             	cmp    dl,0xc0
c0001dc8:	75 0c                	jne    c0001dd6 <tchar2uni+0x30>
c0001dca:	89 ca                	mov    edx,ecx
c0001dcc:	b9 01 00 00 00       	mov    ecx,0x1
c0001dd1:	83 e2 1f             	and    edx,0x1f
c0001dd4:	eb 2e                	jmp    c0001e04 <tchar2uni+0x5e>
c0001dd6:	88 ca                	mov    dl,cl
c0001dd8:	83 e2 f0             	and    edx,0xfffffff0
c0001ddb:	80 fa e0             	cmp    dl,0xe0
c0001dde:	75 0c                	jne    c0001dec <tchar2uni+0x46>
c0001de0:	89 ca                	mov    edx,ecx
c0001de2:	b9 02 00 00 00       	mov    ecx,0x2
c0001de7:	83 e2 0f             	and    edx,0xf
c0001dea:	eb 18                	jmp    c0001e04 <tchar2uni+0x5e>
c0001dec:	88 ca                	mov    dl,cl
c0001dee:	83 e2 f8             	and    edx,0xfffffff8
c0001df1:	88 d0                	mov    al,dl
c0001df3:	83 ca ff             	or     edx,0xffffffff
c0001df6:	3c f0                	cmp    al,0xf0
c0001df8:	75 6c                	jne    c0001e66 <tchar2uni+0xc0>
c0001dfa:	89 ca                	mov    edx,ecx
c0001dfc:	b9 03 00 00 00       	mov    ecx,0x3
c0001e01:	83 e2 07             	and    edx,0x7
c0001e04:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001e08:	46                   	inc    esi
c0001e09:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001e0c:	88 c8                	mov    al,cl
c0001e0e:	83 e0 c0             	and    eax,0xffffffc0
c0001e11:	3c 80                	cmp    al,0x80
c0001e13:	75 4e                	jne    c0001e63 <tchar2uni+0xbd>
c0001e15:	c1 e2 06             	shl    edx,0x6
c0001e18:	83 e1 3f             	and    ecx,0x3f
c0001e1b:	09 ca                	or     edx,ecx
c0001e1d:	39 de                	cmp    esi,ebx
c0001e1f:	75 e7                	jne    c0001e08 <tchar2uni+0x62>
c0001e21:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001e24:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001e2a:	77 37                	ja     c0001e63 <tchar2uni+0xbd>
c0001e2c:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001e32:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001e38:	76 29                	jbe    c0001e63 <tchar2uni+0xbd>
c0001e3a:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001e40:	76 1d                	jbe    c0001e5f <tchar2uni+0xb9>
c0001e42:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001e48:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001e4e:	c1 e1 06             	shl    ecx,0x6
c0001e51:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001e57:	09 ca                	or     edx,ecx
c0001e59:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001e5f:	89 1f                	mov    DWORD PTR [edi],ebx
c0001e61:	eb 03                	jmp    c0001e66 <tchar2uni+0xc0>
c0001e63:	83 ca ff             	or     edx,0xffffffff
c0001e66:	5b                   	pop    ebx
c0001e67:	89 d0                	mov    eax,edx
c0001e69:	5e                   	pop    esi
c0001e6a:	5f                   	pop    edi
c0001e6b:	c3                   	ret    

c0001e6c <put_utf>:
c0001e6c:	53                   	push   ebx
c0001e6d:	83 f8 7f             	cmp    eax,0x7f
c0001e70:	89 c3                	mov    ebx,eax
c0001e72:	b0 00                	mov    al,0x0
c0001e74:	77 11                	ja     c0001e87 <put_utf+0x1b>
c0001e76:	85 c9                	test   ecx,ecx
c0001e78:	0f 84 e5 00 00 00    	je     c0001f63 <put_utf+0xf7>
c0001e7e:	88 1a                	mov    BYTE PTR [edx],bl
c0001e80:	b0 01                	mov    al,0x1
c0001e82:	e9 dc 00 00 00       	jmp    c0001f63 <put_utf+0xf7>
c0001e87:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001e8d:	77 23                	ja     c0001eb2 <put_utf+0x46>
c0001e8f:	83 f9 01             	cmp    ecx,0x1
c0001e92:	0f 86 cb 00 00 00    	jbe    c0001f63 <put_utf+0xf7>
c0001e98:	89 d8                	mov    eax,ebx
c0001e9a:	83 e3 3f             	and    ebx,0x3f
c0001e9d:	c1 e8 06             	shr    eax,0x6
c0001ea0:	83 cb 80             	or     ebx,0xffffff80
c0001ea3:	83 c8 c0             	or     eax,0xffffffc0
c0001ea6:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001ea9:	88 02                	mov    BYTE PTR [edx],al
c0001eab:	b0 02                	mov    al,0x2
c0001ead:	e9 b1 00 00 00       	jmp    c0001f63 <put_utf+0xf7>
c0001eb2:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001eb8:	77 40                	ja     c0001efa <put_utf+0x8e>
c0001eba:	83 f9 02             	cmp    ecx,0x2
c0001ebd:	0f 86 a0 00 00 00    	jbe    c0001f63 <put_utf+0xf7>
c0001ec3:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001ec9:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001ecf:	0f 86 8e 00 00 00    	jbe    c0001f63 <put_utf+0xf7>
c0001ed5:	89 d8                	mov    eax,ebx
c0001ed7:	c1 e8 0c             	shr    eax,0xc
c0001eda:	83 c8 e0             	or     eax,0xffffffe0
c0001edd:	88 02                	mov    BYTE PTR [edx],al
c0001edf:	89 d8                	mov    eax,ebx
c0001ee1:	83 e3 3f             	and    ebx,0x3f
c0001ee4:	c1 e8 06             	shr    eax,0x6
c0001ee7:	83 cb 80             	or     ebx,0xffffff80
c0001eea:	83 e0 3f             	and    eax,0x3f
c0001eed:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001ef0:	83 c8 80             	or     eax,0xffffff80
c0001ef3:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001ef6:	b0 03                	mov    al,0x3
c0001ef8:	eb 69                	jmp    c0001f63 <put_utf+0xf7>
c0001efa:	83 f9 03             	cmp    ecx,0x3
c0001efd:	76 64                	jbe    c0001f63 <put_utf+0xf7>
c0001eff:	89 d9                	mov    ecx,ebx
c0001f01:	0f b7 c3             	movzx  eax,bx
c0001f04:	66 31 c9             	xor    cx,cx
c0001f07:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001f0d:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001f13:	c1 e9 06             	shr    ecx,0x6
c0001f16:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001f1c:	77 43                	ja     c0001f61 <put_utf+0xf5>
c0001f1e:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001f24:	77 3b                	ja     c0001f61 <put_utf+0xf5>
c0001f26:	09 cb                	or     ebx,ecx
c0001f28:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001f2e:	89 d8                	mov    eax,ebx
c0001f30:	c1 e8 12             	shr    eax,0x12
c0001f33:	83 c8 f0             	or     eax,0xfffffff0
c0001f36:	88 02                	mov    BYTE PTR [edx],al
c0001f38:	89 d8                	mov    eax,ebx
c0001f3a:	c1 e8 0c             	shr    eax,0xc
c0001f3d:	83 e0 3f             	and    eax,0x3f
c0001f40:	83 c8 80             	or     eax,0xffffff80
c0001f43:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001f46:	89 d8                	mov    eax,ebx
c0001f48:	83 e3 3f             	and    ebx,0x3f
c0001f4b:	c1 e8 06             	shr    eax,0x6
c0001f4e:	83 cb 80             	or     ebx,0xffffff80
c0001f51:	83 e0 3f             	and    eax,0x3f
c0001f54:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001f57:	83 c8 80             	or     eax,0xffffff80
c0001f5a:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001f5d:	b0 04                	mov    al,0x4
c0001f5f:	eb 02                	jmp    c0001f63 <put_utf+0xf7>
c0001f61:	31 c0                	xor    eax,eax
c0001f63:	5b                   	pop    ebx
c0001f64:	c3                   	ret    

c0001f65 <clst2sect>:
c0001f65:	8d 4a fe             	lea    ecx,[edx-0x2]
c0001f68:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0001f6b:	83 ea 02             	sub    edx,0x2
c0001f6e:	39 ca                	cmp    edx,ecx
c0001f70:	76 0d                	jbe    c0001f7f <clst2sect+0x1a>
c0001f72:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0001f76:	0f af d1             	imul   edx,ecx
c0001f79:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c0001f7c:	89 d0                	mov    eax,edx
c0001f7e:	c3                   	ret    
c0001f7f:	31 c0                	xor    eax,eax
c0001f81:	c3                   	ret    

c0001f82 <pick_lfn>:
c0001f82:	55                   	push   ebp
c0001f83:	57                   	push   edi
c0001f84:	56                   	push   esi
c0001f85:	89 d6                	mov    esi,edx
c0001f87:	53                   	push   ebx
c0001f88:	89 c3                	mov    ebx,eax
c0001f8a:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001f8d:	e8 8d fd ff ff       	call   c0001d1f <ld_word>
c0001f92:	66 85 c0             	test   ax,ax
c0001f95:	74 04                	je     c0001f9b <pick_lfn+0x19>
c0001f97:	31 c0                	xor    eax,eax
c0001f99:	eb 5c                	jmp    c0001ff7 <pick_lfn+0x75>
c0001f9b:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001f9e:	bd 01 00 00 00       	mov    ebp,0x1
c0001fa3:	83 e1 bf             	and    ecx,0xffffffbf
c0001fa6:	31 ff                	xor    edi,edi
c0001fa8:	49                   	dec    ecx
c0001fa9:	6b c9 0d             	imul   ecx,ecx,0xd
c0001fac:	0f b6 87 20 d8 01 c0 	movzx  eax,BYTE PTR [edi-0x3ffe27e0]
c0001fb3:	01 f0                	add    eax,esi
c0001fb5:	e8 65 fd ff ff       	call   c0001d1f <ld_word>
c0001fba:	66 85 ed             	test   bp,bp
c0001fbd:	74 11                	je     c0001fd0 <pick_lfn+0x4e>
c0001fbf:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fc5:	77 d0                	ja     c0001f97 <pick_lfn+0x15>
c0001fc7:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001fcb:	89 c5                	mov    ebp,eax
c0001fcd:	41                   	inc    ecx
c0001fce:	eb 04                	jmp    c0001fd4 <pick_lfn+0x52>
c0001fd0:	66 40                	inc    ax
c0001fd2:	75 c3                	jne    c0001f97 <pick_lfn+0x15>
c0001fd4:	47                   	inc    edi
c0001fd5:	83 ff 0d             	cmp    edi,0xd
c0001fd8:	75 d2                	jne    c0001fac <pick_lfn+0x2a>
c0001fda:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001fdd:	74 13                	je     c0001ff2 <pick_lfn+0x70>
c0001fdf:	66 85 ed             	test   bp,bp
c0001fe2:	74 0e                	je     c0001ff2 <pick_lfn+0x70>
c0001fe4:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fea:	77 ab                	ja     c0001f97 <pick_lfn+0x15>
c0001fec:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001ff2:	b8 01 00 00 00       	mov    eax,0x1
c0001ff7:	5b                   	pop    ebx
c0001ff8:	5e                   	pop    esi
c0001ff9:	5f                   	pop    edi
c0001ffa:	5d                   	pop    ebp
c0001ffb:	c3                   	ret    

c0001ffc <put_lfn>:
c0001ffc:	55                   	push   ebp
c0001ffd:	31 ed                	xor    ebp,ebp
c0001fff:	57                   	push   edi
c0002000:	89 d7                	mov    edi,edx
c0002002:	56                   	push   esi
c0002003:	31 f6                	xor    esi,esi
c0002005:	53                   	push   ebx
c0002006:	83 ec 08             	sub    esp,0x8
c0002009:	89 04 24             	mov    DWORD PTR [esp],eax
c000200c:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0002010:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0002014:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c000201a:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c000201d:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002020:	31 d2                	xor    edx,edx
c0002022:	e8 1d fd ff ff       	call   c0001d44 <st_word>
c0002027:	0f b6 d9             	movzx  ebx,cl
c000202a:	4b                   	dec    ebx
c000202b:	6b db 0d             	imul   ebx,ebx,0xd
c000202e:	66 83 fe ff          	cmp    si,0xffff
c0002032:	74 08                	je     c000203c <put_lfn+0x40>
c0002034:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002037:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c000203b:	43                   	inc    ebx
c000203c:	0f b6 85 20 d8 01 c0 	movzx  eax,BYTE PTR [ebp-0x3ffe27e0]
c0002043:	0f b7 d6             	movzx  edx,si
c0002046:	01 f8                	add    eax,edi
c0002048:	e8 f7 fc ff ff       	call   c0001d44 <st_word>
c000204d:	66 85 f6             	test   si,si
c0002050:	75 03                	jne    c0002055 <put_lfn+0x59>
c0002052:	83 ce ff             	or     esi,0xffffffff
c0002055:	45                   	inc    ebp
c0002056:	83 fd 0d             	cmp    ebp,0xd
c0002059:	75 d3                	jne    c000202e <put_lfn+0x32>
c000205b:	66 46                	inc    si
c000205d:	74 0a                	je     c0002069 <put_lfn+0x6d>
c000205f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002062:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002067:	75 09                	jne    c0002072 <put_lfn+0x76>
c0002069:	88 c8                	mov    al,cl
c000206b:	83 c8 40             	or     eax,0x40
c000206e:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0002072:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0002076:	88 07                	mov    BYTE PTR [edi],al
c0002078:	83 c4 08             	add    esp,0x8
c000207b:	5b                   	pop    ebx
c000207c:	5e                   	pop    esi
c000207d:	5f                   	pop    edi
c000207e:	5d                   	pop    ebp
c000207f:	c3                   	ret    

c0002080 <gen_numname>:
c0002080:	57                   	push   edi
c0002081:	89 cf                	mov    edi,ecx
c0002083:	56                   	push   esi
c0002084:	b9 0b 00 00 00       	mov    ecx,0xb
c0002089:	53                   	push   ebx
c000208a:	89 c6                	mov    esi,eax
c000208c:	83 ec 10             	sub    esp,0x10
c000208f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0002093:	e8 b3 fc ff ff       	call   c0001d4b <mem_cpy>
c0002098:	83 fb 05             	cmp    ebx,0x5
c000209b:	76 2d                	jbe    c00020ca <gen_numname+0x4a>
c000209d:	66 8b 07             	mov    ax,WORD PTR [edi]
c00020a0:	66 85 c0             	test   ax,ax
c00020a3:	74 25                	je     c00020ca <gen_numname+0x4a>
c00020a5:	83 c7 02             	add    edi,0x2
c00020a8:	ba 10 00 00 00       	mov    edx,0x10
c00020ad:	01 db                	add    ebx,ebx
c00020af:	89 c1                	mov    ecx,eax
c00020b1:	66 d1 e8             	shr    ax,1
c00020b4:	83 e1 01             	and    ecx,0x1
c00020b7:	01 cb                	add    ebx,ecx
c00020b9:	0f ba e3 10          	bt     ebx,0x10
c00020bd:	73 06                	jae    c00020c5 <gen_numname+0x45>
c00020bf:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00020c5:	4a                   	dec    edx
c00020c6:	75 e5                	jne    c00020ad <gen_numname+0x2d>
c00020c8:	eb d3                	jmp    c000209d <gen_numname+0x1d>
c00020ca:	b8 07 00 00 00       	mov    eax,0x7
c00020cf:	88 d9                	mov    cl,bl
c00020d1:	83 e1 0f             	and    ecx,0xf
c00020d4:	8d 51 30             	lea    edx,[ecx+0x30]
c00020d7:	80 fa 39             	cmp    dl,0x39
c00020da:	76 03                	jbe    c00020df <gen_numname+0x5f>
c00020dc:	8d 51 37             	lea    edx,[ecx+0x37]
c00020df:	8d 48 ff             	lea    ecx,[eax-0x1]
c00020e2:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00020e6:	89 da                	mov    edx,ebx
c00020e8:	c1 ea 04             	shr    edx,0x4
c00020eb:	83 fb 0f             	cmp    ebx,0xf
c00020ee:	76 06                	jbe    c00020f6 <gen_numname+0x76>
c00020f0:	89 c8                	mov    eax,ecx
c00020f2:	89 d3                	mov    ebx,edx
c00020f4:	eb d9                	jmp    c00020cf <gen_numname+0x4f>
c00020f6:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00020fb:	31 d2                	xor    edx,edx
c00020fd:	8d 58 fe             	lea    ebx,[eax-0x2]
c0002100:	8d 04 16             	lea    eax,[esi+edx*1]
c0002103:	39 ca                	cmp    edx,ecx
c0002105:	73 18                	jae    c000211f <gen_numname+0x9f>
c0002107:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000210a:	3c 20                	cmp    al,0x20
c000210c:	74 11                	je     c000211f <gen_numname+0x9f>
c000210e:	e8 8d fc ff ff       	call   c0001da0 <dbc_1st>
c0002113:	85 c0                	test   eax,eax
c0002115:	74 05                	je     c000211c <gen_numname+0x9c>
c0002117:	39 d3                	cmp    ebx,edx
c0002119:	74 04                	je     c000211f <gen_numname+0x9f>
c000211b:	42                   	inc    edx
c000211c:	42                   	inc    edx
c000211d:	eb e1                	jmp    c0002100 <gen_numname+0x80>
c000211f:	b0 20                	mov    al,0x20
c0002121:	83 f9 07             	cmp    ecx,0x7
c0002124:	77 05                	ja     c000212b <gen_numname+0xab>
c0002126:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c000212a:	41                   	inc    ecx
c000212b:	42                   	inc    edx
c000212c:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002130:	83 fa 07             	cmp    edx,0x7
c0002133:	76 ea                	jbe    c000211f <gen_numname+0x9f>
c0002135:	83 c4 10             	add    esp,0x10
c0002138:	5b                   	pop    ebx
c0002139:	5e                   	pop    esi
c000213a:	5f                   	pop    edi
c000213b:	c3                   	ret    

c000213c <sum_sfn>:
c000213c:	31 c9                	xor    ecx,ecx
c000213e:	31 d2                	xor    edx,edx
c0002140:	d0 ca                	ror    dl,1
c0002142:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0002145:	41                   	inc    ecx
c0002146:	83 f9 0b             	cmp    ecx,0xb
c0002149:	75 f5                	jne    c0002140 <sum_sfn+0x4>
c000214b:	88 d0                	mov    al,dl
c000214d:	c3                   	ret    

c000214e <get_ldnumber>:
c000214e:	8b 10                	mov    edx,DWORD PTR [eax]
c0002150:	85 d2                	test   edx,edx
c0002152:	74 14                	je     c0002168 <get_ldnumber+0x1a>
c0002154:	56                   	push   esi
c0002155:	53                   	push   ebx
c0002156:	89 d3                	mov    ebx,edx
c0002158:	43                   	inc    ebx
c0002159:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c000215c:	80 f9 1f             	cmp    cl,0x1f
c000215f:	76 0d                	jbe    c000216e <get_ldnumber+0x20>
c0002161:	80 f9 3a             	cmp    cl,0x3a
c0002164:	75 f2                	jne    c0002158 <get_ldnumber+0xa>
c0002166:	eb 0a                	jmp    c0002172 <get_ldnumber+0x24>
c0002168:	83 c9 ff             	or     ecx,0xffffffff
c000216b:	89 c8                	mov    eax,ecx
c000216d:	c3                   	ret    
c000216e:	31 c9                	xor    ecx,ecx
c0002170:	eb 24                	jmp    c0002196 <get_ldnumber+0x48>
c0002172:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002175:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002178:	80 f9 09             	cmp    cl,0x9
c000217b:	77 16                	ja     c0002193 <get_ldnumber+0x45>
c000217d:	83 c2 02             	add    edx,0x2
c0002180:	83 c9 ff             	or     ecx,0xffffffff
c0002183:	39 d3                	cmp    ebx,edx
c0002185:	75 0f                	jne    c0002196 <get_ldnumber+0x48>
c0002187:	89 f2                	mov    edx,esi
c0002189:	89 18                	mov    DWORD PTR [eax],ebx
c000218b:	0f be ca             	movsx  ecx,dl
c000218e:	83 e9 30             	sub    ecx,0x30
c0002191:	eb 03                	jmp    c0002196 <get_ldnumber+0x48>
c0002193:	83 c9 ff             	or     ecx,0xffffffff
c0002196:	89 c8                	mov    eax,ecx
c0002198:	5b                   	pop    ebx
c0002199:	5e                   	pop    esi
c000219a:	c3                   	ret    

c000219b <validate>:
c000219b:	56                   	push   esi
c000219c:	53                   	push   ebx
c000219d:	89 d6                	mov    esi,edx
c000219f:	51                   	push   ecx
c00021a0:	85 c0                	test   eax,eax
c00021a2:	75 09                	jne    c00021ad <validate+0x12>
c00021a4:	b8 09 00 00 00       	mov    eax,0x9
c00021a9:	31 c9                	xor    ecx,ecx
c00021ab:	eb 2f                	jmp    c00021dc <validate+0x41>
c00021ad:	89 c3                	mov    ebx,eax
c00021af:	8b 00                	mov    eax,DWORD PTR [eax]
c00021b1:	85 c0                	test   eax,eax
c00021b3:	74 ef                	je     c00021a4 <validate+0x9>
c00021b5:	80 38 00             	cmp    BYTE PTR [eax],0x0
c00021b8:	74 ea                	je     c00021a4 <validate+0x9>
c00021ba:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c00021be:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c00021c2:	75 e0                	jne    c00021a4 <validate+0x9>
c00021c4:	83 ec 0c             	sub    esp,0xc
c00021c7:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00021cb:	50                   	push   eax
c00021cc:	e8 fd fa ff ff       	call   c0001cce <disk_status>
c00021d1:	83 c4 10             	add    esp,0x10
c00021d4:	a8 01                	test   al,0x1
c00021d6:	75 cc                	jne    c00021a4 <validate+0x9>
c00021d8:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00021da:	31 c0                	xor    eax,eax
c00021dc:	89 0e                	mov    DWORD PTR [esi],ecx
c00021de:	5a                   	pop    edx
c00021df:	5b                   	pop    ebx
c00021e0:	5e                   	pop    esi
c00021e1:	c3                   	ret    

c00021e2 <sync_window>:
c00021e2:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00021e6:	74 58                	je     c0002240 <sync_window+0x5e>
c00021e8:	56                   	push   esi
c00021e9:	53                   	push   ebx
c00021ea:	8d 70 34             	lea    esi,[eax+0x34]
c00021ed:	51                   	push   ecx
c00021ee:	89 c3                	mov    ebx,eax
c00021f0:	6a 01                	push   0x1
c00021f2:	ff 70 30             	push   DWORD PTR [eax+0x30]
c00021f5:	56                   	push   esi
c00021f6:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00021fa:	50                   	push   eax
c00021fb:	e8 ea fa ff ff       	call   c0001cea <disk_write>
c0002200:	83 c4 10             	add    esp,0x10
c0002203:	ba 01 00 00 00       	mov    edx,0x1
c0002208:	85 c0                	test   eax,eax
c000220a:	75 2e                	jne    c000223a <sync_window+0x58>
c000220c:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000220f:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0002212:	89 c1                	mov    ecx,eax
c0002214:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0002218:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c000221b:	39 d1                	cmp    ecx,edx
c000221d:	73 19                	jae    c0002238 <sync_window+0x56>
c000221f:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002223:	75 13                	jne    c0002238 <sync_window+0x56>
c0002225:	6a 01                	push   0x1
c0002227:	01 d0                	add    eax,edx
c0002229:	50                   	push   eax
c000222a:	56                   	push   esi
c000222b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000222f:	50                   	push   eax
c0002230:	e8 b5 fa ff ff       	call   c0001cea <disk_write>
c0002235:	83 c4 10             	add    esp,0x10
c0002238:	31 d2                	xor    edx,edx
c000223a:	89 d0                	mov    eax,edx
c000223c:	5a                   	pop    edx
c000223d:	5b                   	pop    ebx
c000223e:	5e                   	pop    esi
c000223f:	c3                   	ret    
c0002240:	31 d2                	xor    edx,edx
c0002242:	89 d0                	mov    eax,edx
c0002244:	c3                   	ret    

c0002245 <move_window>:
c0002245:	57                   	push   edi
c0002246:	56                   	push   esi
c0002247:	31 f6                	xor    esi,esi
c0002249:	53                   	push   ebx
c000224a:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c000224d:	74 32                	je     c0002281 <move_window+0x3c>
c000224f:	89 c3                	mov    ebx,eax
c0002251:	89 d7                	mov    edi,edx
c0002253:	e8 8a ff ff ff       	call   c00021e2 <sync_window>
c0002258:	89 c6                	mov    esi,eax
c000225a:	85 c0                	test   eax,eax
c000225c:	75 23                	jne    c0002281 <move_window+0x3c>
c000225e:	6a 01                	push   0x1
c0002260:	8d 43 34             	lea    eax,[ebx+0x34]
c0002263:	57                   	push   edi
c0002264:	50                   	push   eax
c0002265:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002269:	50                   	push   eax
c000226a:	e8 65 fa ff ff       	call   c0001cd4 <disk_read>
c000226f:	83 c4 10             	add    esp,0x10
c0002272:	85 c0                	test   eax,eax
c0002274:	74 08                	je     c000227e <move_window+0x39>
c0002276:	be 01 00 00 00       	mov    esi,0x1
c000227b:	83 cf ff             	or     edi,0xffffffff
c000227e:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c0002281:	89 f0                	mov    eax,esi
c0002283:	5b                   	pop    ebx
c0002284:	5e                   	pop    esi
c0002285:	5f                   	pop    edi
c0002286:	c3                   	ret    

c0002287 <check_fs>:
c0002287:	53                   	push   ebx
c0002288:	89 c3                	mov    ebx,eax
c000228a:	83 ec 08             	sub    esp,0x8
c000228d:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c0002291:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c0002298:	e8 a8 ff ff ff       	call   c0002245 <move_window>
c000229d:	ba 04 00 00 00       	mov    edx,0x4
c00022a2:	85 c0                	test   eax,eax
c00022a4:	75 68                	jne    c000230e <check_fs+0x87>
c00022a6:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c00022ac:	e8 6e fa ff ff       	call   c0001d1f <ld_word>
c00022b1:	ba 03 00 00 00       	mov    edx,0x3
c00022b6:	66 3d 55 aa          	cmp    ax,0xaa55
c00022ba:	75 52                	jne    c000230e <check_fs+0x87>
c00022bc:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c00022bf:	8d 50 18             	lea    edx,[eax+0x18]
c00022c2:	80 fa 01             	cmp    dl,0x1
c00022c5:	76 09                	jbe    c00022d0 <check_fs+0x49>
c00022c7:	ba 02 00 00 00       	mov    edx,0x2
c00022cc:	3c eb                	cmp    al,0xeb
c00022ce:	75 3e                	jne    c000230e <check_fs+0x87>
c00022d0:	ba 48 f7 01 c0       	mov    edx,0xc001f748
c00022d5:	8d 43 6a             	lea    eax,[ebx+0x6a]
c00022d8:	b9 03 00 00 00       	mov    ecx,0x3
c00022dd:	e8 89 fa ff ff       	call   c0001d6b <mem_cmp>
c00022e2:	31 d2                	xor    edx,edx
c00022e4:	85 c0                	test   eax,eax
c00022e6:	74 26                	je     c000230e <check_fs+0x87>
c00022e8:	ba dc d6 01 c0       	mov    edx,0xc001d6dc
c00022ed:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c00022f3:	b9 05 00 00 00       	mov    ecx,0x5
c00022f8:	e8 6e fa ff ff       	call   c0001d6b <mem_cmp>
c00022fd:	31 d2                	xor    edx,edx
c00022ff:	85 c0                	test   eax,eax
c0002301:	74 0b                	je     c000230e <check_fs+0x87>
c0002303:	31 d2                	xor    edx,edx
c0002305:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c0002309:	0f 95 c2             	setne  dl
c000230c:	01 d2                	add    edx,edx
c000230e:	89 d0                	mov    eax,edx
c0002310:	83 c4 08             	add    esp,0x8
c0002313:	5b                   	pop    ebx
c0002314:	c3                   	ret    

c0002315 <find_volume>:
c0002315:	55                   	push   ebp
c0002316:	57                   	push   edi
c0002317:	56                   	push   esi
c0002318:	89 c6                	mov    esi,eax
c000231a:	53                   	push   ebx
c000231b:	89 d3                	mov    ebx,edx
c000231d:	83 ec 2c             	sub    esp,0x2c
c0002320:	31 d2                	xor    edx,edx
c0002322:	e8 60 ff ff ff       	call   c0002287 <check_fs>
c0002327:	83 f8 02             	cmp    eax,0x2
c000232a:	74 06                	je     c0002332 <find_volume+0x1d>
c000232c:	77 62                	ja     c0002390 <find_volume+0x7b>
c000232e:	85 db                	test   ebx,ebx
c0002330:	74 5e                	je     c0002390 <find_volume+0x7b>
c0002332:	8d 4c 24 10          	lea    ecx,[esp+0x10]
c0002336:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c000233c:	8d ae fa 01 00 00    	lea    ebp,[esi+0x1fa]
c0002342:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002346:	89 cf                	mov    edi,ecx
c0002348:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000234c:	89 e8                	mov    eax,ebp
c000234e:	83 c5 10             	add    ebp,0x10
c0002351:	e8 d6 f9 ff ff       	call   c0001d2c <ld_dword>
c0002356:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000235a:	89 01                	mov    DWORD PTR [ecx],eax
c000235c:	83 c1 04             	add    ecx,0x4
c000235f:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c0002363:	75 e3                	jne    c0002348 <find_volume+0x33>
c0002365:	31 ed                	xor    ebp,ebp
c0002367:	85 db                	test   ebx,ebx
c0002369:	74 03                	je     c000236e <find_volume+0x59>
c000236b:	8d 6b ff             	lea    ebp,[ebx-0x1]
c000236e:	8b 14 af             	mov    edx,DWORD PTR [edi+ebp*4]
c0002371:	b8 03 00 00 00       	mov    eax,0x3
c0002376:	85 d2                	test   edx,edx
c0002378:	74 0c                	je     c0002386 <find_volume+0x71>
c000237a:	89 f0                	mov    eax,esi
c000237c:	e8 06 ff ff ff       	call   c0002287 <check_fs>
c0002381:	83 f8 01             	cmp    eax,0x1
c0002384:	76 0a                	jbe    c0002390 <find_volume+0x7b>
c0002386:	85 db                	test   ebx,ebx
c0002388:	75 06                	jne    c0002390 <find_volume+0x7b>
c000238a:	45                   	inc    ebp
c000238b:	83 fd 03             	cmp    ebp,0x3
c000238e:	76 de                	jbe    c000236e <find_volume+0x59>
c0002390:	83 c4 2c             	add    esp,0x2c
c0002393:	5b                   	pop    ebx
c0002394:	5e                   	pop    esi
c0002395:	5f                   	pop    edi
c0002396:	5d                   	pop    ebp
c0002397:	c3                   	ret    

c0002398 <mount_volume>:
c0002398:	55                   	push   ebp
c0002399:	89 d5                	mov    ebp,edx
c000239b:	57                   	push   edi
c000239c:	89 cf                	mov    edi,ecx
c000239e:	56                   	push   esi
c000239f:	53                   	push   ebx
c00023a0:	bb 0b 00 00 00       	mov    ebx,0xb
c00023a5:	83 ec 2c             	sub    esp,0x2c
c00023a8:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00023ae:	e8 9b fd ff ff       	call   c000214e <get_ldnumber>
c00023b3:	85 c0                	test   eax,eax
c00023b5:	0f 88 d6 02 00 00    	js     c0002691 <mount_volume+0x2f9>
c00023bb:	8b 34 85 a0 24 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffddb60]
c00023c2:	89 c2                	mov    edx,eax
c00023c4:	bb 0c 00 00 00       	mov    ebx,0xc
c00023c9:	85 f6                	test   esi,esi
c00023cb:	0f 84 c0 02 00 00    	je     c0002691 <mount_volume+0x2f9>
c00023d1:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c00023d4:	83 e7 fe             	and    edi,0xfffffffe
c00023d7:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00023da:	74 3a                	je     c0002416 <mount_volume+0x7e>
c00023dc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00023e0:	83 ec 0c             	sub    esp,0xc
c00023e3:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00023e7:	50                   	push   eax
c00023e8:	e8 e1 f8 ff ff       	call   c0001cce <disk_status>
c00023ed:	83 c4 10             	add    esp,0x10
c00023f0:	a8 01                	test   al,0x1
c00023f2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00023f6:	75 1e                	jne    c0002416 <mount_volume+0x7e>
c00023f8:	31 db                	xor    ebx,ebx
c00023fa:	89 f9                	mov    ecx,edi
c00023fc:	84 c9                	test   cl,cl
c00023fe:	0f 84 8d 02 00 00    	je     c0002691 <mount_volume+0x2f9>
c0002404:	a8 04                	test   al,0x4
c0002406:	0f 84 85 02 00 00    	je     c0002691 <mount_volume+0x2f9>
c000240c:	bb 0a 00 00 00       	mov    ebx,0xa
c0002411:	e9 7b 02 00 00       	jmp    c0002691 <mount_volume+0x2f9>
c0002416:	83 ec 0c             	sub    esp,0xc
c0002419:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000241c:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c000241f:	0f b6 c2             	movzx  eax,dl
c0002422:	bb 03 00 00 00       	mov    ebx,0x3
c0002427:	50                   	push   eax
c0002428:	e8 a4 f8 ff ff       	call   c0001cd1 <disk_initialize>
c000242d:	83 c4 10             	add    esp,0x10
c0002430:	a8 01                	test   al,0x1
c0002432:	0f 85 59 02 00 00    	jne    c0002691 <mount_volume+0x2f9>
c0002438:	89 f9                	mov    ecx,edi
c000243a:	84 c9                	test   cl,cl
c000243c:	74 04                	je     c0002442 <mount_volume+0xaa>
c000243e:	a8 04                	test   al,0x4
c0002440:	75 ca                	jne    c000240c <mount_volume+0x74>
c0002442:	31 d2                	xor    edx,edx
c0002444:	89 f0                	mov    eax,esi
c0002446:	bb 01 00 00 00       	mov    ebx,0x1
c000244b:	e8 c5 fe ff ff       	call   c0002315 <find_volume>
c0002450:	83 f8 04             	cmp    eax,0x4
c0002453:	0f 84 38 02 00 00    	je     c0002691 <mount_volume+0x2f9>
c0002459:	83 f8 01             	cmp    eax,0x1
c000245c:	76 0a                	jbe    c0002468 <mount_volume+0xd0>
c000245e:	bb 0d 00 00 00       	mov    ebx,0xd
c0002463:	e9 29 02 00 00       	jmp    c0002691 <mount_volume+0x2f9>
c0002468:	8d 46 3f             	lea    eax,[esi+0x3f]
c000246b:	e8 af f8 ff ff       	call   c0001d1f <ld_word>
c0002470:	66 3d 00 02          	cmp    ax,0x200
c0002474:	75 e8                	jne    c000245e <mount_volume+0xc6>
c0002476:	8d 46 4a             	lea    eax,[esi+0x4a]
c0002479:	e8 a1 f8 ff ff       	call   c0001d1f <ld_word>
c000247e:	0f b7 c0             	movzx  eax,ax
c0002481:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002485:	85 c0                	test   eax,eax
c0002487:	75 0c                	jne    c0002495 <mount_volume+0xfd>
c0002489:	8d 46 58             	lea    eax,[esi+0x58]
c000248c:	e8 9b f8 ff ff       	call   c0001d2c <ld_dword>
c0002491:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002495:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c0002498:	8b 6e 44             	mov    ebp,DWORD PTR [esi+0x44]
c000249b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000249f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00024a3:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00024a6:	89 e8                	mov    eax,ebp
c00024a8:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c00024ab:	8d 45 ff             	lea    eax,[ebp-0x1]
c00024ae:	3c 01                	cmp    al,0x1
c00024b0:	77 ac                	ja     c000245e <mount_volume+0xc6>
c00024b2:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c00024b6:	89 c3                	mov    ebx,eax
c00024b8:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c00024bc:	66 85 c0             	test   ax,ax
c00024bf:	74 9d                	je     c000245e <mount_volume+0xc6>
c00024c1:	8d 40 ff             	lea    eax,[eax-0x1]
c00024c4:	85 d8                	test   eax,ebx
c00024c6:	75 96                	jne    c000245e <mount_volume+0xc6>
c00024c8:	8d 46 45             	lea    eax,[esi+0x45]
c00024cb:	e8 4f f8 ff ff       	call   c0001d1f <ld_word>
c00024d0:	89 c7                	mov    edi,eax
c00024d2:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c00024d6:	a8 0f                	test   al,0xf
c00024d8:	75 84                	jne    c000245e <mount_volume+0xc6>
c00024da:	8d 46 47             	lea    eax,[esi+0x47]
c00024dd:	e8 3d f8 ff ff       	call   c0001d1f <ld_word>
c00024e2:	0f b7 d0             	movzx  edx,ax
c00024e5:	85 d2                	test   edx,edx
c00024e7:	75 0a                	jne    c00024f3 <mount_volume+0x15b>
c00024e9:	8d 46 54             	lea    eax,[esi+0x54]
c00024ec:	e8 3b f8 ff ff       	call   c0001d2c <ld_dword>
c00024f1:	89 c2                	mov    edx,eax
c00024f3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00024f7:	8d 46 42             	lea    eax,[esi+0x42]
c00024fa:	e8 20 f8 ff ff       	call   c0001d1f <ld_word>
c00024ff:	66 85 c0             	test   ax,ax
c0002502:	0f 84 56 ff ff ff    	je     c000245e <mount_volume+0xc6>
c0002508:	89 e9                	mov    ecx,ebp
c000250a:	0f b7 c0             	movzx  eax,ax
c000250d:	0f b6 e9             	movzx  ebp,cl
c0002510:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002514:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002518:	89 f8                	mov    eax,edi
c000251a:	0f af cd             	imul   ecx,ebp
c000251d:	66 c1 e8 04          	shr    ax,0x4
c0002521:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0002525:	0f b7 c0             	movzx  eax,ax
c0002528:	01 c8                	add    eax,ecx
c000252a:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000252e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002532:	39 c2                	cmp    edx,eax
c0002534:	0f 82 24 ff ff ff    	jb     c000245e <mount_volume+0xc6>
c000253a:	29 c2                	sub    edx,eax
c000253c:	89 d5                	mov    ebp,edx
c000253e:	89 d0                	mov    eax,edx
c0002540:	31 d2                	xor    edx,edx
c0002542:	f7 f3                	div    ebx
c0002544:	39 dd                	cmp    ebp,ebx
c0002546:	0f 82 12 ff ff ff    	jb     c000245e <mount_volume+0xc6>
c000254c:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002551:	0f 87 07 ff ff ff    	ja     c000245e <mount_volume+0xc6>
c0002557:	3d f5 ff 00 00       	cmp    eax,0xfff5
c000255c:	0f 86 1f 01 00 00    	jbe    c0002681 <mount_volume+0x2e9>
c0002562:	bb 03 00 00 00       	mov    ebx,0x3
c0002567:	8d 68 02             	lea    ebp,[eax+0x2]
c000256a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000256e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002572:	03 54 24 10          	add    edx,DWORD PTR [esp+0x10]
c0002576:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c0002579:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c000257c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002580:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c0002583:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002587:	83 fb 03             	cmp    ebx,0x3
c000258a:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c000258d:	75 21                	jne    c00025b0 <mount_volume+0x218>
c000258f:	8d 46 5e             	lea    eax,[esi+0x5e]
c0002592:	e8 88 f7 ff ff       	call   c0001d1f <ld_word>
c0002597:	66 09 c7             	or     di,ax
c000259a:	0f 85 be fe ff ff    	jne    c000245e <mount_volume+0xc6>
c00025a0:	8d 46 60             	lea    eax,[esi+0x60]
c00025a3:	c1 e5 02             	shl    ebp,0x2
c00025a6:	e8 81 f7 ff ff       	call   c0001d2c <ld_dword>
c00025ab:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00025ae:	eb 22                	jmp    c00025d2 <mount_volume+0x23a>
c00025b0:	66 85 ff             	test   di,di
c00025b3:	0f 84 a5 fe ff ff    	je     c000245e <mount_volume+0xc6>
c00025b9:	01 c8                	add    eax,ecx
c00025bb:	83 fb 02             	cmp    ebx,0x2
c00025be:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00025c1:	75 04                	jne    c00025c7 <mount_volume+0x22f>
c00025c3:	01 ed                	add    ebp,ebp
c00025c5:	eb 0b                	jmp    c00025d2 <mount_volume+0x23a>
c00025c7:	8d 44 6d 00          	lea    eax,[ebp+ebp*2+0x0]
c00025cb:	83 e5 01             	and    ebp,0x1
c00025ce:	d1 e8                	shr    eax,1
c00025d0:	01 c5                	add    ebp,eax
c00025d2:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c00025d8:	c1 ed 09             	shr    ebp,0x9
c00025db:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c00025df:	0f 87 79 fe ff ff    	ja     c000245e <mount_volume+0xc6>
c00025e5:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c00025ec:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c00025f3:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c00025f7:	83 fb 03             	cmp    ebx,0x3
c00025fa:	75 6e                	jne    c000266a <mount_volume+0x2d2>
c00025fc:	8d 46 64             	lea    eax,[esi+0x64]
c00025ff:	e8 1b f7 ff ff       	call   c0001d1f <ld_word>
c0002604:	66 48                	dec    ax
c0002606:	75 62                	jne    c000266a <mount_volume+0x2d2>
c0002608:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000260c:	89 f0                	mov    eax,esi
c000260e:	42                   	inc    edx
c000260f:	e8 31 fc ff ff       	call   c0002245 <move_window>
c0002614:	85 c0                	test   eax,eax
c0002616:	75 52                	jne    c000266a <mount_volume+0x2d2>
c0002618:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c000261c:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c0002622:	e8 f8 f6 ff ff       	call   c0001d1f <ld_word>
c0002627:	66 3d 55 aa          	cmp    ax,0xaa55
c000262b:	75 3d                	jne    c000266a <mount_volume+0x2d2>
c000262d:	8d 46 34             	lea    eax,[esi+0x34]
c0002630:	e8 f7 f6 ff ff       	call   c0001d2c <ld_dword>
c0002635:	3d 52 52 61 41       	cmp    eax,0x41615252
c000263a:	75 2e                	jne    c000266a <mount_volume+0x2d2>
c000263c:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c0002642:	e8 e5 f6 ff ff       	call   c0001d2c <ld_dword>
c0002647:	3d 72 72 41 61       	cmp    eax,0x61417272
c000264c:	75 1c                	jne    c000266a <mount_volume+0x2d2>
c000264e:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c0002654:	e8 d3 f6 ff ff       	call   c0001d2c <ld_dword>
c0002659:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000265c:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c0002662:	e8 c5 f6 ff ff       	call   c0001d2c <ld_dword>
c0002667:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000266a:	66 a1 80 24 02 c0    	mov    ax,ds:0xc0022480
c0002670:	88 1e                	mov    BYTE PTR [esi],bl
c0002672:	40                   	inc    eax
c0002673:	31 db                	xor    ebx,ebx
c0002675:	66 a3 80 24 02 c0    	mov    ds:0xc0022480,ax
c000267b:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c000267f:	eb 10                	jmp    c0002691 <mount_volume+0x2f9>
c0002681:	31 db                	xor    ebx,ebx
c0002683:	3d f5 0f 00 00       	cmp    eax,0xff5
c0002688:	0f 97 c3             	seta   bl
c000268b:	43                   	inc    ebx
c000268c:	e9 d6 fe ff ff       	jmp    c0002567 <mount_volume+0x1cf>
c0002691:	83 c4 2c             	add    esp,0x2c
c0002694:	89 d8                	mov    eax,ebx
c0002696:	5b                   	pop    ebx
c0002697:	5e                   	pop    esi
c0002698:	5f                   	pop    edi
c0002699:	5d                   	pop    ebp
c000269a:	c3                   	ret    

c000269b <put_fat>:
c000269b:	55                   	push   ebp
c000269c:	bd 02 00 00 00       	mov    ebp,0x2
c00026a1:	57                   	push   edi
c00026a2:	56                   	push   esi
c00026a3:	53                   	push   ebx
c00026a4:	83 ec 1c             	sub    esp,0x1c
c00026a7:	83 fa 01             	cmp    edx,0x1
c00026aa:	0f 86 31 01 00 00    	jbe    c00027e1 <put_fat+0x146>
c00026b0:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c00026b3:	0f 86 28 01 00 00    	jbe    c00027e1 <put_fat+0x146>
c00026b9:	89 c6                	mov    esi,eax
c00026bb:	89 cf                	mov    edi,ecx
c00026bd:	8a 00                	mov    al,BYTE PTR [eax]
c00026bf:	89 d3                	mov    ebx,edx
c00026c1:	3c 02                	cmp    al,0x2
c00026c3:	0f 84 ac 00 00 00    	je     c0002775 <put_fat+0xda>
c00026c9:	3c 03                	cmp    al,0x3
c00026cb:	0f 84 d1 00 00 00    	je     c00027a2 <put_fat+0x107>
c00026d1:	fe c8                	dec    al
c00026d3:	0f 85 08 01 00 00    	jne    c00027e1 <put_fat+0x146>
c00026d9:	89 d1                	mov    ecx,edx
c00026db:	89 f0                	mov    eax,esi
c00026dd:	d1 e9                	shr    ecx,1
c00026df:	01 d1                	add    ecx,edx
c00026e1:	89 ca                	mov    edx,ecx
c00026e3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00026e7:	c1 ea 09             	shr    edx,0x9
c00026ea:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00026ed:	e8 53 fb ff ff       	call   c0002245 <move_window>
c00026f2:	89 c5                	mov    ebp,eax
c00026f4:	85 c0                	test   eax,eax
c00026f6:	0f 85 e5 00 00 00    	jne    c00027e1 <put_fat+0x146>
c00026fc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002700:	8d 46 34             	lea    eax,[esi+0x34]
c0002703:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002707:	8d 41 01             	lea    eax,[ecx+0x1]
c000270a:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0002710:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002714:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002718:	89 f8                	mov    eax,edi
c000271a:	83 e3 01             	and    ebx,0x1
c000271d:	74 0c                	je     c000272b <put_fat+0x90>
c000271f:	8a 11                	mov    dl,BYTE PTR [ecx]
c0002721:	89 f8                	mov    eax,edi
c0002723:	83 e2 0f             	and    edx,0xf
c0002726:	c1 e0 04             	shl    eax,0x4
c0002729:	09 d0                	or     eax,edx
c000272b:	88 01                	mov    BYTE PTR [ecx],al
c000272d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002731:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002735:	c1 ea 09             	shr    edx,0x9
c0002738:	89 f0                	mov    eax,esi
c000273a:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000273d:	e8 03 fb ff ff       	call   c0002245 <move_window>
c0002742:	89 c5                	mov    ebp,eax
c0002744:	85 c0                	test   eax,eax
c0002746:	0f 85 95 00 00 00    	jne    c00027e1 <put_fat+0x146>
c000274c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002750:	25 ff 01 00 00       	and    eax,0x1ff
c0002755:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002759:	85 db                	test   ebx,ebx
c000275b:	74 07                	je     c0002764 <put_fat+0xc9>
c000275d:	c1 ef 04             	shr    edi,0x4
c0002760:	89 f9                	mov    ecx,edi
c0002762:	eb 0d                	jmp    c0002771 <put_fat+0xd6>
c0002764:	8a 08                	mov    cl,BYTE PTR [eax]
c0002766:	c1 ef 08             	shr    edi,0x8
c0002769:	83 e1 f0             	and    ecx,0xfffffff0
c000276c:	83 e7 0f             	and    edi,0xf
c000276f:	09 f9                	or     ecx,edi
c0002771:	88 08                	mov    BYTE PTR [eax],cl
c0002773:	eb 27                	jmp    c000279c <put_fat+0x101>
c0002775:	c1 ea 08             	shr    edx,0x8
c0002778:	89 f0                	mov    eax,esi
c000277a:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000277d:	e8 c3 fa ff ff       	call   c0002245 <move_window>
c0002782:	89 c5                	mov    ebp,eax
c0002784:	85 c0                	test   eax,eax
c0002786:	75 59                	jne    c00027e1 <put_fat+0x146>
c0002788:	01 db                	add    ebx,ebx
c000278a:	0f b7 d7             	movzx  edx,di
c000278d:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002793:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c0002797:	e8 a8 f5 ff ff       	call   c0001d44 <st_word>
c000279c:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c00027a0:	eb 3f                	jmp    c00027e1 <put_fat+0x146>
c00027a2:	c1 ea 07             	shr    edx,0x7
c00027a5:	89 f0                	mov    eax,esi
c00027a7:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00027aa:	e8 96 fa ff ff       	call   c0002245 <move_window>
c00027af:	89 c5                	mov    ebp,eax
c00027b1:	85 c0                	test   eax,eax
c00027b3:	75 2c                	jne    c00027e1 <put_fat+0x146>
c00027b5:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c00027bb:	c1 e3 02             	shl    ebx,0x2
c00027be:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c00027c4:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c00027c8:	89 d8                	mov    eax,ebx
c00027ca:	e8 5d f5 ff ff       	call   c0001d2c <ld_dword>
c00027cf:	25 00 00 00 f0       	and    eax,0xf0000000
c00027d4:	09 f8                	or     eax,edi
c00027d6:	89 c2                	mov    edx,eax
c00027d8:	89 d8                	mov    eax,ebx
c00027da:	e8 69 f5 ff ff       	call   c0001d48 <st_dword>
c00027df:	eb bb                	jmp    c000279c <put_fat+0x101>
c00027e1:	83 c4 1c             	add    esp,0x1c
c00027e4:	89 e8                	mov    eax,ebp
c00027e6:	5b                   	pop    ebx
c00027e7:	5e                   	pop    esi
c00027e8:	5f                   	pop    edi
c00027e9:	5d                   	pop    ebp
c00027ea:	c3                   	ret    

c00027eb <dir_clear>:
c00027eb:	55                   	push   ebp
c00027ec:	57                   	push   edi
c00027ed:	56                   	push   esi
c00027ee:	89 c6                	mov    esi,eax
c00027f0:	53                   	push   ebx
c00027f1:	83 ec 1c             	sub    esp,0x1c
c00027f4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00027f8:	e8 e5 f9 ff ff       	call   c00021e2 <sync_window>
c00027fd:	85 c0                	test   eax,eax
c00027ff:	0f 85 c0 00 00 00    	jne    c00028c5 <dir_clear+0xda>
c0002805:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002809:	89 f0                	mov    eax,esi
c000280b:	e8 55 f7 ff ff       	call   c0001f65 <clst2sect>
c0002810:	31 d2                	xor    edx,edx
c0002812:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c0002815:	89 c5                	mov    ebp,eax
c0002817:	b9 00 02 00 00       	mov    ecx,0x200
c000281c:	8d 46 34             	lea    eax,[esi+0x34]
c000281f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002823:	e8 38 f5 ff ff       	call   c0001d60 <mem_set>
c0002828:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000282c:	c1 e3 09             	shl    ebx,0x9
c000282f:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002835:	76 1b                	jbe    c0002852 <dir_clear+0x67>
c0002837:	bb 00 80 00 00       	mov    ebx,0x8000
c000283c:	eb 14                	jmp    c0002852 <dir_clear+0x67>
c000283e:	83 ec 0c             	sub    esp,0xc
c0002841:	53                   	push   ebx
c0002842:	e8 25 32 00 00       	call   c0005a6c <ff_memalloc>
c0002847:	83 c4 10             	add    esp,0x10
c000284a:	89 c7                	mov    edi,eax
c000284c:	85 c0                	test   eax,eax
c000284e:	75 7c                	jne    c00028cc <dir_clear+0xe1>
c0002850:	d1 eb                	shr    ebx,1
c0002852:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002858:	77 e4                	ja     c000283e <dir_clear+0x53>
c000285a:	31 db                	xor    ebx,ebx
c000285c:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002860:	39 d8                	cmp    eax,ebx
c0002862:	76 53                	jbe    c00028b7 <dir_clear+0xcc>
c0002864:	6a 01                	push   0x1
c0002866:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002869:	50                   	push   eax
c000286a:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000286e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0002872:	50                   	push   eax
c0002873:	e8 72 f4 ff ff       	call   c0001cea <disk_write>
c0002878:	83 c4 10             	add    esp,0x10
c000287b:	85 c0                	test   eax,eax
c000287d:	75 38                	jne    c00028b7 <dir_clear+0xcc>
c000287f:	43                   	inc    ebx
c0002880:	eb da                	jmp    c000285c <dir_clear+0x71>
c0002882:	52                   	push   edx
c0002883:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002886:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000288a:	50                   	push   eax
c000288b:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000288f:	57                   	push   edi
c0002890:	50                   	push   eax
c0002891:	e8 54 f4 ff ff       	call   c0001cea <disk_write>
c0002896:	83 c4 10             	add    esp,0x10
c0002899:	85 c0                	test   eax,eax
c000289b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000289f:	75 0a                	jne    c00028ab <dir_clear+0xc0>
c00028a1:	01 d3                	add    ebx,edx
c00028a3:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00028a7:	39 d8                	cmp    eax,ebx
c00028a9:	77 d7                	ja     c0002882 <dir_clear+0x97>
c00028ab:	83 ec 0c             	sub    esp,0xc
c00028ae:	57                   	push   edi
c00028af:	e8 d0 31 00 00       	call   c0005a84 <ff_memfree>
c00028b4:	83 c4 10             	add    esp,0x10
c00028b7:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00028bb:	39 d8                	cmp    eax,ebx
c00028bd:	0f 95 c0             	setne  al
c00028c0:	0f b6 c0             	movzx  eax,al
c00028c3:	eb 19                	jmp    c00028de <dir_clear+0xf3>
c00028c5:	b8 01 00 00 00       	mov    eax,0x1
c00028ca:	eb 12                	jmp    c00028de <dir_clear+0xf3>
c00028cc:	89 d9                	mov    ecx,ebx
c00028ce:	31 d2                	xor    edx,edx
c00028d0:	e8 8b f4 ff ff       	call   c0001d60 <mem_set>
c00028d5:	89 da                	mov    edx,ebx
c00028d7:	31 db                	xor    ebx,ebx
c00028d9:	c1 ea 09             	shr    edx,0x9
c00028dc:	eb c5                	jmp    c00028a3 <dir_clear+0xb8>
c00028de:	83 c4 1c             	add    esp,0x1c
c00028e1:	5b                   	pop    ebx
c00028e2:	5e                   	pop    esi
c00028e3:	5f                   	pop    edi
c00028e4:	5d                   	pop    ebp
c00028e5:	c3                   	ret    

c00028e6 <create_name>:
c00028e6:	55                   	push   ebp
c00028e7:	89 d5                	mov    ebp,edx
c00028e9:	57                   	push   edi
c00028ea:	89 c7                	mov    edi,eax
c00028ec:	56                   	push   esi
c00028ed:	31 f6                	xor    esi,esi
c00028ef:	53                   	push   ebx
c00028f0:	83 ec 3c             	sub    esp,0x3c
c00028f3:	8b 02                	mov    eax,DWORD PTR [edx]
c00028f5:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00028f9:	8b 07                	mov    eax,DWORD PTR [edi]
c00028fb:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00028fe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002902:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0002906:	e8 9b f4 ff ff       	call   c0001da6 <tchar2uni>
c000290b:	89 c3                	mov    ebx,eax
c000290d:	83 f8 ff             	cmp    eax,0xffffffff
c0002910:	75 0a                	jne    c000291c <create_name+0x36>
c0002912:	b8 06 00 00 00       	mov    eax,0x6
c0002917:	e9 9e 02 00 00       	jmp    c0002bba <create_name+0x2d4>
c000291c:	3d ff ff 00 00       	cmp    eax,0xffff
c0002921:	76 0c                	jbe    c000292f <create_name+0x49>
c0002923:	c1 e8 10             	shr    eax,0x10
c0002926:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000292a:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c000292e:	46                   	inc    esi
c000292f:	66 83 fb 1f          	cmp    bx,0x1f
c0002933:	76 4f                	jbe    c0002984 <create_name+0x9e>
c0002935:	66 83 fb 5c          	cmp    bx,0x5c
c0002939:	74 35                	je     c0002970 <create_name+0x8a>
c000293b:	66 83 fb 2f          	cmp    bx,0x2f
c000293f:	74 2f                	je     c0002970 <create_name+0x8a>
c0002941:	66 83 fb 7f          	cmp    bx,0x7f
c0002945:	77 11                	ja     c0002958 <create_name+0x72>
c0002947:	0f b7 d3             	movzx  edx,bx
c000294a:	b8 e2 d6 01 c0       	mov    eax,0xc001d6e2
c000294f:	e8 3a f4 ff ff       	call   c0001d8e <chk_chr>
c0002954:	85 c0                	test   eax,eax
c0002956:	75 ba                	jne    c0002912 <create_name+0x2c>
c0002958:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000295e:	77 b2                	ja     c0002912 <create_name+0x2c>
c0002960:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002964:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002968:	46                   	inc    esi
c0002969:	eb 97                	jmp    c0002902 <create_name+0x1c>
c000296b:	40                   	inc    eax
c000296c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002970:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002974:	8a 10                	mov    dl,BYTE PTR [eax]
c0002976:	80 fa 2f             	cmp    dl,0x2f
c0002979:	74 f0                	je     c000296b <create_name+0x85>
c000297b:	80 fa 5c             	cmp    dl,0x5c
c000297e:	74 eb                	je     c000296b <create_name+0x85>
c0002980:	31 db                	xor    ebx,ebx
c0002982:	eb 02                	jmp    c0002986 <create_name+0xa0>
c0002984:	b3 04                	mov    bl,0x4
c0002986:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000298a:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000298d:	85 f6                	test   esi,esi
c000298f:	74 18                	je     c00029a9 <create_name+0xc3>
c0002991:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002995:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c000299a:	66 83 f8 20          	cmp    ax,0x20
c000299e:	74 06                	je     c00029a6 <create_name+0xc0>
c00029a0:	66 83 f8 2e          	cmp    ax,0x2e
c00029a4:	75 03                	jne    c00029a9 <create_name+0xc3>
c00029a6:	4e                   	dec    esi
c00029a7:	eb e4                	jmp    c000298d <create_name+0xa7>
c00029a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00029ad:	31 ed                	xor    ebp,ebp
c00029af:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c00029b5:	85 f6                	test   esi,esi
c00029b7:	0f 84 55 ff ff ff    	je     c0002912 <create_name+0x2c>
c00029bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00029c1:	8d 55 01             	lea    edx,[ebp+0x1]
c00029c4:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c00029c8:	66 83 f8 20          	cmp    ax,0x20
c00029cc:	75 04                	jne    c00029d2 <create_name+0xec>
c00029ce:	89 d5                	mov    ebp,edx
c00029d0:	eb eb                	jmp    c00029bd <create_name+0xd7>
c00029d2:	85 ed                	test   ebp,ebp
c00029d4:	75 06                	jne    c00029dc <create_name+0xf6>
c00029d6:	66 83 f8 2e          	cmp    ax,0x2e
c00029da:	75 08                	jne    c00029e4 <create_name+0xfe>
c00029dc:	83 cb 03             	or     ebx,0x3
c00029df:	eb 03                	jmp    c00029e4 <create_name+0xfe>
c00029e1:	4e                   	dec    esi
c00029e2:	74 0c                	je     c00029f0 <create_name+0x10a>
c00029e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00029e8:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c00029ee:	75 f1                	jne    c00029e1 <create_name+0xfb>
c00029f0:	b9 0b 00 00 00       	mov    ecx,0xb
c00029f5:	8d 47 20             	lea    eax,[edi+0x20]
c00029f8:	ba 20 00 00 00       	mov    edx,0x20
c00029fd:	e8 5e f3 ff ff       	call   c0001d60 <mem_set>
c0002a02:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0002a0a:	31 c9                	xor    ecx,ecx
c0002a0c:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0002a11:	8d 45 01             	lea    eax,[ebp+0x1]
c0002a14:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002a18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002a1c:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0002a20:	66 85 ed             	test   bp,bp
c0002a23:	0f 84 30 01 00 00    	je     c0002b59 <create_name+0x273>
c0002a29:	66 83 fd 20          	cmp    bp,0x20
c0002a2d:	74 10                	je     c0002a3f <create_name+0x159>
c0002a2f:	66 83 fd 2e          	cmp    bp,0x2e
c0002a33:	75 13                	jne    c0002a48 <create_name+0x162>
c0002a35:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a39:	0f 84 6b 01 00 00    	je     c0002baa <create_name+0x2c4>
c0002a3f:	83 cb 03             	or     ebx,0x3
c0002a42:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0002a46:	eb c9                	jmp    c0002a11 <create_name+0x12b>
c0002a48:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0002a4c:	73 0b                	jae    c0002a59 <create_name+0x173>
c0002a4e:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a52:	75 47                	jne    c0002a9b <create_name+0x1b5>
c0002a54:	e9 51 01 00 00       	jmp    c0002baa <create_name+0x2c4>
c0002a59:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0002a5e:	75 10                	jne    c0002a70 <create_name+0x18a>
c0002a60:	83 cb 03             	or     ebx,0x3
c0002a63:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0002a6b:	e9 e9 00 00 00       	jmp    c0002b59 <create_name+0x273>
c0002a70:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a74:	74 0d                	je     c0002a83 <create_name+0x19d>
c0002a76:	83 cb 03             	or     ebx,0x3
c0002a79:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a7d:	0f 87 d6 00 00 00    	ja     c0002b59 <create_name+0x273>
c0002a83:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0002a88:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0002a8c:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0002a94:	b9 08 00 00 00       	mov    ecx,0x8
c0002a99:	eb a7                	jmp    c0002a42 <create_name+0x15c>
c0002a9b:	66 83 fd 7f          	cmp    bp,0x7f
c0002a9f:	76 68                	jbe    c0002b09 <create_name+0x223>
c0002aa1:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002aa5:	88 da                	mov    dl,bl
c0002aa7:	83 ca 02             	or     edx,0x2
c0002aaa:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0002aae:	50                   	push   eax
c0002aaf:	50                   	push   eax
c0002ab0:	68 b5 01 00 00       	push   0x1b5
c0002ab5:	55                   	push   ebp
c0002ab6:	e8 e1 2f 00 00       	call   c0005a9c <ff_uni2oem>
c0002abb:	83 c4 10             	add    esp,0x10
c0002abe:	89 c5                	mov    ebp,eax
c0002ac0:	a8 80                	test   al,0x80
c0002ac2:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0002ac6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0002aca:	74 0c                	je     c0002ad8 <create_name+0x1f2>
c0002acc:	83 e5 7f             	and    ebp,0x7f
c0002acf:	0f b6 ad a0 d7 01 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffe2860]
c0002ad6:	eb 2a                	jmp    c0002b02 <create_name+0x21c>
c0002ad8:	66 3d ff 00          	cmp    ax,0xff
c0002adc:	76 24                	jbe    c0002b02 <create_name+0x21c>
c0002ade:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002ae2:	48                   	dec    eax
c0002ae3:	39 c8                	cmp    eax,ecx
c0002ae5:	77 0c                	ja     c0002af3 <create_name+0x20d>
c0002ae7:	83 cb 03             	or     ebx,0x3
c0002aea:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002aee:	e9 4f ff ff ff       	jmp    c0002a42 <create_name+0x15c>
c0002af3:	89 e8                	mov    eax,ebp
c0002af5:	88 d3                	mov    bl,dl
c0002af7:	66 c1 e8 08          	shr    ax,0x8
c0002afb:	88 44 0f 20          	mov    BYTE PTR [edi+ecx*1+0x20],al
c0002aff:	41                   	inc    ecx
c0002b00:	eb 4b                	jmp    c0002b4d <create_name+0x267>
c0002b02:	88 d3                	mov    bl,dl
c0002b04:	66 85 ed             	test   bp,bp
c0002b07:	74 19                	je     c0002b22 <create_name+0x23c>
c0002b09:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002b0d:	0f b7 d5             	movzx  edx,bp
c0002b10:	b8 eb d6 01 c0       	mov    eax,0xc001d6eb
c0002b15:	e8 74 f2 ff ff       	call   c0001d8e <chk_chr>
c0002b1a:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002b1e:	85 c0                	test   eax,eax
c0002b20:	74 0a                	je     c0002b2c <create_name+0x246>
c0002b22:	83 cb 03             	or     ebx,0x3
c0002b25:	bd 5f 00 00 00       	mov    ebp,0x5f
c0002b2a:	eb 21                	jmp    c0002b4d <create_name+0x267>
c0002b2c:	8d 45 bf             	lea    eax,[ebp-0x41]
c0002b2f:	66 83 f8 19          	cmp    ax,0x19
c0002b33:	77 07                	ja     c0002b3c <create_name+0x256>
c0002b35:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0002b3a:	eb 11                	jmp    c0002b4d <create_name+0x267>
c0002b3c:	8d 45 9f             	lea    eax,[ebp-0x61]
c0002b3f:	66 83 f8 19          	cmp    ax,0x19
c0002b43:	77 08                	ja     c0002b4d <create_name+0x267>
c0002b45:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0002b4a:	83 ed 20             	sub    ebp,0x20
c0002b4d:	89 e8                	mov    eax,ebp
c0002b4f:	88 44 0f 20          	mov    BYTE PTR [edi+ecx*1+0x20],al
c0002b53:	41                   	inc    ecx
c0002b54:	e9 e9 fe ff ff       	jmp    c0002a42 <create_name+0x15c>
c0002b59:	80 7f 20 e5          	cmp    BYTE PTR [edi+0x20],0xe5
c0002b5d:	75 04                	jne    c0002b63 <create_name+0x27d>
c0002b5f:	c6 47 20 05          	mov    BYTE PTR [edi+0x20],0x5
c0002b63:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0002b68:	75 05                	jne    c0002b6f <create_name+0x289>
c0002b6a:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0002b6f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0002b73:	83 e0 0c             	and    eax,0xc
c0002b76:	3c 0c                	cmp    al,0xc
c0002b78:	74 0b                	je     c0002b85 <create_name+0x29f>
c0002b7a:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0002b7e:	83 e0 03             	and    eax,0x3
c0002b81:	3c 03                	cmp    al,0x3
c0002b83:	75 05                	jne    c0002b8a <create_name+0x2a4>
c0002b85:	83 cb 02             	or     ebx,0x2
c0002b88:	eb 19                	jmp    c0002ba3 <create_name+0x2bd>
c0002b8a:	f6 c3 02             	test   bl,0x2
c0002b8d:	75 14                	jne    c0002ba3 <create_name+0x2bd>
c0002b8f:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0002b94:	74 03                	je     c0002b99 <create_name+0x2b3>
c0002b96:	83 cb 10             	or     ebx,0x10
c0002b99:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0002b9e:	74 03                	je     c0002ba3 <create_name+0x2bd>
c0002ba0:	83 cb 08             	or     ebx,0x8
c0002ba3:	88 5f 2b             	mov    BYTE PTR [edi+0x2b],bl
c0002ba6:	31 c0                	xor    eax,eax
c0002ba8:	eb 10                	jmp    c0002bba <create_name+0x2d4>
c0002baa:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0002baf:	0f 85 ce fe ff ff    	jne    c0002a83 <create_name+0x19d>
c0002bb5:	e9 a6 fe ff ff       	jmp    c0002a60 <create_name+0x17a>
c0002bba:	83 c4 3c             	add    esp,0x3c
c0002bbd:	5b                   	pop    ebx
c0002bbe:	5e                   	pop    esi
c0002bbf:	5f                   	pop    edi
c0002bc0:	5d                   	pop    ebp
c0002bc1:	c3                   	ret    

c0002bc2 <cmp_lfn>:
c0002bc2:	55                   	push   ebp
c0002bc3:	57                   	push   edi
c0002bc4:	89 d7                	mov    edi,edx
c0002bc6:	56                   	push   esi
c0002bc7:	53                   	push   ebx
c0002bc8:	83 ec 1c             	sub    esp,0x1c
c0002bcb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002bcf:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002bd2:	e8 48 f1 ff ff       	call   c0001d1f <ld_word>
c0002bd7:	66 85 c0             	test   ax,ax
c0002bda:	74 07                	je     c0002be3 <cmp_lfn+0x21>
c0002bdc:	31 c0                	xor    eax,eax
c0002bde:	e9 9a 00 00 00       	jmp    c0002c7d <cmp_lfn+0xbb>
c0002be3:	8a 1f                	mov    bl,BYTE PTR [edi]
c0002be5:	bd 01 00 00 00       	mov    ebp,0x1
c0002bea:	83 e3 3f             	and    ebx,0x3f
c0002bed:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0002bf5:	4b                   	dec    ebx
c0002bf6:	6b db 0d             	imul   ebx,ebx,0xd
c0002bf9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002bfd:	0f b6 80 20 d8 01 c0 	movzx  eax,BYTE PTR [eax-0x3ffe27e0]
c0002c04:	01 f8                	add    eax,edi
c0002c06:	e8 14 f1 ff ff       	call   c0001d1f <ld_word>
c0002c0b:	66 85 ed             	test   bp,bp
c0002c0e:	89 c6                	mov    esi,eax
c0002c10:	74 3c                	je     c0002c4e <cmp_lfn+0x8c>
c0002c12:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002c18:	77 c2                	ja     c0002bdc <cmp_lfn+0x1a>
c0002c1a:	83 ec 0c             	sub    esp,0xc
c0002c1d:	0f b7 c0             	movzx  eax,ax
c0002c20:	50                   	push   eax
c0002c21:	e8 8e 2f 00 00       	call   c0005bb4 <ff_wtoupper>
c0002c26:	89 c5                	mov    ebp,eax
c0002c28:	8d 43 01             	lea    eax,[ebx+0x1]
c0002c2b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002c2f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002c33:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002c37:	89 04 24             	mov    DWORD PTR [esp],eax
c0002c3a:	e8 75 2f 00 00       	call   c0005bb4 <ff_wtoupper>
c0002c3f:	83 c4 10             	add    esp,0x10
c0002c42:	39 c5                	cmp    ebp,eax
c0002c44:	75 96                	jne    c0002bdc <cmp_lfn+0x1a>
c0002c46:	89 f5                	mov    ebp,esi
c0002c48:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0002c4c:	eb 04                	jmp    c0002c52 <cmp_lfn+0x90>
c0002c4e:	66 46                	inc    si
c0002c50:	75 8a                	jne    c0002bdc <cmp_lfn+0x1a>
c0002c52:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0002c56:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0002c5b:	75 9c                	jne    c0002bf9 <cmp_lfn+0x37>
c0002c5d:	f6 07 40             	test   BYTE PTR [edi],0x40
c0002c60:	74 16                	je     c0002c78 <cmp_lfn+0xb6>
c0002c62:	66 85 ed             	test   bp,bp
c0002c65:	74 11                	je     c0002c78 <cmp_lfn+0xb6>
c0002c67:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c6b:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002c70:	0f 94 c0             	sete   al
c0002c73:	0f b6 c0             	movzx  eax,al
c0002c76:	eb 05                	jmp    c0002c7d <cmp_lfn+0xbb>
c0002c78:	b8 01 00 00 00       	mov    eax,0x1
c0002c7d:	83 c4 1c             	add    esp,0x1c
c0002c80:	5b                   	pop    ebx
c0002c81:	5e                   	pop    esi
c0002c82:	5f                   	pop    edi
c0002c83:	5d                   	pop    ebp
c0002c84:	c3                   	ret    

c0002c85 <sync_fs>:
c0002c85:	56                   	push   esi
c0002c86:	53                   	push   ebx
c0002c87:	53                   	push   ebx
c0002c88:	89 c3                	mov    ebx,eax
c0002c8a:	e8 53 f5 ff ff       	call   c00021e2 <sync_window>
c0002c8f:	85 c0                	test   eax,eax
c0002c91:	0f 85 9a 00 00 00    	jne    c0002d31 <sync_fs+0xac>
c0002c97:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002c9a:	75 7b                	jne    c0002d17 <sync_fs+0x92>
c0002c9c:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002ca0:	75 75                	jne    c0002d17 <sync_fs+0x92>
c0002ca2:	b9 00 02 00 00       	mov    ecx,0x200
c0002ca7:	8d 73 34             	lea    esi,[ebx+0x34]
c0002caa:	31 d2                	xor    edx,edx
c0002cac:	89 f0                	mov    eax,esi
c0002cae:	e8 ad f0 ff ff       	call   c0001d60 <mem_set>
c0002cb3:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002cb9:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002cbe:	e8 81 f0 ff ff       	call   c0001d44 <st_word>
c0002cc3:	ba 52 52 61 41       	mov    edx,0x41615252
c0002cc8:	89 f0                	mov    eax,esi
c0002cca:	e8 79 f0 ff ff       	call   c0001d48 <st_dword>
c0002ccf:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002cd5:	ba 72 72 41 61       	mov    edx,0x61417272
c0002cda:	e8 69 f0 ff ff       	call   c0001d48 <st_dword>
c0002cdf:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002ce2:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002ce8:	e8 5b f0 ff ff       	call   c0001d48 <st_dword>
c0002ced:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002cf0:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002cf6:	e8 4d f0 ff ff       	call   c0001d48 <st_dword>
c0002cfb:	6a 01                	push   0x1
c0002cfd:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0002d00:	40                   	inc    eax
c0002d01:	50                   	push   eax
c0002d02:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002d05:	56                   	push   esi
c0002d06:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002d0a:	50                   	push   eax
c0002d0b:	e8 da ef ff ff       	call   c0001cea <disk_write>
c0002d10:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0002d14:	83 c4 10             	add    esp,0x10
c0002d17:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002d1b:	51                   	push   ecx
c0002d1c:	6a 00                	push   0x0
c0002d1e:	6a 00                	push   0x0
c0002d20:	50                   	push   eax
c0002d21:	e8 da ef ff ff       	call   c0001d00 <disk_ioctl>
c0002d26:	83 c4 10             	add    esp,0x10
c0002d29:	85 c0                	test   eax,eax
c0002d2b:	0f 95 c0             	setne  al
c0002d2e:	0f b6 c0             	movzx  eax,al
c0002d31:	5a                   	pop    edx
c0002d32:	5b                   	pop    ebx
c0002d33:	5e                   	pop    esi
c0002d34:	c3                   	ret    

c0002d35 <create_partition>:
c0002d35:	55                   	push   ebp
c0002d36:	0f b6 c0             	movzx  eax,al
c0002d39:	57                   	push   edi
c0002d3a:	56                   	push   esi
c0002d3b:	53                   	push   ebx
c0002d3c:	83 ec 40             	sub    esp,0x40
c0002d3f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002d43:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0002d47:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002d4b:	8d 44 24 30          	lea    eax,[esp+0x30]
c0002d4f:	50                   	push   eax
c0002d50:	6a 01                	push   0x1
c0002d52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0002d56:	e8 a5 ef ff ff       	call   c0001d00 <disk_ioctl>
c0002d5b:	83 c4 10             	add    esp,0x10
c0002d5e:	85 c0                	test   eax,eax
c0002d60:	0f 85 69 01 00 00    	jne    c0002ecf <create_partition+0x19a>
c0002d66:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002d6a:	b9 05 00 00 00       	mov    ecx,0x5
c0002d6f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002d73:	c6 44 24 0b 08       	mov    BYTE PTR [esp+0xb],0x8
c0002d78:	31 d2                	xor    edx,edx
c0002d7a:	0f b6 5c 24 0b       	movzx  ebx,BYTE PTR [esp+0xb]
c0002d7f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002d83:	f7 f3                	div    ebx
c0002d85:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0002d8a:	76 0c                	jbe    c0002d98 <create_partition+0x63>
c0002d8c:	d0 64 24 0b          	shl    BYTE PTR [esp+0xb],1
c0002d90:	49                   	dec    ecx
c0002d91:	75 e5                	jne    c0002d78 <create_partition+0x43>
c0002d93:	c6 44 24 0b ff       	mov    BYTE PTR [esp+0xb],0xff
c0002d98:	b9 00 02 00 00       	mov    ecx,0x200
c0002d9d:	31 d2                	xor    edx,edx
c0002d9f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002da3:	e8 b8 ef ff ff       	call   c0001d60 <mem_set>
c0002da8:	b9 64 00 00 00       	mov    ecx,0x64
c0002dad:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002db1:	31 d2                	xor    edx,edx
c0002db3:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002dbb:	f7 f1                	div    ecx
c0002dbd:	b9 3f 00 00 00       	mov    ecx,0x3f
c0002dc2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002dc6:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002dca:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c0002dd0:	85 c9                	test   ecx,ecx
c0002dd2:	75 34                	jne    c0002e08 <create_partition+0xd3>
c0002dd4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002dd8:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002ddd:	05 fe 01 00 00       	add    eax,0x1fe
c0002de2:	e8 5d ef ff ff       	call   c0001d44 <st_word>
c0002de7:	6a 01                	push   0x1
c0002de9:	6a 00                	push   0x0
c0002deb:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0002def:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0002df3:	e8 f2 ee ff ff       	call   c0001cea <disk_write>
c0002df8:	83 c4 10             	add    esp,0x10
c0002dfb:	85 c0                	test   eax,eax
c0002dfd:	0f 95 c0             	setne  al
c0002e00:	0f b6 c0             	movzx  eax,al
c0002e03:	e9 cc 00 00 00       	jmp    c0002ed4 <create_partition+0x19f>
c0002e08:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c0002e0c:	76 c6                	jbe    c0002dd4 <create_partition+0x9f>
c0002e0e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002e12:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0002e16:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c0002e19:	83 fe 64             	cmp    esi,0x64
c0002e1c:	77 0d                	ja     c0002e2b <create_partition+0xf6>
c0002e1e:	74 07                	je     c0002e27 <create_partition+0xf2>
c0002e20:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c0002e25:	eb 04                	jmp    c0002e2b <create_partition+0xf6>
c0002e27:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002e2b:	31 c0                	xor    eax,eax
c0002e2d:	89 f2                	mov    edx,esi
c0002e2f:	01 ca                	add    edx,ecx
c0002e31:	0f 92 c0             	setb   al
c0002e34:	3b 54 24 04          	cmp    edx,DWORD PTR [esp+0x4]
c0002e38:	77 04                	ja     c0002e3e <create_partition+0x109>
c0002e3a:	85 c0                	test   eax,eax
c0002e3c:	74 08                	je     c0002e46 <create_partition+0x111>
c0002e3e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002e42:	29 ce                	sub    esi,ecx
c0002e44:	eb 04                	jmp    c0002e4a <create_partition+0x115>
c0002e46:	85 f6                	test   esi,esi
c0002e48:	74 8a                	je     c0002dd4 <create_partition+0x9f>
c0002e4a:	89 ca                	mov    edx,ecx
c0002e4c:	89 d8                	mov    eax,ebx
c0002e4e:	bd 3f 00 00 00       	mov    ebp,0x3f
c0002e53:	e8 f0 ee ff ff       	call   c0001d48 <st_dword>
c0002e58:	8d 43 04             	lea    eax,[ebx+0x4]
c0002e5b:	89 f2                	mov    edx,esi
c0002e5d:	83 c3 10             	add    ebx,0x10
c0002e60:	e8 e3 ee ff ff       	call   c0001d48 <st_dword>
c0002e65:	0f b6 7c 24 0b       	movzx  edi,BYTE PTR [esp+0xb]
c0002e6a:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0002e6e:	31 d2                	xor    edx,edx
c0002e70:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c0002e73:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0002e77:	89 c8                	mov    eax,ecx
c0002e79:	01 f1                	add    ecx,esi
c0002e7b:	f7 f5                	div    ebp
c0002e7d:	89 d5                	mov    ebp,edx
c0002e7f:	31 d2                	xor    edx,edx
c0002e81:	45                   	inc    ebp
c0002e82:	f7 f7                	div    edi
c0002e84:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c0002e87:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c0002e8a:	89 c2                	mov    edx,eax
c0002e8c:	8d 41 ff             	lea    eax,[ecx-0x1]
c0002e8f:	c1 ea 02             	shr    edx,0x2
c0002e92:	83 e2 c0             	and    edx,0xffffffc0
c0002e95:	09 ea                	or     edx,ebp
c0002e97:	bd 3f 00 00 00       	mov    ebp,0x3f
c0002e9c:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c0002e9f:	31 d2                	xor    edx,edx
c0002ea1:	f7 f5                	div    ebp
c0002ea3:	89 d6                	mov    esi,edx
c0002ea5:	31 d2                	xor    edx,edx
c0002ea7:	46                   	inc    esi
c0002ea8:	f7 f7                	div    edi
c0002eaa:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c0002ead:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c0002eb0:	89 c7                	mov    edi,eax
c0002eb2:	c1 ef 02             	shr    edi,0x2
c0002eb5:	83 e7 c0             	and    edi,0xffffffc0
c0002eb8:	09 fe                	or     esi,edi
c0002eba:	89 f2                	mov    edx,esi
c0002ebc:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c0002ebf:	83 7c 24 0c 04       	cmp    DWORD PTR [esp+0xc],0x4
c0002ec4:	0f 85 06 ff ff ff    	jne    c0002dd0 <create_partition+0x9b>
c0002eca:	e9 05 ff ff ff       	jmp    c0002dd4 <create_partition+0x9f>
c0002ecf:	b8 01 00 00 00       	mov    eax,0x1
c0002ed4:	83 c4 3c             	add    esp,0x3c
c0002ed7:	5b                   	pop    ebx
c0002ed8:	5e                   	pop    esi
c0002ed9:	5f                   	pop    edi
c0002eda:	5d                   	pop    ebp
c0002edb:	c3                   	ret    

c0002edc <get_fileinfo>:
c0002edc:	55                   	push   ebp
c0002edd:	57                   	push   edi
c0002ede:	56                   	push   esi
c0002edf:	53                   	push   ebx
c0002ee0:	83 ec 1c             	sub    esp,0x1c
c0002ee3:	8b 30                	mov    esi,DWORD PTR [eax]
c0002ee5:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c0002ee9:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0002eed:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c0002ef1:	0f 84 c1 01 00 00    	je     c00030b8 <get_fileinfo+0x1dc>
c0002ef7:	89 d3                	mov    ebx,edx
c0002ef9:	89 c6                	mov    esi,eax
c0002efb:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c0002eff:	74 6a                	je     c0002f6b <get_fileinfo+0x8f>
c0002f01:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002f09:	31 ed                	xor    ebp,ebp
c0002f0b:	31 ff                	xor    edi,edi
c0002f0d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002f11:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f15:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0002f18:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0002f1c:	66 85 d2             	test   dx,dx
c0002f1f:	74 3e                	je     c0002f5f <get_fileinfo+0x83>
c0002f21:	66 85 ed             	test   bp,bp
c0002f24:	75 0c                	jne    c0002f32 <get_fileinfo+0x56>
c0002f26:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0002f2c:	66 3d ff 07          	cmp    ax,0x7ff
c0002f30:	76 22                	jbe    c0002f54 <get_fileinfo+0x78>
c0002f32:	b9 ff 00 00 00       	mov    ecx,0xff
c0002f37:	89 e8                	mov    eax,ebp
c0002f39:	29 f9                	sub    ecx,edi
c0002f3b:	c1 e0 10             	shl    eax,0x10
c0002f3e:	09 d0                	or     eax,edx
c0002f40:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c0002f44:	e8 23 ef ff ff       	call   c0001e6c <put_utf>
c0002f49:	84 c0                	test   al,al
c0002f4b:	74 10                	je     c0002f5d <get_fileinfo+0x81>
c0002f4d:	0f b6 c0             	movzx  eax,al
c0002f50:	31 d2                	xor    edx,edx
c0002f52:	01 c7                	add    edi,eax
c0002f54:	83 44 24 08 02       	add    DWORD PTR [esp+0x8],0x2
c0002f59:	89 d5                	mov    ebp,edx
c0002f5b:	eb b0                	jmp    c0002f0d <get_fileinfo+0x31>
c0002f5d:	31 ff                	xor    edi,edi
c0002f5f:	66 85 ed             	test   bp,bp
c0002f62:	74 02                	je     c0002f66 <get_fileinfo+0x8a>
c0002f64:	31 ff                	xor    edi,edi
c0002f66:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c0002f6b:	31 ff                	xor    edi,edi
c0002f6d:	31 c9                	xor    ecx,ecx
c0002f6f:	83 f9 0a             	cmp    ecx,0xa
c0002f72:	0f 87 ad 00 00 00    	ja     c0003025 <get_fileinfo+0x149>
c0002f78:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0002f7b:	8d 69 01             	lea    ebp,[ecx+0x1]
c0002f7e:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0002f82:	66 83 fa 20          	cmp    dx,0x20
c0002f86:	0f 84 92 00 00 00    	je     c000301e <get_fileinfo+0x142>
c0002f8c:	66 83 fa 05          	cmp    dx,0x5
c0002f90:	75 05                	jne    c0002f97 <get_fileinfo+0xbb>
c0002f92:	ba e5 00 00 00       	mov    edx,0xe5
c0002f97:	83 ff 0b             	cmp    edi,0xb
c0002f9a:	77 0b                	ja     c0002fa7 <get_fileinfo+0xcb>
c0002f9c:	83 fd 09             	cmp    ebp,0x9
c0002f9f:	75 06                	jne    c0002fa7 <get_fileinfo+0xcb>
c0002fa1:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c0002fa6:	47                   	inc    edi
c0002fa7:	0f b7 c2             	movzx  eax,dx
c0002faa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002fae:	e8 ed ed ff ff       	call   c0001da0 <dbc_1st>
c0002fb3:	85 c0                	test   eax,eax
c0002fb5:	74 2f                	je     c0002fe6 <get_fileinfo+0x10a>
c0002fb7:	83 fd 08             	cmp    ebp,0x8
c0002fba:	74 2a                	je     c0002fe6 <get_fileinfo+0x10a>
c0002fbc:	83 fd 0b             	cmp    ebp,0xb
c0002fbf:	74 25                	je     c0002fe6 <get_fileinfo+0x10a>
c0002fc1:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0002fc4:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0002fc8:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0002fcc:	e8 d2 ed ff ff       	call   c0001da3 <dbc_2nd>
c0002fd1:	85 c0                	test   eax,eax
c0002fd3:	74 11                	je     c0002fe6 <get_fileinfo+0x10a>
c0002fd5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002fd9:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0002fde:	c1 e2 08             	shl    edx,0x8
c0002fe1:	8d 69 02             	lea    ebp,[ecx+0x2]
c0002fe4:	09 c2                	or     edx,eax
c0002fe6:	0f b7 d2             	movzx  edx,dx
c0002fe9:	50                   	push   eax
c0002fea:	50                   	push   eax
c0002feb:	68 b5 01 00 00       	push   0x1b5
c0002ff0:	52                   	push   edx
c0002ff1:	e8 46 2b 00 00       	call   c0005b3c <ff_oem2uni>
c0002ff6:	83 c4 10             	add    esp,0x10
c0002ff9:	66 85 c0             	test   ax,ax
c0002ffc:	75 04                	jne    c0003002 <get_fileinfo+0x126>
c0002ffe:	31 ff                	xor    edi,edi
c0003000:	eb 23                	jmp    c0003025 <get_fileinfo+0x149>
c0003002:	b9 0c 00 00 00       	mov    ecx,0xc
c0003007:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c000300b:	29 f9                	sub    ecx,edi
c000300d:	0f b7 c0             	movzx  eax,ax
c0003010:	e8 57 ee ff ff       	call   c0001e6c <put_utf>
c0003015:	84 c0                	test   al,al
c0003017:	74 e5                	je     c0002ffe <get_fileinfo+0x122>
c0003019:	0f b6 c0             	movzx  eax,al
c000301c:	01 c7                	add    edi,eax
c000301e:	89 e9                	mov    ecx,ebp
c0003020:	e9 4a ff ff ff       	jmp    c0002f6f <get_fileinfo+0x93>
c0003025:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c000302a:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c000302e:	75 54                	jne    c0003084 <get_fileinfo+0x1a8>
c0003030:	85 ff                	test   edi,edi
c0003032:	75 0b                	jne    c000303f <get_fileinfo+0x163>
c0003034:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c0003038:	ba 01 00 00 00       	mov    edx,0x1
c000303d:	eb 33                	jmp    c0003072 <get_fileinfo+0x196>
c000303f:	b1 08                	mov    cl,0x8
c0003041:	31 d2                	xor    edx,edx
c0003043:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c0003049:	84 c0                	test   al,al
c000304b:	74 25                	je     c0003072 <get_fileinfo+0x196>
c000304d:	66 83 f8 2e          	cmp    ax,0x2e
c0003051:	74 16                	je     c0003069 <get_fileinfo+0x18d>
c0003053:	8d 78 bf             	lea    edi,[eax-0x41]
c0003056:	66 83 ff 19          	cmp    di,0x19
c000305a:	77 0f                	ja     c000306b <get_fileinfo+0x18f>
c000305c:	8b 7e 1c             	mov    edi,DWORD PTR [esi+0x1c]
c000305f:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0003062:	74 07                	je     c000306b <get_fileinfo+0x18f>
c0003064:	83 c0 20             	add    eax,0x20
c0003067:	eb 02                	jmp    c000306b <get_fileinfo+0x18f>
c0003069:	b1 10                	mov    cl,0x10
c000306b:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c000306f:	42                   	inc    edx
c0003070:	eb d1                	jmp    c0003043 <get_fileinfo+0x167>
c0003072:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c0003077:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000307a:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c000307e:	75 04                	jne    c0003084 <get_fileinfo+0x1a8>
c0003080:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c0003084:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003087:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c000308a:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c000308d:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003090:	83 c0 1c             	add    eax,0x1c
c0003093:	e8 94 ec ff ff       	call   c0001d2c <ld_dword>
c0003098:	89 03                	mov    DWORD PTR [ebx],eax
c000309a:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000309d:	83 c0 16             	add    eax,0x16
c00030a0:	e8 7a ec ff ff       	call   c0001d1f <ld_word>
c00030a5:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c00030a9:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030ac:	83 c0 18             	add    eax,0x18
c00030af:	e8 6b ec ff ff       	call   c0001d1f <ld_word>
c00030b4:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00030b8:	83 c4 1c             	add    esp,0x1c
c00030bb:	5b                   	pop    ebx
c00030bc:	5e                   	pop    esi
c00030bd:	5f                   	pop    edi
c00030be:	5d                   	pop    ebp
c00030bf:	c3                   	ret    

c00030c0 <ld_clust.isra.0>:
c00030c0:	56                   	push   esi
c00030c1:	89 c6                	mov    esi,eax
c00030c3:	53                   	push   ebx
c00030c4:	8d 42 1a             	lea    eax,[edx+0x1a]
c00030c7:	89 d3                	mov    ebx,edx
c00030c9:	e8 51 ec ff ff       	call   c0001d1f <ld_word>
c00030ce:	0f b7 c8             	movzx  ecx,ax
c00030d1:	89 f0                	mov    eax,esi
c00030d3:	3c 03                	cmp    al,0x3
c00030d5:	75 0d                	jne    c00030e4 <ld_clust.isra.0+0x24>
c00030d7:	8d 43 14             	lea    eax,[ebx+0x14]
c00030da:	e8 40 ec ff ff       	call   c0001d1f <ld_word>
c00030df:	c1 e0 10             	shl    eax,0x10
c00030e2:	09 c1                	or     ecx,eax
c00030e4:	89 c8                	mov    eax,ecx
c00030e6:	5b                   	pop    ebx
c00030e7:	5e                   	pop    esi
c00030e8:	c3                   	ret    

c00030e9 <st_clust.isra.1>:
c00030e9:	56                   	push   esi
c00030ea:	89 c6                	mov    esi,eax
c00030ec:	53                   	push   ebx
c00030ed:	89 d3                	mov    ebx,edx
c00030ef:	0f b7 d1             	movzx  edx,cx
c00030f2:	8d 43 1a             	lea    eax,[ebx+0x1a]
c00030f5:	e8 4a ec ff ff       	call   c0001d44 <st_word>
c00030fa:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c00030fd:	75 0f                	jne    c000310e <st_clust.isra.1+0x25>
c00030ff:	c1 e9 10             	shr    ecx,0x10
c0003102:	8d 43 14             	lea    eax,[ebx+0x14]
c0003105:	89 ca                	mov    edx,ecx
c0003107:	5b                   	pop    ebx
c0003108:	5e                   	pop    esi
c0003109:	e9 36 ec ff ff       	jmp    c0001d44 <st_word>
c000310e:	5b                   	pop    ebx
c000310f:	5e                   	pop    esi
c0003110:	c3                   	ret    

c0003111 <get_fat.isra.2>:
c0003111:	b9 01 00 00 00       	mov    ecx,0x1
c0003116:	83 fa 01             	cmp    edx,0x1
c0003119:	0f 86 f1 00 00 00    	jbe    c0003210 <get_fat.isra.2+0xff>
c000311f:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c0003122:	0f 83 e8 00 00 00    	jae    c0003210 <get_fat.isra.2+0xff>
c0003128:	55                   	push   ebp
c0003129:	57                   	push   edi
c000312a:	89 c7                	mov    edi,eax
c000312c:	56                   	push   esi
c000312d:	89 d6                	mov    esi,edx
c000312f:	53                   	push   ebx
c0003130:	83 ec 0c             	sub    esp,0xc
c0003133:	8a 00                	mov    al,BYTE PTR [eax]
c0003135:	3c 02                	cmp    al,0x2
c0003137:	74 78                	je     c00031b1 <get_fat.isra.2+0xa0>
c0003139:	3c 03                	cmp    al,0x3
c000313b:	0f 84 97 00 00 00    	je     c00031d8 <get_fat.isra.2+0xc7>
c0003141:	fe c8                	dec    al
c0003143:	0f 85 bd 00 00 00    	jne    c0003206 <get_fat.isra.2+0xf5>
c0003149:	89 d3                	mov    ebx,edx
c000314b:	89 f8                	mov    eax,edi
c000314d:	d1 eb                	shr    ebx,1
c000314f:	01 d3                	add    ebx,edx
c0003151:	89 da                	mov    edx,ebx
c0003153:	c1 ea 09             	shr    edx,0x9
c0003156:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0003159:	e8 e7 f0 ff ff       	call   c0002245 <move_window>
c000315e:	85 c0                	test   eax,eax
c0003160:	74 08                	je     c000316a <get_fat.isra.2+0x59>
c0003162:	83 c9 ff             	or     ecx,0xffffffff
c0003165:	e9 9c 00 00 00       	jmp    c0003206 <get_fat.isra.2+0xf5>
c000316a:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000316d:	89 f8                	mov    eax,edi
c000316f:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0003175:	89 ea                	mov    edx,ebp
c0003177:	8a 5c 1f 34          	mov    bl,BYTE PTR [edi+ebx*1+0x34]
c000317b:	c1 ea 09             	shr    edx,0x9
c000317e:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0003181:	e8 bf f0 ff ff       	call   c0002245 <move_window>
c0003186:	85 c0                	test   eax,eax
c0003188:	75 d8                	jne    c0003162 <get_fat.isra.2+0x51>
c000318a:	0f b6 c3             	movzx  eax,bl
c000318d:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0003193:	0f b6 5c 2f 34       	movzx  ebx,BYTE PTR [edi+ebp*1+0x34]
c0003198:	c1 e3 08             	shl    ebx,0x8
c000319b:	09 c3                	or     ebx,eax
c000319d:	89 d9                	mov    ecx,ebx
c000319f:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c00031a5:	83 e6 01             	and    esi,0x1
c00031a8:	74 5c                	je     c0003206 <get_fat.isra.2+0xf5>
c00031aa:	89 d9                	mov    ecx,ebx
c00031ac:	c1 e9 04             	shr    ecx,0x4
c00031af:	eb 55                	jmp    c0003206 <get_fat.isra.2+0xf5>
c00031b1:	c1 ea 08             	shr    edx,0x8
c00031b4:	89 f8                	mov    eax,edi
c00031b6:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00031b9:	e8 87 f0 ff ff       	call   c0002245 <move_window>
c00031be:	85 c0                	test   eax,eax
c00031c0:	75 a0                	jne    c0003162 <get_fat.isra.2+0x51>
c00031c2:	01 f6                	add    esi,esi
c00031c4:	81 e6 fe 01 00 00    	and    esi,0x1fe
c00031ca:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00031ce:	e8 4c eb ff ff       	call   c0001d1f <ld_word>
c00031d3:	0f b7 c8             	movzx  ecx,ax
c00031d6:	eb 2e                	jmp    c0003206 <get_fat.isra.2+0xf5>
c00031d8:	c1 ea 07             	shr    edx,0x7
c00031db:	89 f8                	mov    eax,edi
c00031dd:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00031e0:	e8 60 f0 ff ff       	call   c0002245 <move_window>
c00031e5:	85 c0                	test   eax,eax
c00031e7:	0f 85 75 ff ff ff    	jne    c0003162 <get_fat.isra.2+0x51>
c00031ed:	c1 e6 02             	shl    esi,0x2
c00031f0:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00031f6:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00031fa:	e8 2d eb ff ff       	call   c0001d2c <ld_dword>
c00031ff:	25 ff ff ff 0f       	and    eax,0xfffffff
c0003204:	89 c1                	mov    ecx,eax
c0003206:	83 c4 0c             	add    esp,0xc
c0003209:	89 c8                	mov    eax,ecx
c000320b:	5b                   	pop    ebx
c000320c:	5e                   	pop    esi
c000320d:	5f                   	pop    edi
c000320e:	5d                   	pop    ebp
c000320f:	c3                   	ret    
c0003210:	89 c8                	mov    eax,ecx
c0003212:	c3                   	ret    

c0003213 <dir_sdi>:
c0003213:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c0003219:	0f 87 b6 00 00 00    	ja     c00032d5 <dir_sdi+0xc2>
c000321f:	55                   	push   ebp
c0003220:	57                   	push   edi
c0003221:	56                   	push   esi
c0003222:	53                   	push   ebx
c0003223:	89 d3                	mov    ebx,edx
c0003225:	83 ec 1c             	sub    esp,0x1c
c0003228:	f6 c2 1f             	test   dl,0x1f
c000322b:	74 0a                	je     c0003237 <dir_sdi+0x24>
c000322d:	b8 02 00 00 00       	mov    eax,0x2
c0003232:	e9 96 00 00 00       	jmp    c00032cd <dir_sdi+0xba>
c0003237:	89 c6                	mov    esi,eax
c0003239:	8b 38                	mov    edi,DWORD PTR [eax]
c000323b:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c000323e:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0003241:	85 c9                	test   ecx,ecx
c0003243:	75 23                	jne    c0003268 <dir_sdi+0x55>
c0003245:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0003248:	76 07                	jbe    c0003251 <dir_sdi+0x3e>
c000324a:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c000324d:	85 c0                	test   eax,eax
c000324f:	75 15                	jne    c0003266 <dir_sdi+0x53>
c0003251:	89 da                	mov    edx,ebx
c0003253:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0003257:	c1 ea 05             	shr    edx,0x5
c000325a:	39 c2                	cmp    edx,eax
c000325c:	73 cf                	jae    c000322d <dir_sdi+0x1a>
c000325e:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c0003261:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003264:	eb 3d                	jmp    c00032a3 <dir_sdi+0x90>
c0003266:	89 c1                	mov    ecx,eax
c0003268:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c000326c:	c1 e5 09             	shl    ebp,0x9
c000326f:	89 ca                	mov    edx,ecx
c0003271:	39 eb                	cmp    ebx,ebp
c0003273:	72 1c                	jb     c0003291 <dir_sdi+0x7e>
c0003275:	8b 06                	mov    eax,DWORD PTR [esi]
c0003277:	e8 95 fe ff ff       	call   c0003111 <get_fat.isra.2>
c000327c:	89 c1                	mov    ecx,eax
c000327e:	83 f8 ff             	cmp    eax,0xffffffff
c0003281:	74 45                	je     c00032c8 <dir_sdi+0xb5>
c0003283:	83 f8 01             	cmp    eax,0x1
c0003286:	76 a5                	jbe    c000322d <dir_sdi+0x1a>
c0003288:	39 47 18             	cmp    DWORD PTR [edi+0x18],eax
c000328b:	76 a0                	jbe    c000322d <dir_sdi+0x1a>
c000328d:	29 eb                	sub    ebx,ebp
c000328f:	eb de                	jmp    c000326f <dir_sdi+0x5c>
c0003291:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003295:	89 f8                	mov    eax,edi
c0003297:	e8 c9 ec ff ff       	call   c0001f65 <clst2sect>
c000329c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00032a0:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00032a3:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c00032a6:	89 4e 14             	mov    DWORD PTR [esi+0x14],ecx
c00032a9:	85 d2                	test   edx,edx
c00032ab:	74 80                	je     c000322d <dir_sdi+0x1a>
c00032ad:	89 d8                	mov    eax,ebx
c00032af:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00032b5:	c1 e8 09             	shr    eax,0x9
c00032b8:	01 d0                	add    eax,edx
c00032ba:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00032bd:	8d 44 1f 34          	lea    eax,[edi+ebx*1+0x34]
c00032c1:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00032c4:	31 c0                	xor    eax,eax
c00032c6:	eb 05                	jmp    c00032cd <dir_sdi+0xba>
c00032c8:	b8 01 00 00 00       	mov    eax,0x1
c00032cd:	83 c4 1c             	add    esp,0x1c
c00032d0:	5b                   	pop    ebx
c00032d1:	5e                   	pop    esi
c00032d2:	5f                   	pop    edi
c00032d3:	5d                   	pop    ebp
c00032d4:	c3                   	ret    
c00032d5:	b8 02 00 00 00       	mov    eax,0x2
c00032da:	c3                   	ret    

c00032db <create_chain>:
c00032db:	55                   	push   ebp
c00032dc:	89 c5                	mov    ebp,eax
c00032de:	57                   	push   edi
c00032df:	89 d7                	mov    edi,edx
c00032e1:	56                   	push   esi
c00032e2:	53                   	push   ebx
c00032e3:	83 ec 1c             	sub    esp,0x1c
c00032e6:	85 d2                	test   edx,edx
c00032e8:	8b 30                	mov    esi,DWORD PTR [eax]
c00032ea:	75 0e                	jne    c00032fa <create_chain+0x1f>
c00032ec:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c00032ef:	85 c9                	test   ecx,ecx
c00032f1:	74 34                	je     c0003327 <create_chain+0x4c>
c00032f3:	39 4e 18             	cmp    DWORD PTR [esi+0x18],ecx
c00032f6:	77 34                	ja     c000332c <create_chain+0x51>
c00032f8:	eb 2d                	jmp    c0003327 <create_chain+0x4c>
c00032fa:	89 f0                	mov    eax,esi
c00032fc:	e8 10 fe ff ff       	call   c0003111 <get_fat.isra.2>
c0003301:	89 c3                	mov    ebx,eax
c0003303:	83 f8 01             	cmp    eax,0x1
c0003306:	77 0a                	ja     c0003312 <create_chain+0x37>
c0003308:	bb 01 00 00 00       	mov    ebx,0x1
c000330d:	e9 f9 00 00 00       	jmp    c000340b <create_chain+0x130>
c0003312:	83 f8 ff             	cmp    eax,0xffffffff
c0003315:	0f 84 ed 00 00 00    	je     c0003408 <create_chain+0x12d>
c000331b:	89 f9                	mov    ecx,edi
c000331d:	39 46 18             	cmp    DWORD PTR [esi+0x18],eax
c0003320:	76 0a                	jbe    c000332c <create_chain+0x51>
c0003322:	e9 e4 00 00 00       	jmp    c000340b <create_chain+0x130>
c0003327:	b9 01 00 00 00       	mov    ecx,0x1
c000332c:	83 7e 14 00          	cmp    DWORD PTR [esi+0x14],0x0
c0003330:	75 07                	jne    c0003339 <create_chain+0x5e>
c0003332:	31 db                	xor    ebx,ebx
c0003334:	e9 d2 00 00 00       	jmp    c000340b <create_chain+0x130>
c0003339:	39 f9                	cmp    ecx,edi
c000333b:	75 46                	jne    c0003383 <create_chain+0xa8>
c000333d:	8d 59 01             	lea    ebx,[ecx+0x1]
c0003340:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c0003343:	77 05                	ja     c000334a <create_chain+0x6f>
c0003345:	bb 02 00 00 00       	mov    ebx,0x2
c000334a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000334e:	89 da                	mov    edx,ebx
c0003350:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003353:	e8 b9 fd ff ff       	call   c0003111 <get_fat.isra.2>
c0003358:	83 f8 01             	cmp    eax,0x1
c000335b:	74 ab                	je     c0003308 <create_chain+0x2d>
c000335d:	83 f8 ff             	cmp    eax,0xffffffff
c0003360:	0f 84 a2 00 00 00    	je     c0003408 <create_chain+0x12d>
c0003366:	85 c0                	test   eax,eax
c0003368:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000336c:	74 11                	je     c000337f <create_chain+0xa4>
c000336e:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0003371:	83 f8 01             	cmp    eax,0x1
c0003374:	76 0d                	jbe    c0003383 <create_chain+0xa8>
c0003376:	3b 46 18             	cmp    eax,DWORD PTR [esi+0x18]
c0003379:	73 08                	jae    c0003383 <create_chain+0xa8>
c000337b:	89 c1                	mov    ecx,eax
c000337d:	eb 04                	jmp    c0003383 <create_chain+0xa8>
c000337f:	85 db                	test   ebx,ebx
c0003381:	75 3d                	jne    c00033c0 <create_chain+0xe5>
c0003383:	89 cb                	mov    ebx,ecx
c0003385:	43                   	inc    ebx
c0003386:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c0003389:	77 0a                	ja     c0003395 <create_chain+0xba>
c000338b:	83 f9 01             	cmp    ecx,0x1
c000338e:	76 a2                	jbe    c0003332 <create_chain+0x57>
c0003390:	bb 02 00 00 00       	mov    ebx,0x2
c0003395:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003399:	89 da                	mov    edx,ebx
c000339b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000339e:	e8 6e fd ff ff       	call   c0003111 <get_fat.isra.2>
c00033a3:	85 c0                	test   eax,eax
c00033a5:	74 19                	je     c00033c0 <create_chain+0xe5>
c00033a7:	83 f8 01             	cmp    eax,0x1
c00033aa:	0f 84 58 ff ff ff    	je     c0003308 <create_chain+0x2d>
c00033b0:	40                   	inc    eax
c00033b1:	74 55                	je     c0003408 <create_chain+0x12d>
c00033b3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00033b7:	39 cb                	cmp    ebx,ecx
c00033b9:	75 ca                	jne    c0003385 <create_chain+0xaa>
c00033bb:	e9 72 ff ff ff       	jmp    c0003332 <create_chain+0x57>
c00033c0:	83 c9 ff             	or     ecx,0xffffffff
c00033c3:	89 da                	mov    edx,ebx
c00033c5:	89 f0                	mov    eax,esi
c00033c7:	e8 cf f2 ff ff       	call   c000269b <put_fat>
c00033cc:	85 c0                	test   eax,eax
c00033ce:	75 31                	jne    c0003401 <create_chain+0x126>
c00033d0:	85 ff                	test   edi,edi
c00033d2:	75 16                	jne    c00033ea <create_chain+0x10f>
c00033d4:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00033d7:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c00033da:	89 5e 10             	mov    DWORD PTR [esi+0x10],ebx
c00033dd:	8d 57 fe             	lea    edx,[edi-0x2]
c00033e0:	39 d0                	cmp    eax,edx
c00033e2:	77 17                	ja     c00033fb <create_chain+0x120>
c00033e4:	48                   	dec    eax
c00033e5:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00033e8:	eb 11                	jmp    c00033fb <create_chain+0x120>
c00033ea:	89 d9                	mov    ecx,ebx
c00033ec:	89 fa                	mov    edx,edi
c00033ee:	89 f0                	mov    eax,esi
c00033f0:	e8 a6 f2 ff ff       	call   c000269b <put_fat>
c00033f5:	85 c0                	test   eax,eax
c00033f7:	74 db                	je     c00033d4 <create_chain+0xf9>
c00033f9:	eb 06                	jmp    c0003401 <create_chain+0x126>
c00033fb:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c00033ff:	eb 0a                	jmp    c000340b <create_chain+0x130>
c0003401:	48                   	dec    eax
c0003402:	0f 85 00 ff ff ff    	jne    c0003308 <create_chain+0x2d>
c0003408:	83 cb ff             	or     ebx,0xffffffff
c000340b:	83 c4 1c             	add    esp,0x1c
c000340e:	89 d8                	mov    eax,ebx
c0003410:	5b                   	pop    ebx
c0003411:	5e                   	pop    esi
c0003412:	5f                   	pop    edi
c0003413:	5d                   	pop    ebp
c0003414:	c3                   	ret    

c0003415 <remove_chain>:
c0003415:	55                   	push   ebp
c0003416:	57                   	push   edi
c0003417:	56                   	push   esi
c0003418:	89 d6                	mov    esi,edx
c000341a:	53                   	push   ebx
c000341b:	83 ec 0c             	sub    esp,0xc
c000341e:	83 fa 01             	cmp    edx,0x1
c0003421:	8b 18                	mov    ebx,DWORD PTR [eax]
c0003423:	76 65                	jbe    c000348a <remove_chain+0x75>
c0003425:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c0003428:	76 60                	jbe    c000348a <remove_chain+0x75>
c000342a:	89 c5                	mov    ebp,eax
c000342c:	89 ca                	mov    edx,ecx
c000342e:	85 c9                	test   ecx,ecx
c0003430:	74 0e                	je     c0003440 <remove_chain+0x2b>
c0003432:	83 c9 ff             	or     ecx,0xffffffff
c0003435:	89 d8                	mov    eax,ebx
c0003437:	e8 5f f2 ff ff       	call   c000269b <put_fat>
c000343c:	85 c0                	test   eax,eax
c000343e:	75 56                	jne    c0003496 <remove_chain+0x81>
c0003440:	89 f2                	mov    edx,esi
c0003442:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003445:	e8 c7 fc ff ff       	call   c0003111 <get_fat.isra.2>
c000344a:	89 c7                	mov    edi,eax
c000344c:	85 c0                	test   eax,eax
c000344e:	75 04                	jne    c0003454 <remove_chain+0x3f>
c0003450:	31 c0                	xor    eax,eax
c0003452:	eb 42                	jmp    c0003496 <remove_chain+0x81>
c0003454:	83 f8 01             	cmp    eax,0x1
c0003457:	74 31                	je     c000348a <remove_chain+0x75>
c0003459:	83 f8 ff             	cmp    eax,0xffffffff
c000345c:	74 33                	je     c0003491 <remove_chain+0x7c>
c000345e:	31 c9                	xor    ecx,ecx
c0003460:	89 f2                	mov    edx,esi
c0003462:	89 d8                	mov    eax,ebx
c0003464:	e8 32 f2 ff ff       	call   c000269b <put_fat>
c0003469:	85 c0                	test   eax,eax
c000346b:	75 29                	jne    c0003496 <remove_chain+0x81>
c000346d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003470:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003473:	8d 4a fe             	lea    ecx,[edx-0x2]
c0003476:	39 c8                	cmp    eax,ecx
c0003478:	73 08                	jae    c0003482 <remove_chain+0x6d>
c000347a:	40                   	inc    eax
c000347b:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c000347f:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0003482:	89 fe                	mov    esi,edi
c0003484:	39 fa                	cmp    edx,edi
c0003486:	77 b8                	ja     c0003440 <remove_chain+0x2b>
c0003488:	eb c6                	jmp    c0003450 <remove_chain+0x3b>
c000348a:	b8 02 00 00 00       	mov    eax,0x2
c000348f:	eb 05                	jmp    c0003496 <remove_chain+0x81>
c0003491:	b8 01 00 00 00       	mov    eax,0x1
c0003496:	83 c4 0c             	add    esp,0xc
c0003499:	5b                   	pop    ebx
c000349a:	5e                   	pop    esi
c000349b:	5f                   	pop    edi
c000349c:	5d                   	pop    ebp
c000349d:	c3                   	ret    

c000349e <dir_next>:
c000349e:	55                   	push   ebp
c000349f:	57                   	push   edi
c00034a0:	56                   	push   esi
c00034a1:	53                   	push   ebx
c00034a2:	83 ec 1c             	sub    esp,0x1c
c00034a5:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00034a8:	8b 28                	mov    ebp,DWORD PTR [eax]
c00034aa:	83 c7 20             	add    edi,0x20
c00034ad:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c00034b3:	76 07                	jbe    c00034bc <dir_next+0x1e>
c00034b5:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00034bc:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c00034bf:	b9 04 00 00 00       	mov    ecx,0x4
c00034c4:	85 f6                	test   esi,esi
c00034c6:	0f 84 cd 00 00 00    	je     c0003599 <dir_next+0xfb>
c00034cc:	89 c3                	mov    ebx,eax
c00034ce:	89 d1                	mov    ecx,edx
c00034d0:	89 f8                	mov    eax,edi
c00034d2:	25 ff 01 00 00       	and    eax,0x1ff
c00034d7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00034db:	0f 85 a8 00 00 00    	jne    c0003589 <dir_next+0xeb>
c00034e1:	46                   	inc    esi
c00034e2:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00034e5:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c00034e8:	85 d2                	test   edx,edx
c00034ea:	75 22                	jne    c000350e <dir_next+0x70>
c00034ec:	89 fa                	mov    edx,edi
c00034ee:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c00034f2:	c1 ea 05             	shr    edx,0x5
c00034f5:	39 c2                	cmp    edx,eax
c00034f7:	0f 82 8c 00 00 00    	jb     c0003589 <dir_next+0xeb>
c00034fd:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003504:	b9 04 00 00 00       	mov    ecx,0x4
c0003509:	e9 8b 00 00 00       	jmp    c0003599 <dir_next+0xfb>
c000350e:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0003512:	89 fe                	mov    esi,edi
c0003514:	48                   	dec    eax
c0003515:	c1 ee 09             	shr    esi,0x9
c0003518:	85 f0                	test   eax,esi
c000351a:	75 6d                	jne    c0003589 <dir_next+0xeb>
c000351c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003520:	89 e8                	mov    eax,ebp
c0003522:	e8 ea fb ff ff       	call   c0003111 <get_fat.isra.2>
c0003527:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000352b:	89 c6                	mov    esi,eax
c000352d:	83 f8 01             	cmp    eax,0x1
c0003530:	77 07                	ja     c0003539 <dir_next+0x9b>
c0003532:	b9 02 00 00 00       	mov    ecx,0x2
c0003537:	eb 60                	jmp    c0003599 <dir_next+0xfb>
c0003539:	83 f8 ff             	cmp    eax,0xffffffff
c000353c:	75 07                	jne    c0003545 <dir_next+0xa7>
c000353e:	b9 01 00 00 00       	mov    ecx,0x1
c0003543:	eb 54                	jmp    c0003599 <dir_next+0xfb>
c0003545:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c0003548:	77 30                	ja     c000357a <dir_next+0xdc>
c000354a:	85 c9                	test   ecx,ecx
c000354c:	74 af                	je     c00034fd <dir_next+0x5f>
c000354e:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003551:	89 d8                	mov    eax,ebx
c0003553:	e8 83 fd ff ff       	call   c00032db <create_chain>
c0003558:	b9 07 00 00 00       	mov    ecx,0x7
c000355d:	89 c6                	mov    esi,eax
c000355f:	85 c0                	test   eax,eax
c0003561:	74 36                	je     c0003599 <dir_next+0xfb>
c0003563:	83 f8 01             	cmp    eax,0x1
c0003566:	74 ca                	je     c0003532 <dir_next+0x94>
c0003568:	83 f8 ff             	cmp    eax,0xffffffff
c000356b:	74 d1                	je     c000353e <dir_next+0xa0>
c000356d:	89 c2                	mov    edx,eax
c000356f:	89 e8                	mov    eax,ebp
c0003571:	e8 75 f2 ff ff       	call   c00027eb <dir_clear>
c0003576:	85 c0                	test   eax,eax
c0003578:	75 c4                	jne    c000353e <dir_next+0xa0>
c000357a:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000357d:	89 f2                	mov    edx,esi
c000357f:	89 e8                	mov    eax,ebp
c0003581:	e8 df e9 ff ff       	call   c0001f65 <clst2sect>
c0003586:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003589:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000358d:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0003590:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c0003594:	31 c9                	xor    ecx,ecx
c0003596:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003599:	83 c4 1c             	add    esp,0x1c
c000359c:	89 c8                	mov    eax,ecx
c000359e:	5b                   	pop    ebx
c000359f:	5e                   	pop    esi
c00035a0:	5f                   	pop    edi
c00035a1:	5d                   	pop    ebp
c00035a2:	c3                   	ret    

c00035a3 <dir_alloc>:
c00035a3:	55                   	push   ebp
c00035a4:	89 c5                	mov    ebp,eax
c00035a6:	57                   	push   edi
c00035a7:	89 d7                	mov    edi,edx
c00035a9:	56                   	push   esi
c00035aa:	31 d2                	xor    edx,edx
c00035ac:	53                   	push   ebx
c00035ad:	83 ec 0c             	sub    esp,0xc
c00035b0:	8b 30                	mov    esi,DWORD PTR [eax]
c00035b2:	e8 5c fc ff ff       	call   c0003213 <dir_sdi>
c00035b7:	85 c0                	test   eax,eax
c00035b9:	75 37                	jne    c00035f2 <dir_alloc+0x4f>
c00035bb:	31 db                	xor    ebx,ebx
c00035bd:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00035c0:	89 f0                	mov    eax,esi
c00035c2:	e8 7e ec ff ff       	call   c0002245 <move_window>
c00035c7:	85 c0                	test   eax,eax
c00035c9:	75 27                	jne    c00035f2 <dir_alloc+0x4f>
c00035cb:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c00035ce:	8a 12                	mov    dl,BYTE PTR [edx]
c00035d0:	84 d2                	test   dl,dl
c00035d2:	74 05                	je     c00035d9 <dir_alloc+0x36>
c00035d4:	80 fa e5             	cmp    dl,0xe5
c00035d7:	75 07                	jne    c00035e0 <dir_alloc+0x3d>
c00035d9:	43                   	inc    ebx
c00035da:	39 fb                	cmp    ebx,edi
c00035dc:	75 04                	jne    c00035e2 <dir_alloc+0x3f>
c00035de:	eb 1c                	jmp    c00035fc <dir_alloc+0x59>
c00035e0:	31 db                	xor    ebx,ebx
c00035e2:	ba 01 00 00 00       	mov    edx,0x1
c00035e7:	89 e8                	mov    eax,ebp
c00035e9:	e8 b0 fe ff ff       	call   c000349e <dir_next>
c00035ee:	85 c0                	test   eax,eax
c00035f0:	74 cb                	je     c00035bd <dir_alloc+0x1a>
c00035f2:	83 f8 04             	cmp    eax,0x4
c00035f5:	75 05                	jne    c00035fc <dir_alloc+0x59>
c00035f7:	b8 07 00 00 00       	mov    eax,0x7
c00035fc:	83 c4 0c             	add    esp,0xc
c00035ff:	5b                   	pop    ebx
c0003600:	5e                   	pop    esi
c0003601:	5f                   	pop    edi
c0003602:	5d                   	pop    ebp
c0003603:	c3                   	ret    

c0003604 <dir_read>:
c0003604:	55                   	push   ebp
c0003605:	57                   	push   edi
c0003606:	bf ff ff ff ff       	mov    edi,0xffffffff
c000360b:	56                   	push   esi
c000360c:	be 04 00 00 00       	mov    esi,0x4
c0003611:	53                   	push   ebx
c0003612:	89 c3                	mov    ebx,eax
c0003614:	83 ec 1c             	sub    esp,0x1c
c0003617:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000361b:	8b 28                	mov    ebp,DWORD PTR [eax]
c000361d:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c0003622:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003625:	85 d2                	test   edx,edx
c0003627:	0f 84 d8 00 00 00    	je     c0003705 <dir_read+0x101>
c000362d:	89 e8                	mov    eax,ebp
c000362f:	e8 11 ec ff ff       	call   c0002245 <move_window>
c0003634:	89 c6                	mov    esi,eax
c0003636:	85 c0                	test   eax,eax
c0003638:	0f 85 d2 00 00 00    	jne    c0003710 <dir_read+0x10c>
c000363e:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003641:	8a 0a                	mov    cl,BYTE PTR [edx]
c0003643:	84 c9                	test   cl,cl
c0003645:	0f 84 c0 00 00 00    	je     c000370b <dir_read+0x107>
c000364b:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c000364e:	83 e0 3f             	and    eax,0x3f
c0003651:	80 f9 2e             	cmp    cl,0x2e
c0003654:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003658:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000365b:	0f 84 8a 00 00 00    	je     c00036eb <dir_read+0xe7>
c0003661:	80 f9 e5             	cmp    cl,0xe5
c0003664:	0f 84 81 00 00 00    	je     c00036eb <dir_read+0xe7>
c000366a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000366e:	83 e0 1f             	and    eax,0x1f
c0003671:	83 f8 08             	cmp    eax,0x8
c0003674:	0f 94 c0             	sete   al
c0003677:	0f b6 c0             	movzx  eax,al
c000367a:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000367e:	75 6b                	jne    c00036eb <dir_read+0xe7>
c0003680:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003685:	75 44                	jne    c00036cb <dir_read+0xc7>
c0003687:	f6 c1 40             	test   cl,0x40
c000368a:	74 12                	je     c000369e <dir_read+0x9a>
c000368c:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c000368f:	83 e1 bf             	and    ecx,0xffffffbf
c0003692:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003696:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003699:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c000369c:	eb 06                	jmp    c00036a4 <dir_read+0xa0>
c000369e:	89 f8                	mov    eax,edi
c00036a0:	38 c8                	cmp    al,cl
c00036a2:	75 47                	jne    c00036eb <dir_read+0xe7>
c00036a4:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00036a8:	bf ff ff ff ff       	mov    edi,0xffffffff
c00036ad:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c00036b0:	75 3e                	jne    c00036f0 <dir_read+0xec>
c00036b2:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00036b6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00036b9:	e8 c4 e8 ff ff       	call   c0001f82 <pick_lfn>
c00036be:	85 c0                	test   eax,eax
c00036c0:	74 2e                	je     c00036f0 <dir_read+0xec>
c00036c2:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00036c6:	8d 79 ff             	lea    edi,[ecx-0x1]
c00036c9:	eb 25                	jmp    c00036f0 <dir_read+0xec>
c00036cb:	89 f8                	mov    eax,edi
c00036cd:	84 c0                	test   al,al
c00036cf:	75 11                	jne    c00036e2 <dir_read+0xde>
c00036d1:	89 d0                	mov    eax,edx
c00036d3:	e8 64 ea ff ff       	call   c000213c <sum_sfn>
c00036d8:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c00036dc:	75 04                	jne    c00036e2 <dir_read+0xde>
c00036de:	31 f6                	xor    esi,esi
c00036e0:	eb 35                	jmp    c0003717 <dir_read+0x113>
c00036e2:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00036e9:	eb 2c                	jmp    c0003717 <dir_read+0x113>
c00036eb:	bf ff ff ff ff       	mov    edi,0xffffffff
c00036f0:	31 d2                	xor    edx,edx
c00036f2:	89 d8                	mov    eax,ebx
c00036f4:	e8 a5 fd ff ff       	call   c000349e <dir_next>
c00036f9:	89 c6                	mov    esi,eax
c00036fb:	85 c0                	test   eax,eax
c00036fd:	0f 84 1f ff ff ff    	je     c0003622 <dir_read+0x1e>
c0003703:	eb 0b                	jmp    c0003710 <dir_read+0x10c>
c0003705:	85 f6                	test   esi,esi
c0003707:	74 d5                	je     c00036de <dir_read+0xda>
c0003709:	eb 05                	jmp    c0003710 <dir_read+0x10c>
c000370b:	be 04 00 00 00       	mov    esi,0x4
c0003710:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003717:	83 c4 1c             	add    esp,0x1c
c000371a:	89 f0                	mov    eax,esi
c000371c:	5b                   	pop    ebx
c000371d:	5e                   	pop    esi
c000371e:	5f                   	pop    edi
c000371f:	5d                   	pop    ebp
c0003720:	c3                   	ret    

c0003721 <dir_remove>:
c0003721:	57                   	push   edi
c0003722:	56                   	push   esi
c0003723:	53                   	push   ebx
c0003724:	89 c3                	mov    ebx,eax
c0003726:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0003729:	8b 30                	mov    esi,DWORD PTR [eax]
c000372b:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000372e:	83 fa ff             	cmp    edx,0xffffffff
c0003731:	74 09                	je     c000373c <dir_remove+0x1b>
c0003733:	e8 db fa ff ff       	call   c0003213 <dir_sdi>
c0003738:	85 c0                	test   eax,eax
c000373a:	75 34                	jne    c0003770 <dir_remove+0x4f>
c000373c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000373f:	89 f0                	mov    eax,esi
c0003741:	e8 ff ea ff ff       	call   c0002245 <move_window>
c0003746:	85 c0                	test   eax,eax
c0003748:	75 1c                	jne    c0003766 <dir_remove+0x45>
c000374a:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000374d:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003750:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003754:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c0003757:	73 17                	jae    c0003770 <dir_remove+0x4f>
c0003759:	31 d2                	xor    edx,edx
c000375b:	89 d8                	mov    eax,ebx
c000375d:	e8 3c fd ff ff       	call   c000349e <dir_next>
c0003762:	85 c0                	test   eax,eax
c0003764:	74 d6                	je     c000373c <dir_remove+0x1b>
c0003766:	83 f8 04             	cmp    eax,0x4
c0003769:	75 05                	jne    c0003770 <dir_remove+0x4f>
c000376b:	b8 02 00 00 00       	mov    eax,0x2
c0003770:	5b                   	pop    ebx
c0003771:	5e                   	pop    esi
c0003772:	5f                   	pop    edi
c0003773:	c3                   	ret    

c0003774 <dir_find>:
c0003774:	55                   	push   ebp
c0003775:	31 d2                	xor    edx,edx
c0003777:	57                   	push   edi
c0003778:	56                   	push   esi
c0003779:	53                   	push   ebx
c000377a:	89 c3                	mov    ebx,eax
c000377c:	83 ec 1c             	sub    esp,0x1c
c000377f:	8b 00                	mov    eax,DWORD PTR [eax]
c0003781:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003785:	89 d8                	mov    eax,ebx
c0003787:	e8 87 fa ff ff       	call   c0003213 <dir_sdi>
c000378c:	89 c6                	mov    esi,eax
c000378e:	85 c0                	test   eax,eax
c0003790:	0f 85 02 01 00 00    	jne    c0003898 <dir_find+0x124>
c0003796:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c000379d:	c6 44 24 0e ff       	mov    BYTE PTR [esp+0xe],0xff
c00037a2:	bf ff ff ff ff       	mov    edi,0xffffffff
c00037a7:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00037aa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00037ae:	e8 92 ea ff ff       	call   c0002245 <move_window>
c00037b3:	89 c6                	mov    esi,eax
c00037b5:	85 c0                	test   eax,eax
c00037b7:	0f 85 db 00 00 00    	jne    c0003898 <dir_find+0x124>
c00037bd:	8b 6b 1c             	mov    ebp,DWORD PTR [ebx+0x1c]
c00037c0:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c00037c3:	84 c9                	test   cl,cl
c00037c5:	0f 84 c8 00 00 00    	je     c0003893 <dir_find+0x11f>
c00037cb:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c00037ce:	88 d0                	mov    al,dl
c00037d0:	83 e0 3f             	and    eax,0x3f
c00037d3:	80 f9 e5             	cmp    cl,0xe5
c00037d6:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00037d9:	0f 84 93 00 00 00    	je     c0003872 <dir_find+0xfe>
c00037df:	80 e2 08             	and    dl,0x8
c00037e2:	74 0a                	je     c00037ee <dir_find+0x7a>
c00037e4:	3c 0f                	cmp    al,0xf
c00037e6:	0f 85 86 00 00 00    	jne    c0003872 <dir_find+0xfe>
c00037ec:	eb 04                	jmp    c00037f2 <dir_find+0x7e>
c00037ee:	3c 0f                	cmp    al,0xf
c00037f0:	75 54                	jne    c0003846 <dir_find+0xd2>
c00037f2:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c00037f6:	0f 85 82 00 00 00    	jne    c000387e <dir_find+0x10a>
c00037fc:	f6 c1 40             	test   cl,0x40
c00037ff:	74 12                	je     c0003813 <dir_find+0x9f>
c0003801:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0003804:	83 e1 bf             	and    ecx,0xffffffbf
c0003807:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000380b:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000380e:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0003811:	eb 06                	jmp    c0003819 <dir_find+0xa5>
c0003813:	89 f8                	mov    eax,edi
c0003815:	38 c8                	cmp    al,cl
c0003817:	75 60                	jne    c0003879 <dir_find+0x105>
c0003819:	8a 44 24 0e          	mov    al,BYTE PTR [esp+0xe]
c000381d:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003822:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0003825:	75 57                	jne    c000387e <dir_find+0x10a>
c0003827:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000382b:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c000382f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003832:	89 ea                	mov    edx,ebp
c0003834:	e8 89 f3 ff ff       	call   c0002bc2 <cmp_lfn>
c0003839:	85 c0                	test   eax,eax
c000383b:	74 41                	je     c000387e <dir_find+0x10a>
c000383d:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0003841:	8d 79 ff             	lea    edi,[ecx-0x1]
c0003844:	eb 38                	jmp    c000387e <dir_find+0x10a>
c0003846:	89 f8                	mov    eax,edi
c0003848:	84 c0                	test   al,al
c000384a:	75 0d                	jne    c0003859 <dir_find+0xe5>
c000384c:	89 e8                	mov    eax,ebp
c000384e:	e8 e9 e8 ff ff       	call   c000213c <sum_sfn>
c0003853:	3a 44 24 0e          	cmp    al,BYTE PTR [esp+0xe]
c0003857:	74 3f                	je     c0003898 <dir_find+0x124>
c0003859:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c000385d:	75 13                	jne    c0003872 <dir_find+0xfe>
c000385f:	8d 53 20             	lea    edx,[ebx+0x20]
c0003862:	b9 0b 00 00 00       	mov    ecx,0xb
c0003867:	89 e8                	mov    eax,ebp
c0003869:	e8 fd e4 ff ff       	call   c0001d6b <mem_cmp>
c000386e:	85 c0                	test   eax,eax
c0003870:	74 26                	je     c0003898 <dir_find+0x124>
c0003872:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003879:	bf ff ff ff ff       	mov    edi,0xffffffff
c000387e:	31 d2                	xor    edx,edx
c0003880:	89 d8                	mov    eax,ebx
c0003882:	e8 17 fc ff ff       	call   c000349e <dir_next>
c0003887:	89 c6                	mov    esi,eax
c0003889:	85 c0                	test   eax,eax
c000388b:	0f 84 16 ff ff ff    	je     c00037a7 <dir_find+0x33>
c0003891:	eb 05                	jmp    c0003898 <dir_find+0x124>
c0003893:	be 04 00 00 00       	mov    esi,0x4
c0003898:	83 c4 1c             	add    esp,0x1c
c000389b:	89 f0                	mov    eax,esi
c000389d:	5b                   	pop    ebx
c000389e:	5e                   	pop    esi
c000389f:	5f                   	pop    edi
c00038a0:	5d                   	pop    ebp
c00038a1:	c3                   	ret    

c00038a2 <follow_path>:
c00038a2:	56                   	push   esi
c00038a3:	53                   	push   ebx
c00038a4:	89 c3                	mov    ebx,eax
c00038a6:	83 ec 14             	sub    esp,0x14
c00038a9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00038ad:	8b 30                	mov    esi,DWORD PTR [eax]
c00038af:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00038b3:	8a 10                	mov    dl,BYTE PTR [eax]
c00038b5:	80 fa 5c             	cmp    dl,0x5c
c00038b8:	75 07                	jne    c00038c1 <follow_path+0x1f>
c00038ba:	40                   	inc    eax
c00038bb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00038bf:	eb ee                	jmp    c00038af <follow_path+0xd>
c00038c1:	80 fa 2f             	cmp    dl,0x2f
c00038c4:	74 f4                	je     c00038ba <follow_path+0x18>
c00038c6:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00038cd:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c00038d0:	77 3e                	ja     c0003910 <follow_path+0x6e>
c00038d2:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c00038d6:	31 d2                	xor    edx,edx
c00038d8:	89 d8                	mov    eax,ebx
c00038da:	e8 34 f9 ff ff       	call   c0003213 <dir_sdi>
c00038df:	eb 4f                	jmp    c0003930 <follow_path+0x8e>
c00038e1:	89 d8                	mov    eax,ebx
c00038e3:	e8 8c fe ff ff       	call   c0003774 <dir_find>
c00038e8:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c00038eb:	85 c0                	test   eax,eax
c00038ed:	75 32                	jne    c0003921 <follow_path+0x7f>
c00038ef:	80 e2 04             	and    dl,0x4
c00038f2:	75 3c                	jne    c0003930 <follow_path+0x8e>
c00038f4:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c00038f8:	74 31                	je     c000392b <follow_path+0x89>
c00038fa:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00038fd:	25 ff 01 00 00       	and    eax,0x1ff
c0003902:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003906:	8a 06                	mov    al,BYTE PTR [esi]
c0003908:	e8 b3 f7 ff ff       	call   c00030c0 <ld_clust.isra.0>
c000390d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003910:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003914:	89 d8                	mov    eax,ebx
c0003916:	e8 cb ef ff ff       	call   c00028e6 <create_name>
c000391b:	85 c0                	test   eax,eax
c000391d:	74 c2                	je     c00038e1 <follow_path+0x3f>
c000391f:	eb 0f                	jmp    c0003930 <follow_path+0x8e>
c0003921:	83 f8 04             	cmp    eax,0x4
c0003924:	75 0a                	jne    c0003930 <follow_path+0x8e>
c0003926:	80 e2 04             	and    dl,0x4
c0003929:	75 05                	jne    c0003930 <follow_path+0x8e>
c000392b:	b8 05 00 00 00       	mov    eax,0x5
c0003930:	83 c4 14             	add    esp,0x14
c0003933:	5b                   	pop    ebx
c0003934:	5e                   	pop    esi
c0003935:	c3                   	ret    

c0003936 <dir_register>:
c0003936:	55                   	push   ebp
c0003937:	57                   	push   edi
c0003938:	56                   	push   esi
c0003939:	be 06 00 00 00       	mov    esi,0x6
c000393e:	53                   	push   ebx
c000393f:	83 ec 2c             	sub    esp,0x2c
c0003942:	f6 40 2b a0          	test   BYTE PTR [eax+0x2b],0xa0
c0003946:	0f 85 65 01 00 00    	jne    c0003ab1 <dir_register+0x17b>
c000394c:	8b 38                	mov    edi,DWORD PTR [eax]
c000394e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003956:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003959:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000395d:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003962:	74 06                	je     c000396a <dir_register+0x34>
c0003964:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003968:	eb ef                	jmp    c0003959 <dir_register+0x23>
c000396a:	89 c3                	mov    ebx,eax
c000396c:	b9 0c 00 00 00       	mov    ecx,0xc
c0003971:	8d 40 20             	lea    eax,[eax+0x20]
c0003974:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003978:	89 c2                	mov    edx,eax
c000397a:	8d 44 24 14          	lea    eax,[esp+0x14]
c000397e:	e8 c8 e3 ff ff       	call   c0001d4b <mem_cpy>
c0003983:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0003988:	74 48                	je     c00039d2 <dir_register+0x9c>
c000398a:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c000398e:	bd 01 00 00 00       	mov    ebp,0x1
c0003993:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c0003996:	55                   	push   ebp
c0003997:	8d 54 24 18          	lea    edx,[esp+0x18]
c000399b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000399f:	e8 dc e6 ff ff       	call   c0002080 <gen_numname>
c00039a4:	58                   	pop    eax
c00039a5:	89 d8                	mov    eax,ebx
c00039a7:	e8 c8 fd ff ff       	call   c0003774 <dir_find>
c00039ac:	89 c6                	mov    esi,eax
c00039ae:	85 c0                	test   eax,eax
c00039b0:	75 10                	jne    c00039c2 <dir_register+0x8c>
c00039b2:	45                   	inc    ebp
c00039b3:	83 fd 64             	cmp    ebp,0x64
c00039b6:	75 db                	jne    c0003993 <dir_register+0x5d>
c00039b8:	be 07 00 00 00       	mov    esi,0x7
c00039bd:	e9 ef 00 00 00       	jmp    c0003ab1 <dir_register+0x17b>
c00039c2:	83 f8 04             	cmp    eax,0x4
c00039c5:	0f 85 e6 00 00 00    	jne    c0003ab1 <dir_register+0x17b>
c00039cb:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c00039cf:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c00039d2:	bd 01 00 00 00       	mov    ebp,0x1
c00039d7:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c00039dc:	74 13                	je     c00039f1 <dir_register+0xbb>
c00039de:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00039e2:	b9 0d 00 00 00       	mov    ecx,0xd
c00039e7:	83 c0 0c             	add    eax,0xc
c00039ea:	31 d2                	xor    edx,edx
c00039ec:	f7 f1                	div    ecx
c00039ee:	8d 68 01             	lea    ebp,[eax+0x1]
c00039f1:	89 ea                	mov    edx,ebp
c00039f3:	89 d8                	mov    eax,ebx
c00039f5:	e8 a9 fb ff ff       	call   c00035a3 <dir_alloc>
c00039fa:	89 c6                	mov    esi,eax
c00039fc:	85 c0                	test   eax,eax
c00039fe:	0f 85 ad 00 00 00    	jne    c0003ab1 <dir_register+0x17b>
c0003a04:	4d                   	dec    ebp
c0003a05:	74 6a                	je     c0003a71 <dir_register+0x13b>
c0003a07:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003a0a:	89 e8                	mov    eax,ebp
c0003a0c:	c1 e0 05             	shl    eax,0x5
c0003a0f:	29 c2                	sub    edx,eax
c0003a11:	89 d8                	mov    eax,ebx
c0003a13:	e8 fb f7 ff ff       	call   c0003213 <dir_sdi>
c0003a18:	89 c6                	mov    esi,eax
c0003a1a:	85 c0                	test   eax,eax
c0003a1c:	0f 85 8f 00 00 00    	jne    c0003ab1 <dir_register+0x17b>
c0003a22:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003a26:	e8 11 e7 ff ff       	call   c000213c <sum_sfn>
c0003a2b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0003a2f:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003a32:	89 f8                	mov    eax,edi
c0003a34:	e8 0c e8 ff ff       	call   c0002245 <move_window>
c0003a39:	89 c6                	mov    esi,eax
c0003a3b:	85 c0                	test   eax,eax
c0003a3d:	75 72                	jne    c0003ab1 <dir_register+0x17b>
c0003a3f:	83 ec 0c             	sub    esp,0xc
c0003a42:	89 e8                	mov    eax,ebp
c0003a44:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0003a49:	0f b6 c8             	movzx  ecx,al
c0003a4c:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003a4f:	52                   	push   edx
c0003a50:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003a53:	e8 a4 e5 ff ff       	call   c0001ffc <put_lfn>
c0003a58:	31 d2                	xor    edx,edx
c0003a5a:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003a5e:	89 d8                	mov    eax,ebx
c0003a60:	e8 39 fa ff ff       	call   c000349e <dir_next>
c0003a65:	83 c4 10             	add    esp,0x10
c0003a68:	89 c6                	mov    esi,eax
c0003a6a:	85 c0                	test   eax,eax
c0003a6c:	75 43                	jne    c0003ab1 <dir_register+0x17b>
c0003a6e:	4d                   	dec    ebp
c0003a6f:	75 be                	jne    c0003a2f <dir_register+0xf9>
c0003a71:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003a74:	89 f8                	mov    eax,edi
c0003a76:	e8 ca e7 ff ff       	call   c0002245 <move_window>
c0003a7b:	89 c6                	mov    esi,eax
c0003a7d:	85 c0                	test   eax,eax
c0003a7f:	75 30                	jne    c0003ab1 <dir_register+0x17b>
c0003a81:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003a84:	b9 20 00 00 00       	mov    ecx,0x20
c0003a89:	31 d2                	xor    edx,edx
c0003a8b:	e8 d0 e2 ff ff       	call   c0001d60 <mem_set>
c0003a90:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003a93:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003a97:	b9 0b 00 00 00       	mov    ecx,0xb
c0003a9c:	e8 aa e2 ff ff       	call   c0001d4b <mem_cpy>
c0003aa1:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003aa4:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003aa7:	83 e0 18             	and    eax,0x18
c0003aaa:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003aad:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003ab1:	83 c4 2c             	add    esp,0x2c
c0003ab4:	89 f0                	mov    eax,esi
c0003ab6:	5b                   	pop    ebx
c0003ab7:	5e                   	pop    esi
c0003ab8:	5f                   	pop    edi
c0003ab9:	5d                   	pop    ebp
c0003aba:	c3                   	ret    

c0003abb <f_mount>:
c0003abb:	53                   	push   ebx
c0003abc:	83 ec 18             	sub    esp,0x18
c0003abf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003ac3:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0003ac7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003acb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003acf:	e8 7a e6 ff ff       	call   c000214e <get_ldnumber>
c0003ad4:	89 c2                	mov    edx,eax
c0003ad6:	b8 0b 00 00 00       	mov    eax,0xb
c0003adb:	85 d2                	test   edx,edx
c0003add:	78 39                	js     c0003b18 <f_mount+0x5d>
c0003adf:	8b 04 95 a0 24 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffddb60]
c0003ae6:	85 c0                	test   eax,eax
c0003ae8:	74 03                	je     c0003aed <f_mount+0x32>
c0003aea:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003aed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003af1:	85 c0                	test   eax,eax
c0003af3:	74 03                	je     c0003af8 <f_mount+0x3d>
c0003af5:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003af8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003afc:	89 04 95 a0 24 02 c0 	mov    DWORD PTR [edx*4-0x3ffddb60],eax
c0003b03:	31 c0                	xor    eax,eax
c0003b05:	84 db                	test   bl,bl
c0003b07:	74 0f                	je     c0003b18 <f_mount+0x5d>
c0003b09:	31 c9                	xor    ecx,ecx
c0003b0b:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003b0f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003b13:	e8 80 e8 ff ff       	call   c0002398 <mount_volume>
c0003b18:	83 c4 18             	add    esp,0x18
c0003b1b:	5b                   	pop    ebx
c0003b1c:	c3                   	ret    

c0003b1d <f_open>:
c0003b1d:	55                   	push   ebp
c0003b1e:	b8 09 00 00 00       	mov    eax,0x9
c0003b23:	57                   	push   edi
c0003b24:	56                   	push   esi
c0003b25:	53                   	push   ebx
c0003b26:	83 ec 5c             	sub    esp,0x5c
c0003b29:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0003b2d:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0003b31:	85 db                	test   ebx,ebx
c0003b33:	0f 84 a7 02 00 00    	je     c0003de0 <f_open+0x2c3>
c0003b39:	89 fe                	mov    esi,edi
c0003b3b:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003b3f:	83 e6 3f             	and    esi,0x3f
c0003b42:	89 f0                	mov    eax,esi
c0003b44:	0f b6 c8             	movzx  ecx,al
c0003b47:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003b4b:	e8 48 e8 ff ff       	call   c0002398 <mount_volume>
c0003b50:	85 c0                	test   eax,eax
c0003b52:	0f 85 82 02 00 00    	jne    c0003dda <f_open+0x2bd>
c0003b58:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003b5c:	83 ec 0c             	sub    esp,0xc
c0003b5f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003b63:	68 00 02 00 00       	push   0x200
c0003b68:	e8 ff 1e 00 00       	call   c0005a6c <ff_memalloc>
c0003b6d:	83 c4 10             	add    esp,0x10
c0003b70:	89 c5                	mov    ebp,eax
c0003b72:	b8 11 00 00 00       	mov    eax,0x11
c0003b77:	85 ed                	test   ebp,ebp
c0003b79:	0f 84 61 02 00 00    	je     c0003de0 <f_open+0x2c3>
c0003b7f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003b83:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0003b87:	89 68 0c             	mov    DWORD PTR [eax+0xc],ebp
c0003b8a:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003b8e:	e8 0f fd ff ff       	call   c00038a2 <follow_path>
c0003b93:	85 c0                	test   eax,eax
c0003b95:	75 0c                	jne    c0003ba3 <f_open+0x86>
c0003b97:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0003b9c:	79 05                	jns    c0003ba3 <f_open+0x86>
c0003b9e:	b8 06 00 00 00       	mov    eax,0x6
c0003ba3:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0003ba9:	0f 84 de 00 00 00    	je     c0003c8d <f_open+0x170>
c0003baf:	85 c0                	test   eax,eax
c0003bb1:	74 1e                	je     c0003bd1 <f_open+0xb4>
c0003bb3:	83 f8 04             	cmp    eax,0x4
c0003bb6:	0f 85 06 02 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003bbc:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003bc0:	83 ce 08             	or     esi,0x8
c0003bc3:	e8 6e fd ff ff       	call   c0003936 <dir_register>
c0003bc8:	85 c0                	test   eax,eax
c0003bca:	74 2f                	je     c0003bfb <f_open+0xde>
c0003bcc:	e9 f1 01 00 00       	jmp    c0003dc2 <f_open+0x2a5>
c0003bd1:	b8 07 00 00 00       	mov    eax,0x7
c0003bd6:	f6 44 24 26 11       	test   BYTE PTR [esp+0x26],0x11
c0003bdb:	0f 85 e1 01 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003be1:	b8 08 00 00 00       	mov    eax,0x8
c0003be6:	f7 c7 04 00 00 00    	test   edi,0x4
c0003bec:	0f 85 d0 01 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003bf2:	83 e7 08             	and    edi,0x8
c0003bf5:	0f 84 bf 00 00 00    	je     c0003cba <f_open+0x19d>
c0003bfb:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0003bff:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c03:	89 ca                	mov    edx,ecx
c0003c05:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003c09:	8a 00                	mov    al,BYTE PTR [eax]
c0003c0b:	e8 b0 f4 ff ff       	call   c00030c0 <ld_clust.isra.0>
c0003c10:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003c14:	89 c7                	mov    edi,eax
c0003c16:	ba 00 00 21 50       	mov    edx,0x50210000
c0003c1b:	8d 41 0e             	lea    eax,[ecx+0xe]
c0003c1e:	e8 25 e1 ff ff       	call   c0001d48 <st_dword>
c0003c23:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003c27:	31 c9                	xor    ecx,ecx
c0003c29:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003c2d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c31:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003c35:	e8 af f4 ff ff       	call   c00030e9 <st_clust.isra.1>
c0003c3a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003c3e:	31 d2                	xor    edx,edx
c0003c40:	83 c0 1c             	add    eax,0x1c
c0003c43:	e8 00 e1 ff ff       	call   c0001d48 <st_dword>
c0003c48:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c4c:	85 ff                	test   edi,edi
c0003c4e:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003c52:	74 66                	je     c0003cba <f_open+0x19d>
c0003c54:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c58:	31 c9                	xor    ecx,ecx
c0003c5a:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0003c5d:	89 fa                	mov    edx,edi
c0003c5f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003c63:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003c67:	e8 a9 f7 ff ff       	call   c0003415 <remove_chain>
c0003c6c:	85 c0                	test   eax,eax
c0003c6e:	0f 85 4e 01 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003c74:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003c78:	4f                   	dec    edi
c0003c79:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c7d:	e8 c3 e5 ff ff       	call   c0002245 <move_window>
c0003c82:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003c86:	85 c0                	test   eax,eax
c0003c88:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0003c8b:	eb 27                	jmp    c0003cb4 <f_open+0x197>
c0003c8d:	85 c0                	test   eax,eax
c0003c8f:	0f 85 2d 01 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003c95:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003c99:	b8 04 00 00 00       	mov    eax,0x4
c0003c9e:	f6 c2 10             	test   dl,0x10
c0003ca1:	0f 85 1b 01 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003ca7:	83 e7 02             	and    edi,0x2
c0003caa:	74 0e                	je     c0003cba <f_open+0x19d>
c0003cac:	b8 07 00 00 00       	mov    eax,0x7
c0003cb1:	80 e2 01             	and    dl,0x1
c0003cb4:	0f 85 08 01 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003cba:	f7 c6 08 00 00 00    	test   esi,0x8
c0003cc0:	74 03                	je     c0003cc5 <f_open+0x1a8>
c0003cc2:	83 ce 40             	or     esi,0x40
c0003cc5:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003cc9:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0003ccd:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c0003cd0:	89 fa                	mov    edx,edi
c0003cd2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003cd6:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0003cd9:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c0003cdc:	8a 01                	mov    al,BYTE PTR [ecx]
c0003cde:	e8 dd f3 ff ff       	call   c00030c0 <ld_clust.isra.0>
c0003ce3:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003ce6:	8d 47 1c             	lea    eax,[edi+0x1c]
c0003ce9:	e8 3e e0 ff ff       	call   c0001d2c <ld_dword>
c0003cee:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003cf2:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003cf5:	89 0b                	mov    DWORD PTR [ebx],ecx
c0003cf7:	31 d2                	xor    edx,edx
c0003cf9:	66 8b 41 06          	mov    ax,WORD PTR [ecx+0x6]
c0003cfd:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c0003d01:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0003d05:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0003d0c:	89 f0                	mov    eax,esi
c0003d0e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0003d15:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0003d18:	b9 00 02 00 00       	mov    ecx,0x200
c0003d1d:	8d 43 28             	lea    eax,[ebx+0x28]
c0003d20:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003d24:	e8 37 e0 ff ff       	call   c0001d60 <mem_set>
c0003d29:	83 e6 20             	and    esi,0x20
c0003d2c:	75 07                	jne    c0003d35 <f_open+0x218>
c0003d2e:	31 c0                	xor    eax,eax
c0003d30:	e9 8d 00 00 00       	jmp    c0003dc2 <f_open+0x2a5>
c0003d35:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0003d38:	85 ff                	test   edi,edi
c0003d3a:	74 f2                	je     c0003d2e <f_open+0x211>
c0003d3c:	89 7b 14             	mov    DWORD PTR [ebx+0x14],edi
c0003d3f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d43:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0003d46:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0003d4a:	c1 e6 09             	shl    esi,0x9
c0003d4d:	39 fe                	cmp    esi,edi
c0003d4f:	73 1c                	jae    c0003d6d <f_open+0x250>
c0003d51:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003d53:	29 f7                	sub    edi,esi
c0003d55:	e8 b7 f3 ff ff       	call   c0003111 <get_fat.isra.2>
c0003d5a:	89 c2                	mov    edx,eax
c0003d5c:	83 f8 01             	cmp    eax,0x1
c0003d5f:	76 10                	jbe    c0003d71 <f_open+0x254>
c0003d61:	83 f8 ff             	cmp    eax,0xffffffff
c0003d64:	75 e7                	jne    c0003d4d <f_open+0x230>
c0003d66:	b8 01 00 00 00       	mov    eax,0x1
c0003d6b:	eb 09                	jmp    c0003d76 <f_open+0x259>
c0003d6d:	31 c0                	xor    eax,eax
c0003d6f:	eb 05                	jmp    c0003d76 <f_open+0x259>
c0003d71:	b8 02 00 00 00       	mov    eax,0x2
c0003d76:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0003d79:	85 c0                	test   eax,eax
c0003d7b:	75 45                	jne    c0003dc2 <f_open+0x2a5>
c0003d7d:	f7 c7 ff 01 00 00    	test   edi,0x1ff
c0003d83:	74 a9                	je     c0003d2e <f_open+0x211>
c0003d85:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0003d89:	89 f0                	mov    eax,esi
c0003d8b:	e8 d5 e1 ff ff       	call   c0001f65 <clst2sect>
c0003d90:	89 c2                	mov    edx,eax
c0003d92:	b8 02 00 00 00       	mov    eax,0x2
c0003d97:	85 d2                	test   edx,edx
c0003d99:	74 27                	je     c0003dc2 <f_open+0x2a5>
c0003d9b:	89 f9                	mov    ecx,edi
c0003d9d:	c1 e9 09             	shr    ecx,0x9
c0003da0:	8d 04 11             	lea    eax,[ecx+edx*1]
c0003da3:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003da6:	6a 01                	push   0x1
c0003da8:	50                   	push   eax
c0003da9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0003dad:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003db1:	50                   	push   eax
c0003db2:	e8 1d df ff ff       	call   c0001cd4 <disk_read>
c0003db7:	83 c4 10             	add    esp,0x10
c0003dba:	85 c0                	test   eax,eax
c0003dbc:	0f 95 c0             	setne  al
c0003dbf:	0f b6 c0             	movzx  eax,al
c0003dc2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003dc6:	83 ec 0c             	sub    esp,0xc
c0003dc9:	55                   	push   ebp
c0003dca:	e8 b5 1c 00 00       	call   c0005a84 <ff_memfree>
c0003dcf:	83 c4 10             	add    esp,0x10
c0003dd2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003dd6:	85 c0                	test   eax,eax
c0003dd8:	74 06                	je     c0003de0 <f_open+0x2c3>
c0003dda:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0003de0:	83 c4 5c             	add    esp,0x5c
c0003de3:	5b                   	pop    ebx
c0003de4:	5e                   	pop    esi
c0003de5:	5f                   	pop    edi
c0003de6:	5d                   	pop    ebp
c0003de7:	c3                   	ret    

c0003de8 <f_read>:
c0003de8:	55                   	push   ebp
c0003de9:	57                   	push   edi
c0003dea:	56                   	push   esi
c0003deb:	53                   	push   ebx
c0003dec:	83 ec 2c             	sub    esp,0x2c
c0003def:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003df3:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0003df7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0003dfd:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0003e01:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003e05:	89 d8                	mov    eax,ebx
c0003e07:	e8 8f e3 ff ff       	call   c000219b <validate>
c0003e0c:	89 c5                	mov    ebp,eax
c0003e0e:	85 c0                	test   eax,eax
c0003e10:	0f 85 c7 01 00 00    	jne    c0003fdd <f_read+0x1f5>
c0003e16:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0003e1a:	85 ed                	test   ebp,ebp
c0003e1c:	0f 85 bb 01 00 00    	jne    c0003fdd <f_read+0x1f5>
c0003e22:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c0003e26:	0f 84 ac 01 00 00    	je     c0003fd8 <f_read+0x1f0>
c0003e2c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0003e2f:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c0003e32:	89 c7                	mov    edi,eax
c0003e34:	39 f0                	cmp    eax,esi
c0003e36:	0f 86 ad 00 00 00    	jbe    c0003ee9 <f_read+0x101>
c0003e3c:	89 f7                	mov    edi,esi
c0003e3e:	e9 a6 00 00 00       	jmp    c0003ee9 <f_read+0x101>
c0003e43:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003e46:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c0003e4c:	0f 85 5b 01 00 00    	jne    c0003fad <f_read+0x1c5>
c0003e52:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003e56:	89 d1                	mov    ecx,edx
c0003e58:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0003e5c:	c1 e9 09             	shr    ecx,0x9
c0003e5f:	48                   	dec    eax
c0003e60:	21 c8                	and    eax,ecx
c0003e62:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003e66:	0f 84 8a 00 00 00    	je     c0003ef6 <f_read+0x10e>
c0003e6c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003e70:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003e73:	89 c8                	mov    eax,ecx
c0003e75:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003e79:	e8 e7 e0 ff ff       	call   c0001f65 <clst2sect>
c0003e7e:	85 c0                	test   eax,eax
c0003e80:	0f 84 88 00 00 00    	je     c0003f0e <f_read+0x126>
c0003e86:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0003e8a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003e8e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0003e92:	81 ff ff 01 00 00    	cmp    edi,0x1ff
c0003e98:	0f 86 bd 00 00 00    	jbe    c0003f5b <f_read+0x173>
c0003e9e:	89 fe                	mov    esi,edi
c0003ea0:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0003ea4:	c1 ee 09             	shr    esi,0x9
c0003ea7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003eab:	01 f2                	add    edx,esi
c0003ead:	39 c2                	cmp    edx,eax
c0003eaf:	76 06                	jbe    c0003eb7 <f_read+0xcf>
c0003eb1:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0003eb5:	89 c6                	mov    esi,eax
c0003eb7:	56                   	push   esi
c0003eb8:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0003ebc:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0003ec0:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0003ec4:	50                   	push   eax
c0003ec5:	e8 0a de ff ff       	call   c0001cd4 <disk_read>
c0003eca:	83 c4 10             	add    esp,0x10
c0003ecd:	85 c0                	test   eax,eax
c0003ecf:	75 50                	jne    c0003f21 <f_read+0x139>
c0003ed1:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0003ed5:	78 60                	js     c0003f37 <f_read+0x14f>
c0003ed7:	c1 e6 09             	shl    esi,0x9
c0003eda:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003ede:	29 f7                	sub    edi,esi
c0003ee0:	01 30                	add    DWORD PTR [eax],esi
c0003ee2:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0003ee6:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0003ee9:	85 ff                	test   edi,edi
c0003eeb:	0f 85 52 ff ff ff    	jne    c0003e43 <f_read+0x5b>
c0003ef1:	e9 e7 00 00 00       	jmp    c0003fdd <f_read+0x1f5>
c0003ef6:	85 d2                	test   edx,edx
c0003ef8:	75 05                	jne    c0003eff <f_read+0x117>
c0003efa:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0003efd:	eb 0a                	jmp    c0003f09 <f_read+0x121>
c0003eff:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003f02:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003f04:	e8 08 f2 ff ff       	call   c0003111 <get_fat.isra.2>
c0003f09:	83 f8 01             	cmp    eax,0x1
c0003f0c:	77 0e                	ja     c0003f1c <f_read+0x134>
c0003f0e:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0003f12:	bd 02 00 00 00       	mov    ebp,0x2
c0003f17:	e9 c1 00 00 00       	jmp    c0003fdd <f_read+0x1f5>
c0003f1c:	83 f8 ff             	cmp    eax,0xffffffff
c0003f1f:	75 0e                	jne    c0003f2f <f_read+0x147>
c0003f21:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0003f25:	bd 01 00 00 00       	mov    ebp,0x1
c0003f2a:	e9 ae 00 00 00       	jmp    c0003fdd <f_read+0x1f5>
c0003f2f:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003f32:	e9 35 ff ff ff       	jmp    c0003e6c <f_read+0x84>
c0003f37:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003f3a:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0003f3e:	39 f0                	cmp    eax,esi
c0003f40:	73 95                	jae    c0003ed7 <f_read+0xef>
c0003f42:	c1 e0 09             	shl    eax,0x9
c0003f45:	8d 53 28             	lea    edx,[ebx+0x28]
c0003f48:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0003f4c:	b9 00 02 00 00       	mov    ecx,0x200
c0003f51:	e8 f5 dd ff ff       	call   c0001d4b <mem_cpy>
c0003f56:	e9 7c ff ff ff       	jmp    c0003ed7 <f_read+0xef>
c0003f5b:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003f5e:	3b 44 24 04          	cmp    eax,DWORD PTR [esp+0x4]
c0003f62:	74 42                	je     c0003fa6 <f_read+0x1be>
c0003f64:	8d 73 28             	lea    esi,[ebx+0x28]
c0003f67:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0003f6b:	79 19                	jns    c0003f86 <f_read+0x19e>
c0003f6d:	6a 01                	push   0x1
c0003f6f:	50                   	push   eax
c0003f70:	56                   	push   esi
c0003f71:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0003f75:	50                   	push   eax
c0003f76:	e8 6f dd ff ff       	call   c0001cea <disk_write>
c0003f7b:	83 c4 10             	add    esp,0x10
c0003f7e:	85 c0                	test   eax,eax
c0003f80:	75 9f                	jne    c0003f21 <f_read+0x139>
c0003f82:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c0003f86:	6a 01                	push   0x1
c0003f88:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0003f8c:	56                   	push   esi
c0003f8d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0003f91:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0003f95:	50                   	push   eax
c0003f96:	e8 39 dd ff ff       	call   c0001cd4 <disk_read>
c0003f9b:	83 c4 10             	add    esp,0x10
c0003f9e:	85 c0                	test   eax,eax
c0003fa0:	0f 85 7b ff ff ff    	jne    c0003f21 <f_read+0x139>
c0003fa6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003faa:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003fad:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003fb0:	ba 00 02 00 00       	mov    edx,0x200
c0003fb5:	25 ff 01 00 00       	and    eax,0x1ff
c0003fba:	89 fe                	mov    esi,edi
c0003fbc:	29 c2                	sub    edx,eax
c0003fbe:	39 d7                	cmp    edi,edx
c0003fc0:	76 02                	jbe    c0003fc4 <f_read+0x1dc>
c0003fc2:	89 d6                	mov    esi,edx
c0003fc4:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c0003fc8:	89 f1                	mov    ecx,esi
c0003fca:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0003fce:	e8 78 dd ff ff       	call   c0001d4b <mem_cpy>
c0003fd3:	e9 02 ff ff ff       	jmp    c0003eda <f_read+0xf2>
c0003fd8:	bd 07 00 00 00       	mov    ebp,0x7
c0003fdd:	83 c4 2c             	add    esp,0x2c
c0003fe0:	89 e8                	mov    eax,ebp
c0003fe2:	5b                   	pop    ebx
c0003fe3:	5e                   	pop    esi
c0003fe4:	5f                   	pop    edi
c0003fe5:	5d                   	pop    ebp
c0003fe6:	c3                   	ret    

c0003fe7 <f_write>:
c0003fe7:	55                   	push   ebp
c0003fe8:	57                   	push   edi
c0003fe9:	56                   	push   esi
c0003fea:	53                   	push   ebx
c0003feb:	83 ec 2c             	sub    esp,0x2c
c0003fee:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003ff2:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0003ff6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0003ffc:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004000:	89 d8                	mov    eax,ebx
c0004002:	e8 94 e1 ff ff       	call   c000219b <validate>
c0004007:	89 c5                	mov    ebp,eax
c0004009:	85 c0                	test   eax,eax
c000400b:	0f 85 00 02 00 00    	jne    c0004211 <f_write+0x22a>
c0004011:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004015:	85 ed                	test   ebp,ebp
c0004017:	0f 85 f4 01 00 00    	jne    c0004211 <f_write+0x22a>
c000401d:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004021:	0f 84 e5 01 00 00    	je     c000420c <f_write+0x225>
c0004027:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000402a:	89 c7                	mov    edi,eax
c000402c:	03 7c 24 48          	add    edi,DWORD PTR [esp+0x48]
c0004030:	0f 83 ea 00 00 00    	jae    c0004120 <f_write+0x139>
c0004036:	f7 d0                	not    eax
c0004038:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000403c:	e9 df 00 00 00       	jmp    c0004120 <f_write+0x139>
c0004041:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004044:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c000404a:	0f 85 8b 01 00 00    	jne    c00041db <f_write+0x1f4>
c0004050:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004054:	89 d1                	mov    ecx,edx
c0004056:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c000405a:	c1 e9 09             	shr    ecx,0x9
c000405d:	48                   	dec    eax
c000405e:	21 c8                	and    eax,ecx
c0004060:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004064:	0f 84 c3 00 00 00    	je     c000412d <f_write+0x146>
c000406a:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c000406e:	0f 88 18 01 00 00    	js     c000418c <f_write+0x1a5>
c0004074:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004078:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000407b:	89 c8                	mov    eax,ecx
c000407d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004081:	e8 df de ff ff       	call   c0001f65 <clst2sect>
c0004086:	85 c0                	test   eax,eax
c0004088:	0f 84 c8 00 00 00    	je     c0004156 <f_write+0x16f>
c000408e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0004092:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004096:	01 c7                	add    edi,eax
c0004098:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00040a0:	0f 86 0d 01 00 00    	jbe    c00041b3 <f_write+0x1cc>
c00040a6:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00040aa:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00040ae:	c1 ee 09             	shr    esi,0x9
c00040b1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00040b5:	01 f2                	add    edx,esi
c00040b7:	39 c2                	cmp    edx,eax
c00040b9:	76 06                	jbe    c00040c1 <f_write+0xda>
c00040bb:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00040bf:	89 c6                	mov    esi,eax
c00040c1:	56                   	push   esi
c00040c2:	57                   	push   edi
c00040c3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00040c7:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00040cb:	50                   	push   eax
c00040cc:	e8 19 dc ff ff       	call   c0001cea <disk_write>
c00040d1:	83 c4 10             	add    esp,0x10
c00040d4:	85 c0                	test   eax,eax
c00040d6:	0f 85 8d 00 00 00    	jne    c0004169 <f_write+0x182>
c00040dc:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00040df:	29 fa                	sub    edx,edi
c00040e1:	39 f2                	cmp    edx,esi
c00040e3:	73 18                	jae    c00040fd <f_write+0x116>
c00040e5:	c1 e2 09             	shl    edx,0x9
c00040e8:	8d 43 28             	lea    eax,[ebx+0x28]
c00040eb:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c00040ef:	b9 00 02 00 00       	mov    ecx,0x200
c00040f4:	e8 52 dc ff ff       	call   c0001d4b <mem_cpy>
c00040f9:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c00040fd:	c1 e6 09             	shl    esi,0x9
c0004100:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c0004104:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004108:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000410c:	01 30                	add    DWORD PTR [eax],esi
c000410e:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0004111:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004114:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0004117:	39 f0                	cmp    eax,esi
c0004119:	73 02                	jae    c000411d <f_write+0x136>
c000411b:	89 f0                	mov    eax,esi
c000411d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004120:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0004125:	0f 85 16 ff ff ff    	jne    c0004041 <f_write+0x5a>
c000412b:	eb 1b                	jmp    c0004148 <f_write+0x161>
c000412d:	85 d2                	test   edx,edx
c000412f:	75 09                	jne    c000413a <f_write+0x153>
c0004131:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004134:	85 c0                	test   eax,eax
c0004136:	75 19                	jne    c0004151 <f_write+0x16a>
c0004138:	eb 03                	jmp    c000413d <f_write+0x156>
c000413a:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000413d:	89 d8                	mov    eax,ebx
c000413f:	e8 97 f1 ff ff       	call   c00032db <create_chain>
c0004144:	85 c0                	test   eax,eax
c0004146:	75 09                	jne    c0004151 <f_write+0x16a>
c0004148:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c000414c:	e9 c0 00 00 00       	jmp    c0004211 <f_write+0x22a>
c0004151:	83 f8 01             	cmp    eax,0x1
c0004154:	75 0e                	jne    c0004164 <f_write+0x17d>
c0004156:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c000415a:	bd 02 00 00 00       	mov    ebp,0x2
c000415f:	e9 ad 00 00 00       	jmp    c0004211 <f_write+0x22a>
c0004164:	83 f8 ff             	cmp    eax,0xffffffff
c0004167:	75 0e                	jne    c0004177 <f_write+0x190>
c0004169:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c000416d:	bd 01 00 00 00       	mov    ebp,0x1
c0004172:	e9 9a 00 00 00       	jmp    c0004211 <f_write+0x22a>
c0004177:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000417a:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000417e:	0f 85 e6 fe ff ff    	jne    c000406a <f_write+0x83>
c0004184:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004187:	e9 de fe ff ff       	jmp    c000406a <f_write+0x83>
c000418c:	6a 01                	push   0x1
c000418e:	8d 43 28             	lea    eax,[ebx+0x28]
c0004191:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004194:	50                   	push   eax
c0004195:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004199:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000419d:	50                   	push   eax
c000419e:	e8 47 db ff ff       	call   c0001cea <disk_write>
c00041a3:	83 c4 10             	add    esp,0x10
c00041a6:	85 c0                	test   eax,eax
c00041a8:	75 bf                	jne    c0004169 <f_write+0x182>
c00041aa:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c00041ae:	e9 c1 fe ff ff       	jmp    c0004074 <f_write+0x8d>
c00041b3:	39 7b 1c             	cmp    DWORD PTR [ebx+0x1c],edi
c00041b6:	74 20                	je     c00041d8 <f_write+0x1f1>
c00041b8:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00041bb:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c00041be:	76 18                	jbe    c00041d8 <f_write+0x1f1>
c00041c0:	6a 01                	push   0x1
c00041c2:	8d 43 28             	lea    eax,[ebx+0x28]
c00041c5:	57                   	push   edi
c00041c6:	50                   	push   eax
c00041c7:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00041cb:	50                   	push   eax
c00041cc:	e8 03 db ff ff       	call   c0001cd4 <disk_read>
c00041d1:	83 c4 10             	add    esp,0x10
c00041d4:	85 c0                	test   eax,eax
c00041d6:	75 91                	jne    c0004169 <f_write+0x182>
c00041d8:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c00041db:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00041de:	ba 00 02 00 00       	mov    edx,0x200
c00041e3:	25 ff 01 00 00       	and    eax,0x1ff
c00041e8:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00041ec:	29 c2                	sub    edx,eax
c00041ee:	39 d6                	cmp    esi,edx
c00041f0:	76 02                	jbe    c00041f4 <f_write+0x20d>
c00041f2:	89 d6                	mov    esi,edx
c00041f4:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c00041f8:	89 f1                	mov    ecx,esi
c00041fa:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00041fe:	e8 48 db ff ff       	call   c0001d4b <mem_cpy>
c0004203:	80 4b 10 80          	or     BYTE PTR [ebx+0x10],0x80
c0004207:	e9 f4 fe ff ff       	jmp    c0004100 <f_write+0x119>
c000420c:	bd 07 00 00 00       	mov    ebp,0x7
c0004211:	83 c4 2c             	add    esp,0x2c
c0004214:	89 e8                	mov    eax,ebp
c0004216:	5b                   	pop    ebx
c0004217:	5e                   	pop    esi
c0004218:	5f                   	pop    edi
c0004219:	5d                   	pop    ebp
c000421a:	c3                   	ret    

c000421b <f_sync>:
c000421b:	56                   	push   esi
c000421c:	53                   	push   ebx
c000421d:	83 ec 14             	sub    esp,0x14
c0004220:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004224:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004228:	89 d8                	mov    eax,ebx
c000422a:	e8 6c df ff ff       	call   c000219b <validate>
c000422f:	85 c0                	test   eax,eax
c0004231:	0f 85 93 00 00 00    	jne    c00042ca <f_sync+0xaf>
c0004237:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000423a:	f6 c2 40             	test   dl,0x40
c000423d:	0f 84 87 00 00 00    	je     c00042ca <f_sync+0xaf>
c0004243:	84 d2                	test   dl,dl
c0004245:	79 29                	jns    c0004270 <f_sync+0x55>
c0004247:	6a 01                	push   0x1
c0004249:	8d 43 28             	lea    eax,[ebx+0x28]
c000424c:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000424f:	50                   	push   eax
c0004250:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004254:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004258:	50                   	push   eax
c0004259:	e8 8c da ff ff       	call   c0001cea <disk_write>
c000425e:	83 c4 10             	add    esp,0x10
c0004261:	89 c2                	mov    edx,eax
c0004263:	b8 01 00 00 00       	mov    eax,0x1
c0004268:	85 d2                	test   edx,edx
c000426a:	75 5e                	jne    c00042ca <f_sync+0xaf>
c000426c:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c0004270:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0004273:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004277:	e8 c9 df ff ff       	call   c0002245 <move_window>
c000427c:	85 c0                	test   eax,eax
c000427e:	75 4a                	jne    c00042ca <f_sync+0xaf>
c0004280:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0004283:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0004287:	89 f2                	mov    edx,esi
c0004289:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c000428c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000428e:	e8 56 ee ff ff       	call   c00030e9 <st_clust.isra.1>
c0004293:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0004296:	8d 46 1c             	lea    eax,[esi+0x1c]
c0004299:	e8 aa da ff ff       	call   c0001d48 <st_dword>
c000429e:	8d 46 16             	lea    eax,[esi+0x16]
c00042a1:	ba 00 00 21 50       	mov    edx,0x50210000
c00042a6:	e8 9d da ff ff       	call   c0001d48 <st_dword>
c00042ab:	8d 46 12             	lea    eax,[esi+0x12]
c00042ae:	31 d2                	xor    edx,edx
c00042b0:	e8 8f da ff ff       	call   c0001d44 <st_word>
c00042b5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00042b9:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00042bd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00042c1:	e8 bf e9 ff ff       	call   c0002c85 <sync_fs>
c00042c6:	80 63 10 bf          	and    BYTE PTR [ebx+0x10],0xbf
c00042ca:	83 c4 14             	add    esp,0x14
c00042cd:	5b                   	pop    ebx
c00042ce:	5e                   	pop    esi
c00042cf:	c3                   	ret    

c00042d0 <f_close>:
c00042d0:	53                   	push   ebx
c00042d1:	83 ec 24             	sub    esp,0x24
c00042d4:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00042d8:	53                   	push   ebx
c00042d9:	e8 3d ff ff ff       	call   c000421b <f_sync>
c00042de:	83 c4 10             	add    esp,0x10
c00042e1:	85 c0                	test   eax,eax
c00042e3:	75 15                	jne    c00042fa <f_close+0x2a>
c00042e5:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00042e9:	89 d8                	mov    eax,ebx
c00042eb:	e8 ab de ff ff       	call   c000219b <validate>
c00042f0:	85 c0                	test   eax,eax
c00042f2:	75 06                	jne    c00042fa <f_close+0x2a>
c00042f4:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00042fa:	83 c4 18             	add    esp,0x18
c00042fd:	5b                   	pop    ebx
c00042fe:	c3                   	ret    

c00042ff <f_lseek>:
c00042ff:	55                   	push   ebp
c0004300:	57                   	push   edi
c0004301:	56                   	push   esi
c0004302:	53                   	push   ebx
c0004303:	83 ec 2c             	sub    esp,0x2c
c0004306:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000430a:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c000430e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004312:	89 d8                	mov    eax,ebx
c0004314:	e8 82 de ff ff       	call   c000219b <validate>
c0004319:	89 c5                	mov    ebp,eax
c000431b:	85 c0                	test   eax,eax
c000431d:	0f 85 79 01 00 00    	jne    c000449c <f_lseek+0x19d>
c0004323:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004327:	85 ed                	test   ebp,ebp
c0004329:	0f 85 6d 01 00 00    	jne    c000449c <f_lseek+0x19d>
c000432f:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004332:	39 f0                	cmp    eax,esi
c0004334:	73 08                	jae    c000433e <f_lseek+0x3f>
c0004336:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000433a:	75 02                	jne    c000433e <f_lseek+0x3f>
c000433c:	89 c6                	mov    esi,eax
c000433e:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0004341:	85 f6                	test   esi,esi
c0004343:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000434a:	75 07                	jne    c0004353 <f_lseek+0x54>
c000434c:	31 f6                	xor    esi,esi
c000434e:	e9 e2 00 00 00       	jmp    c0004435 <f_lseek+0x136>
c0004353:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004357:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c000435b:	c1 e7 09             	shl    edi,0x9
c000435e:	85 c9                	test   ecx,ecx
c0004360:	74 28                	je     c000438a <f_lseek+0x8b>
c0004362:	49                   	dec    ecx
c0004363:	31 d2                	xor    edx,edx
c0004365:	8d 46 ff             	lea    eax,[esi-0x1]
c0004368:	f7 f7                	div    edi
c000436a:	31 d2                	xor    edx,edx
c000436c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004370:	89 c8                	mov    eax,ecx
c0004372:	f7 f7                	div    edi
c0004374:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0004378:	72 10                	jb     c000438a <f_lseek+0x8b>
c000437a:	89 f8                	mov    eax,edi
c000437c:	f7 d8                	neg    eax
c000437e:	21 c1                	and    ecx,eax
c0004380:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0004383:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c0004386:	29 ce                	sub    esi,ecx
c0004388:	eb 3c                	jmp    c00043c6 <f_lseek+0xc7>
c000438a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000438d:	85 c0                	test   eax,eax
c000438f:	75 32                	jne    c00043c3 <f_lseek+0xc4>
c0004391:	31 d2                	xor    edx,edx
c0004393:	89 d8                	mov    eax,ebx
c0004395:	e8 41 ef ff ff       	call   c00032db <create_chain>
c000439a:	83 f8 01             	cmp    eax,0x1
c000439d:	75 0e                	jne    c00043ad <f_lseek+0xae>
c000439f:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00043a3:	bd 02 00 00 00       	mov    ebp,0x2
c00043a8:	e9 ef 00 00 00       	jmp    c000449c <f_lseek+0x19d>
c00043ad:	83 f8 ff             	cmp    eax,0xffffffff
c00043b0:	75 0e                	jne    c00043c0 <f_lseek+0xc1>
c00043b2:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00043b6:	bd 01 00 00 00       	mov    ebp,0x1
c00043bb:	e9 dc 00 00 00       	jmp    c000449c <f_lseek+0x19d>
c00043c0:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00043c3:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00043c6:	85 c0                	test   eax,eax
c00043c8:	74 82                	je     c000434c <f_lseek+0x4d>
c00043ca:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00043cd:	39 fe                	cmp    esi,edi
c00043cf:	76 3d                	jbe    c000440e <f_lseek+0x10f>
c00043d1:	01 fa                	add    edx,edi
c00043d3:	29 fe                	sub    esi,edi
c00043d5:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c00043d8:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00043dc:	89 c2                	mov    edx,eax
c00043de:	74 0d                	je     c00043ed <f_lseek+0xee>
c00043e0:	89 d8                	mov    eax,ebx
c00043e2:	e8 f4 ee ff ff       	call   c00032db <create_chain>
c00043e7:	85 c0                	test   eax,eax
c00043e9:	75 09                	jne    c00043f4 <f_lseek+0xf5>
c00043eb:	eb 1f                	jmp    c000440c <f_lseek+0x10d>
c00043ed:	8b 03                	mov    eax,DWORD PTR [ebx]
c00043ef:	e8 1d ed ff ff       	call   c0003111 <get_fat.isra.2>
c00043f4:	83 f8 ff             	cmp    eax,0xffffffff
c00043f7:	74 b9                	je     c00043b2 <f_lseek+0xb3>
c00043f9:	83 f8 01             	cmp    eax,0x1
c00043fc:	76 a1                	jbe    c000439f <f_lseek+0xa0>
c00043fe:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004402:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c0004405:	76 98                	jbe    c000439f <f_lseek+0xa0>
c0004407:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000440a:	eb be                	jmp    c00043ca <f_lseek+0xcb>
c000440c:	31 f6                	xor    esi,esi
c000440e:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0004411:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0004417:	0f 84 2f ff ff ff    	je     c000434c <f_lseek+0x4d>
c000441d:	89 c2                	mov    edx,eax
c000441f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004423:	e8 3d db ff ff       	call   c0001f65 <clst2sect>
c0004428:	85 c0                	test   eax,eax
c000442a:	0f 84 6f ff ff ff    	je     c000439f <f_lseek+0xa0>
c0004430:	c1 ee 09             	shr    esi,0x9
c0004433:	01 c6                	add    esi,eax
c0004435:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004438:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000443b:	76 07                	jbe    c0004444 <f_lseek+0x145>
c000443d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004440:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c0004444:	a9 ff 01 00 00       	test   eax,0x1ff
c0004449:	74 51                	je     c000449c <f_lseek+0x19d>
c000444b:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000444e:	39 f0                	cmp    eax,esi
c0004450:	74 4a                	je     c000449c <f_lseek+0x19d>
c0004452:	8d 7b 28             	lea    edi,[ebx+0x28]
c0004455:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0004459:	79 21                	jns    c000447c <f_lseek+0x17d>
c000445b:	6a 01                	push   0x1
c000445d:	50                   	push   eax
c000445e:	57                   	push   edi
c000445f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004463:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004467:	50                   	push   eax
c0004468:	e8 7d d8 ff ff       	call   c0001cea <disk_write>
c000446d:	83 c4 10             	add    esp,0x10
c0004470:	85 c0                	test   eax,eax
c0004472:	0f 85 3a ff ff ff    	jne    c00043b2 <f_lseek+0xb3>
c0004478:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c000447c:	6a 01                	push   0x1
c000447e:	56                   	push   esi
c000447f:	57                   	push   edi
c0004480:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004484:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004488:	50                   	push   eax
c0004489:	e8 46 d8 ff ff       	call   c0001cd4 <disk_read>
c000448e:	83 c4 10             	add    esp,0x10
c0004491:	85 c0                	test   eax,eax
c0004493:	0f 85 19 ff ff ff    	jne    c00043b2 <f_lseek+0xb3>
c0004499:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c000449c:	83 c4 2c             	add    esp,0x2c
c000449f:	89 e8                	mov    eax,ebp
c00044a1:	5b                   	pop    ebx
c00044a2:	5e                   	pop    esi
c00044a3:	5f                   	pop    edi
c00044a4:	5d                   	pop    ebp
c00044a5:	c3                   	ret    

c00044a6 <f_opendir>:
c00044a6:	56                   	push   esi
c00044a7:	b8 09 00 00 00       	mov    eax,0x9
c00044ac:	53                   	push   ebx
c00044ad:	83 ec 24             	sub    esp,0x24
c00044b0:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00044b4:	85 db                	test   ebx,ebx
c00044b6:	0f 84 af 00 00 00    	je     c000456b <f_opendir+0xc5>
c00044bc:	31 c9                	xor    ecx,ecx
c00044be:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00044c2:	8d 44 24 34          	lea    eax,[esp+0x34]
c00044c6:	e8 cd de ff ff       	call   c0002398 <mount_volume>
c00044cb:	85 c0                	test   eax,eax
c00044cd:	0f 85 92 00 00 00    	jne    c0004565 <f_opendir+0xbf>
c00044d3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00044d7:	83 ec 0c             	sub    esp,0xc
c00044da:	89 03                	mov    DWORD PTR [ebx],eax
c00044dc:	68 00 02 00 00       	push   0x200
c00044e1:	e8 86 15 00 00       	call   c0005a6c <ff_memalloc>
c00044e6:	83 c4 10             	add    esp,0x10
c00044e9:	89 c6                	mov    esi,eax
c00044eb:	b8 11 00 00 00       	mov    eax,0x11
c00044f0:	85 f6                	test   esi,esi
c00044f2:	74 77                	je     c000456b <f_opendir+0xc5>
c00044f4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00044f8:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00044fc:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00044ff:	89 d8                	mov    eax,ebx
c0004501:	e8 9c f3 ff ff       	call   c00038a2 <follow_path>
c0004506:	85 c0                	test   eax,eax
c0004508:	75 37                	jne    c0004541 <f_opendir+0x9b>
c000450a:	80 7b 2b 00          	cmp    BYTE PTR [ebx+0x2b],0x0
c000450e:	78 1c                	js     c000452c <f_opendir+0x86>
c0004510:	b8 05 00 00 00       	mov    eax,0x5
c0004515:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004519:	74 26                	je     c0004541 <f_opendir+0x9b>
c000451b:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000451e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004522:	8a 00                	mov    al,BYTE PTR [eax]
c0004524:	e8 97 eb ff ff       	call   c00030c0 <ld_clust.isra.0>
c0004529:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000452c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004530:	31 d2                	xor    edx,edx
c0004532:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0004536:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000453a:	89 d8                	mov    eax,ebx
c000453c:	e8 d2 ec ff ff       	call   c0003213 <dir_sdi>
c0004541:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004545:	83 ec 0c             	sub    esp,0xc
c0004548:	56                   	push   esi
c0004549:	e8 36 15 00 00       	call   c0005a84 <ff_memfree>
c000454e:	83 c4 10             	add    esp,0x10
c0004551:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004555:	83 f8 04             	cmp    eax,0x4
c0004558:	74 06                	je     c0004560 <f_opendir+0xba>
c000455a:	85 c0                	test   eax,eax
c000455c:	74 0d                	je     c000456b <f_opendir+0xc5>
c000455e:	eb 05                	jmp    c0004565 <f_opendir+0xbf>
c0004560:	b8 05 00 00 00       	mov    eax,0x5
c0004565:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000456b:	83 c4 24             	add    esp,0x24
c000456e:	5b                   	pop    ebx
c000456f:	5e                   	pop    esi
c0004570:	c3                   	ret    

c0004571 <f_closedir>:
c0004571:	53                   	push   ebx
c0004572:	83 ec 18             	sub    esp,0x18
c0004575:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004579:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000457d:	89 d8                	mov    eax,ebx
c000457f:	e8 17 dc ff ff       	call   c000219b <validate>
c0004584:	85 c0                	test   eax,eax
c0004586:	75 06                	jne    c000458e <f_closedir+0x1d>
c0004588:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000458e:	83 c4 18             	add    esp,0x18
c0004591:	5b                   	pop    ebx
c0004592:	c3                   	ret    

c0004593 <f_readdir>:
c0004593:	57                   	push   edi
c0004594:	56                   	push   esi
c0004595:	53                   	push   ebx
c0004596:	83 ec 20             	sub    esp,0x20
c0004599:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000459d:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00045a1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00045a5:	89 d8                	mov    eax,ebx
c00045a7:	e8 ef db ff ff       	call   c000219b <validate>
c00045ac:	85 c0                	test   eax,eax
c00045ae:	75 6e                	jne    c000461e <f_readdir+0x8b>
c00045b0:	85 ff                	test   edi,edi
c00045b2:	75 0b                	jne    c00045bf <f_readdir+0x2c>
c00045b4:	31 d2                	xor    edx,edx
c00045b6:	89 d8                	mov    eax,ebx
c00045b8:	e8 56 ec ff ff       	call   c0003213 <dir_sdi>
c00045bd:	eb 5f                	jmp    c000461e <f_readdir+0x8b>
c00045bf:	83 ec 0c             	sub    esp,0xc
c00045c2:	68 00 02 00 00       	push   0x200
c00045c7:	e8 a0 14 00 00       	call   c0005a6c <ff_memalloc>
c00045cc:	83 c4 10             	add    esp,0x10
c00045cf:	89 c6                	mov    esi,eax
c00045d1:	b8 11 00 00 00       	mov    eax,0x11
c00045d6:	85 f6                	test   esi,esi
c00045d8:	74 44                	je     c000461e <f_readdir+0x8b>
c00045da:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00045de:	31 d2                	xor    edx,edx
c00045e0:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00045e3:	89 d8                	mov    eax,ebx
c00045e5:	e8 1a f0 ff ff       	call   c0003604 <dir_read>
c00045ea:	a9 fb ff ff ff       	test   eax,0xfffffffb
c00045ef:	75 19                	jne    c000460a <f_readdir+0x77>
c00045f1:	89 fa                	mov    edx,edi
c00045f3:	89 d8                	mov    eax,ebx
c00045f5:	e8 e2 e8 ff ff       	call   c0002edc <get_fileinfo>
c00045fa:	31 d2                	xor    edx,edx
c00045fc:	89 d8                	mov    eax,ebx
c00045fe:	e8 9b ee ff ff       	call   c000349e <dir_next>
c0004603:	83 f8 04             	cmp    eax,0x4
c0004606:	75 02                	jne    c000460a <f_readdir+0x77>
c0004608:	31 c0                	xor    eax,eax
c000460a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000460e:	83 ec 0c             	sub    esp,0xc
c0004611:	56                   	push   esi
c0004612:	e8 6d 14 00 00       	call   c0005a84 <ff_memfree>
c0004617:	83 c4 10             	add    esp,0x10
c000461a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000461e:	83 c4 20             	add    esp,0x20
c0004621:	5b                   	pop    ebx
c0004622:	5e                   	pop    esi
c0004623:	5f                   	pop    edi
c0004624:	c3                   	ret    

c0004625 <f_stat>:
c0004625:	57                   	push   edi
c0004626:	31 c9                	xor    ecx,ecx
c0004628:	56                   	push   esi
c0004629:	53                   	push   ebx
c000462a:	83 ec 30             	sub    esp,0x30
c000462d:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0004631:	89 e2                	mov    edx,esp
c0004633:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004637:	e8 5c dd ff ff       	call   c0002398 <mount_volume>
c000463c:	89 c3                	mov    ebx,eax
c000463e:	85 c0                	test   eax,eax
c0004640:	75 59                	jne    c000469b <f_stat+0x76>
c0004642:	83 ec 0c             	sub    esp,0xc
c0004645:	bb 11 00 00 00       	mov    ebx,0x11
c000464a:	68 00 02 00 00       	push   0x200
c000464f:	e8 18 14 00 00       	call   c0005a6c <ff_memalloc>
c0004654:	83 c4 10             	add    esp,0x10
c0004657:	89 c6                	mov    esi,eax
c0004659:	85 c0                	test   eax,eax
c000465b:	74 3e                	je     c000469b <f_stat+0x76>
c000465d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004660:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0004664:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004667:	89 e0                	mov    eax,esp
c0004669:	e8 34 f2 ff ff       	call   c00038a2 <follow_path>
c000466e:	89 c3                	mov    ebx,eax
c0004670:	85 c0                	test   eax,eax
c0004672:	75 1b                	jne    c000468f <f_stat+0x6a>
c0004674:	80 7c 24 2b 00       	cmp    BYTE PTR [esp+0x2b],0x0
c0004679:	78 0f                	js     c000468a <f_stat+0x65>
c000467b:	85 ff                	test   edi,edi
c000467d:	74 10                	je     c000468f <f_stat+0x6a>
c000467f:	89 fa                	mov    edx,edi
c0004681:	89 e0                	mov    eax,esp
c0004683:	e8 54 e8 ff ff       	call   c0002edc <get_fileinfo>
c0004688:	eb 05                	jmp    c000468f <f_stat+0x6a>
c000468a:	bb 06 00 00 00       	mov    ebx,0x6
c000468f:	83 ec 0c             	sub    esp,0xc
c0004692:	56                   	push   esi
c0004693:	e8 ec 13 00 00       	call   c0005a84 <ff_memfree>
c0004698:	83 c4 10             	add    esp,0x10
c000469b:	83 c4 30             	add    esp,0x30
c000469e:	89 d8                	mov    eax,ebx
c00046a0:	5b                   	pop    ebx
c00046a1:	5e                   	pop    esi
c00046a2:	5f                   	pop    edi
c00046a3:	c3                   	ret    

c00046a4 <f_getfree>:
c00046a4:	55                   	push   ebp
c00046a5:	31 c9                	xor    ecx,ecx
c00046a7:	57                   	push   edi
c00046a8:	56                   	push   esi
c00046a9:	53                   	push   ebx
c00046aa:	83 ec 2c             	sub    esp,0x2c
c00046ad:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00046b1:	8d 44 24 40          	lea    eax,[esp+0x40]
c00046b5:	e8 de dc ff ff       	call   c0002398 <mount_volume>
c00046ba:	89 c7                	mov    edi,eax
c00046bc:	85 c0                	test   eax,eax
c00046be:	0f 85 d8 00 00 00    	jne    c000479c <f_getfree+0xf8>
c00046c4:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00046c8:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00046cc:	89 30                	mov    DWORD PTR [eax],esi
c00046ce:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00046d1:	8b 6e 18             	mov    ebp,DWORD PTR [esi+0x18]
c00046d4:	8d 55 fe             	lea    edx,[ebp-0x2]
c00046d7:	39 d0                	cmp    eax,edx
c00046d9:	77 0b                	ja     c00046e6 <f_getfree+0x42>
c00046db:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c00046df:	89 01                	mov    DWORD PTR [ecx],eax
c00046e1:	e9 b6 00 00 00       	jmp    c000479c <f_getfree+0xf8>
c00046e6:	80 3e 01             	cmp    BYTE PTR [esi],0x1
c00046e9:	75 29                	jne    c0004714 <f_getfree+0x70>
c00046eb:	bd 02 00 00 00       	mov    ebp,0x2
c00046f0:	31 db                	xor    ebx,ebx
c00046f2:	89 ea                	mov    edx,ebp
c00046f4:	89 f0                	mov    eax,esi
c00046f6:	e8 16 ea ff ff       	call   c0003111 <get_fat.isra.2>
c00046fb:	83 f8 ff             	cmp    eax,0xffffffff
c00046fe:	74 7b                	je     c000477b <f_getfree+0xd7>
c0004700:	83 f8 01             	cmp    eax,0x1
c0004703:	74 7d                	je     c0004782 <f_getfree+0xde>
c0004705:	83 d3 00             	adc    ebx,0x0
c0004708:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000470c:	45                   	inc    ebp
c000470d:	39 68 18             	cmp    DWORD PTR [eax+0x18],ebp
c0004710:	77 e0                	ja     c00046f2 <f_getfree+0x4e>
c0004712:	eb 77                	jmp    c000478b <f_getfree+0xe7>
c0004714:	8b 56 24             	mov    edx,DWORD PTR [esi+0x24]
c0004717:	31 db                	xor    ebx,ebx
c0004719:	31 f6                	xor    esi,esi
c000471b:	85 f6                	test   esi,esi
c000471d:	75 18                	jne    c0004737 <f_getfree+0x93>
c000471f:	8d 42 01             	lea    eax,[edx+0x1]
c0004722:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004726:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000472a:	e8 16 db ff ff       	call   c0002245 <move_window>
c000472f:	85 c0                	test   eax,eax
c0004731:	75 56                	jne    c0004789 <f_getfree+0xe5>
c0004733:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004737:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000473b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000473f:	8d 44 31 34          	lea    eax,[ecx+esi*1+0x34]
c0004743:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c0004746:	75 11                	jne    c0004759 <f_getfree+0xb5>
c0004748:	e8 d2 d5 ff ff       	call   c0001d1f <ld_word>
c000474d:	66 83 f8 01          	cmp    ax,0x1
c0004751:	83 d3 00             	adc    ebx,0x0
c0004754:	83 c6 02             	add    esi,0x2
c0004757:	eb 13                	jmp    c000476c <f_getfree+0xc8>
c0004759:	e8 ce d5 ff ff       	call   c0001d2c <ld_dword>
c000475e:	25 ff ff ff 0f       	and    eax,0xfffffff
c0004763:	83 f8 01             	cmp    eax,0x1
c0004766:	83 d3 00             	adc    ebx,0x0
c0004769:	83 c6 04             	add    esi,0x4
c000476c:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0004772:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004776:	4d                   	dec    ebp
c0004777:	75 a2                	jne    c000471b <f_getfree+0x77>
c0004779:	eb 10                	jmp    c000478b <f_getfree+0xe7>
c000477b:	bf 01 00 00 00       	mov    edi,0x1
c0004780:	eb 09                	jmp    c000478b <f_getfree+0xe7>
c0004782:	bf 02 00 00 00       	mov    edi,0x2
c0004787:	eb 02                	jmp    c000478b <f_getfree+0xe7>
c0004789:	89 c7                	mov    edi,eax
c000478b:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000478f:	89 18                	mov    DWORD PTR [eax],ebx
c0004791:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004795:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c0004798:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c000479c:	83 c4 2c             	add    esp,0x2c
c000479f:	89 f8                	mov    eax,edi
c00047a1:	5b                   	pop    ebx
c00047a2:	5e                   	pop    esi
c00047a3:	5f                   	pop    edi
c00047a4:	5d                   	pop    ebp
c00047a5:	c3                   	ret    

c00047a6 <f_truncate>:
c00047a6:	56                   	push   esi
c00047a7:	53                   	push   ebx
c00047a8:	83 ec 14             	sub    esp,0x14
c00047ab:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00047af:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00047b3:	89 d8                	mov    eax,ebx
c00047b5:	e8 e1 d9 ff ff       	call   c000219b <validate>
c00047ba:	89 c6                	mov    esi,eax
c00047bc:	85 c0                	test   eax,eax
c00047be:	0f 85 be 00 00 00    	jne    c0004882 <f_truncate+0xdc>
c00047c4:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c00047c8:	85 f6                	test   esi,esi
c00047ca:	0f 85 b2 00 00 00    	jne    c0004882 <f_truncate+0xdc>
c00047d0:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00047d4:	0f 84 a3 00 00 00    	je     c000487d <f_truncate+0xd7>
c00047da:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00047dd:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c00047e0:	0f 83 9c 00 00 00    	jae    c0004882 <f_truncate+0xdc>
c00047e6:	85 c0                	test   eax,eax
c00047e8:	75 15                	jne    c00047ff <f_truncate+0x59>
c00047ea:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00047ed:	31 c9                	xor    ecx,ecx
c00047ef:	89 d8                	mov    eax,ebx
c00047f1:	e8 1f ec ff ff       	call   c0003415 <remove_chain>
c00047f6:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00047fd:	eb 35                	jmp    c0004834 <f_truncate+0x8e>
c00047ff:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004802:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004804:	e8 08 e9 ff ff       	call   c0003111 <get_fat.isra.2>
c0004809:	89 c2                	mov    edx,eax
c000480b:	b8 01 00 00 00       	mov    eax,0x1
c0004810:	83 fa ff             	cmp    edx,0xffffffff
c0004813:	74 1f                	je     c0004834 <f_truncate+0x8e>
c0004815:	b8 02 00 00 00       	mov    eax,0x2
c000481a:	83 fa 01             	cmp    edx,0x1
c000481d:	74 15                	je     c0004834 <f_truncate+0x8e>
c000481f:	31 c0                	xor    eax,eax
c0004821:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004825:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c0004828:	76 0a                	jbe    c0004834 <f_truncate+0x8e>
c000482a:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000482d:	89 d8                	mov    eax,ebx
c000482f:	e8 e1 eb ff ff       	call   c0003415 <remove_chain>
c0004834:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004837:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000483a:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000483d:	83 ca 40             	or     edx,0x40
c0004840:	85 c0                	test   eax,eax
c0004842:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c0004845:	75 2f                	jne    c0004876 <f_truncate+0xd0>
c0004847:	84 d2                	test   dl,dl
c0004849:	79 37                	jns    c0004882 <f_truncate+0xdc>
c000484b:	6a 01                	push   0x1
c000484d:	8d 43 28             	lea    eax,[ebx+0x28]
c0004850:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004853:	50                   	push   eax
c0004854:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004858:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000485c:	50                   	push   eax
c000485d:	e8 88 d4 ff ff       	call   c0001cea <disk_write>
c0004862:	83 c4 10             	add    esp,0x10
c0004865:	85 c0                	test   eax,eax
c0004867:	75 08                	jne    c0004871 <f_truncate+0xcb>
c0004869:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c000486d:	31 f6                	xor    esi,esi
c000486f:	eb 11                	jmp    c0004882 <f_truncate+0xdc>
c0004871:	b8 01 00 00 00       	mov    eax,0x1
c0004876:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c0004879:	89 c6                	mov    esi,eax
c000487b:	eb 05                	jmp    c0004882 <f_truncate+0xdc>
c000487d:	be 07 00 00 00       	mov    esi,0x7
c0004882:	89 f0                	mov    eax,esi
c0004884:	83 c4 14             	add    esp,0x14
c0004887:	5b                   	pop    ebx
c0004888:	5e                   	pop    esi
c0004889:	c3                   	ret    

c000488a <f_unlink>:
c000488a:	55                   	push   ebp
c000488b:	b9 02 00 00 00       	mov    ecx,0x2
c0004890:	57                   	push   edi
c0004891:	56                   	push   esi
c0004892:	53                   	push   ebx
c0004893:	81 ec 8c 00 00 00    	sub    esp,0x8c
c0004899:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000489d:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c00048a4:	e8 ef da ff ff       	call   c0002398 <mount_volume>
c00048a9:	85 c0                	test   eax,eax
c00048ab:	0f 85 f0 00 00 00    	jne    c00049a1 <f_unlink+0x117>
c00048b1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00048b5:	83 ec 0c             	sub    esp,0xc
c00048b8:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00048bc:	68 00 02 00 00       	push   0x200
c00048c1:	e8 a6 11 00 00       	call   c0005a6c <ff_memalloc>
c00048c6:	83 c4 10             	add    esp,0x10
c00048c9:	89 c3                	mov    ebx,eax
c00048cb:	b8 11 00 00 00       	mov    eax,0x11
c00048d0:	85 db                	test   ebx,ebx
c00048d2:	0f 84 c9 00 00 00    	je     c00049a1 <f_unlink+0x117>
c00048d8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00048dc:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c00048e3:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00048e6:	8d 44 24 20          	lea    eax,[esp+0x20]
c00048ea:	e8 b3 ef ff ff       	call   c00038a2 <follow_path>
c00048ef:	85 c0                	test   eax,eax
c00048f1:	0f 85 96 00 00 00    	jne    c000498d <f_unlink+0x103>
c00048f7:	b8 06 00 00 00       	mov    eax,0x6
c00048fc:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0004901:	0f 88 86 00 00 00    	js     c000498d <f_unlink+0x103>
c0004907:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c000490c:	f7 c5 01 00 00 00    	test   ebp,0x1
c0004912:	74 07                	je     c000491b <f_unlink+0x91>
c0004914:	b8 07 00 00 00       	mov    eax,0x7
c0004919:	eb 72                	jmp    c000498d <f_unlink+0x103>
c000491b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000491f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004923:	8a 07                	mov    al,BYTE PTR [edi]
c0004925:	e8 96 e7 ff ff       	call   c00030c0 <ld_clust.isra.0>
c000492a:	83 e5 10             	and    ebp,0x10
c000492d:	89 c6                	mov    esi,eax
c000492f:	75 0f                	jne    c0004940 <f_unlink+0xb6>
c0004931:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004935:	e8 e7 ed ff ff       	call   c0003721 <dir_remove>
c000493a:	85 c0                	test   eax,eax
c000493c:	74 2f                	je     c000496d <f_unlink+0xe3>
c000493e:	eb 4d                	jmp    c000498d <f_unlink+0x103>
c0004940:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004944:	31 d2                	xor    edx,edx
c0004946:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c000494a:	8d 44 24 50          	lea    eax,[esp+0x50]
c000494e:	e8 c0 e8 ff ff       	call   c0003213 <dir_sdi>
c0004953:	85 c0                	test   eax,eax
c0004955:	75 36                	jne    c000498d <f_unlink+0x103>
c0004957:	31 d2                	xor    edx,edx
c0004959:	8d 44 24 50          	lea    eax,[esp+0x50]
c000495d:	e8 a2 ec ff ff       	call   c0003604 <dir_read>
c0004962:	85 c0                	test   eax,eax
c0004964:	74 ae                	je     c0004914 <f_unlink+0x8a>
c0004966:	83 f8 04             	cmp    eax,0x4
c0004969:	75 22                	jne    c000498d <f_unlink+0x103>
c000496b:	eb c4                	jmp    c0004931 <f_unlink+0xa7>
c000496d:	85 f6                	test   esi,esi
c000496f:	75 0b                	jne    c000497c <f_unlink+0xf2>
c0004971:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004975:	e8 0b e3 ff ff       	call   c0002c85 <sync_fs>
c000497a:	eb 11                	jmp    c000498d <f_unlink+0x103>
c000497c:	31 c9                	xor    ecx,ecx
c000497e:	89 f2                	mov    edx,esi
c0004980:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004984:	e8 8c ea ff ff       	call   c0003415 <remove_chain>
c0004989:	85 c0                	test   eax,eax
c000498b:	74 e4                	je     c0004971 <f_unlink+0xe7>
c000498d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004991:	83 ec 0c             	sub    esp,0xc
c0004994:	53                   	push   ebx
c0004995:	e8 ea 10 00 00       	call   c0005a84 <ff_memfree>
c000499a:	83 c4 10             	add    esp,0x10
c000499d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00049a1:	81 c4 8c 00 00 00    	add    esp,0x8c
c00049a7:	5b                   	pop    ebx
c00049a8:	5e                   	pop    esi
c00049a9:	5f                   	pop    edi
c00049aa:	5d                   	pop    ebp
c00049ab:	c3                   	ret    

c00049ac <f_mkdir>:
c00049ac:	57                   	push   edi
c00049ad:	b9 02 00 00 00       	mov    ecx,0x2
c00049b2:	56                   	push   esi
c00049b3:	53                   	push   ebx
c00049b4:	83 ec 50             	sub    esp,0x50
c00049b7:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00049bb:	8d 44 24 60          	lea    eax,[esp+0x60]
c00049bf:	e8 d4 d9 ff ff       	call   c0002398 <mount_volume>
c00049c4:	89 c3                	mov    ebx,eax
c00049c6:	85 c0                	test   eax,eax
c00049c8:	0f 85 70 01 00 00    	jne    c0004b3e <f_mkdir+0x192>
c00049ce:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00049d2:	bb 11 00 00 00       	mov    ebx,0x11
c00049d7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00049db:	83 ec 0c             	sub    esp,0xc
c00049de:	68 00 02 00 00       	push   0x200
c00049e3:	e8 84 10 00 00       	call   c0005a6c <ff_memalloc>
c00049e8:	83 c4 10             	add    esp,0x10
c00049eb:	89 c7                	mov    edi,eax
c00049ed:	85 c0                	test   eax,eax
c00049ef:	0f 84 49 01 00 00    	je     c0004b3e <f_mkdir+0x192>
c00049f5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00049f9:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00049fd:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0004a00:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004a04:	e8 99 ee ff ff       	call   c00038a2 <follow_path>
c0004a09:	89 c3                	mov    ebx,eax
c0004a0b:	85 c0                	test   eax,eax
c0004a0d:	74 3e                	je     c0004a4d <f_mkdir+0xa1>
c0004a0f:	83 f8 04             	cmp    eax,0x4
c0004a12:	75 3e                	jne    c0004a52 <f_mkdir+0xa6>
c0004a14:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a18:	31 d2                	xor    edx,edx
c0004a1a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004a1e:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004a22:	e8 b4 e8 ff ff       	call   c00032db <create_chain>
c0004a27:	89 c6                	mov    esi,eax
c0004a29:	85 c0                	test   eax,eax
c0004a2b:	74 0c                	je     c0004a39 <f_mkdir+0x8d>
c0004a2d:	bb 02 00 00 00       	mov    ebx,0x2
c0004a32:	83 f8 01             	cmp    eax,0x1
c0004a35:	74 07                	je     c0004a3e <f_mkdir+0x92>
c0004a37:	eb 2a                	jmp    c0004a63 <f_mkdir+0xb7>
c0004a39:	bb 07 00 00 00       	mov    ebx,0x7
c0004a3e:	31 c9                	xor    ecx,ecx
c0004a40:	89 f2                	mov    edx,esi
c0004a42:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004a46:	e8 ca e9 ff ff       	call   c0003415 <remove_chain>
c0004a4b:	eb 05                	jmp    c0004a52 <f_mkdir+0xa6>
c0004a4d:	bb 08 00 00 00       	mov    ebx,0x8
c0004a52:	83 ec 0c             	sub    esp,0xc
c0004a55:	57                   	push   edi
c0004a56:	e8 29 10 00 00       	call   c0005a84 <ff_memfree>
c0004a5b:	83 c4 10             	add    esp,0x10
c0004a5e:	e9 db 00 00 00       	jmp    c0004b3e <f_mkdir+0x192>
c0004a63:	bb 01 00 00 00       	mov    ebx,0x1
c0004a68:	83 f8 ff             	cmp    eax,0xffffffff
c0004a6b:	74 d1                	je     c0004a3e <f_mkdir+0x92>
c0004a6d:	89 f2                	mov    edx,esi
c0004a6f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a73:	e8 73 dd ff ff       	call   c00027eb <dir_clear>
c0004a78:	89 c3                	mov    ebx,eax
c0004a7a:	85 c0                	test   eax,eax
c0004a7c:	75 c0                	jne    c0004a3e <f_mkdir+0x92>
c0004a7e:	b9 0b 00 00 00       	mov    ecx,0xb
c0004a83:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a87:	ba 20 00 00 00       	mov    edx,0x20
c0004a8c:	83 c0 34             	add    eax,0x34
c0004a8f:	e8 cc d2 ff ff       	call   c0001d60 <mem_set>
c0004a94:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a98:	ba 00 00 21 50       	mov    edx,0x50210000
c0004a9d:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004aa1:	c6 40 3f 10          	mov    BYTE PTR [eax+0x3f],0x10
c0004aa5:	83 c0 4a             	add    eax,0x4a
c0004aa8:	e8 9b d2 ff ff       	call   c0001d48 <st_dword>
c0004aad:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ab1:	89 f1                	mov    ecx,esi
c0004ab3:	8d 50 34             	lea    edx,[eax+0x34]
c0004ab6:	e8 2e e6 ff ff       	call   c00030e9 <st_clust.isra.1>
c0004abb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004abf:	b9 20 00 00 00       	mov    ecx,0x20
c0004ac4:	8d 50 34             	lea    edx,[eax+0x34]
c0004ac7:	83 c0 54             	add    eax,0x54
c0004aca:	e8 7c d2 ff ff       	call   c0001d4b <mem_cpy>
c0004acf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ad3:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004ad7:	8d 50 54             	lea    edx,[eax+0x54]
c0004ada:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004ade:	e8 06 e6 ff ff       	call   c00030e9 <st_clust.isra.1>
c0004ae3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ae7:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004aeb:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004aef:	e8 42 ee ff ff       	call   c0003936 <dir_register>
c0004af4:	89 c3                	mov    ebx,eax
c0004af6:	85 c0                	test   eax,eax
c0004af8:	0f 85 40 ff ff ff    	jne    c0004a3e <f_mkdir+0x92>
c0004afe:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b02:	ba 00 00 21 50       	mov    edx,0x50210000
c0004b07:	83 c0 16             	add    eax,0x16
c0004b0a:	e8 39 d2 ff ff       	call   c0001d48 <st_dword>
c0004b0f:	89 f1                	mov    ecx,esi
c0004b11:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004b15:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b19:	e8 cb e5 ff ff       	call   c00030e9 <st_clust.isra.1>
c0004b1e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b22:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004b26:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b2a:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004b2e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b32:	e8 4e e1 ff ff       	call   c0002c85 <sync_fs>
c0004b37:	89 c3                	mov    ebx,eax
c0004b39:	e9 14 ff ff ff       	jmp    c0004a52 <f_mkdir+0xa6>
c0004b3e:	83 c4 50             	add    esp,0x50
c0004b41:	89 d8                	mov    eax,ebx
c0004b43:	5b                   	pop    ebx
c0004b44:	5e                   	pop    esi
c0004b45:	5f                   	pop    edi
c0004b46:	c3                   	ret    

c0004b47 <f_rename>:
c0004b47:	57                   	push   edi
c0004b48:	56                   	push   esi
c0004b49:	53                   	push   ebx
c0004b4a:	81 ec a0 00 00 00    	sub    esp,0xa0
c0004b50:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004b57:	e8 f2 d5 ff ff       	call   c000214e <get_ldnumber>
c0004b5c:	b9 02 00 00 00       	mov    ecx,0x2
c0004b61:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004b65:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004b6c:	e8 27 d8 ff ff       	call   c0002398 <mount_volume>
c0004b71:	85 c0                	test   eax,eax
c0004b73:	0f 85 7a 01 00 00    	jne    c0004cf3 <f_rename+0x1ac>
c0004b79:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004b7d:	83 ec 0c             	sub    esp,0xc
c0004b80:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0004b84:	68 00 02 00 00       	push   0x200
c0004b89:	e8 de 0e 00 00       	call   c0005a6c <ff_memalloc>
c0004b8e:	83 c4 10             	add    esp,0x10
c0004b91:	89 c6                	mov    esi,eax
c0004b93:	b8 11 00 00 00       	mov    eax,0x11
c0004b98:	85 f6                	test   esi,esi
c0004b9a:	0f 84 53 01 00 00    	je     c0004cf3 <f_rename+0x1ac>
c0004ba0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ba4:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0004bab:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004bae:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004bb2:	e8 eb ec ff ff       	call   c00038a2 <follow_path>
c0004bb7:	85 c0                	test   eax,eax
c0004bb9:	0f 85 20 01 00 00    	jne    c0004cdf <f_rename+0x198>
c0004bbf:	b8 06 00 00 00       	mov    eax,0x6
c0004bc4:	f6 44 24 6b a0       	test   BYTE PTR [esp+0x6b],0xa0
c0004bc9:	0f 85 10 01 00 00    	jne    c0004cdf <f_rename+0x198>
c0004bcf:	b9 20 00 00 00       	mov    ecx,0x20
c0004bd4:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004bd8:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004bdc:	e8 6a d1 ff ff       	call   c0001d4b <mem_cpy>
c0004be1:	b9 30 00 00 00       	mov    ecx,0x30
c0004be6:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004bea:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004bee:	e8 58 d1 ff ff       	call   c0001d4b <mem_cpy>
c0004bf3:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004bfa:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004bfe:	e8 9f ec ff ff       	call   c00038a2 <follow_path>
c0004c03:	85 c0                	test   eax,eax
c0004c05:	75 20                	jne    c0004c27 <f_rename+0xe0>
c0004c07:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004c0b:	b8 08 00 00 00       	mov    eax,0x8
c0004c10:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004c14:	0f 85 c5 00 00 00    	jne    c0004cdf <f_rename+0x198>
c0004c1a:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004c1e:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004c25:	eb 03                	jmp    c0004c2a <f_rename+0xe3>
c0004c27:	83 f8 04             	cmp    eax,0x4
c0004c2a:	0f 85 af 00 00 00    	jne    c0004cdf <f_rename+0x198>
c0004c30:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004c34:	e8 fd ec ff ff       	call   c0003936 <dir_register>
c0004c39:	85 c0                	test   eax,eax
c0004c3b:	0f 85 9e 00 00 00    	jne    c0004cdf <f_rename+0x198>
c0004c41:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004c48:	b9 13 00 00 00       	mov    ecx,0x13
c0004c4d:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004c50:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004c54:	e8 f2 d0 ff ff       	call   c0001d4b <mem_cpy>
c0004c59:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004c5d:	a8 10                	test   al,0x10
c0004c5f:	75 03                	jne    c0004c64 <f_rename+0x11d>
c0004c61:	83 c8 20             	or     eax,0x20
c0004c64:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004c67:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c6b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004c6f:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004c73:	74 54                	je     c0004cc9 <f_rename+0x182>
c0004c75:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004c79:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004c7d:	74 4a                	je     c0004cc9 <f_rename+0x182>
c0004c7f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004c83:	89 da                	mov    edx,ebx
c0004c85:	8a 07                	mov    al,BYTE PTR [edi]
c0004c87:	e8 34 e4 ff ff       	call   c00030c0 <ld_clust.isra.0>
c0004c8c:	89 c2                	mov    edx,eax
c0004c8e:	89 f8                	mov    eax,edi
c0004c90:	e8 d0 d2 ff ff       	call   c0001f65 <clst2sect>
c0004c95:	89 c2                	mov    edx,eax
c0004c97:	b8 02 00 00 00       	mov    eax,0x2
c0004c9c:	85 d2                	test   edx,edx
c0004c9e:	74 3f                	je     c0004cdf <f_rename+0x198>
c0004ca0:	89 f8                	mov    eax,edi
c0004ca2:	e8 9e d5 ff ff       	call   c0002245 <move_window>
c0004ca7:	85 c0                	test   eax,eax
c0004ca9:	75 34                	jne    c0004cdf <f_rename+0x198>
c0004cab:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004caf:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c0004cb3:	75 14                	jne    c0004cc9 <f_rename+0x182>
c0004cb5:	8d 50 54             	lea    edx,[eax+0x54]
c0004cb8:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0004cbc:	e8 28 e4 ff ff       	call   c00030e9 <st_clust.isra.1>
c0004cc1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004cc5:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004cc9:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004ccd:	e8 4f ea ff ff       	call   c0003721 <dir_remove>
c0004cd2:	85 c0                	test   eax,eax
c0004cd4:	75 09                	jne    c0004cdf <f_rename+0x198>
c0004cd6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004cda:	e8 a6 df ff ff       	call   c0002c85 <sync_fs>
c0004cdf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004ce3:	83 ec 0c             	sub    esp,0xc
c0004ce6:	56                   	push   esi
c0004ce7:	e8 98 0d 00 00       	call   c0005a84 <ff_memfree>
c0004cec:	83 c4 10             	add    esp,0x10
c0004cef:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004cf3:	81 c4 a0 00 00 00    	add    esp,0xa0
c0004cf9:	5b                   	pop    ebx
c0004cfa:	5e                   	pop    esi
c0004cfb:	5f                   	pop    edi
c0004cfc:	c3                   	ret    

c0004cfd <f_chmod>:
c0004cfd:	57                   	push   edi
c0004cfe:	b9 02 00 00 00       	mov    ecx,0x2
c0004d03:	56                   	push   esi
c0004d04:	53                   	push   ebx
c0004d05:	83 ec 50             	sub    esp,0x50
c0004d08:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0004d0c:	8b 7c 24 68          	mov    edi,DWORD PTR [esp+0x68]
c0004d10:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004d14:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004d18:	e8 7b d6 ff ff       	call   c0002398 <mount_volume>
c0004d1d:	85 c0                	test   eax,eax
c0004d1f:	75 7e                	jne    c0004d9f <f_chmod+0xa2>
c0004d21:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d25:	83 ec 0c             	sub    esp,0xc
c0004d28:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004d2c:	68 00 02 00 00       	push   0x200
c0004d31:	e8 36 0d 00 00       	call   c0005a6c <ff_memalloc>
c0004d36:	83 c4 10             	add    esp,0x10
c0004d39:	89 c6                	mov    esi,eax
c0004d3b:	b8 11 00 00 00       	mov    eax,0x11
c0004d40:	85 f6                	test   esi,esi
c0004d42:	74 5b                	je     c0004d9f <f_chmod+0xa2>
c0004d44:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d48:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004d4c:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004d4f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004d53:	e8 4a eb ff ff       	call   c00038a2 <follow_path>
c0004d58:	85 c0                	test   eax,eax
c0004d5a:	75 2f                	jne    c0004d8b <f_chmod+0x8e>
c0004d5c:	b8 06 00 00 00       	mov    eax,0x6
c0004d61:	f6 44 24 4b a0       	test   BYTE PTR [esp+0x4b],0xa0
c0004d66:	75 23                	jne    c0004d8b <f_chmod+0x8e>
c0004d68:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004d6c:	32 58 0b             	xor    bl,BYTE PTR [eax+0xb]
c0004d6f:	21 fb                	and    ebx,edi
c0004d71:	83 e3 27             	and    ebx,0x27
c0004d74:	32 58 0b             	xor    bl,BYTE PTR [eax+0xb]
c0004d77:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c0004d7a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d7e:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004d82:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d86:	e8 fa de ff ff       	call   c0002c85 <sync_fs>
c0004d8b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004d8f:	83 ec 0c             	sub    esp,0xc
c0004d92:	56                   	push   esi
c0004d93:	e8 ec 0c 00 00       	call   c0005a84 <ff_memfree>
c0004d98:	83 c4 10             	add    esp,0x10
c0004d9b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d9f:	83 c4 50             	add    esp,0x50
c0004da2:	5b                   	pop    ebx
c0004da3:	5e                   	pop    esi
c0004da4:	5f                   	pop    edi
c0004da5:	c3                   	ret    

c0004da6 <f_utime>:
c0004da6:	56                   	push   esi
c0004da7:	b9 02 00 00 00       	mov    ecx,0x2
c0004dac:	53                   	push   ebx
c0004dad:	83 ec 54             	sub    esp,0x54
c0004db0:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0004db4:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004db8:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004dbc:	e8 d7 d5 ff ff       	call   c0002398 <mount_volume>
c0004dc1:	85 c0                	test   eax,eax
c0004dc3:	0f 85 85 00 00 00    	jne    c0004e4e <f_utime+0xa8>
c0004dc9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004dcd:	83 ec 0c             	sub    esp,0xc
c0004dd0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004dd4:	68 00 02 00 00       	push   0x200
c0004dd9:	e8 8e 0c 00 00       	call   c0005a6c <ff_memalloc>
c0004dde:	83 c4 10             	add    esp,0x10
c0004de1:	89 c3                	mov    ebx,eax
c0004de3:	b8 11 00 00 00       	mov    eax,0x11
c0004de8:	85 db                	test   ebx,ebx
c0004dea:	74 62                	je     c0004e4e <f_utime+0xa8>
c0004dec:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004df0:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004df4:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004df7:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004dfb:	e8 a2 ea ff ff       	call   c00038a2 <follow_path>
c0004e00:	85 c0                	test   eax,eax
c0004e02:	75 36                	jne    c0004e3a <f_utime+0x94>
c0004e04:	b8 06 00 00 00       	mov    eax,0x6
c0004e09:	f6 44 24 4b a0       	test   BYTE PTR [esp+0x4b],0xa0
c0004e0e:	75 2a                	jne    c0004e3a <f_utime+0x94>
c0004e10:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c0004e14:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c0004e18:	c1 e2 10             	shl    edx,0x10
c0004e1b:	09 c2                	or     edx,eax
c0004e1d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004e21:	83 c0 16             	add    eax,0x16
c0004e24:	e8 1f cf ff ff       	call   c0001d48 <st_dword>
c0004e29:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e2d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e31:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e35:	e8 4b de ff ff       	call   c0002c85 <sync_fs>
c0004e3a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e3e:	83 ec 0c             	sub    esp,0xc
c0004e41:	53                   	push   ebx
c0004e42:	e8 3d 0c 00 00       	call   c0005a84 <ff_memfree>
c0004e47:	83 c4 10             	add    esp,0x10
c0004e4a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e4e:	83 c4 54             	add    esp,0x54
c0004e51:	5b                   	pop    ebx
c0004e52:	5e                   	pop    esi
c0004e53:	c3                   	ret    

c0004e54 <f_getlabel>:
c0004e54:	55                   	push   ebp
c0004e55:	31 c9                	xor    ecx,ecx
c0004e57:	57                   	push   edi
c0004e58:	56                   	push   esi
c0004e59:	53                   	push   ebx
c0004e5a:	83 ec 5c             	sub    esp,0x5c
c0004e5d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004e61:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004e65:	e8 2e d5 ff ff       	call   c0002398 <mount_volume>
c0004e6a:	89 c6                	mov    esi,eax
c0004e6c:	85 c0                	test   eax,eax
c0004e6e:	0f 85 27 01 00 00    	jne    c0004f9b <f_getlabel+0x147>
c0004e74:	83 7c 24 74 00       	cmp    DWORD PTR [esp+0x74],0x0
c0004e79:	0f 84 d1 00 00 00    	je     c0004f50 <f_getlabel+0xfc>
c0004e7f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e83:	31 d2                	xor    edx,edx
c0004e85:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004e89:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0004e91:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004e95:	e8 79 e3 ff ff       	call   c0003213 <dir_sdi>
c0004e9a:	85 c0                	test   eax,eax
c0004e9c:	0f 85 a2 00 00 00    	jne    c0004f44 <f_getlabel+0xf0>
c0004ea2:	ba 01 00 00 00       	mov    edx,0x1
c0004ea7:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004eab:	e8 54 e7 ff ff       	call   c0003604 <dir_read>
c0004eb0:	85 c0                	test   eax,eax
c0004eb2:	0f 85 8c 00 00 00    	jne    c0004f44 <f_getlabel+0xf0>
c0004eb8:	31 db                	xor    ebx,ebx
c0004eba:	31 c9                	xor    ecx,ecx
c0004ebc:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0004ec0:	8d 79 01             	lea    edi,[ecx+0x1]
c0004ec3:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0004ec8:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0004ecd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004ed1:	e8 ca ce ff ff       	call   c0001da0 <dbc_1st>
c0004ed6:	85 c0                	test   eax,eax
c0004ed8:	74 16                	je     c0004ef0 <f_getlabel+0x9c>
c0004eda:	83 ff 0b             	cmp    edi,0xb
c0004edd:	74 11                	je     c0004ef0 <f_getlabel+0x9c>
c0004edf:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0004ee4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ee8:	8d 79 02             	lea    edi,[ecx+0x2]
c0004eeb:	c1 e0 08             	shl    eax,0x8
c0004eee:	09 c2                	or     edx,eax
c0004ef0:	0f b7 d2             	movzx  edx,dx
c0004ef3:	50                   	push   eax
c0004ef4:	50                   	push   eax
c0004ef5:	68 b5 01 00 00       	push   0x1b5
c0004efa:	52                   	push   edx
c0004efb:	e8 3c 0c 00 00       	call   c0005b3c <ff_oem2uni>
c0004f00:	83 c4 10             	add    esp,0x10
c0004f03:	66 85 c0             	test   ax,ax
c0004f06:	74 25                	je     c0004f2d <f_getlabel+0xd9>
c0004f08:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0004f0c:	0f b7 c0             	movzx  eax,ax
c0004f0f:	01 da                	add    edx,ebx
c0004f11:	b9 04 00 00 00       	mov    ecx,0x4
c0004f16:	e8 51 cf ff ff       	call   c0001e6c <put_utf>
c0004f1b:	84 c0                	test   al,al
c0004f1d:	74 0e                	je     c0004f2d <f_getlabel+0xd9>
c0004f1f:	0f b6 c0             	movzx  eax,al
c0004f22:	01 c3                	add    ebx,eax
c0004f24:	83 ff 0b             	cmp    edi,0xb
c0004f27:	74 06                	je     c0004f2f <f_getlabel+0xdb>
c0004f29:	89 f9                	mov    ecx,edi
c0004f2b:	eb 8f                	jmp    c0004ebc <f_getlabel+0x68>
c0004f2d:	31 db                	xor    ebx,ebx
c0004f2f:	03 5c 24 74          	add    ebx,DWORD PTR [esp+0x74]
c0004f33:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0004f36:	39 5c 24 74          	cmp    DWORD PTR [esp+0x74],ebx
c0004f3a:	74 14                	je     c0004f50 <f_getlabel+0xfc>
c0004f3c:	4b                   	dec    ebx
c0004f3d:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0004f40:	74 f1                	je     c0004f33 <f_getlabel+0xdf>
c0004f42:	eb 0c                	jmp    c0004f50 <f_getlabel+0xfc>
c0004f44:	83 f8 04             	cmp    eax,0x4
c0004f47:	75 50                	jne    c0004f99 <f_getlabel+0x145>
c0004f49:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0004f4d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f50:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c0004f55:	74 44                	je     c0004f9b <f_getlabel+0x147>
c0004f57:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f5b:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0004f5e:	e8 e2 d2 ff ff       	call   c0002245 <move_window>
c0004f63:	89 c6                	mov    esi,eax
c0004f65:	85 c0                	test   eax,eax
c0004f67:	75 32                	jne    c0004f9b <f_getlabel+0x147>
c0004f69:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004f6d:	b8 43 00 00 00       	mov    eax,0x43
c0004f72:	8a 0a                	mov    cl,BYTE PTR [edx]
c0004f74:	80 f9 03             	cmp    cl,0x3
c0004f77:	74 0f                	je     c0004f88 <f_getlabel+0x134>
c0004f79:	31 c0                	xor    eax,eax
c0004f7b:	80 f9 04             	cmp    cl,0x4
c0004f7e:	0f 94 c0             	sete   al
c0004f81:	48                   	dec    eax
c0004f82:	83 e0 c3             	and    eax,0xffffffc3
c0004f85:	83 c0 64             	add    eax,0x64
c0004f88:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c0004f8c:	e8 9b cd ff ff       	call   c0001d2c <ld_dword>
c0004f91:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0004f95:	89 07                	mov    DWORD PTR [edi],eax
c0004f97:	eb 02                	jmp    c0004f9b <f_getlabel+0x147>
c0004f99:	89 c6                	mov    esi,eax
c0004f9b:	83 c4 5c             	add    esp,0x5c
c0004f9e:	89 f0                	mov    eax,esi
c0004fa0:	5b                   	pop    ebx
c0004fa1:	5e                   	pop    esi
c0004fa2:	5f                   	pop    edi
c0004fa3:	5d                   	pop    ebp
c0004fa4:	c3                   	ret    

c0004fa5 <f_setlabel>:
c0004fa5:	56                   	push   esi
c0004fa6:	b9 02 00 00 00       	mov    ecx,0x2
c0004fab:	53                   	push   ebx
c0004fac:	83 ec 54             	sub    esp,0x54
c0004faf:	8d 54 24 04          	lea    edx,[esp+0x4]
c0004fb3:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004fb7:	e8 dc d3 ff ff       	call   c0002398 <mount_volume>
c0004fbc:	89 c6                	mov    esi,eax
c0004fbe:	85 c0                	test   eax,eax
c0004fc0:	0f 85 67 01 00 00    	jne    c000512d <f_setlabel+0x188>
c0004fc6:	b9 0b 00 00 00       	mov    ecx,0xb
c0004fcb:	ba 20 00 00 00       	mov    edx,0x20
c0004fd0:	8d 44 24 0a          	lea    eax,[esp+0xa]
c0004fd4:	31 db                	xor    ebx,ebx
c0004fd6:	e8 85 cd ff ff       	call   c0001d60 <mem_set>
c0004fdb:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0004fdf:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004fe2:	76 5b                	jbe    c000503f <f_setlabel+0x9a>
c0004fe4:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004fe8:	e8 b9 cd ff ff       	call   c0001da6 <tchar2uni>
c0004fed:	3d ff ff 00 00       	cmp    eax,0xffff
c0004ff2:	76 0a                	jbe    c0004ffe <f_setlabel+0x59>
c0004ff4:	be 06 00 00 00       	mov    esi,0x6
c0004ff9:	e9 2f 01 00 00       	jmp    c000512d <f_setlabel+0x188>
c0004ffe:	83 ec 0c             	sub    esp,0xc
c0005001:	50                   	push   eax
c0005002:	e8 ad 0b 00 00       	call   c0005bb4 <ff_wtoupper>
c0005007:	5a                   	pop    edx
c0005008:	59                   	pop    ecx
c0005009:	68 b5 01 00 00       	push   0x1b5
c000500e:	50                   	push   eax
c000500f:	e8 88 0a 00 00       	call   c0005a9c <ff_uni2oem>
c0005014:	83 c4 10             	add    esp,0x10
c0005017:	89 c6                	mov    esi,eax
c0005019:	66 85 c0             	test   ax,ax
c000501c:	74 d6                	je     c0004ff4 <f_setlabel+0x4f>
c000501e:	0f b7 d0             	movzx  edx,ax
c0005021:	b8 70 d7 01 c0       	mov    eax,0xc001d770
c0005026:	e8 63 cd ff ff       	call   c0001d8e <chk_chr>
c000502b:	85 c0                	test   eax,eax
c000502d:	75 c5                	jne    c0004ff4 <f_setlabel+0x4f>
c000502f:	66 81 fe ff 00       	cmp    si,0xff
c0005034:	0f 87 c9 00 00 00    	ja     c0005103 <f_setlabel+0x15e>
c000503a:	e9 e4 00 00 00       	jmp    c0005123 <f_setlabel+0x17e>
c000503f:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c0005044:	74 ae                	je     c0004ff4 <f_setlabel+0x4f>
c0005046:	85 db                	test   ebx,ebx
c0005048:	74 0e                	je     c0005058 <f_setlabel+0xb3>
c000504a:	8d 43 ff             	lea    eax,[ebx-0x1]
c000504d:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c0005052:	75 04                	jne    c0005058 <f_setlabel+0xb3>
c0005054:	89 c3                	mov    ebx,eax
c0005056:	eb ee                	jmp    c0005046 <f_setlabel+0xa1>
c0005058:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000505c:	31 d2                	xor    edx,edx
c000505e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005062:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000506a:	8d 44 24 20          	lea    eax,[esp+0x20]
c000506e:	e8 a0 e1 ff ff       	call   c0003213 <dir_sdi>
c0005073:	89 c6                	mov    esi,eax
c0005075:	85 c0                	test   eax,eax
c0005077:	0f 85 b0 00 00 00    	jne    c000512d <f_setlabel+0x188>
c000507d:	ba 01 00 00 00       	mov    edx,0x1
c0005082:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005086:	e8 79 e5 ff ff       	call   c0003604 <dir_read>
c000508b:	85 c0                	test   eax,eax
c000508d:	75 18                	jne    c00050a7 <f_setlabel+0x102>
c000508f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005093:	85 db                	test   ebx,ebx
c0005095:	74 0b                	je     c00050a2 <f_setlabel+0xfd>
c0005097:	b9 0b 00 00 00       	mov    ecx,0xb
c000509c:	8d 54 24 0a          	lea    edx,[esp+0xa]
c00050a0:	eb 47                	jmp    c00050e9 <f_setlabel+0x144>
c00050a2:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c00050a5:	eb 47                	jmp    c00050ee <f_setlabel+0x149>
c00050a7:	83 f8 04             	cmp    eax,0x4
c00050aa:	75 53                	jne    c00050ff <f_setlabel+0x15a>
c00050ac:	85 db                	test   ebx,ebx
c00050ae:	74 7d                	je     c000512d <f_setlabel+0x188>
c00050b0:	ba 01 00 00 00       	mov    edx,0x1
c00050b5:	8d 44 24 20          	lea    eax,[esp+0x20]
c00050b9:	e8 e5 e4 ff ff       	call   c00035a3 <dir_alloc>
c00050be:	89 c6                	mov    esi,eax
c00050c0:	85 c0                	test   eax,eax
c00050c2:	75 69                	jne    c000512d <f_setlabel+0x188>
c00050c4:	b9 20 00 00 00       	mov    ecx,0x20
c00050c9:	31 d2                	xor    edx,edx
c00050cb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050cf:	e8 8c cc ff ff       	call   c0001d60 <mem_set>
c00050d4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050d8:	b9 0b 00 00 00       	mov    ecx,0xb
c00050dd:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c00050e1:	8d 54 24 0a          	lea    edx,[esp+0xa]
c00050e5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050e9:	e8 5d cc ff ff       	call   c0001d4b <mem_cpy>
c00050ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00050f2:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00050f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00050fa:	e8 86 db ff ff       	call   c0002c85 <sync_fs>
c00050ff:	89 c6                	mov    esi,eax
c0005101:	eb 2a                	jmp    c000512d <f_setlabel+0x188>
c0005103:	83 fb 09             	cmp    ebx,0x9
c0005106:	0f 87 e8 fe ff ff    	ja     c0004ff4 <f_setlabel+0x4f>
c000510c:	89 f0                	mov    eax,esi
c000510e:	66 c1 e8 08          	shr    ax,0x8
c0005112:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c0005116:	43                   	inc    ebx
c0005117:	89 f0                	mov    eax,esi
c0005119:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c000511d:	43                   	inc    ebx
c000511e:	e9 b8 fe ff ff       	jmp    c0004fdb <f_setlabel+0x36>
c0005123:	83 fb 0a             	cmp    ebx,0xa
c0005126:	76 ef                	jbe    c0005117 <f_setlabel+0x172>
c0005128:	e9 c7 fe ff ff       	jmp    c0004ff4 <f_setlabel+0x4f>
c000512d:	89 f0                	mov    eax,esi
c000512f:	83 c4 54             	add    esp,0x54
c0005132:	5b                   	pop    ebx
c0005133:	5e                   	pop    esi
c0005134:	c3                   	ret    

c0005135 <f_expand>:
c0005135:	55                   	push   ebp
c0005136:	57                   	push   edi
c0005137:	56                   	push   esi
c0005138:	53                   	push   ebx
c0005139:	83 ec 2c             	sub    esp,0x2c
c000513c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005140:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005144:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005148:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000514c:	89 d8                	mov    eax,ebx
c000514e:	e8 48 d0 ff ff       	call   c000219b <validate>
c0005153:	89 c6                	mov    esi,eax
c0005155:	85 c0                	test   eax,eax
c0005157:	0f 85 2e 01 00 00    	jne    c000528b <f_expand+0x156>
c000515d:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0005161:	85 f6                	test   esi,esi
c0005163:	0f 85 22 01 00 00    	jne    c000528b <f_expand+0x156>
c0005169:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c000516e:	75 0a                	jne    c000517a <f_expand+0x45>
c0005170:	be 07 00 00 00       	mov    esi,0x7
c0005175:	e9 11 01 00 00       	jmp    c000528b <f_expand+0x156>
c000517a:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c000517e:	75 f0                	jne    c0005170 <f_expand+0x3b>
c0005180:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0005184:	74 ea                	je     c0005170 <f_expand+0x3b>
c0005186:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c000518a:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c000518e:	c1 e1 09             	shl    ecx,0x9
c0005191:	8d 41 ff             	lea    eax,[ecx-0x1]
c0005194:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c0005198:	0f 95 c0             	setne  al
c000519b:	31 d2                	xor    edx,edx
c000519d:	0f b6 c0             	movzx  eax,al
c00051a0:	89 c7                	mov    edi,eax
c00051a2:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00051a6:	f7 f1                	div    ecx
c00051a8:	01 f8                	add    eax,edi
c00051aa:	8b 7d 10             	mov    edi,DWORD PTR [ebp+0x10]
c00051ad:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00051b1:	83 ff 01             	cmp    edi,0x1
c00051b4:	76 05                	jbe    c00051bb <f_expand+0x86>
c00051b6:	39 7d 18             	cmp    DWORD PTR [ebp+0x18],edi
c00051b9:	77 05                	ja     c00051c0 <f_expand+0x8b>
c00051bb:	bf 02 00 00 00       	mov    edi,0x2
c00051c0:	89 3c 24             	mov    DWORD PTR [esp],edi
c00051c3:	89 fd                	mov    ebp,edi
c00051c5:	31 c9                	xor    ecx,ecx
c00051c7:	89 ea                	mov    edx,ebp
c00051c9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00051cd:	8b 03                	mov    eax,DWORD PTR [ebx]
c00051cf:	45                   	inc    ebp
c00051d0:	e8 3c df ff ff       	call   c0003111 <get_fat.isra.2>
c00051d5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00051d9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00051dd:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c00051e0:	77 05                	ja     c00051e7 <f_expand+0xb2>
c00051e2:	bd 02 00 00 00       	mov    ebp,0x2
c00051e7:	83 f8 01             	cmp    eax,0x1
c00051ea:	74 20                	je     c000520c <f_expand+0xd7>
c00051ec:	83 f8 ff             	cmp    eax,0xffffffff
c00051ef:	74 22                	je     c0005213 <f_expand+0xde>
c00051f1:	85 c0                	test   eax,eax
c00051f3:	75 09                	jne    c00051fe <f_expand+0xc9>
c00051f5:	41                   	inc    ecx
c00051f6:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c00051fa:	75 07                	jne    c0005203 <f_expand+0xce>
c00051fc:	eb 1c                	jmp    c000521a <f_expand+0xe5>
c00051fe:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0005201:	31 c9                	xor    ecx,ecx
c0005203:	39 fd                	cmp    ebp,edi
c0005205:	75 c0                	jne    c00051c7 <f_expand+0x92>
c0005207:	e9 64 ff ff ff       	jmp    c0005170 <f_expand+0x3b>
c000520c:	be 02 00 00 00       	mov    esi,0x2
c0005211:	eb 78                	jmp    c000528b <f_expand+0x156>
c0005213:	be 01 00 00 00       	mov    esi,0x1
c0005218:	eb 71                	jmp    c000528b <f_expand+0x156>
c000521a:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c000521f:	74 2b                	je     c000524c <f_expand+0x117>
c0005221:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005224:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005228:	85 ed                	test   ebp,ebp
c000522a:	74 24                	je     c0005250 <f_expand+0x11b>
c000522c:	83 c9 ff             	or     ecx,0xffffffff
c000522f:	83 fd 01             	cmp    ebp,0x1
c0005232:	74 03                	je     c0005237 <f_expand+0x102>
c0005234:	8d 4f 01             	lea    ecx,[edi+0x1]
c0005237:	89 fa                	mov    edx,edi
c0005239:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000523d:	e8 59 d4 ff ff       	call   c000269b <put_fat>
c0005242:	85 c0                	test   eax,eax
c0005244:	75 43                	jne    c0005289 <f_expand+0x154>
c0005246:	89 f8                	mov    eax,edi
c0005248:	4d                   	dec    ebp
c0005249:	47                   	inc    edi
c000524a:	eb dc                	jmp    c0005228 <f_expand+0xf3>
c000524c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000524f:	48                   	dec    eax
c0005250:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005254:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0005259:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c000525c:	74 2d                	je     c000528b <f_expand+0x156>
c000525e:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c0005262:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005265:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005268:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000526c:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000526f:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0005272:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c0005275:	8d 4b fe             	lea    ecx,[ebx-0x2]
c0005278:	39 c8                	cmp    eax,ecx
c000527a:	77 0f                	ja     c000528b <f_expand+0x156>
c000527c:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0005280:	80 4a 04 01          	or     BYTE PTR [edx+0x4],0x1
c0005284:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0005287:	eb 02                	jmp    c000528b <f_expand+0x156>
c0005289:	89 c6                	mov    esi,eax
c000528b:	83 c4 2c             	add    esp,0x2c
c000528e:	89 f0                	mov    eax,esi
c0005290:	5b                   	pop    ebx
c0005291:	5e                   	pop    esi
c0005292:	5f                   	pop    edi
c0005293:	5d                   	pop    ebp
c0005294:	c3                   	ret    

c0005295 <f_mkfs>:
c0005295:	55                   	push   ebp
c0005296:	57                   	push   edi
c0005297:	bf 0b 00 00 00       	mov    edi,0xb
c000529c:	56                   	push   esi
c000529d:	53                   	push   ebx
c000529e:	83 ec 4c             	sub    esp,0x4c
c00052a1:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c00052a5:	8b 6c 24 68          	mov    ebp,DWORD PTR [esp+0x68]
c00052a9:	8d 44 24 60          	lea    eax,[esp+0x60]
c00052ad:	e8 9c ce ff ff       	call   c000214e <get_ldnumber>
c00052b2:	85 c0                	test   eax,eax
c00052b4:	0f 88 a6 07 00 00    	js     c0005a60 <f_mkfs+0x7cb>
c00052ba:	8b 14 85 a0 24 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffddb60]
c00052c1:	85 d2                	test   edx,edx
c00052c3:	74 03                	je     c00052c8 <f_mkfs+0x33>
c00052c5:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00052c8:	85 db                	test   ebx,ebx
c00052ca:	75 05                	jne    c00052d1 <f_mkfs+0x3c>
c00052cc:	bb 60 d7 01 c0       	mov    ebx,0xc001d760
c00052d1:	83 ec 0c             	sub    esp,0xc
c00052d4:	0f b6 c0             	movzx  eax,al
c00052d7:	bf 03 00 00 00       	mov    edi,0x3
c00052dc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00052e0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00052e4:	e8 e8 c9 ff ff       	call   c0001cd1 <disk_initialize>
c00052e9:	83 c4 10             	add    esp,0x10
c00052ec:	a8 01                	test   al,0x1
c00052ee:	0f 85 6c 07 00 00    	jne    c0005a60 <f_mkfs+0x7cb>
c00052f4:	bf 0a 00 00 00       	mov    edi,0xa
c00052f9:	a8 04                	test   al,0x4
c00052fb:	0f 85 5f 07 00 00    	jne    c0005a60 <f_mkfs+0x7cb>
c0005301:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0005304:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0005308:	85 c0                	test   eax,eax
c000530a:	75 20                	jne    c000532c <f_mkfs+0x97>
c000530c:	51                   	push   ecx
c000530d:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005311:	50                   	push   eax
c0005312:	6a 03                	push   0x3
c0005314:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005318:	e8 e3 c9 ff ff       	call   c0001d00 <disk_ioctl>
c000531d:	83 c4 10             	add    esp,0x10
c0005320:	85 c0                	test   eax,eax
c0005322:	74 08                	je     c000532c <f_mkfs+0x97>
c0005324:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c000532c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0005330:	8d 42 ff             	lea    eax,[edx-0x1]
c0005333:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0005338:	77 04                	ja     c000533e <f_mkfs+0xa9>
c000533a:	85 c2                	test   edx,eax
c000533c:	74 08                	je     c0005346 <f_mkfs+0xb1>
c000533e:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0005346:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c0005349:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c000534d:	48                   	dec    eax
c000534e:	3c 01                	cmp    al,0x1
c0005350:	76 05                	jbe    c0005357 <f_mkfs+0xc2>
c0005352:	c6 44 24 2d 01       	mov    BYTE PTR [esp+0x2d],0x1
c0005357:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000535a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000535e:	48                   	dec    eax
c000535f:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0005364:	77 07                	ja     c000536d <f_mkfs+0xd8>
c0005366:	f6 44 24 0c 0f       	test   BYTE PTR [esp+0xc],0xf
c000536b:	74 08                	je     c0005375 <f_mkfs+0xe0>
c000536d:	c7 44 24 0c 00 02 00 00 	mov    DWORD PTR [esp+0xc],0x200
c0005375:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0005378:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c000537e:	77 07                	ja     c0005387 <f_mkfs+0xf2>
c0005380:	8d 47 ff             	lea    eax,[edi-0x1]
c0005383:	85 f8                	test   eax,edi
c0005385:	74 02                	je     c0005389 <f_mkfs+0xf4>
c0005387:	31 ff                	xor    edi,edi
c0005389:	81 7c 24 6c ff 01 00 00 	cmp    DWORD PTR [esp+0x6c],0x1ff
c0005391:	77 0a                	ja     c000539d <f_mkfs+0x108>
c0005393:	bf 11 00 00 00       	mov    edi,0x11
c0005398:	e9 c3 06 00 00       	jmp    c0005a60 <f_mkfs+0x7cb>
c000539d:	8a 1b                	mov    bl,BYTE PTR [ebx]
c000539f:	89 ee                	mov    esi,ebp
c00053a1:	85 ed                	test   ebp,ebp
c00053a3:	75 1b                	jne    c00053c0 <f_mkfs+0x12b>
c00053a5:	83 ec 0c             	sub    esp,0xc
c00053a8:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00053ac:	25 00 fe ff ff       	and    eax,0xfffffe00
c00053b1:	50                   	push   eax
c00053b2:	e8 b5 06 00 00       	call   c0005a6c <ff_memalloc>
c00053b7:	83 c4 10             	add    esp,0x10
c00053ba:	89 c6                	mov    esi,eax
c00053bc:	85 c0                	test   eax,eax
c00053be:	74 d3                	je     c0005393 <f_mkfs+0xfe>
c00053c0:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c00053c8:	52                   	push   edx
c00053c9:	8d 44 24 38          	lea    eax,[esp+0x38]
c00053cd:	50                   	push   eax
c00053ce:	6a 01                	push   0x1
c00053d0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00053d4:	e8 27 c9 ff ff       	call   c0001d00 <disk_ioctl>
c00053d9:	83 c4 10             	add    esp,0x10
c00053dc:	85 c0                	test   eax,eax
c00053de:	0f 85 25 06 00 00    	jne    c0005a09 <f_mkfs+0x774>
c00053e4:	88 d8                	mov    al,bl
c00053e6:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00053ee:	24 08                	and    al,0x8
c00053f0:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c00053f4:	75 18                	jne    c000540e <f_mkfs+0x179>
c00053f6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00053fa:	83 f8 3f             	cmp    eax,0x3f
c00053fd:	76 0f                	jbe    c000540e <f_mkfs+0x179>
c00053ff:	83 e8 3f             	sub    eax,0x3f
c0005402:	c7 44 24 08 3f 00 00 00 	mov    DWORD PTR [esp+0x8],0x3f
c000540a:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000540e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0005412:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005416:	83 f8 7f             	cmp    eax,0x7f
c0005419:	0f 86 52 02 00 00    	jbe    c0005671 <f_mkfs+0x3dc>
c000541f:	b9 80 00 00 00       	mov    ecx,0x80
c0005424:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c000542a:	77 05                	ja     c0005431 <f_mkfs+0x19c>
c000542c:	89 f9                	mov    ecx,edi
c000542e:	c1 e9 09             	shr    ecx,0x9
c0005431:	88 d8                	mov    al,bl
c0005433:	83 e0 01             	and    eax,0x1
c0005436:	80 e3 02             	and    bl,0x2
c0005439:	88 5c 24 2e          	mov    BYTE PTR [esp+0x2e],bl
c000543d:	74 0a                	je     c0005449 <f_mkfs+0x1b4>
c000543f:	84 c0                	test   al,al
c0005441:	0f 84 4c 01 00 00    	je     c0005593 <f_mkfs+0x2fe>
c0005447:	eb 38                	jmp    c0005481 <f_mkfs+0x1ec>
c0005449:	bf 13 00 00 00       	mov    edi,0x13
c000544e:	84 c0                	test   al,al
c0005450:	75 2f                	jne    c0005481 <f_mkfs+0x1ec>
c0005452:	e9 c9 05 00 00       	jmp    c0005a20 <f_mkfs+0x78b>
c0005457:	80 7c 24 2c 02       	cmp    BYTE PTR [esp+0x2c],0x2
c000545c:	0f 85 08 02 00 00    	jne    c000566a <f_mkfs+0x3d5>
c0005462:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0005467:	0f 86 e1 01 00 00    	jbe    c000564e <f_mkfs+0x3b9>
c000546d:	85 c9                	test   ecx,ecx
c000546f:	0f 85 bd 05 00 00    	jne    c0005a32 <f_mkfs+0x79d>
c0005475:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c0005478:	83 f9 40             	cmp    ecx,0x40
c000547b:	0f 87 c1 05 00 00    	ja     c0005a42 <f_mkfs+0x7ad>
c0005481:	89 cf                	mov    edi,ecx
c0005483:	85 c9                	test   ecx,ecx
c0005485:	75 1d                	jne    c00054a4 <f_mkfs+0x20f>
c0005487:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000548b:	ba 40 d7 01 c0       	mov    edx,0xc001d740
c0005490:	c1 eb 0c             	shr    ebx,0xc
c0005493:	bf 01 00 00 00       	mov    edi,0x1
c0005498:	0f b7 02             	movzx  eax,WORD PTR [edx]
c000549b:	66 85 c0             	test   ax,ax
c000549e:	0f 85 5f 01 00 00    	jne    c0005603 <f_mkfs+0x36e>
c00054a4:	31 d2                	xor    edx,edx
c00054a6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00054aa:	f7 f7                	div    edi
c00054ac:	3d f5 0f 00 00       	cmp    eax,0xff5
c00054b1:	0f 86 5e 01 00 00    	jbe    c0005615 <f_mkfs+0x380>
c00054b7:	83 c0 02             	add    eax,0x2
c00054ba:	c6 44 24 2c 02       	mov    BYTE PTR [esp+0x2c],0x2
c00054bf:	01 c0                	add    eax,eax
c00054c1:	05 ff 01 00 00       	add    eax,0x1ff
c00054c6:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00054ce:	c1 e8 09             	shr    eax,0x9
c00054d1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00054d5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00054d9:	c1 e0 05             	shl    eax,0x5
c00054dc:	c1 e8 09             	shr    eax,0x9
c00054df:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00054e3:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c00054e8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00054ec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00054f0:	03 44 24 1c          	add    eax,DWORD PTR [esp+0x1c]
c00054f4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00054f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00054fc:	0f af 44 24 20       	imul   eax,DWORD PTR [esp+0x20]
c0005501:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0005505:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c0005509:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000550d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0005511:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0005515:	8d 5c 18 ff          	lea    ebx,[eax+ebx*1-0x1]
c0005519:	f7 d8                	neg    eax
c000551b:	21 c3                	and    ebx,eax
c000551d:	2b 5c 24 28          	sub    ebx,DWORD PTR [esp+0x28]
c0005521:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c0005526:	0f 85 fc 00 00 00    	jne    c0005628 <f_mkfs+0x393>
c000552c:	01 5c 24 1c          	add    DWORD PTR [esp+0x1c],ebx
c0005530:	01 5c 24 18          	add    DWORD PTR [esp+0x18],ebx
c0005534:	89 f8                	mov    eax,edi
c0005536:	c1 e0 04             	shl    eax,0x4
c0005539:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c000553d:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0005541:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c0005545:	0f 82 26 01 00 00    	jb     c0005671 <f_mkfs+0x3dc>
c000554b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000554f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0005553:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c0005557:	0f af 54 24 20       	imul   edx,DWORD PTR [esp+0x20]
c000555c:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
c0005560:	29 d0                	sub    eax,edx
c0005562:	31 d2                	xor    edx,edx
c0005564:	f7 f7                	div    edi
c0005566:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c000556b:	89 c3                	mov    ebx,eax
c000556d:	0f 85 e4 fe ff ff    	jne    c0005457 <f_mkfs+0x1c2>
c0005573:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0005578:	0f 87 02 01 00 00    	ja     c0005680 <f_mkfs+0x3eb>
c000557e:	85 c9                	test   ecx,ecx
c0005580:	0f 85 eb 00 00 00    	jne    c0005671 <f_mkfs+0x3dc>
c0005586:	83 ff 01             	cmp    edi,0x1
c0005589:	0f 86 e2 00 00 00    	jbe    c0005671 <f_mkfs+0x3dc>
c000558f:	89 f9                	mov    ecx,edi
c0005591:	d1 e9                	shr    ecx,1
c0005593:	89 cb                	mov    ebx,ecx
c0005595:	85 c9                	test   ecx,ecx
c0005597:	75 26                	jne    c00055bf <f_mkfs+0x32a>
c0005599:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000559d:	ba 50 d7 01 c0       	mov    edx,0xc001d750
c00055a2:	c1 eb 11             	shr    ebx,0x11
c00055a5:	b9 01 00 00 00       	mov    ecx,0x1
c00055aa:	0f b7 02             	movzx  eax,WORD PTR [edx]
c00055ad:	66 85 c0             	test   ax,ax
c00055b0:	74 0b                	je     c00055bd <f_mkfs+0x328>
c00055b2:	83 c2 02             	add    edx,0x2
c00055b5:	39 d8                	cmp    eax,ebx
c00055b7:	77 04                	ja     c00055bd <f_mkfs+0x328>
c00055b9:	01 c9                	add    ecx,ecx
c00055bb:	eb ed                	jmp    c00055aa <f_mkfs+0x315>
c00055bd:	31 db                	xor    ebx,ebx
c00055bf:	31 d2                	xor    edx,edx
c00055c1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00055c5:	f7 f1                	div    ecx
c00055c7:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c00055ce:	2d f6 ff 00 00       	sub    eax,0xfff6
c00055d3:	c1 ea 09             	shr    edx,0x9
c00055d6:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c00055db:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00055df:	0f 87 8c 00 00 00    	ja     c0005671 <f_mkfs+0x3dc>
c00055e5:	89 cf                	mov    edi,ecx
c00055e7:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00055ef:	89 d9                	mov    ecx,ebx
c00055f1:	c7 44 24 1c 20 00 00 00 	mov    DWORD PTR [esp+0x1c],0x20
c00055f9:	c6 44 24 2c 03       	mov    BYTE PTR [esp+0x2c],0x3
c00055fe:	e9 e0 fe ff ff       	jmp    c00054e3 <f_mkfs+0x24e>
c0005603:	83 c2 02             	add    edx,0x2
c0005606:	39 d8                	cmp    eax,ebx
c0005608:	0f 87 96 fe ff ff    	ja     c00054a4 <f_mkfs+0x20f>
c000560e:	01 ff                	add    edi,edi
c0005610:	e9 83 fe ff ff       	jmp    c0005498 <f_mkfs+0x203>
c0005615:	8d 04 40             	lea    eax,[eax+eax*2]
c0005618:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c000561d:	40                   	inc    eax
c000561e:	d1 e8                	shr    eax,1
c0005620:	83 c0 03             	add    eax,0x3
c0005623:	e9 99 fe ff ff       	jmp    c00054c1 <f_mkfs+0x22c>
c0005628:	31 d2                	xor    edx,edx
c000562a:	89 d8                	mov    eax,ebx
c000562c:	f7 74 24 20          	div    DWORD PTR [esp+0x20]
c0005630:	85 d2                	test   edx,edx
c0005632:	74 09                	je     c000563d <f_mkfs+0x3a8>
c0005634:	4b                   	dec    ebx
c0005635:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0005639:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000563d:	89 d8                	mov    eax,ebx
c000563f:	31 d2                	xor    edx,edx
c0005641:	f7 74 24 20          	div    DWORD PTR [esp+0x20]
c0005645:	01 44 24 10          	add    DWORD PTR [esp+0x10],eax
c0005649:	e9 e6 fe ff ff       	jmp    c0005534 <f_mkfs+0x29f>
c000564e:	3d f5 0f 00 00       	cmp    eax,0xff5
c0005653:	77 2b                	ja     c0005680 <f_mkfs+0x3eb>
c0005655:	85 c9                	test   ecx,ecx
c0005657:	75 18                	jne    c0005671 <f_mkfs+0x3dc>
c0005659:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c000565c:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005662:	0f 86 19 fe ff ff    	jbe    c0005481 <f_mkfs+0x1ec>
c0005668:	eb 07                	jmp    c0005671 <f_mkfs+0x3dc>
c000566a:	3d f5 0f 00 00       	cmp    eax,0xff5
c000566f:	76 0a                	jbe    c000567b <f_mkfs+0x3e6>
c0005671:	bf 0e 00 00 00       	mov    edi,0xe
c0005676:	e9 a5 03 00 00       	jmp    c0005a20 <f_mkfs+0x78b>
c000567b:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c0005680:	31 d2                	xor    edx,edx
c0005682:	b9 00 02 00 00       	mov    ecx,0x200
c0005687:	89 f0                	mov    eax,esi
c0005689:	e8 d2 c6 ff ff       	call   c0001d60 <mem_set>
c000568e:	b9 0b 00 00 00       	mov    ecx,0xb
c0005693:	ba f2 d6 01 c0       	mov    edx,0xc001d6f2
c0005698:	89 f0                	mov    eax,esi
c000569a:	e8 ac c6 ff ff       	call   c0001d4b <mem_cpy>
c000569f:	8d 46 0b             	lea    eax,[esi+0xb]
c00056a2:	ba 00 02 00 00       	mov    edx,0x200
c00056a7:	e8 98 c6 ff ff       	call   c0001d44 <st_word>
c00056ac:	89 f8                	mov    eax,edi
c00056ae:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c00056b3:	88 46 0d             	mov    BYTE PTR [esi+0xd],al
c00056b6:	8d 46 0e             	lea    eax,[esi+0xe]
c00056b9:	e8 86 c6 ff ff       	call   c0001d44 <st_word>
c00056be:	8a 44 24 2d          	mov    al,BYTE PTR [esp+0x2d]
c00056c2:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00056c7:	88 46 10             	mov    BYTE PTR [esi+0x10],al
c00056ca:	75 08                	jne    c00056d4 <f_mkfs+0x43f>
c00056cc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00056d4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00056d8:	8d 46 11             	lea    eax,[esi+0x11]
c00056db:	e8 64 c6 ff ff       	call   c0001d44 <st_word>
c00056e0:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00056e4:	81 fa ff ff 00 00    	cmp    edx,0xffff
c00056ea:	77 0a                	ja     c00056f6 <f_mkfs+0x461>
c00056ec:	8d 46 13             	lea    eax,[esi+0x13]
c00056ef:	e8 50 c6 ff ff       	call   c0001d44 <st_word>
c00056f4:	eb 08                	jmp    c00056fe <f_mkfs+0x469>
c00056f6:	8d 46 20             	lea    eax,[esi+0x20]
c00056f9:	e8 4a c6 ff ff       	call   c0001d48 <st_dword>
c00056fe:	8d 46 18             	lea    eax,[esi+0x18]
c0005701:	ba 3f 00 00 00       	mov    edx,0x3f
c0005706:	c6 46 15 f8          	mov    BYTE PTR [esi+0x15],0xf8
c000570a:	e8 35 c6 ff ff       	call   c0001d44 <st_word>
c000570f:	8d 46 1a             	lea    eax,[esi+0x1a]
c0005712:	ba ff 00 00 00       	mov    edx,0xff
c0005717:	e8 28 c6 ff ff       	call   c0001d44 <st_word>
c000571c:	8d 46 1c             	lea    eax,[esi+0x1c]
c000571f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0005723:	e8 20 c6 ff ff       	call   c0001d48 <st_dword>
c0005728:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c000572d:	75 57                	jne    c0005786 <f_mkfs+0x4f1>
c000572f:	8d 46 43             	lea    eax,[esi+0x43]
c0005732:	ba 00 00 21 50       	mov    edx,0x50210000
c0005737:	e8 0c c6 ff ff       	call   c0001d48 <st_dword>
c000573c:	8d 46 24             	lea    eax,[esi+0x24]
c000573f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0005743:	e8 00 c6 ff ff       	call   c0001d48 <st_dword>
c0005748:	8d 46 2c             	lea    eax,[esi+0x2c]
c000574b:	ba 02 00 00 00       	mov    edx,0x2
c0005750:	e8 f3 c5 ff ff       	call   c0001d48 <st_dword>
c0005755:	8d 46 30             	lea    eax,[esi+0x30]
c0005758:	ba 01 00 00 00       	mov    edx,0x1
c000575d:	e8 e2 c5 ff ff       	call   c0001d44 <st_word>
c0005762:	8d 46 32             	lea    eax,[esi+0x32]
c0005765:	ba 06 00 00 00       	mov    edx,0x6
c000576a:	e8 d5 c5 ff ff       	call   c0001d44 <st_word>
c000576f:	c6 46 40 80          	mov    BYTE PTR [esi+0x40],0x80
c0005773:	c6 46 42 29          	mov    BYTE PTR [esi+0x42],0x29
c0005777:	8d 46 47             	lea    eax,[esi+0x47]
c000577a:	b9 13 00 00 00       	mov    ecx,0x13
c000577f:	ba fe d6 01 c0       	mov    edx,0xc001d6fe
c0005784:	eb 2f                	jmp    c00057b5 <f_mkfs+0x520>
c0005786:	8d 46 27             	lea    eax,[esi+0x27]
c0005789:	ba 00 00 21 50       	mov    edx,0x50210000
c000578e:	e8 b5 c5 ff ff       	call   c0001d48 <st_dword>
c0005793:	0f b7 54 24 10       	movzx  edx,WORD PTR [esp+0x10]
c0005798:	8d 46 16             	lea    eax,[esi+0x16]
c000579b:	e8 a4 c5 ff ff       	call   c0001d44 <st_word>
c00057a0:	c6 46 24 80          	mov    BYTE PTR [esi+0x24],0x80
c00057a4:	c6 46 26 29          	mov    BYTE PTR [esi+0x26],0x29
c00057a8:	8d 46 2b             	lea    eax,[esi+0x2b]
c00057ab:	b9 13 00 00 00       	mov    ecx,0x13
c00057b0:	ba 12 d7 01 c0       	mov    edx,0xc001d712
c00057b5:	e8 91 c5 ff ff       	call   c0001d4b <mem_cpy>
c00057ba:	8d 86 fe 01 00 00    	lea    eax,[esi+0x1fe]
c00057c0:	ba 55 aa 00 00       	mov    edx,0xaa55
c00057c5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00057c9:	e8 76 c5 ff ff       	call   c0001d44 <st_word>
c00057ce:	6a 01                	push   0x1
c00057d0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00057d4:	56                   	push   esi
c00057d5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00057d9:	e8 0c c5 ff ff       	call   c0001cea <disk_write>
c00057de:	83 c4 10             	add    esp,0x10
c00057e1:	85 c0                	test   eax,eax
c00057e3:	0f 85 20 02 00 00    	jne    c0005a09 <f_mkfs+0x774>
c00057e9:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00057ee:	0f 85 98 00 00 00    	jne    c000588c <f_mkfs+0x5f7>
c00057f4:	6a 01                	push   0x1
c00057f6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00057fa:	83 c0 06             	add    eax,0x6
c00057fd:	50                   	push   eax
c00057fe:	56                   	push   esi
c00057ff:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005803:	e8 e2 c4 ff ff       	call   c0001cea <disk_write>
c0005808:	b9 00 02 00 00       	mov    ecx,0x200
c000580d:	31 d2                	xor    edx,edx
c000580f:	89 f0                	mov    eax,esi
c0005811:	e8 4a c5 ff ff       	call   c0001d60 <mem_set>
c0005816:	ba 52 52 61 41       	mov    edx,0x41615252
c000581b:	89 f0                	mov    eax,esi
c000581d:	e8 26 c5 ff ff       	call   c0001d48 <st_dword>
c0005822:	8d 86 e4 01 00 00    	lea    eax,[esi+0x1e4]
c0005828:	ba 72 72 41 61       	mov    edx,0x61417272
c000582d:	e8 16 c5 ff ff       	call   c0001d48 <st_dword>
c0005832:	8d 53 ff             	lea    edx,[ebx-0x1]
c0005835:	8d 86 e8 01 00 00    	lea    eax,[esi+0x1e8]
c000583b:	e8 08 c5 ff ff       	call   c0001d48 <st_dword>
c0005840:	8d 86 ec 01 00 00    	lea    eax,[esi+0x1ec]
c0005846:	ba 02 00 00 00       	mov    edx,0x2
c000584b:	e8 f8 c4 ff ff       	call   c0001d48 <st_dword>
c0005850:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005855:	8d 86 fe 01 00 00    	lea    eax,[esi+0x1fe]
c000585b:	e8 e4 c4 ff ff       	call   c0001d44 <st_word>
c0005860:	6a 01                	push   0x1
c0005862:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005866:	83 c0 07             	add    eax,0x7
c0005869:	50                   	push   eax
c000586a:	56                   	push   esi
c000586b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000586f:	e8 76 c4 ff ff       	call   c0001cea <disk_write>
c0005874:	83 c4 20             	add    esp,0x20
c0005877:	6a 01                	push   0x1
c0005879:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000587d:	40                   	inc    eax
c000587e:	50                   	push   eax
c000587f:	56                   	push   esi
c0005880:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005884:	e8 61 c4 ff ff       	call   c0001cea <disk_write>
c0005889:	83 c4 10             	add    esp,0x10
c000588c:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0005890:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c0005894:	c1 e8 09             	shr    eax,0x9
c0005897:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c000589d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00058a1:	31 d2                	xor    edx,edx
c00058a3:	31 db                	xor    ebx,ebx
c00058a5:	89 f0                	mov    eax,esi
c00058a7:	e8 b4 c4 ff ff       	call   c0001d60 <mem_set>
c00058ac:	80 7c 24 2c 01       	cmp    BYTE PTR [esp+0x2c],0x1
c00058b1:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00058b9:	0f 94 c3             	sete   bl
c00058bc:	4b                   	dec    ebx
c00058bd:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c00058c3:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c00058c9:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00058ce:	75 21                	jne    c00058f1 <f_mkfs+0x65c>
c00058d0:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00058d5:	89 f0                	mov    eax,esi
c00058d7:	e8 6c c4 ff ff       	call   c0001d48 <st_dword>
c00058dc:	8d 46 04             	lea    eax,[esi+0x4]
c00058df:	83 ca ff             	or     edx,0xffffffff
c00058e2:	e8 61 c4 ff ff       	call   c0001d48 <st_dword>
c00058e7:	8d 46 08             	lea    eax,[esi+0x8]
c00058ea:	ba ff ff ff 0f       	mov    edx,0xfffffff
c00058ef:	eb 04                	jmp    c00058f5 <f_mkfs+0x660>
c00058f1:	89 da                	mov    edx,ebx
c00058f3:	89 f0                	mov    eax,esi
c00058f5:	e8 4e c4 ff ff       	call   c0001d48 <st_dword>
c00058fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058fe:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005902:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005906:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000590a:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c000590e:	76 08                	jbe    c0005918 <f_mkfs+0x683>
c0005910:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005914:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005918:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000591c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005920:	56                   	push   esi
c0005921:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005925:	e8 c0 c3 ff ff       	call   c0001cea <disk_write>
c000592a:	83 c4 10             	add    esp,0x10
c000592d:	85 c0                	test   eax,eax
c000592f:	0f 85 d4 00 00 00    	jne    c0005a09 <f_mkfs+0x774>
c0005935:	b9 00 02 00 00       	mov    ecx,0x200
c000593a:	31 d2                	xor    edx,edx
c000593c:	89 f0                	mov    eax,esi
c000593e:	e8 1d c4 ff ff       	call   c0001d60 <mem_set>
c0005943:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005947:	01 4c 24 18          	add    DWORD PTR [esp+0x18],ecx
c000594b:	29 4c 24 14          	sub    DWORD PTR [esp+0x14],ecx
c000594f:	75 b1                	jne    c0005902 <f_mkfs+0x66d>
c0005951:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005955:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c000595d:	40                   	inc    eax
c000595e:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0005962:	0f 87 61 ff ff ff    	ja     c00058c9 <f_mkfs+0x634>
c0005968:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c000596d:	74 04                	je     c0005973 <f_mkfs+0x6de>
c000596f:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0005973:	89 fb                	mov    ebx,edi
c0005975:	3b 7c 24 08          	cmp    edi,DWORD PTR [esp+0x8]
c0005979:	76 04                	jbe    c000597f <f_mkfs+0x6ea>
c000597b:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000597f:	53                   	push   ebx
c0005980:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005984:	56                   	push   esi
c0005985:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005989:	e8 5c c3 ff ff       	call   c0001cea <disk_write>
c000598e:	83 c4 10             	add    esp,0x10
c0005991:	85 c0                	test   eax,eax
c0005993:	75 74                	jne    c0005a09 <f_mkfs+0x774>
c0005995:	01 5c 24 18          	add    DWORD PTR [esp+0x18],ebx
c0005999:	29 df                	sub    edi,ebx
c000599b:	75 d6                	jne    c0005973 <f_mkfs+0x6de>
c000599d:	b1 0c                	mov    cl,0xc
c000599f:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00059a4:	74 18                	je     c00059be <f_mkfs+0x729>
c00059a6:	b1 06                	mov    cl,0x6
c00059a8:	81 7c 24 34 ff ff 00 00 	cmp    DWORD PTR [esp+0x34],0xffff
c00059b0:	77 0c                	ja     c00059be <f_mkfs+0x729>
c00059b2:	80 7c 24 2c 02       	cmp    BYTE PTR [esp+0x2c],0x2
c00059b7:	0f 94 c1             	sete   cl
c00059ba:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00059be:	80 7c 24 2f 00       	cmp    BYTE PTR [esp+0x2f],0x0
c00059c3:	75 2d                	jne    c00059f2 <f_mkfs+0x75d>
c00059c5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00059c9:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c00059d1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00059d5:	0f b6 c9             	movzx  ecx,cl
c00059d8:	83 ec 0c             	sub    esp,0xc
c00059db:	56                   	push   esi
c00059dc:	8d 54 24 48          	lea    edx,[esp+0x48]
c00059e0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00059e4:	e8 4c d3 ff ff       	call   c0002d35 <create_partition>
c00059e9:	83 c4 10             	add    esp,0x10
c00059ec:	89 c7                	mov    edi,eax
c00059ee:	85 c0                	test   eax,eax
c00059f0:	75 2e                	jne    c0005a20 <f_mkfs+0x78b>
c00059f2:	31 ff                	xor    edi,edi
c00059f4:	50                   	push   eax
c00059f5:	6a 00                	push   0x0
c00059f7:	6a 00                	push   0x0
c00059f9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00059fd:	e8 fe c2 ff ff       	call   c0001d00 <disk_ioctl>
c0005a02:	83 c4 10             	add    esp,0x10
c0005a05:	85 c0                	test   eax,eax
c0005a07:	74 17                	je     c0005a20 <f_mkfs+0x78b>
c0005a09:	85 ed                	test   ebp,ebp
c0005a0b:	75 0c                	jne    c0005a19 <f_mkfs+0x784>
c0005a0d:	83 ec 0c             	sub    esp,0xc
c0005a10:	56                   	push   esi
c0005a11:	e8 6e 00 00 00       	call   c0005a84 <ff_memfree>
c0005a16:	83 c4 10             	add    esp,0x10
c0005a19:	bf 01 00 00 00       	mov    edi,0x1
c0005a1e:	eb 40                	jmp    c0005a60 <f_mkfs+0x7cb>
c0005a20:	85 ed                	test   ebp,ebp
c0005a22:	75 3c                	jne    c0005a60 <f_mkfs+0x7cb>
c0005a24:	83 ec 0c             	sub    esp,0xc
c0005a27:	56                   	push   esi
c0005a28:	e8 57 00 00 00       	call   c0005a84 <ff_memfree>
c0005a2d:	83 c4 10             	add    esp,0x10
c0005a30:	eb 2e                	jmp    c0005a60 <f_mkfs+0x7cb>
c0005a32:	80 7c 24 2e 00       	cmp    BYTE PTR [esp+0x2e],0x0
c0005a37:	0f 85 56 fb ff ff    	jne    c0005593 <f_mkfs+0x2fe>
c0005a3d:	e9 2f fc ff ff       	jmp    c0005671 <f_mkfs+0x3dc>
c0005a42:	80 7c 24 2e 00       	cmp    BYTE PTR [esp+0x2e],0x0
c0005a47:	0f 85 4c fb ff ff    	jne    c0005599 <f_mkfs+0x304>
c0005a4d:	89 cf                	mov    edi,ecx
c0005a4f:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005a55:	0f 86 49 fa ff ff    	jbe    c00054a4 <f_mkfs+0x20f>
c0005a5b:	e9 11 fc ff ff       	jmp    c0005671 <f_mkfs+0x3dc>
c0005a60:	83 c4 4c             	add    esp,0x4c
c0005a63:	89 f8                	mov    eax,edi
c0005a65:	5b                   	pop    ebx
c0005a66:	5e                   	pop    esi
c0005a67:	5f                   	pop    edi
c0005a68:	5d                   	pop    ebp
c0005a69:	c3                   	ret    
c0005a6a:	66 90                	xchg   ax,ax

c0005a6c <ff_memalloc>:
c0005a6c:	83 ec 0c             	sub    esp,0xc
c0005a6f:	83 ec 0c             	sub    esp,0xc
c0005a72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005a76:	e8 3e 1d 00 00       	call   c00077b9 <malloc>
c0005a7b:	83 c4 10             	add    esp,0x10
c0005a7e:	83 c4 0c             	add    esp,0xc
c0005a81:	c3                   	ret    
c0005a82:	66 90                	xchg   ax,ax

c0005a84 <ff_memfree>:
c0005a84:	83 ec 0c             	sub    esp,0xc
c0005a87:	83 ec 0c             	sub    esp,0xc
c0005a8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005a8e:	e8 36 1d 00 00       	call   c00077c9 <free>
c0005a93:	83 c4 10             	add    esp,0x10
c0005a96:	90                   	nop
c0005a97:	83 c4 0c             	add    esp,0xc
c0005a9a:	c3                   	ret    
c0005a9b:	90                   	nop

c0005a9c <ff_uni2oem>:
c0005a9c:	83 ec 14             	sub    esp,0x14
c0005a9f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005aa3:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005aa7:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005aae:	c7 44 24 0c 40 db 01 c0 	mov    DWORD PTR [esp+0xc],0xc001db40
c0005ab6:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005abb:	77 0b                	ja     c0005ac8 <ff_uni2oem+0x2c>
c0005abd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005ac1:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ac6:	eb 68                	jmp    c0005b30 <ff_uni2oem+0x94>
c0005ac8:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005ad0:	77 5e                	ja     c0005b30 <ff_uni2oem+0x94>
c0005ad2:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0005ad8:	75 56                	jne    c0005b30 <ff_uni2oem+0x94>
c0005ada:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005ae1:	eb 0d                	jmp    c0005af0 <ff_uni2oem+0x54>
c0005ae3:	90                   	nop
c0005ae4:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ae9:	40                   	inc    eax
c0005aea:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005aef:	90                   	nop
c0005af0:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c0005af6:	77 24                	ja     c0005b1c <ff_uni2oem+0x80>
c0005af8:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005afd:	25 ff ff 00 00       	and    eax,0xffff
c0005b02:	01 c0                	add    eax,eax
c0005b04:	89 c2                	mov    edx,eax
c0005b06:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005b0a:	01 d0                	add    eax,edx
c0005b0c:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005b0f:	25 ff ff 00 00       	and    eax,0xffff
c0005b14:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005b18:	75 ca                	jne    c0005ae4 <ff_uni2oem+0x48>
c0005b1a:	66 90                	xchg   ax,ax
c0005b1c:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005b21:	83 e8 80             	sub    eax,0xffffff80
c0005b24:	25 ff 00 00 00       	and    eax,0xff
c0005b29:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005b2e:	66 90                	xchg   ax,ax
c0005b30:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005b35:	83 c4 14             	add    esp,0x14
c0005b38:	c3                   	ret    
c0005b39:	8d 76 00             	lea    esi,[esi+0x0]

c0005b3c <ff_oem2uni>:
c0005b3c:	83 ec 18             	sub    esp,0x18
c0005b3f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005b43:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005b47:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005b4c:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005b50:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005b57:	c7 44 24 10 40 db 01 c0 	mov    DWORD PTR [esp+0x10],0xc001db40
c0005b5f:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c0005b65:	77 0d                	ja     c0005b74 <ff_oem2uni+0x38>
c0005b67:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005b6b:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005b70:	eb 36                	jmp    c0005ba8 <ff_oem2uni+0x6c>
c0005b72:	66 90                	xchg   ax,ax
c0005b74:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0005b7a:	75 2c                	jne    c0005ba8 <ff_oem2uni+0x6c>
c0005b7c:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c0005b83:	77 23                	ja     c0005ba8 <ff_oem2uni+0x6c>
c0005b85:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005b89:	25 ff ff 00 00       	and    eax,0xffff
c0005b8e:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0005b93:	01 c0                	add    eax,eax
c0005b95:	89 c2                	mov    edx,eax
c0005b97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005b9b:	01 d0                	add    eax,edx
c0005b9d:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005ba0:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005ba5:	8d 76 00             	lea    esi,[esi+0x0]
c0005ba8:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0005bad:	83 c4 18             	add    esp,0x18
c0005bb0:	c3                   	ret    
c0005bb1:	8d 76 00             	lea    esi,[esi+0x0]

c0005bb4 <ff_wtoupper>:
c0005bb4:	83 ec 10             	sub    esp,0x10
c0005bb7:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0005bbf:	0f 87 77 01 00 00    	ja     c0005d3c <ff_wtoupper+0x188>
c0005bc5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005bc9:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005bce:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c0005bd5:	77 09                	ja     c0005be0 <ff_wtoupper+0x2c>
c0005bd7:	b8 40 d9 01 c0       	mov    eax,0xc001d940
c0005bdc:	eb 0a                	jmp    c0005be8 <ff_wtoupper+0x34>
c0005bde:	66 90                	xchg   ax,ax
c0005be0:	b8 80 d8 01 c0       	mov    eax,0xc001d880
c0005be5:	8d 76 00             	lea    esi,[esi+0x0]
c0005be8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005bec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005bf0:	8d 50 02             	lea    edx,[eax+0x2]
c0005bf3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005bf7:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005bfa:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005bff:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0005c05:	0f 84 21 01 00 00    	je     c0005d2c <ff_wtoupper+0x178>
c0005c0b:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005c10:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0005c15:	0f 82 11 01 00 00    	jb     c0005d2c <ff_wtoupper+0x178>
c0005c1b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c1f:	8d 50 02             	lea    edx,[eax+0x2]
c0005c22:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c26:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005c29:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005c2e:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005c33:	66 c1 e8 08          	shr    ax,0x8
c0005c37:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0005c3c:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c0005c43:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005c48:	31 d2                	xor    edx,edx
c0005c4a:	66 89 c2             	mov    dx,ax
c0005c4d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c51:	31 c9                	xor    ecx,ecx
c0005c53:	66 89 c1             	mov    cx,ax
c0005c56:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005c5b:	25 ff ff 00 00       	and    eax,0xffff
c0005c60:	01 c8                	add    eax,ecx
c0005c62:	39 c2                	cmp    edx,eax
c0005c64:	0f 8d 9a 00 00 00    	jge    c0005d04 <ff_wtoupper+0x150>
c0005c6a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005c6e:	25 ff ff 00 00       	and    eax,0xffff
c0005c73:	83 f8 08             	cmp    eax,0x8
c0005c76:	0f 87 ac 00 00 00    	ja     c0005d28 <ff_wtoupper+0x174>
c0005c7c:	8b 04 85 40 d8 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe27c0]
c0005c83:	ff e0                	jmp    eax
c0005c85:	8d 76 00             	lea    esi,[esi+0x0]
c0005c88:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005c8d:	31 d2                	xor    edx,edx
c0005c8f:	66 89 c2             	mov    dx,ax
c0005c92:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c96:	25 ff ff 00 00       	and    eax,0xffff
c0005c9b:	29 c2                	sub    edx,eax
c0005c9d:	89 d0                	mov    eax,edx
c0005c9f:	01 c0                	add    eax,eax
c0005ca1:	89 c2                	mov    edx,eax
c0005ca3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005ca7:	01 d0                	add    eax,edx
c0005ca9:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005cac:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005cb1:	eb 4d                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005cb3:	90                   	nop
c0005cb4:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005cb9:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0005cbd:	83 e0 01             	and    eax,0x1
c0005cc0:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c0005cc5:	eb 39                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005cc7:	90                   	nop
c0005cc8:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c0005cce:	eb 30                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005cd0:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c0005cd6:	eb 28                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005cd8:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c0005cde:	eb 20                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005ce0:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c0005ce6:	eb 18                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005ce8:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c0005cee:	eb 10                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005cf0:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c0005cf6:	eb 08                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005cf8:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c0005cff:	90                   	nop
c0005d00:	eb 26                	jmp    c0005d28 <ff_wtoupper+0x174>
c0005d02:	66 90                	xchg   ax,ax
c0005d04:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c0005d0a:	0f 85 dc fe ff ff    	jne    c0005bec <ff_wtoupper+0x38>
c0005d10:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005d15:	25 ff ff 00 00       	and    eax,0xffff
c0005d1a:	01 c0                	add    eax,eax
c0005d1c:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0005d20:	e9 c7 fe ff ff       	jmp    c0005bec <ff_wtoupper+0x38>
c0005d25:	8d 76 00             	lea    esi,[esi+0x0]
c0005d28:	90                   	nop
c0005d29:	8d 76 00             	lea    esi,[esi+0x0]
c0005d2c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005d31:	25 ff ff 00 00       	and    eax,0xffff
c0005d36:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005d3a:	66 90                	xchg   ax,ax
c0005d3c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005d40:	83 c4 10             	add    esp,0x10
c0005d43:	c3                   	ret    

c0005d44 <utf2ucs>:
c0005d44:	57                   	push   edi
c0005d45:	31 c9                	xor    ecx,ecx
c0005d47:	56                   	push   esi
c0005d48:	89 d7                	mov    edi,edx
c0005d4a:	53                   	push   ebx
c0005d4b:	0f be 1c 0f          	movsx  ebx,BYTE PTR [edi+ecx*1]
c0005d4f:	88 5c 48 01          	mov    BYTE PTR [eax+ecx*2+0x1],bl
c0005d53:	89 de                	mov    esi,ebx
c0005d55:	c1 fe 08             	sar    esi,0x8
c0005d58:	89 f2                	mov    edx,esi
c0005d5a:	88 14 48             	mov    BYTE PTR [eax+ecx*2],dl
c0005d5d:	41                   	inc    ecx
c0005d5e:	85 db                	test   ebx,ebx
c0005d60:	75 e9                	jne    c0005d4b <utf2ucs+0x7>
c0005d62:	5b                   	pop    ebx
c0005d63:	5e                   	pop    esi
c0005d64:	5f                   	pop    edi
c0005d65:	c3                   	ret    

c0005d66 <ucs2utfn>:
c0005d66:	83 e1 fe             	and    ecx,0xfffffffe
c0005d69:	01 d1                	add    ecx,edx
c0005d6b:	39 d1                	cmp    ecx,edx
c0005d6d:	75 04                	jne    c0005d73 <ucs2utfn+0xd>
c0005d6f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005d72:	c3                   	ret    
c0005d73:	57                   	push   edi
c0005d74:	56                   	push   esi
c0005d75:	53                   	push   ebx
c0005d76:	0f be 1a             	movsx  ebx,BYTE PTR [edx]
c0005d79:	83 c2 02             	add    edx,0x2
c0005d7c:	89 de                	mov    esi,ebx
c0005d7e:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
c0005d82:	c1 e6 08             	shl    esi,0x8
c0005d85:	09 f3                	or     ebx,esi
c0005d87:	83 fb 3b             	cmp    ebx,0x3b
c0005d8a:	74 51                	je     c0005ddd <ucs2utfn+0x77>
c0005d8c:	83 fb 7f             	cmp    ebx,0x7f
c0005d8f:	7f 05                	jg     c0005d96 <ucs2utfn+0x30>
c0005d91:	88 18                	mov    BYTE PTR [eax],bl
c0005d93:	40                   	inc    eax
c0005d94:	eb 43                	jmp    c0005dd9 <ucs2utfn+0x73>
c0005d96:	89 de                	mov    esi,ebx
c0005d98:	89 df                	mov    edi,ebx
c0005d9a:	c1 fe 06             	sar    esi,0x6
c0005d9d:	83 e7 3f             	and    edi,0x3f
c0005da0:	83 cf 80             	or     edi,0xffffff80
c0005da3:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0005da9:	7f 12                	jg     c0005dbd <ucs2utfn+0x57>
c0005dab:	89 f3                	mov    ebx,esi
c0005dad:	83 c0 02             	add    eax,0x2
c0005db0:	83 cb c0             	or     ebx,0xffffffc0
c0005db3:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005db6:	89 fb                	mov    ebx,edi
c0005db8:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005dbb:	eb 1c                	jmp    c0005dd9 <ucs2utfn+0x73>
c0005dbd:	c1 fb 0c             	sar    ebx,0xc
c0005dc0:	83 e6 3f             	and    esi,0x3f
c0005dc3:	83 cb e0             	or     ebx,0xffffffe0
c0005dc6:	83 c0 03             	add    eax,0x3
c0005dc9:	88 58 fd             	mov    BYTE PTR [eax-0x3],bl
c0005dcc:	89 f3                	mov    ebx,esi
c0005dce:	83 cb 80             	or     ebx,0xffffff80
c0005dd1:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005dd4:	89 fb                	mov    ebx,edi
c0005dd6:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005dd9:	39 d1                	cmp    ecx,edx
c0005ddb:	75 99                	jne    c0005d76 <ucs2utfn+0x10>
c0005ddd:	5b                   	pop    ebx
c0005dde:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005de1:	5e                   	pop    esi
c0005de2:	5f                   	pop    edi
c0005de3:	c3                   	ret    

c0005de4 <isjoliet>:
c0005de4:	31 d2                	xor    edx,edx
c0005de6:	80 38 25             	cmp    BYTE PTR [eax],0x25
c0005de9:	75 22                	jne    c0005e0d <isjoliet+0x29>
c0005deb:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c0005def:	75 1c                	jne    c0005e0d <isjoliet+0x29>
c0005df1:	8a 40 02             	mov    al,BYTE PTR [eax+0x2]
c0005df4:	ba 02 00 00 00       	mov    edx,0x2
c0005df9:	3c 43                	cmp    al,0x43
c0005dfb:	74 10                	je     c0005e0d <isjoliet+0x29>
c0005dfd:	ba 03 00 00 00       	mov    edx,0x3
c0005e02:	3c 45                	cmp    al,0x45
c0005e04:	74 07                	je     c0005e0d <isjoliet+0x29>
c0005e06:	31 d2                	xor    edx,edx
c0005e08:	3c 40                	cmp    al,0x40
c0005e0a:	0f 94 c2             	sete   dl
c0005e0d:	89 d0                	mov    eax,edx
c0005e0f:	c3                   	ret    

c0005e10 <htohl_32>:
c0005e10:	8b 00                	mov    eax,DWORD PTR [eax]
c0005e12:	c3                   	ret    

c0005e13 <iso_733>:
c0005e13:	eb fb                	jmp    c0005e10 <htohl_32>

c0005e15 <bclear_cache>:
c0005e15:	31 c0                	xor    eax,eax
c0005e17:	8b 14 85 20 20 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffddfe0]
c0005e1e:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0005e24:	8b 14 85 80 20 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffddf80]
c0005e2b:	40                   	inc    eax
c0005e2c:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0005e32:	83 f8 10             	cmp    eax,0x10
c0005e35:	75 e0                	jne    c0005e17 <bclear_cache+0x2>
c0005e37:	c3                   	ret    

c0005e38 <bgrad_cache>:
c0005e38:	83 fa 0e             	cmp    edx,0xe
c0005e3b:	77 16                	ja     c0005e53 <bgrad_cache+0x1b>
c0005e3d:	53                   	push   ebx
c0005e3e:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
c0005e41:	8b 5c 90 04          	mov    ebx,DWORD PTR [eax+edx*4+0x4]
c0005e45:	89 1c 90             	mov    DWORD PTR [eax+edx*4],ebx
c0005e48:	42                   	inc    edx
c0005e49:	83 fa 0f             	cmp    edx,0xf
c0005e4c:	75 f3                	jne    c0005e41 <bgrad_cache+0x9>
c0005e4e:	89 48 3c             	mov    DWORD PTR [eax+0x3c],ecx
c0005e51:	5b                   	pop    ebx
c0005e52:	c3                   	ret    
c0005e53:	c3                   	ret    

c0005e54 <bclear>:
c0005e54:	eb bf                	jmp    c0005e15 <bclear_cache>

c0005e56 <iso_break_all>:
c0005e56:	31 c0                	xor    eax,eax
c0005e58:	c7 80 d0 25 02 c0 01 00 00 00 	mov    DWORD PTR [eax-0x3ffdda30],0x1
c0005e62:	05 94 00 00 00       	add    eax,0x94
c0005e67:	3d 40 09 00 00       	cmp    eax,0x940
c0005e6c:	75 ea                	jne    c0005e58 <iso_break_all+0x2>
c0005e6e:	c3                   	ret    

c0005e6f <ucscompare>:
c0005e6f:	55                   	push   ebp
c0005e70:	57                   	push   edi
c0005e71:	89 c7                	mov    edi,eax
c0005e73:	56                   	push   esi
c0005e74:	89 d6                	mov    esi,edx
c0005e76:	53                   	push   ebx
c0005e77:	31 d2                	xor    edx,edx
c0005e79:	83 ec 1c             	sub    esp,0x1c
c0005e7c:	0f be 1c 16          	movsx  ebx,BYTE PTR [esi+edx*1]
c0005e80:	0f be 44 16 01       	movsx  eax,BYTE PTR [esi+edx*1+0x1]
c0005e85:	c1 e3 08             	shl    ebx,0x8
c0005e88:	09 c3                	or     ebx,eax
c0005e8a:	39 ca                	cmp    edx,ecx
c0005e8c:	7d 42                	jge    c0005ed0 <ucscompare+0x61>
c0005e8e:	0f be 04 17          	movsx  eax,BYTE PTR [edi+edx*1]
c0005e92:	0f be 6c 17 01       	movsx  ebp,BYTE PTR [edi+edx*1+0x1]
c0005e97:	c1 e0 08             	shl    eax,0x8
c0005e9a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005e9e:	09 e8                	or     eax,ebp
c0005ea0:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005ea4:	83 f8 3b             	cmp    eax,0x3b
c0005ea7:	74 27                	je     c0005ed0 <ucscompare+0x61>
c0005ea9:	83 ec 0c             	sub    esp,0xc
c0005eac:	50                   	push   eax
c0005ead:	e8 1e aa ff ff       	call   c00008d0 <tolower>
c0005eb2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0005eb5:	89 c5                	mov    ebp,eax
c0005eb7:	e8 14 aa ff ff       	call   c00008d0 <tolower>
c0005ebc:	83 c4 10             	add    esp,0x10
c0005ebf:	39 c5                	cmp    ebp,eax
c0005ec1:	75 20                	jne    c0005ee3 <ucscompare+0x74>
c0005ec3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0005ec7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005ecb:	83 c2 02             	add    edx,0x2
c0005ece:	eb ac                	jmp    c0005e7c <ucscompare+0xd>
c0005ed0:	85 db                	test   ebx,ebx
c0005ed2:	0f 95 c2             	setne  dl
c0005ed5:	31 c0                	xor    eax,eax
c0005ed7:	83 fb 2f             	cmp    ebx,0x2f
c0005eda:	0f 95 c0             	setne  al
c0005edd:	21 d0                	and    eax,edx
c0005edf:	f7 d8                	neg    eax
c0005ee1:	eb 03                	jmp    c0005ee6 <ucscompare+0x77>
c0005ee3:	83 c8 ff             	or     eax,0xffffffff
c0005ee6:	83 c4 1c             	add    esp,0x1c
c0005ee9:	5b                   	pop    ebx
c0005eea:	5e                   	pop    esi
c0005eeb:	5f                   	pop    edi
c0005eec:	5d                   	pop    ebp
c0005eed:	c3                   	ret    

c0005eee <fncompare>:
c0005eee:	55                   	push   ebp
c0005eef:	57                   	push   edi
c0005ef0:	89 c7                	mov    edi,eax
c0005ef2:	56                   	push   esi
c0005ef3:	89 ce                	mov    esi,ecx
c0005ef5:	53                   	push   ebx
c0005ef6:	31 db                	xor    ebx,ebx
c0005ef8:	83 ec 1c             	sub    esp,0x1c
c0005efb:	39 d3                	cmp    ebx,edx
c0005efd:	7d 43                	jge    c0005f42 <fncompare+0x54>
c0005eff:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c0005f03:	3c 3b                	cmp    al,0x3b
c0005f05:	74 3b                	je     c0005f42 <fncompare+0x54>
c0005f07:	3c 2e                	cmp    al,0x2e
c0005f09:	75 0e                	jne    c0005f19 <fncompare+0x2b>
c0005f0b:	8d 4a ff             	lea    ecx,[edx-0x1]
c0005f0e:	39 d9                	cmp    ecx,ebx
c0005f10:	74 30                	je     c0005f42 <fncompare+0x54>
c0005f12:	80 7c 1f 01 3b       	cmp    BYTE PTR [edi+ebx*1+0x1],0x3b
c0005f17:	74 29                	je     c0005f42 <fncompare+0x54>
c0005f19:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005f1d:	83 ec 0c             	sub    esp,0xc
c0005f20:	50                   	push   eax
c0005f21:	e8 aa a9 ff ff       	call   c00008d0 <tolower>
c0005f26:	89 c5                	mov    ebp,eax
c0005f28:	0f be 04 1e          	movsx  eax,BYTE PTR [esi+ebx*1]
c0005f2c:	89 04 24             	mov    DWORD PTR [esp],eax
c0005f2f:	e8 9c a9 ff ff       	call   c00008d0 <tolower>
c0005f34:	83 c4 10             	add    esp,0x10
c0005f37:	39 c5                	cmp    ebp,eax
c0005f39:	75 1d                	jne    c0005f58 <fncompare+0x6a>
c0005f3b:	43                   	inc    ebx
c0005f3c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005f40:	eb b9                	jmp    c0005efb <fncompare+0xd>
c0005f42:	8a 14 1e             	mov    dl,BYTE PTR [esi+ebx*1]
c0005f45:	84 d2                	test   dl,dl
c0005f47:	0f 95 c1             	setne  cl
c0005f4a:	31 c0                	xor    eax,eax
c0005f4c:	80 fa 2f             	cmp    dl,0x2f
c0005f4f:	0f 95 c0             	setne  al
c0005f52:	21 c8                	and    eax,ecx
c0005f54:	f7 d8                	neg    eax
c0005f56:	eb 03                	jmp    c0005f5b <fncompare+0x6d>
c0005f58:	83 c8 ff             	or     eax,0xffffffff
c0005f5b:	83 c4 1c             	add    esp,0x1c
c0005f5e:	5b                   	pop    ebx
c0005f5f:	5e                   	pop    esi
c0005f60:	5f                   	pop    edi
c0005f61:	5d                   	pop    ebp
c0005f62:	c3                   	ret    

c0005f63 <isoReadDiscSector>:
c0005f63:	83 ec 0c             	sub    esp,0xc
c0005f66:	0f be 05 60 20 02 c0 	movsx  eax,BYTE PTR ds:0xc0022060
c0005f6d:	50                   	push   eax
c0005f6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005f72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005f76:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005f7a:	e8 99 18 01 00       	call   c0017818 <isoReadDiscSectorHelper>
c0005f7f:	83 c4 1c             	add    esp,0x1c
c0005f82:	c3                   	ret    

c0005f83 <bread_cache>:
c0005f83:	55                   	push   ebp
c0005f84:	57                   	push   edi
c0005f85:	89 d7                	mov    edi,edx
c0005f87:	56                   	push   esi
c0005f88:	ba 0f 00 00 00       	mov    edx,0xf
c0005f8d:	53                   	push   ebx
c0005f8e:	89 c6                	mov    esi,eax
c0005f90:	83 ec 0c             	sub    esp,0xc
c0005f93:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c0005f96:	39 38                	cmp    DWORD PTR [eax],edi
c0005f98:	74 3c                	je     c0005fd6 <bread_cache+0x53>
c0005f9a:	4a                   	dec    edx
c0005f9b:	83 fa ff             	cmp    edx,0xffffffff
c0005f9e:	75 f3                	jne    c0005f93 <bread_cache+0x10>
c0005fa0:	31 db                	xor    ebx,ebx
c0005fa2:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c0005fa5:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c0005fa8:	74 08                	je     c0005fb2 <bread_cache+0x2f>
c0005faa:	43                   	inc    ebx
c0005fab:	83 fb 10             	cmp    ebx,0x10
c0005fae:	75 f2                	jne    c0005fa2 <bread_cache+0x1f>
c0005fb0:	31 db                	xor    ebx,ebx
c0005fb2:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c0005fb5:	50                   	push   eax
c0005fb6:	6a 01                	push   0x1
c0005fb8:	57                   	push   edi
c0005fb9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0005fbc:	83 c0 04             	add    eax,0x4
c0005fbf:	50                   	push   eax
c0005fc0:	e8 9e ff ff ff       	call   c0005f63 <isoReadDiscSector>
c0005fc5:	83 c4 10             	add    esp,0x10
c0005fc8:	83 c9 ff             	or     ecx,0xffffffff
c0005fcb:	85 c0                	test   eax,eax
c0005fcd:	78 13                	js     c0005fe2 <bread_cache+0x5f>
c0005fcf:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0005fd2:	89 da                	mov    edx,ebx
c0005fd4:	89 38                	mov    DWORD PTR [eax],edi
c0005fd6:	89 f0                	mov    eax,esi
c0005fd8:	e8 5b fe ff ff       	call   c0005e38 <bgrad_cache>
c0005fdd:	b9 0f 00 00 00       	mov    ecx,0xf
c0005fe2:	83 c4 0c             	add    esp,0xc
c0005fe5:	89 c8                	mov    eax,ecx
c0005fe7:	5b                   	pop    ebx
c0005fe8:	5e                   	pop    esi
c0005fe9:	5f                   	pop    edi
c0005fea:	5d                   	pop    ebp
c0005feb:	c3                   	ret    

c0005fec <biread>:
c0005fec:	89 c2                	mov    edx,eax
c0005fee:	b8 80 20 02 c0       	mov    eax,0xc0022080
c0005ff3:	eb 8e                	jmp    c0005f83 <bread_cache>

c0005ff5 <bdread>:
c0005ff5:	89 c2                	mov    edx,eax
c0005ff7:	b8 20 20 02 c0       	mov    eax,0xc0022020
c0005ffc:	eb 85                	jmp    c0005f83 <bread_cache>

c0005ffe <strnicmp>:
c0005ffe:	55                   	push   ebp
c0005fff:	57                   	push   edi
c0006000:	56                   	push   esi
c0006001:	31 f6                	xor    esi,esi
c0006003:	53                   	push   ebx
c0006004:	83 ec 0c             	sub    esp,0xc
c0006007:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c000600b:	3b 74 24 28          	cmp    esi,DWORD PTR [esp+0x28]
c000600f:	74 42                	je     c0006053 <strnicmp+0x55>
c0006011:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006015:	0f be 04 30          	movsx  eax,BYTE PTR [eax+esi*1]
c0006019:	84 c0                	test   al,al
c000601b:	74 36                	je     c0006053 <strnicmp+0x55>
c000601d:	8a 14 33             	mov    dl,BYTE PTR [ebx+esi*1]
c0006020:	84 d2                	test   dl,dl
c0006022:	74 2f                	je     c0006053 <strnicmp+0x55>
c0006024:	38 d0                	cmp    al,dl
c0006026:	8d 6e 01             	lea    ebp,[esi+0x1]
c0006029:	75 04                	jne    c000602f <strnicmp+0x31>
c000602b:	89 ee                	mov    esi,ebp
c000602d:	eb dc                	jmp    c000600b <strnicmp+0xd>
c000602f:	83 ec 0c             	sub    esp,0xc
c0006032:	50                   	push   eax
c0006033:	e8 98 a8 ff ff       	call   c00008d0 <tolower>
c0006038:	89 c7                	mov    edi,eax
c000603a:	0f be 04 33          	movsx  eax,BYTE PTR [ebx+esi*1]
c000603e:	89 ee                	mov    esi,ebp
c0006040:	89 04 24             	mov    DWORD PTR [esp],eax
c0006043:	e8 88 a8 ff ff       	call   c00008d0 <tolower>
c0006048:	83 c4 10             	add    esp,0x10
c000604b:	29 c7                	sub    edi,eax
c000604d:	89 f8                	mov    eax,edi
c000604f:	74 ba                	je     c000600b <strnicmp+0xd>
c0006051:	eb 02                	jmp    c0006055 <strnicmp+0x57>
c0006053:	31 c0                	xor    eax,eax
c0006055:	83 c4 0c             	add    esp,0xc
c0006058:	5b                   	pop    ebx
c0006059:	5e                   	pop    esi
c000605a:	5f                   	pop    edi
c000605b:	5d                   	pop    ebp
c000605c:	c3                   	ret    

c000605d <find_object>:
c000605d:	55                   	push   ebp
c000605e:	89 c5                	mov    ebp,eax
c0006060:	57                   	push   edi
c0006061:	56                   	push   esi
c0006062:	53                   	push   ebx
c0006063:	89 d3                	mov    ebx,edx
c0006065:	81 ec 2c 01 00 00    	sub    esp,0x12c
c000606b:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0006072:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006076:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000607a:	83 3d b4 2e 02 c0 00 	cmp    DWORD PTR ds:0xc0022eb4,0x0
c0006081:	74 0b                	je     c000608e <find_object+0x31>
c0006083:	89 ea                	mov    edx,ebp
c0006085:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006089:	e8 b6 fc ff ff       	call   c0005d44 <utf2ucs>
c000608e:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006091:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006095:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c000609a:	7e 11                	jle    c00060ad <find_object+0x50>
c000609c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00060a0:	e8 47 ff ff ff       	call   c0005fec <biread>
c00060a5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00060a9:	85 c0                	test   eax,eax
c00060ab:	79 07                	jns    c00060b4 <find_object+0x57>
c00060ad:	31 db                	xor    ebx,ebx
c00060af:	e9 5a 01 00 00       	jmp    c000620e <find_object+0x1b1>
c00060b4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00060bc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00060c0:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00060c4:	8b 04 85 80 20 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffddf80]
c00060cb:	8d 5c 38 04          	lea    ebx,[eax+edi*1+0x4]
c00060cf:	8a 03                	mov    al,BYTE PTR [ebx]
c00060d1:	84 c0                	test   al,al
c00060d3:	75 0e                	jne    c00060e3 <find_object+0x86>
c00060d5:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00060d9:	81 6c 24 10 00 08 00 00 	sub    DWORD PTR [esp+0x10],0x800
c00060e1:	eb b2                	jmp    c0006095 <find_object+0x38>
c00060e3:	8b 35 b4 2e 02 c0    	mov    esi,DWORD PTR ds:0xc0022eb4
c00060e9:	0f b6 4b 20          	movzx  ecx,BYTE PTR [ebx+0x20]
c00060ed:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00060f1:	89 ca                	mov    edx,ecx
c00060f3:	85 f6                	test   esi,esi
c00060f5:	74 27                	je     c000611e <find_object+0xc1>
c00060f7:	8d 43 21             	lea    eax,[ebx+0x21]
c00060fa:	8d 54 24 20          	lea    edx,[esp+0x20]
c00060fe:	e8 6c fd ff ff       	call   c0005e6f <ucscompare>
c0006103:	85 c0                	test   eax,eax
c0006105:	0f 85 db 00 00 00    	jne    c00061e6 <find_object+0x189>
c000610b:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c000610f:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c0006113:	0f 85 cd 00 00 00    	jne    c00061e6 <find_object+0x189>
c0006119:	e9 f0 00 00 00       	jmp    c000620e <find_object+0x1b1>
c000611e:	0f b6 f0             	movzx  esi,al
c0006121:	8d 7c 0b 21          	lea    edi,[ebx+ecx*1+0x21]
c0006125:	29 ce                	sub    esi,ecx
c0006127:	80 e2 01             	and    dl,0x1
c000612a:	74 05                	je     c0006131 <find_object+0xd4>
c000612c:	83 ee 21             	sub    esi,0x21
c000612f:	eb 55                	jmp    c0006186 <find_object+0x129>
c0006131:	47                   	inc    edi
c0006132:	83 ee 22             	sub    esi,0x22
c0006135:	eb 4f                	jmp    c0006186 <find_object+0x129>
c0006137:	8a 47 03             	mov    al,BYTE PTR [edi+0x3]
c000613a:	48                   	dec    eax
c000613b:	3c 01                	cmp    al,0x1
c000613d:	77 4c                	ja     c000618b <find_object+0x12e>
c000613f:	50                   	push   eax
c0006140:	6a 02                	push   0x2
c0006142:	68 40 dc 01 c0       	push   0xc001dc40
c0006147:	57                   	push   edi
c0006148:	e8 13 a6 ff ff       	call   c0000760 <strncmp>
c000614d:	83 c4 10             	add    esp,0x10
c0006150:	85 c0                	test   eax,eax
c0006152:	75 2a                	jne    c000617e <find_object+0x121>
c0006154:	0f be 57 02          	movsx  edx,BYTE PTR [edi+0x2]
c0006158:	8d 42 fb             	lea    eax,[edx-0x5]
c000615b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000615f:	50                   	push   eax
c0006160:	8d 47 05             	lea    eax,[edi+0x5]
c0006163:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0006167:	50                   	push   eax
c0006168:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000616c:	50                   	push   eax
c000616d:	e8 be a4 ff ff       	call   c0000630 <strncpy>
c0006172:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0006176:	c6 44 04 30 00       	mov    BYTE PTR [esp+eax*1+0x30],0x0
c000617b:	83 c4 10             	add    esp,0x10
c000617e:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006182:	29 c6                	sub    esi,eax
c0006184:	01 c7                	add    edi,eax
c0006186:	83 fe 03             	cmp    esi,0x3
c0006189:	7f ac                	jg     c0006137 <find_object+0xda>
c000618b:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0006190:	7e 33                	jle    c00061c5 <find_object+0x168>
c0006192:	51                   	push   ecx
c0006193:	51                   	push   ecx
c0006194:	6a 2f                	push   0x2f
c0006196:	55                   	push   ebp
c0006197:	e8 94 a5 ff ff       	call   c0000730 <strchr>
c000619c:	83 c4 10             	add    esp,0x10
c000619f:	85 c0                	test   eax,eax
c00061a1:	74 04                	je     c00061a7 <find_object+0x14a>
c00061a3:	29 e8                	sub    eax,ebp
c00061a5:	eb 0c                	jmp    c00061b3 <find_object+0x156>
c00061a7:	83 ec 0c             	sub    esp,0xc
c00061aa:	55                   	push   ebp
c00061ab:	e8 90 a3 ff ff       	call   c0000540 <strlen>
c00061b0:	83 c4 10             	add    esp,0x10
c00061b3:	52                   	push   edx
c00061b4:	50                   	push   eax
c00061b5:	55                   	push   ebp
c00061b6:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00061ba:	50                   	push   eax
c00061bb:	e8 3e fe ff ff       	call   c0005ffe <strnicmp>
c00061c0:	83 c4 10             	add    esp,0x10
c00061c3:	eb 0e                	jmp    c00061d3 <find_object+0x176>
c00061c5:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c00061c9:	8d 43 21             	lea    eax,[ebx+0x21]
c00061cc:	89 e9                	mov    ecx,ebp
c00061ce:	e8 1b fd ff ff       	call   c0005eee <fncompare>
c00061d3:	85 c0                	test   eax,eax
c00061d5:	75 0f                	jne    c00061e6 <find_object+0x189>
c00061d7:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c00061db:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c00061df:	74 2d                	je     c000620e <find_object+0x1b1>
c00061e1:	e9 c7 fe ff ff       	jmp    c00060ad <find_object+0x50>
c00061e6:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c00061e9:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00061ed:	81 7c 24 0c ff 07 00 00 	cmp    DWORD PTR [esp+0xc],0x7ff
c00061f5:	0f 8f da fe ff ff    	jg     c00060d5 <find_object+0x78>
c00061fb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00061ff:	39 4c 24 10          	cmp    DWORD PTR [esp+0x10],ecx
c0006203:	0f 8f b3 fe ff ff    	jg     c00060bc <find_object+0x5f>
c0006209:	e9 c7 fe ff ff       	jmp    c00060d5 <find_object+0x78>
c000620e:	81 c4 2c 01 00 00    	add    esp,0x12c
c0006214:	89 d8                	mov    eax,ebx
c0006216:	5b                   	pop    ebx
c0006217:	5e                   	pop    esi
c0006218:	5f                   	pop    edi
c0006219:	5d                   	pop    ebp
c000621a:	c3                   	ret    

c000621b <find_object_path>:
c000621b:	55                   	push   ebp
c000621c:	57                   	push   edi
c000621d:	89 d7                	mov    edi,edx
c000621f:	56                   	push   esi
c0006220:	89 c6                	mov    esi,eax
c0006222:	53                   	push   ebx
c0006223:	89 cb                	mov    ebx,ecx
c0006225:	83 ec 0c             	sub    esp,0xc
c0006228:	50                   	push   eax
c0006229:	50                   	push   eax
c000622a:	6a 2f                	push   0x2f
c000622c:	56                   	push   esi
c000622d:	e8 fe a4 ff ff       	call   c0000730 <strchr>
c0006232:	83 c4 10             	add    esp,0x10
c0006235:	89 c5                	mov    ebp,eax
c0006237:	85 c0                	test   eax,eax
c0006239:	74 3a                	je     c0006275 <find_object_path+0x5a>
c000623b:	39 ee                	cmp    esi,ebp
c000623d:	74 31                	je     c0006270 <find_object_path+0x55>
c000623f:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006242:	e8 cc fb ff ff       	call   c0005e13 <iso_733>
c0006247:	89 c2                	mov    edx,eax
c0006249:	8d 43 02             	lea    eax,[ebx+0x2]
c000624c:	e8 c2 fb ff ff       	call   c0005e13 <iso_733>
c0006251:	83 ec 0c             	sub    esp,0xc
c0006254:	89 c1                	mov    ecx,eax
c0006256:	52                   	push   edx
c0006257:	89 f0                	mov    eax,esi
c0006259:	ba 01 00 00 00       	mov    edx,0x1
c000625e:	e8 fa fd ff ff       	call   c000605d <find_object>
c0006263:	83 c4 10             	add    esp,0x10
c0006266:	89 c3                	mov    ebx,eax
c0006268:	85 c0                	test   eax,eax
c000626a:	75 04                	jne    c0006270 <find_object_path+0x55>
c000626c:	31 db                	xor    ebx,ebx
c000626e:	eb 36                	jmp    c00062a6 <find_object_path+0x8b>
c0006270:	8d 75 01             	lea    esi,[ebp+0x1]
c0006273:	eb b3                	jmp    c0006228 <find_object_path+0xd>
c0006275:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006278:	74 28                	je     c00062a2 <find_object_path+0x87>
c000627a:	8d 43 0a             	lea    eax,[ebx+0xa]
c000627d:	e8 91 fb ff ff       	call   c0005e13 <iso_733>
c0006282:	89 c2                	mov    edx,eax
c0006284:	8d 43 02             	lea    eax,[ebx+0x2]
c0006287:	e8 87 fb ff ff       	call   c0005e13 <iso_733>
c000628c:	83 ec 0c             	sub    esp,0xc
c000628f:	89 c1                	mov    ecx,eax
c0006291:	52                   	push   edx
c0006292:	89 f0                	mov    eax,esi
c0006294:	89 fa                	mov    edx,edi
c0006296:	e8 c2 fd ff ff       	call   c000605d <find_object>
c000629b:	83 c4 10             	add    esp,0x10
c000629e:	89 c3                	mov    ebx,eax
c00062a0:	eb 04                	jmp    c00062a6 <find_object_path+0x8b>
c00062a2:	85 ff                	test   edi,edi
c00062a4:	74 c6                	je     c000626c <find_object_path+0x51>
c00062a6:	83 c4 0c             	add    esp,0xc
c00062a9:	89 d8                	mov    eax,ebx
c00062ab:	5b                   	pop    ebx
c00062ac:	5e                   	pop    esi
c00062ad:	5f                   	pop    edi
c00062ae:	5d                   	pop    ebp
c00062af:	c3                   	ret    

c00062b0 <stricmp>:
c00062b0:	57                   	push   edi
c00062b1:	56                   	push   esi
c00062b2:	31 f6                	xor    esi,esi
c00062b4:	53                   	push   ebx
c00062b5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00062b9:	83 ec 0c             	sub    esp,0xc
c00062bc:	0f b6 3c 30          	movzx  edi,BYTE PTR [eax+esi*1]
c00062c0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00062c4:	0f b6 04 30          	movzx  eax,BYTE PTR [eax+esi*1]
c00062c8:	50                   	push   eax
c00062c9:	e8 e2 a5 ff ff       	call   c00008b0 <toupper>
c00062ce:	89 04 24             	mov    DWORD PTR [esp],eax
c00062d1:	e8 fa a5 ff ff       	call   c00008d0 <tolower>
c00062d6:	89 3c 24             	mov    DWORD PTR [esp],edi
c00062d9:	89 c3                	mov    ebx,eax
c00062db:	e8 d0 a5 ff ff       	call   c00008b0 <toupper>
c00062e0:	89 04 24             	mov    DWORD PTR [esp],eax
c00062e3:	e8 e8 a5 ff ff       	call   c00008d0 <tolower>
c00062e8:	83 c4 10             	add    esp,0x10
c00062eb:	39 c3                	cmp    ebx,eax
c00062ed:	75 05                	jne    c00062f4 <stricmp+0x44>
c00062ef:	46                   	inc    esi
c00062f0:	85 db                	test   ebx,ebx
c00062f2:	75 c1                	jne    c00062b5 <stricmp+0x5>
c00062f4:	29 c3                	sub    ebx,eax
c00062f6:	89 d8                	mov    eax,ebx
c00062f8:	5b                   	pop    ebx
c00062f9:	5e                   	pop    esi
c00062fa:	5f                   	pop    edi
c00062fb:	c3                   	ret    

c00062fc <iso_open>:
c00062fc:	57                   	push   edi
c00062fd:	31 c0                	xor    eax,eax
c00062ff:	56                   	push   esi
c0006300:	b9 80 2e 02 c0       	mov    ecx,0xc0022e80
c0006305:	53                   	push   ebx
c0006306:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000630b:	0f 95 c0             	setne  al
c000630e:	89 c2                	mov    edx,eax
c0006310:	89 c6                	mov    esi,eax
c0006312:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006316:	e8 00 ff ff ff       	call   c000621b <find_object_path>
c000631b:	83 ca ff             	or     edx,0xffffffff
c000631e:	85 c0                	test   eax,eax
c0006320:	74 5e                	je     c0006380 <iso_open+0x84>
c0006322:	89 c1                	mov    ecx,eax
c0006324:	31 d2                	xor    edx,edx
c0006326:	69 fa 94 00 00 00    	imul   edi,edx,0x94
c000632c:	83 bf 40 25 02 c0 00 	cmp    DWORD PTR [edi-0x3ffddac0],0x0
c0006333:	75 42                	jne    c0006377 <iso_open+0x7b>
c0006335:	8d 41 02             	lea    eax,[ecx+0x2]
c0006338:	c7 87 40 25 02 c0 ff ff ff ff 	mov    DWORD PTR [edi-0x3ffddac0],0xffffffff
c0006342:	e8 cc fa ff ff       	call   c0005e13 <iso_733>
c0006347:	89 b7 44 25 02 c0    	mov    DWORD PTR [edi-0x3ffddabc],esi
c000634d:	89 87 40 25 02 c0    	mov    DWORD PTR [edi-0x3ffddac0],eax
c0006353:	c7 87 48 25 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffddab8],0x0
c000635d:	8d 41 0a             	lea    eax,[ecx+0xa]
c0006360:	e8 ae fa ff ff       	call   c0005e13 <iso_733>
c0006365:	c7 87 d0 25 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffdda30],0x0
c000636f:	89 87 4c 25 02 c0    	mov    DWORD PTR [edi-0x3ffddab4],eax
c0006375:	eb 09                	jmp    c0006380 <iso_open+0x84>
c0006377:	42                   	inc    edx
c0006378:	83 fa 10             	cmp    edx,0x10
c000637b:	75 a9                	jne    c0006326 <iso_open+0x2a>
c000637d:	83 ca ff             	or     edx,0xffffffff
c0006380:	5b                   	pop    ebx
c0006381:	89 d0                	mov    eax,edx
c0006383:	5e                   	pop    esi
c0006384:	5f                   	pop    edi
c0006385:	c3                   	ret    

c0006386 <iso_close>:
c0006386:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000638a:	83 f8 0f             	cmp    eax,0xf
c000638d:	7f 10                	jg     c000639f <iso_close+0x19>
c000638f:	69 c0 94 00 00 00    	imul   eax,eax,0x94
c0006395:	c7 80 40 25 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffddac0],0x0
c000639f:	e9 71 fa ff ff       	jmp    c0005e15 <bclear_cache>

c00063a4 <iso_read>:
c00063a4:	55                   	push   ebp
c00063a5:	57                   	push   edi
c00063a6:	56                   	push   esi
c00063a7:	53                   	push   ebx
c00063a8:	83 ec 1c             	sub    esp,0x1c
c00063ab:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00063af:	83 fd 0f             	cmp    ebp,0xf
c00063b2:	7e 0a                	jle    c00063be <iso_read+0x1a>
c00063b4:	83 c8 ff             	or     eax,0xffffffff
c00063b7:	89 c2                	mov    edx,eax
c00063b9:	e9 f4 00 00 00       	jmp    c00064b2 <iso_read+0x10e>
c00063be:	69 ed 94 00 00 00    	imul   ebp,ebp,0x94
c00063c4:	83 bd 40 25 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffddac0],0x0
c00063cb:	74 e7                	je     c00063b4 <iso_read+0x10>
c00063cd:	8b 95 d0 25 02 c0    	mov    edx,DWORD PTR [ebp-0x3ffdda30]
c00063d3:	85 d2                	test   edx,edx
c00063d5:	75 dd                	jne    c00063b4 <iso_read+0x10>
c00063d7:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c00063dc:	0f 84 cd 00 00 00    	je     c00064af <iso_read+0x10b>
c00063e2:	8b 85 48 25 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffddab8]
c00063e8:	8b 8d 4c 25 02 c0    	mov    ecx,DWORD PTR [ebp-0x3ffddab4]
c00063ee:	29 c1                	sub    ecx,eax
c00063f0:	3b 4c 24 38          	cmp    ecx,DWORD PTR [esp+0x38]
c00063f4:	76 04                	jbe    c00063fa <iso_read+0x56>
c00063f6:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00063fa:	85 c9                	test   ecx,ecx
c00063fc:	0f 84 ad 00 00 00    	je     c00064af <iso_read+0x10b>
c0006402:	89 c6                	mov    esi,eax
c0006404:	bb 00 08 00 00       	mov    ebx,0x800
c0006409:	81 e6 ff 07 00 00    	and    esi,0x7ff
c000640f:	c1 e8 0b             	shr    eax,0xb
c0006412:	29 f3                	sub    ebx,esi
c0006414:	03 85 40 25 02 c0    	add    eax,DWORD PTR [ebp-0x3ffddac0]
c000641a:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0006420:	7e 3f                	jle    c0006461 <iso_read+0xbd>
c0006422:	81 fb 00 08 00 00    	cmp    ebx,0x800
c0006428:	75 37                	jne    c0006461 <iso_read+0xbd>
c000642a:	be 20 00 00 00       	mov    esi,0x20
c000642f:	81 f9 ff 07 01 00    	cmp    ecx,0x107ff
c0006435:	7f 05                	jg     c000643c <iso_read+0x98>
c0006437:	89 ce                	mov    esi,ecx
c0006439:	c1 fe 0b             	sar    esi,0xb
c000643c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006440:	89 f3                	mov    ebx,esi
c0006442:	c1 e3 0b             	shl    ebx,0xb
c0006445:	52                   	push   edx
c0006446:	56                   	push   esi
c0006447:	50                   	push   eax
c0006448:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000644c:	e8 12 fb ff ff       	call   c0005f63 <isoReadDiscSector>
c0006451:	83 c4 10             	add    esp,0x10
c0006454:	85 c0                	test   eax,eax
c0006456:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000645a:	7f 3e                	jg     c000649a <iso_read+0xf6>
c000645c:	e9 53 ff ff ff       	jmp    c00063b4 <iso_read+0x10>
c0006461:	39 cb                	cmp    ebx,ecx
c0006463:	7e 02                	jle    c0006467 <iso_read+0xc3>
c0006465:	89 cb                	mov    ebx,ecx
c0006467:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000646b:	e8 85 fb ff ff       	call   c0005ff5 <bdread>
c0006470:	85 c0                	test   eax,eax
c0006472:	0f 88 3c ff ff ff    	js     c00063b4 <iso_read+0x10>
c0006478:	8b 0c 85 20 20 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffddfe0]
c000647f:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0006483:	8b 85 48 25 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffddab8]
c0006489:	25 ff 07 00 00       	and    eax,0x7ff
c000648e:	8d 74 01 04          	lea    esi,[ecx+eax*1+0x4]
c0006492:	89 d9                	mov    ecx,ebx
c0006494:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006496:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000649a:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
c000649e:	01 9d 48 25 02 c0    	add    DWORD PTR [ebp-0x3ffddab8],ebx
c00064a4:	29 5c 24 38          	sub    DWORD PTR [esp+0x38],ebx
c00064a8:	01 da                	add    edx,ebx
c00064aa:	e9 28 ff ff ff       	jmp    c00063d7 <iso_read+0x33>
c00064af:	89 d0                	mov    eax,edx
c00064b1:	99                   	cdq    
c00064b2:	83 c4 1c             	add    esp,0x1c
c00064b5:	5b                   	pop    ebx
c00064b6:	5e                   	pop    esi
c00064b7:	5f                   	pop    edi
c00064b8:	5d                   	pop    ebp
c00064b9:	c3                   	ret    

c00064ba <iso_seek>:
c00064ba:	55                   	push   ebp
c00064bb:	83 c8 ff             	or     eax,0xffffffff
c00064be:	57                   	push   edi
c00064bf:	89 c2                	mov    edx,eax
c00064c1:	56                   	push   esi
c00064c2:	53                   	push   ebx
c00064c3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00064c7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00064cb:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00064cf:	83 fe 0f             	cmp    esi,0xf
c00064d2:	7f 65                	jg     c0006539 <iso_seek+0x7f>
c00064d4:	69 ee 94 00 00 00    	imul   ebp,esi,0x94
c00064da:	8d 8d 40 25 02 c0    	lea    ecx,[ebp-0x3ffddac0]
c00064e0:	83 bd 40 25 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffddac0],0x0
c00064e7:	74 50                	je     c0006539 <iso_seek+0x7f>
c00064e9:	83 b9 90 00 00 00 00 	cmp    DWORD PTR [ecx+0x90],0x0
c00064f0:	75 47                	jne    c0006539 <iso_seek+0x7f>
c00064f2:	83 fb 01             	cmp    ebx,0x1
c00064f5:	74 0e                	je     c0006505 <iso_seek+0x4b>
c00064f7:	83 fb 02             	cmp    ebx,0x2
c00064fa:	74 0e                	je     c000650a <iso_seek+0x50>
c00064fc:	85 db                	test   ebx,ebx
c00064fe:	75 39                	jne    c0006539 <iso_seek+0x7f>
c0006500:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0006503:	eb 0d                	jmp    c0006512 <iso_seek+0x58>
c0006505:	01 79 08             	add    DWORD PTR [ecx+0x8],edi
c0006508:	eb 08                	jmp    c0006512 <iso_seek+0x58>
c000650a:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
c000650d:	01 f8                	add    eax,edi
c000650f:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0006512:	69 c6 94 00 00 00    	imul   eax,esi,0x94
c0006518:	8b 88 4c 25 02 c0    	mov    ecx,DWORD PTR [eax-0x3ffddab4]
c000651e:	05 40 25 02 c0       	add    eax,0xc0022540
c0006523:	39 48 08             	cmp    DWORD PTR [eax+0x8],ecx
c0006526:	76 03                	jbe    c000652b <iso_seek+0x71>
c0006528:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000652b:	69 d6 94 00 00 00    	imul   edx,esi,0x94
c0006531:	8b 82 48 25 02 c0    	mov    eax,DWORD PTR [edx-0x3ffddab8]
c0006537:	31 d2                	xor    edx,edx
c0006539:	5b                   	pop    ebx
c000653a:	5e                   	pop    esi
c000653b:	5f                   	pop    edi
c000653c:	5d                   	pop    ebp
c000653d:	c3                   	ret    

c000653e <iso_tell>:
c000653e:	83 c8 ff             	or     eax,0xffffffff
c0006541:	53                   	push   ebx
c0006542:	89 c2                	mov    edx,eax
c0006544:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006548:	83 f9 0f             	cmp    ecx,0xf
c000654b:	7f 20                	jg     c000656d <iso_tell+0x2f>
c000654d:	69 d9 94 00 00 00    	imul   ebx,ecx,0x94
c0006553:	83 bb 40 25 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffddac0],0x0
c000655a:	74 11                	je     c000656d <iso_tell+0x2f>
c000655c:	83 bb d0 25 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffdda30],0x0
c0006563:	75 08                	jne    c000656d <iso_tell+0x2f>
c0006565:	8b 83 48 25 02 c0    	mov    eax,DWORD PTR [ebx-0x3ffddab8]
c000656b:	31 d2                	xor    edx,edx
c000656d:	5b                   	pop    ebx
c000656e:	c3                   	ret    

c000656f <iso_total>:
c000656f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0006573:	83 c8 ff             	or     eax,0xffffffff
c0006576:	83 fa 0f             	cmp    edx,0xf
c0006579:	7f 1e                	jg     c0006599 <iso_total+0x2a>
c000657b:	69 d2 94 00 00 00    	imul   edx,edx,0x94
c0006581:	83 ba 40 25 02 c0 00 	cmp    DWORD PTR [edx-0x3ffddac0],0x0
c0006588:	74 0f                	je     c0006599 <iso_total+0x2a>
c000658a:	83 ba d0 25 02 c0 00 	cmp    DWORD PTR [edx-0x3ffdda30],0x0
c0006591:	75 06                	jne    c0006599 <iso_total+0x2a>
c0006593:	8b 82 4c 25 02 c0    	mov    eax,DWORD PTR [edx-0x3ffddab4]
c0006599:	c3                   	ret    

c000659a <fn_postprocess>:
c000659a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000659e:	89 d0                	mov    eax,edx
c00065a0:	8a 08                	mov    cl,BYTE PTR [eax]
c00065a2:	80 f9 3b             	cmp    cl,0x3b
c00065a5:	74 07                	je     c00065ae <fn_postprocess+0x14>
c00065a7:	84 c9                	test   cl,cl
c00065a9:	74 03                	je     c00065ae <fn_postprocess+0x14>
c00065ab:	40                   	inc    eax
c00065ac:	eb f2                	jmp    c00065a0 <fn_postprocess+0x6>
c00065ae:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00065b1:	39 d0                	cmp    eax,edx
c00065b3:	76 0a                	jbe    c00065bf <fn_postprocess+0x25>
c00065b5:	80 78 ff 2e          	cmp    BYTE PTR [eax-0x1],0x2e
c00065b9:	75 04                	jne    c00065bf <fn_postprocess+0x25>
c00065bb:	c6 40 ff 00          	mov    BYTE PTR [eax-0x1],0x0
c00065bf:	c3                   	ret    

c00065c0 <iso_readdir>:
c00065c0:	55                   	push   ebp
c00065c1:	57                   	push   edi
c00065c2:	56                   	push   esi
c00065c3:	53                   	push   ebx
c00065c4:	83 ec 1c             	sub    esp,0x1c
c00065c7:	83 7c 24 30 0f       	cmp    DWORD PTR [esp+0x30],0xf
c00065cc:	7e 07                	jle    c00065d5 <iso_readdir+0x15>
c00065ce:	31 c0                	xor    eax,eax
c00065d0:	e9 d4 01 00 00       	jmp    c00067a9 <iso_readdir+0x1e9>
c00065d5:	69 44 24 30 94 00 00 00 	imul   eax,DWORD PTR [esp+0x30],0x94
c00065dd:	8d b0 40 25 02 c0    	lea    esi,[eax-0x3ffddac0]
c00065e3:	83 b8 40 25 02 c0 00 	cmp    DWORD PTR [eax-0x3ffddac0],0x0
c00065ea:	74 e2                	je     c00065ce <iso_readdir+0xe>
c00065ec:	83 7e 04 00          	cmp    DWORD PTR [esi+0x4],0x0
c00065f0:	74 dc                	je     c00065ce <iso_readdir+0xe>
c00065f2:	83 be 90 00 00 00 00 	cmp    DWORD PTR [esi+0x90],0x0
c00065f9:	75 d3                	jne    c00065ce <iso_readdir+0xe>
c00065fb:	31 db                	xor    ebx,ebx
c00065fd:	83 c8 ff             	or     eax,0xffffffff
c0006600:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c0006603:	3b 56 0c             	cmp    edx,DWORD PTR [esi+0xc]
c0006606:	73 3c                	jae    c0006644 <iso_readdir+0x84>
c0006608:	c1 ea 0b             	shr    edx,0xb
c000660b:	8b 06                	mov    eax,DWORD PTR [esi]
c000660d:	01 d0                	add    eax,edx
c000660f:	e8 d8 f9 ff ff       	call   c0005fec <biread>
c0006614:	85 c0                	test   eax,eax
c0006616:	78 b6                	js     c00065ce <iso_readdir+0xe>
c0006618:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000661b:	8b 1c 85 80 20 02 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffddf80]
c0006622:	89 d1                	mov    ecx,edx
c0006624:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c000662a:	8d 5c 0b 04          	lea    ebx,[ebx+ecx*1+0x4]
c000662e:	80 3b 00             	cmp    BYTE PTR [ebx],0x0
c0006631:	75 11                	jne    c0006644 <iso_readdir+0x84>
c0006633:	81 e2 00 f8 ff ff    	and    edx,0xfffff800
c0006639:	81 c2 00 08 00 00    	add    edx,0x800
c000663f:	89 56 08             	mov    DWORD PTR [esi+0x8],edx
c0006642:	eb bc                	jmp    c0006600 <iso_readdir+0x40>
c0006644:	69 54 24 30 94 00 00 00 	imul   edx,DWORD PTR [esp+0x30],0x94
c000664c:	8b b2 48 25 02 c0    	mov    esi,DWORD PTR [edx-0x3ffddab8]
c0006652:	81 c2 40 25 02 c0    	add    edx,0xc0022540
c0006658:	3b 72 0c             	cmp    esi,DWORD PTR [edx+0xc]
c000665b:	0f 83 6d ff ff ff    	jae    c00065ce <iso_readdir+0xe>
c0006661:	80 7b 21 00          	cmp    BYTE PTR [ebx+0x21],0x0
c0006665:	75 38                	jne    c000669f <iso_readdir+0xdf>
c0006667:	80 7b 20 01          	cmp    BYTE PTR [ebx+0x20],0x1
c000666b:	75 32                	jne    c000669f <iso_readdir+0xdf>
c000666d:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0006670:	8b 1c 85 80 20 02 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffddf80]
c0006677:	01 f1                	add    ecx,esi
c0006679:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c000667c:	89 c8                	mov    eax,ecx
c000667e:	25 ff 07 00 00       	and    eax,0x7ff
c0006683:	0f b6 44 03 04       	movzx  eax,BYTE PTR [ebx+eax*1+0x4]
c0006688:	01 c8                	add    eax,ecx
c000668a:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c000668d:	25 ff 07 00 00       	and    eax,0x7ff
c0006692:	8d 5c 03 04          	lea    ebx,[ebx+eax*1+0x4]
c0006696:	80 3b 00             	cmp    BYTE PTR [ebx],0x0
c0006699:	0f 84 2f ff ff ff    	je     c00065ce <iso_readdir+0xe>
c000669f:	69 44 24 30 94 00 00 00 	imul   eax,DWORD PTR [esp+0x30],0x94
c00066a7:	0f b6 4b 20          	movzx  ecx,BYTE PTR [ebx+0x20]
c00066ab:	8d 53 21             	lea    edx,[ebx+0x21]
c00066ae:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00066b2:	8d a8 58 25 02 c0    	lea    ebp,[eax-0x3ffddaa8]
c00066b8:	83 3d b4 2e 02 c0 00 	cmp    DWORD PTR ds:0xc0022eb4,0x0
c00066bf:	74 0c                	je     c00066cd <iso_readdir+0x10d>
c00066c1:	89 e8                	mov    eax,ebp
c00066c3:	e8 9e f6 ff ff       	call   c0005d66 <ucs2utfn>
c00066c8:	e9 9e 00 00 00       	jmp    c000676b <iso_readdir+0x1ab>
c00066cd:	56                   	push   esi
c00066ce:	51                   	push   ecx
c00066cf:	52                   	push   edx
c00066d0:	55                   	push   ebp
c00066d1:	e8 5a 9f ff ff       	call   c0000630 <strncpy>
c00066d6:	0f b6 43 20          	movzx  eax,BYTE PTR [ebx+0x20]
c00066da:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00066de:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00066e1:	c6 84 07 58 25 02 c0 00 	mov    BYTE PTR [edi+eax*1-0x3ffddaa8],0x0
c00066e9:	e8 ac fe ff ff       	call   c000659a <fn_postprocess>
c00066ee:	0f b6 43 20          	movzx  eax,BYTE PTR [ebx+0x20]
c00066f2:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c00066f5:	83 c4 10             	add    esp,0x10
c00066f8:	29 c6                	sub    esi,eax
c00066fa:	8d 7c 03 21          	lea    edi,[ebx+eax*1+0x21]
c00066fe:	f6 43 20 01          	test   BYTE PTR [ebx+0x20],0x1
c0006702:	74 05                	je     c0006709 <iso_readdir+0x149>
c0006704:	83 ee 21             	sub    esi,0x21
c0006707:	eb 04                	jmp    c000670d <iso_readdir+0x14d>
c0006709:	47                   	inc    edi
c000670a:	83 ee 22             	sub    esi,0x22
c000670d:	69 44 24 30 94 00 00 00 	imul   eax,DWORD PTR [esp+0x30],0x94
c0006715:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006719:	83 fe 03             	cmp    esi,0x3
c000671c:	7e 4d                	jle    c000676b <iso_readdir+0x1ab>
c000671e:	8a 47 03             	mov    al,BYTE PTR [edi+0x3]
c0006721:	48                   	dec    eax
c0006722:	3c 01                	cmp    al,0x1
c0006724:	77 45                	ja     c000676b <iso_readdir+0x1ab>
c0006726:	52                   	push   edx
c0006727:	6a 02                	push   0x2
c0006729:	68 40 dc 01 c0       	push   0xc001dc40
c000672e:	57                   	push   edi
c000672f:	e8 2c a0 ff ff       	call   c0000760 <strncmp>
c0006734:	83 c4 10             	add    esp,0x10
c0006737:	85 c0                	test   eax,eax
c0006739:	75 26                	jne    c0006761 <iso_readdir+0x1a1>
c000673b:	50                   	push   eax
c000673c:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006740:	83 e8 05             	sub    eax,0x5
c0006743:	50                   	push   eax
c0006744:	8d 47 05             	lea    eax,[edi+0x5]
c0006747:	50                   	push   eax
c0006748:	55                   	push   ebp
c0006749:	e8 e2 9e ff ff       	call   c0000630 <strncpy>
c000674e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006752:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006756:	83 c4 10             	add    esp,0x10
c0006759:	c6 84 08 53 25 02 c0 00 	mov    BYTE PTR [eax+ecx*1-0x3ffddaad],0x0
c0006761:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006765:	29 c6                	sub    esi,eax
c0006767:	01 c7                	add    edi,eax
c0006769:	eb ae                	jmp    c0006719 <iso_readdir+0x159>
c000676b:	83 c8 ff             	or     eax,0xffffffff
c000676e:	f6 43 19 02          	test   BYTE PTR [ebx+0x19],0x2
c0006772:	89 c2                	mov    edx,eax
c0006774:	75 0a                	jne    c0006780 <iso_readdir+0x1c0>
c0006776:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006779:	e8 95 f6 ff ff       	call   c0005e13 <iso_733>
c000677e:	31 d2                	xor    edx,edx
c0006780:	69 4c 24 30 94 00 00 00 	imul   ecx,DWORD PTR [esp+0x30],0x94
c0006788:	89 81 50 25 02 c0    	mov    DWORD PTR [ecx-0x3ffddab0],eax
c000678e:	89 91 54 25 02 c0    	mov    DWORD PTR [ecx-0x3ffddaac],edx
c0006794:	81 c1 40 25 02 c0    	add    ecx,0xc0022540
c000679a:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c000679d:	01 41 08             	add    DWORD PTR [ecx+0x8],eax
c00067a0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067a4:	05 50 25 02 c0       	add    eax,0xc0022550
c00067a9:	83 c4 1c             	add    esp,0x1c
c00067ac:	5b                   	pop    ebx
c00067ad:	5e                   	pop    esi
c00067ae:	5f                   	pop    edi
c00067af:	5d                   	pop    ebp
c00067b0:	c3                   	ret    

c00067b1 <iso_reset>:
c00067b1:	e8 a0 f6 ff ff       	call   c0005e56 <iso_break_all>
c00067b6:	e8 99 f6 ff ff       	call   c0005e54 <bclear>
c00067bb:	31 c0                	xor    eax,eax
c00067bd:	c3                   	ret    

c00067be <init_percd>:
c00067be:	57                   	push   edi
c00067bf:	56                   	push   esi
c00067c0:	53                   	push   ebx
c00067c1:	bb 01 00 00 00       	mov    ebx,0x1
c00067c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00067ca:	a2 60 20 02 c0       	mov    ds:0xc0022060,al
c00067cf:	e8 dd ff ff ff       	call   c00067b1 <iso_reset>
c00067d4:	c7 05 b4 2e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022eb4,0x0
c00067de:	a1 ac 2e 02 c0       	mov    eax,ds:0xc0022eac
c00067e3:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c00067e7:	e8 00 f8 ff ff       	call   c0005fec <biread>
c00067ec:	89 c6                	mov    esi,eax
c00067ee:	85 c0                	test   eax,eax
c00067f0:	0f 88 ba 00 00 00    	js     c00068b0 <init_percd+0xf2>
c00067f6:	8b 04 85 80 20 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffddf80]
c00067fd:	83 c0 04             	add    eax,0x4
c0006800:	52                   	push   edx
c0006801:	6a 06                	push   0x6
c0006803:	68 43 dc 01 c0       	push   0xc001dc43
c0006808:	50                   	push   eax
c0006809:	e8 82 9b ff ff       	call   c0000390 <memcmp>
c000680e:	83 c4 10             	add    esp,0x10
c0006811:	85 c0                	test   eax,eax
c0006813:	74 08                	je     c000681d <init_percd+0x5f>
c0006815:	43                   	inc    ebx
c0006816:	83 fb 04             	cmp    ebx,0x4
c0006819:	75 c3                	jne    c00067de <init_percd+0x20>
c000681b:	eb 1a                	jmp    c0006837 <init_percd+0x79>
c000681d:	8b 04 b5 80 20 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffddf80]
c0006824:	83 c0 5c             	add    eax,0x5c
c0006827:	e8 b8 f5 ff ff       	call   c0005de4 <isjoliet>
c000682c:	a3 b4 2e 02 c0       	mov    ds:0xc0022eb4,eax
c0006831:	85 c0                	test   eax,eax
c0006833:	74 e0                	je     c0006815 <init_percd+0x57>
c0006835:	eb 3e                	jmp    c0006875 <init_percd+0xb7>
c0006837:	83 3d b4 2e 02 c0 00 	cmp    DWORD PTR ds:0xc0022eb4,0x0
c000683e:	75 35                	jne    c0006875 <init_percd+0xb7>
c0006840:	a1 ac 2e 02 c0       	mov    eax,ds:0xc0022eac
c0006845:	83 c0 10             	add    eax,0x10
c0006848:	e8 9f f7 ff ff       	call   c0005fec <biread>
c000684d:	89 c6                	mov    esi,eax
c000684f:	85 c0                	test   eax,eax
c0006851:	78 5f                	js     c00068b2 <init_percd+0xf4>
c0006853:	83 cb ff             	or     ebx,0xffffffff
c0006856:	50                   	push   eax
c0006857:	8b 04 b5 80 20 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffddf80]
c000685e:	6a 06                	push   0x6
c0006860:	83 c0 04             	add    eax,0x4
c0006863:	68 4a dc 01 c0       	push   0xc001dc4a
c0006868:	50                   	push   eax
c0006869:	e8 22 9b ff ff       	call   c0000390 <memcmp>
c000686e:	83 c4 10             	add    esp,0x10
c0006871:	85 c0                	test   eax,eax
c0006873:	75 3d                	jne    c00068b2 <init_percd+0xf4>
c0006875:	8b 34 b5 80 20 02 c0 	mov    esi,DWORD PTR [esi*4-0x3ffddf80]
c000687c:	bf 80 2e 02 c0       	mov    edi,0xc0022e80
c0006881:	81 c6 a0 00 00 00    	add    esi,0xa0
c0006887:	b9 22 00 00 00       	mov    ecx,0x22
c000688c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000688e:	b8 82 2e 02 c0       	mov    eax,0xc0022e82
c0006893:	31 db                	xor    ebx,ebx
c0006895:	e8 79 f5 ff ff       	call   c0005e13 <iso_733>
c000689a:	a3 a8 2e 02 c0       	mov    ds:0xc0022ea8,eax
c000689f:	b8 8a 2e 02 c0       	mov    eax,0xc0022e8a
c00068a4:	e8 6a f5 ff ff       	call   c0005e13 <iso_733>
c00068a9:	a3 a4 2e 02 c0       	mov    ds:0xc0022ea4,eax
c00068ae:	eb 02                	jmp    c00068b2 <init_percd+0xf4>
c00068b0:	89 c3                	mov    ebx,eax
c00068b2:	89 d8                	mov    eax,ebx
c00068b4:	5b                   	pop    ebx
c00068b5:	5e                   	pop    esi
c00068b6:	5f                   	pop    edi
c00068b7:	c3                   	ret    

c00068b8 <iso_ioctl>:
c00068b8:	e8 f4 fe ff ff       	call   c00067b1 <iso_reset>
c00068bd:	31 c0                	xor    eax,eax
c00068bf:	c3                   	ret    

c00068c0 <fs_iso9660_init>:
c00068c0:	53                   	push   ebx
c00068c1:	31 db                	xor    ebx,ebx
c00068c3:	83 ec 0c             	sub    esp,0xc
c00068c6:	68 40 09 00 00       	push   0x940
c00068cb:	6a 00                	push   0x0
c00068cd:	68 40 25 02 c0       	push   0xc0022540
c00068d2:	e8 f9 9b ff ff       	call   c00004d0 <memset>
c00068d7:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00068de:	c7 05 40 25 02 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc0022540,0xffffffff
c00068e8:	e8 cc 0e 00 00       	call   c00077b9 <malloc>
c00068ed:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00068f4:	a3 b0 2e 02 c0       	mov    ds:0xc0022eb0,eax
c00068f9:	e8 bb 0e 00 00       	call   c00077b9 <malloc>
c00068fe:	83 c4 10             	add    esp,0x10
c0006901:	a3 20 25 02 c0       	mov    ds:0xc0022520,eax
c0006906:	83 ec 0c             	sub    esp,0xc
c0006909:	68 04 08 00 00       	push   0x804
c000690e:	e8 a6 0e 00 00       	call   c00077b9 <malloc>
c0006913:	89 04 9d 80 20 02 c0 	mov    DWORD PTR [ebx*4-0x3ffddf80],eax
c000691a:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006920:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c0006927:	e8 8d 0e 00 00       	call   c00077b9 <malloc>
c000692c:	83 c4 10             	add    esp,0x10
c000692f:	89 04 9d 20 20 02 c0 	mov    DWORD PTR [ebx*4-0x3ffddfe0],eax
c0006936:	43                   	inc    ebx
c0006937:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c000693d:	83 fb 10             	cmp    ebx,0x10
c0006940:	75 c4                	jne    c0006906 <fs_iso9660_init+0x46>
c0006942:	31 c0                	xor    eax,eax
c0006944:	83 c4 08             	add    esp,0x8
c0006947:	5b                   	pop    ebx
c0006948:	c3                   	ret    

c0006949 <fs_iso9660_shutdown>:
c0006949:	53                   	push   ebx
c000694a:	31 db                	xor    ebx,ebx
c000694c:	83 ec 08             	sub    esp,0x8
c000694f:	83 ec 0c             	sub    esp,0xc
c0006952:	ff 34 9d 80 20 02 c0 	push   DWORD PTR [ebx*4-0x3ffddf80]
c0006959:	e8 6b 0e 00 00       	call   c00077c9 <free>
c000695e:	58                   	pop    eax
c000695f:	ff 34 9d 20 20 02 c0 	push   DWORD PTR [ebx*4-0x3ffddfe0]
c0006966:	43                   	inc    ebx
c0006967:	e8 5d 0e 00 00       	call   c00077c9 <free>
c000696c:	83 c4 10             	add    esp,0x10
c000696f:	83 fb 10             	cmp    ebx,0x10
c0006972:	75 db                	jne    c000694f <fs_iso9660_shutdown+0x6>
c0006974:	a1 b0 2e 02 c0       	mov    eax,ds:0xc0022eb0
c0006979:	85 c0                	test   eax,eax
c000697b:	74 0c                	je     c0006989 <fs_iso9660_shutdown+0x40>
c000697d:	83 ec 0c             	sub    esp,0xc
c0006980:	50                   	push   eax
c0006981:	e8 43 0e 00 00       	call   c00077c9 <free>
c0006986:	83 c4 10             	add    esp,0x10
c0006989:	a1 20 25 02 c0       	mov    eax,ds:0xc0022520
c000698e:	85 c0                	test   eax,eax
c0006990:	74 0c                	je     c000699e <fs_iso9660_shutdown+0x55>
c0006992:	83 ec 0c             	sub    esp,0xc
c0006995:	50                   	push   eax
c0006996:	e8 2e 0e 00 00       	call   c00077c9 <free>
c000699b:	83 c4 10             	add    esp,0x10
c000699e:	c7 05 20 25 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022520,0x0
c00069a8:	c7 05 b0 2e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022eb0,0x0
c00069b2:	31 c0                	xor    eax,eax
c00069b4:	83 c4 08             	add    esp,0x8
c00069b7:	5b                   	pop    ebx
c00069b8:	c3                   	ret    
c00069b9:	90                   	nop

c00069ba <Computer::close(int, int, void*)>:
c00069ba:	57                   	push   edi
c00069bb:	56                   	push   esi
c00069bc:	53                   	push   ebx
c00069bd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00069c1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00069c5:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00069c9:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c00069cf:	83 ec 0c             	sub    esp,0xc
c00069d2:	50                   	push   eax
c00069d3:	e8 22 51 00 00       	call   c000bafa <Device::closeAll()>
c00069d8:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c00069de:	83 c4 10             	add    esp,0x10
c00069e1:	8b 10                	mov    edx,DWORD PTR [eax]
c00069e3:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c00069e7:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c00069ef:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c00069f3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00069f7:	5b                   	pop    ebx
c00069f8:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00069fb:	5e                   	pop    esi
c00069fc:	5f                   	pop    edi
c00069fd:	ff e0                	jmp    eax

c00069ff <Krnl::firstTask()>:
c00069ff:	53                   	push   ebx
c0006a00:	83 ec 14             	sub    esp,0x14
c0006a03:	fb                   	sti    
c0006a04:	68 51 dc 01 c0       	push   0xc001dc51
c0006a09:	e8 21 92 00 00       	call   c000fc2f <KeSetBootMessage(char const*)>
c0006a0e:	c7 04 24 24 07 00 00 	mov    DWORD PTR [esp],0x724
c0006a15:	e8 9f 0d 00 00       	call   c00077b9 <malloc>
c0006a1a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0006a21:	89 c3                	mov    ebx,eax
c0006a23:	a1 90 61 02 c0       	mov    eax,ds:0xc0026190
c0006a28:	50                   	push   eax
c0006a29:	68 6a dc 01 c0       	push   0xc001dc6a
c0006a2e:	6a 01                	push   0x1
c0006a30:	53                   	push   ebx
c0006a31:	e8 46 c9 00 00       	call   c001337c <Process::Process(bool, char const*, Process*, char**)>
c0006a36:	83 c4 20             	add    esp,0x20
c0006a39:	68 ff 00 00 00       	push   0xff
c0006a3e:	6a 00                	push   0x0
c0006a40:	68 0f 72 00 c0       	push   0xc000720f
c0006a45:	53                   	push   ebx
c0006a46:	e8 59 cb 00 00       	call   c00135a4 <Process::createThread(void (*)(void*), void*, int)>
c0006a4b:	8b 15 90 61 02 c0    	mov    edx,DWORD PTR ds:0xc0026190
c0006a51:	6a 7a                	push   0x7a
c0006a53:	6a 00                	push   0x0
c0006a55:	68 f8 3f 01 c0       	push   0xc0013ff8
c0006a5a:	52                   	push   edx
c0006a5b:	e8 44 cb 00 00       	call   c00135a4 <Process::createThread(void (*)(void*), void*, int)>
c0006a60:	83 c4 14             	add    esp,0x14
c0006a63:	a3 48 61 02 c0       	mov    ds:0xc0026148,eax
c0006a68:	68 68 dd 01 c0       	push   0xc001dd68
c0006a6d:	c6 05 bd 2e 02 c0 01 	mov    BYTE PTR ds:0xc0022ebd,0x1
c0006a74:	e8 b6 91 00 00       	call   c000fc2f <KeSetBootMessage(char const*)>
c0006a79:	e8 59 d9 00 00       	call   c00143d7 <Vm::initialise8086()>
c0006a7e:	e8 71 3e 00 00       	call   c000a8f4 <Fs::initVFS()>
c0006a83:	c7 04 24 77 dc 01 c0 	mov    DWORD PTR [esp],0xc001dc77
c0006a8a:	e8 a0 91 00 00       	call   c000fc2f <KeSetBootMessage(char const*)>
c0006a8f:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c0006a94:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0006a9a:	8b 10                	mov    edx,DWORD PTR [eax]
c0006a9c:	6a 00                	push   0x0
c0006a9e:	6a 00                	push   0x0
c0006aa0:	6a 00                	push   0x0
c0006aa2:	50                   	push   eax
c0006aa3:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0006aa6:	83 c4 14             	add    esp,0x14
c0006aa9:	68 68 dd 01 c0       	push   0xc001dd68
c0006aae:	e8 7c 91 00 00       	call   c000fc2f <KeSetBootMessage(char const*)>
c0006ab3:	e8 52 96 00 00       	call   c001010a <Krnl::loadSystemEnv()>
c0006ab8:	e8 af 98 00 00       	call   c001036c <Krnl::setupPowerManager()>
c0006abd:	83 c4 0c             	add    esp,0xc
c0006ac0:	6a 3a                	push   0x3a
c0006ac2:	68 91 dc 01 c0       	push   0xc001dc91
c0006ac7:	68 9a dc 01 c0       	push   0xc001dc9a
c0006acc:	e8 54 ae 00 00       	call   c0011925 <Reg::readIntWithDefault(char*, char*, int)>
c0006ad1:	89 04 24             	mov    DWORD PTR [esp],eax
c0006ad4:	e8 73 49 00 00       	call   c000b44c <User::loadClockSettings(int)>
c0006ad9:	c7 04 24 8c dd 01 c0 	mov    DWORD PTR [esp],0xc001dd8c
c0006ae0:	e8 4a 91 00 00       	call   c000fc2f <KeSetBootMessage(char const*)>
c0006ae5:	59                   	pop    ecx
c0006ae6:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c0006aeb:	8b 98 68 01 00 00    	mov    ebx,DWORD PTR [eax+0x168]
c0006af1:	53                   	push   ebx
c0006af2:	e8 01 50 00 00       	call   c000baf8 <Device::loadDriversForAll()>
c0006af7:	c7 04 24 a2 dc 01 c0 	mov    DWORD PTR [esp],0xc001dca2
c0006afe:	e8 2c 91 00 00       	call   c000fc2f <KeSetBootMessage(char const*)>
c0006b03:	58                   	pop    eax
c0006b04:	8b 1d b8 2e 02 c0    	mov    ebx,DWORD PTR ds:0xc0022eb8
c0006b0a:	5a                   	pop    edx
c0006b0b:	6a 01                	push   0x1
c0006b0d:	68 b3 dc 01 c0       	push   0xc001dcb3
c0006b12:	e8 83 c2 00 00       	call   c0012d9a <Thr::loadDLL(char const*, bool)>
c0006b17:	59                   	pop    ecx
c0006b18:	5a                   	pop    edx
c0006b19:	53                   	push   ebx
c0006b1a:	50                   	push   eax
c0006b1b:	e8 ab c4 00 00       	call   c0012fcb <Thr::executeDLL(unsigned long, void*)>
c0006b20:	83 c4 10             	add    esp,0x10
c0006b23:	83 ec 0c             	sub    esp,0xc
c0006b26:	6a 02                	push   0x2
c0006b28:	e8 93 ce 00 00       	call   c00139c0 <blockTask(TaskState)>
c0006b2d:	83 c4 10             	add    esp,0x10
c0006b30:	eb f1                	jmp    c0006b23 <Krnl::firstTask()+0x124>

c0006b32 <Computer::Computer()>:
c0006b32:	83 ec 0c             	sub    esp,0xc
c0006b35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b39:	83 ec 08             	sub    esp,0x8
c0006b3c:	68 cf dc 01 c0       	push   0xc001dccf
c0006b41:	50                   	push   eax
c0006b42:	e8 2d 50 00 00       	call   c000bb74 <Device::Device(char const*)>
c0006b47:	83 c4 10             	add    esp,0x10
c0006b4a:	ba d8 dd 01 c0       	mov    edx,0xc001ddd8
c0006b4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b53:	89 10                	mov    DWORD PTR [eax],edx
c0006b55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b59:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0006b63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b67:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c0006b71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b75:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0006b7b:	83 ca 04             	or     edx,0x4
c0006b7e:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0006b84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b88:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006b8e:	31 d2                	xor    edx,edx
c0006b90:	88 c2                	mov    dl,al
c0006b92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b96:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c0006b9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ba1:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006ba7:	31 d2                	xor    edx,edx
c0006ba9:	88 c2                	mov    dl,al
c0006bab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006baf:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0006bb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bb8:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006bbe:	8d 50 01             	lea    edx,[eax+0x1]
c0006bc1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0006bc5:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0006bcb:	31 d2                	xor    edx,edx
c0006bcd:	88 c2                	mov    dl,al
c0006bcf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bd3:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0006bd7:	83 e1 3f             	and    ecx,0x3f
c0006bda:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0006bde:	90                   	nop
c0006bdf:	83 c4 0c             	add    esp,0xc
c0006be2:	c3                   	ret    
c0006be3:	90                   	nop

c0006be4 <Computer::setBootMessage(char const*)>:
c0006be4:	c3                   	ret    
c0006be5:	90                   	nop

c0006be6 <Computer::detectFeatures()>:
c0006be6:	55                   	push   ebp
c0006be7:	57                   	push   edi
c0006be8:	56                   	push   esi
c0006be9:	53                   	push   ebx
c0006bea:	83 ec 1c             	sub    esp,0x1c
c0006bed:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0006bf1:	81 a3 6c 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x16c],0xfffc0004
c0006bfb:	e8 f9 95 ff ff       	call   c00001f9 <detectCPUID>
c0006c00:	85 c0                	test   eax,eax
c0006c02:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006c08:	0f 95 c2             	setne  dl
c0006c0b:	83 e0 fd             	and    eax,0xfffffffd
c0006c0e:	01 d2                	add    edx,edx
c0006c10:	09 d0                	or     eax,edx
c0006c12:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006c18:	a8 02                	test   al,0x2
c0006c1a:	75 46                	jne    c0006c62 <Computer::detectFeatures()+0x7c>
c0006c1c:	f6 05 d1 2e 02 c0 04 	test   BYTE PTR ds:0xc0022ed1,0x4
c0006c23:	74 07                	je     c0006c2c <Computer::detectFeatures()+0x46>
c0006c25:	80 a3 6c 01 00 00 fb 	and    BYTE PTR [ebx+0x16c],0xfb
c0006c2c:	e8 75 59 01 00       	call   c001c5a6 <x87Detect>
c0006c31:	83 e0 01             	and    eax,0x1
c0006c34:	c1 e0 04             	shl    eax,0x4
c0006c37:	88 c2                	mov    dl,al
c0006c39:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006c3f:	83 e0 ef             	and    eax,0xffffffef
c0006c42:	09 d0                	or     eax,edx
c0006c44:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006c4a:	a8 10                	test   al,0x10
c0006c4c:	0f 85 2a 01 00 00    	jne    c0006d7c <Computer::detectFeatures()+0x196>
c0006c52:	84 c0                	test   al,al
c0006c54:	0f 88 45 01 00 00    	js     c0006d9f <Computer::detectFeatures()+0x1b9>
c0006c5a:	83 c4 1c             	add    esp,0x1c
c0006c5d:	5b                   	pop    ebx
c0006c5e:	5e                   	pop    esi
c0006c5f:	5f                   	pop    edi
c0006c60:	5d                   	pop    ebp
c0006c61:	c3                   	ret    
c0006c62:	83 ec 0c             	sub    esp,0xc
c0006c65:	6a 20                	push   0x20
c0006c67:	e8 f0 84 00 00       	call   c000f15c <CPU::cpuidCheckEDX(unsigned int)>
c0006c6c:	83 e0 01             	and    eax,0x1
c0006c6f:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0006c76:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006c7c:	83 e0 f7             	and    eax,0xfffffff7
c0006c7f:	09 d0                	or     eax,edx
c0006c81:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006c87:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c0006c8e:	e8 c9 84 00 00       	call   c000f15c <CPU::cpuidCheckEDX(unsigned int)>
c0006c93:	83 e0 01             	and    eax,0x1
c0006c96:	88 c2                	mov    dl,al
c0006c98:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006c9e:	83 e0 fe             	and    eax,0xfffffffe
c0006ca1:	09 d0                	or     eax,edx
c0006ca3:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006ca9:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0006cb0:	e8 a7 84 00 00       	call   c000f15c <CPU::cpuidCheckEDX(unsigned int)>
c0006cb5:	c1 e0 07             	shl    eax,0x7
c0006cb8:	88 c2                	mov    dl,al
c0006cba:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006cc0:	83 e0 7f             	and    eax,0x7f
c0006cc3:	09 d0                	or     eax,edx
c0006cc5:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006ccb:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c0006cd2:	e8 85 84 00 00       	call   c000f15c <CPU::cpuidCheckEDX(unsigned int)>
c0006cd7:	83 c4 10             	add    esp,0x10
c0006cda:	83 e0 01             	and    eax,0x1
c0006cdd:	c1 e0 05             	shl    eax,0x5
c0006ce0:	88 c2                	mov    dl,al
c0006ce2:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006ce8:	83 e0 df             	and    eax,0xffffffdf
c0006ceb:	09 d0                	or     eax,edx
c0006ced:	f7 05 d0 2e 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc0022ed0,0x401
c0006cf7:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006cfd:	0f 84 c2 00 00 00    	je     c0006dc5 <Computer::detectFeatures()+0x1df>
c0006d03:	83 e0 fe             	and    eax,0xfffffffe
c0006d06:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006d0c:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006d12:	88 c2                	mov    dl,al
c0006d14:	83 e2 09             	and    edx,0x9
c0006d17:	fe ca                	dec    dl
c0006d19:	75 09                	jne    c0006d24 <Computer::detectFeatures()+0x13e>
c0006d1b:	83 e0 fe             	and    eax,0xfffffffe
c0006d1e:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006d24:	83 ec 0c             	sub    esp,0xc
c0006d27:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006d2b:	50                   	push   eax
c0006d2c:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c0006d30:	55                   	push   ebp
c0006d31:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0006d35:	57                   	push   edi
c0006d36:	8d 74 24 18          	lea    esi,[esp+0x18]
c0006d3a:	56                   	push   esi
c0006d3b:	68 00 00 00 80       	push   0x80000000
c0006d40:	e8 93 83 00 00       	call   c000f0d8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0006d45:	83 c4 20             	add    esp,0x20
c0006d48:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c0006d4f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0006d53:	0f 86 c3 fe ff ff    	jbe    c0006c1c <Computer::detectFeatures()+0x36>
c0006d59:	83 ec 0c             	sub    esp,0xc
c0006d5c:	50                   	push   eax
c0006d5d:	55                   	push   ebp
c0006d5e:	57                   	push   edi
c0006d5f:	56                   	push   esi
c0006d60:	68 01 00 00 80       	push   0x80000001
c0006d65:	e8 6e 83 00 00       	call   c000f0d8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0006d6a:	81 a3 6c 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x16c],0xfffcffbf
c0006d74:	83 c4 20             	add    esp,0x20
c0006d77:	e9 a0 fe ff ff       	jmp    c0006c1c <Computer::detectFeatures()+0x36>
c0006d7c:	e8 df 57 01 00       	call   c001c560 <absolutelyNoChanceInHell>
c0006d81:	88 c2                	mov    dl,al
c0006d83:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006d89:	c1 e2 07             	shl    edx,0x7
c0006d8c:	83 e0 7f             	and    eax,0x7f
c0006d8f:	09 d0                	or     eax,edx
c0006d91:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006d97:	84 c0                	test   al,al
c0006d99:	0f 89 bb fe ff ff    	jns    c0006c5a <Computer::detectFeatures()+0x74>
c0006d9f:	e8 dc 54 01 00       	call   c001c280 <avxDetect>
c0006da4:	83 e0 01             	and    eax,0x1
c0006da7:	c1 e0 05             	shl    eax,0x5
c0006daa:	88 c2                	mov    dl,al
c0006dac:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006db2:	83 e0 df             	and    eax,0xffffffdf
c0006db5:	09 d0                	or     eax,edx
c0006db7:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006dbd:	83 c4 1c             	add    esp,0x1c
c0006dc0:	5b                   	pop    ebx
c0006dc1:	5e                   	pop    esi
c0006dc2:	5f                   	pop    edi
c0006dc3:	5d                   	pop    ebp
c0006dc4:	c3                   	ret    
c0006dc5:	83 ec 0c             	sub    esp,0xc
c0006dc8:	68 00 02 00 00       	push   0x200
c0006dcd:	e8 8a 83 00 00       	call   c000f15c <CPU::cpuidCheckEDX(unsigned int)>
c0006dd2:	83 c4 10             	add    esp,0x10
c0006dd5:	83 e0 01             	and    eax,0x1
c0006dd8:	88 c2                	mov    dl,al
c0006dda:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006de0:	83 e0 fe             	and    eax,0xfffffffe
c0006de3:	09 d0                	or     eax,edx
c0006de5:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006deb:	e9 1c ff ff ff       	jmp    c0006d0c <Computer::detectFeatures()+0x126>

c0006df0 <Computer::displayFeatures()>:
c0006df0:	c3                   	ret    
c0006df1:	90                   	nop

c0006df2 <Computer::rdmsr(unsigned int)>:
c0006df2:	83 ec 0c             	sub    esp,0xc
c0006df5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006df9:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0006e00:	74 0a                	je     c0006e0c <Computer::rdmsr(unsigned int)+0x1a>
c0006e02:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0006e06:	0f 32                	rdmsr  
c0006e08:	83 c4 0c             	add    esp,0xc
c0006e0b:	c3                   	ret    
c0006e0c:	83 ec 0c             	sub    esp,0xc
c0006e0f:	68 d8 dc 01 c0       	push   0xc001dcd8
c0006e14:	e8 8e 94 00 00       	call   c00102a7 <KePanic(char const*)>
c0006e19:	83 c4 10             	add    esp,0x10
c0006e1c:	eb e4                	jmp    c0006e02 <Computer::rdmsr(unsigned int)+0x10>

c0006e1e <Computer::wrmsr(unsigned int, unsigned long long)>:
c0006e1e:	57                   	push   edi
c0006e1f:	56                   	push   esi
c0006e20:	52                   	push   edx
c0006e21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e25:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0006e29:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0006e2d:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0006e34:	74 0e                	je     c0006e44 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c0006e36:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0006e3a:	89 f0                	mov    eax,esi
c0006e3c:	89 fa                	mov    edx,edi
c0006e3e:	0f 30                	wrmsr  
c0006e40:	58                   	pop    eax
c0006e41:	5e                   	pop    esi
c0006e42:	5f                   	pop    edi
c0006e43:	c3                   	ret    
c0006e44:	83 ec 0c             	sub    esp,0xc
c0006e47:	68 de dc 01 c0       	push   0xc001dcde
c0006e4c:	e8 56 94 00 00       	call   c00102a7 <KePanic(char const*)>
c0006e51:	83 c4 10             	add    esp,0x10
c0006e54:	eb e0                	jmp    c0006e36 <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c0006e56 <Computer::shutdown()>:
c0006e56:	83 ec 0c             	sub    esp,0xc
c0006e59:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e5d:	8b 10                	mov    edx,DWORD PTR [eax]
c0006e5f:	6a 00                	push   0x0
c0006e61:	6a 00                	push   0x0
c0006e63:	6a 00                	push   0x0
c0006e65:	50                   	push   eax
c0006e66:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0006e69:	83 c4 1c             	add    esp,0x1c
c0006e6c:	c3                   	ret    
c0006e6d:	90                   	nop

c0006e6e <Computer::restart()>:
c0006e6e:	83 ec 0c             	sub    esp,0xc
c0006e71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e75:	8b 10                	mov    edx,DWORD PTR [eax]
c0006e77:	6a 00                	push   0x0
c0006e79:	6a 00                	push   0x0
c0006e7b:	6a 01                	push   0x1
c0006e7d:	50                   	push   eax
c0006e7e:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0006e81:	83 c4 1c             	add    esp,0x1c
c0006e84:	c3                   	ret    
c0006e85:	90                   	nop

c0006e86 <Computer::sleep()>:
c0006e86:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006e8a:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0006e90:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006e94:	e9 3b 7d 00 00       	jmp    c000ebd4 <ACPI::sleep()>
c0006e99:	90                   	nop

c0006e9a <Computer::nmiEnabled()>:
c0006e9a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006e9e:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c0006ea4:	c3                   	ret    
c0006ea5:	90                   	nop

c0006ea6 <Computer::readCMOS(unsigned char)>:
c0006ea6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006eaa:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c0006eb1:	19 c0                	sbb    eax,eax
c0006eb3:	83 e0 80             	and    eax,0xffffff80
c0006eb6:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0006eba:	e6 70                	out    0x70,al
c0006ebc:	e4 71                	in     al,0x71
c0006ebe:	c3                   	ret    
c0006ebf:	90                   	nop

c0006ec0 <Computer::enableNMI(bool)>:
c0006ec0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006ec4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006ec8:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c0006ece:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c0006ed6:	eb ce                	jmp    c0006ea6 <Computer::readCMOS(unsigned char)>

c0006ed8 <Computer::open(int, int, void*)>:
c0006ed8:	56                   	push   esi
c0006ed9:	53                   	push   ebx
c0006eda:	83 ec 10             	sub    esp,0x10
c0006edd:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0006ee1:	f6 05 d0 2e 02 c0 04 	test   BYTE PTR ds:0xc0022ed0,0x4
c0006ee8:	68 e4 dc 01 c0       	push   0xc001dce4
c0006eed:	0f 94 05 c0 fe 01 c0 	sete   BYTE PTR ds:0xc001fec0
c0006ef4:	e8 36 8d 00 00       	call   c000fc2f <KeSetBootMessage(char const*)>
c0006ef9:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c0006f00:	e8 b4 08 00 00       	call   c00077b9 <malloc>
c0006f05:	89 04 24             	mov    DWORD PTR [esp],eax
c0006f08:	89 c6                	mov    esi,eax
c0006f0a:	e8 5d 78 00 00       	call   c000e76c <ACPI::ACPI()>
c0006f0f:	89 b3 68 01 00 00    	mov    DWORD PTR [ebx+0x168],esi
c0006f15:	58                   	pop    eax
c0006f16:	5a                   	pop    edx
c0006f17:	56                   	push   esi
c0006f18:	53                   	push   ebx
c0006f19:	e8 be 4a 00 00       	call   c000b9dc <Device::addChild(Device*)>
c0006f1e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006f21:	e8 c0 fc ff ff       	call   c0006be6 <Computer::detectFeatures()>
c0006f26:	59                   	pop    ecx
c0006f27:	5e                   	pop    esi
c0006f28:	6a 01                	push   0x1
c0006f2a:	53                   	push   ebx
c0006f2b:	e8 90 ff ff ff       	call   c0006ec0 <Computer::enableNMI(bool)>
c0006f30:	c7 04 24 fc dc 01 c0 	mov    DWORD PTR [esp],0xc001dcfc
c0006f37:	e8 f3 8c 00 00       	call   c000fc2f <KeSetBootMessage(char const*)>
c0006f3c:	c7 04 24 94 11 00 00 	mov    DWORD PTR [esp],0x1194
c0006f43:	e8 71 08 00 00       	call   c00077b9 <malloc>
c0006f48:	89 04 24             	mov    DWORD PTR [esp],eax
c0006f4b:	89 c6                	mov    esi,eax
c0006f4d:	e8 c2 82 00 00       	call   c000f214 <CPU::CPU()>
c0006f52:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c0006f58:	58                   	pop    eax
c0006f59:	5a                   	pop    edx
c0006f5a:	56                   	push   esi
c0006f5b:	53                   	push   ebx
c0006f5c:	e8 7b 4a 00 00       	call   c000b9dc <Device::addChild(Device*)>
c0006f61:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0006f67:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0006f6b:	8b 10                	mov    edx,DWORD PTR [eax]
c0006f6d:	51                   	push   ecx
c0006f6e:	6a 00                	push   0x0
c0006f70:	6a 00                	push   0x0
c0006f72:	50                   	push   eax
c0006f73:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0006f76:	83 c4 14             	add    esp,0x14
c0006f79:	68 ac dd 01 c0       	push   0xc001ddac
c0006f7e:	e8 ac 8c 00 00       	call   c000fc2f <KeSetBootMessage(char const*)>
c0006f83:	e8 86 e5 00 00       	call   c001550e <HalInitialiseCoprocessor()>
c0006f88:	c7 04 24 16 dd 01 c0 	mov    DWORD PTR [esp],0xc001dd16
c0006f8f:	e8 9b 8c 00 00       	call   c000fc2f <KeSetBootMessage(char const*)>
c0006f94:	c7 04 24 ff 69 00 c0 	mov    DWORD PTR [esp],0xc00069ff
c0006f9b:	e8 1c c7 00 00       	call   c00136bc <setupMultitasking(void (*)())>
c0006fa0:	83 c4 14             	add    esp,0x14
c0006fa3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0006fa8:	5b                   	pop    ebx
c0006fa9:	5e                   	pop    esi
c0006faa:	c3                   	ret    
c0006fab:	90                   	nop

c0006fac <Computer::disableNMI()>:
c0006fac:	6a 00                	push   0x0
c0006fae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006fb2:	50                   	push   eax
c0006fb3:	e8 08 ff ff ff       	call   c0006ec0 <Computer::enableNMI(bool)>
c0006fb8:	5a                   	pop    edx
c0006fb9:	59                   	pop    ecx
c0006fba:	c3                   	ret    
c0006fbb:	90                   	nop

c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>:
c0006fbc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006fc0:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c0006fc7:	19 c0                	sbb    eax,eax
c0006fc9:	83 e0 80             	and    eax,0xffffff80
c0006fcc:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0006fd0:	e6 70                	out    0x70,al
c0006fd2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006fd6:	e6 71                	out    0x71,al
c0006fd8:	c3                   	ret    
c0006fd9:	90                   	nop

c0006fda <Computer::handleNMI()>:
c0006fda:	56                   	push   esi
c0006fdb:	53                   	push   ebx
c0006fdc:	83 ec 10             	sub    esp,0x10
c0006fdf:	e4 92                	in     al,0x92
c0006fe1:	89 c6                	mov    esi,eax
c0006fe3:	e4 61                	in     al,0x61
c0006fe5:	68 31 dd 01 c0       	push   0xc001dd31
c0006fea:	88 c3                	mov    bl,al
c0006fec:	e8 61 35 00 00       	call   c000a552 <Dbg::kprintf(char const*, ...)>
c0006ff1:	83 c4 10             	add    esp,0x10
c0006ff4:	83 e6 10             	and    esi,0x10
c0006ff7:	75 0d                	jne    c0007006 <Computer::handleNMI()+0x2c>
c0006ff9:	f6 c3 40             	test   bl,0x40
c0006ffc:	75 1d                	jne    c000701b <Computer::handleNMI()+0x41>
c0006ffe:	84 db                	test   bl,bl
c0007000:	78 2d                	js     c000702f <Computer::handleNMI()+0x55>
c0007002:	58                   	pop    eax
c0007003:	5b                   	pop    ebx
c0007004:	5e                   	pop    esi
c0007005:	c3                   	ret    
c0007006:	83 ec 0c             	sub    esp,0xc
c0007009:	68 42 dd 01 c0       	push   0xc001dd42
c000700e:	e8 94 92 00 00       	call   c00102a7 <KePanic(char const*)>
c0007013:	83 c4 10             	add    esp,0x10
c0007016:	f6 c3 40             	test   bl,0x40
c0007019:	74 e3                	je     c0006ffe <Computer::handleNMI()+0x24>
c000701b:	83 ec 0c             	sub    esp,0xc
c000701e:	68 4f dd 01 c0       	push   0xc001dd4f
c0007023:	e8 7f 92 00 00       	call   c00102a7 <KePanic(char const*)>
c0007028:	83 c4 10             	add    esp,0x10
c000702b:	84 db                	test   bl,bl
c000702d:	79 d3                	jns    c0007002 <Computer::handleNMI()+0x28>
c000702f:	c7 44 24 10 59 dd 01 c0 	mov    DWORD PTR [esp+0x10],0xc001dd59
c0007037:	5a                   	pop    edx
c0007038:	5b                   	pop    ebx
c0007039:	5e                   	pop    esi
c000703a:	e9 68 92 00 00       	jmp    c00102a7 <KePanic(char const*)>
c000703f:	90                   	nop

c0007040 <GDTEntry::setBase(unsigned int)>:
c0007040:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007044:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007048:	89 c1                	mov    ecx,eax
c000704a:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000704e:	c1 e9 10             	shr    ecx,0x10
c0007051:	c1 e8 18             	shr    eax,0x18
c0007054:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c0007057:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000705a:	c3                   	ret    
c000705b:	90                   	nop

c000705c <GDTEntry::setLimit(unsigned int)>:
c000705c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007060:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007064:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c0007067:	66 89 01             	mov    WORD PTR [ecx],ax
c000706a:	83 e2 f0             	and    edx,0xfffffff0
c000706d:	c1 e8 10             	shr    eax,0x10
c0007070:	83 e0 0f             	and    eax,0xf
c0007073:	09 d0                	or     eax,edx
c0007075:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c0007078:	c3                   	ret    
c0007079:	90                   	nop

c000707a <GDT::GDT()>:
c000707a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000707e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0007084:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007088:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000708e:	90                   	nop
c000708f:	c3                   	ret    

c0007090 <GDT::addEntry(GDTEntry)>:
c0007090:	53                   	push   ebx
c0007091:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007095:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007099:	8b 02                	mov    eax,DWORD PTR [edx]
c000709b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000709f:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c00070a3:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c00070a7:	8d 48 01             	lea    ecx,[eax+0x1]
c00070aa:	c1 e0 03             	shl    eax,0x3
c00070ad:	89 0a                	mov    DWORD PTR [edx],ecx
c00070af:	5b                   	pop    ebx
c00070b0:	c3                   	ret    
c00070b1:	90                   	nop

c00070b2 <GDT::getNumberOfEntries()>:
c00070b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00070b6:	8b 00                	mov    eax,DWORD PTR [eax]
c00070b8:	c3                   	ret    
c00070b9:	90                   	nop

c00070ba <GDT::flush()>:
c00070ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00070be:	8b 10                	mov    edx,DWORD PTR [eax]
c00070c0:	83 c0 04             	add    eax,0x4
c00070c3:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c00070ca:	a3 c2 2e 02 c0       	mov    ds:0xc0022ec2,eax
c00070cf:	66 89 15 c0 2e 02 c0 	mov    WORD PTR ds:0xc0022ec0,dx
c00070d6:	e9 82 92 ff ff       	jmp    c000035d <loadGDT>
c00070db:	90                   	nop

c00070dc <GDT::setup()>:
c00070dc:	57                   	push   edi
c00070dd:	56                   	push   esi
c00070de:	53                   	push   ebx
c00070df:	83 ec 30             	sub    esp,0x30
c00070e2:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00070e6:	6a 00                	push   0x0
c00070e8:	8d 74 24 14          	lea    esi,[esp+0x14]
c00070ec:	56                   	push   esi
c00070ed:	e8 4e ff ff ff       	call   c0007040 <GDTEntry::setBase(unsigned int)>
c00070f2:	6a 00                	push   0x0
c00070f4:	56                   	push   esi
c00070f5:	e8 62 ff ff ff       	call   c000705c <GDTEntry::setLimit(unsigned int)>
c00070fa:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c0007102:	6a 00                	push   0x0
c0007104:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0007108:	56                   	push   esi
c0007109:	e8 32 ff ff ff       	call   c0007040 <GDTEntry::setBase(unsigned int)>
c000710e:	68 ff ff ff 00       	push   0xffffff
c0007113:	56                   	push   esi
c0007114:	e8 43 ff ff ff       	call   c000705c <GDTEntry::setLimit(unsigned int)>
c0007119:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000711d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0007121:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007125:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0007129:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000712e:	0d 00 9a c0 00       	or     eax,0xc09a00
c0007133:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0007137:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000713b:	89 f8                	mov    eax,edi
c000713d:	89 fa                	mov    edx,edi
c000713f:	80 e4 f7             	and    ah,0xf7
c0007142:	80 ce 60             	or     dh,0x60
c0007145:	89 c7                	mov    edi,eax
c0007147:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000714b:	80 cc 60             	or     ah,0x60
c000714e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0007152:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0007156:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000715a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000715e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007162:	83 c4 20             	add    esp,0x20
c0007165:	6a 00                	push   0x0
c0007167:	8d 44 24 24          	lea    eax,[esp+0x24]
c000716b:	50                   	push   eax
c000716c:	e8 cf fe ff ff       	call   c0007040 <GDTEntry::setBase(unsigned int)>
c0007171:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0007175:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c0007179:	80 64 24 2e 3f       	and    BYTE PTR [esp+0x2e],0x3f
c000717e:	6a 00                	push   0x0
c0007180:	8d 44 24 34          	lea    eax,[esp+0x34]
c0007184:	50                   	push   eax
c0007185:	e8 b6 fe ff ff       	call   c0007040 <GDTEntry::setBase(unsigned int)>
c000718a:	80 64 24 3e 3f       	and    BYTE PTR [esp+0x3e],0x3f
c000718f:	83 c4 0c             	add    esp,0xc
c0007192:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007196:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000719a:	53                   	push   ebx
c000719b:	e8 f0 fe ff ff       	call   c0007090 <GDT::addEntry(GDTEntry)>
c00071a0:	83 c4 0c             	add    esp,0xc
c00071a3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00071a7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00071ab:	53                   	push   ebx
c00071ac:	e8 df fe ff ff       	call   c0007090 <GDT::addEntry(GDTEntry)>
c00071b1:	83 c4 0c             	add    esp,0xc
c00071b4:	57                   	push   edi
c00071b5:	56                   	push   esi
c00071b6:	53                   	push   ebx
c00071b7:	e8 d4 fe ff ff       	call   c0007090 <GDT::addEntry(GDTEntry)>
c00071bc:	83 c4 0c             	add    esp,0xc
c00071bf:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00071c3:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00071c7:	53                   	push   ebx
c00071c8:	e8 c3 fe ff ff       	call   c0007090 <GDT::addEntry(GDTEntry)>
c00071cd:	83 c4 0c             	add    esp,0xc
c00071d0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00071d4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00071d8:	53                   	push   ebx
c00071d9:	e8 b2 fe ff ff       	call   c0007090 <GDT::addEntry(GDTEntry)>
c00071de:	83 c4 0c             	add    esp,0xc
c00071e1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00071e5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00071e9:	53                   	push   ebx
c00071ea:	e8 a1 fe ff ff       	call   c0007090 <GDT::addEntry(GDTEntry)>
c00071ef:	83 c4 0c             	add    esp,0xc
c00071f2:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00071f6:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00071fa:	53                   	push   ebx
c00071fb:	e8 90 fe ff ff       	call   c0007090 <GDT::addEntry(GDTEntry)>
c0007200:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007203:	e8 b2 fe ff ff       	call   c00070ba <GDT::flush()>
c0007208:	83 c4 40             	add    esp,0x40
c000720b:	5b                   	pop    ebx
c000720c:	5e                   	pop    esi
c000720d:	5f                   	pop    edi
c000720e:	c3                   	ret    

c000720f <idleFunction(void*)>:
c000720f:	83 ec 0c             	sub    esp,0xc
c0007212:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c0007217:	48                   	dec    eax
c0007218:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c000721d:	75 01                	jne    c0007220 <idleFunction(void*)+0x11>
c000721f:	fb                   	sti    
c0007220:	e8 c3 df 00 00       	call   c00151e8 <HalSystemIdle()>
c0007225:	e8 38 59 01 00       	call   c001cb62 <idleCommon()>
c000722a:	eb f4                	jmp    c0007220 <idleFunction(void*)+0x11>

c000722c <IDTEntry::IDTEntry(bool)>:
c000722c:	83 ec 04             	sub    esp,0x4
c000722f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007233:	88 04 24             	mov    BYTE PTR [esp],al
c0007236:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000723a:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c0007240:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007244:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0007248:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000724c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000724f:	83 e2 f0             	and    edx,0xfffffff0
c0007252:	83 ca 0e             	or     edx,0xe
c0007255:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007258:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000725c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000725f:	83 e2 ef             	and    edx,0xffffffef
c0007262:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007265:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0007269:	74 05                	je     c0007270 <IDTEntry::IDTEntry(bool)+0x44>
c000726b:	b2 03                	mov    dl,0x3
c000726d:	eb 05                	jmp    c0007274 <IDTEntry::IDTEntry(bool)+0x48>
c000726f:	90                   	nop
c0007270:	b2 00                	mov    dl,0x0
c0007272:	66 90                	xchg   ax,ax
c0007274:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007278:	83 e2 03             	and    edx,0x3
c000727b:	88 d1                	mov    cl,dl
c000727d:	c1 e1 05             	shl    ecx,0x5
c0007280:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007283:	83 e2 9f             	and    edx,0xffffff9f
c0007286:	09 ca                	or     edx,ecx
c0007288:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000728b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000728f:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007292:	83 ca 80             	or     edx,0xffffff80
c0007295:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007298:	90                   	nop
c0007299:	83 c4 04             	add    esp,0x4
c000729c:	c3                   	ret    
c000729d:	90                   	nop

c000729e <IDTEntry::setOffset(unsigned int)>:
c000729e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00072a2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00072a6:	66 89 02             	mov    WORD PTR [edx],ax
c00072a9:	c1 e8 10             	shr    eax,0x10
c00072ac:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c00072b0:	c3                   	ret    
c00072b1:	90                   	nop
c00072b2:	66 90                	xchg   ax,ax

c00072b4 <IDT::IDT()>:
c00072b4:	90                   	nop
c00072b5:	c3                   	ret    

c00072b6 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c00072b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00072ba:	83 c0 30             	add    eax,0x30
c00072bd:	c3                   	ret    

c00072be <IDT::addEntry(IDTEntry, int)>:
c00072be:	53                   	push   ebx
c00072bf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00072c3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00072c7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00072cb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00072cf:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c00072d2:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c00072d6:	5b                   	pop    ebx
c00072d7:	c3                   	ret    

c00072d8 <IDT::addEntry(int, void (*)(), bool)>:
c00072d8:	53                   	push   ebx
c00072d9:	83 ec 10             	sub    esp,0x10
c00072dc:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c00072e1:	50                   	push   eax
c00072e2:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c00072e6:	53                   	push   ebx
c00072e7:	e8 40 ff ff ff       	call   c000722c <IDTEntry::IDTEntry(bool)>
c00072ec:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00072f0:	53                   	push   ebx
c00072f1:	e8 a8 ff ff ff       	call   c000729e <IDTEntry::setOffset(unsigned int)>
c00072f6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00072fa:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00072fe:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007302:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007306:	e8 b3 ff ff ff       	call   c00072be <IDT::addEntry(IDTEntry, int)>
c000730b:	83 c4 30             	add    esp,0x30
c000730e:	5b                   	pop    ebx
c000730f:	c3                   	ret    

c0007310 <IDT::flush()>:
c0007310:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007314:	66 c7 05 c8 2e 02 c0 ff 07 	mov    WORD PTR ds:0xc0022ec8,0x7ff
c000731d:	a3 ca 2e 02 c0       	mov    ds:0xc0022eca,eax
c0007322:	0f 01 1d c8 2e 02 c0 	lidtd  ds:0xc0022ec8
c0007329:	c3                   	ret    

c000732a <IDT::setup()>:
c000732a:	57                   	push   edi
c000732b:	56                   	push   esi
c000732c:	53                   	push   ebx
c000732d:	83 ec 10             	sub    esp,0x10
c0007330:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0007334:	6a 00                	push   0x0
c0007336:	68 10 c3 01 c0       	push   0xc001c310
c000733b:	6a 00                	push   0x0
c000733d:	53                   	push   ebx
c000733e:	e8 95 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007343:	6a 00                	push   0x0
c0007345:	68 20 c3 01 c0       	push   0xc001c320
c000734a:	6a 01                	push   0x1
c000734c:	53                   	push   ebx
c000734d:	e8 86 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007352:	83 c4 20             	add    esp,0x20
c0007355:	6a 00                	push   0x0
c0007357:	68 2a c3 01 c0       	push   0xc001c32a
c000735c:	6a 02                	push   0x2
c000735e:	53                   	push   ebx
c000735f:	e8 74 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007364:	6a 00                	push   0x0
c0007366:	68 34 c3 01 c0       	push   0xc001c334
c000736b:	6a 03                	push   0x3
c000736d:	53                   	push   ebx
c000736e:	e8 65 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007373:	83 c4 20             	add    esp,0x20
c0007376:	6a 00                	push   0x0
c0007378:	68 3e c3 01 c0       	push   0xc001c33e
c000737d:	6a 04                	push   0x4
c000737f:	53                   	push   ebx
c0007380:	e8 53 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007385:	6a 00                	push   0x0
c0007387:	68 48 c3 01 c0       	push   0xc001c348
c000738c:	6a 05                	push   0x5
c000738e:	53                   	push   ebx
c000738f:	e8 44 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007394:	83 c4 20             	add    esp,0x20
c0007397:	6a 00                	push   0x0
c0007399:	68 52 c3 01 c0       	push   0xc001c352
c000739e:	6a 06                	push   0x6
c00073a0:	53                   	push   ebx
c00073a1:	e8 32 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00073a6:	6a 00                	push   0x0
c00073a8:	68 5c c3 01 c0       	push   0xc001c35c
c00073ad:	6a 07                	push   0x7
c00073af:	53                   	push   ebx
c00073b0:	e8 23 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00073b5:	83 c4 20             	add    esp,0x20
c00073b8:	6a 00                	push   0x0
c00073ba:	68 66 c3 01 c0       	push   0xc001c366
c00073bf:	6a 08                	push   0x8
c00073c1:	53                   	push   ebx
c00073c2:	e8 11 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00073c7:	6a 00                	push   0x0
c00073c9:	68 6e c3 01 c0       	push   0xc001c36e
c00073ce:	6a 09                	push   0x9
c00073d0:	53                   	push   ebx
c00073d1:	e8 02 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00073d6:	83 c4 20             	add    esp,0x20
c00073d9:	6a 00                	push   0x0
c00073db:	68 78 c3 01 c0       	push   0xc001c378
c00073e0:	6a 0a                	push   0xa
c00073e2:	53                   	push   ebx
c00073e3:	e8 f0 fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00073e8:	6a 00                	push   0x0
c00073ea:	68 80 c3 01 c0       	push   0xc001c380
c00073ef:	6a 0b                	push   0xb
c00073f1:	53                   	push   ebx
c00073f2:	e8 e1 fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00073f7:	83 c4 20             	add    esp,0x20
c00073fa:	6a 00                	push   0x0
c00073fc:	68 88 c3 01 c0       	push   0xc001c388
c0007401:	6a 0c                	push   0xc
c0007403:	53                   	push   ebx
c0007404:	e8 cf fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007409:	6a 00                	push   0x0
c000740b:	68 90 c3 01 c0       	push   0xc001c390
c0007410:	6a 0d                	push   0xd
c0007412:	53                   	push   ebx
c0007413:	e8 c0 fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007418:	83 c4 20             	add    esp,0x20
c000741b:	6a 00                	push   0x0
c000741d:	68 98 c3 01 c0       	push   0xc001c398
c0007422:	6a 0e                	push   0xe
c0007424:	53                   	push   ebx
c0007425:	e8 ae fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c000742a:	6a 00                	push   0x0
c000742c:	68 a0 c3 01 c0       	push   0xc001c3a0
c0007431:	6a 0f                	push   0xf
c0007433:	53                   	push   ebx
c0007434:	e8 9f fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007439:	83 c4 20             	add    esp,0x20
c000743c:	6a 00                	push   0x0
c000743e:	68 aa c3 01 c0       	push   0xc001c3aa
c0007443:	6a 10                	push   0x10
c0007445:	53                   	push   ebx
c0007446:	e8 8d fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c000744b:	6a 00                	push   0x0
c000744d:	68 b4 c3 01 c0       	push   0xc001c3b4
c0007452:	6a 11                	push   0x11
c0007454:	53                   	push   ebx
c0007455:	e8 7e fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c000745a:	83 c4 20             	add    esp,0x20
c000745d:	6a 00                	push   0x0
c000745f:	68 be c3 01 c0       	push   0xc001c3be
c0007464:	6a 12                	push   0x12
c0007466:	53                   	push   ebx
c0007467:	e8 6c fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c000746c:	6a 01                	push   0x1
c000746e:	68 58 c4 01 c0       	push   0xc001c458
c0007473:	6a 60                	push   0x60
c0007475:	53                   	push   ebx
c0007476:	e8 5d fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c000747b:	83 c4 20             	add    esp,0x20
c000747e:	6a 00                	push   0x0
c0007480:	68 5f c4 01 c0       	push   0xc001c45f
c0007485:	6a 20                	push   0x20
c0007487:	53                   	push   ebx
c0007488:	e8 4b fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c000748d:	6a 00                	push   0x0
c000748f:	68 4a c4 01 c0       	push   0xc001c44a
c0007494:	6a 21                	push   0x21
c0007496:	53                   	push   ebx
c0007497:	e8 3c fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c000749c:	83 c4 20             	add    esp,0x20
c000749f:	6a 00                	push   0x0
c00074a1:	68 51 c4 01 c0       	push   0xc001c451
c00074a6:	6a 22                	push   0x22
c00074a8:	53                   	push   ebx
c00074a9:	e8 2a fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00074ae:	6a 00                	push   0x0
c00074b0:	68 c8 c3 01 c0       	push   0xc001c3c8
c00074b5:	6a 23                	push   0x23
c00074b7:	53                   	push   ebx
c00074b8:	e8 1b fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00074bd:	83 c4 20             	add    esp,0x20
c00074c0:	6a 00                	push   0x0
c00074c2:	68 d2 c3 01 c0       	push   0xc001c3d2
c00074c7:	6a 24                	push   0x24
c00074c9:	53                   	push   ebx
c00074ca:	e8 09 fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00074cf:	6a 00                	push   0x0
c00074d1:	68 dc c3 01 c0       	push   0xc001c3dc
c00074d6:	6a 25                	push   0x25
c00074d8:	53                   	push   ebx
c00074d9:	e8 fa fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00074de:	83 c4 20             	add    esp,0x20
c00074e1:	6a 00                	push   0x0
c00074e3:	68 e6 c3 01 c0       	push   0xc001c3e6
c00074e8:	6a 26                	push   0x26
c00074ea:	53                   	push   ebx
c00074eb:	e8 e8 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00074f0:	6a 00                	push   0x0
c00074f2:	68 f0 c3 01 c0       	push   0xc001c3f0
c00074f7:	6a 27                	push   0x27
c00074f9:	53                   	push   ebx
c00074fa:	e8 d9 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00074ff:	83 c4 20             	add    esp,0x20
c0007502:	6a 00                	push   0x0
c0007504:	68 fa c3 01 c0       	push   0xc001c3fa
c0007509:	6a 28                	push   0x28
c000750b:	53                   	push   ebx
c000750c:	e8 c7 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007511:	6a 00                	push   0x0
c0007513:	68 04 c4 01 c0       	push   0xc001c404
c0007518:	6a 29                	push   0x29
c000751a:	53                   	push   ebx
c000751b:	e8 b8 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007520:	83 c4 20             	add    esp,0x20
c0007523:	6a 00                	push   0x0
c0007525:	68 0e c4 01 c0       	push   0xc001c40e
c000752a:	6a 2a                	push   0x2a
c000752c:	53                   	push   ebx
c000752d:	e8 a6 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007532:	6a 00                	push   0x0
c0007534:	68 18 c4 01 c0       	push   0xc001c418
c0007539:	6a 2b                	push   0x2b
c000753b:	53                   	push   ebx
c000753c:	e8 97 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007541:	83 c4 20             	add    esp,0x20
c0007544:	6a 00                	push   0x0
c0007546:	68 22 c4 01 c0       	push   0xc001c422
c000754b:	6a 2c                	push   0x2c
c000754d:	53                   	push   ebx
c000754e:	e8 85 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007553:	6a 00                	push   0x0
c0007555:	68 2c c4 01 c0       	push   0xc001c42c
c000755a:	6a 2d                	push   0x2d
c000755c:	53                   	push   ebx
c000755d:	e8 76 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007562:	83 c4 20             	add    esp,0x20
c0007565:	6a 00                	push   0x0
c0007567:	68 36 c4 01 c0       	push   0xc001c436
c000756c:	6a 2e                	push   0x2e
c000756e:	53                   	push   ebx
c000756f:	e8 64 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007574:	6a 00                	push   0x0
c0007576:	68 40 c4 01 c0       	push   0xc001c440
c000757b:	6a 2f                	push   0x2f
c000757d:	53                   	push   ebx
c000757e:	e8 55 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007583:	83 c4 20             	add    esp,0x20
c0007586:	6a 00                	push   0x0
c0007588:	68 f1 c4 01 c0       	push   0xc001c4f1
c000758d:	6a 30                	push   0x30
c000758f:	53                   	push   ebx
c0007590:	e8 43 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007595:	6a 00                	push   0x0
c0007597:	68 fb c4 01 c0       	push   0xc001c4fb
c000759c:	6a 31                	push   0x31
c000759e:	53                   	push   ebx
c000759f:	e8 34 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00075a4:	83 c4 20             	add    esp,0x20
c00075a7:	6a 00                	push   0x0
c00075a9:	68 05 c5 01 c0       	push   0xc001c505
c00075ae:	6a 32                	push   0x32
c00075b0:	53                   	push   ebx
c00075b1:	e8 22 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00075b6:	6a 00                	push   0x0
c00075b8:	68 0f c5 01 c0       	push   0xc001c50f
c00075bd:	6a 33                	push   0x33
c00075bf:	53                   	push   ebx
c00075c0:	e8 13 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00075c5:	83 c4 20             	add    esp,0x20
c00075c8:	6a 00                	push   0x0
c00075ca:	68 19 c5 01 c0       	push   0xc001c519
c00075cf:	6a 34                	push   0x34
c00075d1:	53                   	push   ebx
c00075d2:	e8 01 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00075d7:	6a 00                	push   0x0
c00075d9:	68 23 c5 01 c0       	push   0xc001c523
c00075de:	6a 35                	push   0x35
c00075e0:	53                   	push   ebx
c00075e1:	e8 f2 fc ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00075e6:	83 c4 20             	add    esp,0x20
c00075e9:	6a 00                	push   0x0
c00075eb:	68 2d c5 01 c0       	push   0xc001c52d
c00075f0:	6a 36                	push   0x36
c00075f2:	53                   	push   ebx
c00075f3:	e8 e0 fc ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00075f8:	6a 00                	push   0x0
c00075fa:	68 37 c5 01 c0       	push   0xc001c537
c00075ff:	6a 37                	push   0x37
c0007601:	53                   	push   ebx
c0007602:	e8 d1 fc ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007607:	83 c4 1c             	add    esp,0x1c
c000760a:	6a 03                	push   0x3
c000760c:	6a 02                	push   0x2
c000760e:	ff 35 b0 2f 02 c0    	push   DWORD PTR ds:0xc0022fb0
c0007614:	e8 43 24 00 00       	call   c0009a5c <VAS::allocatePages(int, int)>
c0007619:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0007620:	89 c6                	mov    esi,eax
c0007622:	e8 92 01 00 00       	call   c00077b9 <malloc>
c0007627:	81 c6 00 20 00 00    	add    esi,0x2000
c000762d:	89 04 24             	mov    DWORD PTR [esp],eax
c0007630:	89 c7                	mov    edi,eax
c0007632:	e8 a1 15 00 00       	call   c0008bd8 <TSS::TSS()>
c0007637:	83 c4 0c             	add    esp,0xc
c000763a:	68 66 c3 01 c0       	push   0xc001c366
c000763f:	56                   	push   esi
c0007640:	57                   	push   edi
c0007641:	e8 d6 15 00 00       	call   c0008c1c <TSS::setup(unsigned long, unsigned long)>
c0007646:	89 c6                	mov    esi,eax
c0007648:	58                   	pop    eax
c0007649:	5a                   	pop    edx
c000764a:	6a 00                	push   0x0
c000764c:	8d 44 24 14          	lea    eax,[esp+0x14]
c0007650:	50                   	push   eax
c0007651:	e8 d6 fb ff ff       	call   c000722c <IDTEntry::IDTEntry(bool)>
c0007656:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000765a:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000765f:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c0007666:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000766c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007670:	80 ce 05             	or     dh,0x5
c0007673:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c0007676:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000767a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000767e:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0007681:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007684:	e8 87 fc ff ff       	call   c0007310 <IDT::flush()>
c0007689:	83 c4 20             	add    esp,0x20
c000768c:	5b                   	pop    ebx
c000768d:	5e                   	pop    esi
c000768e:	5f                   	pop    edi
c000768f:	c3                   	ret    

c0007690 <sbrk>:
c0007690:	55                   	push   ebp
c0007691:	57                   	push   edi
c0007692:	56                   	push   esi
c0007693:	53                   	push   ebx
c0007694:	83 ec 1c             	sub    esp,0x1c
c0007697:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000769b:	85 c0                	test   eax,eax
c000769d:	74 5f                	je     c00076fe <sbrk+0x6e>
c000769f:	78 64                	js     c0007705 <sbrk+0x75>
c00076a1:	8b 15 a8 fe 01 c0    	mov    edx,DWORD PTR ds:0xc001fea8
c00076a7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00076ab:	05 ff 0f 00 00       	add    eax,0xfff
c00076b0:	89 c5                	mov    ebp,eax
c00076b2:	78 69                	js     c000771d <sbrk+0x8d>
c00076b4:	c1 fd 0c             	sar    ebp,0xc
c00076b7:	bb 00 00 00 00       	mov    ebx,0x0
c00076bc:	8b 35 b0 2f 02 c0    	mov    esi,DWORD PTR ds:0xc0022fb0
c00076c2:	8b 3d a8 fe 01 c0    	mov    edi,DWORD PTR ds:0xc001fea8
c00076c8:	e8 c8 03 00 00       	call   c0007a95 <Phys::allocatePage()>
c00076cd:	68 01 04 00 00       	push   0x401
c00076d2:	57                   	push   edi
c00076d3:	50                   	push   eax
c00076d4:	56                   	push   esi
c00076d5:	e8 7e 22 00 00       	call   c0009958 <VAS::mapPage(unsigned long, unsigned long, int)>
c00076da:	81 05 a8 fe 01 c0 00 10 00 00 	add    DWORD PTR ds:0xc001fea8,0x1000
c00076e4:	43                   	inc    ebx
c00076e5:	83 c4 10             	add    esp,0x10
c00076e8:	39 dd                	cmp    ebp,ebx
c00076ea:	75 d0                	jne    c00076bc <sbrk+0x2c>
c00076ec:	0f 20 d8             	mov    eax,cr3
c00076ef:	0f 22 d8             	mov    cr3,eax
c00076f2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00076f6:	83 c4 1c             	add    esp,0x1c
c00076f9:	5b                   	pop    ebx
c00076fa:	5e                   	pop    esi
c00076fb:	5f                   	pop    edi
c00076fc:	5d                   	pop    ebp
c00076fd:	c3                   	ret    
c00076fe:	a1 a8 fe 01 c0       	mov    eax,ds:0xc001fea8
c0007703:	eb f1                	jmp    c00076f6 <sbrk+0x66>
c0007705:	83 ec 08             	sub    esp,0x8
c0007708:	50                   	push   eax
c0007709:	68 fc dd 01 c0       	push   0xc001ddfc
c000770e:	e8 3f 2e 00 00       	call   c000a552 <Dbg::kprintf(char const*, ...)>
c0007713:	83 c4 10             	add    esp,0x10
c0007716:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000771b:	eb d9                	jmp    c00076f6 <sbrk+0x66>
c000771d:	8d a8 ff 0f 00 00    	lea    ebp,[eax+0xfff]
c0007723:	eb 8f                	jmp    c00076b4 <sbrk+0x24>

c0007725 <mmap>:
c0007725:	83 ec 18             	sub    esp,0x18
c0007728:	68 2c de 01 c0       	push   0xc001de2c
c000772d:	e8 75 8b 00 00       	call   c00102a7 <KePanic(char const*)>
c0007732:	b8 00 00 00 00       	mov    eax,0x0
c0007737:	83 c4 1c             	add    esp,0x1c
c000773a:	c3                   	ret    

c000773b <munmap>:
c000773b:	83 ec 18             	sub    esp,0x18
c000773e:	68 31 de 01 c0       	push   0xc001de31
c0007743:	e8 5f 8b 00 00       	call   c00102a7 <KePanic(char const*)>
c0007748:	b8 00 00 00 00       	mov    eax,0x0
c000774d:	83 c4 1c             	add    esp,0x1c
c0007750:	c3                   	ret    

c0007751 <liballoc_lock()>:
c0007751:	fa                   	cli    
c0007752:	ff 05 68 61 02 c0    	inc    DWORD PTR ds:0xc0026168
c0007758:	b8 00 00 00 00       	mov    eax,0x0
c000775d:	c3                   	ret    

c000775e <liballoc_unlock()>:
c000775e:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c0007763:	48                   	dec    eax
c0007764:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c0007769:	75 01                	jne    c000776c <liballoc_unlock()+0xe>
c000776b:	fb                   	sti    
c000776c:	b8 00 00 00 00       	mov    eax,0x0
c0007771:	c3                   	ret    

c0007772 <liballoc_alloc(int)>:
c0007772:	83 ec 10             	sub    esp,0x10
c0007775:	6a 01                	push   0x1
c0007777:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000777b:	ff 35 b0 2f 02 c0    	push   DWORD PTR ds:0xc0022fb0
c0007781:	e8 d6 22 00 00       	call   c0009a5c <VAS::allocatePages(int, int)>
c0007786:	83 c4 1c             	add    esp,0x1c
c0007789:	c3                   	ret    

c000778a <liballoc_free(void*, int)>:
c000778a:	83 ec 14             	sub    esp,0x14
c000778d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007791:	ff 35 b0 2f 02 c0    	push   DWORD PTR ds:0xc0022fb0
c0007797:	e8 12 1f 00 00       	call   c00096ae <VAS::freeAllocatedPages(unsigned long)>
c000779c:	b8 00 00 00 00       	mov    eax,0x0
c00077a1:	83 c4 1c             	add    esp,0x1c
c00077a4:	c3                   	ret    

c00077a5 <realloc>:
c00077a5:	83 ec 14             	sub    esp,0x14
c00077a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00077ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00077b0:	e8 7c 9d ff ff       	call   c0001531 <dlrealloc>
c00077b5:	83 c4 1c             	add    esp,0x1c
c00077b8:	c3                   	ret    

c00077b9 <malloc>:
c00077b9:	83 ec 18             	sub    esp,0x18
c00077bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00077c0:	e8 2f 98 ff ff       	call   c0000ff4 <dlmalloc>
c00077c5:	83 c4 1c             	add    esp,0x1c
c00077c8:	c3                   	ret    

c00077c9 <free>:
c00077c9:	83 ec 18             	sub    esp,0x18
c00077cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00077d0:	e8 c4 94 ff ff       	call   c0000c99 <dlfree>
c00077d5:	83 c4 1c             	add    esp,0x1c
c00077d8:	c3                   	ret    

c00077d9 <rfree>:
c00077d9:	83 ec 18             	sub    esp,0x18
c00077dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00077e0:	e8 b4 94 ff ff       	call   c0000c99 <dlfree>
c00077e5:	83 c4 1c             	add    esp,0x1c
c00077e8:	c3                   	ret    

c00077e9 <calloc>:
c00077e9:	56                   	push   esi
c00077ea:	53                   	push   ebx
c00077eb:	83 ec 10             	sub    esp,0x10
c00077ee:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00077f2:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c00077f7:	53                   	push   ebx
c00077f8:	e8 bc ff ff ff       	call   c00077b9 <malloc>
c00077fd:	89 c6                	mov    esi,eax
c00077ff:	83 c4 0c             	add    esp,0xc
c0007802:	53                   	push   ebx
c0007803:	6a 00                	push   0x0
c0007805:	50                   	push   eax
c0007806:	e8 c5 8c ff ff       	call   c00004d0 <memset>
c000780b:	89 f0                	mov    eax,esi
c000780d:	83 c4 14             	add    esp,0x14
c0007810:	5b                   	pop    ebx
c0007811:	5e                   	pop    esi
c0007812:	c3                   	ret    

c0007813 <KeEntryPoint>:
c0007813:	57                   	push   edi
c0007814:	bf f9 03 00 00       	mov    edi,0x3f9
c0007819:	56                   	push   esi
c000781a:	89 fa                	mov    edx,edi
c000781c:	53                   	push   ebx
c000781d:	31 f6                	xor    esi,esi
c000781f:	83 ec 2c             	sub    esp,0x2c
c0007822:	a1 00 05 00 00       	mov    eax,ds:0x500
c0007827:	a3 d0 2e 02 c0       	mov    ds:0xc0022ed0,eax
c000782c:	89 f0                	mov    eax,esi
c000782e:	ee                   	out    dx,al
c000782f:	bb fb 03 00 00       	mov    ebx,0x3fb
c0007834:	b0 80                	mov    al,0x80
c0007836:	89 da                	mov    edx,ebx
c0007838:	ee                   	out    dx,al
c0007839:	b1 03                	mov    cl,0x3
c000783b:	ba f8 03 00 00       	mov    edx,0x3f8
c0007840:	88 c8                	mov    al,cl
c0007842:	ee                   	out    dx,al
c0007843:	89 f0                	mov    eax,esi
c0007845:	89 fa                	mov    edx,edi
c0007847:	ee                   	out    dx,al
c0007848:	88 c8                	mov    al,cl
c000784a:	89 da                	mov    edx,ebx
c000784c:	ee                   	out    dx,al
c000784d:	b0 c7                	mov    al,0xc7
c000784f:	ba fa 03 00 00       	mov    edx,0x3fa
c0007854:	ee                   	out    dx,al
c0007855:	b0 0b                	mov    al,0xb
c0007857:	ba fc 03 00 00       	mov    edx,0x3fc
c000785c:	ee                   	out    dx,al
c000785d:	68 38 de 01 c0       	push   0xc001de38
c0007862:	e8 eb 2c 00 00       	call   c000a552 <Dbg::kprintf(char const*, ...)>
c0007867:	e8 55 83 00 00       	call   c000fbc1 <KeDisplaySplashScreen()>
c000786c:	a1 24 05 00 00       	mov    eax,ds:0x524
c0007871:	05 ff 0f 00 00       	add    eax,0xfff
c0007876:	25 00 f0 ff ff       	and    eax,0xfffff000
c000787b:	89 04 24             	mov    DWORD PTR [esp],eax
c000787e:	e8 64 03 00 00       	call   c0007be7 <Phys::physicalMemorySetup(unsigned int)>
c0007883:	e8 cc 1b 00 00       	call   c0009454 <Virt::virtualMemorySetup()>
c0007888:	58                   	pop    eax
c0007889:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c000788d:	53                   	push   ebx
c000788e:	e8 99 1e 00 00       	call   c000972c <VAS::VAS()>
c0007893:	89 1d b0 2f 02 c0    	mov    DWORD PTR ds:0xc0022fb0,ebx
c0007899:	e8 5c 52 01 00       	call   c001cafa <_init>
c000789e:	c7 04 24 70 01 00 00 	mov    DWORD PTR [esp],0x170
c00078a5:	e8 0f ff ff ff       	call   c00077b9 <malloc>
c00078aa:	89 04 24             	mov    DWORD PTR [esp],eax
c00078ad:	89 c6                	mov    esi,eax
c00078af:	e8 7e f2 ff ff       	call   c0006b32 <Computer::Computer()>
c00078b4:	6a 00                	push   0x0
c00078b6:	89 35 b8 2e 02 c0    	mov    DWORD PTR ds:0xc0022eb8,esi
c00078bc:	6a 00                	push   0x0
c00078be:	6a 00                	push   0x0
c00078c0:	56                   	push   esi
c00078c1:	e8 12 f6 ff ff       	call   c0006ed8 <Computer::open(int, int, void*)>
c00078c6:	83 c4 14             	add    esp,0x14
c00078c9:	53                   	push   ebx
c00078ca:	e8 25 1f 00 00       	call   c00097f4 <VAS::~VAS()>
c00078cf:	83 c4 30             	add    esp,0x30
c00078d2:	5b                   	pop    ebx
c00078d3:	5e                   	pop    esi
c00078d4:	5f                   	pop    edi
c00078d5:	c3                   	ret    

c00078d6 <Phys::allocateDMA(unsigned long)>:
c00078d6:	55                   	push   ebp
c00078d7:	31 ed                	xor    ebp,ebp
c00078d9:	57                   	push   edi
c00078da:	56                   	push   esi
c00078db:	53                   	push   ebx
c00078dc:	31 db                	xor    ebx,ebx
c00078de:	83 ec 1c             	sub    esp,0x1c
c00078e1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00078e5:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00078ed:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c00078f3:	31 c0                	xor    eax,eax
c00078f5:	c1 ef 0c             	shr    edi,0xc
c00078f8:	eb 19                	jmp    c0007913 <Phys::allocateDMA(unsigned long)+0x3d>
c00078fa:	85 c0                	test   eax,eax
c00078fc:	75 06                	jne    c0007904 <Phys::allocateDMA(unsigned long)+0x2e>
c00078fe:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007902:	89 dd                	mov    ebp,ebx
c0007904:	8d 70 01             	lea    esi,[eax+0x1]
c0007907:	39 f7                	cmp    edi,esi
c0007909:	74 33                	je     c000793e <Phys::allocateDMA(unsigned long)+0x68>
c000790b:	89 f0                	mov    eax,esi
c000790d:	43                   	inc    ebx
c000790e:	83 fb 0f             	cmp    ebx,0xf
c0007911:	7f 11                	jg     c0007924 <Phys::allocateDMA(unsigned long)+0x4e>
c0007913:	80 bb ec 2e 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffdd114],0x0
c000791a:	74 de                	je     c00078fa <Phys::allocateDMA(unsigned long)+0x24>
c000791c:	31 c0                	xor    eax,eax
c000791e:	43                   	inc    ebx
c000791f:	83 fb 0f             	cmp    ebx,0xf
c0007922:	7e ef                	jle    c0007913 <Phys::allocateDMA(unsigned long)+0x3d>
c0007924:	83 ec 0c             	sub    esp,0xc
c0007927:	68 50 de 01 c0       	push   0xc001de50
c000792c:	e8 76 89 00 00       	call   c00102a7 <KePanic(char const*)>
c0007931:	83 c4 10             	add    esp,0x10
c0007934:	31 c0                	xor    eax,eax
c0007936:	83 c4 1c             	add    esp,0x1c
c0007939:	5b                   	pop    ebx
c000793a:	5e                   	pop    esi
c000793b:	5f                   	pop    edi
c000793c:	5d                   	pop    ebp
c000793d:	c3                   	ret    
c000793e:	89 e9                	mov    ecx,ebp
c0007940:	c1 f9 04             	sar    ecx,0x4
c0007943:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007947:	8d 4c 3d 00          	lea    ecx,[ebp+edi*1+0x0]
c000794b:	89 ca                	mov    edx,ecx
c000794d:	4a                   	dec    edx
c000794e:	79 03                	jns    c0007953 <Phys::allocateDMA(unsigned long)+0x7d>
c0007950:	8d 51 0e             	lea    edx,[ecx+0xe]
c0007953:	c1 fa 04             	sar    edx,0x4
c0007956:	39 54 24 0c          	cmp    DWORD PTR [esp+0xc],edx
c000795a:	74 08                	je     c0007964 <Phys::allocateDMA(unsigned long)+0x8e>
c000795c:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007960:	31 c0                	xor    eax,eax
c0007962:	eb ba                	jmp    c000791e <Phys::allocateDMA(unsigned long)+0x48>
c0007964:	85 f6                	test   esi,esi
c0007966:	74 15                	je     c000797d <Phys::allocateDMA(unsigned long)+0xa7>
c0007968:	8d 95 ec 2e 02 c0    	lea    edx,[ebp-0x3ffdd114]
c000796e:	8d 84 05 ed 2e 02 c0 	lea    eax,[ebp+eax*1-0x3ffdd113]
c0007975:	c6 02 01             	mov    BYTE PTR [edx],0x1
c0007978:	42                   	inc    edx
c0007979:	39 d0                	cmp    eax,edx
c000797b:	75 f8                	jne    c0007975 <Phys::allocateDMA(unsigned long)+0x9f>
c000797d:	01 3d e4 2e 02 c0    	add    DWORD PTR ds:0xc0022ee4,edi
c0007983:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007987:	85 c0                	test   eax,eax
c0007989:	74 17                	je     c00079a2 <Phys::allocateDMA(unsigned long)+0xcc>
c000798b:	83 ec 0c             	sub    esp,0xc
c000798e:	68 50 de 01 c0       	push   0xc001de50
c0007993:	e8 0f 89 00 00       	call   c00102a7 <KePanic(char const*)>
c0007998:	83 c4 10             	add    esp,0x10
c000799b:	89 f0                	mov    eax,esi
c000799d:	e9 6b ff ff ff       	jmp    c000790d <Phys::allocateDMA(unsigned long)+0x37>
c00079a2:	c1 e5 0c             	shl    ebp,0xc
c00079a5:	8d 85 00 00 01 c2    	lea    eax,[ebp-0x3dff0000]
c00079ab:	eb 89                	jmp    c0007936 <Phys::allocateDMA(unsigned long)+0x60>

c00079ad <Phys::freeDMA(unsigned long, unsigned long)>:
c00079ad:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00079b1:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c00079b7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00079bb:	c1 ea 0c             	shr    edx,0xc
c00079be:	05 00 00 ff 3d       	add    eax,0x3dff0000
c00079c3:	29 15 e4 2e 02 c0    	sub    DWORD PTR ds:0xc0022ee4,edx
c00079c9:	c1 e8 0c             	shr    eax,0xc
c00079cc:	85 d2                	test   edx,edx
c00079ce:	74 0f                	je     c00079df <Phys::freeDMA(unsigned long, unsigned long)+0x32>
c00079d0:	05 ec 2e 02 c0       	add    eax,0xc0022eec
c00079d5:	01 c2                	add    edx,eax
c00079d7:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00079da:	40                   	inc    eax
c00079db:	39 d0                	cmp    eax,edx
c00079dd:	75 f8                	jne    c00079d7 <Phys::freeDMA(unsigned long, unsigned long)+0x2a>
c00079df:	c3                   	ret    

c00079e0 <Phys::setPageState(unsigned long, bool)>:
c00079e0:	56                   	push   esi
c00079e1:	ba 01 00 00 00       	mov    edx,0x1
c00079e6:	53                   	push   ebx
c00079e7:	8b 35 ac fe 01 c0    	mov    esi,DWORD PTR ds:0xc001feac
c00079ed:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00079f1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00079f5:	89 c8                	mov    eax,ecx
c00079f7:	83 e1 07             	and    ecx,0x7
c00079fa:	c1 e8 03             	shr    eax,0x3
c00079fd:	d3 e3                	shl    ebx,cl
c00079ff:	01 c6                	add    esi,eax
c0007a01:	d3 e2                	shl    edx,cl
c0007a03:	f7 d2                	not    edx
c0007a05:	20 16                	and    BYTE PTR [esi],dl
c0007a07:	03 05 ac fe 01 c0    	add    eax,DWORD PTR ds:0xc001feac
c0007a0d:	08 18                	or     BYTE PTR [eax],bl
c0007a0f:	5b                   	pop    ebx
c0007a10:	5e                   	pop    esi
c0007a11:	c3                   	ret    

c0007a12 <Phys::getPageState(unsigned long)>:
c0007a12:	53                   	push   ebx
c0007a13:	8b 15 ac fe 01 c0    	mov    edx,DWORD PTR ds:0xc001feac
c0007a19:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0007a1d:	31 db                	xor    ebx,ebx
c0007a1f:	89 c8                	mov    eax,ecx
c0007a21:	83 e1 07             	and    ecx,0x7
c0007a24:	c1 e8 03             	shr    eax,0x3
c0007a27:	8a 1c 02             	mov    bl,BYTE PTR [edx+eax*1]
c0007a2a:	89 d8                	mov    eax,ebx
c0007a2c:	5b                   	pop    ebx
c0007a2d:	d3 f8                	sar    eax,cl
c0007a2f:	83 e0 01             	and    eax,0x1
c0007a32:	c3                   	ret    

c0007a33 <Phys::freePage(unsigned long)>:
c0007a33:	53                   	push   ebx
c0007a34:	83 ec 08             	sub    esp,0x8
c0007a37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007a3b:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c0007a41:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0007a47:	76 3a                	jbe    c0007a83 <Phys::freePage(unsigned long)+0x50>
c0007a49:	c1 e8 0c             	shr    eax,0xc
c0007a4c:	50                   	push   eax
c0007a4d:	89 c3                	mov    ebx,eax
c0007a4f:	e8 be ff ff ff       	call   c0007a12 <Phys::getPageState(unsigned long)>
c0007a54:	5a                   	pop    edx
c0007a55:	84 c0                	test   al,al
c0007a57:	74 19                	je     c0007a72 <Phys::freePage(unsigned long)+0x3f>
c0007a59:	83 ec 08             	sub    esp,0x8
c0007a5c:	ff 0d e4 2e 02 c0    	dec    DWORD PTR ds:0xc0022ee4
c0007a62:	6a 00                	push   0x0
c0007a64:	53                   	push   ebx
c0007a65:	e8 76 ff ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007a6a:	83 c4 10             	add    esp,0x10
c0007a6d:	83 c4 08             	add    esp,0x8
c0007a70:	5b                   	pop    ebx
c0007a71:	c3                   	ret    
c0007a72:	c7 44 24 10 f5 de 01 c0 	mov    DWORD PTR [esp+0x10],0xc001def5
c0007a7a:	83 c4 08             	add    esp,0x8
c0007a7d:	5b                   	pop    ebx
c0007a7e:	e9 24 88 00 00       	jmp    c00102a7 <KePanic(char const*)>
c0007a83:	68 00 10 00 00       	push   0x1000
c0007a88:	50                   	push   eax
c0007a89:	e8 1f ff ff ff       	call   c00079ad <Phys::freeDMA(unsigned long, unsigned long)>
c0007a8e:	59                   	pop    ecx
c0007a8f:	5b                   	pop    ebx
c0007a90:	83 c4 08             	add    esp,0x8
c0007a93:	5b                   	pop    ebx
c0007a94:	c3                   	ret    

c0007a95 <Phys::allocatePage()>:
c0007a95:	56                   	push   esi
c0007a96:	53                   	push   ebx
c0007a97:	83 ec 14             	sub    esp,0x14
c0007a9a:	8b 35 d8 2e 02 c0    	mov    esi,DWORD PTR ds:0xc0022ed8
c0007aa0:	89 f3                	mov    ebx,esi
c0007aa2:	eb 0a                	jmp    c0007aae <Phys::allocatePage()+0x19>
c0007aa4:	89 1d d8 2e 02 c0    	mov    DWORD PTR ds:0xc0022ed8,ebx
c0007aaa:	39 de                	cmp    esi,ebx
c0007aac:	74 24                	je     c0007ad2 <Phys::allocatePage()+0x3d>
c0007aae:	53                   	push   ebx
c0007aaf:	e8 5e ff ff ff       	call   c0007a12 <Phys::getPageState(unsigned long)>
c0007ab4:	5a                   	pop    edx
c0007ab5:	84 c0                	test   al,al
c0007ab7:	74 5f                	je     c0007b18 <Phys::allocatePage()+0x83>
c0007ab9:	43                   	inc    ebx
c0007aba:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007ac0:	75 e2                	jne    c0007aa4 <Phys::allocatePage()+0xf>
c0007ac2:	31 db                	xor    ebx,ebx
c0007ac4:	c7 05 d8 2e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022ed8,0x0
c0007ace:	39 de                	cmp    esi,ebx
c0007ad0:	75 dc                	jne    c0007aae <Phys::allocatePage()+0x19>
c0007ad2:	83 ec 0c             	sub    esp,0xc
c0007ad5:	80 35 fc 2e 02 c0 01 	xor    BYTE PTR ds:0xc0022efc,0x1
c0007adc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0007ae1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0007ae4:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0007aea:	50                   	push   eax
c0007aeb:	e8 46 27 00 00       	call   c000a236 <VAS::scanForEviction()>
c0007af0:	83 c4 10             	add    esp,0x10
c0007af3:	85 c0                	test   eax,eax
c0007af5:	75 3f                	jne    c0007b36 <Phys::allocatePage()+0xa1>
c0007af7:	83 ec 0c             	sub    esp,0xc
c0007afa:	68 78 de 01 c0       	push   0xc001de78
c0007aff:	e8 a3 87 00 00       	call   c00102a7 <KePanic(char const*)>
c0007b04:	83 c4 10             	add    esp,0x10
c0007b07:	8b 1d d8 2e 02 c0    	mov    ebx,DWORD PTR ds:0xc0022ed8
c0007b0d:	53                   	push   ebx
c0007b0e:	e8 ff fe ff ff       	call   c0007a12 <Phys::getPageState(unsigned long)>
c0007b13:	5a                   	pop    edx
c0007b14:	84 c0                	test   al,al
c0007b16:	75 a1                	jne    c0007ab9 <Phys::allocatePage()+0x24>
c0007b18:	6a 01                	push   0x1
c0007b1a:	53                   	push   ebx
c0007b1b:	e8 c0 fe ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007b20:	a1 d8 2e 02 c0       	mov    eax,ds:0xc0022ed8
c0007b25:	5a                   	pop    edx
c0007b26:	ff 05 e4 2e 02 c0    	inc    DWORD PTR ds:0xc0022ee4
c0007b2c:	c1 e0 0c             	shl    eax,0xc
c0007b2f:	59                   	pop    ecx
c0007b30:	83 c4 14             	add    esp,0x14
c0007b33:	5b                   	pop    ebx
c0007b34:	5e                   	pop    esi
c0007b35:	c3                   	ret    
c0007b36:	83 ec 08             	sub    esp,0x8
c0007b39:	89 c2                	mov    edx,eax
c0007b3b:	6a 01                	push   0x1
c0007b3d:	c1 ea 0c             	shr    edx,0xc
c0007b40:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007b44:	52                   	push   edx
c0007b45:	e8 96 fe ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007b4a:	83 c4 10             	add    esp,0x10
c0007b4d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007b51:	eb dd                	jmp    c0007b30 <Phys::allocatePage()+0x9b>

c0007b53 <Phys::allocateContiguousPages(int)>:
c0007b53:	57                   	push   edi
c0007b54:	56                   	push   esi
c0007b55:	53                   	push   ebx
c0007b56:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007b5a:	fa                   	cli    
c0007b5b:	ff 05 68 61 02 c0    	inc    DWORD PTR ds:0xc0026168
c0007b61:	31 db                	xor    ebx,ebx
c0007b63:	85 db                	test   ebx,ebx
c0007b65:	75 11                	jne    c0007b78 <Phys::allocateContiguousPages(int)+0x25>
c0007b67:	e8 29 ff ff ff       	call   c0007a95 <Phys::allocatePage()>
c0007b6c:	83 fe 01             	cmp    esi,0x1
c0007b6f:	89 c7                	mov    edi,eax
c0007b71:	74 21                	je     c0007b94 <Phys::allocateContiguousPages(int)+0x41>
c0007b73:	bb 01 00 00 00       	mov    ebx,0x1
c0007b78:	e8 18 ff ff ff       	call   c0007a95 <Phys::allocatePage()>
c0007b7d:	89 da                	mov    edx,ebx
c0007b7f:	c1 e2 0c             	shl    edx,0xc
c0007b82:	01 fa                	add    edx,edi
c0007b84:	39 c2                	cmp    edx,eax
c0007b86:	74 20                	je     c0007ba8 <Phys::allocateContiguousPages(int)+0x55>
c0007b88:	bb 01 00 00 00       	mov    ebx,0x1
c0007b8d:	89 c7                	mov    edi,eax
c0007b8f:	83 fe 01             	cmp    esi,0x1
c0007b92:	75 e4                	jne    c0007b78 <Phys::allocateContiguousPages(int)+0x25>
c0007b94:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c0007b99:	48                   	dec    eax
c0007b9a:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c0007b9f:	75 01                	jne    c0007ba2 <Phys::allocateContiguousPages(int)+0x4f>
c0007ba1:	fb                   	sti    
c0007ba2:	89 f8                	mov    eax,edi
c0007ba4:	5b                   	pop    ebx
c0007ba5:	5e                   	pop    esi
c0007ba6:	5f                   	pop    edi
c0007ba7:	c3                   	ret    
c0007ba8:	43                   	inc    ebx
c0007ba9:	39 f3                	cmp    ebx,esi
c0007bab:	75 b6                	jne    c0007b63 <Phys::allocateContiguousPages(int)+0x10>
c0007bad:	eb e5                	jmp    c0007b94 <Phys::allocateContiguousPages(int)+0x41>

c0007baf <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0007baf:	56                   	push   esi
c0007bb0:	53                   	push   ebx
c0007bb1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007bb5:	39 1d dc 2e 02 c0    	cmp    DWORD PTR ds:0xc0022edc,ebx
c0007bbb:	73 06                	jae    c0007bc3 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0007bbd:	89 1d dc 2e 02 c0    	mov    DWORD PTR ds:0xc0022edc,ebx
c0007bc3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007bc7:	c1 eb 0c             	shr    ebx,0xc
c0007bca:	c1 e8 0c             	shr    eax,0xc
c0007bcd:	39 d8                	cmp    eax,ebx
c0007bcf:	73 13                	jae    c0007be4 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c0007bd1:	6a 00                	push   0x0
c0007bd3:	8d 70 01             	lea    esi,[eax+0x1]
c0007bd6:	50                   	push   eax
c0007bd7:	e8 04 fe ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007bdc:	5a                   	pop    edx
c0007bdd:	89 f0                	mov    eax,esi
c0007bdf:	59                   	pop    ecx
c0007be0:	39 f3                	cmp    ebx,esi
c0007be2:	75 ed                	jne    c0007bd1 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0007be4:	5b                   	pop    ebx
c0007be5:	5e                   	pop    esi
c0007be6:	c3                   	ret    

c0007be7 <Phys::physicalMemorySetup(unsigned int)>:
c0007be7:	55                   	push   ebp
c0007be8:	57                   	push   edi
c0007be9:	56                   	push   esi
c0007bea:	53                   	push   ebx
c0007beb:	31 db                	xor    ebx,ebx
c0007bed:	83 ec 40             	sub    esp,0x40
c0007bf0:	6a 10                	push   0x10
c0007bf2:	6a 00                	push   0x0
c0007bf4:	68 ec 2e 02 c0       	push   0xc0022eec
c0007bf9:	e8 d2 88 ff ff       	call   c00004d0 <memset>
c0007bfe:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007c02:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007c07:	05 00 10 00 00       	add    eax,0x1000
c0007c0c:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0007c10:	5a                   	pop    edx
c0007c11:	59                   	pop    ecx
c0007c12:	50                   	push   eax
c0007c13:	68 0b df 01 c0       	push   0xc001df0b
c0007c18:	e8 35 29 00 00       	call   c000a552 <Dbg::kprintf(char const*, ...)>
c0007c1d:	83 c4 10             	add    esp,0x10
c0007c20:	83 ec 08             	sub    esp,0x8
c0007c23:	6a 01                	push   0x1
c0007c25:	53                   	push   ebx
c0007c26:	43                   	inc    ebx
c0007c27:	e8 b4 fd ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007c2c:	83 c4 10             	add    esp,0x10
c0007c2f:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007c35:	75 e9                	jne    c0007c20 <Phys::physicalMemorySetup(unsigned int)+0x39>
c0007c37:	66 a1 13 05 00 c2    	mov    ax,ds:0xc2000513
c0007c3d:	66 85 c0             	test   ax,ax
c0007c40:	0f 84 97 01 00 00    	je     c0007ddd <Phys::physicalMemorySetup(unsigned int)+0x1f6>
c0007c46:	89 c7                	mov    edi,eax
c0007c48:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007c50:	81 e7 ff ff 00 00    	and    edi,0xffff
c0007c56:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c0007c5b:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0007c5f:	eb 15                	jmp    c0007c76 <Phys::physicalMemorySetup(unsigned int)+0x8f>
c0007c61:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0007c65:	83 c3 18             	add    ebx,0x18
c0007c68:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007c6c:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0007c70:	0f 84 77 01 00 00    	je     c0007ded <Phys::physicalMemorySetup(unsigned int)+0x206>
c0007c76:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0007c79:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0007c7c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0007c7f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007c83:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007c87:	8b 33                	mov    esi,DWORD PTR [ebx]
c0007c89:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0007c8c:	01 f0                	add    eax,esi
c0007c8e:	55                   	push   ebp
c0007c8f:	11 fa                	adc    edx,edi
c0007c91:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007c95:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0007c99:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007c9d:	50                   	push   eax
c0007c9e:	56                   	push   esi
c0007c9f:	68 a8 de 01 c0       	push   0xc001dea8
c0007ca4:	e8 a9 28 00 00       	call   c000a552 <Dbg::kprintf(char const*, ...)>
c0007ca9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0007cad:	83 c4 10             	add    esp,0x10
c0007cb0:	09 f8                	or     eax,edi
c0007cb2:	0f 85 35 01 00 00    	jne    c0007ded <Phys::physicalMemorySetup(unsigned int)+0x206>
c0007cb8:	4d                   	dec    ebp
c0007cb9:	75 a6                	jne    c0007c61 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007cbb:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0007cbf:	ba 00 00 08 00       	mov    edx,0x80000
c0007cc4:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0007cc8:	39 f2                	cmp    edx,esi
c0007cca:	89 c1                	mov    ecx,eax
c0007ccc:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0007cd4:	19 f9                	sbb    ecx,edi
c0007cd6:	0f 82 a7 00 00 00    	jb     c0007d83 <Phys::physicalMemorySetup(unsigned int)+0x19c>
c0007cdc:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0007ce0:	89 c1                	mov    ecx,eax
c0007ce2:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c0007ce6:	0f 83 97 00 00 00    	jae    c0007d83 <Phys::physicalMemorySetup(unsigned int)+0x19c>
c0007cec:	ba 00 00 0a 00       	mov    edx,0xa0000
c0007cf1:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007cf5:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0007cf9:	39 fa                	cmp    edx,edi
c0007cfb:	19 e8                	sbb    eax,ebp
c0007cfd:	0f 82 9a 01 00 00    	jb     c0007e9d <Phys::physicalMemorySetup(unsigned int)+0x2b6>
c0007d03:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007d07:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0007d0b:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c0007d11:	ba ff 1f 00 00       	mov    edx,0x1fff
c0007d16:	83 d5 ff             	adc    ebp,0xffffffff
c0007d19:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0007d1d:	31 c0                	xor    eax,eax
c0007d1f:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c0007d23:	39 fa                	cmp    edx,edi
c0007d25:	89 c1                	mov    ecx,eax
c0007d27:	19 e9                	sbb    ecx,ebp
c0007d29:	0f 83 32 ff ff ff    	jae    c0007c61 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007d2f:	be 00 00 08 00       	mov    esi,0x80000
c0007d34:	51                   	push   ecx
c0007d35:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0007d39:	57                   	push   edi
c0007d3a:	56                   	push   esi
c0007d3b:	68 cc de 01 c0       	push   0xc001decc
c0007d40:	e8 0d 28 00 00       	call   c000a552 <Dbg::kprintf(char const*, ...)>
c0007d45:	5d                   	pop    ebp
c0007d46:	58                   	pop    eax
c0007d47:	57                   	push   edi
c0007d48:	56                   	push   esi
c0007d49:	e8 61 fe ff ff       	call   c0007baf <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c0007d4e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007d52:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007d56:	83 c4 0c             	add    esp,0xc
c0007d59:	0f ac d0 0c          	shrd   eax,edx,0xc
c0007d5d:	03 05 e8 2e 02 c0    	add    eax,DWORD PTR ds:0xc0022ee8
c0007d63:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0007d6a:	a3 e8 2e 02 c0       	mov    ds:0xc0022ee8,eax
c0007d6f:	52                   	push   edx
c0007d70:	50                   	push   eax
c0007d71:	68 31 df 01 c0       	push   0xc001df31
c0007d76:	e8 d7 27 00 00       	call   c000a552 <Dbg::kprintf(char const*, ...)>
c0007d7b:	83 c4 10             	add    esp,0x10
c0007d7e:	e9 de fe ff ff       	jmp    c0007c61 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007d83:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c0007d87:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007d8b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007d8f:	39 ea                	cmp    edx,ebp
c0007d91:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c0007d95:	0f 82 c6 fe ff ff    	jb     c0007c61 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007d9b:	ba ff 1f 00 00       	mov    edx,0x1fff
c0007da0:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0007da4:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c0007da8:	0f 83 b3 fe ff ff    	jae    c0007c61 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007dae:	39 ee                	cmp    esi,ebp
c0007db0:	89 f8                	mov    eax,edi
c0007db2:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c0007db6:	0f 83 78 ff ff ff    	jae    c0007d34 <Phys::physicalMemorySetup(unsigned int)+0x14d>
c0007dbc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007dc0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007dc4:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0007dc8:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0007dcc:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c0007dd0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007dd4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007dd8:	e9 57 ff ff ff       	jmp    c0007d34 <Phys::physicalMemorySetup(unsigned int)+0x14d>
c0007ddd:	83 ec 0c             	sub    esp,0xc
c0007de0:	68 23 df 01 c0       	push   0xc001df23
c0007de5:	e8 bd 84 00 00       	call   c00102a7 <KePanic(char const*)>
c0007dea:	83 c4 10             	add    esp,0x10
c0007ded:	83 ec 08             	sub    esp,0x8
c0007df0:	bb 60 00 00 00       	mov    ebx,0x60
c0007df5:	6a 00                	push   0x0
c0007df7:	6a 06                	push   0x6
c0007df9:	e8 e2 fb ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007dfe:	58                   	pop    eax
c0007dff:	5a                   	pop    edx
c0007e00:	6a 00                	push   0x0
c0007e02:	6a 07                	push   0x7
c0007e04:	e8 d7 fb ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007e09:	83 05 e8 2e 02 c0 02 	add    DWORD PTR ds:0xc0022ee8,0x2
c0007e10:	83 c4 10             	add    esp,0x10
c0007e13:	83 ec 08             	sub    esp,0x8
c0007e16:	6a 00                	push   0x0
c0007e18:	53                   	push   ebx
c0007e19:	43                   	inc    ebx
c0007e1a:	e8 c1 fb ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007e1f:	83 c4 10             	add    esp,0x10
c0007e22:	81 fb 80 00 00 00    	cmp    ebx,0x80
c0007e28:	75 e9                	jne    c0007e13 <Phys::physicalMemorySetup(unsigned int)+0x22c>
c0007e2a:	a1 e8 2e 02 c0       	mov    eax,ds:0xc0022ee8
c0007e2f:	bb 40 01 00 00       	mov    ebx,0x140
c0007e34:	83 c0 20             	add    eax,0x20
c0007e37:	a3 e8 2e 02 c0       	mov    ds:0xc0022ee8,eax
c0007e3c:	eb 22                	jmp    c0007e60 <Phys::physicalMemorySetup(unsigned int)+0x279>
c0007e3e:	83 ec 08             	sub    esp,0x8
c0007e41:	6a 00                	push   0x0
c0007e43:	53                   	push   ebx
c0007e44:	43                   	inc    ebx
c0007e45:	e8 96 fb ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007e4a:	a1 e8 2e 02 c0       	mov    eax,ds:0xc0022ee8
c0007e4f:	83 c4 10             	add    esp,0x10
c0007e52:	40                   	inc    eax
c0007e53:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c0007e59:	a3 e8 2e 02 c0       	mov    ds:0xc0022ee8,eax
c0007e5e:	74 07                	je     c0007e67 <Phys::physicalMemorySetup(unsigned int)+0x280>
c0007e60:	3d ff 03 00 00       	cmp    eax,0x3ff
c0007e65:	7e d7                	jle    c0007e3e <Phys::physicalMemorySetup(unsigned int)+0x257>
c0007e67:	bb d0 01 00 00       	mov    ebx,0x1d0
c0007e6c:	3d ff 07 00 00       	cmp    eax,0x7ff
c0007e71:	7f 22                	jg     c0007e95 <Phys::physicalMemorySetup(unsigned int)+0x2ae>
c0007e73:	83 ec 08             	sub    esp,0x8
c0007e76:	6a 00                	push   0x0
c0007e78:	53                   	push   ebx
c0007e79:	43                   	inc    ebx
c0007e7a:	e8 61 fb ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007e7f:	a1 e8 2e 02 c0       	mov    eax,ds:0xc0022ee8
c0007e84:	83 c4 10             	add    esp,0x10
c0007e87:	40                   	inc    eax
c0007e88:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c0007e8e:	a3 e8 2e 02 c0       	mov    ds:0xc0022ee8,eax
c0007e93:	75 d7                	jne    c0007e6c <Phys::physicalMemorySetup(unsigned int)+0x285>
c0007e95:	83 c4 3c             	add    esp,0x3c
c0007e98:	5b                   	pop    ebx
c0007e99:	5e                   	pop    esi
c0007e9a:	5f                   	pop    edi
c0007e9b:	5d                   	pop    ebp
c0007e9c:	c3                   	ret    
c0007e9d:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c0007ea5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0007ead:	e9 51 fe ff ff       	jmp    c0007d03 <Phys::physicalMemorySetup(unsigned int)+0x11c>

c0007eb2 <Pipe::isAtty()>:
c0007eb2:	31 c0                	xor    eax,eax
c0007eb4:	c3                   	ret    
c0007eb5:	90                   	nop

c0007eb6 <Pipe::~Pipe()>:
c0007eb6:	83 ec 0c             	sub    esp,0xc
c0007eb9:	ba 90 df 01 c0       	mov    edx,0xc001df90
c0007ebe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007ec2:	89 10                	mov    DWORD PTR [eax],edx
c0007ec4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007ec8:	83 ec 0c             	sub    esp,0xc
c0007ecb:	50                   	push   eax
c0007ecc:	e8 63 11 00 00       	call   c0009034 <UnixFile::~UnixFile()>
c0007ed1:	83 c4 10             	add    esp,0x10
c0007ed4:	90                   	nop
c0007ed5:	83 c4 0c             	add    esp,0xc
c0007ed8:	c3                   	ret    
c0007ed9:	90                   	nop

c0007eda <Pipe::~Pipe()>:
c0007eda:	83 ec 0c             	sub    esp,0xc
c0007edd:	83 ec 0c             	sub    esp,0xc
c0007ee0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007ee4:	e8 cd ff ff ff       	call   c0007eb6 <Pipe::~Pipe()>
c0007ee9:	83 c4 10             	add    esp,0x10
c0007eec:	83 ec 08             	sub    esp,0x8
c0007eef:	6a 20                	push   0x20
c0007ef1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007ef5:	e8 62 25 00 00       	call   c000a45c <operator delete(void*, unsigned long)>
c0007efa:	83 c4 10             	add    esp,0x10
c0007efd:	83 c4 0c             	add    esp,0xc
c0007f00:	c3                   	ret    
c0007f01:	90                   	nop

c0007f02 <Pipe::write(unsigned long long, void*, int*)>:
c0007f02:	55                   	push   ebp
c0007f03:	57                   	push   edi
c0007f04:	56                   	push   esi
c0007f05:	53                   	push   ebx
c0007f06:	83 ec 1c             	sub    esp,0x1c
c0007f09:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0007f0d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0007f11:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0007f14:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007f18:	89 04 24             	mov    DWORD PTR [esp],eax
c0007f1b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007f1f:	89 d8                	mov    eax,ebx
c0007f21:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0007f24:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007f28:	89 d6                	mov    esi,edx
c0007f2a:	89 d7                	mov    edi,edx
c0007f2c:	c1 ff 1f             	sar    edi,0x1f
c0007f2f:	03 34 24             	add    esi,DWORD PTR [esp]
c0007f32:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c0007f36:	c1 f8 1f             	sar    eax,0x1f
c0007f39:	39 f3                	cmp    ebx,esi
c0007f3b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007f3f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007f43:	19 f8                	sbb    eax,edi
c0007f45:	b8 01 00 00 00       	mov    eax,0x1
c0007f4a:	72 6e                	jb     c0007fba <Pipe::write(unsigned long long, void*, int*)+0xb8>
c0007f4c:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0007f4f:	01 d0                	add    eax,edx
c0007f51:	99                   	cdq    
c0007f52:	f7 fb                	idiv   ebx
c0007f54:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007f58:	29 d3                	sub    ebx,edx
c0007f5a:	89 d7                	mov    edi,edx
c0007f5c:	89 de                	mov    esi,ebx
c0007f5e:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0007f61:	c1 fb 1f             	sar    ebx,0x1f
c0007f64:	39 f2                	cmp    edx,esi
c0007f66:	19 d8                	sbb    eax,ebx
c0007f68:	b8 00 00 00 00       	mov    eax,0x0
c0007f6d:	72 04                	jb     c0007f73 <Pipe::write(unsigned long long, void*, int*)+0x71>
c0007f6f:	89 d0                	mov    eax,edx
c0007f71:	29 f0                	sub    eax,esi
c0007f73:	89 d3                	mov    ebx,edx
c0007f75:	29 c3                	sub    ebx,eax
c0007f77:	74 0b                	je     c0007f84 <Pipe::write(unsigned long long, void*, int*)+0x82>
c0007f79:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c0007f7c:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0007f80:	89 d9                	mov    ecx,ebx
c0007f82:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0007f84:	85 c0                	test   eax,eax
c0007f86:	74 0d                	je     c0007f95 <Pipe::write(unsigned long long, void*, int*)+0x93>
c0007f88:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0007f8c:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0007f8f:	89 de                	mov    esi,ebx
c0007f91:	89 c1                	mov    ecx,eax
c0007f93:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0007f95:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c0007f98:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0007f9d:	75 10                	jne    c0007faf <Pipe::write(unsigned long long, void*, int*)+0xad>
c0007f9f:	83 ec 0c             	sub    esp,0xc
c0007fa2:	68 4d df 01 c0       	push   0xc001df4d
c0007fa7:	e8 fb 82 00 00       	call   c00102a7 <KePanic(char const*)>
c0007fac:	83 c4 10             	add    esp,0x10
c0007faf:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007fb3:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007fb6:	89 08                	mov    DWORD PTR [eax],ecx
c0007fb8:	31 c0                	xor    eax,eax
c0007fba:	83 c4 1c             	add    esp,0x1c
c0007fbd:	5b                   	pop    ebx
c0007fbe:	5e                   	pop    esi
c0007fbf:	5f                   	pop    edi
c0007fc0:	5d                   	pop    ebp
c0007fc1:	c3                   	ret    

c0007fc2 <Pipe::read(unsigned long long, void*, int*)>:
c0007fc2:	55                   	push   ebp
c0007fc3:	57                   	push   edi
c0007fc4:	56                   	push   esi
c0007fc5:	53                   	push   ebx
c0007fc6:	83 ec 1c             	sub    esp,0x1c
c0007fc9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0007fcd:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0007fd1:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0007fd5:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0007fd8:	89 c8                	mov    eax,ecx
c0007fda:	99                   	cdq    
c0007fdb:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c0007fdf:	74 24                	je     c0008005 <Pipe::read(unsigned long long, void*, int*)+0x43>
c0007fe1:	39 f9                	cmp    ecx,edi
c0007fe3:	89 d1                	mov    ecx,edx
c0007fe5:	19 f1                	sbb    ecx,esi
c0007fe7:	73 1c                	jae    c0008005 <Pipe::read(unsigned long long, void*, int*)+0x43>
c0007fe9:	fa                   	cli    
c0007fea:	ff 05 68 61 02 c0    	inc    DWORD PTR ds:0xc0026168
c0007ff0:	e8 cf b7 00 00       	call   c00137c4 <schedule()>
c0007ff5:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c0007ffa:	48                   	dec    eax
c0007ffb:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c0008000:	75 d3                	jne    c0007fd5 <Pipe::read(unsigned long long, void*, int*)+0x13>
c0008002:	fb                   	sti    
c0008003:	eb d0                	jmp    c0007fd5 <Pipe::read(unsigned long long, void*, int*)+0x13>
c0008005:	39 f8                	cmp    eax,edi
c0008007:	89 d1                	mov    ecx,edx
c0008009:	89 3c 24             	mov    DWORD PTR [esp],edi
c000800c:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0008010:	19 f1                	sbb    ecx,esi
c0008012:	73 07                	jae    c000801b <Pipe::read(unsigned long long, void*, int*)+0x59>
c0008014:	89 04 24             	mov    DWORD PTR [esp],eax
c0008017:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000801b:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c000801e:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c0008021:	29 f7                	sub    edi,esi
c0008023:	89 f8                	mov    eax,edi
c0008025:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0008029:	99                   	cdq    
c000802a:	39 3c 24             	cmp    DWORD PTR [esp],edi
c000802d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008031:	19 d0                	sbb    eax,edx
c0008033:	73 07                	jae    c000803c <Pipe::read(unsigned long long, void*, int*)+0x7a>
c0008035:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0008038:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000803c:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000803f:	89 ea                	mov    edx,ebp
c0008041:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c0008045:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000804a:	74 0d                	je     c0008059 <Pipe::read(unsigned long long, void*, int*)+0x97>
c000804c:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000804f:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0008053:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0008057:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008059:	85 d2                	test   edx,edx
c000805b:	74 11                	je     c000806e <Pipe::read(unsigned long long, void*, int*)+0xac>
c000805d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008061:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0008064:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0008068:	89 d1                	mov    ecx,edx
c000806a:	89 c7                	mov    edi,eax
c000806c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000806e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0008071:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c0008074:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c0008077:	99                   	cdq    
c0008078:	89 f7                	mov    edi,esi
c000807a:	03 04 24             	add    eax,DWORD PTR [esp]
c000807d:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c0008081:	c1 ff 1f             	sar    edi,0x1f
c0008084:	57                   	push   edi
c0008085:	56                   	push   esi
c0008086:	52                   	push   edx
c0008087:	50                   	push   eax
c0008088:	e8 53 49 01 00       	call   c001c9e0 <__umoddi3>
c000808d:	83 c4 10             	add    esp,0x10
c0008090:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008093:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0008098:	75 10                	jne    c00080aa <Pipe::read(unsigned long long, void*, int*)+0xe8>
c000809a:	83 ec 0c             	sub    esp,0xc
c000809d:	68 6a df 01 c0       	push   0xc001df6a
c00080a2:	e8 00 82 00 00       	call   c00102a7 <KePanic(char const*)>
c00080a7:	83 c4 10             	add    esp,0x10
c00080aa:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00080ae:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00080b1:	89 10                	mov    DWORD PTR [eax],edx
c00080b3:	83 c4 1c             	add    esp,0x1c
c00080b6:	31 c0                	xor    eax,eax
c00080b8:	5b                   	pop    ebx
c00080b9:	5e                   	pop    esi
c00080ba:	5f                   	pop    edi
c00080bb:	5d                   	pop    ebp
c00080bc:	c3                   	ret    
c00080bd:	90                   	nop

c00080be <Pipe::Pipe(int)>:
c00080be:	83 ec 0c             	sub    esp,0xc
c00080c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00080c5:	83 ec 08             	sub    esp,0x8
c00080c8:	6a 00                	push   0x0
c00080ca:	50                   	push   eax
c00080cb:	e8 82 0d 00 00       	call   c0008e52 <UnixFile::UnixFile(int)>
c00080d0:	83 c4 10             	add    esp,0x10
c00080d3:	ba 90 df 01 c0       	mov    edx,0xc001df90
c00080d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00080dc:	89 10                	mov    DWORD PTR [eax],edx
c00080de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00080e2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00080e6:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00080e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00080ed:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c00080f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00080f8:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c00080ff:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008103:	83 ec 0c             	sub    esp,0xc
c0008106:	50                   	push   eax
c0008107:	e8 ad f6 ff ff       	call   c00077b9 <malloc>
c000810c:	83 c4 10             	add    esp,0x10
c000810f:	89 c2                	mov    edx,eax
c0008111:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008115:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0008118:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000811c:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c0008120:	90                   	nop
c0008121:	83 c4 0c             	add    esp,0xc
c0008124:	c3                   	ret    
c0008125:	90                   	nop

c0008126 <VgaText::isAtty()>:
c0008126:	b0 01                	mov    al,0x1
c0008128:	c3                   	ret    
c0008129:	90                   	nop

c000812a <VgaText::~VgaText()>:
c000812a:	83 ec 0c             	sub    esp,0xc
c000812d:	ba d8 df 01 c0       	mov    edx,0xc001dfd8
c0008132:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008136:	89 10                	mov    DWORD PTR [eax],edx
c0008138:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000813c:	83 ec 0c             	sub    esp,0xc
c000813f:	50                   	push   eax
c0008140:	e8 ef 0e 00 00       	call   c0009034 <UnixFile::~UnixFile()>
c0008145:	83 c4 10             	add    esp,0x10
c0008148:	90                   	nop
c0008149:	83 c4 0c             	add    esp,0xc
c000814c:	c3                   	ret    
c000814d:	90                   	nop

c000814e <VgaText::~VgaText()>:
c000814e:	83 ec 0c             	sub    esp,0xc
c0008151:	83 ec 0c             	sub    esp,0xc
c0008154:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008158:	e8 cd ff ff ff       	call   c000812a <VgaText::~VgaText()>
c000815d:	83 c4 10             	add    esp,0x10
c0008160:	83 ec 08             	sub    esp,0x8
c0008163:	68 84 01 00 00       	push   0x184
c0008168:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000816c:	e8 eb 22 00 00       	call   c000a45c <operator delete(void*, unsigned long)>
c0008171:	83 c4 10             	add    esp,0x10
c0008174:	83 c4 0c             	add    esp,0xc
c0008177:	c3                   	ret    

c0008178 <VgaText::read(unsigned long long, void*, int*)>:
c0008178:	83 ec 10             	sub    esp,0x10
c000817b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000817f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008183:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008187:	e8 70 46 00 00       	call   c000c7fc <readKeyboard(VgaText*, char*, unsigned long)>
c000818c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0008190:	89 02                	mov    DWORD PTR [edx],eax
c0008192:	31 c0                	xor    eax,eax
c0008194:	83 c4 1c             	add    esp,0x1c
c0008197:	c3                   	ret    

c0008198 <setTerminalScrollLock(bool)>:
c0008198:	c3                   	ret    

c0008199 <doTerminalCycle()>:
c0008199:	c3                   	ret    

c000819a <addToTerminalCycle(VgaText*)>:
c000819a:	c3                   	ret    

c000819b <scrollTerminalScrollLock(int)>:
c000819b:	c3                   	ret    

c000819c <VgaText::updateTitle()>:
c000819c:	c3                   	ret    
c000819d:	90                   	nop

c000819e <VgaText::load()>:
c000819e:	c3                   	ret    
c000819f:	90                   	nop

c00081a0 <VgaText::updateCursor()>:
c00081a0:	83 ec 14             	sub    esp,0x14
c00081a3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00081a7:	ff 70 18             	push   DWORD PTR [eax+0x18]
c00081aa:	ff 70 14             	push   DWORD PTR [eax+0x14]
c00081ad:	e8 ee e1 00 00       	call   c00163a0 <HalConsoleCursorUpdate(int, int)>
c00081b2:	83 c4 1c             	add    esp,0x1c
c00081b5:	c3                   	ret    

c00081b6 <VgaText::doANSI_SGR(int)>:
c00081b6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00081ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00081be:	85 d2                	test   edx,edx
c00081c0:	75 0b                	jne    c00081cd <VgaText::doANSI_SGR(int)+0x17>
c00081c2:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c00081c5:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00081c8:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c00081cb:	eb 59                	jmp    c0008226 <VgaText::doANSI_SGR(int)+0x70>
c00081cd:	83 fa 07             	cmp    edx,0x7
c00081d0:	75 0b                	jne    c00081dd <VgaText::doANSI_SGR(int)+0x27>
c00081d2:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c00081d5:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c00081d8:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c00081db:	eb 49                	jmp    c0008226 <VgaText::doANSI_SGR(int)+0x70>
c00081dd:	83 fa 1b             	cmp    edx,0x1b
c00081e0:	74 e0                	je     c00081c2 <VgaText::doANSI_SGR(int)+0xc>
c00081e2:	8d 4a e2             	lea    ecx,[edx-0x1e]
c00081e5:	83 f9 07             	cmp    ecx,0x7
c00081e8:	77 09                	ja     c00081f3 <VgaText::doANSI_SGR(int)+0x3d>
c00081ea:	8b 14 8d e0 fe 01 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffe0120]
c00081f1:	eb 20                	jmp    c0008213 <VgaText::doANSI_SGR(int)+0x5d>
c00081f3:	8d 4a d8             	lea    ecx,[edx-0x28]
c00081f6:	83 f9 07             	cmp    ecx,0x7
c00081f9:	77 09                	ja     c0008204 <VgaText::doANSI_SGR(int)+0x4e>
c00081fb:	8b 14 8d e0 fe 01 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffe0120]
c0008202:	eb 22                	jmp    c0008226 <VgaText::doANSI_SGR(int)+0x70>
c0008204:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0008207:	83 f9 07             	cmp    ecx,0x7
c000820a:	77 0b                	ja     c0008217 <VgaText::doANSI_SGR(int)+0x61>
c000820c:	8b 14 95 98 fd 01 c0 	mov    edx,DWORD PTR [edx*4-0x3ffe0268]
c0008213:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008216:	c3                   	ret    
c0008217:	8d 4a 9c             	lea    ecx,[edx-0x64]
c000821a:	83 f9 07             	cmp    ecx,0x7
c000821d:	77 0a                	ja     c0008229 <VgaText::doANSI_SGR(int)+0x73>
c000821f:	8b 14 95 70 fd 01 c0 	mov    edx,DWORD PTR [edx*4-0x3ffe0290]
c0008226:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0008229:	c3                   	ret    

c000822a <VgaText::setDefaultBgColour(VgaColour)>:
c000822a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000822e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008232:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0008235:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0008238:	c3                   	ret    
c0008239:	90                   	nop

c000823a <VgaText::setDefaultFgColour(VgaColour)>:
c000823a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000823e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008242:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0008245:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008248:	c3                   	ret    
c0008249:	90                   	nop

c000824a <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c000824a:	53                   	push   ebx
c000824b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000824f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0008253:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0008257:	51                   	push   ecx
c0008258:	e8 cd ff ff ff       	call   c000822a <VgaText::setDefaultBgColour(VgaColour)>
c000825d:	58                   	pop    eax
c000825e:	5a                   	pop    edx
c000825f:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0008263:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0008267:	5b                   	pop    ebx
c0008268:	eb d0                	jmp    c000823a <VgaText::setDefaultFgColour(VgaColour)>

c000826a <VgaText::setTitleTextColour(VgaColour)>:
c000826a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000826e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008272:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0008275:	c3                   	ret    

c0008276 <VgaText::setTitleColour(VgaColour)>:
c0008276:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000827a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000827e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0008281:	c3                   	ret    

c0008282 <VgaText::setTitle(char*)>:
c0008282:	c3                   	ret    
c0008283:	90                   	nop

c0008284 <VgaText::combineColours(unsigned char, unsigned char)>:
c0008284:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0008288:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c000828d:	83 e0 0f             	and    eax,0xf
c0008290:	c1 e2 04             	shl    edx,0x4
c0008293:	09 d0                	or     eax,edx
c0008295:	c3                   	ret    

c0008296 <VgaText::scrollScreen()>:
c0008296:	55                   	push   ebp
c0008297:	b9 01 00 00 00       	mov    ecx,0x1
c000829c:	57                   	push   edi
c000829d:	56                   	push   esi
c000829e:	53                   	push   ebx
c000829f:	83 ec 0c             	sub    esp,0xc
c00082a2:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00082a6:	69 f1 a0 00 00 00    	imul   esi,ecx,0xa0
c00082ac:	31 ff                	xor    edi,edi
c00082ae:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00082b1:	83 f9 18             	cmp    ecx,0x18
c00082b4:	8a 14 30             	mov    dl,BYTE PTR [eax+esi*1]
c00082b7:	88 94 30 60 ff ff ff 	mov    BYTE PTR [eax+esi*1-0xa0],dl
c00082be:	75 27                	jne    c00082e7 <VgaText::scrollScreen()+0x51>
c00082c0:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c00082c3:	01 f5                	add    ebp,esi
c00082c5:	f7 c7 01 00 00 00    	test   edi,0x1
c00082cb:	74 16                	je     c00082e3 <VgaText::scrollScreen()+0x4d>
c00082cd:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c00082d1:	50                   	push   eax
c00082d2:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c00082d6:	50                   	push   eax
c00082d7:	e8 a8 ff ff ff       	call   c0008284 <VgaText::combineColours(unsigned char, unsigned char)>
c00082dc:	5a                   	pop    edx
c00082dd:	5a                   	pop    edx
c00082de:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c00082e1:	eb 04                	jmp    c00082e7 <VgaText::scrollScreen()+0x51>
c00082e3:	c6 45 00 20          	mov    BYTE PTR [ebp+0x0],0x20
c00082e7:	47                   	inc    edi
c00082e8:	46                   	inc    esi
c00082e9:	81 ff a0 00 00 00    	cmp    edi,0xa0
c00082ef:	75 bd                	jne    c00082ae <VgaText::scrollScreen()+0x18>
c00082f1:	41                   	inc    ecx
c00082f2:	83 f9 19             	cmp    ecx,0x19
c00082f5:	75 af                	jne    c00082a6 <VgaText::scrollScreen()+0x10>
c00082f7:	39 1d 04 2f 02 c0    	cmp    DWORD PTR ds:0xc0022f04,ebx
c00082fd:	75 1f                	jne    c000831e <VgaText::scrollScreen()+0x88>
c00082ff:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0008303:	74 05                	je     c000830a <VgaText::scrollScreen()+0x74>
c0008305:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c0008308:	eb 14                	jmp    c000831e <VgaText::scrollScreen()+0x88>
c000830a:	50                   	push   eax
c000830b:	50                   	push   eax
c000830c:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0008310:	50                   	push   eax
c0008311:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0008315:	50                   	push   eax
c0008316:	e8 11 df 00 00       	call   c001622c <HalConsoleScroll(int, int)>
c000831b:	83 c4 10             	add    esp,0x10
c000831e:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0008322:	83 c4 0c             	add    esp,0xc
c0008325:	5b                   	pop    ebx
c0008326:	5e                   	pop    esi
c0008327:	5f                   	pop    edi
c0008328:	5d                   	pop    ebp
c0008329:	e9 72 fe ff ff       	jmp    c00081a0 <VgaText::updateCursor()>

c000832e <VgaText::combineCharAndColour(char, unsigned char)>:
c000832e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0008333:	c1 e0 08             	shl    eax,0x8
c0008336:	89 c2                	mov    edx,eax
c0008338:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000833d:	09 d0                	or     eax,edx
c000833f:	c3                   	ret    

c0008340 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c0008340:	55                   	push   ebp
c0008341:	57                   	push   edi
c0008342:	56                   	push   esi
c0008343:	53                   	push   ebx
c0008344:	83 ec 1c             	sub    esp,0x1c
c0008347:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000834b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000834f:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0008353:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008357:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000835b:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000835f:	0f b6 c3             	movzx  eax,bl
c0008362:	50                   	push   eax
c0008363:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0008368:	50                   	push   eax
c0008369:	e8 16 ff ff ff       	call   c0008284 <VgaText::combineColours(unsigned char, unsigned char)>
c000836e:	5a                   	pop    edx
c000836f:	0f b6 c0             	movzx  eax,al
c0008372:	59                   	pop    ecx
c0008373:	0f be 4c 24 34       	movsx  ecx,BYTE PTR [esp+0x34]
c0008378:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000837c:	50                   	push   eax
c000837d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008381:	e8 a8 ff ff ff       	call   c000832e <VgaText::combineCharAndColour(char, unsigned char)>
c0008386:	5a                   	pop    edx
c0008387:	66 6b d7 50          	imul   dx,di,0x50
c000838b:	59                   	pop    ecx
c000838c:	01 f2                	add    edx,esi
c000838e:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0008391:	0f b7 d2             	movzx  edx,dx
c0008394:	66 89 04 51          	mov    WORD PTR [ecx+edx*2],ax
c0008398:	39 2d 04 2f 02 c0    	cmp    DWORD PTR ds:0xc0022f04,ebp
c000839e:	75 28                	jne    c00083c8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x88>
c00083a0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00083a4:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c00083a8:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
c00083ac:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c00083b0:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00083b4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00083b8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00083bc:	83 c4 1c             	add    esp,0x1c
c00083bf:	5b                   	pop    ebx
c00083c0:	5e                   	pop    esi
c00083c1:	5f                   	pop    edi
c00083c2:	5d                   	pop    ebp
c00083c3:	e9 6c df 00 00       	jmp    c0016334 <HalConsoleWriteCharacter(char, int, int, int, int)>
c00083c8:	83 c4 1c             	add    esp,0x1c
c00083cb:	5b                   	pop    ebx
c00083cc:	5e                   	pop    esi
c00083cd:	5f                   	pop    edi
c00083ce:	5d                   	pop    ebp
c00083cf:	c3                   	ret    

c00083d0 <VgaText::getCursorX()>:
c00083d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00083d4:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00083d7:	c3                   	ret    

c00083d8 <VgaText::getCursorY()>:
c00083d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00083dc:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00083df:	c3                   	ret    

c00083e0 <VgaText::setCursor(int, int)>:
c00083e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00083e4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00083e8:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00083eb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00083ef:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00083f2:	e9 a9 fd ff ff       	jmp    c00081a0 <VgaText::updateCursor()>

c00083f7 <setActiveTerminal(VgaText*)>:
c00083f7:	53                   	push   ebx
c00083f8:	83 ec 08             	sub    esp,0x8
c00083fb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00083ff:	85 db                	test   ebx,ebx
c0008401:	75 11                	jne    c0008414 <setActiveTerminal(VgaText*)+0x1d>
c0008403:	c7 44 24 10 a4 df 01 c0 	mov    DWORD PTR [esp+0x10],0xc001dfa4
c000840b:	83 c4 08             	add    esp,0x8
c000840e:	5b                   	pop    ebx
c000840f:	e9 93 7e 00 00       	jmp    c00102a7 <KePanic(char const*)>
c0008414:	a1 04 2f 02 c0       	mov    eax,ds:0xc0022f04
c0008419:	85 c0                	test   eax,eax
c000841b:	74 0c                	je     c0008429 <setActiveTerminal(VgaText*)+0x32>
c000841d:	83 ec 0c             	sub    esp,0xc
c0008420:	50                   	push   eax
c0008421:	e8 7a fd ff ff       	call   c00081a0 <VgaText::updateCursor()>
c0008426:	83 c4 10             	add    esp,0x10
c0008429:	89 1d 04 2f 02 c0    	mov    DWORD PTR ds:0xc0022f04,ebx
c000842f:	50                   	push   eax
c0008430:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008433:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008436:	53                   	push   ebx
c0008437:	e8 a4 ff ff ff       	call   c00083e0 <VgaText::setCursor(int, int)>
c000843c:	83 c4 18             	add    esp,0x18
c000843f:	5b                   	pop    ebx
c0008440:	c3                   	ret    
c0008441:	90                   	nop

c0008442 <VgaText::clearScreen()>:
c0008442:	57                   	push   edi
c0008443:	56                   	push   esi
c0008444:	31 f6                	xor    esi,esi
c0008446:	53                   	push   ebx
c0008447:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000844b:	52                   	push   edx
c000844c:	6a 00                	push   0x0
c000844e:	6a 00                	push   0x0
c0008450:	53                   	push   ebx
c0008451:	e8 8a ff ff ff       	call   c00083e0 <VgaText::setCursor(int, int)>
c0008456:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c000845d:	83 c4 10             	add    esp,0x10
c0008460:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c0008463:	7e 20                	jle    c0008485 <VgaText::clearScreen()+0x43>
c0008465:	31 ff                	xor    edi,edi
c0008467:	50                   	push   eax
c0008468:	50                   	push   eax
c0008469:	56                   	push   esi
c000846a:	57                   	push   edi
c000846b:	47                   	inc    edi
c000846c:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000846f:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008472:	6a 20                	push   0x20
c0008474:	53                   	push   ebx
c0008475:	e8 c6 fe ff ff       	call   c0008340 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000847a:	83 c4 20             	add    esp,0x20
c000847d:	83 ff 50             	cmp    edi,0x50
c0008480:	75 e5                	jne    c0008467 <VgaText::clearScreen()+0x25>
c0008482:	46                   	inc    esi
c0008483:	eb db                	jmp    c0008460 <VgaText::clearScreen()+0x1e>
c0008485:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c000848c:	5b                   	pop    ebx
c000848d:	5e                   	pop    esi
c000848e:	5f                   	pop    edi
c000848f:	c3                   	ret    

c0008490 <VgaText::setCursorX(int)>:
c0008490:	83 ec 10             	sub    esp,0x10
c0008493:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008497:	ff 70 18             	push   DWORD PTR [eax+0x18]
c000849a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000849e:	50                   	push   eax
c000849f:	e8 3c ff ff ff       	call   c00083e0 <VgaText::setCursor(int, int)>
c00084a4:	83 c4 1c             	add    esp,0x1c
c00084a7:	c3                   	ret    

c00084a8 <VgaText::setCursorY(int)>:
c00084a8:	83 ec 10             	sub    esp,0x10
c00084ab:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00084af:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00084b3:	ff 70 14             	push   DWORD PTR [eax+0x14]
c00084b6:	50                   	push   eax
c00084b7:	e8 24 ff ff ff       	call   c00083e0 <VgaText::setCursor(int, int)>
c00084bc:	83 c4 1c             	add    esp,0x1c
c00084bf:	c3                   	ret    

c00084c0 <VgaText::incrementCursor(bool)>:
c00084c0:	56                   	push   esi
c00084c1:	53                   	push   ebx
c00084c2:	51                   	push   ecx
c00084c3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00084c7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00084cb:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00084ce:	40                   	inc    eax
c00084cf:	83 f8 50             	cmp    eax,0x50
c00084d2:	74 05                	je     c00084d9 <VgaText::incrementCursor(bool)+0x19>
c00084d4:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00084d7:	eb 24                	jmp    c00084fd <VgaText::incrementCursor(bool)+0x3d>
c00084d9:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00084dc:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00084e3:	8d 50 01             	lea    edx,[eax+0x1]
c00084e6:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00084e9:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c00084ec:	75 0f                	jne    c00084fd <VgaText::incrementCursor(bool)+0x3d>
c00084ee:	83 ec 0c             	sub    esp,0xc
c00084f1:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00084f4:	53                   	push   ebx
c00084f5:	e8 9c fd ff ff       	call   c0008296 <VgaText::scrollScreen()>
c00084fa:	83 c4 10             	add    esp,0x10
c00084fd:	89 f0                	mov    eax,esi
c00084ff:	84 c0                	test   al,al
c0008501:	74 0c                	je     c000850f <VgaText::incrementCursor(bool)+0x4f>
c0008503:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008507:	5a                   	pop    edx
c0008508:	5b                   	pop    ebx
c0008509:	5e                   	pop    esi
c000850a:	e9 91 fc ff ff       	jmp    c00081a0 <VgaText::updateCursor()>
c000850f:	58                   	pop    eax
c0008510:	5b                   	pop    ebx
c0008511:	5e                   	pop    esi
c0008512:	c3                   	ret    
c0008513:	90                   	nop

c0008514 <VgaText::decrementCursor(bool)>:
c0008514:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008518:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000851c:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c000851f:	85 c0                	test   eax,eax
c0008521:	74 04                	je     c0008527 <VgaText::decrementCursor(bool)+0x13>
c0008523:	48                   	dec    eax
c0008524:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0008527:	84 c9                	test   cl,cl
c0008529:	74 09                	je     c0008534 <VgaText::decrementCursor(bool)+0x20>
c000852b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000852f:	e9 6c fc ff ff       	jmp    c00081a0 <VgaText::updateCursor()>
c0008534:	c3                   	ret    
c0008535:	90                   	nop

c0008536 <VgaText::putchar(char, VgaColour, VgaColour)>:
c0008536:	53                   	push   ebx
c0008537:	83 ec 08             	sub    esp,0x8
c000853a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000853e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008542:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0008546:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000854a:	3c 07                	cmp    al,0x7
c000854c:	75 21                	jne    c000856f <VgaText::putchar(char, VgaColour, VgaColour)+0x39>
c000854e:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0008556:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c000855e:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c0008566:	83 c4 08             	add    esp,0x8
c0008569:	5b                   	pop    ebx
c000856a:	e9 84 2e 00 00       	jmp    c000b3f3 <Krnl::beep(int, int, bool)>
c000856f:	3c 0d                	cmp    al,0xd
c0008571:	75 09                	jne    c000857c <VgaText::putchar(char, VgaColour, VgaColour)+0x46>
c0008573:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000857a:	eb 2c                	jmp    c00085a8 <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c000857c:	3c 0a                	cmp    al,0xa
c000857e:	75 31                	jne    c00085b1 <VgaText::putchar(char, VgaColour, VgaColour)+0x7b>
c0008580:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008583:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000858a:	8d 50 01             	lea    edx,[eax+0x1]
c000858d:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0008590:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0008593:	75 0f                	jne    c00085a4 <VgaText::putchar(char, VgaColour, VgaColour)+0x6e>
c0008595:	83 ec 0c             	sub    esp,0xc
c0008598:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000859b:	53                   	push   ebx
c000859c:	e8 f5 fc ff ff       	call   c0008296 <VgaText::scrollScreen()>
c00085a1:	83 c4 10             	add    esp,0x10
c00085a4:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00085a8:	83 c4 08             	add    esp,0x8
c00085ab:	5b                   	pop    ebx
c00085ac:	e9 ef fb ff ff       	jmp    c00081a0 <VgaText::updateCursor()>
c00085b1:	3c 08                	cmp    al,0x8
c00085b3:	75 25                	jne    c00085da <VgaText::putchar(char, VgaColour, VgaColour)+0xa4>
c00085b5:	50                   	push   eax
c00085b6:	50                   	push   eax
c00085b7:	6a 01                	push   0x1
c00085b9:	53                   	push   ebx
c00085ba:	e8 55 ff ff ff       	call   c0008514 <VgaText::decrementCursor(bool)>
c00085bf:	5a                   	pop    edx
c00085c0:	59                   	pop    ecx
c00085c1:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00085c4:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00085c7:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00085ca:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00085cd:	6a 20                	push   0x20
c00085cf:	53                   	push   ebx
c00085d0:	e8 6b fd ff ff       	call   c0008340 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00085d5:	83 c4 28             	add    esp,0x28
c00085d8:	5b                   	pop    ebx
c00085d9:	c3                   	ret    
c00085da:	83 ec 08             	sub    esp,0x8
c00085dd:	0f be c0             	movsx  eax,al
c00085e0:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00085e3:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00085e6:	51                   	push   ecx
c00085e7:	52                   	push   edx
c00085e8:	50                   	push   eax
c00085e9:	53                   	push   ebx
c00085ea:	e8 51 fd ff ff       	call   c0008340 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00085ef:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c00085f3:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c00085fb:	83 c4 28             	add    esp,0x28
c00085fe:	5b                   	pop    ebx
c00085ff:	e9 bc fe ff ff       	jmp    c00084c0 <VgaText::incrementCursor(bool)>

c0008604 <VgaText::putchar(char)>:
c0008604:	56                   	push   esi
c0008605:	53                   	push   ebx
c0008606:	83 ec 14             	sub    esp,0x14
c0008609:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000860d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008611:	3c 5b                	cmp    al,0x5b
c0008613:	75 18                	jne    c000862d <VgaText::putchar(char)+0x29>
c0008615:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c0008619:	74 1f                	je     c000863a <VgaText::putchar(char)+0x36>
c000861b:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c0008621:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c0008628:	e9 bd 00 00 00       	jmp    c00086ea <VgaText::putchar(char)+0xe6>
c000862d:	3c 1b                	cmp    al,0x1b
c000862f:	75 09                	jne    c000863a <VgaText::putchar(char)+0x36>
c0008631:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c0008635:	e9 b0 00 00 00       	jmp    c00086ea <VgaText::putchar(char)+0xe6>
c000863a:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c000863d:	84 c9                	test   cl,cl
c000863f:	0f 84 92 00 00 00    	je     c00086d7 <VgaText::putchar(char)+0xd3>
c0008645:	8d 50 c0             	lea    edx,[eax-0x40]
c0008648:	80 fa 3e             	cmp    dl,0x3e
c000864b:	77 76                	ja     c00086c3 <VgaText::putchar(char)+0xbf>
c000864d:	3c 6d                	cmp    al,0x6d
c000864f:	75 47                	jne    c0008698 <VgaText::putchar(char)+0x94>
c0008651:	31 f6                	xor    esi,esi
c0008653:	31 d2                	xor    edx,edx
c0008655:	31 c0                	xor    eax,eax
c0008657:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c000865a:	7e 2d                	jle    c0008689 <VgaText::putchar(char)+0x85>
c000865c:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c0008661:	80 fa 3b             	cmp    dl,0x3b
c0008664:	75 17                	jne    c000867d <VgaText::putchar(char)+0x79>
c0008666:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c000866a:	50                   	push   eax
c000866b:	53                   	push   ebx
c000866c:	e8 45 fb ff ff       	call   c00081b6 <VgaText::doANSI_SGR(int)>
c0008671:	59                   	pop    ecx
c0008672:	31 d2                	xor    edx,edx
c0008674:	58                   	pop    eax
c0008675:	31 c0                	xor    eax,eax
c0008677:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c000867b:	eb 09                	jmp    c0008686 <VgaText::putchar(char)+0x82>
c000867d:	6b c0 0a             	imul   eax,eax,0xa
c0008680:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c0008684:	88 ca                	mov    dl,cl
c0008686:	46                   	inc    esi
c0008687:	eb ce                	jmp    c0008657 <VgaText::putchar(char)+0x53>
c0008689:	84 d2                	test   dl,dl
c000868b:	74 2e                	je     c00086bb <VgaText::putchar(char)+0xb7>
c000868d:	50                   	push   eax
c000868e:	53                   	push   ebx
c000868f:	e8 22 fb ff ff       	call   c00081b6 <VgaText::doANSI_SGR(int)>
c0008694:	58                   	pop    eax
c0008695:	5a                   	pop    edx
c0008696:	eb 23                	jmp    c00086bb <VgaText::putchar(char)+0xb7>
c0008698:	3c 4a                	cmp    al,0x4a
c000869a:	75 1f                	jne    c00086bb <VgaText::putchar(char)+0xb7>
c000869c:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c00086a0:	75 19                	jne    c00086bb <VgaText::putchar(char)+0xb7>
c00086a2:	83 ec 0c             	sub    esp,0xc
c00086a5:	53                   	push   ebx
c00086a6:	e8 97 fd ff ff       	call   c0008442 <VgaText::clearScreen()>
c00086ab:	83 c4 0c             	add    esp,0xc
c00086ae:	6a 00                	push   0x0
c00086b0:	6a 00                	push   0x0
c00086b2:	53                   	push   ebx
c00086b3:	e8 28 fd ff ff       	call   c00083e0 <VgaText::setCursor(int, int)>
c00086b8:	83 c4 10             	add    esp,0x10
c00086bb:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c00086c1:	eb 27                	jmp    c00086ea <VgaText::putchar(char)+0xe6>
c00086c3:	8b 53 54             	mov    edx,DWORD PTR [ebx+0x54]
c00086c6:	83 fa 0e             	cmp    edx,0xe
c00086c9:	7f 1f                	jg     c00086ea <VgaText::putchar(char)+0xe6>
c00086cb:	8d 4a 01             	lea    ecx,[edx+0x1]
c00086ce:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c00086d1:	88 44 13 42          	mov    BYTE PTR [ebx+edx*1+0x42],al
c00086d5:	eb 13                	jmp    c00086ea <VgaText::putchar(char)+0xe6>
c00086d7:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00086da:	0f be c0             	movsx  eax,al
c00086dd:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00086e0:	50                   	push   eax
c00086e1:	53                   	push   ebx
c00086e2:	e8 4f fe ff ff       	call   c0008536 <VgaText::putchar(char, VgaColour, VgaColour)>
c00086e7:	83 c4 10             	add    esp,0x10
c00086ea:	83 c4 14             	add    esp,0x14
c00086ed:	5b                   	pop    ebx
c00086ee:	5e                   	pop    esi
c00086ef:	c3                   	ret    

c00086f0 <VgaText::putx(unsigned int)>:
c00086f0:	57                   	push   edi
c00086f1:	b9 11 00 00 00       	mov    ecx,0x11
c00086f6:	56                   	push   esi
c00086f7:	be b2 df 01 c0       	mov    esi,0xc001dfb2
c00086fc:	53                   	push   ebx
c00086fd:	83 ec 20             	sub    esp,0x20
c0008700:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0008704:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0008708:	fc                   	cld    
c0008709:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000870b:	be 08 00 00 00       	mov    esi,0x8
c0008710:	50                   	push   eax
c0008711:	50                   	push   eax
c0008712:	89 d8                	mov    eax,ebx
c0008714:	c1 e3 04             	shl    ebx,0x4
c0008717:	c1 e8 1c             	shr    eax,0x1c
c000871a:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c000871f:	50                   	push   eax
c0008720:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0008724:	e8 db fe ff ff       	call   c0008604 <VgaText::putchar(char)>
c0008729:	83 c4 10             	add    esp,0x10
c000872c:	4e                   	dec    esi
c000872d:	75 e1                	jne    c0008710 <VgaText::putx(unsigned int)+0x20>
c000872f:	83 c4 20             	add    esp,0x20
c0008732:	5b                   	pop    ebx
c0008733:	5e                   	pop    esi
c0008734:	5f                   	pop    edi
c0008735:	c3                   	ret    

c0008736 <VgaText::puts(char const*)>:
c0008736:	53                   	push   ebx
c0008737:	83 ec 08             	sub    esp,0x8
c000873a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000873e:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0008741:	84 c0                	test   al,al
c0008743:	74 12                	je     c0008757 <VgaText::puts(char const*)+0x21>
c0008745:	43                   	inc    ebx
c0008746:	51                   	push   ecx
c0008747:	51                   	push   ecx
c0008748:	50                   	push   eax
c0008749:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000874d:	e8 b2 fe ff ff       	call   c0008604 <VgaText::putchar(char)>
c0008752:	83 c4 10             	add    esp,0x10
c0008755:	eb e7                	jmp    c000873e <VgaText::puts(char const*)+0x8>
c0008757:	83 c4 08             	add    esp,0x8
c000875a:	5b                   	pop    ebx
c000875b:	c3                   	ret    

c000875c <VgaText::write(unsigned long long, void*, int*)>:
c000875c:	55                   	push   ebp
c000875d:	57                   	push   edi
c000875e:	56                   	push   esi
c000875f:	53                   	push   ebx
c0008760:	83 ec 0c             	sub    esp,0xc
c0008763:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0008767:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000876b:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000876f:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0008776:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0008779:	39 eb                	cmp    ebx,ebp
c000877b:	74 13                	je     c0008790 <VgaText::write(unsigned long long, void*, int*)+0x34>
c000877d:	43                   	inc    ebx
c000877e:	50                   	push   eax
c000877f:	50                   	push   eax
c0008780:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0008784:	50                   	push   eax
c0008785:	56                   	push   esi
c0008786:	e8 79 fe ff ff       	call   c0008604 <VgaText::putchar(char)>
c000878b:	83 c4 10             	add    esp,0x10
c000878e:	eb e9                	jmp    c0008779 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0008790:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0008797:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000879b:	89 38                	mov    DWORD PTR [eax],edi
c000879d:	83 c4 0c             	add    esp,0xc
c00087a0:	31 c0                	xor    eax,eax
c00087a2:	5b                   	pop    ebx
c00087a3:	5e                   	pop    esi
c00087a4:	5f                   	pop    edi
c00087a5:	5d                   	pop    ebp
c00087a6:	c3                   	ret    
c00087a7:	90                   	nop

c00087a8 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c00087a8:	55                   	push   ebp
c00087a9:	57                   	push   edi
c00087aa:	56                   	push   esi
c00087ab:	53                   	push   ebx
c00087ac:	83 ec 0c             	sub    esp,0xc
c00087af:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00087b3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00087b8:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c00087bf:	50                   	push   eax
c00087c0:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00087c5:	50                   	push   eax
c00087c6:	e8 b9 fa ff ff       	call   c0008284 <VgaText::combineColours(unsigned char, unsigned char)>
c00087cb:	5a                   	pop    edx
c00087cc:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c00087d1:	59                   	pop    ecx
c00087d2:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c00087d5:	89 c5                	mov    ebp,eax
c00087d7:	0f b7 f6             	movzx  esi,si
c00087da:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00087de:	01 f6                	add    esi,esi
c00087e0:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00087e3:	0f be 07             	movsx  eax,BYTE PTR [edi]
c00087e6:	84 c0                	test   al,al
c00087e8:	0f 84 f4 00 00 00    	je     c00088e2 <VgaText::puts(char const*, VgaColour, VgaColour)+0x13a>
c00087ee:	3c 0d                	cmp    al,0xd
c00087f0:	75 0c                	jne    c00087fe <VgaText::puts(char const*, VgaColour, VgaColour)+0x56>
c00087f2:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00087f9:	e9 de 00 00 00       	jmp    c00088dc <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c00087fe:	3c 0a                	cmp    al,0xa
c0008800:	75 45                	jne    c0008847 <VgaText::puts(char const*, VgaColour, VgaColour)+0x9f>
c0008802:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008805:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000880c:	8d 48 01             	lea    ecx,[eax+0x1]
c000880f:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0008812:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c0008815:	75 0f                	jne    c0008826 <VgaText::puts(char const*, VgaColour, VgaColour)+0x7e>
c0008817:	83 ec 0c             	sub    esp,0xc
c000881a:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000881d:	53                   	push   ebx
c000881e:	e8 73 fa ff ff       	call   c0008296 <VgaText::scrollScreen()>
c0008823:	83 c4 10             	add    esp,0x10
c0008826:	83 ec 0c             	sub    esp,0xc
c0008829:	53                   	push   ebx
c000882a:	e8 71 f9 ff ff       	call   c00081a0 <VgaText::updateCursor()>
c000882f:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0008834:	83 c4 10             	add    esp,0x10
c0008837:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000883a:	0f b7 f6             	movzx  esi,si
c000883d:	01 f6                	add    esi,esi
c000883f:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008842:	e9 95 00 00 00       	jmp    c00088dc <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c0008847:	3c 08                	cmp    al,0x8
c0008849:	75 35                	jne    c0008880 <VgaText::puts(char const*, VgaColour, VgaColour)+0xd8>
c000884b:	51                   	push   ecx
c000884c:	51                   	push   ecx
c000884d:	6a 01                	push   0x1
c000884f:	53                   	push   ebx
c0008850:	e8 bf fc ff ff       	call   c0008514 <VgaText::decrementCursor(bool)>
c0008855:	5e                   	pop    esi
c0008856:	58                   	pop    eax
c0008857:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000885a:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000885d:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008860:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008863:	6a 20                	push   0x20
c0008865:	53                   	push   ebx
c0008866:	e8 d5 fa ff ff       	call   c0008340 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000886b:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0008870:	83 c4 20             	add    esp,0x20
c0008873:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008876:	0f b7 f6             	movzx  esi,si
c0008879:	01 f6                	add    esi,esi
c000887b:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000887e:	eb 5c                	jmp    c00088dc <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c0008880:	52                   	push   edx
c0008881:	52                   	push   edx
c0008882:	89 ea                	mov    edx,ebp
c0008884:	0f b6 ca             	movzx  ecx,dl
c0008887:	51                   	push   ecx
c0008888:	50                   	push   eax
c0008889:	e8 a0 fa ff ff       	call   c000832e <VgaText::combineCharAndColour(char, unsigned char)>
c000888e:	83 c4 10             	add    esp,0x10
c0008891:	66 89 06             	mov    WORD PTR [esi],ax
c0008894:	39 1d 04 2f 02 c0    	cmp    DWORD PTR ds:0xc0022f04,ebx
c000889a:	75 1d                	jne    c00088b9 <VgaText::puts(char const*, VgaColour, VgaColour)+0x111>
c000889c:	83 ec 0c             	sub    esp,0xc
c000889f:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00088a2:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00088a5:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00088a9:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00088ad:	0f be 07             	movsx  eax,BYTE PTR [edi]
c00088b0:	50                   	push   eax
c00088b1:	e8 7e da 00 00       	call   c0016334 <HalConsoleWriteCharacter(char, int, int, int, int)>
c00088b6:	83 c4 20             	add    esp,0x20
c00088b9:	83 c6 02             	add    esi,0x2
c00088bc:	50                   	push   eax
c00088bd:	50                   	push   eax
c00088be:	6a 00                	push   0x0
c00088c0:	53                   	push   ebx
c00088c1:	e8 fa fb ff ff       	call   c00084c0 <VgaText::incrementCursor(bool)>
c00088c6:	83 c4 10             	add    esp,0x10
c00088c9:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c00088cd:	75 0d                	jne    c00088dc <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c00088cf:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c00088d4:	0f b7 f6             	movzx  esi,si
c00088d7:	01 f6                	add    esi,esi
c00088d9:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00088dc:	47                   	inc    edi
c00088dd:	e9 01 ff ff ff       	jmp    c00087e3 <VgaText::puts(char const*, VgaColour, VgaColour)+0x3b>
c00088e2:	83 ec 0c             	sub    esp,0xc
c00088e5:	53                   	push   ebx
c00088e6:	e8 b5 f8 ff ff       	call   c00081a0 <VgaText::updateCursor()>
c00088eb:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c00088f2:	83 c4 1c             	add    esp,0x1c
c00088f5:	5b                   	pop    ebx
c00088f6:	5e                   	pop    esi
c00088f7:	5f                   	pop    edi
c00088f8:	5d                   	pop    ebp
c00088f9:	c3                   	ret    

c00088fa <VgaText::VgaText(char const*)>:
c00088fa:	56                   	push   esi
c00088fb:	53                   	push   ebx
c00088fc:	83 ec 04             	sub    esp,0x4
c00088ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008903:	83 ec 08             	sub    esp,0x8
c0008906:	6a 00                	push   0x0
c0008908:	50                   	push   eax
c0008909:	e8 44 05 00 00       	call   c0008e52 <UnixFile::UnixFile(int)>
c000890e:	83 c4 10             	add    esp,0x10
c0008911:	ba d8 df 01 c0       	mov    edx,0xc001dfd8
c0008916:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000891a:	89 10                	mov    DWORD PTR [eax],edx
c000891c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008920:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0008927:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000892b:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c0008932:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008936:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c000893a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000893e:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c0008942:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008946:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c000894d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008951:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c0008958:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000895c:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c0008963:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008967:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c000896e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008972:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c0008979:	83 ec 0c             	sub    esp,0xc
c000897c:	6a 01                	push   0x1
c000897e:	e8 12 09 00 00       	call   c0009295 <Virt::allocateKernelVirtualPages(int)>
c0008983:	83 c4 10             	add    esp,0x10
c0008986:	89 c2                	mov    edx,eax
c0008988:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000898c:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000898f:	8b 1d b0 2f 02 c0    	mov    ebx,DWORD PTR ds:0xc0022fb0
c0008995:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008999:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000899c:	89 c6                	mov    esi,eax
c000899e:	e8 f2 f0 ff ff       	call   c0007a95 <Phys::allocatePage()>
c00089a3:	68 05 0c 00 00       	push   0xc05
c00089a8:	56                   	push   esi
c00089a9:	50                   	push   eax
c00089aa:	53                   	push   ebx
c00089ab:	e8 a8 0f 00 00       	call   c0009958 <VAS::mapPage(unsigned long, unsigned long, int)>
c00089b0:	83 c4 10             	add    esp,0x10
c00089b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00089b7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00089ba:	83 ec 04             	sub    esp,0x4
c00089bd:	68 a0 0f 00 00       	push   0xfa0
c00089c2:	6a 00                	push   0x0
c00089c4:	50                   	push   eax
c00089c5:	e8 06 7b ff ff       	call   c00004d0 <memset>
c00089ca:	83 c4 10             	add    esp,0x10
c00089cd:	83 ec 04             	sub    esp,0x4
c00089d0:	6a 00                	push   0x0
c00089d2:	6a 07                	push   0x7
c00089d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089d8:	e8 6d f8 ff ff       	call   c000824a <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00089dd:	83 c4 10             	add    esp,0x10
c00089e0:	83 ec 04             	sub    esp,0x4
c00089e3:	6a 00                	push   0x0
c00089e5:	6a 00                	push   0x0
c00089e7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089eb:	e8 f0 f9 ff ff       	call   c00083e0 <VgaText::setCursor(int, int)>
c00089f0:	83 c4 10             	add    esp,0x10
c00089f3:	83 ec 0c             	sub    esp,0xc
c00089f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089fa:	e8 43 fa ff ff       	call   c0008442 <VgaText::clearScreen()>
c00089ff:	83 c4 10             	add    esp,0x10
c0008a02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a06:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0008a0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a0e:	05 82 00 00 00       	add    eax,0x82
c0008a13:	83 ec 04             	sub    esp,0x4
c0008a16:	68 80 00 00 00       	push   0x80
c0008a1b:	6a 00                	push   0x0
c0008a1d:	50                   	push   eax
c0008a1e:	e8 ad 7a ff ff       	call   c00004d0 <memset>
c0008a23:	83 c4 10             	add    esp,0x10
c0008a26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a2a:	05 02 01 00 00       	add    eax,0x102
c0008a2f:	83 ec 04             	sub    esp,0x4
c0008a32:	68 80 00 00 00       	push   0x80
c0008a37:	6a 00                	push   0x0
c0008a39:	50                   	push   eax
c0008a3a:	e8 91 7a ff ff       	call   c00004d0 <memset>
c0008a3f:	83 c4 10             	add    esp,0x10
c0008a42:	90                   	nop
c0008a43:	83 c4 04             	add    esp,0x4
c0008a46:	5b                   	pop    ebx
c0008a47:	5e                   	pop    esi
c0008a48:	c3                   	ret    
c0008a49:	90                   	nop

c0008a4a <VgaText::receiveKey(unsigned char)>:
c0008a4a:	55                   	push   ebp
c0008a4b:	57                   	push   edi
c0008a4c:	56                   	push   esi
c0008a4d:	53                   	push   ebx
c0008a4e:	83 ec 1c             	sub    esp,0x1c
c0008a51:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0008a55:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0008a59:	89 f0                	mov    eax,esi
c0008a5b:	84 c0                	test   al,al
c0008a5d:	0f 84 47 01 00 00    	je     c0008baa <VgaText::receiveKey(unsigned char)+0x160>
c0008a63:	8d bb 82 00 00 00    	lea    edi,[ebx+0x82]
c0008a69:	3c 08                	cmp    al,0x8
c0008a6b:	75 6b                	jne    c0008ad8 <VgaText::receiveKey(unsigned char)+0x8e>
c0008a6d:	83 ec 0c             	sub    esp,0xc
c0008a70:	57                   	push   edi
c0008a71:	e8 ca 7a ff ff       	call   c0000540 <strlen>
c0008a76:	83 c4 10             	add    esp,0x10
c0008a79:	85 c0                	test   eax,eax
c0008a7b:	0f 84 ee 00 00 00    	je     c0008b6f <VgaText::receiveKey(unsigned char)+0x125>
c0008a81:	50                   	push   eax
c0008a82:	50                   	push   eax
c0008a83:	6a 08                	push   0x8
c0008a85:	53                   	push   ebx
c0008a86:	e8 79 fb ff ff       	call   c0008604 <VgaText::putchar(char)>
c0008a8b:	89 3c 24             	mov    DWORD PTR [esp],edi
c0008a8e:	e8 ad 7a ff ff       	call   c0000540 <strlen>
c0008a93:	83 c4 10             	add    esp,0x10
c0008a96:	8a 84 03 81 00 00 00 	mov    al,BYTE PTR [ebx+eax*1+0x81]
c0008a9d:	3c 0d                	cmp    al,0xd
c0008a9f:	0f 95 c1             	setne  cl
c0008aa2:	3c 18                	cmp    al,0x18
c0008aa4:	0f 9e c2             	setle  dl
c0008aa7:	84 d1                	test   cl,dl
c0008aa9:	74 17                	je     c0008ac2 <VgaText::receiveKey(unsigned char)+0x78>
c0008aab:	83 e8 08             	sub    eax,0x8
c0008aae:	3c 02                	cmp    al,0x2
c0008ab0:	76 10                	jbe    c0008ac2 <VgaText::receiveKey(unsigned char)+0x78>
c0008ab2:	55                   	push   ebp
c0008ab3:	55                   	push   ebp
c0008ab4:	68 c3 df 01 c0       	push   0xc001dfc3
c0008ab9:	53                   	push   ebx
c0008aba:	e8 77 fc ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0008abf:	83 c4 10             	add    esp,0x10
c0008ac2:	83 ec 0c             	sub    esp,0xc
c0008ac5:	57                   	push   edi
c0008ac6:	e8 75 7a ff ff       	call   c0000540 <strlen>
c0008acb:	c6 84 03 81 00 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x81],0x0
c0008ad3:	e9 94 00 00 00       	jmp    c0008b6c <VgaText::receiveKey(unsigned char)+0x122>
c0008ad8:	83 ec 0c             	sub    esp,0xc
c0008adb:	8d 83 02 01 00 00    	lea    eax,[ebx+0x102]
c0008ae1:	50                   	push   eax
c0008ae2:	e8 59 7a ff ff       	call   c0000540 <strlen>
c0008ae7:	89 3c 24             	mov    DWORD PTR [esp],edi
c0008aea:	89 c5                	mov    ebp,eax
c0008aec:	e8 4f 7a ff ff       	call   c0000540 <strlen>
c0008af1:	83 c4 10             	add    esp,0x10
c0008af4:	8d 44 05 03          	lea    eax,[ebp+eax*1+0x3]
c0008af8:	3d 80 00 00 00       	cmp    eax,0x80
c0008afd:	0f 87 a7 00 00 00    	ja     c0008baa <VgaText::receiveKey(unsigned char)+0x160>
c0008b03:	89 f0                	mov    eax,esi
c0008b05:	3c 18                	cmp    al,0x18
c0008b07:	0f 96 c2             	setbe  dl
c0008b0a:	3c 0d                	cmp    al,0xd
c0008b0c:	0f 95 c0             	setne  al
c0008b0f:	84 c2                	test   dl,al
c0008b11:	74 30                	je     c0008b43 <VgaText::receiveKey(unsigned char)+0xf9>
c0008b13:	8d 46 f7             	lea    eax,[esi-0x9]
c0008b16:	3c 01                	cmp    al,0x1
c0008b18:	76 29                	jbe    c0008b43 <VgaText::receiveKey(unsigned char)+0xf9>
c0008b1a:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008b1d:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008b20:	68 c9 df 01 c0       	push   0xc001dfc9
c0008b25:	53                   	push   ebx
c0008b26:	e8 7d fc ff ff       	call   c00087a8 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0008b2b:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008b2e:	8d 46 40             	lea    eax,[esi+0x40]
c0008b31:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008b34:	0f b6 c0             	movzx  eax,al
c0008b37:	50                   	push   eax
c0008b38:	53                   	push   ebx
c0008b39:	e8 f8 f9 ff ff       	call   c0008536 <VgaText::putchar(char, VgaColour, VgaColour)>
c0008b3e:	83 c4 20             	add    esp,0x20
c0008b41:	eb 11                	jmp    c0008b54 <VgaText::receiveKey(unsigned char)+0x10a>
c0008b43:	89 f0                	mov    eax,esi
c0008b45:	51                   	push   ecx
c0008b46:	0f be c0             	movsx  eax,al
c0008b49:	51                   	push   ecx
c0008b4a:	50                   	push   eax
c0008b4b:	53                   	push   ebx
c0008b4c:	e8 b3 fa ff ff       	call   c0008604 <VgaText::putchar(char)>
c0008b51:	83 c4 10             	add    esp,0x10
c0008b54:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0008b59:	89 f0                	mov    eax,esi
c0008b5b:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0008b5f:	52                   	push   edx
c0008b60:	52                   	push   edx
c0008b61:	8d 44 24 16          	lea    eax,[esp+0x16]
c0008b65:	50                   	push   eax
c0008b66:	57                   	push   edi
c0008b67:	e8 54 7c ff ff       	call   c00007c0 <strcat>
c0008b6c:	83 c4 10             	add    esp,0x10
c0008b6f:	89 f0                	mov    eax,esi
c0008b71:	3c 03                	cmp    al,0x3
c0008b73:	0f 94 c2             	sete   dl
c0008b76:	3c 0a                	cmp    al,0xa
c0008b78:	0f 94 c0             	sete   al
c0008b7b:	08 c2                	or     dl,al
c0008b7d:	75 09                	jne    c0008b88 <VgaText::receiveKey(unsigned char)+0x13e>
c0008b7f:	80 bb 80 00 00 00 00 	cmp    BYTE PTR [ebx+0x80],0x0
c0008b86:	74 22                	je     c0008baa <VgaText::receiveKey(unsigned char)+0x160>
c0008b88:	81 c3 02 01 00 00    	add    ebx,0x102
c0008b8e:	50                   	push   eax
c0008b8f:	50                   	push   eax
c0008b90:	57                   	push   edi
c0008b91:	53                   	push   ebx
c0008b92:	e8 29 7c ff ff       	call   c00007c0 <strcat>
c0008b97:	83 c4 0c             	add    esp,0xc
c0008b9a:	68 80 00 00 00       	push   0x80
c0008b9f:	6a 00                	push   0x0
c0008ba1:	57                   	push   edi
c0008ba2:	e8 29 79 ff ff       	call   c00004d0 <memset>
c0008ba7:	83 c4 10             	add    esp,0x10
c0008baa:	83 c4 1c             	add    esp,0x1c
c0008bad:	5b                   	pop    ebx
c0008bae:	5e                   	pop    esi
c0008baf:	5f                   	pop    edi
c0008bb0:	5d                   	pop    ebp
c0008bb1:	c3                   	ret    

c0008bb2 <VgaText::doUpdate()>:
c0008bb2:	c3                   	ret    

c0008bb3 <newTerminal(char*)>:
c0008bb3:	83 ec 28             	sub    esp,0x28
c0008bb6:	68 84 01 00 00       	push   0x184
c0008bbb:	e8 f9 eb ff ff       	call   c00077b9 <malloc>
c0008bc0:	5a                   	pop    edx
c0008bc1:	59                   	pop    ecx
c0008bc2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008bc6:	50                   	push   eax
c0008bc7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008bcb:	e8 2a fd ff ff       	call   c00088fa <VgaText::VgaText(char const*)>
c0008bd0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008bd4:	83 c4 2c             	add    esp,0x2c
c0008bd7:	c3                   	ret    

c0008bd8 <TSS::TSS()>:
c0008bd8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008bdc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0008be3:	90                   	nop
c0008be4:	c3                   	ret    
c0008be5:	90                   	nop
c0008be6:	66 90                	xchg   ax,ax

c0008be8 <TSS::setESP(unsigned long)>:
c0008be8:	55                   	push   ebp
c0008be9:	89 e5                	mov    ebp,esp
c0008beb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008bee:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008bf1:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008bf4:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008bf7:	90                   	nop
c0008bf8:	5d                   	pop    ebp
c0008bf9:	c3                   	ret    
c0008bfa:	66 90                	xchg   ax,ax

c0008bfc <TSS::flush()>:
c0008bfc:	55                   	push   ebp
c0008bfd:	89 e5                	mov    ebp,esp
c0008bff:	83 ec 10             	sub    esp,0x10
c0008c02:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c05:	8b 00                	mov    eax,DWORD PTR [eax]
c0008c07:	83 c8 03             	or     eax,0x3
c0008c0a:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0008c0e:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0008c12:	66 89 d0             	mov    ax,dx
c0008c15:	0f 00 d8             	ltr    ax
c0008c18:	90                   	nop
c0008c19:	c9                   	leave  
c0008c1a:	c3                   	ret    
c0008c1b:	90                   	nop

c0008c1c <TSS::setup(unsigned long, unsigned long)>:
c0008c1c:	55                   	push   ebp
c0008c1d:	89 e5                	mov    ebp,esp
c0008c1f:	83 ec 18             	sub    esp,0x18
c0008c22:	83 ec 0c             	sub    esp,0xc
c0008c25:	6a 68                	push   0x68
c0008c27:	e8 8d eb ff ff       	call   c00077b9 <malloc>
c0008c2c:	83 c4 10             	add    esp,0x10
c0008c2f:	89 c2                	mov    edx,eax
c0008c31:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c34:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008c37:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c3a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c3d:	83 ec 04             	sub    esp,0x4
c0008c40:	6a 68                	push   0x68
c0008c42:	6a 00                	push   0x0
c0008c44:	50                   	push   eax
c0008c45:	e8 86 78 ff ff       	call   c00004d0 <memset>
c0008c4a:	83 c4 10             	add    esp,0x10
c0008c4d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c50:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c53:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0008c59:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c5c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c5f:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0008c65:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c68:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c6b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008c6e:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008c71:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c74:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c77:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0008c7d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c80:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c83:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0008c89:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c8c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c8f:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0008c95:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c98:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c9b:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0008ca1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ca4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008ca7:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0008cad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008cb0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008cb3:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0008cb9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008cbc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008cbf:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0008cc2:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0008cc5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008cc8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008ccb:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008cce:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0008cd1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008cd4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008cd7:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0008cde:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ce1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008ce4:	0f 20 da             	mov    edx,cr3
c0008ce7:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0008cea:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0008ced:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0008cf0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008cf3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008cf6:	83 ec 08             	sub    esp,0x8
c0008cf9:	50                   	push   eax
c0008cfa:	8d 45 ec             	lea    eax,[ebp-0x14]
c0008cfd:	50                   	push   eax
c0008cfe:	e8 3d e3 ff ff       	call   c0007040 <GDTEntry::setBase(unsigned int)>
c0008d03:	83 c4 10             	add    esp,0x10
c0008d06:	83 ec 08             	sub    esp,0x8
c0008d09:	6a 68                	push   0x68
c0008d0b:	8d 45 ec             	lea    eax,[ebp-0x14]
c0008d0e:	50                   	push   eax
c0008d0f:	e8 48 e3 ff ff       	call   c000705c <GDTEntry::setLimit(unsigned int)>
c0008d14:	83 c4 10             	add    esp,0x10
c0008d17:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0008d1b:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0008d1e:	83 e0 0f             	and    eax,0xf
c0008d21:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0008d24:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0008d27:	83 c8 40             	or     eax,0x40
c0008d2a:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0008d2d:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c0008d32:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0008d38:	05 78 01 00 00       	add    eax,0x178
c0008d3d:	83 ec 04             	sub    esp,0x4
c0008d40:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0008d43:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0008d46:	50                   	push   eax
c0008d47:	e8 44 e3 ff ff       	call   c0007090 <GDT::addEntry(GDTEntry)>
c0008d4c:	83 c4 10             	add    esp,0x10
c0008d4f:	89 c2                	mov    edx,eax
c0008d51:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d54:	89 10                	mov    DWORD PTR [eax],edx
c0008d56:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c0008d5b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0008d61:	05 78 01 00 00       	add    eax,0x178
c0008d66:	83 ec 0c             	sub    esp,0xc
c0008d69:	50                   	push   eax
c0008d6a:	e8 4b e3 ff ff       	call   c00070ba <GDT::flush()>
c0008d6f:	83 c4 10             	add    esp,0x10
c0008d72:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d75:	8b 00                	mov    eax,DWORD PTR [eax]
c0008d77:	c9                   	leave  
c0008d78:	c3                   	ret    
c0008d79:	90                   	nop

c0008d7a <ReservedFilename::read(unsigned long long, void*, int*)>:
c0008d7a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008d7e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008d82:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008d85:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0008d8a:	75 08                	jne    c0008d94 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0008d8c:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0008d92:	eb 38                	jmp    c0008dcc <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0008d94:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0008d99:	75 17                	jne    c0008db2 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0008d9b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0008da0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0008da3:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0008da9:	8b 10                	mov    edx,DWORD PTR [eax]
c0008dab:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008daf:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0008db2:	89 c1                	mov    ecx,eax
c0008db4:	83 e1 fd             	and    ecx,0xfffffffd
c0008db7:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0008dbd:	74 cd                	je     c0008d8c <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0008dbf:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0008dc4:	83 e0 ef             	and    eax,0xffffffef
c0008dc7:	83 f8 08             	cmp    eax,0x8
c0008dca:	76 c0                	jbe    c0008d8c <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0008dcc:	31 c0                	xor    eax,eax
c0008dce:	c3                   	ret    
c0008dcf:	90                   	nop

c0008dd0 <ReservedFilename::isAtty()>:
c0008dd0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008dd4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0008dd7:	31 c0                	xor    eax,eax
c0008dd9:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0008ddf:	74 09                	je     c0008dea <ReservedFilename::isAtty()+0x1a>
c0008de1:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0008de7:	0f 94 c0             	sete   al
c0008dea:	c3                   	ret    
c0008deb:	90                   	nop

c0008dec <ReservedFilename::write(unsigned long long, void*, int*)>:
c0008dec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008df0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0008df4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008df7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008dfb:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0008e00:	75 08                	jne    c0008e0a <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0008e02:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0008e08:	eb 3d                	jmp    c0008e47 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0008e0a:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0008e0f:	75 17                	jne    c0008e28 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0008e11:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0008e16:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0008e19:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0008e1f:	8b 10                	mov    edx,DWORD PTR [eax]
c0008e21:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008e25:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0008e28:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0008e2d:	75 04                	jne    c0008e33 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0008e2f:	89 0a                	mov    DWORD PTR [edx],ecx
c0008e31:	eb 14                	jmp    c0008e47 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0008e33:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0008e38:	74 c8                	je     c0008e02 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0008e3a:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0008e3f:	83 e0 ef             	and    eax,0xffffffef
c0008e42:	83 f8 08             	cmp    eax,0x8
c0008e45:	76 bb                	jbe    c0008e02 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0008e47:	31 c0                	xor    eax,eax
c0008e49:	c3                   	ret    

c0008e4a <UnixFile::getFileDescriptor()>:
c0008e4a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008e4e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008e51:	c3                   	ret    

c0008e52 <UnixFile::UnixFile(int)>:
c0008e52:	53                   	push   ebx
c0008e53:	83 ec 28             	sub    esp,0x28
c0008e56:	ba a0 e0 01 c0       	mov    edx,0xc001e0a0
c0008e5b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008e5f:	89 10                	mov    DWORD PTR [eax],edx
c0008e61:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c0008e69:	0f 8f 8c 01 00 00    	jg     c0008ffb <UnixFile::UnixFile(int)+0x1a9>
c0008e6f:	a1 20 ff 01 c0       	mov    eax,ds:0xc001ff20
c0008e74:	8d 50 01             	lea    edx,[eax+0x1]
c0008e77:	89 15 20 ff 01 c0    	mov    DWORD PTR ds:0xc001ff20,edx
c0008e7d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0008e81:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0008e84:	83 ec 08             	sub    esp,0x8
c0008e87:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0008e8b:	68 98 2f 02 c0       	push   0xc0022f98
c0008e90:	e8 33 3d 01 00       	call   c001cbc8 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0008e95:	83 c4 10             	add    esp,0x10
c0008e98:	a0 94 2f 02 c0       	mov    al,ds:0xc0022f94
c0008e9d:	83 f0 01             	xor    eax,0x1
c0008ea0:	84 c0                	test   al,al
c0008ea2:	0f 84 54 01 00 00    	je     c0008ffc <UnixFile::UnixFile(int)+0x1aa>
c0008ea8:	c6 05 94 2f 02 c0 01 	mov    BYTE PTR ds:0xc0022f94,0x1
c0008eaf:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0008eb7:	83 ec 0c             	sub    esp,0xc
c0008eba:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008ebe:	e8 f6 e8 ff ff       	call   c00077b9 <malloc>
c0008ec3:	83 c4 10             	add    esp,0x10
c0008ec6:	89 c3                	mov    ebx,eax
c0008ec8:	83 ec 08             	sub    esp,0x8
c0008ecb:	68 03 ff ff 0f       	push   0xfffff03
c0008ed0:	53                   	push   ebx
c0008ed1:	e8 2c 01 00 00       	call   c0009002 <ReservedFilename::ReservedFilename(int)>
c0008ed6:	83 c4 10             	add    esp,0x10
c0008ed9:	89 1d 8c 2f 02 c0    	mov    DWORD PTR ds:0xc0022f8c,ebx
c0008edf:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0008ee7:	83 ec 0c             	sub    esp,0xc
c0008eea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008eee:	e8 c6 e8 ff ff       	call   c00077b9 <malloc>
c0008ef3:	83 c4 10             	add    esp,0x10
c0008ef6:	89 c3                	mov    ebx,eax
c0008ef8:	83 ec 08             	sub    esp,0x8
c0008efb:	68 01 ff ff 0f       	push   0xfffff01
c0008f00:	53                   	push   ebx
c0008f01:	e8 fc 00 00 00       	call   c0009002 <ReservedFilename::ReservedFilename(int)>
c0008f06:	83 c4 10             	add    esp,0x10
c0008f09:	89 1d 90 2f 02 c0    	mov    DWORD PTR ds:0xc0022f90,ebx
c0008f0f:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0008f17:	83 ec 0c             	sub    esp,0xc
c0008f1a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008f1e:	e8 96 e8 ff ff       	call   c00077b9 <malloc>
c0008f23:	83 c4 10             	add    esp,0x10
c0008f26:	89 c3                	mov    ebx,eax
c0008f28:	83 ec 08             	sub    esp,0x8
c0008f2b:	68 00 ff ff 0f       	push   0xfffff00
c0008f30:	53                   	push   ebx
c0008f31:	e8 cc 00 00 00       	call   c0009002 <ReservedFilename::ReservedFilename(int)>
c0008f36:	83 c4 10             	add    esp,0x10
c0008f39:	89 1d 84 2f 02 c0    	mov    DWORD PTR ds:0xc0022f84,ebx
c0008f3f:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c0008f47:	83 ec 0c             	sub    esp,0xc
c0008f4a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008f4e:	e8 66 e8 ff ff       	call   c00077b9 <malloc>
c0008f53:	83 c4 10             	add    esp,0x10
c0008f56:	89 c3                	mov    ebx,eax
c0008f58:	83 ec 08             	sub    esp,0x8
c0008f5b:	68 02 ff ff 0f       	push   0xfffff02
c0008f60:	53                   	push   ebx
c0008f61:	e8 9c 00 00 00       	call   c0009002 <ReservedFilename::ReservedFilename(int)>
c0008f66:	83 c4 10             	add    esp,0x10
c0008f69:	89 1d 88 2f 02 c0    	mov    DWORD PTR ds:0xc0022f88,ebx
c0008f6f:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0008f77:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0008f7c:	7f 7e                	jg     c0008ffc <UnixFile::UnixFile(int)+0x1aa>
c0008f7e:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c0008f86:	83 ec 0c             	sub    esp,0xc
c0008f89:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0008f8d:	e8 27 e8 ff ff       	call   c00077b9 <malloc>
c0008f92:	83 c4 10             	add    esp,0x10
c0008f95:	89 c3                	mov    ebx,eax
c0008f97:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008f9b:	05 10 ff ff 0f       	add    eax,0xfffff10
c0008fa0:	83 ec 08             	sub    esp,0x8
c0008fa3:	50                   	push   eax
c0008fa4:	53                   	push   ebx
c0008fa5:	e8 58 00 00 00       	call   c0009002 <ReservedFilename::ReservedFilename(int)>
c0008faa:	83 c4 10             	add    esp,0x10
c0008fad:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008fb1:	89 1c 85 60 2f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdd0a0],ebx
c0008fb8:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c0008fc0:	83 ec 0c             	sub    esp,0xc
c0008fc3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fc7:	e8 ed e7 ff ff       	call   c00077b9 <malloc>
c0008fcc:	83 c4 10             	add    esp,0x10
c0008fcf:	89 c3                	mov    ebx,eax
c0008fd1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008fd5:	05 20 ff ff 0f       	add    eax,0xfffff20
c0008fda:	83 ec 08             	sub    esp,0x8
c0008fdd:	50                   	push   eax
c0008fde:	53                   	push   ebx
c0008fdf:	e8 1e 00 00 00       	call   c0009002 <ReservedFilename::ReservedFilename(int)>
c0008fe4:	83 c4 10             	add    esp,0x10
c0008fe7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008feb:	89 1c 85 20 2f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdd0e0],ebx
c0008ff2:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0008ff6:	e9 7c ff ff ff       	jmp    c0008f77 <UnixFile::UnixFile(int)+0x125>
c0008ffb:	90                   	nop
c0008ffc:	83 c4 28             	add    esp,0x28
c0008fff:	5b                   	pop    ebx
c0009000:	c3                   	ret    
c0009001:	90                   	nop

c0009002 <ReservedFilename::ReservedFilename(int)>:
c0009002:	83 ec 0c             	sub    esp,0xc
c0009005:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009009:	83 ec 08             	sub    esp,0x8
c000900c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009010:	50                   	push   eax
c0009011:	e8 3c fe ff ff       	call   c0008e52 <UnixFile::UnixFile(int)>
c0009016:	83 c4 10             	add    esp,0x10
c0009019:	ba bc e0 01 c0       	mov    edx,0xc001e0bc
c000901e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009022:	89 10                	mov    DWORD PTR [eax],edx
c0009024:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009028:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000902c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000902f:	90                   	nop
c0009030:	83 c4 0c             	add    esp,0xc
c0009033:	c3                   	ret    

c0009034 <UnixFile::~UnixFile()>:
c0009034:	83 ec 1c             	sub    esp,0x1c
c0009037:	ba a0 e0 01 c0       	mov    edx,0xc001e0a0
c000903c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009040:	89 10                	mov    DWORD PTR [eax],edx
c0009042:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009046:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009049:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c000904e:	7f 73                	jg     c00090c3 <UnixFile::~UnixFile()+0x8f>
c0009050:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0009058:	83 ec 0c             	sub    esp,0xc
c000905b:	68 98 2f 02 c0       	push   0xc0022f98
c0009060:	e8 37 3c 01 00       	call   c001cc9c <LinkedList<UnixFile>::getFirstElement()>
c0009065:	83 c4 10             	add    esp,0x10
c0009068:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000906c:	83 ec 0c             	sub    esp,0xc
c000906f:	68 98 2f 02 c0       	push   0xc0022f98
c0009074:	e8 2b 3c 01 00       	call   c001cca4 <LinkedList<UnixFile>::removeFirst()>
c0009079:	83 c4 10             	add    esp,0x10
c000907c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009080:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0009084:	74 40                	je     c00090c6 <UnixFile::~UnixFile()+0x92>
c0009086:	83 ec 08             	sub    esp,0x8
c0009089:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000908d:	68 98 2f 02 c0       	push   0xc0022f98
c0009092:	e8 31 3b 01 00       	call   c001cbc8 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0009097:	83 c4 10             	add    esp,0x10
c000909a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000909e:	8d 50 01             	lea    edx,[eax+0x1]
c00090a1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00090a5:	3d 20 a1 07 00       	cmp    eax,0x7a120
c00090aa:	0f 94 c0             	sete   al
c00090ad:	84 c0                	test   al,al
c00090af:	74 a7                	je     c0009058 <UnixFile::~UnixFile()+0x24>
c00090b1:	83 ec 0c             	sub    esp,0xc
c00090b4:	68 78 e0 01 c0       	push   0xc001e078
c00090b9:	e8 e9 71 00 00       	call   c00102a7 <KePanic(char const*)>
c00090be:	83 c4 10             	add    esp,0x10
c00090c1:	eb 95                	jmp    c0009058 <UnixFile::~UnixFile()+0x24>
c00090c3:	90                   	nop
c00090c4:	eb 01                	jmp    c00090c7 <UnixFile::~UnixFile()+0x93>
c00090c6:	90                   	nop
c00090c7:	90                   	nop
c00090c8:	83 c4 1c             	add    esp,0x1c
c00090cb:	c3                   	ret    

c00090cc <UnixFile::~UnixFile()>:
c00090cc:	83 ec 0c             	sub    esp,0xc
c00090cf:	83 ec 0c             	sub    esp,0xc
c00090d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090d6:	e8 59 ff ff ff       	call   c0009034 <UnixFile::~UnixFile()>
c00090db:	83 c4 10             	add    esp,0x10
c00090de:	83 ec 08             	sub    esp,0x8
c00090e1:	6a 0c                	push   0xc
c00090e3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090e7:	e8 70 13 00 00       	call   c000a45c <operator delete(void*, unsigned long)>
c00090ec:	83 c4 10             	add    esp,0x10
c00090ef:	83 c4 0c             	add    esp,0xc
c00090f2:	c3                   	ret    
c00090f3:	90                   	nop

c00090f4 <ReservedFilename::~ReservedFilename()>:
c00090f4:	83 ec 0c             	sub    esp,0xc
c00090f7:	ba bc e0 01 c0       	mov    edx,0xc001e0bc
c00090fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009100:	89 10                	mov    DWORD PTR [eax],edx
c0009102:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009106:	83 ec 0c             	sub    esp,0xc
c0009109:	50                   	push   eax
c000910a:	e8 25 ff ff ff       	call   c0009034 <UnixFile::~UnixFile()>
c000910f:	83 c4 10             	add    esp,0x10
c0009112:	90                   	nop
c0009113:	83 c4 0c             	add    esp,0xc
c0009116:	c3                   	ret    
c0009117:	90                   	nop

c0009118 <ReservedFilename::~ReservedFilename()>:
c0009118:	83 ec 0c             	sub    esp,0xc
c000911b:	83 ec 0c             	sub    esp,0xc
c000911e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009122:	e8 cd ff ff ff       	call   c00090f4 <ReservedFilename::~ReservedFilename()>
c0009127:	83 c4 10             	add    esp,0x10
c000912a:	83 ec 08             	sub    esp,0x8
c000912d:	6a 0c                	push   0xc
c000912f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009133:	e8 24 13 00 00       	call   c000a45c <operator delete(void*, unsigned long)>
c0009138:	83 c4 10             	add    esp,0x10
c000913b:	83 c4 0c             	add    esp,0xc
c000913e:	c3                   	ret    

c000913f <getFromFileDescriptor(int)>:
c000913f:	53                   	push   ebx
c0009140:	83 ec 08             	sub    esp,0x8
c0009143:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009147:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c000914d:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c0009153:	7f 2c                	jg     c0009181 <getFromFileDescriptor(int)+0x42>
c0009155:	83 ec 0c             	sub    esp,0xc
c0009158:	68 98 2f 02 c0       	push   0xc0022f98
c000915d:	e8 3a 3b 01 00       	call   c001cc9c <LinkedList<UnixFile>::getFirstElement()>
c0009162:	83 c4 10             	add    esp,0x10
c0009165:	85 c0                	test   eax,eax
c0009167:	75 04                	jne    c000916d <getFromFileDescriptor(int)+0x2e>
c0009169:	31 c0                	xor    eax,eax
c000916b:	eb 6e                	jmp    c00091db <getFromFileDescriptor(int)+0x9c>
c000916d:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c0009170:	74 69                	je     c00091db <getFromFileDescriptor(int)+0x9c>
c0009172:	52                   	push   edx
c0009173:	52                   	push   edx
c0009174:	50                   	push   eax
c0009175:	68 98 2f 02 c0       	push   0xc0022f98
c000917a:	e8 c7 3b 01 00       	call   c001cd46 <LinkedList<UnixFile>::getNext(UnixFile*)>
c000917f:	eb e1                	jmp    c0009162 <getFromFileDescriptor(int)+0x23>
c0009181:	a1 8c 2f 02 c0       	mov    eax,ds:0xc0022f8c
c0009186:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c000918c:	74 4d                	je     c00091db <getFromFileDescriptor(int)+0x9c>
c000918e:	a1 90 2f 02 c0       	mov    eax,ds:0xc0022f90
c0009193:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0009199:	74 40                	je     c00091db <getFromFileDescriptor(int)+0x9c>
c000919b:	a1 88 2f 02 c0       	mov    eax,ds:0xc0022f88
c00091a0:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c00091a6:	74 33                	je     c00091db <getFromFileDescriptor(int)+0x9c>
c00091a8:	a1 84 2f 02 c0       	mov    eax,ds:0xc0022f84
c00091ad:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c00091b3:	74 26                	je     c00091db <getFromFileDescriptor(int)+0x9c>
c00091b5:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c00091bb:	83 f8 08             	cmp    eax,0x8
c00091be:	77 09                	ja     c00091c9 <getFromFileDescriptor(int)+0x8a>
c00091c0:	8b 04 85 60 2f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd0a0]
c00091c7:	eb 12                	jmp    c00091db <getFromFileDescriptor(int)+0x9c>
c00091c9:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c00091cf:	83 fb 08             	cmp    ebx,0x8
c00091d2:	77 95                	ja     c0009169 <getFromFileDescriptor(int)+0x2a>
c00091d4:	8b 04 9d 20 2f 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdd0e0]
c00091db:	83 c4 08             	add    esp,0x8
c00091de:	5b                   	pop    ebx
c00091df:	c3                   	ret    

c00091e0 <__static_initialization_and_destruction_0(int, int)>:
c00091e0:	83 ec 0c             	sub    esp,0xc
c00091e3:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00091e8:	75 34                	jne    c000921e <__static_initialization_and_destruction_0(int, int)+0x3e>
c00091ea:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00091f2:	75 2a                	jne    c000921e <__static_initialization_and_destruction_0(int, int)+0x3e>
c00091f4:	83 ec 0c             	sub    esp,0xc
c00091f7:	68 98 2f 02 c0       	push   0xc0022f98
c00091fc:	e8 85 39 01 00       	call   c001cb86 <LinkedList<UnixFile>::LinkedList()>
c0009201:	83 c4 10             	add    esp,0x10
c0009204:	83 ec 04             	sub    esp,0x4
c0009207:	68 a4 fe 01 c0       	push   0xc001fea4
c000920c:	68 98 2f 02 c0       	push   0xc0022f98
c0009211:	68 84 cb 01 c0       	push   0xc001cb84
c0009216:	e8 f1 11 00 00       	call   c000a40c <__cxa_atexit>
c000921b:	83 c4 10             	add    esp,0x10
c000921e:	90                   	nop
c000921f:	83 c4 0c             	add    esp,0xc
c0009222:	c3                   	ret    

c0009223 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c0009223:	83 ec 0c             	sub    esp,0xc
c0009226:	83 ec 08             	sub    esp,0x8
c0009229:	68 ff ff 00 00       	push   0xffff
c000922e:	6a 01                	push   0x1
c0009230:	e8 ab ff ff ff       	call   c00091e0 <__static_initialization_and_destruction_0(int, int)>
c0009235:	83 c4 10             	add    esp,0x10
c0009238:	83 c4 0c             	add    esp,0xc
c000923b:	c3                   	ret    

c000923c <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c000923c:	53                   	push   ebx
c000923d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009241:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009245:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c000924b:	89 c8                	mov    eax,ecx
c000924d:	d1 e8                	shr    eax,1
c000924f:	03 05 28 ff 01 c0    	add    eax,DWORD PTR ds:0xc001ff28
c0009255:	83 e1 01             	and    ecx,0x1
c0009258:	8a 10                	mov    dl,BYTE PTR [eax]
c000925a:	75 09                	jne    c0009265 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c000925c:	83 e2 f0             	and    edx,0xfffffff0
c000925f:	09 da                	or     edx,ebx
c0009261:	88 10                	mov    BYTE PTR [eax],dl
c0009263:	5b                   	pop    ebx
c0009264:	c3                   	ret    
c0009265:	c1 e3 04             	shl    ebx,0x4
c0009268:	83 e2 0f             	and    edx,0xf
c000926b:	09 da                	or     edx,ebx
c000926d:	88 10                	mov    BYTE PTR [eax],dl
c000926f:	5b                   	pop    ebx
c0009270:	c3                   	ret    

c0009271 <Virt::getPageState(unsigned long)>:
c0009271:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009275:	8b 0d 28 ff 01 c0    	mov    ecx,DWORD PTR ds:0xc001ff28
c000927b:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c0009281:	89 d0                	mov    eax,edx
c0009283:	d1 e8                	shr    eax,1
c0009285:	83 e2 01             	and    edx,0x1
c0009288:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c000928b:	75 04                	jne    c0009291 <Virt::getPageState(unsigned long)+0x20>
c000928d:	83 e0 0f             	and    eax,0xf
c0009290:	c3                   	ret    
c0009291:	c0 e8 04             	shr    al,0x4
c0009294:	c3                   	ret    

c0009295 <Virt::allocateKernelVirtualPages(int)>:
c0009295:	55                   	push   ebp
c0009296:	31 ed                	xor    ebp,ebp
c0009298:	57                   	push   edi
c0009299:	56                   	push   esi
c000929a:	53                   	push   ebx
c000929b:	31 db                	xor    ebx,ebx
c000929d:	83 ec 1c             	sub    esp,0x1c
c00092a0:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00092a4:	8b 3d 24 ff 01 c0    	mov    edi,DWORD PTR ds:0xc001ff24
c00092aa:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00092af:	57                   	push   edi
c00092b0:	e8 bc ff ff ff       	call   c0009271 <Virt::getPageState(unsigned long)>
c00092b5:	5a                   	pop    edx
c00092b6:	84 c0                	test   al,al
c00092b8:	75 3a                	jne    c00092f4 <Virt::allocateKernelVirtualPages(int)+0x5f>
c00092ba:	85 db                	test   ebx,ebx
c00092bc:	75 02                	jne    c00092c0 <Virt::allocateKernelVirtualPages(int)+0x2b>
c00092be:	89 fd                	mov    ebp,edi
c00092c0:	43                   	inc    ebx
c00092c1:	39 f3                	cmp    ebx,esi
c00092c3:	74 5a                	je     c000931f <Virt::allocateKernelVirtualPages(int)+0x8a>
c00092c5:	47                   	inc    edi
c00092c6:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c00092cc:	76 31                	jbe    c00092ff <Virt::allocateKernelVirtualPages(int)+0x6a>
c00092ce:	c7 05 24 ff 01 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc001ff24,0xc8000
c00092d8:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00092dd:	75 28                	jne    c0009307 <Virt::allocateKernelVirtualPages(int)+0x72>
c00092df:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c00092e4:	bf 00 80 0c 00       	mov    edi,0xc8000
c00092e9:	57                   	push   edi
c00092ea:	e8 82 ff ff ff       	call   c0009271 <Virt::getPageState(unsigned long)>
c00092ef:	5a                   	pop    edx
c00092f0:	84 c0                	test   al,al
c00092f2:	74 c6                	je     c00092ba <Virt::allocateKernelVirtualPages(int)+0x25>
c00092f4:	31 db                	xor    ebx,ebx
c00092f6:	47                   	inc    edi
c00092f7:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c00092fd:	77 cf                	ja     c00092ce <Virt::allocateKernelVirtualPages(int)+0x39>
c00092ff:	89 3d 24 ff 01 c0    	mov    DWORD PTR ds:0xc001ff24,edi
c0009305:	eb a8                	jmp    c00092af <Virt::allocateKernelVirtualPages(int)+0x1a>
c0009307:	83 ec 0c             	sub    esp,0xc
c000930a:	68 d0 e0 01 c0       	push   0xc001e0d0
c000930f:	e8 93 6f 00 00       	call   c00102a7 <KePanic(char const*)>
c0009314:	8b 3d 24 ff 01 c0    	mov    edi,DWORD PTR ds:0xc001ff24
c000931a:	83 c4 10             	add    esp,0x10
c000931d:	eb 90                	jmp    c00092af <Virt::allocateKernelVirtualPages(int)+0x1a>
c000931f:	89 2d 24 ff 01 c0    	mov    DWORD PTR ds:0xc001ff24,ebp
c0009325:	4b                   	dec    ebx
c0009326:	74 5f                	je     c0009387 <Virt::allocateKernelVirtualPages(int)+0xf2>
c0009328:	85 f6                	test   esi,esi
c000932a:	74 3d                	je     c0009369 <Virt::allocateKernelVirtualPages(int)+0xd4>
c000932c:	89 e8                	mov    eax,ebp
c000932e:	31 db                	xor    ebx,ebx
c0009330:	8d 7e ff             	lea    edi,[esi-0x1]
c0009333:	eb 14                	jmp    c0009349 <Virt::allocateKernelVirtualPages(int)+0xb4>
c0009335:	6a 01                	push   0x1
c0009337:	43                   	inc    ebx
c0009338:	50                   	push   eax
c0009339:	e8 fe fe ff ff       	call   c000923c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000933e:	58                   	pop    eax
c000933f:	39 f3                	cmp    ebx,esi
c0009341:	5a                   	pop    edx
c0009342:	74 25                	je     c0009369 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0009344:	a1 24 ff 01 c0       	mov    eax,ds:0xc001ff24
c0009349:	8d 50 01             	lea    edx,[eax+0x1]
c000934c:	85 db                	test   ebx,ebx
c000934e:	89 15 24 ff 01 c0    	mov    DWORD PTR ds:0xc001ff24,edx
c0009354:	74 20                	je     c0009376 <Virt::allocateKernelVirtualPages(int)+0xe1>
c0009356:	39 df                	cmp    edi,ebx
c0009358:	75 db                	jne    c0009335 <Virt::allocateKernelVirtualPages(int)+0xa0>
c000935a:	6a 03                	push   0x3
c000935c:	43                   	inc    ebx
c000935d:	50                   	push   eax
c000935e:	e8 d9 fe ff ff       	call   c000923c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009363:	59                   	pop    ecx
c0009364:	39 f3                	cmp    ebx,esi
c0009366:	58                   	pop    eax
c0009367:	75 db                	jne    c0009344 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0009369:	83 c4 1c             	add    esp,0x1c
c000936c:	89 e8                	mov    eax,ebp
c000936e:	5b                   	pop    ebx
c000936f:	c1 e0 0c             	shl    eax,0xc
c0009372:	5e                   	pop    esi
c0009373:	5f                   	pop    edi
c0009374:	5d                   	pop    ebp
c0009375:	c3                   	ret    
c0009376:	6a 02                	push   0x2
c0009378:	bb 01 00 00 00       	mov    ebx,0x1
c000937d:	50                   	push   eax
c000937e:	e8 b9 fe ff ff       	call   c000923c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009383:	58                   	pop    eax
c0009384:	5a                   	pop    edx
c0009385:	eb bd                	jmp    c0009344 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0009387:	6a 04                	push   0x4
c0009389:	8d 45 01             	lea    eax,[ebp+0x1]
c000938c:	55                   	push   ebp
c000938d:	a3 24 ff 01 c0       	mov    ds:0xc001ff24,eax
c0009392:	e8 a5 fe ff ff       	call   c000923c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009397:	59                   	pop    ecx
c0009398:	89 e8                	mov    eax,ebp
c000939a:	5b                   	pop    ebx
c000939b:	c1 e0 0c             	shl    eax,0xc
c000939e:	83 c4 1c             	add    esp,0x1c
c00093a1:	5b                   	pop    ebx
c00093a2:	5e                   	pop    esi
c00093a3:	5f                   	pop    edi
c00093a4:	5d                   	pop    ebp
c00093a5:	c3                   	ret    

c00093a6 <Virt::freeSwapfilePage(unsigned long)>:
c00093a6:	53                   	push   ebx
c00093a7:	8b 15 ac 2f 02 c0    	mov    edx,DWORD PTR ds:0xc0022fac
c00093ad:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00093b1:	b8 01 00 00 00       	mov    eax,0x1
c00093b6:	89 cb                	mov    ebx,ecx
c00093b8:	d3 e0                	shl    eax,cl
c00093ba:	c1 eb 05             	shr    ebx,0x5
c00093bd:	f7 d0                	not    eax
c00093bf:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c00093c2:	5b                   	pop    ebx
c00093c3:	c3                   	ret    

c00093c4 <Virt::swapIDToSector(unsigned long)>:
c00093c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00093c8:	0f af 05 2c ff 01 c0 	imul   eax,DWORD PTR ds:0xc001ff2c
c00093cf:	03 05 34 ff 01 c0    	add    eax,DWORD PTR ds:0xc001ff34
c00093d5:	c3                   	ret    

c00093d6 <Virt::allocateSwapfilePage()>:
c00093d6:	55                   	push   ebp
c00093d7:	31 d2                	xor    edx,edx
c00093d9:	57                   	push   edi
c00093da:	56                   	push   esi
c00093db:	53                   	push   ebx
c00093dc:	83 ec 0c             	sub    esp,0xc
c00093df:	8b 0d 2c ff 01 c0    	mov    ecx,DWORD PTR ds:0xc001ff2c
c00093e5:	a1 30 ff 01 c0       	mov    eax,ds:0xc001ff30
c00093ea:	f7 f1                	div    ecx
c00093ec:	39 0d 30 ff 01 c0    	cmp    DWORD PTR ds:0xc001ff30,ecx
c00093f2:	72 2d                	jb     c0009421 <Virt::allocateSwapfilePage()+0x4b>
c00093f4:	8b 35 ac 2f 02 c0    	mov    esi,DWORD PTR ds:0xc0022fac
c00093fa:	8b 16                	mov    edx,DWORD PTR [esi]
c00093fc:	f6 c2 01             	test   dl,0x1
c00093ff:	74 3c                	je     c000943d <Virt::allocateSwapfilePage()+0x67>
c0009401:	31 c9                	xor    ecx,ecx
c0009403:	bf 01 00 00 00       	mov    edi,0x1
c0009408:	eb 12                	jmp    c000941c <Virt::allocateSwapfilePage()+0x46>
c000940a:	89 fd                	mov    ebp,edi
c000940c:	89 ca                	mov    edx,ecx
c000940e:	d3 e5                	shl    ebp,cl
c0009410:	c1 ea 05             	shr    edx,0x5
c0009413:	8d 1c 96             	lea    ebx,[esi+edx*4]
c0009416:	8b 13                	mov    edx,DWORD PTR [ebx]
c0009418:	85 ea                	test   edx,ebp
c000941a:	74 2a                	je     c0009446 <Virt::allocateSwapfilePage()+0x70>
c000941c:	41                   	inc    ecx
c000941d:	39 c8                	cmp    eax,ecx
c000941f:	77 e9                	ja     c000940a <Virt::allocateSwapfilePage()+0x34>
c0009421:	83 ec 0c             	sub    esp,0xc
c0009424:	68 37 e2 01 c0       	push   0xc001e237
c0009429:	e8 79 6e 00 00       	call   c00102a7 <KePanic(char const*)>
c000942e:	83 c4 10             	add    esp,0x10
c0009431:	31 c9                	xor    ecx,ecx
c0009433:	83 c4 0c             	add    esp,0xc
c0009436:	89 c8                	mov    eax,ecx
c0009438:	5b                   	pop    ebx
c0009439:	5e                   	pop    esi
c000943a:	5f                   	pop    edi
c000943b:	5d                   	pop    ebp
c000943c:	c3                   	ret    
c000943d:	89 f3                	mov    ebx,esi
c000943f:	bd 01 00 00 00       	mov    ebp,0x1
c0009444:	31 c9                	xor    ecx,ecx
c0009446:	09 ea                	or     edx,ebp
c0009448:	89 c8                	mov    eax,ecx
c000944a:	89 13                	mov    DWORD PTR [ebx],edx
c000944c:	83 c4 0c             	add    esp,0xc
c000944f:	5b                   	pop    ebx
c0009450:	5e                   	pop    esi
c0009451:	5f                   	pop    edi
c0009452:	5d                   	pop    ebp
c0009453:	c3                   	ret    

c0009454 <Virt::virtualMemorySetup()>:
c0009454:	53                   	push   ebx
c0009455:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000945a:	6a 0f                	push   0xf
c000945c:	53                   	push   ebx
c000945d:	43                   	inc    ebx
c000945e:	e8 d9 fd ff ff       	call   c000923c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009463:	58                   	pop    eax
c0009464:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000946a:	5a                   	pop    edx
c000946b:	75 ed                	jne    c000945a <Virt::virtualMemorySetup()+0x6>
c000946d:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0009472:	6a 00                	push   0x0
c0009474:	53                   	push   ebx
c0009475:	43                   	inc    ebx
c0009476:	e8 c1 fd ff ff       	call   c000923c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000947b:	59                   	pop    ecx
c000947c:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0009482:	58                   	pop    eax
c0009483:	75 ed                	jne    c0009472 <Virt::virtualMemorySetup()+0x1e>
c0009485:	bb 00 00 0d 00       	mov    ebx,0xd0000
c000948a:	6a 0f                	push   0xf
c000948c:	53                   	push   ebx
c000948d:	43                   	inc    ebx
c000948e:	e8 a9 fd ff ff       	call   c000923c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009493:	58                   	pop    eax
c0009494:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c000949a:	5a                   	pop    edx
c000949b:	75 ed                	jne    c000948a <Virt::virtualMemorySetup()+0x36>
c000949d:	5b                   	pop    ebx
c000949e:	c3                   	ret    

c000949f <Virt::setupPageSwapping(int)>:
c000949f:	53                   	push   ebx
c00094a0:	83 ec 0c             	sub    esp,0xc
c00094a3:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00094a7:	a1 28 54 02 c0       	mov    eax,ds:0xc0025428
c00094ac:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00094b2:	8b 10                	mov    edx,DWORD PTR [eax]
c00094b4:	53                   	push   ebx
c00094b5:	c1 e3 0b             	shl    ebx,0xb
c00094b8:	68 4e e2 01 c0       	push   0xc001e24e
c00094bd:	50                   	push   eax
c00094be:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c00094c1:	89 1d 30 ff 01 c0    	mov    DWORD PTR ds:0xc001ff30,ebx
c00094c7:	c6 05 38 ff 01 c0 43 	mov    BYTE PTR ds:0xc001ff38,0x43
c00094ce:	c1 eb 08             	shr    ebx,0x8
c00094d1:	a3 34 ff 01 c0       	mov    ds:0xc001ff34,eax
c00094d6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00094d9:	c7 05 2c ff 01 c0 08 00 00 00 	mov    DWORD PTR ds:0xc001ff2c,0x8
c00094e3:	e8 d1 e2 ff ff       	call   c00077b9 <malloc>
c00094e8:	83 c4 0c             	add    esp,0xc
c00094eb:	89 c1                	mov    ecx,eax
c00094ed:	a3 ac 2f 02 c0       	mov    ds:0xc0022fac,eax
c00094f2:	31 d2                	xor    edx,edx
c00094f4:	a1 30 ff 01 c0       	mov    eax,ds:0xc001ff30
c00094f9:	f7 35 2c ff 01 c0    	div    DWORD PTR ds:0xc001ff2c
c00094ff:	c1 e8 05             	shr    eax,0x5
c0009502:	50                   	push   eax
c0009503:	6a 00                	push   0x0
c0009505:	51                   	push   ecx
c0009506:	e8 c5 6f ff ff       	call   c00004d0 <memset>
c000950b:	83 c4 18             	add    esp,0x18
c000950e:	5b                   	pop    ebx
c000950f:	c3                   	ret    

c0009510 <VAS::VAS(VAS*)>:
c0009510:	83 ec 0c             	sub    esp,0xc
c0009513:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009517:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000951e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009522:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009529:	83 ec 0c             	sub    esp,0xc
c000952c:	68 f0 e0 01 c0       	push   0xc001e0f0
c0009531:	e8 71 6d 00 00       	call   c00102a7 <KePanic(char const*)>
c0009536:	83 c4 10             	add    esp,0x10
c0009539:	90                   	nop
c000953a:	83 c4 0c             	add    esp,0xc
c000953d:	c3                   	ret    

c000953e <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c000953e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009542:	89 c2                	mov    edx,eax
c0009544:	c1 e8 0a             	shr    eax,0xa
c0009547:	c1 ea 16             	shr    edx,0x16
c000954a:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c000954f:	19 c9                	sbb    ecx,ecx
c0009551:	c1 e2 0c             	shl    edx,0xc
c0009554:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c000955a:	25 fc 0f 00 00       	and    eax,0xffc
c000955f:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0009566:	01 d0                	add    eax,edx
c0009568:	c3                   	ret    
c0009569:	90                   	nop

c000956a <VAS::getPageTableEntry(unsigned long)>:
c000956a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000956e:	89 ca                	mov    edx,ecx
c0009570:	c1 e9 0a             	shr    ecx,0xa
c0009573:	c1 ea 16             	shr    edx,0x16
c0009576:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c000957c:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0009582:	c1 e0 0c             	shl    eax,0xc
c0009585:	8d 04 08             	lea    eax,[eax+ecx*1]
c0009588:	c3                   	ret    

c0009589 <Virt::freeKernelVirtualPages(unsigned long)>:
c0009589:	57                   	push   edi
c000958a:	56                   	push   esi
c000958b:	be 01 00 00 00       	mov    esi,0x1
c0009590:	53                   	push   ebx
c0009591:	83 ec 10             	sub    esp,0x10
c0009594:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0009598:	c1 eb 0c             	shr    ebx,0xc
c000959b:	eb 3f                	jmp    c00095dc <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c000959d:	83 ec 08             	sub    esp,0x8
c00095a0:	a1 b0 2f 02 c0       	mov    eax,ds:0xc0022fb0
c00095a5:	57                   	push   edi
c00095a6:	50                   	push   eax
c00095a7:	e8 be ff ff ff       	call   c000956a <VAS::getPageTableEntry(unsigned long)>
c00095ac:	83 c4 10             	add    esp,0x10
c00095af:	8b 00                	mov    eax,DWORD PTR [eax]
c00095b1:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00095b5:	f6 c4 04             	test   ah,0x4
c00095b8:	75 60                	jne    c000961a <Virt::freeKernelVirtualPages(unsigned long)+0x91>
c00095ba:	80 fa 04             	cmp    dl,0x4
c00095bd:	74 79                	je     c0009638 <Virt::freeKernelVirtualPages(unsigned long)+0xaf>
c00095bf:	80 fa 02             	cmp    dl,0x2
c00095c2:	0f 84 89 00 00 00    	je     c0009651 <Virt::freeKernelVirtualPages(unsigned long)+0xc8>
c00095c8:	80 fa 03             	cmp    dl,0x3
c00095cb:	0f 84 ae 00 00 00    	je     c000967f <Virt::freeKernelVirtualPages(unsigned long)+0xf6>
c00095d1:	fe ca                	dec    dl
c00095d3:	0f 84 93 00 00 00    	je     c000966c <Virt::freeKernelVirtualPages(unsigned long)+0xe3>
c00095d9:	43                   	inc    ebx
c00095da:	31 f6                	xor    esi,esi
c00095dc:	53                   	push   ebx
c00095dd:	89 df                	mov    edi,ebx
c00095df:	e8 8d fc ff ff       	call   c0009271 <Virt::getPageState(unsigned long)>
c00095e4:	c1 e7 0c             	shl    edi,0xc
c00095e7:	5a                   	pop    edx
c00095e8:	84 c0                	test   al,al
c00095ea:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00095ee:	75 ad                	jne    c000959d <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c00095f0:	83 ec 0c             	sub    esp,0xc
c00095f3:	68 65 e2 01 c0       	push   0xc001e265
c00095f8:	e8 aa 6c 00 00       	call   c00102a7 <KePanic(char const*)>
c00095fd:	5a                   	pop    edx
c00095fe:	59                   	pop    ecx
c00095ff:	57                   	push   edi
c0009600:	8b 3d b0 2f 02 c0    	mov    edi,DWORD PTR ds:0xc0022fb0
c0009606:	57                   	push   edi
c0009607:	e8 5e ff ff ff       	call   c000956a <VAS::getPageTableEntry(unsigned long)>
c000960c:	83 c4 10             	add    esp,0x10
c000960f:	8b 00                	mov    eax,DWORD PTR [eax]
c0009611:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0009615:	f6 c4 04             	test   ah,0x4
c0009618:	74 bf                	je     c00095d9 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000961a:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c000961e:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009623:	83 ec 0c             	sub    esp,0xc
c0009626:	50                   	push   eax
c0009627:	e8 07 e4 ff ff       	call   c0007a33 <Phys::freePage(unsigned long)>
c000962c:	83 c4 10             	add    esp,0x10
c000962f:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0009633:	80 fa 04             	cmp    dl,0x4
c0009636:	75 87                	jne    c00095bf <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c0009638:	89 f0                	mov    eax,esi
c000963a:	84 c0                	test   al,al
c000963c:	75 47                	jne    c0009685 <Virt::freeKernelVirtualPages(unsigned long)+0xfc>
c000963e:	c7 44 24 20 14 e1 01 c0 	mov    DWORD PTR [esp+0x20],0xc001e114
c0009646:	83 c4 10             	add    esp,0x10
c0009649:	5b                   	pop    ebx
c000964a:	5e                   	pop    esi
c000964b:	5f                   	pop    edi
c000964c:	e9 56 6c 00 00       	jmp    c00102a7 <KePanic(char const*)>
c0009651:	89 f0                	mov    eax,esi
c0009653:	84 c0                	test   al,al
c0009655:	75 15                	jne    c000966c <Virt::freeKernelVirtualPages(unsigned long)+0xe3>
c0009657:	83 ec 0c             	sub    esp,0xc
c000965a:	68 81 e2 01 c0       	push   0xc001e281
c000965f:	e8 43 6c 00 00       	call   c00102a7 <KePanic(char const*)>
c0009664:	83 c4 10             	add    esp,0x10
c0009667:	e9 6d ff ff ff       	jmp    c00095d9 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000966c:	83 ec 08             	sub    esp,0x8
c000966f:	6a 00                	push   0x0
c0009671:	53                   	push   ebx
c0009672:	e8 c5 fb ff ff       	call   c000923c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009677:	83 c4 10             	add    esp,0x10
c000967a:	e9 5a ff ff ff       	jmp    c00095d9 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000967f:	89 f0                	mov    eax,esi
c0009681:	84 c0                	test   al,al
c0009683:	75 15                	jne    c000969a <Virt::freeKernelVirtualPages(unsigned long)+0x111>
c0009685:	83 ec 08             	sub    esp,0x8
c0009688:	6a 00                	push   0x0
c000968a:	53                   	push   ebx
c000968b:	e8 ac fb ff ff       	call   c000923c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009690:	83 c4 10             	add    esp,0x10
c0009693:	83 c4 10             	add    esp,0x10
c0009696:	5b                   	pop    ebx
c0009697:	5e                   	pop    esi
c0009698:	5f                   	pop    edi
c0009699:	c3                   	ret    
c000969a:	c7 44 24 20 9d e2 01 c0 	mov    DWORD PTR [esp+0x20],0xc001e29d
c00096a2:	83 c4 10             	add    esp,0x10
c00096a5:	5b                   	pop    ebx
c00096a6:	5e                   	pop    esi
c00096a7:	5f                   	pop    edi
c00096a8:	e9 fa 6b 00 00       	jmp    c00102a7 <KePanic(char const*)>
c00096ad:	90                   	nop

c00096ae <VAS::freeAllocatedPages(unsigned long)>:
c00096ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00096b2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00096b6:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c00096ba:	74 09                	je     c00096c5 <VAS::freeAllocatedPages(unsigned long)+0x17>
c00096bc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00096c0:	e9 c4 fe ff ff       	jmp    c0009589 <Virt::freeKernelVirtualPages(unsigned long)>
c00096c5:	c7 44 24 04 38 e1 01 c0 	mov    DWORD PTR [esp+0x4],0xc001e138
c00096cd:	e9 80 0e 00 00       	jmp    c000a552 <Dbg::kprintf(char const*, ...)>

c00096d2 <VAS::virtualToPhysical(unsigned long)>:
c00096d2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00096d6:	50                   	push   eax
c00096d7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00096db:	52                   	push   edx
c00096dc:	e8 89 fe ff ff       	call   c000956a <VAS::getPageTableEntry(unsigned long)>
c00096e1:	59                   	pop    ecx
c00096e2:	8b 00                	mov    eax,DWORD PTR [eax]
c00096e4:	5a                   	pop    edx
c00096e5:	25 00 f0 ff ff       	and    eax,0xfffff000
c00096ea:	c3                   	ret    
c00096eb:	90                   	nop

c00096ec <VAS::reflagRange(unsigned long, int, int, int)>:
c00096ec:	55                   	push   ebp
c00096ed:	57                   	push   edi
c00096ee:	56                   	push   esi
c00096ef:	53                   	push   ebx
c00096f0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00096f4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00096f8:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00096fc:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0009700:	85 db                	test   ebx,ebx
c0009702:	7e 22                	jle    c0009726 <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c0009704:	c1 e3 0c             	shl    ebx,0xc
c0009707:	01 f3                	add    ebx,esi
c0009709:	56                   	push   esi
c000970a:	81 c6 00 10 00 00    	add    esi,0x1000
c0009710:	55                   	push   ebp
c0009711:	e8 54 fe ff ff       	call   c000956a <VAS::getPageTableEntry(unsigned long)>
c0009716:	5a                   	pop    edx
c0009717:	59                   	pop    ecx
c0009718:	8b 08                	mov    ecx,DWORD PTR [eax]
c000971a:	21 f9                	and    ecx,edi
c000971c:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c0009720:	39 f3                	cmp    ebx,esi
c0009722:	89 08                	mov    DWORD PTR [eax],ecx
c0009724:	75 e3                	jne    c0009709 <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c0009726:	5b                   	pop    ebx
c0009727:	5e                   	pop    esi
c0009728:	5f                   	pop    edi
c0009729:	5d                   	pop    ebp
c000972a:	c3                   	ret    
c000972b:	90                   	nop

c000972c <VAS::VAS()>:
c000972c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009730:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009737:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000973b:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009742:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009746:	a3 b0 2f 02 c0       	mov    ds:0xc0022fb0,eax
c000974b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000974f:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0009753:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009757:	c6 00 01             	mov    BYTE PTR [eax],0x1
c000975a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000975e:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0009765:	ba 7d 10 02 c0       	mov    edx,0xc002107d
c000976a:	b8 00 10 02 c0       	mov    eax,0xc0021000
c000976f:	29 c2                	sub    edx,eax
c0009771:	89 d0                	mov    eax,edx
c0009773:	05 ff 0f 00 00       	add    eax,0xfff
c0009778:	c1 e8 0c             	shr    eax,0xc
c000977b:	89 c2                	mov    edx,eax
c000977d:	b8 00 10 02 c0       	mov    eax,0xc0021000
c0009782:	6a 04                	push   0x4
c0009784:	6a ff                	push   0xffffffff
c0009786:	52                   	push   edx
c0009787:	50                   	push   eax
c0009788:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000978c:	e8 5b ff ff ff       	call   c00096ec <VAS::reflagRange(unsigned long, int, int, int)>
c0009791:	83 c4 14             	add    esp,0x14
c0009794:	90                   	nop
c0009795:	c3                   	ret    

c0009796 <VAS::setToWriteCombining(unsigned long, int)>:
c0009796:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c000979b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00097a1:	f6 80 8c 11 00 00 20 	test   BYTE PTR [eax+0x118c],0x20
c00097a8:	75 01                	jne    c00097ab <VAS::setToWriteCombining(unsigned long, int)+0x15>
c00097aa:	c3                   	ret    
c00097ab:	68 80 00 00 00       	push   0x80
c00097b0:	6a ff                	push   0xffffffff
c00097b2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00097b6:	50                   	push   eax
c00097b7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00097bb:	52                   	push   edx
c00097bc:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00097c0:	51                   	push   ecx
c00097c1:	e8 26 ff ff ff       	call   c00096ec <VAS::reflagRange(unsigned long, int, int, int)>
c00097c6:	83 c4 14             	add    esp,0x14
c00097c9:	c3                   	ret    

c00097ca <VAS::mapOtherVASIn(bool, VAS*)>:
c00097ca:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c00097cf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00097d3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00097d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00097da:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00097dd:	19 c0                	sbb    eax,eax
c00097df:	83 ca 03             	or     edx,0x3
c00097e2:	83 e0 fc             	and    eax,0xfffffffc
c00097e5:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c00097ec:	0f 20 d8             	mov    eax,cr3
c00097ef:	0f 22 d8             	mov    cr3,eax
c00097f2:	c3                   	ret    
c00097f3:	90                   	nop

c00097f4 <VAS::~VAS()>:
c00097f4:	83 ec 2c             	sub    esp,0x2c
c00097f7:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00097ff:	fa                   	cli    
c0009800:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c0009805:	40                   	inc    eax
c0009806:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c000980b:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009810:	8b 00                	mov    eax,DWORD PTR [eax]
c0009812:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009815:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c000981b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000981f:	6a 01                	push   0x1
c0009821:	50                   	push   eax
c0009822:	e8 a3 ff ff ff       	call   c00097ca <VAS::mapOtherVASIn(bool, VAS*)>
c0009827:	83 c4 0c             	add    esp,0xc
c000982a:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0009832:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c000983a:	0f 8f d4 00 00 00    	jg     c0009914 <VAS::~VAS()+0x120>
c0009840:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009844:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009847:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000984b:	c1 e2 02             	shl    edx,0x2
c000984e:	01 d0                	add    eax,edx
c0009850:	8b 00                	mov    eax,DWORD PTR [eax]
c0009852:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009856:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000985a:	83 e0 01             	and    eax,0x1
c000985d:	0f 84 a8 00 00 00    	je     c000990b <VAS::~VAS()+0x117>
c0009863:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000986b:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0009873:	7f 72                	jg     c00098e7 <VAS::~VAS()+0xf3>
c0009875:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009879:	c1 e0 0a             	shl    eax,0xa
c000987c:	89 c2                	mov    edx,eax
c000987e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009882:	01 d0                	add    eax,edx
c0009884:	c1 e0 0c             	shl    eax,0xc
c0009887:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000988b:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009890:	8b 00                	mov    eax,DWORD PTR [eax]
c0009892:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009895:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c000989b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000989f:	6a 01                	push   0x1
c00098a1:	50                   	push   eax
c00098a2:	e8 97 fc ff ff       	call   c000953e <VAS::getForeignPageTableEntry(bool, unsigned long)>
c00098a7:	83 c4 0c             	add    esp,0xc
c00098aa:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00098ae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00098b2:	8b 00                	mov    eax,DWORD PTR [eax]
c00098b4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00098b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00098bc:	25 01 04 00 00       	and    eax,0x401
c00098c1:	3d 01 04 00 00       	cmp    eax,0x401
c00098c6:	75 19                	jne    c00098e1 <VAS::~VAS()+0xed>
c00098c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00098cc:	25 00 f0 ff ff       	and    eax,0xfffff000
c00098d1:	83 ec 0c             	sub    esp,0xc
c00098d4:	50                   	push   eax
c00098d5:	e8 59 e1 ff ff       	call   c0007a33 <Phys::freePage(unsigned long)>
c00098da:	83 c4 10             	add    esp,0x10
c00098dd:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00098e1:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00098e5:	eb 84                	jmp    c000986b <VAS::~VAS()+0x77>
c00098e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00098eb:	25 00 04 00 00       	and    eax,0x400
c00098f0:	74 19                	je     c000990b <VAS::~VAS()+0x117>
c00098f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00098f6:	25 00 f0 ff ff       	and    eax,0xfffff000
c00098fb:	83 ec 0c             	sub    esp,0xc
c00098fe:	50                   	push   eax
c00098ff:	e8 2f e1 ff ff       	call   c0007a33 <Phys::freePage(unsigned long)>
c0009904:	83 c4 10             	add    esp,0x10
c0009907:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000990b:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000990f:	e9 1e ff ff ff       	jmp    c0009832 <VAS::~VAS()+0x3e>
c0009914:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009918:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000991b:	83 ec 0c             	sub    esp,0xc
c000991e:	50                   	push   eax
c000991f:	e8 65 fc ff ff       	call   c0009589 <Virt::freeKernelVirtualPages(unsigned long)>
c0009924:	83 c4 10             	add    esp,0x10
c0009927:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000992b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000992e:	83 ec 0c             	sub    esp,0xc
c0009931:	50                   	push   eax
c0009932:	e8 fc e0 ff ff       	call   c0007a33 <Phys::freePage(unsigned long)>
c0009937:	83 c4 10             	add    esp,0x10
c000993a:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000993e:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c0009943:	48                   	dec    eax
c0009944:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c0009949:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c000994e:	85 c0                	test   eax,eax
c0009950:	75 01                	jne    c0009953 <VAS::~VAS()+0x15f>
c0009952:	fb                   	sti    
c0009953:	90                   	nop
c0009954:	83 c4 2c             	add    esp,0x2c
c0009957:	c3                   	ret    

c0009958 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0009958:	55                   	push   ebp
c0009959:	57                   	push   edi
c000995a:	56                   	push   esi
c000995b:	53                   	push   ebx
c000995c:	83 ec 1c             	sub    esp,0x1c
c000995f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0009963:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009967:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c000996d:	77 0b                	ja     c000997a <VAS::mapPage(unsigned long, unsigned long, int)+0x22>
c000996f:	0f 20 d8             	mov    eax,cr3
c0009972:	0f 20 d8             	mov    eax,cr3
c0009975:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c0009978:	75 47                	jne    c00099c1 <VAS::mapPage(unsigned long, unsigned long, int)+0x69>
c000997a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000997e:	09 d8                	or     eax,ebx
c0009980:	a9 ff 0f 00 00       	test   eax,0xfff
c0009985:	75 57                	jne    c00099de <VAS::mapPage(unsigned long, unsigned long, int)+0x86>
c0009987:	89 de                	mov    esi,ebx
c0009989:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000998c:	c1 ee 16             	shr    esi,0x16
c000998f:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0009996:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c000999a:	74 54                	je     c00099f0 <VAS::mapPage(unsigned long, unsigned long, int)+0x98>
c000999c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00099a0:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c00099a6:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c00099aa:	c1 e6 0c             	shl    esi,0xc
c00099ad:	c1 eb 0a             	shr    ebx,0xa
c00099b0:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c00099b6:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c00099b9:	83 c4 1c             	add    esp,0x1c
c00099bc:	5b                   	pop    ebx
c00099bd:	5e                   	pop    esi
c00099be:	5f                   	pop    edi
c00099bf:	5d                   	pop    ebp
c00099c0:	c3                   	ret    
c00099c1:	83 ec 0c             	sub    esp,0xc
c00099c4:	68 5c e1 01 c0       	push   0xc001e15c
c00099c9:	e8 84 0b 00 00       	call   c000a552 <Dbg::kprintf(char const*, ...)>
c00099ce:	83 c4 10             	add    esp,0x10
c00099d1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00099d5:	09 d8                	or     eax,ebx
c00099d7:	a9 ff 0f 00 00       	test   eax,0xfff
c00099dc:	74 a9                	je     c0009987 <VAS::mapPage(unsigned long, unsigned long, int)+0x2f>
c00099de:	83 ec 0c             	sub    esp,0xc
c00099e1:	68 c4 e1 01 c0       	push   0xc001e1c4
c00099e6:	e8 bc 68 00 00       	call   c00102a7 <KePanic(char const*)>
c00099eb:	83 c4 10             	add    esp,0x10
c00099ee:	eb 97                	jmp    c0009987 <VAS::mapPage(unsigned long, unsigned long, int)+0x2f>
c00099f0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00099f4:	e8 9c e0 ff ff       	call   c0007a95 <Phys::allocatePage()>
c00099f9:	83 ec 0c             	sub    esp,0xc
c00099fc:	89 c5                	mov    ebp,eax
c00099fe:	8b 0d b0 2f 02 c0    	mov    ecx,DWORD PTR ds:0xc0022fb0
c0009a04:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0009a08:	6a 01                	push   0x1
c0009a0a:	e8 86 f8 ff ff       	call   c0009295 <Virt::allocateKernelVirtualPages(int)>
c0009a0f:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0009a16:	6a 01                	push   0x1
c0009a18:	50                   	push   eax
c0009a19:	55                   	push   ebp
c0009a1a:	81 cd 07 04 00 00    	or     ebp,0x407
c0009a20:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0009a24:	51                   	push   ecx
c0009a25:	e8 28 02 00 00       	call   c0009c52 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009a2a:	83 c4 1c             	add    esp,0x1c
c0009a2d:	68 00 10 00 00       	push   0x1000
c0009a32:	6a 00                	push   0x0
c0009a34:	50                   	push   eax
c0009a35:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009a39:	e8 92 6a ff ff       	call   c00004d0 <memset>
c0009a3e:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0009a42:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009a45:	e8 3f fb ff ff       	call   c0009589 <Virt::freeKernelVirtualPages(unsigned long)>
c0009a4a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009a4e:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009a51:	83 c4 10             	add    esp,0x10
c0009a54:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0009a57:	e9 40 ff ff ff       	jmp    c000999c <VAS::mapPage(unsigned long, unsigned long, int)+0x44>

c0009a5c <VAS::allocatePages(int, int)>:
c0009a5c:	55                   	push   ebp
c0009a5d:	57                   	push   edi
c0009a5e:	56                   	push   esi
c0009a5f:	53                   	push   ebx
c0009a60:	83 ec 1c             	sub    esp,0x1c
c0009a63:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009a67:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c0009a6c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009a72:	8a 80 8d 11 00 00    	mov    al,BYTE PTR [eax+0x118d]
c0009a78:	83 e0 01             	and    eax,0x1
c0009a7b:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c0009a7f:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0009a83:	0f 85 cc 00 00 00    	jne    c0009b55 <VAS::allocatePages(int, int)+0xf9>
c0009a89:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0009a8c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009a90:	85 c0                	test   eax,eax
c0009a92:	0f 84 a1 00 00 00    	je     c0009b39 <VAS::allocatePages(int, int)+0xdd>
c0009a98:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0009a9c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009aa0:	c1 e6 0c             	shl    esi,0xc
c0009aa3:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0009aa7:	85 c0                	test   eax,eax
c0009aa9:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0009aac:	7e 33                	jle    c0009ae1 <VAS::allocatePages(int, int)+0x85>
c0009aae:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0009ab2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009ab6:	81 cd 00 04 00 00    	or     ebp,0x400
c0009abc:	e8 d4 df ff ff       	call   c0007a95 <Phys::allocatePage()>
c0009ac1:	55                   	push   ebp
c0009ac2:	53                   	push   ebx
c0009ac3:	50                   	push   eax
c0009ac4:	57                   	push   edi
c0009ac5:	e8 8e fe ff ff       	call   c0009958 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009aca:	83 c4 10             	add    esp,0x10
c0009acd:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009ad2:	74 03                	je     c0009ad7 <VAS::allocatePages(int, int)+0x7b>
c0009ad4:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009ad7:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009add:	39 de                	cmp    esi,ebx
c0009adf:	75 db                	jne    c0009abc <VAS::allocatePages(int, int)+0x60>
c0009ae1:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009ae6:	75 12                	jne    c0009afa <VAS::allocatePages(int, int)+0x9e>
c0009ae8:	0f 20 d8             	mov    eax,cr3
c0009aeb:	0f 22 d8             	mov    cr3,eax
c0009aee:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009af2:	83 c4 1c             	add    esp,0x1c
c0009af5:	5b                   	pop    ebx
c0009af6:	5e                   	pop    esi
c0009af7:	5f                   	pop    edi
c0009af8:	5d                   	pop    ebp
c0009af9:	c3                   	ret    
c0009afa:	c1 ee 0a             	shr    esi,0xa
c0009afd:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009b01:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0009b07:	c1 eb 0a             	shr    ebx,0xa
c0009b0a:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c0009b10:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0009b16:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0009b1c:	39 c3                	cmp    ebx,eax
c0009b1e:	77 ce                	ja     c0009aee <VAS::allocatePages(int, int)+0x92>
c0009b20:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009b23:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009b29:	39 d8                	cmp    eax,ebx
c0009b2b:	73 f3                	jae    c0009b20 <VAS::allocatePages(int, int)+0xc4>
c0009b2d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009b31:	83 c4 1c             	add    esp,0x1c
c0009b34:	5b                   	pop    ebx
c0009b35:	5e                   	pop    esi
c0009b36:	5f                   	pop    edi
c0009b37:	5d                   	pop    ebp
c0009b38:	c3                   	ret    
c0009b39:	83 ec 0c             	sub    esp,0xc
c0009b3c:	68 e8 e1 01 c0       	push   0xc001e1e8
c0009b41:	e8 61 67 00 00       	call   c00102a7 <KePanic(char const*)>
c0009b46:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0009b49:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009b4d:	83 c4 10             	add    esp,0x10
c0009b50:	e9 43 ff ff ff       	jmp    c0009a98 <VAS::allocatePages(int, int)+0x3c>
c0009b55:	83 ec 0c             	sub    esp,0xc
c0009b58:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0009b5c:	51                   	push   ecx
c0009b5d:	e8 33 f7 ff ff       	call   c0009295 <Virt::allocateKernelVirtualPages(int)>
c0009b62:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009b66:	83 c4 10             	add    esp,0x10
c0009b69:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0009b6e:	0f 87 9b 00 00 00    	ja     c0009c0f <VAS::allocatePages(int, int)+0x1b3>
c0009b74:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009b78:	85 d2                	test   edx,edx
c0009b7a:	7e 3c                	jle    c0009bb8 <VAS::allocatePages(int, int)+0x15c>
c0009b7c:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0009b80:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0009b84:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009b88:	c1 e5 0c             	shl    ebp,0xc
c0009b8b:	81 ce 00 04 00 00    	or     esi,0x400
c0009b91:	01 dd                	add    ebp,ebx
c0009b93:	e8 fd de ff ff       	call   c0007a95 <Phys::allocatePage()>
c0009b98:	56                   	push   esi
c0009b99:	53                   	push   ebx
c0009b9a:	50                   	push   eax
c0009b9b:	57                   	push   edi
c0009b9c:	e8 b7 fd ff ff       	call   c0009958 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009ba1:	83 c4 10             	add    esp,0x10
c0009ba4:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009ba9:	74 03                	je     c0009bae <VAS::allocatePages(int, int)+0x152>
c0009bab:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009bae:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009bb4:	39 dd                	cmp    ebp,ebx
c0009bb6:	75 db                	jne    c0009b93 <VAS::allocatePages(int, int)+0x137>
c0009bb8:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009bbd:	0f 84 25 ff ff ff    	je     c0009ae8 <VAS::allocatePages(int, int)+0x8c>
c0009bc3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009bc7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009bcb:	89 d3                	mov    ebx,edx
c0009bcd:	c1 e0 0c             	shl    eax,0xc
c0009bd0:	c1 eb 0a             	shr    ebx,0xa
c0009bd3:	01 d0                	add    eax,edx
c0009bd5:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0009bdb:	c1 e8 0a             	shr    eax,0xa
c0009bde:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0009be4:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009be9:	2d 00 00 40 00       	sub    eax,0x400000
c0009bee:	39 c3                	cmp    ebx,eax
c0009bf0:	0f 87 f8 fe ff ff    	ja     c0009aee <VAS::allocatePages(int, int)+0x92>
c0009bf6:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009bf9:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009bff:	39 d8                	cmp    eax,ebx
c0009c01:	73 f3                	jae    c0009bf6 <VAS::allocatePages(int, int)+0x19a>
c0009c03:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009c07:	83 c4 1c             	add    esp,0x1c
c0009c0a:	5b                   	pop    ebx
c0009c0b:	5e                   	pop    esi
c0009c0c:	5f                   	pop    edi
c0009c0d:	5d                   	pop    ebp
c0009c0e:	c3                   	ret    
c0009c0f:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c0009c14:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009c1a:	f6 80 8c 11 00 00 10 	test   BYTE PTR [eax+0x118c],0x10
c0009c21:	0f 84 4d ff ff ff    	je     c0009b74 <VAS::allocatePages(int, int)+0x118>
c0009c27:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c0009c2f:	e9 40 ff ff ff       	jmp    c0009b74 <VAS::allocatePages(int, int)+0x118>

c0009c34 <VAS::setCPUSpecific(unsigned long)>:
c0009c34:	83 ec 0c             	sub    esp,0xc
c0009c37:	6a 05                	push   0x5
c0009c39:	68 00 00 40 c2       	push   0xc2400000
c0009c3e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009c42:	50                   	push   eax
c0009c43:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009c47:	52                   	push   edx
c0009c48:	e8 0b fd ff ff       	call   c0009958 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009c4d:	83 c4 1c             	add    esp,0x1c
c0009c50:	c3                   	ret    
c0009c51:	90                   	nop

c0009c52 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0009c52:	55                   	push   ebp
c0009c53:	57                   	push   edi
c0009c54:	56                   	push   esi
c0009c55:	53                   	push   ebx
c0009c56:	83 ec 1c             	sub    esp,0x1c
c0009c59:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c0009c5e:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009c62:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009c68:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0009c6c:	8a 80 8d 11 00 00    	mov    al,BYTE PTR [eax+0x118d]
c0009c72:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0009c76:	83 e0 01             	and    eax,0x1
c0009c79:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0009c7d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009c81:	85 c0                	test   eax,eax
c0009c83:	7e 39                	jle    c0009cbe <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c0009c85:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009c89:	89 f3                	mov    ebx,esi
c0009c8b:	c1 e0 0c             	shl    eax,0xc
c0009c8e:	01 f0                	add    eax,esi
c0009c90:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009c94:	55                   	push   ebp
c0009c95:	53                   	push   ebx
c0009c96:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009c9a:	29 f0                	sub    eax,esi
c0009c9c:	01 d8                	add    eax,ebx
c0009c9e:	50                   	push   eax
c0009c9f:	57                   	push   edi
c0009ca0:	e8 b3 fc ff ff       	call   c0009958 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009ca5:	83 c4 10             	add    esp,0x10
c0009ca8:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009cad:	74 03                	je     c0009cb2 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c0009caf:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009cb2:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009cb8:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c0009cbc:	75 d6                	jne    c0009c94 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c0009cbe:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009cc3:	75 10                	jne    c0009cd5 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c0009cc5:	0f 20 d8             	mov    eax,cr3
c0009cc8:	0f 22 d8             	mov    cr3,eax
c0009ccb:	83 c4 1c             	add    esp,0x1c
c0009cce:	89 f0                	mov    eax,esi
c0009cd0:	5b                   	pop    ebx
c0009cd1:	5e                   	pop    esi
c0009cd2:	5f                   	pop    edi
c0009cd3:	5d                   	pop    ebp
c0009cd4:	c3                   	ret    
c0009cd5:	89 f3                	mov    ebx,esi
c0009cd7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009cdb:	c1 eb 0a             	shr    ebx,0xa
c0009cde:	c1 e0 0c             	shl    eax,0xc
c0009ce1:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0009ce7:	01 f0                	add    eax,esi
c0009ce9:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0009cef:	c1 e8 0a             	shr    eax,0xa
c0009cf2:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009cf7:	2d 00 00 40 00       	sub    eax,0x400000
c0009cfc:	39 c3                	cmp    ebx,eax
c0009cfe:	77 cb                	ja     c0009ccb <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c0009d00:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009d03:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009d09:	39 d8                	cmp    eax,ebx
c0009d0b:	73 f3                	jae    c0009d00 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c0009d0d:	83 c4 1c             	add    esp,0x1c
c0009d10:	89 f0                	mov    eax,esi
c0009d12:	5b                   	pop    ebx
c0009d13:	5e                   	pop    esi
c0009d14:	5f                   	pop    edi
c0009d15:	5d                   	pop    ebp
c0009d16:	c3                   	ret    
c0009d17:	90                   	nop

c0009d18 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0009d18:	55                   	push   ebp
c0009d19:	57                   	push   edi
c0009d1a:	56                   	push   esi
c0009d1b:	53                   	push   ebx
c0009d1c:	83 ec 1c             	sub    esp,0x1c
c0009d1f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009d23:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009d27:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c0009d2b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0009d2f:	a9 ff 0f 00 00       	test   eax,0xfff
c0009d34:	75 4a                	jne    c0009d80 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c0009d36:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0009d3a:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009d3d:	c1 eb 16             	shr    ebx,0x16
c0009d40:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c0009d47:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c0009d4b:	74 4d                	je     c0009d9a <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c0009d4d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009d51:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0009d55:	c1 e8 0a             	shr    eax,0xa
c0009d58:	80 fa 01             	cmp    dl,0x1
c0009d5b:	19 d2                	sbb    edx,edx
c0009d5d:	c1 e3 0c             	shl    ebx,0xc
c0009d60:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c0009d64:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0009d6a:	25 fc 0f 00 00       	and    eax,0xffc
c0009d6f:	01 d8                	add    eax,ebx
c0009d71:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0009d78:	83 c4 1c             	add    esp,0x1c
c0009d7b:	5b                   	pop    ebx
c0009d7c:	5e                   	pop    esi
c0009d7d:	5f                   	pop    edi
c0009d7e:	5d                   	pop    ebp
c0009d7f:	c3                   	ret    
c0009d80:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009d84:	83 ec 0c             	sub    esp,0xc
c0009d87:	68 14 e2 01 c0       	push   0xc001e214
c0009d8c:	e8 16 65 00 00       	call   c00102a7 <KePanic(char const*)>
c0009d91:	83 c4 10             	add    esp,0x10
c0009d94:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009d98:	eb 9c                	jmp    c0009d36 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c0009d9a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009d9e:	e8 f2 dc ff ff       	call   c0007a95 <Phys::allocatePage()>
c0009da3:	83 ec 0c             	sub    esp,0xc
c0009da6:	89 c5                	mov    ebp,eax
c0009da8:	8b 0d b0 2f 02 c0    	mov    ecx,DWORD PTR ds:0xc0022fb0
c0009dae:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0009db2:	6a 01                	push   0x1
c0009db4:	e8 dc f4 ff ff       	call   c0009295 <Virt::allocateKernelVirtualPages(int)>
c0009db9:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0009dc0:	6a 01                	push   0x1
c0009dc2:	50                   	push   eax
c0009dc3:	55                   	push   ebp
c0009dc4:	81 cd 07 04 00 00    	or     ebp,0x407
c0009dca:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0009dce:	51                   	push   ecx
c0009dcf:	e8 7e fe ff ff       	call   c0009c52 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009dd4:	83 c4 1c             	add    esp,0x1c
c0009dd7:	68 00 10 00 00       	push   0x1000
c0009ddc:	6a 00                	push   0x0
c0009dde:	50                   	push   eax
c0009ddf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009de3:	e8 e8 66 ff ff       	call   c00004d0 <memset>
c0009de8:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0009dec:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009def:	e8 95 f7 ff ff       	call   c0009589 <Virt::freeKernelVirtualPages(unsigned long)>
c0009df4:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009df7:	83 c4 10             	add    esp,0x10
c0009dfa:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c0009dfd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009e01:	e9 47 ff ff ff       	jmp    c0009d4d <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>

c0009e06 <VAS::VAS(bool)>:
c0009e06:	53                   	push   ebx
c0009e07:	83 ec 28             	sub    esp,0x28
c0009e0a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009e0e:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0009e12:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009e16:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009e1d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009e21:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009e28:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009e2c:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0009e30:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0009e33:	e8 5d dc ff ff       	call   c0007a95 <Phys::allocatePage()>
c0009e38:	89 c2                	mov    edx,eax
c0009e3a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009e3e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0009e41:	8b 1d b0 2f 02 c0    	mov    ebx,DWORD PTR ds:0xc0022fb0
c0009e47:	83 ec 0c             	sub    esp,0xc
c0009e4a:	6a 01                	push   0x1
c0009e4c:	e8 44 f4 ff ff       	call   c0009295 <Virt::allocateKernelVirtualPages(int)>
c0009e51:	83 c4 10             	add    esp,0x10
c0009e54:	89 c2                	mov    edx,eax
c0009e56:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009e5a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0009e5d:	83 ec 0c             	sub    esp,0xc
c0009e60:	6a 03                	push   0x3
c0009e62:	6a 01                	push   0x1
c0009e64:	52                   	push   edx
c0009e65:	50                   	push   eax
c0009e66:	53                   	push   ebx
c0009e67:	e8 e6 fd ff ff       	call   c0009c52 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009e6c:	83 c4 20             	add    esp,0x20
c0009e6f:	89 c2                	mov    edx,eax
c0009e71:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009e75:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0009e78:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0009e80:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c0009e88:	7f 1c                	jg     c0009ea6 <VAS::VAS(bool)+0xa0>
c0009e8a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009e8e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009e91:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009e95:	c1 e2 02             	shl    edx,0x2
c0009e98:	01 d0                	add    eax,edx
c0009e9a:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0009ea0:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0009ea4:	eb da                	jmp    c0009e80 <VAS::VAS(bool)+0x7a>
c0009ea6:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c0009eae:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c0009eb6:	7f 7a                	jg     c0009f32 <VAS::VAS(bool)+0x12c>
c0009eb8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009ebc:	2d 00 02 00 00       	sub    eax,0x200
c0009ec1:	c1 e0 0c             	shl    eax,0xc
c0009ec4:	83 c8 05             	or     eax,0x5
c0009ec7:	89 c2                	mov    edx,eax
c0009ec9:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c0009ece:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009ed4:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c0009eda:	83 e0 10             	and    eax,0x10
c0009edd:	84 c0                	test   al,al
c0009edf:	74 07                	je     c0009ee8 <VAS::VAS(bool)+0xe2>
c0009ee1:	b8 00 01 00 00       	mov    eax,0x100
c0009ee6:	eb 05                	jmp    c0009eed <VAS::VAS(bool)+0xe7>
c0009ee8:	b8 00 00 00 00       	mov    eax,0x0
c0009eed:	09 d0                	or     eax,edx
c0009eef:	89 c1                	mov    ecx,eax
c0009ef1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009ef5:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009ef8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009efc:	c1 e2 02             	shl    edx,0x2
c0009eff:	01 d0                	add    eax,edx
c0009f01:	89 ca                	mov    edx,ecx
c0009f03:	89 10                	mov    DWORD PTR [eax],edx
c0009f05:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009f09:	2d 40 03 00 00       	sub    eax,0x340
c0009f0e:	83 f8 7f             	cmp    eax,0x7f
c0009f11:	77 16                	ja     c0009f29 <VAS::VAS(bool)+0x123>
c0009f13:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009f17:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009f1a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009f1e:	c1 e2 02             	shl    edx,0x2
c0009f21:	01 d0                	add    eax,edx
c0009f23:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0009f29:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0009f2d:	e9 7c ff ff ff       	jmp    c0009eae <VAS::VAS(bool)+0xa8>
c0009f32:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c0009f37:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009f3d:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c0009f43:	83 e0 10             	and    eax,0x10
c0009f46:	84 c0                	test   al,al
c0009f48:	74 07                	je     c0009f51 <VAS::VAS(bool)+0x14b>
c0009f4a:	b8 03 41 00 00       	mov    eax,0x4103
c0009f4f:	eb 05                	jmp    c0009f56 <VAS::VAS(bool)+0x150>
c0009f51:	b8 03 40 00 00       	mov    eax,0x4003
c0009f56:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0009f5a:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c0009f5d:	81 c2 20 0c 00 00    	add    edx,0xc20
c0009f63:	89 02                	mov    DWORD PTR [edx],eax
c0009f65:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c0009f6a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009f70:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0009f76:	83 ec 08             	sub    esp,0x8
c0009f79:	50                   	push   eax
c0009f7a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009f7e:	e8 b1 fc ff ff       	call   c0009c34 <VAS::setCPUSpecific(unsigned long)>
c0009f83:	83 c4 10             	add    esp,0x10
c0009f86:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009f8a:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0009f8d:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c0009f92:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009f98:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c0009f9e:	83 e0 10             	and    eax,0x10
c0009fa1:	84 c0                	test   al,al
c0009fa3:	74 07                	je     c0009fac <VAS::VAS(bool)+0x1a6>
c0009fa5:	b8 00 01 00 00       	mov    eax,0x100
c0009faa:	eb 05                	jmp    c0009fb1 <VAS::VAS(bool)+0x1ab>
c0009fac:	b8 00 00 00 00       	mov    eax,0x0
c0009fb1:	09 c2                	or     edx,eax
c0009fb3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009fb7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009fba:	05 fc 0f 00 00       	add    eax,0xffc
c0009fbf:	83 ca 03             	or     edx,0x3
c0009fc2:	89 10                	mov    DWORD PTR [eax],edx
c0009fc4:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c0009fc9:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009fcf:	83 ec 0c             	sub    esp,0xc
c0009fd2:	50                   	push   eax
c0009fd3:	e8 98 1c 00 00       	call   c000bc70 <Device::getName()>
c0009fd8:	83 c4 10             	add    esp,0x10
c0009fdb:	83 ec 08             	sub    esp,0x8
c0009fde:	68 b7 e2 01 c0       	push   0xc001e2b7
c0009fe3:	50                   	push   eax
c0009fe4:	e8 f7 66 ff ff       	call   c00006e0 <strcmp>
c0009fe9:	83 c4 10             	add    esp,0x10
c0009fec:	85 c0                	test   eax,eax
c0009fee:	0f 94 c0             	sete   al
c0009ff1:	84 c0                	test   al,al
c0009ff3:	0f 84 87 00 00 00    	je     c000a080 <VAS::VAS(bool)+0x27a>
c0009ff9:	fa                   	cli    
c0009ffa:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c0009fff:	40                   	inc    eax
c000a000:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c000a005:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c000a00a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a010:	05 7c 09 00 00       	add    eax,0x97c
c000a015:	83 ec 0c             	sub    esp,0xc
c000a018:	50                   	push   eax
c000a019:	e8 98 d2 ff ff       	call   c00072b6 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a01e:	83 c4 10             	add    esp,0x10
c000a021:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a026:	89 c3                	mov    ebx,eax
c000a028:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c000a02d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a033:	05 7c 09 00 00       	add    eax,0x97c
c000a038:	83 ec 0c             	sub    esp,0xc
c000a03b:	50                   	push   eax
c000a03c:	e8 75 d2 ff ff       	call   c00072b6 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a041:	83 c4 10             	add    esp,0x10
c000a044:	83 ec 08             	sub    esp,0x8
c000a047:	50                   	push   eax
c000a048:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a04c:	e8 19 f5 ff ff       	call   c000956a <VAS::getPageTableEntry(unsigned long)>
c000a051:	83 c4 10             	add    esp,0x10
c000a054:	8b 00                	mov    eax,DWORD PTR [eax]
c000a056:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a05b:	6a 11                	push   0x11
c000a05d:	53                   	push   ebx
c000a05e:	50                   	push   eax
c000a05f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a063:	e8 f0 f8 ff ff       	call   c0009958 <VAS::mapPage(unsigned long, unsigned long, int)>
c000a068:	83 c4 10             	add    esp,0x10
c000a06b:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c000a070:	48                   	dec    eax
c000a071:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c000a076:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c000a07b:	85 c0                	test   eax,eax
c000a07d:	75 01                	jne    c000a080 <VAS::VAS(bool)+0x27a>
c000a07f:	fb                   	sti    
c000a080:	90                   	nop
c000a081:	83 c4 28             	add    esp,0x28
c000a084:	5b                   	pop    ebx
c000a085:	c3                   	ret    

c000a086 <VAS::evict(unsigned long)>:
c000a086:	55                   	push   ebp
c000a087:	57                   	push   edi
c000a088:	56                   	push   esi
c000a089:	53                   	push   ebx
c000a08a:	83 ec 1c             	sub    esp,0x1c
c000a08d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a091:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a095:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a099:	e8 38 f3 ff ff       	call   c00093d6 <Virt::allocateSwapfilePage()>
c000a09e:	8b 0d 2c ff 01 c0    	mov    ecx,DWORD PTR ds:0xc001ff2c
c000a0a4:	89 c7                	mov    edi,eax
c000a0a6:	85 c9                	test   ecx,ecx
c000a0a8:	7e 3e                	jle    c000a0e8 <VAS::evict(unsigned long)+0x62>
c000a0aa:	89 ee                	mov    esi,ebp
c000a0ac:	31 db                	xor    ebx,ebx
c000a0ae:	83 ec 0c             	sub    esp,0xc
c000a0b1:	57                   	push   edi
c000a0b2:	e8 0d f3 ff ff       	call   c00093c4 <Virt::swapIDToSector(unsigned long)>
c000a0b7:	89 34 24             	mov    DWORD PTR [esp],esi
c000a0ba:	01 d8                	add    eax,ebx
c000a0bc:	6a 01                	push   0x1
c000a0be:	31 d2                	xor    edx,edx
c000a0c0:	43                   	inc    ebx
c000a0c1:	52                   	push   edx
c000a0c2:	81 c6 00 02 00 00    	add    esi,0x200
c000a0c8:	50                   	push   eax
c000a0c9:	0f be 05 38 ff 01 c0 	movsx  eax,BYTE PTR ds:0xc001ff38
c000a0d0:	8b 14 85 1c 53 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdace4]
c000a0d7:	52                   	push   edx
c000a0d8:	e8 43 2c 00 00       	call   c000cd20 <LogicalDisk::write(unsigned long long, int, void*)>
c000a0dd:	83 c4 20             	add    esp,0x20
c000a0e0:	39 1d 2c ff 01 c0    	cmp    DWORD PTR ds:0xc001ff2c,ebx
c000a0e6:	7f c6                	jg     c000a0ae <VAS::evict(unsigned long)+0x28>
c000a0e8:	83 ec 08             	sub    esp,0x8
c000a0eb:	c1 e7 0b             	shl    edi,0xb
c000a0ee:	55                   	push   ebp
c000a0ef:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a0f3:	50                   	push   eax
c000a0f4:	e8 71 f4 ff ff       	call   c000956a <VAS::getPageTableEntry(unsigned long)>
c000a0f9:	8b 10                	mov    edx,DWORD PTR [eax]
c000a0fb:	89 d1                	mov    ecx,edx
c000a0fd:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000a103:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c000a109:	09 cf                	or     edi,ecx
c000a10b:	89 38                	mov    DWORD PTR [eax],edi
c000a10d:	89 14 24             	mov    DWORD PTR [esp],edx
c000a110:	ff 05 a8 2f 02 c0    	inc    DWORD PTR ds:0xc0022fa8
c000a116:	e8 18 d9 ff ff       	call   c0007a33 <Phys::freePage(unsigned long)>
c000a11b:	0f 20 d8             	mov    eax,cr3
c000a11e:	0f 22 d8             	mov    cr3,eax
c000a121:	a1 a4 2f 02 c0       	mov    eax,ds:0xc0022fa4
c000a126:	c7 44 24 40 c5 e2 01 c0 	mov    DWORD PTR [esp+0x40],0xc001e2c5
c000a12e:	8d 50 01             	lea    edx,[eax+0x1]
c000a131:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a135:	89 15 a4 2f 02 c0    	mov    DWORD PTR ds:0xc0022fa4,edx
c000a13b:	83 c4 2c             	add    esp,0x2c
c000a13e:	5b                   	pop    ebx
c000a13f:	5e                   	pop    esi
c000a140:	5f                   	pop    edi
c000a141:	5d                   	pop    ebp
c000a142:	e9 0b 04 00 00       	jmp    c000a552 <Dbg::kprintf(char const*, ...)>
c000a147:	90                   	nop

c000a148 <VAS::tryLoadBackOffDisk(unsigned long)>:
c000a148:	55                   	push   ebp
c000a149:	57                   	push   edi
c000a14a:	56                   	push   esi
c000a14b:	53                   	push   ebx
c000a14c:	83 ec 14             	sub    esp,0x14
c000a14f:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000a153:	53                   	push   ebx
c000a154:	68 d6 e2 01 c0       	push   0xc001e2d6
c000a159:	e8 f4 03 00 00       	call   c000a552 <Dbg::kprintf(char const*, ...)>
c000a15e:	83 c4 10             	add    esp,0x10
c000a161:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a167:	74 21                	je     c000a18a <VAS::tryLoadBackOffDisk(unsigned long)+0x42>
c000a169:	83 ec 08             	sub    esp,0x8
c000a16c:	53                   	push   ebx
c000a16d:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c000a171:	57                   	push   edi
c000a172:	e8 f3 f3 ff ff       	call   c000956a <VAS::getPageTableEntry(unsigned long)>
c000a177:	83 c4 10             	add    esp,0x10
c000a17a:	89 c6                	mov    esi,eax
c000a17c:	85 c0                	test   eax,eax
c000a17e:	74 0a                	je     c000a18a <VAS::tryLoadBackOffDisk(unsigned long)+0x42>
c000a180:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a182:	f7 c5 01 00 00 00    	test   ebp,0x1
c000a188:	74 0a                	je     c000a194 <VAS::tryLoadBackOffDisk(unsigned long)+0x4c>
c000a18a:	31 c0                	xor    eax,eax
c000a18c:	83 c4 0c             	add    esp,0xc
c000a18f:	5b                   	pop    ebx
c000a190:	5e                   	pop    esi
c000a191:	5f                   	pop    edi
c000a192:	5d                   	pop    ebp
c000a193:	c3                   	ret    
c000a194:	e8 fc d8 ff ff       	call   c0007a95 <Phys::allocatePage()>
c000a199:	c1 ed 0b             	shr    ebp,0xb
c000a19c:	8b 16                	mov    edx,DWORD PTR [esi]
c000a19e:	81 e2 ff 0f 00 00    	and    edx,0xfff
c000a1a4:	09 c2                	or     edx,eax
c000a1a6:	81 ca 01 08 00 00    	or     edx,0x801
c000a1ac:	89 16                	mov    DWORD PTR [esi],edx
c000a1ae:	8b 35 2c ff 01 c0    	mov    esi,DWORD PTR ds:0xc001ff2c
c000a1b4:	85 f6                	test   esi,esi
c000a1b6:	7e 3e                	jle    c000a1f6 <VAS::tryLoadBackOffDisk(unsigned long)+0xae>
c000a1b8:	89 df                	mov    edi,ebx
c000a1ba:	31 f6                	xor    esi,esi
c000a1bc:	83 ec 0c             	sub    esp,0xc
c000a1bf:	55                   	push   ebp
c000a1c0:	e8 ff f1 ff ff       	call   c00093c4 <Virt::swapIDToSector(unsigned long)>
c000a1c5:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a1c8:	01 f0                	add    eax,esi
c000a1ca:	6a 01                	push   0x1
c000a1cc:	31 d2                	xor    edx,edx
c000a1ce:	46                   	inc    esi
c000a1cf:	52                   	push   edx
c000a1d0:	81 c7 00 02 00 00    	add    edi,0x200
c000a1d6:	50                   	push   eax
c000a1d7:	0f be 05 38 ff 01 c0 	movsx  eax,BYTE PTR ds:0xc001ff38
c000a1de:	8b 0c 85 1c 53 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdace4]
c000a1e5:	51                   	push   ecx
c000a1e6:	e8 c9 2a 00 00       	call   c000ccb4 <LogicalDisk::read(unsigned long long, int, void*)>
c000a1eb:	83 c4 20             	add    esp,0x20
c000a1ee:	39 35 2c ff 01 c0    	cmp    DWORD PTR ds:0xc001ff2c,esi
c000a1f4:	7f c6                	jg     c000a1bc <VAS::tryLoadBackOffDisk(unsigned long)+0x74>
c000a1f6:	a1 a8 2f 02 c0       	mov    eax,ds:0xc0022fa8
c000a1fb:	48                   	dec    eax
c000a1fc:	52                   	push   edx
c000a1fd:	a3 a8 2f 02 c0       	mov    ds:0xc0022fa8,eax
c000a202:	50                   	push   eax
c000a203:	53                   	push   ebx
c000a204:	68 e9 e2 01 c0       	push   0xc001e2e9
c000a209:	e8 44 03 00 00       	call   c000a552 <Dbg::kprintf(char const*, ...)>
c000a20e:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000a211:	e8 90 f1 ff ff       	call   c00093a6 <Virt::freeSwapfilePage(unsigned long)>
c000a216:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c000a21b:	83 c4 10             	add    esp,0x10
c000a21e:	48                   	dec    eax
c000a21f:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c000a224:	85 c0                	test   eax,eax
c000a226:	75 01                	jne    c000a229 <VAS::tryLoadBackOffDisk(unsigned long)+0xe1>
c000a228:	fb                   	sti    
c000a229:	0f 20 d8             	mov    eax,cr3
c000a22c:	0f 22 d8             	mov    cr3,eax
c000a22f:	b0 01                	mov    al,0x1
c000a231:	e9 56 ff ff ff       	jmp    c000a18c <VAS::tryLoadBackOffDisk(unsigned long)+0x44>

c000a236 <VAS::scanForEviction()>:
c000a236:	57                   	push   edi
c000a237:	31 ff                	xor    edi,edi
c000a239:	56                   	push   esi
c000a23a:	53                   	push   ebx
c000a23b:	83 ec 10             	sub    esp,0x10
c000a23e:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000a242:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000a245:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a24b:	75 0e                	jne    c000a25b <VAS::scanForEviction()+0x25>
c000a24d:	89 da                	mov    edx,ebx
c000a24f:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000a252:	c1 ea 16             	shr    edx,0x16
c000a255:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a259:	74 4e                	je     c000a2a9 <VAS::scanForEviction()+0x73>
c000a25b:	53                   	push   ebx
c000a25c:	56                   	push   esi
c000a25d:	e8 08 f3 ff ff       	call   c000956a <VAS::getPageTableEntry(unsigned long)>
c000a262:	5a                   	pop    edx
c000a263:	8b 10                	mov    edx,DWORD PTR [eax]
c000a265:	59                   	pop    ecx
c000a266:	89 d1                	mov    ecx,edx
c000a268:	81 e1 01 08 00 00    	and    ecx,0x801
c000a26e:	81 f9 01 08 00 00    	cmp    ecx,0x801
c000a274:	74 3e                	je     c000a2b4 <VAS::scanForEviction()+0x7e>
c000a276:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a27c:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c000a282:	76 2b                	jbe    c000a2af <VAS::scanForEviction()+0x79>
c000a284:	47                   	inc    edi
c000a285:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c000a28c:	83 ff 03             	cmp    edi,0x3
c000a28f:	74 32                	je     c000a2c3 <VAS::scanForEviction()+0x8d>
c000a291:	31 db                	xor    ebx,ebx
c000a293:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a299:	75 c0                	jne    c000a25b <VAS::scanForEviction()+0x25>
c000a29b:	89 da                	mov    edx,ebx
c000a29d:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000a2a0:	c1 ea 16             	shr    edx,0x16
c000a2a3:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a2a7:	75 b2                	jne    c000a25b <VAS::scanForEviction()+0x25>
c000a2a9:	81 c3 00 00 40 00    	add    ebx,0x400000
c000a2af:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c000a2b2:	eb 91                	jmp    c000a245 <VAS::scanForEviction()+0xf>
c000a2b4:	f6 c2 20             	test   dl,0x20
c000a2b7:	74 13                	je     c000a2cc <VAS::scanForEviction()+0x96>
c000a2b9:	83 e2 df             	and    edx,0xffffffdf
c000a2bc:	89 10                	mov    DWORD PTR [eax],edx
c000a2be:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000a2c1:	eb b3                	jmp    c000a276 <VAS::scanForEviction()+0x40>
c000a2c3:	83 c4 10             	add    esp,0x10
c000a2c6:	31 c0                	xor    eax,eax
c000a2c8:	5b                   	pop    ebx
c000a2c9:	5e                   	pop    esi
c000a2ca:	5f                   	pop    edi
c000a2cb:	c3                   	ret    
c000a2cc:	83 ec 08             	sub    esp,0x8
c000a2cf:	89 d0                	mov    eax,edx
c000a2d1:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a2d6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000a2da:	53                   	push   ebx
c000a2db:	68 fe e2 01 c0       	push   0xc001e2fe
c000a2e0:	e8 6d 02 00 00       	call   c000a552 <Dbg::kprintf(char const*, ...)>
c000a2e5:	58                   	pop    eax
c000a2e6:	8b 4e 08             	mov    ecx,DWORD PTR [esi+0x8]
c000a2e9:	5a                   	pop    edx
c000a2ea:	51                   	push   ecx
c000a2eb:	56                   	push   esi
c000a2ec:	e8 95 fd ff ff       	call   c000a086 <VAS::evict(unsigned long)>
c000a2f1:	5b                   	pop    ebx
c000a2f2:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000a2f5:	5f                   	pop    edi
c000a2f6:	50                   	push   eax
c000a2f7:	68 12 e3 01 c0       	push   0xc001e312
c000a2fc:	e8 51 02 00 00       	call   c000a552 <Dbg::kprintf(char const*, ...)>
c000a301:	81 46 08 00 10 00 00 	add    DWORD PTR [esi+0x8],0x1000
c000a308:	83 c4 10             	add    esp,0x10
c000a30b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a30f:	83 c4 10             	add    esp,0x10
c000a312:	5b                   	pop    ebx
c000a313:	5e                   	pop    esi
c000a314:	5f                   	pop    edi
c000a315:	c3                   	ret    

c000a316 <mapVASFirstTime>:
c000a316:	55                   	push   ebp
c000a317:	57                   	push   edi
c000a318:	56                   	push   esi
c000a319:	53                   	push   ebx
c000a31a:	83 ec 0c             	sub    esp,0xc
c000a31d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000a322:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000a325:	4a                   	dec    edx
c000a326:	0f 84 c8 00 00 00    	je     c000a3f4 <mapVASFirstTime+0xde>
c000a32c:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000a32f:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c000a332:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000a337:	c1 e5 15             	shl    ebp,0x15
c000a33a:	bf 00 90 e7 01       	mov    edi,0x1e79000
c000a33f:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c000a345:	29 eb                	sub    ebx,ebp
c000a347:	29 ef                	sub    edi,ebp
c000a349:	e8 47 d7 ff ff       	call   c0007a95 <Phys::allocatePage()>
c000a34e:	83 ec 0c             	sub    esp,0xc
c000a351:	68 03 04 00 00       	push   0x403
c000a356:	6a 01                	push   0x1
c000a358:	53                   	push   ebx
c000a359:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a35f:	50                   	push   eax
c000a360:	56                   	push   esi
c000a361:	e8 ec f8 ff ff       	call   c0009c52 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a366:	83 c4 20             	add    esp,0x20
c000a369:	39 fb                	cmp    ebx,edi
c000a36b:	75 dc                	jne    c000a349 <mapVASFirstTime+0x33>
c000a36d:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c000a372:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c000a377:	29 eb                	sub    ebx,ebp
c000a379:	29 ef                	sub    edi,ebp
c000a37b:	e8 15 d7 ff ff       	call   c0007a95 <Phys::allocatePage()>
c000a380:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c000a384:	19 d2                	sbb    edx,edx
c000a386:	83 ec 0c             	sub    esp,0xc
c000a389:	83 e2 04             	and    edx,0x4
c000a38c:	81 c2 03 04 00 00    	add    edx,0x403
c000a392:	52                   	push   edx
c000a393:	6a 01                	push   0x1
c000a395:	53                   	push   ebx
c000a396:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a39c:	50                   	push   eax
c000a39d:	56                   	push   esi
c000a39e:	e8 af f8 ff ff       	call   c0009c52 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a3a3:	83 c4 20             	add    esp,0x20
c000a3a6:	39 df                	cmp    edi,ebx
c000a3a8:	75 d1                	jne    c000a37b <mapVASFirstTime+0x65>
c000a3aa:	83 ec 0c             	sub    esp,0xc
c000a3ad:	bb 7c 20 02 c0       	mov    ebx,0xc002207c
c000a3b2:	6a 04                	push   0x4
c000a3b4:	81 eb 00 10 02 c0    	sub    ebx,0xc0021000
c000a3ba:	6a ff                	push   0xffffffff
c000a3bc:	c1 eb 0c             	shr    ebx,0xc
c000a3bf:	53                   	push   ebx
c000a3c0:	68 00 10 02 c0       	push   0xc0021000
c000a3c5:	56                   	push   esi
c000a3c6:	e8 21 f3 ff ff       	call   c00096ec <VAS::reflagRange(unsigned long, int, int, int)>
c000a3cb:	83 c4 14             	add    esp,0x14
c000a3ce:	a1 b0 2f 02 c0       	mov    eax,ds:0xc0022fb0
c000a3d3:	6a 04                	push   0x4
c000a3d5:	6a ff                	push   0xffffffff
c000a3d7:	53                   	push   ebx
c000a3d8:	68 00 10 02 c0       	push   0xc0021000
c000a3dd:	50                   	push   eax
c000a3de:	e8 09 f3 ff ff       	call   c00096ec <VAS::reflagRange(unsigned long, int, int, int)>
c000a3e3:	0f 20 d8             	mov    eax,cr3
c000a3e6:	0f 22 d8             	mov    cr3,eax
c000a3e9:	83 c4 20             	add    esp,0x20
c000a3ec:	83 c4 0c             	add    esp,0xc
c000a3ef:	5b                   	pop    ebx
c000a3f0:	5e                   	pop    esi
c000a3f1:	5f                   	pop    edi
c000a3f2:	5d                   	pop    ebp
c000a3f3:	c3                   	ret    
c000a3f4:	83 ec 0c             	sub    esp,0xc
c000a3f7:	68 25 e3 01 c0       	push   0xc001e325
c000a3fc:	e8 51 01 00 00       	call   c000a552 <Dbg::kprintf(char const*, ...)>
c000a401:	83 c4 10             	add    esp,0x10
c000a404:	83 c4 0c             	add    esp,0xc
c000a407:	5b                   	pop    ebx
c000a408:	5e                   	pop    esi
c000a409:	5f                   	pop    edi
c000a40a:	5d                   	pop    ebp
c000a40b:	c3                   	ret    

c000a40c <__cxa_atexit>:
c000a40c:	31 c0                	xor    eax,eax
c000a40e:	c3                   	ret    

c000a40f <__cxa_finalize>:
c000a40f:	c3                   	ret    

c000a410 <__stack_chk_fail>:
c000a410:	55                   	push   ebp
c000a411:	89 e5                	mov    ebp,esp
c000a413:	83 ec 10             	sub    esp,0x10
c000a416:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000a419:	68 3e e3 01 c0       	push   0xc001e33e
c000a41e:	e8 2f 01 00 00       	call   c000a552 <Dbg::kprintf(char const*, ...)>
c000a423:	58                   	pop    eax
c000a424:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000a427:	5a                   	pop    edx
c000a428:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000a42b:	68 3e e3 01 c0       	push   0xc001e33e
c000a430:	e8 1d 01 00 00       	call   c000a552 <Dbg::kprintf(char const*, ...)>
c000a435:	c7 04 24 46 e3 01 c0 	mov    DWORD PTR [esp],0xc001e346
c000a43c:	e8 66 5e 00 00       	call   c00102a7 <KePanic(char const*)>
c000a441:	83 c4 10             	add    esp,0x10
c000a444:	c9                   	leave  
c000a445:	c3                   	ret    

c000a446 <__cxa_pure_virtual>:
c000a446:	83 ec 18             	sub    esp,0x18
c000a449:	68 5e e3 01 c0       	push   0xc001e35e
c000a44e:	e8 54 5e 00 00       	call   c00102a7 <KePanic(char const*)>
c000a453:	83 c4 1c             	add    esp,0x1c
c000a456:	c3                   	ret    

c000a457 <operator new[](unsigned long)>:
c000a457:	e9 5d d3 ff ff       	jmp    c00077b9 <malloc>

c000a45c <operator delete(void*, unsigned long)>:
c000a45c:	e9 78 d3 ff ff       	jmp    c00077d9 <rfree>

c000a461 <operator delete[](void*)>:
c000a461:	e9 73 d3 ff ff       	jmp    c00077d9 <rfree>

c000a466 <operator delete[](void*, unsigned long)>:
c000a466:	e9 6e d3 ff ff       	jmp    c00077d9 <rfree>

c000a46b <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000a46b:	55                   	push   ebp
c000a46c:	b9 04 00 00 00       	mov    ecx,0x4
c000a471:	57                   	push   edi
c000a472:	56                   	push   esi
c000a473:	be b3 df 01 c0       	mov    esi,0xc001dfb3
c000a478:	53                   	push   ebx
c000a479:	83 ec 20             	sub    esp,0x20
c000a47c:	a1 b2 df 01 c0       	mov    eax,ds:0xc001dfb2
c000a481:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a485:	89 44 24 0f          	mov    DWORD PTR [esp+0xf],eax
c000a489:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000a48d:	a1 bf df 01 c0       	mov    eax,ds:0xc001dfbf
c000a492:	8d 7c 24 10          	lea    edi,[esp+0x10]
c000a496:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a49a:	fc                   	cld    
c000a49b:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000a49d:	89 ee                	mov    esi,ebp
c000a49f:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000a4a3:	eb 02                	jmp    c000a4a7 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3c>
c000a4a5:	89 c6                	mov    esi,eax
c000a4a7:	31 d2                	xor    edx,edx
c000a4a9:	41                   	inc    ecx
c000a4aa:	89 f0                	mov    eax,esi
c000a4ac:	f7 f3                	div    ebx
c000a4ae:	39 de                	cmp    esi,ebx
c000a4b0:	73 f3                	jae    c000a4a5 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3a>
c000a4b2:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000a4b5:	eb 02                	jmp    c000a4b9 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x4e>
c000a4b7:	89 c5                	mov    ebp,eax
c000a4b9:	31 d2                	xor    edx,edx
c000a4bb:	49                   	dec    ecx
c000a4bc:	89 e8                	mov    eax,ebp
c000a4be:	f7 f3                	div    ebx
c000a4c0:	39 dd                	cmp    ebp,ebx
c000a4c2:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c000a4c6:	88 11                	mov    BYTE PTR [ecx],dl
c000a4c8:	73 ed                	jae    c000a4b7 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x4c>
c000a4ca:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a4ce:	83 c4 20             	add    esp,0x20
c000a4d1:	5b                   	pop    ebx
c000a4d2:	5e                   	pop    esi
c000a4d3:	5f                   	pop    edi
c000a4d4:	5d                   	pop    ebp
c000a4d5:	c3                   	ret    

c000a4d6 <Dbg::logc(char)>:
c000a4d6:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a4da:	f6 05 d0 2e 02 c0 10 	test   BYTE PTR ds:0xc0022ed0,0x10
c000a4e1:	75 12                	jne    c000a4f5 <Dbg::logc(char)+0x1f>
c000a4e3:	ba fd 03 00 00       	mov    edx,0x3fd
c000a4e8:	ec                   	in     al,dx
c000a4e9:	a8 20                	test   al,0x20
c000a4eb:	74 fb                	je     c000a4e8 <Dbg::logc(char)+0x12>
c000a4ed:	ba f8 03 00 00       	mov    edx,0x3f8
c000a4f2:	88 c8                	mov    al,cl
c000a4f4:	ee                   	out    dx,al
c000a4f5:	c3                   	ret    

c000a4f6 <Dbg::logs(char*)>:
c000a4f6:	53                   	push   ebx
c000a4f7:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a4fb:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a4fe:	84 c0                	test   al,al
c000a500:	74 0f                	je     c000a511 <Dbg::logs(char*)+0x1b>
c000a502:	50                   	push   eax
c000a503:	43                   	inc    ebx
c000a504:	e8 cd ff ff ff       	call   c000a4d6 <Dbg::logc(char)>
c000a509:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a50c:	5a                   	pop    edx
c000a50d:	84 c0                	test   al,al
c000a50f:	75 f1                	jne    c000a502 <Dbg::logs(char*)+0xc>
c000a511:	5b                   	pop    ebx
c000a512:	c3                   	ret    

c000a513 <Dbg::logWriteInt(unsigned int)>:
c000a513:	83 ec 10             	sub    esp,0x10
c000a516:	6a 0a                	push   0xa
c000a518:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a51c:	50                   	push   eax
c000a51d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a521:	50                   	push   eax
c000a522:	e8 44 ff ff ff       	call   c000a46b <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a527:	50                   	push   eax
c000a528:	e8 c9 ff ff ff       	call   c000a4f6 <Dbg::logs(char*)>
c000a52d:	83 c4 20             	add    esp,0x20
c000a530:	c3                   	ret    

c000a531 <Dbg::logWriteIntBase(unsigned int, int)>:
c000a531:	83 ec 10             	sub    esp,0x10
c000a534:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a538:	50                   	push   eax
c000a539:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a53d:	50                   	push   eax
c000a53e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a542:	52                   	push   edx
c000a543:	e8 23 ff ff ff       	call   c000a46b <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a548:	50                   	push   eax
c000a549:	e8 a8 ff ff ff       	call   c000a4f6 <Dbg::logs(char*)>
c000a54e:	83 c4 20             	add    esp,0x20
c000a551:	c3                   	ret    

c000a552 <Dbg::kprintf(char const*, ...)>:
c000a552:	55                   	push   ebp
c000a553:	57                   	push   edi
c000a554:	56                   	push   esi
c000a555:	53                   	push   ebx
c000a556:	83 ec 0c             	sub    esp,0xc
c000a559:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000a55d:	f6 05 d0 2e 02 c0 10 	test   BYTE PTR ds:0xc0022ed0,0x10
c000a564:	74 08                	je     c000a56e <Dbg::kprintf(char const*, ...)+0x1c>
c000a566:	83 c4 0c             	add    esp,0xc
c000a569:	5b                   	pop    ebx
c000a56a:	5e                   	pop    esi
c000a56b:	5f                   	pop    edi
c000a56c:	5d                   	pop    ebp
c000a56d:	c3                   	ret    
c000a56e:	8d 44 24 24          	lea    eax,[esp+0x24]
c000a572:	31 ff                	xor    edi,edi
c000a574:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a578:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a57b:	84 c0                	test   al,al
c000a57d:	74 e7                	je     c000a566 <Dbg::kprintf(char const*, ...)+0x14>
c000a57f:	8d 77 01             	lea    esi,[edi+0x1]
c000a582:	3c 25                	cmp    al,0x25
c000a584:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a587:	75 47                	jne    c000a5d0 <Dbg::kprintf(char const*, ...)+0x7e>
c000a589:	83 c7 02             	add    edi,0x2
c000a58c:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000a58f:	8d 34 3b             	lea    esi,[ebx+edi*1]
c000a592:	83 e8 25             	sub    eax,0x25
c000a595:	3c 53                	cmp    al,0x53
c000a597:	0f 87 d2 00 00 00    	ja     c000a66f <Dbg::kprintf(char const*, ...)+0x11d>
c000a59d:	25 ff 00 00 00       	and    eax,0xff
c000a5a2:	ff 24 85 74 e3 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe1c8c]
c000a5a9:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a5ad:	89 c8                	mov    eax,ecx
c000a5af:	83 c1 04             	add    ecx,0x4
c000a5b2:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a5b6:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a5b8:	55                   	push   ebp
c000a5b9:	e8 55 ff ff ff       	call   c000a513 <Dbg::logWriteInt(unsigned int)>
c000a5be:	58                   	pop    eax
c000a5bf:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000a5c2:	84 c0                	test   al,al
c000a5c4:	74 a0                	je     c000a566 <Dbg::kprintf(char const*, ...)+0x14>
c000a5c6:	8d 77 01             	lea    esi,[edi+0x1]
c000a5c9:	3c 25                	cmp    al,0x25
c000a5cb:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a5ce:	74 b9                	je     c000a589 <Dbg::kprintf(char const*, ...)+0x37>
c000a5d0:	50                   	push   eax
c000a5d1:	89 f7                	mov    edi,esi
c000a5d3:	e8 fe fe ff ff       	call   c000a4d6 <Dbg::logc(char)>
c000a5d8:	89 ee                	mov    esi,ebp
c000a5da:	58                   	pop    eax
c000a5db:	eb e2                	jmp    c000a5bf <Dbg::kprintf(char const*, ...)+0x6d>
c000a5dd:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a5e1:	89 c8                	mov    eax,ecx
c000a5e3:	83 c1 04             	add    ecx,0x4
c000a5e6:	8b 00                	mov    eax,DWORD PTR [eax]
c000a5e8:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a5ec:	50                   	push   eax
c000a5ed:	e8 04 ff ff ff       	call   c000a4f6 <Dbg::logs(char*)>
c000a5f2:	58                   	pop    eax
c000a5f3:	eb ca                	jmp    c000a5bf <Dbg::kprintf(char const*, ...)+0x6d>
c000a5f5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a5f9:	89 d0                	mov    eax,edx
c000a5fb:	83 c2 04             	add    edx,0x4
c000a5fe:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a602:	8b 00                	mov    eax,DWORD PTR [eax]
c000a604:	50                   	push   eax
c000a605:	e8 09 ff ff ff       	call   c000a513 <Dbg::logWriteInt(unsigned int)>
c000a60a:	58                   	pop    eax
c000a60b:	eb b2                	jmp    c000a5bf <Dbg::kprintf(char const*, ...)+0x6d>
c000a60d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a611:	89 d0                	mov    eax,edx
c000a613:	83 c2 04             	add    edx,0x4
c000a616:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000a619:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a61d:	50                   	push   eax
c000a61e:	e8 b3 fe ff ff       	call   c000a4d6 <Dbg::logc(char)>
c000a623:	58                   	pop    eax
c000a624:	eb 99                	jmp    c000a5bf <Dbg::kprintf(char const*, ...)+0x6d>
c000a626:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a62a:	89 c8                	mov    eax,ecx
c000a62c:	83 c1 04             	add    ecx,0x4
c000a62f:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a633:	6a 10                	push   0x10
c000a635:	8b 08                	mov    ecx,DWORD PTR [eax]
c000a637:	51                   	push   ecx
c000a638:	e8 f4 fe ff ff       	call   c000a531 <Dbg::logWriteIntBase(unsigned int, int)>
c000a63d:	5d                   	pop    ebp
c000a63e:	58                   	pop    eax
c000a63f:	e9 7b ff ff ff       	jmp    c000a5bf <Dbg::kprintf(char const*, ...)+0x6d>
c000a644:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a648:	89 d0                	mov    eax,edx
c000a64a:	83 c2 08             	add    edx,0x8
c000a64d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a651:	6a 10                	push   0x10
c000a653:	8b 00                	mov    eax,DWORD PTR [eax]
c000a655:	50                   	push   eax
c000a656:	e8 d6 fe ff ff       	call   c000a531 <Dbg::logWriteIntBase(unsigned int, int)>
c000a65b:	58                   	pop    eax
c000a65c:	5a                   	pop    edx
c000a65d:	e9 5d ff ff ff       	jmp    c000a5bf <Dbg::kprintf(char const*, ...)+0x6d>
c000a662:	6a 25                	push   0x25
c000a664:	e8 6d fe ff ff       	call   c000a4d6 <Dbg::logc(char)>
c000a669:	5a                   	pop    edx
c000a66a:	e9 50 ff ff ff       	jmp    c000a5bf <Dbg::kprintf(char const*, ...)+0x6d>
c000a66f:	6a 25                	push   0x25
c000a671:	e8 60 fe ff ff       	call   c000a4d6 <Dbg::logc(char)>
c000a676:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000a67a:	50                   	push   eax
c000a67b:	e8 56 fe ff ff       	call   c000a4d6 <Dbg::logc(char)>
c000a680:	5a                   	pop    edx
c000a681:	59                   	pop    ecx
c000a682:	e9 38 ff ff ff       	jmp    c000a5bf <Dbg::kprintf(char const*, ...)+0x6d>
c000a687:	90                   	nop

c000a688 <File::read(unsigned long long, void*, int*)>:
c000a688:	53                   	push   ebx
c000a689:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a68d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000a691:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000a698:	3c 19                	cmp    al,0x19
c000a69a:	77 35                	ja     c000a6d1 <File::read(unsigned long long, void*, int*)+0x49>
c000a69c:	8b 04 85 20 54 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdabe0]
c000a6a3:	85 c0                	test   eax,eax
c000a6a5:	74 2a                	je     c000a6d1 <File::read(unsigned long long, void*, int*)+0x49>
c000a6a7:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000a6ad:	85 c0                	test   eax,eax
c000a6af:	74 20                	je     c000a6d1 <File::read(unsigned long long, void*, int*)+0x49>
c000a6b1:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000a6b5:	74 21                	je     c000a6d8 <File::read(unsigned long long, void*, int*)+0x50>
c000a6b7:	8b 08                	mov    ecx,DWORD PTR [eax]
c000a6b9:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000a6bd:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000a6c3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a6c7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a6cb:	5b                   	pop    ebx
c000a6cc:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000a6cf:	ff e0                	jmp    eax
c000a6d1:	b8 0b 00 00 00       	mov    eax,0xb
c000a6d6:	eb 05                	jmp    c000a6dd <File::read(unsigned long long, void*, int*)+0x55>
c000a6d8:	b8 05 00 00 00       	mov    eax,0x5
c000a6dd:	5b                   	pop    ebx
c000a6de:	c3                   	ret    
c000a6df:	90                   	nop

c000a6e0 <File::write(unsigned long long, void*, int*)>:
c000a6e0:	53                   	push   ebx
c000a6e1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a6e5:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000a6e9:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000a6f0:	3c 19                	cmp    al,0x19
c000a6f2:	77 35                	ja     c000a729 <File::write(unsigned long long, void*, int*)+0x49>
c000a6f4:	8b 04 85 20 54 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdabe0]
c000a6fb:	85 c0                	test   eax,eax
c000a6fd:	74 2a                	je     c000a729 <File::write(unsigned long long, void*, int*)+0x49>
c000a6ff:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000a705:	85 c0                	test   eax,eax
c000a707:	74 20                	je     c000a729 <File::write(unsigned long long, void*, int*)+0x49>
c000a709:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000a70d:	74 21                	je     c000a730 <File::write(unsigned long long, void*, int*)+0x50>
c000a70f:	8b 08                	mov    ecx,DWORD PTR [eax]
c000a711:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000a715:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000a71b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a71f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a723:	5b                   	pop    ebx
c000a724:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000a727:	ff e0                	jmp    eax
c000a729:	b8 0b 00 00 00       	mov    eax,0xb
c000a72e:	eb 05                	jmp    c000a735 <File::write(unsigned long long, void*, int*)+0x55>
c000a730:	b8 05 00 00 00       	mov    eax,0x5
c000a735:	5b                   	pop    ebx
c000a736:	c3                   	ret    
c000a737:	90                   	nop

c000a738 <Directory::read(unsigned long long, void*, int*)>:
c000a738:	53                   	push   ebx
c000a739:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a73d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000a741:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000a748:	3c 19                	cmp    al,0x19
c000a74a:	77 35                	ja     c000a781 <Directory::read(unsigned long long, void*, int*)+0x49>
c000a74c:	8b 04 85 20 54 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdabe0]
c000a753:	85 c0                	test   eax,eax
c000a755:	74 2a                	je     c000a781 <Directory::read(unsigned long long, void*, int*)+0x49>
c000a757:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000a75d:	85 c0                	test   eax,eax
c000a75f:	74 20                	je     c000a781 <Directory::read(unsigned long long, void*, int*)+0x49>
c000a761:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000a765:	74 21                	je     c000a788 <Directory::read(unsigned long long, void*, int*)+0x50>
c000a767:	8b 08                	mov    ecx,DWORD PTR [eax]
c000a769:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000a76d:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000a773:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a777:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a77b:	5b                   	pop    ebx
c000a77c:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c000a77f:	ff e0                	jmp    eax
c000a781:	b8 0b 00 00 00       	mov    eax,0xb
c000a786:	eb 05                	jmp    c000a78d <Directory::read(unsigned long long, void*, int*)+0x55>
c000a788:	b8 05 00 00 00       	mov    eax,0x5
c000a78d:	5b                   	pop    ebx
c000a78e:	c3                   	ret    
c000a78f:	90                   	nop

c000a790 <Directory::write(unsigned long long, void*, int*)>:
c000a790:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a794:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000a79b:	b8 0b 00 00 00       	mov    eax,0xb
c000a7a0:	80 fa 19             	cmp    dl,0x19
c000a7a3:	77 18                	ja     c000a7bd <Directory::write(unsigned long long, void*, int*)+0x2d>
c000a7a5:	8b 14 95 20 54 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdabe0]
c000a7ac:	85 d2                	test   edx,edx
c000a7ae:	74 0d                	je     c000a7bd <Directory::write(unsigned long long, void*, int*)+0x2d>
c000a7b0:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c000a7b7:	19 c0                	sbb    eax,eax
c000a7b9:	83 e0 0a             	and    eax,0xa
c000a7bc:	40                   	inc    eax
c000a7bd:	c3                   	ret    

c000a7be <File::isAtty()>:
c000a7be:	31 c0                	xor    eax,eax
c000a7c0:	c3                   	ret    
c000a7c1:	90                   	nop

c000a7c2 <Directory::isAtty()>:
c000a7c2:	31 c0                	xor    eax,eax
c000a7c4:	c3                   	ret    
c000a7c5:	90                   	nop

c000a7c6 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000a7c6:	b8 0a 00 00 00       	mov    eax,0xa
c000a7cb:	c3                   	ret    

c000a7cc <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000a7cc:	b8 0a 00 00 00       	mov    eax,0xa
c000a7d1:	c3                   	ret    

c000a7d2 <Filesystem::allocateSwapfile(char const*, int)>:
c000a7d2:	31 c0                	xor    eax,eax
c000a7d4:	31 d2                	xor    edx,edx
c000a7d6:	c3                   	ret    
c000a7d7:	90                   	nop

c000a7d8 <File::~File()>:
c000a7d8:	83 ec 0c             	sub    esp,0xc
c000a7db:	ba 84 e5 01 c0       	mov    edx,0xc001e584
c000a7e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a7e4:	89 10                	mov    DWORD PTR [eax],edx
c000a7e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a7ea:	83 ec 0c             	sub    esp,0xc
c000a7ed:	50                   	push   eax
c000a7ee:	e8 41 e8 ff ff       	call   c0009034 <UnixFile::~UnixFile()>
c000a7f3:	83 c4 10             	add    esp,0x10
c000a7f6:	90                   	nop
c000a7f7:	83 c4 0c             	add    esp,0xc
c000a7fa:	c3                   	ret    
c000a7fb:	90                   	nop

c000a7fc <File::~File()>:
c000a7fc:	83 ec 0c             	sub    esp,0xc
c000a7ff:	83 ec 0c             	sub    esp,0xc
c000a802:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a806:	e8 cd ff ff ff       	call   c000a7d8 <File::~File()>
c000a80b:	83 c4 10             	add    esp,0x10
c000a80e:	83 ec 08             	sub    esp,0x8
c000a811:	68 14 01 00 00       	push   0x114
c000a816:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a81a:	e8 3d fc ff ff       	call   c000a45c <operator delete(void*, unsigned long)>
c000a81f:	83 c4 10             	add    esp,0x10
c000a822:	83 c4 0c             	add    esp,0xc
c000a825:	c3                   	ret    

c000a826 <Directory::~Directory()>:
c000a826:	83 ec 0c             	sub    esp,0xc
c000a829:	ba a0 e5 01 c0       	mov    edx,0xc001e5a0
c000a82e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a832:	89 10                	mov    DWORD PTR [eax],edx
c000a834:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a838:	83 ec 0c             	sub    esp,0xc
c000a83b:	50                   	push   eax
c000a83c:	e8 f3 e7 ff ff       	call   c0009034 <UnixFile::~UnixFile()>
c000a841:	83 c4 10             	add    esp,0x10
c000a844:	90                   	nop
c000a845:	83 c4 0c             	add    esp,0xc
c000a848:	c3                   	ret    
c000a849:	90                   	nop

c000a84a <Directory::~Directory()>:
c000a84a:	83 ec 0c             	sub    esp,0xc
c000a84d:	83 ec 0c             	sub    esp,0xc
c000a850:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a854:	e8 cd ff ff ff       	call   c000a826 <Directory::~Directory()>
c000a859:	83 c4 10             	add    esp,0x10
c000a85c:	83 ec 08             	sub    esp,0x8
c000a85f:	68 14 01 00 00       	push   0x114
c000a864:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a868:	e8 ef fb ff ff       	call   c000a45c <operator delete(void*, unsigned long)>
c000a86d:	83 c4 10             	add    esp,0x10
c000a870:	83 c4 0c             	add    esp,0xc
c000a873:	c3                   	ret    

c000a874 <Filesystem::Filesystem()>:
c000a874:	ba 1c e5 01 c0       	mov    edx,0xc001e51c
c000a879:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a87d:	89 10                	mov    DWORD PTR [eax],edx
c000a87f:	8b 15 b4 2f 02 c0    	mov    edx,DWORD PTR ds:0xc0022fb4
c000a885:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a889:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000a88c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a890:	a3 b4 2f 02 c0       	mov    ds:0xc0022fb4,eax
c000a895:	90                   	nop
c000a896:	c3                   	ret    
c000a897:	90                   	nop

c000a898 <Filesystem::~Filesystem()>:
c000a898:	ba 1c e5 01 c0       	mov    edx,0xc001e51c
c000a89d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a8a1:	89 10                	mov    DWORD PTR [eax],edx
c000a8a3:	90                   	nop
c000a8a4:	c3                   	ret    
c000a8a5:	90                   	nop

c000a8a6 <Filesystem::~Filesystem()>:
c000a8a6:	83 ec 0c             	sub    esp,0xc
c000a8a9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000a8ad:	e8 e6 ff ff ff       	call   c000a898 <Filesystem::~Filesystem()>
c000a8b2:	83 c4 04             	add    esp,0x4
c000a8b5:	83 ec 08             	sub    esp,0x8
c000a8b8:	6a 08                	push   0x8
c000a8ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a8be:	e8 99 fb ff ff       	call   c000a45c <operator delete(void*, unsigned long)>
c000a8c3:	83 c4 10             	add    esp,0x10
c000a8c6:	83 c4 0c             	add    esp,0xc
c000a8c9:	c3                   	ret    

c000a8ca <Fs::getcwd(Process*, char*, int)>:
c000a8ca:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a8ce:	31 c0                	xor    eax,eax
c000a8d0:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000a8d3:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000a8d7:	7d 15                	jge    c000a8ee <Fs::getcwd(Process*, char*, int)+0x24>
c000a8d9:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a8dd:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000a8e4:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000a8e7:	84 c9                	test   cl,cl
c000a8e9:	74 06                	je     c000a8f1 <Fs::getcwd(Process*, char*, int)+0x27>
c000a8eb:	40                   	inc    eax
c000a8ec:	eb e2                	jmp    c000a8d0 <Fs::getcwd(Process*, char*, int)+0x6>
c000a8ee:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000a8f1:	31 c0                	xor    eax,eax
c000a8f3:	c3                   	ret    

c000a8f4 <Fs::initVFS()>:
c000a8f4:	83 ec 18             	sub    esp,0x18
c000a8f7:	6a 08                	push   0x8
c000a8f9:	e8 bb ce ff ff       	call   c00077b9 <malloc>
c000a8fe:	89 04 24             	mov    DWORD PTR [esp],eax
c000a901:	e8 da c7 00 00       	call   c00170e0 <FAT::FAT()>
c000a906:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000a90d:	e8 a7 ce ff ff       	call   c00077b9 <malloc>
c000a912:	89 04 24             	mov    DWORD PTR [esp],eax
c000a915:	e8 c4 d5 00 00       	call   c0017ede <ISO9660::ISO9660()>
c000a91a:	83 c4 1c             	add    esp,0x1c
c000a91d:	c3                   	ret    

c000a91e <Fs::standardiseFiles(char*, char const*, char const*)>:
c000a91e:	55                   	push   ebp
c000a91f:	57                   	push   edi
c000a920:	56                   	push   esi
c000a921:	53                   	push   ebx
c000a922:	81 ec 10 04 00 00    	sub    esp,0x410
c000a928:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c000a92f:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c000a936:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c000a93d:	68 00 04 00 00       	push   0x400
c000a942:	6a 00                	push   0x0
c000a944:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000a948:	56                   	push   esi
c000a949:	e8 82 5b ff ff       	call   c00004d0 <memset>
c000a94e:	83 c4 10             	add    esp,0x10
c000a951:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c000a955:	75 0b                	jne    c000a962 <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c000a957:	50                   	push   eax
c000a958:	50                   	push   eax
c000a959:	57                   	push   edi
c000a95a:	56                   	push   esi
c000a95b:	e8 a0 5c ff ff       	call   c0000600 <strcpy>
c000a960:	eb 41                	jmp    c000a9a3 <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c000a962:	8a 07                	mov    al,BYTE PTR [edi]
c000a964:	3c 5c                	cmp    al,0x5c
c000a966:	74 04                	je     c000a96c <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c000a968:	3c 2f                	cmp    al,0x2f
c000a96a:	75 18                	jne    c000a984 <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c000a96c:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000a96f:	3c 60                	cmp    al,0x60
c000a971:	7e 03                	jle    c000a976 <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c000a973:	83 e8 20             	sub    eax,0x20
c000a976:	88 04 24             	mov    BYTE PTR [esp],al
c000a979:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000a980:	50                   	push   eax
c000a981:	50                   	push   eax
c000a982:	eb 18                	jmp    c000a99c <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c000a984:	50                   	push   eax
c000a985:	50                   	push   eax
c000a986:	55                   	push   ebp
c000a987:	56                   	push   esi
c000a988:	e8 73 5c ff ff       	call   c0000600 <strcpy>
c000a98d:	5a                   	pop    edx
c000a98e:	59                   	pop    ecx
c000a98f:	68 a9 f2 01 c0       	push   0xc001f2a9
c000a994:	56                   	push   esi
c000a995:	e8 26 5e ff ff       	call   c00007c0 <strcat>
c000a99a:	5d                   	pop    ebp
c000a99b:	58                   	pop    eax
c000a99c:	57                   	push   edi
c000a99d:	56                   	push   esi
c000a99e:	e8 1d 5e ff ff       	call   c00007c0 <strcat>
c000a9a3:	83 c4 10             	add    esp,0x10
c000a9a6:	8a 04 24             	mov    al,BYTE PTR [esp]
c000a9a9:	3c 60                	cmp    al,0x60
c000a9ab:	7e 03                	jle    c000a9b0 <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c000a9ad:	83 e8 20             	sub    eax,0x20
c000a9b0:	88 04 24             	mov    BYTE PTR [esp],al
c000a9b3:	88 03                	mov    BYTE PTR [ebx],al
c000a9b5:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000a9bc:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c000a9c2:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000a9c6:	bf 03 00 00 00       	mov    edi,0x3
c000a9cb:	b8 03 00 00 00       	mov    eax,0x3
c000a9d0:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c000a9d3:	84 d2                	test   dl,dl
c000a9d5:	0f 84 91 00 00 00    	je     c000aa6c <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c000a9db:	8d 4f 01             	lea    ecx,[edi+0x1]
c000a9de:	80 fa 5c             	cmp    dl,0x5c
c000a9e1:	74 05                	je     c000a9e8 <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c000a9e3:	80 fa 2f             	cmp    dl,0x2f
c000a9e6:	75 12                	jne    c000a9fa <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000a9e8:	89 c5                	mov    ebp,eax
c000a9ea:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000a9ef:	74 09                	je     c000a9fa <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000a9f1:	40                   	inc    eax
c000a9f2:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c000a9f6:	89 cf                	mov    edi,ecx
c000a9f8:	eb d6                	jmp    c000a9d0 <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c000a9fa:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c000a9ff:	75 5b                	jne    c000aa5c <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000aa01:	80 fa 2e             	cmp    dl,0x2e
c000aa04:	75 56                	jne    c000aa5c <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000aa06:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c000aa0a:	74 19                	je     c000aa25 <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c000aa0c:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000aa11:	74 53                	je     c000aa66 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000aa13:	89 f9                	mov    ecx,edi
c000aa15:	41                   	inc    ecx
c000aa16:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000aa19:	80 fa 2f             	cmp    dl,0x2f
c000aa1c:	74 f7                	je     c000aa15 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000aa1e:	80 fa 5c             	cmp    dl,0x5c
c000aa21:	74 f2                	je     c000aa15 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000aa23:	eb d1                	jmp    c000a9f6 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000aa25:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000aa2a:	74 3a                	je     c000aa66 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000aa2c:	83 f8 03             	cmp    eax,0x3
c000aa2f:	74 c5                	je     c000a9f6 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000aa31:	41                   	inc    ecx
c000aa32:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000aa35:	80 fa 2f             	cmp    dl,0x2f
c000aa38:	74 f7                	je     c000aa31 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000aa3a:	80 fa 5c             	cmp    dl,0x5c
c000aa3d:	74 f2                	je     c000aa31 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000aa3f:	48                   	dec    eax
c000aa40:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000aa44:	75 06                	jne    c000aa4c <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000aa46:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000aa4a:	eb f3                	jmp    c000aa3f <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c000aa4c:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000aa50:	74 07                	je     c000aa59 <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c000aa52:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000aa56:	48                   	dec    eax
c000aa57:	eb f3                	jmp    c000aa4c <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000aa59:	40                   	inc    eax
c000aa5a:	eb 9a                	jmp    c000a9f6 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000aa5c:	80 fa 2f             	cmp    dl,0x2f
c000aa5f:	74 95                	je     c000a9f6 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000aa61:	80 fa 5c             	cmp    dl,0x5c
c000aa64:	74 90                	je     c000a9f6 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000aa66:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c000aa69:	40                   	inc    eax
c000aa6a:	eb 8a                	jmp    c000a9f6 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000aa6c:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000aa70:	83 ec 0c             	sub    esp,0xc
c000aa73:	53                   	push   ebx
c000aa74:	e8 c7 5a ff ff       	call   c0000540 <strlen>
c000aa79:	83 c4 10             	add    esp,0x10
c000aa7c:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c000aa81:	75 26                	jne    c000aaa9 <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c000aa83:	83 ec 0c             	sub    esp,0xc
c000aa86:	53                   	push   ebx
c000aa87:	e8 b4 5a ff ff       	call   c0000540 <strlen>
c000aa8c:	83 c4 10             	add    esp,0x10
c000aa8f:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c000aa94:	74 26                	je     c000aabc <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c000aa96:	83 ec 0c             	sub    esp,0xc
c000aa99:	53                   	push   ebx
c000aa9a:	e8 a1 5a ff ff       	call   c0000540 <strlen>
c000aa9f:	83 c4 10             	add    esp,0x10
c000aaa2:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000aaa7:	eb c7                	jmp    c000aa70 <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c000aaa9:	83 ec 0c             	sub    esp,0xc
c000aaac:	53                   	push   ebx
c000aaad:	e8 8e 5a ff ff       	call   c0000540 <strlen>
c000aab2:	83 c4 10             	add    esp,0x10
c000aab5:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000aaba:	74 c7                	je     c000aa83 <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c000aabc:	81 c4 0c 04 00 00    	add    esp,0x40c
c000aac2:	5b                   	pop    ebx
c000aac3:	5e                   	pop    esi
c000aac4:	5f                   	pop    edi
c000aac5:	5d                   	pop    ebp
c000aac6:	c3                   	ret    
c000aac7:	90                   	nop

c000aac8 <File::File(char const*, Process*)>:
c000aac8:	83 ec 0c             	sub    esp,0xc
c000aacb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aacf:	83 ec 08             	sub    esp,0x8
c000aad2:	6a 00                	push   0x0
c000aad4:	50                   	push   eax
c000aad5:	e8 78 e3 ff ff       	call   c0008e52 <UnixFile::UnixFile(int)>
c000aada:	83 c4 10             	add    esp,0x10
c000aadd:	ba 84 e5 01 c0       	mov    edx,0xc001e584
c000aae2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aae6:	89 10                	mov    DWORD PTR [eax],edx
c000aae8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000aaec:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000aaf2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aaf6:	83 c0 0d             	add    eax,0xd
c000aaf9:	83 ec 04             	sub    esp,0x4
c000aafc:	52                   	push   edx
c000aafd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ab01:	50                   	push   eax
c000ab02:	e8 17 fe ff ff       	call   c000a91e <Fs::standardiseFiles(char*, char const*, char const*)>
c000ab07:	83 c4 10             	add    esp,0x10
c000ab0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab0e:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000ab11:	8d 50 bf             	lea    edx,[eax-0x41]
c000ab14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab18:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000ab1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab22:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000ab26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab2a:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000ab30:	25 ff 00 00 00       	and    eax,0xff
c000ab35:	8b 04 85 20 54 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdabe0]
c000ab3c:	85 c0                	test   eax,eax
c000ab3e:	74 42                	je     c000ab82 <File::File(char const*, Process*)+0xba>
c000ab40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab44:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000ab4a:	25 ff 00 00 00       	and    eax,0xff
c000ab4f:	8b 04 85 20 54 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdabe0]
c000ab56:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000ab5c:	85 c0                	test   eax,eax
c000ab5e:	75 22                	jne    c000ab82 <File::File(char const*, Process*)+0xba>
c000ab60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab64:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000ab6a:	25 ff 00 00 00       	and    eax,0xff
c000ab6f:	8b 04 85 20 54 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdabe0]
c000ab76:	83 ec 0c             	sub    esp,0xc
c000ab79:	50                   	push   eax
c000ab7a:	e8 73 20 00 00       	call   c000cbf2 <LogicalDisk::mount()>
c000ab7f:	83 c4 10             	add    esp,0x10
c000ab82:	90                   	nop
c000ab83:	83 c4 0c             	add    esp,0xc
c000ab86:	c3                   	ret    
c000ab87:	90                   	nop

c000ab88 <File::open(FileOpenMode)>:
c000ab88:	53                   	push   ebx
c000ab89:	b8 0b 00 00 00       	mov    eax,0xb
c000ab8e:	83 ec 08             	sub    esp,0x8
c000ab91:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ab95:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000ab9c:	80 fa 19             	cmp    dl,0x19
c000ab9f:	77 40                	ja     c000abe1 <File::open(FileOpenMode)+0x59>
c000aba1:	8b 14 95 20 54 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdabe0]
c000aba8:	85 d2                	test   edx,edx
c000abaa:	74 35                	je     c000abe1 <File::open(FileOpenMode)+0x59>
c000abac:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000abb2:	85 d2                	test   edx,edx
c000abb4:	74 2b                	je     c000abe1 <File::open(FileOpenMode)+0x59>
c000abb6:	b8 06 00 00 00       	mov    eax,0x6
c000abbb:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000abbf:	75 20                	jne    c000abe1 <File::open(FileOpenMode)+0x59>
c000abc1:	8b 02                	mov    eax,DWORD PTR [edx]
c000abc3:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000abc9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000abcd:	51                   	push   ecx
c000abce:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000abd1:	51                   	push   ecx
c000abd2:	52                   	push   edx
c000abd3:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000abd6:	83 c4 10             	add    esp,0x10
c000abd9:	85 c0                	test   eax,eax
c000abdb:	75 04                	jne    c000abe1 <File::open(FileOpenMode)+0x59>
c000abdd:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000abe1:	83 c4 08             	add    esp,0x8
c000abe4:	5b                   	pop    ebx
c000abe5:	c3                   	ret    

c000abe6 <File::close()>:
c000abe6:	53                   	push   ebx
c000abe7:	b8 0b 00 00 00       	mov    eax,0xb
c000abec:	83 ec 08             	sub    esp,0x8
c000abef:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000abf3:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000abfa:	80 fa 19             	cmp    dl,0x19
c000abfd:	77 41                	ja     c000ac40 <File::close()+0x5a>
c000abff:	8b 1c 95 20 54 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffdabe0]
c000ac06:	85 db                	test   ebx,ebx
c000ac08:	74 36                	je     c000ac40 <File::close()+0x5a>
c000ac0a:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000ac11:	74 2d                	je     c000ac40 <File::close()+0x5a>
c000ac13:	b8 05 00 00 00       	mov    eax,0x5
c000ac18:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000ac1c:	74 22                	je     c000ac40 <File::close()+0x5a>
c000ac1e:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000ac22:	8b 04 95 20 54 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdabe0]
c000ac29:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000ac2f:	53                   	push   ebx
c000ac30:	53                   	push   ebx
c000ac31:	8b 10                	mov    edx,DWORD PTR [eax]
c000ac33:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000ac39:	50                   	push   eax
c000ac3a:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c000ac3d:	83 c4 10             	add    esp,0x10
c000ac40:	83 c4 08             	add    esp,0x8
c000ac43:	5b                   	pop    ebx
c000ac44:	c3                   	ret    
c000ac45:	90                   	nop

c000ac46 <File::seek(unsigned long long)>:
c000ac46:	56                   	push   esi
c000ac47:	53                   	push   ebx
c000ac48:	b8 0b 00 00 00       	mov    eax,0xb
c000ac4d:	51                   	push   ecx
c000ac4e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ac52:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ac56:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000ac5d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000ac61:	80 fa 19             	cmp    dl,0x19
c000ac64:	77 31                	ja     c000ac97 <File::seek(unsigned long long)+0x51>
c000ac66:	8b 14 95 20 54 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdabe0]
c000ac6d:	85 d2                	test   edx,edx
c000ac6f:	74 26                	je     c000ac97 <File::seek(unsigned long long)+0x51>
c000ac71:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000ac77:	85 d2                	test   edx,edx
c000ac79:	74 1c                	je     c000ac97 <File::seek(unsigned long long)+0x51>
c000ac7b:	b8 05 00 00 00       	mov    eax,0x5
c000ac80:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000ac84:	74 11                	je     c000ac97 <File::seek(unsigned long long)+0x51>
c000ac86:	8b 02                	mov    eax,DWORD PTR [edx]
c000ac88:	53                   	push   ebx
c000ac89:	51                   	push   ecx
c000ac8a:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000ac90:	52                   	push   edx
c000ac91:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000ac94:	83 c4 10             	add    esp,0x10
c000ac97:	5a                   	pop    edx
c000ac98:	5b                   	pop    ebx
c000ac99:	5e                   	pop    esi
c000ac9a:	c3                   	ret    
c000ac9b:	90                   	nop

c000ac9c <File::tell(unsigned long long*)>:
c000ac9c:	83 ec 0c             	sub    esp,0xc
c000ac9f:	b8 0b 00 00 00       	mov    eax,0xb
c000aca4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000aca8:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000acaf:	80 fa 19             	cmp    dl,0x19
c000acb2:	77 34                	ja     c000ace8 <File::tell(unsigned long long*)+0x4c>
c000acb4:	8b 14 95 20 54 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdabe0]
c000acbb:	85 d2                	test   edx,edx
c000acbd:	74 29                	je     c000ace8 <File::tell(unsigned long long*)+0x4c>
c000acbf:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000acc5:	85 d2                	test   edx,edx
c000acc7:	74 1f                	je     c000ace8 <File::tell(unsigned long long*)+0x4c>
c000acc9:	b8 05 00 00 00       	mov    eax,0x5
c000acce:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000acd2:	74 14                	je     c000ace8 <File::tell(unsigned long long*)+0x4c>
c000acd4:	50                   	push   eax
c000acd5:	8b 02                	mov    eax,DWORD PTR [edx]
c000acd7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000acdb:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000ace1:	52                   	push   edx
c000ace2:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000ace5:	83 c4 10             	add    esp,0x10
c000ace8:	83 c4 0c             	add    esp,0xc
c000aceb:	c3                   	ret    

c000acec <File::rewind()>:
c000acec:	83 ec 10             	sub    esp,0x10
c000acef:	6a 00                	push   0x0
c000acf1:	6a 00                	push   0x0
c000acf3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000acf7:	e8 4a ff ff ff       	call   c000ac46 <File::seek(unsigned long long)>
c000acfc:	83 c4 1c             	add    esp,0x1c
c000acff:	c3                   	ret    

c000ad00 <File::unlink()>:
c000ad00:	83 ec 0c             	sub    esp,0xc
c000ad03:	b8 0b 00 00 00       	mov    eax,0xb
c000ad08:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ad0c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000ad13:	80 f9 19             	cmp    cl,0x19
c000ad16:	77 2f                	ja     c000ad47 <File::unlink()+0x47>
c000ad18:	8b 0c 8d 20 54 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdabe0]
c000ad1f:	85 c9                	test   ecx,ecx
c000ad21:	74 24                	je     c000ad47 <File::unlink()+0x47>
c000ad23:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000ad29:	85 c9                	test   ecx,ecx
c000ad2b:	74 1a                	je     c000ad47 <File::unlink()+0x47>
c000ad2d:	b8 06 00 00 00       	mov    eax,0x6
c000ad32:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ad36:	75 0f                	jne    c000ad47 <File::unlink()+0x47>
c000ad38:	83 c2 0d             	add    edx,0xd
c000ad3b:	50                   	push   eax
c000ad3c:	50                   	push   eax
c000ad3d:	8b 01                	mov    eax,DWORD PTR [ecx]
c000ad3f:	52                   	push   edx
c000ad40:	51                   	push   ecx
c000ad41:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000ad44:	83 c4 10             	add    esp,0x10
c000ad47:	83 c4 0c             	add    esp,0xc
c000ad4a:	c3                   	ret    
c000ad4b:	90                   	nop

c000ad4c <File::rename(char const*)>:
c000ad4c:	83 ec 0c             	sub    esp,0xc
c000ad4f:	b8 0b 00 00 00       	mov    eax,0xb
c000ad54:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ad58:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000ad5f:	80 f9 19             	cmp    cl,0x19
c000ad62:	77 32                	ja     c000ad96 <File::rename(char const*)+0x4a>
c000ad64:	8b 0c 8d 20 54 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdabe0]
c000ad6b:	85 c9                	test   ecx,ecx
c000ad6d:	74 27                	je     c000ad96 <File::rename(char const*)+0x4a>
c000ad6f:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000ad75:	85 c9                	test   ecx,ecx
c000ad77:	74 1d                	je     c000ad96 <File::rename(char const*)+0x4a>
c000ad79:	b8 06 00 00 00       	mov    eax,0x6
c000ad7e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ad82:	75 12                	jne    c000ad96 <File::rename(char const*)+0x4a>
c000ad84:	83 c2 0d             	add    edx,0xd
c000ad87:	50                   	push   eax
c000ad88:	8b 01                	mov    eax,DWORD PTR [ecx]
c000ad8a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ad8e:	52                   	push   edx
c000ad8f:	51                   	push   ecx
c000ad90:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000ad93:	83 c4 10             	add    esp,0x10
c000ad96:	83 c4 0c             	add    esp,0xc
c000ad99:	c3                   	ret    

c000ad9a <File::chfatattr(unsigned char, unsigned char)>:
c000ad9a:	57                   	push   edi
c000ad9b:	b8 0b 00 00 00       	mov    eax,0xb
c000ada0:	56                   	push   esi
c000ada1:	53                   	push   ebx
c000ada2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ada6:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000adaa:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000adb1:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000adb5:	80 f9 19             	cmp    cl,0x19
c000adb8:	77 37                	ja     c000adf1 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000adba:	8b 0c 8d 20 54 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdabe0]
c000adc1:	85 c9                	test   ecx,ecx
c000adc3:	74 2c                	je     c000adf1 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000adc5:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000adcb:	85 c9                	test   ecx,ecx
c000adcd:	74 22                	je     c000adf1 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000adcf:	b8 06 00 00 00       	mov    eax,0x6
c000add4:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000add8:	75 17                	jne    c000adf1 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000adda:	8b 39                	mov    edi,DWORD PTR [ecx]
c000addc:	89 f0                	mov    eax,esi
c000adde:	83 c2 0d             	add    edx,0xd
c000ade1:	0f b6 f0             	movzx  esi,al
c000ade4:	0f b6 db             	movzx  ebx,bl
c000ade7:	56                   	push   esi
c000ade8:	53                   	push   ebx
c000ade9:	52                   	push   edx
c000adea:	51                   	push   ecx
c000adeb:	ff 57 34             	call   DWORD PTR [edi+0x34]
c000adee:	83 c4 10             	add    esp,0x10
c000adf1:	5b                   	pop    ebx
c000adf2:	5e                   	pop    esi
c000adf3:	5f                   	pop    edi
c000adf4:	c3                   	ret    
c000adf5:	90                   	nop

c000adf6 <File::exists()>:
c000adf6:	83 ec 0c             	sub    esp,0xc
c000adf9:	31 c0                	xor    eax,eax
c000adfb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000adff:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000ae06:	80 f9 19             	cmp    cl,0x19
c000ae09:	77 24                	ja     c000ae2f <File::exists()+0x39>
c000ae0b:	8b 0c 8d 20 54 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdabe0]
c000ae12:	85 c9                	test   ecx,ecx
c000ae14:	74 19                	je     c000ae2f <File::exists()+0x39>
c000ae16:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000ae1c:	85 c9                	test   ecx,ecx
c000ae1e:	74 0f                	je     c000ae2f <File::exists()+0x39>
c000ae20:	83 c2 0d             	add    edx,0xd
c000ae23:	50                   	push   eax
c000ae24:	50                   	push   eax
c000ae25:	8b 01                	mov    eax,DWORD PTR [ecx]
c000ae27:	52                   	push   edx
c000ae28:	51                   	push   ecx
c000ae29:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000ae2c:	83 c4 10             	add    esp,0x10
c000ae2f:	83 c4 0c             	add    esp,0xc
c000ae32:	c3                   	ret    
c000ae33:	90                   	nop

c000ae34 <File::stat(unsigned long long*, bool*)>:
c000ae34:	56                   	push   esi
c000ae35:	53                   	push   ebx
c000ae36:	50                   	push   eax
c000ae37:	b8 0b 00 00 00       	mov    eax,0xb
c000ae3c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ae40:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000ae44:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000ae4b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000ae4f:	80 f9 19             	cmp    cl,0x19
c000ae52:	77 3d                	ja     c000ae91 <File::stat(unsigned long long*, bool*)+0x5d>
c000ae54:	8b 0c 8d 20 54 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdabe0]
c000ae5b:	85 c9                	test   ecx,ecx
c000ae5d:	74 32                	je     c000ae91 <File::stat(unsigned long long*, bool*)+0x5d>
c000ae5f:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000ae65:	85 c9                	test   ecx,ecx
c000ae67:	74 28                	je     c000ae91 <File::stat(unsigned long long*, bool*)+0x5d>
c000ae69:	8b 01                	mov    eax,DWORD PTR [ecx]
c000ae6b:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ae6f:	74 13                	je     c000ae84 <File::stat(unsigned long long*, bool*)+0x50>
c000ae71:	83 ec 04             	sub    esp,0x4
c000ae74:	56                   	push   esi
c000ae75:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000ae7b:	51                   	push   ecx
c000ae7c:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000ae7f:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000ae82:	eb 0a                	jmp    c000ae8e <File::stat(unsigned long long*, bool*)+0x5a>
c000ae84:	53                   	push   ebx
c000ae85:	83 c2 0d             	add    edx,0xd
c000ae88:	56                   	push   esi
c000ae89:	52                   	push   edx
c000ae8a:	51                   	push   ecx
c000ae8b:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000ae8e:	83 c4 10             	add    esp,0x10
c000ae91:	5a                   	pop    edx
c000ae92:	5b                   	pop    ebx
c000ae93:	5e                   	pop    esi
c000ae94:	c3                   	ret    

c000ae95 <Fs::setcwd(Process*, char*)>:
c000ae95:	55                   	push   ebp
c000ae96:	57                   	push   edi
c000ae97:	56                   	push   esi
c000ae98:	53                   	push   ebx
c000ae99:	81 ec 20 02 00 00    	sub    esp,0x220
c000ae9f:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c000aea6:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000aeac:	57                   	push   edi
c000aead:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000aeb4:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000aeb8:	56                   	push   esi
c000aeb9:	e8 60 fa ff ff       	call   c000a91e <Fs::standardiseFiles(char*, char const*, char const*)>
c000aebe:	89 34 24             	mov    DWORD PTR [esp],esi
c000aec1:	e8 7a 56 ff ff       	call   c0000540 <strlen>
c000aec6:	83 c4 10             	add    esp,0x10
c000aec9:	83 f8 02             	cmp    eax,0x2
c000aecc:	77 15                	ja     c000aee3 <Fs::setcwd(Process*, char*)+0x4e>
c000aece:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c000aed3:	83 eb 41             	sub    ebx,0x41
c000aed6:	8b 04 9d 20 54 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdabe0]
c000aedd:	85 c0                	test   eax,eax
c000aedf:	75 1c                	jne    c000aefd <Fs::setcwd(Process*, char*)+0x68>
c000aee1:	eb 2f                	jmp    c000af12 <Fs::setcwd(Process*, char*)+0x7d>
c000aee3:	83 ec 0c             	sub    esp,0xc
c000aee6:	56                   	push   esi
c000aee7:	e8 54 56 ff ff       	call   c0000540 <strlen>
c000aeec:	83 c4 10             	add    esp,0x10
c000aeef:	83 f8 03             	cmp    eax,0x3
c000aef2:	75 57                	jne    c000af4b <Fs::setcwd(Process*, char*)+0xb6>
c000aef4:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000aef9:	75 50                	jne    c000af4b <Fs::setcwd(Process*, char*)+0xb6>
c000aefb:	eb d1                	jmp    c000aece <Fs::setcwd(Process*, char*)+0x39>
c000aefd:	83 b8 70 01 00 00 00 	cmp    DWORD PTR [eax+0x170],0x0
c000af04:	75 0c                	jne    c000af12 <Fs::setcwd(Process*, char*)+0x7d>
c000af06:	83 ec 0c             	sub    esp,0xc
c000af09:	50                   	push   eax
c000af0a:	e8 e3 1c 00 00       	call   c000cbf2 <LogicalDisk::mount()>
c000af0f:	83 c4 10             	add    esp,0x10
c000af12:	b8 03 00 00 00       	mov    eax,0x3
c000af17:	83 fb 19             	cmp    ebx,0x19
c000af1a:	0f 87 13 01 00 00    	ja     c000b033 <Fs::setcwd(Process*, char*)+0x19e>
c000af20:	8b 14 9d 20 54 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffdabe0]
c000af27:	b8 05 00 00 00       	mov    eax,0x5
c000af2c:	85 d2                	test   edx,edx
c000af2e:	0f 84 ff 00 00 00    	je     c000b033 <Fs::setcwd(Process*, char*)+0x19e>
c000af34:	b8 06 00 00 00       	mov    eax,0x6
c000af39:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000af40:	0f 85 df 00 00 00    	jne    c000b025 <Fs::setcwd(Process*, char*)+0x190>
c000af46:	e9 e8 00 00 00       	jmp    c000b033 <Fs::setcwd(Process*, char*)+0x19e>
c000af4b:	83 ec 0c             	sub    esp,0xc
c000af4e:	68 14 01 00 00       	push   0x114
c000af53:	e8 61 c8 ff ff       	call   c00077b9 <malloc>
c000af58:	83 c4 0c             	add    esp,0xc
c000af5b:	89 c3                	mov    ebx,eax
c000af5d:	55                   	push   ebp
c000af5e:	56                   	push   esi
c000af5f:	50                   	push   eax
c000af60:	e8 63 fb ff ff       	call   c000aac8 <File::File(char const*, Process*)>
c000af65:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000af6a:	5a                   	pop    edx
c000af6b:	59                   	pop    ecx
c000af6c:	56                   	push   esi
c000af6d:	68 c4 e4 01 c0       	push   0xc001e4c4
c000af72:	e8 db f5 ff ff       	call   c000a552 <Dbg::kprintf(char const*, ...)>
c000af77:	83 c4 0c             	add    esp,0xc
c000af7a:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000af7e:	50                   	push   eax
c000af7f:	8d 44 24 10          	lea    eax,[esp+0x10]
c000af83:	50                   	push   eax
c000af84:	53                   	push   ebx
c000af85:	e8 aa fe ff ff       	call   c000ae34 <File::stat(unsigned long long*, bool*)>
c000af8a:	83 c4 10             	add    esp,0x10
c000af8d:	83 f8 02             	cmp    eax,0x2
c000af90:	75 1a                	jne    c000afac <Fs::setcwd(Process*, char*)+0x117>
c000af92:	85 db                	test   ebx,ebx
c000af94:	74 0c                	je     c000afa2 <Fs::setcwd(Process*, char*)+0x10d>
c000af96:	83 ec 0c             	sub    esp,0xc
c000af99:	8b 03                	mov    eax,DWORD PTR [ebx]
c000af9b:	53                   	push   ebx
c000af9c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000af9f:	83 c4 10             	add    esp,0x10
c000afa2:	83 ec 0c             	sub    esp,0xc
c000afa5:	68 e7 e4 01 c0       	push   0xc001e4e7
c000afaa:	eb 4a                	jmp    c000aff6 <Fs::setcwd(Process*, char*)+0x161>
c000afac:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000afb1:	75 27                	jne    c000afda <Fs::setcwd(Process*, char*)+0x145>
c000afb3:	85 db                	test   ebx,ebx
c000afb5:	74 0c                	je     c000afc3 <Fs::setcwd(Process*, char*)+0x12e>
c000afb7:	83 ec 0c             	sub    esp,0xc
c000afba:	8b 03                	mov    eax,DWORD PTR [ebx]
c000afbc:	53                   	push   ebx
c000afbd:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000afc0:	83 c4 10             	add    esp,0x10
c000afc3:	83 ec 0c             	sub    esp,0xc
c000afc6:	68 f3 e4 01 c0       	push   0xc001e4f3
c000afcb:	e8 82 f5 ff ff       	call   c000a552 <Dbg::kprintf(char const*, ...)>
c000afd0:	83 c4 10             	add    esp,0x10
c000afd3:	b8 02 00 00 00       	mov    eax,0x2
c000afd8:	eb 59                	jmp    c000b033 <Fs::setcwd(Process*, char*)+0x19e>
c000afda:	85 c0                	test   eax,eax
c000afdc:	74 27                	je     c000b005 <Fs::setcwd(Process*, char*)+0x170>
c000afde:	85 db                	test   ebx,ebx
c000afe0:	74 0c                	je     c000afee <Fs::setcwd(Process*, char*)+0x159>
c000afe2:	83 ec 0c             	sub    esp,0xc
c000afe5:	8b 03                	mov    eax,DWORD PTR [ebx]
c000afe7:	53                   	push   ebx
c000afe8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000afeb:	83 c4 10             	add    esp,0x10
c000afee:	83 ec 0c             	sub    esp,0xc
c000aff1:	68 03 e5 01 c0       	push   0xc001e503
c000aff6:	e8 57 f5 ff ff       	call   c000a552 <Dbg::kprintf(char const*, ...)>
c000affb:	83 c4 10             	add    esp,0x10
c000affe:	b8 01 00 00 00       	mov    eax,0x1
c000b003:	eb 2e                	jmp    c000b033 <Fs::setcwd(Process*, char*)+0x19e>
c000b005:	83 ec 0c             	sub    esp,0xc
c000b008:	68 07 e5 01 c0       	push   0xc001e507
c000b00d:	e8 40 f5 ff ff       	call   c000a552 <Dbg::kprintf(char const*, ...)>
c000b012:	83 c4 10             	add    esp,0x10
c000b015:	85 db                	test   ebx,ebx
c000b017:	74 0c                	je     c000b025 <Fs::setcwd(Process*, char*)+0x190>
c000b019:	83 ec 0c             	sub    esp,0xc
c000b01c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b01e:	53                   	push   ebx
c000b01f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b022:	83 c4 10             	add    esp,0x10
c000b025:	50                   	push   eax
c000b026:	50                   	push   eax
c000b027:	56                   	push   esi
c000b028:	57                   	push   edi
c000b029:	e8 d2 55 ff ff       	call   c0000600 <strcpy>
c000b02e:	83 c4 10             	add    esp,0x10
c000b031:	31 c0                	xor    eax,eax
c000b033:	81 c4 1c 02 00 00    	add    esp,0x21c
c000b039:	5b                   	pop    ebx
c000b03a:	5e                   	pop    esi
c000b03b:	5f                   	pop    edi
c000b03c:	5d                   	pop    ebp
c000b03d:	c3                   	ret    

c000b03e <Directory::Directory(char const*, Process*)>:
c000b03e:	83 ec 0c             	sub    esp,0xc
c000b041:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b045:	83 ec 08             	sub    esp,0x8
c000b048:	6a 00                	push   0x0
c000b04a:	50                   	push   eax
c000b04b:	e8 02 de ff ff       	call   c0008e52 <UnixFile::UnixFile(int)>
c000b050:	83 c4 10             	add    esp,0x10
c000b053:	ba a0 e5 01 c0       	mov    edx,0xc001e5a0
c000b058:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b05c:	89 10                	mov    DWORD PTR [eax],edx
c000b05e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b062:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000b068:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b06c:	83 c0 0d             	add    eax,0xd
c000b06f:	83 ec 04             	sub    esp,0x4
c000b072:	52                   	push   edx
c000b073:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b077:	50                   	push   eax
c000b078:	e8 a1 f8 ff ff       	call   c000a91e <Fs::standardiseFiles(char*, char const*, char const*)>
c000b07d:	83 c4 10             	add    esp,0x10
c000b080:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b084:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000b087:	8d 50 bf             	lea    edx,[eax-0x41]
c000b08a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b08e:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000b094:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b098:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000b09c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b0a0:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b0a6:	25 ff 00 00 00       	and    eax,0xff
c000b0ab:	8b 04 85 20 54 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdabe0]
c000b0b2:	85 c0                	test   eax,eax
c000b0b4:	74 42                	je     c000b0f8 <Directory::Directory(char const*, Process*)+0xba>
c000b0b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b0ba:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b0c0:	25 ff 00 00 00       	and    eax,0xff
c000b0c5:	8b 04 85 20 54 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdabe0]
c000b0cc:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000b0d2:	85 c0                	test   eax,eax
c000b0d4:	75 22                	jne    c000b0f8 <Directory::Directory(char const*, Process*)+0xba>
c000b0d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b0da:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b0e0:	25 ff 00 00 00       	and    eax,0xff
c000b0e5:	8b 04 85 20 54 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdabe0]
c000b0ec:	83 ec 0c             	sub    esp,0xc
c000b0ef:	50                   	push   eax
c000b0f0:	e8 fd 1a 00 00       	call   c000cbf2 <LogicalDisk::mount()>
c000b0f5:	83 c4 10             	add    esp,0x10
c000b0f8:	90                   	nop
c000b0f9:	83 c4 0c             	add    esp,0xc
c000b0fc:	c3                   	ret    
c000b0fd:	90                   	nop

c000b0fe <Directory::open()>:
c000b0fe:	53                   	push   ebx
c000b0ff:	b8 0b 00 00 00       	mov    eax,0xb
c000b104:	83 ec 08             	sub    esp,0x8
c000b107:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b10b:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000b112:	80 fa 19             	cmp    dl,0x19
c000b115:	77 3d                	ja     c000b154 <Directory::open()+0x56>
c000b117:	8b 14 95 20 54 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdabe0]
c000b11e:	85 d2                	test   edx,edx
c000b120:	74 32                	je     c000b154 <Directory::open()+0x56>
c000b122:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000b128:	85 d2                	test   edx,edx
c000b12a:	74 28                	je     c000b154 <Directory::open()+0x56>
c000b12c:	b8 06 00 00 00       	mov    eax,0x6
c000b131:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000b135:	75 1d                	jne    c000b154 <Directory::open()+0x56>
c000b137:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000b13d:	50                   	push   eax
c000b13e:	8b 02                	mov    eax,DWORD PTR [edx]
c000b140:	51                   	push   ecx
c000b141:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000b144:	51                   	push   ecx
c000b145:	52                   	push   edx
c000b146:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c000b149:	83 c4 10             	add    esp,0x10
c000b14c:	85 c0                	test   eax,eax
c000b14e:	75 04                	jne    c000b154 <Directory::open()+0x56>
c000b150:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000b154:	83 c4 08             	add    esp,0x8
c000b157:	5b                   	pop    ebx
c000b158:	c3                   	ret    
c000b159:	90                   	nop

c000b15a <Directory::close()>:
c000b15a:	53                   	push   ebx
c000b15b:	b8 0b 00 00 00       	mov    eax,0xb
c000b160:	83 ec 08             	sub    esp,0x8
c000b163:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b167:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000b16e:	80 fa 19             	cmp    dl,0x19
c000b171:	77 41                	ja     c000b1b4 <Directory::close()+0x5a>
c000b173:	8b 1c 95 20 54 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffdabe0]
c000b17a:	85 db                	test   ebx,ebx
c000b17c:	74 36                	je     c000b1b4 <Directory::close()+0x5a>
c000b17e:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000b185:	74 2d                	je     c000b1b4 <Directory::close()+0x5a>
c000b187:	b8 05 00 00 00       	mov    eax,0x5
c000b18c:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000b190:	74 22                	je     c000b1b4 <Directory::close()+0x5a>
c000b192:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000b196:	8b 04 95 20 54 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdabe0]
c000b19d:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000b1a3:	53                   	push   ebx
c000b1a4:	53                   	push   ebx
c000b1a5:	8b 10                	mov    edx,DWORD PTR [eax]
c000b1a7:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000b1ad:	50                   	push   eax
c000b1ae:	ff 52 20             	call   DWORD PTR [edx+0x20]
c000b1b1:	83 c4 10             	add    esp,0x10
c000b1b4:	83 c4 08             	add    esp,0x8
c000b1b7:	5b                   	pop    ebx
c000b1b8:	c3                   	ret    
c000b1b9:	90                   	nop

c000b1ba <Directory::unlink()>:
c000b1ba:	83 ec 0c             	sub    esp,0xc
c000b1bd:	b8 0b 00 00 00       	mov    eax,0xb
c000b1c2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b1c6:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b1cd:	80 f9 19             	cmp    cl,0x19
c000b1d0:	77 2f                	ja     c000b201 <Directory::unlink()+0x47>
c000b1d2:	8b 0c 8d 20 54 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdabe0]
c000b1d9:	85 c9                	test   ecx,ecx
c000b1db:	74 24                	je     c000b201 <Directory::unlink()+0x47>
c000b1dd:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b1e3:	85 c9                	test   ecx,ecx
c000b1e5:	74 1a                	je     c000b201 <Directory::unlink()+0x47>
c000b1e7:	b8 06 00 00 00       	mov    eax,0x6
c000b1ec:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b1f0:	75 0f                	jne    c000b201 <Directory::unlink()+0x47>
c000b1f2:	83 c2 0d             	add    edx,0xd
c000b1f5:	50                   	push   eax
c000b1f6:	50                   	push   eax
c000b1f7:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b1f9:	52                   	push   edx
c000b1fa:	51                   	push   ecx
c000b1fb:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000b1fe:	83 c4 10             	add    esp,0x10
c000b201:	83 c4 0c             	add    esp,0xc
c000b204:	c3                   	ret    
c000b205:	90                   	nop

c000b206 <Directory::rename(char const*)>:
c000b206:	83 ec 0c             	sub    esp,0xc
c000b209:	b8 0b 00 00 00       	mov    eax,0xb
c000b20e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b212:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b219:	80 f9 19             	cmp    cl,0x19
c000b21c:	77 32                	ja     c000b250 <Directory::rename(char const*)+0x4a>
c000b21e:	8b 0c 8d 20 54 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdabe0]
c000b225:	85 c9                	test   ecx,ecx
c000b227:	74 27                	je     c000b250 <Directory::rename(char const*)+0x4a>
c000b229:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b22f:	85 c9                	test   ecx,ecx
c000b231:	74 1d                	je     c000b250 <Directory::rename(char const*)+0x4a>
c000b233:	b8 06 00 00 00       	mov    eax,0x6
c000b238:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b23c:	75 12                	jne    c000b250 <Directory::rename(char const*)+0x4a>
c000b23e:	83 c2 0d             	add    edx,0xd
c000b241:	50                   	push   eax
c000b242:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b244:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b248:	52                   	push   edx
c000b249:	51                   	push   ecx
c000b24a:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000b24d:	83 c4 10             	add    esp,0x10
c000b250:	83 c4 0c             	add    esp,0xc
c000b253:	c3                   	ret    

c000b254 <Directory::exists()>:
c000b254:	83 ec 0c             	sub    esp,0xc
c000b257:	31 c0                	xor    eax,eax
c000b259:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b25d:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b264:	80 f9 19             	cmp    cl,0x19
c000b267:	77 24                	ja     c000b28d <Directory::exists()+0x39>
c000b269:	8b 0c 8d 20 54 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdabe0]
c000b270:	85 c9                	test   ecx,ecx
c000b272:	74 19                	je     c000b28d <Directory::exists()+0x39>
c000b274:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b27a:	85 c9                	test   ecx,ecx
c000b27c:	74 0f                	je     c000b28d <Directory::exists()+0x39>
c000b27e:	83 c2 0d             	add    edx,0xd
c000b281:	50                   	push   eax
c000b282:	50                   	push   eax
c000b283:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b285:	52                   	push   edx
c000b286:	51                   	push   ecx
c000b287:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000b28a:	83 c4 10             	add    esp,0x10
c000b28d:	83 c4 0c             	add    esp,0xc
c000b290:	c3                   	ret    
c000b291:	90                   	nop

c000b292 <Directory::read(dirent*)>:
c000b292:	83 ec 1c             	sub    esp,0x1c
c000b295:	b8 0b 00 00 00       	mov    eax,0xb
c000b29a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b29e:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000b2a5:	80 fa 19             	cmp    dl,0x19
c000b2a8:	77 30                	ja     c000b2da <Directory::read(dirent*)+0x48>
c000b2aa:	8b 14 95 20 54 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdabe0]
c000b2b1:	85 d2                	test   edx,edx
c000b2b3:	74 25                	je     c000b2da <Directory::read(dirent*)+0x48>
c000b2b5:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000b2bc:	74 1c                	je     c000b2da <Directory::read(dirent*)+0x48>
c000b2be:	83 ec 0c             	sub    esp,0xc
c000b2c1:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b2c3:	8d 54 24 18          	lea    edx,[esp+0x18]
c000b2c7:	52                   	push   edx
c000b2c8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2cc:	6a 00                	push   0x0
c000b2ce:	68 10 01 00 00       	push   0x110
c000b2d3:	51                   	push   ecx
c000b2d4:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b2d7:	83 c4 20             	add    esp,0x20
c000b2da:	83 c4 1c             	add    esp,0x1c
c000b2dd:	c3                   	ret    

c000b2de <Directory::create()>:
c000b2de:	83 ec 0c             	sub    esp,0xc
c000b2e1:	b8 0b 00 00 00       	mov    eax,0xb
c000b2e6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b2ea:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b2f1:	80 f9 19             	cmp    cl,0x19
c000b2f4:	77 2f                	ja     c000b325 <Directory::create()+0x47>
c000b2f6:	8b 0c 8d 20 54 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdabe0]
c000b2fd:	85 c9                	test   ecx,ecx
c000b2ff:	74 24                	je     c000b325 <Directory::create()+0x47>
c000b301:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b307:	85 c9                	test   ecx,ecx
c000b309:	74 1a                	je     c000b325 <Directory::create()+0x47>
c000b30b:	b8 06 00 00 00       	mov    eax,0x6
c000b310:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b314:	75 0f                	jne    c000b325 <Directory::create()+0x47>
c000b316:	83 c2 0d             	add    edx,0xd
c000b319:	50                   	push   eax
c000b31a:	50                   	push   eax
c000b31b:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b31d:	52                   	push   edx
c000b31e:	51                   	push   ecx
c000b31f:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000b322:	83 c4 10             	add    esp,0x10
c000b325:	83 c4 0c             	add    esp,0xc
c000b328:	c3                   	ret    
c000b329:	90                   	nop

c000b32a <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000b32a:	b8 0a 00 00 00       	mov    eax,0xa
c000b32f:	c3                   	ret    

c000b330 <Bus::Bus(char const*)>:
c000b330:	83 ec 0c             	sub    esp,0xc
c000b333:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b337:	83 ec 08             	sub    esp,0x8
c000b33a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b33e:	50                   	push   eax
c000b33f:	e8 30 08 00 00       	call   c000bb74 <Device::Device(char const*)>
c000b344:	83 c4 10             	add    esp,0x10
c000b347:	ba bc e5 01 c0       	mov    edx,0xc001e5bc
c000b34c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b350:	89 10                	mov    DWORD PTR [eax],edx
c000b352:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b356:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000b360:	90                   	nop
c000b361:	83 c4 0c             	add    esp,0xc
c000b364:	c3                   	ret    
c000b365:	90                   	nop
c000b366:	66 90                	xchg   ax,ax

c000b368 <Bus::~Bus()>:
c000b368:	83 ec 0c             	sub    esp,0xc
c000b36b:	ba bc e5 01 c0       	mov    edx,0xc001e5bc
c000b370:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b374:	89 10                	mov    DWORD PTR [eax],edx
c000b376:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b37a:	83 ec 0c             	sub    esp,0xc
c000b37d:	50                   	push   eax
c000b37e:	e8 5b 05 00 00       	call   c000b8de <Device::~Device()>
c000b383:	83 c4 10             	add    esp,0x10
c000b386:	90                   	nop
c000b387:	83 c4 0c             	add    esp,0xc
c000b38a:	c3                   	ret    
c000b38b:	90                   	nop

c000b38c <Bus::~Bus()>:
c000b38c:	83 ec 0c             	sub    esp,0xc
c000b38f:	83 ec 0c             	sub    esp,0xc
c000b392:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b396:	e8 cd ff ff ff       	call   c000b368 <Bus::~Bus()>
c000b39b:	83 c4 10             	add    esp,0x10
c000b39e:	83 ec 08             	sub    esp,0x8
c000b3a1:	68 58 01 00 00       	push   0x158
c000b3a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b3aa:	e8 ad f0 ff ff       	call   c000a45c <operator delete(void*, unsigned long)>
c000b3af:	83 c4 10             	add    esp,0x10
c000b3b2:	83 c4 0c             	add    esp,0xc
c000b3b5:	c3                   	ret    

c000b3b6 <beepThread(void*)>:
c000b3b6:	83 ec 0c             	sub    esp,0xc
c000b3b9:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c000b3be:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b3c2:	48                   	dec    eax
c000b3c3:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c000b3c8:	75 01                	jne    c000b3cb <beepThread(void*)+0x15>
c000b3ca:	fb                   	sti    
c000b3cb:	83 ec 0c             	sub    esp,0xc
c000b3ce:	6b c2 0a             	imul   eax,edx,0xa
c000b3d1:	50                   	push   eax
c000b3d2:	e8 ed 86 00 00       	call   c0013ac4 <milliTenthSleep(unsigned int)>
c000b3d7:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000b3de:	e8 93 a4 00 00       	call   c0015876 <HalMakeBeep(int)>
c000b3e3:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000b3eb:	83 c4 1c             	add    esp,0x1c
c000b3ee:	e9 cd 85 00 00       	jmp    c00139c0 <blockTask(TaskState)>

c000b3f3 <Krnl::beep(int, int, bool)>:
c000b3f3:	56                   	push   esi
c000b3f4:	53                   	push   ebx
c000b3f5:	83 ec 10             	sub    esp,0x10
c000b3f8:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000b3fc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000b400:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b404:	e8 6d a4 00 00       	call   c0015876 <HalMakeBeep(int)>
c000b409:	83 c4 10             	add    esp,0x10
c000b40c:	89 f0                	mov    eax,esi
c000b40e:	84 c0                	test   al,al
c000b410:	74 1e                	je     c000b430 <Krnl::beep(int, int, bool)+0x3d>
c000b412:	83 ec 0c             	sub    esp,0xc
c000b415:	6b db 0a             	imul   ebx,ebx,0xa
c000b418:	53                   	push   ebx
c000b419:	e8 a6 86 00 00       	call   c0013ac4 <milliTenthSleep(unsigned int)>
c000b41e:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000b426:	83 c4 14             	add    esp,0x14
c000b429:	5b                   	pop    ebx
c000b42a:	5e                   	pop    esi
c000b42b:	e9 46 a4 00 00       	jmp    c0015876 <HalMakeBeep(int)>
c000b430:	68 e6 00 00 00       	push   0xe6
c000b435:	53                   	push   ebx
c000b436:	68 b6 b3 00 c0       	push   0xc000b3b6
c000b43b:	ff 35 90 61 02 c0    	push   DWORD PTR ds:0xc0026190
c000b441:	e8 5e 81 00 00       	call   c00135a4 <Process::createThread(void (*)(void*), void*, int)>
c000b446:	83 c4 14             	add    esp,0x14
c000b449:	5b                   	pop    ebx
c000b44a:	5e                   	pop    esi
c000b44b:	c3                   	ret    

c000b44c <User::loadClockSettings(int)>:
c000b44c:	53                   	push   ebx
c000b44d:	83 ec 14             	sub    esp,0x14
c000b450:	68 14 01 00 00       	push   0x114
c000b455:	e8 5f c3 ff ff       	call   c00077b9 <malloc>
c000b45a:	83 c4 0c             	add    esp,0xc
c000b45d:	89 c3                	mov    ebx,eax
c000b45f:	ff 35 90 61 02 c0    	push   DWORD PTR ds:0xc0026190
c000b465:	68 e0 e5 01 c0       	push   0xc001e5e0
c000b46a:	50                   	push   eax
c000b46b:	e8 58 f6 ff ff       	call   c000aac8 <File::File(char const*, Process*)>
c000b470:	58                   	pop    eax
c000b471:	5a                   	pop    edx
c000b472:	6a 01                	push   0x1
c000b474:	53                   	push   ebx
c000b475:	e8 0e f7 ff ff       	call   c000ab88 <File::open(FileOpenMode)>
c000b47a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b47d:	e8 64 f7 ff ff       	call   c000abe6 <File::close()>
c000b482:	83 c4 10             	add    esp,0x10
c000b485:	85 db                	test   ebx,ebx
c000b487:	74 0f                	je     c000b498 <User::loadClockSettings(int)+0x4c>
c000b489:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b48b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b48f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000b492:	83 c4 08             	add    esp,0x8
c000b495:	5b                   	pop    ebx
c000b496:	ff e0                	jmp    eax
c000b498:	83 c4 08             	add    esp,0x8
c000b49b:	5b                   	pop    ebx
c000b49c:	c3                   	ret    
c000b49d:	90                   	nop

c000b49e <Clock::Clock(char const*)>:
c000b49e:	83 ec 0c             	sub    esp,0xc
c000b4a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b4a5:	83 ec 08             	sub    esp,0x8
c000b4a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4ac:	50                   	push   eax
c000b4ad:	e8 c2 06 00 00       	call   c000bb74 <Device::Device(char const*)>
c000b4b2:	83 c4 10             	add    esp,0x10
c000b4b5:	ba 08 e6 01 c0       	mov    edx,0xc001e608
c000b4ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b4be:	89 10                	mov    DWORD PTR [eax],edx
c000b4c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b4c4:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000b4ce:	90                   	nop
c000b4cf:	83 c4 0c             	add    esp,0xc
c000b4d2:	c3                   	ret    
c000b4d3:	90                   	nop

c000b4d4 <Clock::~Clock()>:
c000b4d4:	83 ec 0c             	sub    esp,0xc
c000b4d7:	ba 08 e6 01 c0       	mov    edx,0xc001e608
c000b4dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b4e0:	89 10                	mov    DWORD PTR [eax],edx
c000b4e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b4e6:	83 ec 0c             	sub    esp,0xc
c000b4e9:	50                   	push   eax
c000b4ea:	e8 ef 03 00 00       	call   c000b8de <Device::~Device()>
c000b4ef:	83 c4 10             	add    esp,0x10
c000b4f2:	90                   	nop
c000b4f3:	83 c4 0c             	add    esp,0xc
c000b4f6:	c3                   	ret    
c000b4f7:	90                   	nop

c000b4f8 <Clock::~Clock()>:
c000b4f8:	83 ec 0c             	sub    esp,0xc
c000b4fb:	83 ec 0c             	sub    esp,0xc
c000b4fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b502:	e8 cd ff ff ff       	call   c000b4d4 <Clock::~Clock()>
c000b507:	83 c4 10             	add    esp,0x10
c000b50a:	83 ec 08             	sub    esp,0x8
c000b50d:	68 58 01 00 00       	push   0x158
c000b512:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b516:	e8 41 ef ff ff       	call   c000a45c <operator delete(void*, unsigned long)>
c000b51b:	83 c4 10             	add    esp,0x10
c000b51e:	83 c4 0c             	add    esp,0xc
c000b521:	c3                   	ret    

c000b522 <Clock::timeInSecondsLocal()>:
c000b522:	53                   	push   ebx
c000b523:	83 ec 14             	sub    esp,0x14
c000b526:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b52a:	8b 10                	mov    edx,DWORD PTR [eax]
c000b52c:	50                   	push   eax
c000b52d:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000b530:	0f b6 0d b8 2f 02 c0 	movzx  ecx,BYTE PTR ds:0xc0022fb8
c000b537:	03 0d bc 2f 02 c0    	add    ecx,DWORD PTR ds:0xc0022fbc
c000b53d:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000b543:	89 cb                	mov    ebx,ecx
c000b545:	c1 fb 1f             	sar    ebx,0x1f
c000b548:	01 c8                	add    eax,ecx
c000b54a:	11 da                	adc    edx,ebx
c000b54c:	83 c4 10             	add    esp,0x10
c000b54f:	31 c9                	xor    ecx,ecx
c000b551:	80 3d b9 2f 02 c0 00 	cmp    BYTE PTR ds:0xc0022fb9,0x0
c000b558:	74 05                	je     c000b55f <Clock::timeInSecondsLocal()+0x3d>
c000b55a:	b9 08 07 00 00       	mov    ecx,0x708
c000b55f:	31 db                	xor    ebx,ebx
c000b561:	01 c8                	add    eax,ecx
c000b563:	11 da                	adc    edx,ebx
c000b565:	83 c4 08             	add    esp,0x8
c000b568:	5b                   	pop    ebx
c000b569:	c3                   	ret    

c000b56a <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000b56a:	57                   	push   edi
c000b56b:	56                   	push   esi
c000b56c:	53                   	push   ebx
c000b56d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b571:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b575:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b577:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000b57b:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000b57e:	0f b6 05 b8 2f 02 c0 	movzx  eax,BYTE PTR ds:0xc0022fb8
c000b585:	03 05 bc 2f 02 c0    	add    eax,DWORD PTR ds:0xc0022fbc
c000b58b:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000b591:	99                   	cdq    
c000b592:	29 c6                	sub    esi,eax
c000b594:	19 d7                	sbb    edi,edx
c000b596:	89 f0                	mov    eax,esi
c000b598:	89 fa                	mov    edx,edi
c000b59a:	31 f6                	xor    esi,esi
c000b59c:	80 3d b9 2f 02 c0 00 	cmp    BYTE PTR ds:0xc0022fb9,0x0
c000b5a3:	74 05                	je     c000b5aa <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000b5a5:	be 08 07 00 00       	mov    esi,0x708
c000b5aa:	31 ff                	xor    edi,edi
c000b5ac:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000b5b0:	29 f0                	sub    eax,esi
c000b5b2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b5b6:	19 fa                	sbb    edx,edi
c000b5b8:	89 d8                	mov    eax,ebx
c000b5ba:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b5be:	5b                   	pop    ebx
c000b5bf:	5e                   	pop    esi
c000b5c0:	5f                   	pop    edi
c000b5c1:	ff e0                	jmp    eax

c000b5c3 <datetimeToSeconds(datetime_t)>:
c000b5c3:	55                   	push   ebp
c000b5c4:	57                   	push   edi
c000b5c5:	56                   	push   esi
c000b5c6:	53                   	push   ebx
c000b5c7:	83 ec 14             	sub    esp,0x14
c000b5ca:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000b5ce:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000b5d2:	89 d3                	mov    ebx,edx
c000b5d4:	0f b6 c6             	movzx  eax,dh
c000b5d7:	c1 eb 10             	shr    ebx,0x10
c000b5da:	48                   	dec    eax
c000b5db:	66 81 eb 6c 07       	sub    bx,0x76c
c000b5e0:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000b5e4:	0f b6 f5             	movzx  esi,ch
c000b5e7:	89 cf                	mov    edi,ecx
c000b5e9:	6b f6 3c             	imul   esi,esi,0x3c
c000b5ec:	c1 ef 10             	shr    edi,0x10
c000b5ef:	0f b6 c9             	movzx  ecx,cl
c000b5f2:	89 f8                	mov    eax,edi
c000b5f4:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000b5fa:	0f b6 f8             	movzx  edi,al
c000b5fd:	0f b6 d2             	movzx  edx,dl
c000b600:	01 fe                	add    esi,edi
c000b602:	01 f1                	add    ecx,esi
c000b604:	0f b7 f3             	movzx  esi,bx
c000b607:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000b60b:	c1 f9 1f             	sar    ecx,0x1f
c000b60e:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c000b613:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000b617:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c000b61c:	8b 0c 8d 40 e6 01 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffe19c0]
c000b623:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c000b627:	76 29                	jbe    c000b652 <datetimeToSeconds(datetime_t)+0x8f>
c000b629:	f6 c3 03             	test   bl,0x3
c000b62c:	75 24                	jne    c000b652 <datetimeToSeconds(datetime_t)+0x8f>
c000b62e:	31 d2                	xor    edx,edx
c000b630:	bf 64 00 00 00       	mov    edi,0x64
c000b635:	89 d8                	mov    eax,ebx
c000b637:	66 f7 f7             	div    di
c000b63a:	66 85 d2             	test   dx,dx
c000b63d:	75 12                	jne    c000b651 <datetimeToSeconds(datetime_t)+0x8e>
c000b63f:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000b645:	bf 90 01 00 00       	mov    edi,0x190
c000b64a:	99                   	cdq    
c000b64b:	f7 ff                	idiv   edi
c000b64d:	85 d2                	test   edx,edx
c000b64f:	75 01                	jne    c000b652 <datetimeToSeconds(datetime_t)+0x8f>
c000b651:	41                   	inc    ecx
c000b652:	66 83 fb 46          	cmp    bx,0x46
c000b656:	76 45                	jbe    c000b69d <datetimeToSeconds(datetime_t)+0xda>
c000b658:	bb 46 00 00 00       	mov    ebx,0x46
c000b65d:	bf 64 00 00 00       	mov    edi,0x64
c000b662:	bd 90 01 00 00       	mov    ebp,0x190
c000b667:	b8 6d 01 00 00       	mov    eax,0x16d
c000b66c:	f6 c3 03             	test   bl,0x3
c000b66f:	75 23                	jne    c000b694 <datetimeToSeconds(datetime_t)+0xd1>
c000b671:	89 d8                	mov    eax,ebx
c000b673:	99                   	cdq    
c000b674:	f7 ff                	idiv   edi
c000b676:	b8 6e 01 00 00       	mov    eax,0x16e
c000b67b:	85 d2                	test   edx,edx
c000b67d:	75 15                	jne    c000b694 <datetimeToSeconds(datetime_t)+0xd1>
c000b67f:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c000b685:	99                   	cdq    
c000b686:	f7 fd                	idiv   ebp
c000b688:	31 c0                	xor    eax,eax
c000b68a:	85 d2                	test   edx,edx
c000b68c:	0f 94 c0             	sete   al
c000b68f:	05 6d 01 00 00       	add    eax,0x16d
c000b694:	01 c1                	add    ecx,eax
c000b696:	43                   	inc    ebx
c000b697:	39 f3                	cmp    ebx,esi
c000b699:	7c cc                	jl     c000b667 <datetimeToSeconds(datetime_t)+0xa4>
c000b69b:	eb 3b                	jmp    c000b6d8 <datetimeToSeconds(datetime_t)+0x115>
c000b69d:	74 39                	je     c000b6d8 <datetimeToSeconds(datetime_t)+0x115>
c000b69f:	b8 45 00 00 00       	mov    eax,0x45
c000b6a4:	89 c2                	mov    edx,eax
c000b6a6:	83 e2 03             	and    edx,0x3
c000b6a9:	39 f0                	cmp    eax,esi
c000b6ab:	7e 13                	jle    c000b6c0 <datetimeToSeconds(datetime_t)+0xfd>
c000b6ad:	85 d2                	test   edx,edx
c000b6af:	0f 94 c2             	sete   dl
c000b6b2:	48                   	dec    eax
c000b6b3:	0f b6 d2             	movzx  edx,dl
c000b6b6:	81 c2 6d 01 00 00    	add    edx,0x16d
c000b6bc:	29 d1                	sub    ecx,edx
c000b6be:	eb e4                	jmp    c000b6a4 <datetimeToSeconds(datetime_t)+0xe1>
c000b6c0:	b8 6d 01 00 00       	mov    eax,0x16d
c000b6c5:	85 d2                	test   edx,edx
c000b6c7:	75 0d                	jne    c000b6d6 <datetimeToSeconds(datetime_t)+0x113>
c000b6c9:	31 c0                	xor    eax,eax
c000b6cb:	66 85 db             	test   bx,bx
c000b6ce:	0f 95 c0             	setne  al
c000b6d1:	05 6d 01 00 00       	add    eax,0x16d
c000b6d6:	29 c1                	sub    ecx,eax
c000b6d8:	b8 80 51 01 00       	mov    eax,0x15180
c000b6dd:	f7 e9                	imul   ecx
c000b6df:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000b6e3:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000b6e7:	83 c4 14             	add    esp,0x14
c000b6ea:	5b                   	pop    ebx
c000b6eb:	5e                   	pop    esi
c000b6ec:	5f                   	pop    edi
c000b6ed:	5d                   	pop    ebp
c000b6ee:	c3                   	ret    
c000b6ef:	90                   	nop

c000b6f0 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000b6f0:	57                   	push   edi
c000b6f1:	56                   	push   esi
c000b6f2:	53                   	push   ebx
c000b6f3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b6f7:	8b 06                	mov    eax,DWORD PTR [esi]
c000b6f9:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c000b6fc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b700:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b704:	e8 ba fe ff ff       	call   c000b5c3 <datetimeToSeconds(datetime_t)>
c000b709:	59                   	pop    ecx
c000b70a:	0f b6 0d b8 2f 02 c0 	movzx  ecx,BYTE PTR ds:0xc0022fb8
c000b711:	5b                   	pop    ebx
c000b712:	03 0d bc 2f 02 c0    	add    ecx,DWORD PTR ds:0xc0022fbc
c000b718:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000b71e:	89 cb                	mov    ebx,ecx
c000b720:	c1 fb 1f             	sar    ebx,0x1f
c000b723:	29 c8                	sub    eax,ecx
c000b725:	19 da                	sbb    edx,ebx
c000b727:	31 c9                	xor    ecx,ecx
c000b729:	80 3d b9 2f 02 c0 00 	cmp    BYTE PTR ds:0xc0022fb9,0x0
c000b730:	74 05                	je     c000b737 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c000b732:	b9 08 07 00 00       	mov    ecx,0x708
c000b737:	31 db                	xor    ebx,ebx
c000b739:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000b73d:	29 c8                	sub    eax,ecx
c000b73f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b743:	19 da                	sbb    edx,ebx
c000b745:	89 f8                	mov    eax,edi
c000b747:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b74b:	5b                   	pop    ebx
c000b74c:	5e                   	pop    esi
c000b74d:	5f                   	pop    edi
c000b74e:	ff e0                	jmp    eax

c000b750 <secondsToDatetime(unsigned long long)>:
c000b750:	55                   	push   ebp
c000b751:	57                   	push   edi
c000b752:	56                   	push   esi
c000b753:	53                   	push   ebx
c000b754:	83 ec 1c             	sub    esp,0x1c
c000b757:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000b75b:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b75f:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000b763:	6a 00                	push   0x0
c000b765:	68 80 51 01 00       	push   0x15180
c000b76a:	55                   	push   ebp
c000b76b:	57                   	push   edi
c000b76c:	e8 6f 11 01 00       	call   c001c8e0 <__udivdi3>
c000b771:	83 c4 10             	add    esp,0x10
c000b774:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c000b77a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b77e:	6a 00                	push   0x0
c000b780:	68 80 51 01 00       	push   0x15180
c000b785:	55                   	push   ebp
c000b786:	57                   	push   edi
c000b787:	bf 10 0e 00 00       	mov    edi,0xe10
c000b78c:	e8 4f 12 01 00       	call   c001c9e0 <__umoddi3>
c000b791:	83 c4 10             	add    esp,0x10
c000b794:	99                   	cdq    
c000b795:	f7 ff                	idiv   edi
c000b797:	bf 3c 00 00 00       	mov    edi,0x3c
c000b79c:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c000b79f:	89 d0                	mov    eax,edx
c000b7a1:	99                   	cdq    
c000b7a2:	f7 ff                	idiv   edi
c000b7a4:	85 db                	test   ebx,ebx
c000b7a6:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c000b7a9:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c000b7ac:	79 11                	jns    c000b7bf <secondsToDatetime(unsigned long long)+0x6f>
c000b7ae:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000b7b2:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c000b7b8:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000b7bd:	eb 07                	jmp    c000b7c6 <secondsToDatetime(unsigned long long)+0x76>
c000b7bf:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000b7c4:	89 d8                	mov    eax,ebx
c000b7c6:	bf b4 05 00 00       	mov    edi,0x5b4
c000b7cb:	99                   	cdq    
c000b7cc:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c000b7d1:	f7 f9                	idiv   ecx
c000b7d3:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c000b7d8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b7dc:	31 d2                	xor    edx,edx
c000b7de:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c000b7e6:	01 c3                	add    ebx,eax
c000b7e8:	89 d8                	mov    eax,ebx
c000b7ea:	f7 f1                	div    ecx
c000b7ec:	31 d2                	xor    edx,edx
c000b7ee:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c000b7f1:	89 d8                	mov    eax,ebx
c000b7f3:	f7 f7                	div    edi
c000b7f5:	31 d2                	xor    edx,edx
c000b7f7:	29 c1                	sub    ecx,eax
c000b7f9:	89 d8                	mov    eax,ebx
c000b7fb:	f7 f5                	div    ebp
c000b7fd:	bd 6d 01 00 00       	mov    ebp,0x16d
c000b802:	29 c1                	sub    ecx,eax
c000b804:	31 d2                	xor    edx,edx
c000b806:	89 c8                	mov    eax,ecx
c000b808:	f7 f5                	div    ebp
c000b80a:	bd 94 8e 00 00       	mov    ebp,0x8e94
c000b80f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b813:	31 d2                	xor    edx,edx
c000b815:	89 c8                	mov    eax,ecx
c000b817:	f7 f5                	div    ebp
c000b819:	31 d2                	xor    edx,edx
c000b81b:	01 c3                	add    ebx,eax
c000b81d:	89 c8                	mov    eax,ecx
c000b81f:	f7 f7                	div    edi
c000b821:	bf 99 00 00 00       	mov    edi,0x99
c000b826:	29 c3                	sub    ebx,eax
c000b828:	31 d2                	xor    edx,edx
c000b82a:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c000b832:	29 c3                	sub    ebx,eax
c000b834:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000b837:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000b83a:	bb 05 00 00 00       	mov    ebx,0x5
c000b83f:	83 c1 02             	add    ecx,0x2
c000b842:	89 c8                	mov    eax,ecx
c000b844:	f7 f7                	div    edi
c000b846:	31 d2                	xor    edx,edx
c000b848:	89 c7                	mov    edi,eax
c000b84a:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c000b850:	83 c0 02             	add    eax,0x2
c000b853:	f7 f3                	div    ebx
c000b855:	89 eb                	mov    ebx,ebp
c000b857:	29 c3                	sub    ebx,eax
c000b859:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c000b85f:	88 1e                	mov    BYTE PTR [esi],bl
c000b861:	19 c0                	sbb    eax,eax
c000b863:	31 d2                	xor    edx,edx
c000b865:	83 e0 0c             	and    eax,0xc
c000b868:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c000b86c:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c000b874:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000b878:	83 f9 01             	cmp    ecx,0x1
c000b87b:	0f 96 c2             	setbe  dl
c000b87e:	41                   	inc    ecx
c000b87f:	01 d0                	add    eax,edx
c000b881:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c000b884:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c000b888:	83 c4 1c             	add    esp,0x1c
c000b88b:	89 f0                	mov    eax,esi
c000b88d:	5b                   	pop    ebx
c000b88e:	5e                   	pop    esi
c000b88f:	5f                   	pop    edi
c000b890:	5d                   	pop    ebp
c000b891:	c2 04 00             	ret    0x4

c000b894 <Clock::timeInDatetimeLocal()>:
c000b894:	53                   	push   ebx
c000b895:	83 ec 14             	sub    esp,0x14
c000b898:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000b89c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b8a0:	e8 7d fc ff ff       	call   c000b522 <Clock::timeInSecondsLocal()>
c000b8a5:	83 c4 0c             	add    esp,0xc
c000b8a8:	52                   	push   edx
c000b8a9:	50                   	push   eax
c000b8aa:	53                   	push   ebx
c000b8ab:	e8 a0 fe ff ff       	call   c000b750 <secondsToDatetime(unsigned long long)>
c000b8b0:	89 d8                	mov    eax,ebx
c000b8b2:	83 c4 14             	add    esp,0x14
c000b8b5:	5b                   	pop    ebx
c000b8b6:	c2 04 00             	ret    0x4
c000b8b9:	90                   	nop

c000b8ba <Device::hibernate()>:
c000b8ba:	c3                   	ret    
c000b8bb:	90                   	nop

c000b8bc <Device::wake()>:
c000b8bc:	c3                   	ret    
c000b8bd:	90                   	nop

c000b8be <Device::detect()>:
c000b8be:	c3                   	ret    
c000b8bf:	90                   	nop

c000b8c0 <Device::disableLegacy()>:
c000b8c0:	c3                   	ret    
c000b8c1:	90                   	nop

c000b8c2 <Device::powerSaving(PowerSavingLevel)>:
c000b8c2:	c3                   	ret    
c000b8c3:	90                   	nop

c000b8c4 <DriverlessDevice::close(int, int, void*)>:
c000b8c4:	31 c0                	xor    eax,eax
c000b8c6:	c3                   	ret    
c000b8c7:	90                   	nop

c000b8c8 <DriverlessDevice::detect()>:
c000b8c8:	c3                   	ret    
c000b8c9:	90                   	nop

c000b8ca <DriverlessDevice::open(int, int, void*)>:
c000b8ca:	83 ec 18             	sub    esp,0x18
c000b8cd:	68 70 e6 01 c0       	push   0xc001e670
c000b8d2:	e8 d0 49 00 00       	call   c00102a7 <KePanic(char const*)>
c000b8d7:	83 c8 ff             	or     eax,0xffffffff
c000b8da:	83 c4 1c             	add    esp,0x1c
c000b8dd:	c3                   	ret    

c000b8de <Device::~Device()>:
c000b8de:	ba d0 e6 01 c0       	mov    edx,0xc001e6d0
c000b8e3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b8e7:	89 10                	mov    DWORD PTR [eax],edx
c000b8e9:	90                   	nop
c000b8ea:	c3                   	ret    
c000b8eb:	90                   	nop

c000b8ec <Device::~Device()>:
c000b8ec:	83 ec 0c             	sub    esp,0xc
c000b8ef:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b8f3:	e8 e6 ff ff ff       	call   c000b8de <Device::~Device()>
c000b8f8:	83 c4 04             	add    esp,0x4
c000b8fb:	83 ec 08             	sub    esp,0x8
c000b8fe:	68 58 01 00 00       	push   0x158
c000b903:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b907:	e8 50 eb ff ff       	call   c000a45c <operator delete(void*, unsigned long)>
c000b90c:	83 c4 10             	add    esp,0x10
c000b90f:	83 c4 0c             	add    esp,0xc
c000b912:	c3                   	ret    
c000b913:	90                   	nop

c000b914 <Device::findAndLoadDriver()>:
c000b914:	c7 44 24 04 8e e6 01 c0 	mov    DWORD PTR [esp+0x4],0xc001e68e
c000b91c:	e9 31 ec ff ff       	jmp    c000a552 <Dbg::kprintf(char const*, ...)>
c000b921:	90                   	nop

c000b922 <Device::preOpenPCI(PCIDeviceInfo)>:
c000b922:	57                   	push   edi
c000b923:	b9 09 00 00 00       	mov    ecx,0x9
c000b928:	56                   	push   esi
c000b929:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000b92d:	8d 74 24 10          	lea    esi,[esp+0x10]
c000b931:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000b93b:	81 c7 18 01 00 00    	add    edi,0x118
c000b941:	fc                   	cld    
c000b942:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000b944:	5e                   	pop    esi
c000b945:	5f                   	pop    edi
c000b946:	c3                   	ret    
c000b947:	90                   	nop

c000b948 <Device::preOpenACPI(void*, char*, char*)>:
c000b948:	57                   	push   edi
c000b949:	b9 1e 00 00 00       	mov    ecx,0x1e
c000b94e:	56                   	push   esi
c000b94f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b953:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b957:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000b961:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000b967:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000b96d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b971:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b973:	b9 0e 00 00 00       	mov    ecx,0xe
c000b978:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000b97e:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000b982:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b984:	5e                   	pop    esi
c000b985:	5f                   	pop    edi
c000b986:	c3                   	ret    
c000b987:	90                   	nop

c000b988 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000b988:	53                   	push   ebx
c000b989:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b98d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b991:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b995:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000b999:	0f b6 c0             	movzx  eax,al
c000b99c:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000b9a0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b9a4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000b9a8:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000b9ac:	5b                   	pop    ebx
c000b9ad:	e9 a6 05 00 00       	jmp    c000bf58 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c000b9b2 <Device::getParent()>:
c000b9b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b9b6:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000b9bc:	c3                   	ret    
c000b9bd:	90                   	nop

c000b9be <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000b9be:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b9c2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b9c6:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c000b9cb:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000b9cf:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000b9d3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b9d7:	e9 e8 06 00 00       	jmp    c000c0c4 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c000b9dc <Device::addChild(Device*)>:
c000b9dc:	53                   	push   ebx
c000b9dd:	83 ec 08             	sub    esp,0x8
c000b9e0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b9e4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b9e8:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c000b9ee:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000b9f4:	8b 13                	mov    edx,DWORD PTR [ebx]
c000b9f6:	85 d2                	test   edx,edx
c000b9f8:	74 04                	je     c000b9fe <Device::addChild(Device*)+0x22>
c000b9fa:	89 d3                	mov    ebx,edx
c000b9fc:	eb f6                	jmp    c000b9f4 <Device::addChild(Device*)+0x18>
c000b9fe:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000ba01:	83 ec 0c             	sub    esp,0xc
c000ba04:	6a 08                	push   0x8
c000ba06:	e8 ae bd ff ff       	call   c00077b9 <malloc>
c000ba0b:	89 03                	mov    DWORD PTR [ebx],eax
c000ba0d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ba13:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000ba1a:	83 c4 18             	add    esp,0x18
c000ba1d:	5b                   	pop    ebx
c000ba1e:	c3                   	ret    
c000ba1f:	90                   	nop

c000ba20 <Device::removeAllChildren()>:
c000ba20:	56                   	push   esi
c000ba21:	53                   	push   ebx
c000ba22:	52                   	push   edx
c000ba23:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ba27:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000ba2d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000ba30:	74 17                	je     c000ba49 <Device::removeAllChildren()+0x29>
c000ba32:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ba35:	85 c0                	test   eax,eax
c000ba37:	74 0c                	je     c000ba45 <Device::removeAllChildren()+0x25>
c000ba39:	83 ec 0c             	sub    esp,0xc
c000ba3c:	8b 10                	mov    edx,DWORD PTR [eax]
c000ba3e:	50                   	push   eax
c000ba3f:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000ba42:	83 c4 10             	add    esp,0x10
c000ba45:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000ba47:	eb e4                	jmp    c000ba2d <Device::removeAllChildren()+0xd>
c000ba49:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000ba4f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ba55:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000ba5b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000ba62:	58                   	pop    eax
c000ba63:	5b                   	pop    ebx
c000ba64:	5e                   	pop    esi
c000ba65:	c3                   	ret    

c000ba66 <Device::hibernateAll()>:
c000ba66:	53                   	push   ebx
c000ba67:	83 ec 14             	sub    esp,0x14
c000ba6a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ba6e:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ba70:	53                   	push   ebx
c000ba71:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000ba74:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000ba7a:	83 c4 10             	add    esp,0x10
c000ba7d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000ba80:	74 0f                	je     c000ba91 <Device::hibernateAll()+0x2b>
c000ba82:	83 ec 0c             	sub    esp,0xc
c000ba85:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000ba88:	e8 d9 ff ff ff       	call   c000ba66 <Device::hibernateAll()>
c000ba8d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000ba8f:	eb e9                	jmp    c000ba7a <Device::hibernateAll()+0x14>
c000ba91:	83 c4 08             	add    esp,0x8
c000ba94:	5b                   	pop    ebx
c000ba95:	c3                   	ret    

c000ba96 <Device::wakeAll()>:
c000ba96:	53                   	push   ebx
c000ba97:	83 ec 14             	sub    esp,0x14
c000ba9a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ba9e:	8b 03                	mov    eax,DWORD PTR [ebx]
c000baa0:	53                   	push   ebx
c000baa1:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000baa4:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000baaa:	83 c4 10             	add    esp,0x10
c000baad:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bab0:	74 0f                	je     c000bac1 <Device::wakeAll()+0x2b>
c000bab2:	83 ec 0c             	sub    esp,0xc
c000bab5:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bab8:	e8 d9 ff ff ff       	call   c000ba96 <Device::wakeAll()>
c000babd:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000babf:	eb e9                	jmp    c000baaa <Device::wakeAll()+0x14>
c000bac1:	83 c4 08             	add    esp,0x8
c000bac4:	5b                   	pop    ebx
c000bac5:	c3                   	ret    

c000bac6 <Device::detectAll()>:
c000bac6:	53                   	push   ebx
c000bac7:	83 ec 14             	sub    esp,0x14
c000baca:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bace:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bad0:	53                   	push   ebx
c000bad1:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000bad4:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000bada:	83 c4 10             	add    esp,0x10
c000badd:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bae0:	74 0f                	je     c000baf1 <Device::detectAll()+0x2b>
c000bae2:	83 ec 0c             	sub    esp,0xc
c000bae5:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bae8:	e8 d9 ff ff ff       	call   c000bac6 <Device::detectAll()>
c000baed:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000baef:	eb e9                	jmp    c000bada <Device::detectAll()+0x14>
c000baf1:	83 c4 08             	add    esp,0x8
c000baf4:	5b                   	pop    ebx
c000baf5:	c3                   	ret    

c000baf6 <Device::disableLegacyAll()>:
c000baf6:	c3                   	ret    
c000baf7:	90                   	nop

c000baf8 <Device::loadDriversForAll()>:
c000baf8:	c3                   	ret    
c000baf9:	90                   	nop

c000bafa <Device::closeAll()>:
c000bafa:	53                   	push   ebx
c000bafb:	83 ec 08             	sub    esp,0x8
c000bafe:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000bb02:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bb04:	6a 00                	push   0x0
c000bb06:	6a 00                	push   0x0
c000bb08:	6a 00                	push   0x0
c000bb0a:	53                   	push   ebx
c000bb0b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000bb0e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000bb14:	83 c4 10             	add    esp,0x10
c000bb17:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bb1a:	74 0f                	je     c000bb2b <Device::closeAll()+0x31>
c000bb1c:	83 ec 0c             	sub    esp,0xc
c000bb1f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bb22:	e8 d3 ff ff ff       	call   c000bafa <Device::closeAll()>
c000bb27:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bb29:	eb e9                	jmp    c000bb14 <Device::closeAll()+0x1a>
c000bb2b:	83 c4 08             	add    esp,0x8
c000bb2e:	5b                   	pop    ebx
c000bb2f:	c3                   	ret    

c000bb30 <Device::powerSavingAll(PowerSavingLevel)>:
c000bb30:	56                   	push   esi
c000bb31:	53                   	push   ebx
c000bb32:	83 ec 0c             	sub    esp,0xc
c000bb35:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000bb39:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000bb3d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bb3f:	56                   	push   esi
c000bb40:	53                   	push   ebx
c000bb41:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000bb44:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000bb4a:	83 c4 10             	add    esp,0x10
c000bb4d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bb50:	74 0f                	je     c000bb61 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000bb52:	52                   	push   edx
c000bb53:	52                   	push   edx
c000bb54:	56                   	push   esi
c000bb55:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bb58:	e8 d3 ff ff ff       	call   c000bb30 <Device::powerSavingAll(PowerSavingLevel)>
c000bb5d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bb5f:	eb e9                	jmp    c000bb4a <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000bb61:	58                   	pop    eax
c000bb62:	5b                   	pop    ebx
c000bb63:	5e                   	pop    esi
c000bb64:	c3                   	ret    
c000bb65:	90                   	nop

c000bb66 <Device::setName(char const*)>:
c000bb66:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000bb6e:	e9 8d 4a ff ff       	jmp    c0000600 <strcpy>
c000bb73:	90                   	nop

c000bb74 <Device::Device(char const*)>:
c000bb74:	83 ec 1c             	sub    esp,0x1c
c000bb77:	ba d0 e6 01 c0       	mov    edx,0xc001e6d0
c000bb7c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb80:	89 10                	mov    DWORD PTR [eax],edx
c000bb82:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb86:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000bb90:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb94:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000bb9e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bba2:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000bbac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bbb0:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000bbba:	83 ec 08             	sub    esp,0x8
c000bbbd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bbc1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bbc5:	e8 9c ff ff ff       	call   c000bb66 <Device::setName(char const*)>
c000bbca:	83 c4 10             	add    esp,0x10
c000bbcd:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c000bbd5:	83 ec 0c             	sub    esp,0xc
c000bbd8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bbdc:	e8 d8 bb ff ff       	call   c00077b9 <malloc>
c000bbe1:	83 c4 10             	add    esp,0x10
c000bbe4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000bbea:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000bbf1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000bbf5:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000bbfb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bbff:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000bc05:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000bc0b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bc0f:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000bc15:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000bc1c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bc20:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000bc27:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bc2b:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000bc32:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bc36:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000bc40:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bc44:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000bc4e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bc52:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000bc5c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bc60:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000bc6a:	90                   	nop
c000bc6b:	83 c4 1c             	add    esp,0x1c
c000bc6e:	c3                   	ret    
c000bc6f:	90                   	nop

c000bc70 <Device::getName()>:
c000bc70:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bc74:	05 d0 00 00 00       	add    eax,0xd0
c000bc79:	c3                   	ret    

c000bc7a <DriverlessDevice::DriverlessDevice(char const*)>:
c000bc7a:	83 ec 0c             	sub    esp,0xc
c000bc7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bc81:	83 ec 08             	sub    esp,0x8
c000bc84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc88:	50                   	push   eax
c000bc89:	e8 e6 fe ff ff       	call   c000bb74 <Device::Device(char const*)>
c000bc8e:	83 c4 10             	add    esp,0x10
c000bc91:	ba fc e6 01 c0       	mov    edx,0xc001e6fc
c000bc96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bc9a:	89 10                	mov    DWORD PTR [eax],edx
c000bc9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bca0:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c000bcaa:	90                   	nop
c000bcab:	83 c4 0c             	add    esp,0xc
c000bcae:	c3                   	ret    
c000bcaf:	90                   	nop

c000bcb0 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000bcb0:	57                   	push   edi
c000bcb1:	56                   	push   esi
c000bcb2:	53                   	push   ebx
c000bcb3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000bcb7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000bcbb:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000bcbf:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000bcc5:	75 0c                	jne    c000bcd3 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000bcc7:	52                   	push   edx
c000bcc8:	52                   	push   edx
c000bcc9:	53                   	push   ebx
c000bcca:	56                   	push   esi
c000bccb:	e8 c2 10 01 00       	call   c001cd92 <LinkedList<Device>::addElement(Device*)>
c000bcd0:	83 c4 10             	add    esp,0x10
c000bcd3:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000bcd9:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bcdc:	74 12                	je     c000bcf0 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000bcde:	50                   	push   eax
c000bcdf:	57                   	push   edi
c000bce0:	56                   	push   esi
c000bce1:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bce4:	e8 c7 ff ff ff       	call   c000bcb0 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000bce9:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bceb:	83 c4 10             	add    esp,0x10
c000bcee:	eb e9                	jmp    c000bcd9 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000bcf0:	5b                   	pop    ebx
c000bcf1:	5e                   	pop    esi
c000bcf2:	5f                   	pop    edi
c000bcf3:	c3                   	ret    

c000bcf4 <getDevicesOfType(DeviceType)>:
c000bcf4:	53                   	push   ebx
c000bcf5:	83 ec 14             	sub    esp,0x14
c000bcf8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bcfc:	53                   	push   ebx
c000bcfd:	e8 6c 11 01 00       	call   c001ce6e <LinkedList<Device>::LinkedList()>
c000bd02:	83 c4 0c             	add    esp,0xc
c000bd05:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bd09:	53                   	push   ebx
c000bd0a:	ff 35 b8 2e 02 c0    	push   DWORD PTR ds:0xc0022eb8
c000bd10:	e8 9b ff ff ff       	call   c000bcb0 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000bd15:	89 d8                	mov    eax,ebx
c000bd17:	83 c4 18             	add    esp,0x18
c000bd1a:	5b                   	pop    ebx
c000bd1b:	c2 04 00             	ret    0x4
c000bd1e:	66 90                	xchg   ax,ax

c000bd20 <HardDiskController::HardDiskController(char const*)>:
c000bd20:	83 ec 0c             	sub    esp,0xc
c000bd23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd27:	83 ec 08             	sub    esp,0x8
c000bd2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bd2e:	50                   	push   eax
c000bd2f:	e8 40 fe ff ff       	call   c000bb74 <Device::Device(char const*)>
c000bd34:	83 c4 10             	add    esp,0x10
c000bd37:	ba 28 e7 01 c0       	mov    edx,0xc001e728
c000bd3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd40:	89 10                	mov    DWORD PTR [eax],edx
c000bd42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd46:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000bd50:	90                   	nop
c000bd51:	83 c4 0c             	add    esp,0xc
c000bd54:	c3                   	ret    
c000bd55:	90                   	nop
c000bd56:	66 90                	xchg   ax,ax

c000bd58 <HardDiskController::~HardDiskController()>:
c000bd58:	83 ec 0c             	sub    esp,0xc
c000bd5b:	ba 28 e7 01 c0       	mov    edx,0xc001e728
c000bd60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd64:	89 10                	mov    DWORD PTR [eax],edx
c000bd66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd6a:	83 ec 0c             	sub    esp,0xc
c000bd6d:	50                   	push   eax
c000bd6e:	e8 6b fb ff ff       	call   c000b8de <Device::~Device()>
c000bd73:	83 c4 10             	add    esp,0x10
c000bd76:	90                   	nop
c000bd77:	83 c4 0c             	add    esp,0xc
c000bd7a:	c3                   	ret    
c000bd7b:	90                   	nop

c000bd7c <HardDiskController::~HardDiskController()>:
c000bd7c:	83 ec 0c             	sub    esp,0xc
c000bd7f:	83 ec 0c             	sub    esp,0xc
c000bd82:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bd86:	e8 cd ff ff ff       	call   c000bd58 <HardDiskController::~HardDiskController()>
c000bd8b:	83 c4 10             	add    esp,0x10
c000bd8e:	83 ec 08             	sub    esp,0x8
c000bd91:	68 58 01 00 00       	push   0x158
c000bd96:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bd9a:	e8 bd e6 ff ff       	call   c000a45c <operator delete(void*, unsigned long)>
c000bd9f:	83 c4 10             	add    esp,0x10
c000bda2:	83 c4 0c             	add    esp,0xc
c000bda5:	c3                   	ret    

c000bda6 <PhysicalDisk::eject()>:
c000bda6:	83 c8 ff             	or     eax,0xffffffff
c000bda9:	c3                   	ret    

c000bdaa <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000bdaa:	83 ec 0c             	sub    esp,0xc
c000bdad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bdb1:	83 ec 08             	sub    esp,0x8
c000bdb4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bdb8:	50                   	push   eax
c000bdb9:	e8 b6 fd ff ff       	call   c000bb74 <Device::Device(char const*)>
c000bdbe:	83 c4 10             	add    esp,0x10
c000bdc1:	ba 54 e7 01 c0       	mov    edx,0xc001e754
c000bdc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bdca:	89 10                	mov    DWORD PTR [eax],edx
c000bdcc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bdd0:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000bdd7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bddb:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000bde2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bde6:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000bdf0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bdf4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000bdf8:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000bdfe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be02:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000be0c:	90                   	nop
c000be0d:	83 c4 0c             	add    esp,0xc
c000be10:	c3                   	ret    
c000be11:	90                   	nop

c000be12 <PhysicalDisk::startCache()>:
c000be12:	56                   	push   esi
c000be13:	53                   	push   ebx
c000be14:	83 ec 10             	sub    esp,0x10
c000be17:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000be1b:	6a 44                	push   0x44
c000be1d:	e8 97 b9 ff ff       	call   c00077b9 <malloc>
c000be22:	89 c6                	mov    esi,eax
c000be24:	58                   	pop    eax
c000be25:	5a                   	pop    edx
c000be26:	53                   	push   ebx
c000be27:	56                   	push   esi
c000be28:	e8 db 15 00 00       	call   c000d408 <VCache::VCache(PhysicalDisk*)>
c000be2d:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000be33:	83 c4 14             	add    esp,0x14
c000be36:	5b                   	pop    ebx
c000be37:	5e                   	pop    esi
c000be38:	c3                   	ret    
c000be39:	90                   	nop

c000be3a <PhysicalDisk::~PhysicalDisk()>:
c000be3a:	83 ec 0c             	sub    esp,0xc
c000be3d:	ba 54 e7 01 c0       	mov    edx,0xc001e754
c000be42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be46:	89 10                	mov    DWORD PTR [eax],edx
c000be48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be4c:	83 ec 0c             	sub    esp,0xc
c000be4f:	50                   	push   eax
c000be50:	e8 89 fa ff ff       	call   c000b8de <Device::~Device()>
c000be55:	83 c4 10             	add    esp,0x10
c000be58:	90                   	nop
c000be59:	83 c4 0c             	add    esp,0xc
c000be5c:	c3                   	ret    
c000be5d:	90                   	nop

c000be5e <PhysicalDisk::~PhysicalDisk()>:
c000be5e:	83 ec 0c             	sub    esp,0xc
c000be61:	83 ec 0c             	sub    esp,0xc
c000be64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000be68:	e8 cd ff ff ff       	call   c000be3a <PhysicalDisk::~PhysicalDisk()>
c000be6d:	83 c4 10             	add    esp,0x10
c000be70:	83 ec 08             	sub    esp,0x8
c000be73:	68 6c 01 00 00       	push   0x16c
c000be78:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000be7c:	e8 db e5 ff ff       	call   c000a45c <operator delete(void*, unsigned long)>
c000be81:	83 c4 10             	add    esp,0x10
c000be84:	83 c4 0c             	add    esp,0xc
c000be87:	c3                   	ret    

c000be88 <int_handler>:
c000be88:	55                   	push   ebp
c000be89:	57                   	push   edi
c000be8a:	56                   	push   esi
c000be8b:	53                   	push   ebx
c000be8c:	83 ec 0c             	sub    esp,0xc
c000be8f:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000be93:	80 3d 38 59 02 c0 00 	cmp    BYTE PTR ds:0xc0025938,0x0
c000be9a:	74 0b                	je     c000bea7 <int_handler+0x1f>
c000be9c:	fa                   	cli    
c000be9d:	f4                   	hlt    
c000be9e:	80 3d 38 59 02 c0 00 	cmp    BYTE PTR ds:0xc0025938,0x0
c000bea5:	75 f5                	jne    c000be9c <int_handler+0x14>
c000bea7:	8b 77 30             	mov    esi,DWORD PTR [edi+0x30]
c000beaa:	8d 46 e0             	lea    eax,[esi-0x20]
c000bead:	83 f8 17             	cmp    eax,0x17
c000beb0:	76 3e                	jbe    c000bef0 <int_handler+0x68>
c000beb2:	c1 e6 04             	shl    esi,0x4
c000beb5:	31 db                	xor    ebx,ebx
c000beb7:	8d ae c0 3f 02 c0    	lea    ebp,[esi-0x3ffdc040]
c000bebd:	81 c6 c0 2f 02 c0    	add    esi,0xc0022fc0
c000bec3:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c000bec7:	85 c0                	test   eax,eax
c000bec9:	74 13                	je     c000bede <int_handler+0x56>
c000becb:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c000bece:	83 7f 30 60          	cmp    DWORD PTR [edi+0x30],0x60
c000bed2:	74 2a                	je     c000befe <int_handler+0x76>
c000bed4:	83 ec 08             	sub    esp,0x8
c000bed7:	52                   	push   edx
c000bed8:	57                   	push   edi
c000bed9:	ff d0                	call   eax
c000bedb:	83 c4 10             	add    esp,0x10
c000bede:	43                   	inc    ebx
c000bedf:	83 fb 04             	cmp    ebx,0x4
c000bee2:	75 df                	jne    c000bec3 <int_handler+0x3b>
c000bee4:	83 c4 0c             	add    esp,0xc
c000bee7:	31 c0                	xor    eax,eax
c000bee9:	5b                   	pop    ebx
c000beea:	31 d2                	xor    edx,edx
c000beec:	5e                   	pop    esi
c000beed:	5f                   	pop    edi
c000beee:	5d                   	pop    ebp
c000beef:	c3                   	ret    
c000bef0:	83 ec 0c             	sub    esp,0xc
c000bef3:	50                   	push   eax
c000bef4:	e8 ba 99 00 00       	call   c00158b3 <HalEndOfInterrupt(int)>
c000bef9:	83 c4 10             	add    esp,0x10
c000befc:	eb b4                	jmp    c000beb2 <int_handler+0x2a>
c000befe:	83 ec 08             	sub    esp,0x8
c000bf01:	52                   	push   edx
c000bf02:	57                   	push   edi
c000bf03:	ff d0                	call   eax
c000bf05:	83 c4 10             	add    esp,0x10
c000bf08:	83 c4 0c             	add    esp,0xc
c000bf0b:	5b                   	pop    ebx
c000bf0c:	5e                   	pop    esi
c000bf0d:	5f                   	pop    edi
c000bf0e:	5d                   	pop    ebp
c000bf0f:	c3                   	ret    

c000bf10 <installISRHandler(int, void (*)(regs*, void*), void*)>:
c000bf10:	56                   	push   esi
c000bf11:	31 c0                	xor    eax,eax
c000bf13:	53                   	push   ebx
c000bf14:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000bf18:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000bf1c:	89 ca                	mov    edx,ecx
c000bf1e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000bf22:	c1 e2 04             	shl    edx,0x4
c000bf25:	83 bc 82 c0 3f 02 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffdc040],0x0
c000bf2d:	74 15                	je     c000bf44 <installISRHandler(int, void (*)(regs*, void*), void*)+0x34>
c000bf2f:	40                   	inc    eax
c000bf30:	83 f8 04             	cmp    eax,0x4
c000bf33:	75 f0                	jne    c000bf25 <installISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c000bf35:	c7 44 24 0c 84 e7 01 c0 	mov    DWORD PTR [esp+0xc],0xc001e784
c000bf3d:	5b                   	pop    ebx
c000bf3e:	5e                   	pop    esi
c000bf3f:	e9 63 43 00 00       	jmp    c00102a7 <KePanic(char const*)>
c000bf44:	8d 04 88             	lea    eax,[eax+ecx*4]
c000bf47:	89 1c 85 c0 3f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc040],ebx
c000bf4e:	89 34 85 c0 2f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdd040],esi
c000bf55:	5b                   	pop    ebx
c000bf56:	5e                   	pop    esi
c000bf57:	c3                   	ret    

c000bf58 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000bf58:	57                   	push   edi
c000bf59:	8b 15 b8 2e 02 c0    	mov    edx,DWORD PTR ds:0xc0022eb8
c000bf5f:	56                   	push   esi
c000bf60:	53                   	push   ebx
c000bf61:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000bf65:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bf69:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000bf70:	74 5b                	je     c000bfcd <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x75>
c000bf72:	89 c7                	mov    edi,eax
c000bf74:	84 c0                	test   al,al
c000bf76:	74 24                	je     c000bf9c <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c000bf78:	83 fe 0f             	cmp    esi,0xf
c000bf7b:	0f 8f d9 00 00 00    	jg     c000c05a <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x102>
c000bf81:	8a 86 40 ff 01 c0    	mov    al,BYTE PTR [esi-0x3ffe00c0]
c000bf87:	25 ff 00 00 00       	and    eax,0xff
c000bf8c:	66 8b bc 00 60 57 02 c0 	mov    di,WORD PTR [eax+eax*1-0x3ffda8a0]
c000bf94:	89 c6                	mov    esi,eax
c000bf96:	66 d1 ef             	shr    di,1
c000bf99:	83 e7 01             	and    edi,0x1
c000bf9c:	83 ec 08             	sub    esp,0x8
c000bf9f:	a1 60 6b 02 c0       	mov    eax,ds:0xc0026b60
c000bfa4:	31 db                	xor    ebx,ebx
c000bfa6:	50                   	push   eax
c000bfa7:	68 91 e7 01 c0       	push   0xc001e791
c000bfac:	e8 a1 e5 ff ff       	call   c000a552 <Dbg::kprintf(char const*, ...)>
c000bfb1:	83 c4 10             	add    esp,0x10
c000bfb4:	a1 60 6b 02 c0       	mov    eax,ds:0xc0026b60
c000bfb9:	85 c0                	test   eax,eax
c000bfbb:	7f 51                	jg     c000c00e <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xb6>
c000bfbd:	83 ec 0c             	sub    esp,0xc
c000bfc0:	68 a8 e7 01 c0       	push   0xc001e7a8
c000bfc5:	e8 dd 42 00 00       	call   c00102a7 <KePanic(char const*)>
c000bfca:	83 c4 10             	add    esp,0x10
c000bfcd:	8d 4e 20             	lea    ecx,[esi+0x20]
c000bfd0:	31 d2                	xor    edx,edx
c000bfd2:	89 c8                	mov    eax,ecx
c000bfd4:	c1 e0 04             	shl    eax,0x4
c000bfd7:	8b 9c 90 c0 3f 02 c0 	mov    ebx,DWORD PTR [eax+edx*4-0x3ffdc040]
c000bfde:	85 db                	test   ebx,ebx
c000bfe0:	0f 84 8b 00 00 00    	je     c000c071 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x119>
c000bfe6:	42                   	inc    edx
c000bfe7:	83 fa 04             	cmp    edx,0x4
c000bfea:	75 eb                	jne    c000bfd7 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x7f>
c000bfec:	83 ec 0c             	sub    esp,0xc
c000bfef:	68 fc e7 01 c0       	push   0xc001e7fc
c000bff4:	e8 ae 42 00 00       	call   c00102a7 <KePanic(char const*)>
c000bff9:	83 c4 10             	add    esp,0x10
c000bffc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000c001:	5b                   	pop    ebx
c000c002:	5e                   	pop    esi
c000c003:	5f                   	pop    edi
c000c004:	c3                   	ret    
c000c005:	43                   	inc    ebx
c000c006:	39 1d 60 6b 02 c0    	cmp    DWORD PTR ds:0xc0026b60,ebx
c000c00c:	7e af                	jle    c000bfbd <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x65>
c000c00e:	83 ec 08             	sub    esp,0x8
c000c011:	8b 04 9d 80 6b 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd9480]
c000c018:	56                   	push   esi
c000c019:	50                   	push   eax
c000c01a:	e8 37 fd 00 00       	call   c001bd56 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c000c01f:	83 c4 10             	add    esp,0x10
c000c022:	84 c0                	test   al,al
c000c024:	74 df                	je     c000c005 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xad>
c000c026:	81 e7 ff 00 00 00    	and    edi,0xff
c000c02c:	50                   	push   eax
c000c02d:	8d 46 20             	lea    eax,[esi+0x20]
c000c030:	57                   	push   edi
c000c031:	25 ff 00 00 00       	and    eax,0xff
c000c036:	6a 00                	push   0x0
c000c038:	50                   	push   eax
c000c039:	89 f0                	mov    eax,esi
c000c03b:	6a 00                	push   0x0
c000c03d:	25 ff 00 00 00       	and    eax,0xff
c000c042:	6a 00                	push   0x0
c000c044:	50                   	push   eax
c000c045:	8b 04 9d 80 6b 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd9480]
c000c04c:	50                   	push   eax
c000c04d:	e8 7e fe 00 00       	call   c001bed0 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c000c052:	83 c4 20             	add    esp,0x20
c000c055:	e9 73 ff ff ff       	jmp    c000bfcd <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x75>
c000c05a:	83 ec 0c             	sub    esp,0xc
c000c05d:	31 ff                	xor    edi,edi
c000c05f:	68 c4 e7 01 c0       	push   0xc001e7c4
c000c064:	e8 3e 42 00 00       	call   c00102a7 <KePanic(char const*)>
c000c069:	83 c4 10             	add    esp,0x10
c000c06c:	e9 2b ff ff ff       	jmp    c000bf9c <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c000c071:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000c074:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c078:	89 14 85 c0 3f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc040],edx
c000c07f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c083:	5b                   	pop    ebx
c000c084:	89 14 85 c0 2f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdd040],edx
c000c08b:	89 f0                	mov    eax,esi
c000c08d:	5e                   	pop    esi
c000c08e:	5f                   	pop    edi
c000c08f:	c3                   	ret    

c000c090 <uninstallISRHandler(int, void (*)(regs*, void*))>:
c000c090:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c094:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c098:	c1 e0 04             	shl    eax,0x4
c000c09b:	8d 50 10             	lea    edx,[eax+0x10]
c000c09e:	39 88 c0 3f 02 c0    	cmp    DWORD PTR [eax-0x3ffdc040],ecx
c000c0a4:	74 08                	je     c000c0ae <uninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c000c0a6:	83 c0 04             	add    eax,0x4
c000c0a9:	39 d0                	cmp    eax,edx
c000c0ab:	75 f1                	jne    c000c09e <uninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c000c0ad:	c3                   	ret    
c000c0ae:	c7 80 c0 3f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdc040],0x0
c000c0b8:	c7 80 c0 2f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdd040],0x0
c000c0c2:	eb e2                	jmp    c000c0a6 <uninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c000c0c4 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c000c0c4:	53                   	push   ebx
c000c0c5:	83 ec 08             	sub    esp,0x8
c000c0c8:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000c0cc:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000c0d1:	74 0e                	je     c000c0e1 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000c0d3:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c000c0d8:	f6 80 6c 01 00 00 01 	test   BYTE PTR [eax+0x16c],0x1
c000c0df:	75 37                	jne    c000c118 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x54>
c000c0e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0e5:	83 c0 20             	add    eax,0x20
c000c0e8:	c1 e0 04             	shl    eax,0x4
c000c0eb:	8d 50 10             	lea    edx,[eax+0x10]
c000c0ee:	39 98 c0 3f 02 c0    	cmp    DWORD PTR [eax-0x3ffdc040],ebx
c000c0f4:	74 0c                	je     c000c102 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x3e>
c000c0f6:	83 c0 04             	add    eax,0x4
c000c0f9:	39 d0                	cmp    eax,edx
c000c0fb:	75 f1                	jne    c000c0ee <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2a>
c000c0fd:	83 c4 08             	add    esp,0x8
c000c100:	5b                   	pop    ebx
c000c101:	c3                   	ret    
c000c102:	c7 80 c0 3f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdc040],0x0
c000c10c:	c7 80 c0 2f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdd040],0x0
c000c116:	eb de                	jmp    c000c0f6 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x32>
c000c118:	83 7c 24 10 0f       	cmp    DWORD PTR [esp+0x10],0xf
c000c11d:	7f 12                	jg     c000c131 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x6d>
c000c11f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c123:	31 c0                	xor    eax,eax
c000c125:	8a 81 40 ff 01 c0    	mov    al,BYTE PTR [ecx-0x3ffe00c0]
c000c12b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c12f:	eb b0                	jmp    c000c0e1 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000c131:	83 ec 0c             	sub    esp,0xc
c000c134:	68 b5 e7 01 c0       	push   0xc001e7b5
c000c139:	e8 69 41 00 00       	call   c00102a7 <KePanic(char const*)>
c000c13e:	83 c4 10             	add    esp,0x10
c000c141:	eb 9e                	jmp    c000c0e1 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>

c000c143 <setupINTS()>:
c000c143:	31 c0                	xor    eax,eax
c000c145:	c7 80 c0 3f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdc040],0x0
c000c14f:	c7 80 c0 2f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdd040],0x0
c000c159:	c7 80 c4 3f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdc03c],0x0
c000c163:	c7 80 c4 2f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdd03c],0x0
c000c16d:	c7 80 c8 3f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdc038],0x0
c000c177:	c7 80 c8 2f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdd038],0x0
c000c181:	c7 80 cc 3f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdc034],0x0
c000c18b:	c7 80 cc 2f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdd034],0x0
c000c195:	83 c0 10             	add    eax,0x10
c000c198:	3d 00 10 00 00       	cmp    eax,0x1000
c000c19d:	75 a6                	jne    c000c145 <setupINTS()+0x2>
c000c19f:	c3                   	ret    

c000c1a0 <convertLegacyIRQNumber(int)>:
c000c1a0:	83 ec 0c             	sub    esp,0xc
c000c1a3:	8b 15 b8 2e 02 c0    	mov    edx,DWORD PTR ds:0xc0022eb8
c000c1a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c1ad:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000c1b4:	74 0f                	je     c000c1c5 <convertLegacyIRQNumber(int)+0x25>
c000c1b6:	83 f8 0f             	cmp    eax,0xf
c000c1b9:	7f 0e                	jg     c000c1c9 <convertLegacyIRQNumber(int)+0x29>
c000c1bb:	31 c9                	xor    ecx,ecx
c000c1bd:	8a 88 40 ff 01 c0    	mov    cl,BYTE PTR [eax-0x3ffe00c0]
c000c1c3:	89 c8                	mov    eax,ecx
c000c1c5:	83 c4 0c             	add    esp,0xc
c000c1c8:	c3                   	ret    
c000c1c9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c1cd:	83 ec 0c             	sub    esp,0xc
c000c1d0:	68 c4 e7 01 c0       	push   0xc001e7c4
c000c1d5:	e8 cd 40 00 00       	call   c00102a7 <KePanic(char const*)>
c000c1da:	83 c4 10             	add    esp,0x10
c000c1dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c1e1:	83 c4 0c             	add    esp,0xc
c000c1e4:	c3                   	ret    
c000c1e5:	90                   	nop

c000c1e6 <startGUI(void*)>:
c000c1e6:	55                   	push   ebp
c000c1e7:	89 e5                	mov    ebp,esp
c000c1e9:	53                   	push   ebx
c000c1ea:	83 ec 04             	sub    esp,0x4
c000c1ed:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c000c1f2:	48                   	dec    eax
c000c1f3:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c000c1f8:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c000c1fd:	85 c0                	test   eax,eax
c000c1ff:	75 01                	jne    c000c202 <startGUI(void*)+0x1c>
c000c201:	fb                   	sti    
c000c202:	8b 1d b8 2e 02 c0    	mov    ebx,DWORD PTR ds:0xc0022eb8
c000c208:	83 ec 08             	sub    esp,0x8
c000c20b:	6a 01                	push   0x1
c000c20d:	68 21 e8 01 c0       	push   0xc001e821
c000c212:	e8 83 6b 00 00       	call   c0012d9a <Thr::loadDLL(char const*, bool)>
c000c217:	83 c4 10             	add    esp,0x10
c000c21a:	83 ec 08             	sub    esp,0x8
c000c21d:	53                   	push   ebx
c000c21e:	50                   	push   eax
c000c21f:	e8 a7 6d 00 00       	call   c0012fcb <Thr::executeDLL(unsigned long, void*)>
c000c224:	83 c4 10             	add    esp,0x10
c000c227:	8b 1d b8 2e 02 c0    	mov    ebx,DWORD PTR ds:0xc0022eb8
c000c22d:	83 ec 08             	sub    esp,0x8
c000c230:	6a 01                	push   0x1
c000c232:	68 3b e8 01 c0       	push   0xc001e83b
c000c237:	e8 5e 6b 00 00       	call   c0012d9a <Thr::loadDLL(char const*, bool)>
c000c23c:	83 c4 10             	add    esp,0x10
c000c23f:	83 ec 08             	sub    esp,0x8
c000c242:	53                   	push   ebx
c000c243:	50                   	push   eax
c000c244:	e8 82 6d 00 00       	call   c0012fcb <Thr::executeDLL(unsigned long, void*)>
c000c249:	83 c4 10             	add    esp,0x10
c000c24c:	90                   	nop
c000c24d:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000c250:	c9                   	leave  
c000c251:	c3                   	ret    

c000c252 <startGUIVESA(void*)>:
c000c252:	55                   	push   ebp
c000c253:	89 e5                	mov    ebp,esp
c000c255:	53                   	push   ebx
c000c256:	83 ec 04             	sub    esp,0x4
c000c259:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c000c25e:	48                   	dec    eax
c000c25f:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c000c264:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c000c269:	85 c0                	test   eax,eax
c000c26b:	75 01                	jne    c000c26e <startGUIVESA(void*)+0x1c>
c000c26d:	fb                   	sti    
c000c26e:	8b 1d b8 2e 02 c0    	mov    ebx,DWORD PTR ds:0xc0022eb8
c000c274:	83 ec 08             	sub    esp,0x8
c000c277:	6a 01                	push   0x1
c000c279:	68 59 e8 01 c0       	push   0xc001e859
c000c27e:	e8 17 6b 00 00       	call   c0012d9a <Thr::loadDLL(char const*, bool)>
c000c283:	83 c4 10             	add    esp,0x10
c000c286:	83 ec 08             	sub    esp,0x8
c000c289:	53                   	push   ebx
c000c28a:	50                   	push   eax
c000c28b:	e8 3b 6d 00 00       	call   c0012fcb <Thr::executeDLL(unsigned long, void*)>
c000c290:	83 c4 10             	add    esp,0x10
c000c293:	8b 1d b8 2e 02 c0    	mov    ebx,DWORD PTR ds:0xc0022eb8
c000c299:	83 ec 08             	sub    esp,0x8
c000c29c:	6a 01                	push   0x1
c000c29e:	68 3b e8 01 c0       	push   0xc001e83b
c000c2a3:	e8 f2 6a 00 00       	call   c0012d9a <Thr::loadDLL(char const*, bool)>
c000c2a8:	83 c4 10             	add    esp,0x10
c000c2ab:	83 ec 08             	sub    esp,0x8
c000c2ae:	53                   	push   ebx
c000c2af:	50                   	push   eax
c000c2b0:	e8 16 6d 00 00       	call   c0012fcb <Thr::executeDLL(unsigned long, void*)>
c000c2b5:	83 c4 10             	add    esp,0x10
c000c2b8:	90                   	nop
c000c2b9:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000c2bc:	c9                   	leave  
c000c2bd:	c3                   	ret    

c000c2be <sendKeyToTerminal(unsigned char)>:
c000c2be:	55                   	push   ebp
c000c2bf:	89 e5                	mov    ebp,esp
c000c2c1:	83 ec 28             	sub    esp,0x28
c000c2c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c2c7:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000c2ca:	8b 15 04 2f 02 c0    	mov    edx,DWORD PTR ds:0xc0022f04
c000c2d0:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
c000c2d3:	25 ff 00 00 00       	and    eax,0xff
c000c2d8:	83 ec 08             	sub    esp,0x8
c000c2db:	50                   	push   eax
c000c2dc:	52                   	push   edx
c000c2dd:	e8 68 c7 ff ff       	call   c0008a4a <VgaText::receiveKey(unsigned char)>
c000c2e2:	83 c4 10             	add    esp,0x10
c000c2e5:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c000c2e9:	74 0a                	je     c000c2f5 <sendKeyToTerminal(unsigned char)+0x37>
c000c2eb:	80 7d e4 03          	cmp    BYTE PTR [ebp-0x1c],0x3
c000c2ef:	0f 85 8f 00 00 00    	jne    c000c384 <sendKeyToTerminal(unsigned char)+0xc6>
c000c2f5:	fa                   	cli    
c000c2f6:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c000c2fb:	40                   	inc    eax
c000c2fc:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c000c301:	a1 64 61 02 c0       	mov    eax,ds:0xc0026164
c000c306:	40                   	inc    eax
c000c307:	a3 64 61 02 c0       	mov    ds:0xc0026164,eax
c000c30c:	a1 c0 4f 02 c0       	mov    eax,ds:0xc0024fc0
c000c311:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000c314:	c7 05 c0 4f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024fc0,0x0
c000c31e:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000c322:	74 1f                	je     c000c343 <sendKeyToTerminal(unsigned char)+0x85>
c000c324:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000c327:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000c32a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000c32d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000c330:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000c333:	83 ec 0c             	sub    esp,0xc
c000c336:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000c339:	e8 4a 79 00 00       	call   c0013c88 <unblockTask(ThreadControlBlock*)>
c000c33e:	83 c4 10             	add    esp,0x10
c000c341:	eb db                	jmp    c000c31e <sendKeyToTerminal(unsigned char)+0x60>
c000c343:	a1 64 61 02 c0       	mov    eax,ds:0xc0026164
c000c348:	48                   	dec    eax
c000c349:	a3 64 61 02 c0       	mov    ds:0xc0026164,eax
c000c34e:	a1 64 61 02 c0       	mov    eax,ds:0xc0026164
c000c353:	85 c0                	test   eax,eax
c000c355:	75 18                	jne    c000c36f <sendKeyToTerminal(unsigned char)+0xb1>
c000c357:	a1 60 61 02 c0       	mov    eax,ds:0xc0026160
c000c35c:	85 c0                	test   eax,eax
c000c35e:	74 0f                	je     c000c36f <sendKeyToTerminal(unsigned char)+0xb1>
c000c360:	c7 05 60 61 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026160,0x0
c000c36a:	e8 55 74 00 00       	call   c00137c4 <schedule()>
c000c36f:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c000c374:	48                   	dec    eax
c000c375:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c000c37a:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c000c37f:	85 c0                	test   eax,eax
c000c381:	75 01                	jne    c000c384 <sendKeyToTerminal(unsigned char)+0xc6>
c000c383:	fb                   	sti    
c000c384:	90                   	nop
c000c385:	c9                   	leave  
c000c386:	c3                   	ret    

c000c387 <sendKeyboardToken(KeyboardToken)>:
c000c387:	55                   	push   ebp
c000c388:	89 e5                	mov    ebp,esp
c000c38a:	83 ec 18             	sub    esp,0x18
c000c38d:	e8 65 3f 00 00       	call   c00102f7 <Krnl::userIOReceived()>
c000c392:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000c395:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c398:	25 ff ff 00 00       	and    eax,0xffff
c000c39d:	83 f2 01             	xor    edx,0x1
c000c3a0:	88 90 e0 4f 02 c0    	mov    BYTE PTR [eax-0x3ffdb020],dl
c000c3a6:	a1 c8 4f 02 c0       	mov    eax,ds:0xc0024fc8
c000c3ab:	85 c0                	test   eax,eax
c000c3ad:	74 24                	je     c000c3d3 <sendKeyboardToken(KeyboardToken)+0x4c>
c000c3af:	8b 0d c8 4f 02 c0    	mov    ecx,DWORD PTR ds:0xc0024fc8
c000c3b5:	83 ec 04             	sub    esp,0x4
c000c3b8:	68 e0 4f 02 c0       	push   0xc0024fe0
c000c3bd:	83 ec 08             	sub    esp,0x8
c000c3c0:	89 e2                	mov    edx,esp
c000c3c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c3c5:	89 02                	mov    DWORD PTR [edx],eax
c000c3c7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000c3ca:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000c3ce:	ff d1                	call   ecx
c000c3d0:	83 c4 10             	add    esp,0x10
c000c3d3:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000c3d7:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c000c3da:	a0 e8 53 02 c0       	mov    al,ds:0xc00253e8
c000c3df:	38 c2                	cmp    dl,al
c000c3e1:	74 1e                	je     c000c401 <sendKeyboardToken(KeyboardToken)+0x7a>
c000c3e3:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c000c3e6:	a2 e8 53 02 c0       	mov    ds:0xc00253e8,al
c000c3eb:	a0 e8 53 02 c0       	mov    al,ds:0xc00253e8
c000c3f0:	25 ff 00 00 00       	and    eax,0xff
c000c3f5:	83 ec 0c             	sub    esp,0xc
c000c3f8:	50                   	push   eax
c000c3f9:	e8 9a bd ff ff       	call   c0008198 <setTerminalScrollLock(bool)>
c000c3fe:	83 c4 10             	add    esp,0x10
c000c401:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000c404:	84 c0                	test   al,al
c000c406:	0f 84 ae 00 00 00    	je     c000c4ba <sendKeyboardToken(KeyboardToken)+0x133>
c000c40c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c40f:	66 3d 10 03          	cmp    ax,0x310
c000c413:	75 06                	jne    c000c41b <sendKeyboardToken(KeyboardToken)+0x94>
c000c415:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000c41b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c41e:	66 3d 11 03          	cmp    ax,0x311
c000c422:	75 06                	jne    c000c42a <sendKeyboardToken(KeyboardToken)+0xa3>
c000c424:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000c42a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c42d:	66 3d 12 03          	cmp    ax,0x312
c000c431:	75 06                	jne    c000c439 <sendKeyboardToken(KeyboardToken)+0xb2>
c000c433:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000c439:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c43c:	66 3d 13 03          	cmp    ax,0x313
c000c440:	75 06                	jne    c000c448 <sendKeyboardToken(KeyboardToken)+0xc1>
c000c442:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000c448:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c44b:	66 3d 14 03          	cmp    ax,0x314
c000c44f:	75 06                	jne    c000c457 <sendKeyboardToken(KeyboardToken)+0xd0>
c000c451:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000c457:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c45a:	66 3d 15 03          	cmp    ax,0x315
c000c45e:	75 06                	jne    c000c466 <sendKeyboardToken(KeyboardToken)+0xdf>
c000c460:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000c466:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c469:	66 3d 16 03          	cmp    ax,0x316
c000c46d:	75 06                	jne    c000c475 <sendKeyboardToken(KeyboardToken)+0xee>
c000c46f:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000c475:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c478:	66 3d 17 03          	cmp    ax,0x317
c000c47c:	75 06                	jne    c000c484 <sendKeyboardToken(KeyboardToken)+0xfd>
c000c47e:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000c484:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c487:	66 3d 18 03          	cmp    ax,0x318
c000c48b:	75 06                	jne    c000c493 <sendKeyboardToken(KeyboardToken)+0x10c>
c000c48d:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000c493:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c496:	66 3d 19 03          	cmp    ax,0x319
c000c49a:	75 06                	jne    c000c4a2 <sendKeyboardToken(KeyboardToken)+0x11b>
c000c49c:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000c4a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c4a5:	66 3d 1a 03          	cmp    ax,0x31a
c000c4a9:	0f 85 c9 00 00 00    	jne    c000c578 <sendKeyboardToken(KeyboardToken)+0x1f1>
c000c4af:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000c4b5:	e9 be 00 00 00       	jmp    c000c578 <sendKeyboardToken(KeyboardToken)+0x1f1>
c000c4ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c4bd:	66 3d 10 03          	cmp    ax,0x310
c000c4c1:	75 0a                	jne    c000c4cd <sendKeyboardToken(KeyboardToken)+0x146>
c000c4c3:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000c4c9:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c4cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c4d0:	66 3d 11 03          	cmp    ax,0x311
c000c4d4:	75 0a                	jne    c000c4e0 <sendKeyboardToken(KeyboardToken)+0x159>
c000c4d6:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000c4dc:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c4e0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c4e3:	66 3d 12 03          	cmp    ax,0x312
c000c4e7:	75 0a                	jne    c000c4f3 <sendKeyboardToken(KeyboardToken)+0x16c>
c000c4e9:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000c4ef:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c4f3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c4f6:	66 3d 13 03          	cmp    ax,0x313
c000c4fa:	75 0a                	jne    c000c506 <sendKeyboardToken(KeyboardToken)+0x17f>
c000c4fc:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000c502:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c506:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c509:	66 3d 14 03          	cmp    ax,0x314
c000c50d:	75 0a                	jne    c000c519 <sendKeyboardToken(KeyboardToken)+0x192>
c000c50f:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000c515:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c519:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c51c:	66 3d 15 03          	cmp    ax,0x315
c000c520:	75 0a                	jne    c000c52c <sendKeyboardToken(KeyboardToken)+0x1a5>
c000c522:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000c528:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c52c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c52f:	66 3d 16 03          	cmp    ax,0x316
c000c533:	75 0a                	jne    c000c53f <sendKeyboardToken(KeyboardToken)+0x1b8>
c000c535:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000c53b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c53f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c542:	66 3d 17 03          	cmp    ax,0x317
c000c546:	75 0a                	jne    c000c552 <sendKeyboardToken(KeyboardToken)+0x1cb>
c000c548:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000c54e:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c552:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c555:	66 3d 18 03          	cmp    ax,0x318
c000c559:	75 0a                	jne    c000c565 <sendKeyboardToken(KeyboardToken)+0x1de>
c000c55b:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000c561:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c565:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c568:	66 3d 19 03          	cmp    ax,0x319
c000c56c:	75 0a                	jne    c000c578 <sendKeyboardToken(KeyboardToken)+0x1f1>
c000c56e:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000c574:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c578:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c57b:	66 3d 00 02          	cmp    ax,0x200
c000c57f:	75 2c                	jne    c000c5ad <sendKeyboardToken(KeyboardToken)+0x226>
c000c581:	a0 e0 53 02 c0       	mov    al,ds:0xc00253e0
c000c586:	83 f0 01             	xor    eax,0x1
c000c589:	84 c0                	test   al,al
c000c58b:	74 20                	je     c000c5ad <sendKeyboardToken(KeyboardToken)+0x226>
c000c58d:	a1 90 61 02 c0       	mov    eax,ds:0xc0026190
c000c592:	6a 01                	push   0x1
c000c594:	6a 00                	push   0x0
c000c596:	68 e6 c1 00 c0       	push   0xc000c1e6
c000c59b:	50                   	push   eax
c000c59c:	e8 03 70 00 00       	call   c00135a4 <Process::createThread(void (*)(void*), void*, int)>
c000c5a1:	83 c4 10             	add    esp,0x10
c000c5a4:	c6 05 e0 53 02 c0 01 	mov    BYTE PTR ds:0xc00253e0,0x1
c000c5ab:	eb 33                	jmp    c000c5e0 <sendKeyboardToken(KeyboardToken)+0x259>
c000c5ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c5b0:	66 3d 01 02          	cmp    ax,0x201
c000c5b4:	75 2a                	jne    c000c5e0 <sendKeyboardToken(KeyboardToken)+0x259>
c000c5b6:	a0 e0 53 02 c0       	mov    al,ds:0xc00253e0
c000c5bb:	83 f0 01             	xor    eax,0x1
c000c5be:	84 c0                	test   al,al
c000c5c0:	74 1e                	je     c000c5e0 <sendKeyboardToken(KeyboardToken)+0x259>
c000c5c2:	a1 90 61 02 c0       	mov    eax,ds:0xc0026190
c000c5c7:	6a 01                	push   0x1
c000c5c9:	6a 00                	push   0x0
c000c5cb:	68 52 c2 00 c0       	push   0xc000c252
c000c5d0:	50                   	push   eax
c000c5d1:	e8 ce 6f 00 00       	call   c00135a4 <Process::createThread(void (*)(void*), void*, int)>
c000c5d6:	83 c4 10             	add    esp,0x10
c000c5d9:	c6 05 e0 53 02 c0 01 	mov    BYTE PTR ds:0xc00253e0,0x1
c000c5e0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c5e3:	66 3d 1d 03          	cmp    ax,0x31d
c000c5e7:	75 06                	jne    c000c5ef <sendKeyboardToken(KeyboardToken)+0x268>
c000c5e9:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000c5ef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c5f2:	66 3d 1c 03          	cmp    ax,0x31c
c000c5f6:	75 06                	jne    c000c5fe <sendKeyboardToken(KeyboardToken)+0x277>
c000c5f8:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000c5fe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c601:	66 3d 1b 03          	cmp    ax,0x31b
c000c605:	75 06                	jne    c000c60d <sendKeyboardToken(KeyboardToken)+0x286>
c000c607:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000c60d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c610:	66 3d 1e 03          	cmp    ax,0x31e
c000c614:	75 06                	jne    c000c61c <sendKeyboardToken(KeyboardToken)+0x295>
c000c616:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000c61c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c61f:	66 3d 1f 03          	cmp    ax,0x31f
c000c623:	75 06                	jne    c000c62b <sendKeyboardToken(KeyboardToken)+0x2a4>
c000c625:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000c62b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c62e:	66 3d 1a 03          	cmp    ax,0x31a
c000c632:	75 06                	jne    c000c63a <sendKeyboardToken(KeyboardToken)+0x2b3>
c000c634:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000c63a:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000c63e:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000c641:	83 f0 01             	xor    eax,0x1
c000c644:	84 c0                	test   al,al
c000c646:	74 7b                	je     c000c6c3 <sendKeyboardToken(KeyboardToken)+0x33c>
c000c648:	a0 e1 50 02 c0       	mov    al,ds:0xc00250e1
c000c64d:	84 c0                	test   al,al
c000c64f:	74 43                	je     c000c694 <sendKeyboardToken(KeyboardToken)+0x30d>
c000c651:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000c655:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c000c659:	74 2d                	je     c000c688 <sendKeyboardToken(KeyboardToken)+0x301>
c000c65b:	8b 15 e4 53 02 c0    	mov    edx,DWORD PTR ds:0xc00253e4
c000c661:	89 d0                	mov    eax,edx
c000c663:	c1 e0 02             	shl    eax,0x2
c000c666:	01 d0                	add    eax,edx
c000c668:	01 c0                	add    eax,eax
c000c66a:	a3 e4 53 02 c0       	mov    ds:0xc00253e4,eax
c000c66f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c672:	25 ff ff 00 00       	and    eax,0xffff
c000c677:	8d 50 d0             	lea    edx,[eax-0x30]
c000c67a:	a1 e4 53 02 c0       	mov    eax,ds:0xc00253e4
c000c67f:	01 d0                	add    eax,edx
c000c681:	a3 e4 53 02 c0       	mov    ds:0xc00253e4,eax
c000c686:	eb 71                	jmp    c000c6f9 <sendKeyboardToken(KeyboardToken)+0x372>
c000c688:	c7 05 e4 53 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00253e4,0x0
c000c692:	eb 65                	jmp    c000c6f9 <sendKeyboardToken(KeyboardToken)+0x372>
c000c694:	a1 e4 53 02 c0       	mov    eax,ds:0xc00253e4
c000c699:	85 c0                	test   eax,eax
c000c69b:	74 1a                	je     c000c6b7 <sendKeyboardToken(KeyboardToken)+0x330>
c000c69d:	a1 e4 53 02 c0       	mov    eax,ds:0xc00253e4
c000c6a2:	25 ff 00 00 00       	and    eax,0xff
c000c6a7:	83 ec 0c             	sub    esp,0xc
c000c6aa:	50                   	push   eax
c000c6ab:	e8 0e fc ff ff       	call   c000c2be <sendKeyToTerminal(unsigned char)>
c000c6b0:	83 c4 10             	add    esp,0x10
c000c6b3:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000c6b7:	c7 05 e4 53 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00253e4,0x0
c000c6c1:	eb 36                	jmp    c000c6f9 <sendKeyboardToken(KeyboardToken)+0x372>
c000c6c3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c6c6:	66 3d 01 01          	cmp    ax,0x101
c000c6ca:	75 2d                	jne    c000c6f9 <sendKeyboardToken(KeyboardToken)+0x372>
c000c6cc:	a1 e4 53 02 c0       	mov    eax,ds:0xc00253e4
c000c6d1:	85 c0                	test   eax,eax
c000c6d3:	74 1a                	je     c000c6ef <sendKeyboardToken(KeyboardToken)+0x368>
c000c6d5:	a1 e4 53 02 c0       	mov    eax,ds:0xc00253e4
c000c6da:	25 ff 00 00 00       	and    eax,0xff
c000c6df:	83 ec 0c             	sub    esp,0xc
c000c6e2:	50                   	push   eax
c000c6e3:	e8 d6 fb ff ff       	call   c000c2be <sendKeyToTerminal(unsigned char)>
c000c6e8:	83 c4 10             	add    esp,0x10
c000c6eb:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000c6ef:	c7 05 e4 53 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00253e4,0x0
c000c6f9:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000c6fc:	83 f0 01             	xor    eax,0x1
c000c6ff:	84 c0                	test   al,al
c000c701:	74 4e                	je     c000c751 <sendKeyboardToken(KeyboardToken)+0x3ca>
c000c703:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000c706:	83 f0 01             	xor    eax,0x1
c000c709:	84 c0                	test   al,al
c000c70b:	74 44                	je     c000c751 <sendKeyboardToken(KeyboardToken)+0x3ca>
c000c70d:	a0 e0 50 02 c0       	mov    al,ds:0xc00250e0
c000c712:	83 f0 01             	xor    eax,0x1
c000c715:	84 c0                	test   al,al
c000c717:	74 38                	je     c000c751 <sendKeyboardToken(KeyboardToken)+0x3ca>
c000c719:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c71c:	66 83 f8 1f          	cmp    ax,0x1f
c000c720:	76 09                	jbe    c000c72b <sendKeyboardToken(KeyboardToken)+0x3a4>
c000c722:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c725:	66 83 f8 7e          	cmp    ax,0x7e
c000c729:	76 12                	jbe    c000c73d <sendKeyboardToken(KeyboardToken)+0x3b6>
c000c72b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c72e:	66 83 f8 0a          	cmp    ax,0xa
c000c732:	74 09                	je     c000c73d <sendKeyboardToken(KeyboardToken)+0x3b6>
c000c734:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c737:	66 83 f8 08          	cmp    ax,0x8
c000c73b:	75 14                	jne    c000c751 <sendKeyboardToken(KeyboardToken)+0x3ca>
c000c73d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c740:	25 ff 00 00 00       	and    eax,0xff
c000c745:	83 ec 0c             	sub    esp,0xc
c000c748:	50                   	push   eax
c000c749:	e8 70 fb ff ff       	call   c000c2be <sendKeyToTerminal(unsigned char)>
c000c74e:	83 c4 10             	add    esp,0x10
c000c751:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000c754:	83 f0 01             	xor    eax,0x1
c000c757:	84 c0                	test   al,al
c000c759:	74 51                	je     c000c7ac <sendKeyboardToken(KeyboardToken)+0x425>
c000c75b:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000c75e:	83 f0 01             	xor    eax,0x1
c000c761:	84 c0                	test   al,al
c000c763:	74 47                	je     c000c7ac <sendKeyboardToken(KeyboardToken)+0x425>
c000c765:	a0 e0 50 02 c0       	mov    al,ds:0xc00250e0
c000c76a:	84 c0                	test   al,al
c000c76c:	74 3e                	je     c000c7ac <sendKeyboardToken(KeyboardToken)+0x425>
c000c76e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c771:	66 83 f8 3f          	cmp    ax,0x3f
c000c775:	76 35                	jbe    c000c7ac <sendKeyboardToken(KeyboardToken)+0x425>
c000c777:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c77a:	66 83 f8 7f          	cmp    ax,0x7f
c000c77e:	77 2c                	ja     c000c7ac <sendKeyboardToken(KeyboardToken)+0x425>
c000c780:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c783:	88 c2                	mov    dl,al
c000c785:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c788:	66 83 f8 5f          	cmp    ax,0x5f
c000c78c:	76 04                	jbe    c000c792 <sendKeyboardToken(KeyboardToken)+0x40b>
c000c78e:	b0 20                	mov    al,0x20
c000c790:	eb 02                	jmp    c000c794 <sendKeyboardToken(KeyboardToken)+0x40d>
c000c792:	b0 00                	mov    al,0x0
c000c794:	29 c2                	sub    edx,eax
c000c796:	88 d0                	mov    al,dl
c000c798:	83 e8 40             	sub    eax,0x40
c000c79b:	25 ff 00 00 00       	and    eax,0xff
c000c7a0:	83 ec 0c             	sub    esp,0xc
c000c7a3:	50                   	push   eax
c000c7a4:	e8 15 fb ff ff       	call   c000c2be <sendKeyToTerminal(unsigned char)>
c000c7a9:	83 c4 10             	add    esp,0x10
c000c7ac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c7af:	66 3d 00 03          	cmp    ax,0x300
c000c7b3:	75 0f                	jne    c000c7c4 <sendKeyboardToken(KeyboardToken)+0x43d>
c000c7b5:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000c7b8:	83 f0 01             	xor    eax,0x1
c000c7bb:	84 c0                	test   al,al
c000c7bd:	74 05                	je     c000c7c4 <sendKeyboardToken(KeyboardToken)+0x43d>
c000c7bf:	e8 d5 b9 ff ff       	call   c0008199 <doTerminalCycle()>
c000c7c4:	90                   	nop
c000c7c5:	c9                   	leave  
c000c7c6:	c3                   	ret    

c000c7c7 <clearInternalKeybuffer(VgaText*)>:
c000c7c7:	55                   	push   ebp
c000c7c8:	89 e5                	mov    ebp,esp
c000c7ca:	83 ec 08             	sub    esp,0x8
c000c7cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c7d0:	05 02 01 00 00       	add    eax,0x102
c000c7d5:	83 ec 0c             	sub    esp,0xc
c000c7d8:	50                   	push   eax
c000c7d9:	e8 62 3d ff ff       	call   c0000540 <strlen>
c000c7de:	83 c4 10             	add    esp,0x10
c000c7e1:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000c7e4:	81 c2 02 01 00 00    	add    edx,0x102
c000c7ea:	83 ec 04             	sub    esp,0x4
c000c7ed:	50                   	push   eax
c000c7ee:	6a 00                	push   0x0
c000c7f0:	52                   	push   edx
c000c7f1:	e8 da 3c ff ff       	call   c00004d0 <memset>
c000c7f6:	83 c4 10             	add    esp,0x10
c000c7f9:	90                   	nop
c000c7fa:	c9                   	leave  
c000c7fb:	c3                   	ret    

c000c7fc <readKeyboard(VgaText*, char*, unsigned long)>:
c000c7fc:	55                   	push   ebp
c000c7fd:	89 e5                	mov    ebp,esp
c000c7ff:	83 ec 18             	sub    esp,0x18
c000c802:	a1 c8 4f 02 c0       	mov    eax,ds:0xc0024fc8
c000c807:	85 c0                	test   eax,eax
c000c809:	74 2a                	je     c000c835 <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c000c80b:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000c811:	8b 0d c8 4f 02 c0    	mov    ecx,DWORD PTR ds:0xc0024fc8
c000c817:	83 ec 04             	sub    esp,0x4
c000c81a:	68 e0 4f 02 c0       	push   0xc0024fe0
c000c81f:	83 ec 08             	sub    esp,0x8
c000c822:	89 e2                	mov    edx,esp
c000c824:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c000c827:	89 02                	mov    DWORD PTR [edx],eax
c000c829:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000c82c:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000c830:	ff d1                	call   ecx
c000c832:	83 c4 10             	add    esp,0x10
c000c835:	fb                   	sti    
c000c836:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000c83d:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000c841:	0f 84 cb 00 00 00    	je     c000c912 <readKeyboard(VgaText*, char*, unsigned long)+0x116>
c000c847:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c84a:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000c850:	84 c0                	test   al,al
c000c852:	75 28                	jne    c000c87c <readKeyboard(VgaText*, char*, unsigned long)+0x80>
c000c854:	fa                   	cli    
c000c855:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c000c85a:	40                   	inc    eax
c000c85b:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c000c860:	e8 5f 6f 00 00       	call   c00137c4 <schedule()>
c000c865:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c000c86a:	48                   	dec    eax
c000c86b:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c000c870:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c000c875:	85 c0                	test   eax,eax
c000c877:	75 ce                	jne    c000c847 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000c879:	fb                   	sti    
c000c87a:	eb cb                	jmp    c000c847 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000c87c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000c87f:	8d 50 01             	lea    edx,[eax+0x1]
c000c882:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c885:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000c888:	8a 92 02 01 00 00    	mov    dl,BYTE PTR [edx+0x102]
c000c88e:	88 10                	mov    BYTE PTR [eax],dl
c000c890:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c893:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000c899:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c000c89c:	80 7d f3 03          	cmp    BYTE PTR [ebp-0xd],0x3
c000c8a0:	75 1e                	jne    c000c8c0 <readKeyboard(VgaText*, char*, unsigned long)+0xc4>
c000c8a2:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000c8a7:	8b 00                	mov    eax,DWORD PTR [eax]
c000c8a9:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000c8ac:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000c8b2:	83 ec 08             	sub    esp,0x8
c000c8b5:	6a 02                	push   0x2
c000c8b7:	50                   	push   eax
c000c8b8:	e8 d6 3d 00 00       	call   c0010693 <KeRaiseSignal(SigHandlerBlock*, int)>
c000c8bd:	83 c4 10             	add    esp,0x10
c000c8c0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c8c3:	05 02 01 00 00       	add    eax,0x102
c000c8c8:	83 ec 0c             	sub    esp,0xc
c000c8cb:	50                   	push   eax
c000c8cc:	e8 6f 3c ff ff       	call   c0000540 <strlen>
c000c8d1:	83 c4 10             	add    esp,0x10
c000c8d4:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000c8d7:	81 c2 02 01 00 00    	add    edx,0x102
c000c8dd:	8d 4a 01             	lea    ecx,[edx+0x1]
c000c8e0:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000c8e3:	81 c2 02 01 00 00    	add    edx,0x102
c000c8e9:	83 ec 04             	sub    esp,0x4
c000c8ec:	50                   	push   eax
c000c8ed:	51                   	push   ecx
c000c8ee:	52                   	push   edx
c000c8ef:	e8 ec 3a ff ff       	call   c00003e0 <memmove>
c000c8f4:	83 c4 10             	add    esp,0x10
c000c8f7:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c000c8fa:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000c8fd:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c000c901:	74 0a                	je     c000c90d <readKeyboard(VgaText*, char*, unsigned long)+0x111>
c000c903:	80 7d f3 03          	cmp    BYTE PTR [ebp-0xd],0x3
c000c907:	0f 85 30 ff ff ff    	jne    c000c83d <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c000c90d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000c910:	eb 03                	jmp    c000c915 <readKeyboard(VgaText*, char*, unsigned long)+0x119>
c000c912:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000c915:	c9                   	leave  
c000c916:	c3                   	ret    
c000c917:	90                   	nop

c000c918 <Keyboard::Keyboard(char const*)>:
c000c918:	83 ec 0c             	sub    esp,0xc
c000c91b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c91f:	83 ec 08             	sub    esp,0x8
c000c922:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c926:	50                   	push   eax
c000c927:	e8 48 f2 ff ff       	call   c000bb74 <Device::Device(char const*)>
c000c92c:	83 c4 10             	add    esp,0x10
c000c92f:	ba 7c e8 01 c0       	mov    edx,0xc001e87c
c000c934:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c938:	89 10                	mov    DWORD PTR [eax],edx
c000c93a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c93e:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c000c948:	c6 05 c4 4f 02 c0 01 	mov    BYTE PTR ds:0xc0024fc4,0x1
c000c94f:	90                   	nop
c000c950:	83 c4 0c             	add    esp,0xc
c000c953:	c3                   	ret    

c000c954 <Keyboard::~Keyboard()>:
c000c954:	83 ec 0c             	sub    esp,0xc
c000c957:	ba 7c e8 01 c0       	mov    edx,0xc001e87c
c000c95c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c960:	89 10                	mov    DWORD PTR [eax],edx
c000c962:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c966:	83 ec 0c             	sub    esp,0xc
c000c969:	50                   	push   eax
c000c96a:	e8 6f ef ff ff       	call   c000b8de <Device::~Device()>
c000c96f:	83 c4 10             	add    esp,0x10
c000c972:	90                   	nop
c000c973:	83 c4 0c             	add    esp,0xc
c000c976:	c3                   	ret    
c000c977:	90                   	nop

c000c978 <Keyboard::~Keyboard()>:
c000c978:	83 ec 0c             	sub    esp,0xc
c000c97b:	83 ec 0c             	sub    esp,0xc
c000c97e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c982:	e8 cd ff ff ff       	call   c000c954 <Keyboard::~Keyboard()>
c000c987:	83 c4 10             	add    esp,0x10
c000c98a:	83 ec 08             	sub    esp,0x8
c000c98d:	68 5c 01 00 00       	push   0x15c
c000c992:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c996:	e8 c1 da ff ff       	call   c000a45c <operator delete(void*, unsigned long)>
c000c99b:	83 c4 10             	add    esp,0x10
c000c99e:	83 c4 0c             	add    esp,0xc
c000c9a1:	c3                   	ret    

c000c9a2 <LogicalDisk::close(int, int, void*)>:
c000c9a2:	83 c8 ff             	or     eax,0xffffffff
c000c9a5:	c3                   	ret    

c000c9a6 <LogicalDisk::~LogicalDisk()>:
c000c9a6:	83 ec 0c             	sub    esp,0xc
c000c9a9:	ba f4 e8 01 c0       	mov    edx,0xc001e8f4
c000c9ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c9b2:	89 10                	mov    DWORD PTR [eax],edx
c000c9b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c9b8:	83 ec 0c             	sub    esp,0xc
c000c9bb:	50                   	push   eax
c000c9bc:	e8 1d ef ff ff       	call   c000b8de <Device::~Device()>
c000c9c1:	83 c4 10             	add    esp,0x10
c000c9c4:	90                   	nop
c000c9c5:	83 c4 0c             	add    esp,0xc
c000c9c8:	c3                   	ret    
c000c9c9:	90                   	nop

c000c9ca <LogicalDisk::~LogicalDisk()>:
c000c9ca:	83 ec 0c             	sub    esp,0xc
c000c9cd:	83 ec 0c             	sub    esp,0xc
c000c9d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c9d4:	e8 cd ff ff ff       	call   c000c9a6 <LogicalDisk::~LogicalDisk()>
c000c9d9:	83 c4 10             	add    esp,0x10
c000c9dc:	83 ec 08             	sub    esp,0x8
c000c9df:	68 74 01 00 00       	push   0x174
c000c9e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c9e8:	e8 6f da ff ff       	call   c000a45c <operator delete(void*, unsigned long)>
c000c9ed:	83 c4 10             	add    esp,0x10
c000c9f0:	83 c4 0c             	add    esp,0xc
c000c9f3:	c3                   	ret    

c000c9f4 <LogicalDisk::open(int, int, void*)>:
c000c9f4:	83 ec 18             	sub    esp,0x18
c000c9f7:	68 a8 e8 01 c0       	push   0xc001e8a8
c000c9fc:	e8 a6 38 00 00       	call   c00102a7 <KePanic(char const*)>
c000ca01:	83 c8 ff             	or     eax,0xffffffff
c000ca04:	83 c4 1c             	add    esp,0x1c
c000ca07:	c3                   	ret    

c000ca08 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c000ca08:	53                   	push   ebx
c000ca09:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000ca0d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ca11:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ca15:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c000ca1b:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c000ca21:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000ca27:	77 10                	ja     c000ca39 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c000ca29:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c000ca2f:	89 d3                	mov    ebx,edx
c000ca31:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c000ca37:	72 05                	jb     c000ca3e <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c000ca39:	83 c8 ff             	or     eax,0xffffffff
c000ca3c:	89 c2                	mov    edx,eax
c000ca3e:	5b                   	pop    ebx
c000ca3f:	c3                   	ret    

c000ca40 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c000ca40:	56                   	push   esi
c000ca41:	83 c8 ff             	or     eax,0xffffffff
c000ca44:	53                   	push   ebx
c000ca45:	89 c2                	mov    edx,eax
c000ca47:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000ca4b:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000ca4f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ca53:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000ca59:	77 27                	ja     c000ca82 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000ca5b:	89 d8                	mov    eax,ebx
c000ca5d:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c000ca63:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c000ca69:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ca6e:	89 c2                	mov    edx,eax
c000ca70:	73 10                	jae    c000ca82 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000ca72:	89 c8                	mov    eax,ecx
c000ca74:	89 da                	mov    edx,ebx
c000ca76:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c000ca7c:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c000ca82:	5b                   	pop    ebx
c000ca83:	5e                   	pop    esi
c000ca84:	c3                   	ret    
c000ca85:	90                   	nop

c000ca86 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c000ca86:	83 ec 1c             	sub    esp,0x1c
c000ca89:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ca8d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ca91:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ca95:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ca99:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ca9d:	89 04 24             	mov    DWORD PTR [esp],eax
c000caa0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000caa4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000caa8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000caac:	83 ec 08             	sub    esp,0x8
c000caaf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cab3:	50                   	push   eax
c000cab4:	e8 bb f0 ff ff       	call   c000bb74 <Device::Device(char const*)>
c000cab9:	83 c4 10             	add    esp,0x10
c000cabc:	ba f4 e8 01 c0       	mov    edx,0xc001e8f4
c000cac1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cac5:	89 10                	mov    DWORD PTR [eax],edx
c000cac7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cacb:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000cad2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cad6:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000cadd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cae1:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c000caeb:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000caef:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000caf3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000caf7:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c000cafd:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c000cb03:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000cb07:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000cb0a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000cb0e:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c000cb14:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c000cb1a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cb1e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000cb22:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c000cb28:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cb2c:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c000cb36:	90                   	nop
c000cb37:	83 c4 1c             	add    esp,0x1c
c000cb3a:	c3                   	ret    
c000cb3b:	90                   	nop

c000cb3c <LogicalDisk::assignDriveLetter()>:
c000cb3c:	55                   	push   ebp
c000cb3d:	57                   	push   edi
c000cb3e:	56                   	push   esi
c000cb3f:	53                   	push   ebx
c000cb40:	83 ec 14             	sub    esp,0x14
c000cb43:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000cb47:	8b 3d 00 54 02 c0    	mov    edi,DWORD PTR ds:0xc0025400
c000cb4d:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c000cb53:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000cb57:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c000cb5d:	8b 3d 04 54 02 c0    	mov    edi,DWORD PTR ds:0xc0025404
c000cb63:	3c 01                	cmp    al,0x1
c000cb65:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000cb69:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000cb6d:	19 c0                	sbb    eax,eax
c000cb6f:	83 e0 02             	and    eax,0x2
c000cb72:	83 c0 41             	add    eax,0x41
c000cb75:	0f be e8             	movsx  ebp,al
c000cb78:	3c 43                	cmp    al,0x43
c000cb7a:	75 10                	jne    c000cb8c <LogicalDisk::assignDriveLetter()+0x50>
c000cb7c:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c000cb83:	75 5d                	jne    c000cbe2 <LogicalDisk::assignDriveLetter()+0xa6>
c000cb85:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c000cb8a:	75 56                	jne    c000cbe2 <LogicalDisk::assignDriveLetter()+0xa6>
c000cb8c:	8d 75 bf             	lea    esi,[ebp-0x41]
c000cb8f:	ba 01 00 00 00       	mov    edx,0x1
c000cb94:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000cb98:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c000cb9c:	d3 e2                	shl    edx,cl
c000cb9e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000cba2:	89 d7                	mov    edi,edx
c000cba4:	89 d6                	mov    esi,edx
c000cba6:	c1 ff 1f             	sar    edi,0x1f
c000cba9:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c000cbad:	21 f9                	and    ecx,edi
c000cbaf:	09 d1                	or     ecx,edx
c000cbb1:	75 2f                	jne    c000cbe2 <LogicalDisk::assignDriveLetter()+0xa6>
c000cbb3:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c000cbb7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cbbb:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c000cbc1:	09 f2                	or     edx,esi
c000cbc3:	89 15 00 54 02 c0    	mov    DWORD PTR ds:0xc0025400,edx
c000cbc9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cbcd:	09 fa                	or     edx,edi
c000cbcf:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000cbd3:	89 15 04 54 02 c0    	mov    DWORD PTR ds:0xc0025404,edx
c000cbd9:	89 1c bd 20 54 02 c0 	mov    DWORD PTR [edi*4-0x3ffdabe0],ebx
c000cbe0:	eb 08                	jmp    c000cbea <LogicalDisk::assignDriveLetter()+0xae>
c000cbe2:	45                   	inc    ebp
c000cbe3:	40                   	inc    eax
c000cbe4:	3c 5b                	cmp    al,0x5b
c000cbe6:	75 90                	jne    c000cb78 <LogicalDisk::assignDriveLetter()+0x3c>
c000cbe8:	31 c0                	xor    eax,eax
c000cbea:	83 c4 14             	add    esp,0x14
c000cbed:	5b                   	pop    ebx
c000cbee:	5e                   	pop    esi
c000cbef:	5f                   	pop    edi
c000cbf0:	5d                   	pop    ebp
c000cbf1:	c3                   	ret    

c000cbf2 <LogicalDisk::mount()>:
c000cbf2:	56                   	push   esi
c000cbf3:	53                   	push   ebx
c000cbf4:	53                   	push   ebx
c000cbf5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000cbf9:	8b 1d b4 2f 02 c0    	mov    ebx,DWORD PTR ds:0xc0022fb4
c000cbff:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c000cc09:	85 db                	test   ebx,ebx
c000cc0b:	74 27                	je     c000cc34 <LogicalDisk::mount()+0x42>
c000cc0d:	51                   	push   ecx
c000cc0e:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000cc15:	8b 13                	mov    edx,DWORD PTR [ebx]
c000cc17:	83 e8 41             	sub    eax,0x41
c000cc1a:	50                   	push   eax
c000cc1b:	56                   	push   esi
c000cc1c:	53                   	push   ebx
c000cc1d:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000cc20:	83 c4 10             	add    esp,0x10
c000cc23:	84 c0                	test   al,al
c000cc25:	74 08                	je     c000cc2f <LogicalDisk::mount()+0x3d>
c000cc27:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c000cc2d:	eb 07                	jmp    c000cc36 <LogicalDisk::mount()+0x44>
c000cc2f:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000cc32:	eb d5                	jmp    c000cc09 <LogicalDisk::mount()+0x17>
c000cc34:	31 c0                	xor    eax,eax
c000cc36:	5a                   	pop    edx
c000cc37:	5b                   	pop    ebx
c000cc38:	5e                   	pop    esi
c000cc39:	c3                   	ret    

c000cc3a <LogicalDisk::unmount()>:
c000cc3a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cc3e:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c000cc48:	c3                   	ret    
c000cc49:	90                   	nop

c000cc4a <LogicalDisk::eject()>:
c000cc4a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cc4e:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000cc54:	8b 10                	mov    edx,DWORD PTR [eax]
c000cc56:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000cc5a:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000cc5d:	90                   	nop

c000cc5e <LogicalDisk::unassignDriveLetter()>:
c000cc5e:	57                   	push   edi
c000cc5f:	56                   	push   esi
c000cc60:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cc64:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c000cc6b:	84 c9                	test   cl,cl
c000cc6d:	75 0f                	jne    c000cc7e <LogicalDisk::unassignDriveLetter()+0x20>
c000cc6f:	c7 44 24 0c cc e8 01 c0 	mov    DWORD PTR [esp+0xc],0xc001e8cc
c000cc77:	5e                   	pop    esi
c000cc78:	5f                   	pop    edi
c000cc79:	e9 29 36 00 00       	jmp    c00102a7 <KePanic(char const*)>
c000cc7e:	83 e9 41             	sub    ecx,0x41
c000cc81:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000cc88:	b8 01 00 00 00       	mov    eax,0x1
c000cc8d:	c7 04 8d 20 54 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffdabe0],0x0
c000cc98:	d3 e0                	shl    eax,cl
c000cc9a:	89 c7                	mov    edi,eax
c000cc9c:	f7 d0                	not    eax
c000cc9e:	c1 ff 1f             	sar    edi,0x1f
c000cca1:	21 05 00 54 02 c0    	and    DWORD PTR ds:0xc0025400,eax
c000cca7:	89 fe                	mov    esi,edi
c000cca9:	f7 d6                	not    esi
c000ccab:	21 35 04 54 02 c0    	and    DWORD PTR ds:0xc0025404,esi
c000ccb1:	5e                   	pop    esi
c000ccb2:	5f                   	pop    edi
c000ccb3:	c3                   	ret    

c000ccb4 <LogicalDisk::read(unsigned long long, int, void*)>:
c000ccb4:	57                   	push   edi
c000ccb5:	56                   	push   esi
c000ccb6:	53                   	push   ebx
c000ccb7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000ccbb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ccbf:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ccc3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ccc7:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000cccd:	77 41                	ja     c000cd10 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000cccf:	99                   	cdq    
c000ccd0:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000ccd6:	01 c8                	add    eax,ecx
c000ccd8:	11 da                	adc    edx,ebx
c000ccda:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000cce0:	19 d7                	sbb    edi,edx
c000cce2:	72 33                	jb     c000cd17 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000cce4:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000ccea:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000ccf0:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000ccf4:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000ccf8:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000ccfe:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000cd04:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cd08:	5b                   	pop    ebx
c000cd09:	5e                   	pop    esi
c000cd0a:	5f                   	pop    edi
c000cd0b:	e9 56 0a 00 00       	jmp    c000d766 <VCache::read(unsigned long long, int, void*)>
c000cd10:	b8 05 00 00 00       	mov    eax,0x5
c000cd15:	eb 05                	jmp    c000cd1c <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000cd17:	b8 07 00 00 00       	mov    eax,0x7
c000cd1c:	5b                   	pop    ebx
c000cd1d:	5e                   	pop    esi
c000cd1e:	5f                   	pop    edi
c000cd1f:	c3                   	ret    

c000cd20 <LogicalDisk::write(unsigned long long, int, void*)>:
c000cd20:	57                   	push   edi
c000cd21:	56                   	push   esi
c000cd22:	53                   	push   ebx
c000cd23:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000cd27:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000cd2b:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000cd2f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000cd33:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000cd39:	77 41                	ja     c000cd7c <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000cd3b:	99                   	cdq    
c000cd3c:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000cd42:	01 c8                	add    eax,ecx
c000cd44:	11 da                	adc    edx,ebx
c000cd46:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000cd4c:	19 d7                	sbb    edi,edx
c000cd4e:	72 33                	jb     c000cd83 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000cd50:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000cd56:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000cd5c:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000cd60:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000cd64:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000cd6a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000cd70:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cd74:	5b                   	pop    ebx
c000cd75:	5e                   	pop    esi
c000cd76:	5f                   	pop    edi
c000cd77:	e9 d4 08 00 00       	jmp    c000d650 <VCache::write(unsigned long long, int, void*)>
c000cd7c:	b8 05 00 00 00       	mov    eax,0x5
c000cd81:	eb 05                	jmp    c000cd88 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000cd83:	b8 07 00 00 00       	mov    eax,0x7
c000cd88:	5b                   	pop    ebx
c000cd89:	5e                   	pop    esi
c000cd8a:	5f                   	pop    edi
c000cd8b:	c3                   	ret    

c000cd8c <Mouse::Mouse(char const*)>:
c000cd8c:	83 ec 0c             	sub    esp,0xc
c000cd8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd93:	83 ec 08             	sub    esp,0x8
c000cd96:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd9a:	50                   	push   eax
c000cd9b:	e8 d4 ed ff ff       	call   c000bb74 <Device::Device(char const*)>
c000cda0:	83 c4 10             	add    esp,0x10
c000cda3:	ba 20 e9 01 c0       	mov    edx,0xc001e920
c000cda8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cdac:	89 10                	mov    DWORD PTR [eax],edx
c000cdae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cdb2:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000cdbc:	90                   	nop
c000cdbd:	83 c4 0c             	add    esp,0xc
c000cdc0:	c3                   	ret    
c000cdc1:	90                   	nop
c000cdc2:	66 90                	xchg   ax,ax

c000cdc4 <Mouse::~Mouse()>:
c000cdc4:	83 ec 0c             	sub    esp,0xc
c000cdc7:	ba 20 e9 01 c0       	mov    edx,0xc001e920
c000cdcc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cdd0:	89 10                	mov    DWORD PTR [eax],edx
c000cdd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cdd6:	83 ec 0c             	sub    esp,0xc
c000cdd9:	50                   	push   eax
c000cdda:	e8 ff ea ff ff       	call   c000b8de <Device::~Device()>
c000cddf:	83 c4 10             	add    esp,0x10
c000cde2:	90                   	nop
c000cde3:	83 c4 0c             	add    esp,0xc
c000cde6:	c3                   	ret    
c000cde7:	90                   	nop

c000cde8 <Mouse::~Mouse()>:
c000cde8:	83 ec 0c             	sub    esp,0xc
c000cdeb:	83 ec 0c             	sub    esp,0xc
c000cdee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cdf2:	e8 cd ff ff ff       	call   c000cdc4 <Mouse::~Mouse()>
c000cdf7:	83 c4 10             	add    esp,0x10
c000cdfa:	83 ec 08             	sub    esp,0x8
c000cdfd:	68 58 01 00 00       	push   0x158
c000ce02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce06:	e8 51 d6 ff ff       	call   c000a45c <operator delete(void*, unsigned long)>
c000ce0b:	83 c4 10             	add    esp,0x10
c000ce0e:	83 c4 0c             	add    esp,0xc
c000ce11:	c3                   	ret    

c000ce12 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000ce12:	55                   	push   ebp
c000ce13:	57                   	push   edi
c000ce14:	56                   	push   esi
c000ce15:	53                   	push   ebx
c000ce16:	81 ec 28 01 00 00    	sub    esp,0x128
c000ce1c:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c000ce23:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c000ce2a:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c000ce31:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c000ce38:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000ce3c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000ce40:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000ce47:	e8 24 ee ff ff       	call   c000bc70 <Device::getName()>
c000ce4c:	5a                   	pop    edx
c000ce4d:	59                   	pop    ecx
c000ce4e:	50                   	push   eax
c000ce4f:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000ce53:	55                   	push   ebp
c000ce54:	e8 a7 37 ff ff       	call   c0000600 <strcpy>
c000ce59:	5b                   	pop    ebx
c000ce5a:	58                   	pop    eax
c000ce5b:	68 44 e9 01 c0       	push   0xc001e944
c000ce60:	55                   	push   ebp
c000ce61:	e8 5a 39 ff ff       	call   c00007c0 <strcat>
c000ce66:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c000ce6d:	e8 47 a9 ff ff       	call   c00077b9 <malloc>
c000ce72:	83 c4 0c             	add    esp,0xc
c000ce75:	89 c3                	mov    ebx,eax
c000ce77:	57                   	push   edi
c000ce78:	56                   	push   esi
c000ce79:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ce7d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ce81:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000ce88:	55                   	push   ebp
c000ce89:	50                   	push   eax
c000ce8a:	e8 f7 fb ff ff       	call   c000ca86 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000ce8f:	83 c4 14             	add    esp,0x14
c000ce92:	53                   	push   ebx
c000ce93:	e8 a4 fc ff ff       	call   c000cb3c <LogicalDisk::assignDriveLetter()>
c000ce98:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ce9b:	e8 52 fd ff ff       	call   c000cbf2 <LogicalDisk::mount()>
c000cea0:	58                   	pop    eax
c000cea1:	5a                   	pop    edx
c000cea2:	53                   	push   ebx
c000cea3:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000ceaa:	e8 2d eb ff ff       	call   c000b9dc <Device::addChild(Device*)>
c000ceaf:	81 c4 2c 01 00 00    	add    esp,0x12c
c000ceb5:	5b                   	pop    ebx
c000ceb6:	5e                   	pop    esi
c000ceb7:	5f                   	pop    edi
c000ceb8:	5d                   	pop    ebp
c000ceb9:	c3                   	ret    

c000ceba <createPartitionsForDisk(PhysicalDisk*)>:
c000ceba:	55                   	push   ebp
c000cebb:	57                   	push   edi
c000cebc:	56                   	push   esi
c000cebd:	53                   	push   ebx
c000cebe:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000cec4:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000cecb:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000ced1:	3d 00 02 00 00       	cmp    eax,0x200
c000ced6:	74 27                	je     c000ceff <createPartitionsForDisk(PhysicalDisk*)+0x45>
c000ced8:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c000cede:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c000cee4:	83 ec 10             	sub    esp,0x10
c000cee7:	0f a4 f7 0a          	shld   edi,esi,0xa
c000ceeb:	99                   	cdq    
c000ceec:	c1 e6 0a             	shl    esi,0xa
c000ceef:	52                   	push   edx
c000cef0:	89 fd                	mov    ebp,edi
c000cef2:	50                   	push   eax
c000cef3:	55                   	push   ebp
c000cef4:	56                   	push   esi
c000cef5:	e8 e6 f9 00 00       	call   c001c8e0 <__udivdi3>
c000cefa:	e9 b1 00 00 00       	jmp    c000cfb0 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c000ceff:	83 ec 0c             	sub    esp,0xc
c000cf02:	8b 03                	mov    eax,DWORD PTR [ebx]
c000cf04:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c000cf08:	56                   	push   esi
c000cf09:	6a 01                	push   0x1
c000cf0b:	6a 00                	push   0x0
c000cf0d:	6a 00                	push   0x0
c000cf0f:	53                   	push   ebx
c000cf10:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000cf13:	83 c4 20             	add    esp,0x20
c000cf16:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000cf1e:	75 0a                	jne    c000cf2a <createPartitionsForDisk(PhysicalDisk*)+0x70>
c000cf20:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000cf28:	74 2c                	je     c000cf56 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c000cf2a:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000cf30:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000cf36:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000cf3c:	83 ec 10             	sub    esp,0x10
c000cf3f:	0f a4 c2 0a          	shld   edx,eax,0xa
c000cf43:	89 f7                	mov    edi,esi
c000cf45:	c1 e0 0a             	shl    eax,0xa
c000cf48:	c1 ff 1f             	sar    edi,0x1f
c000cf4b:	57                   	push   edi
c000cf4c:	56                   	push   esi
c000cf4d:	52                   	push   edx
c000cf4e:	50                   	push   eax
c000cf4f:	e8 8c f9 00 00       	call   c001c8e0 <__udivdi3>
c000cf54:	eb 5a                	jmp    c000cfb0 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c000cf56:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c000cf5d:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c000cf64:	83 e1 7f             	and    ecx,0x7f
c000cf67:	83 e0 7f             	and    eax,0x7f
c000cf6a:	01 c1                	add    ecx,eax
c000cf6c:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c000cf73:	83 e0 7f             	and    eax,0x7f
c000cf76:	01 c1                	add    ecx,eax
c000cf78:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000cf7f:	83 e0 7f             	and    eax,0x7f
c000cf82:	00 c1                	add    cl,al
c000cf84:	74 41                	je     c000cfc7 <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c000cf86:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000cf8c:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000cf92:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000cf98:	83 ec 10             	sub    esp,0x10
c000cf9b:	0f a4 c2 0a          	shld   edx,eax,0xa
c000cf9f:	89 f7                	mov    edi,esi
c000cfa1:	c1 e0 0a             	shl    eax,0xa
c000cfa4:	c1 ff 1f             	sar    edi,0x1f
c000cfa7:	57                   	push   edi
c000cfa8:	56                   	push   esi
c000cfa9:	52                   	push   edx
c000cfaa:	50                   	push   eax
c000cfab:	e8 30 f9 00 00       	call   c001c8e0 <__udivdi3>
c000cfb0:	83 c4 14             	add    esp,0x14
c000cfb3:	52                   	push   edx
c000cfb4:	50                   	push   eax
c000cfb5:	6a 00                	push   0x0
c000cfb7:	6a 00                	push   0x0
c000cfb9:	53                   	push   ebx
c000cfba:	e8 53 fe ff ff       	call   c000ce12 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000cfbf:	83 c4 20             	add    esp,0x20
c000cfc2:	e9 79 01 00 00       	jmp    c000d140 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c000cfc7:	89 f0                	mov    eax,esi
c000cfc9:	31 f6                	xor    esi,esi
c000cfcb:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000cfd2:	75 02                	jne    c000cfd6 <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c000cfd4:	89 f1                	mov    ecx,esi
c000cfd6:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c000cfdd:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c000cfe4:	c1 e2 08             	shl    edx,0x8
c000cfe7:	c1 e7 10             	shl    edi,0x10
c000cfea:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c000cff2:	09 fa                	or     edx,edi
c000cff4:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c000cffc:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c000d003:	83 c0 10             	add    eax,0x10
c000d006:	09 fa                	or     edx,edi
c000d008:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c000d00f:	c1 e7 18             	shl    edi,0x18
c000d012:	09 fa                	or     edx,edi
c000d014:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c000d01b:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c000d01f:	c1 e7 10             	shl    edi,0x10
c000d022:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c000d029:	c1 e2 08             	shl    edx,0x8
c000d02c:	09 fa                	or     edx,edi
c000d02e:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c000d035:	09 fa                	or     edx,edi
c000d037:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c000d03e:	c1 e7 18             	shl    edi,0x18
c000d041:	09 fa                	or     edx,edi
c000d043:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c000d047:	46                   	inc    esi
c000d048:	83 fe 04             	cmp    esi,0x4
c000d04b:	0f 85 7a ff ff ff    	jne    c000cfcb <createPartitionsForDisk(PhysicalDisk*)+0x111>
c000d051:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d055:	83 f0 01             	xor    eax,0x1
c000d058:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000d05c:	75 57                	jne    c000d0b5 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000d05e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d062:	83 f0 01             	xor    eax,0x1
c000d065:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000d069:	75 4a                	jne    c000d0b5 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000d06b:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c000d06f:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000d077:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000d07f:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000d085:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000d08b:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000d091:	0f a4 c2 0a          	shld   edx,eax,0xa
c000d095:	89 f7                	mov    edi,esi
c000d097:	c1 e0 0a             	shl    eax,0xa
c000d09a:	c1 ff 1f             	sar    edi,0x1f
c000d09d:	57                   	push   edi
c000d09e:	56                   	push   esi
c000d09f:	52                   	push   edx
c000d0a0:	50                   	push   eax
c000d0a1:	e8 3a f8 00 00       	call   c001c8e0 <__udivdi3>
c000d0a6:	83 c4 10             	add    esp,0x10
c000d0a9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d0ad:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d0b1:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000d0b5:	84 c9                	test   cl,cl
c000d0b7:	74 53                	je     c000d10c <createPartitionsForDisk(PhysicalDisk*)+0x252>
c000d0b9:	0f b6 c9             	movzx  ecx,cl
c000d0bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d0c0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d0c4:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000d0c8:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000d0cc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d0d0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d0d4:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c000d0d8:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c000d0dc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d0e0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d0e4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d0e8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d0ec:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c000d0f0:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c000d0f4:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c000d0f8:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c000d0fc:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d100:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d104:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c000d108:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c000d10c:	31 ed                	xor    ebp,ebp
c000d10e:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000d112:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000d116:	89 f8                	mov    eax,edi
c000d118:	09 f0                	or     eax,esi
c000d11a:	74 1e                	je     c000d13a <createPartitionsForDisk(PhysicalDisk*)+0x280>
c000d11c:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000d120:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000d124:	89 d1                	mov    ecx,edx
c000d126:	09 c1                	or     ecx,eax
c000d128:	74 10                	je     c000d13a <createPartitionsForDisk(PhysicalDisk*)+0x280>
c000d12a:	83 ec 0c             	sub    esp,0xc
c000d12d:	57                   	push   edi
c000d12e:	56                   	push   esi
c000d12f:	52                   	push   edx
c000d130:	50                   	push   eax
c000d131:	53                   	push   ebx
c000d132:	e8 db fc ff ff       	call   c000ce12 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000d137:	83 c4 20             	add    esp,0x20
c000d13a:	45                   	inc    ebp
c000d13b:	83 fd 04             	cmp    ebp,0x4
c000d13e:	75 ce                	jne    c000d10e <createPartitionsForDisk(PhysicalDisk*)+0x254>
c000d140:	81 c4 5c 02 00 00    	add    esp,0x25c
c000d146:	5b                   	pop    ebx
c000d147:	5e                   	pop    esi
c000d148:	5f                   	pop    edi
c000d149:	5d                   	pop    ebp
c000d14a:	c3                   	ret    
c000d14b:	90                   	nop

c000d14c <Serial::Serial(char const*)>:
c000d14c:	83 ec 0c             	sub    esp,0xc
c000d14f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d153:	83 ec 08             	sub    esp,0x8
c000d156:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d15a:	50                   	push   eax
c000d15b:	e8 14 ea ff ff       	call   c000bb74 <Device::Device(char const*)>
c000d160:	83 c4 10             	add    esp,0x10
c000d163:	ba 58 e9 01 c0       	mov    edx,0xc001e958
c000d168:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d16c:	89 10                	mov    DWORD PTR [eax],edx
c000d16e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d172:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000d17c:	90                   	nop
c000d17d:	83 c4 0c             	add    esp,0xc
c000d180:	c3                   	ret    
c000d181:	90                   	nop
c000d182:	66 90                	xchg   ax,ax

c000d184 <Serial::~Serial()>:
c000d184:	83 ec 0c             	sub    esp,0xc
c000d187:	ba 58 e9 01 c0       	mov    edx,0xc001e958
c000d18c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d190:	89 10                	mov    DWORD PTR [eax],edx
c000d192:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d196:	83 ec 0c             	sub    esp,0xc
c000d199:	50                   	push   eax
c000d19a:	e8 3f e7 ff ff       	call   c000b8de <Device::~Device()>
c000d19f:	83 c4 10             	add    esp,0x10
c000d1a2:	90                   	nop
c000d1a3:	83 c4 0c             	add    esp,0xc
c000d1a6:	c3                   	ret    
c000d1a7:	90                   	nop

c000d1a8 <Serial::~Serial()>:
c000d1a8:	83 ec 0c             	sub    esp,0xc
c000d1ab:	83 ec 0c             	sub    esp,0xc
c000d1ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d1b2:	e8 cd ff ff ff       	call   c000d184 <Serial::~Serial()>
c000d1b7:	83 c4 10             	add    esp,0x10
c000d1ba:	83 ec 08             	sub    esp,0x8
c000d1bd:	68 58 01 00 00       	push   0x158
c000d1c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d1c6:	e8 91 d2 ff ff       	call   c000a45c <operator delete(void*, unsigned long)>
c000d1cb:	83 c4 10             	add    esp,0x10
c000d1ce:	83 c4 0c             	add    esp,0xc
c000d1d1:	c3                   	ret    
c000d1d2:	66 90                	xchg   ax,ax

c000d1d4 <Timer::Timer(char const*)>:
c000d1d4:	83 ec 0c             	sub    esp,0xc
c000d1d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1db:	83 ec 08             	sub    esp,0x8
c000d1de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d1e2:	50                   	push   eax
c000d1e3:	e8 8c e9 ff ff       	call   c000bb74 <Device::Device(char const*)>
c000d1e8:	83 c4 10             	add    esp,0x10
c000d1eb:	ba 9c e9 01 c0       	mov    edx,0xc001e99c
c000d1f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1f4:	89 10                	mov    DWORD PTR [eax],edx
c000d1f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1fa:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c000d204:	90                   	nop
c000d205:	83 c4 0c             	add    esp,0xc
c000d208:	c3                   	ret    
c000d209:	90                   	nop
c000d20a:	66 90                	xchg   ax,ax

c000d20c <Timer::~Timer()>:
c000d20c:	83 ec 0c             	sub    esp,0xc
c000d20f:	ba 9c e9 01 c0       	mov    edx,0xc001e99c
c000d214:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d218:	89 10                	mov    DWORD PTR [eax],edx
c000d21a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d21e:	83 ec 0c             	sub    esp,0xc
c000d221:	50                   	push   eax
c000d222:	e8 b7 e6 ff ff       	call   c000b8de <Device::~Device()>
c000d227:	83 c4 10             	add    esp,0x10
c000d22a:	90                   	nop
c000d22b:	83 c4 0c             	add    esp,0xc
c000d22e:	c3                   	ret    
c000d22f:	90                   	nop

c000d230 <Timer::~Timer()>:
c000d230:	83 ec 0c             	sub    esp,0xc
c000d233:	83 ec 0c             	sub    esp,0xc
c000d236:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d23a:	e8 cd ff ff ff       	call   c000d20c <Timer::~Timer()>
c000d23f:	83 c4 10             	add    esp,0x10
c000d242:	83 ec 08             	sub    esp,0x8
c000d245:	68 5c 01 00 00       	push   0x15c
c000d24a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d24e:	e8 09 d2 ff ff       	call   c000a45c <operator delete(void*, unsigned long)>
c000d253:	83 c4 10             	add    esp,0x10
c000d256:	83 c4 0c             	add    esp,0xc
c000d259:	c3                   	ret    

c000d25a <Timer::read()>:
c000d25a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d25e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000d264:	c3                   	ret    

c000d265 <setupTimer(int)>:
c000d265:	53                   	push   ebx
c000d266:	83 ec 14             	sub    esp,0x14
c000d269:	68 5c 01 00 00       	push   0x15c
c000d26e:	e8 46 a5 ff ff       	call   c00077b9 <malloc>
c000d273:	89 04 24             	mov    DWORD PTR [esp],eax
c000d276:	89 c3                	mov    ebx,eax
c000d278:	e8 73 ef 00 00       	call   c001c1f0 <PIT::PIT()>
c000d27d:	58                   	pop    eax
c000d27e:	5a                   	pop    edx
c000d27f:	53                   	push   ebx
c000d280:	ff 35 b8 2e 02 c0    	push   DWORD PTR ds:0xc0022eb8
c000d286:	e8 51 e7 ff ff       	call   c000b9dc <Device::addChild(Device*)>
c000d28b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d28d:	6a 00                	push   0x0
c000d28f:	6a 00                	push   0x0
c000d291:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d295:	53                   	push   ebx
c000d296:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000d299:	89 d8                	mov    eax,ebx
c000d29b:	83 c4 28             	add    esp,0x28
c000d29e:	5b                   	pop    ebx
c000d29f:	c3                   	ret    

c000d2a0 <timerHandler(unsigned int)>:
c000d2a0:	56                   	push   esi
c000d2a1:	53                   	push   ebx
c000d2a2:	51                   	push   ecx
c000d2a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d2a7:	01 05 8c 54 02 c0    	add    DWORD PTR ds:0xc002548c,eax
c000d2ad:	80 3d bd 2e 02 c0 00 	cmp    BYTE PTR ds:0xc0022ebd,0x0
c000d2b4:	0f 84 4a 01 00 00    	je     c000d404 <timerHandler(unsigned int)+0x164>
c000d2ba:	fa                   	cli    
c000d2bb:	ff 05 68 61 02 c0    	inc    DWORD PTR ds:0xc0026168
c000d2c1:	83 ec 0c             	sub    esp,0xc
c000d2c4:	ff 05 64 61 02 c0    	inc    DWORD PTR ds:0xc0026164
c000d2ca:	68 78 61 02 c0       	push   0xc0026178
c000d2cf:	e8 dc fb 00 00       	call   c001ceb0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000d2d4:	83 c4 10             	add    esp,0x10
c000d2d7:	84 c0                	test   al,al
c000d2d9:	0f 85 a1 00 00 00    	jne    c000d380 <timerHandler(unsigned int)+0xe0>
c000d2df:	83 ec 0c             	sub    esp,0xc
c000d2e2:	68 78 61 02 c0       	push   0xc0026178
c000d2e7:	e8 e0 fb 00 00       	call   c001cecc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d2ec:	83 c4 10             	add    esp,0x10
c000d2ef:	89 c6                	mov    esi,eax
c000d2f1:	8d 76 00             	lea    esi,[esi+0x0]
c000d2f4:	83 ec 0c             	sub    esp,0xc
c000d2f7:	68 78 61 02 c0       	push   0xc0026178
c000d2fc:	e8 cb fb 00 00       	call   c001cecc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d301:	c7 04 24 78 61 02 c0 	mov    DWORD PTR [esp],0xc0026178
c000d308:	89 c3                	mov    ebx,eax
c000d30a:	e8 c5 fb 00 00       	call   c001ced4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000d30f:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000d312:	83 c4 10             	add    esp,0x10
c000d315:	3b 05 8c 54 02 c0    	cmp    eax,DWORD PTR ds:0xc002548c
c000d31b:	77 23                	ja     c000d340 <timerHandler(unsigned int)+0xa0>
c000d31d:	83 ec 0c             	sub    esp,0xc
c000d320:	53                   	push   ebx
c000d321:	e8 62 69 00 00       	call   c0013c88 <unblockTask(ThreadControlBlock*)>
c000d326:	83 c4 10             	add    esp,0x10
c000d329:	39 de                	cmp    esi,ebx
c000d32b:	75 27                	jne    c000d354 <timerHandler(unsigned int)+0xb4>
c000d32d:	83 ec 0c             	sub    esp,0xc
c000d330:	68 78 61 02 c0       	push   0xc0026178
c000d335:	e8 92 fb 00 00       	call   c001cecc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d33a:	89 c6                	mov    esi,eax
c000d33c:	eb 12                	jmp    c000d350 <timerHandler(unsigned int)+0xb0>
c000d33e:	66 90                	xchg   ax,ax
c000d340:	52                   	push   edx
c000d341:	52                   	push   edx
c000d342:	53                   	push   ebx
c000d343:	68 78 61 02 c0       	push   0xc0026178
c000d348:	e8 3f fc 00 00       	call   c001cf8c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000d34d:	8d 76 00             	lea    esi,[esi+0x0]
c000d350:	83 c4 10             	add    esp,0x10
c000d353:	90                   	nop
c000d354:	83 ec 0c             	sub    esp,0xc
c000d357:	68 78 61 02 c0       	push   0xc0026178
c000d35c:	e8 4f fb 00 00       	call   c001ceb0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000d361:	83 c4 10             	add    esp,0x10
c000d364:	84 c0                	test   al,al
c000d366:	75 18                	jne    c000d380 <timerHandler(unsigned int)+0xe0>
c000d368:	83 ec 0c             	sub    esp,0xc
c000d36b:	68 78 61 02 c0       	push   0xc0026178
c000d370:	e8 57 fb 00 00       	call   c001cecc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d375:	83 c4 10             	add    esp,0x10
c000d378:	39 f0                	cmp    eax,esi
c000d37a:	0f 85 74 ff ff ff    	jne    c000d2f4 <timerHandler(unsigned int)+0x54>
c000d380:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000d385:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c000d389:	74 41                	je     c000d3cc <timerHandler(unsigned int)+0x12c>
c000d38b:	80 3d bc 2e 02 c0 00 	cmp    BYTE PTR ds:0xc0022ebc,0x0
c000d392:	74 38                	je     c000d3cc <timerHandler(unsigned int)+0x12c>
c000d394:	fa                   	cli    
c000d395:	ff 05 68 61 02 c0    	inc    DWORD PTR ds:0xc0026168
c000d39b:	a1 8c 54 02 c0       	mov    eax,ds:0xc002548c
c000d3a0:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000d3a6:	29 42 34             	sub    DWORD PTR [edx+0x34],eax
c000d3a9:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000d3af:	3b 42 34             	cmp    eax,DWORD PTR [edx+0x34]
c000d3b2:	72 08                	jb     c000d3bc <timerHandler(unsigned int)+0x11c>
c000d3b4:	e8 0b 64 00 00       	call   c00137c4 <schedule()>
c000d3b9:	8d 76 00             	lea    esi,[esi+0x0]
c000d3bc:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c000d3c1:	48                   	dec    eax
c000d3c2:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c000d3c7:	75 03                	jne    c000d3cc <timerHandler(unsigned int)+0x12c>
c000d3c9:	fb                   	sti    
c000d3ca:	66 90                	xchg   ax,ax
c000d3cc:	a1 64 61 02 c0       	mov    eax,ds:0xc0026164
c000d3d1:	48                   	dec    eax
c000d3d2:	a3 64 61 02 c0       	mov    ds:0xc0026164,eax
c000d3d7:	75 1b                	jne    c000d3f4 <timerHandler(unsigned int)+0x154>
c000d3d9:	83 3d 60 61 02 c0 00 	cmp    DWORD PTR ds:0xc0026160,0x0
c000d3e0:	74 12                	je     c000d3f4 <timerHandler(unsigned int)+0x154>
c000d3e2:	c7 05 60 61 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026160,0x0
c000d3ec:	e8 d3 63 00 00       	call   c00137c4 <schedule()>
c000d3f1:	8d 76 00             	lea    esi,[esi+0x0]
c000d3f4:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c000d3f9:	48                   	dec    eax
c000d3fa:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c000d3ff:	75 03                	jne    c000d404 <timerHandler(unsigned int)+0x164>
c000d401:	fb                   	sti    
c000d402:	66 90                	xchg   ax,ax
c000d404:	58                   	pop    eax
c000d405:	5b                   	pop    ebx
c000d406:	5e                   	pop    esi
c000d407:	c3                   	ret    

c000d408 <VCache::VCache(PhysicalDisk*)>:
c000d408:	53                   	push   ebx
c000d409:	83 ec 18             	sub    esp,0x18
c000d40c:	ba cc e9 01 c0       	mov    edx,0xc001e9cc
c000d411:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d415:	89 10                	mov    DWORD PTR [eax],edx
c000d417:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d41b:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000d422:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d426:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000d42d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d431:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000d438:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000d43f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d443:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000d44a:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000d451:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d455:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000d45c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d460:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000d464:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d468:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000d46f:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000d476:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d47a:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000d47e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d482:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000d486:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d48a:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000d48e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d492:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000d499:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c000d4a1:	83 ec 0c             	sub    esp,0xc
c000d4a4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d4a8:	e8 0c a3 ff ff       	call   c00077b9 <malloc>
c000d4ad:	83 c4 10             	add    esp,0x10
c000d4b0:	89 c3                	mov    ebx,eax
c000d4b2:	83 ec 0c             	sub    esp,0xc
c000d4b5:	53                   	push   ebx
c000d4b6:	e8 d5 60 00 00       	call   c0013590 <Mutex::Mutex()>
c000d4bb:	83 c4 10             	add    esp,0x10
c000d4be:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d4c2:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000d4c5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d4c9:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000d4cd:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000d4d0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d4d4:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000d4db:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d4df:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000d4e5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d4e9:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000d4ec:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d4f0:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000d4f6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000d4fc:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000d500:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000d503:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000d506:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d50a:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000d50e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d512:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000d518:	05 00 02 00 00       	add    eax,0x200
c000d51d:	c1 e0 03             	shl    eax,0x3
c000d520:	83 ec 0c             	sub    esp,0xc
c000d523:	50                   	push   eax
c000d524:	e8 90 a2 ff ff       	call   c00077b9 <malloc>
c000d529:	83 c4 10             	add    esp,0x10
c000d52c:	89 c2                	mov    edx,eax
c000d52e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d532:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000d535:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d539:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000d540:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d544:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000d548:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d54c:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000d552:	89 d0                	mov    eax,edx
c000d554:	c1 e0 02             	shl    eax,0x2
c000d557:	01 d0                	add    eax,edx
c000d559:	c1 e0 04             	shl    eax,0x4
c000d55c:	83 ec 0c             	sub    esp,0xc
c000d55f:	50                   	push   eax
c000d560:	e8 54 a2 ff ff       	call   c00077b9 <malloc>
c000d565:	83 c4 10             	add    esp,0x10
c000d568:	89 c2                	mov    edx,eax
c000d56a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d56e:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000d571:	90                   	nop
c000d572:	83 c4 18             	add    esp,0x18
c000d575:	5b                   	pop    ebx
c000d576:	c3                   	ret    
c000d577:	90                   	nop

c000d578 <VCache::invalidateReadBuffer()>:
c000d578:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d57c:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000d582:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000d586:	c3                   	ret    
c000d587:	90                   	nop

c000d588 <VCache::writeWriteBuffer()>:
c000d588:	53                   	push   ebx
c000d589:	83 ec 08             	sub    esp,0x8
c000d58c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d590:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000d594:	74 1e                	je     c000d5b4 <VCache::writeWriteBuffer()+0x2c>
c000d596:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000d599:	83 ec 0c             	sub    esp,0xc
c000d59c:	8b 10                	mov    edx,DWORD PTR [eax]
c000d59e:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000d5a1:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000d5a4:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000d5a7:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d5aa:	50                   	push   eax
c000d5ab:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000d5ae:	83 c4 20             	add    esp,0x20
c000d5b1:	8d 76 00             	lea    esi,[esi+0x0]
c000d5b4:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000d5bb:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000d5c2:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000d5c6:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000d5cd:	83 c4 08             	add    esp,0x8
c000d5d0:	5b                   	pop    ebx
c000d5d1:	c3                   	ret    
c000d5d2:	66 90                	xchg   ax,ax

c000d5d4 <VCache::~VCache()>:
c000d5d4:	83 ec 0c             	sub    esp,0xc
c000d5d7:	ba cc e9 01 c0       	mov    edx,0xc001e9cc
c000d5dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d5e0:	89 10                	mov    DWORD PTR [eax],edx
c000d5e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d5e6:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c000d5e9:	84 c0                	test   al,al
c000d5eb:	74 0f                	je     c000d5fc <VCache::~VCache()+0x28>
c000d5ed:	83 ec 0c             	sub    esp,0xc
c000d5f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5f4:	e8 8f ff ff ff       	call   c000d588 <VCache::writeWriteBuffer()>
c000d5f9:	83 c4 10             	add    esp,0x10
c000d5fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d600:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000d603:	83 ec 0c             	sub    esp,0xc
c000d606:	50                   	push   eax
c000d607:	e8 bd a1 ff ff       	call   c00077c9 <free>
c000d60c:	83 c4 10             	add    esp,0x10
c000d60f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d613:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000d616:	83 ec 0c             	sub    esp,0xc
c000d619:	50                   	push   eax
c000d61a:	e8 aa a1 ff ff       	call   c00077c9 <free>
c000d61f:	83 c4 10             	add    esp,0x10
c000d622:	90                   	nop
c000d623:	83 c4 0c             	add    esp,0xc
c000d626:	c3                   	ret    
c000d627:	90                   	nop

c000d628 <VCache::~VCache()>:
c000d628:	83 ec 0c             	sub    esp,0xc
c000d62b:	83 ec 0c             	sub    esp,0xc
c000d62e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d632:	e8 9d ff ff ff       	call   c000d5d4 <VCache::~VCache()>
c000d637:	83 c4 10             	add    esp,0x10
c000d63a:	83 ec 08             	sub    esp,0x8
c000d63d:	6a 44                	push   0x44
c000d63f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d643:	e8 14 ce ff ff       	call   c000a45c <operator delete(void*, unsigned long)>
c000d648:	83 c4 10             	add    esp,0x10
c000d64b:	83 c4 0c             	add    esp,0xc
c000d64e:	c3                   	ret    
c000d64f:	90                   	nop

c000d650 <VCache::write(unsigned long long, int, void*)>:
c000d650:	55                   	push   ebp
c000d651:	57                   	push   edi
c000d652:	56                   	push   esi
c000d653:	53                   	push   ebx
c000d654:	83 ec 1c             	sub    esp,0x1c
c000d657:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000d65b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000d65f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d663:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000d667:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d66b:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000d66f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d673:	31 c0                	xor    eax,eax
c000d675:	8d 76 00             	lea    esi,[esi+0x0]
c000d678:	39 e8                	cmp    eax,ebp
c000d67a:	7d 18                	jge    c000d694 <VCache::write(unsigned long long, int, void*)+0x44>
c000d67c:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000d67f:	8b 8a 5c 01 00 00    	mov    ecx,DWORD PTR [edx+0x15c]
c000d685:	0f af c8             	imul   ecx,eax
c000d688:	89 ca                	mov    edx,ecx
c000d68a:	01 f2                	add    edx,esi
c000d68c:	8b 3a                	mov    edi,DWORD PTR [edx]
c000d68e:	40                   	inc    eax
c000d68f:	eb e7                	jmp    c000d678 <VCache::write(unsigned long long, int, void*)+0x28>
c000d691:	8d 76 00             	lea    esi,[esi+0x0]
c000d694:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000d698:	74 0a                	je     c000d6a4 <VCache::write(unsigned long long, int, void*)+0x54>
c000d69a:	53                   	push   ebx
c000d69b:	e8 d8 fe ff ff       	call   c000d578 <VCache::invalidateReadBuffer()>
c000d6a0:	58                   	pop    eax
c000d6a1:	8d 76 00             	lea    esi,[esi+0x0]
c000d6a4:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000d6a8:	74 5a                	je     c000d704 <VCache::write(unsigned long long, int, void*)+0xb4>
c000d6aa:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c000d6ad:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d6b1:	89 f8                	mov    eax,edi
c000d6b3:	99                   	cdq    
c000d6b4:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c000d6b7:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c000d6ba:	31 c1                	xor    ecx,eax
c000d6bc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d6c0:	31 d0                	xor    eax,edx
c000d6c2:	09 c1                	or     ecx,eax
c000d6c4:	75 32                	jne    c000d6f8 <VCache::write(unsigned long long, int, void*)+0xa8>
c000d6c6:	83 fd 01             	cmp    ebp,0x1
c000d6c9:	75 2d                	jne    c000d6f8 <VCache::write(unsigned long long, int, void*)+0xa8>
c000d6cb:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000d6ce:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000d6d4:	0f af f9             	imul   edi,ecx
c000d6d7:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c000d6da:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d6dc:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000d6df:	40                   	inc    eax
c000d6e0:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000d6e3:	83 f8 50             	cmp    eax,0x50
c000d6e6:	75 74                	jne    c000d75c <VCache::write(unsigned long long, int, void*)+0x10c>
c000d6e8:	83 ec 0c             	sub    esp,0xc
c000d6eb:	53                   	push   ebx
c000d6ec:	e8 97 fe ff ff       	call   c000d588 <VCache::writeWriteBuffer()>
c000d6f1:	83 c4 10             	add    esp,0x10
c000d6f4:	eb 66                	jmp    c000d75c <VCache::write(unsigned long long, int, void*)+0x10c>
c000d6f6:	66 90                	xchg   ax,ax
c000d6f8:	83 ec 0c             	sub    esp,0xc
c000d6fb:	53                   	push   ebx
c000d6fc:	e8 87 fe ff ff       	call   c000d588 <VCache::writeWriteBuffer()>
c000d701:	83 c4 10             	add    esp,0x10
c000d704:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000d707:	83 fd 4f             	cmp    ebp,0x4f
c000d70a:	7f 24                	jg     c000d730 <VCache::write(unsigned long long, int, void*)+0xe0>
c000d70c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d710:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c000d713:	89 53 1c             	mov    DWORD PTR [ebx+0x1c],edx
c000d716:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c000d71a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d71e:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000d721:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c000d724:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000d72a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d72c:	eb 2e                	jmp    c000d75c <VCache::write(unsigned long long, int, void*)+0x10c>
c000d72e:	66 90                	xchg   ax,ax
c000d730:	8b 10                	mov    edx,DWORD PTR [eax]
c000d732:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c000d736:	89 6c 24 3c          	mov    DWORD PTR [esp+0x3c],ebp
c000d73a:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000d73e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d742:	89 74 24 34          	mov    DWORD PTR [esp+0x34],esi
c000d746:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000d74a:	89 74 24 38          	mov    DWORD PTR [esp+0x38],esi
c000d74e:	8b 42 2c             	mov    eax,DWORD PTR [edx+0x2c]
c000d751:	83 c4 1c             	add    esp,0x1c
c000d754:	5b                   	pop    ebx
c000d755:	5e                   	pop    esi
c000d756:	5f                   	pop    edi
c000d757:	5d                   	pop    ebp
c000d758:	ff e0                	jmp    eax
c000d75a:	66 90                	xchg   ax,ax
c000d75c:	83 c4 1c             	add    esp,0x1c
c000d75f:	31 c0                	xor    eax,eax
c000d761:	5b                   	pop    ebx
c000d762:	5e                   	pop    esi
c000d763:	5f                   	pop    edi
c000d764:	5d                   	pop    ebp
c000d765:	c3                   	ret    

c000d766 <VCache::read(unsigned long long, int, void*)>:
c000d766:	55                   	push   ebp
c000d767:	57                   	push   edi
c000d768:	56                   	push   esi
c000d769:	53                   	push   ebx
c000d76a:	83 ec 1c             	sub    esp,0x1c
c000d76d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000d771:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d775:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000d779:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000d77d:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000d781:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000d785:	80 7f 2c 00          	cmp    BYTE PTR [edi+0x2c],0x0
c000d789:	74 0d                	je     c000d798 <VCache::read(unsigned long long, int, void*)+0x32>
c000d78b:	83 ec 0c             	sub    esp,0xc
c000d78e:	57                   	push   edi
c000d78f:	e8 f4 fd ff ff       	call   c000d588 <VCache::writeWriteBuffer()>
c000d794:	83 c4 10             	add    esp,0x10
c000d797:	90                   	nop
c000d798:	83 fd 01             	cmp    ebp,0x1
c000d79b:	0f 85 93 00 00 00    	jne    c000d834 <VCache::read(unsigned long long, int, void*)+0xce>
c000d7a1:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000d7a4:	89 04 24             	mov    DWORD PTR [esp],eax
c000d7a7:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c000d7ae:	0f 85 80 00 00 00    	jne    c000d834 <VCache::read(unsigned long long, int, void*)+0xce>
c000d7b4:	8b 6f 40             	mov    ebp,DWORD PTR [edi+0x40]
c000d7b7:	89 e9                	mov    ecx,ebp
c000d7b9:	f7 d9                	neg    ecx
c000d7bb:	89 c8                	mov    eax,ecx
c000d7bd:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000d7c1:	c1 f8 1f             	sar    eax,0x1f
c000d7c4:	21 d9                	and    ecx,ebx
c000d7c6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d7ca:	89 c8                	mov    eax,ecx
c000d7cc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000d7d0:	21 f1                	and    ecx,esi
c000d7d2:	80 7f 3c 00          	cmp    BYTE PTR [edi+0x3c],0x0
c000d7d6:	89 ca                	mov    edx,ecx
c000d7d8:	74 2e                	je     c000d808 <VCache::read(unsigned long long, int, void*)+0xa2>
c000d7da:	39 4f 34             	cmp    DWORD PTR [edi+0x34],ecx
c000d7dd:	75 29                	jne    c000d808 <VCache::read(unsigned long long, int, void*)+0xa2>
c000d7df:	39 47 30             	cmp    DWORD PTR [edi+0x30],eax
c000d7e2:	75 24                	jne    c000d808 <VCache::read(unsigned long long, int, void*)+0xa2>
c000d7e4:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000d7e7:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000d7ed:	8b 47 40             	mov    eax,DWORD PTR [edi+0x40]
c000d7f0:	8d 70 ff             	lea    esi,[eax-0x1]
c000d7f3:	21 f3                	and    ebx,esi
c000d7f5:	0f af d9             	imul   ebx,ecx
c000d7f8:	03 5f 38             	add    ebx,DWORD PTR [edi+0x38]
c000d7fb:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000d7ff:	89 de                	mov    esi,ebx
c000d801:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d803:	31 c0                	xor    eax,eax
c000d805:	eb 61                	jmp    c000d868 <VCache::read(unsigned long long, int, void*)+0x102>
c000d807:	90                   	nop
c000d808:	83 ec 0c             	sub    esp,0xc
c000d80b:	c6 47 3c 01          	mov    BYTE PTR [edi+0x3c],0x1
c000d80f:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000d813:	89 47 30             	mov    DWORD PTR [edi+0x30],eax
c000d816:	89 57 34             	mov    DWORD PTR [edi+0x34],edx
c000d819:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000d81b:	ff 77 38             	push   DWORD PTR [edi+0x38]
c000d81e:	55                   	push   ebp
c000d81f:	52                   	push   edx
c000d820:	50                   	push   eax
c000d821:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d825:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c000d828:	83 c4 20             	add    esp,0x20
c000d82b:	85 c0                	test   eax,eax
c000d82d:	75 39                	jne    c000d868 <VCache::read(unsigned long long, int, void*)+0x102>
c000d82f:	eb b3                	jmp    c000d7e4 <VCache::read(unsigned long long, int, void*)+0x7e>
c000d831:	8d 76 00             	lea    esi,[esi+0x0]
c000d834:	83 ec 0c             	sub    esp,0xc
c000d837:	57                   	push   edi
c000d838:	e8 3b fd ff ff       	call   c000d578 <VCache::invalidateReadBuffer()>
c000d83d:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000d840:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d844:	8b 10                	mov    edx,DWORD PTR [eax]
c000d846:	89 6c 24 4c          	mov    DWORD PTR [esp+0x4c],ebp
c000d84a:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c000d84e:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000d852:	89 4c 24 50          	mov    DWORD PTR [esp+0x50],ecx
c000d856:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d85a:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c000d85d:	83 c4 2c             	add    esp,0x2c
c000d860:	5b                   	pop    ebx
c000d861:	5e                   	pop    esi
c000d862:	5f                   	pop    edi
c000d863:	5d                   	pop    ebp
c000d864:	ff e0                	jmp    eax
c000d866:	66 90                	xchg   ax,ax
c000d868:	83 c4 1c             	add    esp,0x1c
c000d86b:	5b                   	pop    ebx
c000d86c:	5e                   	pop    esi
c000d86d:	5f                   	pop    edi
c000d86e:	5d                   	pop    ebp
c000d86f:	c3                   	ret    

c000d870 <Video::putrect(int, int, int, int, unsigned int)>:
c000d870:	55                   	push   ebp
c000d871:	57                   	push   edi
c000d872:	56                   	push   esi
c000d873:	53                   	push   ebx
c000d874:	83 ec 1c             	sub    esp,0x1c
c000d877:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000d87b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000d87f:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000d883:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000d887:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000d88b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d88f:	01 df                	add    edi,ebx
c000d891:	39 fb                	cmp    ebx,edi
c000d893:	7d 1f                	jge    c000d8b4 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c000d895:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000d899:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000d89d:	7d 12                	jge    c000d8b1 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000d89f:	8b 16                	mov    edx,DWORD PTR [esi]
c000d8a1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d8a5:	53                   	push   ebx
c000d8a6:	55                   	push   ebp
c000d8a7:	45                   	inc    ebp
c000d8a8:	56                   	push   esi
c000d8a9:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000d8ac:	83 c4 10             	add    esp,0x10
c000d8af:	eb e8                	jmp    c000d899 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c000d8b1:	43                   	inc    ebx
c000d8b2:	eb dd                	jmp    c000d891 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000d8b4:	83 c4 1c             	add    esp,0x1c
c000d8b7:	5b                   	pop    ebx
c000d8b8:	5e                   	pop    esi
c000d8b9:	5f                   	pop    edi
c000d8ba:	5d                   	pop    ebp
c000d8bb:	c3                   	ret    

c000d8bc <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c000d8bc:	55                   	push   ebp
c000d8bd:	57                   	push   edi
c000d8be:	31 ff                	xor    edi,edi
c000d8c0:	56                   	push   esi
c000d8c1:	53                   	push   ebx
c000d8c2:	83 ec 1c             	sub    esp,0x1c
c000d8c5:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c000d8c9:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000d8cd:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000d8d4:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c000d8d9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d8dd:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000d8e1:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000d8e5:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000d8e8:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000d8ec:	01 f9                	add    ecx,edi
c000d8ee:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c000d8f2:	7d 2f                	jge    c000d923 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c000d8f4:	31 f6                	xor    esi,esi
c000d8f6:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000d8fa:	01 f2                	add    edx,esi
c000d8fc:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000d900:	7d 1a                	jge    c000d91c <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c000d902:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d905:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c000d908:	46                   	inc    esi
c000d909:	51                   	push   ecx
c000d90a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000d90e:	52                   	push   edx
c000d90f:	55                   	push   ebp
c000d910:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000d913:	83 c4 10             	add    esp,0x10
c000d916:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000d91a:	eb da                	jmp    c000d8f6 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c000d91c:	47                   	inc    edi
c000d91d:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c000d921:	eb c5                	jmp    c000d8e8 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c000d923:	83 c4 1c             	add    esp,0x1c
c000d926:	5b                   	pop    ebx
c000d927:	5e                   	pop    esi
c000d928:	5f                   	pop    edi
c000d929:	5d                   	pop    ebp
c000d92a:	c3                   	ret    
c000d92b:	90                   	nop

c000d92c <Video::blit(unsigned int*, int, int, int, int)>:
c000d92c:	55                   	push   ebp
c000d92d:	57                   	push   edi
c000d92e:	56                   	push   esi
c000d92f:	53                   	push   ebx
c000d930:	83 ec 1c             	sub    esp,0x1c
c000d933:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d937:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000d93b:	85 c0                	test   eax,eax
c000d93d:	79 02                	jns    c000d941 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c000d93f:	31 c0                	xor    eax,eax
c000d941:	c1 e0 02             	shl    eax,0x2
c000d944:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000d948:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d94c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000d950:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000d954:	39 d8                	cmp    eax,ebx
c000d956:	7e 49                	jle    c000d9a1 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000d958:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000d95e:	7c 41                	jl     c000d9a1 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000d960:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000d964:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000d968:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000d96c:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c000d970:	39 f9                	cmp    ecx,edi
c000d972:	7e 22                	jle    c000d996 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c000d974:	83 c5 04             	add    ebp,0x4
c000d977:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000d97d:	7c 14                	jl     c000d993 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c000d97f:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000d981:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c000d984:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000d988:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000d98c:	56                   	push   esi
c000d98d:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000d990:	83 c4 10             	add    esp,0x10
c000d993:	47                   	inc    edi
c000d994:	eb d2                	jmp    c000d968 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c000d996:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d99a:	43                   	inc    ebx
c000d99b:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000d99f:	eb ab                	jmp    c000d94c <Video::blit(unsigned int*, int, int, int, int)+0x20>
c000d9a1:	83 c4 1c             	add    esp,0x1c
c000d9a4:	5b                   	pop    ebx
c000d9a5:	5e                   	pop    esi
c000d9a6:	5f                   	pop    edi
c000d9a7:	5d                   	pop    ebp
c000d9a8:	c3                   	ret    
c000d9a9:	90                   	nop

c000d9aa <Video::clearScreen(unsigned int)>:
c000d9aa:	57                   	push   edi
c000d9ab:	56                   	push   esi
c000d9ac:	53                   	push   ebx
c000d9ad:	31 db                	xor    ebx,ebx
c000d9af:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d9b3:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000d9b9:	7e 1f                	jle    c000d9da <Video::clearScreen(unsigned int)+0x30>
c000d9bb:	31 ff                	xor    edi,edi
c000d9bd:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000d9c3:	7e 12                	jle    c000d9d7 <Video::clearScreen(unsigned int)+0x2d>
c000d9c5:	8b 06                	mov    eax,DWORD PTR [esi]
c000d9c7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d9cb:	53                   	push   ebx
c000d9cc:	57                   	push   edi
c000d9cd:	47                   	inc    edi
c000d9ce:	56                   	push   esi
c000d9cf:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000d9d2:	83 c4 10             	add    esp,0x10
c000d9d5:	eb e6                	jmp    c000d9bd <Video::clearScreen(unsigned int)+0x13>
c000d9d7:	43                   	inc    ebx
c000d9d8:	eb d9                	jmp    c000d9b3 <Video::clearScreen(unsigned int)+0x9>
c000d9da:	5b                   	pop    ebx
c000d9db:	5e                   	pop    esi
c000d9dc:	5f                   	pop    edi
c000d9dd:	c3                   	ret    

c000d9de <Video::putpixel(int, int, unsigned int)>:
c000d9de:	c7 44 24 04 d4 e9 01 c0 	mov    DWORD PTR [esp+0x4],0xc001e9d4
c000d9e6:	e9 bc 28 00 00       	jmp    c00102a7 <KePanic(char const*)>
c000d9eb:	90                   	nop

c000d9ec <Video::Video(char const*)>:
c000d9ec:	83 ec 0c             	sub    esp,0xc
c000d9ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d9f3:	83 ec 08             	sub    esp,0x8
c000d9f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d9fa:	50                   	push   eax
c000d9fb:	e8 74 e1 ff ff       	call   c000bb74 <Device::Device(char const*)>
c000da00:	83 c4 10             	add    esp,0x10
c000da03:	ba 44 ea 01 c0       	mov    edx,0xc001ea44
c000da08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da0c:	89 10                	mov    DWORD PTR [eax],edx
c000da0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da12:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c000da1c:	90                   	nop
c000da1d:	83 c4 0c             	add    esp,0xc
c000da20:	c3                   	ret    
c000da21:	90                   	nop

c000da22 <Video::~Video()>:
c000da22:	83 ec 0c             	sub    esp,0xc
c000da25:	ba 44 ea 01 c0       	mov    edx,0xc001ea44
c000da2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da2e:	89 10                	mov    DWORD PTR [eax],edx
c000da30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da34:	83 ec 0c             	sub    esp,0xc
c000da37:	50                   	push   eax
c000da38:	e8 a1 de ff ff       	call   c000b8de <Device::~Device()>
c000da3d:	83 c4 10             	add    esp,0x10
c000da40:	90                   	nop
c000da41:	83 c4 0c             	add    esp,0xc
c000da44:	c3                   	ret    
c000da45:	90                   	nop

c000da46 <Video::~Video()>:
c000da46:	83 ec 0c             	sub    esp,0xc
c000da49:	83 ec 0c             	sub    esp,0xc
c000da4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da50:	e8 cd ff ff ff       	call   c000da22 <Video::~Video()>
c000da55:	83 c4 10             	add    esp,0x10
c000da58:	83 ec 08             	sub    esp,0x8
c000da5b:	68 64 01 00 00       	push   0x164
c000da60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da64:	e8 f3 c9 ff ff       	call   c000a45c <operator delete(void*, unsigned long)>
c000da69:	83 c4 10             	add    esp,0x10
c000da6c:	83 c4 0c             	add    esp,0xc
c000da6f:	c3                   	ret    

c000da70 <Video::isMonochrome()>:
c000da70:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000da74:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c000da7a:	c3                   	ret    
c000da7b:	90                   	nop

c000da7c <Video::getWidth()>:
c000da7c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000da80:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000da86:	c3                   	ret    
c000da87:	90                   	nop

c000da88 <Video::getHeight()>:
c000da88:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000da8c:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000da92:	c3                   	ret    
c000da93:	90                   	nop

c000da94 <Video::drawCursor(int, int, unsigned char*, int)>:
c000da94:	55                   	push   ebp
c000da95:	57                   	push   edi
c000da96:	56                   	push   esi
c000da97:	53                   	push   ebx
c000da98:	83 ec 2c             	sub    esp,0x2c
c000da9b:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000da9f:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000daa3:	83 f8 01             	cmp    eax,0x1
c000daa6:	19 c9                	sbb    ecx,ecx
c000daa8:	31 db                	xor    ebx,ebx
c000daaa:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000daae:	89 cd                	mov    ebp,ecx
c000dab0:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c000dab8:	f7 d5                	not    ebp
c000daba:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c000dac0:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000dac4:	01 d8                	add    eax,ebx
c000dac6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000daca:	56                   	push   esi
c000dacb:	e8 b8 ff ff ff       	call   c000da88 <Video::getHeight()>
c000dad0:	59                   	pop    ecx
c000dad1:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000dad5:	7e 70                	jle    c000db47 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c000dad7:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000dadb:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000dadf:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c000dae2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000dae6:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000daea:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c000daf1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000daf5:	89 f8                	mov    eax,edi
c000daf7:	83 c0 20             	add    eax,0x20
c000dafa:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000dafe:	56                   	push   esi
c000daff:	e8 78 ff ff ff       	call   c000da7c <Video::getWidth()>
c000db04:	5a                   	pop    edx
c000db05:	39 c7                	cmp    edi,eax
c000db07:	7d 34                	jge    c000db3d <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c000db09:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c000db0e:	74 05                	je     c000db15 <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c000db10:	8b 06                	mov    eax,DWORD PTR [esi]
c000db12:	55                   	push   ebp
c000db13:	eb 0d                	jmp    c000db22 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c000db15:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c000db1a:	74 12                	je     c000db2e <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c000db1c:	8b 06                	mov    eax,DWORD PTR [esi]
c000db1e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000db22:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000db26:	57                   	push   edi
c000db27:	56                   	push   esi
c000db28:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000db2b:	83 c4 10             	add    esp,0x10
c000db2e:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c000db32:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c000db36:	47                   	inc    edi
c000db37:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c000db3b:	75 c1                	jne    c000dafe <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c000db3d:	43                   	inc    ebx
c000db3e:	83 fb 20             	cmp    ebx,0x20
c000db41:	0f 85 79 ff ff ff    	jne    c000dac0 <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c000db47:	83 c4 2c             	add    esp,0x2c
c000db4a:	5b                   	pop    ebx
c000db4b:	5e                   	pop    esi
c000db4c:	5f                   	pop    edi
c000db4d:	5d                   	pop    ebp
c000db4e:	c3                   	ret    
c000db4f:	90                   	nop

c000db50 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c000db50:	55                   	push   ebp
c000db51:	57                   	push   edi
c000db52:	56                   	push   esi
c000db53:	53                   	push   ebx
c000db54:	83 ec 28             	sub    esp,0x28
c000db57:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000db5b:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c000db5f:	0f b6 73 0d          	movzx  esi,BYTE PTR [ebx+0xd]
c000db63:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c000db67:	c1 e6 08             	shl    esi,0x8
c000db6a:	01 c6                	add    esi,eax
c000db6c:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c000db70:	c1 e0 08             	shl    eax,0x8
c000db73:	01 d0                	add    eax,edx
c000db75:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000db79:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000db7d:	0f af c6             	imul   eax,esi
c000db80:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c000db87:	50                   	push   eax
c000db88:	e8 2c 9c ff ff       	call   c00077b9 <malloc>
c000db8d:	83 c4 10             	add    esp,0x10
c000db90:	89 c7                	mov    edi,eax
c000db92:	85 c0                	test   eax,eax
c000db94:	75 10                	jne    c000dba6 <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c000db96:	83 ec 0c             	sub    esp,0xc
c000db99:	68 f5 e9 01 c0       	push   0xc001e9f5
c000db9e:	e8 04 27 00 00       	call   c00102a7 <KePanic(char const*)>
c000dba3:	83 c4 10             	add    esp,0x10
c000dba6:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000dba9:	ba 12 00 00 00       	mov    edx,0x12
c000dbae:	84 c0                	test   al,al
c000dbb0:	74 11                	je     c000dbc3 <Video::tgaParse(unsigned char*, int, int*, int*)+0x73>
c000dbb2:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c000dbb6:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c000dbba:	c1 fa 03             	sar    edx,0x3
c000dbbd:	0f af d1             	imul   edx,ecx
c000dbc0:	83 c2 12             	add    edx,0x12
c000dbc3:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c000dbc7:	74 04                	je     c000dbcd <Video::tgaParse(unsigned char*, int, int*, int*)+0x7d>
c000dbc9:	85 f6                	test   esi,esi
c000dbcb:	75 12                	jne    c000dbdf <Video::tgaParse(unsigned char*, int, int*, int*)+0x8f>
c000dbcd:	83 ec 0c             	sub    esp,0xc
c000dbd0:	68 05 ea 01 c0       	push   0xc001ea05
c000dbd5:	e8 78 c9 ff ff       	call   c000a552 <Dbg::kprintf(char const*, ...)>
c000dbda:	e9 b8 00 00 00       	jmp    c000dc97 <Video::tgaParse(unsigned char*, int, int*, int*)+0x147>
c000dbdf:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c000dbe3:	80 f9 02             	cmp    cl,0x2
c000dbe6:	0f 85 96 00 00 00    	jne    c000dc82 <Video::tgaParse(unsigned char*, int, int*, int*)+0x132>
c000dbec:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000dbf1:	75 0e                	jne    c000dc01 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c000dbf3:	84 c0                	test   al,al
c000dbf5:	75 0a                	jne    c000dc01 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c000dbf7:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000dbfa:	83 e8 18             	sub    eax,0x18
c000dbfd:	a8 f7                	test   al,0xf7
c000dbff:	74 0a                	je     c000dc0b <Video::tgaParse(unsigned char*, int, int*, int*)+0xbb>
c000dc01:	83 ec 0c             	sub    esp,0xc
c000dc04:	68 1a ea 01 c0       	push   0xc001ea1a
c000dc09:	eb 7f                	jmp    c000dc8a <Video::tgaParse(unsigned char*, int, int*, int*)+0x13a>
c000dc0b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000dc13:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000dc1b:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c000dc1f:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000dc27:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000dc2b:	75 0c                	jne    c000dc39 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c000dc2d:	0f b6 44 13 03       	movzx  eax,BYTE PTR [ebx+edx*1+0x3]
c000dc32:	c1 e0 18             	shl    eax,0x18
c000dc35:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dc39:	45                   	inc    ebp
c000dc3a:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c000dc3f:	c1 e1 10             	shl    ecx,0x10
c000dc42:	89 c8                	mov    eax,ecx
c000dc44:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c000dc49:	c1 e1 08             	shl    ecx,0x8
c000dc4c:	09 c1                	or     ecx,eax
c000dc4e:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c000dc52:	09 c1                	or     ecx,eax
c000dc54:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c000dc58:	89 4c af fc          	mov    DWORD PTR [edi+ebp*4-0x4],ecx
c000dc5c:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000dc60:	c1 f8 03             	sar    eax,0x3
c000dc63:	01 c2                	add    edx,eax
c000dc65:	89 e8                	mov    eax,ebp
c000dc67:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000dc6b:	39 c6                	cmp    esi,eax
c000dc6d:	7f b0                	jg     c000dc1f <Video::tgaParse(unsigned char*, int, int*, int*)+0xcf>
c000dc6f:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000dc73:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000dc77:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000dc7a:	7e 22                	jle    c000dc9e <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c000dc7c:	89 6c 24 04          	mov    DWORD PTR [esp+0x4],ebp
c000dc80:	eb 99                	jmp    c000dc1b <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c000dc82:	50                   	push   eax
c000dc83:	50                   	push   eax
c000dc84:	51                   	push   ecx
c000dc85:	68 28 ea 01 c0       	push   0xc001ea28
c000dc8a:	e8 c3 c8 ff ff       	call   c000a552 <Dbg::kprintf(char const*, ...)>
c000dc8f:	89 3c 24             	mov    DWORD PTR [esp],edi
c000dc92:	e8 32 9b ff ff       	call   c00077c9 <free>
c000dc97:	83 c4 10             	add    esp,0x10
c000dc9a:	31 ff                	xor    edi,edi
c000dc9c:	eb 0f                	jmp    c000dcad <Video::tgaParse(unsigned char*, int, int*, int*)+0x15d>
c000dc9e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000dca2:	89 30                	mov    DWORD PTR [eax],esi
c000dca4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000dca8:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000dcab:	89 30                	mov    DWORD PTR [eax],esi
c000dcad:	83 c4 1c             	add    esp,0x1c
c000dcb0:	89 f8                	mov    eax,edi
c000dcb2:	5b                   	pop    ebx
c000dcb3:	5e                   	pop    esi
c000dcb4:	5f                   	pop    edi
c000dcb5:	5d                   	pop    ebp
c000dcb6:	c3                   	ret    
c000dcb7:	90                   	nop

c000dcb8 <Video::putTGA(int, int, unsigned char*, int)>:
c000dcb8:	55                   	push   ebp
c000dcb9:	57                   	push   edi
c000dcba:	56                   	push   esi
c000dcbb:	53                   	push   ebx
c000dcbc:	83 ec 28             	sub    esp,0x28
c000dcbf:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000dcc3:	8d 44 24 18          	lea    eax,[esp+0x18]
c000dcc7:	50                   	push   eax
c000dcc8:	8d 44 24 18          	lea    eax,[esp+0x18]
c000dccc:	50                   	push   eax
c000dccd:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000dcd1:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000dcd5:	56                   	push   esi
c000dcd6:	e8 75 fe ff ff       	call   c000db50 <Video::tgaParse(unsigned char*, int, int*, int*)>
c000dcdb:	83 c4 20             	add    esp,0x20
c000dcde:	85 c0                	test   eax,eax
c000dce0:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000dce4:	74 35                	je     c000dd1b <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000dce6:	89 c7                	mov    edi,eax
c000dce8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000dcec:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000dcf0:	39 d8                	cmp    eax,ebx
c000dcf2:	7e 27                	jle    c000dd1b <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000dcf4:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000dcf8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000dcfc:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000dd00:	39 e8                	cmp    eax,ebp
c000dd02:	7e 14                	jle    c000dd18 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c000dd04:	8b 06                	mov    eax,DWORD PTR [esi]
c000dd06:	83 c7 04             	add    edi,0x4
c000dd09:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c000dd0c:	53                   	push   ebx
c000dd0d:	55                   	push   ebp
c000dd0e:	45                   	inc    ebp
c000dd0f:	56                   	push   esi
c000dd10:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000dd13:	83 c4 10             	add    esp,0x10
c000dd16:	eb e0                	jmp    c000dcf8 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c000dd18:	43                   	inc    ebx
c000dd19:	eb cd                	jmp    c000dce8 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c000dd1b:	83 c4 1c             	add    esp,0x1c
c000dd1e:	5b                   	pop    ebx
c000dd1f:	5e                   	pop    esi
c000dd20:	5f                   	pop    edi
c000dd21:	5d                   	pop    ebp
c000dd22:	c3                   	ret    
c000dd23:	90                   	nop

c000dd24 <ACPI::close(int, int, void*)>:
c000dd24:	83 ec 1c             	sub    esp,0x1c
c000dd27:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c000dd2f:	74 0b                	je     c000dd3c <ACPI::close(int, int, void*)+0x18>
c000dd31:	b8 00 00 00 00       	mov    eax,0x0
c000dd36:	e9 9d 00 00 00       	jmp    c000ddd8 <ACPI::close(int, int, void*)+0xb4>
c000dd3b:	90                   	nop
c000dd3c:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000dd41:	75 29                	jne    c000dd6c <ACPI::close(int, int, void*)+0x48>
c000dd43:	a1 a8 54 02 c0       	mov    eax,ds:0xc00254a8
c000dd48:	85 c0                	test   eax,eax
c000dd4a:	74 08                	je     c000dd54 <ACPI::close(int, int, void*)+0x30>
c000dd4c:	a1 a8 54 02 c0       	mov    eax,ds:0xc00254a8
c000dd51:	ff d0                	call   eax
c000dd53:	90                   	nop
c000dd54:	83 ec 0c             	sub    esp,0xc
c000dd57:	68 84 ea 01 c0       	push   0xc001ea84
c000dd5c:	e8 46 25 00 00       	call   c00102a7 <KePanic(char const*)>
c000dd61:	83 c4 10             	add    esp,0x10
c000dd64:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000dd69:	eb 6d                	jmp    c000ddd8 <ACPI::close(int, int, void*)+0xb4>
c000dd6b:	90                   	nop
c000dd6c:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c000dd71:	75 5d                	jne    c000ddd0 <ACPI::close(int, int, void*)+0xac>
c000dd73:	a1 a4 54 02 c0       	mov    eax,ds:0xc00254a4
c000dd78:	85 c0                	test   eax,eax
c000dd7a:	74 08                	je     c000dd84 <ACPI::close(int, int, void*)+0x60>
c000dd7c:	a1 a4 54 02 c0       	mov    eax,ds:0xc00254a4
c000dd81:	ff d0                	call   eax
c000dd83:	90                   	nop
c000dd84:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c000dd89:	8d 76 00             	lea    esi,[esi+0x0]
c000dd8c:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000dd90:	25 ff 00 00 00       	and    eax,0xff
c000dd95:	83 e0 02             	and    eax,0x2
c000dd98:	74 1e                	je     c000ddb8 <ACPI::close(int, int, void*)+0x94>
c000dd9a:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c000dda1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000dda5:	89 c2                	mov    edx,eax
c000dda7:	ec                   	in     al,dx
c000dda8:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000ddac:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000ddb0:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000ddb4:	eb d6                	jmp    c000dd8c <ACPI::close(int, int, void*)+0x68>
c000ddb6:	66 90                	xchg   ax,ax
c000ddb8:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c000ddbf:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c000ddc4:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000ddc8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ddcc:	ee                   	out    dx,al
c000ddcd:	8d 76 00             	lea    esi,[esi+0x0]
c000ddd0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ddd5:	8d 76 00             	lea    esi,[esi+0x0]
c000ddd8:	83 c4 1c             	add    esp,0x1c
c000dddb:	c3                   	ret    

c000dddc <findRSDP()>:
c000dddc:	83 ec 1c             	sub    esp,0x1c
c000dddf:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c000dde4:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000ddea:	83 e0 04             	and    eax,0x4
c000dded:	84 c0                	test   al,al
c000ddef:	75 07                	jne    c000ddf8 <findRSDP()+0x1c>
c000ddf1:	b8 00 00 00 00       	mov    eax,0x0
c000ddf6:	eb 70                	jmp    c000de68 <findRSDP()+0x8c>
c000ddf8:	a1 e8 2e 02 c0       	mov    eax,ds:0xc0022ee8
c000ddfd:	3d ff 07 00 00       	cmp    eax,0x7ff
c000de02:	7f 1c                	jg     c000de20 <findRSDP()+0x44>
c000de04:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c000de09:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000de0f:	83 e2 fb             	and    edx,0xfffffffb
c000de12:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000de18:	b8 00 00 00 00       	mov    eax,0x0
c000de1d:	eb 49                	jmp    c000de68 <findRSDP()+0x8c>
c000de1f:	90                   	nop
c000de20:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c000de28:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c000de30:	77 2e                	ja     c000de60 <findRSDP()+0x84>
c000de32:	83 ec 04             	sub    esp,0x4
c000de35:	6a 08                	push   0x8
c000de37:	68 1f eb 01 c0       	push   0xc001eb1f
c000de3c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000de40:	e8 4b 25 ff ff       	call   c0000390 <memcmp>
c000de45:	83 c4 10             	add    esp,0x10
c000de48:	85 c0                	test   eax,eax
c000de4a:	0f 94 c0             	sete   al
c000de4d:	84 c0                	test   al,al
c000de4f:	74 07                	je     c000de58 <findRSDP()+0x7c>
c000de51:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000de55:	eb 11                	jmp    c000de68 <findRSDP()+0x8c>
c000de57:	90                   	nop
c000de58:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c000de5d:	eb c9                	jmp    c000de28 <findRSDP()+0x4c>
c000de5f:	90                   	nop
c000de60:	b8 00 00 00 00       	mov    eax,0x0
c000de65:	8d 76 00             	lea    esi,[esi+0x0]
c000de68:	83 c4 1c             	add    esp,0x1c
c000de6b:	c3                   	ret    

c000de6c <loadACPITables(unsigned char*)>:
c000de6c:	57                   	push   edi
c000de6d:	56                   	push   esi
c000de6e:	53                   	push   ebx
c000de6f:	83 ec 60             	sub    esp,0x60
c000de72:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c000de77:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000de7d:	83 e0 04             	and    eax,0x4
c000de80:	84 c0                	test   al,al
c000de82:	0f 84 3c 02 00 00    	je     c000e0c4 <loadACPITables(unsigned char*)+0x258>
c000de88:	a0 c0 56 02 c0       	mov    al,ds:0xc00256c0
c000de8d:	84 c0                	test   al,al
c000de8f:	74 77                	je     c000df08 <loadACPITables(unsigned char*)+0x9c>
c000de91:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000de95:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000de99:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000de9d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000dea0:	83 e8 24             	sub    eax,0x24
c000dea3:	c1 e8 03             	shr    eax,0x3
c000dea6:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000deaa:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c000deb2:	66 90                	xchg   ax,ax
c000deb4:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000deb8:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c000debc:	0f 8d b6 00 00 00    	jge    c000df78 <loadACPITables(unsigned char*)+0x10c>
c000dec2:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000dec6:	83 c0 24             	add    eax,0x24
c000dec9:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000decd:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000ded1:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000ded5:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000ded9:	c1 e0 03             	shl    eax,0x3
c000dedc:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c000dee0:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000dee4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000dee7:	8b 00                	mov    eax,DWORD PTR [eax]
c000dee9:	89 c1                	mov    ecx,eax
c000deeb:	a1 ac 54 02 c0       	mov    eax,ds:0xc00254ac
c000def0:	8d 50 01             	lea    edx,[eax+0x1]
c000def3:	89 15 ac 54 02 c0    	mov    DWORD PTR ds:0xc00254ac,edx
c000def9:	89 ca                	mov    edx,ecx
c000defb:	89 14 c5 c4 54 02 c0 	mov    DWORD PTR [eax*8-0x3ffdab3c],edx
c000df02:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c000df06:	eb ac                	jmp    c000deb4 <loadACPITables(unsigned char*)+0x48>
c000df08:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000df0c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000df10:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000df14:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000df17:	83 e8 24             	sub    eax,0x24
c000df1a:	c1 e8 02             	shr    eax,0x2
c000df1d:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000df21:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000df29:	8d 76 00             	lea    esi,[esi+0x0]
c000df2c:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000df30:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c000df34:	7d 42                	jge    c000df78 <loadACPITables(unsigned char*)+0x10c>
c000df36:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000df3a:	83 c0 24             	add    eax,0x24
c000df3d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000df41:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000df45:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000df49:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000df4d:	c1 e0 02             	shl    eax,0x2
c000df50:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000df54:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000df58:	8b 08                	mov    ecx,DWORD PTR [eax]
c000df5a:	a1 ac 54 02 c0       	mov    eax,ds:0xc00254ac
c000df5f:	8d 50 01             	lea    edx,[eax+0x1]
c000df62:	89 15 ac 54 02 c0    	mov    DWORD PTR ds:0xc00254ac,edx
c000df68:	89 ca                	mov    edx,ecx
c000df6a:	89 14 c5 c4 54 02 c0 	mov    DWORD PTR [eax*8-0x3ffdab3c],edx
c000df71:	ff 44 24 58          	inc    DWORD PTR [esp+0x58]
c000df75:	eb b5                	jmp    c000df2c <loadACPITables(unsigned char*)+0xc0>
c000df77:	90                   	nop
c000df78:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000df80:	a1 ac 54 02 c0       	mov    eax,ds:0xc00254ac
c000df85:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c000df89:	0f 8d 39 01 00 00    	jge    c000e0c8 <loadACPITables(unsigned char*)+0x25c>
c000df8f:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000df93:	8b 04 c5 c4 54 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffdab3c]
c000df9a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000df9e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000dfa2:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000dfa6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000dfaa:	25 ff 0f 00 00       	and    eax,0xfff
c000dfaf:	89 c6                	mov    esi,eax
c000dfb1:	8b 1d b0 2f 02 c0    	mov    ebx,DWORD PTR ds:0xc0022fb0
c000dfb7:	83 ec 0c             	sub    esp,0xc
c000dfba:	6a 01                	push   0x1
c000dfbc:	e8 d4 b2 ff ff       	call   c0009295 <Virt::allocateKernelVirtualPages(int)>
c000dfc1:	83 c4 10             	add    esp,0x10
c000dfc4:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000dfc8:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000dfce:	83 ec 0c             	sub    esp,0xc
c000dfd1:	6a 01                	push   0x1
c000dfd3:	6a 01                	push   0x1
c000dfd5:	50                   	push   eax
c000dfd6:	52                   	push   edx
c000dfd7:	53                   	push   ebx
c000dfd8:	e8 75 bc ff ff       	call   c0009c52 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000dfdd:	83 c4 20             	add    esp,0x20
c000dfe0:	09 f0                	or     eax,esi
c000dfe2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dfe6:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000dfea:	c1 e0 03             	shl    eax,0x3
c000dfed:	05 c0 54 02 c0       	add    eax,0xc00254c0
c000dff2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000dff6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000dffa:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dffe:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c000e006:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e00a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e00e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e012:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e016:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e01a:	89 c6                	mov    esi,eax
c000e01c:	89 d7                	mov    edi,edx
c000e01e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e020:	89 c8                	mov    eax,ecx
c000e022:	89 fa                	mov    edx,edi
c000e024:	89 f3                	mov    ebx,esi
c000e026:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000e02a:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000e02e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e032:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e036:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e039:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e03d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e041:	05 00 10 00 00       	add    eax,0x1000
c000e046:	c1 e8 0c             	shr    eax,0xc
c000e049:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e04d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e051:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e055:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e059:	25 ff 0f 00 00       	and    eax,0xfff
c000e05e:	89 c6                	mov    esi,eax
c000e060:	8b 1d b0 2f 02 c0    	mov    ebx,DWORD PTR ds:0xc0022fb0
c000e066:	83 ec 0c             	sub    esp,0xc
c000e069:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000e06d:	e8 23 b2 ff ff       	call   c0009295 <Virt::allocateKernelVirtualPages(int)>
c000e072:	83 c4 10             	add    esp,0x10
c000e075:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e079:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e07f:	83 ec 0c             	sub    esp,0xc
c000e082:	6a 01                	push   0x1
c000e084:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000e088:	50                   	push   eax
c000e089:	52                   	push   edx
c000e08a:	53                   	push   ebx
c000e08b:	e8 c2 bb ff ff       	call   c0009c52 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e090:	83 c4 20             	add    esp,0x20
c000e093:	09 f0                	or     eax,esi
c000e095:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e099:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e09d:	83 ec 0c             	sub    esp,0xc
c000e0a0:	50                   	push   eax
c000e0a1:	e8 e3 b4 ff ff       	call   c0009589 <Virt::freeKernelVirtualPages(unsigned long)>
c000e0a6:	83 c4 10             	add    esp,0x10
c000e0a9:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000e0ad:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000e0b1:	89 14 c5 c4 54 02 c0 	mov    DWORD PTR [eax*8-0x3ffdab3c],edx
c000e0b8:	ff 44 24 54          	inc    DWORD PTR [esp+0x54]
c000e0bc:	e9 bf fe ff ff       	jmp    c000df80 <loadACPITables(unsigned char*)+0x114>
c000e0c1:	8d 76 00             	lea    esi,[esi+0x0]
c000e0c4:	90                   	nop
c000e0c5:	8d 76 00             	lea    esi,[esi+0x0]
c000e0c8:	83 c4 60             	add    esp,0x60
c000e0cb:	5b                   	pop    ebx
c000e0cc:	5e                   	pop    esi
c000e0cd:	5f                   	pop    edi
c000e0ce:	c3                   	ret    
c000e0cf:	90                   	nop

c000e0d0 <findRSDT(unsigned char*)>:
c000e0d0:	57                   	push   edi
c000e0d1:	56                   	push   esi
c000e0d2:	53                   	push   ebx
c000e0d3:	83 ec 50             	sub    esp,0x50
c000e0d6:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c000e0db:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e0e1:	83 e0 04             	and    eax,0x4
c000e0e4:	84 c0                	test   al,al
c000e0e6:	75 0c                	jne    c000e0f4 <findRSDT(unsigned char*)+0x24>
c000e0e8:	b8 00 00 00 00       	mov    eax,0x0
c000e0ed:	e9 26 01 00 00       	jmp    c000e218 <findRSDT(unsigned char*)+0x148>
c000e0f2:	66 90                	xchg   ax,ax
c000e0f4:	89 e0                	mov    eax,esp
c000e0f6:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000e0fa:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000e0fe:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000e102:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c000e10a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e10e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e112:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000e116:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000e11a:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000e11e:	89 c6                	mov    esi,eax
c000e120:	89 d7                	mov    edi,edx
c000e122:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e124:	89 c8                	mov    eax,ecx
c000e126:	89 fa                	mov    edx,edi
c000e128:	89 f3                	mov    ebx,esi
c000e12a:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c000e12e:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000e132:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e136:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000e13a:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c000e13e:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000e146:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e14a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e14e:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000e152:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e156:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e15a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e15e:	25 ff 0f 00 00       	and    eax,0xfff
c000e163:	89 c6                	mov    esi,eax
c000e165:	8b 1d b0 2f 02 c0    	mov    ebx,DWORD PTR ds:0xc0022fb0
c000e16b:	83 ec 0c             	sub    esp,0xc
c000e16e:	6a 02                	push   0x2
c000e170:	e8 20 b1 ff ff       	call   c0009295 <Virt::allocateKernelVirtualPages(int)>
c000e175:	83 c4 10             	add    esp,0x10
c000e178:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000e17c:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e182:	83 ec 0c             	sub    esp,0xc
c000e185:	6a 01                	push   0x1
c000e187:	6a 02                	push   0x2
c000e189:	50                   	push   eax
c000e18a:	52                   	push   edx
c000e18b:	53                   	push   ebx
c000e18c:	e8 c1 ba ff ff       	call   c0009c52 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e191:	83 c4 20             	add    esp,0x20
c000e194:	09 f0                	or     eax,esi
c000e196:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000e19a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e19e:	25 ff 0f 00 00       	and    eax,0xfff
c000e1a3:	89 c6                	mov    esi,eax
c000e1a5:	8b 1d b0 2f 02 c0    	mov    ebx,DWORD PTR ds:0xc0022fb0
c000e1ab:	83 ec 0c             	sub    esp,0xc
c000e1ae:	6a 02                	push   0x2
c000e1b0:	e8 e0 b0 ff ff       	call   c0009295 <Virt::allocateKernelVirtualPages(int)>
c000e1b5:	83 c4 10             	add    esp,0x10
c000e1b8:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000e1bc:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e1c2:	83 ec 0c             	sub    esp,0xc
c000e1c5:	6a 01                	push   0x1
c000e1c7:	6a 02                	push   0x2
c000e1c9:	50                   	push   eax
c000e1ca:	52                   	push   edx
c000e1cb:	53                   	push   ebx
c000e1cc:	e8 81 ba ff ff       	call   c0009c52 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e1d1:	83 c4 20             	add    esp,0x20
c000e1d4:	09 f0                	or     eax,esi
c000e1d6:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e1da:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c000e1df:	75 13                	jne    c000e1f4 <findRSDT(unsigned char*)+0x124>
c000e1e1:	c6 05 c0 56 02 c0 00 	mov    BYTE PTR ds:0xc00256c0,0x0
c000e1e8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e1ec:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000e1f0:	eb 22                	jmp    c000e214 <findRSDT(unsigned char*)+0x144>
c000e1f2:	66 90                	xchg   ax,ax
c000e1f4:	80 7c 24 4b 02       	cmp    BYTE PTR [esp+0x4b],0x2
c000e1f9:	75 11                	jne    c000e20c <findRSDT(unsigned char*)+0x13c>
c000e1fb:	c6 05 c0 56 02 c0 01 	mov    BYTE PTR ds:0xc00256c0,0x1
c000e202:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e206:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000e20a:	eb 08                	jmp    c000e214 <findRSDT(unsigned char*)+0x144>
c000e20c:	b8 00 00 00 00       	mov    eax,0x0
c000e211:	eb 05                	jmp    c000e218 <findRSDT(unsigned char*)+0x148>
c000e213:	90                   	nop
c000e214:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000e218:	83 c4 50             	add    esp,0x50
c000e21b:	5b                   	pop    ebx
c000e21c:	5e                   	pop    esi
c000e21d:	5f                   	pop    edi
c000e21e:	c3                   	ret    
c000e21f:	90                   	nop

c000e220 <findDataTable(unsigned char*, char*)>:
c000e220:	83 ec 1c             	sub    esp,0x1c
c000e223:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c000e228:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e22e:	83 e0 04             	and    eax,0x4
c000e231:	84 c0                	test   al,al
c000e233:	75 07                	jne    c000e23c <findDataTable(unsigned char*, char*)+0x1c>
c000e235:	b8 00 00 00 00       	mov    eax,0x0
c000e23a:	eb 58                	jmp    c000e294 <findDataTable(unsigned char*, char*)+0x74>
c000e23c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000e244:	a1 ac 54 02 c0       	mov    eax,ds:0xc00254ac
c000e249:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000e24d:	7d 3d                	jge    c000e28c <findDataTable(unsigned char*, char*)+0x6c>
c000e24f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e253:	c1 e0 03             	shl    eax,0x3
c000e256:	05 c0 54 02 c0       	add    eax,0xc00254c0
c000e25b:	83 ec 04             	sub    esp,0x4
c000e25e:	6a 04                	push   0x4
c000e260:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e264:	50                   	push   eax
c000e265:	e8 26 21 ff ff       	call   c0000390 <memcmp>
c000e26a:	83 c4 10             	add    esp,0x10
c000e26d:	85 c0                	test   eax,eax
c000e26f:	0f 94 c0             	sete   al
c000e272:	84 c0                	test   al,al
c000e274:	74 0e                	je     c000e284 <findDataTable(unsigned char*, char*)+0x64>
c000e276:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e27a:	8b 04 c5 c4 54 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffdab3c]
c000e281:	eb 11                	jmp    c000e294 <findDataTable(unsigned char*, char*)+0x74>
c000e283:	90                   	nop
c000e284:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000e288:	eb ba                	jmp    c000e244 <findDataTable(unsigned char*, char*)+0x24>
c000e28a:	66 90                	xchg   ax,ax
c000e28c:	b8 00 00 00 00       	mov    eax,0x0
c000e291:	8d 76 00             	lea    esi,[esi+0x0]
c000e294:	83 c4 1c             	add    esp,0x1c
c000e297:	c3                   	ret    

c000e298 <scanMADT()>:
c000e298:	53                   	push   ebx
c000e299:	83 ec 38             	sub    esp,0x38
c000e29c:	a1 d0 2e 02 c0       	mov    eax,ds:0xc0022ed0
c000e2a1:	25 00 04 00 00       	and    eax,0x400
c000e2a6:	74 14                	je     c000e2bc <scanMADT()+0x24>
c000e2a8:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c000e2ad:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e2b3:	83 e2 fb             	and    edx,0xfffffffb
c000e2b6:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e2bc:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c000e2c1:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e2c7:	83 e0 04             	and    eax,0x4
c000e2ca:	84 c0                	test   al,al
c000e2cc:	0f 84 8a 04 00 00    	je     c000e75c <scanMADT()+0x4c4>
c000e2d2:	e8 05 fb ff ff       	call   c000dddc <findRSDP()>
c000e2d7:	a3 cc 56 02 c0       	mov    ds:0xc00256cc,eax
c000e2dc:	a1 cc 56 02 c0       	mov    eax,ds:0xc00256cc
c000e2e1:	85 c0                	test   eax,eax
c000e2e3:	75 1b                	jne    c000e300 <scanMADT()+0x68>
c000e2e5:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c000e2ea:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e2f0:	83 e2 fb             	and    edx,0xfffffffb
c000e2f3:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e2f9:	e9 66 04 00 00       	jmp    c000e764 <scanMADT()+0x4cc>
c000e2fe:	66 90                	xchg   ax,ax
c000e300:	a1 cc 56 02 c0       	mov    eax,ds:0xc00256cc
c000e305:	83 ec 0c             	sub    esp,0xc
c000e308:	50                   	push   eax
c000e309:	e8 c2 fd ff ff       	call   c000e0d0 <findRSDT(unsigned char*)>
c000e30e:	83 c4 10             	add    esp,0x10
c000e311:	a3 c8 56 02 c0       	mov    ds:0xc00256c8,eax
c000e316:	a1 c8 56 02 c0       	mov    eax,ds:0xc00256c8
c000e31b:	85 c0                	test   eax,eax
c000e31d:	75 19                	jne    c000e338 <scanMADT()+0xa0>
c000e31f:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c000e324:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e32a:	83 e2 fb             	and    edx,0xfffffffb
c000e32d:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e333:	e9 2c 04 00 00       	jmp    c000e764 <scanMADT()+0x4cc>
c000e338:	a1 c8 56 02 c0       	mov    eax,ds:0xc00256c8
c000e33d:	83 ec 0c             	sub    esp,0xc
c000e340:	50                   	push   eax
c000e341:	e8 26 fb ff ff       	call   c000de6c <loadACPITables(unsigned char*)>
c000e346:	83 c4 10             	add    esp,0x10
c000e349:	a1 c8 56 02 c0       	mov    eax,ds:0xc00256c8
c000e34e:	83 ec 08             	sub    esp,0x8
c000e351:	68 28 eb 01 c0       	push   0xc001eb28
c000e356:	50                   	push   eax
c000e357:	e8 c4 fe ff ff       	call   c000e220 <findDataTable(unsigned char*, char*)>
c000e35c:	83 c4 10             	add    esp,0x10
c000e35f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e363:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000e368:	75 1a                	jne    c000e384 <scanMADT()+0xec>
c000e36a:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c000e36f:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e375:	83 e2 fe             	and    edx,0xfffffffe
c000e378:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e37e:	e9 e1 03 00 00       	jmp    c000e764 <scanMADT()+0x4cc>
c000e383:	90                   	nop
c000e384:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000e38c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e390:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e393:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c000e397:	0f 87 c7 03 00 00    	ja     c000e764 <scanMADT()+0x4cc>
c000e39d:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c000e3a5:	0f 87 b9 03 00 00    	ja     c000e764 <scanMADT()+0x4cc>
c000e3ab:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e3af:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e3b3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e3b7:	8d 50 01             	lea    edx,[eax+0x1]
c000e3ba:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e3be:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e3c2:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e3c6:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c000e3ca:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e3ce:	8d 50 01             	lea    edx,[eax+0x1]
c000e3d1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e3d5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e3d9:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e3dd:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c000e3e1:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c000e3e6:	0f 86 74 03 00 00    	jbe    c000e760 <scanMADT()+0x4c8>
c000e3ec:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c000e3f1:	75 5d                	jne    c000e450 <scanMADT()+0x1b8>
c000e3f3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e3f7:	8d 50 01             	lea    edx,[eax+0x1]
c000e3fa:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e3fe:	8a 15 c0 58 02 c0    	mov    dl,BYTE PTR ds:0xc00258c0
c000e404:	81 e2 ff 00 00 00    	and    edx,0xff
c000e40a:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000e40e:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000e412:	88 82 00 59 02 c0    	mov    BYTE PTR [edx-0x3ffda700],al
c000e418:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e41c:	8d 42 01             	lea    eax,[edx+0x1]
c000e41f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000e423:	a0 c0 58 02 c0       	mov    al,ds:0xc00258c0
c000e428:	8d 48 01             	lea    ecx,[eax+0x1]
c000e42b:	88 0d c0 58 02 c0    	mov    BYTE PTR ds:0xc00258c0,cl
c000e431:	25 ff 00 00 00       	and    eax,0xff
c000e436:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000e43a:	8a 54 11 2c          	mov    dl,BYTE PTR [ecx+edx*1+0x2c]
c000e43e:	88 90 e0 58 02 c0    	mov    BYTE PTR [eax-0x3ffda720],dl
c000e444:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000e449:	e9 f6 02 00 00       	jmp    c000e744 <scanMADT()+0x4ac>
c000e44e:	66 90                	xchg   ax,ax
c000e450:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c000e455:	0f 85 29 01 00 00    	jne    c000e584 <scanMADT()+0x2ec>
c000e45b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e45f:	8d 50 01             	lea    edx,[eax+0x1]
c000e462:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e466:	8a 15 80 57 02 c0    	mov    dl,BYTE PTR ds:0xc0025780
c000e46c:	81 e2 ff 00 00 00    	and    edx,0xff
c000e472:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000e476:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000e47a:	88 82 a0 57 02 c0    	mov    BYTE PTR [edx-0x3ffda860],al
c000e480:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c000e484:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e488:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e48c:	01 d0                	add    eax,edx
c000e48e:	83 c0 2c             	add    eax,0x2c
c000e491:	8a 00                	mov    al,BYTE PTR [eax]
c000e493:	31 d2                	xor    edx,edx
c000e495:	88 c2                	mov    dl,al
c000e497:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e49b:	8d 48 01             	lea    ecx,[eax+0x1]
c000e49e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e4a2:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000e4a6:	25 ff 00 00 00       	and    eax,0xff
c000e4ab:	c1 e0 08             	shl    eax,0x8
c000e4ae:	89 d1                	mov    ecx,edx
c000e4b0:	09 c1                	or     ecx,eax
c000e4b2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e4b6:	8d 50 02             	lea    edx,[eax+0x2]
c000e4b9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e4bd:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e4c1:	25 ff 00 00 00       	and    eax,0xff
c000e4c6:	c1 e0 10             	shl    eax,0x10
c000e4c9:	09 c1                	or     ecx,eax
c000e4cb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e4cf:	8d 50 03             	lea    edx,[eax+0x3]
c000e4d2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e4d6:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e4da:	25 ff 00 00 00       	and    eax,0xff
c000e4df:	c1 e0 18             	shl    eax,0x18
c000e4e2:	09 c1                	or     ecx,eax
c000e4e4:	89 ca                	mov    edx,ecx
c000e4e6:	a0 80 57 02 c0       	mov    al,ds:0xc0025780
c000e4eb:	25 ff 00 00 00       	and    eax,0xff
c000e4f0:	89 14 85 c0 57 02 c0 	mov    DWORD PTR [eax*4-0x3ffda840],edx
c000e4f7:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000e4fc:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e500:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e504:	01 d0                	add    eax,edx
c000e506:	83 c0 2c             	add    eax,0x2c
c000e509:	8a 00                	mov    al,BYTE PTR [eax]
c000e50b:	31 d2                	xor    edx,edx
c000e50d:	88 c2                	mov    dl,al
c000e50f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e513:	8d 48 01             	lea    ecx,[eax+0x1]
c000e516:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e51a:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000e51e:	25 ff 00 00 00       	and    eax,0xff
c000e523:	c1 e0 08             	shl    eax,0x8
c000e526:	89 d1                	mov    ecx,edx
c000e528:	09 c1                	or     ecx,eax
c000e52a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e52e:	8d 50 02             	lea    edx,[eax+0x2]
c000e531:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e535:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e539:	25 ff 00 00 00       	and    eax,0xff
c000e53e:	c1 e0 10             	shl    eax,0x10
c000e541:	09 c1                	or     ecx,eax
c000e543:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e547:	8d 50 03             	lea    edx,[eax+0x3]
c000e54a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e54e:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e552:	25 ff 00 00 00       	and    eax,0xff
c000e557:	c1 e0 18             	shl    eax,0x18
c000e55a:	09 c1                	or     ecx,eax
c000e55c:	89 ca                	mov    edx,ecx
c000e55e:	a0 80 57 02 c0       	mov    al,ds:0xc0025780
c000e563:	25 ff 00 00 00       	and    eax,0xff
c000e568:	89 14 85 40 58 02 c0 	mov    DWORD PTR [eax*4-0x3ffda7c0],edx
c000e56f:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000e574:	a0 80 57 02 c0       	mov    al,ds:0xc0025780
c000e579:	40                   	inc    eax
c000e57a:	a2 80 57 02 c0       	mov    ds:0xc0025780,al
c000e57f:	e9 c0 01 00 00       	jmp    c000e744 <scanMADT()+0x4ac>
c000e584:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c000e589:	0f 85 fd 00 00 00    	jne    c000e68c <scanMADT()+0x3f4>
c000e58f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e593:	8d 50 01             	lea    edx,[eax+0x1]
c000e596:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e59a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e59e:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e5a2:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c000e5a6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e5aa:	8d 50 01             	lea    edx,[eax+0x1]
c000e5ad:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e5b1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e5b5:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e5b9:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c000e5bd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e5c1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e5c5:	01 d0                	add    eax,edx
c000e5c7:	83 c0 2c             	add    eax,0x2c
c000e5ca:	8a 00                	mov    al,BYTE PTR [eax]
c000e5cc:	31 d2                	xor    edx,edx
c000e5ce:	88 c2                	mov    dl,al
c000e5d0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e5d4:	8d 48 01             	lea    ecx,[eax+0x1]
c000e5d7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e5db:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000e5df:	25 ff 00 00 00       	and    eax,0xff
c000e5e4:	c1 e0 08             	shl    eax,0x8
c000e5e7:	89 d1                	mov    ecx,edx
c000e5e9:	09 c1                	or     ecx,eax
c000e5eb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e5ef:	8d 50 02             	lea    edx,[eax+0x2]
c000e5f2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e5f6:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e5fa:	25 ff 00 00 00       	and    eax,0xff
c000e5ff:	c1 e0 10             	shl    eax,0x10
c000e602:	09 c1                	or     ecx,eax
c000e604:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e608:	8d 50 03             	lea    edx,[eax+0x3]
c000e60b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e60f:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e613:	25 ff 00 00 00       	and    eax,0xff
c000e618:	c1 e0 18             	shl    eax,0x18
c000e61b:	09 c8                	or     eax,ecx
c000e61d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e621:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000e626:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e62a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e62e:	01 d0                	add    eax,edx
c000e630:	83 c0 2c             	add    eax,0x2c
c000e633:	8a 00                	mov    al,BYTE PTR [eax]
c000e635:	25 ff 00 00 00       	and    eax,0xff
c000e63a:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e63e:	8d 4a 01             	lea    ecx,[edx+0x1]
c000e641:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e645:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c000e649:	81 e2 ff 00 00 00    	and    edx,0xff
c000e64f:	c1 e2 08             	shl    edx,0x8
c000e652:	09 d0                	or     eax,edx
c000e654:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000e659:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000e65e:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c000e662:	25 ff 00 00 00       	and    eax,0xff
c000e667:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e66b:	88 90 40 ff 01 c0    	mov    BYTE PTR [eax-0x3ffe00c0],dl
c000e671:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c000e675:	31 d2                	xor    edx,edx
c000e677:	88 c2                	mov    dl,al
c000e679:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c000e67e:	66 89 84 12 60 57 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffda8a0],ax
c000e686:	e9 b9 00 00 00       	jmp    c000e744 <scanMADT()+0x4ac>
c000e68b:	90                   	nop
c000e68c:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c000e691:	0f 85 a1 00 00 00    	jne    c000e738 <scanMADT()+0x4a0>
c000e697:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e69b:	8d 50 01             	lea    edx,[eax+0x1]
c000e69e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e6a2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e6a6:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e6aa:	25 ff 00 00 00       	and    eax,0xff
c000e6af:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e6b3:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e6b7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e6bb:	01 d0                	add    eax,edx
c000e6bd:	83 c0 2c             	add    eax,0x2c
c000e6c0:	8a 00                	mov    al,BYTE PTR [eax]
c000e6c2:	31 d2                	xor    edx,edx
c000e6c4:	88 c2                	mov    dl,al
c000e6c6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e6ca:	8d 48 01             	lea    ecx,[eax+0x1]
c000e6cd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e6d1:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000e6d5:	25 ff 00 00 00       	and    eax,0xff
c000e6da:	c1 e0 08             	shl    eax,0x8
c000e6dd:	09 d0                	or     eax,edx
c000e6df:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e6e3:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000e6e8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e6ec:	8d 50 01             	lea    edx,[eax+0x1]
c000e6ef:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e6f3:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e6f7:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e6fb:	25 ff 00 00 00       	and    eax,0xff
c000e700:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e704:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e708:	c1 e0 08             	shl    eax,0x8
c000e70b:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000e70f:	89 c1                	mov    ecx,eax
c000e711:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e715:	c1 e0 18             	shl    eax,0x18
c000e718:	89 c3                	mov    ebx,eax
c000e71a:	a1 d0 56 02 c0       	mov    eax,ds:0xc00256d0
c000e71f:	8d 50 01             	lea    edx,[eax+0x1]
c000e722:	89 15 d0 56 02 c0    	mov    DWORD PTR ds:0xc00256d0,edx
c000e728:	09 d9                	or     ecx,ebx
c000e72a:	89 ca                	mov    edx,ecx
c000e72c:	89 14 85 e0 56 02 c0 	mov    DWORD PTR [eax*4-0x3ffda920],edx
c000e733:	eb 0f                	jmp    c000e744 <scanMADT()+0x4ac>
c000e735:	8d 76 00             	lea    esi,[esi+0x0]
c000e738:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c000e73d:	75 05                	jne    c000e744 <scanMADT()+0x4ac>
c000e73f:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c000e744:	8a 44 24 22          	mov    al,BYTE PTR [esp+0x22]
c000e748:	31 d2                	xor    edx,edx
c000e74a:	88 c2                	mov    dl,al
c000e74c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e750:	01 d0                	add    eax,edx
c000e752:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000e756:	e9 31 fc ff ff       	jmp    c000e38c <scanMADT()+0xf4>
c000e75b:	90                   	nop
c000e75c:	90                   	nop
c000e75d:	eb 05                	jmp    c000e764 <scanMADT()+0x4cc>
c000e75f:	90                   	nop
c000e760:	90                   	nop
c000e761:	8d 76 00             	lea    esi,[esi+0x0]
c000e764:	83 c4 38             	add    esp,0x38
c000e767:	5b                   	pop    ebx
c000e768:	c3                   	ret    
c000e769:	90                   	nop
c000e76a:	66 90                	xchg   ax,ax

c000e76c <ACPI::ACPI()>:
c000e76c:	83 ec 0c             	sub    esp,0xc
c000e76f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e773:	83 ec 08             	sub    esp,0x8
c000e776:	68 2d eb 01 c0       	push   0xc001eb2d
c000e77b:	50                   	push   eax
c000e77c:	e8 f3 d3 ff ff       	call   c000bb74 <Device::Device(char const*)>
c000e781:	83 c4 10             	add    esp,0x10
c000e784:	ba 64 ec 01 c0       	mov    edx,0xc001ec64
c000e789:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e78d:	89 10                	mov    DWORD PTR [eax],edx
c000e78f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e793:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c000e79a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e79e:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000e7a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7ac:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c000e7b6:	e8 dd fa ff ff       	call   c000e298 <scanMADT()>
c000e7bb:	90                   	nop
c000e7bc:	83 c4 0c             	add    esp,0xc
c000e7bf:	c3                   	ret    

c000e7c0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c000e7c0:	83 ec 2c             	sub    esp,0x2c
c000e7c3:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000e7c7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e7cb:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000e7cf:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c000e7d3:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000e7d8:	88 d0                	mov    al,dl
c000e7da:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000e7de:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000e7e3:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000e7eb:	90                   	nop
c000e7ec:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e7f0:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000e7f6:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000e7fa:	0f 8d 9c 00 00 00    	jge    c000e89c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xdc>
c000e800:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e804:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e808:	83 c2 2a             	add    edx,0x2a
c000e80b:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c000e80f:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c000e814:	75 7a                	jne    c000e890 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c000e816:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e81a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e81e:	83 c2 2a             	add    edx,0x2a
c000e821:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c000e825:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c000e829:	75 65                	jne    c000e890 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c000e82b:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c000e830:	74 3a                	je     c000e86c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xac>
c000e832:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e836:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e83a:	83 c2 2a             	add    edx,0x2a
c000e83d:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c000e841:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e845:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e848:	39 c2                	cmp    edx,eax
c000e84a:	74 10                	je     c000e85c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9c>
c000e84c:	83 ec 0c             	sub    esp,0xc
c000e84f:	68 a8 ea 01 c0       	push   0xc001eaa8
c000e854:	e8 4e 1a 00 00       	call   c00102a7 <KePanic(char const*)>
c000e859:	83 c4 10             	add    esp,0x10
c000e85c:	83 ec 0c             	sub    esp,0xc
c000e85f:	68 32 eb 01 c0       	push   0xc001eb32
c000e864:	e8 3e 1a 00 00       	call   c00102a7 <KePanic(char const*)>
c000e869:	83 c4 10             	add    esp,0x10
c000e86c:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000e870:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e874:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e878:	83 c2 2a             	add    edx,0x2a
c000e87b:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c000e87f:	8b 02                	mov    eax,DWORD PTR [edx]
c000e881:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000e884:	89 01                	mov    DWORD PTR [ecx],eax
c000e886:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000e889:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000e88e:	66 90                	xchg   ax,ax
c000e890:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000e894:	e9 53 ff ff ff       	jmp    c000e7ec <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c000e899:	8d 76 00             	lea    esi,[esi+0x0]
c000e89c:	90                   	nop
c000e89d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e8a1:	83 c4 2c             	add    esp,0x2c
c000e8a4:	c2 04 00             	ret    0x4
c000e8a7:	90                   	nop

c000e8a8 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c000e8a8:	83 ec 1c             	sub    esp,0x1c
c000e8ab:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e8af:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000e8b3:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000e8b7:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000e8bc:	88 c8                	mov    al,cl
c000e8be:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000e8c2:	88 d0                	mov    al,dl
c000e8c4:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000e8c8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e8cc:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000e8d2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e8d6:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000e8d9:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c000e8dd:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c000e8e1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e8e5:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000e8eb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000e8ef:	8d 48 2a             	lea    ecx,[eax+0x2a]
c000e8f2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e8f6:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c000e8fb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e8ff:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000e905:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000e909:	8d 48 01             	lea    ecx,[eax+0x1]
c000e90c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e910:	83 c2 2a             	add    edx,0x2a
c000e913:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c000e917:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e91b:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000e921:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e925:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000e928:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000e92c:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c000e930:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e934:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000e93a:	8d 50 01             	lea    edx,[eax+0x1]
c000e93d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e941:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c000e947:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e94b:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000e951:	3d 00 02 00 00       	cmp    eax,0x200
c000e956:	75 10                	jne    c000e968 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c000e958:	83 ec 0c             	sub    esp,0xc
c000e95b:	68 41 eb 01 c0       	push   0xc001eb41
c000e960:	e8 42 19 00 00       	call   c00102a7 <KePanic(char const*)>
c000e965:	83 c4 10             	add    esp,0x10
c000e968:	90                   	nop
c000e969:	83 c4 1c             	add    esp,0x1c
c000e96c:	c3                   	ret    
c000e96d:	90                   	nop
c000e96e:	66 90                	xchg   ax,ax

c000e970 <ACPI::setScreenBrightnessLevel(void*, int)>:
c000e970:	b8 00 00 00 00       	mov    eax,0x0
c000e975:	c3                   	ret    
c000e976:	66 90                	xchg   ax,ax

c000e978 <ACPI::detectPCI()>:
c000e978:	53                   	push   ebx
c000e979:	83 ec 28             	sub    esp,0x28
c000e97c:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000e981:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c000e986:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c000e98b:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e991:	83 e0 04             	and    eax,0x4
c000e994:	84 c0                	test   al,al
c000e996:	74 2c                	je     c000e9c4 <ACPI::detectPCI()+0x4c>
c000e998:	a1 c8 56 02 c0       	mov    eax,ds:0xc00256c8
c000e99d:	83 ec 08             	sub    esp,0x8
c000e9a0:	68 5e eb 01 c0       	push   0xc001eb5e
c000e9a5:	50                   	push   eax
c000e9a6:	e8 75 f8 ff ff       	call   c000e220 <findDataTable(unsigned char*, char*)>
c000e9ab:	83 c4 10             	add    esp,0x10
c000e9ae:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e9b2:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000e9b7:	74 0b                	je     c000e9c4 <ACPI::detectPCI()+0x4c>
c000e9b9:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000e9be:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000e9c3:	90                   	nop
c000e9c4:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c000e9cc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e9d0:	8a 00                	mov    al,BYTE PTR [eax]
c000e9d2:	3c 01                	cmp    al,0x1
c000e9d4:	75 0e                	jne    c000e9e4 <ACPI::detectPCI()+0x6c>
c000e9d6:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000e9db:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000e9e0:	eb 2a                	jmp    c000ea0c <ACPI::detectPCI()+0x94>
c000e9e2:	66 90                	xchg   ax,ax
c000e9e4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e9e8:	8a 00                	mov    al,BYTE PTR [eax]
c000e9ea:	3c 02                	cmp    al,0x2
c000e9ec:	75 1e                	jne    c000ea0c <ACPI::detectPCI()+0x94>
c000e9ee:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000e9f3:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c000e9f8:	74 12                	je     c000ea0c <ACPI::detectPCI()+0x94>
c000e9fa:	83 ec 0c             	sub    esp,0xc
c000e9fd:	68 d8 ea 01 c0       	push   0xc001ead8
c000ea02:	e8 a0 18 00 00       	call   c00102a7 <KePanic(char const*)>
c000ea07:	83 c4 10             	add    esp,0x10
c000ea0a:	66 90                	xchg   ax,ax
c000ea0c:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000ea10:	83 f0 01             	xor    eax,0x1
c000ea13:	84 c0                	test   al,al
c000ea15:	74 41                	je     c000ea58 <ACPI::detectPCI()+0xe0>
c000ea17:	e8 14 17 ff ff       	call   c0000130 <manualPCIProbe>
c000ea1c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ea20:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000ea25:	75 0d                	jne    c000ea34 <ACPI::detectPCI()+0xbc>
c000ea27:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000ea2c:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000ea31:	eb 25                	jmp    c000ea58 <ACPI::detectPCI()+0xe0>
c000ea33:	90                   	nop
c000ea34:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c000ea39:	75 1d                	jne    c000ea58 <ACPI::detectPCI()+0xe0>
c000ea3b:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000ea40:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c000ea45:	74 11                	je     c000ea58 <ACPI::detectPCI()+0xe0>
c000ea47:	83 ec 0c             	sub    esp,0xc
c000ea4a:	68 d8 ea 01 c0       	push   0xc001ead8
c000ea4f:	e8 53 18 00 00       	call   c00102a7 <KePanic(char const*)>
c000ea54:	83 c4 10             	add    esp,0x10
c000ea57:	90                   	nop
c000ea58:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c000ea5d:	0f 84 85 00 00 00    	je     c000eae8 <ACPI::detectPCI()+0x170>
c000ea63:	83 ec 0c             	sub    esp,0xc
c000ea66:	68 63 eb 01 c0       	push   0xc001eb63
c000ea6b:	e8 bf 11 00 00       	call   c000fc2f <KeSetBootMessage(char const*)>
c000ea70:	83 c4 10             	add    esp,0x10
c000ea73:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000ea7b:	83 ec 0c             	sub    esp,0xc
c000ea7e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000ea82:	e8 32 8d ff ff       	call   c00077b9 <malloc>
c000ea87:	83 c4 10             	add    esp,0x10
c000ea8a:	89 c3                	mov    ebx,eax
c000ea8c:	83 ec 0c             	sub    esp,0xc
c000ea8f:	53                   	push   ebx
c000ea90:	e8 79 9a 00 00       	call   c001850e <PCI::PCI()>
c000ea95:	83 c4 10             	add    esp,0x10
c000ea98:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000ea9c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000eaa0:	83 ec 08             	sub    esp,0x8
c000eaa3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000eaa7:	50                   	push   eax
c000eaa8:	e8 2f cf ff ff       	call   c000b9dc <Device::addChild(Device*)>
c000eaad:	83 c4 10             	add    esp,0x10
c000eab0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000eab4:	8b 00                	mov    eax,DWORD PTR [eax]
c000eab6:	83 c0 08             	add    eax,0x8
c000eab9:	8b 00                	mov    eax,DWORD PTR [eax]
c000eabb:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c000eac0:	74 0a                	je     c000eacc <ACPI::detectPCI()+0x154>
c000eac2:	ba 01 00 00 00       	mov    edx,0x1
c000eac7:	eb 0b                	jmp    c000ead4 <ACPI::detectPCI()+0x15c>
c000eac9:	8d 76 00             	lea    esi,[esi+0x0]
c000eacc:	ba 02 00 00 00       	mov    edx,0x2
c000ead1:	8d 76 00             	lea    esi,[esi+0x0]
c000ead4:	6a 00                	push   0x0
c000ead6:	6a 00                	push   0x0
c000ead8:	52                   	push   edx
c000ead9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000eadd:	ff d0                	call   eax
c000eadf:	83 c4 10             	add    esp,0x10
c000eae2:	e9 91 00 00 00       	jmp    c000eb78 <ACPI::detectPCI()+0x200>
c000eae7:	90                   	nop
c000eae8:	83 ec 0c             	sub    esp,0xc
c000eaeb:	68 7b eb 01 c0       	push   0xc001eb7b
c000eaf0:	e8 3a 11 00 00       	call   c000fc2f <KeSetBootMessage(char const*)>
c000eaf5:	83 c4 10             	add    esp,0x10
c000eaf8:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c000eaff:	83 ec 0c             	sub    esp,0xc
c000eb02:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000eb06:	e8 ae 8c ff ff       	call   c00077b9 <malloc>
c000eb0b:	83 c4 10             	add    esp,0x10
c000eb0e:	89 c3                	mov    ebx,eax
c000eb10:	83 ec 0c             	sub    esp,0xc
c000eb13:	53                   	push   ebx
c000eb14:	e8 21 a5 00 00       	call   c001903a <IDE::IDE()>
c000eb19:	83 c4 10             	add    esp,0x10
c000eb1c:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000eb20:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000eb24:	83 ec 08             	sub    esp,0x8
c000eb27:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000eb2b:	50                   	push   eax
c000eb2c:	e8 ab ce ff ff       	call   c000b9dc <Device::addChild(Device*)>
c000eb31:	83 c4 10             	add    esp,0x10
c000eb34:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eb38:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c000eb42:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eb46:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c000eb4f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eb53:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c000eb5c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eb60:	8b 00                	mov    eax,DWORD PTR [eax]
c000eb62:	83 c0 08             	add    eax,0x8
c000eb65:	8b 00                	mov    eax,DWORD PTR [eax]
c000eb67:	6a 00                	push   0x0
c000eb69:	6a 00                	push   0x0
c000eb6b:	6a 00                	push   0x0
c000eb6d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000eb71:	ff d0                	call   eax
c000eb73:	83 c4 10             	add    esp,0x10
c000eb76:	66 90                	xchg   ax,ax
c000eb78:	90                   	nop
c000eb79:	83 c4 28             	add    esp,0x28
c000eb7c:	5b                   	pop    ebx
c000eb7d:	c3                   	ret    
c000eb7e:	66 90                	xchg   ax,ax

c000eb80 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c000eb80:	83 ec 1c             	sub    esp,0x1c
c000eb83:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000eb87:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000eb8a:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000eb8e:	8b 15 b8 2e 02 c0    	mov    edx,DWORD PTR ds:0xc0022eb8
c000eb94:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000eb98:	25 ff 00 00 00       	and    eax,0xff
c000eb9d:	83 ec 08             	sub    esp,0x8
c000eba0:	50                   	push   eax
c000eba1:	52                   	push   edx
c000eba2:	e8 ff 82 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c000eba7:	83 c4 10             	add    esp,0x10
c000ebaa:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000ebae:	8b 15 b8 2e 02 c0    	mov    edx,DWORD PTR ds:0xc0022eb8
c000ebb4:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000ebb8:	25 ff 00 00 00       	and    eax,0xff
c000ebbd:	83 ec 04             	sub    esp,0x4
c000ebc0:	6a 01                	push   0x1
c000ebc2:	50                   	push   eax
c000ebc3:	52                   	push   edx
c000ebc4:	e8 f3 83 ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c000ebc9:	83 c4 10             	add    esp,0x10
c000ebcc:	90                   	nop
c000ebcd:	83 c4 1c             	add    esp,0x1c
c000ebd0:	c3                   	ret    
c000ebd1:	90                   	nop
c000ebd2:	66 90                	xchg   ax,ax

c000ebd4 <ACPI::sleep()>:
c000ebd4:	83 ec 0c             	sub    esp,0xc
c000ebd7:	a1 a0 54 02 c0       	mov    eax,ds:0xc00254a0
c000ebdc:	85 c0                	test   eax,eax
c000ebde:	74 08                	je     c000ebe8 <ACPI::sleep()+0x14>
c000ebe0:	a1 a0 54 02 c0       	mov    eax,ds:0xc00254a0
c000ebe5:	ff d0                	call   eax
c000ebe7:	90                   	nop
c000ebe8:	90                   	nop
c000ebe9:	83 c4 0c             	add    esp,0xc
c000ebec:	c3                   	ret    
c000ebed:	90                   	nop
c000ebee:	66 90                	xchg   ax,ax

c000ebf0 <ACPI::open(int, int, void*)>:
c000ebf0:	57                   	push   edi
c000ebf1:	56                   	push   esi
c000ebf2:	53                   	push   ebx
c000ebf3:	81 ec 70 01 00 00    	sub    esp,0x170
c000ebf9:	83 ec 0c             	sub    esp,0xc
c000ebfc:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000ec03:	e8 70 fd ff ff       	call   c000e978 <ACPI::detectPCI()>
c000ec08:	83 c4 10             	add    esp,0x10
c000ec0b:	83 ec 0c             	sub    esp,0xc
c000ec0e:	68 00 eb 01 c0       	push   0xc001eb00
c000ec13:	e8 17 10 00 00       	call   c000fc2f <KeSetBootMessage(char const*)>
c000ec18:	83 c4 10             	add    esp,0x10
c000ec1b:	83 ec 0c             	sub    esp,0xc
c000ec1e:	68 90 eb 01 c0       	push   0xc001eb90
c000ec23:	e8 fb 36 00 00       	call   c0012323 <Thr::loadKernelSymbolTable(char const*)>
c000ec28:	83 c4 10             	add    esp,0x10
c000ec2b:	c6 84 24 6f 01 00 00 00 	mov    BYTE PTR [esp+0x16f],0x0
c000ec33:	c7 84 24 44 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x144],0x114
c000ec3e:	83 ec 0c             	sub    esp,0xc
c000ec41:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000ec48:	e8 6c 8b ff ff       	call   c00077b9 <malloc>
c000ec4d:	83 c4 10             	add    esp,0x10
c000ec50:	89 c3                	mov    ebx,eax
c000ec52:	a1 90 61 02 c0       	mov    eax,ds:0xc0026190
c000ec57:	83 ec 04             	sub    esp,0x4
c000ec5a:	50                   	push   eax
c000ec5b:	68 ae eb 01 c0       	push   0xc001ebae
c000ec60:	53                   	push   ebx
c000ec61:	e8 62 be ff ff       	call   c000aac8 <File::File(char const*, Process*)>
c000ec66:	83 c4 10             	add    esp,0x10
c000ec69:	89 9c 24 68 01 00 00 	mov    DWORD PTR [esp+0x168],ebx
c000ec70:	83 ec 08             	sub    esp,0x8
c000ec73:	6a 01                	push   0x1
c000ec75:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000ec7c:	e8 07 bf ff ff       	call   c000ab88 <File::open(FileOpenMode)>
c000ec81:	83 c4 10             	add    esp,0x10
c000ec84:	89 84 24 64 01 00 00 	mov    DWORD PTR [esp+0x164],eax
c000ec8b:	83 bc 24 64 01 00 00 00 	cmp    DWORD PTR [esp+0x164],0x0
c000ec93:	75 17                	jne    c000ecac <ACPI::open(int, int, void*)+0xbc>
c000ec95:	83 ec 0c             	sub    esp,0xc
c000ec98:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000ec9f:	e8 42 bf ff ff       	call   c000abe6 <File::close()>
c000eca4:	83 c4 10             	add    esp,0x10
c000eca7:	eb 0b                	jmp    c000ecb4 <ACPI::open(int, int, void*)+0xc4>
c000eca9:	8d 76 00             	lea    esi,[esi+0x0]
c000ecac:	c6 84 24 6f 01 00 00 01 	mov    BYTE PTR [esp+0x16f],0x1
c000ecb4:	83 bc 24 68 01 00 00 00 	cmp    DWORD PTR [esp+0x168],0x0
c000ecbc:	74 1e                	je     c000ecdc <ACPI::open(int, int, void*)+0xec>
c000ecbe:	8b 84 24 68 01 00 00 	mov    eax,DWORD PTR [esp+0x168]
c000ecc5:	8b 00                	mov    eax,DWORD PTR [eax]
c000ecc7:	83 c0 08             	add    eax,0x8
c000ecca:	8b 00                	mov    eax,DWORD PTR [eax]
c000eccc:	83 ec 0c             	sub    esp,0xc
c000eccf:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000ecd6:	ff d0                	call   eax
c000ecd8:	83 c4 10             	add    esp,0x10
c000ecdb:	90                   	nop
c000ecdc:	8a 84 24 6f 01 00 00 	mov    al,BYTE PTR [esp+0x16f]
c000ece3:	83 f0 01             	xor    eax,0x1
c000ece6:	84 c0                	test   al,al
c000ece8:	74 42                	je     c000ed2c <ACPI::open(int, int, void*)+0x13c>
c000ecea:	83 ec 0c             	sub    esp,0xc
c000eced:	68 cc eb 01 c0       	push   0xc001ebcc
c000ecf2:	e8 38 0f 00 00       	call   c000fc2f <KeSetBootMessage(char const*)>
c000ecf7:	83 c4 10             	add    esp,0x10
c000ecfa:	83 ec 04             	sub    esp,0x4
c000ecfd:	6a 0c                	push   0xc
c000ecff:	68 e7 eb 01 c0       	push   0xc001ebe7
c000ed04:	68 f8 eb 01 c0       	push   0xc001ebf8
c000ed09:	e8 17 2c 00 00       	call   c0011925 <Reg::readIntWithDefault(char*, char*, int)>
c000ed0e:	83 c4 10             	add    esp,0x10
c000ed11:	89 84 24 60 01 00 00 	mov    DWORD PTR [esp+0x160],eax
c000ed18:	83 ec 0c             	sub    esp,0xc
c000ed1b:	ff b4 24 6c 01 00 00 	push   DWORD PTR [esp+0x16c]
c000ed22:	e8 78 a7 ff ff       	call   c000949f <Virt::setupPageSwapping(int)>
c000ed27:	83 c4 10             	add    esp,0x10
c000ed2a:	66 90                	xchg   ax,ax
c000ed2c:	83 ec 0c             	sub    esp,0xc
c000ed2f:	68 77 dc 01 c0       	push   0xc001dc77
c000ed34:	e8 f6 0e 00 00       	call   c000fc2f <KeSetBootMessage(char const*)>
c000ed39:	83 c4 10             	add    esp,0x10
c000ed3c:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c000ed43:	83 ec 08             	sub    esp,0x8
c000ed46:	6a 12                	push   0x12
c000ed48:	50                   	push   eax
c000ed49:	e8 a6 cf ff ff       	call   c000bcf4 <getDevicesOfType(DeviceType)>
c000ed4e:	83 c4 0c             	add    esp,0xc
c000ed51:	8d 76 00             	lea    esi,[esi+0x0]
c000ed54:	83 ec 0c             	sub    esp,0xc
c000ed57:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000ed5e:	50                   	push   eax
c000ed5f:	e8 58 e3 00 00       	call   c001d0bc <LinkedList<Device>::isEmpty()>
c000ed64:	83 c4 10             	add    esp,0x10
c000ed67:	83 f0 01             	xor    eax,0x1
c000ed6a:	84 c0                	test   al,al
c000ed6c:	0f 84 46 01 00 00    	je     c000eeb8 <ACPI::open(int, int, void*)+0x2c8>
c000ed72:	83 ec 0c             	sub    esp,0xc
c000ed75:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000ed7c:	50                   	push   eax
c000ed7d:	e8 56 e3 00 00       	call   c001d0d8 <LinkedList<Device>::getFirstElement()>
c000ed82:	83 c4 10             	add    esp,0x10
c000ed85:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c000ed8c:	83 ec 0c             	sub    esp,0xc
c000ed8f:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000ed96:	50                   	push   eax
c000ed97:	e8 44 e3 00 00       	call   c001d0e0 <LinkedList<Device>::removeFirst()>
c000ed9c:	83 c4 10             	add    esp,0x10
c000ed9f:	8b 84 24 5c 01 00 00 	mov    eax,DWORD PTR [esp+0x15c]
c000eda6:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c000edad:	8b 94 24 58 01 00 00 	mov    edx,DWORD PTR [esp+0x158]
c000edb4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000edb8:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c000edbe:	ba 09 00 00 00       	mov    edx,0x9
c000edc3:	fc                   	cld    
c000edc4:	89 c7                	mov    edi,eax
c000edc6:	89 de                	mov    esi,ebx
c000edc8:	89 d1                	mov    ecx,edx
c000edca:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000edcc:	83 ec 08             	sub    esp,0x8
c000edcf:	8d 44 24 38          	lea    eax,[esp+0x38]
c000edd3:	50                   	push   eax
c000edd4:	83 ec 24             	sub    esp,0x24
c000edd7:	89 e0                	mov    eax,esp
c000edd9:	89 c3                	mov    ebx,eax
c000eddb:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c000eddf:	ba 09 00 00 00       	mov    edx,0x9
c000ede4:	89 df                	mov    edi,ebx
c000ede6:	89 c6                	mov    esi,eax
c000ede8:	89 d1                	mov    ecx,edx
c000edea:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000edec:	e8 ff 9b 00 00       	call   c00189f0 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c000edf1:	83 c4 30             	add    esp,0x30
c000edf4:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c000edfb:	83 bc 24 54 01 00 00 00 	cmp    DWORD PTR [esp+0x154],0x0
c000ee03:	0f 84 4b ff ff ff    	je     c000ed54 <ACPI::open(int, int, void*)+0x164>
c000ee09:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c000ee14:	83 ec 0c             	sub    esp,0xc
c000ee17:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000ee1e:	e8 96 89 ff ff       	call   c00077b9 <malloc>
c000ee23:	83 c4 10             	add    esp,0x10
c000ee26:	89 c3                	mov    ebx,eax
c000ee28:	a1 90 61 02 c0       	mov    eax,ds:0xc0026190
c000ee2d:	83 ec 04             	sub    esp,0x4
c000ee30:	50                   	push   eax
c000ee31:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000ee38:	53                   	push   ebx
c000ee39:	e8 8a bc ff ff       	call   c000aac8 <File::File(char const*, Process*)>
c000ee3e:	83 c4 10             	add    esp,0x10
c000ee41:	89 9c 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],ebx
c000ee48:	83 ec 0c             	sub    esp,0xc
c000ee4b:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000ee52:	e8 9f bf ff ff       	call   c000adf6 <File::exists()>
c000ee57:	83 c4 10             	add    esp,0x10
c000ee5a:	84 c0                	test   al,al
c000ee5c:	74 2a                	je     c000ee88 <ACPI::open(int, int, void*)+0x298>
c000ee5e:	83 ec 08             	sub    esp,0x8
c000ee61:	6a 01                	push   0x1
c000ee63:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000ee6a:	e8 2b 3f 00 00       	call   c0012d9a <Thr::loadDLL(char const*, bool)>
c000ee6f:	83 c4 10             	add    esp,0x10
c000ee72:	83 ec 08             	sub    esp,0x8
c000ee75:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000ee7c:	50                   	push   eax
c000ee7d:	e8 49 41 00 00       	call   c0012fcb <Thr::executeDLL(unsigned long, void*)>
c000ee82:	83 c4 10             	add    esp,0x10
c000ee85:	8d 76 00             	lea    esi,[esi+0x0]
c000ee88:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c000ee90:	0f 84 be fe ff ff    	je     c000ed54 <ACPI::open(int, int, void*)+0x164>
c000ee96:	8b 84 24 50 01 00 00 	mov    eax,DWORD PTR [esp+0x150]
c000ee9d:	8b 00                	mov    eax,DWORD PTR [eax]
c000ee9f:	83 c0 08             	add    eax,0x8
c000eea2:	8b 00                	mov    eax,DWORD PTR [eax]
c000eea4:	83 ec 0c             	sub    esp,0xc
c000eea7:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000eeae:	ff d0                	call   eax
c000eeb0:	83 c4 10             	add    esp,0x10
c000eeb3:	e9 9c fe ff ff       	jmp    c000ed54 <ACPI::open(int, int, void*)+0x164>
c000eeb8:	83 ec 0c             	sub    esp,0xc
c000eebb:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000eec2:	50                   	push   eax
c000eec3:	e8 f0 e1 00 00       	call   c001d0b8 <LinkedList<Device>::~LinkedList()>
c000eec8:	83 c4 10             	add    esp,0x10
c000eecb:	8b 1d b8 2e 02 c0    	mov    ebx,DWORD PTR ds:0xc0022eb8
c000eed1:	83 ec 08             	sub    esp,0x8
c000eed4:	6a 01                	push   0x1
c000eed6:	68 ff eb 01 c0       	push   0xc001ebff
c000eedb:	e8 ba 3e 00 00       	call   c0012d9a <Thr::loadDLL(char const*, bool)>
c000eee0:	83 c4 10             	add    esp,0x10
c000eee3:	83 ec 08             	sub    esp,0x8
c000eee6:	53                   	push   ebx
c000eee7:	50                   	push   eax
c000eee8:	e8 de 40 00 00       	call   c0012fcb <Thr::executeDLL(unsigned long, void*)>
c000eeed:	83 c4 10             	add    esp,0x10
c000eef0:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c000eef5:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000eefb:	83 e0 04             	and    eax,0x4
c000eefe:	84 c0                	test   al,al
c000ef00:	0f 84 16 01 00 00    	je     c000f01c <ACPI::open(int, int, void*)+0x42c>
c000ef06:	83 ec 0c             	sub    esp,0xc
c000ef09:	68 1c ec 01 c0       	push   0xc001ec1c
c000ef0e:	e8 1c 0d 00 00       	call   c000fc2f <KeSetBootMessage(char const*)>
c000ef13:	83 c4 10             	add    esp,0x10
c000ef16:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c000ef21:	83 ec 0c             	sub    esp,0xc
c000ef24:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c000ef2b:	e8 89 88 ff ff       	call   c00077b9 <malloc>
c000ef30:	83 c4 10             	add    esp,0x10
c000ef33:	89 c3                	mov    ebx,eax
c000ef35:	a1 90 61 02 c0       	mov    eax,ds:0xc0026190
c000ef3a:	83 ec 04             	sub    esp,0x4
c000ef3d:	50                   	push   eax
c000ef3e:	68 39 ec 01 c0       	push   0xc001ec39
c000ef43:	53                   	push   ebx
c000ef44:	e8 7f bb ff ff       	call   c000aac8 <File::File(char const*, Process*)>
c000ef49:	83 c4 10             	add    esp,0x10
c000ef4c:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c000ef53:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000ef5b:	74 1b                	je     c000ef78 <ACPI::open(int, int, void*)+0x388>
c000ef5d:	83 ec 0c             	sub    esp,0xc
c000ef60:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000ef67:	e8 8a be ff ff       	call   c000adf6 <File::exists()>
c000ef6c:	83 c4 10             	add    esp,0x10
c000ef6f:	84 c0                	test   al,al
c000ef71:	74 05                	je     c000ef78 <ACPI::open(int, int, void*)+0x388>
c000ef73:	b0 01                	mov    al,0x1
c000ef75:	eb 05                	jmp    c000ef7c <ACPI::open(int, int, void*)+0x38c>
c000ef77:	90                   	nop
c000ef78:	b0 00                	mov    al,0x0
c000ef7a:	66 90                	xchg   ax,ax
c000ef7c:	84 c0                	test   al,al
c000ef7e:	74 28                	je     c000efa8 <ACPI::open(int, int, void*)+0x3b8>
c000ef80:	83 ec 08             	sub    esp,0x8
c000ef83:	6a 01                	push   0x1
c000ef85:	68 39 ec 01 c0       	push   0xc001ec39
c000ef8a:	e8 0b 3e 00 00       	call   c0012d9a <Thr::loadDLL(char const*, bool)>
c000ef8f:	83 c4 10             	add    esp,0x10
c000ef92:	83 ec 08             	sub    esp,0x8
c000ef95:	ff b4 24 88 01 00 00 	push   DWORD PTR [esp+0x188]
c000ef9c:	50                   	push   eax
c000ef9d:	e8 29 40 00 00       	call   c0012fcb <Thr::executeDLL(unsigned long, void*)>
c000efa2:	83 c4 10             	add    esp,0x10
c000efa5:	8d 76 00             	lea    esi,[esi+0x0]
c000efa8:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000efb0:	74 2a                	je     c000efdc <ACPI::open(int, int, void*)+0x3ec>
c000efb2:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000efba:	74 20                	je     c000efdc <ACPI::open(int, int, void*)+0x3ec>
c000efbc:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c000efc3:	8b 00                	mov    eax,DWORD PTR [eax]
c000efc5:	83 c0 08             	add    eax,0x8
c000efc8:	8b 00                	mov    eax,DWORD PTR [eax]
c000efca:	83 ec 0c             	sub    esp,0xc
c000efcd:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000efd4:	ff d0                	call   eax
c000efd6:	83 c4 10             	add    esp,0x10
c000efd9:	8d 76 00             	lea    esi,[esi+0x0]
c000efdc:	a1 c8 56 02 c0       	mov    eax,ds:0xc00256c8
c000efe1:	83 ec 08             	sub    esp,0x8
c000efe4:	68 56 ec 01 c0       	push   0xc001ec56
c000efe9:	50                   	push   eax
c000efea:	e8 31 f2 ff ff       	call   c000e220 <findDataTable(unsigned char*, char*)>
c000efef:	83 c4 10             	add    esp,0x10
c000eff2:	89 84 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],eax
c000eff9:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c000f001:	74 19                	je     c000f01c <ACPI::open(int, int, void*)+0x42c>
c000f003:	83 ec 08             	sub    esp,0x8
c000f006:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000f00d:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000f014:	e8 67 fb ff ff       	call   c000eb80 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c000f019:	83 c4 10             	add    esp,0x10
c000f01c:	b8 00 00 00 00       	mov    eax,0x0
c000f021:	81 c4 70 01 00 00    	add    esp,0x170
c000f027:	5b                   	pop    ebx
c000f028:	5e                   	pop    esi
c000f029:	5f                   	pop    edi
c000f02a:	c3                   	ret    
c000f02b:	90                   	nop

c000f02c <CPU::close(int, int, void*)>:
c000f02c:	31 c0                	xor    eax,eax
c000f02e:	c3                   	ret    
c000f02f:	90                   	nop

c000f030 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c000f030:	60                   	pusha  
c000f031:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f035:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f039:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f03d:	9c                   	pushf  
c000f03e:	fa                   	cli    
c000f03f:	0f 09                	wbinvd 
c000f041:	0f 30                	wrmsr  
c000f043:	9d                   	popf   
c000f044:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f048:	89 02                	mov    DWORD PTR [edx],eax
c000f04a:	61                   	popa   
c000f04b:	c3                   	ret    

c000f04c <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c000f04c:	60                   	pusha  
c000f04d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f051:	9c                   	pushf  
c000f052:	fa                   	cli    
c000f053:	0f 09                	wbinvd 
c000f055:	31 c0                	xor    eax,eax
c000f057:	31 d2                	xor    edx,edx
c000f059:	0f 32                	rdmsr  
c000f05b:	9d                   	popf   
c000f05c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f060:	89 02                	mov    DWORD PTR [edx],eax
c000f062:	61                   	popa   
c000f063:	c3                   	ret    

c000f064 <CPU::AMD_K6_writeback(int, int, int)>:
c000f064:	56                   	push   esi
c000f065:	53                   	push   ebx
c000f066:	83 ec 10             	sub    esp,0x10
c000f069:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f06d:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c000f072:	75 5d                	jne    c000f0d1 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000f074:	83 f8 08             	cmp    eax,0x8
c000f077:	75 09                	jne    c000f082 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c000f079:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c000f07e:	7e 13                	jle    c000f093 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000f080:	eb 30                	jmp    c000f0b2 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000f082:	83 f8 06             	cmp    eax,0x6
c000f085:	7c 4a                	jl     c000f0d1 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000f087:	83 f8 07             	cmp    eax,0x7
c000f08a:	7e 07                	jle    c000f093 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000f08c:	83 f8 09             	cmp    eax,0x9
c000f08f:	74 21                	je     c000f0b2 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000f091:	eb 3e                	jmp    c000f0d1 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000f093:	89 e6                	mov    esi,esp
c000f095:	8b 1d dc 2e 02 c0    	mov    ebx,DWORD PTR ds:0xc0022edc
c000f09b:	56                   	push   esi
c000f09c:	c1 eb 15             	shr    ebx,0x15
c000f09f:	68 82 00 00 c0       	push   0xc0000082
c000f0a4:	83 e3 7e             	and    ebx,0x7e
c000f0a7:	e8 a0 ff ff ff       	call   c000f04c <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000f0ac:	56                   	push   esi
c000f0ad:	6a 00                	push   0x0
c000f0af:	53                   	push   ebx
c000f0b0:	eb 12                	jmp    c000f0c4 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c000f0b2:	89 e3                	mov    ebx,esp
c000f0b4:	53                   	push   ebx
c000f0b5:	68 82 00 00 c0       	push   0xc0000082
c000f0ba:	e8 8d ff ff ff       	call   c000f04c <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000f0bf:	53                   	push   ebx
c000f0c0:	6a 00                	push   0x0
c000f0c2:	6a 00                	push   0x0
c000f0c4:	68 82 00 00 c0       	push   0xc0000082
c000f0c9:	e8 62 ff ff ff       	call   c000f030 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c000f0ce:	83 c4 18             	add    esp,0x18
c000f0d1:	83 c4 10             	add    esp,0x10
c000f0d4:	5b                   	pop    ebx
c000f0d5:	5e                   	pop    esi
c000f0d6:	c3                   	ret    
c000f0d7:	90                   	nop

c000f0d8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c000f0d8:	55                   	push   ebp
c000f0d9:	57                   	push   edi
c000f0da:	56                   	push   esi
c000f0db:	53                   	push   ebx
c000f0dc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f0e0:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000f0e4:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000f0e8:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c000f0ec:	39 05 50 ff 01 c0    	cmp    DWORD PTR ds:0xc001ff50,eax
c000f0f2:	75 23                	jne    c000f117 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c000f0f4:	a1 2c 59 02 c0       	mov    eax,ds:0xc002592c
c000f0f9:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000f0fd:	89 06                	mov    DWORD PTR [esi],eax
c000f0ff:	a1 28 59 02 c0       	mov    eax,ds:0xc0025928
c000f104:	89 07                	mov    DWORD PTR [edi],eax
c000f106:	a1 24 59 02 c0       	mov    eax,ds:0xc0025924
c000f10b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000f10e:	a1 20 59 02 c0       	mov    eax,ds:0xc0025920
c000f113:	89 02                	mov    DWORD PTR [edx],eax
c000f115:	eb 3f                	jmp    c000f156 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c000f117:	31 c9                	xor    ecx,ecx
c000f119:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f11d:	0f a2                	cpuid  
c000f11f:	89 06                	mov    DWORD PTR [esi],eax
c000f121:	89 1f                	mov    DWORD PTR [edi],ebx
c000f123:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f127:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c000f12a:	89 10                	mov    DWORD PTR [eax],edx
c000f12c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f130:	a3 50 ff 01 c0       	mov    ds:0xc001ff50,eax
c000f135:	8b 06                	mov    eax,DWORD PTR [esi]
c000f137:	a3 2c 59 02 c0       	mov    ds:0xc002592c,eax
c000f13c:	8b 07                	mov    eax,DWORD PTR [edi]
c000f13e:	a3 28 59 02 c0       	mov    ds:0xc0025928,eax
c000f143:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000f146:	a3 24 59 02 c0       	mov    ds:0xc0025924,eax
c000f14b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f14f:	8b 00                	mov    eax,DWORD PTR [eax]
c000f151:	a3 20 59 02 c0       	mov    ds:0xc0025920,eax
c000f156:	5b                   	pop    ebx
c000f157:	5e                   	pop    esi
c000f158:	5f                   	pop    edi
c000f159:	5d                   	pop    ebp
c000f15a:	c3                   	ret    
c000f15b:	90                   	nop

c000f15c <CPU::cpuidCheckEDX(unsigned int)>:
c000f15c:	83 ec 10             	sub    esp,0x10
c000f15f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f163:	50                   	push   eax
c000f164:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f168:	50                   	push   eax
c000f169:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f16d:	50                   	push   eax
c000f16e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f172:	50                   	push   eax
c000f173:	6a 01                	push   0x1
c000f175:	e8 5e ff ff ff       	call   c000f0d8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f17a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f17e:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c000f182:	0f 95 c0             	setne  al
c000f185:	83 c4 24             	add    esp,0x24
c000f188:	c3                   	ret    
c000f189:	90                   	nop

c000f18a <CPU::cpuidCheckECX(unsigned int)>:
c000f18a:	83 ec 10             	sub    esp,0x10
c000f18d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f191:	50                   	push   eax
c000f192:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f196:	50                   	push   eax
c000f197:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f19b:	50                   	push   eax
c000f19c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f1a0:	50                   	push   eax
c000f1a1:	6a 01                	push   0x1
c000f1a3:	e8 30 ff ff ff       	call   c000f0d8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f1a8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f1ac:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c000f1b0:	0f 95 c0             	setne  al
c000f1b3:	83 c4 24             	add    esp,0x24
c000f1b6:	c3                   	ret    
c000f1b7:	90                   	nop

c000f1b8 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c000f1b8:	83 ec 10             	sub    esp,0x10
c000f1bb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f1bf:	50                   	push   eax
c000f1c0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f1c4:	50                   	push   eax
c000f1c5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f1c9:	50                   	push   eax
c000f1ca:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f1ce:	50                   	push   eax
c000f1cf:	6a 07                	push   0x7
c000f1d1:	e8 02 ff ff ff       	call   c000f0d8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f1d6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f1da:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c000f1de:	0f 95 c0             	setne  al
c000f1e1:	83 c4 24             	add    esp,0x24
c000f1e4:	c3                   	ret    
c000f1e5:	90                   	nop

c000f1e6 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c000f1e6:	83 ec 10             	sub    esp,0x10
c000f1e9:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f1ed:	50                   	push   eax
c000f1ee:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f1f2:	50                   	push   eax
c000f1f3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f1f7:	50                   	push   eax
c000f1f8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f1fc:	50                   	push   eax
c000f1fd:	6a 07                	push   0x7
c000f1ff:	e8 d4 fe ff ff       	call   c000f0d8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f204:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f208:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c000f20c:	0f 95 c0             	setne  al
c000f20f:	83 c4 24             	add    esp,0x24
c000f212:	c3                   	ret    
c000f213:	90                   	nop

c000f214 <CPU::CPU()>:
c000f214:	83 ec 0c             	sub    esp,0xc
c000f217:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f21b:	83 ec 08             	sub    esp,0x8
c000f21e:	68 79 ed 01 c0       	push   0xc001ed79
c000f223:	50                   	push   eax
c000f224:	e8 4b c9 ff ff       	call   c000bb74 <Device::Device(char const*)>
c000f229:	83 c4 10             	add    esp,0x10
c000f22c:	ba 00 ee 01 c0       	mov    edx,0xc001ee00
c000f231:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f235:	89 10                	mov    DWORD PTR [eax],edx
c000f237:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f23b:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c000f245:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f249:	05 78 01 00 00       	add    eax,0x178
c000f24e:	83 ec 0c             	sub    esp,0xc
c000f251:	50                   	push   eax
c000f252:	e8 23 7e ff ff       	call   c000707a <GDT::GDT()>
c000f257:	83 c4 10             	add    esp,0x10
c000f25a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f25e:	05 7c 09 00 00       	add    eax,0x97c
c000f263:	83 ec 0c             	sub    esp,0xc
c000f266:	50                   	push   eax
c000f267:	e8 48 80 ff ff       	call   c00072b4 <IDT::IDT()>
c000f26c:	83 c4 10             	add    esp,0x10
c000f26f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f273:	05 7c 11 00 00       	add    eax,0x117c
c000f278:	83 ec 0c             	sub    esp,0xc
c000f27b:	50                   	push   eax
c000f27c:	e8 57 99 ff ff       	call   c0008bd8 <TSS::TSS()>
c000f281:	83 c4 10             	add    esp,0x10
c000f284:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f288:	c6 80 90 11 00 00 00 	mov    BYTE PTR [eax+0x1190],0x0
c000f28f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f293:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c000f29d:	90                   	nop
c000f29e:	83 c4 0c             	add    esp,0xc
c000f2a1:	c3                   	ret    

c000f2a2 <CPU::displayFeatures()>:
c000f2a2:	c3                   	ret    
c000f2a3:	90                   	nop

c000f2a4 <CPU::detectFeatures()>:
c000f2a4:	55                   	push   ebp
c000f2a5:	57                   	push   edi
c000f2a6:	56                   	push   esi
c000f2a7:	53                   	push   ebx
c000f2a8:	83 ec 30             	sub    esp,0x30
c000f2ab:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000f2af:	81 a3 8c 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x118c],0xfff80700
c000f2b9:	c6 83 90 11 00 00 01 	mov    BYTE PTR [ebx+0x1190],0x1
c000f2c0:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c000f2c6:	6a 0d                	push   0xd
c000f2c8:	6a 00                	push   0x0
c000f2ca:	55                   	push   ebp
c000f2cb:	e8 00 12 ff ff       	call   c00004d0 <memset>
c000f2d0:	83 c4 10             	add    esp,0x10
c000f2d3:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c000f2d8:	f6 80 6c 01 00 00 02 	test   BYTE PTR [eax+0x16c],0x2
c000f2df:	0f 84 d5 05 00 00    	je     c000f8ba <CPU::detectFeatures()+0x616>
c000f2e5:	83 ec 0c             	sub    esp,0xc
c000f2e8:	89 ef                	mov    edi,ebp
c000f2ea:	6a 10                	push   0x10
c000f2ec:	e8 6b fe ff ff       	call   c000f15c <CPU::cpuidCheckEDX(unsigned int)>
c000f2f1:	83 e0 01             	and    eax,0x1
c000f2f4:	8d 14 00             	lea    edx,[eax+eax*1]
c000f2f7:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f2fd:	83 e0 fd             	and    eax,0xfffffffd
c000f300:	09 d0                	or     eax,edx
c000f302:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f308:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c000f30f:	e8 48 fe ff ff       	call   c000f15c <CPU::cpuidCheckEDX(unsigned int)>
c000f314:	83 e0 01             	and    eax,0x1
c000f317:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000f31e:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f324:	83 e0 fb             	and    eax,0xfffffffb
c000f327:	09 d0                	or     eax,edx
c000f329:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f32f:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f336:	e8 21 fe ff ff       	call   c000f15c <CPU::cpuidCheckEDX(unsigned int)>
c000f33b:	83 e0 01             	and    eax,0x1
c000f33e:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000f345:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f34b:	83 e0 f7             	and    eax,0xfffffff7
c000f34e:	09 d0                	or     eax,edx
c000f350:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f356:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c000f35d:	e8 fa fd ff ff       	call   c000f15c <CPU::cpuidCheckEDX(unsigned int)>
c000f362:	83 e0 01             	and    eax,0x1
c000f365:	c1 e0 04             	shl    eax,0x4
c000f368:	88 c2                	mov    dl,al
c000f36a:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f370:	83 e0 ef             	and    eax,0xffffffef
c000f373:	09 d0                	or     eax,edx
c000f375:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f37b:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c000f382:	e8 d5 fd ff ff       	call   c000f15c <CPU::cpuidCheckEDX(unsigned int)>
c000f387:	83 e0 01             	and    eax,0x1
c000f38a:	c1 e0 05             	shl    eax,0x5
c000f38d:	88 c2                	mov    dl,al
c000f38f:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f395:	83 e0 df             	and    eax,0xffffffdf
c000f398:	09 d0                	or     eax,edx
c000f39a:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f3a0:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000f3a7:	e8 b0 fd ff ff       	call   c000f15c <CPU::cpuidCheckEDX(unsigned int)>
c000f3ac:	83 e0 01             	and    eax,0x1
c000f3af:	8d 14 00             	lea    edx,[eax+eax*1]
c000f3b2:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000f3b8:	83 e0 fd             	and    eax,0xfffffffd
c000f3bb:	09 d0                	or     eax,edx
c000f3bd:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000f3c3:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c000f3ca:	e8 8d fd ff ff       	call   c000f15c <CPU::cpuidCheckEDX(unsigned int)>
c000f3cf:	83 e0 01             	and    eax,0x1
c000f3d2:	c1 e0 06             	shl    eax,0x6
c000f3d5:	88 c2                	mov    dl,al
c000f3d7:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000f3dd:	83 e0 bf             	and    eax,0xffffffbf
c000f3e0:	09 d0                	or     eax,edx
c000f3e2:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000f3e8:	58                   	pop    eax
c000f3e9:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f3ed:	50                   	push   eax
c000f3ee:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f3f2:	50                   	push   eax
c000f3f3:	8d 74 24 28          	lea    esi,[esp+0x28]
c000f3f7:	56                   	push   esi
c000f3f8:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f3fc:	50                   	push   eax
c000f3fd:	6a 00                	push   0x0
c000f3ff:	e8 d4 fc ff ff       	call   c000f0d8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f404:	b8 04 00 00 00       	mov    eax,0x4
c000f409:	89 c1                	mov    ecx,eax
c000f40b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f40d:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c000f413:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c000f417:	89 c1                	mov    ecx,eax
c000f419:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f41b:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c000f421:	8d 74 24 38          	lea    esi,[esp+0x38]
c000f425:	89 c1                	mov    ecx,eax
c000f427:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f429:	83 c4 18             	add    esp,0x18
c000f42c:	68 88 ec 01 c0       	push   0xc001ec88
c000f431:	55                   	push   ebp
c000f432:	e8 a9 12 ff ff       	call   c00006e0 <strcmp>
c000f437:	83 c4 10             	add    esp,0x10
c000f43a:	85 c0                	test   eax,eax
c000f43c:	75 0f                	jne    c000f44d <CPU::detectFeatures()+0x1a9>
c000f43e:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c000f448:	e9 22 02 00 00       	jmp    c000f66f <CPU::detectFeatures()+0x3cb>
c000f44d:	50                   	push   eax
c000f44e:	50                   	push   eax
c000f44f:	68 95 ec 01 c0       	push   0xc001ec95
c000f454:	55                   	push   ebp
c000f455:	e8 86 12 ff ff       	call   c00006e0 <strcmp>
c000f45a:	83 c4 10             	add    esp,0x10
c000f45d:	85 c0                	test   eax,eax
c000f45f:	74 dd                	je     c000f43e <CPU::detectFeatures()+0x19a>
c000f461:	50                   	push   eax
c000f462:	50                   	push   eax
c000f463:	68 a2 ec 01 c0       	push   0xc001eca2
c000f468:	55                   	push   ebp
c000f469:	e8 72 12 ff ff       	call   c00006e0 <strcmp>
c000f46e:	83 c4 10             	add    esp,0x10
c000f471:	85 c0                	test   eax,eax
c000f473:	74 2a                	je     c000f49f <CPU::detectFeatures()+0x1fb>
c000f475:	50                   	push   eax
c000f476:	50                   	push   eax
c000f477:	68 af ec 01 c0       	push   0xc001ecaf
c000f47c:	55                   	push   ebp
c000f47d:	e8 5e 12 ff ff       	call   c00006e0 <strcmp>
c000f482:	83 c4 10             	add    esp,0x10
c000f485:	85 c0                	test   eax,eax
c000f487:	74 16                	je     c000f49f <CPU::detectFeatures()+0x1fb>
c000f489:	50                   	push   eax
c000f48a:	50                   	push   eax
c000f48b:	68 bc ec 01 c0       	push   0xc001ecbc
c000f490:	55                   	push   ebp
c000f491:	e8 4a 12 ff ff       	call   c00006e0 <strcmp>
c000f496:	83 c4 10             	add    esp,0x10
c000f499:	85 c0                	test   eax,eax
c000f49b:	74 48                	je     c000f4e5 <CPU::detectFeatures()+0x241>
c000f49d:	eb 0f                	jmp    c000f4ae <CPU::detectFeatures()+0x20a>
c000f49f:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c000f4a9:	e9 c1 01 00 00       	jmp    c000f66f <CPU::detectFeatures()+0x3cb>
c000f4ae:	50                   	push   eax
c000f4af:	50                   	push   eax
c000f4b0:	68 c9 ec 01 c0       	push   0xc001ecc9
c000f4b5:	55                   	push   ebp
c000f4b6:	e8 25 12 ff ff       	call   c00006e0 <strcmp>
c000f4bb:	83 c4 10             	add    esp,0x10
c000f4be:	85 c0                	test   eax,eax
c000f4c0:	74 23                	je     c000f4e5 <CPU::detectFeatures()+0x241>
c000f4c2:	57                   	push   edi
c000f4c3:	57                   	push   edi
c000f4c4:	68 d6 ec 01 c0       	push   0xc001ecd6
c000f4c9:	55                   	push   ebp
c000f4ca:	e8 11 12 ff ff       	call   c00006e0 <strcmp>
c000f4cf:	83 c4 10             	add    esp,0x10
c000f4d2:	85 c0                	test   eax,eax
c000f4d4:	75 1e                	jne    c000f4f4 <CPU::detectFeatures()+0x250>
c000f4d6:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c000f4e0:	e9 8a 01 00 00       	jmp    c000f66f <CPU::detectFeatures()+0x3cb>
c000f4e5:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c000f4ef:	e9 7b 01 00 00       	jmp    c000f66f <CPU::detectFeatures()+0x3cb>
c000f4f4:	56                   	push   esi
c000f4f5:	56                   	push   esi
c000f4f6:	68 e3 ec 01 c0       	push   0xc001ece3
c000f4fb:	55                   	push   ebp
c000f4fc:	e8 df 11 ff ff       	call   c00006e0 <strcmp>
c000f501:	83 c4 10             	add    esp,0x10
c000f504:	85 c0                	test   eax,eax
c000f506:	75 0f                	jne    c000f517 <CPU::detectFeatures()+0x273>
c000f508:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c000f512:	e9 58 01 00 00       	jmp    c000f66f <CPU::detectFeatures()+0x3cb>
c000f517:	51                   	push   ecx
c000f518:	51                   	push   ecx
c000f519:	68 a2 ec 01 c0       	push   0xc001eca2
c000f51e:	55                   	push   ebp
c000f51f:	e8 bc 11 ff ff       	call   c00006e0 <strcmp>
c000f524:	83 c4 10             	add    esp,0x10
c000f527:	85 c0                	test   eax,eax
c000f529:	75 0f                	jne    c000f53a <CPU::detectFeatures()+0x296>
c000f52b:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c000f535:	e9 35 01 00 00       	jmp    c000f66f <CPU::detectFeatures()+0x3cb>
c000f53a:	52                   	push   edx
c000f53b:	52                   	push   edx
c000f53c:	68 f0 ec 01 c0       	push   0xc001ecf0
c000f541:	55                   	push   ebp
c000f542:	e8 99 11 ff ff       	call   c00006e0 <strcmp>
c000f547:	83 c4 10             	add    esp,0x10
c000f54a:	85 c0                	test   eax,eax
c000f54c:	75 0f                	jne    c000f55d <CPU::detectFeatures()+0x2b9>
c000f54e:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c000f558:	e9 12 01 00 00       	jmp    c000f66f <CPU::detectFeatures()+0x3cb>
c000f55d:	50                   	push   eax
c000f55e:	50                   	push   eax
c000f55f:	68 fd ec 01 c0       	push   0xc001ecfd
c000f564:	55                   	push   ebp
c000f565:	e8 76 11 ff ff       	call   c00006e0 <strcmp>
c000f56a:	83 c4 10             	add    esp,0x10
c000f56d:	85 c0                	test   eax,eax
c000f56f:	75 0f                	jne    c000f580 <CPU::detectFeatures()+0x2dc>
c000f571:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c000f57b:	e9 ef 00 00 00       	jmp    c000f66f <CPU::detectFeatures()+0x3cb>
c000f580:	50                   	push   eax
c000f581:	50                   	push   eax
c000f582:	68 0a ed 01 c0       	push   0xc001ed0a
c000f587:	55                   	push   ebp
c000f588:	e8 53 11 ff ff       	call   c00006e0 <strcmp>
c000f58d:	83 c4 10             	add    esp,0x10
c000f590:	85 c0                	test   eax,eax
c000f592:	75 0f                	jne    c000f5a3 <CPU::detectFeatures()+0x2ff>
c000f594:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c000f59e:	e9 cc 00 00 00       	jmp    c000f66f <CPU::detectFeatures()+0x3cb>
c000f5a3:	50                   	push   eax
c000f5a4:	50                   	push   eax
c000f5a5:	68 17 ed 01 c0       	push   0xc001ed17
c000f5aa:	55                   	push   ebp
c000f5ab:	e8 30 11 ff ff       	call   c00006e0 <strcmp>
c000f5b0:	83 c4 10             	add    esp,0x10
c000f5b3:	85 c0                	test   eax,eax
c000f5b5:	75 0f                	jne    c000f5c6 <CPU::detectFeatures()+0x322>
c000f5b7:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c000f5c1:	e9 a9 00 00 00       	jmp    c000f66f <CPU::detectFeatures()+0x3cb>
c000f5c6:	50                   	push   eax
c000f5c7:	50                   	push   eax
c000f5c8:	68 24 ed 01 c0       	push   0xc001ed24
c000f5cd:	55                   	push   ebp
c000f5ce:	e8 0d 11 ff ff       	call   c00006e0 <strcmp>
c000f5d3:	83 c4 10             	add    esp,0x10
c000f5d6:	85 c0                	test   eax,eax
c000f5d8:	75 0f                	jne    c000f5e9 <CPU::detectFeatures()+0x345>
c000f5da:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c000f5e4:	e9 86 00 00 00       	jmp    c000f66f <CPU::detectFeatures()+0x3cb>
c000f5e9:	50                   	push   eax
c000f5ea:	50                   	push   eax
c000f5eb:	68 31 ed 01 c0       	push   0xc001ed31
c000f5f0:	55                   	push   ebp
c000f5f1:	e8 ea 10 ff ff       	call   c00006e0 <strcmp>
c000f5f6:	83 c4 10             	add    esp,0x10
c000f5f9:	85 c0                	test   eax,eax
c000f5fb:	75 0c                	jne    c000f609 <CPU::detectFeatures()+0x365>
c000f5fd:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c000f607:	eb 66                	jmp    c000f66f <CPU::detectFeatures()+0x3cb>
c000f609:	50                   	push   eax
c000f60a:	50                   	push   eax
c000f60b:	68 3e ed 01 c0       	push   0xc001ed3e
c000f610:	55                   	push   ebp
c000f611:	e8 ca 10 ff ff       	call   c00006e0 <strcmp>
c000f616:	83 c4 10             	add    esp,0x10
c000f619:	85 c0                	test   eax,eax
c000f61b:	75 0c                	jne    c000f629 <CPU::detectFeatures()+0x385>
c000f61d:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c000f627:	eb 46                	jmp    c000f66f <CPU::detectFeatures()+0x3cb>
c000f629:	57                   	push   edi
c000f62a:	57                   	push   edi
c000f62b:	68 4b ed 01 c0       	push   0xc001ed4b
c000f630:	55                   	push   ebp
c000f631:	e8 aa 10 ff ff       	call   c00006e0 <strcmp>
c000f636:	83 c4 10             	add    esp,0x10
c000f639:	85 c0                	test   eax,eax
c000f63b:	74 e0                	je     c000f61d <CPU::detectFeatures()+0x379>
c000f63d:	56                   	push   esi
c000f63e:	56                   	push   esi
c000f63f:	68 58 ed 01 c0       	push   0xc001ed58
c000f644:	55                   	push   ebp
c000f645:	e8 96 10 ff ff       	call   c00006e0 <strcmp>
c000f64a:	83 c4 10             	add    esp,0x10
c000f64d:	85 c0                	test   eax,eax
c000f64f:	74 cc                	je     c000f61d <CPU::detectFeatures()+0x379>
c000f651:	51                   	push   ecx
c000f652:	51                   	push   ecx
c000f653:	68 65 ed 01 c0       	push   0xc001ed65
c000f658:	55                   	push   ebp
c000f659:	e8 82 10 ff ff       	call   c00006e0 <strcmp>
c000f65e:	83 c4 10             	add    esp,0x10
c000f661:	85 c0                	test   eax,eax
c000f663:	74 b8                	je     c000f61d <CPU::detectFeatures()+0x379>
c000f665:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c000f66f:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c000f674:	0f 86 be 00 00 00    	jbe    c000f738 <CPU::detectFeatures()+0x494>
c000f67a:	83 ec 0c             	sub    esp,0xc
c000f67d:	68 80 00 00 00       	push   0x80
c000f682:	e8 31 fb ff ff       	call   c000f1b8 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000f687:	83 e0 01             	and    eax,0x1
c000f68a:	c1 e0 06             	shl    eax,0x6
c000f68d:	88 c2                	mov    dl,al
c000f68f:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f695:	83 e0 bf             	and    eax,0xffffffbf
c000f698:	09 d0                	or     eax,edx
c000f69a:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f6a0:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c000f6a7:	e8 0c fb ff ff       	call   c000f1b8 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000f6ac:	83 e0 01             	and    eax,0x1
c000f6af:	c1 e0 04             	shl    eax,0x4
c000f6b2:	88 c2                	mov    dl,al
c000f6b4:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000f6ba:	83 e0 ef             	and    eax,0xffffffef
c000f6bd:	09 d0                	or     eax,edx
c000f6bf:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000f6c5:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c000f6cc:	e8 e7 fa ff ff       	call   c000f1b8 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000f6d1:	c1 e0 07             	shl    eax,0x7
c000f6d4:	88 c2                	mov    dl,al
c000f6d6:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f6dc:	83 e0 7f             	and    eax,0x7f
c000f6df:	09 d0                	or     eax,edx
c000f6e1:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f6e7:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c000f6ee:	e8 f3 fa ff ff       	call   c000f1e6 <CPU::cpuidCheckExtendedECX(unsigned int)>
c000f6f3:	83 e0 01             	and    eax,0x1
c000f6f6:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000f6fd:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000f703:	83 e0 f7             	and    eax,0xfffffff7
c000f706:	09 d0                	or     eax,edx
c000f708:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000f70e:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c000f715:	e8 cc fa ff ff       	call   c000f1e6 <CPU::cpuidCheckExtendedECX(unsigned int)>
c000f71a:	83 c4 10             	add    esp,0x10
c000f71d:	83 e0 01             	and    eax,0x1
c000f720:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000f727:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000f72d:	83 e0 fb             	and    eax,0xfffffffb
c000f730:	09 d0                	or     eax,edx
c000f732:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000f738:	83 ec 0c             	sub    esp,0xc
c000f73b:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f73f:	50                   	push   eax
c000f740:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f744:	50                   	push   eax
c000f745:	8d 74 24 28          	lea    esi,[esp+0x28]
c000f749:	56                   	push   esi
c000f74a:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f74e:	50                   	push   eax
c000f74f:	6a 01                	push   0x1
c000f751:	e8 82 f9 ff ff       	call   c000f0d8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f756:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f75a:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c000f760:	88 ca                	mov    dl,cl
c000f762:	83 e0 f0             	and    eax,0xfffffff0
c000f765:	83 e2 0f             	and    edx,0xf
c000f768:	09 d0                	or     eax,edx
c000f76a:	88 ca                	mov    dl,cl
c000f76c:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c000f772:	c0 ea 04             	shr    dl,0x4
c000f775:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c000f779:	0f b6 c2             	movzx  eax,dl
c000f77c:	83 c4 20             	add    esp,0x20
c000f77f:	c1 e0 06             	shl    eax,0x6
c000f782:	89 c7                	mov    edi,eax
c000f784:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000f78a:	66 25 3f c0          	and    ax,0xc03f
c000f78e:	09 f8                	or     eax,edi
c000f790:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c000f797:	89 c8                	mov    eax,ecx
c000f799:	0f b6 ab 5d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15d]
c000f7a0:	c1 e8 08             	shr    eax,0x8
c000f7a3:	83 e5 3f             	and    ebp,0x3f
c000f7a6:	83 e0 0f             	and    eax,0xf
c000f7a9:	89 c7                	mov    edi,eax
c000f7ab:	c1 e7 06             	shl    edi,0x6
c000f7ae:	09 ef                	or     edi,ebp
c000f7b0:	0f b6 ab 5e 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15e]
c000f7b7:	89 fa                	mov    edx,edi
c000f7b9:	83 e5 c0             	and    ebp,0xffffffc0
c000f7bc:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c000f7c2:	88 c2                	mov    dl,al
c000f7c4:	c0 ea 02             	shr    dl,0x2
c000f7c7:	89 d7                	mov    edi,edx
c000f7c9:	09 ef                	or     edi,ebp
c000f7cb:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c000f7d1:	89 fa                	mov    edx,edi
c000f7d3:	83 e5 cf             	and    ebp,0xffffffcf
c000f7d6:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c000f7dc:	89 cf                	mov    edi,ecx
c000f7de:	c1 ef 0c             	shr    edi,0xc
c000f7e1:	83 e7 03             	and    edi,0x3
c000f7e4:	c1 e7 04             	shl    edi,0x4
c000f7e7:	09 ef                	or     edi,ebp
c000f7e9:	3c 06                	cmp    al,0x6
c000f7eb:	89 fa                	mov    edx,edi
c000f7ed:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c000f7f3:	74 04                	je     c000f7f9 <CPU::detectFeatures()+0x555>
c000f7f5:	3c 0f                	cmp    al,0xf
c000f7f7:	75 5c                	jne    c000f855 <CPU::detectFeatures()+0x5b1>
c000f7f9:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000f7fd:	89 cf                	mov    edi,ecx
c000f7ff:	c1 ef 10             	shr    edi,0x10
c000f802:	c1 e7 04             	shl    edi,0x4
c000f805:	09 fa                	or     edx,edi
c000f807:	8b bb 5c 01 00 00    	mov    edi,DWORD PTR [ebx+0x15c]
c000f80d:	0f b6 d2             	movzx  edx,dl
c000f810:	66 81 e7 3f c0       	and    di,0xc03f
c000f815:	c1 e2 06             	shl    edx,0x6
c000f818:	09 fa                	or     edx,edi
c000f81a:	3c 0f                	cmp    al,0xf
c000f81c:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c000f823:	75 30                	jne    c000f855 <CPU::detectFeatures()+0x5b1>
c000f825:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c000f82b:	c1 e9 14             	shr    ecx,0x14
c000f82e:	83 e0 3f             	and    eax,0x3f
c000f831:	83 c1 0f             	add    ecx,0xf
c000f834:	88 ca                	mov    dl,cl
c000f836:	c0 e9 02             	shr    cl,0x2
c000f839:	c1 e2 06             	shl    edx,0x6
c000f83c:	09 d0                	or     eax,edx
c000f83e:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c000f844:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c000f84a:	83 e0 c0             	and    eax,0xffffffc0
c000f84d:	09 c1                	or     ecx,eax
c000f84f:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c000f855:	83 ec 0c             	sub    esp,0xc
c000f858:	80 8b 8d 11 00 00 07 	or     BYTE PTR [ebx+0x118d],0x7
c000f85f:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f863:	50                   	push   eax
c000f864:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c000f868:	55                   	push   ebp
c000f869:	56                   	push   esi
c000f86a:	8d 7c 24 28          	lea    edi,[esp+0x28]
c000f86e:	57                   	push   edi
c000f86f:	68 00 00 00 80       	push   0x80000000
c000f874:	e8 5f f8 ff ff       	call   c000f0d8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f879:	83 c4 20             	add    esp,0x20
c000f87c:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c000f884:	76 22                	jbe    c000f8a8 <CPU::detectFeatures()+0x604>
c000f886:	83 ec 0c             	sub    esp,0xc
c000f889:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f88d:	50                   	push   eax
c000f88e:	55                   	push   ebp
c000f88f:	56                   	push   esi
c000f890:	57                   	push   edi
c000f891:	68 01 00 00 80       	push   0x80000001
c000f896:	e8 3d f8 ff ff       	call   c000f0d8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f89b:	81 a3 8c 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x118c],0xfffe5fff
c000f8a5:	83 c4 20             	add    esp,0x20
c000f8a8:	52                   	push   edx
c000f8a9:	52                   	push   edx
c000f8aa:	68 71 ed 01 c0       	push   0xc001ed71
c000f8af:	53                   	push   ebx
c000f8b0:	e8 b1 c2 ff ff       	call   c000bb66 <Device::setName(char const*)>
c000f8b5:	83 c4 10             	add    esp,0x10
c000f8b8:	eb 67                	jmp    c000f921 <CPU::detectFeatures()+0x67d>
c000f8ba:	50                   	push   eax
c000f8bb:	50                   	push   eax
c000f8bc:	68 d6 ec 01 c0       	push   0xc001ecd6
c000f8c1:	55                   	push   ebp
c000f8c2:	e8 39 0d ff ff       	call   c0000600 <strcpy>
c000f8c7:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c000f8d1:	e8 ed 08 ff ff       	call   c00001c3 <is486>
c000f8d6:	83 c4 10             	add    esp,0x10
c000f8d9:	85 c0                	test   eax,eax
c000f8db:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000f8e1:	74 1d                	je     c000f900 <CPU::detectFeatures()+0x65c>
c000f8e3:	83 c8 07             	or     eax,0x7
c000f8e6:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000f8ec:	0f 20 c0             	mov    eax,cr0
c000f8ef:	83 e0 14             	and    eax,0x14
c000f8f2:	83 f8 04             	cmp    eax,0x4
c000f8f5:	75 0e                	jne    c000f905 <CPU::detectFeatures()+0x661>
c000f8f7:	80 a3 8e 11 00 00 fd 	and    BYTE PTR [ebx+0x118e],0xfd
c000f8fe:	eb 21                	jmp    c000f921 <CPU::detectFeatures()+0x67d>
c000f900:	83 e0 f8             	and    eax,0xfffffff8
c000f903:	eb e1                	jmp    c000f8e6 <CPU::detectFeatures()+0x642>
c000f905:	e8 94 08 ff ff       	call   c000019e <hasLegacyFPU>
c000f90a:	83 e0 01             	and    eax,0x1
c000f90d:	8d 14 00             	lea    edx,[eax+eax*1]
c000f910:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000f916:	83 e0 fd             	and    eax,0xfffffffd
c000f919:	09 d0                	or     eax,edx
c000f91b:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000f921:	f6 83 8e 11 00 00 02 	test   BYTE PTR [ebx+0x118e],0x2
c000f928:	74 0e                	je     c000f938 <CPU::detectFeatures()+0x694>
c000f92a:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c000f92f:	80 88 6c 01 00 00 10 	or     BYTE PTR [eax+0x16c],0x10
c000f936:	eb 20                	jmp    c000f958 <CPU::detectFeatures()+0x6b4>
c000f938:	e8 61 08 ff ff       	call   c000019e <hasLegacyFPU>
c000f93d:	83 e0 01             	and    eax,0x1
c000f940:	8d 14 00             	lea    edx,[eax+eax*1]
c000f943:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000f949:	83 e0 fd             	and    eax,0xfffffffd
c000f94c:	09 d0                	or     eax,edx
c000f94e:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000f954:	a8 02                	test   al,0x2
c000f956:	75 d2                	jne    c000f92a <CPU::detectFeatures()+0x686>
c000f958:	c6 83 90 11 00 00 00 	mov    BYTE PTR [ebx+0x1190],0x0
c000f95f:	83 c4 2c             	add    esp,0x2c
c000f962:	5b                   	pop    ebx
c000f963:	5e                   	pop    esi
c000f964:	5f                   	pop    edi
c000f965:	5d                   	pop    ebp
c000f966:	c3                   	ret    
c000f967:	90                   	nop

c000f968 <CPU::setupSMEP()>:
c000f968:	0f 20 e0             	mov    eax,cr4
c000f96b:	0d 00 00 10 00       	or     eax,0x100000
c000f970:	0f 22 e0             	mov    cr4,eax
c000f973:	c3                   	ret    

c000f974 <CPU::setupUMIP()>:
c000f974:	0f 20 e0             	mov    eax,cr4
c000f977:	80 cc 08             	or     ah,0x8
c000f97a:	0f 22 e0             	mov    cr4,eax
c000f97d:	c3                   	ret    

c000f97e <CPU::setupTSC()>:
c000f97e:	0f 20 e0             	mov    eax,cr4
c000f981:	83 c8 04             	or     eax,0x4
c000f984:	0f 22 e0             	mov    cr4,eax
c000f987:	c3                   	ret    

c000f988 <CPU::setupLargePages()>:
c000f988:	0f 20 e0             	mov    eax,cr4
c000f98b:	83 c8 10             	or     eax,0x10
c000f98e:	0f 22 e0             	mov    cr4,eax
c000f991:	c3                   	ret    

c000f992 <CPU::setupPAT()>:
c000f992:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c000f997:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c000f99e:	74 2c                	je     c000f9cc <CPU::setupPAT()+0x3a>
c000f9a0:	53                   	push   ebx
c000f9a1:	83 ec 10             	sub    esp,0x10
c000f9a4:	68 77 02 00 00       	push   0x277
c000f9a9:	50                   	push   eax
c000f9aa:	e8 43 74 ff ff       	call   c0006df2 <Computer::rdmsr(unsigned int)>
c000f9af:	83 e2 f8             	and    edx,0xfffffff8
c000f9b2:	83 ca 01             	or     edx,0x1
c000f9b5:	52                   	push   edx
c000f9b6:	50                   	push   eax
c000f9b7:	68 77 02 00 00       	push   0x277
c000f9bc:	ff 35 b8 2e 02 c0    	push   DWORD PTR ds:0xc0022eb8
c000f9c2:	e8 57 74 ff ff       	call   c0006e1e <Computer::wrmsr(unsigned int, unsigned long long)>
c000f9c7:	83 c4 28             	add    esp,0x28
c000f9ca:	5b                   	pop    ebx
c000f9cb:	c3                   	ret    
c000f9cc:	c3                   	ret    
c000f9cd:	90                   	nop

c000f9ce <CPU::setupMTRR()>:
c000f9ce:	c3                   	ret    
c000f9cf:	90                   	nop

c000f9d0 <CPU::setupGlobalPages()>:
c000f9d0:	0f 20 e0             	mov    eax,cr4
c000f9d3:	0c 80                	or     al,0x80
c000f9d5:	0f 22 e0             	mov    cr4,eax
c000f9d8:	c3                   	ret    
c000f9d9:	90                   	nop

c000f9da <CPU::allowUsermodeDataAccess()>:
c000f9da:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f9de:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c000f9e5:	74 03                	je     c000f9ea <CPU::allowUsermodeDataAccess()+0x10>
c000f9e7:	0f 01 cb             	stac   
c000f9ea:	c3                   	ret    
c000f9eb:	90                   	nop

c000f9ec <CPU::prohibitUsermodeDataAccess()>:
c000f9ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f9f0:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c000f9f7:	74 03                	je     c000f9fc <CPU::prohibitUsermodeDataAccess()+0x10>
c000f9f9:	0f 01 ca             	clac   
c000f9fc:	c3                   	ret    
c000f9fd:	90                   	nop

c000f9fe <CPU::setupSMAP()>:
c000f9fe:	0f 20 e0             	mov    eax,cr4
c000fa01:	0d 00 00 20 00       	or     eax,0x200000
c000fa06:	0f 22 e0             	mov    cr4,eax
c000fa09:	eb e1                	jmp    c000f9ec <CPU::prohibitUsermodeDataAccess()>
c000fa0b:	90                   	nop

c000fa0c <CPU::setupFeatures()>:
c000fa0c:	53                   	push   ebx
c000fa0d:	83 ec 08             	sub    esp,0x8
c000fa10:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fa14:	f6 83 8d 11 00 00 08 	test   BYTE PTR [ebx+0x118d],0x8
c000fa1b:	74 18                	je     c000fa35 <CPU::setupFeatures()+0x29>
c000fa1d:	83 ec 0c             	sub    esp,0xc
c000fa20:	68 7d ed 01 c0       	push   0xc001ed7d
c000fa25:	e8 28 ab ff ff       	call   c000a552 <Dbg::kprintf(char const*, ...)>
c000fa2a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fa2d:	e8 42 ff ff ff       	call   c000f974 <CPU::setupUMIP()>
c000fa32:	83 c4 10             	add    esp,0x10
c000fa35:	f6 83 8c 11 00 00 02 	test   BYTE PTR [ebx+0x118c],0x2
c000fa3c:	74 18                	je     c000fa56 <CPU::setupFeatures()+0x4a>
c000fa3e:	83 ec 0c             	sub    esp,0xc
c000fa41:	68 87 ed 01 c0       	push   0xc001ed87
c000fa46:	e8 07 ab ff ff       	call   c000a552 <Dbg::kprintf(char const*, ...)>
c000fa4b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fa4e:	e8 2b ff ff ff       	call   c000f97e <CPU::setupTSC()>
c000fa53:	83 c4 10             	add    esp,0x10
c000fa56:	f6 83 8c 11 00 00 08 	test   BYTE PTR [ebx+0x118c],0x8
c000fa5d:	74 18                	je     c000fa77 <CPU::setupFeatures()+0x6b>
c000fa5f:	83 ec 0c             	sub    esp,0xc
c000fa62:	68 90 ed 01 c0       	push   0xc001ed90
c000fa67:	e8 e6 aa ff ff       	call   c000a552 <Dbg::kprintf(char const*, ...)>
c000fa6c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fa6f:	e8 14 ff ff ff       	call   c000f988 <CPU::setupLargePages()>
c000fa74:	83 c4 10             	add    esp,0x10
c000fa77:	f6 83 8c 11 00 00 10 	test   BYTE PTR [ebx+0x118c],0x10
c000fa7e:	74 18                	je     c000fa98 <CPU::setupFeatures()+0x8c>
c000fa80:	83 ec 0c             	sub    esp,0xc
c000fa83:	68 99 ed 01 c0       	push   0xc001ed99
c000fa88:	e8 c5 aa ff ff       	call   c000a552 <Dbg::kprintf(char const*, ...)>
c000fa8d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fa90:	e8 3b ff ff ff       	call   c000f9d0 <CPU::setupGlobalPages()>
c000fa95:	83 c4 10             	add    esp,0x10
c000fa98:	f6 83 8c 11 00 00 20 	test   BYTE PTR [ebx+0x118c],0x20
c000fa9f:	74 18                	je     c000fab9 <CPU::setupFeatures()+0xad>
c000faa1:	83 ec 0c             	sub    esp,0xc
c000faa4:	68 ab ed 01 c0       	push   0xc001edab
c000faa9:	e8 a4 aa ff ff       	call   c000a552 <Dbg::kprintf(char const*, ...)>
c000faae:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fab1:	e8 dc fe ff ff       	call   c000f992 <CPU::setupPAT()>
c000fab6:	83 c4 10             	add    esp,0x10
c000fab9:	f6 83 8e 11 00 00 01 	test   BYTE PTR [ebx+0x118e],0x1
c000fac0:	74 11                	je     c000fad3 <CPU::setupFeatures()+0xc7>
c000fac2:	c7 44 24 10 b4 ed 01 c0 	mov    DWORD PTR [esp+0x10],0xc001edb4
c000faca:	83 c4 08             	add    esp,0x8
c000facd:	5b                   	pop    ebx
c000face:	e9 7f aa ff ff       	jmp    c000a552 <Dbg::kprintf(char const*, ...)>
c000fad3:	83 c4 08             	add    esp,0x8
c000fad6:	5b                   	pop    ebx
c000fad7:	c3                   	ret    

c000fad8 <CPU::open(int, int, void*)>:
c000fad8:	57                   	push   edi
c000fad9:	56                   	push   esi
c000fada:	53                   	push   ebx
c000fadb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fadf:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000fae3:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c000fae9:	83 ec 0c             	sub    esp,0xc
c000faec:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c000faf2:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c000faf8:	50                   	push   eax
c000faf9:	e8 de 75 ff ff       	call   c00070dc <GDT::setup()>
c000fafe:	83 c4 0c             	add    esp,0xc
c000fb01:	6a 00                	push   0x0
c000fb03:	68 ef be ad de       	push   0xdeadbeef
c000fb08:	57                   	push   edi
c000fb09:	e8 0e 91 ff ff       	call   c0008c1c <TSS::setup(unsigned long, unsigned long)>
c000fb0e:	89 3c 24             	mov    DWORD PTR [esp],edi
c000fb11:	e8 e6 90 ff ff       	call   c0008bfc <TSS::flush()>
c000fb16:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c000fb1c:	89 04 24             	mov    DWORD PTR [esp],eax
c000fb1f:	e8 06 78 ff ff       	call   c000732a <IDT::setup()>
c000fb24:	b8 00 04 00 00       	mov    eax,0x400
c000fb29:	0f 23 f8             	mov    db7,eax
c000fb2c:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c000fb36:	e8 5a 7f ff ff       	call   c0007a95 <Phys::allocatePage()>
c000fb3b:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c000fb41:	89 30                	mov    DWORD PTR [eax],esi
c000fb43:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c000fb49:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000fb4c:	58                   	pop    eax
c000fb4d:	5a                   	pop    edx
c000fb4e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c000fb54:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000fb58:	e8 d7 a0 ff ff       	call   c0009c34 <VAS::setCPUSpecific(unsigned long)>
c000fb5d:	c7 04 24 be ed 01 c0 	mov    DWORD PTR [esp],0xc001edbe
c000fb64:	e8 c6 00 00 00       	call   c000fc2f <KeSetBootMessage(char const*)>
c000fb69:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fb6c:	e8 33 f7 ff ff       	call   c000f2a4 <CPU::detectFeatures()>
c000fb71:	c7 04 24 e1 ed 01 c0 	mov    DWORD PTR [esp],0xc001ede1
c000fb78:	e8 b2 00 00 00       	call   c000fc2f <KeSetBootMessage(char const*)>
c000fb7d:	e8 4e 5b 00 00       	call   c00156d0 <HalInitialise()>
c000fb82:	a1 d0 2e 02 c0       	mov    eax,ds:0xc0022ed0
c000fb87:	83 e0 10             	and    eax,0x10
c000fb8a:	83 f8 01             	cmp    eax,0x1
c000fb8d:	19 c0                	sbb    eax,eax
c000fb8f:	83 e0 46             	and    eax,0x46
c000fb92:	83 c0 1e             	add    eax,0x1e
c000fb95:	89 04 24             	mov    DWORD PTR [esp],eax
c000fb98:	e8 c8 d6 ff ff       	call   c000d265 <setupTimer(int)>
c000fb9d:	83 c4 10             	add    esp,0x10
c000fba0:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c000fba6:	f6 05 d0 2e 02 c0 20 	test   BYTE PTR ds:0xc0022ed0,0x20
c000fbad:	74 0c                	je     c000fbbb <CPU::open(int, int, void*)+0xe3>
c000fbaf:	83 ec 0c             	sub    esp,0xc
c000fbb2:	53                   	push   ebx
c000fbb3:	e8 54 fe ff ff       	call   c000fa0c <CPU::setupFeatures()>
c000fbb8:	83 c4 10             	add    esp,0x10
c000fbbb:	5b                   	pop    ebx
c000fbbc:	31 c0                	xor    eax,eax
c000fbbe:	5e                   	pop    esi
c000fbbf:	5f                   	pop    edi
c000fbc0:	c3                   	ret    

c000fbc1 <KeDisplaySplashScreen()>:
c000fbc1:	55                   	push   ebp
c000fbc2:	bd 05 00 00 00       	mov    ebp,0x5
c000fbc7:	57                   	push   edi
c000fbc8:	bf 60 ff 01 c0       	mov    edi,0xc001ff60
c000fbcd:	56                   	push   esi
c000fbce:	be 0a 00 00 00       	mov    esi,0xa
c000fbd3:	53                   	push   ebx
c000fbd4:	31 db                	xor    ebx,ebx
c000fbd6:	83 ec 0c             	sub    esp,0xc
c000fbd9:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000fbdc:	84 c0                	test   al,al
c000fbde:	74 47                	je     c000fc27 <KeDisplaySplashScreen()+0x66>
c000fbe0:	80 bb 96 ff 01 c0 db 	cmp    BYTE PTR [ebx-0x3ffe006a],0xdb
c000fbe7:	75 13                	jne    c000fbfc <KeDisplaySplashScreen()+0x3b>
c000fbe9:	0f b6 93 95 ff 01 c0 	movzx  edx,BYTE PTR [ebx-0x3ffe006b]
c000fbf0:	83 e2 fe             	and    edx,0xfffffffe
c000fbf3:	81 fa ba 00 00 00    	cmp    edx,0xba
c000fbf9:	75 01                	jne    c000fbfc <KeDisplaySplashScreen()+0x3b>
c000fbfb:	46                   	inc    esi
c000fbfc:	3c 0d                	cmp    al,0xd
c000fbfe:	74 24                	je     c000fc24 <KeDisplaySplashScreen()+0x63>
c000fc00:	3c 0a                	cmp    al,0xa
c000fc02:	75 0a                	jne    c000fc0e <KeDisplaySplashScreen()+0x4d>
c000fc04:	45                   	inc    ebp
c000fc05:	be 0a 00 00 00       	mov    esi,0xa
c000fc0a:	31 db                	xor    ebx,ebx
c000fc0c:	eb 16                	jmp    c000fc24 <KeDisplaySplashScreen()+0x63>
c000fc0e:	83 ec 0c             	sub    esp,0xc
c000fc11:	8d 14 33             	lea    edx,[ebx+esi*1]
c000fc14:	55                   	push   ebp
c000fc15:	43                   	inc    ebx
c000fc16:	52                   	push   edx
c000fc17:	6a 00                	push   0x0
c000fc19:	6a 0e                	push   0xe
c000fc1b:	50                   	push   eax
c000fc1c:	e8 13 67 00 00       	call   c0016334 <HalConsoleWriteCharacter(char, int, int, int, int)>
c000fc21:	83 c4 20             	add    esp,0x20
c000fc24:	47                   	inc    edi
c000fc25:	eb b2                	jmp    c000fbd9 <KeDisplaySplashScreen()+0x18>
c000fc27:	83 c4 0c             	add    esp,0xc
c000fc2a:	5b                   	pop    ebx
c000fc2b:	5e                   	pop    esi
c000fc2c:	5f                   	pop    edi
c000fc2d:	5d                   	pop    ebp
c000fc2e:	c3                   	ret    

c000fc2f <KeSetBootMessage(char const*)>:
c000fc2f:	57                   	push   edi
c000fc30:	56                   	push   esi
c000fc31:	53                   	push   ebx
c000fc32:	81 ec a4 00 00 00    	sub    esp,0xa4
c000fc38:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c000fc3f:	68 9e 00 00 00       	push   0x9e
c000fc44:	6a 00                	push   0x0
c000fc46:	8d 74 24 0e          	lea    esi,[esp+0xe]
c000fc4a:	56                   	push   esi
c000fc4b:	e8 80 08 ff ff       	call   c00004d0 <memset>
c000fc50:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fc53:	e8 e8 08 ff ff       	call   c0000540 <strlen>
c000fc58:	ba 50 00 00 00       	mov    edx,0x50
c000fc5d:	83 c4 10             	add    esp,0x10
c000fc60:	29 c2                	sub    edx,eax
c000fc62:	31 c9                	xor    ecx,ecx
c000fc64:	83 e2 fe             	and    edx,0xfffffffe
c000fc67:	01 f2                	add    edx,esi
c000fc69:	66 0f be 04 0b       	movsx  ax,BYTE PTR [ebx+ecx*1]
c000fc6e:	84 c0                	test   al,al
c000fc70:	74 0a                	je     c000fc7c <KeSetBootMessage(char const*)+0x4d>
c000fc72:	80 cc 0f             	or     ah,0xf
c000fc75:	66 89 04 4a          	mov    WORD PTR [edx+ecx*2],ax
c000fc79:	41                   	inc    ecx
c000fc7a:	eb ed                	jmp    c000fc69 <KeSetBootMessage(char const*)+0x3a>
c000fc7c:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c000fc81:	b9 9e 00 00 00       	mov    ecx,0x9e
c000fc86:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fc88:	81 c4 a0 00 00 00    	add    esp,0xa0
c000fc8e:	5b                   	pop    ebx
c000fc8f:	5e                   	pop    esi
c000fc90:	5f                   	pop    edi
c000fc91:	c3                   	ret    

c000fc92 <EnvVarContainer::getEnv(char const*)>:
c000fc92:	57                   	push   edi
c000fc93:	56                   	push   esi
c000fc94:	53                   	push   ebx
c000fc95:	31 db                	xor    ebx,ebx
c000fc97:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000fc9b:	39 1e                	cmp    DWORD PTR [esi],ebx
c000fc9d:	7e 2b                	jle    c000fcca <EnvVarContainer::getEnv(char const*)+0x38>
c000fc9f:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c000fca6:	50                   	push   eax
c000fca7:	50                   	push   eax
c000fca8:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000fcab:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000fcae:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000fcb2:	e8 29 0a ff ff       	call   c00006e0 <strcmp>
c000fcb7:	83 c4 10             	add    esp,0x10
c000fcba:	85 c0                	test   eax,eax
c000fcbc:	75 09                	jne    c000fcc7 <EnvVarContainer::getEnv(char const*)+0x35>
c000fcbe:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000fcc1:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c000fcc5:	eb 05                	jmp    c000fccc <EnvVarContainer::getEnv(char const*)+0x3a>
c000fcc7:	43                   	inc    ebx
c000fcc8:	eb d1                	jmp    c000fc9b <EnvVarContainer::getEnv(char const*)+0x9>
c000fcca:	31 c0                	xor    eax,eax
c000fccc:	5b                   	pop    ebx
c000fccd:	5e                   	pop    esi
c000fcce:	5f                   	pop    edi
c000fccf:	c3                   	ret    

c000fcd0 <EnvVarContainer::setEnv(char const*, char const*)>:
c000fcd0:	55                   	push   ebp
c000fcd1:	57                   	push   edi
c000fcd2:	56                   	push   esi
c000fcd3:	53                   	push   ebx
c000fcd4:	83 ec 28             	sub    esp,0x28
c000fcd7:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000fcdb:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000fcdf:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000fce3:	56                   	push   esi
c000fce4:	e8 57 08 ff ff       	call   c0000540 <strlen>
c000fce9:	40                   	inc    eax
c000fcea:	89 04 24             	mov    DWORD PTR [esp],eax
c000fced:	e8 c7 7a ff ff       	call   c00077b9 <malloc>
c000fcf2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fcf5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fcf9:	e8 42 08 ff ff       	call   c0000540 <strlen>
c000fcfe:	40                   	inc    eax
c000fcff:	89 04 24             	mov    DWORD PTR [esp],eax
c000fd02:	e8 b2 7a ff ff       	call   c00077b9 <malloc>
c000fd07:	89 34 24             	mov    DWORD PTR [esp],esi
c000fd0a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000fd0e:	e8 2d 08 ff ff       	call   c0000540 <strlen>
c000fd13:	83 c4 0c             	add    esp,0xc
c000fd16:	40                   	inc    eax
c000fd17:	50                   	push   eax
c000fd18:	6a 00                	push   0x0
c000fd1a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000fd1e:	e8 ad 07 ff ff       	call   c00004d0 <memset>
c000fd23:	89 34 24             	mov    DWORD PTR [esp],esi
c000fd26:	e8 15 08 ff ff       	call   c0000540 <strlen>
c000fd2b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000fd2f:	8d 48 01             	lea    ecx,[eax+0x1]
c000fd32:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fd34:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fd37:	89 de                	mov    esi,ebx
c000fd39:	e8 02 08 ff ff       	call   c0000540 <strlen>
c000fd3e:	83 c4 0c             	add    esp,0xc
c000fd41:	40                   	inc    eax
c000fd42:	50                   	push   eax
c000fd43:	6a 00                	push   0x0
c000fd45:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fd49:	e8 82 07 ff ff       	call   c00004d0 <memset>
c000fd4e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fd51:	e8 ea 07 ff ff       	call   c0000540 <strlen>
c000fd56:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000fd5a:	8d 48 01             	lea    ecx,[eax+0x1]
c000fd5d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fd5f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000fd62:	40                   	inc    eax
c000fd63:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000fd66:	c1 e0 03             	shl    eax,0x3
c000fd69:	5a                   	pop    edx
c000fd6a:	59                   	pop    ecx
c000fd6b:	50                   	push   eax
c000fd6c:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000fd6f:	e8 31 7a ff ff       	call   c00077a5 <realloc>
c000fd74:	8d 74 24 18          	lea    esi,[esp+0x18]
c000fd78:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000fd7b:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000fd7e:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c000fd82:	b9 08 00 00 00       	mov    ecx,0x8
c000fd87:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fd89:	83 c4 2c             	add    esp,0x2c
c000fd8c:	5b                   	pop    ebx
c000fd8d:	5e                   	pop    esi
c000fd8e:	5f                   	pop    edi
c000fd8f:	5d                   	pop    ebp
c000fd90:	c3                   	ret    
c000fd91:	90                   	nop

c000fd92 <EnvVarContainer::deleteEnv(char const*)>:
c000fd92:	c3                   	ret    
c000fd93:	90                   	nop

c000fd94 <EnvVarContainer::loadFrom(char const*, char const*)>:
c000fd94:	55                   	push   ebp
c000fd95:	57                   	push   edi
c000fd96:	56                   	push   esi
c000fd97:	53                   	push   ebx
c000fd98:	81 ec 38 01 00 00    	sub    esp,0x138
c000fd9e:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c000fda5:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c000fdac:	68 14 01 00 00       	push   0x114
c000fdb1:	e8 03 7a ff ff       	call   c00077b9 <malloc>
c000fdb6:	83 c4 0c             	add    esp,0xc
c000fdb9:	89 c3                	mov    ebx,eax
c000fdbb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000fdbe:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000fdc5:	50                   	push   eax
c000fdc6:	e8 fd ac ff ff       	call   c000aac8 <File::File(char const*, Process*)>
c000fdcb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fdce:	e8 23 b0 ff ff       	call   c000adf6 <File::exists()>
c000fdd3:	83 c4 10             	add    esp,0x10
c000fdd6:	84 c0                	test   al,al
c000fdd8:	75 31                	jne    c000fe0b <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c000fdda:	50                   	push   eax
c000fddb:	50                   	push   eax
c000fddc:	6a 12                	push   0x12
c000fdde:	53                   	push   ebx
c000fddf:	e8 a4 ad ff ff       	call   c000ab88 <File::open(FileOpenMode)>
c000fde4:	8b 03                	mov    eax,DWORD PTR [ebx]
c000fde6:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000fde9:	89 34 24             	mov    DWORD PTR [esp],esi
c000fdec:	e8 4f 07 ff ff       	call   c0000540 <strlen>
c000fdf1:	5a                   	pop    edx
c000fdf2:	31 d2                	xor    edx,edx
c000fdf4:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000fdf8:	51                   	push   ecx
c000fdf9:	56                   	push   esi
c000fdfa:	52                   	push   edx
c000fdfb:	50                   	push   eax
c000fdfc:	53                   	push   ebx
c000fdfd:	ff d7                	call   edi
c000fdff:	83 c4 14             	add    esp,0x14
c000fe02:	53                   	push   ebx
c000fe03:	e8 de ad ff ff       	call   c000abe6 <File::close()>
c000fe08:	83 c4 10             	add    esp,0x10
c000fe0b:	56                   	push   esi
c000fe0c:	31 f6                	xor    esi,esi
c000fe0e:	68 00 01 00 00       	push   0x100
c000fe13:	6a 00                	push   0x0
c000fe15:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000fe19:	50                   	push   eax
c000fe1a:	e8 b1 06 ff ff       	call   c00004d0 <memset>
c000fe1f:	5f                   	pop    edi
c000fe20:	58                   	pop    eax
c000fe21:	6a 01                	push   0x1
c000fe23:	53                   	push   ebx
c000fe24:	e8 5f ad ff ff       	call   c000ab88 <File::open(FileOpenMode)>
c000fe29:	83 c4 10             	add    esp,0x10
c000fe2c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000fe34:	83 ec 0c             	sub    esp,0xc
c000fe37:	8b 03                	mov    eax,DWORD PTR [ebx]
c000fe39:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000fe3d:	51                   	push   ecx
c000fe3e:	8d 54 24 23          	lea    edx,[esp+0x23]
c000fe42:	52                   	push   edx
c000fe43:	6a 00                	push   0x0
c000fe45:	6a 01                	push   0x1
c000fe47:	53                   	push   ebx
c000fe48:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000fe4b:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c000fe4f:	83 c4 20             	add    esp,0x20
c000fe52:	3c 0d                	cmp    al,0xd
c000fe54:	0f 84 09 01 00 00    	je     c000ff63 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c000fe5a:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000fe5f:	0f 84 ef 00 00 00    	je     c000ff54 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c000fe65:	3c 0a                	cmp    al,0xa
c000fe67:	74 13                	je     c000fe7c <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c000fe69:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000fe6e:	74 0c                	je     c000fe7c <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c000fe70:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000fe76:	0f 8e d8 00 00 00    	jle    c000ff54 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c000fe7c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fe80:	83 ec 0c             	sub    esp,0xc
c000fe83:	8d 78 01             	lea    edi,[eax+0x1]
c000fe86:	57                   	push   edi
c000fe87:	e8 2d 79 ff ff       	call   c00077b9 <malloc>
c000fe8c:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c000fe90:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000fe94:	8d 56 04             	lea    edx,[esi+0x4]
c000fe97:	89 14 24             	mov    DWORD PTR [esp],edx
c000fe9a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000fe9e:	e8 16 79 ff ff       	call   c00077b9 <malloc>
c000fea3:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000fea7:	83 c4 0c             	add    esp,0xc
c000feaa:	57                   	push   edi
c000feab:	6a 00                	push   0x0
c000fead:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000feb1:	e8 1a 06 ff ff       	call   c00004d0 <memset>
c000feb6:	8d 74 24 30          	lea    esi,[esp+0x30]
c000feba:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000febe:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000fec2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fec4:	83 c4 0c             	add    esp,0xc
c000fec7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000fecb:	52                   	push   edx
c000fecc:	6a 00                	push   0x0
c000fece:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000fed2:	e8 f9 05 ff ff       	call   c00004d0 <memset>
c000fed7:	8d 74 24 30          	lea    esi,[esp+0x30]
c000fedb:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c000fedf:	89 34 24             	mov    DWORD PTR [esp],esi
c000fee2:	e8 59 06 ff ff       	call   c0000540 <strlen>
c000fee7:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c000feeb:	89 c1                	mov    ecx,eax
c000feed:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000feef:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000fef2:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000fef5:	40                   	inc    eax
c000fef6:	83 c4 10             	add    esp,0x10
c000fef9:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000fefc:	85 d2                	test   edx,edx
c000fefe:	75 0c                	jne    c000ff0c <EnvVarContainer::loadFrom(char const*, char const*)+0x178>
c000ff00:	83 ec 0c             	sub    esp,0xc
c000ff03:	6a 08                	push   0x8
c000ff05:	e8 af 78 ff ff       	call   c00077b9 <malloc>
c000ff0a:	eb 0c                	jmp    c000ff18 <EnvVarContainer::loadFrom(char const*, char const*)+0x184>
c000ff0c:	c1 e0 03             	shl    eax,0x3
c000ff0f:	51                   	push   ecx
c000ff10:	51                   	push   ecx
c000ff11:	50                   	push   eax
c000ff12:	52                   	push   edx
c000ff13:	e8 8d 78 ff ff       	call   c00077a5 <realloc>
c000ff18:	83 c4 10             	add    esp,0x10
c000ff1b:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000ff1e:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000ff21:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c000ff24:	8d 74 24 18          	lea    esi,[esp+0x18]
c000ff28:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c000ff2c:	b9 08 00 00 00       	mov    ecx,0x8
c000ff31:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ff33:	31 f6                	xor    esi,esi
c000ff35:	50                   	push   eax
c000ff36:	68 00 01 00 00       	push   0x100
c000ff3b:	6a 00                	push   0x0
c000ff3d:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000ff41:	50                   	push   eax
c000ff42:	e8 89 05 ff ff       	call   c00004d0 <memset>
c000ff47:	83 c4 10             	add    esp,0x10
c000ff4a:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000ff52:	eb 0f                	jmp    c000ff63 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c000ff54:	3c 3d                	cmp    al,0x3d
c000ff56:	74 07                	je     c000ff5f <EnvVarContainer::loadFrom(char const*, char const*)+0x1cb>
c000ff58:	88 44 34 20          	mov    BYTE PTR [esp+esi*1+0x20],al
c000ff5c:	46                   	inc    esi
c000ff5d:	eb 04                	jmp    c000ff63 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c000ff5f:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000ff63:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000ff68:	0f 85 c6 fe ff ff    	jne    c000fe34 <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c000ff6e:	81 c4 2c 01 00 00    	add    esp,0x12c
c000ff74:	5b                   	pop    ebx
c000ff75:	5e                   	pop    esi
c000ff76:	5f                   	pop    edi
c000ff77:	5d                   	pop    ebp
c000ff78:	c3                   	ret    
c000ff79:	90                   	nop

c000ff7a <EnvVarContainer::__loadSystem()>:
c000ff7a:	83 ec 10             	sub    esp,0x10
c000ff7d:	68 c0 00 02 c0       	push   0xc00200c0
c000ff82:	68 24 ee 01 c0       	push   0xc001ee24
c000ff87:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ff8b:	e8 04 fe ff ff       	call   c000fd94 <EnvVarContainer::loadFrom(char const*, char const*)>
c000ff90:	83 c4 1c             	add    esp,0x1c
c000ff93:	c3                   	ret    

c000ff94 <EnvVarContainer::__loadUser()>:
c000ff94:	c3                   	ret    
c000ff95:	90                   	nop

c000ff96 <EnvVarContainer::EnvVarContainer(Process*)>:
c000ff96:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ff9a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ffa0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ffa4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ffa8:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000ffab:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ffaf:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000ffb6:	90                   	nop
c000ffb7:	c3                   	ret    

c000ffb8 <EnvVarContainer::~EnvVarContainer()>:
c000ffb8:	83 ec 0c             	sub    esp,0xc
c000ffbb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ffbf:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ffc2:	85 c0                	test   eax,eax
c000ffc4:	74 1d                	je     c000ffe3 <EnvVarContainer::~EnvVarContainer()+0x2b>
c000ffc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ffca:	8b 00                	mov    eax,DWORD PTR [eax]
c000ffcc:	85 c0                	test   eax,eax
c000ffce:	74 13                	je     c000ffe3 <EnvVarContainer::~EnvVarContainer()+0x2b>
c000ffd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ffd4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ffd7:	83 ec 0c             	sub    esp,0xc
c000ffda:	50                   	push   eax
c000ffdb:	e8 e9 77 ff ff       	call   c00077c9 <free>
c000ffe0:	83 c4 10             	add    esp,0x10
c000ffe3:	90                   	nop
c000ffe4:	83 c4 0c             	add    esp,0xc
c000ffe7:	c3                   	ret    

c000ffe8 <Krnl::getEnv(Process*, char const*)>:
c000ffe8:	53                   	push   ebx
c000ffe9:	83 ec 08             	sub    esp,0x8
c000ffec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fff0:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000fff4:	39 05 90 61 02 c0    	cmp    DWORD PTR ds:0xc0026190,eax
c000fffa:	74 04                	je     c0010000 <Krnl::getEnv(Process*, char const*)+0x18>
c000fffc:	85 c0                	test   eax,eax
c000fffe:	75 0b                	jne    c001000b <Krnl::getEnv(Process*, char const*)+0x23>
c0010000:	a1 30 59 02 c0       	mov    eax,ds:0xc0025930
c0010005:	85 c0                	test   eax,eax
c0010007:	75 19                	jne    c0010022 <Krnl::getEnv(Process*, char const*)+0x3a>
c0010009:	eb 27                	jmp    c0010032 <Krnl::getEnv(Process*, char const*)+0x4a>
c001000b:	52                   	push   edx
c001000c:	52                   	push   edx
c001000d:	53                   	push   ebx
c001000e:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c0010014:	e8 79 fc ff ff       	call   c000fc92 <EnvVarContainer::getEnv(char const*)>
c0010019:	83 c4 10             	add    esp,0x10
c001001c:	85 c0                	test   eax,eax
c001001e:	75 28                	jne    c0010048 <Krnl::getEnv(Process*, char const*)+0x60>
c0010020:	eb de                	jmp    c0010000 <Krnl::getEnv(Process*, char const*)+0x18>
c0010022:	52                   	push   edx
c0010023:	52                   	push   edx
c0010024:	53                   	push   ebx
c0010025:	50                   	push   eax
c0010026:	e8 67 fc ff ff       	call   c000fc92 <EnvVarContainer::getEnv(char const*)>
c001002b:	83 c4 10             	add    esp,0x10
c001002e:	85 c0                	test   eax,eax
c0010030:	75 16                	jne    c0010048 <Krnl::getEnv(Process*, char const*)+0x60>
c0010032:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0010036:	a1 34 59 02 c0       	mov    eax,ds:0xc0025934
c001003b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001003f:	83 c4 08             	add    esp,0x8
c0010042:	5b                   	pop    ebx
c0010043:	e9 4a fc ff ff       	jmp    c000fc92 <EnvVarContainer::getEnv(char const*)>
c0010048:	83 c4 08             	add    esp,0x8
c001004b:	5b                   	pop    ebx
c001004c:	c3                   	ret    

c001004d <Krnl::setEnvSystem(char const*, char const*)>:
c001004d:	83 ec 10             	sub    esp,0x10
c0010050:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010054:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010058:	ff 35 34 59 02 c0    	push   DWORD PTR ds:0xc0025934
c001005e:	e8 6d fc ff ff       	call   c000fcd0 <EnvVarContainer::setEnv(char const*, char const*)>
c0010063:	83 c4 1c             	add    esp,0x1c
c0010066:	c3                   	ret    

c0010067 <Krnl::setEnvUser(char const*, char const*)>:
c0010067:	a1 30 59 02 c0       	mov    eax,ds:0xc0025930
c001006c:	85 c0                	test   eax,eax
c001006e:	74 15                	je     c0010085 <Krnl::setEnvUser(char const*, char const*)+0x1e>
c0010070:	83 ec 10             	sub    esp,0x10
c0010073:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010077:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001007b:	50                   	push   eax
c001007c:	e8 4f fc ff ff       	call   c000fcd0 <EnvVarContainer::setEnv(char const*, char const*)>
c0010081:	83 c4 1c             	add    esp,0x1c
c0010084:	c3                   	ret    
c0010085:	c3                   	ret    

c0010086 <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c0010086:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001008a:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c0010090:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010094:	e9 37 fc ff ff       	jmp    c000fcd0 <EnvVarContainer::setEnv(char const*, char const*)>

c0010099 <Krnl::deleteEnvSystem(char const*)>:
c0010099:	c3                   	ret    

c001009a <Krnl::deleteEnvUser(char const*)>:
c001009a:	c3                   	ret    

c001009b <Krnl::deleteEnvProcess(Process*, char const*)>:
c001009b:	c3                   	ret    

c001009c <Krnl::newProcessEnv(Process*)>:
c001009c:	83 ec 28             	sub    esp,0x28
c001009f:	6a 0c                	push   0xc
c00100a1:	e8 13 77 ff ff       	call   c00077b9 <malloc>
c00100a6:	5a                   	pop    edx
c00100a7:	59                   	pop    ecx
c00100a8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00100ac:	50                   	push   eax
c00100ad:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00100b1:	e8 e0 fe ff ff       	call   c000ff96 <EnvVarContainer::EnvVarContainer(Process*)>
c00100b6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00100ba:	83 c4 2c             	add    esp,0x2c
c00100bd:	c3                   	ret    

c00100be <Krnl::copyProcessEnv(Process*, Process*)>:
c00100be:	57                   	push   edi
c00100bf:	56                   	push   esi
c00100c0:	53                   	push   ebx
c00100c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00100c5:	83 ec 0c             	sub    esp,0xc
c00100c8:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c00100ce:	6a 0c                	push   0xc
c00100d0:	e8 e4 76 ff ff       	call   c00077b9 <malloc>
c00100d5:	89 c3                	mov    ebx,eax
c00100d7:	58                   	pop    eax
c00100d8:	5a                   	pop    edx
c00100d9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00100dd:	53                   	push   ebx
c00100de:	e8 b3 fe ff ff       	call   c000ff96 <EnvVarContainer::EnvVarContainer(Process*)>
c00100e3:	8b 07                	mov    eax,DWORD PTR [edi]
c00100e5:	89 03                	mov    DWORD PTR [ebx],eax
c00100e7:	c1 e0 03             	shl    eax,0x3
c00100ea:	89 04 24             	mov    DWORD PTR [esp],eax
c00100ed:	e8 c7 76 ff ff       	call   c00077b9 <malloc>
c00100f2:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00100f5:	8b 0f                	mov    ecx,DWORD PTR [edi]
c00100f7:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c00100fa:	c1 e1 03             	shl    ecx,0x3
c00100fd:	89 c7                	mov    edi,eax
c00100ff:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010101:	83 c4 10             	add    esp,0x10
c0010104:	89 d8                	mov    eax,ebx
c0010106:	5b                   	pop    ebx
c0010107:	5e                   	pop    esi
c0010108:	5f                   	pop    edi
c0010109:	c3                   	ret    

c001010a <Krnl::loadSystemEnv()>:
c001010a:	53                   	push   ebx
c001010b:	83 ec 14             	sub    esp,0x14
c001010e:	6a 0c                	push   0xc
c0010110:	e8 a4 76 ff ff       	call   c00077b9 <malloc>
c0010115:	89 c3                	mov    ebx,eax
c0010117:	58                   	pop    eax
c0010118:	5a                   	pop    edx
c0010119:	ff 35 90 61 02 c0    	push   DWORD PTR ds:0xc0026190
c001011f:	53                   	push   ebx
c0010120:	e8 71 fe ff ff       	call   c000ff96 <EnvVarContainer::EnvVarContainer(Process*)>
c0010125:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010128:	89 1d 34 59 02 c0    	mov    DWORD PTR ds:0xc0025934,ebx
c001012e:	e8 47 fe ff ff       	call   c000ff7a <EnvVarContainer::__loadSystem()>
c0010133:	83 c4 18             	add    esp,0x18
c0010136:	5b                   	pop    ebx
c0010137:	c3                   	ret    

c0010138 <Krnl::loadUserEnv()>:
c0010138:	53                   	push   ebx
c0010139:	83 ec 14             	sub    esp,0x14
c001013c:	6a 0c                	push   0xc
c001013e:	e8 76 76 ff ff       	call   c00077b9 <malloc>
c0010143:	89 c3                	mov    ebx,eax
c0010145:	58                   	pop    eax
c0010146:	5a                   	pop    edx
c0010147:	ff 35 90 61 02 c0    	push   DWORD PTR ds:0xc0026190
c001014d:	53                   	push   ebx
c001014e:	e8 43 fe ff ff       	call   c000ff96 <EnvVarContainer::EnvVarContainer(Process*)>
c0010153:	89 1d 30 59 02 c0    	mov    DWORD PTR ds:0xc0025930,ebx
c0010159:	83 c4 18             	add    esp,0x18
c001015c:	5b                   	pop    ebx
c001015d:	c3                   	ret    

c001015e <Krnl::flushEnv()>:
c001015e:	c3                   	ret    

c001015f <Krnl::getProcessTotalEnvCount(Process*)>:
c001015f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010163:	8b 15 30 59 02 c0    	mov    edx,DWORD PTR ds:0xc0025930
c0010169:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c001016f:	a1 34 59 02 c0       	mov    eax,ds:0xc0025934
c0010174:	8b 00                	mov    eax,DWORD PTR [eax]
c0010176:	03 01                	add    eax,DWORD PTR [ecx]
c0010178:	85 d2                	test   edx,edx
c001017a:	74 02                	je     c001017e <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c001017c:	03 02                	add    eax,DWORD PTR [edx]
c001017e:	c3                   	ret    

c001017f <Krnl::getProcessEnvPair(Process*, int)>:
c001017f:	57                   	push   edi
c0010180:	56                   	push   esi
c0010181:	8b 35 30 59 02 c0    	mov    esi,DWORD PTR ds:0xc0025930
c0010187:	53                   	push   ebx
c0010188:	85 f6                	test   esi,esi
c001018a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001018e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010192:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c0010198:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001019c:	8b 01                	mov    eax,DWORD PTR [ecx]
c001019e:	75 16                	jne    c00101b6 <Krnl::getProcessEnvPair(Process*, int)+0x37>
c00101a0:	39 c2                	cmp    edx,eax
c00101a2:	7c 16                	jl     c00101ba <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c00101a4:	8b 0d 34 59 02 c0    	mov    ecx,DWORD PTR ds:0xc0025934
c00101aa:	8b 31                	mov    esi,DWORD PTR [ecx]
c00101ac:	01 c6                	add    esi,eax
c00101ae:	39 d6                	cmp    esi,edx
c00101b0:	7e 3c                	jle    c00101ee <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c00101b2:	29 c2                	sub    edx,eax
c00101b4:	eb 04                	jmp    c00101ba <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c00101b6:	39 c2                	cmp    edx,eax
c00101b8:	7d 05                	jge    c00101bf <Krnl::getProcessEnvPair(Process*, int)+0x40>
c00101ba:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00101bd:	eb 20                	jmp    c00101df <Krnl::getProcessEnvPair(Process*, int)+0x60>
c00101bf:	8b 3e                	mov    edi,DWORD PTR [esi]
c00101c1:	8d 0c 07             	lea    ecx,[edi+eax*1]
c00101c4:	39 d1                	cmp    ecx,edx
c00101c6:	7e 04                	jle    c00101cc <Krnl::getProcessEnvPair(Process*, int)+0x4d>
c00101c8:	29 c2                	sub    edx,eax
c00101ca:	eb 10                	jmp    c00101dc <Krnl::getProcessEnvPair(Process*, int)+0x5d>
c00101cc:	8b 35 34 59 02 c0    	mov    esi,DWORD PTR ds:0xc0025934
c00101d2:	03 0e                	add    ecx,DWORD PTR [esi]
c00101d4:	39 d1                	cmp    ecx,edx
c00101d6:	7e 16                	jle    c00101ee <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c00101d8:	29 c2                	sub    edx,eax
c00101da:	29 fa                	sub    edx,edi
c00101dc:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00101df:	8d 14 d0             	lea    edx,[eax+edx*8]
c00101e2:	8b 02                	mov    eax,DWORD PTR [edx]
c00101e4:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c00101e7:	89 03                	mov    DWORD PTR [ebx],eax
c00101e9:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00101ec:	eb 1d                	jmp    c001020b <Krnl::getProcessEnvPair(Process*, int)+0x8c>
c00101ee:	83 ec 0c             	sub    esp,0xc
c00101f1:	68 46 ee 01 c0       	push   0xc001ee46
c00101f6:	e8 ac 00 00 00       	call   c00102a7 <KePanic(char const*)>
c00101fb:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0010201:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0010208:	83 c4 10             	add    esp,0x10
c001020b:	89 d8                	mov    eax,ebx
c001020d:	5b                   	pop    ebx
c001020e:	5e                   	pop    esi
c001020f:	5f                   	pop    edi
c0010210:	c2 04 00             	ret    0x4

c0010213 <CPU::current()>:
c0010213:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c0010218:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001021e:	c3                   	ret    

c001021f <operator new(unsigned long)>:
c001021f:	e9 95 75 ff ff       	jmp    c00077b9 <malloc>

c0010224 <operator delete(void*)>:
c0010224:	e9 b0 75 ff ff       	jmp    c00077d9 <rfree>

c0010229 <disableIRQs()>:
c0010229:	fa                   	cli    
c001022a:	c3                   	ret    

c001022b <enableIRQs()>:
c001022b:	fb                   	sti    
c001022c:	c3                   	ret    

c001022d <lockScheduler()>:
c001022d:	fa                   	cli    
c001022e:	ff 05 68 61 02 c0    	inc    DWORD PTR ds:0xc0026168
c0010234:	c3                   	ret    

c0010235 <unlockScheduler()>:
c0010235:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c001023a:	48                   	dec    eax
c001023b:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c0010240:	75 01                	jne    c0010243 <unlockScheduler()+0xe>
c0010242:	fb                   	sti    
c0010243:	c3                   	ret    

c0010244 <lockStuff()>:
c0010244:	fa                   	cli    
c0010245:	ff 05 68 61 02 c0    	inc    DWORD PTR ds:0xc0026168
c001024b:	ff 05 64 61 02 c0    	inc    DWORD PTR ds:0xc0026164
c0010251:	c3                   	ret    

c0010252 <unlockStuff()>:
c0010252:	83 ec 0c             	sub    esp,0xc
c0010255:	a1 64 61 02 c0       	mov    eax,ds:0xc0026164
c001025a:	48                   	dec    eax
c001025b:	a3 64 61 02 c0       	mov    ds:0xc0026164,eax
c0010260:	75 18                	jne    c001027a <unlockStuff()+0x28>
c0010262:	83 3d 60 61 02 c0 00 	cmp    DWORD PTR ds:0xc0026160,0x0
c0010269:	74 0f                	je     c001027a <unlockStuff()+0x28>
c001026b:	c7 05 60 61 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026160,0x0
c0010275:	e8 4a 35 00 00       	call   c00137c4 <schedule()>
c001027a:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c001027f:	48                   	dec    eax
c0010280:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c0010285:	75 01                	jne    c0010288 <unlockStuff()+0x36>
c0010287:	fb                   	sti    
c0010288:	83 c4 0c             	add    esp,0xc
c001028b:	c3                   	ret    

c001028c <Virt::getAKernelVAS()>:
c001028c:	a1 b0 2f 02 c0       	mov    eax,ds:0xc0022fb0
c0010291:	c3                   	ret    

c0010292 <__not_memcpy>:
c0010292:	57                   	push   edi
c0010293:	56                   	push   esi
c0010294:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010298:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001029c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00102a0:	89 c7                	mov    edi,eax
c00102a2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00102a4:	5e                   	pop    esi
c00102a5:	5f                   	pop    edi
c00102a6:	c3                   	ret    

c00102a7 <KePanic(char const*)>:
c00102a7:	c6 05 38 59 02 c0 01 	mov    BYTE PTR ds:0xc0025938,0x1
c00102ae:	e9 09 53 00 00       	jmp    c00155bc <HalPanic(char const*)>

c00102b3 <Krnl::powerThread(void*)>:
c00102b3:	83 ec 0c             	sub    esp,0xc
c00102b6:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c00102bb:	48                   	dec    eax
c00102bc:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c00102c1:	75 01                	jne    c00102c4 <Krnl::powerThread(void*)+0x11>
c00102c3:	fb                   	sti    
c00102c4:	83 ec 0c             	sub    esp,0xc
c00102c7:	c6 05 40 59 02 c0 00 	mov    BYTE PTR ds:0xc0025940,0x0
c00102ce:	6a 0a                	push   0xa
c00102d0:	e8 ff 37 00 00       	call   c0013ad4 <sleep(unsigned int)>
c00102d5:	83 05 84 59 02 c0 0a 	add    DWORD PTR ds:0xc0025984,0xa
c00102dc:	83 c4 10             	add    esp,0x10
c00102df:	eb e3                	jmp    c00102c4 <Krnl::powerThread(void*)+0x11>

c00102e1 <Krnl::changePowerSettings(Krnl::PowerSettings)>:
c00102e1:	57                   	push   edi
c00102e2:	b9 09 00 00 00       	mov    ecx,0x9
c00102e7:	56                   	push   esi
c00102e8:	bf 60 59 02 c0       	mov    edi,0xc0025960
c00102ed:	fc                   	cld    
c00102ee:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00102f2:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00102f4:	5e                   	pop    esi
c00102f5:	5f                   	pop    edi
c00102f6:	c3                   	ret    

c00102f7 <Krnl::userIOReceived()>:
c00102f7:	c7 05 84 59 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025984,0x0
c0010301:	c3                   	ret    

c0010302 <Krnl::handlePowerButton()>:
c0010302:	83 ec 0c             	sub    esp,0xc
c0010305:	a1 60 59 02 c0       	mov    eax,ds:0xc0025960
c001030a:	83 f8 02             	cmp    eax,0x2
c001030d:	75 10                	jne    c001031f <Krnl::handlePowerButton()+0x1d>
c001030f:	83 ec 0c             	sub    esp,0xc
c0010312:	ff 35 b8 2e 02 c0    	push   DWORD PTR ds:0xc0022eb8
c0010318:	e8 39 6b ff ff       	call   c0006e56 <Computer::shutdown()>
c001031d:	eb 11                	jmp    c0010330 <Krnl::handlePowerButton()+0x2e>
c001031f:	48                   	dec    eax
c0010320:	75 11                	jne    c0010333 <Krnl::handlePowerButton()+0x31>
c0010322:	83 ec 0c             	sub    esp,0xc
c0010325:	ff 35 b8 2e 02 c0    	push   DWORD PTR ds:0xc0022eb8
c001032b:	e8 56 6b ff ff       	call   c0006e86 <Computer::sleep()>
c0010330:	83 c4 10             	add    esp,0x10
c0010333:	83 c4 0c             	add    esp,0xc
c0010336:	c3                   	ret    

c0010337 <Krnl::handleSleepButton()>:
c0010337:	83 ec 0c             	sub    esp,0xc
c001033a:	a1 64 59 02 c0       	mov    eax,ds:0xc0025964
c001033f:	83 f8 02             	cmp    eax,0x2
c0010342:	75 10                	jne    c0010354 <Krnl::handleSleepButton()+0x1d>
c0010344:	83 ec 0c             	sub    esp,0xc
c0010347:	ff 35 b8 2e 02 c0    	push   DWORD PTR ds:0xc0022eb8
c001034d:	e8 04 6b ff ff       	call   c0006e56 <Computer::shutdown()>
c0010352:	eb 11                	jmp    c0010365 <Krnl::handleSleepButton()+0x2e>
c0010354:	48                   	dec    eax
c0010355:	75 11                	jne    c0010368 <Krnl::handleSleepButton()+0x31>
c0010357:	83 ec 0c             	sub    esp,0xc
c001035a:	ff 35 b8 2e 02 c0    	push   DWORD PTR ds:0xc0022eb8
c0010360:	e8 21 6b ff ff       	call   c0006e86 <Computer::sleep()>
c0010365:	83 c4 10             	add    esp,0x10
c0010368:	83 c4 0c             	add    esp,0xc
c001036b:	c3                   	ret    

c001036c <Krnl::setupPowerManager()>:
c001036c:	83 ec 0c             	sub    esp,0xc
c001036f:	c7 05 84 59 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025984,0x0
c0010379:	68 f0 00 00 00       	push   0xf0
c001037e:	c6 05 40 59 02 c0 00 	mov    BYTE PTR ds:0xc0025940,0x0
c0010385:	6a 00                	push   0x0
c0010387:	68 b3 02 01 c0       	push   0xc00102b3
c001038c:	ff 35 90 61 02 c0    	push   DWORD PTR ds:0xc0026190
c0010392:	e8 0d 32 00 00       	call   c00135a4 <Process::createThread(void (*)(void*), void*, int)>
c0010397:	c7 05 60 59 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc0025960,0x2
c00103a1:	c7 05 64 59 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0025964,0x1
c00103ab:	c7 05 68 59 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc0025968,0x3
c00103b5:	c7 05 6c 59 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002596c,0x0
c00103bf:	c7 05 78 59 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025978,0x0
c00103c9:	c7 05 70 59 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025970,0x0
c00103d3:	c7 05 7c 59 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002597c,0x0
c00103dd:	c7 05 74 59 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0025974,0x3c
c00103e7:	c7 05 80 59 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0025980,0x3c
c00103f1:	83 c4 1c             	add    esp,0x1c
c00103f4:	c3                   	ret    
c00103f5:	66 90                	xchg   ax,ax
c00103f7:	90                   	nop

c00103f8 <KeResolveCompatibilitySymbol(char*)>:
c00103f8:	83 ec 0c             	sub    esp,0xc
c00103fb:	83 ec 08             	sub    esp,0x8
c00103fe:	68 60 ee 01 c0       	push   0xc001ee60
c0010403:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010407:	e8 d4 02 ff ff       	call   c00006e0 <strcmp>
c001040c:	83 c4 10             	add    esp,0x10
c001040f:	85 c0                	test   eax,eax
c0010411:	0f 94 c0             	sete   al
c0010414:	84 c0                	test   al,al
c0010416:	74 0c                	je     c0010424 <KeResolveCompatibilitySymbol(char*)+0x2c>
c0010418:	b8 b8 2e 02 c0       	mov    eax,0xc0022eb8
c001041d:	e9 62 01 00 00       	jmp    c0010584 <KeResolveCompatibilitySymbol(char*)+0x18c>
c0010422:	66 90                	xchg   ax,ax
c0010424:	83 ec 08             	sub    esp,0x8
c0010427:	68 69 ee 01 c0       	push   0xc001ee69
c001042c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010430:	e8 ab 02 ff ff       	call   c00006e0 <strcmp>
c0010435:	83 c4 10             	add    esp,0x10
c0010438:	85 c0                	test   eax,eax
c001043a:	0f 94 c0             	sete   al
c001043d:	84 c0                	test   al,al
c001043f:	74 0b                	je     c001044c <KeResolveCompatibilitySymbol(char*)+0x54>
c0010441:	b8 e0 c8 01 c0       	mov    eax,0xc001c8e0
c0010446:	e9 39 01 00 00       	jmp    c0010584 <KeResolveCompatibilitySymbol(char*)+0x18c>
c001044b:	90                   	nop
c001044c:	83 ec 08             	sub    esp,0x8
c001044f:	68 73 ee 01 c0       	push   0xc001ee73
c0010454:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010458:	e8 83 02 ff ff       	call   c00006e0 <strcmp>
c001045d:	83 c4 10             	add    esp,0x10
c0010460:	85 c0                	test   eax,eax
c0010462:	0f 94 c0             	sete   al
c0010465:	84 c0                	test   al,al
c0010467:	74 0b                	je     c0010474 <KeResolveCompatibilitySymbol(char*)+0x7c>
c0010469:	b8 14 c6 01 c0       	mov    eax,0xc001c614
c001046e:	e9 11 01 00 00       	jmp    c0010584 <KeResolveCompatibilitySymbol(char*)+0x18c>
c0010473:	90                   	nop
c0010474:	83 ec 08             	sub    esp,0x8
c0010477:	68 7c ee 01 c0       	push   0xc001ee7c
c001047c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010480:	e8 5b 02 ff ff       	call   c00006e0 <strcmp>
c0010485:	83 c4 10             	add    esp,0x10
c0010488:	85 c0                	test   eax,eax
c001048a:	0f 94 c0             	sete   al
c001048d:	84 c0                	test   al,al
c001048f:	74 0b                	je     c001049c <KeResolveCompatibilitySymbol(char*)+0xa4>
c0010491:	b8 a7 02 01 c0       	mov    eax,0xc00102a7
c0010496:	e9 e9 00 00 00       	jmp    c0010584 <KeResolveCompatibilitySymbol(char*)+0x18c>
c001049b:	90                   	nop
c001049c:	83 ec 08             	sub    esp,0x8
c001049f:	68 8f ee 01 c0       	push   0xc001ee8f
c00104a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00104a8:	e8 33 02 ff ff       	call   c00006e0 <strcmp>
c00104ad:	83 c4 10             	add    esp,0x10
c00104b0:	85 c0                	test   eax,eax
c00104b2:	0f 94 c0             	sete   al
c00104b5:	84 c0                	test   al,al
c00104b7:	74 0b                	je     c00104c4 <KeResolveCompatibilitySymbol(char*)+0xcc>
c00104b9:	b8 2f fc 00 c0       	mov    eax,0xc000fc2f
c00104be:	e9 c1 00 00 00       	jmp    c0010584 <KeResolveCompatibilitySymbol(char*)+0x18c>
c00104c3:	90                   	nop
c00104c4:	83 ec 08             	sub    esp,0x8
c00104c7:	68 ac ee 01 c0       	push   0xc001eeac
c00104cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00104d0:	e8 0b 02 ff ff       	call   c00006e0 <strcmp>
c00104d5:	83 c4 10             	add    esp,0x10
c00104d8:	85 c0                	test   eax,eax
c00104da:	0f 94 c0             	sete   al
c00104dd:	84 c0                	test   al,al
c00104df:	74 0b                	je     c00104ec <KeResolveCompatibilitySymbol(char*)+0xf4>
c00104e1:	b8 e0 c9 01 c0       	mov    eax,0xc001c9e0
c00104e6:	e9 99 00 00 00       	jmp    c0010584 <KeResolveCompatibilitySymbol(char*)+0x18c>
c00104eb:	90                   	nop
c00104ec:	83 ec 08             	sub    esp,0x8
c00104ef:	68 b6 ee 01 c0       	push   0xc001eeb6
c00104f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00104f8:	e8 e3 01 ff ff       	call   c00006e0 <strcmp>
c00104fd:	83 c4 10             	add    esp,0x10
c0010500:	85 c0                	test   eax,eax
c0010502:	0f 94 c0             	sete   al
c0010505:	84 c0                	test   al,al
c0010507:	74 07                	je     c0010510 <KeResolveCompatibilitySymbol(char*)+0x118>
c0010509:	b8 60 c7 01 c0       	mov    eax,0xc001c760
c001050e:	eb 74                	jmp    c0010584 <KeResolveCompatibilitySymbol(char*)+0x18c>
c0010510:	83 ec 08             	sub    esp,0x8
c0010513:	68 bf ee 01 c0       	push   0xc001eebf
c0010518:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001051c:	e8 bf 01 ff ff       	call   c00006e0 <strcmp>
c0010521:	83 c4 10             	add    esp,0x10
c0010524:	85 c0                	test   eax,eax
c0010526:	0f 94 c0             	sete   al
c0010529:	84 c0                	test   al,al
c001052b:	74 07                	je     c0010534 <KeResolveCompatibilitySymbol(char*)+0x13c>
c001052d:	b8 bc 2e 02 c0       	mov    eax,0xc0022ebc
c0010532:	eb 50                	jmp    c0010584 <KeResolveCompatibilitySymbol(char*)+0x18c>
c0010534:	83 ec 08             	sub    esp,0x8
c0010537:	68 d7 ee 01 c0       	push   0xc001eed7
c001053c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010540:	e8 9b 01 ff ff       	call   c00006e0 <strcmp>
c0010545:	83 c4 10             	add    esp,0x10
c0010548:	85 c0                	test   eax,eax
c001054a:	0f 94 c0             	sete   al
c001054d:	84 c0                	test   al,al
c001054f:	74 07                	je     c0010558 <KeResolveCompatibilitySymbol(char*)+0x160>
c0010551:	b8 bc 2e 02 c0       	mov    eax,0xc0022ebc
c0010556:	eb 2c                	jmp    c0010584 <KeResolveCompatibilitySymbol(char*)+0x18c>
c0010558:	83 ec 08             	sub    esp,0x8
c001055b:	68 e4 ee 01 c0       	push   0xc001eee4
c0010560:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010564:	e8 77 01 ff ff       	call   c00006e0 <strcmp>
c0010569:	83 c4 10             	add    esp,0x10
c001056c:	85 c0                	test   eax,eax
c001056e:	0f 94 c0             	sete   al
c0010571:	84 c0                	test   al,al
c0010573:	74 07                	je     c001057c <KeResolveCompatibilitySymbol(char*)+0x184>
c0010575:	b8 bd 2e 02 c0       	mov    eax,0xc0022ebd
c001057a:	eb 08                	jmp    c0010584 <KeResolveCompatibilitySymbol(char*)+0x18c>
c001057c:	b8 00 00 00 00       	mov    eax,0x0
c0010581:	8d 76 00             	lea    esi,[esi+0x0]
c0010584:	83 c4 0c             	add    esp,0xc
c0010587:	c3                   	ret    

c0010588 <KiSigKill(int)>:
c0010588:	57                   	push   edi
c0010589:	b9 0a 00 00 00       	mov    ecx,0xa
c001058e:	56                   	push   esi
c001058f:	be 2d ef 01 c0       	mov    esi,0xc001ef2d
c0010594:	83 ec 14             	sub    esp,0x14
c0010597:	8d 7c 24 06          	lea    edi,[esp+0x6]
c001059b:	fc                   	cld    
c001059c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001059e:	8d 44 24 06          	lea    eax,[esp+0x6]
c00105a2:	50                   	push   eax
c00105a3:	6a 00                	push   0x0
c00105a5:	6a 00                	push   0x0
c00105a7:	6a 27                	push   0x27
c00105a9:	e8 a4 0a 01 00       	call   c0021052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c00105ae:	83 c4 24             	add    esp,0x24
c00105b1:	5e                   	pop    esi
c00105b2:	5f                   	pop    edi
c00105b3:	c3                   	ret    

c00105b4 <KiDefaultSignalHandlerIgnore(int)>:
c00105b4:	c3                   	ret    

c00105b5 <KiDefaultSignalHandlerPause(int)>:
c00105b5:	57                   	push   edi
c00105b6:	b9 07 00 00 00       	mov    ecx,0x7
c00105bb:	56                   	push   esi
c00105bc:	be 37 ef 01 c0       	mov    esi,0xc001ef37
c00105c1:	83 ec 24             	sub    esp,0x24
c00105c4:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00105c8:	fc                   	cld    
c00105c9:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00105cb:	8d 44 24 04          	lea    eax,[esp+0x4]
c00105cf:	50                   	push   eax
c00105d0:	6a 00                	push   0x0
c00105d2:	6a 00                	push   0x0
c00105d4:	6a 27                	push   0x27
c00105d6:	e8 77 0a 01 00       	call   c0021052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c00105db:	83 c4 34             	add    esp,0x34
c00105de:	5e                   	pop    esi
c00105df:	5f                   	pop    edi
c00105e0:	c3                   	ret    

c00105e1 <KiDefaultSignalHandlerResume(int)>:
c00105e1:	57                   	push   edi
c00105e2:	b9 1d 00 00 00       	mov    ecx,0x1d
c00105e7:	56                   	push   esi
c00105e8:	be 53 ef 01 c0       	mov    esi,0xc001ef53
c00105ed:	83 ec 24             	sub    esp,0x24
c00105f0:	8d 7c 24 03          	lea    edi,[esp+0x3]
c00105f4:	fc                   	cld    
c00105f5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00105f7:	8d 44 24 03          	lea    eax,[esp+0x3]
c00105fb:	50                   	push   eax
c00105fc:	6a 00                	push   0x0
c00105fe:	6a 00                	push   0x0
c0010600:	6a 27                	push   0x27
c0010602:	e8 4b 0a 01 00       	call   c0021052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0010607:	83 c4 34             	add    esp,0x34
c001060a:	5e                   	pop    esi
c001060b:	5f                   	pop    edi
c001060c:	c3                   	ret    

c001060d <KeDeinitSignals(SigHandlerBlock*)>:
c001060d:	e9 b7 71 ff ff       	jmp    c00077c9 <free>

c0010612 <KeInitSignals()>:
c0010612:	53                   	push   ebx
c0010613:	83 ec 14             	sub    esp,0x14
c0010616:	68 c8 00 00 00       	push   0xc8
c001061b:	e8 99 71 ff ff       	call   c00077b9 <malloc>
c0010620:	83 c4 0c             	add    esp,0xc
c0010623:	c7 80 bc 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xbc],0x0
c001062d:	c7 80 c0 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc0],0x0
c0010637:	89 c3                	mov    ebx,eax
c0010639:	6a 20                	push   0x20
c001063b:	8d 80 9c 00 00 00    	lea    eax,[eax+0x9c]
c0010641:	6a 00                	push   0x0
c0010643:	50                   	push   eax
c0010644:	e8 87 fe fe ff       	call   c00004d0 <memset>
c0010649:	83 c4 0c             	add    esp,0xc
c001064c:	6a 44                	push   0x44
c001064e:	6a 00                	push   0x0
c0010650:	53                   	push   ebx
c0010651:	e8 7a fe fe ff       	call   c00004d0 <memset>
c0010656:	89 d8                	mov    eax,ebx
c0010658:	83 c4 18             	add    esp,0x18
c001065b:	5b                   	pop    ebx
c001065c:	c3                   	ret    

c001065d <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>:
c001065d:	53                   	push   ebx
c001065e:	b8 01 00 00 00       	mov    eax,0x1
c0010663:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010667:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001066b:	83 f9 10             	cmp    ecx,0x10
c001066e:	7f 21                	jg     c0010691 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)+0x34>
c0010670:	8d 1c 8a             	lea    ebx,[edx+ecx*4]
c0010673:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010677:	89 03                	mov    DWORD PTR [ebx],eax
c0010679:	b8 01 00 00 00       	mov    eax,0x1
c001067e:	d3 e0                	shl    eax,cl
c0010680:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0010684:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0010687:	c6 84 0a 88 00 00 00 00 	mov    BYTE PTR [edx+ecx*1+0x88],0x0
c001068f:	31 c0                	xor    eax,eax
c0010691:	5b                   	pop    ebx
c0010692:	c3                   	ret    

c0010693 <KeRaiseSignal(SigHandlerBlock*, int)>:
c0010693:	55                   	push   ebp
c0010694:	57                   	push   edi
c0010695:	bf 08 00 00 00       	mov    edi,0x8
c001069a:	56                   	push   esi
c001069b:	53                   	push   ebx
c001069c:	83 ec 18             	sub    esp,0x18
c001069f:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00106a3:	68 70 ef 01 c0       	push   0xc001ef70
c00106a8:	e8 a5 9e ff ff       	call   c000a552 <Dbg::kprintf(char const*, ...)>
c00106ad:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c00106b4:	8b ab bc 00 00 00    	mov    ebp,DWORD PTR [ebx+0xbc]
c00106ba:	83 c4 10             	add    esp,0x10
c00106bd:	31 c9                	xor    ecx,ecx
c00106bf:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c00106c3:	99                   	cdq    
c00106c4:	f7 ff                	idiv   edi
c00106c6:	8d 42 24             	lea    eax,[edx+0x24]
c00106c9:	8b 74 83 0c          	mov    esi,DWORD PTR [ebx+eax*4+0xc]
c00106cd:	85 f6                	test   esi,esi
c00106cf:	75 1a                	jne    c00106eb <KeRaiseSignal(SigHandlerBlock*, int)+0x58>
c00106d1:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00106d5:	89 4c 83 0c          	mov    DWORD PTR [ebx+eax*4+0xc],ecx
c00106d9:	50                   	push   eax
c00106da:	50                   	push   eax
c00106db:	52                   	push   edx
c00106dc:	68 81 ef 01 c0       	push   0xc001ef81
c00106e1:	e8 6c 9e ff ff       	call   c000a552 <Dbg::kprintf(char const*, ...)>
c00106e6:	83 c4 10             	add    esp,0x10
c00106e9:	eb 1b                	jmp    c0010706 <KeRaiseSignal(SigHandlerBlock*, int)+0x73>
c00106eb:	41                   	inc    ecx
c00106ec:	83 f9 08             	cmp    ecx,0x8
c00106ef:	75 ce                	jne    c00106bf <KeRaiseSignal(SigHandlerBlock*, int)+0x2c>
c00106f1:	83 ec 0c             	sub    esp,0xc
c00106f4:	be 01 00 00 00       	mov    esi,0x1
c00106f9:	68 a2 ef 01 c0       	push   0xc001efa2
c00106fe:	e8 4f 9e ff ff       	call   c000a552 <Dbg::kprintf(char const*, ...)>
c0010703:	83 c4 10             	add    esp,0x10
c0010706:	83 c4 0c             	add    esp,0xc
c0010709:	89 f0                	mov    eax,esi
c001070b:	5b                   	pop    ebx
c001070c:	5e                   	pop    esi
c001070d:	5f                   	pop    edi
c001070e:	5d                   	pop    ebp
c001070f:	c3                   	ret    

c0010710 <KeCheckSignal(SigHandlerBlock*)>:
c0010710:	55                   	push   ebp
c0010711:	57                   	push   edi
c0010712:	56                   	push   esi
c0010713:	53                   	push   ebx
c0010714:	51                   	push   ecx
c0010715:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010719:	80 bb c4 00 00 00 00 	cmp    BYTE PTR [ebx+0xc4],0x0
c0010720:	75 07                	jne    c0010729 <KeCheckSignal(SigHandlerBlock*)+0x19>
c0010722:	31 c0                	xor    eax,eax
c0010724:	e9 cc 00 00 00       	jmp    c00107f5 <KeCheckSignal(SigHandlerBlock*)+0xe5>
c0010729:	31 c9                	xor    ecx,ecx
c001072b:	bf 08 00 00 00       	mov    edi,0x8
c0010730:	8b b3 bc 00 00 00    	mov    esi,DWORD PTR [ebx+0xbc]
c0010736:	8d 04 0e             	lea    eax,[esi+ecx*1]
c0010739:	99                   	cdq    
c001073a:	f7 ff                	idiv   edi
c001073c:	8b 94 93 9c 00 00 00 	mov    edx,DWORD PTR [ebx+edx*4+0x9c]
c0010743:	85 d2                	test   edx,edx
c0010745:	0f 84 94 00 00 00    	je     c00107df <KeCheckSignal(SigHandlerBlock*)+0xcf>
c001074b:	88 d1                	mov    cl,dl
c001074d:	8b 83 c0 00 00 00    	mov    eax,DWORD PTR [ebx+0xc0]
c0010753:	bf 01 00 00 00       	mov    edi,0x1
c0010758:	89 04 24             	mov    DWORD PTR [esp],eax
c001075b:	d3 e7                	shl    edi,cl
c001075d:	bd 01 00 00 00       	mov    ebp,0x1
c0010762:	31 c9                	xor    ecx,ecx
c0010764:	89 e8                	mov    eax,ebp
c0010766:	d3 e0                	shl    eax,cl
c0010768:	85 04 24             	test   DWORD PTR [esp],eax
c001076b:	74 06                	je     c0010773 <KeCheckSignal(SigHandlerBlock*)+0x63>
c001076d:	85 7c 8b 44          	test   DWORD PTR [ebx+ecx*4+0x44],edi
c0010771:	75 af                	jne    c0010722 <KeCheckSignal(SigHandlerBlock*)+0x12>
c0010773:	41                   	inc    ecx
c0010774:	83 f9 11             	cmp    ecx,0x11
c0010777:	75 eb                	jne    c0010764 <KeCheckSignal(SigHandlerBlock*)+0x54>
c0010779:	8d 4e 01             	lea    ecx,[esi+0x1]
c001077c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001077f:	89 8b bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],ecx
c0010785:	09 f8                	or     eax,edi
c0010787:	c7 84 b3 9c 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+esi*4+0x9c],0x0
c0010792:	89 83 c0 00 00 00    	mov    DWORD PTR [ebx+0xc0],eax
c0010798:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c001079f:	31 c0                	xor    eax,eax
c00107a1:	83 bc 83 9c 00 00 00 00 	cmp    DWORD PTR [ebx+eax*4+0x9c],0x0
c00107a9:	74 09                	je     c00107b4 <KeCheckSignal(SigHandlerBlock*)+0xa4>
c00107ab:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c00107b2:	eb 06                	jmp    c00107ba <KeCheckSignal(SigHandlerBlock*)+0xaa>
c00107b4:	40                   	inc    eax
c00107b5:	83 f8 08             	cmp    eax,0x8
c00107b8:	75 e7                	jne    c00107a1 <KeCheckSignal(SigHandlerBlock*)+0x91>
c00107ba:	8b 04 93             	mov    eax,DWORD PTR [ebx+edx*4]
c00107bd:	83 fa 09             	cmp    edx,0x9
c00107c0:	75 07                	jne    c00107c9 <KeCheckSignal(SigHandlerBlock*)+0xb9>
c00107c2:	b8 88 05 01 c0       	mov    eax,0xc0010588
c00107c7:	eb 2c                	jmp    c00107f5 <KeCheckSignal(SigHandlerBlock*)+0xe5>
c00107c9:	83 f8 01             	cmp    eax,0x1
c00107cc:	0f 84 50 ff ff ff    	je     c0010722 <KeCheckSignal(SigHandlerBlock*)+0x12>
c00107d2:	85 c0                	test   eax,eax
c00107d4:	75 1f                	jne    c00107f5 <KeCheckSignal(SigHandlerBlock*)+0xe5>
c00107d6:	8b 04 95 20 01 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdfee0]
c00107dd:	eb 16                	jmp    c00107f5 <KeCheckSignal(SigHandlerBlock*)+0xe5>
c00107df:	46                   	inc    esi
c00107e0:	41                   	inc    ecx
c00107e1:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c00107e7:	83 f9 08             	cmp    ecx,0x8
c00107ea:	0f 85 40 ff ff ff    	jne    c0010730 <KeCheckSignal(SigHandlerBlock*)+0x20>
c00107f0:	e9 2d ff ff ff       	jmp    c0010722 <KeCheckSignal(SigHandlerBlock*)+0x12>
c00107f5:	5a                   	pop    edx
c00107f6:	5b                   	pop    ebx
c00107f7:	5e                   	pop    esi
c00107f8:	5f                   	pop    edi
c00107f9:	5d                   	pop    ebp
c00107fa:	c3                   	ret    

c00107fb <KiCheckSignalZ>:
c00107fb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010800:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010803:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0010809:	e8 02 ff ff ff       	call   c0010710 <KeCheckSignal(SigHandlerBlock*)>
c001080e:	5a                   	pop    edx
c001080f:	c3                   	ret    

c0010810 <KeCompleteSignal(SigHandlerBlock*, int)>:
c0010810:	56                   	push   esi
c0010811:	53                   	push   ebx
c0010812:	bb 01 00 00 00       	mov    ebx,0x1
c0010817:	52                   	push   edx
c0010818:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001081c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010820:	d3 e3                	shl    ebx,cl
c0010822:	83 f9 10             	cmp    ecx,0x10
c0010825:	7f 08                	jg     c001082f <KeCompleteSignal(SigHandlerBlock*, int)+0x1f>
c0010827:	85 9e c0 00 00 00    	test   DWORD PTR [esi+0xc0],ebx
c001082d:	75 10                	jne    c001083f <KeCompleteSignal(SigHandlerBlock*, int)+0x2f>
c001082f:	83 ec 0c             	sub    esp,0xc
c0010832:	68 b3 ef 01 c0       	push   0xc001efb3
c0010837:	e8 6b fa ff ff       	call   c00102a7 <KePanic(char const*)>
c001083c:	83 c4 10             	add    esp,0x10
c001083f:	f7 d3                	not    ebx
c0010841:	21 9e c0 00 00 00    	and    DWORD PTR [esi+0xc0],ebx
c0010847:	58                   	pop    eax
c0010848:	5b                   	pop    ebx
c0010849:	5e                   	pop    esi
c001084a:	c3                   	ret    

c001084b <SysSeekDir(regs*)>:
c001084b:	31 c0                	xor    eax,eax
c001084d:	31 d2                	xor    edx,edx
c001084f:	c3                   	ret    

c0010850 <SysTellDir(regs*)>:
c0010850:	31 c0                	xor    eax,eax
c0010852:	31 d2                	xor    edx,edx
c0010854:	c3                   	ret    

c0010855 <SysVerify(regs*)>:
c0010855:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010859:	31 d2                	xor    edx,edx
c001085b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001085e:	c3                   	ret    

c001085f <SysGetArgc(regs*)>:
c001085f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010864:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010867:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c001086d:	99                   	cdq    
c001086e:	c3                   	ret    

c001086f <SysTTYName(regs*)>:
c001086f:	b8 01 00 00 00       	mov    eax,0x1
c0010874:	31 d2                	xor    edx,edx
c0010876:	c3                   	ret    

c0010877 <SysFormatDisk(regs*)>:
c0010877:	56                   	push   esi
c0010878:	53                   	push   ebx
c0010879:	50                   	push   eax
c001087a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001087e:	8b 1d b4 2f 02 c0    	mov    ebx,DWORD PTR ds:0xc0022fb4
c0010884:	eb 28                	jmp    c00108ae <SysFormatDisk(regs*)+0x37>
c0010886:	83 ec 0c             	sub    esp,0xc
c0010889:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001088c:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c001088f:	8b 13                	mov    edx,DWORD PTR [ebx]
c0010891:	51                   	push   ecx
c0010892:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c0010895:	51                   	push   ecx
c0010896:	50                   	push   eax
c0010897:	8b 04 85 20 54 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdabe0]
c001089e:	50                   	push   eax
c001089f:	53                   	push   ebx
c00108a0:	ff 52 48             	call   DWORD PTR [edx+0x48]
c00108a3:	83 c4 20             	add    esp,0x20
c00108a6:	83 f8 08             	cmp    eax,0x8
c00108a9:	75 12                	jne    c00108bd <SysFormatDisk(regs*)+0x46>
c00108ab:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c00108ae:	85 db                	test   ebx,ebx
c00108b0:	75 d4                	jne    c0010886 <SysFormatDisk(regs*)+0xf>
c00108b2:	59                   	pop    ecx
c00108b3:	b8 03 00 00 00       	mov    eax,0x3
c00108b8:	31 d2                	xor    edx,edx
c00108ba:	5b                   	pop    ebx
c00108bb:	5e                   	pop    esi
c00108bc:	c3                   	ret    
c00108bd:	85 c0                	test   eax,eax
c00108bf:	74 1b                	je     c00108dc <SysFormatDisk(regs*)+0x65>
c00108c1:	83 f8 09             	cmp    eax,0x9
c00108c4:	74 0b                	je     c00108d1 <SysFormatDisk(regs*)+0x5a>
c00108c6:	59                   	pop    ecx
c00108c7:	b8 02 00 00 00       	mov    eax,0x2
c00108cc:	31 d2                	xor    edx,edx
c00108ce:	5b                   	pop    ebx
c00108cf:	5e                   	pop    esi
c00108d0:	c3                   	ret    
c00108d1:	59                   	pop    ecx
c00108d2:	b8 01 00 00 00       	mov    eax,0x1
c00108d7:	31 d2                	xor    edx,edx
c00108d9:	5b                   	pop    ebx
c00108da:	5e                   	pop    esi
c00108db:	c3                   	ret    
c00108dc:	59                   	pop    ecx
c00108dd:	31 c0                	xor    eax,eax
c00108df:	31 d2                	xor    edx,edx
c00108e1:	5b                   	pop    ebx
c00108e2:	5e                   	pop    esi
c00108e3:	c3                   	ret    

c00108e4 <SysSetDiskVolumeLabel(regs*)>:
c00108e4:	56                   	push   esi
c00108e5:	53                   	push   ebx
c00108e6:	53                   	push   ebx
c00108e7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00108eb:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00108ee:	83 f8 19             	cmp    eax,0x19
c00108f1:	77 2d                	ja     c0010920 <SysSetDiskVolumeLabel(regs*)+0x3c>
c00108f3:	8b 0c 85 20 54 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdabe0]
c00108fa:	85 c9                	test   ecx,ecx
c00108fc:	74 22                	je     c0010920 <SysSetDiskVolumeLabel(regs*)+0x3c>
c00108fe:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c0010901:	85 db                	test   ebx,ebx
c0010903:	74 1b                	je     c0010920 <SysSetDiskVolumeLabel(regs*)+0x3c>
c0010905:	8b 91 70 01 00 00    	mov    edx,DWORD PTR [ecx+0x170]
c001090b:	85 d2                	test   edx,edx
c001090d:	74 11                	je     c0010920 <SysSetDiskVolumeLabel(regs*)+0x3c>
c001090f:	8b 32                	mov    esi,DWORD PTR [edx]
c0010911:	53                   	push   ebx
c0010912:	50                   	push   eax
c0010913:	51                   	push   ecx
c0010914:	52                   	push   edx
c0010915:	ff 56 58             	call   DWORD PTR [esi+0x58]
c0010918:	83 c4 10             	add    esp,0x10
c001091b:	99                   	cdq    
c001091c:	59                   	pop    ecx
c001091d:	5b                   	pop    ebx
c001091e:	5e                   	pop    esi
c001091f:	c3                   	ret    
c0010920:	59                   	pop    ecx
c0010921:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0010926:	ba ff ff ff ff       	mov    edx,0xffffffff
c001092b:	5b                   	pop    ebx
c001092c:	5e                   	pop    esi
c001092d:	c3                   	ret    

c001092e <SysGetDiskVolumeLabel(regs*)>:
c001092e:	57                   	push   edi
c001092f:	56                   	push   esi
c0010930:	53                   	push   ebx
c0010931:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010935:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0010938:	83 fa 19             	cmp    edx,0x19
c001093b:	77 38                	ja     c0010975 <SysGetDiskVolumeLabel(regs*)+0x47>
c001093d:	8b 0c 95 20 54 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffdabe0]
c0010944:	85 c9                	test   ecx,ecx
c0010946:	74 2d                	je     c0010975 <SysGetDiskVolumeLabel(regs*)+0x47>
c0010948:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001094b:	85 db                	test   ebx,ebx
c001094d:	74 26                	je     c0010975 <SysGetDiskVolumeLabel(regs*)+0x47>
c001094f:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0010952:	85 f6                	test   esi,esi
c0010954:	74 1f                	je     c0010975 <SysGetDiskVolumeLabel(regs*)+0x47>
c0010956:	8b 81 70 01 00 00    	mov    eax,DWORD PTR [ecx+0x170]
c001095c:	85 c0                	test   eax,eax
c001095e:	74 15                	je     c0010975 <SysGetDiskVolumeLabel(regs*)+0x47>
c0010960:	83 ec 0c             	sub    esp,0xc
c0010963:	8b 38                	mov    edi,DWORD PTR [eax]
c0010965:	56                   	push   esi
c0010966:	53                   	push   ebx
c0010967:	52                   	push   edx
c0010968:	51                   	push   ecx
c0010969:	50                   	push   eax
c001096a:	ff 57 54             	call   DWORD PTR [edi+0x54]
c001096d:	83 c4 20             	add    esp,0x20
c0010970:	99                   	cdq    
c0010971:	5b                   	pop    ebx
c0010972:	5e                   	pop    esi
c0010973:	5f                   	pop    edi
c0010974:	c3                   	ret    
c0010975:	5b                   	pop    ebx
c0010976:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001097b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010980:	5e                   	pop    esi
c0010981:	5f                   	pop    edi
c0010982:	c3                   	ret    

c0010983 <SysShutdown(regs*)>:
c0010983:	83 ec 0c             	sub    esp,0xc
c0010986:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001098a:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001098d:	85 c0                	test   eax,eax
c001098f:	74 18                	je     c00109a9 <SysShutdown(regs*)+0x26>
c0010991:	83 f8 01             	cmp    eax,0x1
c0010994:	74 38                	je     c00109ce <SysShutdown(regs*)+0x4b>
c0010996:	83 f8 02             	cmp    eax,0x2
c0010999:	74 24                	je     c00109bf <SysShutdown(regs*)+0x3c>
c001099b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00109a0:	ba ff ff ff ff       	mov    edx,0xffffffff
c00109a5:	83 c4 0c             	add    esp,0xc
c00109a8:	c3                   	ret    
c00109a9:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c00109ae:	8b 10                	mov    edx,DWORD PTR [eax]
c00109b0:	6a 00                	push   0x0
c00109b2:	6a 00                	push   0x0
c00109b4:	6a 00                	push   0x0
c00109b6:	50                   	push   eax
c00109b7:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00109ba:	83 c4 10             	add    esp,0x10
c00109bd:	eb dc                	jmp    c001099b <SysShutdown(regs*)+0x18>
c00109bf:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c00109c4:	8b 10                	mov    edx,DWORD PTR [eax]
c00109c6:	6a 00                	push   0x0
c00109c8:	6a 00                	push   0x0
c00109ca:	6a 01                	push   0x1
c00109cc:	eb e8                	jmp    c00109b6 <SysShutdown(regs*)+0x33>
c00109ce:	a1 a0 54 02 c0       	mov    eax,ds:0xc00254a0
c00109d3:	85 c0                	test   eax,eax
c00109d5:	74 02                	je     c00109d9 <SysShutdown(regs*)+0x56>
c00109d7:	ff d0                	call   eax
c00109d9:	31 c0                	xor    eax,eax
c00109db:	31 d2                	xor    edx,edx
c00109dd:	83 c4 0c             	add    esp,0xc
c00109e0:	c3                   	ret    

c00109e1 <SysRealpath(regs*)>:
c00109e1:	83 ec 0c             	sub    esp,0xc
c00109e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109e8:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c00109eb:	85 d2                	test   edx,edx
c00109ed:	74 07                	je     c00109f6 <SysRealpath(regs*)+0x15>
c00109ef:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00109f2:	85 c0                	test   eax,eax
c00109f4:	75 0b                	jne    c0010a01 <SysRealpath(regs*)+0x20>
c00109f6:	b8 01 00 00 00       	mov    eax,0x1
c00109fb:	31 d2                	xor    edx,edx
c00109fd:	83 c4 0c             	add    esp,0xc
c0010a00:	c3                   	ret    
c0010a01:	51                   	push   ecx
c0010a02:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0010a08:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0010a0b:	81 c1 0c 01 00 00    	add    ecx,0x10c
c0010a11:	51                   	push   ecx
c0010a12:	52                   	push   edx
c0010a13:	50                   	push   eax
c0010a14:	e8 05 9f ff ff       	call   c000a91e <Fs::standardiseFiles(char*, char const*, char const*)>
c0010a19:	83 c4 10             	add    esp,0x10
c0010a1c:	31 c0                	xor    eax,eax
c0010a1e:	31 d2                	xor    edx,edx
c0010a20:	83 c4 0c             	add    esp,0xc
c0010a23:	c3                   	ret    

c0010a24 <SysReadDir(regs*)>:
c0010a24:	53                   	push   ebx
c0010a25:	83 ec 18             	sub    esp,0x18
c0010a28:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010a2c:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0010a2f:	83 f8 02             	cmp    eax,0x2
c0010a32:	76 61                	jbe    c0010a95 <SysReadDir(regs*)+0x71>
c0010a34:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c0010a3b:	77 49                	ja     c0010a86 <SysReadDir(regs*)+0x62>
c0010a3d:	83 ec 0c             	sub    esp,0xc
c0010a40:	50                   	push   eax
c0010a41:	e8 f9 86 ff ff       	call   c000913f <getFromFileDescriptor(int)>
c0010a46:	83 c4 10             	add    esp,0x10
c0010a49:	85 c0                	test   eax,eax
c0010a4b:	74 39                	je     c0010a86 <SysReadDir(regs*)+0x62>
c0010a4d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010a55:	83 ec 0c             	sub    esp,0xc
c0010a58:	8b 10                	mov    edx,DWORD PTR [eax]
c0010a5a:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0010a5e:	51                   	push   ecx
c0010a5f:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0010a62:	51                   	push   ecx
c0010a63:	6a 00                	push   0x0
c0010a65:	68 10 01 00 00       	push   0x110
c0010a6a:	50                   	push   eax
c0010a6b:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0010a6e:	83 c4 20             	add    esp,0x20
c0010a71:	85 c0                	test   eax,eax
c0010a73:	74 29                	je     c0010a9e <SysReadDir(regs*)+0x7a>
c0010a75:	83 f8 07             	cmp    eax,0x7
c0010a78:	74 1b                	je     c0010a95 <SysReadDir(regs*)+0x71>
c0010a7a:	b8 02 00 00 00       	mov    eax,0x2
c0010a7f:	31 d2                	xor    edx,edx
c0010a81:	83 c4 18             	add    esp,0x18
c0010a84:	5b                   	pop    ebx
c0010a85:	c3                   	ret    
c0010a86:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010a8b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010a90:	83 c4 18             	add    esp,0x18
c0010a93:	5b                   	pop    ebx
c0010a94:	c3                   	ret    
c0010a95:	b8 01 00 00 00       	mov    eax,0x1
c0010a9a:	31 d2                	xor    edx,edx
c0010a9c:	eb e3                	jmp    c0010a81 <SysReadDir(regs*)+0x5d>
c0010a9e:	31 c0                	xor    eax,eax
c0010aa0:	31 d2                	xor    edx,edx
c0010aa2:	eb dd                	jmp    c0010a81 <SysReadDir(regs*)+0x5d>

c0010aa4 <SysIsATTY(regs*)>:
c0010aa4:	83 ec 0c             	sub    esp,0xc
c0010aa7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010aab:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010aae:	83 f8 02             	cmp    eax,0x2
c0010ab1:	76 07                	jbe    c0010aba <SysIsATTY(regs*)+0x16>
c0010ab3:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0010ab8:	75 28                	jne    c0010ae2 <SysIsATTY(regs*)+0x3e>
c0010aba:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010abf:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010ac2:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0010ac8:	85 c0                	test   eax,eax
c0010aca:	74 26                	je     c0010af2 <SysIsATTY(regs*)+0x4e>
c0010acc:	83 ec 0c             	sub    esp,0xc
c0010acf:	8b 10                	mov    edx,DWORD PTR [eax]
c0010ad1:	50                   	push   eax
c0010ad2:	ff 12                	call   DWORD PTR [edx]
c0010ad4:	31 d2                	xor    edx,edx
c0010ad6:	25 ff 00 00 00       	and    eax,0xff
c0010adb:	83 c4 10             	add    esp,0x10
c0010ade:	83 c4 0c             	add    esp,0xc
c0010ae1:	c3                   	ret    
c0010ae2:	83 ec 0c             	sub    esp,0xc
c0010ae5:	50                   	push   eax
c0010ae6:	e8 54 86 ff ff       	call   c000913f <getFromFileDescriptor(int)>
c0010aeb:	83 c4 10             	add    esp,0x10
c0010aee:	85 c0                	test   eax,eax
c0010af0:	75 da                	jne    c0010acc <SysIsATTY(regs*)+0x28>
c0010af2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010af7:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010afc:	83 c4 0c             	add    esp,0xc
c0010aff:	c3                   	ret    

c0010b00 <SysSeek(regs*)>:
c0010b00:	53                   	push   ebx
c0010b01:	83 ec 08             	sub    esp,0x8
c0010b04:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010b08:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010b0b:	8d 50 fd             	lea    edx,[eax-0x3]
c0010b0e:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0010b14:	77 34                	ja     c0010b4a <SysSeek(regs*)+0x4a>
c0010b16:	83 ec 0c             	sub    esp,0xc
c0010b19:	50                   	push   eax
c0010b1a:	e8 20 86 ff ff       	call   c000913f <getFromFileDescriptor(int)>
c0010b1f:	83 c4 0c             	add    esp,0xc
c0010b22:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0010b25:	31 db                	xor    ebx,ebx
c0010b27:	53                   	push   ebx
c0010b28:	51                   	push   ecx
c0010b29:	50                   	push   eax
c0010b2a:	e8 17 a1 ff ff       	call   c000ac46 <File::seek(unsigned long long)>
c0010b2f:	83 c4 10             	add    esp,0x10
c0010b32:	85 c0                	test   eax,eax
c0010b34:	0f 95 c0             	setne  al
c0010b37:	31 d2                	xor    edx,edx
c0010b39:	25 ff 00 00 00       	and    eax,0xff
c0010b3e:	f7 d8                	neg    eax
c0010b40:	83 d2 00             	adc    edx,0x0
c0010b43:	83 c4 08             	add    esp,0x8
c0010b46:	f7 da                	neg    edx
c0010b48:	5b                   	pop    ebx
c0010b49:	c3                   	ret    
c0010b4a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010b4f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010b54:	83 c4 08             	add    esp,0x8
c0010b57:	5b                   	pop    ebx
c0010b58:	c3                   	ret    

c0010b59 <SysTell(regs*)>:
c0010b59:	53                   	push   ebx
c0010b5a:	83 ec 08             	sub    esp,0x8
c0010b5d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010b61:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010b64:	83 f8 02             	cmp    eax,0x2
c0010b67:	76 50                	jbe    c0010bb9 <SysTell(regs*)+0x60>
c0010b69:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0010b6e:	76 19                	jbe    c0010b89 <SysTell(regs*)+0x30>
c0010b70:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0010b73:	31 d2                	xor    edx,edx
c0010b75:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010b7b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010b82:	31 c0                	xor    eax,eax
c0010b84:	83 c4 08             	add    esp,0x8
c0010b87:	5b                   	pop    ebx
c0010b88:	c3                   	ret    
c0010b89:	83 ec 0c             	sub    esp,0xc
c0010b8c:	50                   	push   eax
c0010b8d:	e8 ad 85 ff ff       	call   c000913f <getFromFileDescriptor(int)>
c0010b92:	5a                   	pop    edx
c0010b93:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0010b96:	59                   	pop    ecx
c0010b97:	53                   	push   ebx
c0010b98:	50                   	push   eax
c0010b99:	e8 fe a0 ff ff       	call   c000ac9c <File::tell(unsigned long long*)>
c0010b9e:	83 c4 10             	add    esp,0x10
c0010ba1:	85 c0                	test   eax,eax
c0010ba3:	0f 95 c0             	setne  al
c0010ba6:	31 d2                	xor    edx,edx
c0010ba8:	25 ff 00 00 00       	and    eax,0xff
c0010bad:	f7 d8                	neg    eax
c0010baf:	83 d2 00             	adc    edx,0x0
c0010bb2:	83 c4 08             	add    esp,0x8
c0010bb5:	f7 da                	neg    edx
c0010bb7:	5b                   	pop    ebx
c0010bb8:	c3                   	ret    
c0010bb9:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010bbe:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010bc3:	83 c4 08             	add    esp,0x8
c0010bc6:	5b                   	pop    ebx
c0010bc7:	c3                   	ret    

c0010bc8 <SysSize(regs*)>:
c0010bc8:	53                   	push   ebx
c0010bc9:	83 ec 18             	sub    esp,0x18
c0010bcc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010bd0:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010bd3:	83 f8 02             	cmp    eax,0x2
c0010bd6:	76 56                	jbe    c0010c2e <SysSize(regs*)+0x66>
c0010bd8:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0010bdd:	76 19                	jbe    c0010bf8 <SysSize(regs*)+0x30>
c0010bdf:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0010be2:	31 d2                	xor    edx,edx
c0010be4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010bea:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010bf1:	31 c0                	xor    eax,eax
c0010bf3:	83 c4 18             	add    esp,0x18
c0010bf6:	5b                   	pop    ebx
c0010bf7:	c3                   	ret    
c0010bf8:	83 ec 0c             	sub    esp,0xc
c0010bfb:	50                   	push   eax
c0010bfc:	e8 3e 85 ff ff       	call   c000913f <getFromFileDescriptor(int)>
c0010c01:	83 c4 0c             	add    esp,0xc
c0010c04:	8d 54 24 13          	lea    edx,[esp+0x13]
c0010c08:	52                   	push   edx
c0010c09:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0010c0c:	52                   	push   edx
c0010c0d:	50                   	push   eax
c0010c0e:	e8 21 a2 ff ff       	call   c000ae34 <File::stat(unsigned long long*, bool*)>
c0010c13:	83 c4 10             	add    esp,0x10
c0010c16:	85 c0                	test   eax,eax
c0010c18:	0f 95 c0             	setne  al
c0010c1b:	31 d2                	xor    edx,edx
c0010c1d:	25 ff 00 00 00       	and    eax,0xff
c0010c22:	f7 d8                	neg    eax
c0010c24:	83 d2 00             	adc    edx,0x0
c0010c27:	83 c4 18             	add    esp,0x18
c0010c2a:	f7 da                	neg    edx
c0010c2c:	5b                   	pop    ebx
c0010c2d:	c3                   	ret    
c0010c2e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010c33:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010c38:	83 c4 18             	add    esp,0x18
c0010c3b:	5b                   	pop    ebx
c0010c3c:	c3                   	ret    

c0010c3d <SysSizeFromFilename(regs*)>:
c0010c3d:	57                   	push   edi
c0010c3e:	56                   	push   esi
c0010c3f:	53                   	push   ebx
c0010c40:	83 ec 20             	sub    esp,0x20
c0010c43:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010c47:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c0010c4a:	83 fb 02             	cmp    ebx,0x2
c0010c4d:	0f 86 8c 00 00 00    	jbe    c0010cdf <SysSizeFromFilename(regs*)+0xa2>
c0010c53:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0010c59:	76 1b                	jbe    c0010c76 <SysSizeFromFilename(regs*)+0x39>
c0010c5b:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0010c5e:	31 d2                	xor    edx,edx
c0010c60:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010c66:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010c6d:	83 c4 20             	add    esp,0x20
c0010c70:	31 c0                	xor    eax,eax
c0010c72:	5b                   	pop    ebx
c0010c73:	5e                   	pop    esi
c0010c74:	5f                   	pop    edi
c0010c75:	c3                   	ret    
c0010c76:	83 ec 0c             	sub    esp,0xc
c0010c79:	68 14 01 00 00       	push   0x114
c0010c7e:	e8 36 6b ff ff       	call   c00077b9 <malloc>
c0010c83:	83 c4 0c             	add    esp,0xc
c0010c86:	89 c7                	mov    edi,eax
c0010c88:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010c8d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010c90:	50                   	push   eax
c0010c91:	53                   	push   ebx
c0010c92:	57                   	push   edi
c0010c93:	e8 30 9e ff ff       	call   c000aac8 <File::File(char const*, Process*)>
c0010c98:	83 c4 0c             	add    esp,0xc
c0010c9b:	8d 44 24 23          	lea    eax,[esp+0x23]
c0010c9f:	50                   	push   eax
c0010ca0:	8b 56 28             	mov    edx,DWORD PTR [esi+0x28]
c0010ca3:	52                   	push   edx
c0010ca4:	57                   	push   edi
c0010ca5:	e8 8a a1 ff ff       	call   c000ae34 <File::stat(unsigned long long*, bool*)>
c0010caa:	83 c4 10             	add    esp,0x10
c0010cad:	85 ff                	test   edi,edi
c0010caf:	74 14                	je     c0010cc5 <SysSizeFromFilename(regs*)+0x88>
c0010cb1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010cb5:	8b 17                	mov    edx,DWORD PTR [edi]
c0010cb7:	83 ec 0c             	sub    esp,0xc
c0010cba:	57                   	push   edi
c0010cbb:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0010cbe:	83 c4 10             	add    esp,0x10
c0010cc1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010cc5:	85 c0                	test   eax,eax
c0010cc7:	0f 95 c0             	setne  al
c0010cca:	31 d2                	xor    edx,edx
c0010ccc:	25 ff 00 00 00       	and    eax,0xff
c0010cd1:	f7 d8                	neg    eax
c0010cd3:	83 d2 00             	adc    edx,0x0
c0010cd6:	83 c4 20             	add    esp,0x20
c0010cd9:	f7 da                	neg    edx
c0010cdb:	5b                   	pop    ebx
c0010cdc:	5e                   	pop    esi
c0010cdd:	5f                   	pop    edi
c0010cde:	c3                   	ret    
c0010cdf:	83 c4 20             	add    esp,0x20
c0010ce2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010ce7:	5b                   	pop    ebx
c0010ce8:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010ced:	5e                   	pop    esi
c0010cee:	5f                   	pop    edi
c0010cef:	c3                   	ret    

c0010cf0 <SysClose(regs*)>:
c0010cf0:	53                   	push   ebx
c0010cf1:	83 ec 08             	sub    esp,0x8
c0010cf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010cf8:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010cfb:	83 f8 02             	cmp    eax,0x2
c0010cfe:	76 41                	jbe    c0010d41 <SysClose(regs*)+0x51>
c0010d00:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c0010d06:	83 fa 01             	cmp    edx,0x1
c0010d09:	76 2d                	jbe    c0010d38 <SysClose(regs*)+0x48>
c0010d0b:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0010d10:	77 2f                	ja     c0010d41 <SysClose(regs*)+0x51>
c0010d12:	83 ec 0c             	sub    esp,0xc
c0010d15:	50                   	push   eax
c0010d16:	e8 24 84 ff ff       	call   c000913f <getFromFileDescriptor(int)>
c0010d1b:	89 c3                	mov    ebx,eax
c0010d1d:	89 04 24             	mov    DWORD PTR [esp],eax
c0010d20:	e8 c1 9e ff ff       	call   c000abe6 <File::close()>
c0010d25:	83 c4 10             	add    esp,0x10
c0010d28:	85 db                	test   ebx,ebx
c0010d2a:	74 0c                	je     c0010d38 <SysClose(regs*)+0x48>
c0010d2c:	83 ec 0c             	sub    esp,0xc
c0010d2f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010d31:	53                   	push   ebx
c0010d32:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010d35:	83 c4 10             	add    esp,0x10
c0010d38:	31 c0                	xor    eax,eax
c0010d3a:	31 d2                	xor    edx,edx
c0010d3c:	83 c4 08             	add    esp,0x8
c0010d3f:	5b                   	pop    ebx
c0010d40:	c3                   	ret    
c0010d41:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010d46:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010d4b:	83 c4 08             	add    esp,0x8
c0010d4e:	5b                   	pop    ebx
c0010d4f:	c3                   	ret    

c0010d50 <SysOpenDir(regs*)>:
c0010d50:	56                   	push   esi
c0010d51:	53                   	push   ebx
c0010d52:	50                   	push   eax
c0010d53:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010d57:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010d5a:	85 c0                	test   eax,eax
c0010d5c:	74 5b                	je     c0010db9 <SysOpenDir(regs*)+0x69>
c0010d5e:	83 ec 0c             	sub    esp,0xc
c0010d61:	68 14 01 00 00       	push   0x114
c0010d66:	e8 4e 6a ff ff       	call   c00077b9 <malloc>
c0010d6b:	83 c4 0c             	add    esp,0xc
c0010d6e:	89 c6                	mov    esi,eax
c0010d70:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010d75:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010d78:	50                   	push   eax
c0010d79:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010d7c:	50                   	push   eax
c0010d7d:	56                   	push   esi
c0010d7e:	e8 bb a2 ff ff       	call   c000b03e <Directory::Directory(char const*, Process*)>
c0010d83:	83 c4 10             	add    esp,0x10
c0010d86:	85 f6                	test   esi,esi
c0010d88:	74 2f                	je     c0010db9 <SysOpenDir(regs*)+0x69>
c0010d8a:	83 ec 0c             	sub    esp,0xc
c0010d8d:	56                   	push   esi
c0010d8e:	e8 6b a3 ff ff       	call   c000b0fe <Directory::open()>
c0010d93:	83 c4 10             	add    esp,0x10
c0010d96:	85 c0                	test   eax,eax
c0010d98:	75 1f                	jne    c0010db9 <SysOpenDir(regs*)+0x69>
c0010d9a:	83 ec 0c             	sub    esp,0xc
c0010d9d:	56                   	push   esi
c0010d9e:	e8 a7 80 ff ff       	call   c0008e4a <UnixFile::getFileDescriptor()>
c0010da3:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0010da6:	83 c4 10             	add    esp,0x10
c0010da9:	89 02                	mov    DWORD PTR [edx],eax
c0010dab:	c1 f8 1f             	sar    eax,0x1f
c0010dae:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0010db1:	31 c0                	xor    eax,eax
c0010db3:	59                   	pop    ecx
c0010db4:	31 d2                	xor    edx,edx
c0010db6:	5b                   	pop    ebx
c0010db7:	5e                   	pop    esi
c0010db8:	c3                   	ret    
c0010db9:	59                   	pop    ecx
c0010dba:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010dbf:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010dc4:	5b                   	pop    ebx
c0010dc5:	5e                   	pop    esi
c0010dc6:	c3                   	ret    

c0010dc7 <SysMakeDir(regs*)>:
c0010dc7:	56                   	push   esi
c0010dc8:	53                   	push   ebx
c0010dc9:	83 ec 10             	sub    esp,0x10
c0010dcc:	68 14 01 00 00       	push   0x114
c0010dd1:	e8 e3 69 ff ff       	call   c00077b9 <malloc>
c0010dd6:	83 c4 0c             	add    esp,0xc
c0010dd9:	89 c3                	mov    ebx,eax
c0010ddb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010de0:	8b 70 3c             	mov    esi,DWORD PTR [eax+0x3c]
c0010de3:	56                   	push   esi
c0010de4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0010de8:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0010deb:	50                   	push   eax
c0010dec:	53                   	push   ebx
c0010ded:	e8 4c a2 ff ff       	call   c000b03e <Directory::Directory(char const*, Process*)>
c0010df2:	83 c4 10             	add    esp,0x10
c0010df5:	85 db                	test   ebx,ebx
c0010df7:	74 2a                	je     c0010e23 <SysMakeDir(regs*)+0x5c>
c0010df9:	83 ec 0c             	sub    esp,0xc
c0010dfc:	53                   	push   ebx
c0010dfd:	e8 dc a4 ff ff       	call   c000b2de <Directory::create()>
c0010e02:	89 c6                	mov    esi,eax
c0010e04:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010e06:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010e09:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010e0c:	83 c4 10             	add    esp,0x10
c0010e0f:	31 c0                	xor    eax,eax
c0010e11:	59                   	pop    ecx
c0010e12:	85 f6                	test   esi,esi
c0010e14:	5b                   	pop    ebx
c0010e15:	0f 95 c0             	setne  al
c0010e18:	5e                   	pop    esi
c0010e19:	31 d2                	xor    edx,edx
c0010e1b:	f7 d8                	neg    eax
c0010e1d:	83 d2 00             	adc    edx,0x0
c0010e20:	f7 da                	neg    edx
c0010e22:	c3                   	ret    
c0010e23:	59                   	pop    ecx
c0010e24:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010e29:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010e2e:	5b                   	pop    ebx
c0010e2f:	5e                   	pop    esi
c0010e30:	c3                   	ret    

c0010e31 <SysCloseDir(regs*)>:
c0010e31:	53                   	push   ebx
c0010e32:	83 ec 08             	sub    esp,0x8
c0010e35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e39:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010e3c:	8d 50 fd             	lea    edx,[eax-0x3]
c0010e3f:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0010e45:	77 2f                	ja     c0010e76 <SysCloseDir(regs*)+0x45>
c0010e47:	83 ec 0c             	sub    esp,0xc
c0010e4a:	50                   	push   eax
c0010e4b:	e8 ef 82 ff ff       	call   c000913f <getFromFileDescriptor(int)>
c0010e50:	89 c3                	mov    ebx,eax
c0010e52:	89 04 24             	mov    DWORD PTR [esp],eax
c0010e55:	e8 00 a3 ff ff       	call   c000b15a <Directory::close()>
c0010e5a:	83 c4 10             	add    esp,0x10
c0010e5d:	85 db                	test   ebx,ebx
c0010e5f:	74 0c                	je     c0010e6d <SysCloseDir(regs*)+0x3c>
c0010e61:	83 ec 0c             	sub    esp,0xc
c0010e64:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010e66:	53                   	push   ebx
c0010e67:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010e6a:	83 c4 10             	add    esp,0x10
c0010e6d:	31 c0                	xor    eax,eax
c0010e6f:	31 d2                	xor    edx,edx
c0010e71:	83 c4 08             	add    esp,0x8
c0010e74:	5b                   	pop    ebx
c0010e75:	c3                   	ret    
c0010e76:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010e7b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010e80:	83 c4 08             	add    esp,0x8
c0010e83:	5b                   	pop    ebx
c0010e84:	c3                   	ret    

c0010e85 <SysWait(regs*)>:
c0010e85:	83 ec 10             	sub    esp,0x10
c0010e88:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010e8c:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0010e8f:	52                   	push   edx
c0010e90:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c0010e93:	51                   	push   ecx
c0010e94:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010e97:	50                   	push   eax
c0010e98:	e8 53 2b 00 00       	call   c00139f0 <waitTask(int, int*, int)>
c0010e9d:	83 c4 1c             	add    esp,0x1c
c0010ea0:	99                   	cdq    
c0010ea1:	c3                   	ret    

c0010ea2 <SysNotImpl(regs*)>:
c0010ea2:	83 ec 18             	sub    esp,0x18
c0010ea5:	68 c4 ef 01 c0       	push   0xc001efc4
c0010eaa:	e8 f8 f3 ff ff       	call   c00102a7 <KePanic(char const*)>
c0010eaf:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010eb4:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010eb9:	83 c4 1c             	add    esp,0x1c
c0010ebc:	c3                   	ret    

c0010ebd <SysPanic(regs*)>:
c0010ebd:	83 ec 18             	sub    esp,0x18
c0010ec0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010ec4:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0010ec7:	50                   	push   eax
c0010ec8:	e8 da f3 ff ff       	call   c00102a7 <KePanic(char const*)>
c0010ecd:	b8 01 00 00 00       	mov    eax,0x1
c0010ed2:	31 d2                	xor    edx,edx
c0010ed4:	83 c4 1c             	add    esp,0x1c
c0010ed7:	c3                   	ret    

c0010ed8 <SysRmdir(regs*)>:
c0010ed8:	56                   	push   esi
c0010ed9:	53                   	push   ebx
c0010eda:	83 ec 20             	sub    esp,0x20
c0010edd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0010ee1:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0010ee4:	68 14 01 00 00       	push   0x114
c0010ee9:	e8 cb 68 ff ff       	call   c00077b9 <malloc>
c0010eee:	83 c4 0c             	add    esp,0xc
c0010ef1:	89 c3                	mov    ebx,eax
c0010ef3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010ef8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010efb:	50                   	push   eax
c0010efc:	56                   	push   esi
c0010efd:	53                   	push   ebx
c0010efe:	e8 c5 9b ff ff       	call   c000aac8 <File::File(char const*, Process*)>
c0010f03:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010f06:	e8 f5 9d ff ff       	call   c000ad00 <File::unlink()>
c0010f0b:	83 c4 10             	add    esp,0x10
c0010f0e:	85 db                	test   ebx,ebx
c0010f10:	74 14                	je     c0010f26 <SysRmdir(regs*)+0x4e>
c0010f12:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010f16:	8b 13                	mov    edx,DWORD PTR [ebx]
c0010f18:	83 ec 0c             	sub    esp,0xc
c0010f1b:	53                   	push   ebx
c0010f1c:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0010f1f:	83 c4 10             	add    esp,0x10
c0010f22:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010f26:	85 c0                	test   eax,eax
c0010f28:	0f 95 c0             	setne  al
c0010f2b:	31 d2                	xor    edx,edx
c0010f2d:	25 ff 00 00 00       	and    eax,0xff
c0010f32:	f7 d8                	neg    eax
c0010f34:	83 d2 00             	adc    edx,0x0
c0010f37:	83 c4 14             	add    esp,0x14
c0010f3a:	f7 da                	neg    edx
c0010f3c:	5b                   	pop    ebx
c0010f3d:	5e                   	pop    esi
c0010f3e:	c3                   	ret    

c0010f3f <SysUnlink(regs*)>:
c0010f3f:	56                   	push   esi
c0010f40:	53                   	push   ebx
c0010f41:	83 ec 20             	sub    esp,0x20
c0010f44:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0010f48:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0010f4b:	68 14 01 00 00       	push   0x114
c0010f50:	e8 64 68 ff ff       	call   c00077b9 <malloc>
c0010f55:	83 c4 0c             	add    esp,0xc
c0010f58:	89 c3                	mov    ebx,eax
c0010f5a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010f5f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010f62:	50                   	push   eax
c0010f63:	56                   	push   esi
c0010f64:	53                   	push   ebx
c0010f65:	e8 5e 9b ff ff       	call   c000aac8 <File::File(char const*, Process*)>
c0010f6a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010f6d:	e8 8e 9d ff ff       	call   c000ad00 <File::unlink()>
c0010f72:	83 c4 10             	add    esp,0x10
c0010f75:	85 db                	test   ebx,ebx
c0010f77:	74 14                	je     c0010f8d <SysUnlink(regs*)+0x4e>
c0010f79:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010f7d:	8b 13                	mov    edx,DWORD PTR [ebx]
c0010f7f:	83 ec 0c             	sub    esp,0xc
c0010f82:	53                   	push   ebx
c0010f83:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0010f86:	83 c4 10             	add    esp,0x10
c0010f89:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010f8d:	85 c0                	test   eax,eax
c0010f8f:	0f 95 c0             	setne  al
c0010f92:	31 d2                	xor    edx,edx
c0010f94:	25 ff 00 00 00       	and    eax,0xff
c0010f99:	f7 d8                	neg    eax
c0010f9b:	83 d2 00             	adc    edx,0x0
c0010f9e:	83 c4 14             	add    esp,0x14
c0010fa1:	f7 da                	neg    edx
c0010fa3:	5b                   	pop    ebx
c0010fa4:	5e                   	pop    esi
c0010fa5:	c3                   	ret    

c0010fa6 <SysGetArgv(regs*)>:
c0010fa6:	83 ec 0c             	sub    esp,0xc
c0010fa9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010fad:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0010fb0:	85 c0                	test   eax,eax
c0010fb2:	78 2c                	js     c0010fe0 <SysGetArgv(regs*)+0x3a>
c0010fb4:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0010fba:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0010fbd:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c0010fc3:	7d 1b                	jge    c0010fe0 <SysGetArgv(regs*)+0x3a>
c0010fc5:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c0010fcc:	85 c0                	test   eax,eax
c0010fce:	74 18                	je     c0010fe8 <SysGetArgv(regs*)+0x42>
c0010fd0:	83 ec 08             	sub    esp,0x8
c0010fd3:	50                   	push   eax
c0010fd4:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c0010fd7:	50                   	push   eax
c0010fd8:	e8 23 f6 fe ff       	call   c0000600 <strcpy>
c0010fdd:	83 c4 10             	add    esp,0x10
c0010fe0:	31 c0                	xor    eax,eax
c0010fe2:	31 d2                	xor    edx,edx
c0010fe4:	83 c4 0c             	add    esp,0xc
c0010fe7:	c3                   	ret    
c0010fe8:	b8 01 00 00 00       	mov    eax,0x1
c0010fed:	31 d2                	xor    edx,edx
c0010fef:	83 c4 0c             	add    esp,0xc
c0010ff2:	c3                   	ret    

c0010ff3 <SysUSleep(regs*)>:
c0010ff3:	83 ec 1c             	sub    esp,0x1c
c0010ff6:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0010ffa:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0010ffd:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c0011000:	6a 00                	push   0x0
c0011002:	6a 64                	push   0x64
c0011004:	52                   	push   edx
c0011005:	50                   	push   eax
c0011006:	e8 d5 b8 00 00       	call   c001c8e0 <__udivdi3>
c001100b:	83 c4 14             	add    esp,0x14
c001100e:	50                   	push   eax
c001100f:	e8 b0 2a 00 00       	call   c0013ac4 <milliTenthSleep(unsigned int)>
c0011014:	31 c0                	xor    eax,eax
c0011016:	31 d2                	xor    edx,edx
c0011018:	83 c4 1c             	add    esp,0x1c
c001101b:	c3                   	ret    

c001101c <SysSpawn(regs*)>:
c001101c:	56                   	push   esi
c001101d:	53                   	push   ebx
c001101e:	50                   	push   eax
c001101f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011023:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011026:	85 c0                	test   eax,eax
c0011028:	75 08                	jne    c0011032 <SysSpawn(regs*)+0x16>
c001102a:	59                   	pop    ecx
c001102b:	31 c0                	xor    eax,eax
c001102d:	31 d2                	xor    edx,edx
c001102f:	5b                   	pop    ebx
c0011030:	5e                   	pop    esi
c0011031:	c3                   	ret    
c0011032:	83 ec 0c             	sub    esp,0xc
c0011035:	68 24 07 00 00       	push   0x724
c001103a:	e8 7a 67 ff ff       	call   c00077b9 <malloc>
c001103f:	83 c4 10             	add    esp,0x10
c0011042:	89 c6                	mov    esi,eax
c0011044:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011047:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001104a:	85 c0                	test   eax,eax
c001104c:	75 33                	jne    c0011081 <SysSpawn(regs*)+0x65>
c001104e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011053:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011056:	52                   	push   edx
c0011057:	50                   	push   eax
c0011058:	8b 5b 24             	mov    ebx,DWORD PTR [ebx+0x24]
c001105b:	53                   	push   ebx
c001105c:	56                   	push   esi
c001105d:	e8 0e 21 00 00       	call   c0013170 <Process::Process(char const*, Process*, char**)>
c0011062:	83 c4 10             	add    esp,0x10
c0011065:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c001106c:	75 bc                	jne    c001102a <SysSpawn(regs*)+0xe>
c001106e:	83 ec 0c             	sub    esp,0xc
c0011071:	56                   	push   esi
c0011072:	e8 25 26 00 00       	call   c001369c <Process::createUserThread()>
c0011077:	8b 06                	mov    eax,DWORD PTR [esi]
c0011079:	83 c4 10             	add    esp,0x10
c001107c:	99                   	cdq    
c001107d:	59                   	pop    ecx
c001107e:	5b                   	pop    ebx
c001107f:	5e                   	pop    esi
c0011080:	c3                   	ret    
c0011081:	31 c0                	xor    eax,eax
c0011083:	eb d1                	jmp    c0011056 <SysSpawn(regs*)+0x3a>

c0011085 <SysGetEnv(regs*)>:
c0011085:	57                   	push   edi
c0011086:	56                   	push   esi
c0011087:	53                   	push   ebx
c0011088:	83 ec 1c             	sub    esp,0x1c
c001108b:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001108f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011094:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0011097:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001109a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001109d:	50                   	push   eax
c001109e:	e8 bc f0 ff ff       	call   c001015f <Krnl::getProcessTotalEnvCount(Process*)>
c00110a3:	83 c4 10             	add    esp,0x10
c00110a6:	39 c7                	cmp    edi,eax
c00110a8:	7c 14                	jl     c00110be <SysGetEnv(regs*)+0x39>
c00110aa:	85 f6                	test   esi,esi
c00110ac:	75 0b                	jne    c00110b9 <SysGetEnv(regs*)+0x34>
c00110ae:	83 c4 10             	add    esp,0x10
c00110b1:	31 c0                	xor    eax,eax
c00110b3:	5b                   	pop    ebx
c00110b4:	31 d2                	xor    edx,edx
c00110b6:	5e                   	pop    esi
c00110b7:	5f                   	pop    edi
c00110b8:	c3                   	ret    
c00110b9:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00110bc:	eb f0                	jmp    c00110ae <SysGetEnv(regs*)+0x29>
c00110be:	8d 44 24 08          	lea    eax,[esp+0x8]
c00110c2:	52                   	push   edx
c00110c3:	57                   	push   edi
c00110c4:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00110ca:	8b 4a 3c             	mov    ecx,DWORD PTR [edx+0x3c]
c00110cd:	51                   	push   ecx
c00110ce:	50                   	push   eax
c00110cf:	e8 ab f0 ff ff       	call   c001017f <Krnl::getProcessEnvPair(Process*, int)>
c00110d4:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c00110d7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00110db:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00110df:	83 c4 0c             	add    esp,0xc
c00110e2:	85 db                	test   ebx,ebx
c00110e4:	75 23                	jne    c0011109 <SysGetEnv(regs*)+0x84>
c00110e6:	83 ec 0c             	sub    esp,0xc
c00110e9:	50                   	push   eax
c00110ea:	e8 51 f4 fe ff       	call   c0000540 <strlen>
c00110ef:	89 3c 24             	mov    DWORD PTR [esp],edi
c00110f2:	89 c3                	mov    ebx,eax
c00110f4:	e8 47 f4 fe ff       	call   c0000540 <strlen>
c00110f9:	31 d2                	xor    edx,edx
c00110fb:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c00110ff:	83 c4 10             	add    esp,0x10
c0011102:	83 c4 10             	add    esp,0x10
c0011105:	5b                   	pop    ebx
c0011106:	5e                   	pop    esi
c0011107:	5f                   	pop    edi
c0011108:	c3                   	ret    
c0011109:	83 ec 08             	sub    esp,0x8
c001110c:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001110f:	50                   	push   eax
c0011110:	56                   	push   esi
c0011111:	e8 ea f4 fe ff       	call   c0000600 <strcpy>
c0011116:	58                   	pop    eax
c0011117:	5a                   	pop    edx
c0011118:	68 de ef 01 c0       	push   0xc001efde
c001111d:	56                   	push   esi
c001111e:	e8 9d f6 fe ff       	call   c00007c0 <strcat>
c0011123:	59                   	pop    ecx
c0011124:	5b                   	pop    ebx
c0011125:	57                   	push   edi
c0011126:	56                   	push   esi
c0011127:	e8 94 f6 fe ff       	call   c00007c0 <strcat>
c001112c:	83 c4 10             	add    esp,0x10
c001112f:	e9 7a ff ff ff       	jmp    c00110ae <SysGetEnv(regs*)+0x29>

c0011134 <SysSetFatAttrib(regs*)>:
c0011134:	57                   	push   edi
c0011135:	56                   	push   esi
c0011136:	53                   	push   ebx
c0011137:	83 ec 1c             	sub    esp,0x1c
c001113a:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001113e:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0011141:	68 14 01 00 00       	push   0x114
c0011146:	e8 6e 66 ff ff       	call   c00077b9 <malloc>
c001114b:	83 c4 0c             	add    esp,0xc
c001114e:	89 c3                	mov    ebx,eax
c0011150:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011155:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011158:	50                   	push   eax
c0011159:	57                   	push   edi
c001115a:	53                   	push   ebx
c001115b:	e8 68 99 ff ff       	call   c000aac8 <File::File(char const*, Process*)>
c0011160:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0011163:	83 c4 0c             	add    esp,0xc
c0011166:	0f b6 d4             	movzx  edx,ah
c0011169:	25 ff 00 00 00       	and    eax,0xff
c001116e:	52                   	push   edx
c001116f:	50                   	push   eax
c0011170:	53                   	push   ebx
c0011171:	e8 24 9c ff ff       	call   c000ad9a <File::chfatattr(unsigned char, unsigned char)>
c0011176:	83 c4 10             	add    esp,0x10
c0011179:	85 db                	test   ebx,ebx
c001117b:	74 14                	je     c0011191 <SysSetFatAttrib(regs*)+0x5d>
c001117d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011181:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011183:	83 ec 0c             	sub    esp,0xc
c0011186:	53                   	push   ebx
c0011187:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001118a:	83 c4 10             	add    esp,0x10
c001118d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011191:	85 c0                	test   eax,eax
c0011193:	0f 95 c0             	setne  al
c0011196:	31 d2                	xor    edx,edx
c0011198:	25 ff 00 00 00       	and    eax,0xff
c001119d:	f7 d8                	neg    eax
c001119f:	83 d2 00             	adc    edx,0x0
c00111a2:	83 c4 10             	add    esp,0x10
c00111a5:	f7 da                	neg    edx
c00111a7:	5b                   	pop    ebx
c00111a8:	5e                   	pop    esi
c00111a9:	5f                   	pop    edi
c00111aa:	c3                   	ret    

c00111ab <SysPipe(regs*)>:
c00111ab:	57                   	push   edi
c00111ac:	56                   	push   esi
c00111ad:	53                   	push   ebx
c00111ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111b2:	83 ec 0c             	sub    esp,0xc
c00111b5:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c00111b8:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c00111bb:	6a 20                	push   0x20
c00111bd:	e8 f7 65 ff ff       	call   c00077b9 <malloc>
c00111c2:	89 c3                	mov    ebx,eax
c00111c4:	58                   	pop    eax
c00111c5:	5a                   	pop    edx
c00111c6:	68 00 50 00 00       	push   0x5000
c00111cb:	53                   	push   ebx
c00111cc:	e8 ed 6e ff ff       	call   c00080be <Pipe::Pipe(int)>
c00111d1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00111d4:	e8 71 7c ff ff       	call   c0008e4a <UnixFile::getFileDescriptor()>
c00111d9:	89 07                	mov    DWORD PTR [edi],eax
c00111db:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00111de:	e8 67 7c ff ff       	call   c0008e4a <UnixFile::getFileDescriptor()>
c00111e3:	83 c4 10             	add    esp,0x10
c00111e6:	89 06                	mov    DWORD PTR [esi],eax
c00111e8:	31 d2                	xor    edx,edx
c00111ea:	5b                   	pop    ebx
c00111eb:	31 c0                	xor    eax,eax
c00111ed:	5e                   	pop    esi
c00111ee:	5f                   	pop    edi
c00111ef:	c3                   	ret    

c00111f0 <SysGetUnixTime(regs*)>:
c00111f0:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c00111f5:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00111fb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00111ff:	e9 1e a3 ff ff       	jmp    c000b522 <Clock::timeInSecondsLocal()>

c0011204 <string_ends_with(char const*, char const*)>:
c0011204:	57                   	push   edi
c0011205:	56                   	push   esi
c0011206:	53                   	push   ebx
c0011207:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001120b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001120f:	83 ec 0c             	sub    esp,0xc
c0011212:	53                   	push   ebx
c0011213:	e8 28 f3 fe ff       	call   c0000540 <strlen>
c0011218:	89 3c 24             	mov    DWORD PTR [esp],edi
c001121b:	89 c6                	mov    esi,eax
c001121d:	e8 1e f3 fe ff       	call   c0000540 <strlen>
c0011222:	83 c4 10             	add    esp,0x10
c0011225:	39 c6                	cmp    esi,eax
c0011227:	7d 06                	jge    c001122f <string_ends_with(char const*, char const*)+0x2b>
c0011229:	5b                   	pop    ebx
c001122a:	31 c0                	xor    eax,eax
c001122c:	5e                   	pop    esi
c001122d:	5f                   	pop    edi
c001122e:	c3                   	ret    
c001122f:	83 ec 08             	sub    esp,0x8
c0011232:	29 c6                	sub    esi,eax
c0011234:	57                   	push   edi
c0011235:	01 f3                	add    ebx,esi
c0011237:	53                   	push   ebx
c0011238:	e8 a3 f4 fe ff       	call   c00006e0 <strcmp>
c001123d:	83 c4 10             	add    esp,0x10
c0011240:	85 c0                	test   eax,eax
c0011242:	5b                   	pop    ebx
c0011243:	0f 94 c0             	sete   al
c0011246:	5e                   	pop    esi
c0011247:	25 ff 00 00 00       	and    eax,0xff
c001124c:	5f                   	pop    edi
c001124d:	c3                   	ret    

c001124e <SysOpen(regs*)>:
c001124e:	56                   	push   esi
c001124f:	53                   	push   ebx
c0011250:	81 ec 04 01 00 00    	sub    esp,0x104
c0011256:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c001125d:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0011260:	85 c9                	test   ecx,ecx
c0011262:	0f 84 b9 01 00 00    	je     c0011421 <SysOpen(regs*)+0x1d3>
c0011268:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001126b:	85 c0                	test   eax,eax
c001126d:	0f 84 ae 01 00 00    	je     c0011421 <SysOpen(regs*)+0x1d3>
c0011273:	52                   	push   edx
c0011274:	68 e0 ef 01 c0       	push   0xc001efe0
c0011279:	50                   	push   eax
c001127a:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001127e:	56                   	push   esi
c001127f:	e8 9a 96 ff ff       	call   c000a91e <Fs::standardiseFiles(char*, char const*, char const*)>
c0011284:	89 34 24             	mov    DWORD PTR [esp],esi
c0011287:	e8 b4 f2 fe ff       	call   c0000540 <strlen>
c001128c:	83 c4 10             	add    esp,0x10
c001128f:	48                   	dec    eax
c0011290:	74 1d                	je     c00112af <SysOpen(regs*)+0x61>
c0011292:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c0011295:	eb 0f                	jmp    c00112a6 <SysOpen(regs*)+0x58>
c0011297:	80 fa 3a             	cmp    dl,0x3a
c001129a:	74 0f                	je     c00112ab <SysOpen(regs*)+0x5d>
c001129c:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c00112a0:	48                   	dec    eax
c00112a1:	74 0c                	je     c00112af <SysOpen(regs*)+0x61>
c00112a3:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c00112a6:	80 fa 2e             	cmp    dl,0x2e
c00112a9:	75 ec                	jne    c0011297 <SysOpen(regs*)+0x49>
c00112ab:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c00112af:	83 ec 08             	sub    esp,0x8
c00112b2:	68 e4 ef 01 c0       	push   0xc001efe4
c00112b7:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00112ba:	50                   	push   eax
c00112bb:	e8 44 ff ff ff       	call   c0011204 <string_ends_with(char const*, char const*)>
c00112c0:	83 c4 10             	add    esp,0x10
c00112c3:	85 c0                	test   eax,eax
c00112c5:	74 1d                	je     c00112e4 <SysOpen(regs*)+0x96>
c00112c7:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00112ca:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c00112d0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00112d7:	81 c4 04 01 00 00    	add    esp,0x104
c00112dd:	31 c0                	xor    eax,eax
c00112df:	31 d2                	xor    edx,edx
c00112e1:	5b                   	pop    ebx
c00112e2:	5e                   	pop    esi
c00112e3:	c3                   	ret    
c00112e4:	83 ec 08             	sub    esp,0x8
c00112e7:	68 e9 ef 01 c0       	push   0xc001efe9
c00112ec:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00112ef:	50                   	push   eax
c00112f0:	e8 0f ff ff ff       	call   c0011204 <string_ends_with(char const*, char const*)>
c00112f5:	83 c4 10             	add    esp,0x10
c00112f8:	85 c0                	test   eax,eax
c00112fa:	75 cb                	jne    c00112c7 <SysOpen(regs*)+0x79>
c00112fc:	83 ec 08             	sub    esp,0x8
c00112ff:	68 e5 ef 01 c0       	push   0xc001efe5
c0011304:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011307:	50                   	push   eax
c0011308:	e8 d3 f3 fe ff       	call   c00006e0 <strcmp>
c001130d:	83 c4 10             	add    esp,0x10
c0011310:	85 c0                	test   eax,eax
c0011312:	74 b3                	je     c00112c7 <SysOpen(regs*)+0x79>
c0011314:	83 ec 08             	sub    esp,0x8
c0011317:	68 e4 ef 01 c0       	push   0xc001efe4
c001131c:	56                   	push   esi
c001131d:	e8 e2 fe ff ff       	call   c0011204 <string_ends_with(char const*, char const*)>
c0011322:	83 c4 10             	add    esp,0x10
c0011325:	85 c0                	test   eax,eax
c0011327:	75 9e                	jne    c00112c7 <SysOpen(regs*)+0x79>
c0011329:	83 ec 08             	sub    esp,0x8
c001132c:	68 ee ef 01 c0       	push   0xc001efee
c0011331:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011334:	50                   	push   eax
c0011335:	e8 ca fe ff ff       	call   c0011204 <string_ends_with(char const*, char const*)>
c001133a:	83 c4 10             	add    esp,0x10
c001133d:	85 c0                	test   eax,eax
c001133f:	0f 85 ef 00 00 00    	jne    c0011434 <SysOpen(regs*)+0x1e6>
c0011345:	83 ec 08             	sub    esp,0x8
c0011348:	68 f3 ef 01 c0       	push   0xc001eff3
c001134d:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011350:	50                   	push   eax
c0011351:	e8 ae fe ff ff       	call   c0011204 <string_ends_with(char const*, char const*)>
c0011356:	83 c4 10             	add    esp,0x10
c0011359:	85 c0                	test   eax,eax
c001135b:	0f 85 d3 00 00 00    	jne    c0011434 <SysOpen(regs*)+0x1e6>
c0011361:	83 ec 08             	sub    esp,0x8
c0011364:	68 ef ef 01 c0       	push   0xc001efef
c0011369:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c001136c:	51                   	push   ecx
c001136d:	e8 6e f3 fe ff       	call   c00006e0 <strcmp>
c0011372:	83 c4 10             	add    esp,0x10
c0011375:	85 c0                	test   eax,eax
c0011377:	0f 84 b7 00 00 00    	je     c0011434 <SysOpen(regs*)+0x1e6>
c001137d:	83 ec 08             	sub    esp,0x8
c0011380:	68 ee ef 01 c0       	push   0xc001efee
c0011385:	56                   	push   esi
c0011386:	e8 79 fe ff ff       	call   c0011204 <string_ends_with(char const*, char const*)>
c001138b:	83 c4 10             	add    esp,0x10
c001138e:	85 c0                	test   eax,eax
c0011390:	0f 85 9e 00 00 00    	jne    c0011434 <SysOpen(regs*)+0x1e6>
c0011396:	83 ec 0c             	sub    esp,0xc
c0011399:	68 14 01 00 00       	push   0x114
c001139e:	e8 16 64 ff ff       	call   c00077b9 <malloc>
c00113a3:	83 c4 0c             	add    esp,0xc
c00113a6:	89 c6                	mov    esi,eax
c00113a8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00113ad:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00113b0:	50                   	push   eax
c00113b1:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00113b4:	52                   	push   edx
c00113b5:	56                   	push   esi
c00113b6:	e8 0d 97 ff ff       	call   c000aac8 <File::File(char const*, Process*)>
c00113bb:	83 c4 10             	add    esp,0x10
c00113be:	85 f6                	test   esi,esi
c00113c0:	74 5f                	je     c0011421 <SysOpen(regs*)+0x1d3>
c00113c2:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00113c5:	89 d0                	mov    eax,edx
c00113c7:	25 ff 00 00 00       	and    eax,0xff
c00113cc:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c00113cf:	89 d0                	mov    eax,edx
c00113d1:	83 e0 01             	and    eax,0x1
c00113d4:	f6 c2 02             	test   dl,0x2
c00113d7:	74 03                	je     c00113dc <SysOpen(regs*)+0x18e>
c00113d9:	83 c8 02             	or     eax,0x2
c00113dc:	f6 c2 04             	test   dl,0x4
c00113df:	74 03                	je     c00113e4 <SysOpen(regs*)+0x196>
c00113e1:	83 c8 04             	or     eax,0x4
c00113e4:	f6 c2 08             	test   dl,0x8
c00113e7:	74 03                	je     c00113ec <SysOpen(regs*)+0x19e>
c00113e9:	83 c8 0a             	or     eax,0xa
c00113ec:	83 e2 10             	and    edx,0x10
c00113ef:	74 03                	je     c00113f4 <SysOpen(regs*)+0x1a6>
c00113f1:	83 c8 12             	or     eax,0x12
c00113f4:	83 ec 08             	sub    esp,0x8
c00113f7:	50                   	push   eax
c00113f8:	56                   	push   esi
c00113f9:	e8 8a 97 ff ff       	call   c000ab88 <File::open(FileOpenMode)>
c00113fe:	83 c4 10             	add    esp,0x10
c0011401:	85 c0                	test   eax,eax
c0011403:	75 1c                	jne    c0011421 <SysOpen(regs*)+0x1d3>
c0011405:	83 ec 0c             	sub    esp,0xc
c0011408:	56                   	push   esi
c0011409:	e8 3c 7a ff ff       	call   c0008e4a <UnixFile::getFileDescriptor()>
c001140e:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0011411:	83 c4 10             	add    esp,0x10
c0011414:	89 02                	mov    DWORD PTR [edx],eax
c0011416:	c1 f8 1f             	sar    eax,0x1f
c0011419:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001141c:	e9 b6 fe ff ff       	jmp    c00112d7 <SysOpen(regs*)+0x89>
c0011421:	81 c4 04 01 00 00    	add    esp,0x104
c0011427:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001142c:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011431:	5b                   	pop    ebx
c0011432:	5e                   	pop    esi
c0011433:	c3                   	ret    
c0011434:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011437:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c001143d:	e9 8e fe ff ff       	jmp    c00112d0 <SysOpen(regs*)+0x82>

c0011442 <KeSystemCall(regs*, void*)>:
c0011442:	53                   	push   ebx
c0011443:	83 ec 08             	sub    esp,0x8
c0011446:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001144a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001144d:	83 f8 32             	cmp    eax,0x32
c0011450:	77 16                	ja     c0011468 <KeSystemCall(regs*, void*)+0x26>
c0011452:	8b 14 85 80 01 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdfe80]
c0011459:	85 d2                	test   edx,edx
c001145b:	74 0b                	je     c0011468 <KeSystemCall(regs*, void*)+0x26>
c001145d:	83 ec 0c             	sub    esp,0xc
c0011460:	53                   	push   ebx
c0011461:	ff d2                	call   edx
c0011463:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0011466:	eb 0d                	jmp    c0011475 <KeSystemCall(regs*, void*)+0x33>
c0011468:	52                   	push   edx
c0011469:	52                   	push   edx
c001146a:	50                   	push   eax
c001146b:	68 f8 ef 01 c0       	push   0xc001eff8
c0011470:	e8 dd 90 ff ff       	call   c000a552 <Dbg::kprintf(char const*, ...)>
c0011475:	83 c4 10             	add    esp,0x10
c0011478:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001147d:	31 d2                	xor    edx,edx
c001147f:	83 c4 08             	add    esp,0x8
c0011482:	5b                   	pop    ebx
c0011483:	c3                   	ret    

c0011484 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c0011484:	55                   	push   ebp
c0011485:	57                   	push   edi
c0011486:	56                   	push   esi
c0011487:	53                   	push   ebx
c0011488:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001148e:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0011495:	8a 1e                	mov    bl,BYTE PTR [esi]
c0011497:	8d 6e 01             	lea    ebp,[esi+0x1]
c001149a:	80 fb 40             	cmp    bl,0x40
c001149d:	75 1b                	jne    c00114ba <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c001149f:	8a 16                	mov    dl,BYTE PTR [esi]
c00114a1:	84 d2                	test   dl,dl
c00114a3:	0f 84 f1 00 00 00    	je     c001159a <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c00114a9:	8d 46 01             	lea    eax,[esi+0x1]
c00114ac:	80 fa 3a             	cmp    dl,0x3a
c00114af:	74 04                	je     c00114b5 <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c00114b1:	89 c6                	mov    esi,eax
c00114b3:	eb ea                	jmp    c001149f <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c00114b5:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00114b8:	89 c6                	mov    esi,eax
c00114ba:	50                   	push   eax
c00114bb:	6a 40                	push   0x40
c00114bd:	6a 00                	push   0x0
c00114bf:	8d 44 24 24          	lea    eax,[esp+0x24]
c00114c3:	50                   	push   eax
c00114c4:	e8 07 f0 fe ff       	call   c00004d0 <memset>
c00114c9:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c00114d0:	31 c0                	xor    eax,eax
c00114d2:	83 c4 10             	add    esp,0x10
c00114d5:	8a 0f                	mov    cl,BYTE PTR [edi]
c00114d7:	84 c9                	test   cl,cl
c00114d9:	0f 84 bb 00 00 00    	je     c001159a <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c00114df:	3d c7 00 00 00       	cmp    eax,0xc7
c00114e4:	0f 8f b0 00 00 00    	jg     c001159a <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c00114ea:	80 f9 0a             	cmp    cl,0xa
c00114ed:	0f 85 98 00 00 00    	jne    c001158b <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c00114f3:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c00114f8:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c00114fc:	a8 df                	test   al,0xdf
c00114fe:	0f 94 c1             	sete   cl
c0011501:	3c 23                	cmp    al,0x23
c0011503:	0f 94 c2             	sete   dl
c0011506:	08 d1                	or     cl,dl
c0011508:	75 4a                	jne    c0011554 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001150a:	8d 50 f7             	lea    edx,[eax-0x9]
c001150d:	80 fa 01             	cmp    dl,0x1
c0011510:	76 42                	jbe    c0011554 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0011512:	3c 5b                	cmp    al,0x5b
c0011514:	75 42                	jne    c0011558 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c0011516:	80 fb 40             	cmp    bl,0x40
c0011519:	75 39                	jne    c0011554 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001151b:	83 ec 0c             	sub    esp,0xc
c001151e:	8d 54 24 65          	lea    edx,[esp+0x65]
c0011522:	52                   	push   edx
c0011523:	e8 18 f0 fe ff       	call   c0000540 <strlen>
c0011528:	83 c4 10             	add    esp,0x10
c001152b:	83 f8 3f             	cmp    eax,0x3f
c001152e:	77 6a                	ja     c001159a <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0011530:	50                   	push   eax
c0011531:	50                   	push   eax
c0011532:	8d 54 24 61          	lea    edx,[esp+0x61]
c0011536:	52                   	push   edx
c0011537:	8d 54 24 24          	lea    edx,[esp+0x24]
c001153b:	52                   	push   edx
c001153c:	e8 bf f0 fe ff       	call   c0000600 <strcpy>
c0011541:	58                   	pop    eax
c0011542:	8d 54 24 24          	lea    edx,[esp+0x24]
c0011546:	52                   	push   edx
c0011547:	e8 f4 ef fe ff       	call   c0000540 <strlen>
c001154c:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c0011551:	83 c4 10             	add    esp,0x10
c0011554:	31 d2                	xor    edx,edx
c0011556:	eb 3a                	jmp    c0011592 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c0011558:	80 fb 40             	cmp    bl,0x40
c001155b:	74 06                	je     c0011563 <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c001155d:	8d 44 24 58          	lea    eax,[esp+0x58]
c0011561:	eb 20                	jmp    c0011583 <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c0011563:	50                   	push   eax
c0011564:	50                   	push   eax
c0011565:	55                   	push   ebp
c0011566:	8d 44 24 24          	lea    eax,[esp+0x24]
c001156a:	50                   	push   eax
c001156b:	e8 70 f1 fe ff       	call   c00006e0 <strcmp>
c0011570:	83 c4 10             	add    esp,0x10
c0011573:	85 c0                	test   eax,eax
c0011575:	75 dd                	jne    c0011554 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0011577:	eb e4                	jmp    c001155d <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c0011579:	8d 50 01             	lea    edx,[eax+0x1]
c001157c:	80 f9 3d             	cmp    cl,0x3d
c001157f:	74 1d                	je     c001159e <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c0011581:	89 d0                	mov    eax,edx
c0011583:	8a 08                	mov    cl,BYTE PTR [eax]
c0011585:	84 c9                	test   cl,cl
c0011587:	75 f0                	jne    c0011579 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c0011589:	eb 0f                	jmp    c001159a <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001158b:	8d 50 01             	lea    edx,[eax+0x1]
c001158e:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c0011592:	47                   	inc    edi
c0011593:	89 d0                	mov    eax,edx
c0011595:	e9 3b ff ff ff       	jmp    c00114d5 <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c001159a:	31 c0                	xor    eax,eax
c001159c:	eb 33                	jmp    c00115d1 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c001159e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00115a2:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00115a5:	50                   	push   eax
c00115a6:	50                   	push   eax
c00115a7:	8d 44 24 60          	lea    eax,[esp+0x60]
c00115ab:	50                   	push   eax
c00115ac:	56                   	push   esi
c00115ad:	e8 2e f1 fe ff       	call   c00006e0 <strcmp>
c00115b2:	83 c4 10             	add    esp,0x10
c00115b5:	85 c0                	test   eax,eax
c00115b7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00115bb:	75 97                	jne    c0011554 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c00115bd:	51                   	push   ecx
c00115be:	51                   	push   ecx
c00115bf:	52                   	push   edx
c00115c0:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c00115c7:	e8 34 f0 fe ff       	call   c0000600 <strcpy>
c00115cc:	83 c4 10             	add    esp,0x10
c00115cf:	b0 01                	mov    al,0x1
c00115d1:	81 c4 2c 01 00 00    	add    esp,0x12c
c00115d7:	5b                   	pop    ebx
c00115d8:	5e                   	pop    esi
c00115d9:	5f                   	pop    edi
c00115da:	5d                   	pop    ebp
c00115db:	c3                   	ret    

c00115dc <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c00115dc:	57                   	push   edi
c00115dd:	56                   	push   esi
c00115de:	53                   	push   ebx
c00115df:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00115e5:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c00115ec:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c00115f3:	53                   	push   ebx
c00115f4:	e8 47 ef fe ff       	call   c0000540 <strlen>
c00115f9:	89 34 24             	mov    DWORD PTR [esp],esi
c00115fc:	89 c7                	mov    edi,eax
c00115fe:	e8 3d ef fe ff       	call   c0000540 <strlen>
c0011603:	83 c4 10             	add    esp,0x10
c0011606:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c001160a:	3d ff 00 00 00       	cmp    eax,0xff
c001160f:	0f 87 d3 00 00 00    	ja     c00116e8 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0011615:	57                   	push   edi
c0011616:	57                   	push   edi
c0011617:	56                   	push   esi
c0011618:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001161c:	56                   	push   esi
c001161d:	e8 de ef fe ff       	call   c0000600 <strcpy>
c0011622:	58                   	pop    eax
c0011623:	5a                   	pop    edx
c0011624:	68 a9 f2 01 c0       	push   0xc001f2a9
c0011629:	56                   	push   esi
c001162a:	e8 91 f1 fe ff       	call   c00007c0 <strcat>
c001162f:	59                   	pop    ecx
c0011630:	5f                   	pop    edi
c0011631:	53                   	push   ebx
c0011632:	56                   	push   esi
c0011633:	e8 88 f1 fe ff       	call   c00007c0 <strcat>
c0011638:	58                   	pop    eax
c0011639:	5a                   	pop    edx
c001163a:	68 0c f0 01 c0       	push   0xc001f00c
c001163f:	56                   	push   esi
c0011640:	e8 7b f1 fe ff       	call   c00007c0 <strcat>
c0011645:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001164c:	e8 68 61 ff ff       	call   c00077b9 <malloc>
c0011651:	83 c4 0c             	add    esp,0xc
c0011654:	89 c3                	mov    ebx,eax
c0011656:	ff 35 90 61 02 c0    	push   DWORD PTR ds:0xc0026190
c001165c:	56                   	push   esi
c001165d:	50                   	push   eax
c001165e:	e8 65 94 ff ff       	call   c000aac8 <File::File(char const*, Process*)>
c0011663:	83 c4 10             	add    esp,0x10
c0011666:	85 db                	test   ebx,ebx
c0011668:	74 7e                	je     c00116e8 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001166a:	51                   	push   ecx
c001166b:	51                   	push   ecx
c001166c:	6a 01                	push   0x1
c001166e:	53                   	push   ebx
c001166f:	e8 14 95 ff ff       	call   c000ab88 <File::open(FileOpenMode)>
c0011674:	83 c4 10             	add    esp,0x10
c0011677:	85 c0                	test   eax,eax
c0011679:	74 08                	je     c0011683 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c001167b:	83 ec 0c             	sub    esp,0xc
c001167e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011680:	53                   	push   ebx
c0011681:	eb 5f                	jmp    c00116e2 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c0011683:	52                   	push   edx
c0011684:	8d 44 24 17          	lea    eax,[esp+0x17]
c0011688:	50                   	push   eax
c0011689:	8d 44 24 20          	lea    eax,[esp+0x20]
c001168d:	50                   	push   eax
c001168e:	53                   	push   ebx
c001168f:	e8 a0 97 ff ff       	call   c000ae34 <File::stat(unsigned long long*, bool*)>
c0011694:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011698:	83 c4 10             	add    esp,0x10
c001169b:	89 c1                	mov    ecx,eax
c001169d:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c00116a1:	74 31                	je     c00116d4 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c00116a3:	83 ec 0c             	sub    esp,0xc
c00116a6:	50                   	push   eax
c00116a7:	e8 0d 61 ff ff       	call   c00077b9 <malloc>
c00116ac:	89 c6                	mov    esi,eax
c00116ae:	58                   	pop    eax
c00116af:	8b 03                	mov    eax,DWORD PTR [ebx]
c00116b1:	8d 54 24 20          	lea    edx,[esp+0x20]
c00116b5:	52                   	push   edx
c00116b6:	56                   	push   esi
c00116b7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00116bb:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00116bf:	53                   	push   ebx
c00116c0:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00116c3:	83 c4 20             	add    esp,0x20
c00116c6:	85 c0                	test   eax,eax
c00116c8:	75 0a                	jne    c00116d4 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c00116ca:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00116ce:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c00116d2:	74 18                	je     c00116ec <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c00116d4:	83 ec 0c             	sub    esp,0xc
c00116d7:	53                   	push   ebx
c00116d8:	e8 09 95 ff ff       	call   c000abe6 <File::close()>
c00116dd:	8b 03                	mov    eax,DWORD PTR [ebx]
c00116df:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00116e2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00116e5:	83 c4 10             	add    esp,0x10
c00116e8:	31 c0                	xor    eax,eax
c00116ea:	eb 3b                	jmp    c0011727 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c00116ec:	83 ec 0c             	sub    esp,0xc
c00116ef:	53                   	push   ebx
c00116f0:	e8 f1 94 ff ff       	call   c000abe6 <File::close()>
c00116f5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00116f7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00116fa:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00116fd:	83 c4 0c             	add    esp,0xc
c0011700:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0011707:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001170e:	56                   	push   esi
c001170f:	e8 70 fd ff ff       	call   c0011484 <Reg::findLineFromLoadedData(char*, char*, char*)>
c0011714:	89 34 24             	mov    DWORD PTR [esp],esi
c0011717:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001171b:	e8 a9 60 ff ff       	call   c00077c9 <free>
c0011720:	83 c4 10             	add    esp,0x10
c0011723:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0011727:	81 c4 20 01 00 00    	add    esp,0x120
c001172d:	5b                   	pop    ebx
c001172e:	5e                   	pop    esi
c001172f:	5f                   	pop    edi
c0011730:	c3                   	ret    

c0011731 <Reg::getLine(char*, char*, char*)>:
c0011731:	57                   	push   edi
c0011732:	56                   	push   esi
c0011733:	53                   	push   ebx
c0011734:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011738:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001173c:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0011740:	57                   	push   edi
c0011741:	56                   	push   esi
c0011742:	53                   	push   ebx
c0011743:	68 11 f0 01 c0       	push   0xc001f011
c0011748:	e8 8f fe ff ff       	call   c00115dc <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001174d:	83 c4 10             	add    esp,0x10
c0011750:	84 c0                	test   al,al
c0011752:	75 10                	jne    c0011764 <Reg::getLine(char*, char*, char*)+0x33>
c0011754:	57                   	push   edi
c0011755:	56                   	push   esi
c0011756:	53                   	push   ebx
c0011757:	68 36 f0 01 c0       	push   0xc001f036
c001175c:	e8 7b fe ff ff       	call   c00115dc <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0011761:	83 c4 10             	add    esp,0x10
c0011764:	5b                   	pop    ebx
c0011765:	5e                   	pop    esi
c0011766:	5f                   	pop    edi
c0011767:	c3                   	ret    

c0011768 <Reg::readInt(char*, char*, int*)>:
c0011768:	55                   	push   ebp
c0011769:	57                   	push   edi
c001176a:	56                   	push   esi
c001176b:	53                   	push   ebx
c001176c:	81 ec f0 00 00 00    	sub    esp,0xf0
c0011772:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0011776:	57                   	push   edi
c0011777:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001177e:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0011785:	e8 a7 ff ff ff       	call   c0011731 <Reg::getLine(char*, char*, char*)>
c001178a:	83 c4 10             	add    esp,0x10
c001178d:	84 c0                	test   al,al
c001178f:	0f 84 b3 00 00 00    	je     c0011848 <Reg::readInt(char*, char*, int*)+0xe0>
c0011795:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0011799:	80 fa 2b             	cmp    dl,0x2b
c001179c:	74 0c                	je     c00117aa <Reg::readInt(char*, char*, int*)+0x42>
c001179e:	80 fa 2d             	cmp    dl,0x2d
c00117a1:	75 0e                	jne    c00117b1 <Reg::readInt(char*, char*, int*)+0x49>
c00117a3:	ba 01 00 00 00       	mov    edx,0x1
c00117a8:	eb 0b                	jmp    c00117b5 <Reg::readInt(char*, char*, int*)+0x4d>
c00117aa:	ba 01 00 00 00       	mov    edx,0x1
c00117af:	eb 02                	jmp    c00117b3 <Reg::readInt(char*, char*, int*)+0x4b>
c00117b1:	31 d2                	xor    edx,edx
c00117b3:	31 c0                	xor    eax,eax
c00117b5:	be 0a 00 00 00       	mov    esi,0xa
c00117ba:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c00117bf:	75 20                	jne    c00117e1 <Reg::readInt(char*, char*, int*)+0x79>
c00117c1:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c00117c5:	80 f9 78             	cmp    cl,0x78
c00117c8:	75 0a                	jne    c00117d4 <Reg::readInt(char*, char*, int*)+0x6c>
c00117ca:	83 c2 02             	add    edx,0x2
c00117cd:	be 10 00 00 00       	mov    esi,0x10
c00117d2:	eb 0d                	jmp    c00117e1 <Reg::readInt(char*, char*, int*)+0x79>
c00117d4:	80 f9 62             	cmp    cl,0x62
c00117d7:	75 08                	jne    c00117e1 <Reg::readInt(char*, char*, int*)+0x79>
c00117d9:	83 c2 02             	add    edx,0x2
c00117dc:	be 02 00 00 00       	mov    esi,0x2
c00117e1:	01 d7                	add    edi,edx
c00117e3:	31 d2                	xor    edx,edx
c00117e5:	8a 1f                	mov    bl,BYTE PTR [edi]
c00117e7:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c00117eb:	80 fb 0d             	cmp    bl,0xd
c00117ee:	0f 94 c3             	sete   bl
c00117f1:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00117f6:	0f 94 c1             	sete   cl
c00117f9:	08 cb                	or     bl,cl
c00117fb:	75 3a                	jne    c0011837 <Reg::readInt(char*, char*, int*)+0xcf>
c00117fd:	0f af d6             	imul   edx,esi
c0011800:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c0011805:	83 fe 10             	cmp    esi,0x10
c0011808:	75 26                	jne    c0011830 <Reg::readInt(char*, char*, int*)+0xc8>
c001180a:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001180e:	8d 69 bf             	lea    ebp,[ecx-0x41]
c0011811:	89 e9                	mov    ecx,ebp
c0011813:	80 f9 05             	cmp    cl,0x5
c0011816:	77 06                	ja     c001181e <Reg::readInt(char*, char*, int*)+0xb6>
c0011818:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c001181c:	eb 16                	jmp    c0011834 <Reg::readInt(char*, char*, int*)+0xcc>
c001181e:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0011822:	83 e9 61             	sub    ecx,0x61
c0011825:	80 f9 05             	cmp    cl,0x5
c0011828:	77 06                	ja     c0011830 <Reg::readInt(char*, char*, int*)+0xc8>
c001182a:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c001182e:	eb 04                	jmp    c0011834 <Reg::readInt(char*, char*, int*)+0xcc>
c0011830:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c0011834:	47                   	inc    edi
c0011835:	eb ae                	jmp    c00117e5 <Reg::readInt(char*, char*, int*)+0x7d>
c0011837:	84 c0                	test   al,al
c0011839:	74 02                	je     c001183d <Reg::readInt(char*, char*, int*)+0xd5>
c001183b:	f7 da                	neg    edx
c001183d:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c0011844:	89 10                	mov    DWORD PTR [eax],edx
c0011846:	88 d8                	mov    al,bl
c0011848:	81 c4 ec 00 00 00    	add    esp,0xec
c001184e:	5b                   	pop    ebx
c001184f:	5e                   	pop    esi
c0011850:	5f                   	pop    edi
c0011851:	5d                   	pop    ebp
c0011852:	c3                   	ret    

c0011853 <Reg::readString(char*, char*, char*, int)>:
c0011853:	57                   	push   edi
c0011854:	56                   	push   esi
c0011855:	53                   	push   ebx
c0011856:	81 ec d4 00 00 00    	sub    esp,0xd4
c001185c:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c0011863:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c0011867:	57                   	push   edi
c0011868:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001186f:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0011876:	e8 b6 fe ff ff       	call   c0011731 <Reg::getLine(char*, char*, char*)>
c001187b:	83 c4 10             	add    esp,0x10
c001187e:	89 c6                	mov    esi,eax
c0011880:	84 c0                	test   al,al
c0011882:	74 44                	je     c00118c8 <Reg::readString(char*, char*, char*, int)+0x75>
c0011884:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c001188b:	31 c0                	xor    eax,eax
c001188d:	4a                   	dec    edx
c001188e:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c0011891:	84 c9                	test   cl,cl
c0011893:	74 0f                	je     c00118a4 <Reg::readString(char*, char*, char*, int)+0x51>
c0011895:	39 c2                	cmp    edx,eax
c0011897:	7e 0b                	jle    c00118a4 <Reg::readString(char*, char*, char*, int)+0x51>
c0011899:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c001189c:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c00118a1:	40                   	inc    eax
c00118a2:	eb ea                	jmp    c001188e <Reg::readString(char*, char*, char*, int)+0x3b>
c00118a4:	83 ec 0c             	sub    esp,0xc
c00118a7:	53                   	push   ebx
c00118a8:	e8 93 ec fe ff       	call   c0000540 <strlen>
c00118ad:	83 c4 10             	add    esp,0x10
c00118b0:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c00118b5:	75 11                	jne    c00118c8 <Reg::readString(char*, char*, char*, int)+0x75>
c00118b7:	83 ec 0c             	sub    esp,0xc
c00118ba:	53                   	push   ebx
c00118bb:	e8 80 ec fe ff       	call   c0000540 <strlen>
c00118c0:	83 c4 10             	add    esp,0x10
c00118c3:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c00118c8:	81 c4 d0 00 00 00    	add    esp,0xd0
c00118ce:	89 f0                	mov    eax,esi
c00118d0:	5b                   	pop    ebx
c00118d1:	5e                   	pop    esi
c00118d2:	5f                   	pop    edi
c00118d3:	c3                   	ret    

c00118d4 <Reg::readBool(char*, char*, bool*)>:
c00118d4:	83 ec 20             	sub    esp,0x20
c00118d7:	8d 44 24 10          	lea    eax,[esp+0x10]
c00118db:	50                   	push   eax
c00118dc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00118e0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00118e4:	e8 7f fe ff ff       	call   c0011768 <Reg::readInt(char*, char*, int*)>
c00118e9:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00118ee:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00118f2:	0f 95 02             	setne  BYTE PTR [edx]
c00118f5:	83 c4 2c             	add    esp,0x2c
c00118f8:	c3                   	ret    

c00118f9 <Reg::readBoolWithDefault(char*, char*, bool)>:
c00118f9:	53                   	push   ebx
c00118fa:	83 ec 1c             	sub    esp,0x1c
c00118fd:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c0011901:	8d 44 24 13          	lea    eax,[esp+0x13]
c0011905:	50                   	push   eax
c0011906:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001190a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001190e:	e8 c1 ff ff ff       	call   c00118d4 <Reg::readBool(char*, char*, bool*)>
c0011913:	83 c4 10             	add    esp,0x10
c0011916:	84 c0                	test   al,al
c0011918:	74 04                	je     c001191e <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c001191a:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c001191e:	88 d8                	mov    al,bl
c0011920:	83 c4 18             	add    esp,0x18
c0011923:	5b                   	pop    ebx
c0011924:	c3                   	ret    

c0011925 <Reg::readIntWithDefault(char*, char*, int)>:
c0011925:	53                   	push   ebx
c0011926:	83 ec 1c             	sub    esp,0x1c
c0011929:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001192d:	8d 44 24 10          	lea    eax,[esp+0x10]
c0011931:	50                   	push   eax
c0011932:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011936:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001193a:	e8 29 fe ff ff       	call   c0011768 <Reg::readInt(char*, char*, int*)>
c001193f:	83 c4 10             	add    esp,0x10
c0011942:	84 c0                	test   al,al
c0011944:	74 04                	je     c001194a <Reg::readIntWithDefault(char*, char*, int)+0x25>
c0011946:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001194a:	89 d8                	mov    eax,ebx
c001194c:	83 c4 18             	add    esp,0x18
c001194f:	5b                   	pop    ebx
c0011950:	c3                   	ret    

c0011951 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c0011951:	57                   	push   edi
c0011952:	56                   	push   esi
c0011953:	56                   	push   esi
c0011954:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0011958:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001195c:	56                   	push   esi
c001195d:	57                   	push   edi
c001195e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011962:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011966:	e8 e8 fe ff ff       	call   c0011853 <Reg::readString(char*, char*, char*, int)>
c001196b:	83 c4 10             	add    esp,0x10
c001196e:	84 c0                	test   al,al
c0011970:	75 1a                	jne    c001198c <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c0011972:	51                   	push   ecx
c0011973:	56                   	push   esi
c0011974:	6a 00                	push   0x0
c0011976:	57                   	push   edi
c0011977:	e8 54 eb fe ff       	call   c00004d0 <memset>
c001197c:	8d 4e ff             	lea    ecx,[esi-0x1]
c001197f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011983:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011985:	83 c4 10             	add    esp,0x10
c0011988:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001198c:	89 f8                	mov    eax,edi
c001198e:	5a                   	pop    edx
c001198f:	5e                   	pop    esi
c0011990:	5f                   	pop    edi
c0011991:	c3                   	ret    

c0011992 <SysEject(regs*)>:
c0011992:	83 ec 0c             	sub    esp,0xc
c0011995:	83 ca ff             	or     edx,0xffffffff
c0011998:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001199c:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c001199f:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00119a4:	83 e9 41             	sub    ecx,0x41
c00119a7:	83 f9 19             	cmp    ecx,0x19
c00119aa:	77 18                	ja     c00119c4 <SysEject(regs*)+0x32>
c00119ac:	8b 0c 8d 20 54 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdabe0]
c00119b3:	85 c9                	test   ecx,ecx
c00119b5:	74 0d                	je     c00119c4 <SysEject(regs*)+0x32>
c00119b7:	83 ec 0c             	sub    esp,0xc
c00119ba:	51                   	push   ecx
c00119bb:	e8 8a b2 ff ff       	call   c000cc4a <LogicalDisk::eject()>
c00119c0:	83 c4 10             	add    esp,0x10
c00119c3:	99                   	cdq    
c00119c4:	83 c4 0c             	add    esp,0xc
c00119c7:	c3                   	ret    

c00119c8 <SysExit(regs*)>:
c00119c8:	83 ec 18             	sub    esp,0x18
c00119cb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00119cf:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00119d2:	e8 11 27 00 00       	call   c00140e8 <terminateTask(int)>
c00119d7:	83 c8 ff             	or     eax,0xffffffff
c00119da:	83 c4 1c             	add    esp,0x1c
c00119dd:	89 c2                	mov    edx,eax
c00119df:	c3                   	ret    

c00119e0 <SysGetCwd(regs*)>:
c00119e0:	83 ec 10             	sub    esp,0x10
c00119e3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00119e7:	ff 70 28             	push   DWORD PTR [eax+0x28]
c00119ea:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00119ed:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00119f2:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00119f5:	e8 d0 8e ff ff       	call   c000a8ca <Fs::getcwd(Process*, char*, int)>
c00119fa:	83 c4 1c             	add    esp,0x1c
c00119fd:	99                   	cdq    
c00119fe:	c3                   	ret    

c00119ff <SysGetPID(regs*)>:
c00119ff:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011a04:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011a07:	8b 00                	mov    eax,DWORD PTR [eax]
c0011a09:	99                   	cdq    
c0011a0a:	c3                   	ret    

c0011a0b <SysGetRAMData(regs*)>:
c0011a0b:	8b 0d e8 2e 02 c0    	mov    ecx,DWORD PTR ds:0xc0022ee8
c0011a11:	69 05 e4 2e 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc0022ee4,0xc8
c0011a1b:	99                   	cdq    
c0011a1c:	f7 f9                	idiv   ecx
c0011a1e:	c1 e0 18             	shl    eax,0x18
c0011a21:	09 c8                	or     eax,ecx
c0011a23:	99                   	cdq    
c0011a24:	c3                   	ret    

c0011a25 <SysGetVGAPtr(regs*)>:
c0011a25:	55                   	push   ebp
c0011a26:	57                   	push   edi
c0011a27:	56                   	push   esi
c0011a28:	53                   	push   ebx
c0011a29:	83 ec 18             	sub    esp,0x18
c0011a2c:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0011a30:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0011a33:	e8 b0 21 00 00       	call   c0013be8 <Thr::processFromPID(int)>
c0011a38:	83 c4 10             	add    esp,0x10
c0011a3b:	89 c1                	mov    ecx,eax
c0011a3d:	b8 01 00 00 00       	mov    eax,0x1
c0011a42:	85 c9                	test   ecx,ecx
c0011a44:	74 57                	je     c0011a9d <SysGetVGAPtr(regs*)+0x78>
c0011a46:	8b a9 06 05 00 00    	mov    ebp,DWORD PTR [ecx+0x506]
c0011a4c:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0011a50:	74 0c                	je     c0011a5e <SysGetVGAPtr(regs*)+0x39>
c0011a52:	83 ec 0c             	sub    esp,0xc
c0011a55:	55                   	push   ebp
c0011a56:	e8 9c 69 ff ff       	call   c00083f7 <setActiveTerminal(VgaText*)>
c0011a5b:	83 c4 10             	add    esp,0x10
c0011a5e:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0011a61:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0011a64:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c0011a69:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011a6b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0011a6e:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011a71:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c0011a77:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011a7a:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0011a7d:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c0011a83:	50                   	push   eax
c0011a84:	50                   	push   eax
c0011a85:	68 51 f0 01 c0       	push   0xc001f051
c0011a8a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011a8d:	05 a8 0f 00 00       	add    eax,0xfa8
c0011a92:	50                   	push   eax
c0011a93:	e8 68 eb fe ff       	call   c0000600 <strcpy>
c0011a98:	83 c4 10             	add    esp,0x10
c0011a9b:	31 c0                	xor    eax,eax
c0011a9d:	83 c4 0c             	add    esp,0xc
c0011aa0:	31 d2                	xor    edx,edx
c0011aa2:	5b                   	pop    ebx
c0011aa3:	5e                   	pop    esi
c0011aa4:	5f                   	pop    edi
c0011aa5:	5d                   	pop    ebp
c0011aa6:	c3                   	ret    

c0011aa7 <SysLoadDLL(regs*)>:
c0011aa7:	56                   	push   esi
c0011aa8:	53                   	push   ebx
c0011aa9:	31 d2                	xor    edx,edx
c0011aab:	51                   	push   ecx
c0011aac:	b8 01 00 00 00       	mov    eax,0x1
c0011ab1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011ab5:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c0011ab9:	0f 84 8c 00 00 00    	je     c0011b4b <SysLoadDLL(regs*)+0xa4>
c0011abf:	83 ec 0c             	sub    esp,0xc
c0011ac2:	68 14 01 00 00       	push   0x114
c0011ac7:	e8 ed 5c ff ff       	call   c00077b9 <malloc>
c0011acc:	83 c4 0c             	add    esp,0xc
c0011acf:	89 c3                	mov    ebx,eax
c0011ad1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011ad6:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0011ad9:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0011adc:	53                   	push   ebx
c0011add:	e8 e6 8f ff ff       	call   c000aac8 <File::File(char const*, Process*)>
c0011ae2:	83 c4 10             	add    esp,0x10
c0011ae5:	31 d2                	xor    edx,edx
c0011ae7:	b8 02 00 00 00       	mov    eax,0x2
c0011aec:	85 db                	test   ebx,ebx
c0011aee:	74 5b                	je     c0011b4b <SysLoadDLL(regs*)+0xa4>
c0011af0:	83 ec 0c             	sub    esp,0xc
c0011af3:	53                   	push   ebx
c0011af4:	e8 fd 92 ff ff       	call   c000adf6 <File::exists()>
c0011af9:	83 c4 10             	add    esp,0x10
c0011afc:	84 c0                	test   al,al
c0011afe:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011b00:	75 11                	jne    c0011b13 <SysLoadDLL(regs*)+0x6c>
c0011b02:	83 ec 0c             	sub    esp,0xc
c0011b05:	53                   	push   ebx
c0011b06:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011b09:	83 c4 10             	add    esp,0x10
c0011b0c:	b8 03 00 00 00       	mov    eax,0x3
c0011b11:	eb 36                	jmp    c0011b49 <SysLoadDLL(regs*)+0xa2>
c0011b13:	83 ec 0c             	sub    esp,0xc
c0011b16:	53                   	push   ebx
c0011b17:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011b1a:	58                   	pop    eax
c0011b1b:	5a                   	pop    edx
c0011b1c:	6a 00                	push   0x0
c0011b1e:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0011b21:	e8 74 12 00 00       	call   c0012d9a <Thr::loadDLL(char const*, bool)>
c0011b26:	83 c4 10             	add    esp,0x10
c0011b29:	89 c1                	mov    ecx,eax
c0011b2b:	31 d2                	xor    edx,edx
c0011b2d:	b8 04 00 00 00       	mov    eax,0x4
c0011b32:	85 c9                	test   ecx,ecx
c0011b34:	74 15                	je     c0011b4b <SysLoadDLL(regs*)+0xa4>
c0011b36:	53                   	push   ebx
c0011b37:	53                   	push   ebx
c0011b38:	ff 35 b8 2e 02 c0    	push   DWORD PTR ds:0xc0022eb8
c0011b3e:	51                   	push   ecx
c0011b3f:	e8 87 14 00 00       	call   c0012fcb <Thr::executeDLL(unsigned long, void*)>
c0011b44:	83 c4 10             	add    esp,0x10
c0011b47:	31 c0                	xor    eax,eax
c0011b49:	31 d2                	xor    edx,edx
c0011b4b:	59                   	pop    ecx
c0011b4c:	5b                   	pop    ebx
c0011b4d:	5e                   	pop    esi
c0011b4e:	c3                   	ret    

c0011b4f <SysRead(regs*)>:
c0011b4f:	57                   	push   edi
c0011b50:	56                   	push   esi
c0011b51:	53                   	push   ebx
c0011b52:	83 ec 10             	sub    esp,0x10
c0011b55:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011b59:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011b5c:	83 f8 02             	cmp    eax,0x2
c0011b5f:	77 10                	ja     c0011b71 <SysRead(regs*)+0x22>
c0011b61:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011b66:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011b69:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0011b6f:	eb 0e                	jmp    c0011b7f <SysRead(regs*)+0x30>
c0011b71:	83 ec 0c             	sub    esp,0xc
c0011b74:	50                   	push   eax
c0011b75:	e8 c5 75 ff ff       	call   c000913f <getFromFileDescriptor(int)>
c0011b7a:	83 c4 10             	add    esp,0x10
c0011b7d:	89 c1                	mov    ecx,eax
c0011b7f:	83 c8 ff             	or     eax,0xffffffff
c0011b82:	85 c9                	test   ecx,ecx
c0011b84:	89 c2                	mov    edx,eax
c0011b86:	74 28                	je     c0011bb0 <SysRead(regs*)+0x61>
c0011b88:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011b90:	31 ff                	xor    edi,edi
c0011b92:	83 ec 0c             	sub    esp,0xc
c0011b95:	8b 01                	mov    eax,DWORD PTR [ecx]
c0011b97:	8d 54 24 18          	lea    edx,[esp+0x18]
c0011b9b:	52                   	push   edx
c0011b9c:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0011b9f:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0011ba2:	57                   	push   edi
c0011ba3:	56                   	push   esi
c0011ba4:	51                   	push   ecx
c0011ba5:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0011ba8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011bac:	83 c4 20             	add    esp,0x20
c0011baf:	99                   	cdq    
c0011bb0:	83 c4 10             	add    esp,0x10
c0011bb3:	5b                   	pop    ebx
c0011bb4:	5e                   	pop    esi
c0011bb5:	5f                   	pop    edi
c0011bb6:	c3                   	ret    

c0011bb7 <SysRegisterSignal(regs*)>:
c0011bb7:	83 ec 18             	sub    esp,0x18
c0011bba:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011bbe:	6a 00                	push   0x0
c0011bc0:	6a 00                	push   0x0
c0011bc2:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0011bc5:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0011bc8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011bcd:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011bd0:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0011bd6:	e8 82 ea ff ff       	call   c001065d <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>
c0011bdb:	83 c4 2c             	add    esp,0x2c
c0011bde:	99                   	cdq    
c0011bdf:	c3                   	ret    

c0011be0 <SysSbrk(regs*)>:
c0011be0:	56                   	push   esi
c0011be1:	53                   	push   ebx
c0011be2:	50                   	push   eax
c0011be3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011be8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011bec:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011bef:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c0011bf2:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c0011bf8:	85 db                	test   ebx,ebx
c0011bfa:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c0011bfd:	74 02                	je     c0011c01 <SysSbrk(regs*)+0x21>
c0011bff:	79 06                	jns    c0011c07 <SysSbrk(regs*)+0x27>
c0011c01:	89 f0                	mov    eax,esi
c0011c03:	31 d2                	xor    edx,edx
c0011c05:	eb 2a                	jmp    c0011c31 <SysSbrk(regs*)+0x51>
c0011c07:	83 c8 ff             	or     eax,0xffffffff
c0011c0a:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c0011c10:	89 c2                	mov    edx,eax
c0011c12:	77 1d                	ja     c0011c31 <SysSbrk(regs*)+0x51>
c0011c14:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c0011c1a:	50                   	push   eax
c0011c1b:	c1 ea 0c             	shr    edx,0xc
c0011c1e:	68 07 0c 00 00       	push   0xc07
c0011c23:	52                   	push   edx
c0011c24:	51                   	push   ecx
c0011c25:	e8 32 7e ff ff       	call   c0009a5c <VAS::allocatePages(int, int)>
c0011c2a:	89 f0                	mov    eax,esi
c0011c2c:	31 d2                	xor    edx,edx
c0011c2e:	83 c4 10             	add    esp,0x10
c0011c31:	59                   	pop    ecx
c0011c32:	5b                   	pop    ebx
c0011c33:	5e                   	pop    esi
c0011c34:	c3                   	ret    

c0011c35 <SysSetCwd(regs*)>:
c0011c35:	83 ec 14             	sub    esp,0x14
c0011c38:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011c3c:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0011c3f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011c44:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0011c47:	e8 49 92 ff ff       	call   c000ae95 <Fs::setcwd(Process*, char*)>
c0011c4c:	83 c4 1c             	add    esp,0x1c
c0011c4f:	99                   	cdq    
c0011c50:	c3                   	ret    

c0011c51 <SysSetTime(regs*)>:
c0011c51:	55                   	push   ebp
c0011c52:	31 c9                	xor    ecx,ecx
c0011c54:	57                   	push   edi
c0011c55:	bd 0c 00 00 00       	mov    ebp,0xc
c0011c5a:	56                   	push   esi
c0011c5b:	53                   	push   ebx
c0011c5c:	31 db                	xor    ebx,ebx
c0011c5e:	83 ec 10             	sub    esp,0x10
c0011c61:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0011c65:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c0011c68:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0011c6b:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c0011c6e:	89 c2                	mov    edx,eax
c0011c70:	66 81 ef 6c 07       	sub    di,0x76c
c0011c75:	83 e2 1f             	and    edx,0x1f
c0011c78:	c1 e7 10             	shl    edi,0x10
c0011c7b:	42                   	inc    edx
c0011c7c:	c1 e8 05             	shr    eax,0x5
c0011c7f:	88 d1                	mov    cl,dl
c0011c81:	31 d2                	xor    edx,edx
c0011c83:	f7 f5                	div    ebp
c0011c85:	89 dd                	mov    ebp,ebx
c0011c87:	88 d5                	mov    ch,dl
c0011c89:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c0011c8f:	0f b7 c1             	movzx  eax,cx
c0011c92:	31 d2                	xor    edx,edx
c0011c94:	09 f8                	or     eax,edi
c0011c96:	bf 3c 00 00 00       	mov    edi,0x3c
c0011c9b:	89 c1                	mov    ecx,eax
c0011c9d:	89 f0                	mov    eax,esi
c0011c9f:	f7 f7                	div    edi
c0011ca1:	c1 e2 10             	shl    edx,0x10
c0011ca4:	09 d5                	or     ebp,edx
c0011ca6:	31 d2                	xor    edx,edx
c0011ca8:	89 eb                	mov    ebx,ebp
c0011caa:	f7 f7                	div    edi
c0011cac:	bf 10 0e 00 00       	mov    edi,0xe10
c0011cb1:	88 d7                	mov    bh,dl
c0011cb3:	89 f0                	mov    eax,esi
c0011cb5:	31 d2                	xor    edx,edx
c0011cb7:	f7 f7                	div    edi
c0011cb9:	bf 18 00 00 00       	mov    edi,0x18
c0011cbe:	31 d2                	xor    edx,edx
c0011cc0:	f7 f7                	div    edi
c0011cc2:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c0011cc7:	88 d3                	mov    bl,dl
c0011cc9:	53                   	push   ebx
c0011cca:	51                   	push   ecx
c0011ccb:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0011cd1:	e8 1a 9a ff ff       	call   c000b6f0 <Clock::setTimeInDatetimeLocal(datetime_t)>
c0011cd6:	83 c4 1c             	add    esp,0x1c
c0011cd9:	83 f0 01             	xor    eax,0x1
c0011cdc:	5b                   	pop    ebx
c0011cdd:	0f b6 c0             	movzx  eax,al
c0011ce0:	5e                   	pop    esi
c0011ce1:	31 d2                	xor    edx,edx
c0011ce3:	5f                   	pop    edi
c0011ce4:	5d                   	pop    ebp
c0011ce5:	c3                   	ret    

c0011ce6 <SysTimezone(regs*)>:
c0011ce6:	53                   	push   ebx
c0011ce7:	83 ec 08             	sub    esp,0x8
c0011cea:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011cee:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c0011cf2:	75 17                	jne    c0011d0b <SysTimezone(regs*)+0x25>
c0011cf4:	83 ec 0c             	sub    esp,0xc
c0011cf7:	68 5b f0 01 c0       	push   0xc001f05b
c0011cfc:	e8 51 88 ff ff       	call   c000a552 <Dbg::kprintf(char const*, ...)>
c0011d01:	83 c8 ff             	or     eax,0xffffffff
c0011d04:	83 c4 10             	add    esp,0x10
c0011d07:	89 c2                	mov    edx,eax
c0011d09:	eb 20                	jmp    c0011d2b <SysTimezone(regs*)+0x45>
c0011d0b:	83 ec 0c             	sub    esp,0xc
c0011d0e:	68 70 f0 01 c0       	push   0xc001f070
c0011d13:	e8 3a 88 ff ff       	call   c000a552 <Dbg::kprintf(char const*, ...)>
c0011d18:	58                   	pop    eax
c0011d19:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0011d1c:	e8 2b 97 ff ff       	call   c000b44c <User::loadClockSettings(int)>
c0011d21:	83 c4 10             	add    esp,0x10
c0011d24:	b8 01 00 00 00       	mov    eax,0x1
c0011d29:	31 d2                	xor    edx,edx
c0011d2b:	83 c4 08             	add    esp,0x8
c0011d2e:	5b                   	pop    ebx
c0011d2f:	c3                   	ret    

c0011d30 <SysWrite(regs*)>:
c0011d30:	57                   	push   edi
c0011d31:	56                   	push   esi
c0011d32:	53                   	push   ebx
c0011d33:	83 ec 10             	sub    esp,0x10
c0011d36:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011d3a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011d3d:	83 f8 02             	cmp    eax,0x2
c0011d40:	77 10                	ja     c0011d52 <SysWrite(regs*)+0x22>
c0011d42:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011d47:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011d4a:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0011d50:	eb 0e                	jmp    c0011d60 <SysWrite(regs*)+0x30>
c0011d52:	83 ec 0c             	sub    esp,0xc
c0011d55:	50                   	push   eax
c0011d56:	e8 e4 73 ff ff       	call   c000913f <getFromFileDescriptor(int)>
c0011d5b:	83 c4 10             	add    esp,0x10
c0011d5e:	89 c1                	mov    ecx,eax
c0011d60:	83 c8 ff             	or     eax,0xffffffff
c0011d63:	85 c9                	test   ecx,ecx
c0011d65:	89 c2                	mov    edx,eax
c0011d67:	74 28                	je     c0011d91 <SysWrite(regs*)+0x61>
c0011d69:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011d71:	31 ff                	xor    edi,edi
c0011d73:	83 ec 0c             	sub    esp,0xc
c0011d76:	8b 01                	mov    eax,DWORD PTR [ecx]
c0011d78:	8d 54 24 18          	lea    edx,[esp+0x18]
c0011d7c:	52                   	push   edx
c0011d7d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0011d80:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0011d83:	57                   	push   edi
c0011d84:	56                   	push   esi
c0011d85:	51                   	push   ecx
c0011d86:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0011d89:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011d8d:	83 c4 20             	add    esp,0x20
c0011d90:	99                   	cdq    
c0011d91:	83 c4 10             	add    esp,0x10
c0011d94:	5b                   	pop    ebx
c0011d95:	5e                   	pop    esi
c0011d96:	5f                   	pop    edi
c0011d97:	c3                   	ret    

c0011d98 <SysWsbe(regs*)>:
c0011d98:	57                   	push   edi
c0011d99:	b9 0b 00 00 00       	mov    ecx,0xb
c0011d9e:	56                   	push   esi
c0011d9f:	be af f0 01 c0       	mov    esi,0xc001f0af
c0011da4:	53                   	push   ebx
c0011da5:	83 ec 30             	sub    esp,0x30
c0011da8:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0011dac:	fc                   	cld    
c0011dad:	83 ec 0c             	sub    esp,0xc
c0011db0:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0011db2:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0011db6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011dbb:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011dbe:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c0011dc4:	8b 06                	mov    eax,DWORD PTR [esi]
c0011dc6:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c0011dc9:	57                   	push   edi
c0011dca:	e8 71 e7 fe ff       	call   c0000540 <strlen>
c0011dcf:	5a                   	pop    edx
c0011dd0:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0011dd4:	52                   	push   edx
c0011dd5:	31 d2                	xor    edx,edx
c0011dd7:	57                   	push   edi
c0011dd8:	52                   	push   edx
c0011dd9:	50                   	push   eax
c0011dda:	56                   	push   esi
c0011ddb:	ff d3                	call   ebx
c0011ddd:	83 c4 14             	add    esp,0x14
c0011de0:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0011de4:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0011de7:	e8 fc 22 00 00       	call   c00140e8 <terminateTask(int)>
c0011dec:	83 c4 40             	add    esp,0x40
c0011def:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0011df4:	5b                   	pop    ebx
c0011df5:	31 d2                	xor    edx,edx
c0011df7:	5e                   	pop    esi
c0011df8:	5f                   	pop    edi
c0011df9:	c3                   	ret    

c0011dfa <SysYield(regs*)>:
c0011dfa:	83 ec 0c             	sub    esp,0xc
c0011dfd:	fa                   	cli    
c0011dfe:	ff 05 68 61 02 c0    	inc    DWORD PTR ds:0xc0026168
c0011e04:	e8 bb 19 00 00       	call   c00137c4 <schedule()>
c0011e09:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c0011e0e:	48                   	dec    eax
c0011e0f:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c0011e14:	75 01                	jne    c0011e17 <SysYield(regs*)+0x1d>
c0011e16:	fb                   	sti    
c0011e17:	31 c0                	xor    eax,eax
c0011e19:	31 d2                	xor    edx,edx
c0011e1b:	83 c4 0c             	add    esp,0xc
c0011e1e:	c3                   	ret    

c0011e1f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c0011e1f:	55                   	push   ebp
c0011e20:	57                   	push   edi
c0011e21:	56                   	push   esi
c0011e22:	53                   	push   ebx
c0011e23:	81 ec 2c 10 00 00    	sub    esp,0x102c
c0011e29:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c0011e31:	0f 95 c2             	setne  dl
c0011e34:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c0011e3c:	0f 94 c0             	sete   al
c0011e3f:	84 c2                	test   dl,al
c0011e41:	74 34                	je     c0011e77 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x58>
c0011e43:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c0011e4e:	74 27                	je     c0011e77 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x58>
c0011e50:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c0011e57:	05 00 10 00 00       	add    eax,0x1000
c0011e5c:	89 c1                	mov    ecx,eax
c0011e5e:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011e63:	81 c9 00 f0 ff ff    	or     ecx,0xfffff000
c0011e69:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c0011e70:	89 8c 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],ecx
c0011e77:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c0011e7e:	83 ec 0c             	sub    esp,0xc
c0011e81:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0011e87:	6a 01                	push   0x1
c0011e89:	e8 07 74 ff ff       	call   c0009295 <Virt::allocateKernelVirtualPages(int)>
c0011e8e:	83 c4 10             	add    esp,0x10
c0011e91:	89 c3                	mov    ebx,eax
c0011e93:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0011e99:	0f 86 25 01 00 00    	jbe    c0011fc4 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a5>
c0011e9f:	c1 ee 0c             	shr    esi,0xc
c0011ea2:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0011ea9:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0011ead:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0011eb5:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c0011ebc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011ec0:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c0011ec7:	29 ef                	sub    edi,ebp
c0011ec9:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0011ecd:	0f 83 f8 00 00 00    	jae    c0011fcb <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1ac>
c0011ed3:	81 ff 00 10 00 00    	cmp    edi,0x1000
c0011ed9:	76 05                	jbe    c0011ee0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc1>
c0011edb:	bf 00 10 00 00       	mov    edi,0x1000
c0011ee0:	83 ec 0c             	sub    esp,0xc
c0011ee3:	31 d2                	xor    edx,edx
c0011ee5:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0011eec:	8b 08                	mov    ecx,DWORD PTR [eax]
c0011eee:	8d 44 24 28          	lea    eax,[esp+0x28]
c0011ef2:	50                   	push   eax
c0011ef3:	8d 74 24 30          	lea    esi,[esp+0x30]
c0011ef7:	56                   	push   esi
c0011ef8:	52                   	push   edx
c0011ef9:	57                   	push   edi
c0011efa:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c0011f01:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0011f04:	83 c4 20             	add    esp,0x20
c0011f07:	85 c0                	test   eax,eax
c0011f09:	75 06                	jne    c0011f11 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf2>
c0011f0b:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0011f0f:	74 13                	je     c0011f24 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x105>
c0011f11:	83 ec 0c             	sub    esp,0xc
c0011f14:	53                   	push   ebx
c0011f15:	e8 6f 76 ff ff       	call   c0009589 <Virt::freeKernelVirtualPages(unsigned long)>
c0011f1a:	83 c4 10             	add    esp,0x10
c0011f1d:	31 c0                	xor    eax,eax
c0011f1f:	e9 7c 01 00 00       	jmp    c00120a0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x281>
c0011f24:	fa                   	cli    
c0011f25:	ff 05 68 61 02 c0    	inc    DWORD PTR ds:0xc0026168
c0011f2b:	e8 65 5b ff ff       	call   c0007a95 <Phys::allocatePage()>
c0011f30:	6a 07                	push   0x7
c0011f32:	89 c7                	mov    edi,eax
c0011f34:	53                   	push   ebx
c0011f35:	50                   	push   eax
c0011f36:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011f3b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011f3e:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011f44:	e8 0f 7a ff ff       	call   c0009958 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011f49:	83 c4 0c             	add    esp,0xc
c0011f4c:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0011f53:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011f59:	6a 00                	push   0x0
c0011f5b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011f60:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011f63:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011f69:	e8 5c 78 ff ff       	call   c00097ca <VAS::mapOtherVASIn(bool, VAS*)>
c0011f6e:	58                   	pop    eax
c0011f6f:	5a                   	pop    edx
c0011f70:	68 07 0c 00 00       	push   0xc07
c0011f75:	55                   	push   ebp
c0011f76:	57                   	push   edi
c0011f77:	89 df                	mov    edi,ebx
c0011f79:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0011f80:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011f86:	6a 00                	push   0x0
c0011f88:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011f8d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011f90:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011f96:	e8 7d 7d ff ff       	call   c0009d18 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0011f9b:	b9 00 10 00 00       	mov    ecx,0x1000
c0011fa0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011fa2:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c0011fa7:	83 c4 20             	add    esp,0x20
c0011faa:	48                   	dec    eax
c0011fab:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c0011fb0:	85 c0                	test   eax,eax
c0011fb2:	75 01                	jne    c0011fb5 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x196>
c0011fb4:	fb                   	sti    
c0011fb5:	81 c5 00 10 00 00    	add    ebp,0x1000
c0011fbb:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0011fbf:	e9 f1 fe ff ff       	jmp    c0011eb5 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x96>
c0011fc4:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0011fcb:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0011fd2:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0011fd8:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0011fde:	0f 86 ae 00 00 00    	jbe    c0012092 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x273>
c0011fe4:	fa                   	cli    
c0011fe5:	ff 05 68 61 02 c0    	inc    DWORD PTR ds:0xc0026168
c0011feb:	c1 ee 0c             	shr    esi,0xc
c0011fee:	51                   	push   ecx
c0011fef:	31 ff                	xor    edi,edi
c0011ff1:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0011ff8:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011ffe:	6a 00                	push   0x0
c0012000:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012005:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012008:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001200e:	e8 b7 77 ff ff       	call   c00097ca <VAS::mapOtherVASIn(bool, VAS*)>
c0012013:	83 c4 10             	add    esp,0x10
c0012016:	e8 7a 5a ff ff       	call   c0007a95 <Phys::allocatePage()>
c001201b:	47                   	inc    edi
c001201c:	6a 07                	push   0x7
c001201e:	53                   	push   ebx
c001201f:	50                   	push   eax
c0012020:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012024:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001202a:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c001202d:	ff b2 12 05 00 00    	push   DWORD PTR [edx+0x512]
c0012033:	e8 20 79 ff ff       	call   c0009958 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012038:	58                   	pop    eax
c0012039:	5a                   	pop    edx
c001203a:	68 07 0c 00 00       	push   0xc07
c001203f:	55                   	push   ebp
c0012040:	81 c5 00 10 00 00    	add    ebp,0x1000
c0012046:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001204a:	50                   	push   eax
c001204b:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0012052:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0012058:	6a 00                	push   0x0
c001205a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001205f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012062:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0012068:	e8 ab 7c ff ff       	call   c0009d18 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001206d:	83 c4 1c             	add    esp,0x1c
c0012070:	68 00 10 00 00       	push   0x1000
c0012075:	6a 00                	push   0x0
c0012077:	53                   	push   ebx
c0012078:	e8 53 e4 fe ff       	call   c00004d0 <memset>
c001207d:	83 c4 10             	add    esp,0x10
c0012080:	39 fe                	cmp    esi,edi
c0012082:	77 92                	ja     c0012016 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1f7>
c0012084:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c0012089:	48                   	dec    eax
c001208a:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c001208f:	75 01                	jne    c0012092 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x273>
c0012091:	fb                   	sti    
c0012092:	83 ec 0c             	sub    esp,0xc
c0012095:	53                   	push   ebx
c0012096:	e8 ee 74 ff ff       	call   c0009589 <Virt::freeKernelVirtualPages(unsigned long)>
c001209b:	83 c4 10             	add    esp,0x10
c001209e:	b0 01                	mov    al,0x1
c00120a0:	81 c4 2c 10 00 00    	add    esp,0x102c
c00120a6:	5b                   	pop    ebx
c00120a7:	5e                   	pop    esi
c00120a8:	5f                   	pop    edi
c00120a9:	5d                   	pop    ebp
c00120aa:	c3                   	ret    

c00120ab <Thr::loadProgramIntoMemory(Process*, char const*)>:
c00120ab:	55                   	push   ebp
c00120ac:	57                   	push   edi
c00120ad:	56                   	push   esi
c00120ae:	53                   	push   ebx
c00120af:	83 ec 48             	sub    esp,0x48
c00120b2:	68 14 01 00 00       	push   0x114
c00120b7:	e8 fd 56 ff ff       	call   c00077b9 <malloc>
c00120bc:	83 c4 0c             	add    esp,0xc
c00120bf:	89 c6                	mov    esi,eax
c00120c1:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00120c5:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00120c9:	50                   	push   eax
c00120ca:	e8 f9 89 ff ff       	call   c000aac8 <File::File(char const*, Process*)>
c00120cf:	58                   	pop    eax
c00120d0:	5a                   	pop    edx
c00120d1:	6a 01                	push   0x1
c00120d3:	56                   	push   esi
c00120d4:	e8 af 8a ff ff       	call   c000ab88 <File::open(FileOpenMode)>
c00120d9:	83 c4 10             	add    esp,0x10
c00120dc:	85 c0                	test   eax,eax
c00120de:	0f 85 47 01 00 00    	jne    c001222b <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00120e4:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00120ec:	83 ec 0c             	sub    esp,0xc
c00120ef:	6a 34                	push   0x34
c00120f1:	e8 c3 56 ff ff       	call   c00077b9 <malloc>
c00120f6:	89 c3                	mov    ebx,eax
c00120f8:	58                   	pop    eax
c00120f9:	8b 06                	mov    eax,DWORD PTR [esi]
c00120fb:	8d 7c 24 38          	lea    edi,[esp+0x38]
c00120ff:	57                   	push   edi
c0012100:	53                   	push   ebx
c0012101:	6a 00                	push   0x0
c0012103:	6a 34                	push   0x34
c0012105:	56                   	push   esi
c0012106:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012109:	83 c4 20             	add    esp,0x20
c001210c:	85 c0                	test   eax,eax
c001210e:	0f 85 17 01 00 00    	jne    c001222b <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0012114:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001211a:	0f 85 0b 01 00 00    	jne    c001222b <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0012120:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012123:	85 c0                	test   eax,eax
c0012125:	0f 84 00 01 00 00    	je     c001222b <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001212b:	31 d2                	xor    edx,edx
c001212d:	55                   	push   ebp
c001212e:	52                   	push   edx
c001212f:	50                   	push   eax
c0012130:	56                   	push   esi
c0012131:	e8 10 8b ff ff       	call   c000ac46 <File::seek(unsigned long long)>
c0012136:	83 c4 10             	add    esp,0x10
c0012139:	85 c0                	test   eax,eax
c001213b:	0f 85 ea 00 00 00    	jne    c001222b <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0012141:	83 ec 0c             	sub    esp,0xc
c0012144:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0012147:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001214b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001214f:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0012153:	0f af c2             	imul   eax,edx
c0012156:	50                   	push   eax
c0012157:	e8 5d 56 ff ff       	call   c00077b9 <malloc>
c001215c:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001215e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0012162:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012165:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012169:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001216d:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0012171:	0f af c2             	imul   eax,edx
c0012174:	99                   	cdq    
c0012175:	52                   	push   edx
c0012176:	50                   	push   eax
c0012177:	56                   	push   esi
c0012178:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001217b:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001217e:	83 c4 20             	add    esp,0x20
c0012181:	85 c0                	test   eax,eax
c0012183:	0f 84 a2 00 00 00    	je     c001222b <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0012189:	31 d2                	xor    edx,edx
c001218b:	51                   	push   ecx
c001218c:	52                   	push   edx
c001218d:	50                   	push   eax
c001218e:	56                   	push   esi
c001218f:	e8 b2 8a ff ff       	call   c000ac46 <File::seek(unsigned long long)>
c0012194:	83 c4 10             	add    esp,0x10
c0012197:	85 c0                	test   eax,eax
c0012199:	0f 85 8c 00 00 00    	jne    c001222b <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001219f:	83 ec 0c             	sub    esp,0xc
c00121a2:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c00121a6:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c00121aa:	31 ed                	xor    ebp,ebp
c00121ac:	0f af c2             	imul   eax,edx
c00121af:	50                   	push   eax
c00121b0:	e8 04 56 ff ff       	call   c00077b9 <malloc>
c00121b5:	8b 0e                	mov    ecx,DWORD PTR [esi]
c00121b7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00121bb:	89 3c 24             	mov    DWORD PTR [esp],edi
c00121be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00121c2:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c00121c6:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c00121ca:	0f af c2             	imul   eax,edx
c00121cd:	99                   	cdq    
c00121ce:	52                   	push   edx
c00121cf:	50                   	push   eax
c00121d0:	56                   	push   esi
c00121d1:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00121d4:	83 c4 20             	add    esp,0x20
c00121d7:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00121df:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c00121e3:	0f 86 80 00 00 00    	jbe    c0012269 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c00121e9:	0f b7 fd             	movzx  edi,bp
c00121ec:	c1 e7 05             	shl    edi,0x5
c00121ef:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c00121f3:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c00121f6:	75 6b                	jne    c0012263 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c00121f8:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00121fb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00121ff:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0012202:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012206:	52                   	push   edx
c0012207:	31 d2                	xor    edx,edx
c0012209:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001220c:	52                   	push   edx
c001220d:	50                   	push   eax
c001220e:	56                   	push   esi
c001220f:	e8 32 8a ff ff       	call   c000ac46 <File::seek(unsigned long long)>
c0012214:	83 c4 10             	add    esp,0x10
c0012217:	85 c0                	test   eax,eax
c0012219:	74 17                	je     c0012232 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c001221b:	83 ec 0c             	sub    esp,0xc
c001221e:	68 db f0 01 c0       	push   0xc001f0db
c0012223:	e8 2a 83 ff ff       	call   c000a552 <Dbg::kprintf(char const*, ...)>
c0012228:	83 c4 10             	add    esp,0x10
c001222b:	31 c0                	xor    eax,eax
c001222d:	e9 87 00 00 00       	jmp    c00122b9 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c0012232:	83 ec 0c             	sub    esp,0xc
c0012235:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0012238:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001223b:	50                   	push   eax
c001223c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0012240:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012244:	56                   	push   esi
c0012245:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0012249:	e8 d1 fb ff ff       	call   c0011e1f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001224e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012252:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c0012256:	83 c4 20             	add    esp,0x20
c0012259:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001225d:	73 04                	jae    c0012263 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001225f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012263:	45                   	inc    ebp
c0012264:	e9 76 ff ff ff       	jmp    c00121df <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c0012269:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001226d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012271:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012275:	89 91 0e 05 00 00    	mov    DWORD PTR [ecx+0x50e],edx
c001227b:	83 ec 0c             	sub    esp,0xc
c001227e:	8b 91 12 05 00 00    	mov    edx,DWORD PTR [ecx+0x512]
c0012284:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012289:	05 00 10 00 00       	add    eax,0x1000
c001228e:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0012291:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012295:	e8 2f 55 ff ff       	call   c00077c9 <free>
c001229a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001229d:	e8 27 55 ff ff       	call   c00077c9 <free>
c00122a2:	58                   	pop    eax
c00122a3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00122a7:	e8 1d 55 ff ff       	call   c00077c9 <free>
c00122ac:	89 34 24             	mov    DWORD PTR [esp],esi
c00122af:	e8 32 89 ff ff       	call   c000abe6 <File::close()>
c00122b4:	83 c4 10             	add    esp,0x10
c00122b7:	b0 01                	mov    al,0x1
c00122b9:	83 c4 3c             	add    esp,0x3c
c00122bc:	5b                   	pop    ebx
c00122bd:	5e                   	pop    esi
c00122be:	5f                   	pop    edi
c00122bf:	5d                   	pop    ebp
c00122c0:	c3                   	ret    

c00122c1 <Thr::runtimeReferenceHelper()>:
c00122c1:	83 ec 18             	sub    esp,0x18
c00122c4:	68 e3 f0 01 c0       	push   0xc001f0e3
c00122c9:	e8 84 82 ff ff       	call   c000a552 <Dbg::kprintf(char const*, ...)>
c00122ce:	fa                   	cli    
c00122cf:	83 c4 10             	add    esp,0x10
c00122d2:	eb fe                	jmp    c00122d2 <Thr::runtimeReferenceHelper()+0x11>

c00122d4 <Thr::getAddressOfKernelSymbol(char const*)>:
c00122d4:	57                   	push   edi
c00122d5:	56                   	push   esi
c00122d6:	53                   	push   ebx
c00122d7:	31 db                	xor    ebx,ebx
c00122d9:	39 1d 40 61 02 c0    	cmp    DWORD PTR ds:0xc0026140,ebx
c00122df:	7e 3c                	jle    c001231d <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c00122e1:	8b 34 9d c0 60 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd9f40]
c00122e8:	31 ff                	xor    edi,edi
c00122ea:	39 3c 9d c0 5f 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffda040],edi
c00122f1:	7e 27                	jle    c001231a <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c00122f3:	50                   	push   eax
c00122f4:	50                   	push   eax
c00122f5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00122f9:	8b 06                	mov    eax,DWORD PTR [esi]
c00122fb:	03 04 9d 40 60 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd9fc0]
c0012302:	50                   	push   eax
c0012303:	e8 d8 e3 fe ff       	call   c00006e0 <strcmp>
c0012308:	83 c4 10             	add    esp,0x10
c001230b:	85 c0                	test   eax,eax
c001230d:	75 05                	jne    c0012314 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001230f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0012312:	eb 0b                	jmp    c001231f <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0012314:	83 c6 10             	add    esi,0x10
c0012317:	47                   	inc    edi
c0012318:	eb d0                	jmp    c00122ea <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001231a:	43                   	inc    ebx
c001231b:	eb bc                	jmp    c00122d9 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001231d:	31 c0                	xor    eax,eax
c001231f:	5b                   	pop    ebx
c0012320:	5e                   	pop    esi
c0012321:	5f                   	pop    edi
c0012322:	c3                   	ret    

c0012323 <Thr::loadKernelSymbolTable(char const*)>:
c0012323:	55                   	push   ebp
c0012324:	57                   	push   edi
c0012325:	56                   	push   esi
c0012326:	53                   	push   ebx
c0012327:	83 ec 68             	sub    esp,0x68
c001232a:	8b 35 90 61 02 c0    	mov    esi,DWORD PTR ds:0xc0026190
c0012330:	68 14 01 00 00       	push   0x114
c0012335:	e8 7f 54 ff ff       	call   c00077b9 <malloc>
c001233a:	83 c4 0c             	add    esp,0xc
c001233d:	89 c3                	mov    ebx,eax
c001233f:	56                   	push   esi
c0012340:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0012344:	50                   	push   eax
c0012345:	e8 7e 87 ff ff       	call   c000aac8 <File::File(char const*, Process*)>
c001234a:	5e                   	pop    esi
c001234b:	5f                   	pop    edi
c001234c:	6a 01                	push   0x1
c001234e:	53                   	push   ebx
c001234f:	e8 34 88 ff ff       	call   c000ab88 <File::open(FileOpenMode)>
c0012354:	83 c4 10             	add    esp,0x10
c0012357:	85 c0                	test   eax,eax
c0012359:	74 0a                	je     c0012365 <Thr::loadKernelSymbolTable(char const*)+0x42>
c001235b:	83 ec 0c             	sub    esp,0xc
c001235e:	68 05 f1 01 c0       	push   0xc001f105
c0012363:	eb 34                	jmp    c0012399 <Thr::loadKernelSymbolTable(char const*)+0x76>
c0012365:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001236d:	83 ec 0c             	sub    esp,0xc
c0012370:	6a 34                	push   0x34
c0012372:	e8 42 54 ff ff       	call   c00077b9 <malloc>
c0012377:	59                   	pop    ecx
c0012378:	89 c7                	mov    edi,eax
c001237a:	8d 74 24 34          	lea    esi,[esp+0x34]
c001237e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012380:	56                   	push   esi
c0012381:	57                   	push   edi
c0012382:	6a 00                	push   0x0
c0012384:	6a 34                	push   0x34
c0012386:	53                   	push   ebx
c0012387:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001238a:	83 c4 20             	add    esp,0x20
c001238d:	85 c0                	test   eax,eax
c001238f:	74 17                	je     c00123a8 <Thr::loadKernelSymbolTable(char const*)+0x85>
c0012391:	83 ec 0c             	sub    esp,0xc
c0012394:	68 1c f1 01 c0       	push   0xc001f11c
c0012399:	e8 09 df ff ff       	call   c00102a7 <KePanic(char const*)>
c001239e:	83 c4 10             	add    esp,0x10
c00123a1:	31 c0                	xor    eax,eax
c00123a3:	e9 31 02 00 00       	jmp    c00125d9 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c00123a8:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c00123ae:	75 e1                	jne    c0012391 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c00123b0:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c00123b3:	85 c0                	test   eax,eax
c00123b5:	74 da                	je     c0012391 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c00123b7:	52                   	push   edx
c00123b8:	31 d2                	xor    edx,edx
c00123ba:	52                   	push   edx
c00123bb:	50                   	push   eax
c00123bc:	53                   	push   ebx
c00123bd:	e8 84 88 ff ff       	call   c000ac46 <File::seek(unsigned long long)>
c00123c2:	83 c4 10             	add    esp,0x10
c00123c5:	85 c0                	test   eax,eax
c00123c7:	75 c8                	jne    c0012391 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c00123c9:	83 ec 0c             	sub    esp,0xc
c00123cc:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00123d0:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00123d4:	31 ed                	xor    ebp,ebp
c00123d6:	0f af c2             	imul   eax,edx
c00123d9:	50                   	push   eax
c00123da:	e8 da 53 ff ff       	call   c00077b9 <malloc>
c00123df:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00123e1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00123e5:	89 34 24             	mov    DWORD PTR [esp],esi
c00123e8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00123ec:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00123f0:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00123f4:	0f af c2             	imul   eax,edx
c00123f7:	99                   	cdq    
c00123f8:	52                   	push   edx
c00123f9:	50                   	push   eax
c00123fa:	53                   	push   ebx
c00123fb:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00123fe:	83 c4 20             	add    esp,0x20
c0012401:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0012409:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0012411:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0012419:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0012421:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c0012425:	0f 86 aa 00 00 00    	jbe    c00124d5 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c001242b:	0f b7 f5             	movzx  esi,bp
c001242e:	6b f6 28             	imul   esi,esi,0x28
c0012431:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0012435:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0012438:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001243c:	50                   	push   eax
c001243d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0012441:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0012445:	8b 16                	mov    edx,DWORD PTR [esi]
c0012447:	6b c0 28             	imul   eax,eax,0x28
c001244a:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001244e:	89 d0                	mov    eax,edx
c0012450:	31 d2                	xor    edx,edx
c0012452:	52                   	push   edx
c0012453:	50                   	push   eax
c0012454:	53                   	push   ebx
c0012455:	e8 ec 87 ff ff       	call   c000ac46 <File::seek(unsigned long long)>
c001245a:	83 c4 0c             	add    esp,0xc
c001245d:	6a 20                	push   0x20
c001245f:	6a 00                	push   0x0
c0012461:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0012465:	52                   	push   edx
c0012466:	e8 65 e0 fe ff       	call   c00004d0 <memset>
c001246b:	58                   	pop    eax
c001246c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001246e:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0012472:	51                   	push   ecx
c0012473:	8d 54 24 40          	lea    edx,[esp+0x40]
c0012477:	52                   	push   edx
c0012478:	6a 00                	push   0x0
c001247a:	6a 1f                	push   0x1f
c001247c:	53                   	push   ebx
c001247d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012480:	83 c4 18             	add    esp,0x18
c0012483:	68 33 f1 01 c0       	push   0xc001f133
c0012488:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001248c:	52                   	push   edx
c001248d:	e8 4e e2 fe ff       	call   c00006e0 <strcmp>
c0012492:	83 c4 10             	add    esp,0x10
c0012495:	85 c0                	test   eax,eax
c0012497:	75 0f                	jne    c00124a8 <Thr::loadKernelSymbolTable(char const*)+0x185>
c0012499:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001249c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00124a0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00124a4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00124a8:	50                   	push   eax
c00124a9:	50                   	push   eax
c00124aa:	68 3b f1 01 c0       	push   0xc001f13b
c00124af:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c00124b3:	50                   	push   eax
c00124b4:	e8 27 e2 fe ff       	call   c00006e0 <strcmp>
c00124b9:	83 c4 10             	add    esp,0x10
c00124bc:	85 c0                	test   eax,eax
c00124be:	75 0f                	jne    c00124cf <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c00124c0:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00124c3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00124c7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00124cb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00124cf:	45                   	inc    ebp
c00124d0:	e9 4c ff ff ff       	jmp    c0012421 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c00124d5:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00124da:	75 10                	jne    c00124ec <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c00124dc:	83 ec 0c             	sub    esp,0xc
c00124df:	68 43 f1 01 c0       	push   0xc001f143
c00124e4:	e8 be dd ff ff       	call   c00102a7 <KePanic(char const*)>
c00124e9:	83 c4 10             	add    esp,0x10
c00124ec:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c00124f1:	75 10                	jne    c0012503 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c00124f3:	83 ec 0c             	sub    esp,0xc
c00124f6:	68 43 f1 01 c0       	push   0xc001f143
c00124fb:	e8 a7 dd ff ff       	call   c00102a7 <KePanic(char const*)>
c0012500:	83 c4 10             	add    esp,0x10
c0012503:	31 d2                	xor    edx,edx
c0012505:	50                   	push   eax
c0012506:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001250a:	52                   	push   edx
c001250b:	50                   	push   eax
c001250c:	53                   	push   ebx
c001250d:	e8 34 87 ff ff       	call   c000ac46 <File::seek(unsigned long long)>
c0012512:	5a                   	pop    edx
c0012513:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0012517:	e8 9d 52 ff ff       	call   c00077b9 <malloc>
c001251c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0012520:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012524:	31 c9                	xor    ecx,ecx
c0012526:	5e                   	pop    esi
c0012527:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012529:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001252d:	55                   	push   ebp
c001252e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012532:	51                   	push   ecx
c0012533:	52                   	push   edx
c0012534:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0012538:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001253c:	53                   	push   ebx
c001253d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012540:	83 c4 14             	add    esp,0x14
c0012543:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012547:	e8 6d 52 ff ff       	call   c00077b9 <malloc>
c001254c:	89 c6                	mov    esi,eax
c001254e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012550:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012553:	56                   	push   esi
c0012554:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0012558:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001255c:	51                   	push   ecx
c001255d:	52                   	push   edx
c001255e:	53                   	push   ebx
c001255f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012562:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012566:	8b 15 40 61 02 c0    	mov    edx,DWORD PTR ds:0xc0026140
c001256c:	83 c4 1c             	add    esp,0x1c
c001256f:	c1 e8 04             	shr    eax,0x4
c0012572:	89 04 95 c0 5f 02 c0 	mov    DWORD PTR [edx*4-0x3ffda040],eax
c0012579:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001257d:	31 d2                	xor    edx,edx
c001257f:	52                   	push   edx
c0012580:	50                   	push   eax
c0012581:	53                   	push   ebx
c0012582:	e8 bf 86 ff ff       	call   c000ac46 <File::seek(unsigned long long)>
c0012587:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0012589:	31 d2                	xor    edx,edx
c001258b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001258e:	56                   	push   esi
c001258f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012593:	52                   	push   edx
c0012594:	50                   	push   eax
c0012595:	53                   	push   ebx
c0012596:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012599:	83 c4 14             	add    esp,0x14
c001259c:	53                   	push   ebx
c001259d:	e8 44 86 ff ff       	call   c000abe6 <File::close()>
c00125a2:	5d                   	pop    ebp
c00125a3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00125a7:	e8 1d 52 ff ff       	call   c00077c9 <free>
c00125ac:	89 3c 24             	mov    DWORD PTR [esp],edi
c00125af:	e8 15 52 ff ff       	call   c00077c9 <free>
c00125b4:	a1 40 61 02 c0       	mov    eax,ds:0xc0026140
c00125b9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00125bd:	8d 50 01             	lea    edx,[eax+0x1]
c00125c0:	89 0c 85 c0 60 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9f40],ecx
c00125c7:	89 34 85 40 60 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9fc0],esi
c00125ce:	89 15 40 61 02 c0    	mov    DWORD PTR ds:0xc0026140,edx
c00125d4:	83 c4 10             	add    esp,0x10
c00125d7:	b0 01                	mov    al,0x1
c00125d9:	83 c4 5c             	add    esp,0x5c
c00125dc:	5b                   	pop    ebx
c00125dd:	5e                   	pop    esi
c00125de:	5f                   	pop    edi
c00125df:	5d                   	pop    ebp
c00125e0:	c3                   	ret    

c00125e1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c00125e1:	55                   	push   ebp
c00125e2:	57                   	push   edi
c00125e3:	56                   	push   esi
c00125e4:	53                   	push   ebx
c00125e5:	81 ec 68 03 00 00    	sub    esp,0x368
c00125eb:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c00125f2:	8b 1d 90 61 02 c0    	mov    ebx,DWORD PTR ds:0xc0026190
c00125f8:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c00125fc:	68 14 01 00 00       	push   0x114
c0012601:	e8 b3 51 ff ff       	call   c00077b9 <malloc>
c0012606:	83 c4 0c             	add    esp,0xc
c0012609:	89 c5                	mov    ebp,eax
c001260b:	53                   	push   ebx
c001260c:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c0012613:	50                   	push   eax
c0012614:	e8 af 84 ff ff       	call   c000aac8 <File::File(char const*, Process*)>
c0012619:	5e                   	pop    esi
c001261a:	5f                   	pop    edi
c001261b:	6a 01                	push   0x1
c001261d:	55                   	push   ebp
c001261e:	e8 65 85 ff ff       	call   c000ab88 <File::open(FileOpenMode)>
c0012623:	83 c4 10             	add    esp,0x10
c0012626:	85 c0                	test   eax,eax
c0012628:	0f 85 a7 06 00 00    	jne    c0012cd5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001262e:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0012636:	83 ec 0c             	sub    esp,0xc
c0012639:	6a 34                	push   0x34
c001263b:	e8 79 51 ff ff       	call   c00077b9 <malloc>
c0012640:	5b                   	pop    ebx
c0012641:	89 c7                	mov    edi,eax
c0012643:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0012647:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001264a:	53                   	push   ebx
c001264b:	57                   	push   edi
c001264c:	6a 00                	push   0x0
c001264e:	6a 34                	push   0x34
c0012650:	55                   	push   ebp
c0012651:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012654:	83 c4 20             	add    esp,0x20
c0012657:	85 c0                	test   eax,eax
c0012659:	0f 85 76 06 00 00    	jne    c0012cd5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001265f:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0012665:	0f 85 6a 06 00 00    	jne    c0012cd5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001266b:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001266e:	85 c0                	test   eax,eax
c0012670:	0f 84 5f 06 00 00    	je     c0012cd5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0012676:	31 d2                	xor    edx,edx
c0012678:	51                   	push   ecx
c0012679:	52                   	push   edx
c001267a:	50                   	push   eax
c001267b:	55                   	push   ebp
c001267c:	e8 c5 85 ff ff       	call   c000ac46 <File::seek(unsigned long long)>
c0012681:	83 c4 10             	add    esp,0x10
c0012684:	85 c0                	test   eax,eax
c0012686:	0f 85 49 06 00 00    	jne    c0012cd5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001268c:	83 ec 0c             	sub    esp,0xc
c001268f:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c0012692:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0012696:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001269a:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001269e:	0f af c2             	imul   eax,edx
c00126a1:	50                   	push   eax
c00126a2:	e8 12 51 ff ff       	call   c00077b9 <malloc>
c00126a7:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00126aa:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00126ae:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00126b1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00126b5:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00126b9:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00126bd:	0f af c2             	imul   eax,edx
c00126c0:	99                   	cdq    
c00126c1:	52                   	push   edx
c00126c2:	50                   	push   eax
c00126c3:	55                   	push   ebp
c00126c4:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00126c7:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c00126ca:	83 c4 20             	add    esp,0x20
c00126cd:	85 c0                	test   eax,eax
c00126cf:	0f 84 00 06 00 00    	je     c0012cd5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00126d5:	52                   	push   edx
c00126d6:	31 d2                	xor    edx,edx
c00126d8:	52                   	push   edx
c00126d9:	50                   	push   eax
c00126da:	55                   	push   ebp
c00126db:	e8 66 85 ff ff       	call   c000ac46 <File::seek(unsigned long long)>
c00126e0:	83 c4 10             	add    esp,0x10
c00126e3:	85 c0                	test   eax,eax
c00126e5:	0f 85 ea 05 00 00    	jne    c0012cd5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00126eb:	83 ec 0c             	sub    esp,0xc
c00126ee:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c00126f2:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c00126f6:	31 f6                	xor    esi,esi
c00126f8:	0f af c2             	imul   eax,edx
c00126fb:	50                   	push   eax
c00126fc:	e8 b8 50 ff ff       	call   c00077b9 <malloc>
c0012701:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0012704:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0012708:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001270b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001270f:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0012713:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0012717:	0f af c2             	imul   eax,edx
c001271a:	99                   	cdq    
c001271b:	52                   	push   edx
c001271c:	50                   	push   eax
c001271d:	55                   	push   ebp
c001271e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012721:	83 c4 20             	add    esp,0x20
c0012724:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c0012728:	0f 86 8a 00 00 00    	jbe    c00127b8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c001272e:	0f b7 de             	movzx  ebx,si
c0012731:	c1 e3 05             	shl    ebx,0x5
c0012734:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c0012738:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c001273b:	75 75                	jne    c00127b2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c001273d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0012740:	31 d2                	xor    edx,edx
c0012742:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012746:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0012749:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001274d:	50                   	push   eax
c001274e:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0012751:	52                   	push   edx
c0012752:	50                   	push   eax
c0012753:	55                   	push   ebp
c0012754:	e8 ed 84 ff ff       	call   c000ac46 <File::seek(unsigned long long)>
c0012759:	83 c4 10             	add    esp,0x10
c001275c:	85 c0                	test   eax,eax
c001275e:	0f 85 71 05 00 00    	jne    c0012cd5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0012764:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001276b:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001276e:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0012772:	31 d2                	xor    edx,edx
c0012774:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0012778:	83 ec 0c             	sub    esp,0xc
c001277b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001277f:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012786:	50                   	push   eax
c0012787:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001278b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001278f:	52                   	push   edx
c0012790:	50                   	push   eax
c0012791:	55                   	push   ebp
c0012792:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012795:	83 c4 1c             	add    esp,0x1c
c0012798:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001279b:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001279e:	50                   	push   eax
c001279f:	6a 00                	push   0x0
c00127a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00127a5:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00127a9:	50                   	push   eax
c00127aa:	e8 21 dd fe ff       	call   c00004d0 <memset>
c00127af:	83 c4 10             	add    esp,0x10
c00127b2:	46                   	inc    esi
c00127b3:	e9 6c ff ff ff       	jmp    c0012724 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c00127b8:	53                   	push   ebx
c00127b9:	31 db                	xor    ebx,ebx
c00127bb:	68 00 01 00 00       	push   0x100
c00127c0:	6a 00                	push   0x0
c00127c2:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c00127c6:	50                   	push   eax
c00127c7:	e8 04 dd fe ff       	call   c00004d0 <memset>
c00127cc:	83 c4 0c             	add    esp,0xc
c00127cf:	68 00 01 00 00       	push   0x100
c00127d4:	6a 00                	push   0x0
c00127d6:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c00127dd:	50                   	push   eax
c00127de:	e8 ed dc fe ff       	call   c00004d0 <memset>
c00127e3:	83 c4 10             	add    esp,0x10
c00127e6:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00127ee:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00127f6:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00127fe:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0012806:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001280e:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c0012812:	0f 86 30 01 00 00    	jbe    c0012948 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c0012818:	0f b7 f3             	movzx  esi,bx
c001281b:	6b f6 28             	imul   esi,esi,0x28
c001281e:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0012822:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0012825:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012829:	52                   	push   edx
c001282a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001282e:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c0012832:	8b 06                	mov    eax,DWORD PTR [esi]
c0012834:	6b d2 28             	imul   edx,edx,0x28
c0012837:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001283b:	31 d2                	xor    edx,edx
c001283d:	52                   	push   edx
c001283e:	50                   	push   eax
c001283f:	55                   	push   ebp
c0012840:	e8 01 84 ff ff       	call   c000ac46 <File::seek(unsigned long long)>
c0012845:	83 c4 0c             	add    esp,0xc
c0012848:	6a 20                	push   0x20
c001284a:	6a 00                	push   0x0
c001284c:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0012853:	51                   	push   ecx
c0012854:	e8 77 dc fe ff       	call   c00004d0 <memset>
c0012859:	59                   	pop    ecx
c001285a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001285d:	8d 54 24 58          	lea    edx,[esp+0x58]
c0012861:	52                   	push   edx
c0012862:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c0012869:	51                   	push   ecx
c001286a:	6a 00                	push   0x0
c001286c:	6a 1f                	push   0x1f
c001286e:	55                   	push   ebp
c001286f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012872:	83 c4 1c             	add    esp,0x1c
c0012875:	6a 09                	push   0x9
c0012877:	68 5d f1 01 c0       	push   0xc001f15d
c001287c:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0012883:	51                   	push   ecx
c0012884:	e8 07 db fe ff       	call   c0000390 <memcmp>
c0012889:	83 c4 10             	add    esp,0x10
c001288c:	85 c0                	test   eax,eax
c001288e:	75 21                	jne    c00128b1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c0012890:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012894:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012898:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001289c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00128a0:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00128a3:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c00128aa:	89 d0                	mov    eax,edx
c00128ac:	40                   	inc    eax
c00128ad:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00128b1:	50                   	push   eax
c00128b2:	6a 09                	push   0x9
c00128b4:	68 67 f1 01 c0       	push   0xc001f167
c00128b9:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00128c0:	50                   	push   eax
c00128c1:	e8 ca da fe ff       	call   c0000390 <memcmp>
c00128c6:	83 c4 10             	add    esp,0x10
c00128c9:	85 c0                	test   eax,eax
c00128cb:	75 21                	jne    c00128ee <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c00128cd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00128d1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00128d5:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c00128d9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00128dd:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00128e0:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c00128e7:	89 d0                	mov    eax,edx
c00128e9:	40                   	inc    eax
c00128ea:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00128ee:	50                   	push   eax
c00128ef:	50                   	push   eax
c00128f0:	68 33 f1 01 c0       	push   0xc001f133
c00128f5:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00128fc:	50                   	push   eax
c00128fd:	e8 de dd fe ff       	call   c00006e0 <strcmp>
c0012902:	83 c4 10             	add    esp,0x10
c0012905:	85 c0                	test   eax,eax
c0012907:	75 0f                	jne    c0012918 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c0012909:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001290c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012910:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012914:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012918:	50                   	push   eax
c0012919:	50                   	push   eax
c001291a:	68 3b f1 01 c0       	push   0xc001f13b
c001291f:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012926:	50                   	push   eax
c0012927:	e8 b4 dd fe ff       	call   c00006e0 <strcmp>
c001292c:	83 c4 10             	add    esp,0x10
c001292f:	85 c0                	test   eax,eax
c0012931:	75 0f                	jne    c0012942 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c0012933:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0012936:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001293a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001293e:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0012942:	43                   	inc    ebx
c0012943:	e9 c6 fe ff ff       	jmp    c001280e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c0012948:	31 d2                	xor    edx,edx
c001294a:	50                   	push   eax
c001294b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001294f:	52                   	push   edx
c0012950:	50                   	push   eax
c0012951:	55                   	push   ebp
c0012952:	e8 ef 82 ff ff       	call   c000ac46 <File::seek(unsigned long long)>
c0012957:	58                   	pop    eax
c0012958:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001295c:	e8 58 4e ff ff       	call   c00077b9 <malloc>
c0012961:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0012964:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0012968:	31 d2                	xor    edx,edx
c001296a:	58                   	pop    eax
c001296b:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001296f:	53                   	push   ebx
c0012970:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0012974:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012978:	52                   	push   edx
c0012979:	50                   	push   eax
c001297a:	55                   	push   ebp
c001297b:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001297e:	83 c4 14             	add    esp,0x14
c0012981:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012985:	e8 2f 4e ff ff       	call   c00077b9 <malloc>
c001298a:	31 d2                	xor    edx,edx
c001298c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0012990:	83 c4 0c             	add    esp,0xc
c0012993:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012997:	52                   	push   edx
c0012998:	50                   	push   eax
c0012999:	55                   	push   ebp
c001299a:	e8 a7 82 ff ff       	call   c000ac46 <File::seek(unsigned long long)>
c001299f:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00129a2:	31 d2                	xor    edx,edx
c00129a4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00129a7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00129ab:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00129af:	52                   	push   edx
c00129b0:	50                   	push   eax
c00129b1:	55                   	push   ebp
c00129b2:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00129b5:	83 c4 20             	add    esp,0x20
c00129b8:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00129c0:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00129c4:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c00129c8:	0f 84 0b 03 00 00    	je     c0012cd9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f8>
c00129ce:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c00129d5:	31 d2                	xor    edx,edx
c00129d7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00129db:	c1 e8 03             	shr    eax,0x3
c00129de:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00129e2:	51                   	push   ecx
c00129e3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00129e7:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c00129eb:	52                   	push   edx
c00129ec:	50                   	push   eax
c00129ed:	55                   	push   ebp
c00129ee:	e8 53 82 ff ff       	call   c000ac46 <File::seek(unsigned long long)>
c00129f3:	5b                   	pop    ebx
c00129f4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00129f8:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c00129ff:	e8 b5 4d ff ff       	call   c00077b9 <malloc>
c0012a04:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0012a07:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012a0b:	31 d2                	xor    edx,edx
c0012a0d:	5e                   	pop    esi
c0012a0e:	8d 44 24 58          	lea    eax,[esp+0x58]
c0012a12:	50                   	push   eax
c0012a13:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012a17:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012a1b:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c0012a22:	52                   	push   edx
c0012a23:	50                   	push   eax
c0012a24:	55                   	push   ebp
c0012a25:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012a28:	83 c4 20             	add    esp,0x20
c0012a2b:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0012a33:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0012a37:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c0012a3b:	0f 8d 7c 02 00 00    	jge    c0012cbd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6dc>
c0012a41:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012a45:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012a49:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c0012a4e:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c0012a51:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0012a55:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012a59:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c0012a5d:	89 d8                	mov    eax,ebx
c0012a5f:	c1 e8 08             	shr    eax,0x8
c0012a62:	89 c6                	mov    esi,eax
c0012a64:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0012a68:	c1 e6 04             	shl    esi,0x4
c0012a6b:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c0012a6f:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c0012a72:	85 d2                	test   edx,edx
c0012a74:	0f 85 bf 00 00 00    	jne    c0012b39 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0012a7a:	83 ec 0c             	sub    esp,0xc
c0012a7d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012a81:	03 06                	add    eax,DWORD PTR [esi]
c0012a83:	50                   	push   eax
c0012a84:	e8 4b f8 ff ff       	call   c00122d4 <Thr::getAddressOfKernelSymbol(char const*)>
c0012a89:	83 c4 10             	add    esp,0x10
c0012a8c:	89 c2                	mov    edx,eax
c0012a8e:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c0012a93:	85 c0                	test   eax,eax
c0012a95:	0f 85 9e 00 00 00    	jne    c0012b39 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0012a9b:	83 ec 0c             	sub    esp,0xc
c0012a9e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012aa2:	03 06                	add    eax,DWORD PTR [esi]
c0012aa4:	50                   	push   eax
c0012aa5:	e8 4e d9 ff ff       	call   c00103f8 <KeResolveCompatibilitySymbol(char*)>
c0012aaa:	83 c4 10             	add    esp,0x10
c0012aad:	89 c2                	mov    edx,eax
c0012aaf:	85 c0                	test   eax,eax
c0012ab1:	0f 85 82 00 00 00    	jne    c0012b39 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0012ab7:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0012abb:	50                   	push   eax
c0012abc:	50                   	push   eax
c0012abd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012ac1:	03 06                	add    eax,DWORD PTR [esi]
c0012ac3:	50                   	push   eax
c0012ac4:	68 71 f1 01 c0       	push   0xc001f171
c0012ac9:	e8 84 7a ff ff       	call   c000a552 <Dbg::kprintf(char const*, ...)>
c0012ace:	58                   	pop    eax
c0012acf:	5a                   	pop    edx
c0012ad0:	68 8b f1 01 c0       	push   0xc001f18b
c0012ad5:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012adc:	50                   	push   eax
c0012add:	e8 1e db fe ff       	call   c0000600 <strcpy>
c0012ae2:	59                   	pop    ecx
c0012ae3:	58                   	pop    eax
c0012ae4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012ae8:	03 06                	add    eax,DWORD PTR [esi]
c0012aea:	50                   	push   eax
c0012aeb:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012af2:	50                   	push   eax
c0012af3:	e8 c8 dc fe ff       	call   c00007c0 <strcat>
c0012af8:	58                   	pop    eax
c0012af9:	5a                   	pop    edx
c0012afa:	68 21 f2 01 c0       	push   0xc001f221
c0012aff:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012b06:	50                   	push   eax
c0012b07:	e8 b4 dc fe ff       	call   c00007c0 <strcat>
c0012b0c:	83 c4 10             	add    esp,0x10
c0012b0f:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0012b14:	0f 84 5d 01 00 00    	je     c0012c77 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0012b1a:	83 ec 0c             	sub    esp,0xc
c0012b1d:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012b24:	50                   	push   eax
c0012b25:	e8 7d d7 ff ff       	call   c00102a7 <KePanic(char const*)>
c0012b2a:	83 c4 10             	add    esp,0x10
c0012b2d:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0012b31:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0012b35:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0012b39:	80 fb 01             	cmp    bl,0x1
c0012b3c:	0f 85 88 00 00 00    	jne    c0012bca <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e9>
c0012b42:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c0012b49:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0012b4d:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c0012b51:	01 ce                	add    esi,ecx
c0012b53:	81 fb 01 04 00 00    	cmp    ebx,0x401
c0012b59:	0f 94 c0             	sete   al
c0012b5c:	81 fb 01 01 00 00    	cmp    ebx,0x101
c0012b62:	0f 94 c3             	sete   bl
c0012b65:	09 c3                	or     ebx,eax
c0012b67:	8b 06                	mov    eax,DWORD PTR [esi]
c0012b69:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c0012b6e:	74 41                	je     c0012bb1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d0>
c0012b70:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0012b73:	84 db                	test   bl,bl
c0012b75:	75 15                	jne    c0012b8c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ab>
c0012b77:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0012b7b:	66 83 f8 0c          	cmp    ax,0xc
c0012b7f:	76 05                	jbe    c0012b86 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a5>
c0012b81:	b8 0c 00 00 00       	mov    eax,0xc
c0012b86:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c0012b8a:	76 37                	jbe    c0012bc3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0012b8c:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0012b90:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0012b95:	0f 84 dc 00 00 00    	je     c0012c77 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0012b9b:	83 ec 0c             	sub    esp,0xc
c0012b9e:	68 a2 f1 01 c0       	push   0xc001f1a2
c0012ba3:	e8 ff d6 ff ff       	call   c00102a7 <KePanic(char const*)>
c0012ba8:	83 c4 10             	add    esp,0x10
c0012bab:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0012baf:	eb 12                	jmp    c0012bc3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0012bb1:	01 c1                	add    ecx,eax
c0012bb3:	84 db                	test   bl,bl
c0012bb5:	75 0c                	jne    c0012bc3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0012bb7:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0012bbb:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c0012bbf:	77 02                	ja     c0012bc3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0012bc1:	01 d1                	add    ecx,edx
c0012bc3:	89 0e                	mov    DWORD PTR [esi],ecx
c0012bc5:	e9 ea 00 00 00       	jmp    c0012cb4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0012bca:	80 fb 02             	cmp    bl,0x2
c0012bcd:	75 7c                	jne    c0012c4b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c0012bcf:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c0012bd6:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c0012bda:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c0012bde:	81 fb 01 04 00 00    	cmp    ebx,0x401
c0012be4:	74 20                	je     c0012c06 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c0012be6:	81 fb 01 01 00 00    	cmp    ebx,0x101
c0012bec:	74 18                	je     c0012c06 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c0012bee:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0012bf2:	b9 0a 00 00 00       	mov    ecx,0xa
c0012bf7:	66 83 f8 0e          	cmp    ax,0xe
c0012bfb:	77 03                	ja     c0012c00 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x61f>
c0012bfd:	8d 48 fc             	lea    ecx,[eax-0x4]
c0012c00:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
c0012c04:	76 1f                	jbe    c0012c25 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x644>
c0012c06:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0012c0a:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0012c0f:	74 66                	je     c0012c77 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0012c11:	83 ec 0c             	sub    esp,0xc
c0012c14:	68 be f1 01 c0       	push   0xc001f1be
c0012c19:	e8 89 d6 ff ff       	call   c00102a7 <KePanic(char const*)>
c0012c1e:	83 c4 10             	add    esp,0x10
c0012c21:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0012c25:	8b 06                	mov    eax,DWORD PTR [esi]
c0012c27:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c0012c2c:	74 13                	je     c0012c41 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x660>
c0012c2e:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0012c32:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c0012c39:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c0012c3d:	01 c8                	add    eax,ecx
c0012c3f:	eb 04                	jmp    c0012c45 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x664>
c0012c41:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c0012c45:	01 c2                	add    edx,eax
c0012c47:	89 16                	mov    DWORD PTR [esi],edx
c0012c49:	eb 69                	jmp    c0012cb4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0012c4b:	0f b6 db             	movzx  ebx,bl
c0012c4e:	50                   	push   eax
c0012c4f:	50                   	push   eax
c0012c50:	53                   	push   ebx
c0012c51:	68 da f1 01 c0       	push   0xc001f1da
c0012c56:	e8 f7 78 ff ff       	call   c000a552 <Dbg::kprintf(char const*, ...)>
c0012c5b:	83 c4 10             	add    esp,0x10
c0012c5e:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0012c63:	74 12                	je     c0012c77 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0012c65:	83 ec 0c             	sub    esp,0xc
c0012c68:	68 e5 f1 01 c0       	push   0xc001f1e5
c0012c6d:	e8 35 d6 ff ff       	call   c00102a7 <KePanic(char const*)>
c0012c72:	83 c4 10             	add    esp,0x10
c0012c75:	eb 3d                	jmp    c0012cb4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0012c77:	83 ec 0c             	sub    esp,0xc
c0012c7a:	55                   	push   ebp
c0012c7b:	e8 66 7f ff ff       	call   c000abe6 <File::close()>
c0012c80:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012c83:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012c86:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012c89:	59                   	pop    ecx
c0012c8a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012c8e:	e8 36 4b ff ff       	call   c00077c9 <free>
c0012c93:	5b                   	pop    ebx
c0012c94:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012c98:	e8 2c 4b ff ff       	call   c00077c9 <free>
c0012c9d:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012ca0:	e8 24 4b ff ff       	call   c00077c9 <free>
c0012ca5:	5e                   	pop    esi
c0012ca6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012caa:	e8 1a 4b ff ff       	call   c00077c9 <free>
c0012caf:	83 c4 10             	add    esp,0x10
c0012cb2:	eb 21                	jmp    c0012cd5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0012cb4:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c0012cb8:	e9 76 fd ff ff       	jmp    c0012a33 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c0012cbd:	83 ec 0c             	sub    esp,0xc
c0012cc0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012cc4:	e8 00 4b ff ff       	call   c00077c9 <free>
c0012cc9:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c0012ccd:	83 c4 10             	add    esp,0x10
c0012cd0:	e9 eb fc ff ff       	jmp    c00129c0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c0012cd5:	31 c0                	xor    eax,eax
c0012cd7:	eb 33                	jmp    c0012d0c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72b>
c0012cd9:	83 ec 0c             	sub    esp,0xc
c0012cdc:	55                   	push   ebp
c0012cdd:	e8 04 7f ff ff       	call   c000abe6 <File::close()>
c0012ce2:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012ce5:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012ce8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012ceb:	58                   	pop    eax
c0012cec:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012cf0:	e8 d4 4a ff ff       	call   c00077c9 <free>
c0012cf5:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012cf8:	e8 cc 4a ff ff       	call   c00077c9 <free>
c0012cfd:	5a                   	pop    edx
c0012cfe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012d02:	e8 c2 4a ff ff       	call   c00077c9 <free>
c0012d07:	83 c4 10             	add    esp,0x10
c0012d0a:	b0 01                	mov    al,0x1
c0012d0c:	81 c4 5c 03 00 00    	add    esp,0x35c
c0012d12:	5b                   	pop    ebx
c0012d13:	5e                   	pop    esi
c0012d14:	5f                   	pop    edi
c0012d15:	5d                   	pop    ebp
c0012d16:	c3                   	ret    

c0012d17 <Thr::getDriverBaseFromAddress(unsigned long)>:
c0012d17:	56                   	push   esi
c0012d18:	31 d2                	xor    edx,edx
c0012d1a:	53                   	push   ebx
c0012d1b:	8b 1d a0 59 02 c0    	mov    ebx,DWORD PTR ds:0xc00259a0
c0012d21:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0012d25:	39 d3                	cmp    ebx,edx
c0012d27:	7e 1b                	jle    c0012d44 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c0012d29:	8b 04 95 c0 5b 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffda440]
c0012d30:	39 c8                	cmp    eax,ecx
c0012d32:	77 0d                	ja     c0012d41 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c0012d34:	8b 34 95 c0 59 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffda640]
c0012d3b:	01 c6                	add    esi,eax
c0012d3d:	39 ce                	cmp    esi,ecx
c0012d3f:	77 05                	ja     c0012d46 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c0012d41:	42                   	inc    edx
c0012d42:	eb e1                	jmp    c0012d25 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c0012d44:	31 c0                	xor    eax,eax
c0012d46:	5b                   	pop    ebx
c0012d47:	5e                   	pop    esi
c0012d48:	c3                   	ret    

c0012d49 <Thr::getDriverNameFromAddress(unsigned long)>:
c0012d49:	53                   	push   ebx
c0012d4a:	31 c0                	xor    eax,eax
c0012d4c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0012d50:	8b 1d a0 59 02 c0    	mov    ebx,DWORD PTR ds:0xc00259a0
c0012d56:	39 c3                	cmp    ebx,eax
c0012d58:	7e 22                	jle    c0012d7c <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c0012d5a:	8b 14 85 c0 5b 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffda440]
c0012d61:	39 ca                	cmp    edx,ecx
c0012d63:	77 14                	ja     c0012d79 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0012d65:	03 14 85 c0 59 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffda640]
c0012d6c:	39 ca                	cmp    edx,ecx
c0012d6e:	76 09                	jbe    c0012d79 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0012d70:	8b 04 85 c0 5d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda240]
c0012d77:	eb 05                	jmp    c0012d7e <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c0012d79:	40                   	inc    eax
c0012d7a:	eb da                	jmp    c0012d56 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c0012d7c:	31 c0                	xor    eax,eax
c0012d7e:	5b                   	pop    ebx
c0012d7f:	c3                   	ret    

c0012d80 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c0012d80:	53                   	push   ebx
c0012d81:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0012d85:	53                   	push   ebx
c0012d86:	e8 8c ff ff ff       	call   c0012d17 <Thr::getDriverBaseFromAddress(unsigned long)>
c0012d8b:	5a                   	pop    edx
c0012d8c:	31 d2                	xor    edx,edx
c0012d8e:	85 c0                	test   eax,eax
c0012d90:	74 04                	je     c0012d96 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c0012d92:	89 da                	mov    edx,ebx
c0012d94:	29 c2                	sub    edx,eax
c0012d96:	89 d0                	mov    eax,edx
c0012d98:	5b                   	pop    ebx
c0012d99:	c3                   	ret    

c0012d9a <Thr::loadDLL(char const*, bool)>:
c0012d9a:	55                   	push   ebp
c0012d9b:	57                   	push   edi
c0012d9c:	56                   	push   esi
c0012d9d:	53                   	push   ebx
c0012d9e:	81 ec 34 01 00 00    	sub    esp,0x134
c0012da4:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0012dab:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0012db2:	56                   	push   esi
c0012db3:	68 fd f1 01 c0       	push   0xc001f1fd
c0012db8:	e8 95 77 ff ff       	call   c000a552 <Dbg::kprintf(char const*, ...)>
c0012dbd:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0012dc4:	e8 f0 49 ff ff       	call   c00077b9 <malloc>
c0012dc9:	83 c4 0c             	add    esp,0xc
c0012dcc:	89 c3                	mov    ebx,eax
c0012dce:	ff 35 90 61 02 c0    	push   DWORD PTR ds:0xc0026190
c0012dd4:	56                   	push   esi
c0012dd5:	50                   	push   eax
c0012dd6:	e8 ed 7c ff ff       	call   c000aac8 <File::File(char const*, Process*)>
c0012ddb:	83 c4 10             	add    esp,0x10
c0012dde:	85 db                	test   ebx,ebx
c0012de0:	75 3c                	jne    c0012e1e <Thr::loadDLL(char const*, bool)+0x84>
c0012de2:	89 f8                	mov    eax,edi
c0012de4:	84 c0                	test   al,al
c0012de6:	0f 84 d2 01 00 00    	je     c0012fbe <Thr::loadDLL(char const*, bool)+0x224>
c0012dec:	55                   	push   ebp
c0012ded:	55                   	push   ebp
c0012dee:	68 0e f2 01 c0       	push   0xc001f20e
c0012df3:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c0012df7:	55                   	push   ebp
c0012df8:	e8 03 d8 fe ff       	call   c0000600 <strcpy>
c0012dfd:	58                   	pop    eax
c0012dfe:	5a                   	pop    edx
c0012dff:	56                   	push   esi
c0012e00:	55                   	push   ebp
c0012e01:	e8 ba d9 fe ff       	call   c00007c0 <strcat>
c0012e06:	59                   	pop    ecx
c0012e07:	58                   	pop    eax
c0012e08:	68 21 f2 01 c0       	push   0xc001f221
c0012e0d:	55                   	push   ebp
c0012e0e:	e8 ad d9 fe ff       	call   c00007c0 <strcat>
c0012e13:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012e16:	e8 8c d4 ff ff       	call   c00102a7 <KePanic(char const*)>
c0012e1b:	83 c4 10             	add    esp,0x10
c0012e1e:	51                   	push   ecx
c0012e1f:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c0012e23:	50                   	push   eax
c0012e24:	8d 44 24 20          	lea    eax,[esp+0x20]
c0012e28:	50                   	push   eax
c0012e29:	53                   	push   ebx
c0012e2a:	e8 05 80 ff ff       	call   c000ae34 <File::stat(unsigned long long*, bool*)>
c0012e2f:	83 c4 10             	add    esp,0x10
c0012e32:	85 db                	test   ebx,ebx
c0012e34:	74 0c                	je     c0012e42 <Thr::loadDLL(char const*, bool)+0xa8>
c0012e36:	83 ec 0c             	sub    esp,0xc
c0012e39:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012e3b:	53                   	push   ebx
c0012e3c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012e3f:	83 c4 10             	add    esp,0x10
c0012e42:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c0012e47:	75 0a                	jne    c0012e53 <Thr::loadDLL(char const*, bool)+0xb9>
c0012e49:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012e4d:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c0012e51:	75 3c                	jne    c0012e8f <Thr::loadDLL(char const*, bool)+0xf5>
c0012e53:	89 f8                	mov    eax,edi
c0012e55:	84 c0                	test   al,al
c0012e57:	0f 84 49 01 00 00    	je     c0012fa6 <Thr::loadDLL(char const*, bool)+0x20c>
c0012e5d:	51                   	push   ecx
c0012e5e:	51                   	push   ecx
c0012e5f:	68 0e f2 01 c0       	push   0xc001f20e
c0012e64:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c0012e68:	53                   	push   ebx
c0012e69:	e8 92 d7 fe ff       	call   c0000600 <strcpy>
c0012e6e:	5d                   	pop    ebp
c0012e6f:	58                   	pop    eax
c0012e70:	56                   	push   esi
c0012e71:	53                   	push   ebx
c0012e72:	e8 49 d9 fe ff       	call   c00007c0 <strcat>
c0012e77:	58                   	pop    eax
c0012e78:	5a                   	pop    edx
c0012e79:	68 21 f2 01 c0       	push   0xc001f221
c0012e7e:	53                   	push   ebx
c0012e7f:	e8 3c d9 fe ff       	call   c00007c0 <strcat>
c0012e84:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012e87:	e8 1b d4 ff ff       	call   c00102a7 <KePanic(char const*)>
c0012e8c:	83 c4 10             	add    esp,0x10
c0012e8f:	52                   	push   edx
c0012e90:	6a 03                	push   0x3
c0012e92:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012e96:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0012e9a:	05 ff 0f 00 00       	add    eax,0xfff
c0012e9f:	83 d2 00             	adc    edx,0x0
c0012ea2:	0f ac d0 0c          	shrd   eax,edx,0xc
c0012ea6:	50                   	push   eax
c0012ea7:	ff 35 b0 2f 02 c0    	push   DWORD PTR ds:0xc0022fb0
c0012ead:	e8 aa 6b ff ff       	call   c0009a5c <VAS::allocatePages(int, int)>
c0012eb2:	59                   	pop    ecx
c0012eb3:	89 c3                	mov    ebx,eax
c0012eb5:	5d                   	pop    ebp
c0012eb6:	50                   	push   eax
c0012eb7:	68 16 df 01 c0       	push   0xc001df16
c0012ebc:	e8 91 76 ff ff       	call   c000a552 <Dbg::kprintf(char const*, ...)>
c0012ec1:	89 34 24             	mov    DWORD PTR [esp],esi
c0012ec4:	e8 77 d6 fe ff       	call   c0000540 <strlen>
c0012ec9:	8b 2d a0 59 02 c0    	mov    ebp,DWORD PTR ds:0xc00259a0
c0012ecf:	40                   	inc    eax
c0012ed0:	89 04 24             	mov    DWORD PTR [esp],eax
c0012ed3:	e8 e1 48 ff ff       	call   c00077b9 <malloc>
c0012ed8:	89 04 ad c0 5d 02 c0 	mov    DWORD PTR [ebp*4-0x3ffda240],eax
c0012edf:	58                   	pop    eax
c0012ee0:	a1 a0 59 02 c0       	mov    eax,ds:0xc00259a0
c0012ee5:	5a                   	pop    edx
c0012ee6:	56                   	push   esi
c0012ee7:	ff 34 85 c0 5d 02 c0 	push   DWORD PTR [eax*4-0x3ffda240]
c0012eee:	e8 0d d7 fe ff       	call   c0000600 <strcpy>
c0012ef3:	a1 a0 59 02 c0       	mov    eax,ds:0xc00259a0
c0012ef8:	8d 50 01             	lea    edx,[eax+0x1]
c0012efb:	89 1c 85 c0 5b 02 c0 	mov    DWORD PTR [eax*4-0x3ffda440],ebx
c0012f02:	89 15 a0 59 02 c0    	mov    DWORD PTR ds:0xc00259a0,edx
c0012f08:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0012f0c:	83 c4 0c             	add    esp,0xc
c0012f0f:	89 14 85 c0 59 02 c0 	mov    DWORD PTR [eax*4-0x3ffda640],edx
c0012f16:	6a 01                	push   0x1
c0012f18:	53                   	push   ebx
c0012f19:	56                   	push   esi
c0012f1a:	e8 c2 f6 ff ff       	call   c00125e1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c0012f1f:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0012f23:	83 c4 10             	add    esp,0x10
c0012f26:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0012f2b:	0f 85 89 00 00 00    	jne    c0012fba <Thr::loadDLL(char const*, bool)+0x220>
c0012f31:	89 f8                	mov    eax,edi
c0012f33:	84 c0                	test   al,al
c0012f35:	74 73                	je     c0012faa <Thr::loadDLL(char const*, bool)+0x210>
c0012f37:	83 ec 0c             	sub    esp,0xc
c0012f3a:	68 23 f2 01 c0       	push   0xc001f223
c0012f3f:	e8 63 d3 ff ff       	call   c00102a7 <KePanic(char const*)>
c0012f44:	83 c4 10             	add    esp,0x10
c0012f47:	eb 61                	jmp    c0012faa <Thr::loadDLL(char const*, bool)+0x210>
c0012f49:	50                   	push   eax
c0012f4a:	50                   	push   eax
c0012f4b:	89 e8                	mov    eax,ebp
c0012f4d:	c1 e0 0c             	shl    eax,0xc
c0012f50:	01 d8                	add    eax,ebx
c0012f52:	50                   	push   eax
c0012f53:	ff 35 b0 2f 02 c0    	push   DWORD PTR ds:0xc0022fb0
c0012f59:	e8 0c 66 ff ff       	call   c000956a <VAS::getPageTableEntry(unsigned long)>
c0012f5e:	83 c4 10             	add    esp,0x10
c0012f61:	8b 00                	mov    eax,DWORD PTR [eax]
c0012f63:	a8 60                	test   al,0x60
c0012f65:	75 11                	jne    c0012f78 <Thr::loadDLL(char const*, bool)+0x1de>
c0012f67:	83 ec 0c             	sub    esp,0xc
c0012f6a:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012f6f:	50                   	push   eax
c0012f70:	e8 be 4a ff ff       	call   c0007a33 <Phys::freePage(unsigned long)>
c0012f75:	83 c4 10             	add    esp,0x10
c0012f78:	45                   	inc    ebp
c0012f79:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012f7d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012f81:	05 ff 0f 00 00       	add    eax,0xfff
c0012f86:	bf 00 00 00 00       	mov    edi,0x0
c0012f8b:	83 d2 00             	adc    edx,0x0
c0012f8e:	0f ac d0 0c          	shrd   eax,edx,0xc
c0012f92:	c1 ea 0c             	shr    edx,0xc
c0012f95:	39 c5                	cmp    ebp,eax
c0012f97:	89 d1                	mov    ecx,edx
c0012f99:	89 f8                	mov    eax,edi
c0012f9b:	19 c8                	sbb    eax,ecx
c0012f9d:	72 aa                	jb     c0012f49 <Thr::loadDLL(char const*, bool)+0x1af>
c0012f9f:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0012fa4:	75 18                	jne    c0012fbe <Thr::loadDLL(char const*, bool)+0x224>
c0012fa6:	31 db                	xor    ebx,ebx
c0012fa8:	eb 14                	jmp    c0012fbe <Thr::loadDLL(char const*, bool)+0x224>
c0012faa:	83 ec 0c             	sub    esp,0xc
c0012fad:	68 42 f2 01 c0       	push   0xc001f242
c0012fb2:	e8 f0 d2 ff ff       	call   c00102a7 <KePanic(char const*)>
c0012fb7:	83 c4 10             	add    esp,0x10
c0012fba:	31 ed                	xor    ebp,ebp
c0012fbc:	eb bb                	jmp    c0012f79 <Thr::loadDLL(char const*, bool)+0x1df>
c0012fbe:	81 c4 2c 01 00 00    	add    esp,0x12c
c0012fc4:	89 d8                	mov    eax,ebx
c0012fc6:	5b                   	pop    ebx
c0012fc7:	5e                   	pop    esi
c0012fc8:	5f                   	pop    edi
c0012fc9:	5d                   	pop    ebp
c0012fca:	c3                   	ret    

c0012fcb <Thr::executeDLL(unsigned long, void*)>:
c0012fcb:	56                   	push   esi
c0012fcc:	53                   	push   ebx
c0012fcd:	52                   	push   edx
c0012fce:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012fd2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0012fd6:	85 db                	test   ebx,ebx
c0012fd8:	75 10                	jne    c0012fea <Thr::executeDLL(unsigned long, void*)+0x1f>
c0012fda:	83 ec 0c             	sub    esp,0xc
c0012fdd:	68 5e f2 01 c0       	push   0xc001f25e
c0012fe2:	e8 c0 d2 ff ff       	call   c00102a7 <KePanic(char const*)>
c0012fe7:	83 c4 10             	add    esp,0x10
c0012fea:	50                   	push   eax
c0012feb:	50                   	push   eax
c0012fec:	53                   	push   ebx
c0012fed:	68 88 f2 01 c0       	push   0xc001f288
c0012ff2:	e8 5b 75 ff ff       	call   c000a552 <Dbg::kprintf(char const*, ...)>
c0012ff7:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0012ffb:	89 d8                	mov    eax,ebx
c0012ffd:	83 c4 14             	add    esp,0x14
c0013000:	5b                   	pop    ebx
c0013001:	5e                   	pop    esi
c0013002:	ff e0                	jmp    eax

c0013004 <userModeEntryPoint(void*)>:
c0013004:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c0013009:	48                   	dec    eax
c001300a:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c001300f:	75 03                	jne    c0013014 <userModeEntryPoint(void*)+0x10>
c0013011:	fb                   	sti    
c0013012:	66 90                	xchg   ax,ax
c0013014:	fb                   	sti    
c0013015:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001301a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001301d:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c0013023:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013027:	e9 13 d2 fe ff       	jmp    c000023f <goToUsermode>

c001302c <changeTSS>:
c001302c:	83 ec 14             	sub    esp,0x14
c001302f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013034:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0013037:	b8 00 00 e8 01       	mov    eax,0x1e80000
c001303c:	c1 e2 15             	shl    edx,0x15
c001303f:	29 d0                	sub    eax,edx
c0013041:	50                   	push   eax
c0013042:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c0013047:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001304d:	05 7c 11 00 00       	add    eax,0x117c
c0013052:	50                   	push   eax
c0013053:	e8 90 5b ff ff       	call   c0008be8 <TSS::setESP(unsigned long)>
c0013058:	83 c4 1c             	add    esp,0x1c
c001305b:	c3                   	ret    

c001305c <switchToThread(ThreadControlBlock*)>:
c001305c:	57                   	push   edi
c001305d:	a1 64 61 02 c0       	mov    eax,ds:0xc0026164
c0013062:	56                   	push   esi
c0013063:	85 c0                	test   eax,eax
c0013065:	53                   	push   ebx
c0013066:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001306a:	0f 85 90 00 00 00    	jne    c0013100 <switchToThread(ThreadControlBlock*)+0xa4>
c0013070:	8a 53 40             	mov    dl,BYTE PTR [ebx+0x40]
c0013073:	80 fa ff             	cmp    dl,0xff
c0013076:	0f 84 80 00 00 00    	je     c00130fc <switchToThread(ThreadControlBlock*)+0xa0>
c001307c:	81 e2 ff 00 00 00    	and    edx,0xff
c0013082:	b8 00 04 00 00       	mov    eax,0x400
c0013087:	29 d0                	sub    eax,edx
c0013089:	d1 f8                	sar    eax,1
c001308b:	03 43 34             	add    eax,DWORD PTR [ebx+0x34]
c001308e:	66 90                	xchg   ax,ax
c0013090:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0013093:	e8 1d 26 00 00       	call   c00156b5 <HalQueryPerformanceCounter()>
c0013098:	a3 a8 61 02 c0       	mov    ds:0xc00261a8,eax
c001309d:	89 15 ac 61 02 c0    	mov    DWORD PTR ds:0xc00261ac,edx
c00130a3:	89 c6                	mov    esi,eax
c00130a5:	89 d7                	mov    edi,edx
c00130a7:	2b 35 98 61 02 c0    	sub    esi,DWORD PTR ds:0xc0026198
c00130ad:	a3 98 61 02 c0       	mov    ds:0xc0026198,eax
c00130b2:	1b 3d 9c 61 02 c0    	sbb    edi,DWORD PTR ds:0xc002619c
c00130b8:	89 35 a0 61 02 c0    	mov    DWORD PTR ds:0xc00261a0,esi
c00130be:	89 3d a4 61 02 c0    	mov    DWORD PTR ds:0xc00261a4,edi
c00130c4:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00130ca:	89 15 9c 61 02 c0    	mov    DWORD PTR ds:0xc002619c,edx
c00130d0:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c00130d3:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c00130d6:	01 c6                	add    esi,eax
c00130d8:	11 d7                	adc    edi,edx
c00130da:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c00130dd:	83 ec 0c             	sub    esp,0xc
c00130e0:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c00130e3:	53                   	push   ebx
c00130e4:	e8 8e d1 fe ff       	call   c0000277 <switchToThreadASM>
c00130e9:	0f 20 c0             	mov    eax,cr0
c00130ec:	83 c8 08             	or     eax,0x8
c00130ef:	0f 22 c0             	mov    cr0,eax
c00130f2:	83 c4 10             	add    esp,0x10
c00130f5:	5b                   	pop    ebx
c00130f6:	5e                   	pop    esi
c00130f7:	5f                   	pop    edi
c00130f8:	c3                   	ret    
c00130f9:	8d 76 00             	lea    esi,[esi+0x0]
c00130fc:	31 c0                	xor    eax,eax
c00130fe:	eb 90                	jmp    c0013090 <switchToThread(ThreadControlBlock*)+0x34>
c0013100:	5b                   	pop    ebx
c0013101:	c7 05 60 61 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0026160,0x1
c001310b:	5e                   	pop    esi
c001310c:	5f                   	pop    edi
c001310d:	c3                   	ret    
c001310e:	66 90                	xchg   ax,ax

c0013110 <Process::addArgs(char**)>:
c0013110:	57                   	push   edi
c0013111:	56                   	push   esi
c0013112:	53                   	push   ebx
c0013113:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013117:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001311b:	c7 86 16 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x516],0x0
c0013125:	85 ff                	test   edi,edi
c0013127:	74 43                	je     c001316c <Process::addArgs(char**)+0x5c>
c0013129:	8b 07                	mov    eax,DWORD PTR [edi]
c001312b:	85 c0                	test   eax,eax
c001312d:	74 3d                	je     c001316c <Process::addArgs(char**)+0x5c>
c001312f:	31 db                	xor    ebx,ebx
c0013131:	8d 76 00             	lea    esi,[esi+0x0]
c0013134:	83 ec 0c             	sub    esp,0xc
c0013137:	50                   	push   eax
c0013138:	e8 03 d4 fe ff       	call   c0000540 <strlen>
c001313d:	40                   	inc    eax
c001313e:	89 04 24             	mov    DWORD PTR [esp],eax
c0013141:	e8 73 46 ff ff       	call   c00077b9 <malloc>
c0013146:	89 84 9e 1a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x51a],eax
c001314d:	5a                   	pop    edx
c001314e:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0013151:	59                   	pop    ecx
c0013152:	43                   	inc    ebx
c0013153:	52                   	push   edx
c0013154:	50                   	push   eax
c0013155:	e8 a6 d4 fe ff       	call   c0000600 <strcpy>
c001315a:	ff 86 16 05 00 00    	inc    DWORD PTR [esi+0x516]
c0013160:	83 c4 10             	add    esp,0x10
c0013163:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c0013166:	85 c0                	test   eax,eax
c0013168:	75 ca                	jne    c0013134 <Process::addArgs(char**)+0x24>
c001316a:	66 90                	xchg   ax,ax
c001316c:	5b                   	pop    ebx
c001316d:	5e                   	pop    esi
c001316e:	5f                   	pop    edi
c001316f:	c3                   	ret    

c0013170 <Process::Process(char const*, Process*, char**)>:
c0013170:	56                   	push   esi
c0013171:	53                   	push   ebx
c0013172:	83 ec 14             	sub    esp,0x14
c0013175:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013179:	05 0c 02 00 00       	add    eax,0x20c
c001317e:	bb 07 00 00 00       	mov    ebx,0x7
c0013183:	89 c6                	mov    esi,eax
c0013185:	8d 76 00             	lea    esi,[esi+0x0]
c0013188:	85 db                	test   ebx,ebx
c001318a:	78 14                	js     c00131a0 <Process::Process(char const*, Process*, char**)+0x30>
c001318c:	83 ec 0c             	sub    esp,0xc
c001318f:	56                   	push   esi
c0013190:	e8 57 a0 00 00       	call   c001d1ec <ThreadControlBlock::ThreadControlBlock()>
c0013195:	83 c4 10             	add    esp,0x10
c0013198:	83 c6 5f             	add    esi,0x5f
c001319b:	4b                   	dec    ebx
c001319c:	eb ea                	jmp    c0013188 <Process::Process(char const*, Process*, char**)+0x18>
c001319e:	66 90                	xchg   ax,ax
c00131a0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00131a4:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c00131ab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00131af:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c00131b6:	83 ec 0c             	sub    esp,0xc
c00131b9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00131bd:	e8 da ce ff ff       	call   c001009c <Krnl::newProcessEnv(Process*)>
c00131c2:	83 c4 10             	add    esp,0x10
c00131c5:	89 c2                	mov    edx,eax
c00131c7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00131cb:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c00131d1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00131d5:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c00131de:	a1 4c 02 02 c0       	mov    eax,ds:0xc002024c
c00131e3:	8d 50 01             	lea    edx,[eax+0x1]
c00131e6:	89 15 4c 02 02 c0    	mov    DWORD PTR ds:0xc002024c,edx
c00131ec:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00131f0:	89 02                	mov    DWORD PTR [edx],eax
c00131f2:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c00131fa:	83 ec 0c             	sub    esp,0xc
c00131fd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013201:	e8 b3 45 ff ff       	call   c00077b9 <malloc>
c0013206:	83 c4 10             	add    esp,0x10
c0013209:	89 c3                	mov    ebx,eax
c001320b:	83 ec 08             	sub    esp,0x8
c001320e:	6a 00                	push   0x0
c0013210:	53                   	push   ebx
c0013211:	e8 f0 6b ff ff       	call   c0009e06 <VAS::VAS(bool)>
c0013216:	83 c4 10             	add    esp,0x10
c0013219:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001321d:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0013223:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013227:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0013231:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013235:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0013239:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c001323f:	e8 ce d3 ff ff       	call   c0010612 <KeInitSignals()>
c0013244:	89 c2                	mov    edx,eax
c0013246:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001324a:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0013250:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013254:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001325a:	85 c0                	test   eax,eax
c001325c:	74 42                	je     c00132a0 <Process::Process(char const*, Process*, char**)+0x130>
c001325e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013262:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0013268:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c001326e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013272:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0013278:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001327c:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0013282:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0013288:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001328c:	05 0c 01 00 00       	add    eax,0x10c
c0013291:	83 ec 08             	sub    esp,0x8
c0013294:	52                   	push   edx
c0013295:	50                   	push   eax
c0013296:	e8 65 d3 fe ff       	call   c0000600 <strcpy>
c001329b:	83 c4 10             	add    esp,0x10
c001329e:	eb 64                	jmp    c0013304 <Process::Process(char const*, Process*, char**)+0x194>
c00132a0:	c7 44 24 04 84 01 00 00 	mov    DWORD PTR [esp+0x4],0x184
c00132a8:	83 ec 0c             	sub    esp,0xc
c00132ab:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00132af:	e8 05 45 ff ff       	call   c00077b9 <malloc>
c00132b4:	83 c4 10             	add    esp,0x10
c00132b7:	89 c3                	mov    ebx,eax
c00132b9:	83 ec 08             	sub    esp,0x8
c00132bc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00132c0:	53                   	push   ebx
c00132c1:	e8 34 56 ff ff       	call   c00088fa <VgaText::VgaText(char const*)>
c00132c6:	83 c4 10             	add    esp,0x10
c00132c9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00132cd:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c00132d3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00132d7:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00132dd:	83 ec 0c             	sub    esp,0xc
c00132e0:	50                   	push   eax
c00132e1:	e8 b4 4e ff ff       	call   c000819a <addToTerminalCycle(VgaText*)>
c00132e6:	83 c4 10             	add    esp,0x10
c00132e9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00132ed:	05 0c 01 00 00       	add    eax,0x10c
c00132f2:	83 ec 08             	sub    esp,0x8
c00132f5:	68 a7 f2 01 c0       	push   0xc001f2a7
c00132fa:	50                   	push   eax
c00132fb:	e8 00 d3 fe ff       	call   c0000600 <strcpy>
c0013300:	83 c4 10             	add    esp,0x10
c0013303:	90                   	nop
c0013304:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013308:	83 c0 0c             	add    eax,0xc
c001330b:	83 ec 08             	sub    esp,0x8
c001330e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013312:	50                   	push   eax
c0013313:	e8 e8 d2 fe ff       	call   c0000600 <strcpy>
c0013318:	83 c4 10             	add    esp,0x10
c001331b:	83 ec 08             	sub    esp,0x8
c001331e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0013322:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013326:	e8 e5 fd ff ff       	call   c0013110 <Process::addArgs(char**)>
c001332b:	83 c4 10             	add    esp,0x10
c001332e:	83 ec 08             	sub    esp,0x8
c0013331:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013335:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013339:	e8 6d ed ff ff       	call   c00120ab <Thr::loadProgramIntoMemory(Process*, char const*)>
c001333e:	83 c4 10             	add    esp,0x10
c0013341:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0013345:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0013349:	83 f0 01             	xor    eax,0x1
c001334c:	88 c2                	mov    dl,al
c001334e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013352:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c0013358:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001335c:	25 ff 00 00 00       	and    eax,0xff
c0013361:	83 ec 08             	sub    esp,0x8
c0013364:	50                   	push   eax
c0013365:	68 00 f3 01 c0       	push   0xc001f300
c001336a:	e8 e3 71 ff ff       	call   c000a552 <Dbg::kprintf(char const*, ...)>
c001336f:	83 c4 10             	add    esp,0x10
c0013372:	90                   	nop
c0013373:	83 c4 14             	add    esp,0x14
c0013376:	5b                   	pop    ebx
c0013377:	5e                   	pop    esi
c0013378:	c3                   	ret    
c0013379:	90                   	nop
c001337a:	66 90                	xchg   ax,ax

c001337c <Process::Process(bool, char const*, Process*, char**)>:
c001337c:	56                   	push   esi
c001337d:	53                   	push   ebx
c001337e:	83 ec 24             	sub    esp,0x24
c0013381:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013385:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0013389:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001338d:	05 0c 02 00 00       	add    eax,0x20c
c0013392:	bb 07 00 00 00       	mov    ebx,0x7
c0013397:	89 c6                	mov    esi,eax
c0013399:	8d 76 00             	lea    esi,[esi+0x0]
c001339c:	85 db                	test   ebx,ebx
c001339e:	78 14                	js     c00133b4 <Process::Process(bool, char const*, Process*, char**)+0x38>
c00133a0:	83 ec 0c             	sub    esp,0xc
c00133a3:	56                   	push   esi
c00133a4:	e8 43 9e 00 00       	call   c001d1ec <ThreadControlBlock::ThreadControlBlock()>
c00133a9:	83 c4 10             	add    esp,0x10
c00133ac:	83 c6 5f             	add    esi,0x5f
c00133af:	4b                   	dec    ebx
c00133b0:	eb ea                	jmp    c001339c <Process::Process(bool, char const*, Process*, char**)+0x20>
c00133b2:	66 90                	xchg   ax,ax
c00133b4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00133b8:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c00133bf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00133c3:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c00133ca:	83 ec 0c             	sub    esp,0xc
c00133cd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00133d1:	e8 c6 cc ff ff       	call   c001009c <Krnl::newProcessEnv(Process*)>
c00133d6:	83 c4 10             	add    esp,0x10
c00133d9:	89 c2                	mov    edx,eax
c00133db:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00133df:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c00133e5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00133e9:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c00133f2:	a1 4c 02 02 c0       	mov    eax,ds:0xc002024c
c00133f7:	8d 50 01             	lea    edx,[eax+0x1]
c00133fa:	89 15 4c 02 02 c0    	mov    DWORD PTR ds:0xc002024c,edx
c0013400:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0013404:	89 02                	mov    DWORD PTR [edx],eax
c0013406:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c001340e:	83 ec 0c             	sub    esp,0xc
c0013411:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0013415:	e8 9f 43 ff ff       	call   c00077b9 <malloc>
c001341a:	83 c4 10             	add    esp,0x10
c001341d:	89 c3                	mov    ebx,eax
c001341f:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0013423:	25 ff 00 00 00       	and    eax,0xff
c0013428:	83 ec 08             	sub    esp,0x8
c001342b:	50                   	push   eax
c001342c:	53                   	push   ebx
c001342d:	e8 d4 69 ff ff       	call   c0009e06 <VAS::VAS(bool)>
c0013432:	83 c4 10             	add    esp,0x10
c0013435:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013439:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c001343f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013443:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c001344d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013451:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0013455:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c001345b:	e8 b2 d1 ff ff       	call   c0010612 <KeInitSignals()>
c0013460:	89 c2                	mov    edx,eax
c0013462:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013466:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c001346c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013470:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0013476:	85 c0                	test   eax,eax
c0013478:	74 42                	je     c00134bc <Process::Process(bool, char const*, Process*, char**)+0x140>
c001347a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001347e:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0013484:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c001348a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001348e:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0013494:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013498:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001349e:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00134a4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00134a8:	05 0c 01 00 00       	add    eax,0x10c
c00134ad:	83 ec 08             	sub    esp,0x8
c00134b0:	52                   	push   edx
c00134b1:	50                   	push   eax
c00134b2:	e8 49 d1 fe ff       	call   c0000600 <strcpy>
c00134b7:	83 c4 10             	add    esp,0x10
c00134ba:	eb 64                	jmp    c0013520 <Process::Process(bool, char const*, Process*, char**)+0x1a4>
c00134bc:	c7 44 24 18 84 01 00 00 	mov    DWORD PTR [esp+0x18],0x184
c00134c4:	83 ec 0c             	sub    esp,0xc
c00134c7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00134cb:	e8 e9 42 ff ff       	call   c00077b9 <malloc>
c00134d0:	83 c4 10             	add    esp,0x10
c00134d3:	89 c3                	mov    ebx,eax
c00134d5:	83 ec 08             	sub    esp,0x8
c00134d8:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00134dc:	53                   	push   ebx
c00134dd:	e8 18 54 ff ff       	call   c00088fa <VgaText::VgaText(char const*)>
c00134e2:	83 c4 10             	add    esp,0x10
c00134e5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00134e9:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c00134ef:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00134f3:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00134f9:	83 ec 0c             	sub    esp,0xc
c00134fc:	50                   	push   eax
c00134fd:	e8 98 4c ff ff       	call   c000819a <addToTerminalCycle(VgaText*)>
c0013502:	83 c4 10             	add    esp,0x10
c0013505:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013509:	05 0c 01 00 00       	add    eax,0x10c
c001350e:	83 ec 08             	sub    esp,0x8
c0013511:	68 a7 f2 01 c0       	push   0xc001f2a7
c0013516:	50                   	push   eax
c0013517:	e8 e4 d0 fe ff       	call   c0000600 <strcpy>
c001351c:	83 c4 10             	add    esp,0x10
c001351f:	90                   	nop
c0013520:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013524:	83 c0 0c             	add    eax,0xc
c0013527:	83 ec 08             	sub    esp,0x8
c001352a:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001352e:	50                   	push   eax
c001352f:	e8 cc d0 fe ff       	call   c0000600 <strcpy>
c0013534:	83 c4 10             	add    esp,0x10
c0013537:	83 ec 08             	sub    esp,0x8
c001353a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001353e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0013542:	e8 c9 fb ff ff       	call   c0013110 <Process::addArgs(char**)>
c0013547:	83 c4 10             	add    esp,0x10
c001354a:	90                   	nop
c001354b:	83 c4 24             	add    esp,0x24
c001354e:	5b                   	pop    ebx
c001354f:	5e                   	pop    esi
c0013550:	c3                   	ret    
c0013551:	8d 76 00             	lea    esi,[esi+0x0]

c0013554 <taskStartupFunction>:
c0013554:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013559:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c001355c:	c3                   	ret    
c001355d:	90                   	nop
c001355e:	66 90                	xchg   ax,ax

c0013560 <Semaphore::Semaphore(int)>:
c0013560:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013564:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013568:	89 10                	mov    DWORD PTR [eax],edx
c001356a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001356e:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0013575:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013579:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013580:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013584:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001358b:	90                   	nop
c001358c:	c3                   	ret    
c001358d:	90                   	nop
c001358e:	66 90                	xchg   ax,ax

c0013590 <Mutex::Mutex()>:
c0013590:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013594:	6a 01                	push   0x1
c0013596:	50                   	push   eax
c0013597:	e8 c4 ff ff ff       	call   c0013560 <Semaphore::Semaphore(int)>
c001359c:	83 c4 08             	add    esp,0x8
c001359f:	90                   	nop
c00135a0:	c3                   	ret    
c00135a1:	90                   	nop
c00135a2:	66 90                	xchg   ax,ax

c00135a4 <Process::createThread(void (*)(void*), void*, int)>:
c00135a4:	57                   	push   edi
c00135a5:	31 c9                	xor    ecx,ecx
c00135a7:	56                   	push   esi
c00135a8:	53                   	push   ebx
c00135a9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00135ad:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c00135b4:	89 f2                	mov    edx,esi
c00135b6:	66 90                	xchg   ax,ax
c00135b8:	31 c0                	xor    eax,eax
c00135ba:	66 89 d0             	mov    ax,dx
c00135bd:	83 e2 01             	and    edx,0x1
c00135c0:	74 12                	je     c00135d4 <Process::createThread(void (*)(void*), void*, int)+0x30>
c00135c2:	d1 f8                	sar    eax,1
c00135c4:	41                   	inc    ecx
c00135c5:	89 c2                	mov    edx,eax
c00135c7:	83 f9 10             	cmp    ecx,0x10
c00135ca:	75 ec                	jne    c00135b8 <Process::createThread(void (*)(void*), void*, int)+0x14>
c00135cc:	31 db                	xor    ebx,ebx
c00135ce:	89 d8                	mov    eax,ebx
c00135d0:	5b                   	pop    ebx
c00135d1:	5e                   	pop    esi
c00135d2:	5f                   	pop    edi
c00135d3:	c3                   	ret    
c00135d4:	b8 01 00 00 00       	mov    eax,0x1
c00135d9:	d3 e0                	shl    eax,cl
c00135db:	09 c6                	or     esi,eax
c00135dd:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c00135e0:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c00135e7:	01 c0                	add    eax,eax
c00135e9:	01 c8                	add    eax,ecx
c00135eb:	8d 04 80             	lea    eax,[eax+eax*4]
c00135ee:	01 d8                	add    eax,ebx
c00135f0:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c00135f7:	75 0b                	jne    c0013604 <Process::createThread(void (*)(void*), void*, int)+0x60>
c00135f9:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c0013603:	90                   	nop
c0013604:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c001360a:	83 ec 08             	sub    esp,0x8
c001360d:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0013610:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c0013613:	01 c0                	add    eax,eax
c0013615:	01 c8                	add    eax,ecx
c0013617:	8d 3c 80             	lea    edi,[eax+eax*4]
c001361a:	8d 04 3b             	lea    eax,[ebx+edi*1]
c001361d:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c0013623:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c0013629:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001362d:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c0013633:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c0013639:	8d 9c 3b 0c 02 00 00 	lea    ebx,[ebx+edi*1+0x20c]
c0013640:	89 ca                	mov    edx,ecx
c0013642:	f7 da                	neg    edx
c0013644:	c1 e2 15             	shl    edx,0x15
c0013647:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c001364d:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c0013653:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0013657:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c0013661:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c0013667:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001366b:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c0013671:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001367b:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c0013685:	53                   	push   ebx
c0013686:	68 84 61 02 c0       	push   0xc0026184
c001368b:	e8 fc 98 00 00       	call   c001cf8c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0013690:	83 c4 10             	add    esp,0x10
c0013693:	89 d8                	mov    eax,ebx
c0013695:	5b                   	pop    ebx
c0013696:	5e                   	pop    esi
c0013697:	5f                   	pop    edi
c0013698:	c3                   	ret    
c0013699:	90                   	nop
c001369a:	66 90                	xchg   ax,ax

c001369c <Process::createUserThread()>:
c001369c:	83 ec 0c             	sub    esp,0xc
c001369f:	68 80 00 00 00       	push   0x80
c00136a4:	6a 00                	push   0x0
c00136a6:	68 04 30 01 c0       	push   0xc0013004
c00136ab:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00136af:	50                   	push   eax
c00136b0:	e8 ef fe ff ff       	call   c00135a4 <Process::createThread(void (*)(void*), void*, int)>
c00136b5:	83 c4 1c             	add    esp,0x1c
c00136b8:	c3                   	ret    
c00136b9:	8d 76 00             	lea    esi,[esi+0x0]

c00136bc <setupMultitasking(void (*)())>:
c00136bc:	56                   	push   esi
c00136bd:	53                   	push   ebx
c00136be:	53                   	push   ebx
c00136bf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00136c3:	eb 13                	jmp    c00136d8 <setupMultitasking(void (*)())+0x1c>
c00136c5:	8d 76 00             	lea    esi,[esi+0x0]
c00136c8:	83 ec 0c             	sub    esp,0xc
c00136cb:	68 84 61 02 c0       	push   0xc0026184
c00136d0:	e8 ff 97 00 00       	call   c001ced4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00136d5:	83 c4 10             	add    esp,0x10
c00136d8:	83 ec 0c             	sub    esp,0xc
c00136db:	68 84 61 02 c0       	push   0xc0026184
c00136e0:	e8 cb 97 00 00       	call   c001ceb0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00136e5:	83 c4 10             	add    esp,0x10
c00136e8:	84 c0                	test   al,al
c00136ea:	74 dc                	je     c00136c8 <setupMultitasking(void (*)())+0xc>
c00136ec:	83 ec 0c             	sub    esp,0xc
c00136ef:	68 24 07 00 00       	push   0x724
c00136f4:	e8 c0 40 ff ff       	call   c00077b9 <malloc>
c00136f9:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0013700:	89 c3                	mov    ebx,eax
c0013702:	6a 00                	push   0x0
c0013704:	68 ab f2 01 c0       	push   0xc001f2ab
c0013709:	6a 01                	push   0x1
c001370b:	50                   	push   eax
c001370c:	e8 6b fc ff ff       	call   c001337c <Process::Process(bool, char const*, Process*, char**)>
c0013711:	83 c4 14             	add    esp,0x14
c0013714:	8b 83 06 05 00 00    	mov    eax,DWORD PTR [ebx+0x506]
c001371a:	89 1d 90 61 02 c0    	mov    DWORD PTR ds:0xc0026190,ebx
c0013720:	50                   	push   eax
c0013721:	e8 d1 4c ff ff       	call   c00083f7 <setActiveTerminal(VgaText*)>
c0013726:	66 83 8b 04 05 00 00 01 	or     WORD PTR [ebx+0x504],0x1
c001372e:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c0013738:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c001373e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0013741:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c001374b:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0013751:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c0013757:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0013761:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c001376b:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c0013775:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001377b:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0013781:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001378b:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c0013791:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001379b:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c00137a1:	5a                   	pop    edx
c00137a2:	59                   	pop    ecx
c00137a3:	68 a7 f2 01 c0       	push   0xc001f2a7
c00137a8:	50                   	push   eax
c00137a9:	e8 52 ce fe ff       	call   c0000600 <strcpy>
c00137ae:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c00137b5:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c00137b9:	83 c4 14             	add    esp,0x14
c00137bc:	5b                   	pop    ebx
c00137bd:	5e                   	pop    esi
c00137be:	e9 a6 ca fe ff       	jmp    c0000269 <switchToThreadASMFirstTime>
c00137c3:	90                   	nop

c00137c4 <schedule()>:
c00137c4:	8b 15 64 61 02 c0    	mov    edx,DWORD PTR ds:0xc0026164
c00137ca:	85 d2                	test   edx,edx
c00137cc:	74 0e                	je     c00137dc <schedule()+0x18>
c00137ce:	c7 05 60 61 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0026160,0x1
c00137d8:	c3                   	ret    
c00137d9:	8d 76 00             	lea    esi,[esi+0x0]
c00137dc:	53                   	push   ebx
c00137dd:	83 ec 14             	sub    esp,0x14
c00137e0:	68 84 61 02 c0       	push   0xc0026184
c00137e5:	e8 c6 96 00 00       	call   c001ceb0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00137ea:	83 c4 10             	add    esp,0x10
c00137ed:	84 c0                	test   al,al
c00137ef:	75 3b                	jne    c001382c <schedule()+0x68>
c00137f1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00137f6:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00137f9:	4a                   	dec    edx
c00137fa:	74 38                	je     c0013834 <schedule()+0x70>
c00137fc:	83 ec 0c             	sub    esp,0xc
c00137ff:	68 84 61 02 c0       	push   0xc0026184
c0013804:	e8 c3 96 00 00       	call   c001cecc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013809:	c7 04 24 84 61 02 c0 	mov    DWORD PTR [esp],0xc0026184
c0013810:	89 c3                	mov    ebx,eax
c0013812:	e8 bd 96 00 00       	call   c001ced4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0013817:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001381e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013821:	e8 36 f8 ff ff       	call   c001305c <switchToThread(ThreadControlBlock*)>
c0013826:	83 c4 10             	add    esp,0x10
c0013829:	8d 76 00             	lea    esi,[esi+0x0]
c001382c:	83 c4 08             	add    esp,0x8
c001382f:	5b                   	pop    ebx
c0013830:	c3                   	ret    
c0013831:	8d 76 00             	lea    esi,[esi+0x0]
c0013834:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001383b:	83 ec 08             	sub    esp,0x8
c001383e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013843:	50                   	push   eax
c0013844:	68 84 61 02 c0       	push   0xc0026184
c0013849:	e8 3e 97 00 00       	call   c001cf8c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001384e:	83 c4 10             	add    esp,0x10
c0013851:	eb a9                	jmp    c00137fc <schedule()+0x38>
c0013853:	90                   	nop

c0013854 <Semaphore::tryAcquire()>:
c0013854:	53                   	push   ebx
c0013855:	83 ec 08             	sub    esp,0x8
c0013858:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001385c:	fa                   	cli    
c001385d:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c0013862:	8d 50 01             	lea    edx,[eax+0x1]
c0013865:	89 15 68 61 02 c0    	mov    DWORD PTR ds:0xc0026168,edx
c001386b:	8b 15 64 61 02 c0    	mov    edx,DWORD PTR ds:0xc0026164
c0013871:	8d 5a 01             	lea    ebx,[edx+0x1]
c0013874:	89 1d 64 61 02 c0    	mov    DWORD PTR ds:0xc0026164,ebx
c001387a:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c001387d:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c001387f:	7c 33                	jl     c00138b4 <Semaphore::tryAcquire()+0x60>
c0013881:	89 15 64 61 02 c0    	mov    DWORD PTR ds:0xc0026164,edx
c0013887:	85 d2                	test   edx,edx
c0013889:	75 0d                	jne    c0013898 <Semaphore::tryAcquire()+0x44>
c001388b:	8b 15 60 61 02 c0    	mov    edx,DWORD PTR ds:0xc0026160
c0013891:	85 d2                	test   edx,edx
c0013893:	75 6b                	jne    c0013900 <Semaphore::tryAcquire()+0xac>
c0013895:	8d 76 00             	lea    esi,[esi+0x0]
c0013898:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c001389d:	85 c0                	test   eax,eax
c001389f:	74 0b                	je     c00138ac <Semaphore::tryAcquire()+0x58>
c00138a1:	8d 76 00             	lea    esi,[esi+0x0]
c00138a4:	31 c0                	xor    eax,eax
c00138a6:	83 c4 08             	add    esp,0x8
c00138a9:	5b                   	pop    ebx
c00138aa:	c3                   	ret    
c00138ab:	90                   	nop
c00138ac:	fb                   	sti    
c00138ad:	83 c4 08             	add    esp,0x8
c00138b0:	5b                   	pop    ebx
c00138b1:	c3                   	ret    
c00138b2:	66 90                	xchg   ax,ax
c00138b4:	43                   	inc    ebx
c00138b5:	89 15 64 61 02 c0    	mov    DWORD PTR ds:0xc0026164,edx
c00138bb:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c00138be:	85 d2                	test   edx,edx
c00138c0:	75 22                	jne    c00138e4 <Semaphore::tryAcquire()+0x90>
c00138c2:	8b 0d 60 61 02 c0    	mov    ecx,DWORD PTR ds:0xc0026160
c00138c8:	85 c9                	test   ecx,ecx
c00138ca:	74 18                	je     c00138e4 <Semaphore::tryAcquire()+0x90>
c00138cc:	c7 05 60 61 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026160,0x0
c00138d6:	e8 e9 fe ff ff       	call   c00137c4 <schedule()>
c00138db:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c00138e0:	48                   	dec    eax
c00138e1:	8d 76 00             	lea    esi,[esi+0x0]
c00138e4:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c00138e9:	85 c0                	test   eax,eax
c00138eb:	75 0b                	jne    c00138f8 <Semaphore::tryAcquire()+0xa4>
c00138ed:	fb                   	sti    
c00138ee:	b0 01                	mov    al,0x1
c00138f0:	83 c4 08             	add    esp,0x8
c00138f3:	5b                   	pop    ebx
c00138f4:	c3                   	ret    
c00138f5:	8d 76 00             	lea    esi,[esi+0x0]
c00138f8:	b0 01                	mov    al,0x1
c00138fa:	83 c4 08             	add    esp,0x8
c00138fd:	5b                   	pop    ebx
c00138fe:	c3                   	ret    
c00138ff:	90                   	nop
c0013900:	c7 05 60 61 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026160,0x0
c001390a:	e8 b5 fe ff ff       	call   c00137c4 <schedule()>
c001390f:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c0013914:	48                   	dec    eax
c0013915:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c001391a:	85 c0                	test   eax,eax
c001391c:	75 86                	jne    c00138a4 <Semaphore::tryAcquire()+0x50>
c001391e:	eb 8c                	jmp    c00138ac <Semaphore::tryAcquire()+0x58>

c0013920 <Semaphore::assertLocked(char const*)>:
c0013920:	83 ec 0c             	sub    esp,0xc
c0013923:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013927:	fa                   	cli    
c0013928:	ff 05 68 61 02 c0    	inc    DWORD PTR ds:0xc0026168
c001392e:	a1 64 61 02 c0       	mov    eax,ds:0xc0026164
c0013933:	8d 48 01             	lea    ecx,[eax+0x1]
c0013936:	89 0d 64 61 02 c0    	mov    DWORD PTR ds:0xc0026164,ecx
c001393c:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001393e:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c0013941:	7c 29                	jl     c001396c <Semaphore::assertLocked(char const*)+0x4c>
c0013943:	90                   	nop
c0013944:	a3 64 61 02 c0       	mov    ds:0xc0026164,eax
c0013949:	85 c0                	test   eax,eax
c001394b:	75 0b                	jne    c0013958 <Semaphore::assertLocked(char const*)+0x38>
c001394d:	a1 60 61 02 c0       	mov    eax,ds:0xc0026160
c0013952:	85 c0                	test   eax,eax
c0013954:	75 2e                	jne    c0013984 <Semaphore::assertLocked(char const*)+0x64>
c0013956:	66 90                	xchg   ax,ax
c0013958:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c001395d:	48                   	dec    eax
c001395e:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c0013963:	75 03                	jne    c0013968 <Semaphore::assertLocked(char const*)+0x48>
c0013965:	fb                   	sti    
c0013966:	66 90                	xchg   ax,ax
c0013968:	83 c4 0c             	add    esp,0xc
c001396b:	c3                   	ret    
c001396c:	83 ec 0c             	sub    esp,0xc
c001396f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013973:	52                   	push   edx
c0013974:	e8 2e c9 ff ff       	call   c00102a7 <KePanic(char const*)>
c0013979:	a1 64 61 02 c0       	mov    eax,ds:0xc0026164
c001397e:	83 c4 10             	add    esp,0x10
c0013981:	48                   	dec    eax
c0013982:	eb c0                	jmp    c0013944 <Semaphore::assertLocked(char const*)+0x24>
c0013984:	c7 05 60 61 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026160,0x0
c001398e:	e8 31 fe ff ff       	call   c00137c4 <schedule()>
c0013993:	eb c3                	jmp    c0013958 <Semaphore::assertLocked(char const*)+0x38>
c0013995:	8d 76 00             	lea    esi,[esi+0x0]

c0013998 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c0013998:	83 ec 0c             	sub    esp,0xc
c001399b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00139a0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00139a4:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00139a7:	e8 18 fe ff ff       	call   c00137c4 <schedule()>
c00139ac:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c00139b1:	48                   	dec    eax
c00139b2:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c00139b7:	75 03                	jne    c00139bc <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c00139b9:	fb                   	sti    
c00139ba:	66 90                	xchg   ax,ax
c00139bc:	83 c4 0c             	add    esp,0xc
c00139bf:	c3                   	ret    

c00139c0 <blockTask(TaskState)>:
c00139c0:	83 ec 0c             	sub    esp,0xc
c00139c3:	fa                   	cli    
c00139c4:	ff 05 68 61 02 c0    	inc    DWORD PTR ds:0xc0026168
c00139ca:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00139ce:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00139d3:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00139d6:	e8 e9 fd ff ff       	call   c00137c4 <schedule()>
c00139db:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c00139e0:	48                   	dec    eax
c00139e1:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c00139e6:	75 04                	jne    c00139ec <blockTask(TaskState)+0x2c>
c00139e8:	fb                   	sti    
c00139e9:	8d 76 00             	lea    esi,[esi+0x0]
c00139ec:	83 c4 0c             	add    esp,0xc
c00139ef:	c3                   	ret    

c00139f0 <waitTask(int, int*, int)>:
c00139f0:	83 ec 18             	sub    esp,0x18
c00139f3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00139f8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00139fc:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c00139ff:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013a03:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013a08:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c0013a0b:	6a 07                	push   0x7
c0013a0d:	e8 ae ff ff ff       	call   c00139c0 <blockTask(TaskState)>
c0013a12:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013a17:	83 c4 10             	add    esp,0x10
c0013a1a:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c0013a1d:	85 d2                	test   edx,edx
c0013a1f:	74 0b                	je     c0013a2c <waitTask(int, int*, int)+0x3c>
c0013a21:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c0013a24:	89 02                	mov    DWORD PTR [edx],eax
c0013a26:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013a2b:	90                   	nop
c0013a2c:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c0013a2f:	83 c4 0c             	add    esp,0xc
c0013a32:	c3                   	ret    
c0013a33:	90                   	nop

c0013a34 <milliTenthSleepUntil(unsigned int)>:
c0013a34:	83 ec 0c             	sub    esp,0xc
c0013a37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a3b:	39 05 8c 54 02 c0    	cmp    DWORD PTR ds:0xc002548c,eax
c0013a41:	76 05                	jbe    c0013a48 <milliTenthSleepUntil(unsigned int)+0x14>
c0013a43:	90                   	nop
c0013a44:	83 c4 0c             	add    esp,0xc
c0013a47:	c3                   	ret    
c0013a48:	fa                   	cli    
c0013a49:	ff 05 68 61 02 c0    	inc    DWORD PTR ds:0xc0026168
c0013a4f:	83 ec 08             	sub    esp,0x8
c0013a52:	ff 05 64 61 02 c0    	inc    DWORD PTR ds:0xc0026164
c0013a58:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0013a5e:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c0013a61:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0013a67:	52                   	push   edx
c0013a68:	68 78 61 02 c0       	push   0xc0026178
c0013a6d:	e8 1a 95 00 00       	call   c001cf8c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0013a72:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0013a79:	e8 42 ff ff ff       	call   c00139c0 <blockTask(TaskState)>
c0013a7e:	a1 64 61 02 c0       	mov    eax,ds:0xc0026164
c0013a83:	83 c4 10             	add    esp,0x10
c0013a86:	48                   	dec    eax
c0013a87:	a3 64 61 02 c0       	mov    ds:0xc0026164,eax
c0013a8c:	85 c0                	test   eax,eax
c0013a8e:	75 0c                	jne    c0013a9c <milliTenthSleepUntil(unsigned int)+0x68>
c0013a90:	a1 60 61 02 c0       	mov    eax,ds:0xc0026160
c0013a95:	85 c0                	test   eax,eax
c0013a97:	75 17                	jne    c0013ab0 <milliTenthSleepUntil(unsigned int)+0x7c>
c0013a99:	8d 76 00             	lea    esi,[esi+0x0]
c0013a9c:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c0013aa1:	48                   	dec    eax
c0013aa2:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c0013aa7:	75 9b                	jne    c0013a44 <milliTenthSleepUntil(unsigned int)+0x10>
c0013aa9:	fb                   	sti    
c0013aaa:	83 c4 0c             	add    esp,0xc
c0013aad:	c3                   	ret    
c0013aae:	66 90                	xchg   ax,ax
c0013ab0:	c7 05 60 61 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026160,0x0
c0013aba:	e8 05 fd ff ff       	call   c00137c4 <schedule()>
c0013abf:	eb db                	jmp    c0013a9c <milliTenthSleepUntil(unsigned int)+0x68>
c0013ac1:	8d 76 00             	lea    esi,[esi+0x0]

c0013ac4 <milliTenthSleep(unsigned int)>:
c0013ac4:	a1 8c 54 02 c0       	mov    eax,ds:0xc002548c
c0013ac9:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c0013acd:	e9 62 ff ff ff       	jmp    c0013a34 <milliTenthSleepUntil(unsigned int)>
c0013ad2:	66 90                	xchg   ax,ax

c0013ad4 <sleep(unsigned int)>:
c0013ad4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013ad8:	8d 04 80             	lea    eax,[eax+eax*4]
c0013adb:	8d 04 80             	lea    eax,[eax+eax*4]
c0013ade:	8d 04 80             	lea    eax,[eax+eax*4]
c0013ae1:	8d 04 80             	lea    eax,[eax+eax*4]
c0013ae4:	c1 e0 04             	shl    eax,0x4
c0013ae7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013aeb:	eb d7                	jmp    c0013ac4 <milliTenthSleep(unsigned int)>
c0013aed:	90                   	nop
c0013aee:	66 90                	xchg   ax,ax

c0013af0 <Semaphore::acquire()>:
c0013af0:	83 ec 0c             	sub    esp,0xc
c0013af3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013af7:	fa                   	cli    
c0013af8:	a1 64 61 02 c0       	mov    eax,ds:0xc0026164
c0013afd:	ff 05 68 61 02 c0    	inc    DWORD PTR ds:0xc0026168
c0013b03:	8d 48 01             	lea    ecx,[eax+0x1]
c0013b06:	89 0d 64 61 02 c0    	mov    DWORD PTR ds:0xc0026164,ecx
c0013b0c:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0013b0f:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c0013b11:	7d 2d                	jge    c0013b40 <Semaphore::acquire()+0x50>
c0013b13:	41                   	inc    ecx
c0013b14:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c0013b17:	90                   	nop
c0013b18:	a3 64 61 02 c0       	mov    ds:0xc0026164,eax
c0013b1d:	85 c0                	test   eax,eax
c0013b1f:	75 0b                	jne    c0013b2c <Semaphore::acquire()+0x3c>
c0013b21:	a1 60 61 02 c0       	mov    eax,ds:0xc0026160
c0013b26:	85 c0                	test   eax,eax
c0013b28:	75 62                	jne    c0013b8c <Semaphore::acquire()+0x9c>
c0013b2a:	66 90                	xchg   ax,ax
c0013b2c:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c0013b31:	48                   	dec    eax
c0013b32:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c0013b37:	75 03                	jne    c0013b3c <Semaphore::acquire()+0x4c>
c0013b39:	fb                   	sti    
c0013b3a:	66 90                	xchg   ax,ax
c0013b3c:	83 c4 0c             	add    esp,0xc
c0013b3f:	c3                   	ret    
c0013b40:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013b45:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0013b4c:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0013b4f:	85 c9                	test   ecx,ecx
c0013b51:	74 4d                	je     c0013ba0 <Semaphore::acquire()+0xb0>
c0013b53:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c0013b56:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0013b5c:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c0013b5f:	90                   	nop
c0013b60:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013b65:	83 ec 0c             	sub    esp,0xc
c0013b68:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0013b6b:	68 28 f3 01 c0       	push   0xc001f328
c0013b70:	e8 dd 69 ff ff       	call   c000a552 <Dbg::kprintf(char const*, ...)>
c0013b75:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c0013b7c:	e8 3f fe ff ff       	call   c00139c0 <blockTask(TaskState)>
c0013b81:	a1 64 61 02 c0       	mov    eax,ds:0xc0026164
c0013b86:	83 c4 10             	add    esp,0x10
c0013b89:	48                   	dec    eax
c0013b8a:	eb 8c                	jmp    c0013b18 <Semaphore::acquire()+0x28>
c0013b8c:	c7 05 60 61 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026160,0x0
c0013b96:	e8 29 fc ff ff       	call   c00137c4 <schedule()>
c0013b9b:	eb 8f                	jmp    c0013b2c <Semaphore::acquire()+0x3c>
c0013b9d:	8d 76 00             	lea    esi,[esi+0x0]
c0013ba0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013ba5:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0013ba8:	eb b6                	jmp    c0013b60 <Semaphore::acquire()+0x70>
c0013baa:	66 90                	xchg   ax,ax

c0013bac <taskReturned>:
c0013bac:	83 ec 18             	sub    esp,0x18
c0013baf:	68 48 f3 01 c0       	push   0xc001f348
c0013bb4:	e8 ee c6 ff ff       	call   c00102a7 <KePanic(char const*)>
c0013bb9:	83 c4 10             	add    esp,0x10
c0013bbc:	83 ec 0c             	sub    esp,0xc
c0013bbf:	6a 02                	push   0x2
c0013bc1:	e8 fa fd ff ff       	call   c00139c0 <blockTask(TaskState)>
c0013bc6:	fa                   	cli    
c0013bc7:	ff 05 68 61 02 c0    	inc    DWORD PTR ds:0xc0026168
c0013bcd:	e8 f2 fb ff ff       	call   c00137c4 <schedule()>
c0013bd2:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c0013bd7:	83 c4 10             	add    esp,0x10
c0013bda:	48                   	dec    eax
c0013bdb:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c0013be0:	85 c0                	test   eax,eax
c0013be2:	75 d8                	jne    c0013bbc <taskReturned+0x10>
c0013be4:	fb                   	sti    
c0013be5:	eb d5                	jmp    c0013bbc <taskReturned+0x10>
c0013be7:	90                   	nop

c0013be8 <Thr::processFromPID(int)>:
c0013be8:	57                   	push   edi
c0013be9:	56                   	push   esi
c0013bea:	53                   	push   ebx
c0013beb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013bef:	fa                   	cli    
c0013bf0:	ff 05 68 61 02 c0    	inc    DWORD PTR ds:0xc0026168
c0013bf6:	83 ec 0c             	sub    esp,0xc
c0013bf9:	68 84 61 02 c0       	push   0xc0026184
c0013bfe:	e8 c9 92 00 00       	call   c001cecc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013c03:	83 c4 10             	add    esp,0x10
c0013c06:	89 c7                	mov    edi,eax
c0013c08:	eb 16                	jmp    c0013c20 <Thr::processFromPID(int)+0x38>
c0013c0a:	66 90                	xchg   ax,ax
c0013c0c:	83 ec 0c             	sub    esp,0xc
c0013c0f:	68 84 61 02 c0       	push   0xc0026184
c0013c14:	e8 b3 92 00 00       	call   c001cecc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013c19:	83 c4 10             	add    esp,0x10
c0013c1c:	39 f8                	cmp    eax,edi
c0013c1e:	74 4c                	je     c0013c6c <Thr::processFromPID(int)+0x84>
c0013c20:	83 ec 0c             	sub    esp,0xc
c0013c23:	68 84 61 02 c0       	push   0xc0026184
c0013c28:	e8 9f 92 00 00       	call   c001cecc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013c2d:	c7 04 24 84 61 02 c0 	mov    DWORD PTR [esp],0xc0026184
c0013c34:	89 c3                	mov    ebx,eax
c0013c36:	e8 99 92 00 00       	call   c001ced4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0013c3b:	58                   	pop    eax
c0013c3c:	5a                   	pop    edx
c0013c3d:	53                   	push   ebx
c0013c3e:	68 84 61 02 c0       	push   0xc0026184
c0013c43:	e8 44 93 00 00       	call   c001cf8c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0013c48:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013c4b:	83 c4 10             	add    esp,0x10
c0013c4e:	39 30                	cmp    DWORD PTR [eax],esi
c0013c50:	75 ba                	jne    c0013c0c <Thr::processFromPID(int)+0x24>
c0013c52:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c0013c57:	48                   	dec    eax
c0013c58:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c0013c5d:	74 09                	je     c0013c68 <Thr::processFromPID(int)+0x80>
c0013c5f:	90                   	nop
c0013c60:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013c63:	5b                   	pop    ebx
c0013c64:	5e                   	pop    esi
c0013c65:	5f                   	pop    edi
c0013c66:	c3                   	ret    
c0013c67:	90                   	nop
c0013c68:	fb                   	sti    
c0013c69:	eb f5                	jmp    c0013c60 <Thr::processFromPID(int)+0x78>
c0013c6b:	90                   	nop
c0013c6c:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c0013c71:	48                   	dec    eax
c0013c72:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c0013c77:	75 07                	jne    c0013c80 <Thr::processFromPID(int)+0x98>
c0013c79:	fb                   	sti    
c0013c7a:	5b                   	pop    ebx
c0013c7b:	5e                   	pop    esi
c0013c7c:	5f                   	pop    edi
c0013c7d:	c3                   	ret    
c0013c7e:	66 90                	xchg   ax,ax
c0013c80:	5b                   	pop    ebx
c0013c81:	31 c0                	xor    eax,eax
c0013c83:	5e                   	pop    esi
c0013c84:	5f                   	pop    edi
c0013c85:	c3                   	ret    
c0013c86:	66 90                	xchg   ax,ax

c0013c88 <unblockTask(ThreadControlBlock*)>:
c0013c88:	53                   	push   ebx
c0013c89:	83 ec 08             	sub    esp,0x8
c0013c8c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013c90:	fa                   	cli    
c0013c91:	ff 05 68 61 02 c0    	inc    DWORD PTR ds:0xc0026168
c0013c97:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0013c9a:	85 c0                	test   eax,eax
c0013c9c:	74 66                	je     c0013d04 <unblockTask(ThreadControlBlock*)+0x7c>
c0013c9e:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0013ca1:	48                   	dec    eax
c0013ca2:	74 38                	je     c0013cdc <unblockTask(ThreadControlBlock*)+0x54>
c0013ca4:	83 ec 0c             	sub    esp,0xc
c0013ca7:	68 84 61 02 c0       	push   0xc0026184
c0013cac:	e8 1b 92 00 00       	call   c001cecc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013cb1:	83 c4 10             	add    esp,0x10
c0013cb4:	85 c0                	test   eax,eax
c0013cb6:	75 1c                	jne    c0013cd4 <unblockTask(ThreadControlBlock*)+0x4c>
c0013cb8:	eb 5e                	jmp    c0013d18 <unblockTask(ThreadControlBlock*)+0x90>
c0013cba:	66 90                	xchg   ax,ax
c0013cbc:	83 ec 08             	sub    esp,0x8
c0013cbf:	50                   	push   eax
c0013cc0:	68 84 61 02 c0       	push   0xc0026184
c0013cc5:	e8 b2 95 00 00       	call   c001d27c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0013cca:	83 c4 10             	add    esp,0x10
c0013ccd:	85 c0                	test   eax,eax
c0013ccf:	74 47                	je     c0013d18 <unblockTask(ThreadControlBlock*)+0x90>
c0013cd1:	8d 76 00             	lea    esi,[esi+0x0]
c0013cd4:	39 c3                	cmp    ebx,eax
c0013cd6:	75 e4                	jne    c0013cbc <unblockTask(ThreadControlBlock*)+0x34>
c0013cd8:	eb 12                	jmp    c0013cec <unblockTask(ThreadControlBlock*)+0x64>
c0013cda:	66 90                	xchg   ax,ax
c0013cdc:	83 ec 0c             	sub    esp,0xc
c0013cdf:	68 c9 f2 01 c0       	push   0xc001f2c9
c0013ce4:	e8 69 68 ff ff       	call   c000a552 <Dbg::kprintf(char const*, ...)>
c0013ce9:	83 c4 10             	add    esp,0x10
c0013cec:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c0013cf1:	48                   	dec    eax
c0013cf2:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c0013cf7:	75 03                	jne    c0013cfc <unblockTask(ThreadControlBlock*)+0x74>
c0013cf9:	fb                   	sti    
c0013cfa:	66 90                	xchg   ax,ax
c0013cfc:	83 c4 08             	add    esp,0x8
c0013cff:	5b                   	pop    ebx
c0013d00:	c3                   	ret    
c0013d01:	8d 76 00             	lea    esi,[esi+0x0]
c0013d04:	83 ec 0c             	sub    esp,0xc
c0013d07:	68 b2 f2 01 c0       	push   0xc001f2b2
c0013d0c:	e8 41 68 ff ff       	call   c000a552 <Dbg::kprintf(char const*, ...)>
c0013d11:	83 c4 10             	add    esp,0x10
c0013d14:	eb d6                	jmp    c0013cec <unblockTask(ThreadControlBlock*)+0x64>
c0013d16:	66 90                	xchg   ax,ax
c0013d18:	83 ec 08             	sub    esp,0x8
c0013d1b:	53                   	push   ebx
c0013d1c:	68 84 61 02 c0       	push   0xc0026184
c0013d21:	e8 66 92 00 00       	call   c001cf8c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0013d26:	83 c4 10             	add    esp,0x10
c0013d29:	eb c1                	jmp    c0013cec <unblockTask(ThreadControlBlock*)+0x64>
c0013d2b:	90                   	nop

c0013d2c <cleanupTerminatedTask(ThreadControlBlock*)>:
c0013d2c:	55                   	push   ebp
c0013d2d:	57                   	push   edi
c0013d2e:	56                   	push   esi
c0013d2f:	53                   	push   ebx
c0013d30:	83 ec 1c             	sub    esp,0x1c
c0013d33:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0013d37:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013d3a:	8b a8 16 05 00 00    	mov    ebp,DWORD PTR [eax+0x516]
c0013d40:	85 ed                	test   ebp,ebp
c0013d42:	7e 24                	jle    c0013d68 <cleanupTerminatedTask(ThreadControlBlock*)+0x3c>
c0013d44:	31 f6                	xor    esi,esi
c0013d46:	66 90                	xchg   ax,ax
c0013d48:	83 ec 0c             	sub    esp,0xc
c0013d4b:	8b bc b0 1a 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x51a]
c0013d52:	46                   	inc    esi
c0013d53:	57                   	push   edi
c0013d54:	e8 70 3a ff ff       	call   c00077c9 <free>
c0013d59:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013d5c:	83 c4 10             	add    esp,0x10
c0013d5f:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c0013d65:	7f e1                	jg     c0013d48 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c0013d67:	90                   	nop
c0013d68:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0013d72:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0013d77:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0013d7a:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0013d7d:	d3 c0                	rol    eax,cl
c0013d7f:	66 21 82 04 05 00 00 	and    WORD PTR [edx+0x504],ax
c0013d86:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0013d89:	89 f7                	mov    edi,esi
c0013d8b:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c0013d93:	0f 85 77 01 00 00    	jne    c0013f10 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e4>
c0013d99:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c0013d9f:	85 ed                	test   ebp,ebp
c0013da1:	74 1d                	je     c0013dc0 <cleanupTerminatedTask(ThreadControlBlock*)+0x94>
c0013da3:	83 ec 0c             	sub    esp,0xc
c0013da6:	55                   	push   ebp
c0013da7:	e8 0c c2 ff ff       	call   c000ffb8 <EnvVarContainer::~EnvVarContainer()>
c0013dac:	59                   	pop    ecx
c0013dad:	5e                   	pop    esi
c0013dae:	6a 0c                	push   0xc
c0013db0:	55                   	push   ebp
c0013db1:	e8 a6 66 ff ff       	call   c000a45c <operator delete(void*, unsigned long)>
c0013db6:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0013db9:	83 c4 10             	add    esp,0x10
c0013dbc:	89 f7                	mov    edi,esi
c0013dbe:	66 90                	xchg   ax,ax
c0013dc0:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0013dc6:	85 c0                	test   eax,eax
c0013dc8:	0f 84 b6 00 00 00    	je     c0013e84 <cleanupTerminatedTask(ThreadControlBlock*)+0x158>
c0013dce:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c0013dd1:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0013dd5:	31 c9                	xor    ecx,ecx
c0013dd7:	eb 17                	jmp    c0013df0 <cleanupTerminatedTask(ThreadControlBlock*)+0xc4>
c0013dd9:	8d 76 00             	lea    esi,[esi+0x0]
c0013ddc:	41                   	inc    ecx
c0013ddd:	83 f9 10             	cmp    ecx,0x10
c0013de0:	0f 84 9e 00 00 00    	je     c0013e84 <cleanupTerminatedTask(ThreadControlBlock*)+0x158>
c0013de6:	66 90                	xchg   ax,ax
c0013de8:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0013dee:	66 90                	xchg   ax,ax
c0013df0:	31 d2                	xor    edx,edx
c0013df2:	66 8b 90 04 05 00 00 	mov    dx,WORD PTR [eax+0x504]
c0013df9:	d3 fa                	sar    edx,cl
c0013dfb:	83 e2 01             	and    edx,0x1
c0013dfe:	74 dc                	je     c0013ddc <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0013e00:	8d 14 c9             	lea    edx,[ecx+ecx*8]
c0013e03:	01 d2                	add    edx,edx
c0013e05:	01 ca                	add    edx,ecx
c0013e07:	8d 14 92             	lea    edx,[edx+edx*4]
c0013e0a:	01 d0                	add    eax,edx
c0013e0c:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c0013e12:	83 fd 07             	cmp    ebp,0x7
c0013e15:	75 c5                	jne    c0013ddc <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0013e17:	05 40 02 00 00       	add    eax,0x240
c0013e1c:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c0013e1f:	83 fd ff             	cmp    ebp,0xffffffff
c0013e22:	0f 8c f0 00 00 00    	jl     c0013f18 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c0013e28:	0f 84 ae 01 00 00    	je     c0013fdc <cleanupTerminatedTask(ThreadControlBlock*)+0x2b0>
c0013e2e:	85 ed                	test   ebp,ebp
c0013e30:	0f 84 92 01 00 00    	je     c0013fc8 <cleanupTerminatedTask(ThreadControlBlock*)+0x29c>
c0013e36:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c0013e38:	75 a2                	jne    c0013ddc <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0013e3a:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0013e40:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013e44:	01 d0                	add    eax,edx
c0013e46:	66 90                	xchg   ax,ax
c0013e48:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0013e4c:	83 ec 0c             	sub    esp,0xc
c0013e4f:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c0013e55:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013e58:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0013e5e:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c0013e65:	50                   	push   eax
c0013e66:	e8 1d fe ff ff       	call   c0013c88 <unblockTask(ThreadControlBlock*)>
c0013e6b:	83 c4 10             	add    esp,0x10
c0013e6e:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0013e71:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0013e75:	89 f7                	mov    edi,esi
c0013e77:	41                   	inc    ecx
c0013e78:	83 f9 10             	cmp    ecx,0x10
c0013e7b:	0f 85 67 ff ff ff    	jne    c0013de8 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0013e81:	8d 76 00             	lea    esi,[esi+0x0]
c0013e84:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c0013e8a:	85 c0                	test   eax,eax
c0013e8c:	74 62                	je     c0013ef0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c4>
c0013e8e:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c0013e94:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c0013e9a:	74 54                	je     c0013ef0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c4>
c0013e9c:	83 ec 0c             	sub    esp,0xc
c0013e9f:	68 84 61 02 c0       	push   0xc0026184
c0013ea4:	e8 23 90 00 00       	call   c001cecc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013ea9:	c7 04 24 84 61 02 c0 	mov    DWORD PTR [esp],0xc0026184
c0013eb0:	89 c7                	mov    edi,eax
c0013eb2:	e8 f9 8f 00 00       	call   c001ceb0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0013eb7:	83 c4 10             	add    esp,0x10
c0013eba:	84 c0                	test   al,al
c0013ebc:	0f 84 ce 00 00 00    	je     c0013f90 <cleanupTerminatedTask(ThreadControlBlock*)+0x264>
c0013ec2:	66 90                	xchg   ax,ax
c0013ec4:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013ec7:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0013ecd:	85 d2                	test   edx,edx
c0013ecf:	74 0f                	je     c0013ee0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1b4>
c0013ed1:	83 ec 0c             	sub    esp,0xc
c0013ed4:	8b 02                	mov    eax,DWORD PTR [edx]
c0013ed6:	52                   	push   edx
c0013ed7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013eda:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013edd:	83 c4 10             	add    esp,0x10
c0013ee0:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c0013eea:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c0013eed:	8d 76 00             	lea    esi,[esi+0x0]
c0013ef0:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c0013ef6:	85 db                	test   ebx,ebx
c0013ef8:	74 16                	je     c0013f10 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e4>
c0013efa:	83 ec 0c             	sub    esp,0xc
c0013efd:	53                   	push   ebx
c0013efe:	e8 f1 58 ff ff       	call   c00097f4 <VAS::~VAS()>
c0013f03:	58                   	pop    eax
c0013f04:	5a                   	pop    edx
c0013f05:	6a 14                	push   0x14
c0013f07:	53                   	push   ebx
c0013f08:	e8 4f 65 ff ff       	call   c000a45c <operator delete(void*, unsigned long)>
c0013f0d:	83 c4 10             	add    esp,0x10
c0013f10:	83 c4 1c             	add    esp,0x1c
c0013f13:	5b                   	pop    ebx
c0013f14:	5e                   	pop    esi
c0013f15:	5f                   	pop    edi
c0013f16:	5d                   	pop    ebp
c0013f17:	c3                   	ret    
c0013f18:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013f1c:	83 ec 0c             	sub    esp,0xc
c0013f1f:	68 7c f3 01 c0       	push   0xc001f37c
c0013f24:	e8 7e c3 ff ff       	call   c00102a7 <KePanic(char const*)>
c0013f29:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0013f2c:	83 c4 10             	add    esp,0x10
c0013f2f:	89 f7                	mov    edi,esi
c0013f31:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0013f35:	e9 a2 fe ff ff       	jmp    c0013ddc <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0013f3a:	66 90                	xchg   ax,ax
c0013f3c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0013f42:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c0013f48:	75 1e                	jne    c0013f68 <cleanupTerminatedTask(ThreadControlBlock*)+0x23c>
c0013f4a:	83 ec 0c             	sub    esp,0xc
c0013f4d:	68 e4 f3 01 c0       	push   0xc001f3e4
c0013f52:	e8 fb 65 ff ff       	call   c000a552 <Dbg::kprintf(char const*, ...)>
c0013f57:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0013f5e:	e8 5d fa ff ff       	call   c00139c0 <blockTask(TaskState)>
c0013f63:	83 c4 10             	add    esp,0x10
c0013f66:	66 90                	xchg   ax,ax
c0013f68:	83 ec 08             	sub    esp,0x8
c0013f6b:	56                   	push   esi
c0013f6c:	68 84 61 02 c0       	push   0xc0026184
c0013f71:	e8 16 90 00 00       	call   c001cf8c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0013f76:	c7 04 24 84 61 02 c0 	mov    DWORD PTR [esp],0xc0026184
c0013f7d:	e8 4a 8f 00 00       	call   c001cecc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013f82:	83 c4 10             	add    esp,0x10
c0013f85:	39 f8                	cmp    eax,edi
c0013f87:	0f 84 37 ff ff ff    	je     c0013ec4 <cleanupTerminatedTask(ThreadControlBlock*)+0x198>
c0013f8d:	8d 76 00             	lea    esi,[esi+0x0]
c0013f90:	83 ec 0c             	sub    esp,0xc
c0013f93:	68 84 61 02 c0       	push   0xc0026184
c0013f98:	e8 2f 8f 00 00       	call   c001cecc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013f9d:	c7 04 24 84 61 02 c0 	mov    DWORD PTR [esp],0xc0026184
c0013fa4:	89 c6                	mov    esi,eax
c0013fa6:	e8 29 8f 00 00       	call   c001ced4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0013fab:	83 c4 10             	add    esp,0x10
c0013fae:	39 f3                	cmp    ebx,esi
c0013fb0:	74 b6                	je     c0013f68 <cleanupTerminatedTask(ThreadControlBlock*)+0x23c>
c0013fb2:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c0013fb5:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013fb8:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c0013fbe:	75 a8                	jne    c0013f68 <cleanupTerminatedTask(ThreadControlBlock*)+0x23c>
c0013fc0:	e9 77 ff ff ff       	jmp    c0013f3c <cleanupTerminatedTask(ThreadControlBlock*)+0x210>
c0013fc5:	8d 76 00             	lea    esi,[esi+0x0]
c0013fc8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013fcc:	83 ec 0c             	sub    esp,0xc
c0013fcf:	68 b0 f3 01 c0       	push   0xc001f3b0
c0013fd4:	e9 4b ff ff ff       	jmp    c0013f24 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f8>
c0013fd9:	8d 76 00             	lea    esi,[esi+0x0]
c0013fdc:	8b 36                	mov    esi,DWORD PTR [esi]
c0013fde:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013fe2:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c0013fe5:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013fe8:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c0013fee:	01 d7                	add    edi,edx
c0013ff0:	89 f8                	mov    eax,edi
c0013ff2:	e9 51 fe ff ff       	jmp    c0013e48 <cleanupTerminatedTask(ThreadControlBlock*)+0x11c>
c0013ff7:	90                   	nop

c0013ff8 <cleanerTaskFunction(void*)>:
c0013ff8:	53                   	push   ebx
c0013ff9:	83 ec 08             	sub    esp,0x8
c0013ffc:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c0014001:	48                   	dec    eax
c0014002:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c0014007:	75 03                	jne    c001400c <cleanerTaskFunction(void*)+0x14>
c0014009:	fb                   	sti    
c001400a:	66 90                	xchg   ax,ax
c001400c:	fa                   	cli    
c001400d:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c0014012:	80 3d 4c 61 02 c0 00 	cmp    BYTE PTR ds:0xc002614c,0x0
c0014019:	8d 50 01             	lea    edx,[eax+0x1]
c001401c:	89 15 68 61 02 c0    	mov    DWORD PTR ds:0xc0026168,edx
c0014022:	0f 84 ac 00 00 00    	je     c00140d4 <cleanerTaskFunction(void*)+0xdc>
c0014028:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c001402d:	85 c0                	test   eax,eax
c001402f:	75 03                	jne    c0014034 <cleanerTaskFunction(void*)+0x3c>
c0014031:	fb                   	sti    
c0014032:	66 90                	xchg   ax,ax
c0014034:	c6 05 4c 61 02 c0 00 	mov    BYTE PTR ds:0xc002614c,0x0
c001403b:	fa                   	cli    
c001403c:	ff 05 68 61 02 c0    	inc    DWORD PTR ds:0xc0026168
c0014042:	ff 05 64 61 02 c0    	inc    DWORD PTR ds:0xc0026164
c0014048:	fa                   	cli    
c0014049:	ff 05 68 61 02 c0    	inc    DWORD PTR ds:0xc0026168
c001404f:	eb 2b                	jmp    c001407c <cleanerTaskFunction(void*)+0x84>
c0014051:	8d 76 00             	lea    esi,[esi+0x0]
c0014054:	83 ec 0c             	sub    esp,0xc
c0014057:	68 6c 61 02 c0       	push   0xc002616c
c001405c:	e8 6b 8e 00 00       	call   c001cecc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0014061:	c7 04 24 6c 61 02 c0 	mov    DWORD PTR [esp],0xc002616c
c0014068:	89 c3                	mov    ebx,eax
c001406a:	e8 65 8e 00 00       	call   c001ced4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001406f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014072:	e8 b5 fc ff ff       	call   c0013d2c <cleanupTerminatedTask(ThreadControlBlock*)>
c0014077:	83 c4 10             	add    esp,0x10
c001407a:	66 90                	xchg   ax,ax
c001407c:	83 ec 0c             	sub    esp,0xc
c001407f:	68 6c 61 02 c0       	push   0xc002616c
c0014084:	e8 27 8e 00 00       	call   c001ceb0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0014089:	83 c4 10             	add    esp,0x10
c001408c:	84 c0                	test   al,al
c001408e:	74 c4                	je     c0014054 <cleanerTaskFunction(void*)+0x5c>
c0014090:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c0014095:	48                   	dec    eax
c0014096:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c001409b:	75 03                	jne    c00140a0 <cleanerTaskFunction(void*)+0xa8>
c001409d:	fb                   	sti    
c001409e:	66 90                	xchg   ax,ax
c00140a0:	a1 64 61 02 c0       	mov    eax,ds:0xc0026164
c00140a5:	48                   	dec    eax
c00140a6:	a3 64 61 02 c0       	mov    ds:0xc0026164,eax
c00140ab:	0f 85 4b ff ff ff    	jne    c0013ffc <cleanerTaskFunction(void*)+0x4>
c00140b1:	a1 60 61 02 c0       	mov    eax,ds:0xc0026160
c00140b6:	85 c0                	test   eax,eax
c00140b8:	0f 84 3e ff ff ff    	je     c0013ffc <cleanerTaskFunction(void*)+0x4>
c00140be:	c7 05 60 61 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026160,0x0
c00140c8:	e8 f7 f6 ff ff       	call   c00137c4 <schedule()>
c00140cd:	e9 2a ff ff ff       	jmp    c0013ffc <cleanerTaskFunction(void*)+0x4>
c00140d2:	66 90                	xchg   ax,ax
c00140d4:	83 ec 0c             	sub    esp,0xc
c00140d7:	6a 02                	push   0x2
c00140d9:	e8 ba f8 ff ff       	call   c0013998 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c00140de:	83 c4 10             	add    esp,0x10
c00140e1:	e9 4e ff ff ff       	jmp    c0014034 <cleanerTaskFunction(void*)+0x3c>
c00140e6:	66 90                	xchg   ax,ax

c00140e8 <terminateTask(int)>:
c00140e8:	83 ec 14             	sub    esp,0x14
c00140eb:	fa                   	cli    
c00140ec:	ff 05 68 61 02 c0    	inc    DWORD PTR ds:0xc0026168
c00140f2:	ff 05 64 61 02 c0    	inc    DWORD PTR ds:0xc0026164
c00140f8:	fa                   	cli    
c00140f9:	ff 05 68 61 02 c0    	inc    DWORD PTR ds:0xc0026168
c00140ff:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014103:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014108:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c001410b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014110:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0014113:	50                   	push   eax
c0014114:	68 6c 61 02 c0       	push   0xc002616c
c0014119:	e8 6e 8e 00 00       	call   c001cf8c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001411e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014123:	83 c4 10             	add    esp,0x10
c0014126:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001412d:	a1 48 61 02 c0       	mov    eax,ds:0xc0026148
c0014132:	85 c0                	test   eax,eax
c0014134:	74 5e                	je     c0014194 <terminateTask(int)+0xac>
c0014136:	83 ec 0c             	sub    esp,0xc
c0014139:	c6 05 4c 61 02 c0 01 	mov    BYTE PTR ds:0xc002614c,0x1
c0014140:	50                   	push   eax
c0014141:	e8 42 fb ff ff       	call   c0013c88 <unblockTask(ThreadControlBlock*)>
c0014146:	83 c4 10             	add    esp,0x10
c0014149:	8d 76 00             	lea    esi,[esi+0x0]
c001414c:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c0014151:	48                   	dec    eax
c0014152:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c0014157:	75 03                	jne    c001415c <terminateTask(int)+0x74>
c0014159:	fb                   	sti    
c001415a:	66 90                	xchg   ax,ax
c001415c:	a1 64 61 02 c0       	mov    eax,ds:0xc0026164
c0014161:	48                   	dec    eax
c0014162:	a3 64 61 02 c0       	mov    ds:0xc0026164,eax
c0014167:	75 0b                	jne    c0014174 <terminateTask(int)+0x8c>
c0014169:	83 3d 60 61 02 c0 00 	cmp    DWORD PTR ds:0xc0026160,0x0
c0014170:	75 36                	jne    c00141a8 <terminateTask(int)+0xc0>
c0014172:	66 90                	xchg   ax,ax
c0014174:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c0014179:	48                   	dec    eax
c001417a:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c001417f:	75 03                	jne    c0014184 <terminateTask(int)+0x9c>
c0014181:	fb                   	sti    
c0014182:	66 90                	xchg   ax,ax
c0014184:	fa                   	cli    
c0014185:	ff 05 68 61 02 c0    	inc    DWORD PTR ds:0xc0026168
c001418b:	90                   	nop
c001418c:	e8 33 f6 ff ff       	call   c00137c4 <schedule()>
c0014191:	eb e1                	jmp    c0014174 <terminateTask(int)+0x8c>
c0014193:	90                   	nop
c0014194:	83 ec 0c             	sub    esp,0xc
c0014197:	68 e0 f2 01 c0       	push   0xc001f2e0
c001419c:	e8 b1 63 ff ff       	call   c000a552 <Dbg::kprintf(char const*, ...)>
c00141a1:	83 c4 10             	add    esp,0x10
c00141a4:	eb a6                	jmp    c001414c <terminateTask(int)+0x64>
c00141a6:	66 90                	xchg   ax,ax
c00141a8:	c7 05 60 61 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026160,0x0
c00141b2:	eb d8                	jmp    c001418c <terminateTask(int)+0xa4>

c00141b4 <Thr::terminateFromIRQ(int)>:
c00141b4:	83 ec 18             	sub    esp,0x18
c00141b7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00141bb:	50                   	push   eax
c00141bc:	e8 27 ff ff ff       	call   c00140e8 <terminateTask(int)>
c00141c1:	90                   	nop
c00141c2:	66 90                	xchg   ax,ax

c00141c4 <Semaphore::release()>:
c00141c4:	83 ec 0c             	sub    esp,0xc
c00141c7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00141cb:	fa                   	cli    
c00141cc:	a1 64 61 02 c0       	mov    eax,ds:0xc0026164
c00141d1:	ff 05 68 61 02 c0    	inc    DWORD PTR ds:0xc0026168
c00141d7:	8d 48 01             	lea    ecx,[eax+0x1]
c00141da:	89 0d 64 61 02 c0    	mov    DWORD PTR ds:0xc0026164,ecx
c00141e0:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00141e3:	85 c9                	test   ecx,ecx
c00141e5:	74 41                	je     c0014228 <Semaphore::release()+0x64>
c00141e7:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c00141ea:	83 ec 0c             	sub    esp,0xc
c00141ed:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00141f0:	51                   	push   ecx
c00141f1:	e8 92 fa ff ff       	call   c0013c88 <unblockTask(ThreadControlBlock*)>
c00141f6:	a1 64 61 02 c0       	mov    eax,ds:0xc0026164
c00141fb:	83 c4 10             	add    esp,0x10
c00141fe:	48                   	dec    eax
c00141ff:	90                   	nop
c0014200:	a3 64 61 02 c0       	mov    ds:0xc0026164,eax
c0014205:	85 c0                	test   eax,eax
c0014207:	75 0b                	jne    c0014214 <Semaphore::release()+0x50>
c0014209:	a1 60 61 02 c0       	mov    eax,ds:0xc0026160
c001420e:	85 c0                	test   eax,eax
c0014210:	75 1e                	jne    c0014230 <Semaphore::release()+0x6c>
c0014212:	66 90                	xchg   ax,ax
c0014214:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c0014219:	48                   	dec    eax
c001421a:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c001421f:	75 03                	jne    c0014224 <Semaphore::release()+0x60>
c0014221:	fb                   	sti    
c0014222:	66 90                	xchg   ax,ax
c0014224:	83 c4 0c             	add    esp,0xc
c0014227:	c3                   	ret    
c0014228:	ff 4a 0c             	dec    DWORD PTR [edx+0xc]
c001422b:	eb d3                	jmp    c0014200 <Semaphore::release()+0x3c>
c001422d:	8d 76 00             	lea    esi,[esi+0x0]
c0014230:	c7 05 60 61 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026160,0x0
c001423a:	e8 85 f5 ff ff       	call   c00137c4 <schedule()>
c001423f:	eb d3                	jmp    c0014214 <Semaphore::release()+0x50>
c0014241:	8d 76 00             	lea    esi,[esi+0x0]

c0014244 <__static_initialization_and_destruction_0(int, int)>:
c0014244:	83 ec 0c             	sub    esp,0xc
c0014247:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001424c:	0f 85 8e 00 00 00    	jne    c00142e0 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0014252:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001425a:	0f 85 80 00 00 00    	jne    c00142e0 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0014260:	83 ec 0c             	sub    esp,0xc
c0014263:	68 84 61 02 c0       	push   0xc0026184
c0014268:	e8 cb 8f 00 00       	call   c001d238 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001426d:	83 c4 10             	add    esp,0x10
c0014270:	83 ec 04             	sub    esp,0x4
c0014273:	68 a4 fe 01 c0       	push   0xc001fea4
c0014278:	68 84 61 02 c0       	push   0xc0026184
c001427d:	68 e8 d1 01 c0       	push   0xc001d1e8
c0014282:	e8 85 61 ff ff       	call   c000a40c <__cxa_atexit>
c0014287:	83 c4 10             	add    esp,0x10
c001428a:	83 ec 0c             	sub    esp,0xc
c001428d:	68 78 61 02 c0       	push   0xc0026178
c0014292:	e8 a1 8f 00 00       	call   c001d238 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0014297:	83 c4 10             	add    esp,0x10
c001429a:	83 ec 04             	sub    esp,0x4
c001429d:	68 a4 fe 01 c0       	push   0xc001fea4
c00142a2:	68 78 61 02 c0       	push   0xc0026178
c00142a7:	68 e8 d1 01 c0       	push   0xc001d1e8
c00142ac:	e8 5b 61 ff ff       	call   c000a40c <__cxa_atexit>
c00142b1:	83 c4 10             	add    esp,0x10
c00142b4:	83 ec 0c             	sub    esp,0xc
c00142b7:	68 6c 61 02 c0       	push   0xc002616c
c00142bc:	e8 77 8f 00 00       	call   c001d238 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00142c1:	83 c4 10             	add    esp,0x10
c00142c4:	83 ec 04             	sub    esp,0x4
c00142c7:	68 a4 fe 01 c0       	push   0xc001fea4
c00142cc:	68 6c 61 02 c0       	push   0xc002616c
c00142d1:	68 e8 d1 01 c0       	push   0xc001d1e8
c00142d6:	e8 31 61 ff ff       	call   c000a40c <__cxa_atexit>
c00142db:	83 c4 10             	add    esp,0x10
c00142de:	66 90                	xchg   ax,ax
c00142e0:	90                   	nop
c00142e1:	83 c4 0c             	add    esp,0xc
c00142e4:	c3                   	ret    
c00142e5:	8d 76 00             	lea    esi,[esi+0x0]

c00142e8 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c00142e8:	83 ec 0c             	sub    esp,0xc
c00142eb:	83 ec 08             	sub    esp,0x8
c00142ee:	68 ff ff 00 00       	push   0xffff
c00142f3:	6a 01                	push   0x1
c00142f5:	e8 4a ff ff ff       	call   c0014244 <__static_initialization_and_destruction_0(int, int)>
c00142fa:	83 c4 10             	add    esp,0x10
c00142fd:	83 c4 0c             	add    esp,0xc
c0014300:	c3                   	ret    

c0014301 <Vm::inbv(unsigned short)>:
c0014301:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0014305:	66 81 fa fe fe       	cmp    dx,0xfefe
c001430a:	75 06                	jne    c0014312 <Vm::inbv(unsigned short)+0x11>
c001430c:	a0 cc 61 02 c0       	mov    al,ds:0xc00261cc
c0014311:	c3                   	ret    
c0014312:	ec                   	in     al,dx
c0014313:	c3                   	ret    

c0014314 <Vm::outbv(unsigned short, unsigned char)>:
c0014314:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0014318:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001431c:	66 81 fa fe fe       	cmp    dx,0xfefe
c0014321:	75 25                	jne    c0014348 <Vm::outbv(unsigned short, unsigned char)+0x34>
c0014323:	8b 0d cc 61 02 c0    	mov    ecx,DWORD PTR ds:0xc00261cc
c0014329:	8d 51 01             	lea    edx,[ecx+0x1]
c001432c:	88 81 e0 61 02 c0    	mov    BYTE PTR [ecx-0x3ffd9e20],al
c0014332:	89 15 cc 61 02 c0    	mov    DWORD PTR ds:0xc00261cc,edx
c0014338:	83 fa 20             	cmp    edx,0x20
c001433b:	75 0c                	jne    c0014349 <Vm::outbv(unsigned short, unsigned char)+0x35>
c001433d:	c7 05 cc 61 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc00261cc,0x1f
c0014347:	c3                   	ret    
c0014348:	ee                   	out    dx,al
c0014349:	c3                   	ret    

c001434a <Vm::realToLinear(unsigned short, unsigned short)>:
c001434a:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001434f:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0014354:	c1 e0 04             	shl    eax,0x4
c0014357:	01 d0                	add    eax,edx
c0014359:	c3                   	ret    

c001435a <Vm::getSegment(unsigned int)>:
c001435a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001435e:	c1 e8 10             	shr    eax,0x10
c0014361:	c3                   	ret    

c0014362 <Vm::getOffset(unsigned int)>:
c0014362:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014366:	c3                   	ret    

c0014367 <Vm::mainloop2()>:
c0014367:	83 ec 18             	sub    esp,0x18
c001436a:	fa                   	cli    
c001436b:	ff 05 68 61 02 c0    	inc    DWORD PTR ds:0xc0026168
c0014371:	6a 02                	push   0x2
c0014373:	c6 05 c5 61 02 c0 01 	mov    BYTE PTR ds:0xc00261c5,0x1
c001437a:	e8 19 f6 ff ff       	call   c0013998 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001437f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014384:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0014388:	52                   	push   edx
c0014389:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c001438d:	52                   	push   edx
c001438e:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c0014392:	52                   	push   edx
c0014393:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c0014397:	50                   	push   eax
c0014398:	e8 72 be fe ff       	call   c000020f <goToVM86>
c001439d:	83 c4 2c             	add    esp,0x2c
c00143a0:	c3                   	ret    

c00143a1 <Vm::mainVm8086Loop(void*)>:
c00143a1:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c00143a6:	48                   	dec    eax
c00143a7:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c00143ac:	75 01                	jne    c00143af <Vm::mainVm8086Loop(void*)+0xe>
c00143ae:	fb                   	sti    
c00143af:	eb b6                	jmp    c0014367 <Vm::mainloop2()>

c00143b1 <Vm::mainloop3(unsigned long)>:
c00143b1:	83 ec 18             	sub    esp,0x18
c00143b4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00143b8:	fa                   	cli    
c00143b9:	ff 05 68 61 02 c0    	inc    DWORD PTR ds:0xc0026168
c00143bf:	6a 02                	push   0x2
c00143c1:	c6 05 c4 61 02 c0 01 	mov    BYTE PTR ds:0xc00261c4,0x1
c00143c8:	a3 c0 61 02 c0       	mov    ds:0xc00261c0,eax
c00143cd:	e8 c6 f5 ff ff       	call   c0013998 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c00143d2:	83 c4 1c             	add    esp,0x1c
c00143d5:	eb 90                	jmp    c0014367 <Vm::mainloop2()>

c00143d7 <Vm::initialise8086()>:
c00143d7:	83 ec 0c             	sub    esp,0xc
c00143da:	68 80 00 00 00       	push   0x80
c00143df:	6a 00                	push   0x0
c00143e1:	68 a1 43 01 c0       	push   0xc00143a1
c00143e6:	ff 35 90 61 02 c0    	push   DWORD PTR ds:0xc0026190
c00143ec:	e8 b3 f1 ff ff       	call   c00135a4 <Process::createThread(void (*)(void*), void*, int)>
c00143f1:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c00143f8:	a3 c8 61 02 c0       	mov    ds:0xc00261c8,eax
c00143fd:	68 00 01 00 00       	push   0x100
c0014402:	a1 90 61 02 c0       	mov    eax,ds:0xc0026190
c0014407:	6a 00                	push   0x0
c0014409:	6a 00                	push   0x0
c001440b:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014411:	e8 3c 58 ff ff       	call   c0009c52 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0014416:	83 c4 2c             	add    esp,0x2c
c0014419:	c3                   	ret    

c001441a <Vm::finish8086()>:
c001441a:	53                   	push   ebx
c001441b:	83 ec 08             	sub    esp,0x8
c001441e:	fa                   	cli    
c001441f:	ff 05 68 61 02 c0    	inc    DWORD PTR ds:0xc0026168
c0014425:	80 3d c4 61 02 c0 00 	cmp    BYTE PTR ds:0xc00261c4,0x0
c001442c:	75 15                	jne    c0014443 <Vm::finish8086()+0x29>
c001442e:	e8 91 f3 ff ff       	call   c00137c4 <schedule()>
c0014433:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c0014438:	48                   	dec    eax
c0014439:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c001443e:	75 de                	jne    c001441e <Vm::finish8086()+0x4>
c0014440:	fb                   	sti    
c0014441:	eb db                	jmp    c001441e <Vm::finish8086()+0x4>
c0014443:	83 ec 0c             	sub    esp,0xc
c0014446:	8b 1d c0 61 02 c0    	mov    ebx,DWORD PTR ds:0xc00261c0
c001444c:	ff 35 c8 61 02 c0    	push   DWORD PTR ds:0xc00261c8
c0014452:	c6 05 c4 61 02 c0 00 	mov    BYTE PTR ds:0xc00261c4,0x0
c0014459:	e8 2a f8 ff ff       	call   c0013c88 <unblockTask(ThreadControlBlock*)>
c001445e:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c0014463:	83 c4 10             	add    esp,0x10
c0014466:	8d 50 ff             	lea    edx,[eax-0x1]
c0014469:	89 15 68 61 02 c0    	mov    DWORD PTR ds:0xc0026168,edx
c001446f:	85 d2                	test   edx,edx
c0014471:	75 01                	jne    c0014474 <Vm::finish8086()+0x5a>
c0014473:	fb                   	sti    
c0014474:	89 d8                	mov    eax,ebx
c0014476:	83 c4 08             	add    esp,0x8
c0014479:	5b                   	pop    ebx
c001447a:	c3                   	ret    

c001447b <Vm::getOutput8086(unsigned char*)>:
c001447b:	57                   	push   edi
c001447c:	8b 0d cc 61 02 c0    	mov    ecx,DWORD PTR ds:0xc00261cc
c0014482:	56                   	push   esi
c0014483:	be e0 61 02 c0       	mov    esi,0xc00261e0
c0014488:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001448c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001448e:	a1 cc 61 02 c0       	mov    eax,ds:0xc00261cc
c0014493:	5e                   	pop    esi
c0014494:	c7 05 cc 61 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00261cc,0x0
c001449e:	5f                   	pop    edi
c001449f:	c3                   	ret    

c00144a0 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c00144a0:	55                   	push   ebp
c00144a1:	57                   	push   edi
c00144a2:	56                   	push   esi
c00144a3:	53                   	push   ebx
c00144a4:	83 ec 0c             	sub    esp,0xc
c00144a7:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00144ab:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00144af:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00144b3:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00144b7:	fa                   	cli    
c00144b8:	ff 05 68 61 02 c0    	inc    DWORD PTR ds:0xc0026168
c00144be:	80 3d c5 61 02 c0 00 	cmp    BYTE PTR ds:0xc00261c5,0x0
c00144c5:	75 15                	jne    c00144dc <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3c>
c00144c7:	e8 f8 f2 ff ff       	call   c00137c4 <schedule()>
c00144cc:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c00144d1:	48                   	dec    eax
c00144d2:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c00144d7:	75 de                	jne    c00144b7 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c00144d9:	fb                   	sti    
c00144da:	eb db                	jmp    c00144b7 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c00144dc:	a1 c8 61 02 c0       	mov    eax,ds:0xc00261c8
c00144e1:	c7 05 cc 61 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00261cc,0x0
c00144eb:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c00144ef:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c00144f3:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c00144f7:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c00144fb:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c00144ff:	0f b7 ff             	movzx  edi,di
c0014502:	0f b7 f6             	movzx  esi,si
c0014505:	50                   	push   eax
c0014506:	6a 20                	push   0x20
c0014508:	6a 00                	push   0x0
c001450a:	68 e0 61 02 c0       	push   0xc00261e0
c001450f:	e8 bc bf fe ff       	call   c00004d0 <memset>
c0014514:	5a                   	pop    edx
c0014515:	59                   	pop    ecx
c0014516:	57                   	push   edi
c0014517:	56                   	push   esi
c0014518:	e8 2d fe ff ff       	call   c001434a <Vm::realToLinear(unsigned short, unsigned short)>
c001451d:	83 c4 10             	add    esp,0x10
c0014520:	89 c7                	mov    edi,eax
c0014522:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0014526:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001452a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001452c:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c0014531:	c6 05 c5 61 02 c0 00 	mov    BYTE PTR ds:0xc00261c5,0x0
c0014538:	48                   	dec    eax
c0014539:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c001453e:	75 01                	jne    c0014541 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa1>
c0014540:	fb                   	sti    
c0014541:	83 ec 0c             	sub    esp,0xc
c0014544:	ff 35 c8 61 02 c0    	push   DWORD PTR ds:0xc00261c8
c001454a:	e8 39 f7 ff ff       	call   c0013c88 <unblockTask(ThreadControlBlock*)>
c001454f:	83 c4 1c             	add    esp,0x1c
c0014552:	b0 01                	mov    al,0x1
c0014554:	5b                   	pop    ebx
c0014555:	5e                   	pop    esi
c0014556:	5f                   	pop    edi
c0014557:	5d                   	pop    ebp
c0014558:	c3                   	ret    

c0014559 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0014559:	55                   	push   ebp
c001455a:	57                   	push   edi
c001455b:	56                   	push   esi
c001455c:	53                   	push   ebx
c001455d:	83 ec 2c             	sub    esp,0x2c
c0014560:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0014564:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0014568:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001456c:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0014570:	fa                   	cli    
c0014571:	ff 05 68 61 02 c0    	inc    DWORD PTR ds:0xc0026168
c0014577:	0f b6 35 c5 61 02 c0 	movzx  esi,BYTE PTR ds:0xc00261c5
c001457e:	89 f0                	mov    eax,esi
c0014580:	84 c0                	test   al,al
c0014582:	75 1d                	jne    c00145a1 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x48>
c0014584:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0014588:	e8 37 f2 ff ff       	call   c00137c4 <schedule()>
c001458d:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c0014592:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014596:	48                   	dec    eax
c0014597:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c001459c:	75 d2                	jne    c0014570 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001459e:	fb                   	sti    
c001459f:	eb cf                	jmp    c0014570 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c00145a1:	a1 c8 61 02 c0       	mov    eax,ds:0xc00261c8
c00145a6:	c7 05 cc 61 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00261cc,0x0
c00145b0:	66 89 50 59          	mov    WORD PTR [eax+0x59],dx
c00145b4:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c00145b8:	66 89 68 55          	mov    WORD PTR [eax+0x55],bp
c00145bc:	66 89 78 57          	mov    WORD PTR [eax+0x57],di
c00145c0:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c00145c4:	50                   	push   eax
c00145c5:	6a 20                	push   0x20
c00145c7:	6a 00                	push   0x0
c00145c9:	68 e0 61 02 c0       	push   0xc00261e0
c00145ce:	e8 fd be fe ff       	call   c00004d0 <memset>
c00145d3:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00145da:	e8 da 31 ff ff       	call   c00077b9 <malloc>
c00145df:	83 c4 0c             	add    esp,0xc
c00145e2:	89 c3                	mov    ebx,eax
c00145e4:	ff 35 90 61 02 c0    	push   DWORD PTR ds:0xc0026190
c00145ea:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00145ee:	50                   	push   eax
c00145ef:	e8 d4 64 ff ff       	call   c000aac8 <File::File(char const*, Process*)>
c00145f4:	83 c4 10             	add    esp,0x10
c00145f7:	85 db                	test   ebx,ebx
c00145f9:	75 0a                	jne    c0014605 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xac>
c00145fb:	83 ec 0c             	sub    esp,0xc
c00145fe:	68 0c f4 01 c0       	push   0xc001f40c
c0014603:	eb 3e                	jmp    c0014643 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c0014605:	50                   	push   eax
c0014606:	8d 44 24 17          	lea    eax,[esp+0x17]
c001460a:	50                   	push   eax
c001460b:	8d 44 24 20          	lea    eax,[esp+0x20]
c001460f:	50                   	push   eax
c0014610:	53                   	push   ebx
c0014611:	e8 1e 68 ff ff       	call   c000ae34 <File::stat(unsigned long long*, bool*)>
c0014616:	83 c4 10             	add    esp,0x10
c0014619:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c001461e:	74 0a                	je     c001462a <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c0014620:	83 ec 0c             	sub    esp,0xc
c0014623:	68 20 f4 01 c0       	push   0xc001f420
c0014628:	eb 19                	jmp    c0014643 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c001462a:	51                   	push   ecx
c001462b:	51                   	push   ecx
c001462c:	6a 01                	push   0x1
c001462e:	53                   	push   ebx
c001462f:	e8 54 65 ff ff       	call   c000ab88 <File::open(FileOpenMode)>
c0014634:	83 c4 10             	add    esp,0x10
c0014637:	85 c0                	test   eax,eax
c0014639:	74 24                	je     c001465f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x106>
c001463b:	83 ec 0c             	sub    esp,0xc
c001463e:	68 39 f4 01 c0       	push   0xc001f439
c0014643:	e8 5f bc ff ff       	call   c00102a7 <KePanic(char const*)>
c0014648:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c001464d:	83 c4 10             	add    esp,0x10
c0014650:	48                   	dec    eax
c0014651:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c0014656:	85 c0                	test   eax,eax
c0014658:	75 01                	jne    c001465b <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x102>
c001465a:	fb                   	sti    
c001465b:	31 f6                	xor    esi,esi
c001465d:	eb 58                	jmp    c00146b7 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x15e>
c001465f:	0f b7 ed             	movzx  ebp,bp
c0014662:	50                   	push   eax
c0014663:	0f b7 ff             	movzx  edi,di
c0014666:	50                   	push   eax
c0014667:	55                   	push   ebp
c0014668:	57                   	push   edi
c0014669:	e8 dc fc ff ff       	call   c001434a <Vm::realToLinear(unsigned short, unsigned short)>
c001466e:	5a                   	pop    edx
c001466f:	8b 13                	mov    edx,DWORD PTR [ebx]
c0014671:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0014675:	51                   	push   ecx
c0014676:	50                   	push   eax
c0014677:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001467b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001467f:	53                   	push   ebx
c0014680:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0014683:	83 c4 14             	add    esp,0x14
c0014686:	53                   	push   ebx
c0014687:	e8 5a 65 ff ff       	call   c000abe6 <File::close()>
c001468c:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c0014691:	83 c4 10             	add    esp,0x10
c0014694:	48                   	dec    eax
c0014695:	c6 05 c5 61 02 c0 00 	mov    BYTE PTR ds:0xc00261c5,0x0
c001469c:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c00146a1:	85 c0                	test   eax,eax
c00146a3:	75 01                	jne    c00146a6 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x14d>
c00146a5:	fb                   	sti    
c00146a6:	83 ec 0c             	sub    esp,0xc
c00146a9:	ff 35 c8 61 02 c0    	push   DWORD PTR ds:0xc00261c8
c00146af:	e8 d4 f5 ff ff       	call   c0013c88 <unblockTask(ThreadControlBlock*)>
c00146b4:	83 c4 10             	add    esp,0x10
c00146b7:	83 c4 2c             	add    esp,0x2c
c00146ba:	89 f0                	mov    eax,esi
c00146bc:	5b                   	pop    ebx
c00146bd:	5e                   	pop    esi
c00146be:	5f                   	pop    edi
c00146bf:	5d                   	pop    ebp
c00146c0:	c3                   	ret    

c00146c1 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c00146c1:	57                   	push   edi
c00146c2:	56                   	push   esi
c00146c3:	53                   	push   ebx
c00146c4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00146c8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00146cc:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00146d0:	83 e8 06             	sub    eax,0x6
c00146d3:	0f b7 c0             	movzx  eax,ax
c00146d6:	50                   	push   eax
c00146d7:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c00146dc:	50                   	push   eax
c00146dd:	e8 68 fc ff ff       	call   c001434a <Vm::realToLinear(unsigned short, unsigned short)>
c00146e2:	5a                   	pop    edx
c00146e3:	5e                   	pop    esi
c00146e4:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c00146e7:	8d 56 fa             	lea    edx,[esi-0x6]
c00146ea:	81 e2 ff ff 00 00    	and    edx,0xffff
c00146f0:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c00146f3:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c00146f6:	83 c2 02             	add    edx,0x2
c00146f9:	66 89 10             	mov    WORD PTR [eax],dx
c00146fc:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c00146ff:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0014703:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c0014706:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001470a:	89 d6                	mov    esi,edx
c001470c:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0014712:	66 81 e6 ff fd       	and    si,0xfdff
c0014717:	80 7f 5d 00          	cmp    BYTE PTR [edi+0x5d],0x0
c001471b:	74 07                	je     c0014724 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c001471d:	89 d6                	mov    esi,edx
c001471f:	66 81 ce 00 02       	or     si,0x200
c0014724:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c0014728:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001472d:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0014731:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c0014739:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c001473c:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c0014744:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c0014747:	5b                   	pop    ebx
c0014748:	5e                   	pop    esi
c0014749:	5f                   	pop    edi
c001474a:	c3                   	ret    

c001474b <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001474b:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0014750:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0014755:	c1 e0 04             	shl    eax,0x4
c0014758:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001475b:	c3                   	ret    

c001475c <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001475c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0014761:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0014766:	c1 e0 04             	shl    eax,0x4
c0014769:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001476d:	c3                   	ret    

c001476e <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001476e:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0014773:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0014778:	c1 e0 04             	shl    eax,0x4
c001477b:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001477e:	c3                   	ret    

c001477f <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001477f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0014784:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0014789:	c1 e0 04             	shl    eax,0x4
c001478c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014790:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0014793:	c3                   	ret    

c0014794 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c0014794:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0014799:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001479e:	c1 e0 04             	shl    eax,0x4
c00147a1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00147a5:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c00147a9:	c3                   	ret    

c00147aa <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c00147aa:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00147af:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00147b4:	c1 e0 04             	shl    eax,0x4
c00147b7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00147bb:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c00147be:	c3                   	ret    

c00147bf <Vm::faultHandler(regs*)>:
c00147bf:	55                   	push   ebp
c00147c0:	57                   	push   edi
c00147c1:	56                   	push   esi
c00147c2:	53                   	push   ebx
c00147c3:	83 ec 1c             	sub    esp,0x1c
c00147c6:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00147ca:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00147cd:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c00147d1:	0f b7 f8             	movzx  edi,ax
c00147d4:	52                   	push   edx
c00147d5:	0f b7 c0             	movzx  eax,ax
c00147d8:	50                   	push   eax
c00147d9:	e8 6c fb ff ff       	call   c001434a <Vm::realToLinear(unsigned short, unsigned short)>
c00147de:	5a                   	pop    edx
c00147df:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c00147e2:	59                   	pop    ecx
c00147e3:	89 c1                	mov    ecx,eax
c00147e5:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00147e8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00147ec:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00147f1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00147f5:	0f b7 c5             	movzx  eax,bp
c00147f8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00147fc:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0014800:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014804:	e8 41 fb ff ff       	call   c001434a <Vm::realToLinear(unsigned short, unsigned short)>
c0014809:	5e                   	pop    esi
c001480a:	be 06 00 00 00       	mov    esi,0x6
c001480f:	5a                   	pop    edx
c0014810:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c0014815:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c001481a:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c001481d:	80 fa 9d             	cmp    dl,0x9d
c0014820:	0f 84 2c 02 00 00    	je     c0014a52 <Vm::faultHandler(regs*)+0x293>
c0014826:	0f 87 91 00 00 00    	ja     c00148bd <Vm::faultHandler(regs*)+0xfe>
c001482c:	80 fa 66             	cmp    dl,0x66
c001482f:	0f 84 98 01 00 00    	je     c00149cd <Vm::faultHandler(regs*)+0x20e>
c0014835:	77 47                	ja     c001487e <Vm::faultHandler(regs*)+0xbf>
c0014837:	80 fa 36             	cmp    dl,0x36
c001483a:	0f 84 80 01 00 00    	je     c00149c0 <Vm::faultHandler(regs*)+0x201>
c0014840:	77 1a                	ja     c001485c <Vm::faultHandler(regs*)+0x9d>
c0014842:	80 fa 26             	cmp    dl,0x26
c0014845:	0f 84 4e 01 00 00    	je     c0014999 <Vm::faultHandler(regs*)+0x1da>
c001484b:	80 fa 2e             	cmp    dl,0x2e
c001484e:	0f 85 e2 05 00 00    	jne    c0014e36 <Vm::faultHandler(regs*)+0x677>
c0014854:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014857:	31 f6                	xor    esi,esi
c0014859:	41                   	inc    ecx
c001485a:	eb be                	jmp    c001481a <Vm::faultHandler(regs*)+0x5b>
c001485c:	80 fa 64             	cmp    dl,0x64
c001485f:	0f 84 41 01 00 00    	je     c00149a6 <Vm::faultHandler(regs*)+0x1e7>
c0014865:	0f 87 48 01 00 00    	ja     c00149b3 <Vm::faultHandler(regs*)+0x1f4>
c001486b:	80 fa 3e             	cmp    dl,0x3e
c001486e:	0f 85 c2 05 00 00    	jne    c0014e36 <Vm::faultHandler(regs*)+0x677>
c0014874:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014877:	be 01 00 00 00       	mov    esi,0x1
c001487c:	eb db                	jmp    c0014859 <Vm::faultHandler(regs*)+0x9a>
c001487e:	80 fa 6d             	cmp    dl,0x6d
c0014881:	0f 84 ec 02 00 00    	je     c0014b73 <Vm::faultHandler(regs*)+0x3b4>
c0014887:	77 17                	ja     c00148a0 <Vm::faultHandler(regs*)+0xe1>
c0014889:	80 fa 67             	cmp    dl,0x67
c001488c:	0f 84 48 01 00 00    	je     c00149da <Vm::faultHandler(regs*)+0x21b>
c0014892:	80 fa 6c             	cmp    dl,0x6c
c0014895:	0f 84 69 02 00 00    	je     c0014b04 <Vm::faultHandler(regs*)+0x345>
c001489b:	e9 96 05 00 00       	jmp    c0014e36 <Vm::faultHandler(regs*)+0x677>
c00148a0:	80 fa 6f             	cmp    dl,0x6f
c00148a3:	0f 84 f4 03 00 00    	je     c0014c9d <Vm::faultHandler(regs*)+0x4de>
c00148a9:	0f 82 59 03 00 00    	jb     c0014c08 <Vm::faultHandler(regs*)+0x449>
c00148af:	80 fa 9c             	cmp    dl,0x9c
c00148b2:	0f 84 2f 01 00 00    	je     c00149e7 <Vm::faultHandler(regs*)+0x228>
c00148b8:	e9 79 05 00 00       	jmp    c0014e36 <Vm::faultHandler(regs*)+0x677>
c00148bd:	80 fa ec             	cmp    dl,0xec
c00148c0:	0f 84 14 05 00 00    	je     c0014dda <Vm::faultHandler(regs*)+0x61b>
c00148c6:	77 7b                	ja     c0014943 <Vm::faultHandler(regs*)+0x184>
c00148c8:	80 fa e4             	cmp    dl,0xe4
c00148cb:	0f 84 93 04 00 00    	je     c0014d64 <Vm::faultHandler(regs*)+0x5a5>
c00148d1:	77 53                	ja     c0014926 <Vm::faultHandler(regs*)+0x167>
c00148d3:	80 fa cd             	cmp    dl,0xcd
c00148d6:	0f 84 d9 01 00 00    	je     c0014ab5 <Vm::faultHandler(regs*)+0x2f6>
c00148dc:	80 fa cf             	cmp    dl,0xcf
c00148df:	0f 85 51 05 00 00    	jne    c0014e36 <Vm::faultHandler(regs*)+0x677>
c00148e5:	0f b7 10             	movzx  edx,WORD PTR [eax]
c00148e8:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c00148eb:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c00148ef:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c00148f2:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c00148f6:	81 ca 00 02 02 00    	or     edx,0x20200
c00148fc:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00148ff:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0014903:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0014909:	66 c1 e8 09          	shr    ax,0x9
c001490d:	83 e0 01             	and    eax,0x1
c0014910:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0014913:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0014916:	83 c0 06             	add    eax,0x6
c0014919:	25 ff ff 00 00       	and    eax,0xffff
c001491e:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0014921:	e9 0c 05 00 00       	jmp    c0014e32 <Vm::faultHandler(regs*)+0x673>
c0014926:	80 fa e6             	cmp    dl,0xe6
c0014929:	0f 84 7f 04 00 00    	je     c0014dae <Vm::faultHandler(regs*)+0x5ef>
c001492f:	0f 82 4b 04 00 00    	jb     c0014d80 <Vm::faultHandler(regs*)+0x5c1>
c0014935:	80 fa e7             	cmp    dl,0xe7
c0014938:	0f 84 87 04 00 00    	je     c0014dc5 <Vm::faultHandler(regs*)+0x606>
c001493e:	e9 f3 04 00 00       	jmp    c0014e36 <Vm::faultHandler(regs*)+0x677>
c0014943:	80 fa ef             	cmp    dl,0xef
c0014946:	0f 84 d1 04 00 00    	je     c0014e1d <Vm::faultHandler(regs*)+0x65e>
c001494c:	77 28                	ja     c0014976 <Vm::faultHandler(regs*)+0x1b7>
c001494e:	80 fa ed             	cmp    dl,0xed
c0014951:	0f 84 9f 04 00 00    	je     c0014df6 <Vm::faultHandler(regs*)+0x637>
c0014957:	80 fa ee             	cmp    dl,0xee
c001495a:	0f 85 d6 04 00 00    	jne    c0014e36 <Vm::faultHandler(regs*)+0x677>
c0014960:	50                   	push   eax
c0014961:	50                   	push   eax
c0014962:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0014966:	50                   	push   eax
c0014967:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001496b:	50                   	push   eax
c001496c:	e8 a3 f9 ff ff       	call   c0014314 <Vm::outbv(unsigned short, unsigned char)>
c0014971:	e9 9f 04 00 00       	jmp    c0014e15 <Vm::faultHandler(regs*)+0x656>
c0014976:	80 fa fa             	cmp    dl,0xfa
c0014979:	0f 84 69 01 00 00    	je     c0014ae8 <Vm::faultHandler(regs*)+0x329>
c001497f:	80 fa fb             	cmp    dl,0xfb
c0014982:	0f 84 6e 01 00 00    	je     c0014af6 <Vm::faultHandler(regs*)+0x337>
c0014988:	80 fa f3             	cmp    dl,0xf3
c001498b:	0f 85 a5 04 00 00    	jne    c0014e36 <Vm::faultHandler(regs*)+0x677>
c0014991:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014994:	e9 c0 fe ff ff       	jmp    c0014859 <Vm::faultHandler(regs*)+0x9a>
c0014999:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001499c:	be 02 00 00 00       	mov    esi,0x2
c00149a1:	e9 b3 fe ff ff       	jmp    c0014859 <Vm::faultHandler(regs*)+0x9a>
c00149a6:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00149a9:	be 03 00 00 00       	mov    esi,0x3
c00149ae:	e9 a6 fe ff ff       	jmp    c0014859 <Vm::faultHandler(regs*)+0x9a>
c00149b3:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00149b6:	be 04 00 00 00       	mov    esi,0x4
c00149bb:	e9 99 fe ff ff       	jmp    c0014859 <Vm::faultHandler(regs*)+0x9a>
c00149c0:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00149c3:	be 05 00 00 00       	mov    esi,0x5
c00149c8:	e9 8c fe ff ff       	jmp    c0014859 <Vm::faultHandler(regs*)+0x9a>
c00149cd:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00149d0:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c00149d5:	e9 7f fe ff ff       	jmp    c0014859 <Vm::faultHandler(regs*)+0x9a>
c00149da:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00149dd:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c00149e2:	e9 72 fe ff ff       	jmp    c0014859 <Vm::faultHandler(regs*)+0x9a>
c00149e7:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c00149ea:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00149ee:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c00149f3:	74 30                	je     c0014a25 <Vm::faultHandler(regs*)+0x266>
c00149f5:	83 e9 04             	sub    ecx,0x4
c00149f8:	81 e2 ff 0d 00 00    	and    edx,0xdff
c00149fe:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0014a04:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0014a07:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0014a0a:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0014a10:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0014a14:	0f 84 15 04 00 00    	je     c0014e2f <Vm::faultHandler(regs*)+0x670>
c0014a1a:	80 ce 02             	or     dh,0x2
c0014a1d:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0014a20:	e9 0a 04 00 00       	jmp    c0014e2f <Vm::faultHandler(regs*)+0x670>
c0014a25:	83 e9 02             	sub    ecx,0x2
c0014a28:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0014a2e:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0014a31:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0014a35:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0014a3b:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0014a3f:	74 05                	je     c0014a46 <Vm::faultHandler(regs*)+0x287>
c0014a41:	80 ce 02             	or     dh,0x2
c0014a44:	eb 03                	jmp    c0014a49 <Vm::faultHandler(regs*)+0x28a>
c0014a46:	80 e6 fd             	and    dh,0xfd
c0014a49:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0014a4d:	e9 dd 03 00 00       	jmp    c0014e2f <Vm::faultHandler(regs*)+0x670>
c0014a52:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014a57:	74 2a                	je     c0014a83 <Vm::faultHandler(regs*)+0x2c4>
c0014a59:	8b 10                	mov    edx,DWORD PTR [eax]
c0014a5b:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0014a61:	81 ca 00 02 02 00    	or     edx,0x20200
c0014a67:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0014a6a:	8b 00                	mov    eax,DWORD PTR [eax]
c0014a6c:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0014a72:	c1 e8 09             	shr    eax,0x9
c0014a75:	83 e0 01             	and    eax,0x1
c0014a78:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0014a7b:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0014a7e:	83 c0 04             	add    eax,0x4
c0014a81:	eb 25                	jmp    c0014aa8 <Vm::faultHandler(regs*)+0x2e9>
c0014a83:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0014a86:	81 ca 00 02 02 00    	or     edx,0x20200
c0014a8c:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0014a8f:	66 8b 00             	mov    ax,WORD PTR [eax]
c0014a92:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0014a98:	66 c1 e8 09          	shr    ax,0x9
c0014a9c:	83 e0 01             	and    eax,0x1
c0014a9f:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0014aa2:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0014aa5:	83 c0 02             	add    eax,0x2
c0014aa8:	25 ff ff 00 00       	and    eax,0xffff
c0014aad:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0014ab0:	e9 7a 03 00 00       	jmp    c0014e2f <Vm::faultHandler(regs*)+0x670>
c0014ab5:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014ab9:	3c ee                	cmp    al,0xee
c0014abb:	75 10                	jne    c0014acd <Vm::faultHandler(regs*)+0x30e>
c0014abd:	83 ec 0c             	sub    esp,0xc
c0014ac0:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0014ac3:	e8 e9 f8 ff ff       	call   c00143b1 <Vm::mainloop3(unsigned long)>
c0014ac8:	e9 4b 03 00 00       	jmp    c0014e18 <Vm::faultHandler(regs*)+0x659>
c0014acd:	83 ec 0c             	sub    esp,0xc
c0014ad0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014ad4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014ad8:	51                   	push   ecx
c0014ad9:	50                   	push   eax
c0014ada:	53                   	push   ebx
c0014adb:	e8 e1 fb ff ff       	call   c00146c1 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c0014ae0:	83 c4 20             	add    esp,0x20
c0014ae3:	e9 4a 03 00 00       	jmp    c0014e32 <Vm::faultHandler(regs*)+0x673>
c0014ae8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014aed:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0014af1:	e9 39 03 00 00       	jmp    c0014e2f <Vm::faultHandler(regs*)+0x670>
c0014af6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014afb:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c0014aff:	e9 2b 03 00 00       	jmp    c0014e2f <Vm::faultHandler(regs*)+0x670>
c0014b04:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0014b07:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0014b0c:	74 2b                	je     c0014b39 <Vm::faultHandler(regs*)+0x37a>
c0014b0e:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c0014b15:	76 22                	jbe    c0014b39 <Vm::faultHandler(regs*)+0x37a>
c0014b17:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0014b1b:	50                   	push   eax
c0014b1c:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0014b20:	50                   	push   eax
c0014b21:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0014b25:	50                   	push   eax
c0014b26:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0014b2a:	50                   	push   eax
c0014b2b:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014b2f:	50                   	push   eax
c0014b30:	6a 6c                	push   0x6c
c0014b32:	6a 6c                	push   0x6c
c0014b34:	e9 b9 01 00 00       	jmp    c0014cf2 <Vm::faultHandler(regs*)+0x533>
c0014b39:	83 ec 0c             	sub    esp,0xc
c0014b3c:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0014b40:	0f b7 f6             	movzx  esi,si
c0014b43:	50                   	push   eax
c0014b44:	e8 b8 f7 ff ff       	call   c0014301 <Vm::inbv(unsigned short)>
c0014b49:	83 c4 0c             	add    esp,0xc
c0014b4c:	0f b6 c0             	movzx  eax,al
c0014b4f:	50                   	push   eax
c0014b50:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c0014b54:	50                   	push   eax
c0014b55:	56                   	push   esi
c0014b56:	e8 24 fc ff ff       	call   c001477f <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c0014b5b:	83 c4 10             	add    esp,0x10
c0014b5e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0014b61:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0014b65:	74 03                	je     c0014b6a <Vm::faultHandler(regs*)+0x3ab>
c0014b67:	48                   	dec    eax
c0014b68:	eb 01                	jmp    c0014b6b <Vm::faultHandler(regs*)+0x3ac>
c0014b6a:	40                   	inc    eax
c0014b6b:	0f b7 c0             	movzx  eax,ax
c0014b6e:	e9 8d 00 00 00       	jmp    c0014c00 <Vm::faultHandler(regs*)+0x441>
c0014b73:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0014b76:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0014b79:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0014b7e:	74 29                	je     c0014ba9 <Vm::faultHandler(regs*)+0x3ea>
c0014b80:	3d ff ff 00 00       	cmp    eax,0xffff
c0014b85:	76 22                	jbe    c0014ba9 <Vm::faultHandler(regs*)+0x3ea>
c0014b87:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0014b8b:	50                   	push   eax
c0014b8c:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0014b90:	50                   	push   eax
c0014b91:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0014b95:	50                   	push   eax
c0014b96:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0014b9a:	50                   	push   eax
c0014b9b:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014b9f:	50                   	push   eax
c0014ba0:	6a 6d                	push   0x6d
c0014ba2:	6a 6d                	push   0x6d
c0014ba4:	e9 49 01 00 00       	jmp    c0014cf2 <Vm::faultHandler(regs*)+0x533>
c0014ba9:	0f b7 c8             	movzx  ecx,ax
c0014bac:	0f b7 f6             	movzx  esi,si
c0014baf:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0014bb2:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014bb7:	74 20                	je     c0014bd9 <Vm::faultHandler(regs*)+0x41a>
c0014bb9:	ed                   	in     eax,dx
c0014bba:	55                   	push   ebp
c0014bbb:	50                   	push   eax
c0014bbc:	51                   	push   ecx
c0014bbd:	56                   	push   esi
c0014bbe:	e8 e7 fb ff ff       	call   c00147aa <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c0014bc3:	83 c4 10             	add    esp,0x10
c0014bc6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0014bc9:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0014bcd:	74 05                	je     c0014bd4 <Vm::faultHandler(regs*)+0x415>
c0014bcf:	83 e8 04             	sub    eax,0x4
c0014bd2:	eb 27                	jmp    c0014bfb <Vm::faultHandler(regs*)+0x43c>
c0014bd4:	83 c0 04             	add    eax,0x4
c0014bd7:	eb 22                	jmp    c0014bfb <Vm::faultHandler(regs*)+0x43c>
c0014bd9:	66 ed                	in     ax,dx
c0014bdb:	0f b7 c0             	movzx  eax,ax
c0014bde:	57                   	push   edi
c0014bdf:	50                   	push   eax
c0014be0:	51                   	push   ecx
c0014be1:	56                   	push   esi
c0014be2:	e8 ad fb ff ff       	call   c0014794 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c0014be7:	83 c4 10             	add    esp,0x10
c0014bea:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0014bed:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0014bf1:	74 05                	je     c0014bf8 <Vm::faultHandler(regs*)+0x439>
c0014bf3:	83 e8 02             	sub    eax,0x2
c0014bf6:	eb 03                	jmp    c0014bfb <Vm::faultHandler(regs*)+0x43c>
c0014bf8:	83 c0 02             	add    eax,0x2
c0014bfb:	25 ff ff 00 00       	and    eax,0xffff
c0014c00:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0014c03:	e9 27 02 00 00       	jmp    c0014e2f <Vm::faultHandler(regs*)+0x670>
c0014c08:	8d 46 ff             	lea    eax,[esi-0x1]
c0014c0b:	3c 05                	cmp    al,0x5
c0014c0d:	77 24                	ja     c0014c33 <Vm::faultHandler(regs*)+0x474>
c0014c0f:	0f b6 c0             	movzx  eax,al
c0014c12:	ff 24 85 ac f4 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe0b54]
c0014c19:	0f b7 fd             	movzx  edi,bp
c0014c1c:	eb 15                	jmp    c0014c33 <Vm::faultHandler(regs*)+0x474>
c0014c1e:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c0014c22:	eb 0f                	jmp    c0014c33 <Vm::faultHandler(regs*)+0x474>
c0014c24:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c0014c28:	eb 09                	jmp    c0014c33 <Vm::faultHandler(regs*)+0x474>
c0014c2a:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c0014c2e:	eb 03                	jmp    c0014c33 <Vm::faultHandler(regs*)+0x474>
c0014c30:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c0014c33:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0014c36:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0014c3b:	74 29                	je     c0014c66 <Vm::faultHandler(regs*)+0x4a7>
c0014c3d:	3d ff ff 00 00       	cmp    eax,0xffff
c0014c42:	76 22                	jbe    c0014c66 <Vm::faultHandler(regs*)+0x4a7>
c0014c44:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0014c48:	50                   	push   eax
c0014c49:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0014c4d:	50                   	push   eax
c0014c4e:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0014c52:	50                   	push   eax
c0014c53:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0014c57:	50                   	push   eax
c0014c58:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014c5c:	50                   	push   eax
c0014c5d:	6a 6e                	push   0x6e
c0014c5f:	6a 6e                	push   0x6e
c0014c61:	e9 8c 00 00 00       	jmp    c0014cf2 <Vm::faultHandler(regs*)+0x533>
c0014c66:	0f b7 c0             	movzx  eax,ax
c0014c69:	52                   	push   edx
c0014c6a:	52                   	push   edx
c0014c6b:	50                   	push   eax
c0014c6c:	57                   	push   edi
c0014c6d:	e8 d9 fa ff ff       	call   c001474b <Vm::readByteFromReal(unsigned short, unsigned short)>
c0014c72:	59                   	pop    ecx
c0014c73:	0f b6 c0             	movzx  eax,al
c0014c76:	5e                   	pop    esi
c0014c77:	50                   	push   eax
c0014c78:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0014c7c:	50                   	push   eax
c0014c7d:	e8 92 f6 ff ff       	call   c0014314 <Vm::outbv(unsigned short, unsigned char)>
c0014c82:	83 c4 10             	add    esp,0x10
c0014c85:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0014c88:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0014c8c:	74 03                	je     c0014c91 <Vm::faultHandler(regs*)+0x4d2>
c0014c8e:	48                   	dec    eax
c0014c8f:	eb 01                	jmp    c0014c92 <Vm::faultHandler(regs*)+0x4d3>
c0014c91:	40                   	inc    eax
c0014c92:	0f b7 c0             	movzx  eax,ax
c0014c95:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0014c98:	e9 92 01 00 00       	jmp    c0014e2f <Vm::faultHandler(regs*)+0x670>
c0014c9d:	8d 46 ff             	lea    eax,[esi-0x1]
c0014ca0:	3c 05                	cmp    al,0x5
c0014ca2:	77 1f                	ja     c0014cc3 <Vm::faultHandler(regs*)+0x504>
c0014ca4:	0f b6 c0             	movzx  eax,al
c0014ca7:	ff 24 85 c4 f4 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe0b3c]
c0014cae:	89 ef                	mov    edi,ebp
c0014cb0:	eb 11                	jmp    c0014cc3 <Vm::faultHandler(regs*)+0x504>
c0014cb2:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0014cb5:	eb 0c                	jmp    c0014cc3 <Vm::faultHandler(regs*)+0x504>
c0014cb7:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c0014cba:	eb 07                	jmp    c0014cc3 <Vm::faultHandler(regs*)+0x504>
c0014cbc:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0014cbf:	eb 02                	jmp    c0014cc3 <Vm::faultHandler(regs*)+0x504>
c0014cc1:	8b 3b                	mov    edi,DWORD PTR [ebx]
c0014cc3:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c0014cc6:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0014ccb:	74 37                	je     c0014d04 <Vm::faultHandler(regs*)+0x545>
c0014ccd:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0014cd3:	76 2f                	jbe    c0014d04 <Vm::faultHandler(regs*)+0x545>
c0014cd5:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0014cd9:	50                   	push   eax
c0014cda:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0014cde:	50                   	push   eax
c0014cdf:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0014ce3:	50                   	push   eax
c0014ce4:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0014ce8:	50                   	push   eax
c0014ce9:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014ced:	50                   	push   eax
c0014cee:	6a 6f                	push   0x6f
c0014cf0:	6a 6f                	push   0x6f
c0014cf2:	68 52 f4 01 c0       	push   0xc001f452
c0014cf7:	e8 56 58 ff ff       	call   c000a552 <Dbg::kprintf(char const*, ...)>
c0014cfc:	83 c4 20             	add    esp,0x20
c0014cff:	e9 86 01 00 00       	jmp    c0014e8a <Vm::faultHandler(regs*)+0x6cb>
c0014d04:	0f b7 d7             	movzx  edx,di
c0014d07:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0014d0a:	0f b7 c6             	movzx  eax,si
c0014d0d:	81 e1 00 04 00 00    	and    ecx,0x400
c0014d13:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c0014d16:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014d1b:	74 1d                	je     c0014d3a <Vm::faultHandler(regs*)+0x57b>
c0014d1d:	55                   	push   ebp
c0014d1e:	55                   	push   ebp
c0014d1f:	50                   	push   eax
c0014d20:	52                   	push   edx
c0014d21:	e8 48 fa ff ff       	call   c001476e <Vm::readDwordFromReal(unsigned short, unsigned short)>
c0014d26:	83 c4 10             	add    esp,0x10
c0014d29:	89 fa                	mov    edx,edi
c0014d2b:	ef                   	out    dx,eax
c0014d2c:	85 c9                	test   ecx,ecx
c0014d2e:	74 05                	je     c0014d35 <Vm::faultHandler(regs*)+0x576>
c0014d30:	83 ee 04             	sub    esi,0x4
c0014d33:	eb 21                	jmp    c0014d56 <Vm::faultHandler(regs*)+0x597>
c0014d35:	83 c6 04             	add    esi,0x4
c0014d38:	eb 1c                	jmp    c0014d56 <Vm::faultHandler(regs*)+0x597>
c0014d3a:	55                   	push   ebp
c0014d3b:	55                   	push   ebp
c0014d3c:	50                   	push   eax
c0014d3d:	52                   	push   edx
c0014d3e:	e8 19 fa ff ff       	call   c001475c <Vm::readWordFromReal(unsigned short, unsigned short)>
c0014d43:	83 c4 10             	add    esp,0x10
c0014d46:	89 fa                	mov    edx,edi
c0014d48:	66 ef                	out    dx,ax
c0014d4a:	85 c9                	test   ecx,ecx
c0014d4c:	74 05                	je     c0014d53 <Vm::faultHandler(regs*)+0x594>
c0014d4e:	83 ee 02             	sub    esi,0x2
c0014d51:	eb 03                	jmp    c0014d56 <Vm::faultHandler(regs*)+0x597>
c0014d53:	83 c6 02             	add    esi,0x2
c0014d56:	81 e6 ff ff 00 00    	and    esi,0xffff
c0014d5c:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0014d5f:	e9 cb 00 00 00       	jmp    c0014e2f <Vm::faultHandler(regs*)+0x670>
c0014d64:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0014d6b:	83 ec 0c             	sub    esp,0xc
c0014d6e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014d72:	50                   	push   eax
c0014d73:	e8 89 f5 ff ff       	call   c0014301 <Vm::inbv(unsigned short)>
c0014d78:	0f b6 c0             	movzx  eax,al
c0014d7b:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0014d7e:	eb 3f                	jmp    c0014dbf <Vm::faultHandler(regs*)+0x600>
c0014d80:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014d85:	74 07                	je     c0014d8e <Vm::faultHandler(regs*)+0x5cf>
c0014d87:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0014d8b:	ed                   	in     eax,dx
c0014d8c:	eb 14                	jmp    c0014da2 <Vm::faultHandler(regs*)+0x5e3>
c0014d8e:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c0014d91:	66 31 f6             	xor    si,si
c0014d94:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0014d97:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0014d9b:	66 ed                	in     ax,dx
c0014d9d:	0f b7 c0             	movzx  eax,ax
c0014da0:	09 f0                	or     eax,esi
c0014da2:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0014da5:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0014da9:	e9 84 00 00 00       	jmp    c0014e32 <Vm::faultHandler(regs*)+0x673>
c0014dae:	52                   	push   edx
c0014daf:	52                   	push   edx
c0014db0:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0014db4:	50                   	push   eax
c0014db5:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014db9:	50                   	push   eax
c0014dba:	e8 55 f5 ff ff       	call   c0014314 <Vm::outbv(unsigned short, unsigned char)>
c0014dbf:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0014dc3:	eb 53                	jmp    c0014e18 <Vm::faultHandler(regs*)+0x659>
c0014dc5:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0014dc8:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0014dcc:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014dd1:	74 03                	je     c0014dd6 <Vm::faultHandler(regs*)+0x617>
c0014dd3:	ef                   	out    dx,eax
c0014dd4:	eb cf                	jmp    c0014da5 <Vm::faultHandler(regs*)+0x5e6>
c0014dd6:	66 ef                	out    dx,ax
c0014dd8:	eb cb                	jmp    c0014da5 <Vm::faultHandler(regs*)+0x5e6>
c0014dda:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0014de1:	83 ec 0c             	sub    esp,0xc
c0014de4:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0014de8:	50                   	push   eax
c0014de9:	e8 13 f5 ff ff       	call   c0014301 <Vm::inbv(unsigned short)>
c0014dee:	0f b6 c0             	movzx  eax,al
c0014df1:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0014df4:	eb 1f                	jmp    c0014e15 <Vm::faultHandler(regs*)+0x656>
c0014df6:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0014df9:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014dfe:	74 03                	je     c0014e03 <Vm::faultHandler(regs*)+0x644>
c0014e00:	ed                   	in     eax,dx
c0014e01:	eb 0d                	jmp    c0014e10 <Vm::faultHandler(regs*)+0x651>
c0014e03:	66 ed                	in     ax,dx
c0014e05:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0014e08:	0f b7 c0             	movzx  eax,ax
c0014e0b:	66 31 d2             	xor    dx,dx
c0014e0e:	09 d0                	or     eax,edx
c0014e10:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0014e13:	eb 1a                	jmp    c0014e2f <Vm::faultHandler(regs*)+0x670>
c0014e15:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014e18:	83 c4 10             	add    esp,0x10
c0014e1b:	eb 15                	jmp    c0014e32 <Vm::faultHandler(regs*)+0x673>
c0014e1d:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0014e20:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0014e23:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014e28:	74 03                	je     c0014e2d <Vm::faultHandler(regs*)+0x66e>
c0014e2a:	ef                   	out    dx,eax
c0014e2b:	eb 02                	jmp    c0014e2f <Vm::faultHandler(regs*)+0x670>
c0014e2d:	66 ef                	out    dx,ax
c0014e2f:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014e32:	b0 01                	mov    al,0x1
c0014e34:	eb 56                	jmp    c0014e8c <Vm::faultHandler(regs*)+0x6cd>
c0014e36:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0014e3a:	50                   	push   eax
c0014e3b:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0014e3f:	50                   	push   eax
c0014e40:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0014e44:	50                   	push   eax
c0014e45:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0014e49:	50                   	push   eax
c0014e4a:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014e4e:	50                   	push   eax
c0014e4f:	52                   	push   edx
c0014e50:	52                   	push   edx
c0014e51:	68 7f f4 01 c0       	push   0xc001f47f
c0014e56:	e8 f7 56 ff ff       	call   c000a552 <Dbg::kprintf(char const*, ...)>
c0014e5b:	83 c4 20             	add    esp,0x20
c0014e5e:	83 ec 0c             	sub    esp,0xc
c0014e61:	6a 60                	push   0x60
c0014e63:	e8 99 f4 ff ff       	call   c0014301 <Vm::inbv(unsigned short)>
c0014e68:	83 c4 10             	add    esp,0x10
c0014e6b:	3c 1c                	cmp    al,0x1c
c0014e6d:	74 04                	je     c0014e73 <Vm::faultHandler(regs*)+0x6b4>
c0014e6f:	3c 5a                	cmp    al,0x5a
c0014e71:	75 eb                	jne    c0014e5e <Vm::faultHandler(regs*)+0x69f>
c0014e73:	3c 5a                	cmp    al,0x5a
c0014e75:	74 04                	je     c0014e7b <Vm::faultHandler(regs*)+0x6bc>
c0014e77:	3c 1c                	cmp    al,0x1c
c0014e79:	75 0f                	jne    c0014e8a <Vm::faultHandler(regs*)+0x6cb>
c0014e7b:	83 ec 0c             	sub    esp,0xc
c0014e7e:	6a 60                	push   0x60
c0014e80:	e8 7c f4 ff ff       	call   c0014301 <Vm::inbv(unsigned short)>
c0014e85:	83 c4 10             	add    esp,0x10
c0014e88:	eb e9                	jmp    c0014e73 <Vm::faultHandler(regs*)+0x6b4>
c0014e8a:	31 c0                	xor    eax,eax
c0014e8c:	83 c4 1c             	add    esp,0x1c
c0014e8f:	5b                   	pop    ebx
c0014e90:	5e                   	pop    esi
c0014e91:	5f                   	pop    edi
c0014e92:	5d                   	pop    ebp
c0014e93:	c3                   	ret    

c0014e94 <noCopro(unsigned long)>:
c0014e94:	c3                   	ret    

c0014e95 <nmiHandler(regs*, void*)>:
c0014e95:	83 ec 0c             	sub    esp,0xc
c0014e98:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c0014e9d:	83 ec 0c             	sub    esp,0xc
c0014ea0:	50                   	push   eax
c0014ea1:	e8 34 21 ff ff       	call   c0006fda <Computer::handleNMI()>
c0014ea6:	83 c4 10             	add    esp,0x10
c0014ea9:	90                   	nop
c0014eaa:	83 c4 0c             	add    esp,0xc
c0014ead:	c3                   	ret    

c0014eae <doubleFault(regs*, void*)>:
c0014eae:	55                   	push   ebp
c0014eaf:	89 e5                	mov    ebp,esp
c0014eb1:	83 ec 08             	sub    esp,0x8
c0014eb4:	83 ec 0c             	sub    esp,0xc
c0014eb7:	68 dc f4 01 c0       	push   0xc001f4dc
c0014ebc:	e8 e6 b3 ff ff       	call   c00102a7 <KePanic(char const*)>
c0014ec1:	83 c4 10             	add    esp,0x10
c0014ec4:	90                   	nop
c0014ec5:	c9                   	leave  
c0014ec6:	c3                   	ret    

c0014ec7 <displayDebugInfo(regs*)>:
c0014ec7:	83 ec 1c             	sub    esp,0x1c
c0014eca:	0f 20 c0             	mov    eax,cr0
c0014ecd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014ed1:	0f 20 d0             	mov    eax,cr2
c0014ed4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014ed8:	0f 20 d8             	mov    eax,cr3
c0014edb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014edf:	0f 20 e0             	mov    eax,cr4
c0014ee2:	89 04 24             	mov    DWORD PTR [esp],eax
c0014ee5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014ee9:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0014eec:	83 ec 08             	sub    esp,0x8
c0014eef:	50                   	push   eax
c0014ef0:	68 f8 f4 01 c0       	push   0xc001f4f8
c0014ef5:	e8 58 56 ff ff       	call   c000a552 <Dbg::kprintf(char const*, ...)>
c0014efa:	83 c4 10             	add    esp,0x10
c0014efd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014f01:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0014f04:	83 ec 08             	sub    esp,0x8
c0014f07:	50                   	push   eax
c0014f08:	68 e9 f4 01 c0       	push   0xc001f4e9
c0014f0d:	e8 40 56 ff ff       	call   c000a552 <Dbg::kprintf(char const*, ...)>
c0014f12:	83 c4 10             	add    esp,0x10
c0014f15:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014f19:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0014f1c:	83 ec 08             	sub    esp,0x8
c0014f1f:	50                   	push   eax
c0014f20:	68 f4 f4 01 c0       	push   0xc001f4f4
c0014f25:	e8 28 56 ff ff       	call   c000a552 <Dbg::kprintf(char const*, ...)>
c0014f2a:	83 c4 10             	add    esp,0x10
c0014f2d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014f31:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014f34:	83 ec 08             	sub    esp,0x8
c0014f37:	50                   	push   eax
c0014f38:	68 03 f5 01 c0       	push   0xc001f503
c0014f3d:	e8 10 56 ff ff       	call   c000a552 <Dbg::kprintf(char const*, ...)>
c0014f42:	83 c4 10             	add    esp,0x10
c0014f45:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014f49:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c0014f4c:	83 ec 08             	sub    esp,0x8
c0014f4f:	50                   	push   eax
c0014f50:	68 0e f5 01 c0       	push   0xc001f50e
c0014f55:	e8 f8 55 ff ff       	call   c000a552 <Dbg::kprintf(char const*, ...)>
c0014f5a:	83 c4 10             	add    esp,0x10
c0014f5d:	83 ec 08             	sub    esp,0x8
c0014f60:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014f64:	68 19 f5 01 c0       	push   0xc001f519
c0014f69:	e8 e4 55 ff ff       	call   c000a552 <Dbg::kprintf(char const*, ...)>
c0014f6e:	83 c4 10             	add    esp,0x10
c0014f71:	83 ec 08             	sub    esp,0x8
c0014f74:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0014f78:	68 24 f5 01 c0       	push   0xc001f524
c0014f7d:	e8 d0 55 ff ff       	call   c000a552 <Dbg::kprintf(char const*, ...)>
c0014f82:	83 c4 10             	add    esp,0x10
c0014f85:	a1 90 61 02 c0       	mov    eax,ds:0xc0026190
c0014f8a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014f90:	83 ec 0c             	sub    esp,0xc
c0014f93:	50                   	push   eax
c0014f94:	e8 5e 34 ff ff       	call   c00083f7 <setActiveTerminal(VgaText*)>
c0014f99:	83 c4 10             	add    esp,0x10
c0014f9c:	a1 90 61 02 c0       	mov    eax,ds:0xc0026190
c0014fa1:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014fa7:	83 ec 08             	sub    esp,0x8
c0014faa:	68 2f f5 01 c0       	push   0xc001f52f
c0014faf:	50                   	push   eax
c0014fb0:	e8 81 37 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0014fb5:	83 c4 10             	add    esp,0x10
c0014fb8:	a1 90 61 02 c0       	mov    eax,ds:0xc0026190
c0014fbd:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014fc3:	ba 00 20 00 c2       	mov    edx,0xc2002000
c0014fc8:	8b 12                	mov    edx,DWORD PTR [edx]
c0014fca:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0014fcd:	83 c2 0c             	add    edx,0xc
c0014fd0:	83 ec 08             	sub    esp,0x8
c0014fd3:	52                   	push   edx
c0014fd4:	50                   	push   eax
c0014fd5:	e8 5c 37 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0014fda:	83 c4 10             	add    esp,0x10
c0014fdd:	a1 90 61 02 c0       	mov    eax,ds:0xc0026190
c0014fe2:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014fe8:	83 ec 08             	sub    esp,0x8
c0014feb:	68 38 f5 01 c0       	push   0xc001f538
c0014ff0:	50                   	push   eax
c0014ff1:	e8 40 37 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0014ff6:	83 c4 10             	add    esp,0x10
c0014ff9:	a1 90 61 02 c0       	mov    eax,ds:0xc0026190
c0014ffe:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015004:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015008:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c001500b:	83 ec 08             	sub    esp,0x8
c001500e:	52                   	push   edx
c001500f:	50                   	push   eax
c0015010:	e8 db 36 ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c0015015:	83 c4 10             	add    esp,0x10
c0015018:	a1 90 61 02 c0       	mov    eax,ds:0xc0026190
c001501d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015023:	83 ec 08             	sub    esp,0x8
c0015026:	68 40 f5 01 c0       	push   0xc001f540
c001502b:	50                   	push   eax
c001502c:	e8 05 37 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0015031:	83 c4 10             	add    esp,0x10
c0015034:	a1 90 61 02 c0       	mov    eax,ds:0xc0026190
c0015039:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001503f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015043:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c0015046:	83 ec 08             	sub    esp,0x8
c0015049:	52                   	push   edx
c001504a:	50                   	push   eax
c001504b:	e8 a0 36 ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c0015050:	83 c4 10             	add    esp,0x10
c0015053:	a1 90 61 02 c0       	mov    eax,ds:0xc0026190
c0015058:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001505e:	83 ec 08             	sub    esp,0x8
c0015061:	68 48 f5 01 c0       	push   0xc001f548
c0015066:	50                   	push   eax
c0015067:	e8 ca 36 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c001506c:	83 c4 10             	add    esp,0x10
c001506f:	a1 90 61 02 c0       	mov    eax,ds:0xc0026190
c0015074:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001507a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001507e:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c0015081:	83 ec 08             	sub    esp,0x8
c0015084:	52                   	push   edx
c0015085:	50                   	push   eax
c0015086:	e8 65 36 ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c001508b:	83 c4 10             	add    esp,0x10
c001508e:	a1 90 61 02 c0       	mov    eax,ds:0xc0026190
c0015093:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015099:	83 ec 08             	sub    esp,0x8
c001509c:	68 50 f5 01 c0       	push   0xc001f550
c00150a1:	50                   	push   eax
c00150a2:	e8 8f 36 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c00150a7:	83 c4 10             	add    esp,0x10
c00150aa:	a1 90 61 02 c0       	mov    eax,ds:0xc0026190
c00150af:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00150b5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00150b9:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c00150bc:	83 ec 08             	sub    esp,0x8
c00150bf:	52                   	push   edx
c00150c0:	50                   	push   eax
c00150c1:	e8 2a 36 ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c00150c6:	83 c4 10             	add    esp,0x10
c00150c9:	a1 90 61 02 c0       	mov    eax,ds:0xc0026190
c00150ce:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00150d4:	83 ec 08             	sub    esp,0x8
c00150d7:	68 58 f5 01 c0       	push   0xc001f558
c00150dc:	50                   	push   eax
c00150dd:	e8 54 36 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c00150e2:	83 c4 10             	add    esp,0x10
c00150e5:	a1 90 61 02 c0       	mov    eax,ds:0xc0026190
c00150ea:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00150f0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00150f4:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c00150f7:	83 ec 08             	sub    esp,0x8
c00150fa:	52                   	push   edx
c00150fb:	50                   	push   eax
c00150fc:	e8 ef 35 ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c0015101:	83 c4 10             	add    esp,0x10
c0015104:	a1 90 61 02 c0       	mov    eax,ds:0xc0026190
c0015109:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001510f:	83 ec 08             	sub    esp,0x8
c0015112:	68 60 f5 01 c0       	push   0xc001f560
c0015117:	50                   	push   eax
c0015118:	e8 19 36 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c001511d:	83 c4 10             	add    esp,0x10
c0015120:	a1 90 61 02 c0       	mov    eax,ds:0xc0026190
c0015125:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001512b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001512f:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c0015132:	83 ec 08             	sub    esp,0x8
c0015135:	52                   	push   edx
c0015136:	50                   	push   eax
c0015137:	e8 b4 35 ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c001513c:	83 c4 10             	add    esp,0x10
c001513f:	a1 90 61 02 c0       	mov    eax,ds:0xc0026190
c0015144:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001514a:	83 ec 08             	sub    esp,0x8
c001514d:	68 68 f5 01 c0       	push   0xc001f568
c0015152:	50                   	push   eax
c0015153:	e8 de 35 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0015158:	83 c4 10             	add    esp,0x10
c001515b:	a1 90 61 02 c0       	mov    eax,ds:0xc0026190
c0015160:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015166:	83 ec 08             	sub    esp,0x8
c0015169:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001516d:	50                   	push   eax
c001516e:	e8 7d 35 ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c0015173:	83 c4 10             	add    esp,0x10
c0015176:	a1 90 61 02 c0       	mov    eax,ds:0xc0026190
c001517b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015181:	83 ec 08             	sub    esp,0x8
c0015184:	68 71 f5 01 c0       	push   0xc001f571
c0015189:	50                   	push   eax
c001518a:	e8 a7 35 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c001518f:	83 c4 10             	add    esp,0x10
c0015192:	a1 90 61 02 c0       	mov    eax,ds:0xc0026190
c0015197:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001519d:	83 ec 08             	sub    esp,0x8
c00151a0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00151a4:	50                   	push   eax
c00151a5:	e8 46 35 ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c00151aa:	83 c4 10             	add    esp,0x10
c00151ad:	a1 90 61 02 c0       	mov    eax,ds:0xc0026190
c00151b2:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00151b8:	83 ec 08             	sub    esp,0x8
c00151bb:	68 79 f5 01 c0       	push   0xc001f579
c00151c0:	50                   	push   eax
c00151c1:	e8 70 35 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c00151c6:	83 c4 10             	add    esp,0x10
c00151c9:	a1 90 61 02 c0       	mov    eax,ds:0xc0026190
c00151ce:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00151d4:	83 ec 08             	sub    esp,0x8
c00151d7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00151db:	50                   	push   eax
c00151dc:	e8 0f 35 ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c00151e1:	83 c4 10             	add    esp,0x10
c00151e4:	fa                   	cli    
c00151e5:	f4                   	hlt    
c00151e6:	eb fe                	jmp    c00151e6 <displayDebugInfo(regs*)+0x31f>

c00151e8 <HalSystemIdle()>:
c00151e8:	56                   	push   esi
c00151e9:	53                   	push   ebx
c00151ea:	83 ec 14             	sub    esp,0x14
c00151ed:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c00151f2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00151f8:	8a 80 8e 11 00 00    	mov    al,BYTE PTR [eax+0x118e]
c00151fe:	83 e0 04             	and    eax,0x4
c0015201:	84 c0                	test   al,al
c0015203:	0f 95 c0             	setne  al
c0015206:	84 c0                	test   al,al
c0015208:	74 4c                	je     c0015256 <HalSystemIdle()+0x6e>
c001520a:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c001520f:	83 ec 08             	sub    esp,0x8
c0015212:	68 e1 00 00 00       	push   0xe1
c0015217:	50                   	push   eax
c0015218:	e8 d5 1b ff ff       	call   c0006df2 <Computer::rdmsr(unsigned int)>
c001521d:	83 c4 10             	add    esp,0x10
c0015220:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015224:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0015228:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c001522d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0015231:	83 e2 02             	and    edx,0x2
c0015234:	89 d3                	mov    ebx,edx
c0015236:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001523a:	83 e2 00             	and    edx,0x0
c001523d:	89 d6                	mov    esi,edx
c001523f:	56                   	push   esi
c0015240:	53                   	push   ebx
c0015241:	68 e1 00 00 00       	push   0xe1
c0015246:	50                   	push   eax
c0015247:	e8 d2 1b ff ff       	call   c0006e1e <Computer::wrmsr(unsigned int, unsigned long long)>
c001524c:	83 c4 10             	add    esp,0x10
c001524f:	e8 40 af fe ff       	call   c0000194 <doTPAUSE>
c0015254:	eb 01                	jmp    c0015257 <HalSystemIdle()+0x6f>
c0015256:	f4                   	hlt    
c0015257:	90                   	nop
c0015258:	83 c4 14             	add    esp,0x14
c001525b:	5b                   	pop    ebx
c001525c:	5e                   	pop    esi
c001525d:	c3                   	ret    

c001525e <displayProgramFault(char const*)>:
c001525e:	83 ec 0c             	sub    esp,0xc
c0015261:	83 ec 0c             	sub    esp,0xc
c0015264:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015268:	e8 e5 52 ff ff       	call   c000a552 <Dbg::kprintf(char const*, ...)>
c001526d:	83 c4 10             	add    esp,0x10
c0015270:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0015275:	8b 00                	mov    eax,DWORD PTR [eax]
c0015277:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001527a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015280:	85 c0                	test   eax,eax
c0015282:	74 21                	je     c00152a5 <displayProgramFault(char const*)+0x47>
c0015284:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0015289:	8b 00                	mov    eax,DWORD PTR [eax]
c001528b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001528e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015294:	6a 04                	push   0x4
c0015296:	6a 0f                	push   0xf
c0015298:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001529c:	50                   	push   eax
c001529d:	e8 06 35 ff ff       	call   c00087a8 <VgaText::puts(char const*, VgaColour, VgaColour)>
c00152a2:	83 c4 10             	add    esp,0x10
c00152a5:	90                   	nop
c00152a6:	83 c4 0c             	add    esp,0xc
c00152a9:	c3                   	ret    

c00152aa <gpFault(regs*, void*)>:
c00152aa:	83 ec 1c             	sub    esp,0x1c
c00152ad:	c7 05 10 62 02 c0 bf 47 01 c0 	mov    DWORD PTR ds:0xc0026210,0xc00147bf
c00152b7:	a1 10 62 02 c0       	mov    eax,ds:0xc0026210
c00152bc:	85 c0                	test   eax,eax
c00152be:	74 1c                	je     c00152dc <gpFault(regs*, void*)+0x32>
c00152c0:	a1 10 62 02 c0       	mov    eax,ds:0xc0026210
c00152c5:	83 ec 0c             	sub    esp,0xc
c00152c8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00152cc:	ff d0                	call   eax
c00152ce:	83 c4 10             	add    esp,0x10
c00152d1:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00152d5:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00152da:	75 2e                	jne    c001530a <gpFault(regs*, void*)+0x60>
c00152dc:	83 ec 0c             	sub    esp,0xc
c00152df:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00152e3:	e8 df fb ff ff       	call   c0014ec7 <displayDebugInfo(regs*)>
c00152e8:	83 c4 10             	add    esp,0x10
c00152eb:	83 ec 0c             	sub    esp,0xc
c00152ee:	68 81 f5 01 c0       	push   0xc001f581
c00152f3:	e8 66 ff ff ff       	call   c001525e <displayProgramFault(char const*)>
c00152f8:	83 c4 10             	add    esp,0x10
c00152fb:	83 ec 0c             	sub    esp,0xc
c00152fe:	6a 00                	push   0x0
c0015300:	e8 af ee ff ff       	call   c00141b4 <Thr::terminateFromIRQ(int)>
c0015305:	83 c4 10             	add    esp,0x10
c0015308:	eb 01                	jmp    c001530b <gpFault(regs*, void*)+0x61>
c001530a:	90                   	nop
c001530b:	83 c4 1c             	add    esp,0x1c
c001530e:	c3                   	ret    

c001530f <pgFault(regs*, void*)>:
c001530f:	83 ec 1c             	sub    esp,0x1c
c0015312:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015316:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0015319:	0f 20 d0             	mov    eax,cr2
c001531c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015320:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015324:	83 ec 04             	sub    esp,0x4
c0015327:	52                   	push   edx
c0015328:	50                   	push   eax
c0015329:	68 60 f6 01 c0       	push   0xc001f660
c001532e:	e8 1f 52 ff ff       	call   c000a552 <Dbg::kprintf(char const*, ...)>
c0015333:	83 c4 10             	add    esp,0x10
c0015336:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001533b:	8b 00                	mov    eax,DWORD PTR [eax]
c001533d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015340:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0015346:	0f 20 d2             	mov    edx,cr2
c0015349:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001534d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015351:	83 ec 08             	sub    esp,0x8
c0015354:	52                   	push   edx
c0015355:	50                   	push   eax
c0015356:	e8 ed 4d ff ff       	call   c000a148 <VAS::tryLoadBackOffDisk(unsigned long)>
c001535b:	83 c4 10             	add    esp,0x10
c001535e:	84 c0                	test   al,al
c0015360:	75 2e                	jne    c0015390 <pgFault(regs*, void*)+0x81>
c0015362:	83 ec 0c             	sub    esp,0xc
c0015365:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015369:	e8 59 fb ff ff       	call   c0014ec7 <displayDebugInfo(regs*)>
c001536e:	83 c4 10             	add    esp,0x10
c0015371:	83 ec 0c             	sub    esp,0xc
c0015374:	68 9a f5 01 c0       	push   0xc001f59a
c0015379:	e8 e0 fe ff ff       	call   c001525e <displayProgramFault(char const*)>
c001537e:	83 c4 10             	add    esp,0x10
c0015381:	83 ec 0c             	sub    esp,0xc
c0015384:	6a 00                	push   0x0
c0015386:	e8 29 ee ff ff       	call   c00141b4 <Thr::terminateFromIRQ(int)>
c001538b:	83 c4 10             	add    esp,0x10
c001538e:	eb 01                	jmp    c0015391 <pgFault(regs*, void*)+0x82>
c0015390:	90                   	nop
c0015391:	83 c4 1c             	add    esp,0x1c
c0015394:	c3                   	ret    

c0015395 <otherISRHandler(regs*, void*)>:
c0015395:	83 ec 0c             	sub    esp,0xc
c0015398:	83 ec 0c             	sub    esp,0xc
c001539b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001539f:	e8 23 fb ff ff       	call   c0014ec7 <displayDebugInfo(regs*)>
c00153a4:	83 c4 10             	add    esp,0x10
c00153a7:	83 ec 0c             	sub    esp,0xc
c00153aa:	68 88 f6 01 c0       	push   0xc001f688
c00153af:	e8 aa fe ff ff       	call   c001525e <displayProgramFault(char const*)>
c00153b4:	83 c4 10             	add    esp,0x10
c00153b7:	83 ec 0c             	sub    esp,0xc
c00153ba:	6a 00                	push   0x0
c00153bc:	e8 f3 ed ff ff       	call   c00141b4 <Thr::terminateFromIRQ(int)>
c00153c1:	83 c4 10             	add    esp,0x10
c00153c4:	90                   	nop
c00153c5:	83 c4 0c             	add    esp,0xc
c00153c8:	c3                   	ret    

c00153c9 <opcodeFault(regs*, void*)>:
c00153c9:	55                   	push   ebp
c00153ca:	89 e5                	mov    ebp,esp
c00153cc:	83 ec 08             	sub    esp,0x8
c00153cf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153d2:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00153d5:	83 ec 08             	sub    esp,0x8
c00153d8:	50                   	push   eax
c00153d9:	68 a5 f5 01 c0       	push   0xc001f5a5
c00153de:	e8 6f 51 ff ff       	call   c000a552 <Dbg::kprintf(char const*, ...)>
c00153e3:	83 c4 10             	add    esp,0x10
c00153e6:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c00153eb:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00153f1:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c00153f7:	84 c0                	test   al,al
c00153f9:	74 21                	je     c001541c <opcodeFault(regs*, void*)+0x53>
c00153fb:	83 ec 0c             	sub    esp,0xc
c00153fe:	68 b0 f6 01 c0       	push   0xc001f6b0
c0015403:	e8 4a 51 ff ff       	call   c000a552 <Dbg::kprintf(char const*, ...)>
c0015408:	83 c4 10             	add    esp,0x10
c001540b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001540e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015411:	8d 50 19             	lea    edx,[eax+0x19]
c0015414:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015417:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001541a:	eb 2b                	jmp    c0015447 <opcodeFault(regs*, void*)+0x7e>
c001541c:	83 ec 0c             	sub    esp,0xc
c001541f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0015422:	e8 a0 fa ff ff       	call   c0014ec7 <displayDebugInfo(regs*)>
c0015427:	83 c4 10             	add    esp,0x10
c001542a:	83 ec 0c             	sub    esp,0xc
c001542d:	68 b3 f5 01 c0       	push   0xc001f5b3
c0015432:	e8 27 fe ff ff       	call   c001525e <displayProgramFault(char const*)>
c0015437:	83 c4 10             	add    esp,0x10
c001543a:	83 ec 0c             	sub    esp,0xc
c001543d:	6a 00                	push   0x0
c001543f:	e8 70 ed ff ff       	call   c00141b4 <Thr::terminateFromIRQ(int)>
c0015444:	83 c4 10             	add    esp,0x10
c0015447:	c9                   	leave  
c0015448:	c3                   	ret    

c0015449 <i386SaveCoprocessor(void*)>:
c0015449:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001544d:	83 c0 3f             	add    eax,0x3f
c0015450:	83 e0 c0             	and    eax,0xffffffc0
c0015453:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015457:	ff 25 0c 62 02 c0    	jmp    DWORD PTR ds:0xc002620c

c001545d <i386LoadCoprocessor(void*)>:
c001545d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015461:	83 c0 3f             	add    eax,0x3f
c0015464:	83 e0 c0             	and    eax,0xffffffc0
c0015467:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001546b:	ff 25 08 62 02 c0    	jmp    DWORD PTR ds:0xc0026208

c0015471 <x87EmulHandler(regs*, void*)>:
c0015471:	53                   	push   ebx
c0015472:	83 ec 08             	sub    esp,0x8
c0015475:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001547a:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c001547e:	74 10                	je     c0015490 <x87EmulHandler(regs*, void*)+0x1f>
c0015480:	83 ec 0c             	sub    esp,0xc
c0015483:	68 c0 f5 01 c0       	push   0xc001f5c0
c0015488:	e8 1a ae ff ff       	call   c00102a7 <KePanic(char const*)>
c001548d:	83 c4 10             	add    esp,0x10
c0015490:	0f 20 c0             	mov    eax,cr0
c0015493:	a8 08                	test   al,0x8
c0015495:	74 59                	je     c00154f0 <x87EmulHandler(regs*, void*)+0x7f>
c0015497:	0f 06                	clts   
c0015499:	a1 04 62 02 c0       	mov    eax,ds:0xc0026204
c001549e:	85 c0                	test   eax,eax
c00154a0:	74 0e                	je     c00154b0 <x87EmulHandler(regs*, void*)+0x3f>
c00154a2:	83 ec 0c             	sub    esp,0xc
c00154a5:	ff 70 55             	push   DWORD PTR [eax+0x55]
c00154a8:	e8 9c ff ff ff       	call   c0015449 <i386SaveCoprocessor(void*)>
c00154ad:	83 c4 10             	add    esp,0x10
c00154b0:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c00154b6:	83 7b 55 00          	cmp    DWORD PTR [ebx+0x55],0x0
c00154ba:	75 12                	jne    c00154ce <x87EmulHandler(regs*, void*)+0x5d>
c00154bc:	83 ec 0c             	sub    esp,0xc
c00154bf:	68 40 02 00 00       	push   0x240
c00154c4:	e8 f0 22 ff ff       	call   c00077b9 <malloc>
c00154c9:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c00154cc:	eb 10                	jmp    c00154de <x87EmulHandler(regs*, void*)+0x6d>
c00154ce:	83 ec 0c             	sub    esp,0xc
c00154d1:	a1 04 62 02 c0       	mov    eax,ds:0xc0026204
c00154d6:	ff 70 55             	push   DWORD PTR [eax+0x55]
c00154d9:	e8 7f ff ff ff       	call   c001545d <i386LoadCoprocessor(void*)>
c00154de:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00154e3:	83 c4 10             	add    esp,0x10
c00154e6:	a3 04 62 02 c0       	mov    ds:0xc0026204,eax
c00154eb:	83 c4 08             	add    esp,0x8
c00154ee:	5b                   	pop    ebx
c00154ef:	c3                   	ret    
c00154f0:	83 ec 0c             	sub    esp,0xc
c00154f3:	68 d4 f5 01 c0       	push   0xc001f5d4
c00154f8:	e8 55 50 ff ff       	call   c000a552 <Dbg::kprintf(char const*, ...)>
c00154fd:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0015505:	83 c4 18             	add    esp,0x18
c0015508:	5b                   	pop    ebx
c0015509:	e9 a6 ec ff ff       	jmp    c00141b4 <Thr::terminateFromIRQ(int)>

c001550e <HalInitialiseCoprocessor()>:
c001550e:	83 ec 10             	sub    esp,0x10
c0015511:	c7 05 04 62 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026204,0x0
c001551b:	6a 00                	push   0x0
c001551d:	68 71 54 01 c0       	push   0xc0015471
c0015522:	6a 07                	push   0x7
c0015524:	e8 e7 69 ff ff       	call   c000bf10 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015529:	e8 52 6d 00 00       	call   c001c280 <avxDetect>
c001552e:	83 c4 10             	add    esp,0x10
c0015531:	85 c0                	test   eax,eax
c0015533:	74 1c                	je     c0015551 <HalInitialiseCoprocessor()+0x43>
c0015535:	c7 05 0c 62 02 c0 aa c2 01 c0 	mov    DWORD PTR ds:0xc002620c,0xc001c2aa
c001553f:	c7 05 08 62 02 c0 bb c2 01 c0 	mov    DWORD PTR ds:0xc0026208,0xc001c2bb
c0015549:	83 c4 0c             	add    esp,0xc
c001554c:	e9 7b 6d 00 00       	jmp    c001c2cc <avxInit>
c0015551:	e8 0a 70 00 00       	call   c001c560 <absolutelyNoChanceInHell>
c0015556:	85 c0                	test   eax,eax
c0015558:	74 1c                	je     c0015576 <HalInitialiseCoprocessor()+0x68>
c001555a:	c7 05 0c 62 02 c0 78 c5 01 c0 	mov    DWORD PTR ds:0xc002620c,0xc001c578
c0015564:	c7 05 08 62 02 c0 80 c5 01 c0 	mov    DWORD PTR ds:0xc0026208,0xc001c580
c001556e:	83 c4 0c             	add    esp,0xc
c0015571:	e9 12 70 00 00       	jmp    c001c588 <sseInit>
c0015576:	e8 2b 70 00 00       	call   c001c5a6 <x87Detect>
c001557b:	85 c0                	test   eax,eax
c001557d:	74 1c                	je     c001559b <HalInitialiseCoprocessor()+0x8d>
c001557f:	c7 05 0c 62 02 c0 c1 c5 01 c0 	mov    DWORD PTR ds:0xc002620c,0xc001c5c1
c0015589:	c7 05 08 62 02 c0 c8 c5 01 c0 	mov    DWORD PTR ds:0xc0026208,0xc001c5c8
c0015593:	83 c4 0c             	add    esp,0xc
c0015596:	e9 34 70 00 00       	jmp    c001c5cf <x87Init>
c001559b:	c7 05 0c 62 02 c0 94 4e 01 c0 	mov    DWORD PTR ds:0xc002620c,0xc0014e94
c00155a5:	c7 05 08 62 02 c0 94 4e 01 c0 	mov    DWORD PTR ds:0xc0026208,0xc0014e94
c00155af:	0f 20 c0             	mov    eax,cr0
c00155b2:	83 c8 04             	or     eax,0x4
c00155b5:	0f 22 c0             	mov    cr0,eax
c00155b8:	83 c4 0c             	add    esp,0xc
c00155bb:	c3                   	ret    

c00155bc <HalPanic(char const*)>:
c00155bc:	53                   	push   ebx
c00155bd:	83 ec 10             	sub    esp,0x10
c00155c0:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00155c4:	fa                   	cli    
c00155c5:	53                   	push   ebx
c00155c6:	68 ea f5 01 c0       	push   0xc001f5ea
c00155cb:	e8 82 4f ff ff       	call   c000a552 <Dbg::kprintf(char const*, ...)>
c00155d0:	83 c4 0c             	add    esp,0xc
c00155d3:	6a 01                	push   0x1
c00155d5:	6a 0f                	push   0xf
c00155d7:	ff 35 04 2f 02 c0    	push   DWORD PTR ds:0xc0022f04
c00155dd:	e8 68 2c ff ff       	call   c000824a <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00155e2:	58                   	pop    eax
c00155e3:	ff 35 04 2f 02 c0    	push   DWORD PTR ds:0xc0022f04
c00155e9:	e8 54 2e ff ff       	call   c0008442 <VgaText::clearScreen()>
c00155ee:	5a                   	pop    edx
c00155ef:	59                   	pop    ecx
c00155f0:	68 c8 df 01 c0       	push   0xc001dfc8
c00155f5:	ff 35 04 2f 02 c0    	push   DWORD PTR ds:0xc0022f04
c00155fb:	e8 82 2c ff ff       	call   c0008282 <VgaText::setTitle(char*)>
c0015600:	83 c4 0c             	add    esp,0xc
c0015603:	6a 01                	push   0x1
c0015605:	6a 0f                	push   0xf
c0015607:	ff 35 04 2f 02 c0    	push   DWORD PTR ds:0xc0022f04
c001560d:	e8 38 2c ff ff       	call   c000824a <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0015612:	58                   	pop    eax
c0015613:	5a                   	pop    edx
c0015614:	68 03 f6 01 c0       	push   0xc001f603
c0015619:	ff 35 04 2f 02 c0    	push   DWORD PTR ds:0xc0022f04
c001561f:	e8 12 31 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0015624:	83 c4 0c             	add    esp,0xc
c0015627:	6a 0f                	push   0xf
c0015629:	6a 01                	push   0x1
c001562b:	ff 35 04 2f 02 c0    	push   DWORD PTR ds:0xc0022f04
c0015631:	e8 14 2c ff ff       	call   c000824a <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0015636:	59                   	pop    ecx
c0015637:	58                   	pop    eax
c0015638:	68 0c f6 01 c0       	push   0xc001f60c
c001563d:	ff 35 04 2f 02 c0    	push   DWORD PTR ds:0xc0022f04
c0015643:	e8 ee 30 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0015648:	83 c4 0c             	add    esp,0xc
c001564b:	6a 01                	push   0x1
c001564d:	6a 0f                	push   0xf
c001564f:	ff 35 04 2f 02 c0    	push   DWORD PTR ds:0xc0022f04
c0015655:	e8 f0 2b ff ff       	call   c000824a <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001565a:	58                   	pop    eax
c001565b:	5a                   	pop    edx
c001565c:	68 50 f6 01 c0       	push   0xc001f650
c0015661:	ff 35 04 2f 02 c0    	push   DWORD PTR ds:0xc0022f04
c0015667:	e8 ca 30 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c001566c:	59                   	pop    ecx
c001566d:	58                   	pop    eax
c001566e:	68 19 f6 01 c0       	push   0xc001f619
c0015673:	ff 35 04 2f 02 c0    	push   DWORD PTR ds:0xc0022f04
c0015679:	e8 b8 30 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c001567e:	58                   	pop    eax
c001567f:	5a                   	pop    edx
c0015680:	68 53 f6 01 c0       	push   0xc001f653
c0015685:	ff 35 04 2f 02 c0    	push   DWORD PTR ds:0xc0022f04
c001568b:	e8 a6 30 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0015690:	59                   	pop    ecx
c0015691:	58                   	pop    eax
c0015692:	53                   	push   ebx
c0015693:	ff 35 04 2f 02 c0    	push   DWORD PTR ds:0xc0022f04
c0015699:	e8 98 30 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c001569e:	58                   	pop    eax
c001569f:	5a                   	pop    edx
c00156a0:	68 50 f6 01 c0       	push   0xc001f650
c00156a5:	ff 35 04 2f 02 c0    	push   DWORD PTR ds:0xc0022f04
c00156ab:	e8 86 30 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c00156b0:	83 c4 10             	add    esp,0x10
c00156b3:	eb fe                	jmp    c00156b3 <HalPanic(char const*)+0xf7>

c00156b5 <HalQueryPerformanceCounter()>:
c00156b5:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c00156ba:	31 d2                	xor    edx,edx
c00156bc:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c00156c2:	31 c0                	xor    eax,eax
c00156c4:	f6 81 8c 11 00 00 02 	test   BYTE PTR [ecx+0x118c],0x2
c00156cb:	74 02                	je     c00156cf <HalQueryPerformanceCounter()+0x1a>
c00156cd:	0f 31                	rdtsc  
c00156cf:	c3                   	ret    

c00156d0 <HalInitialise()>:
c00156d0:	53                   	push   ebx
c00156d1:	83 ec 08             	sub    esp,0x8
c00156d4:	e8 6a 6a ff ff       	call   c000c143 <setupINTS()>
c00156d9:	80 3d 80 57 02 c0 00 	cmp    BYTE PTR ds:0xc0025780,0x0
c00156e0:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c00156e5:	75 07                	jne    c00156ee <HalInitialise()+0x1e>
c00156e7:	80 a0 6c 01 00 00 fe 	and    BYTE PTR [eax+0x16c],0xfe
c00156ee:	80 a0 6c 01 00 00 fe 	and    BYTE PTR [eax+0x16c],0xfe
c00156f5:	c6 05 00 62 02 c0 00 	mov    BYTE PTR ds:0xc0026200,0x0
c00156fc:	e8 a7 02 00 00       	call   c00159a8 <picOpen()>
c0015701:	80 3d 00 62 02 c0 00 	cmp    BYTE PTR ds:0xc0026200,0x0
c0015708:	74 0a                	je     c0015714 <HalInitialise()+0x44>
c001570a:	e8 e1 01 00 00       	call   c00158f0 <picDisable()>
c001570f:	e8 dc 64 00 00       	call   c001bbf0 <apicOpen()>
c0015714:	bb 0f 00 00 00       	mov    ebx,0xf
c0015719:	50                   	push   eax
c001571a:	6a 00                	push   0x0
c001571c:	68 95 53 01 c0       	push   0xc0015395
c0015721:	6a 00                	push   0x0
c0015723:	e8 e8 67 ff ff       	call   c000bf10 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015728:	83 c4 0c             	add    esp,0xc
c001572b:	6a 00                	push   0x0
c001572d:	68 95 53 01 c0       	push   0xc0015395
c0015732:	6a 01                	push   0x1
c0015734:	e8 d7 67 ff ff       	call   c000bf10 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015739:	83 c4 0c             	add    esp,0xc
c001573c:	6a 00                	push   0x0
c001573e:	68 95 4e 01 c0       	push   0xc0014e95
c0015743:	6a 02                	push   0x2
c0015745:	e8 c6 67 ff ff       	call   c000bf10 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001574a:	83 c4 0c             	add    esp,0xc
c001574d:	6a 00                	push   0x0
c001574f:	68 95 53 01 c0       	push   0xc0015395
c0015754:	6a 03                	push   0x3
c0015756:	e8 b5 67 ff ff       	call   c000bf10 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001575b:	83 c4 0c             	add    esp,0xc
c001575e:	6a 00                	push   0x0
c0015760:	68 95 53 01 c0       	push   0xc0015395
c0015765:	6a 04                	push   0x4
c0015767:	e8 a4 67 ff ff       	call   c000bf10 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001576c:	83 c4 0c             	add    esp,0xc
c001576f:	6a 00                	push   0x0
c0015771:	68 95 53 01 c0       	push   0xc0015395
c0015776:	6a 05                	push   0x5
c0015778:	e8 93 67 ff ff       	call   c000bf10 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001577d:	83 c4 0c             	add    esp,0xc
c0015780:	6a 00                	push   0x0
c0015782:	68 c9 53 01 c0       	push   0xc00153c9
c0015787:	6a 06                	push   0x6
c0015789:	e8 82 67 ff ff       	call   c000bf10 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001578e:	83 c4 0c             	add    esp,0xc
c0015791:	6a 00                	push   0x0
c0015793:	68 ae 4e 01 c0       	push   0xc0014eae
c0015798:	6a 08                	push   0x8
c001579a:	e8 71 67 ff ff       	call   c000bf10 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001579f:	83 c4 0c             	add    esp,0xc
c00157a2:	6a 00                	push   0x0
c00157a4:	68 95 53 01 c0       	push   0xc0015395
c00157a9:	6a 09                	push   0x9
c00157ab:	e8 60 67 ff ff       	call   c000bf10 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00157b0:	83 c4 0c             	add    esp,0xc
c00157b3:	6a 00                	push   0x0
c00157b5:	68 95 53 01 c0       	push   0xc0015395
c00157ba:	6a 0a                	push   0xa
c00157bc:	e8 4f 67 ff ff       	call   c000bf10 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00157c1:	83 c4 0c             	add    esp,0xc
c00157c4:	6a 00                	push   0x0
c00157c6:	68 95 53 01 c0       	push   0xc0015395
c00157cb:	6a 0b                	push   0xb
c00157cd:	e8 3e 67 ff ff       	call   c000bf10 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00157d2:	83 c4 0c             	add    esp,0xc
c00157d5:	6a 00                	push   0x0
c00157d7:	68 aa 52 01 c0       	push   0xc00152aa
c00157dc:	6a 0d                	push   0xd
c00157de:	e8 2d 67 ff ff       	call   c000bf10 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00157e3:	83 c4 0c             	add    esp,0xc
c00157e6:	6a 00                	push   0x0
c00157e8:	68 0f 53 01 c0       	push   0xc001530f
c00157ed:	6a 0e                	push   0xe
c00157ef:	e8 1c 67 ff ff       	call   c000bf10 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00157f4:	83 c4 10             	add    esp,0x10
c00157f7:	50                   	push   eax
c00157f8:	6a 00                	push   0x0
c00157fa:	68 95 53 01 c0       	push   0xc0015395
c00157ff:	53                   	push   ebx
c0015800:	43                   	inc    ebx
c0015801:	e8 0a 67 ff ff       	call   c000bf10 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015806:	83 c4 10             	add    esp,0x10
c0015809:	83 fb 1e             	cmp    ebx,0x1e
c001580c:	75 e9                	jne    c00157f7 <HalInitialise()+0x127>
c001580e:	50                   	push   eax
c001580f:	6a 00                	push   0x0
c0015811:	68 42 14 01 c0       	push   0xc0011442
c0015816:	6a 60                	push   0x60
c0015818:	e8 f3 66 ff ff       	call   c000bf10 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001581d:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c0015822:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c001582c:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c0015833:	e8 81 1f ff ff       	call   c00077b9 <malloc>
c0015838:	89 04 24             	mov    DWORD PTR [esp],eax
c001583b:	89 c3                	mov    ebx,eax
c001583d:	e8 2e 09 00 00       	call   c0016170 <RTC::RTC()>
c0015842:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c001584c:	5a                   	pop    edx
c001584d:	59                   	pop    ecx
c001584e:	53                   	push   ebx
c001584f:	ff 35 b8 2e 02 c0    	push   DWORD PTR ds:0xc0022eb8
c0015855:	e8 82 61 ff ff       	call   c000b9dc <Device::addChild(Device*)>
c001585a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001585c:	6a 00                	push   0x0
c001585e:	6a 00                	push   0x0
c0015860:	6a 00                	push   0x0
c0015862:	53                   	push   ebx
c0015863:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015866:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c001586b:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
c0015871:	83 c4 28             	add    esp,0x28
c0015874:	5b                   	pop    ebx
c0015875:	c3                   	ret    

c0015876 <HalMakeBeep(int)>:
c0015876:	53                   	push   ebx
c0015877:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001587b:	85 db                	test   ebx,ebx
c001587d:	75 07                	jne    c0015886 <HalMakeBeep(int)+0x10>
c001587f:	e4 61                	in     al,0x61
c0015881:	83 e0 fc             	and    eax,0xfffffffc
c0015884:	eb 26                	jmp    c00158ac <HalMakeBeep(int)+0x36>
c0015886:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001588b:	99                   	cdq    
c001588c:	f7 fb                	idiv   ebx
c001588e:	89 c1                	mov    ecx,eax
c0015890:	b0 b6                	mov    al,0xb6
c0015892:	e6 43                	out    0x43,al
c0015894:	88 c8                	mov    al,cl
c0015896:	e6 42                	out    0x42,al
c0015898:	89 c8                	mov    eax,ecx
c001589a:	c1 e8 08             	shr    eax,0x8
c001589d:	e6 42                	out    0x42,al
c001589f:	e4 61                	in     al,0x61
c00158a1:	88 c2                	mov    dl,al
c00158a3:	83 ca 03             	or     edx,0x3
c00158a6:	38 c2                	cmp    dl,al
c00158a8:	74 04                	je     c00158ae <HalMakeBeep(int)+0x38>
c00158aa:	88 d0                	mov    al,dl
c00158ac:	e6 61                	out    0x61,al
c00158ae:	5b                   	pop    ebx
c00158af:	c3                   	ret    

c00158b0 <HalGetRand()>:
c00158b0:	31 c0                	xor    eax,eax
c00158b2:	c3                   	ret    

c00158b3 <HalEndOfInterrupt(int)>:
c00158b3:	80 3d 00 62 02 c0 00 	cmp    BYTE PTR ds:0xc0026200,0x0
c00158ba:	74 23                	je     c00158df <HalEndOfInterrupt(int)+0x2c>
c00158bc:	83 ec 14             	sub    esp,0x14
c00158bf:	6a 1b                	push   0x1b
c00158c1:	ff 35 b8 2e 02 c0    	push   DWORD PTR ds:0xc0022eb8
c00158c7:	e8 26 15 ff ff       	call   c0006df2 <Computer::rdmsr(unsigned int)>
c00158cc:	25 00 f0 ff ff       	and    eax,0xfffff000
c00158d1:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c00158db:	83 c4 1c             	add    esp,0x1c
c00158de:	c3                   	ret    
c00158df:	e9 54 02 00 00       	jmp    c0015b38 <picEOI(int)>

c00158e4 <HalRestart()>:
c00158e4:	c3                   	ret    

c00158e5 <HalShutdown()>:
c00158e5:	c3                   	ret    

c00158e6 <HalSleep()>:
c00158e6:	c3                   	ret    
c00158e7:	90                   	nop

c00158e8 <picIoWait()>:
c00158e8:	eb 00                	jmp    c00158ea <picIoWait()+0x2>
c00158ea:	eb 00                	jmp    c00158ec <picIoWait()+0x4>
c00158ec:	90                   	nop
c00158ed:	c3                   	ret    
c00158ee:	66 90                	xchg   ax,ax

c00158f0 <picDisable()>:
c00158f0:	83 ec 10             	sub    esp,0x10
c00158f3:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c00158fa:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c00158ff:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0015903:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0015908:	ee                   	out    dx,al
c0015909:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c0015910:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c0015915:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0015919:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c001591e:	ee                   	out    dx,al
c001591f:	90                   	nop
c0015920:	83 c4 10             	add    esp,0x10
c0015923:	c3                   	ret    

c0015924 <picGetIRQReg(int)>:
c0015924:	83 ec 10             	sub    esp,0x10
c0015927:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001592b:	25 ff 00 00 00       	and    eax,0xff
c0015930:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0015937:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c001593b:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001593f:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0015944:	ee                   	out    dx,al
c0015945:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015949:	25 ff 00 00 00       	and    eax,0xff
c001594e:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0015955:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0015959:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001595d:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0015962:	ee                   	out    dx,al
c0015963:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c001596a:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c001596f:	89 c2                	mov    edx,eax
c0015971:	ec                   	in     al,dx
c0015972:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0015976:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001597a:	25 ff 00 00 00       	and    eax,0xff
c001597f:	c1 e0 08             	shl    eax,0x8
c0015982:	89 c1                	mov    ecx,eax
c0015984:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c001598b:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0015990:	89 c2                	mov    edx,eax
c0015992:	ec                   	in     al,dx
c0015993:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0015997:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c001599b:	25 ff 00 00 00       	and    eax,0xff
c00159a0:	09 c8                	or     eax,ecx
c00159a2:	83 c4 10             	add    esp,0x10
c00159a5:	c3                   	ret    
c00159a6:	66 90                	xchg   ax,ax

c00159a8 <picOpen()>:
c00159a8:	83 ec 50             	sub    esp,0x50
c00159ab:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c00159b2:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00159b7:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00159bb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00159bf:	ee                   	out    dx,al
c00159c0:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c00159c7:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c00159cc:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c00159d0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00159d4:	ee                   	out    dx,al
c00159d5:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c00159dd:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c00159e5:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c00159ec:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00159f0:	89 c2                	mov    edx,eax
c00159f2:	ec                   	in     al,dx
c00159f3:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c00159f7:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c00159fb:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c00159ff:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c0015a06:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015a0a:	89 c2                	mov    edx,eax
c0015a0c:	ec                   	in     al,dx
c0015a0d:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0015a11:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0015a15:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0015a19:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c0015a20:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c0015a25:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0015a29:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015a2d:	ee                   	out    dx,al
c0015a2e:	e8 b5 fe ff ff       	call   c00158e8 <picIoWait()>
c0015a33:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c0015a3a:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c0015a3f:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0015a43:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0015a47:	ee                   	out    dx,al
c0015a48:	e8 9b fe ff ff       	call   c00158e8 <picIoWait()>
c0015a4d:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0015a51:	25 ff 00 00 00       	and    eax,0xff
c0015a56:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c0015a5d:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c0015a61:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c0015a65:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015a69:	ee                   	out    dx,al
c0015a6a:	e8 79 fe ff ff       	call   c00158e8 <picIoWait()>
c0015a6f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0015a73:	25 ff 00 00 00       	and    eax,0xff
c0015a78:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c0015a7f:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0015a83:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0015a87:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0015a8b:	ee                   	out    dx,al
c0015a8c:	e8 57 fe ff ff       	call   c00158e8 <picIoWait()>
c0015a91:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c0015a98:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c0015a9d:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c0015aa1:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0015aa5:	ee                   	out    dx,al
c0015aa6:	e8 3d fe ff ff       	call   c00158e8 <picIoWait()>
c0015aab:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c0015ab2:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c0015ab7:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0015abb:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0015abf:	ee                   	out    dx,al
c0015ac0:	e8 23 fe ff ff       	call   c00158e8 <picIoWait()>
c0015ac5:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c0015acc:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c0015ad1:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c0015ad5:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0015ad9:	ee                   	out    dx,al
c0015ada:	e8 09 fe ff ff       	call   c00158e8 <picIoWait()>
c0015adf:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c0015ae6:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c0015aeb:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c0015aef:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0015af3:	ee                   	out    dx,al
c0015af4:	e8 ef fd ff ff       	call   c00158e8 <picIoWait()>
c0015af9:	8a 44 24 47          	mov    al,BYTE PTR [esp+0x47]
c0015afd:	25 ff 00 00 00       	and    eax,0xff
c0015b02:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c0015b09:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c0015b0d:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0015b11:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0015b15:	ee                   	out    dx,al
c0015b16:	8a 44 24 46          	mov    al,BYTE PTR [esp+0x46]
c0015b1a:	25 ff 00 00 00       	and    eax,0xff
c0015b1f:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c0015b26:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0015b2a:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c0015b2e:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0015b32:	ee                   	out    dx,al
c0015b33:	90                   	nop
c0015b34:	83 c4 50             	add    esp,0x50
c0015b37:	c3                   	ret    

c0015b38 <picEOI(int)>:
c0015b38:	83 ec 10             	sub    esp,0x10
c0015b3b:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0015b40:	75 22                	jne    c0015b64 <picEOI(int)+0x2c>
c0015b42:	6a 0b                	push   0xb
c0015b44:	e8 db fd ff ff       	call   c0015924 <picGetIRQReg(int)>
c0015b49:	83 c4 04             	add    esp,0x4
c0015b4c:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c0015b51:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0015b56:	25 ff ff 00 00       	and    eax,0xffff
c0015b5b:	25 80 00 00 00       	and    eax,0x80
c0015b60:	74 72                	je     c0015bd4 <picEOI(int)+0x9c>
c0015b62:	66 90                	xchg   ax,ax
c0015b64:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0015b69:	75 31                	jne    c0015b9c <picEOI(int)+0x64>
c0015b6b:	6a 0b                	push   0xb
c0015b6d:	e8 b2 fd ff ff       	call   c0015924 <picGetIRQReg(int)>
c0015b72:	83 c4 04             	add    esp,0x4
c0015b75:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0015b7a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015b7e:	66 85 c0             	test   ax,ax
c0015b81:	78 19                	js     c0015b9c <picEOI(int)+0x64>
c0015b83:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c0015b8a:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c0015b8f:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0015b93:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0015b98:	ee                   	out    dx,al
c0015b99:	eb 3d                	jmp    c0015bd8 <picEOI(int)+0xa0>
c0015b9b:	90                   	nop
c0015b9c:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0015ba1:	7e 19                	jle    c0015bbc <picEOI(int)+0x84>
c0015ba3:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0015baa:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c0015baf:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0015bb3:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0015bb8:	ee                   	out    dx,al
c0015bb9:	8d 76 00             	lea    esi,[esi+0x0]
c0015bbc:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0015bc3:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c0015bc8:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0015bcc:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0015bd1:	ee                   	out    dx,al
c0015bd2:	eb 04                	jmp    c0015bd8 <picEOI(int)+0xa0>
c0015bd4:	90                   	nop
c0015bd5:	8d 76 00             	lea    esi,[esi+0x0]
c0015bd8:	83 c4 10             	add    esp,0x10
c0015bdb:	c3                   	ret    

c0015bdc <RTC::open(int, int, void*)>:
c0015bdc:	31 c0                	xor    eax,eax
c0015bde:	c3                   	ret    
c0015bdf:	90                   	nop

c0015be0 <RTC::close(int, int, void*)>:
c0015be0:	31 c0                	xor    eax,eax
c0015be2:	c3                   	ret    
c0015be3:	90                   	nop

c0015be4 <RTC::timeInSecondsUTC()>:
c0015be4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015be8:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0015bee:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0015bf4:	c3                   	ret    
c0015bf5:	90                   	nop

c0015bf6 <RTC::timeInDatetimeUTC()>:
c0015bf6:	53                   	push   ebx
c0015bf7:	83 ec 14             	sub    esp,0x14
c0015bfa:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0015bfe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015c02:	8b 10                	mov    edx,DWORD PTR [eax]
c0015c04:	50                   	push   eax
c0015c05:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0015c08:	83 c4 0c             	add    esp,0xc
c0015c0b:	52                   	push   edx
c0015c0c:	50                   	push   eax
c0015c0d:	53                   	push   ebx
c0015c0e:	e8 3d 5b ff ff       	call   c000b750 <secondsToDatetime(unsigned long long)>
c0015c13:	89 d8                	mov    eax,ebx
c0015c15:	83 c4 14             	add    esp,0x14
c0015c18:	5b                   	pop    ebx
c0015c19:	c2 04 00             	ret    0x4

c0015c1c <RTC::setTimeInSecondsUTC(unsigned long long)>:
c0015c1c:	56                   	push   esi
c0015c1d:	53                   	push   ebx
c0015c1e:	83 ec 14             	sub    esp,0x14
c0015c21:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0015c25:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015c27:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c0015c2a:	8d 44 24 08          	lea    eax,[esp+0x8]
c0015c2e:	52                   	push   edx
c0015c2f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015c33:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015c37:	50                   	push   eax
c0015c38:	e8 13 5b ff ff       	call   c000b750 <secondsToDatetime(unsigned long long)>
c0015c3d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015c41:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0015c45:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0015c49:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0015c4d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0015c51:	89 f0                	mov    eax,esi
c0015c53:	83 c4 20             	add    esp,0x20
c0015c56:	5b                   	pop    ebx
c0015c57:	5e                   	pop    esi
c0015c58:	ff e0                	jmp    eax

c0015c5a <RTC::~RTC()>:
c0015c5a:	83 ec 0c             	sub    esp,0xc
c0015c5d:	ba f0 f6 01 c0       	mov    edx,0xc001f6f0
c0015c62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015c66:	89 10                	mov    DWORD PTR [eax],edx
c0015c68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015c6c:	83 ec 0c             	sub    esp,0xc
c0015c6f:	50                   	push   eax
c0015c70:	e8 5f 58 ff ff       	call   c000b4d4 <Clock::~Clock()>
c0015c75:	83 c4 10             	add    esp,0x10
c0015c78:	90                   	nop
c0015c79:	83 c4 0c             	add    esp,0xc
c0015c7c:	c3                   	ret    
c0015c7d:	90                   	nop

c0015c7e <RTC::~RTC()>:
c0015c7e:	83 ec 0c             	sub    esp,0xc
c0015c81:	83 ec 0c             	sub    esp,0xc
c0015c84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015c88:	e8 cd ff ff ff       	call   c0015c5a <RTC::~RTC()>
c0015c8d:	83 c4 10             	add    esp,0x10
c0015c90:	83 ec 08             	sub    esp,0x8
c0015c93:	68 60 01 00 00       	push   0x160
c0015c98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015c9c:	e8 bb 47 ff ff       	call   c000a45c <operator delete(void*, unsigned long)>
c0015ca1:	83 c4 10             	add    esp,0x10
c0015ca4:	83 c4 0c             	add    esp,0xc
c0015ca7:	c3                   	ret    

c0015ca8 <RTC::get_update_in_progress_flag()>:
c0015ca8:	83 ec 14             	sub    esp,0x14
c0015cab:	6a 0a                	push   0xa
c0015cad:	ff 35 b8 2e 02 c0    	push   DWORD PTR ds:0xc0022eb8
c0015cb3:	e8 ee 11 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015cb8:	83 c4 1c             	add    esp,0x1c
c0015cbb:	c0 e8 07             	shr    al,0x7
c0015cbe:	c3                   	ret    
c0015cbf:	90                   	nop

c0015cc0 <RTC::completeRTCRefresh()>:
c0015cc0:	55                   	push   ebp
c0015cc1:	57                   	push   edi
c0015cc2:	56                   	push   esi
c0015cc3:	53                   	push   ebx
c0015cc4:	83 ec 2c             	sub    esp,0x2c
c0015cc7:	8b 1d 8c 54 02 c0    	mov    ebx,DWORD PTR ds:0xc002548c
c0015ccd:	83 ec 0c             	sub    esp,0xc
c0015cd0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0015cd4:	e8 cf ff ff ff       	call   c0015ca8 <RTC::get_update_in_progress_flag()>
c0015cd9:	83 c4 10             	add    esp,0x10
c0015cdc:	84 c0                	test   al,al
c0015cde:	74 0e                	je     c0015cee <RTC::completeRTCRefresh()+0x2e>
c0015ce0:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0015ce6:	3b 05 8c 54 02 c0    	cmp    eax,DWORD PTR ds:0xc002548c
c0015cec:	73 df                	jae    c0015ccd <RTC::completeRTCRefresh()+0xd>
c0015cee:	55                   	push   ebp
c0015cef:	55                   	push   ebp
c0015cf0:	6a 00                	push   0x0
c0015cf2:	ff 35 b8 2e 02 c0    	push   DWORD PTR ds:0xc0022eb8
c0015cf8:	e8 a9 11 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015cfd:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0015d01:	58                   	pop    eax
c0015d02:	5a                   	pop    edx
c0015d03:	6a 02                	push   0x2
c0015d05:	ff 35 b8 2e 02 c0    	push   DWORD PTR ds:0xc0022eb8
c0015d0b:	e8 96 11 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015d10:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c0015d14:	59                   	pop    ecx
c0015d15:	5b                   	pop    ebx
c0015d16:	6a 04                	push   0x4
c0015d18:	ff 35 b8 2e 02 c0    	push   DWORD PTR ds:0xc0022eb8
c0015d1e:	e8 83 11 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015d23:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c0015d27:	5e                   	pop    esi
c0015d28:	5f                   	pop    edi
c0015d29:	6a 07                	push   0x7
c0015d2b:	ff 35 b8 2e 02 c0    	push   DWORD PTR ds:0xc0022eb8
c0015d31:	e8 70 11 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015d36:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c0015d3a:	5d                   	pop    ebp
c0015d3b:	58                   	pop    eax
c0015d3c:	6a 08                	push   0x8
c0015d3e:	ff 35 b8 2e 02 c0    	push   DWORD PTR ds:0xc0022eb8
c0015d44:	e8 5d 11 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015d49:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c0015d4d:	58                   	pop    eax
c0015d4e:	5a                   	pop    edx
c0015d4f:	6a 09                	push   0x9
c0015d51:	ff 35 b8 2e 02 c0    	push   DWORD PTR ds:0xc0022eb8
c0015d57:	e8 4a 11 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015d5c:	83 c4 10             	add    esp,0x10
c0015d5f:	0f b6 e8             	movzx  ebp,al
c0015d62:	8b 1d 8c 54 02 c0    	mov    ebx,DWORD PTR ds:0xc002548c
c0015d68:	83 ec 0c             	sub    esp,0xc
c0015d6b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0015d6f:	e8 34 ff ff ff       	call   c0015ca8 <RTC::get_update_in_progress_flag()>
c0015d74:	83 c4 10             	add    esp,0x10
c0015d77:	84 c0                	test   al,al
c0015d79:	74 0e                	je     c0015d89 <RTC::completeRTCRefresh()+0xc9>
c0015d7b:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0015d81:	3b 05 8c 54 02 c0    	cmp    eax,DWORD PTR ds:0xc002548c
c0015d87:	73 df                	jae    c0015d68 <RTC::completeRTCRefresh()+0xa8>
c0015d89:	50                   	push   eax
c0015d8a:	50                   	push   eax
c0015d8b:	6a 00                	push   0x0
c0015d8d:	ff 35 b8 2e 02 c0    	push   DWORD PTR ds:0xc0022eb8
c0015d93:	e8 0e 11 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015d98:	88 44 24 2a          	mov    BYTE PTR [esp+0x2a],al
c0015d9c:	58                   	pop    eax
c0015d9d:	5a                   	pop    edx
c0015d9e:	6a 02                	push   0x2
c0015da0:	ff 35 b8 2e 02 c0    	push   DWORD PTR ds:0xc0022eb8
c0015da6:	e8 fb 10 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015dab:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0015daf:	59                   	pop    ecx
c0015db0:	5b                   	pop    ebx
c0015db1:	6a 04                	push   0x4
c0015db3:	ff 35 b8 2e 02 c0    	push   DWORD PTR ds:0xc0022eb8
c0015db9:	e8 e8 10 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015dbe:	5e                   	pop    esi
c0015dbf:	88 c3                	mov    bl,al
c0015dc1:	5f                   	pop    edi
c0015dc2:	6a 07                	push   0x7
c0015dc4:	ff 35 b8 2e 02 c0    	push   DWORD PTR ds:0xc0022eb8
c0015dca:	e8 d7 10 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015dcf:	89 c6                	mov    esi,eax
c0015dd1:	58                   	pop    eax
c0015dd2:	5a                   	pop    edx
c0015dd3:	6a 08                	push   0x8
c0015dd5:	ff 35 b8 2e 02 c0    	push   DWORD PTR ds:0xc0022eb8
c0015ddb:	e8 c6 10 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015de0:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0015de4:	59                   	pop    ecx
c0015de5:	5f                   	pop    edi
c0015de6:	6a 09                	push   0x9
c0015de8:	ff 35 b8 2e 02 c0    	push   DWORD PTR ds:0xc0022eb8
c0015dee:	e8 b3 10 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015df3:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0015df7:	0f b6 f8             	movzx  edi,al
c0015dfa:	83 c4 10             	add    esp,0x10
c0015dfd:	8a 4c 24 1a          	mov    cl,BYTE PTR [esp+0x1a]
c0015e01:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0015e05:	38 4c 24 1b          	cmp    BYTE PTR [esp+0x1b],cl
c0015e09:	89 f1                	mov    ecx,esi
c0015e0b:	0f 94 c0             	sete   al
c0015e0e:	38 54 24 1c          	cmp    BYTE PTR [esp+0x1c],dl
c0015e12:	0f 94 c2             	sete   dl
c0015e15:	21 d0                	and    eax,edx
c0015e17:	38 5c 24 1d          	cmp    BYTE PTR [esp+0x1d],bl
c0015e1b:	0f 94 c2             	sete   dl
c0015e1e:	21 c2                	and    edx,eax
c0015e20:	38 4c 24 1e          	cmp    BYTE PTR [esp+0x1e],cl
c0015e24:	0f 94 c0             	sete   al
c0015e27:	21 d0                	and    eax,edx
c0015e29:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c0015e2d:	38 54 24 1f          	cmp    BYTE PTR [esp+0x1f],dl
c0015e31:	0f 94 c1             	sete   cl
c0015e34:	84 c8                	test   al,cl
c0015e36:	75 29                	jne    c0015e61 <RTC::completeRTCRefresh()+0x1a1>
c0015e38:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0015e3c:	89 fd                	mov    ebp,edi
c0015e3e:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0015e42:	88 5c 24 1d          	mov    BYTE PTR [esp+0x1d],bl
c0015e46:	89 f0                	mov    eax,esi
c0015e48:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c0015e4c:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0015e50:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0015e54:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0015e58:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0015e5c:	e9 01 ff ff ff       	jmp    c0015d62 <RTC::completeRTCRefresh()+0xa2>
c0015e61:	39 fd                	cmp    ebp,edi
c0015e63:	75 d3                	jne    c0015e38 <RTC::completeRTCRefresh()+0x178>
c0015e65:	55                   	push   ebp
c0015e66:	55                   	push   ebp
c0015e67:	6a 0b                	push   0xb
c0015e69:	ff 35 b8 2e 02 c0    	push   DWORD PTR ds:0xc0022eb8
c0015e6f:	e8 32 10 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015e74:	83 c4 10             	add    esp,0x10
c0015e77:	89 c5                	mov    ebp,eax
c0015e79:	a8 04                	test   al,0x4
c0015e7b:	75 78                	jne    c0015ef5 <RTC::completeRTCRefresh()+0x235>
c0015e7d:	b1 0a                	mov    cl,0xa
c0015e7f:	8a 54 24 1a          	mov    dl,BYTE PTR [esp+0x1a]
c0015e83:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0015e87:	83 e2 0f             	and    edx,0xf
c0015e8a:	c0 e8 04             	shr    al,0x4
c0015e8d:	c1 ef 04             	shr    edi,0x4
c0015e90:	f6 e1                	mul    cl
c0015e92:	6b ff 0a             	imul   edi,edi,0xa
c0015e95:	01 d0                	add    eax,edx
c0015e97:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0015e9b:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0015e9f:	83 e2 0f             	and    edx,0xf
c0015ea2:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0015ea6:	c0 e8 04             	shr    al,0x4
c0015ea9:	f6 e1                	mul    cl
c0015eab:	01 d0                	add    eax,edx
c0015ead:	88 da                	mov    dl,bl
c0015eaf:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0015eb3:	83 e2 0f             	and    edx,0xf
c0015eb6:	88 d8                	mov    al,bl
c0015eb8:	83 e3 80             	and    ebx,0xffffff80
c0015ebb:	c0 e8 04             	shr    al,0x4
c0015ebe:	83 e0 07             	and    eax,0x7
c0015ec1:	f6 e1                	mul    cl
c0015ec3:	01 d0                	add    eax,edx
c0015ec5:	89 f2                	mov    edx,esi
c0015ec7:	09 c3                	or     ebx,eax
c0015ec9:	83 e2 0f             	and    edx,0xf
c0015ecc:	89 f0                	mov    eax,esi
c0015ece:	c0 e8 04             	shr    al,0x4
c0015ed1:	f6 e1                	mul    cl
c0015ed3:	8d 34 02             	lea    esi,[edx+eax*1]
c0015ed6:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c0015eda:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0015ede:	83 e2 0f             	and    edx,0xf
c0015ee1:	c0 e8 04             	shr    al,0x4
c0015ee4:	f6 e1                	mul    cl
c0015ee6:	01 d0                	add    eax,edx
c0015ee8:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c0015eec:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015ef0:	83 e0 0f             	and    eax,0xf
c0015ef3:	01 c7                	add    edi,eax
c0015ef5:	83 e5 02             	and    ebp,0x2
c0015ef8:	75 14                	jne    c0015f0e <RTC::completeRTCRefresh()+0x24e>
c0015efa:	84 db                	test   bl,bl
c0015efc:	79 10                	jns    c0015f0e <RTC::completeRTCRefresh()+0x24e>
c0015efe:	83 e3 7f             	and    ebx,0x7f
c0015f01:	b9 18 00 00 00       	mov    ecx,0x18
c0015f06:	8d 43 0c             	lea    eax,[ebx+0xc]
c0015f09:	99                   	cdq    
c0015f0a:	f7 f9                	idiv   ecx
c0015f0c:	88 d3                	mov    bl,dl
c0015f0e:	8d af d0 07 00 00    	lea    ebp,[edi+0x7d0]
c0015f14:	81 fd e3 07 00 00    	cmp    ebp,0x7e3
c0015f1a:	77 06                	ja     c0015f22 <RTC::completeRTCRefresh()+0x262>
c0015f1c:	8d af 34 08 00 00    	lea    ebp,[edi+0x834]
c0015f22:	0f b6 4c 24 1a       	movzx  ecx,BYTE PTR [esp+0x1a]
c0015f27:	31 d2                	xor    edx,edx
c0015f29:	c1 e1 10             	shl    ecx,0x10
c0015f2c:	89 d7                	mov    edi,edx
c0015f2e:	c1 e5 10             	shl    ebp,0x10
c0015f31:	31 c0                	xor    eax,eax
c0015f33:	81 e7 ff ff 00 ff    	and    edi,0xff00ffff
c0015f39:	09 cf                	or     edi,ecx
c0015f3b:	89 fa                	mov    edx,edi
c0015f3d:	8a 74 24 0c          	mov    dh,BYTE PTR [esp+0xc]
c0015f41:	88 da                	mov    dl,bl
c0015f43:	89 f3                	mov    ebx,esi
c0015f45:	88 5c 24 1a          	mov    BYTE PTR [esp+0x1a],bl
c0015f49:	88 d8                	mov    al,bl
c0015f4b:	8a 64 24 10          	mov    ah,BYTE PTR [esp+0x10]
c0015f4f:	0f b7 c8             	movzx  ecx,ax
c0015f52:	09 e9                	or     ecx,ebp
c0015f54:	89 c8                	mov    eax,ecx
c0015f56:	51                   	push   ecx
c0015f57:	51                   	push   ecx
c0015f58:	52                   	push   edx
c0015f59:	50                   	push   eax
c0015f5a:	e8 64 56 ff ff       	call   c000b5c3 <datetimeToSeconds(datetime_t)>
c0015f5f:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0015f63:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c0015f69:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c0015f6f:	83 c4 3c             	add    esp,0x3c
c0015f72:	5b                   	pop    ebx
c0015f73:	5e                   	pop    esi
c0015f74:	5f                   	pop    edi
c0015f75:	5d                   	pop    ebp
c0015f76:	c3                   	ret    
c0015f77:	90                   	nop

c0015f78 <RTC::setTimeInDatetimeUTC(datetime_t)>:
c0015f78:	55                   	push   ebp
c0015f79:	57                   	push   edi
c0015f7a:	56                   	push   esi
c0015f7b:	53                   	push   ebx
c0015f7c:	83 ec 30             	sub    esp,0x30
c0015f7f:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0015f83:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0015f87:	6a 00                	push   0x0
c0015f89:	6a 00                	push   0x0
c0015f8b:	ff 35 b8 2e 02 c0    	push   DWORD PTR ds:0xc0022eb8
c0015f91:	e8 26 10 ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c0015f96:	83 c4 0c             	add    esp,0xc
c0015f99:	6a 00                	push   0x0
c0015f9b:	6a 02                	push   0x2
c0015f9d:	ff 35 b8 2e 02 c0    	push   DWORD PTR ds:0xc0022eb8
c0015fa3:	e8 14 10 ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c0015fa8:	31 d2                	xor    edx,edx
c0015faa:	89 f9                	mov    ecx,edi
c0015fac:	89 f8                	mov    eax,edi
c0015fae:	c1 e9 10             	shr    ecx,0x10
c0015fb1:	0f b6 c4             	movzx  eax,ah
c0015fb4:	88 4c 24 27          	mov    BYTE PTR [esp+0x27],cl
c0015fb8:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0015fbc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0015fc0:	b9 64 00 00 00       	mov    ecx,0x64
c0015fc5:	89 f0                	mov    eax,esi
c0015fc7:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c0015fcb:	89 f0                	mov    eax,esi
c0015fcd:	0f b6 c4             	movzx  eax,ah
c0015fd0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0015fd4:	89 f0                	mov    eax,esi
c0015fd6:	c1 e8 10             	shr    eax,0x10
c0015fd9:	66 f7 f1             	div    cx
c0015fdc:	66 89 54 24 2a       	mov    WORD PTR [esp+0x2a],dx
c0015fe1:	0f b6 6c 24 2a       	movzx  ebp,BYTE PTR [esp+0x2a]
c0015fe6:	59                   	pop    ecx
c0015fe7:	5b                   	pop    ebx
c0015fe8:	89 fb                	mov    ebx,edi
c0015fea:	6a 0b                	push   0xb
c0015fec:	ff 35 b8 2e 02 c0    	push   DWORD PTR ds:0xc0022eb8
c0015ff2:	e8 af 0e ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015ff7:	88 44 24 29          	mov    BYTE PTR [esp+0x29],al
c0015ffb:	83 c4 10             	add    esp,0x10
c0015ffe:	f6 44 24 19 04       	test   BYTE PTR [esp+0x19],0x4
c0016003:	75 74                	jne    c0016079 <RTC::setTimeInDatetimeUTC(datetime_t)+0x101>
c0016005:	b2 0a                	mov    dl,0xa
c0016007:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001600b:	0f b6 c1             	movzx  eax,cl
c001600e:	f6 f2                	div    dl
c0016010:	88 c3                	mov    bl,al
c0016012:	88 e0                	mov    al,ah
c0016014:	c1 e3 04             	shl    ebx,0x4
c0016017:	09 c3                	or     ebx,eax
c0016019:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001601e:	88 5c 24 17          	mov    BYTE PTR [esp+0x17],bl
c0016022:	f6 f2                	div    dl
c0016024:	88 c1                	mov    cl,al
c0016026:	88 e0                	mov    al,ah
c0016028:	c1 e1 04             	shl    ecx,0x4
c001602b:	09 c1                	or     ecx,eax
c001602d:	89 f8                	mov    eax,edi
c001602f:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0016033:	0f b6 c0             	movzx  eax,al
c0016036:	f6 f2                	div    dl
c0016038:	88 c3                	mov    bl,al
c001603a:	88 e0                	mov    al,ah
c001603c:	c1 e3 04             	shl    ebx,0x4
c001603f:	09 c3                	or     ebx,eax
c0016041:	89 f0                	mov    eax,esi
c0016043:	0f b6 c0             	movzx  eax,al
c0016046:	f6 f2                	div    dl
c0016048:	88 c1                	mov    cl,al
c001604a:	88 e0                	mov    al,ah
c001604c:	c1 e1 04             	shl    ecx,0x4
c001604f:	09 c1                	or     ecx,eax
c0016051:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0016056:	88 4c 24 18          	mov    BYTE PTR [esp+0x18],cl
c001605a:	f6 f2                	div    dl
c001605c:	88 c1                	mov    cl,al
c001605e:	88 e0                	mov    al,ah
c0016060:	c1 e1 04             	shl    ecx,0x4
c0016063:	09 c1                	or     ecx,eax
c0016065:	0f b6 44 24 1a       	movzx  eax,BYTE PTR [esp+0x1a]
c001606a:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c001606e:	f6 f2                	div    dl
c0016070:	89 c5                	mov    ebp,eax
c0016072:	88 e0                	mov    al,ah
c0016074:	c1 e5 04             	shl    ebp,0x4
c0016077:	09 c5                	or     ebp,eax
c0016079:	f6 44 24 19 02       	test   BYTE PTR [esp+0x19],0x2
c001607e:	75 17                	jne    c0016097 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11f>
c0016080:	80 fb 0b             	cmp    bl,0xb
c0016083:	76 0c                	jbe    c0016091 <RTC::setTimeInDatetimeUTC(datetime_t)+0x119>
c0016085:	80 eb 0c             	sub    bl,0xc
c0016088:	75 02                	jne    c001608c <RTC::setTimeInDatetimeUTC(datetime_t)+0x114>
c001608a:	b3 0c                	mov    bl,0xc
c001608c:	83 cb 80             	or     ebx,0xffffff80
c001608f:	eb 06                	jmp    c0016097 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11f>
c0016091:	84 db                	test   bl,bl
c0016093:	75 02                	jne    c0016097 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11f>
c0016095:	b3 0c                	mov    bl,0xc
c0016097:	0f b6 db             	movzx  ebx,bl
c001609a:	50                   	push   eax
c001609b:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c00160a0:	50                   	push   eax
c00160a1:	6a 00                	push   0x0
c00160a3:	ff 35 b8 2e 02 c0    	push   DWORD PTR ds:0xc0022eb8
c00160a9:	e8 0e 0f ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c00160ae:	83 c4 0c             	add    esp,0xc
c00160b1:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c00160b6:	50                   	push   eax
c00160b7:	6a 02                	push   0x2
c00160b9:	ff 35 b8 2e 02 c0    	push   DWORD PTR ds:0xc0022eb8
c00160bf:	e8 f8 0e ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c00160c4:	83 c4 0c             	add    esp,0xc
c00160c7:	53                   	push   ebx
c00160c8:	6a 04                	push   0x4
c00160ca:	ff 35 b8 2e 02 c0    	push   DWORD PTR ds:0xc0022eb8
c00160d0:	e8 e7 0e ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c00160d5:	83 c4 0c             	add    esp,0xc
c00160d8:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c00160dd:	50                   	push   eax
c00160de:	6a 07                	push   0x7
c00160e0:	ff 35 b8 2e 02 c0    	push   DWORD PTR ds:0xc0022eb8
c00160e6:	e8 d1 0e ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c00160eb:	83 c4 0c             	add    esp,0xc
c00160ee:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00160f3:	50                   	push   eax
c00160f4:	6a 08                	push   0x8
c00160f6:	ff 35 b8 2e 02 c0    	push   DWORD PTR ds:0xc0022eb8
c00160fc:	e8 bb 0e ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c0016101:	83 c4 0c             	add    esp,0xc
c0016104:	89 e8                	mov    eax,ebp
c0016106:	0f b6 e8             	movzx  ebp,al
c0016109:	55                   	push   ebp
c001610a:	6a 09                	push   0x9
c001610c:	ff 35 b8 2e 02 c0    	push   DWORD PTR ds:0xc0022eb8
c0016112:	e8 a5 0e ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c0016117:	5a                   	pop    edx
c0016118:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001611c:	e8 9f fb ff ff       	call   c0015cc0 <RTC::completeRTCRefresh()>
c0016121:	83 c4 3c             	add    esp,0x3c
c0016124:	b0 01                	mov    al,0x1
c0016126:	5b                   	pop    ebx
c0016127:	5e                   	pop    esi
c0016128:	5f                   	pop    edi
c0016129:	5d                   	pop    ebp
c001612a:	c3                   	ret    

c001612b <rtcIRQHandler(regs*, void*)>:
c001612b:	53                   	push   ebx
c001612c:	83 ec 10             	sub    esp,0x10
c001612f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0016133:	6a 0c                	push   0xc
c0016135:	ff 35 b8 2e 02 c0    	push   DWORD PTR ds:0xc0022eb8
c001613b:	e8 66 0d ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0016140:	83 c4 10             	add    esp,0x10
c0016143:	84 c0                	test   al,al
c0016145:	79 24                	jns    c001616b <rtcIRQHandler(regs*, void*)+0x40>
c0016147:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c001614e:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c0016155:	66 ff 05 14 62 02 c0 	inc    WORD PTR ds:0xc0026214
c001615c:	75 0d                	jne    c001616b <rtcIRQHandler(regs*, void*)+0x40>
c001615e:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0016162:	83 c4 08             	add    esp,0x8
c0016165:	5b                   	pop    ebx
c0016166:	e9 55 fb ff ff       	jmp    c0015cc0 <RTC::completeRTCRefresh()>
c001616b:	83 c4 08             	add    esp,0x8
c001616e:	5b                   	pop    ebx
c001616f:	c3                   	ret    

c0016170 <RTC::RTC()>:
c0016170:	83 ec 1c             	sub    esp,0x1c
c0016173:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016177:	83 ec 08             	sub    esp,0x8
c001617a:	68 d3 f6 01 c0       	push   0xc001f6d3
c001617f:	50                   	push   eax
c0016180:	e8 19 53 ff ff       	call   c000b49e <Clock::Clock(char const*)>
c0016185:	83 c4 10             	add    esp,0x10
c0016188:	ba f0 f6 01 c0       	mov    edx,0xc001f6f0
c001618d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016191:	89 10                	mov    DWORD PTR [eax],edx
c0016193:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016197:	83 ec 0c             	sub    esp,0xc
c001619a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001619e:	6a 01                	push   0x1
c00161a0:	68 2b 61 01 c0       	push   0xc001612b
c00161a5:	6a 08                	push   0x8
c00161a7:	50                   	push   eax
c00161a8:	e8 db 57 ff ff       	call   c000b988 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00161ad:	83 c4 20             	add    esp,0x20
c00161b0:	89 c2                	mov    edx,eax
c00161b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00161b6:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c00161bc:	fa                   	cli    
c00161bd:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c00161c2:	40                   	inc    eax
c00161c3:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c00161c8:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c00161cd:	83 ec 08             	sub    esp,0x8
c00161d0:	6a 0b                	push   0xb
c00161d2:	50                   	push   eax
c00161d3:	e8 ce 0c ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c00161d8:	83 c4 10             	add    esp,0x10
c00161db:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00161df:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c00161e4:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00161e8:	83 ca 10             	or     edx,0x10
c00161eb:	81 e2 ff 00 00 00    	and    edx,0xff
c00161f1:	83 ec 04             	sub    esp,0x4
c00161f4:	52                   	push   edx
c00161f5:	6a 0b                	push   0xb
c00161f7:	50                   	push   eax
c00161f8:	e8 bf 0d ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c00161fd:	83 c4 10             	add    esp,0x10
c0016200:	83 ec 0c             	sub    esp,0xc
c0016203:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016207:	e8 b4 fa ff ff       	call   c0015cc0 <RTC::completeRTCRefresh()>
c001620c:	83 c4 10             	add    esp,0x10
c001620f:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c0016214:	48                   	dec    eax
c0016215:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c001621a:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c001621f:	85 c0                	test   eax,eax
c0016221:	75 01                	jne    c0016224 <RTC::RTC()+0xb4>
c0016223:	fb                   	sti    
c0016224:	90                   	nop
c0016225:	83 c4 1c             	add    esp,0x1c
c0016228:	c3                   	ret    
c0016229:	66 90                	xchg   ax,ax
c001622b:	90                   	nop

c001622c <HalConsoleScroll(int, int)>:
c001622c:	83 ec 10             	sub    esp,0x10
c001622f:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c0016237:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c001623f:	90                   	nop
c0016240:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0016245:	0f 8f e1 00 00 00    	jg     c001632c <HalConsoleScroll(int, int)+0x100>
c001624b:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0016253:	90                   	nop
c0016254:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c001625c:	0f 8f be 00 00 00    	jg     c0016320 <HalConsoleScroll(int, int)+0xf4>
c0016262:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016266:	89 d0                	mov    eax,edx
c0016268:	c1 e0 02             	shl    eax,0x2
c001626b:	01 d0                	add    eax,edx
c001626d:	c1 e0 05             	shl    eax,0x5
c0016270:	89 c2                	mov    edx,eax
c0016272:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016276:	01 d0                	add    eax,edx
c0016278:	89 c2                	mov    edx,eax
c001627a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001627e:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0016281:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016285:	89 d0                	mov    eax,edx
c0016287:	c1 e0 02             	shl    eax,0x2
c001628a:	01 d0                	add    eax,edx
c001628c:	c1 e0 05             	shl    eax,0x5
c001628f:	89 c2                	mov    edx,eax
c0016291:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016295:	01 d0                	add    eax,edx
c0016297:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c001629d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00162a1:	01 c2                	add    edx,eax
c00162a3:	8a 01                	mov    al,BYTE PTR [ecx]
c00162a5:	88 02                	mov    BYTE PTR [edx],al
c00162a7:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c00162ac:	75 66                	jne    c0016314 <HalConsoleScroll(int, int)+0xe8>
c00162ae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00162b2:	83 e0 01             	and    eax,0x1
c00162b5:	74 39                	je     c00162f0 <HalConsoleScroll(int, int)+0xc4>
c00162b7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00162bb:	83 e0 0f             	and    eax,0xf
c00162be:	88 c2                	mov    dl,al
c00162c0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00162c4:	c1 e0 04             	shl    eax,0x4
c00162c7:	88 d1                	mov    cl,dl
c00162c9:	09 c1                	or     ecx,eax
c00162cb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00162cf:	89 d0                	mov    eax,edx
c00162d1:	c1 e0 02             	shl    eax,0x2
c00162d4:	01 d0                	add    eax,edx
c00162d6:	c1 e0 05             	shl    eax,0x5
c00162d9:	89 c2                	mov    edx,eax
c00162db:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00162df:	01 d0                	add    eax,edx
c00162e1:	89 c2                	mov    edx,eax
c00162e3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00162e7:	01 d0                	add    eax,edx
c00162e9:	88 ca                	mov    dl,cl
c00162eb:	88 10                	mov    BYTE PTR [eax],dl
c00162ed:	eb 25                	jmp    c0016314 <HalConsoleScroll(int, int)+0xe8>
c00162ef:	90                   	nop
c00162f0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00162f4:	89 d0                	mov    eax,edx
c00162f6:	c1 e0 02             	shl    eax,0x2
c00162f9:	01 d0                	add    eax,edx
c00162fb:	c1 e0 05             	shl    eax,0x5
c00162fe:	89 c2                	mov    edx,eax
c0016300:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016304:	01 d0                	add    eax,edx
c0016306:	89 c2                	mov    edx,eax
c0016308:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001630c:	01 d0                	add    eax,edx
c001630e:	c6 00 20             	mov    BYTE PTR [eax],0x20
c0016311:	8d 76 00             	lea    esi,[esi+0x0]
c0016314:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0016318:	e9 37 ff ff ff       	jmp    c0016254 <HalConsoleScroll(int, int)+0x28>
c001631d:	8d 76 00             	lea    esi,[esi+0x0]
c0016320:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0016324:	e9 17 ff ff ff       	jmp    c0016240 <HalConsoleScroll(int, int)+0x14>
c0016329:	8d 76 00             	lea    esi,[esi+0x0]
c001632c:	90                   	nop
c001632d:	83 c4 10             	add    esp,0x10
c0016330:	c3                   	ret    
c0016331:	8d 76 00             	lea    esi,[esi+0x0]

c0016334 <HalConsoleWriteCharacter(char, int, int, int, int)>:
c0016334:	83 ec 14             	sub    esp,0x14
c0016337:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001633b:	88 04 24             	mov    BYTE PTR [esp],al
c001633e:	8a 04 24             	mov    al,BYTE PTR [esp]
c0016341:	25 ff 00 00 00       	and    eax,0xff
c0016346:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001634a:	89 d1                	mov    ecx,edx
c001634c:	83 e1 0f             	and    ecx,0xf
c001634f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016353:	c1 e2 04             	shl    edx,0x4
c0016356:	81 e2 ff 00 00 00    	and    edx,0xff
c001635c:	09 ca                	or     edx,ecx
c001635e:	c1 e2 08             	shl    edx,0x8
c0016361:	09 d0                	or     eax,edx
c0016363:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0016368:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c0016370:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0016374:	89 d0                	mov    eax,edx
c0016376:	c1 e0 02             	shl    eax,0x2
c0016379:	01 d0                	add    eax,edx
c001637b:	c1 e0 04             	shl    eax,0x4
c001637e:	89 c2                	mov    edx,eax
c0016380:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016384:	01 d0                	add    eax,edx
c0016386:	01 c0                	add    eax,eax
c0016388:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c001638c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016390:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0016395:	66 89 02             	mov    WORD PTR [edx],ax
c0016398:	90                   	nop
c0016399:	83 c4 14             	add    esp,0x14
c001639c:	c3                   	ret    
c001639d:	8d 76 00             	lea    esi,[esi+0x0]

c00163a0 <HalConsoleCursorUpdate(int, int)>:
c00163a0:	83 ec 20             	sub    esp,0x20
c00163a3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00163a7:	89 c2                	mov    edx,eax
c00163a9:	89 d0                	mov    eax,edx
c00163ab:	c1 e0 02             	shl    eax,0x2
c00163ae:	01 d0                	add    eax,edx
c00163b0:	c1 e0 04             	shl    eax,0x4
c00163b3:	89 c2                	mov    edx,eax
c00163b5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00163b9:	01 d0                	add    eax,edx
c00163bb:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c00163c0:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c00163c7:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c00163cc:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00163d0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00163d4:	ee                   	out    dx,al
c00163d5:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c00163da:	25 ff 00 00 00       	and    eax,0xff
c00163df:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c00163e6:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c00163ea:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c00163ee:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00163f2:	ee                   	out    dx,al
c00163f3:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c00163fa:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c00163ff:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0016403:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016407:	ee                   	out    dx,al
c0016408:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001640d:	66 c1 e8 08          	shr    ax,0x8
c0016411:	25 ff 00 00 00       	and    eax,0xff
c0016416:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c001641d:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0016421:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0016425:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0016429:	ee                   	out    dx,al
c001642a:	90                   	nop
c001642b:	83 c4 20             	add    esp,0x20
c001642e:	c3                   	ret    
c001642f:	90                   	nop

c0016430 <FAT::getName()>:
c0016430:	b8 24 f7 01 c0       	mov    eax,0xc001f724
c0016435:	c3                   	ret    
c0016436:	66 90                	xchg   ax,ax

c0016438 <FAT::tell(void*, unsigned long long*)>:
c0016438:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001643d:	75 09                	jne    c0016448 <FAT::tell(void*, unsigned long long*)+0x10>
c001643f:	b8 04 00 00 00       	mov    eax,0x4
c0016444:	c3                   	ret    
c0016445:	8d 76 00             	lea    esi,[esi+0x0]
c0016448:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001644d:	75 09                	jne    c0016458 <FAT::tell(void*, unsigned long long*)+0x20>
c001644f:	b8 04 00 00 00       	mov    eax,0x4
c0016454:	c3                   	ret    
c0016455:	8d 76 00             	lea    esi,[esi+0x0]
c0016458:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001645c:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001645f:	ba 00 00 00 00       	mov    edx,0x0
c0016464:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016468:	89 01                	mov    DWORD PTR [ecx],eax
c001646a:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001646d:	b8 00 00 00 00       	mov    eax,0x0
c0016472:	c3                   	ret    
c0016473:	90                   	nop

c0016474 <FAT::stat(void*, unsigned long long*)>:
c0016474:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0016479:	75 09                	jne    c0016484 <FAT::stat(void*, unsigned long long*)+0x10>
c001647b:	b8 04 00 00 00       	mov    eax,0x4
c0016480:	c3                   	ret    
c0016481:	8d 76 00             	lea    esi,[esi+0x0]
c0016484:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0016489:	75 09                	jne    c0016494 <FAT::stat(void*, unsigned long long*)+0x20>
c001648b:	b8 04 00 00 00       	mov    eax,0x4
c0016490:	c3                   	ret    
c0016491:	8d 76 00             	lea    esi,[esi+0x0]
c0016494:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016498:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001649b:	ba 00 00 00 00       	mov    edx,0x0
c00164a0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00164a4:	89 01                	mov    DWORD PTR [ecx],eax
c00164a6:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00164a9:	b8 00 00 00 00       	mov    eax,0x0
c00164ae:	c3                   	ret    
c00164af:	90                   	nop

c00164b0 <FAT::~FAT()>:
c00164b0:	83 ec 0c             	sub    esp,0xc
c00164b3:	ba 70 f7 01 c0       	mov    edx,0xc001f770
c00164b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00164bc:	89 10                	mov    DWORD PTR [eax],edx
c00164be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00164c2:	83 ec 0c             	sub    esp,0xc
c00164c5:	50                   	push   eax
c00164c6:	e8 cd 43 ff ff       	call   c000a898 <Filesystem::~Filesystem()>
c00164cb:	83 c4 10             	add    esp,0x10
c00164ce:	90                   	nop
c00164cf:	83 c4 0c             	add    esp,0xc
c00164d2:	c3                   	ret    
c00164d3:	90                   	nop

c00164d4 <FAT::~FAT()>:
c00164d4:	83 ec 0c             	sub    esp,0xc
c00164d7:	83 ec 0c             	sub    esp,0xc
c00164da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00164de:	e8 cd ff ff ff       	call   c00164b0 <FAT::~FAT()>
c00164e3:	83 c4 10             	add    esp,0x10
c00164e6:	83 ec 08             	sub    esp,0x8
c00164e9:	6a 08                	push   0x8
c00164eb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00164ef:	e8 68 3f ff ff       	call   c000a45c <operator delete(void*, unsigned long)>
c00164f4:	83 c4 10             	add    esp,0x10
c00164f7:	83 c4 0c             	add    esp,0xc
c00164fa:	c3                   	ret    
c00164fb:	90                   	nop

c00164fc <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c00164fc:	83 ec 1c             	sub    esp,0x1c
c00164ff:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c0016506:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c001650b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001650f:	8b 04 85 40 62 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9dc0]
c0016516:	83 f8 ff             	cmp    eax,0xffffffff
c0016519:	75 35                	jne    c0016550 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c001651b:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001651f:	88 c2                	mov    dl,al
c0016521:	a1 20 62 02 c0       	mov    eax,ds:0xc0026220
c0016526:	01 d0                	add    eax,edx
c0016528:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001652c:	8b 15 20 62 02 c0    	mov    edx,DWORD PTR ds:0xc0026220
c0016532:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016536:	89 14 85 40 62 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9dc0],edx
c001653d:	a1 20 62 02 c0       	mov    eax,ds:0xc0026220
c0016542:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0016546:	89 14 85 c0 62 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9d40],edx
c001654d:	eb 19                	jmp    c0016568 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c001654f:	90                   	nop
c0016550:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0016554:	88 c2                	mov    dl,al
c0016556:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001655a:	8b 04 85 40 62 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9dc0]
c0016561:	01 d0                	add    eax,edx
c0016563:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0016567:	90                   	nop
c0016568:	83 ec 04             	sub    esp,0x4
c001656b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001656f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0016573:	8d 44 24 15          	lea    eax,[esp+0x15]
c0016577:	50                   	push   eax
c0016578:	e8 d7 e8 fe ff       	call   c0004e54 <f_getlabel>
c001657d:	83 c4 10             	add    esp,0x10
c0016580:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016584:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0016589:	75 09                	jne    c0016594 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c001658b:	b8 00 00 00 00       	mov    eax,0x0
c0016590:	eb 0a                	jmp    c001659c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c0016592:	66 90                	xchg   ax,ax
c0016594:	b8 01 00 00 00       	mov    eax,0x1
c0016599:	8d 76 00             	lea    esi,[esi+0x0]
c001659c:	83 c4 1c             	add    esp,0x1c
c001659f:	c3                   	ret    

c00165a0 <FAT::setlabel(LogicalDisk*, int, char*)>:
c00165a0:	57                   	push   edi
c00165a1:	83 ec 58             	sub    esp,0x58
c00165a4:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c00165ac:	8d 54 24 10          	lea    edx,[esp+0x10]
c00165b0:	b8 00 00 00 00       	mov    eax,0x0
c00165b5:	b9 0f 00 00 00       	mov    ecx,0xf
c00165ba:	fc                   	cld    
c00165bb:	89 d7                	mov    edi,edx
c00165bd:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00165bf:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00165c3:	8b 04 85 40 62 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9dc0]
c00165ca:	83 f8 ff             	cmp    eax,0xffffffff
c00165cd:	75 35                	jne    c0016604 <FAT::setlabel(LogicalDisk*, int, char*)+0x64>
c00165cf:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00165d3:	88 c2                	mov    dl,al
c00165d5:	a1 20 62 02 c0       	mov    eax,ds:0xc0026220
c00165da:	01 d0                	add    eax,edx
c00165dc:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00165e0:	8b 15 20 62 02 c0    	mov    edx,DWORD PTR ds:0xc0026220
c00165e6:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00165ea:	89 14 85 40 62 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9dc0],edx
c00165f1:	a1 20 62 02 c0       	mov    eax,ds:0xc0026220
c00165f6:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c00165fa:	89 14 85 c0 62 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9d40],edx
c0016601:	eb 19                	jmp    c001661c <FAT::setlabel(LogicalDisk*, int, char*)+0x7c>
c0016603:	90                   	nop
c0016604:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0016608:	88 c2                	mov    dl,al
c001660a:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001660e:	8b 04 85 40 62 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9dc0]
c0016615:	01 d0                	add    eax,edx
c0016617:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001661b:	90                   	nop
c001661c:	83 ec 08             	sub    esp,0x8
c001661f:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c0016623:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016627:	50                   	push   eax
c0016628:	e8 93 a1 fe ff       	call   c00007c0 <strcat>
c001662d:	83 c4 10             	add    esp,0x10
c0016630:	83 ec 0c             	sub    esp,0xc
c0016633:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016637:	50                   	push   eax
c0016638:	e8 68 e9 fe ff       	call   c0004fa5 <f_setlabel>
c001663d:	83 c4 10             	add    esp,0x10
c0016640:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0016644:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c0016649:	75 09                	jne    c0016654 <FAT::setlabel(LogicalDisk*, int, char*)+0xb4>
c001664b:	b8 00 00 00 00       	mov    eax,0x0
c0016650:	eb 0a                	jmp    c001665c <FAT::setlabel(LogicalDisk*, int, char*)+0xbc>
c0016652:	66 90                	xchg   ax,ax
c0016654:	b8 01 00 00 00       	mov    eax,0x1
c0016659:	8d 76 00             	lea    esi,[esi+0x0]
c001665c:	83 c4 58             	add    esp,0x58
c001665f:	5f                   	pop    edi
c0016660:	c3                   	ret    
c0016661:	90                   	nop
c0016662:	66 90                	xchg   ax,ax

c0016664 <FAT::format(LogicalDisk*, int, char const*, int)>:
c0016664:	83 ec 2c             	sub    esp,0x2c
c0016667:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001666f:	83 ec 08             	sub    esp,0x8
c0016672:	68 48 f7 01 c0       	push   0xc001f748
c0016677:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001667b:	e8 60 a0 fe ff       	call   c00006e0 <strcmp>
c0016680:	83 c4 10             	add    esp,0x10
c0016683:	85 c0                	test   eax,eax
c0016685:	0f 94 c0             	sete   al
c0016688:	84 c0                	test   al,al
c001668a:	74 10                	je     c001669c <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c001668c:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0016694:	e9 b3 00 00 00       	jmp    c001674c <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c0016699:	8d 76 00             	lea    esi,[esi+0x0]
c001669c:	83 ec 08             	sub    esp,0x8
c001669f:	68 3a f7 01 c0       	push   0xc001f73a
c00166a4:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00166a8:	e8 33 a0 fe ff       	call   c00006e0 <strcmp>
c00166ad:	83 c4 10             	add    esp,0x10
c00166b0:	85 c0                	test   eax,eax
c00166b2:	0f 94 c0             	sete   al
c00166b5:	84 c0                	test   al,al
c00166b7:	74 0f                	je     c00166c8 <FAT::format(LogicalDisk*, int, char const*, int)+0x64>
c00166b9:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00166c1:	e9 86 00 00 00       	jmp    c001674c <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c00166c6:	66 90                	xchg   ax,ax
c00166c8:	83 ec 08             	sub    esp,0x8
c00166cb:	68 40 f7 01 c0       	push   0xc001f740
c00166d0:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00166d4:	e8 07 a0 fe ff       	call   c00006e0 <strcmp>
c00166d9:	83 c4 10             	add    esp,0x10
c00166dc:	85 c0                	test   eax,eax
c00166de:	0f 94 c0             	sete   al
c00166e1:	84 c0                	test   al,al
c00166e3:	74 0b                	je     c00166f0 <FAT::format(LogicalDisk*, int, char const*, int)+0x8c>
c00166e5:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00166ed:	eb 5d                	jmp    c001674c <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c00166ef:	90                   	nop
c00166f0:	83 ec 08             	sub    esp,0x8
c00166f3:	68 dc d6 01 c0       	push   0xc001d6dc
c00166f8:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00166fc:	e8 df 9f fe ff       	call   c00006e0 <strcmp>
c0016701:	83 c4 10             	add    esp,0x10
c0016704:	85 c0                	test   eax,eax
c0016706:	0f 94 c0             	sete   al
c0016709:	84 c0                	test   al,al
c001670b:	74 0b                	je     c0016718 <FAT::format(LogicalDisk*, int, char const*, int)+0xb4>
c001670d:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c0016715:	eb 35                	jmp    c001674c <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c0016717:	90                   	nop
c0016718:	83 ec 08             	sub    esp,0x8
c001671b:	68 46 f7 01 c0       	push   0xc001f746
c0016720:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016724:	e8 b7 9f fe ff       	call   c00006e0 <strcmp>
c0016729:	83 c4 10             	add    esp,0x10
c001672c:	85 c0                	test   eax,eax
c001672e:	0f 94 c0             	sete   al
c0016731:	84 c0                	test   al,al
c0016733:	74 0b                	je     c0016740 <FAT::format(LogicalDisk*, int, char const*, int)+0xdc>
c0016735:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c001673d:	eb 0d                	jmp    c001674c <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001673f:	90                   	nop
c0016740:	b8 08 00 00 00       	mov    eax,0x8
c0016745:	e9 ea 00 00 00       	jmp    c0016834 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c001674a:	66 90                	xchg   ax,ax
c001674c:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c0016753:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0016758:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001675c:	8b 04 85 40 62 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9dc0]
c0016763:	83 f8 ff             	cmp    eax,0xffffffff
c0016766:	75 34                	jne    c001679c <FAT::format(LogicalDisk*, int, char const*, int)+0x138>
c0016768:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001676c:	88 c2                	mov    dl,al
c001676e:	a1 20 62 02 c0       	mov    eax,ds:0xc0026220
c0016773:	01 d0                	add    eax,edx
c0016775:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0016779:	8b 15 20 62 02 c0    	mov    edx,DWORD PTR ds:0xc0026220
c001677f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016783:	89 14 85 40 62 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9dc0],edx
c001678a:	a1 20 62 02 c0       	mov    eax,ds:0xc0026220
c001678f:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0016793:	89 14 85 c0 62 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9d40],edx
c001679a:	eb 18                	jmp    c00167b4 <FAT::format(LogicalDisk*, int, char const*, int)+0x150>
c001679c:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c00167a0:	88 c2                	mov    dl,al
c00167a2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00167a6:	8b 04 85 40 62 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9dc0]
c00167ad:	01 d0                	add    eax,edx
c00167af:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00167b3:	90                   	nop
c00167b4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00167b8:	88 04 24             	mov    BYTE PTR [esp],al
c00167bb:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00167bf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00167c3:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00167cb:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c00167d0:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00167d8:	83 ec 0c             	sub    esp,0xc
c00167db:	68 00 20 00 00       	push   0x2000
c00167e0:	e8 d4 0f ff ff       	call   c00077b9 <malloc>
c00167e5:	83 c4 10             	add    esp,0x10
c00167e8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00167ec:	68 00 20 00 00       	push   0x2000
c00167f1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00167f5:	8d 44 24 08          	lea    eax,[esp+0x8]
c00167f9:	50                   	push   eax
c00167fa:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c00167fe:	50                   	push   eax
c00167ff:	e8 91 ea fe ff       	call   c0005295 <f_mkfs>
c0016804:	83 c4 10             	add    esp,0x10
c0016807:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001680b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0016810:	75 0a                	jne    c001681c <FAT::format(LogicalDisk*, int, char const*, int)+0x1b8>
c0016812:	b8 00 00 00 00       	mov    eax,0x0
c0016817:	eb 1b                	jmp    c0016834 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c0016819:	8d 76 00             	lea    esi,[esi+0x0]
c001681c:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c0016821:	75 09                	jne    c001682c <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c0016823:	b8 09 00 00 00       	mov    eax,0x9
c0016828:	eb 0a                	jmp    c0016834 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c001682a:	66 90                	xchg   ax,ax
c001682c:	b8 01 00 00 00       	mov    eax,0x1
c0016831:	8d 76 00             	lea    esi,[esi+0x0]
c0016834:	83 c4 2c             	add    esp,0x2c
c0016837:	c3                   	ret    

c0016838 <FAT::tryMount(LogicalDisk*, int)>:
c0016838:	81 ec 4c 03 00 00    	sub    esp,0x34c
c001683e:	a1 20 62 02 c0       	mov    eax,ds:0xc0026220
c0016843:	83 f8 14             	cmp    eax,0x14
c0016846:	75 18                	jne    c0016860 <FAT::tryMount(LogicalDisk*, int)+0x28>
c0016848:	83 ec 0c             	sub    esp,0xc
c001684b:	68 4c f7 01 c0       	push   0xc001f74c
c0016850:	e8 52 9a ff ff       	call   c00102a7 <KePanic(char const*)>
c0016855:	83 c4 10             	add    esp,0x10
c0016858:	b0 00                	mov    al,0x0
c001685a:	e9 e9 01 00 00       	jmp    c0016a48 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001685f:	90                   	nop
c0016860:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c0016867:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001686d:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016873:	3d 00 02 00 00       	cmp    eax,0x200
c0016878:	74 0a                	je     c0016884 <FAT::tryMount(LogicalDisk*, int)+0x4c>
c001687a:	b0 00                	mov    al,0x0
c001687c:	e9 c7 01 00 00       	jmp    c0016a48 <FAT::tryMount(LogicalDisk*, int)+0x210>
c0016881:	8d 76 00             	lea    esi,[esi+0x0]
c0016884:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c001688c:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c0016893:	8b 04 85 40 62 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9dc0]
c001689a:	83 f8 ff             	cmp    eax,0xffffffff
c001689d:	74 09                	je     c00168a8 <FAT::tryMount(LogicalDisk*, int)+0x70>
c001689f:	b0 01                	mov    al,0x1
c00168a1:	e9 a2 01 00 00       	jmp    c0016a48 <FAT::tryMount(LogicalDisk*, int)+0x210>
c00168a6:	66 90                	xchg   ax,ax
c00168a8:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c00168b2:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c00168ba:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c00168c1:	88 c2                	mov    dl,al
c00168c3:	a1 20 62 02 c0       	mov    eax,ds:0xc0026220
c00168c8:	01 d0                	add    eax,edx
c00168ca:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c00168d1:	8b 15 20 62 02 c0    	mov    edx,DWORD PTR ds:0xc0026220
c00168d7:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c00168de:	89 14 85 40 62 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9dc0],edx
c00168e5:	a1 20 62 02 c0       	mov    eax,ds:0xc0026220
c00168ea:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c00168f1:	89 14 85 c0 62 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9d40],edx
c00168f8:	83 ec 0c             	sub    esp,0xc
c00168fb:	68 34 02 00 00       	push   0x234
c0016900:	e8 b4 0e ff ff       	call   c00077b9 <malloc>
c0016905:	83 c4 10             	add    esp,0x10
c0016908:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c001690f:	83 ec 04             	sub    esp,0x4
c0016912:	6a 00                	push   0x0
c0016914:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c001691b:	50                   	push   eax
c001691c:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0016923:	e8 93 d1 fe ff       	call   c0003abb <f_mount>
c0016928:	83 c4 10             	add    esp,0x10
c001692b:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0016932:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c001693a:	74 1c                	je     c0016958 <FAT::tryMount(LogicalDisk*, int)+0x120>
c001693c:	83 ec 0c             	sub    esp,0xc
c001693f:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0016946:	e8 8e 0e ff ff       	call   c00077d9 <rfree>
c001694b:	83 c4 10             	add    esp,0x10
c001694e:	b0 00                	mov    al,0x0
c0016950:	e9 f3 00 00 00       	jmp    c0016a48 <FAT::tryMount(LogicalDisk*, int)+0x210>
c0016955:	8d 76 00             	lea    esi,[esi+0x0]
c0016958:	83 ec 04             	sub    esp,0x4
c001695b:	68 00 01 00 00       	push   0x100
c0016960:	6a 00                	push   0x0
c0016962:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0016969:	50                   	push   eax
c001696a:	e8 61 9b fe ff       	call   c00004d0 <memset>
c001696f:	83 c4 10             	add    esp,0x10
c0016972:	83 ec 08             	sub    esp,0x8
c0016975:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c001697c:	50                   	push   eax
c001697d:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0016984:	50                   	push   eax
c0016985:	e8 36 9e fe ff       	call   c00007c0 <strcat>
c001698a:	83 c4 10             	add    esp,0x10
c001698d:	83 ec 08             	sub    esp,0x8
c0016990:	68 5a f7 01 c0       	push   0xc001f75a
c0016995:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c001699c:	50                   	push   eax
c001699d:	e8 1e 9e fe ff       	call   c00007c0 <strcat>
c00169a2:	83 c4 10             	add    esp,0x10
c00169a5:	83 ec 04             	sub    esp,0x4
c00169a8:	6a 01                	push   0x1
c00169aa:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c00169b1:	50                   	push   eax
c00169b2:	8d 44 24 14          	lea    eax,[esp+0x14]
c00169b6:	50                   	push   eax
c00169b7:	e8 61 d1 fe ff       	call   c0003b1d <f_open>
c00169bc:	83 c4 10             	add    esp,0x10
c00169bf:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c00169c6:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c00169cd:	85 c0                	test   eax,eax
c00169cf:	74 0b                	je     c00169dc <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c00169d1:	78 31                	js     c0016a04 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c00169d3:	83 e8 04             	sub    eax,0x4
c00169d6:	83 f8 01             	cmp    eax,0x1
c00169d9:	77 29                	ja     c0016a04 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c00169db:	90                   	nop
c00169dc:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c00169e4:	83 ec 0c             	sub    esp,0xc
c00169e7:	8d 44 24 14          	lea    eax,[esp+0x14]
c00169eb:	50                   	push   eax
c00169ec:	e8 df d8 fe ff       	call   c00042d0 <f_close>
c00169f1:	83 c4 10             	add    esp,0x10
c00169f4:	90                   	nop
c00169f5:	80 bc 24 3f 03 00 00 00 	cmp    BYTE PTR [esp+0x33f],0x0
c00169fd:	74 41                	je     c0016a40 <FAT::tryMount(LogicalDisk*, int)+0x208>
c00169ff:	eb 33                	jmp    c0016a34 <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c0016a01:	8d 76 00             	lea    esi,[esi+0x0]
c0016a04:	83 ec 0c             	sub    esp,0xc
c0016a07:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0016a0e:	e8 c6 0d ff ff       	call   c00077d9 <rfree>
c0016a13:	83 c4 10             	add    esp,0x10
c0016a16:	83 ec 04             	sub    esp,0x4
c0016a19:	6a 00                	push   0x0
c0016a1b:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0016a22:	50                   	push   eax
c0016a23:	6a 00                	push   0x0
c0016a25:	e8 91 d0 fe ff       	call   c0003abb <f_mount>
c0016a2a:	83 c4 10             	add    esp,0x10
c0016a2d:	b0 00                	mov    al,0x0
c0016a2f:	eb 17                	jmp    c0016a48 <FAT::tryMount(LogicalDisk*, int)+0x210>
c0016a31:	8d 76 00             	lea    esi,[esi+0x0]
c0016a34:	a1 20 62 02 c0       	mov    eax,ds:0xc0026220
c0016a39:	40                   	inc    eax
c0016a3a:	a3 20 62 02 c0       	mov    ds:0xc0026220,eax
c0016a3f:	90                   	nop
c0016a40:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c0016a47:	90                   	nop
c0016a48:	81 c4 4c 03 00 00    	add    esp,0x34c
c0016a4e:	c3                   	ret    
c0016a4f:	90                   	nop

c0016a50 <FAT::allocateSwapfile(char const*, int)>:
c0016a50:	55                   	push   ebp
c0016a51:	57                   	push   edi
c0016a52:	56                   	push   esi
c0016a53:	53                   	push   ebx
c0016a54:	81 ec 3c 04 00 00    	sub    esp,0x43c
c0016a5a:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c0016a65:	83 ec 0c             	sub    esp,0xc
c0016a68:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c0016a6f:	e8 45 0d ff ff       	call   c00077b9 <malloc>
c0016a74:	83 c4 10             	add    esp,0x10
c0016a77:	89 c7                	mov    edi,eax
c0016a79:	a1 90 61 02 c0       	mov    eax,ds:0xc0026190
c0016a7e:	83 ec 04             	sub    esp,0x4
c0016a81:	50                   	push   eax
c0016a82:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c0016a89:	57                   	push   edi
c0016a8a:	e8 39 40 ff ff       	call   c000aac8 <File::File(char const*, Process*)>
c0016a8f:	83 c4 10             	add    esp,0x10
c0016a92:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c0016a99:	83 ec 04             	sub    esp,0x4
c0016a9c:	8d 44 24 13          	lea    eax,[esp+0x13]
c0016aa0:	50                   	push   eax
c0016aa1:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016aa5:	50                   	push   eax
c0016aa6:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016aad:	e8 82 43 ff ff       	call   c000ae34 <File::stat(unsigned long long*, bool*)>
c0016ab2:	83 c4 10             	add    esp,0x10
c0016ab5:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0016abc:	c1 e0 14             	shl    eax,0x14
c0016abf:	89 c7                	mov    edi,eax
c0016ac1:	89 c5                	mov    ebp,eax
c0016ac3:	c1 fd 1f             	sar    ebp,0x1f
c0016ac6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016aca:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016ace:	89 f9                	mov    ecx,edi
c0016ad0:	31 c1                	xor    ecx,eax
c0016ad2:	89 cb                	mov    ebx,ecx
c0016ad4:	89 e9                	mov    ecx,ebp
c0016ad6:	31 d1                	xor    ecx,edx
c0016ad8:	89 ce                	mov    esi,ecx
c0016ada:	89 f0                	mov    eax,esi
c0016adc:	09 d8                	or     eax,ebx
c0016ade:	0f 84 9c 00 00 00    	je     c0016b80 <FAT::allocateSwapfile(char const*, int)+0x130>
c0016ae4:	83 ec 0c             	sub    esp,0xc
c0016ae7:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016aee:	e8 0d 42 ff ff       	call   c000ad00 <File::unlink()>
c0016af3:	83 c4 10             	add    esp,0x10
c0016af6:	83 ec 08             	sub    esp,0x8
c0016af9:	6a 12                	push   0x12
c0016afb:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016b02:	e8 81 40 ff ff       	call   c000ab88 <File::open(FileOpenMode)>
c0016b07:	83 c4 10             	add    esp,0x10
c0016b0a:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0016b11:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0016b17:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c0016b1e:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0016b25:	c1 e0 14             	shl    eax,0x14
c0016b28:	83 ec 04             	sub    esp,0x4
c0016b2b:	6a 01                	push   0x1
c0016b2d:	50                   	push   eax
c0016b2e:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c0016b35:	e8 fb e5 fe ff       	call   c0005135 <f_expand>
c0016b3a:	83 c4 10             	add    esp,0x10
c0016b3d:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0016b44:	8b 00                	mov    eax,DWORD PTR [eax]
c0016b46:	83 c0 10             	add    eax,0x10
c0016b49:	8b 00                	mov    eax,DWORD PTR [eax]
c0016b4b:	83 ec 0c             	sub    esp,0xc
c0016b4e:	8d 54 24 24          	lea    edx,[esp+0x24]
c0016b52:	52                   	push   edx
c0016b53:	8d 54 24 30          	lea    edx,[esp+0x30]
c0016b57:	52                   	push   edx
c0016b58:	6a 00                	push   0x0
c0016b5a:	68 00 04 00 00       	push   0x400
c0016b5f:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c0016b66:	ff d0                	call   eax
c0016b68:	83 c4 20             	add    esp,0x20
c0016b6b:	83 ec 0c             	sub    esp,0xc
c0016b6e:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016b75:	e8 6c 40 ff ff       	call   c000abe6 <File::close()>
c0016b7a:	83 c4 10             	add    esp,0x10
c0016b7d:	8d 76 00             	lea    esi,[esi+0x0]
c0016b80:	83 ec 08             	sub    esp,0x8
c0016b83:	6a 01                	push   0x1
c0016b85:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016b8c:	e8 f7 3f ff ff       	call   c000ab88 <File::open(FileOpenMode)>
c0016b91:	83 c4 10             	add    esp,0x10
c0016b94:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0016b9b:	8b 00                	mov    eax,DWORD PTR [eax]
c0016b9d:	83 c0 0c             	add    eax,0xc
c0016ba0:	8b 00                	mov    eax,DWORD PTR [eax]
c0016ba2:	83 ec 0c             	sub    esp,0xc
c0016ba5:	8d 54 24 24          	lea    edx,[esp+0x24]
c0016ba9:	52                   	push   edx
c0016baa:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0016bae:	52                   	push   edx
c0016baf:	6a 00                	push   0x0
c0016bb1:	6a 04                	push   0x4
c0016bb3:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c0016bba:	ff d0                	call   eax
c0016bbc:	83 c4 20             	add    esp,0x20
c0016bbf:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0016bc6:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0016bcc:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c0016bd3:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c0016bda:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0016bdd:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c0016be4:	83 ec 0c             	sub    esp,0xc
c0016be7:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016bee:	e8 f3 3f ff ff       	call   c000abe6 <File::close()>
c0016bf3:	83 c4 10             	add    esp,0x10
c0016bf6:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c0016bfd:	ba 00 00 00 00       	mov    edx,0x0
c0016c02:	81 c4 3c 04 00 00    	add    esp,0x43c
c0016c08:	5b                   	pop    ebx
c0016c09:	5e                   	pop    esi
c0016c0a:	5f                   	pop    edi
c0016c0b:	5d                   	pop    ebp
c0016c0c:	c3                   	ret    
c0016c0d:	90                   	nop
c0016c0e:	66 90                	xchg   ax,ax

c0016c10 <FAT::readDir(void*, unsigned long, void*, int*)>:
c0016c10:	57                   	push   edi
c0016c11:	56                   	push   esi
c0016c12:	53                   	push   ebx
c0016c13:	81 ec 50 02 00 00    	sub    esp,0x250
c0016c19:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c0016c21:	74 0d                	je     c0016c30 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c0016c23:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c0016c2b:	75 0f                	jne    c0016c3c <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c0016c2d:	8d 76 00             	lea    esi,[esi+0x0]
c0016c30:	b8 04 00 00 00       	mov    eax,0x4
c0016c35:	e9 36 01 00 00       	jmp    c0016d70 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c0016c3a:	66 90                	xchg   ax,ax
c0016c3c:	83 ec 08             	sub    esp,0x8
c0016c3f:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0016c46:	50                   	push   eax
c0016c47:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c0016c4e:	e8 40 d9 fe ff       	call   c0004593 <f_readdir>
c0016c53:	83 c4 10             	add    esp,0x10
c0016c56:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c0016c5d:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c0016c64:	83 ec 0c             	sub    esp,0xc
c0016c67:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0016c6e:	83 c0 16             	add    eax,0x16
c0016c71:	50                   	push   eax
c0016c72:	e8 c9 98 fe ff       	call   c0000540 <strlen>
c0016c77:	83 c4 10             	add    esp,0x10
c0016c7a:	ba 00 00 00 00       	mov    edx,0x0
c0016c7f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016c83:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0016c87:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c0016c8e:	25 ff 00 00 00       	and    eax,0xff
c0016c93:	83 e0 10             	and    eax,0x10
c0016c96:	74 08                	je     c0016ca0 <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c0016c98:	b8 02 00 00 00       	mov    eax,0x2
c0016c9d:	eb 09                	jmp    c0016ca8 <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c0016c9f:	90                   	nop
c0016ca0:	b8 01 00 00 00       	mov    eax,0x1
c0016ca5:	8d 76 00             	lea    esi,[esi+0x0]
c0016ca8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016cac:	83 ec 08             	sub    esp,0x8
c0016caf:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0016cb6:	83 c0 16             	add    eax,0x16
c0016cb9:	50                   	push   eax
c0016cba:	8d 44 24 14          	lea    eax,[esp+0x14]
c0016cbe:	83 c0 10             	add    eax,0x10
c0016cc1:	50                   	push   eax
c0016cc2:	e8 39 99 fe ff       	call   c0000600 <strcpy>
c0016cc7:	83 c4 10             	add    esp,0x10
c0016cca:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c0016cd1:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c0016cd8:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016cdc:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c0016ce3:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c0016cea:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c0016cf1:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c0016cf8:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c0016cff:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c0016d06:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c0016d0d:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c0016d14:	89 c6                	mov    esi,eax
c0016d16:	89 d7                	mov    edi,edx
c0016d18:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016d1a:	89 c8                	mov    eax,ecx
c0016d1c:	89 fa                	mov    edx,edi
c0016d1e:	89 f3                	mov    ebx,esi
c0016d20:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c0016d27:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c0016d2e:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c0016d35:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c0016d3c:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0016d42:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c0016d49:	84 c0                	test   al,al
c0016d4b:	75 07                	jne    c0016d54 <FAT::readDir(void*, unsigned long, void*, int*)+0x144>
c0016d4d:	b8 07 00 00 00       	mov    eax,0x7
c0016d52:	eb 1c                	jmp    c0016d70 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c0016d54:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c0016d5b:	85 c0                	test   eax,eax
c0016d5d:	75 09                	jne    c0016d68 <FAT::readDir(void*, unsigned long, void*, int*)+0x158>
c0016d5f:	b8 00 00 00 00       	mov    eax,0x0
c0016d64:	eb 0a                	jmp    c0016d70 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c0016d66:	66 90                	xchg   ax,ax
c0016d68:	b8 01 00 00 00       	mov    eax,0x1
c0016d6d:	8d 76 00             	lea    esi,[esi+0x0]
c0016d70:	81 c4 50 02 00 00    	add    esp,0x250
c0016d76:	5b                   	pop    ebx
c0016d77:	5e                   	pop    esi
c0016d78:	5f                   	pop    edi
c0016d79:	c3                   	ret    
c0016d7a:	66 90                	xchg   ax,ax

c0016d7c <FAT::read(void*, unsigned long, void*, int*)>:
c0016d7c:	83 ec 1c             	sub    esp,0x1c
c0016d7f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0016d84:	74 0a                	je     c0016d90 <FAT::read(void*, unsigned long, void*, int*)+0x14>
c0016d86:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0016d8b:	75 0b                	jne    c0016d98 <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c0016d8d:	8d 76 00             	lea    esi,[esi+0x0]
c0016d90:	b8 04 00 00 00       	mov    eax,0x4
c0016d95:	eb 41                	jmp    c0016dd8 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0016d97:	90                   	nop
c0016d98:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016d9c:	50                   	push   eax
c0016d9d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016da1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0016da5:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016da9:	e8 3a d0 fe ff       	call   c0003de8 <f_read>
c0016dae:	83 c4 10             	add    esp,0x10
c0016db1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016db5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016db9:	89 c2                	mov    edx,eax
c0016dbb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016dbf:	89 10                	mov    DWORD PTR [eax],edx
c0016dc1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016dc5:	85 c0                	test   eax,eax
c0016dc7:	75 07                	jne    c0016dd0 <FAT::read(void*, unsigned long, void*, int*)+0x54>
c0016dc9:	b8 00 00 00 00       	mov    eax,0x0
c0016dce:	eb 08                	jmp    c0016dd8 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0016dd0:	b8 01 00 00 00       	mov    eax,0x1
c0016dd5:	8d 76 00             	lea    esi,[esi+0x0]
c0016dd8:	83 c4 1c             	add    esp,0x1c
c0016ddb:	c3                   	ret    

c0016ddc <FAT::write(void*, unsigned long, void*, int*)>:
c0016ddc:	83 ec 1c             	sub    esp,0x1c
c0016ddf:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0016de4:	74 0a                	je     c0016df0 <FAT::write(void*, unsigned long, void*, int*)+0x14>
c0016de6:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0016deb:	75 0b                	jne    c0016df8 <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c0016ded:	8d 76 00             	lea    esi,[esi+0x0]
c0016df0:	b8 04 00 00 00       	mov    eax,0x4
c0016df5:	eb 41                	jmp    c0016e38 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0016df7:	90                   	nop
c0016df8:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016dfc:	50                   	push   eax
c0016dfd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016e01:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0016e05:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016e09:	e8 d9 d1 fe ff       	call   c0003fe7 <f_write>
c0016e0e:	83 c4 10             	add    esp,0x10
c0016e11:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016e15:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016e19:	89 c2                	mov    edx,eax
c0016e1b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016e1f:	89 10                	mov    DWORD PTR [eax],edx
c0016e21:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016e25:	85 c0                	test   eax,eax
c0016e27:	75 07                	jne    c0016e30 <FAT::write(void*, unsigned long, void*, int*)+0x54>
c0016e29:	b8 00 00 00 00       	mov    eax,0x0
c0016e2e:	eb 08                	jmp    c0016e38 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0016e30:	b8 01 00 00 00       	mov    eax,0x1
c0016e35:	8d 76 00             	lea    esi,[esi+0x0]
c0016e38:	83 c4 1c             	add    esp,0x1c
c0016e3b:	c3                   	ret    

c0016e3c <FAT::close(void*)>:
c0016e3c:	83 ec 1c             	sub    esp,0x1c
c0016e3f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0016e44:	75 0a                	jne    c0016e50 <FAT::close(void*)+0x14>
c0016e46:	b8 04 00 00 00       	mov    eax,0x4
c0016e4b:	eb 3f                	jmp    c0016e8c <FAT::close(void*)+0x50>
c0016e4d:	8d 76 00             	lea    esi,[esi+0x0]
c0016e50:	83 ec 0c             	sub    esp,0xc
c0016e53:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016e57:	e8 74 d4 fe ff       	call   c00042d0 <f_close>
c0016e5c:	83 c4 10             	add    esp,0x10
c0016e5f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016e63:	83 ec 0c             	sub    esp,0xc
c0016e66:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016e6a:	e8 5a 09 ff ff       	call   c00077c9 <free>
c0016e6f:	83 c4 10             	add    esp,0x10
c0016e72:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016e76:	85 c0                	test   eax,eax
c0016e78:	75 0a                	jne    c0016e84 <FAT::close(void*)+0x48>
c0016e7a:	b8 00 00 00 00       	mov    eax,0x0
c0016e7f:	eb 0b                	jmp    c0016e8c <FAT::close(void*)+0x50>
c0016e81:	8d 76 00             	lea    esi,[esi+0x0]
c0016e84:	b8 01 00 00 00       	mov    eax,0x1
c0016e89:	8d 76 00             	lea    esi,[esi+0x0]
c0016e8c:	83 c4 1c             	add    esp,0x1c
c0016e8f:	c3                   	ret    

c0016e90 <FAT::closeDir(void*)>:
c0016e90:	83 ec 1c             	sub    esp,0x1c
c0016e93:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0016e98:	75 0a                	jne    c0016ea4 <FAT::closeDir(void*)+0x14>
c0016e9a:	b8 04 00 00 00       	mov    eax,0x4
c0016e9f:	eb 3f                	jmp    c0016ee0 <FAT::closeDir(void*)+0x50>
c0016ea1:	8d 76 00             	lea    esi,[esi+0x0]
c0016ea4:	83 ec 0c             	sub    esp,0xc
c0016ea7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016eab:	e8 c1 d6 fe ff       	call   c0004571 <f_closedir>
c0016eb0:	83 c4 10             	add    esp,0x10
c0016eb3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016eb7:	83 ec 0c             	sub    esp,0xc
c0016eba:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016ebe:	e8 06 09 ff ff       	call   c00077c9 <free>
c0016ec3:	83 c4 10             	add    esp,0x10
c0016ec6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016eca:	85 c0                	test   eax,eax
c0016ecc:	75 0a                	jne    c0016ed8 <FAT::closeDir(void*)+0x48>
c0016ece:	b8 00 00 00 00       	mov    eax,0x0
c0016ed3:	eb 0b                	jmp    c0016ee0 <FAT::closeDir(void*)+0x50>
c0016ed5:	8d 76 00             	lea    esi,[esi+0x0]
c0016ed8:	b8 01 00 00 00       	mov    eax,0x1
c0016edd:	8d 76 00             	lea    esi,[esi+0x0]
c0016ee0:	83 c4 1c             	add    esp,0x1c
c0016ee3:	c3                   	ret    

c0016ee4 <FAT::seek(void*, unsigned long long)>:
c0016ee4:	83 ec 2c             	sub    esp,0x2c
c0016ee7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016eeb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016eef:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016ef3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016ef7:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0016efc:	75 0a                	jne    c0016f08 <FAT::seek(void*, unsigned long long)+0x24>
c0016efe:	b8 04 00 00 00       	mov    eax,0x4
c0016f03:	eb 33                	jmp    c0016f38 <FAT::seek(void*, unsigned long long)+0x54>
c0016f05:	8d 76 00             	lea    esi,[esi+0x0]
c0016f08:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016f0c:	83 ec 08             	sub    esp,0x8
c0016f0f:	50                   	push   eax
c0016f10:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016f14:	e8 e6 d3 fe ff       	call   c00042ff <f_lseek>
c0016f19:	83 c4 10             	add    esp,0x10
c0016f1c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016f20:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016f24:	85 c0                	test   eax,eax
c0016f26:	75 08                	jne    c0016f30 <FAT::seek(void*, unsigned long long)+0x4c>
c0016f28:	b8 00 00 00 00       	mov    eax,0x0
c0016f2d:	eb 09                	jmp    c0016f38 <FAT::seek(void*, unsigned long long)+0x54>
c0016f2f:	90                   	nop
c0016f30:	b8 01 00 00 00       	mov    eax,0x1
c0016f35:	8d 76 00             	lea    esi,[esi+0x0]
c0016f38:	83 c4 2c             	add    esp,0x2c
c0016f3b:	c3                   	ret    

c0016f3c <fatWrapperReadDisk>:
c0016f3c:	53                   	push   ebx
c0016f3d:	83 ec 18             	sub    esp,0x18
c0016f40:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f44:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0016f48:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0016f4c:	25 ff 00 00 00       	and    eax,0xff
c0016f51:	8b 0c 85 20 54 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdabe0]
c0016f58:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0016f5c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016f60:	ba 00 00 00 00       	mov    edx,0x0
c0016f65:	83 ec 0c             	sub    esp,0xc
c0016f68:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016f6c:	53                   	push   ebx
c0016f6d:	52                   	push   edx
c0016f6e:	50                   	push   eax
c0016f6f:	51                   	push   ecx
c0016f70:	e8 3f 5d ff ff       	call   c000ccb4 <LogicalDisk::read(unsigned long long, int, void*)>
c0016f75:	83 c4 20             	add    esp,0x20
c0016f78:	83 c4 18             	add    esp,0x18
c0016f7b:	5b                   	pop    ebx
c0016f7c:	c3                   	ret    
c0016f7d:	8d 76 00             	lea    esi,[esi+0x0]

c0016f80 <fatWrapperWriteDisk>:
c0016f80:	53                   	push   ebx
c0016f81:	83 ec 18             	sub    esp,0x18
c0016f84:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f88:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0016f8c:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0016f90:	25 ff 00 00 00       	and    eax,0xff
c0016f95:	8b 0c 85 20 54 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdabe0]
c0016f9c:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0016fa0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016fa4:	ba 00 00 00 00       	mov    edx,0x0
c0016fa9:	83 ec 0c             	sub    esp,0xc
c0016fac:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016fb0:	53                   	push   ebx
c0016fb1:	52                   	push   edx
c0016fb2:	50                   	push   eax
c0016fb3:	51                   	push   ecx
c0016fb4:	e8 67 5d ff ff       	call   c000cd20 <LogicalDisk::write(unsigned long long, int, void*)>
c0016fb9:	83 c4 20             	add    esp,0x20
c0016fbc:	83 c4 18             	add    esp,0x18
c0016fbf:	5b                   	pop    ebx
c0016fc0:	c3                   	ret    
c0016fc1:	8d 76 00             	lea    esi,[esi+0x0]

c0016fc4 <fatWrapperIoctl>:
c0016fc4:	53                   	push   ebx
c0016fc5:	83 ec 28             	sub    esp,0x28
c0016fc8:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0016fcc:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016fd0:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0016fd4:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0016fd8:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c0016fdd:	75 35                	jne    c0017014 <fatWrapperIoctl+0x50>
c0016fdf:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016fe3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016fe7:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0016feb:	25 ff 00 00 00       	and    eax,0xff
c0016ff0:	8b 04 85 20 54 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdabe0]
c0016ff7:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0016ffd:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0017003:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017007:	66 89 02             	mov    WORD PTR [edx],ax
c001700a:	b8 00 00 00 00       	mov    eax,0x0
c001700f:	e9 c4 00 00 00       	jmp    c00170d8 <fatWrapperIoctl+0x114>
c0017014:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0017019:	75 75                	jne    c0017090 <fatWrapperIoctl+0xcc>
c001701b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001701f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017023:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017027:	25 ff 00 00 00       	and    eax,0xff
c001702c:	8b 04 85 20 54 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdabe0]
c0017033:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0017039:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c001703f:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0017045:	89 c8                	mov    eax,ecx
c0017047:	89 da                	mov    edx,ebx
c0017049:	0f a4 c2 0a          	shld   edx,eax,0xa
c001704d:	c1 e0 0a             	shl    eax,0xa
c0017050:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0017054:	81 e1 ff 00 00 00    	and    ecx,0xff
c001705a:	8b 0c 8d 20 54 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdabe0]
c0017061:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0017067:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c001706d:	89 cb                	mov    ebx,ecx
c001706f:	c1 fb 1f             	sar    ebx,0x1f
c0017072:	53                   	push   ebx
c0017073:	51                   	push   ecx
c0017074:	52                   	push   edx
c0017075:	50                   	push   eax
c0017076:	e8 65 58 00 00       	call   c001c8e0 <__udivdi3>
c001707b:	83 c4 10             	add    esp,0x10
c001707e:	89 c2                	mov    edx,eax
c0017080:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017084:	89 10                	mov    DWORD PTR [eax],edx
c0017086:	b8 00 00 00 00       	mov    eax,0x0
c001708b:	eb 4b                	jmp    c00170d8 <fatWrapperIoctl+0x114>
c001708d:	8d 76 00             	lea    esi,[esi+0x0]
c0017090:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0017095:	75 09                	jne    c00170a0 <fatWrapperIoctl+0xdc>
c0017097:	b8 00 00 00 00       	mov    eax,0x0
c001709c:	eb 3a                	jmp    c00170d8 <fatWrapperIoctl+0x114>
c001709e:	66 90                	xchg   ax,ax
c00170a0:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c00170a5:	75 19                	jne    c00170c0 <fatWrapperIoctl+0xfc>
c00170a7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00170ab:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00170af:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00170b3:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c00170b9:	b8 00 00 00 00       	mov    eax,0x0
c00170be:	eb 18                	jmp    c00170d8 <fatWrapperIoctl+0x114>
c00170c0:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c00170c5:	75 09                	jne    c00170d0 <fatWrapperIoctl+0x10c>
c00170c7:	b8 00 00 00 00       	mov    eax,0x0
c00170cc:	eb 0a                	jmp    c00170d8 <fatWrapperIoctl+0x114>
c00170ce:	66 90                	xchg   ax,ax
c00170d0:	b8 04 00 00 00       	mov    eax,0x4
c00170d5:	8d 76 00             	lea    esi,[esi+0x0]
c00170d8:	83 c4 28             	add    esp,0x28
c00170db:	5b                   	pop    ebx
c00170dc:	c3                   	ret    
c00170dd:	90                   	nop
c00170de:	66 90                	xchg   ax,ax

c00170e0 <FAT::FAT()>:
c00170e0:	83 ec 1c             	sub    esp,0x1c
c00170e3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170e7:	83 ec 0c             	sub    esp,0xc
c00170ea:	50                   	push   eax
c00170eb:	e8 84 37 ff ff       	call   c000a874 <Filesystem::Filesystem()>
c00170f0:	83 c4 10             	add    esp,0x10
c00170f3:	ba 70 f7 01 c0       	mov    edx,0xc001f770
c00170f8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170fc:	89 10                	mov    DWORD PTR [eax],edx
c00170fe:	c7 05 20 62 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026220,0x0
c0017108:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017110:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0017115:	7f 15                	jg     c001712c <FAT::FAT()+0x4c>
c0017117:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001711b:	c7 04 85 40 62 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd9dc0],0xffffffff
c0017126:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001712a:	eb e4                	jmp    c0017110 <FAT::FAT()+0x30>
c001712c:	90                   	nop
c001712d:	83 c4 1c             	add    esp,0x1c
c0017130:	c3                   	ret    
c0017131:	90                   	nop
c0017132:	66 90                	xchg   ax,ax

c0017134 <FAT::fixFilepath(char*)>:
c0017134:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017138:	8a 00                	mov    al,BYTE PTR [eax]
c001713a:	3c 40                	cmp    al,0x40
c001713c:	7e 2e                	jle    c001716c <FAT::fixFilepath(char*)+0x38>
c001713e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017142:	8a 00                	mov    al,BYTE PTR [eax]
c0017144:	83 e8 41             	sub    eax,0x41
c0017147:	88 c2                	mov    dl,al
c0017149:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001714d:	88 10                	mov    BYTE PTR [eax],dl
c001714f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017153:	8a 00                	mov    al,BYTE PTR [eax]
c0017155:	0f be c0             	movsx  eax,al
c0017158:	8b 04 85 40 62 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9dc0]
c001715f:	83 c0 30             	add    eax,0x30
c0017162:	88 c2                	mov    dl,al
c0017164:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017168:	88 10                	mov    BYTE PTR [eax],dl
c001716a:	66 90                	xchg   ax,ax
c001716c:	90                   	nop
c001716d:	c3                   	ret    
c001716e:	66 90                	xchg   ax,ax

c0017170 <FAT::open(char const*, void**, FileOpenMode)>:
c0017170:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0017176:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001717e:	74 0c                	je     c001718c <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c0017180:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0017188:	75 0e                	jne    c0017198 <FAT::open(char const*, void**, FileOpenMode)+0x28>
c001718a:	66 90                	xchg   ax,ax
c001718c:	b8 04 00 00 00       	mov    eax,0x4
c0017191:	e9 0a 01 00 00       	jmp    c00172a0 <FAT::open(char const*, void**, FileOpenMode)+0x130>
c0017196:	66 90                	xchg   ax,ax
c0017198:	83 ec 08             	sub    esp,0x8
c001719b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00171a2:	8d 44 24 14          	lea    eax,[esp+0x14]
c00171a6:	50                   	push   eax
c00171a7:	e8 54 94 fe ff       	call   c0000600 <strcpy>
c00171ac:	83 c4 10             	add    esp,0x10
c00171af:	83 ec 08             	sub    esp,0x8
c00171b2:	8d 44 24 10          	lea    eax,[esp+0x10]
c00171b6:	50                   	push   eax
c00171b7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00171be:	e8 71 ff ff ff       	call   c0017134 <FAT::fixFilepath(char*)>
c00171c3:	83 c4 10             	add    esp,0x10
c00171c6:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c00171ce:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00171d5:	83 e0 01             	and    eax,0x1
c00171d8:	74 0a                	je     c00171e4 <FAT::open(char const*, void**, FileOpenMode)+0x74>
c00171da:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c00171e2:	66 90                	xchg   ax,ax
c00171e4:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00171eb:	83 e0 04             	and    eax,0x4
c00171ee:	74 10                	je     c0017200 <FAT::open(char const*, void**, FileOpenMode)+0x90>
c00171f0:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c00171f8:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0017200:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0017207:	83 e0 02             	and    eax,0x2
c001720a:	74 08                	je     c0017214 <FAT::open(char const*, void**, FileOpenMode)+0xa4>
c001720c:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0017214:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001721b:	83 e0 08             	and    eax,0x8
c001721e:	74 08                	je     c0017228 <FAT::open(char const*, void**, FileOpenMode)+0xb8>
c0017220:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c0017228:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001722f:	83 e0 10             	and    eax,0x10
c0017232:	74 08                	je     c001723c <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c0017234:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c001723c:	83 ec 0c             	sub    esp,0xc
c001723f:	68 28 02 00 00       	push   0x228
c0017244:	e8 70 05 ff ff       	call   c00077b9 <malloc>
c0017249:	83 c4 10             	add    esp,0x10
c001724c:	89 c2                	mov    edx,eax
c001724e:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0017255:	89 10                	mov    DWORD PTR [eax],edx
c0017257:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001725e:	31 d2                	xor    edx,edx
c0017260:	88 c2                	mov    dl,al
c0017262:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0017269:	8b 00                	mov    eax,DWORD PTR [eax]
c001726b:	83 ec 04             	sub    esp,0x4
c001726e:	52                   	push   edx
c001726f:	8d 54 24 10          	lea    edx,[esp+0x10]
c0017273:	52                   	push   edx
c0017274:	50                   	push   eax
c0017275:	e8 a3 c8 fe ff       	call   c0003b1d <f_open>
c001727a:	83 c4 10             	add    esp,0x10
c001727d:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c0017284:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c001728c:	74 0a                	je     c0017298 <FAT::open(char const*, void**, FileOpenMode)+0x128>
c001728e:	b8 01 00 00 00       	mov    eax,0x1
c0017293:	eb 0b                	jmp    c00172a0 <FAT::open(char const*, void**, FileOpenMode)+0x130>
c0017295:	8d 76 00             	lea    esi,[esi+0x0]
c0017298:	b8 00 00 00 00       	mov    eax,0x0
c001729d:	8d 76 00             	lea    esi,[esi+0x0]
c00172a0:	81 c4 1c 01 00 00    	add    esp,0x11c
c00172a6:	c3                   	ret    
c00172a7:	90                   	nop

c00172a8 <FAT::openDir(char const*, void**)>:
c00172a8:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00172ae:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00172b6:	74 0c                	je     c00172c4 <FAT::openDir(char const*, void**)+0x1c>
c00172b8:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c00172c0:	75 0e                	jne    c00172d0 <FAT::openDir(char const*, void**)+0x28>
c00172c2:	66 90                	xchg   ax,ax
c00172c4:	b8 04 00 00 00       	mov    eax,0x4
c00172c9:	e9 82 00 00 00       	jmp    c0017350 <FAT::openDir(char const*, void**)+0xa8>
c00172ce:	66 90                	xchg   ax,ax
c00172d0:	83 ec 08             	sub    esp,0x8
c00172d3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00172da:	8d 44 24 18          	lea    eax,[esp+0x18]
c00172de:	50                   	push   eax
c00172df:	e8 1c 93 fe ff       	call   c0000600 <strcpy>
c00172e4:	83 c4 10             	add    esp,0x10
c00172e7:	83 ec 08             	sub    esp,0x8
c00172ea:	8d 44 24 14          	lea    eax,[esp+0x14]
c00172ee:	50                   	push   eax
c00172ef:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00172f6:	e8 39 fe ff ff       	call   c0017134 <FAT::fixFilepath(char*)>
c00172fb:	83 c4 10             	add    esp,0x10
c00172fe:	83 ec 0c             	sub    esp,0xc
c0017301:	6a 30                	push   0x30
c0017303:	e8 b1 04 ff ff       	call   c00077b9 <malloc>
c0017308:	83 c4 10             	add    esp,0x10
c001730b:	89 c2                	mov    edx,eax
c001730d:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0017314:	89 10                	mov    DWORD PTR [eax],edx
c0017316:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001731d:	8b 00                	mov    eax,DWORD PTR [eax]
c001731f:	83 ec 08             	sub    esp,0x8
c0017322:	8d 54 24 14          	lea    edx,[esp+0x14]
c0017326:	52                   	push   edx
c0017327:	50                   	push   eax
c0017328:	e8 79 d1 fe ff       	call   c00044a6 <f_opendir>
c001732d:	83 c4 10             	add    esp,0x10
c0017330:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0017337:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c001733f:	74 07                	je     c0017348 <FAT::openDir(char const*, void**)+0xa0>
c0017341:	b8 01 00 00 00       	mov    eax,0x1
c0017346:	eb 08                	jmp    c0017350 <FAT::openDir(char const*, void**)+0xa8>
c0017348:	b8 00 00 00 00       	mov    eax,0x0
c001734d:	8d 76 00             	lea    esi,[esi+0x0]
c0017350:	81 c4 1c 01 00 00    	add    esp,0x11c
c0017356:	c3                   	ret    
c0017357:	90                   	nop

c0017358 <FAT::stat(char const*, unsigned long long*, bool*)>:
c0017358:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001735e:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c0017366:	75 0c                	jne    c0017374 <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c0017368:	b8 04 00 00 00       	mov    eax,0x4
c001736d:	e9 d6 00 00 00       	jmp    c0017448 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0017372:	66 90                	xchg   ax,ax
c0017374:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c001737c:	75 0a                	jne    c0017388 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c001737e:	b8 04 00 00 00       	mov    eax,0x4
c0017383:	e9 c0 00 00 00       	jmp    c0017448 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0017388:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0017390:	75 0a                	jne    c001739c <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c0017392:	b8 04 00 00 00       	mov    eax,0x4
c0017397:	e9 ac 00 00 00       	jmp    c0017448 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001739c:	83 ec 08             	sub    esp,0x8
c001739f:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00173a6:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c00173ad:	50                   	push   eax
c00173ae:	e8 4d 92 fe ff       	call   c0000600 <strcpy>
c00173b3:	83 c4 10             	add    esp,0x10
c00173b6:	83 ec 08             	sub    esp,0x8
c00173b9:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c00173c0:	50                   	push   eax
c00173c1:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00173c8:	e8 67 fd ff ff       	call   c0017134 <FAT::fixFilepath(char*)>
c00173cd:	83 c4 10             	add    esp,0x10
c00173d0:	83 ec 08             	sub    esp,0x8
c00173d3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00173d7:	50                   	push   eax
c00173d8:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c00173df:	50                   	push   eax
c00173e0:	e8 40 d2 fe ff       	call   c0004625 <f_stat>
c00173e5:	83 c4 10             	add    esp,0x10
c00173e8:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c00173ef:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c00173f6:	85 c0                	test   eax,eax
c00173f8:	74 0a                	je     c0017404 <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c00173fa:	83 f8 04             	cmp    eax,0x4
c00173fd:	74 39                	je     c0017438 <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c00173ff:	eb 3f                	jmp    c0017440 <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c0017401:	8d 76 00             	lea    esi,[esi+0x0]
c0017404:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017408:	25 ff 00 00 00       	and    eax,0xff
c001740d:	83 e0 10             	and    eax,0x10
c0017410:	0f 95 c2             	setne  dl
c0017413:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c001741a:	88 10                	mov    BYTE PTR [eax],dl
c001741c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017420:	ba 00 00 00 00       	mov    edx,0x0
c0017425:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c001742c:	89 01                	mov    DWORD PTR [ecx],eax
c001742e:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0017431:	b8 00 00 00 00       	mov    eax,0x0
c0017436:	eb 10                	jmp    c0017448 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0017438:	b8 02 00 00 00       	mov    eax,0x2
c001743d:	eb 09                	jmp    c0017448 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001743f:	90                   	nop
c0017440:	b8 01 00 00 00       	mov    eax,0x1
c0017445:	8d 76 00             	lea    esi,[esi+0x0]
c0017448:	81 c4 2c 02 00 00    	add    esp,0x22c
c001744e:	c3                   	ret    
c001744f:	90                   	nop

c0017450 <FAT::unlink(char const*)>:
c0017450:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0017456:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001745e:	75 08                	jne    c0017468 <FAT::unlink(char const*)+0x18>
c0017460:	b8 04 00 00 00       	mov    eax,0x4
c0017465:	eb 61                	jmp    c00174c8 <FAT::unlink(char const*)+0x78>
c0017467:	90                   	nop
c0017468:	83 ec 08             	sub    esp,0x8
c001746b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0017472:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017476:	50                   	push   eax
c0017477:	e8 84 91 fe ff       	call   c0000600 <strcpy>
c001747c:	83 c4 10             	add    esp,0x10
c001747f:	83 ec 08             	sub    esp,0x8
c0017482:	8d 44 24 14          	lea    eax,[esp+0x14]
c0017486:	50                   	push   eax
c0017487:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001748e:	e8 a1 fc ff ff       	call   c0017134 <FAT::fixFilepath(char*)>
c0017493:	83 c4 10             	add    esp,0x10
c0017496:	83 ec 0c             	sub    esp,0xc
c0017499:	8d 44 24 18          	lea    eax,[esp+0x18]
c001749d:	50                   	push   eax
c001749e:	e8 e7 d3 fe ff       	call   c000488a <f_unlink>
c00174a3:	83 c4 10             	add    esp,0x10
c00174a6:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00174ad:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c00174b4:	85 c0                	test   eax,eax
c00174b6:	75 08                	jne    c00174c0 <FAT::unlink(char const*)+0x70>
c00174b8:	b8 00 00 00 00       	mov    eax,0x0
c00174bd:	eb 09                	jmp    c00174c8 <FAT::unlink(char const*)+0x78>
c00174bf:	90                   	nop
c00174c0:	b8 01 00 00 00       	mov    eax,0x1
c00174c5:	8d 76 00             	lea    esi,[esi+0x0]
c00174c8:	81 c4 1c 01 00 00    	add    esp,0x11c
c00174ce:	c3                   	ret    
c00174cf:	90                   	nop

c00174d0 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c00174d0:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00174d6:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c00174dd:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c00174e4:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c00174e8:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00174ec:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c00174f4:	75 0a                	jne    c0017500 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c00174f6:	b8 04 00 00 00       	mov    eax,0x4
c00174fb:	e9 54 01 00 00       	jmp    c0017654 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x184>
c0017500:	83 ec 08             	sub    esp,0x8
c0017503:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001750a:	8d 44 24 24          	lea    eax,[esp+0x24]
c001750e:	50                   	push   eax
c001750f:	e8 ec 90 fe ff       	call   c0000600 <strcpy>
c0017514:	83 c4 10             	add    esp,0x10
c0017517:	83 ec 08             	sub    esp,0x8
c001751a:	8d 44 24 20          	lea    eax,[esp+0x20]
c001751e:	50                   	push   eax
c001751f:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0017526:	e8 09 fc ff ff       	call   c0017134 <FAT::fixFilepath(char*)>
c001752b:	83 c4 10             	add    esp,0x10
c001752e:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0017536:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c001753e:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0017542:	25 ff 00 00 00       	and    eax,0xff
c0017547:	83 e0 01             	and    eax,0x1
c001754a:	74 08                	je     c0017554 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x84>
c001754c:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c0017554:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0017558:	25 ff 00 00 00       	and    eax,0xff
c001755d:	83 e0 02             	and    eax,0x2
c0017560:	74 0a                	je     c001756c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x9c>
c0017562:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c001756a:	66 90                	xchg   ax,ax
c001756c:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0017570:	25 ff 00 00 00       	and    eax,0xff
c0017575:	83 e0 04             	and    eax,0x4
c0017578:	74 0a                	je     c0017584 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb4>
c001757a:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c0017582:	66 90                	xchg   ax,ax
c0017584:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0017588:	25 ff 00 00 00       	and    eax,0xff
c001758d:	83 e0 08             	and    eax,0x8
c0017590:	74 0a                	je     c001759c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xcc>
c0017592:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c001759a:	66 90                	xchg   ax,ax
c001759c:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00175a0:	25 ff 00 00 00       	and    eax,0xff
c00175a5:	83 e0 01             	and    eax,0x1
c00175a8:	74 0a                	je     c00175b4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe4>
c00175aa:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c00175b2:	66 90                	xchg   ax,ax
c00175b4:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00175b8:	25 ff 00 00 00       	and    eax,0xff
c00175bd:	83 e0 02             	and    eax,0x2
c00175c0:	74 0a                	je     c00175cc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfc>
c00175c2:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c00175ca:	66 90                	xchg   ax,ax
c00175cc:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00175d0:	25 ff 00 00 00       	and    eax,0xff
c00175d5:	83 e0 04             	and    eax,0x4
c00175d8:	74 0a                	je     c00175e4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x114>
c00175da:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c00175e2:	66 90                	xchg   ax,ax
c00175e4:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00175e8:	25 ff 00 00 00       	and    eax,0xff
c00175ed:	83 e0 08             	and    eax,0x8
c00175f0:	74 0a                	je     c00175fc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x12c>
c00175f2:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c00175fa:	66 90                	xchg   ax,ax
c00175fc:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0017603:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c001760a:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0017611:	31 d2                	xor    edx,edx
c0017613:	88 c2                	mov    dl,al
c0017615:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001761c:	25 ff 00 00 00       	and    eax,0xff
c0017621:	83 ec 04             	sub    esp,0x4
c0017624:	52                   	push   edx
c0017625:	50                   	push   eax
c0017626:	8d 44 24 24          	lea    eax,[esp+0x24]
c001762a:	50                   	push   eax
c001762b:	e8 cd d6 fe ff       	call   c0004cfd <f_chmod>
c0017630:	83 c4 10             	add    esp,0x10
c0017633:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c001763a:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c0017641:	85 c0                	test   eax,eax
c0017643:	75 07                	jne    c001764c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x17c>
c0017645:	b8 00 00 00 00       	mov    eax,0x0
c001764a:	eb 08                	jmp    c0017654 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x184>
c001764c:	b8 01 00 00 00       	mov    eax,0x1
c0017651:	8d 76 00             	lea    esi,[esi+0x0]
c0017654:	81 c4 2c 01 00 00    	add    esp,0x12c
c001765a:	c3                   	ret    
c001765b:	90                   	nop

c001765c <FAT::rename(char const*, char const*)>:
c001765c:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0017662:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c001766a:	74 0c                	je     c0017678 <FAT::rename(char const*, char const*)+0x1c>
c001766c:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c0017674:	75 0e                	jne    c0017684 <FAT::rename(char const*, char const*)+0x28>
c0017676:	66 90                	xchg   ax,ax
c0017678:	b8 04 00 00 00       	mov    eax,0x4
c001767d:	e9 9e 00 00 00       	jmp    c0017720 <FAT::rename(char const*, char const*)+0xc4>
c0017682:	66 90                	xchg   ax,ax
c0017684:	83 ec 08             	sub    esp,0x8
c0017687:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001768e:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0017695:	50                   	push   eax
c0017696:	e8 65 8f fe ff       	call   c0000600 <strcpy>
c001769b:	83 c4 10             	add    esp,0x10
c001769e:	83 ec 08             	sub    esp,0x8
c00176a1:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c00176a8:	50                   	push   eax
c00176a9:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00176b0:	e8 7f fa ff ff       	call   c0017134 <FAT::fixFilepath(char*)>
c00176b5:	83 c4 10             	add    esp,0x10
c00176b8:	83 ec 08             	sub    esp,0x8
c00176bb:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c00176c2:	8d 44 24 18          	lea    eax,[esp+0x18]
c00176c6:	50                   	push   eax
c00176c7:	e8 34 8f fe ff       	call   c0000600 <strcpy>
c00176cc:	83 c4 10             	add    esp,0x10
c00176cf:	83 ec 08             	sub    esp,0x8
c00176d2:	8d 44 24 14          	lea    eax,[esp+0x14]
c00176d6:	50                   	push   eax
c00176d7:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00176de:	e8 51 fa ff ff       	call   c0017134 <FAT::fixFilepath(char*)>
c00176e3:	83 c4 10             	add    esp,0x10
c00176e6:	83 ec 08             	sub    esp,0x8
c00176e9:	8d 44 24 14          	lea    eax,[esp+0x14]
c00176ed:	50                   	push   eax
c00176ee:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c00176f5:	50                   	push   eax
c00176f6:	e8 4c d4 fe ff       	call   c0004b47 <f_rename>
c00176fb:	83 c4 10             	add    esp,0x10
c00176fe:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c0017705:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c001770c:	85 c0                	test   eax,eax
c001770e:	75 08                	jne    c0017718 <FAT::rename(char const*, char const*)+0xbc>
c0017710:	b8 00 00 00 00       	mov    eax,0x0
c0017715:	eb 09                	jmp    c0017720 <FAT::rename(char const*, char const*)+0xc4>
c0017717:	90                   	nop
c0017718:	b8 01 00 00 00       	mov    eax,0x1
c001771d:	8d 76 00             	lea    esi,[esi+0x0]
c0017720:	81 c4 1c 02 00 00    	add    esp,0x21c
c0017726:	c3                   	ret    
c0017727:	90                   	nop

c0017728 <FAT::mkdir(char const*)>:
c0017728:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001772e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0017736:	75 08                	jne    c0017740 <FAT::mkdir(char const*)+0x18>
c0017738:	b8 04 00 00 00       	mov    eax,0x4
c001773d:	eb 61                	jmp    c00177a0 <FAT::mkdir(char const*)+0x78>
c001773f:	90                   	nop
c0017740:	83 ec 08             	sub    esp,0x8
c0017743:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001774a:	8d 44 24 18          	lea    eax,[esp+0x18]
c001774e:	50                   	push   eax
c001774f:	e8 ac 8e fe ff       	call   c0000600 <strcpy>
c0017754:	83 c4 10             	add    esp,0x10
c0017757:	83 ec 08             	sub    esp,0x8
c001775a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001775e:	50                   	push   eax
c001775f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0017766:	e8 c9 f9 ff ff       	call   c0017134 <FAT::fixFilepath(char*)>
c001776b:	83 c4 10             	add    esp,0x10
c001776e:	83 ec 0c             	sub    esp,0xc
c0017771:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017775:	50                   	push   eax
c0017776:	e8 31 d2 fe ff       	call   c00049ac <f_mkdir>
c001777b:	83 c4 10             	add    esp,0x10
c001777e:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0017785:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001778c:	85 c0                	test   eax,eax
c001778e:	75 08                	jne    c0017798 <FAT::mkdir(char const*)+0x70>
c0017790:	b8 00 00 00 00       	mov    eax,0x0
c0017795:	eb 09                	jmp    c00177a0 <FAT::mkdir(char const*)+0x78>
c0017797:	90                   	nop
c0017798:	b8 01 00 00 00       	mov    eax,0x1
c001779d:	8d 76 00             	lea    esi,[esi+0x0]
c00177a0:	81 c4 1c 01 00 00    	add    esp,0x11c
c00177a6:	c3                   	ret    
c00177a7:	90                   	nop

c00177a8 <FAT::exists(char const*)>:
c00177a8:	81 ec 2c 02 00 00    	sub    esp,0x22c
c00177ae:	83 ec 08             	sub    esp,0x8
c00177b1:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00177b8:	8d 44 24 10          	lea    eax,[esp+0x10]
c00177bc:	50                   	push   eax
c00177bd:	e8 3e 8e fe ff       	call   c0000600 <strcpy>
c00177c2:	83 c4 10             	add    esp,0x10
c00177c5:	83 ec 08             	sub    esp,0x8
c00177c8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00177cc:	50                   	push   eax
c00177cd:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00177d4:	e8 5b f9 ff ff       	call   c0017134 <FAT::fixFilepath(char*)>
c00177d9:	83 c4 10             	add    esp,0x10
c00177dc:	83 ec 08             	sub    esp,0x8
c00177df:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c00177e6:	50                   	push   eax
c00177e7:	8d 44 24 10          	lea    eax,[esp+0x10]
c00177eb:	50                   	push   eax
c00177ec:	e8 34 ce fe ff       	call   c0004625 <f_stat>
c00177f1:	83 c4 10             	add    esp,0x10
c00177f4:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c00177fb:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0017802:	85 c0                	test   eax,eax
c0017804:	75 06                	jne    c001780c <FAT::exists(char const*)+0x64>
c0017806:	b0 01                	mov    al,0x1
c0017808:	eb 06                	jmp    c0017810 <FAT::exists(char const*)+0x68>
c001780a:	66 90                	xchg   ax,ax
c001780c:	b0 00                	mov    al,0x0
c001780e:	66 90                	xchg   ax,ax
c0017810:	81 c4 2c 02 00 00    	add    esp,0x22c
c0017816:	c3                   	ret    
c0017817:	90                   	nop

c0017818 <isoReadDiscSectorHelper>:
c0017818:	83 ec 2c             	sub    esp,0x2c
c001781b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001781f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0017823:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0017828:	83 e8 41             	sub    eax,0x41
c001782b:	8b 0c 85 20 54 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdabe0]
c0017832:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017836:	ba 00 00 00 00       	mov    edx,0x0
c001783b:	83 ec 0c             	sub    esp,0xc
c001783e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0017842:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0017846:	52                   	push   edx
c0017847:	50                   	push   eax
c0017848:	51                   	push   ecx
c0017849:	e8 66 54 ff ff       	call   c000ccb4 <LogicalDisk::read(unsigned long long, int, void*)>
c001784e:	83 c4 20             	add    esp,0x20
c0017851:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017855:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001785a:	74 0c                	je     c0017868 <isoReadDiscSectorHelper+0x50>
c001785c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017860:	c1 e0 0b             	shl    eax,0xb
c0017863:	eb 0b                	jmp    c0017870 <isoReadDiscSectorHelper+0x58>
c0017865:	8d 76 00             	lea    esi,[esi+0x0]
c0017868:	b8 00 00 00 00       	mov    eax,0x0
c001786d:	8d 76 00             	lea    esi,[esi+0x0]
c0017870:	83 c4 2c             	add    esp,0x2c
c0017873:	c3                   	ret    

c0017874 <iso_kprintf>:
c0017874:	83 ec 0c             	sub    esp,0xc
c0017877:	a1 04 2f 02 c0       	mov    eax,ds:0xc0022f04
c001787c:	83 ec 08             	sub    esp,0x8
c001787f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017883:	50                   	push   eax
c0017884:	e8 ad 0e ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0017889:	83 c4 10             	add    esp,0x10
c001788c:	90                   	nop
c001788d:	83 c4 0c             	add    esp,0xc
c0017890:	c3                   	ret    
c0017891:	8d 76 00             	lea    esi,[esi+0x0]

c0017894 <iso_kprintfd>:
c0017894:	83 ec 0c             	sub    esp,0xc
c0017897:	a1 04 2f 02 c0       	mov    eax,ds:0xc0022f04
c001789c:	83 ec 08             	sub    esp,0x8
c001789f:	68 d0 f7 01 c0       	push   0xc001f7d0
c00178a4:	50                   	push   eax
c00178a5:	e8 8c 0e ff ff       	call   c0008736 <VgaText::puts(char const*)>
c00178aa:	83 c4 10             	add    esp,0x10
c00178ad:	a1 04 2f 02 c0       	mov    eax,ds:0xc0022f04
c00178b2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00178b6:	83 ec 08             	sub    esp,0x8
c00178b9:	52                   	push   edx
c00178ba:	50                   	push   eax
c00178bb:	e8 30 0e ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c00178c0:	83 c4 10             	add    esp,0x10
c00178c3:	a1 04 2f 02 c0       	mov    eax,ds:0xc0022f04
c00178c8:	83 ec 08             	sub    esp,0x8
c00178cb:	68 51 f6 01 c0       	push   0xc001f651
c00178d0:	50                   	push   eax
c00178d1:	e8 60 0e ff ff       	call   c0008736 <VgaText::puts(char const*)>
c00178d6:	83 c4 10             	add    esp,0x10
c00178d9:	90                   	nop
c00178da:	83 c4 0c             	add    esp,0xc
c00178dd:	c3                   	ret    

c00178de <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c00178de:	b8 08 00 00 00       	mov    eax,0x8
c00178e3:	c3                   	ret    

c00178e4 <ISO9660::getName()>:
c00178e4:	b8 d3 f7 01 c0       	mov    eax,0xc001f7d3
c00178e9:	c3                   	ret    

c00178ea <ISO9660::closeDir(void*)>:
c00178ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00178ee:	8b 00                	mov    eax,DWORD PTR [eax]
c00178f0:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c00178f3:	90                   	nop

c00178f4 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c00178f4:	b8 01 00 00 00       	mov    eax,0x1
c00178f9:	c3                   	ret    

c00178fa <ISO9660::unlink(char const*)>:
c00178fa:	b8 01 00 00 00       	mov    eax,0x1
c00178ff:	c3                   	ret    

c0017900 <ISO9660::write(void*, unsigned long, void*, int*)>:
c0017900:	b8 03 00 00 00       	mov    eax,0x3
c0017905:	c3                   	ret    

c0017906 <ISO9660::rename(char const*, char const*)>:
c0017906:	b8 01 00 00 00       	mov    eax,0x1
c001790b:	c3                   	ret    

c001790c <ISO9660::mkdir(char const*)>:
c001790c:	b8 01 00 00 00       	mov    eax,0x1
c0017911:	c3                   	ret    

c0017912 <ISO9660::~ISO9660()>:
c0017912:	83 ec 0c             	sub    esp,0xc
c0017915:	ba 5c f8 01 c0       	mov    edx,0xc001f85c
c001791a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001791e:	89 10                	mov    DWORD PTR [eax],edx
c0017920:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017924:	83 ec 0c             	sub    esp,0xc
c0017927:	50                   	push   eax
c0017928:	e8 6b 2f ff ff       	call   c000a898 <Filesystem::~Filesystem()>
c001792d:	83 c4 10             	add    esp,0x10
c0017930:	90                   	nop
c0017931:	83 c4 0c             	add    esp,0xc
c0017934:	c3                   	ret    
c0017935:	90                   	nop

c0017936 <ISO9660::~ISO9660()>:
c0017936:	83 ec 0c             	sub    esp,0xc
c0017939:	83 ec 0c             	sub    esp,0xc
c001793c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017940:	e8 cd ff ff ff       	call   c0017912 <ISO9660::~ISO9660()>
c0017945:	83 c4 10             	add    esp,0x10
c0017948:	83 ec 08             	sub    esp,0x8
c001794b:	6a 08                	push   0x8
c001794d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017951:	e8 06 2b ff ff       	call   c000a45c <operator delete(void*, unsigned long)>
c0017956:	83 c4 10             	add    esp,0x10
c0017959:	83 c4 0c             	add    esp,0xc
c001795c:	c3                   	ret    
c001795d:	90                   	nop

c001795e <ISO9660::exists(char const*)>:
c001795e:	83 ec 18             	sub    esp,0x18
c0017961:	68 ee f7 01 c0       	push   0xc001f7ee
c0017966:	e8 3c 89 ff ff       	call   c00102a7 <KePanic(char const*)>
c001796b:	31 c0                	xor    eax,eax
c001796d:	83 c4 1c             	add    esp,0x1c
c0017970:	c3                   	ret    
c0017971:	90                   	nop

c0017972 <ISO9660::open(char const*, void**, FileOpenMode)>:
c0017972:	56                   	push   esi
c0017973:	53                   	push   ebx
c0017974:	50                   	push   eax
c0017975:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0017979:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001797d:	85 f6                	test   esi,esi
c001797f:	0f 84 88 00 00 00    	je     c0017a0d <ISO9660::open(char const*, void**, FileOpenMode)+0x9b>
c0017985:	85 db                	test   ebx,ebx
c0017987:	0f 84 80 00 00 00    	je     c0017a0d <ISO9660::open(char const*, void**, FileOpenMode)+0x9b>
c001798d:	b9 03 00 00 00       	mov    ecx,0x3
c0017992:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c0017997:	75 79                	jne    c0017a12 <ISO9660::open(char const*, void**, FileOpenMode)+0xa0>
c0017999:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001799c:	3a 05 20 63 02 c0    	cmp    al,BYTE PTR ds:0xc0026320
c00179a2:	74 34                	je     c00179d8 <ISO9660::open(char const*, void**, FileOpenMode)+0x66>
c00179a4:	83 ec 0c             	sub    esp,0xc
c00179a7:	50                   	push   eax
c00179a8:	e8 11 ee fe ff       	call   c00067be <init_percd>
c00179ad:	83 c4 10             	add    esp,0x10
c00179b0:	b9 0b 00 00 00       	mov    ecx,0xb
c00179b5:	40                   	inc    eax
c00179b6:	74 5a                	je     c0017a12 <ISO9660::open(char const*, void**, FileOpenMode)+0xa0>
c00179b8:	80 3d 20 63 02 c0 00 	cmp    BYTE PTR ds:0xc0026320,0x0
c00179bf:	74 10                	je     c00179d1 <ISO9660::open(char const*, void**, FileOpenMode)+0x5f>
c00179c1:	83 ec 0c             	sub    esp,0xc
c00179c4:	68 0c f8 01 c0       	push   0xc001f80c
c00179c9:	e8 d9 88 ff ff       	call   c00102a7 <KePanic(char const*)>
c00179ce:	83 c4 10             	add    esp,0x10
c00179d1:	8a 06                	mov    al,BYTE PTR [esi]
c00179d3:	a2 20 63 02 c0       	mov    ds:0xc0026320,al
c00179d8:	83 ec 0c             	sub    esp,0xc
c00179db:	0f be 05 20 63 02 c0 	movsx  eax,BYTE PTR ds:0xc0026320
c00179e2:	83 c6 03             	add    esi,0x3
c00179e5:	50                   	push   eax
c00179e6:	e8 d3 ed fe ff       	call   c00067be <init_percd>
c00179eb:	59                   	pop    ecx
c00179ec:	58                   	pop    eax
c00179ed:	6a 00                	push   0x0
c00179ef:	56                   	push   esi
c00179f0:	e8 07 e9 fe ff       	call   c00062fc <iso_open>
c00179f5:	83 c4 10             	add    esp,0x10
c00179f8:	b9 01 00 00 00       	mov    ecx,0x1
c00179fd:	83 f8 ff             	cmp    eax,0xffffffff
c0017a00:	74 10                	je     c0017a12 <ISO9660::open(char const*, void**, FileOpenMode)+0xa0>
c0017a02:	8d 50 32             	lea    edx,[eax+0x32]
c0017a05:	31 c9                	xor    ecx,ecx
c0017a07:	01 d2                	add    edx,edx
c0017a09:	89 13                	mov    DWORD PTR [ebx],edx
c0017a0b:	eb 05                	jmp    c0017a12 <ISO9660::open(char const*, void**, FileOpenMode)+0xa0>
c0017a0d:	b9 04 00 00 00       	mov    ecx,0x4
c0017a12:	5a                   	pop    edx
c0017a13:	89 c8                	mov    eax,ecx
c0017a15:	5b                   	pop    ebx
c0017a16:	5e                   	pop    esi
c0017a17:	c3                   	ret    

c0017a18 <ISO9660::read(void*, unsigned long, void*, int*)>:
c0017a18:	53                   	push   ebx
c0017a19:	83 ec 08             	sub    esp,0x8
c0017a1c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017a20:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0017a24:	85 c0                	test   eax,eax
c0017a26:	74 2d                	je     c0017a55 <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c0017a28:	85 db                	test   ebx,ebx
c0017a2a:	74 29                	je     c0017a55 <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c0017a2c:	b9 02 00 00 00       	mov    ecx,0x2
c0017a31:	52                   	push   edx
c0017a32:	99                   	cdq    
c0017a33:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017a37:	f7 f9                	idiv   ecx
c0017a39:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0017a3d:	83 e8 32             	sub    eax,0x32
c0017a40:	50                   	push   eax
c0017a41:	e8 5e e9 fe ff       	call   c00063a4 <iso_read>
c0017a46:	83 c4 10             	add    esp,0x10
c0017a49:	89 03                	mov    DWORD PTR [ebx],eax
c0017a4b:	09 d0                	or     eax,edx
c0017a4d:	0f 94 c0             	sete   al
c0017a50:	0f b6 c0             	movzx  eax,al
c0017a53:	eb 05                	jmp    c0017a5a <ISO9660::read(void*, unsigned long, void*, int*)+0x42>
c0017a55:	b8 04 00 00 00       	mov    eax,0x4
c0017a5a:	83 c4 08             	add    esp,0x8
c0017a5d:	5b                   	pop    ebx
c0017a5e:	c3                   	ret    
c0017a5f:	90                   	nop

c0017a60 <ISO9660::seek(void*, unsigned long long)>:
c0017a60:	57                   	push   edi
c0017a61:	56                   	push   esi
c0017a62:	b8 04 00 00 00       	mov    eax,0x4
c0017a67:	51                   	push   ecx
c0017a68:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017a6c:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0017a70:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0017a74:	85 d2                	test   edx,edx
c0017a76:	74 26                	je     c0017a9e <ISO9660::seek(void*, unsigned long long)+0x3e>
c0017a78:	6a 00                	push   0x0
c0017a7a:	b9 02 00 00 00       	mov    ecx,0x2
c0017a7f:	57                   	push   edi
c0017a80:	89 d0                	mov    eax,edx
c0017a82:	56                   	push   esi
c0017a83:	99                   	cdq    
c0017a84:	f7 f9                	idiv   ecx
c0017a86:	83 e8 32             	sub    eax,0x32
c0017a89:	50                   	push   eax
c0017a8a:	e8 2b ea fe ff       	call   c00064ba <iso_seek>
c0017a8f:	83 c4 10             	add    esp,0x10
c0017a92:	31 f0                	xor    eax,esi
c0017a94:	31 fa                	xor    edx,edi
c0017a96:	09 d0                	or     eax,edx
c0017a98:	0f 95 c0             	setne  al
c0017a9b:	0f b6 c0             	movzx  eax,al
c0017a9e:	5a                   	pop    edx
c0017a9f:	5e                   	pop    esi
c0017aa0:	5f                   	pop    edi
c0017aa1:	c3                   	ret    

c0017aa2 <ISO9660::tell(void*, unsigned long long*)>:
c0017aa2:	53                   	push   ebx
c0017aa3:	83 ec 08             	sub    esp,0x8
c0017aa6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017aaa:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0017aae:	85 c0                	test   eax,eax
c0017ab0:	74 24                	je     c0017ad6 <ISO9660::tell(void*, unsigned long long*)+0x34>
c0017ab2:	85 db                	test   ebx,ebx
c0017ab4:	74 20                	je     c0017ad6 <ISO9660::tell(void*, unsigned long long*)+0x34>
c0017ab6:	83 ec 0c             	sub    esp,0xc
c0017ab9:	b9 02 00 00 00       	mov    ecx,0x2
c0017abe:	99                   	cdq    
c0017abf:	f7 f9                	idiv   ecx
c0017ac1:	83 e8 32             	sub    eax,0x32
c0017ac4:	50                   	push   eax
c0017ac5:	e8 74 ea fe ff       	call   c000653e <iso_tell>
c0017aca:	83 c4 10             	add    esp,0x10
c0017acd:	89 03                	mov    DWORD PTR [ebx],eax
c0017acf:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0017ad2:	31 c0                	xor    eax,eax
c0017ad4:	eb 05                	jmp    c0017adb <ISO9660::tell(void*, unsigned long long*)+0x39>
c0017ad6:	b8 04 00 00 00       	mov    eax,0x4
c0017adb:	83 c4 08             	add    esp,0x8
c0017ade:	5b                   	pop    ebx
c0017adf:	c3                   	ret    

c0017ae0 <ISO9660::openDir(char const*, void**)>:
c0017ae0:	57                   	push   edi
c0017ae1:	56                   	push   esi
c0017ae2:	53                   	push   ebx
c0017ae3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0017ae7:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0017aeb:	85 ff                	test   edi,edi
c0017aed:	0f 84 b1 00 00 00    	je     c0017ba4 <ISO9660::openDir(char const*, void**)+0xc4>
c0017af3:	85 f6                	test   esi,esi
c0017af5:	0f 84 a9 00 00 00    	je     c0017ba4 <ISO9660::openDir(char const*, void**)+0xc4>
c0017afb:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0017afe:	3a 05 20 63 02 c0    	cmp    al,BYTE PTR ds:0xc0026320
c0017b04:	74 38                	je     c0017b3e <ISO9660::openDir(char const*, void**)+0x5e>
c0017b06:	83 ec 0c             	sub    esp,0xc
c0017b09:	50                   	push   eax
c0017b0a:	e8 af ec fe ff       	call   c00067be <init_percd>
c0017b0f:	83 c4 10             	add    esp,0x10
c0017b12:	ba 0b 00 00 00       	mov    edx,0xb
c0017b17:	40                   	inc    eax
c0017b18:	0f 84 8b 00 00 00    	je     c0017ba9 <ISO9660::openDir(char const*, void**)+0xc9>
c0017b1e:	80 3d 20 63 02 c0 00 	cmp    BYTE PTR ds:0xc0026320,0x0
c0017b25:	74 10                	je     c0017b37 <ISO9660::openDir(char const*, void**)+0x57>
c0017b27:	83 ec 0c             	sub    esp,0xc
c0017b2a:	68 0c f8 01 c0       	push   0xc001f80c
c0017b2f:	e8 73 87 ff ff       	call   c00102a7 <KePanic(char const*)>
c0017b34:	83 c4 10             	add    esp,0x10
c0017b37:	8a 07                	mov    al,BYTE PTR [edi]
c0017b39:	a2 20 63 02 c0       	mov    ds:0xc0026320,al
c0017b3e:	83 ec 0c             	sub    esp,0xc
c0017b41:	83 c7 03             	add    edi,0x3
c0017b44:	0f be 05 20 63 02 c0 	movsx  eax,BYTE PTR ds:0xc0026320
c0017b4b:	50                   	push   eax
c0017b4c:	e8 6d ec fe ff       	call   c00067be <init_percd>
c0017b51:	58                   	pop    eax
c0017b52:	5a                   	pop    edx
c0017b53:	6a 01                	push   0x1
c0017b55:	57                   	push   edi
c0017b56:	e8 a1 e7 fe ff       	call   c00062fc <iso_open>
c0017b5b:	59                   	pop    ecx
c0017b5c:	89 c3                	mov    ebx,eax
c0017b5e:	58                   	pop    eax
c0017b5f:	57                   	push   edi
c0017b60:	68 1c f8 01 c0       	push   0xc001f81c
c0017b65:	e8 e8 29 ff ff       	call   c000a552 <Dbg::kprintf(char const*, ...)>
c0017b6a:	83 c4 10             	add    esp,0x10
c0017b6d:	83 fb ff             	cmp    ebx,0xffffffff
c0017b70:	75 17                	jne    c0017b89 <ISO9660::openDir(char const*, void**)+0xa9>
c0017b72:	83 ec 0c             	sub    esp,0xc
c0017b75:	68 39 f8 01 c0       	push   0xc001f839
c0017b7a:	e8 d3 29 ff ff       	call   c000a552 <Dbg::kprintf(char const*, ...)>
c0017b7f:	83 c4 10             	add    esp,0x10
c0017b82:	ba 01 00 00 00       	mov    edx,0x1
c0017b87:	eb 20                	jmp    c0017ba9 <ISO9660::openDir(char const*, void**)+0xc9>
c0017b89:	83 ec 0c             	sub    esp,0xc
c0017b8c:	01 db                	add    ebx,ebx
c0017b8e:	68 07 e5 01 c0       	push   0xc001e507
c0017b93:	83 c3 65             	add    ebx,0x65
c0017b96:	e8 b7 29 ff ff       	call   c000a552 <Dbg::kprintf(char const*, ...)>
c0017b9b:	89 1e                	mov    DWORD PTR [esi],ebx
c0017b9d:	83 c4 10             	add    esp,0x10
c0017ba0:	31 d2                	xor    edx,edx
c0017ba2:	eb 05                	jmp    c0017ba9 <ISO9660::openDir(char const*, void**)+0xc9>
c0017ba4:	ba 04 00 00 00       	mov    edx,0x4
c0017ba9:	5b                   	pop    ebx
c0017baa:	89 d0                	mov    eax,edx
c0017bac:	5e                   	pop    esi
c0017bad:	5f                   	pop    edi
c0017bae:	c3                   	ret    
c0017baf:	90                   	nop

c0017bb0 <ISO9660::stat(void*, unsigned long long*)>:
c0017bb0:	53                   	push   ebx
c0017bb1:	83 ec 14             	sub    esp,0x14
c0017bb4:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0017bb8:	68 43 f8 01 c0       	push   0xc001f843
c0017bbd:	e8 90 29 ff ff       	call   c000a552 <Dbg::kprintf(char const*, ...)>
c0017bc2:	83 c4 10             	add    esp,0x10
c0017bc5:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0017bca:	74 2c                	je     c0017bf8 <ISO9660::stat(void*, unsigned long long*)+0x48>
c0017bcc:	85 db                	test   ebx,ebx
c0017bce:	74 28                	je     c0017bf8 <ISO9660::stat(void*, unsigned long long*)+0x48>
c0017bd0:	83 ec 0c             	sub    esp,0xc
c0017bd3:	b9 02 00 00 00       	mov    ecx,0x2
c0017bd8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017bdc:	99                   	cdq    
c0017bdd:	f7 f9                	idiv   ecx
c0017bdf:	83 e8 32             	sub    eax,0x32
c0017be2:	50                   	push   eax
c0017be3:	e8 87 e9 fe ff       	call   c000656f <iso_total>
c0017be8:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0017bef:	89 03                	mov    DWORD PTR [ebx],eax
c0017bf1:	83 c4 10             	add    esp,0x10
c0017bf4:	31 c0                	xor    eax,eax
c0017bf6:	eb 05                	jmp    c0017bfd <ISO9660::stat(void*, unsigned long long*)+0x4d>
c0017bf8:	b8 04 00 00 00       	mov    eax,0x4
c0017bfd:	83 c4 08             	add    esp,0x8
c0017c00:	5b                   	pop    ebx
c0017c01:	c3                   	ret    

c0017c02 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c0017c02:	55                   	push   ebp
c0017c03:	57                   	push   edi
c0017c04:	56                   	push   esi
c0017c05:	53                   	push   ebx
c0017c06:	83 ec 18             	sub    esp,0x18
c0017c09:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0017c0d:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0017c11:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0017c15:	68 4b f8 01 c0       	push   0xc001f84b
c0017c1a:	e8 33 29 ff ff       	call   c000a552 <Dbg::kprintf(char const*, ...)>
c0017c1f:	83 c4 10             	add    esp,0x10
c0017c22:	85 f6                	test   esi,esi
c0017c24:	0f 94 c2             	sete   dl
c0017c27:	85 ff                	test   edi,edi
c0017c29:	0f 94 c0             	sete   al
c0017c2c:	08 c2                	or     dl,al
c0017c2e:	0f 85 88 00 00 00    	jne    c0017cbc <ISO9660::stat(char const*, unsigned long long*, bool*)+0xba>
c0017c34:	85 db                	test   ebx,ebx
c0017c36:	0f 84 80 00 00 00    	je     c0017cbc <ISO9660::stat(char const*, unsigned long long*, bool*)+0xba>
c0017c3c:	c6 07 00             	mov    BYTE PTR [edi],0x0
c0017c3f:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0017c45:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c0017c4c:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0017c4f:	3a 05 20 63 02 c0    	cmp    al,BYTE PTR ds:0xc0026320
c0017c55:	74 34                	je     c0017c8b <ISO9660::stat(char const*, unsigned long long*, bool*)+0x89>
c0017c57:	83 ec 0c             	sub    esp,0xc
c0017c5a:	50                   	push   eax
c0017c5b:	e8 5e eb fe ff       	call   c00067be <init_percd>
c0017c60:	83 c4 10             	add    esp,0x10
c0017c63:	ba 0b 00 00 00       	mov    edx,0xb
c0017c68:	40                   	inc    eax
c0017c69:	74 77                	je     c0017ce2 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xe0>
c0017c6b:	80 3d 20 63 02 c0 00 	cmp    BYTE PTR ds:0xc0026320,0x0
c0017c72:	74 10                	je     c0017c84 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x82>
c0017c74:	83 ec 0c             	sub    esp,0xc
c0017c77:	68 0c f8 01 c0       	push   0xc001f80c
c0017c7c:	e8 26 86 ff ff       	call   c00102a7 <KePanic(char const*)>
c0017c81:	83 c4 10             	add    esp,0x10
c0017c84:	8a 03                	mov    al,BYTE PTR [ebx]
c0017c86:	a2 20 63 02 c0       	mov    ds:0xc0026320,al
c0017c8b:	83 c3 03             	add    ebx,0x3
c0017c8e:	52                   	push   edx
c0017c8f:	52                   	push   edx
c0017c90:	6a 00                	push   0x0
c0017c92:	53                   	push   ebx
c0017c93:	e8 64 e6 fe ff       	call   c00062fc <iso_open>
c0017c98:	83 c4 10             	add    esp,0x10
c0017c9b:	89 c5                	mov    ebp,eax
c0017c9d:	83 f8 ff             	cmp    eax,0xffffffff
c0017ca0:	75 21                	jne    c0017cc3 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xc1>
c0017ca2:	50                   	push   eax
c0017ca3:	50                   	push   eax
c0017ca4:	6a 01                	push   0x1
c0017ca6:	53                   	push   ebx
c0017ca7:	e8 50 e6 fe ff       	call   c00062fc <iso_open>
c0017cac:	83 c4 10             	add    esp,0x10
c0017caf:	ba 02 00 00 00       	mov    edx,0x2
c0017cb4:	40                   	inc    eax
c0017cb5:	74 2b                	je     c0017ce2 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xe0>
c0017cb7:	c6 07 01             	mov    BYTE PTR [edi],0x1
c0017cba:	eb 24                	jmp    c0017ce0 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xde>
c0017cbc:	ba 04 00 00 00       	mov    edx,0x4
c0017cc1:	eb 1f                	jmp    c0017ce2 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xe0>
c0017cc3:	83 ec 0c             	sub    esp,0xc
c0017cc6:	50                   	push   eax
c0017cc7:	e8 a3 e8 fe ff       	call   c000656f <iso_total>
c0017ccc:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c0017cd3:	89 06                	mov    DWORD PTR [esi],eax
c0017cd5:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017cd8:	e8 a9 e6 fe ff       	call   c0006386 <iso_close>
c0017cdd:	83 c4 10             	add    esp,0x10
c0017ce0:	31 d2                	xor    edx,edx
c0017ce2:	83 c4 0c             	add    esp,0xc
c0017ce5:	89 d0                	mov    eax,edx
c0017ce7:	5b                   	pop    ebx
c0017ce8:	5e                   	pop    esi
c0017ce9:	5f                   	pop    edi
c0017cea:	5d                   	pop    ebp
c0017ceb:	c3                   	ret    

c0017cec <ISO9660::close(void*)>:
c0017cec:	83 ec 0c             	sub    esp,0xc
c0017cef:	b8 04 00 00 00       	mov    eax,0x4
c0017cf4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017cf8:	85 d2                	test   edx,edx
c0017cfa:	74 1b                	je     c0017d17 <ISO9660::close(void*)+0x2b>
c0017cfc:	83 ec 0c             	sub    esp,0xc
c0017cff:	b9 02 00 00 00       	mov    ecx,0x2
c0017d04:	89 d0                	mov    eax,edx
c0017d06:	99                   	cdq    
c0017d07:	f7 f9                	idiv   ecx
c0017d09:	83 e8 32             	sub    eax,0x32
c0017d0c:	50                   	push   eax
c0017d0d:	e8 74 e6 fe ff       	call   c0006386 <iso_close>
c0017d12:	83 c4 10             	add    esp,0x10
c0017d15:	31 c0                	xor    eax,eax
c0017d17:	83 c4 0c             	add    esp,0xc
c0017d1a:	c3                   	ret    
c0017d1b:	90                   	nop

c0017d1c <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c0017d1c:	55                   	push   ebp
c0017d1d:	57                   	push   edi
c0017d1e:	56                   	push   esi
c0017d1f:	53                   	push   ebx
c0017d20:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0017d26:	8b 84 24 34 01 00 00 	mov    eax,DWORD PTR [esp+0x134]
c0017d2d:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c0017d34:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0017d3b:	85 c0                	test   eax,eax
c0017d3d:	0f 84 9e 00 00 00    	je     c0017de1 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc5>
c0017d43:	85 db                	test   ebx,ebx
c0017d45:	0f 84 96 00 00 00    	je     c0017de1 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc5>
c0017d4b:	83 ec 0c             	sub    esp,0xc
c0017d4e:	b9 02 00 00 00       	mov    ecx,0x2
c0017d53:	99                   	cdq    
c0017d54:	f7 f9                	idiv   ecx
c0017d56:	83 e8 32             	sub    eax,0x32
c0017d59:	50                   	push   eax
c0017d5a:	e8 61 e8 fe ff       	call   c00065c0 <iso_readdir>
c0017d5f:	83 c4 10             	add    esp,0x10
c0017d62:	89 c6                	mov    esi,eax
c0017d64:	85 c0                	test   eax,eax
c0017d66:	75 18                	jne    c0017d80 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x64>
c0017d68:	52                   	push   edx
c0017d69:	68 10 01 00 00       	push   0x110
c0017d6e:	6a 00                	push   0x0
c0017d70:	57                   	push   edi
c0017d71:	e8 5a 87 fe ff       	call   c00004d0 <memset>
c0017d76:	83 c4 10             	add    esp,0x10
c0017d79:	b8 01 00 00 00       	mov    eax,0x1
c0017d7e:	eb 66                	jmp    c0017de6 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xca>
c0017d80:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c0017d86:	8d 68 08             	lea    ebp,[eax+0x8]
c0017d89:	83 ec 0c             	sub    esp,0xc
c0017d8c:	55                   	push   ebp
c0017d8d:	e8 ae 87 fe ff       	call   c0000540 <strlen>
c0017d92:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0017d9a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017d9e:	83 c4 10             	add    esp,0x10
c0017da1:	83 7e 04 ff          	cmp    DWORD PTR [esi+0x4],0xffffffff
c0017da5:	75 0a                	jne    c0017db1 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x95>
c0017da7:	b8 02 00 00 00       	mov    eax,0x2
c0017dac:	83 3e ff             	cmp    DWORD PTR [esi],0xffffffff
c0017daf:	74 05                	je     c0017db6 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x9a>
c0017db1:	b8 01 00 00 00       	mov    eax,0x1
c0017db6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017dba:	50                   	push   eax
c0017dbb:	50                   	push   eax
c0017dbc:	55                   	push   ebp
c0017dbd:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0017dc1:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0017dc5:	50                   	push   eax
c0017dc6:	e8 35 88 fe ff       	call   c0000600 <strcpy>
c0017dcb:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c0017dd2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017dd4:	31 c0                	xor    eax,eax
c0017dd6:	c7 03 10 01 00 00    	mov    DWORD PTR [ebx],0x110
c0017ddc:	83 c4 10             	add    esp,0x10
c0017ddf:	eb 05                	jmp    c0017de6 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xca>
c0017de1:	b8 04 00 00 00       	mov    eax,0x4
c0017de6:	81 c4 1c 01 00 00    	add    esp,0x11c
c0017dec:	5b                   	pop    ebx
c0017ded:	5e                   	pop    esi
c0017dee:	5f                   	pop    edi
c0017def:	5d                   	pop    ebp
c0017df0:	c3                   	ret    

c0017df1 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c0017df1:	57                   	push   edi
c0017df2:	56                   	push   esi
c0017df3:	53                   	push   ebx
c0017df4:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0017df8:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0017dfc:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0017e00:	39 35 24 63 02 c0    	cmp    DWORD PTR ds:0xc0026324,esi
c0017e06:	75 08                	jne    c0017e10 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c0017e08:	38 1d 50 02 02 c0    	cmp    BYTE PTR ds:0xc0020250,bl
c0017e0e:	74 4a                	je     c0017e5a <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x69>
c0017e10:	83 ec 0c             	sub    esp,0xc
c0017e13:	31 d2                	xor    edx,edx
c0017e15:	68 40 63 02 c0       	push   0xc0026340
c0017e1a:	0f be c3             	movsx  eax,bl
c0017e1d:	6a 01                	push   0x1
c0017e1f:	52                   	push   edx
c0017e20:	56                   	push   esi
c0017e21:	ff 34 85 1c 53 02 c0 	push   DWORD PTR [eax*4-0x3ffdace4]
c0017e28:	e8 87 4e ff ff       	call   c000ccb4 <LogicalDisk::read(unsigned long long, int, void*)>
c0017e2d:	83 c4 20             	add    esp,0x20
c0017e30:	85 c0                	test   eax,eax
c0017e32:	75 0e                	jne    c0017e42 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x51>
c0017e34:	89 35 24 63 02 c0    	mov    DWORD PTR ds:0xc0026324,esi
c0017e3a:	88 1d 50 02 02 c0    	mov    BYTE PTR ds:0xc0020250,bl
c0017e40:	eb 18                	jmp    c0017e5a <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x69>
c0017e42:	50                   	push   eax
c0017e43:	68 00 08 00 00       	push   0x800
c0017e48:	6a 00                	push   0x0
c0017e4a:	57                   	push   edi
c0017e4b:	e8 80 86 fe ff       	call   c00004d0 <memset>
c0017e50:	83 c4 10             	add    esp,0x10
c0017e53:	b8 01 00 00 00       	mov    eax,0x1
c0017e58:	eb 0e                	jmp    c0017e68 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x77>
c0017e5a:	be 40 63 02 c0       	mov    esi,0xc0026340
c0017e5f:	b9 00 08 00 00       	mov    ecx,0x800
c0017e64:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017e66:	31 c0                	xor    eax,eax
c0017e68:	5b                   	pop    ebx
c0017e69:	5e                   	pop    esi
c0017e6a:	5f                   	pop    edi
c0017e6b:	c3                   	ret    

c0017e6c <ISO9660::tryMount(LogicalDisk*, int)>:
c0017e6c:	53                   	push   ebx
c0017e6d:	81 ec 0c 08 00 00    	sub    esp,0x80c
c0017e73:	c7 05 24 63 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc0026324,0xdeadbeef
c0017e7d:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c0017e84:	8d 58 41             	lea    ebx,[eax+0x41]
c0017e87:	0f be db             	movsx  ebx,bl
c0017e8a:	53                   	push   ebx
c0017e8b:	8d 44 24 08          	lea    eax,[esp+0x8]
c0017e8f:	50                   	push   eax
c0017e90:	6a 10                	push   0x10
c0017e92:	e8 5a ff ff ff       	call   c0017df1 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0017e97:	83 c4 10             	add    esp,0x10
c0017e9a:	31 d2                	xor    edx,edx
c0017e9c:	85 c0                	test   eax,eax
c0017e9e:	75 33                	jne    c0017ed3 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017ea0:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c0017ea5:	75 2c                	jne    c0017ed3 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017ea7:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c0017eac:	75 25                	jne    c0017ed3 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017eae:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c0017eb3:	75 1e                	jne    c0017ed3 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017eb5:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c0017eba:	75 17                	jne    c0017ed3 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017ebc:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c0017ec1:	75 10                	jne    c0017ed3 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017ec3:	83 ec 0c             	sub    esp,0xc
c0017ec6:	53                   	push   ebx
c0017ec7:	e8 f2 e8 fe ff       	call   c00067be <init_percd>
c0017ecc:	83 c4 10             	add    esp,0x10
c0017ecf:	40                   	inc    eax
c0017ed0:	0f 95 c2             	setne  dl
c0017ed3:	88 d0                	mov    al,dl
c0017ed5:	81 c4 08 08 00 00    	add    esp,0x808
c0017edb:	5b                   	pop    ebx
c0017edc:	c3                   	ret    
c0017edd:	90                   	nop

c0017ede <ISO9660::ISO9660()>:
c0017ede:	83 ec 0c             	sub    esp,0xc
c0017ee1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017ee5:	83 ec 0c             	sub    esp,0xc
c0017ee8:	50                   	push   eax
c0017ee9:	e8 86 29 ff ff       	call   c000a874 <Filesystem::Filesystem()>
c0017eee:	83 c4 10             	add    esp,0x10
c0017ef1:	ba 5c f8 01 c0       	mov    edx,0xc001f85c
c0017ef6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017efa:	89 10                	mov    DWORD PTR [eax],edx
c0017efc:	e8 bf e9 fe ff       	call   c00068c0 <fs_iso9660_init>
c0017f01:	90                   	nop
c0017f02:	83 c4 0c             	add    esp,0xc
c0017f05:	c3                   	ret    

c0017f06 <SoundCard::beginPlayback()>:
c0017f06:	c7 44 24 04 bc f8 01 c0 	mov    DWORD PTR [esp+0x4],0xc001f8bc
c0017f0e:	e9 94 83 ff ff       	jmp    c00102a7 <KePanic(char const*)>
c0017f13:	90                   	nop

c0017f14 <SoundCard::stopPlayback()>:
c0017f14:	c7 44 24 04 bc f8 01 c0 	mov    DWORD PTR [esp+0x4],0xc001f8bc
c0017f1c:	e9 86 83 ff ff       	jmp    c00102a7 <KePanic(char const*)>
c0017f21:	90                   	nop

c0017f22 <SoundCard::SoundCard(char const*)>:
c0017f22:	83 ec 1c             	sub    esp,0x1c
c0017f25:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f29:	83 ec 08             	sub    esp,0x8
c0017f2c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017f30:	50                   	push   eax
c0017f31:	e8 3e 3c ff ff       	call   c000bb74 <Device::Device(char const*)>
c0017f36:	83 c4 10             	add    esp,0x10
c0017f39:	ba 08 f9 01 c0       	mov    edx,0xc001f908
c0017f3e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f42:	89 10                	mov    DWORD PTR [eax],edx
c0017f44:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f48:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c0017f4f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f53:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c0017f5d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f61:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c0017f6b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f6f:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c0017f79:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f7d:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c0017f87:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017f8f:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0017f94:	7f 19                	jg     c0017faf <SoundCard::SoundCard(char const*)+0x8d>
c0017f96:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f9a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017f9e:	83 c2 54             	add    edx,0x54
c0017fa1:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0017fa9:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017fad:	eb e0                	jmp    c0017f8f <SoundCard::SoundCard(char const*)+0x6d>
c0017faf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017fb3:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c0017fba:	90                   	nop
c0017fbb:	83 c4 1c             	add    esp,0x1c
c0017fbe:	c3                   	ret    
c0017fbf:	90                   	nop

c0017fc0 <SoundCard::~SoundCard()>:
c0017fc0:	83 ec 0c             	sub    esp,0xc
c0017fc3:	ba 08 f9 01 c0       	mov    edx,0xc001f908
c0017fc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017fcc:	89 10                	mov    DWORD PTR [eax],edx
c0017fce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017fd2:	83 ec 0c             	sub    esp,0xc
c0017fd5:	50                   	push   eax
c0017fd6:	e8 03 39 ff ff       	call   c000b8de <Device::~Device()>
c0017fdb:	83 c4 10             	add    esp,0x10
c0017fde:	90                   	nop
c0017fdf:	83 c4 0c             	add    esp,0xc
c0017fe2:	c3                   	ret    
c0017fe3:	90                   	nop

c0017fe4 <SoundCard::~SoundCard()>:
c0017fe4:	83 ec 0c             	sub    esp,0xc
c0017fe7:	83 ec 0c             	sub    esp,0xc
c0017fea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017fee:	e8 cd ff ff ff       	call   c0017fc0 <SoundCard::~SoundCard()>
c0017ff3:	83 c4 10             	add    esp,0x10
c0017ff6:	83 ec 08             	sub    esp,0x8
c0017ff9:	68 e8 01 00 00       	push   0x1e8
c0017ffe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018002:	e8 55 24 ff ff       	call   c000a45c <operator delete(void*, unsigned long)>
c0018007:	83 c4 10             	add    esp,0x10
c001800a:	83 c4 0c             	add    esp,0xc
c001800d:	c3                   	ret    

c001800e <SoundCard::configureRates(int, int, int)>:
c001800e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0018012:	31 c0                	xor    eax,eax
c0018014:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c001801b:	75 20                	jne    c001803d <SoundCard::configureRates(int, int, int)+0x2f>
c001801d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018021:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c0018027:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001802b:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c0018031:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018035:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c001803b:	b0 01                	mov    al,0x1
c001803d:	c3                   	ret    

c001803e <SoundCard::getSamples16(int, short*)>:
c001803e:	55                   	push   ebp
c001803f:	57                   	push   edi
c0018040:	31 ff                	xor    edi,edi
c0018042:	56                   	push   esi
c0018043:	53                   	push   ebx
c0018044:	31 db                	xor    ebx,ebx
c0018046:	83 ec 10             	sub    esp,0x10
c0018049:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001804d:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0018051:	8d 04 36             	lea    eax,[esi+esi*1]
c0018054:	50                   	push   eax
c0018055:	6a 00                	push   0x0
c0018057:	55                   	push   ebp
c0018058:	e8 73 84 fe ff       	call   c00004d0 <memset>
c001805d:	83 c4 10             	add    esp,0x10
c0018060:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018064:	8b 84 98 58 01 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x158]
c001806b:	85 c0                	test   eax,eax
c001806d:	74 1b                	je     c001808a <SoundCard::getSamples16(int, short*)+0x4c>
c001806f:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c0018073:	75 15                	jne    c001808a <SoundCard::getSamples16(int, short*)+0x4c>
c0018075:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0018079:	55                   	push   ebp
c001807a:	56                   	push   esi
c001807b:	50                   	push   eax
c001807c:	e8 ef 02 00 00       	call   c0018370 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c0018081:	83 c4 10             	add    esp,0x10
c0018084:	39 c7                	cmp    edi,eax
c0018086:	7d 02                	jge    c001808a <SoundCard::getSamples16(int, short*)+0x4c>
c0018088:	89 c7                	mov    edi,eax
c001808a:	43                   	inc    ebx
c001808b:	83 fb 20             	cmp    ebx,0x20
c001808e:	75 d0                	jne    c0018060 <SoundCard::getSamples16(int, short*)+0x22>
c0018090:	83 c4 0c             	add    esp,0xc
c0018093:	89 f8                	mov    eax,edi
c0018095:	5b                   	pop    ebx
c0018096:	5e                   	pop    esi
c0018097:	5f                   	pop    edi
c0018098:	5d                   	pop    ebp
c0018099:	c3                   	ret    

c001809a <SoundCard::getSamples32(int, int*)>:
c001809a:	55                   	push   ebp
c001809b:	57                   	push   edi
c001809c:	31 ff                	xor    edi,edi
c001809e:	56                   	push   esi
c001809f:	31 f6                	xor    esi,esi
c00180a1:	53                   	push   ebx
c00180a2:	83 ec 10             	sub    esp,0x10
c00180a5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00180a9:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c00180ad:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c00180b1:	c1 e0 02             	shl    eax,0x2
c00180b4:	50                   	push   eax
c00180b5:	6a 00                	push   0x0
c00180b7:	55                   	push   ebp
c00180b8:	e8 13 84 fe ff       	call   c00004d0 <memset>
c00180bd:	83 c4 10             	add    esp,0x10
c00180c0:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c00180c7:	85 c0                	test   eax,eax
c00180c9:	74 1b                	je     c00180e6 <SoundCard::getSamples32(int, int*)+0x4c>
c00180cb:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c00180cf:	75 15                	jne    c00180e6 <SoundCard::getSamples32(int, int*)+0x4c>
c00180d1:	53                   	push   ebx
c00180d2:	55                   	push   ebp
c00180d3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00180d7:	50                   	push   eax
c00180d8:	e8 57 03 00 00       	call   c0018434 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c00180dd:	83 c4 10             	add    esp,0x10
c00180e0:	39 c6                	cmp    esi,eax
c00180e2:	7d 02                	jge    c00180e6 <SoundCard::getSamples32(int, int*)+0x4c>
c00180e4:	89 c6                	mov    esi,eax
c00180e6:	47                   	inc    edi
c00180e7:	83 ff 20             	cmp    edi,0x20
c00180ea:	75 d4                	jne    c00180c0 <SoundCard::getSamples32(int, int*)+0x26>
c00180ec:	8a 83 d8 01 00 00    	mov    al,BYTE PTR [ebx+0x1d8]
c00180f2:	85 f6                	test   esi,esi
c00180f4:	75 0f                	jne    c0018105 <SoundCard::getSamples32(int, int*)+0x6b>
c00180f6:	84 c0                	test   al,al
c00180f8:	74 1b                	je     c0018115 <SoundCard::getSamples32(int, int*)+0x7b>
c00180fa:	83 ec 0c             	sub    esp,0xc
c00180fd:	8b 03                	mov    eax,DWORD PTR [ebx]
c00180ff:	53                   	push   ebx
c0018100:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0018103:	eb 0d                	jmp    c0018112 <SoundCard::getSamples32(int, int*)+0x78>
c0018105:	84 c0                	test   al,al
c0018107:	75 0c                	jne    c0018115 <SoundCard::getSamples32(int, int*)+0x7b>
c0018109:	83 ec 0c             	sub    esp,0xc
c001810c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001810e:	53                   	push   ebx
c001810f:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0018112:	83 c4 10             	add    esp,0x10
c0018115:	83 c4 0c             	add    esp,0xc
c0018118:	89 f0                	mov    eax,esi
c001811a:	5b                   	pop    ebx
c001811b:	5e                   	pop    esi
c001811c:	5f                   	pop    edi
c001811d:	5d                   	pop    ebp
c001811e:	c3                   	ret    
c001811f:	90                   	nop

c0018120 <SoundCard::addChannel(SoundPort*)>:
c0018120:	83 ec 0c             	sub    esp,0xc
c0018123:	31 c0                	xor    eax,eax
c0018125:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018129:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c0018131:	74 1b                	je     c001814e <SoundCard::addChannel(SoundPort*)+0x2e>
c0018133:	40                   	inc    eax
c0018134:	83 f8 20             	cmp    eax,0x20
c0018137:	75 f0                	jne    c0018129 <SoundCard::addChannel(SoundPort*)+0x9>
c0018139:	83 ec 0c             	sub    esp,0xc
c001813c:	68 e1 f8 01 c0       	push   0xc001f8e1
c0018141:	e8 61 81 ff ff       	call   c00102a7 <KePanic(char const*)>
c0018146:	83 c4 10             	add    esp,0x10
c0018149:	83 c8 ff             	or     eax,0xffffffff
c001814c:	eb 0b                	jmp    c0018159 <SoundCard::addChannel(SoundPort*)+0x39>
c001814e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0018152:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c0018159:	83 c4 0c             	add    esp,0xc
c001815c:	c3                   	ret    
c001815d:	90                   	nop

c001815e <SoundCard::removeChannel(int)>:
c001815e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018162:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018166:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c0018171:	c3                   	ret    
c0018172:	66 90                	xchg   ax,ax

c0018174 <SoundPort::SoundPort(int, int, int, int)>:
c0018174:	83 ec 0c             	sub    esp,0xc
c0018177:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001817b:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0018182:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018186:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001818a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001818e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0018192:	89 10                	mov    DWORD PTR [eax],edx
c0018194:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018198:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001819c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001819f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00181a3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00181a7:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00181aa:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c00181af:	75 13                	jne    c00181c4 <SoundPort::SoundPort(int, int, int, int)+0x50>
c00181b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00181b5:	8b 00                	mov    eax,DWORD PTR [eax]
c00181b7:	05 a0 0f 00 00       	add    eax,0xfa0
c00181bc:	01 c0                	add    eax,eax
c00181be:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00181c2:	66 90                	xchg   ax,ax
c00181c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00181c8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00181cc:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00181cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00181d3:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c00181da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00181de:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00181e1:	c1 e0 02             	shl    eax,0x2
c00181e4:	83 ec 0c             	sub    esp,0xc
c00181e7:	50                   	push   eax
c00181e8:	e8 cc f5 fe ff       	call   c00077b9 <malloc>
c00181ed:	83 c4 10             	add    esp,0x10
c00181f0:	89 c2                	mov    edx,eax
c00181f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00181f6:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00181f9:	90                   	nop
c00181fa:	83 c4 0c             	add    esp,0xc
c00181fd:	c3                   	ret    
c00181fe:	66 90                	xchg   ax,ax

c0018200 <SoundPort::~SoundPort()>:
c0018200:	83 ec 0c             	sub    esp,0xc
c0018203:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018207:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001820a:	85 c0                	test   eax,eax
c001820c:	74 1e                	je     c001822c <SoundPort::~SoundPort()+0x2c>
c001820e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018212:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0018215:	83 ec 0c             	sub    esp,0xc
c0018218:	50                   	push   eax
c0018219:	e8 ab f5 fe ff       	call   c00077c9 <free>
c001821e:	83 c4 10             	add    esp,0x10
c0018221:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018225:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001822c:	90                   	nop
c001822d:	83 c4 0c             	add    esp,0xc
c0018230:	c3                   	ret    
c0018231:	90                   	nop
c0018232:	66 90                	xchg   ax,ax

c0018234 <SoundPort::unpause()>:
c0018234:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018238:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c001823c:	c3                   	ret    
c001823d:	90                   	nop
c001823e:	66 90                	xchg   ax,ax

c0018240 <SoundPort::pause()>:
c0018240:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018244:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c0018248:	c3                   	ret    
c0018249:	90                   	nop
c001824a:	66 90                	xchg   ax,ax

c001824c <SoundPort::getBufferUsed()>:
c001824c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018250:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0018253:	c3                   	ret    

c0018254 <SoundPort::getBufferSize()>:
c0018254:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018258:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001825b:	c3                   	ret    

c001825c <SoundPort::buffer16(short*, int)>:
c001825c:	55                   	push   ebp
c001825d:	57                   	push   edi
c001825e:	56                   	push   esi
c001825f:	53                   	push   ebx
c0018260:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0018264:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c0018268:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001826b:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001826e:	74 68                	je     c00182d8 <SoundPort::buffer16(short*, int)+0x7c>
c0018270:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0018274:	85 c9                	test   ecx,ecx
c0018276:	7e 60                	jle    c00182d8 <SoundPort::buffer16(short*, int)+0x7c>
c0018278:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c001827c:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001827f:	c1 e1 0f             	shl    ecx,0xf
c0018282:	8d 70 01             	lea    esi,[eax+0x1]
c0018285:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c0018288:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001828b:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001828e:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0018291:	74 4d                	je     c00182e0 <SoundPort::buffer16(short*, int)+0x84>
c0018293:	31 f6                	xor    esi,esi
c0018295:	eb 21                	jmp    c00182b8 <SoundPort::buffer16(short*, int)+0x5c>
c0018297:	90                   	nop
c0018298:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c001829d:	8d 79 01             	lea    edi,[ecx+0x1]
c00182a0:	c1 e3 0f             	shl    ebx,0xf
c00182a3:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c00182a6:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c00182a9:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c00182ac:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c00182af:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c00182b2:	74 1c                	je     c00182d0 <SoundPort::buffer16(short*, int)+0x74>
c00182b4:	89 c6                	mov    esi,eax
c00182b6:	66 90                	xchg   ax,ax
c00182b8:	8d 46 01             	lea    eax,[esi+0x1]
c00182bb:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c00182bf:	75 d7                	jne    c0018298 <SoundPort::buffer16(short*, int)+0x3c>
c00182c1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00182c5:	8d 76 00             	lea    esi,[esi+0x0]
c00182c8:	5b                   	pop    ebx
c00182c9:	5e                   	pop    esi
c00182ca:	5f                   	pop    edi
c00182cb:	5d                   	pop    ebp
c00182cc:	c3                   	ret    
c00182cd:	8d 76 00             	lea    esi,[esi+0x0]
c00182d0:	5b                   	pop    ebx
c00182d1:	8d 46 02             	lea    eax,[esi+0x2]
c00182d4:	5e                   	pop    esi
c00182d5:	5f                   	pop    edi
c00182d6:	5d                   	pop    ebp
c00182d7:	c3                   	ret    
c00182d8:	5b                   	pop    ebx
c00182d9:	31 c0                	xor    eax,eax
c00182db:	5e                   	pop    esi
c00182dc:	5f                   	pop    edi
c00182dd:	5d                   	pop    ebp
c00182de:	c3                   	ret    
c00182df:	90                   	nop
c00182e0:	b8 01 00 00 00       	mov    eax,0x1
c00182e5:	eb e1                	jmp    c00182c8 <SoundPort::buffer16(short*, int)+0x6c>
c00182e7:	90                   	nop

c00182e8 <SoundPort::buffer32(int*, int)>:
c00182e8:	55                   	push   ebp
c00182e9:	57                   	push   edi
c00182ea:	56                   	push   esi
c00182eb:	53                   	push   ebx
c00182ec:	51                   	push   ecx
c00182ed:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00182f1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00182f5:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c00182f8:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00182fc:	89 04 24             	mov    DWORD PTR [esp],eax
c00182ff:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0018302:	74 5c                	je     c0018360 <SoundPort::buffer32(int*, int)+0x78>
c0018304:	85 c0                	test   eax,eax
c0018306:	7e 58                	jle    c0018360 <SoundPort::buffer32(int*, int)+0x78>
c0018308:	8d 71 01             	lea    esi,[ecx+0x1]
c001830b:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001830e:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c0018311:	8b 37                	mov    esi,DWORD PTR [edi]
c0018313:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c0018316:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0018319:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001831c:	74 4a                	je     c0018368 <SoundPort::buffer32(int*, int)+0x80>
c001831e:	31 f6                	xor    esi,esi
c0018320:	eb 1e                	jmp    c0018340 <SoundPort::buffer32(int*, int)+0x58>
c0018322:	66 90                	xchg   ax,ax
c0018324:	8d 69 01             	lea    ebp,[ecx+0x1]
c0018327:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c001832a:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c001832d:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c0018330:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c0018334:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0018337:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001833a:	74 18                	je     c0018354 <SoundPort::buffer32(int*, int)+0x6c>
c001833c:	89 de                	mov    esi,ebx
c001833e:	66 90                	xchg   ax,ax
c0018340:	8d 5e 01             	lea    ebx,[esi+0x1]
c0018343:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c0018346:	75 dc                	jne    c0018324 <SoundPort::buffer32(int*, int)+0x3c>
c0018348:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001834b:	90                   	nop
c001834c:	5a                   	pop    edx
c001834d:	5b                   	pop    ebx
c001834e:	5e                   	pop    esi
c001834f:	5f                   	pop    edi
c0018350:	5d                   	pop    ebp
c0018351:	c3                   	ret    
c0018352:	66 90                	xchg   ax,ax
c0018354:	5a                   	pop    edx
c0018355:	8d 46 02             	lea    eax,[esi+0x2]
c0018358:	5b                   	pop    ebx
c0018359:	5e                   	pop    esi
c001835a:	5f                   	pop    edi
c001835b:	5d                   	pop    ebp
c001835c:	c3                   	ret    
c001835d:	8d 76 00             	lea    esi,[esi+0x0]
c0018360:	5a                   	pop    edx
c0018361:	31 c0                	xor    eax,eax
c0018363:	5b                   	pop    ebx
c0018364:	5e                   	pop    esi
c0018365:	5f                   	pop    edi
c0018366:	5d                   	pop    ebp
c0018367:	c3                   	ret    
c0018368:	b8 01 00 00 00       	mov    eax,0x1
c001836d:	eb dd                	jmp    c001834c <SoundPort::buffer32(int*, int)+0x64>
c001836f:	90                   	nop

c0018370 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c0018370:	57                   	push   edi
c0018371:	56                   	push   esi
c0018372:	53                   	push   ebx
c0018373:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0018377:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001837b:	8b 86 e0 01 00 00    	mov    eax,DWORD PTR [esi+0x1e0]
c0018381:	39 03                	cmp    DWORD PTR [ebx],eax
c0018383:	74 13                	je     c0018398 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x28>
c0018385:	83 ec 0c             	sub    esp,0xc
c0018388:	68 34 f9 01 c0       	push   0xc001f934
c001838d:	e8 15 7f ff ff       	call   c00102a7 <KePanic(char const*)>
c0018392:	83 c4 10             	add    esp,0x10
c0018395:	8d 76 00             	lea    esi,[esi+0x0]
c0018398:	8b 86 dc 01 00 00    	mov    eax,DWORD PTR [esi+0x1dc]
c001839e:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c00183a1:	74 11                	je     c00183b4 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x44>
c00183a3:	83 ec 0c             	sub    esp,0xc
c00183a6:	68 73 f9 01 c0       	push   0xc001f973
c00183ab:	e8 f7 7e ff ff       	call   c00102a7 <KePanic(char const*)>
c00183b0:	83 c4 10             	add    esp,0x10
c00183b3:	90                   	nop
c00183b4:	8b 86 e4 01 00 00    	mov    eax,DWORD PTR [esi+0x1e4]
c00183ba:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c00183bd:	74 11                	je     c00183d0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x60>
c00183bf:	83 ec 0c             	sub    esp,0xc
c00183c2:	68 73 f9 01 c0       	push   0xc001f973
c00183c7:	e8 db 7e ff ff       	call   c00102a7 <KePanic(char const*)>
c00183cc:	83 c4 10             	add    esp,0x10
c00183cf:	90                   	nop
c00183d0:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c00183d3:	3b 74 24 14          	cmp    esi,DWORD PTR [esp+0x14]
c00183d7:	7e 07                	jle    c00183e0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x70>
c00183d9:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00183dd:	8d 76 00             	lea    esi,[esi+0x0]
c00183e0:	85 f6                	test   esi,esi
c00183e2:	7e 2c                	jle    c0018410 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa0>
c00183e4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00183e8:	8d 3c 36             	lea    edi,[esi+esi*1]
c00183eb:	31 c9                	xor    ecx,ecx
c00183ed:	01 d7                	add    edi,edx
c00183ef:	90                   	nop
c00183f0:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00183f3:	8b 04 08             	mov    eax,DWORD PTR [eax+ecx*1]
c00183f6:	85 c0                	test   eax,eax
c00183f8:	79 06                	jns    c0018400 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x90>
c00183fa:	05 ff 7f 00 00       	add    eax,0x7fff
c00183ff:	90                   	nop
c0018400:	c1 f8 0f             	sar    eax,0xf
c0018403:	83 c1 04             	add    ecx,0x4
c0018406:	66 01 02             	add    WORD PTR [edx],ax
c0018409:	83 c2 02             	add    edx,0x2
c001840c:	39 d7                	cmp    edi,edx
c001840e:	75 e0                	jne    c00183f0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x80>
c0018410:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0018413:	50                   	push   eax
c0018414:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0018417:	29 f0                	sub    eax,esi
c0018419:	c1 e0 02             	shl    eax,0x2
c001841c:	50                   	push   eax
c001841d:	8d 04 b2             	lea    eax,[edx+esi*4]
c0018420:	50                   	push   eax
c0018421:	52                   	push   edx
c0018422:	e8 b9 7f fe ff       	call   c00003e0 <memmove>
c0018427:	29 73 14             	sub    DWORD PTR [ebx+0x14],esi
c001842a:	83 c4 10             	add    esp,0x10
c001842d:	89 f0                	mov    eax,esi
c001842f:	5b                   	pop    ebx
c0018430:	5e                   	pop    esi
c0018431:	5f                   	pop    edi
c0018432:	c3                   	ret    
c0018433:	90                   	nop

c0018434 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c0018434:	57                   	push   edi
c0018435:	56                   	push   esi
c0018436:	53                   	push   ebx
c0018437:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001843b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001843f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0018443:	8b 87 e0 01 00 00    	mov    eax,DWORD PTR [edi+0x1e0]
c0018449:	39 06                	cmp    DWORD PTR [esi],eax
c001844b:	74 13                	je     c0018460 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x2c>
c001844d:	83 ec 0c             	sub    esp,0xc
c0018450:	68 54 f9 01 c0       	push   0xc001f954
c0018455:	e8 4d 7e ff ff       	call   c00102a7 <KePanic(char const*)>
c001845a:	83 c4 10             	add    esp,0x10
c001845d:	8d 76 00             	lea    esi,[esi+0x0]
c0018460:	8b 87 dc 01 00 00    	mov    eax,DWORD PTR [edi+0x1dc]
c0018466:	39 46 04             	cmp    DWORD PTR [esi+0x4],eax
c0018469:	74 11                	je     c001847c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x48>
c001846b:	83 ec 0c             	sub    esp,0xc
c001846e:	68 8f f9 01 c0       	push   0xc001f98f
c0018473:	e8 2f 7e ff ff       	call   c00102a7 <KePanic(char const*)>
c0018478:	83 c4 10             	add    esp,0x10
c001847b:	90                   	nop
c001847c:	8b 87 e4 01 00 00    	mov    eax,DWORD PTR [edi+0x1e4]
c0018482:	39 46 08             	cmp    DWORD PTR [esi+0x8],eax
c0018485:	74 11                	je     c0018498 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x64>
c0018487:	83 ec 0c             	sub    esp,0xc
c001848a:	68 8f f9 01 c0       	push   0xc001f98f
c001848f:	e8 13 7e ff ff       	call   c00102a7 <KePanic(char const*)>
c0018494:	83 c4 10             	add    esp,0x10
c0018497:	90                   	nop
c0018498:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c001849b:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
c001849f:	7e 07                	jle    c00184a8 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x74>
c00184a1:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00184a5:	8d 76 00             	lea    esi,[esi+0x0]
c00184a8:	85 ff                	test   edi,edi
c00184aa:	7e 1c                	jle    c00184c8 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x94>
c00184ac:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c00184b3:	31 c0                	xor    eax,eax
c00184b5:	8d 76 00             	lea    esi,[esi+0x0]
c00184b8:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c00184bb:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c00184be:	01 14 03             	add    DWORD PTR [ebx+eax*1],edx
c00184c1:	83 c0 04             	add    eax,0x4
c00184c4:	39 c1                	cmp    ecx,eax
c00184c6:	75 f0                	jne    c00184b8 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x84>
c00184c8:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c00184cb:	50                   	push   eax
c00184cc:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00184cf:	29 f8                	sub    eax,edi
c00184d1:	c1 e0 02             	shl    eax,0x2
c00184d4:	50                   	push   eax
c00184d5:	8d 04 ba             	lea    eax,[edx+edi*4]
c00184d8:	50                   	push   eax
c00184d9:	52                   	push   edx
c00184da:	e8 01 7f fe ff       	call   c00003e0 <memmove>
c00184df:	29 7e 14             	sub    DWORD PTR [esi+0x14],edi
c00184e2:	83 c4 10             	add    esp,0x10
c00184e5:	89 f8                	mov    eax,edi
c00184e7:	5b                   	pop    ebx
c00184e8:	5e                   	pop    esi
c00184e9:	5f                   	pop    edi
c00184ea:	c3                   	ret    
c00184eb:	90                   	nop

c00184ec <PCI::open(int, int, void*)>:
c00184ec:	83 ec 18             	sub    esp,0x18
c00184ef:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00184f3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00184f7:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00184fd:	8b 10                	mov    edx,DWORD PTR [eax]
c00184ff:	50                   	push   eax
c0018500:	ff 52 18             	call   DWORD PTR [edx+0x18]
c0018503:	31 c0                	xor    eax,eax
c0018505:	83 c4 1c             	add    esp,0x1c
c0018508:	c3                   	ret    
c0018509:	90                   	nop

c001850a <PCI::close(int, int, void*)>:
c001850a:	31 c0                	xor    eax,eax
c001850c:	c3                   	ret    
c001850d:	90                   	nop

c001850e <PCI::PCI()>:
c001850e:	83 ec 0c             	sub    esp,0xc
c0018511:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018515:	83 ec 08             	sub    esp,0x8
c0018518:	68 ab f9 01 c0       	push   0xc001f9ab
c001851d:	50                   	push   eax
c001851e:	e8 0d 2e ff ff       	call   c000b330 <Bus::Bus(char const*)>
c0018523:	83 c4 10             	add    esp,0x10
c0018526:	ba 54 fa 01 c0       	mov    edx,0xc001fa54
c001852b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001852f:	89 10                	mov    DWORD PTR [eax],edx
c0018531:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018535:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c001853f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018543:	a3 40 6b 02 c0       	mov    ds:0xc0026b40,eax
c0018548:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001854c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0018552:	31 d2                	xor    edx,edx
c0018554:	88 c2                	mov    dl,al
c0018556:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001855a:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c0018561:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018565:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001856b:	31 d2                	xor    edx,edx
c001856d:	88 c2                	mov    dl,al
c001856f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018573:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c0018578:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001857c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0018582:	8d 50 01             	lea    edx,[eax+0x1]
c0018585:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0018589:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001858f:	31 d2                	xor    edx,edx
c0018591:	88 c2                	mov    dl,al
c0018593:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018597:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001859b:	83 c9 c0             	or     ecx,0xffffffc0
c001859e:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00185a2:	90                   	nop
c00185a3:	83 c4 0c             	add    esp,0xc
c00185a6:	c3                   	ret    
c00185a7:	90                   	nop

c00185a8 <PCI::readBAR8(unsigned int, int)>:
c00185a8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00185ac:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00185b0:	f6 c2 01             	test   dl,0x1
c00185b3:	74 07                	je     c00185bc <PCI::readBAR8(unsigned int, int)+0x14>
c00185b5:	83 e2 fc             	and    edx,0xfffffffc
c00185b8:	01 c2                	add    edx,eax
c00185ba:	ec                   	in     al,dx
c00185bb:	c3                   	ret    
c00185bc:	83 e2 f0             	and    edx,0xfffffff0
c00185bf:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c00185c2:	c3                   	ret    
c00185c3:	90                   	nop

c00185c4 <PCI::readBAR16(unsigned int, int)>:
c00185c4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00185c8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00185cc:	f6 c2 01             	test   dl,0x1
c00185cf:	74 08                	je     c00185d9 <PCI::readBAR16(unsigned int, int)+0x15>
c00185d1:	83 e2 fc             	and    edx,0xfffffffc
c00185d4:	01 c2                	add    edx,eax
c00185d6:	66 ed                	in     ax,dx
c00185d8:	c3                   	ret    
c00185d9:	83 e2 f0             	and    edx,0xfffffff0
c00185dc:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c00185e0:	c3                   	ret    
c00185e1:	90                   	nop

c00185e2 <PCI::readBAR32(unsigned int, int)>:
c00185e2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00185e6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00185ea:	f6 c2 01             	test   dl,0x1
c00185ed:	74 07                	je     c00185f6 <PCI::readBAR32(unsigned int, int)+0x14>
c00185ef:	83 e2 fc             	and    edx,0xfffffffc
c00185f2:	01 c2                	add    edx,eax
c00185f4:	ed                   	in     eax,dx
c00185f5:	c3                   	ret    
c00185f6:	83 e2 f0             	and    edx,0xfffffff0
c00185f9:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c00185fc:	c3                   	ret    
c00185fd:	90                   	nop

c00185fe <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c00185fe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018602:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018606:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001860a:	f6 c2 01             	test   dl,0x1
c001860d:	74 07                	je     c0018616 <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c001860f:	83 e2 fc             	and    edx,0xfffffffc
c0018612:	01 ca                	add    edx,ecx
c0018614:	ee                   	out    dx,al
c0018615:	c3                   	ret    
c0018616:	83 e2 f0             	and    edx,0xfffffff0
c0018619:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c001861c:	c3                   	ret    
c001861d:	90                   	nop

c001861e <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c001861e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018622:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018626:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001862a:	f6 c2 01             	test   dl,0x1
c001862d:	74 08                	je     c0018637 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c001862f:	83 e2 fc             	and    edx,0xfffffffc
c0018632:	01 ca                	add    edx,ecx
c0018634:	66 ef                	out    dx,ax
c0018636:	c3                   	ret    
c0018637:	83 e2 f0             	and    edx,0xfffffff0
c001863a:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c001863e:	c3                   	ret    
c001863f:	90                   	nop

c0018640 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c0018640:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018644:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018648:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001864c:	f6 c2 01             	test   dl,0x1
c001864f:	74 07                	je     c0018658 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c0018651:	83 e2 fc             	and    edx,0xfffffffc
c0018654:	01 ca                	add    edx,ecx
c0018656:	ef                   	out    dx,eax
c0018657:	c3                   	ret    
c0018658:	83 e2 f0             	and    edx,0xfffffff0
c001865b:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c001865e:	c3                   	ret    
c001865f:	90                   	nop

c0018660 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0018660:	55                   	push   ebp
c0018661:	57                   	push   edi
c0018662:	56                   	push   esi
c0018663:	53                   	push   ebx
c0018664:	83 ec 0c             	sub    esp,0xc
c0018667:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001866b:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001866f:	89 f0                	mov    eax,esi
c0018671:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0018675:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0018679:	3c 07                	cmp    al,0x7
c001867b:	76 10                	jbe    c001868d <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c001867d:	83 ec 0c             	sub    esp,0xc
c0018680:	68 b3 f9 01 c0       	push   0xc001f9b3
c0018685:	e8 1d 7c ff ff       	call   c00102a7 <KePanic(char const*)>
c001868a:	83 c4 10             	add    esp,0x10
c001868d:	80 fb 0f             	cmp    bl,0xf
c0018690:	76 10                	jbe    c00186a2 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x42>
c0018692:	83 ec 0c             	sub    esp,0xc
c0018695:	68 e3 f9 01 c0       	push   0xc001f9e3
c001869a:	e8 08 7c ff ff       	call   c00102a7 <KePanic(char const*)>
c001869f:	83 c4 10             	add    esp,0x10
c00186a2:	8d 04 36             	lea    eax,[esi+esi*1]
c00186a5:	ba f8 0c 00 00       	mov    edx,0xcf8
c00186aa:	83 c8 f0             	or     eax,0xfffffff0
c00186ad:	ee                   	out    dx,al
c00186ae:	ba fa 0c 00 00       	mov    edx,0xcfa
c00186b3:	89 e8                	mov    eax,ebp
c00186b5:	ee                   	out    dx,al
c00186b6:	83 c4 0c             	add    esp,0xc
c00186b9:	89 d8                	mov    eax,ebx
c00186bb:	66 81 e7 fc 00       	and    di,0xfc
c00186c0:	5b                   	pop    ebx
c00186c1:	c1 e0 08             	shl    eax,0x8
c00186c4:	5e                   	pop    esi
c00186c5:	09 f8                	or     eax,edi
c00186c7:	5f                   	pop    edi
c00186c8:	66 0d 00 c0          	or     ax,0xc000
c00186cc:	5d                   	pop    ebp
c00186cd:	c3                   	ret    

c00186ce <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c00186ce:	57                   	push   edi
c00186cf:	56                   	push   esi
c00186d0:	53                   	push   ebx
c00186d1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00186d5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00186d9:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c00186df:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00186e3:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00186e7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00186eb:	83 ff 01             	cmp    edi,0x1
c00186ee:	75 3e                	jne    c001872e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x60>
c00186f0:	89 de                	mov    esi,ebx
c00186f2:	0f b6 c0             	movzx  eax,al
c00186f5:	81 e6 fc 00 00 00    	and    esi,0xfc
c00186fb:	c1 e0 10             	shl    eax,0x10
c00186fe:	0f b6 c9             	movzx  ecx,cl
c0018701:	09 f0                	or     eax,esi
c0018703:	c1 e1 08             	shl    ecx,0x8
c0018706:	0f b6 d2             	movzx  edx,dl
c0018709:	09 c8                	or     eax,ecx
c001870b:	c1 e2 0b             	shl    edx,0xb
c001870e:	09 d0                	or     eax,edx
c0018710:	ba f8 0c 00 00       	mov    edx,0xcf8
c0018715:	0d 00 00 00 80       	or     eax,0x80000000
c001871a:	ef                   	out    dx,eax
c001871b:	ba fc 0c 00 00       	mov    edx,0xcfc
c0018720:	ed                   	in     eax,dx
c0018721:	83 e3 02             	and    ebx,0x2
c0018724:	0f b6 cb             	movzx  ecx,bl
c0018727:	c1 e1 03             	shl    ecx,0x3
c001872a:	d3 e8                	shr    eax,cl
c001872c:	eb 43                	jmp    c0018771 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c001872e:	83 ff 02             	cmp    edi,0x2
c0018731:	75 2c                	jne    c001875f <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x91>
c0018733:	83 ec 0c             	sub    esp,0xc
c0018736:	0f b6 c9             	movzx  ecx,cl
c0018739:	0f b6 d2             	movzx  edx,dl
c001873c:	0f b6 fb             	movzx  edi,bl
c001873f:	0f b6 c0             	movzx  eax,al
c0018742:	57                   	push   edi
c0018743:	51                   	push   ecx
c0018744:	52                   	push   edx
c0018745:	50                   	push   eax
c0018746:	56                   	push   esi
c0018747:	e8 14 ff ff ff       	call   c0018660 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001874c:	89 c2                	mov    edx,eax
c001874e:	ed                   	in     eax,dx
c001874f:	83 e3 02             	and    ebx,0x2
c0018752:	83 c4 20             	add    esp,0x20
c0018755:	0f b6 cb             	movzx  ecx,bl
c0018758:	c1 e1 03             	shl    ecx,0x3
c001875b:	d3 e8                	shr    eax,cl
c001875d:	eb 12                	jmp    c0018771 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c001875f:	83 ec 0c             	sub    esp,0xc
c0018762:	68 13 fa 01 c0       	push   0xc001fa13
c0018767:	e8 3b 7b ff ff       	call   c00102a7 <KePanic(char const*)>
c001876c:	83 c4 10             	add    esp,0x10
c001876f:	31 c0                	xor    eax,eax
c0018771:	5b                   	pop    ebx
c0018772:	5e                   	pop    esi
c0018773:	5f                   	pop    edi
c0018774:	c3                   	ret    
c0018775:	90                   	nop

c0018776 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c0018776:	83 ec 18             	sub    esp,0x18
c0018779:	6a 00                	push   0x0
c001877b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018780:	50                   	push   eax
c0018781:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018786:	50                   	push   eax
c0018787:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001878c:	50                   	push   eax
c001878d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018791:	e8 38 ff ff ff       	call   c00186ce <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018796:	83 c4 2c             	add    esp,0x2c
c0018799:	c3                   	ret    

c001879a <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001879a:	83 ec 18             	sub    esp,0x18
c001879d:	6a 0e                	push   0xe
c001879f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00187a4:	50                   	push   eax
c00187a5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00187aa:	50                   	push   eax
c00187ab:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00187b0:	50                   	push   eax
c00187b1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00187b5:	e8 14 ff ff ff       	call   c00186ce <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00187ba:	83 c4 2c             	add    esp,0x2c
c00187bd:	0f b6 c0             	movzx  eax,al
c00187c0:	c3                   	ret    
c00187c1:	90                   	nop

c00187c2 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c00187c2:	55                   	push   ebp
c00187c3:	57                   	push   edi
c00187c4:	56                   	push   esi
c00187c5:	53                   	push   ebx
c00187c6:	83 ec 18             	sub    esp,0x18
c00187c9:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c00187ce:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c00187d3:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c00187d8:	6a 0a                	push   0xa
c00187da:	56                   	push   esi
c00187db:	55                   	push   ebp
c00187dc:	57                   	push   edi
c00187dd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00187e1:	e8 e8 fe ff ff       	call   c00186ce <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00187e6:	83 c4 14             	add    esp,0x14
c00187e9:	89 c3                	mov    ebx,eax
c00187eb:	6a 0a                	push   0xa
c00187ed:	0f b6 db             	movzx  ebx,bl
c00187f0:	56                   	push   esi
c00187f1:	55                   	push   ebp
c00187f2:	57                   	push   edi
c00187f3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00187f7:	e8 d2 fe ff ff       	call   c00186ce <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00187fc:	83 c4 2c             	add    esp,0x2c
c00187ff:	25 00 ff 00 00       	and    eax,0xff00
c0018804:	09 d8                	or     eax,ebx
c0018806:	5b                   	pop    ebx
c0018807:	5e                   	pop    esi
c0018808:	5f                   	pop    edi
c0018809:	5d                   	pop    ebp
c001880a:	c3                   	ret    
c001880b:	90                   	nop

c001880c <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001880c:	83 ec 18             	sub    esp,0x18
c001880f:	6a 08                	push   0x8
c0018811:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018816:	50                   	push   eax
c0018817:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001881c:	50                   	push   eax
c001881d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018822:	50                   	push   eax
c0018823:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018827:	e8 a2 fe ff ff       	call   c00186ce <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001882c:	83 c4 2c             	add    esp,0x2c
c001882f:	0f b6 c4             	movzx  eax,ah
c0018832:	c3                   	ret    
c0018833:	90                   	nop

c0018834 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c0018834:	83 ec 18             	sub    esp,0x18
c0018837:	6a 08                	push   0x8
c0018839:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001883e:	50                   	push   eax
c001883f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018844:	50                   	push   eax
c0018845:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001884a:	50                   	push   eax
c001884b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001884f:	e8 7a fe ff ff       	call   c00186ce <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018854:	83 c4 2c             	add    esp,0x2c
c0018857:	c3                   	ret    

c0018858 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c0018858:	83 ec 18             	sub    esp,0x18
c001885b:	6a 3c                	push   0x3c
c001885d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018862:	50                   	push   eax
c0018863:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018868:	50                   	push   eax
c0018869:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001886e:	50                   	push   eax
c001886f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018873:	e8 56 fe ff ff       	call   c00186ce <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018878:	83 c4 2c             	add    esp,0x2c
c001887b:	c3                   	ret    

c001887c <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001887c:	83 ec 18             	sub    esp,0x18
c001887f:	6a 18                	push   0x18
c0018881:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018886:	50                   	push   eax
c0018887:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001888c:	50                   	push   eax
c001888d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018892:	50                   	push   eax
c0018893:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018897:	e8 32 fe ff ff       	call   c00186ce <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001889c:	83 c4 2c             	add    esp,0x2c
c001889f:	0f b6 c4             	movzx  eax,ah
c00188a2:	c3                   	ret    
c00188a3:	90                   	nop

c00188a4 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c00188a4:	55                   	push   ebp
c00188a5:	57                   	push   edi
c00188a6:	56                   	push   esi
c00188a7:	53                   	push   ebx
c00188a8:	83 ec 28             	sub    esp,0x28
c00188ab:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c00188af:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c00188b4:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c00188b9:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c00188be:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c00188c5:	8d 43 12             	lea    eax,[ebx+0x12]
c00188c8:	83 c3 10             	add    ebx,0x10
c00188cb:	0f b6 c0             	movzx  eax,al
c00188ce:	0f b6 db             	movzx  ebx,bl
c00188d1:	50                   	push   eax
c00188d2:	51                   	push   ecx
c00188d3:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c00188d7:	57                   	push   edi
c00188d8:	55                   	push   ebp
c00188d9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00188dd:	e8 ec fd ff ff       	call   c00186ce <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00188e2:	83 c4 14             	add    esp,0x14
c00188e5:	89 c6                	mov    esi,eax
c00188e7:	53                   	push   ebx
c00188e8:	c1 e6 10             	shl    esi,0x10
c00188eb:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00188ef:	51                   	push   ecx
c00188f0:	57                   	push   edi
c00188f1:	55                   	push   ebp
c00188f2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00188f6:	e8 d3 fd ff ff       	call   c00186ce <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00188fb:	83 c4 3c             	add    esp,0x3c
c00188fe:	0f b7 c0             	movzx  eax,ax
c0018901:	5b                   	pop    ebx
c0018902:	09 f0                	or     eax,esi
c0018904:	5e                   	pop    esi
c0018905:	5f                   	pop    edi
c0018906:	5d                   	pop    ebp
c0018907:	c3                   	ret    

c0018908 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c0018908:	55                   	push   ebp
c0018909:	57                   	push   edi
c001890a:	56                   	push   esi
c001890b:	53                   	push   ebx
c001890c:	83 ec 0c             	sub    esp,0xc
c001890f:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0018913:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0018917:	89 f5                	mov    ebp,esi
c0018919:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c001891f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018923:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018927:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001892b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001892f:	83 f9 01             	cmp    ecx,0x1
c0018932:	75 5d                	jne    c0018991 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c0018934:	0f b6 c8             	movzx  ecx,al
c0018937:	0f b6 d2             	movzx  edx,dl
c001893a:	c1 e1 10             	shl    ecx,0x10
c001893d:	c1 e2 0b             	shl    edx,0xb
c0018940:	89 f0                	mov    eax,esi
c0018942:	25 fc 00 00 00       	and    eax,0xfc
c0018947:	09 c1                	or     ecx,eax
c0018949:	89 e8                	mov    eax,ebp
c001894b:	0f b6 c0             	movzx  eax,al
c001894e:	c1 e0 08             	shl    eax,0x8
c0018951:	09 c1                	or     ecx,eax
c0018953:	09 d1                	or     ecx,edx
c0018955:	ba f8 0c 00 00       	mov    edx,0xcf8
c001895a:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0018960:	89 c8                	mov    eax,ecx
c0018962:	ef                   	out    dx,eax
c0018963:	ba fc 0c 00 00       	mov    edx,0xcfc
c0018968:	ed                   	in     eax,dx
c0018969:	0f b7 db             	movzx  ebx,bx
c001896c:	83 e6 02             	and    esi,0x2
c001896f:	74 0a                	je     c001897b <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c0018971:	0f b7 d0             	movzx  edx,ax
c0018974:	c1 e3 10             	shl    ebx,0x10
c0018977:	09 d3                	or     ebx,edx
c0018979:	eb 05                	jmp    c0018980 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c001897b:	66 31 c0             	xor    ax,ax
c001897e:	09 c3                	or     ebx,eax
c0018980:	ba f8 0c 00 00       	mov    edx,0xcf8
c0018985:	89 c8                	mov    eax,ecx
c0018987:	ef                   	out    dx,eax
c0018988:	ba fc 0c 00 00       	mov    edx,0xcfc
c001898d:	89 d8                	mov    eax,ebx
c001898f:	eb 41                	jmp    c00189d2 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c0018991:	83 f9 02             	cmp    ecx,0x2
c0018994:	75 45                	jne    c00189db <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c0018996:	83 ec 0c             	sub    esp,0xc
c0018999:	0f b6 d2             	movzx  edx,dl
c001899c:	89 f1                	mov    ecx,esi
c001899e:	0f b6 c0             	movzx  eax,al
c00189a1:	0f b6 f1             	movzx  esi,cl
c00189a4:	89 e9                	mov    ecx,ebp
c00189a6:	56                   	push   esi
c00189a7:	0f b6 c9             	movzx  ecx,cl
c00189aa:	51                   	push   ecx
c00189ab:	52                   	push   edx
c00189ac:	50                   	push   eax
c00189ad:	57                   	push   edi
c00189ae:	e8 ad fc ff ff       	call   c0018660 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c00189b3:	89 c2                	mov    edx,eax
c00189b5:	ed                   	in     eax,dx
c00189b6:	83 c4 20             	add    esp,0x20
c00189b9:	0f b7 db             	movzx  ebx,bx
c00189bc:	f6 c2 02             	test   dl,0x2
c00189bf:	74 0c                	je     c00189cd <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c00189c1:	0f b7 c8             	movzx  ecx,ax
c00189c4:	89 d8                	mov    eax,ebx
c00189c6:	c1 e0 10             	shl    eax,0x10
c00189c9:	09 c8                	or     eax,ecx
c00189cb:	eb 05                	jmp    c00189d2 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c00189cd:	66 31 c0             	xor    ax,ax
c00189d0:	09 d8                	or     eax,ebx
c00189d2:	ef                   	out    dx,eax
c00189d3:	83 c4 0c             	add    esp,0xc
c00189d6:	5b                   	pop    ebx
c00189d7:	5e                   	pop    esi
c00189d8:	5f                   	pop    edi
c00189d9:	5d                   	pop    ebp
c00189da:	c3                   	ret    
c00189db:	c7 44 24 20 13 fa 01 c0 	mov    DWORD PTR [esp+0x20],0xc001fa13
c00189e3:	83 c4 0c             	add    esp,0xc
c00189e6:	5b                   	pop    ebx
c00189e7:	5e                   	pop    esi
c00189e8:	5f                   	pop    edi
c00189e9:	5d                   	pop    ebp
c00189ea:	e9 b8 78 ff ff       	jmp    c00102a7 <KePanic(char const*)>
c00189ef:	90                   	nop

c00189f0 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c00189f0:	55                   	push   ebp
c00189f1:	57                   	push   edi
c00189f2:	56                   	push   esi
c00189f3:	53                   	push   ebx
c00189f4:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00189fa:	80 3d 4c 6b 02 c0 00 	cmp    BYTE PTR ds:0xc0026b4c,0x0
c0018a01:	0f 85 84 00 00 00    	jne    c0018a8b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x9b>
c0018a07:	83 ec 0c             	sub    esp,0xc
c0018a0a:	68 14 01 00 00       	push   0x114
c0018a0f:	e8 a5 ed fe ff       	call   c00077b9 <malloc>
c0018a14:	83 c4 0c             	add    esp,0xc
c0018a17:	89 c3                	mov    ebx,eax
c0018a19:	ff 35 90 61 02 c0    	push   DWORD PTR ds:0xc0026190
c0018a1f:	68 19 fa 01 c0       	push   0xc001fa19
c0018a24:	50                   	push   eax
c0018a25:	e8 9e 20 ff ff       	call   c000aac8 <File::File(char const*, Process*)>
c0018a2a:	5a                   	pop    edx
c0018a2b:	59                   	pop    ecx
c0018a2c:	6a 01                	push   0x1
c0018a2e:	53                   	push   ebx
c0018a2f:	e8 54 21 ff ff       	call   c000ab88 <File::open(FileOpenMode)>
c0018a34:	83 c4 0c             	add    esp,0xc
c0018a37:	8d 44 24 1f          	lea    eax,[esp+0x1f]
c0018a3b:	50                   	push   eax
c0018a3c:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018a40:	50                   	push   eax
c0018a41:	53                   	push   ebx
c0018a42:	e8 ed 23 ff ff       	call   c000ae34 <File::stat(unsigned long long*, bool*)>
c0018a47:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018a4b:	40                   	inc    eax
c0018a4c:	89 04 24             	mov    DWORD PTR [esp],eax
c0018a4f:	e8 65 ed fe ff       	call   c00077b9 <malloc>
c0018a54:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0018a58:	a3 48 6b 02 c0       	mov    ds:0xc0026b48,eax
c0018a5d:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c0018a61:	5e                   	pop    esi
c0018a62:	8b 13                	mov    edx,DWORD PTR [ebx]
c0018a64:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c0018a68:	51                   	push   ecx
c0018a69:	50                   	push   eax
c0018a6a:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0018a6e:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0018a72:	53                   	push   ebx
c0018a73:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0018a76:	83 c4 14             	add    esp,0x14
c0018a79:	53                   	push   ebx
c0018a7a:	e8 67 21 ff ff       	call   c000abe6 <File::close()>
c0018a7f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018a83:	83 c4 10             	add    esp,0x10
c0018a86:	a3 44 6b 02 c0       	mov    ds:0xc0026b44,eax
c0018a8b:	a1 44 6b 02 c0       	mov    eax,ds:0xc0026b44
c0018a90:	8b 15 48 6b 02 c0    	mov    edx,DWORD PTR ds:0xc0026b48
c0018a96:	89 04 24             	mov    DWORD PTR [esp],eax
c0018a99:	31 ff                	xor    edi,edi
c0018a9b:	66 8b 84 24 42 01 00 00 	mov    ax,WORD PTR [esp+0x142]
c0018aa3:	31 f6                	xor    esi,esi
c0018aa5:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0018aaa:	31 db                	xor    ebx,ebx
c0018aac:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c0018ab4:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0018ab9:	8a 84 24 40 01 00 00 	mov    al,BYTE PTR [esp+0x140]
c0018ac0:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c0018ac4:	8a 84 24 41 01 00 00 	mov    al,BYTE PTR [esp+0x141]
c0018acb:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0018acf:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0018ad2:	0f 8e 6b 01 00 00    	jle    c0018c43 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x253>
c0018ad8:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c0018adb:	d4 40                	aam    0x40
c0018add:	d5 39                	aad    0x39
c0018adf:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018ae3:	8a 44 3a 01          	mov    al,BYTE PTR [edx+edi*1+0x1]
c0018ae7:	d4 40                	aam    0x40
c0018ae9:	d5 39                	aad    0x39
c0018aeb:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0018aef:	8a 44 3a 03          	mov    al,BYTE PTR [edx+edi*1+0x3]
c0018af3:	d4 40                	aam    0x40
c0018af5:	d5 39                	aad    0x39
c0018af7:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0018afb:	8a 44 3a 04          	mov    al,BYTE PTR [edx+edi*1+0x4]
c0018aff:	d4 40                	aam    0x40
c0018b01:	d5 39                	aad    0x39
c0018b03:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0018b07:	8a 44 3a 06          	mov    al,BYTE PTR [edx+edi*1+0x6]
c0018b0b:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0018b0f:	3c 56                	cmp    al,0x56
c0018b11:	74 45                	je     c0018b58 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x168>
c0018b13:	d4 40                	aam    0x40
c0018b15:	d5 39                	aad    0x39
c0018b17:	8d 48 d0             	lea    ecx,[eax-0x30]
c0018b1a:	8a 44 3a 07          	mov    al,BYTE PTR [edx+edi*1+0x7]
c0018b1e:	0f b6 c9             	movzx  ecx,cl
c0018b21:	c1 e1 04             	shl    ecx,0x4
c0018b24:	d4 40                	aam    0x40
c0018b26:	d5 39                	aad    0x39
c0018b28:	8d 58 d0             	lea    ebx,[eax-0x30]
c0018b2b:	8a 44 3a 08          	mov    al,BYTE PTR [edx+edi*1+0x8]
c0018b2f:	0f b6 db             	movzx  ebx,bl
c0018b32:	09 cb                	or     ebx,ecx
c0018b34:	c1 e3 04             	shl    ebx,0x4
c0018b37:	d4 40                	aam    0x40
c0018b39:	d5 39                	aad    0x39
c0018b3b:	8d 48 d0             	lea    ecx,[eax-0x30]
c0018b3e:	8a 44 3a 09          	mov    al,BYTE PTR [edx+edi*1+0x9]
c0018b42:	0f b6 c9             	movzx  ecx,cl
c0018b45:	09 cb                	or     ebx,ecx
c0018b47:	c1 e3 04             	shl    ebx,0x4
c0018b4a:	89 d9                	mov    ecx,ebx
c0018b4c:	d4 40                	aam    0x40
c0018b4e:	d5 39                	aad    0x39
c0018b50:	8d 58 d0             	lea    ebx,[eax-0x30]
c0018b53:	0f b6 db             	movzx  ebx,bl
c0018b56:	09 cb                	or     ebx,ecx
c0018b58:	8a 4c 3a 0b          	mov    cl,BYTE PTR [edx+edi*1+0xb]
c0018b5c:	80 f9 44             	cmp    cl,0x44
c0018b5f:	74 47                	je     c0018ba8 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1b8>
c0018b61:	88 c8                	mov    al,cl
c0018b63:	d4 40                	aam    0x40
c0018b65:	d5 39                	aad    0x39
c0018b67:	83 e8 30             	sub    eax,0x30
c0018b6a:	0f b6 e8             	movzx  ebp,al
c0018b6d:	8a 44 3a 0c          	mov    al,BYTE PTR [edx+edi*1+0xc]
c0018b71:	c1 e5 04             	shl    ebp,0x4
c0018b74:	d4 40                	aam    0x40
c0018b76:	d5 39                	aad    0x39
c0018b78:	83 e8 30             	sub    eax,0x30
c0018b7b:	0f b6 f0             	movzx  esi,al
c0018b7e:	8a 44 3a 0d          	mov    al,BYTE PTR [edx+edi*1+0xd]
c0018b82:	09 ee                	or     esi,ebp
c0018b84:	c1 e6 04             	shl    esi,0x4
c0018b87:	d4 40                	aam    0x40
c0018b89:	d5 39                	aad    0x39
c0018b8b:	83 e8 30             	sub    eax,0x30
c0018b8e:	0f b6 e8             	movzx  ebp,al
c0018b91:	8a 44 3a 0e          	mov    al,BYTE PTR [edx+edi*1+0xe]
c0018b95:	09 ee                	or     esi,ebp
c0018b97:	c1 e6 04             	shl    esi,0x4
c0018b9a:	89 f5                	mov    ebp,esi
c0018b9c:	d4 40                	aam    0x40
c0018b9e:	d5 39                	aad    0x39
c0018ba0:	83 e8 30             	sub    eax,0x30
c0018ba3:	0f b6 f0             	movzx  esi,al
c0018ba6:	09 ee                	or     esi,ebp
c0018ba8:	83 c7 10             	add    edi,0x10
c0018bab:	8d 6c 24 20          	lea    ebp,[esp+0x20]
c0018baf:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c0018bb2:	3c 0a                	cmp    al,0xa
c0018bb4:	74 09                	je     c0018bbf <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1cf>
c0018bb6:	45                   	inc    ebp
c0018bb7:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0018bba:	75 16                	jne    c0018bd2 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1e2>
c0018bbc:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0018bbf:	3c 0a                	cmp    al,0xa
c0018bc1:	0f 94 c0             	sete   al
c0018bc4:	0f b6 c0             	movzx  eax,al
c0018bc7:	01 c7                	add    edi,eax
c0018bc9:	80 7c 24 05 56       	cmp    BYTE PTR [esp+0x5],0x56
c0018bce:	75 0c                	jne    c0018bdc <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1ec>
c0018bd0:	eb 15                	jmp    c0018be7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1f7>
c0018bd2:	47                   	inc    edi
c0018bd3:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
c0018bd6:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0018bda:	eb d3                	jmp    c0018baf <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1bf>
c0018bdc:	66 39 5c 24 06       	cmp    WORD PTR [esp+0x6],bx
c0018be1:	0f 85 e8 fe ff ff    	jne    c0018acf <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0018be7:	80 f9 44             	cmp    cl,0x44
c0018bea:	74 0b                	je     c0018bf7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x207>
c0018bec:	66 39 74 24 08       	cmp    WORD PTR [esp+0x8],si
c0018bf1:	0f 85 d8 fe ff ff    	jne    c0018acf <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0018bf7:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0018bfb:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0018bff:	c1 e1 04             	shl    ecx,0x4
c0018c02:	83 e8 30             	sub    eax,0x30
c0018c05:	09 c8                	or     eax,ecx
c0018c07:	38 44 24 0a          	cmp    BYTE PTR [esp+0xa],al
c0018c0b:	0f 85 be fe ff ff    	jne    c0018acf <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0018c11:	8a 4c 24 0e          	mov    cl,BYTE PTR [esp+0xe]
c0018c15:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0018c19:	c1 e1 04             	shl    ecx,0x4
c0018c1c:	83 e8 30             	sub    eax,0x30
c0018c1f:	09 c8                	or     eax,ecx
c0018c21:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c0018c25:	0f 85 a4 fe ff ff    	jne    c0018acf <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0018c2b:	50                   	push   eax
c0018c2c:	50                   	push   eax
c0018c2d:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018c31:	50                   	push   eax
c0018c32:	ff b4 24 70 01 00 00 	push   DWORD PTR [esp+0x170]
c0018c39:	e8 c2 79 fe ff       	call   c0000600 <strcpy>
c0018c3e:	83 c4 10             	add    esp,0x10
c0018c41:	eb 15                	jmp    c0018c58 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x268>
c0018c43:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c0018c4a:	c7 84 24 64 01 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x164],0x0
c0018c55:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0018c58:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c0018c5f:	81 c4 2c 01 00 00    	add    esp,0x12c
c0018c65:	5b                   	pop    ebx
c0018c66:	5e                   	pop    esi
c0018c67:	5f                   	pop    edi
c0018c68:	5d                   	pop    ebp
c0018c69:	c3                   	ret    

c0018c6a <PCI::checkBus(unsigned char)>:
c0018c6a:	56                   	push   esi
c0018c6b:	53                   	push   ebx
c0018c6c:	31 f6                	xor    esi,esi
c0018c6e:	51                   	push   ecx
c0018c6f:	8a 5c 24 14          	mov    bl,BYTE PTR [esp+0x14]
c0018c73:	0f b6 c3             	movzx  eax,bl
c0018c76:	52                   	push   edx
c0018c77:	56                   	push   esi
c0018c78:	46                   	inc    esi
c0018c79:	50                   	push   eax
c0018c7a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018c7e:	e8 f3 02 00 00       	call   c0018f76 <PCI::checkDevice(unsigned char, unsigned char)>
c0018c83:	83 c4 10             	add    esp,0x10
c0018c86:	83 fe 20             	cmp    esi,0x20
c0018c89:	75 e8                	jne    c0018c73 <PCI::checkBus(unsigned char)+0x9>
c0018c8b:	58                   	pop    eax
c0018c8c:	5b                   	pop    ebx
c0018c8d:	5e                   	pop    esi
c0018c8e:	c3                   	ret    
c0018c8f:	90                   	nop

c0018c90 <PCI::foundDevice(PCIDeviceInfo)>:
c0018c90:	55                   	push   ebp
c0018c91:	57                   	push   edi
c0018c92:	56                   	push   esi
c0018c93:	53                   	push   ebx
c0018c94:	83 ec 1c             	sub    esp,0x1c
c0018c97:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0018c9b:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c0018ca1:	0f 84 52 01 00 00    	je     c0018df9 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0018ca7:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0018cab:	66 81 f9 06 04       	cmp    cx,0x406
c0018cb0:	75 2c                	jne    c0018cde <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c0018cb2:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c0018cb7:	50                   	push   eax
c0018cb8:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c0018cbd:	50                   	push   eax
c0018cbe:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c0018cc3:	50                   	push   eax
c0018cc4:	56                   	push   esi
c0018cc5:	e8 b2 fb ff ff       	call   c001887c <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c0018cca:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0018cce:	0f b6 c0             	movzx  eax,al
c0018cd1:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0018cd5:	83 c4 2c             	add    esp,0x2c
c0018cd8:	5b                   	pop    ebx
c0018cd9:	5e                   	pop    esi
c0018cda:	5f                   	pop    edi
c0018cdb:	5d                   	pop    ebp
c0018cdc:	eb 8c                	jmp    c0018c6a <PCI::checkBus(unsigned char)>
c0018cde:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0018ce2:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0018ce8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0018cec:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0018cf0:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c0018cf4:	88 d3                	mov    bl,dl
c0018cf6:	85 c0                	test   eax,eax
c0018cf8:	74 33                	je     c0018d2d <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c0018cfa:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0018cfd:	85 d2                	test   edx,edx
c0018cff:	74 28                	je     c0018d29 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0018d01:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c0018d07:	31 ef                	xor    edi,ebp
c0018d09:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c0018d0f:	75 18                	jne    c0018d29 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0018d11:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0018d15:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c0018d1b:	75 0c                	jne    c0018d29 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0018d1d:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c0018d23:	0f 84 d0 00 00 00    	je     c0018df9 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0018d29:	8b 00                	mov    eax,DWORD PTR [eax]
c0018d2b:	eb c9                	jmp    c0018cf6 <PCI::foundDevice(PCIDeviceInfo)+0x66>
c0018d2d:	66 81 f9 01 06       	cmp    cx,0x601
c0018d32:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c0018d36:	75 19                	jne    c0018d51 <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c0018d38:	83 ec 0c             	sub    esp,0xc
c0018d3b:	68 64 01 00 00       	push   0x164
c0018d40:	e8 74 ea fe ff       	call   c00077b9 <malloc>
c0018d45:	89 c5                	mov    ebp,eax
c0018d47:	89 04 24             	mov    DWORD PTR [esp],eax
c0018d4a:	e8 47 0e 00 00       	call   c0019b96 <SATABus::SATABus()>
c0018d4f:	eb 1e                	jmp    c0018d6f <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c0018d51:	66 81 f9 01 01       	cmp    cx,0x101
c0018d56:	75 60                	jne    c0018db8 <PCI::foundDevice(PCIDeviceInfo)+0x128>
c0018d58:	83 ec 0c             	sub    esp,0xc
c0018d5b:	68 70 02 00 00       	push   0x270
c0018d60:	e8 54 ea fe ff       	call   c00077b9 <malloc>
c0018d65:	89 c5                	mov    ebp,eax
c0018d67:	89 04 24             	mov    DWORD PTR [esp],eax
c0018d6a:	e8 cb 02 00 00       	call   c001903a <IDE::IDE()>
c0018d6f:	58                   	pop    eax
c0018d70:	5a                   	pop    edx
c0018d71:	55                   	push   ebp
c0018d72:	56                   	push   esi
c0018d73:	e8 64 2c ff ff       	call   c000b9dc <Device::addChild(Device*)>
c0018d78:	83 ec 1c             	sub    esp,0x1c
c0018d7b:	b9 09 00 00 00       	mov    ecx,0x9
c0018d80:	fc                   	cld    
c0018d81:	89 e7                	mov    edi,esp
c0018d83:	89 de                	mov    esi,ebx
c0018d85:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0018d87:	55                   	push   ebp
c0018d88:	e8 95 2b ff ff       	call   c000b922 <Device::preOpenPCI(PCIDeviceInfo)>
c0018d8d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0018d90:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c0018d94:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c0018d9c:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c0018da4:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c0018dac:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0018daf:	83 c4 4c             	add    esp,0x4c
c0018db2:	5b                   	pop    ebx
c0018db3:	5e                   	pop    esi
c0018db4:	5f                   	pop    edi
c0018db5:	5d                   	pop    ebp
c0018db6:	ff e0                	jmp    eax
c0018db8:	83 ec 0c             	sub    esp,0xc
c0018dbb:	68 58 01 00 00       	push   0x158
c0018dc0:	e8 f4 e9 fe ff       	call   c00077b9 <malloc>
c0018dc5:	89 c5                	mov    ebp,eax
c0018dc7:	58                   	pop    eax
c0018dc8:	5a                   	pop    edx
c0018dc9:	68 32 fa 01 c0       	push   0xc001fa32
c0018dce:	55                   	push   ebp
c0018dcf:	e8 a6 2e ff ff       	call   c000bc7a <DriverlessDevice::DriverlessDevice(char const*)>
c0018dd4:	59                   	pop    ecx
c0018dd5:	5f                   	pop    edi
c0018dd6:	55                   	push   ebp
c0018dd7:	56                   	push   esi
c0018dd8:	e8 ff 2b ff ff       	call   c000b9dc <Device::addChild(Device*)>
c0018ddd:	b9 09 00 00 00       	mov    ecx,0x9
c0018de2:	fc                   	cld    
c0018de3:	89 df                	mov    edi,ebx
c0018de5:	89 de                	mov    esi,ebx
c0018de7:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0018de9:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c0018ded:	83 c4 2c             	add    esp,0x2c
c0018df0:	5b                   	pop    ebx
c0018df1:	5e                   	pop    esi
c0018df2:	5f                   	pop    edi
c0018df3:	5d                   	pop    ebp
c0018df4:	e9 29 2b ff ff       	jmp    c000b922 <Device::preOpenPCI(PCIDeviceInfo)>
c0018df9:	83 c4 1c             	add    esp,0x1c
c0018dfc:	5b                   	pop    ebx
c0018dfd:	5e                   	pop    esi
c0018dfe:	5f                   	pop    edi
c0018dff:	5d                   	pop    ebp
c0018e00:	c3                   	ret    
c0018e01:	90                   	nop

c0018e02 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c0018e02:	55                   	push   ebp
c0018e03:	57                   	push   edi
c0018e04:	56                   	push   esi
c0018e05:	53                   	push   ebx
c0018e06:	83 ec 68             	sub    esp,0x68
c0018e09:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c0018e0d:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0018e14:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0018e18:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0018e1f:	0f b6 74 24 1c       	movzx  esi,BYTE PTR [esp+0x1c]
c0018e24:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0018e28:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0018e2f:	0f b6 5c 24 20       	movzx  ebx,BYTE PTR [esp+0x20]
c0018e34:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0018e38:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0018e3d:	6a 0c                	push   0xc
c0018e3f:	57                   	push   edi
c0018e40:	53                   	push   ebx
c0018e41:	56                   	push   esi
c0018e42:	55                   	push   ebp
c0018e43:	e8 86 f8 ff ff       	call   c00186ce <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018e48:	83 c4 20             	add    esp,0x20
c0018e4b:	57                   	push   edi
c0018e4c:	53                   	push   ebx
c0018e4d:	56                   	push   esi
c0018e4e:	55                   	push   ebp
c0018e4f:	e8 6e f9 ff ff       	call   c00187c2 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c0018e54:	66 89 44 24 2e       	mov    WORD PTR [esp+0x2e],ax
c0018e59:	57                   	push   edi
c0018e5a:	53                   	push   ebx
c0018e5b:	56                   	push   esi
c0018e5c:	55                   	push   ebp
c0018e5d:	e8 f6 f9 ff ff       	call   c0018858 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c0018e62:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c0018e66:	83 c4 14             	add    esp,0x14
c0018e69:	6a 3c                	push   0x3c
c0018e6b:	57                   	push   edi
c0018e6c:	53                   	push   ebx
c0018e6d:	56                   	push   esi
c0018e6e:	55                   	push   ebp
c0018e6f:	e8 5a f8 ff ff       	call   c00186ce <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018e74:	0f b6 c4             	movzx  eax,ah
c0018e77:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0018e7b:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c0018e7f:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c0018e83:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c0018e88:	8b 90 68 01 00 00    	mov    edx,DWORD PTR [eax+0x168]
c0018e8e:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c0018e94:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0018e98:	83 c4 20             	add    esp,0x20
c0018e9b:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018ea0:	74 30                	je     c0018ed2 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c0018ea2:	31 c0                	xor    eax,eax
c0018ea4:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0018ea8:	7e 28                	jle    c0018ed2 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c0018eaa:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c0018eb2:	39 cb                	cmp    ebx,ecx
c0018eb4:	75 19                	jne    c0018ecf <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c0018eb6:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c0018ebe:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c0018ec2:	75 0b                	jne    c0018ecf <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c0018ec4:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c0018ecb:	88 4c 24 1d          	mov    BYTE PTR [esp+0x1d],cl
c0018ecf:	40                   	inc    eax
c0018ed0:	eb d2                	jmp    c0018ea4 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c0018ed2:	31 d2                	xor    edx,edx
c0018ed4:	83 ec 0c             	sub    esp,0xc
c0018ed7:	57                   	push   edi
c0018ed8:	53                   	push   ebx
c0018ed9:	56                   	push   esi
c0018eda:	52                   	push   edx
c0018edb:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0018edf:	55                   	push   ebp
c0018ee0:	e8 bf f9 ff ff       	call   c00188a4 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018ee5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018ee9:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c0018eed:	42                   	inc    edx
c0018eee:	83 c4 20             	add    esp,0x20
c0018ef1:	83 fa 06             	cmp    edx,0x6
c0018ef4:	75 de                	jne    c0018ed4 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c0018ef6:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0018efb:	83 ec 0c             	sub    esp,0xc
c0018efe:	86 e0                	xchg   al,ah
c0018f00:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c0018f05:	6a 02                	push   0x2
c0018f07:	57                   	push   edi
c0018f08:	53                   	push   ebx
c0018f09:	56                   	push   esi
c0018f0a:	55                   	push   ebp
c0018f0b:	e8 be f7 ff ff       	call   c00186ce <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018f10:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c0018f15:	83 c4 20             	add    esp,0x20
c0018f18:	57                   	push   edi
c0018f19:	53                   	push   ebx
c0018f1a:	56                   	push   esi
c0018f1b:	55                   	push   ebp
c0018f1c:	e8 eb f8 ff ff       	call   c001880c <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c0018f21:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0018f25:	57                   	push   edi
c0018f26:	53                   	push   ebx
c0018f27:	56                   	push   esi
c0018f28:	55                   	push   ebp
c0018f29:	e8 48 f8 ff ff       	call   c0018776 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0018f2e:	b9 09 00 00 00       	mov    ecx,0x9
c0018f33:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c0018f38:	8a 44 24 3d          	mov    al,BYTE PTR [esp+0x3d]
c0018f3c:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c0018f40:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c0018f44:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c0018f48:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c0018f4c:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c0018f50:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c0018f54:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c0018f58:	83 ec 0c             	sub    esp,0xc
c0018f5b:	fc                   	cld    
c0018f5c:	89 e7                	mov    edi,esp
c0018f5e:	8d 74 24 58          	lea    esi,[esp+0x58]
c0018f62:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0018f64:	55                   	push   ebp
c0018f65:	e8 26 fd ff ff       	call   c0018c90 <PCI::foundDevice(PCIDeviceInfo)>
c0018f6a:	81 c4 8c 00 00 00    	add    esp,0x8c
c0018f70:	5b                   	pop    ebx
c0018f71:	5e                   	pop    esi
c0018f72:	5f                   	pop    edi
c0018f73:	5d                   	pop    ebp
c0018f74:	c3                   	ret    
c0018f75:	90                   	nop

c0018f76 <PCI::checkDevice(unsigned char, unsigned char)>:
c0018f76:	55                   	push   ebp
c0018f77:	57                   	push   edi
c0018f78:	56                   	push   esi
c0018f79:	53                   	push   ebx
c0018f7a:	83 ec 0c             	sub    esp,0xc
c0018f7d:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0018f81:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c0018f86:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0018f8b:	6a 00                	push   0x0
c0018f8d:	56                   	push   esi
c0018f8e:	57                   	push   edi
c0018f8f:	55                   	push   ebp
c0018f90:	e8 e1 f7 ff ff       	call   c0018776 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0018f95:	6a 00                	push   0x0
c0018f97:	56                   	push   esi
c0018f98:	57                   	push   edi
c0018f99:	55                   	push   ebp
c0018f9a:	e8 63 fe ff ff       	call   c0018e02 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0018f9f:	83 c4 20             	add    esp,0x20
c0018fa2:	6a 00                	push   0x0
c0018fa4:	56                   	push   esi
c0018fa5:	57                   	push   edi
c0018fa6:	55                   	push   ebp
c0018fa7:	e8 ee f7 ff ff       	call   c001879a <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0018fac:	83 c4 10             	add    esp,0x10
c0018faf:	84 c0                	test   al,al
c0018fb1:	79 27                	jns    c0018fda <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c0018fb3:	bb 01 00 00 00       	mov    ebx,0x1
c0018fb8:	53                   	push   ebx
c0018fb9:	56                   	push   esi
c0018fba:	57                   	push   edi
c0018fbb:	55                   	push   ebp
c0018fbc:	e8 b5 f7 ff ff       	call   c0018776 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0018fc1:	83 c4 10             	add    esp,0x10
c0018fc4:	66 40                	inc    ax
c0018fc6:	74 0c                	je     c0018fd4 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c0018fc8:	53                   	push   ebx
c0018fc9:	56                   	push   esi
c0018fca:	57                   	push   edi
c0018fcb:	55                   	push   ebp
c0018fcc:	e8 31 fe ff ff       	call   c0018e02 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0018fd1:	83 c4 10             	add    esp,0x10
c0018fd4:	43                   	inc    ebx
c0018fd5:	83 fb 08             	cmp    ebx,0x8
c0018fd8:	75 de                	jne    c0018fb8 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c0018fda:	83 c4 0c             	add    esp,0xc
c0018fdd:	5b                   	pop    ebx
c0018fde:	5e                   	pop    esi
c0018fdf:	5f                   	pop    edi
c0018fe0:	5d                   	pop    ebp
c0018fe1:	c3                   	ret    

c0018fe2 <PCI::detect()>:
c0018fe2:	56                   	push   esi
c0018fe3:	53                   	push   ebx
c0018fe4:	53                   	push   ebx
c0018fe5:	31 db                	xor    ebx,ebx
c0018fe7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0018feb:	6a 00                	push   0x0
c0018fed:	6a 00                	push   0x0
c0018fef:	6a 00                	push   0x0
c0018ff1:	56                   	push   esi
c0018ff2:	e8 a3 f7 ff ff       	call   c001879a <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0018ff7:	83 c4 10             	add    esp,0x10
c0018ffa:	a8 80                	test   al,0x80
c0018ffc:	75 21                	jne    c001901f <PCI::detect()+0x3d>
c0018ffe:	51                   	push   ecx
c0018fff:	51                   	push   ecx
c0019000:	6a 00                	push   0x0
c0019002:	56                   	push   esi
c0019003:	e8 62 fc ff ff       	call   c0018c6a <PCI::checkBus(unsigned char)>
c0019008:	83 c4 10             	add    esp,0x10
c001900b:	eb 24                	jmp    c0019031 <PCI::detect()+0x4f>
c001900d:	52                   	push   edx
c001900e:	52                   	push   edx
c001900f:	53                   	push   ebx
c0019010:	43                   	inc    ebx
c0019011:	56                   	push   esi
c0019012:	e8 53 fc ff ff       	call   c0018c6a <PCI::checkBus(unsigned char)>
c0019017:	83 c4 10             	add    esp,0x10
c001901a:	83 fb 08             	cmp    ebx,0x8
c001901d:	74 12                	je     c0019031 <PCI::detect()+0x4f>
c001901f:	53                   	push   ebx
c0019020:	6a 00                	push   0x0
c0019022:	6a 00                	push   0x0
c0019024:	56                   	push   esi
c0019025:	e8 4c f7 ff ff       	call   c0018776 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001902a:	83 c4 10             	add    esp,0x10
c001902d:	66 40                	inc    ax
c001902f:	74 dc                	je     c001900d <PCI::detect()+0x2b>
c0019031:	58                   	pop    eax
c0019032:	5b                   	pop    ebx
c0019033:	5e                   	pop    esi
c0019034:	c3                   	ret    
c0019035:	90                   	nop

c0019036 <IDE::close(int, int, void*)>:
c0019036:	83 c8 ff             	or     eax,0xffffffff
c0019039:	c3                   	ret    

c001903a <IDE::IDE()>:
c001903a:	83 ec 0c             	sub    esp,0xc
c001903d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019041:	83 ec 08             	sub    esp,0x8
c0019044:	68 78 fa 01 c0       	push   0xc001fa78
c0019049:	50                   	push   eax
c001904a:	e8 d1 2c ff ff       	call   c000bd20 <HardDiskController::HardDiskController(char const*)>
c001904f:	83 c4 10             	add    esp,0x10
c0019052:	ba 08 fb 01 c0       	mov    edx,0xc001fb08
c0019057:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001905b:	89 10                	mov    DWORD PTR [eax],edx
c001905d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019061:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0019068:	90                   	nop
c0019069:	83 c4 0c             	add    esp,0xc
c001906c:	c3                   	ret    
c001906d:	90                   	nop

c001906e <IDE::prepareInterrupt(unsigned char)>:
c001906e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019073:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0019077:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001907f:	c3                   	ret    

c0019080 <selectDrive(unsigned char, unsigned char)>:
c0019080:	c3                   	ret    
c0019081:	90                   	nop

c0019082 <IDE::getBase(unsigned char)>:
c0019082:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0019087:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001908b:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c0019093:	c3                   	ret    

c0019094 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c0019094:	55                   	push   ebp
c0019095:	57                   	push   edi
c0019096:	56                   	push   esi
c0019097:	53                   	push   ebx
c0019098:	83 ec 1c             	sub    esp,0x1c
c001909b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001909f:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00190a3:	8d 4b f8             	lea    ecx,[ebx-0x8]
c00190a6:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00190aa:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00190ae:	80 f9 03             	cmp    cl,0x3
c00190b1:	77 51                	ja     c0019104 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c00190b3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00190b7:	0f b6 f2             	movzx  esi,dl
c00190ba:	0f b6 db             	movzx  ebx,bl
c00190bd:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c00190c0:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c00190c4:	83 ca 80             	or     edx,0xffffff80
c00190c7:	0f b6 d2             	movzx  edx,dl
c00190ca:	52                   	push   edx
c00190cb:	6a 0c                	push   0xc
c00190cd:	56                   	push   esi
c00190ce:	57                   	push   edi
c00190cf:	e8 c0 ff ff ff       	call   c0019094 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00190d4:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c00190d9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00190dd:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c00190e1:	ee                   	out    dx,al
c00190e2:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c00190e7:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c00190eb:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c00190ef:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00190f3:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c00190fb:	83 c4 2c             	add    esp,0x2c
c00190fe:	5b                   	pop    ebx
c00190ff:	5e                   	pop    esi
c0019100:	5f                   	pop    edi
c0019101:	5d                   	pop    ebp
c0019102:	eb 90                	jmp    c0019094 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019104:	80 fb 07             	cmp    bl,0x7
c0019107:	77 12                	ja     c001911b <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c0019109:	0f b6 d2             	movzx  edx,dl
c001910c:	0f b6 db             	movzx  ebx,bl
c001910f:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c0019117:	89 da                	mov    edx,ebx
c0019119:	eb 2f                	jmp    c001914a <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001911b:	80 fb 0d             	cmp    bl,0xd
c001911e:	77 13                	ja     c0019133 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c0019120:	0f b6 d2             	movzx  edx,dl
c0019123:	0f b6 db             	movzx  ebx,bl
c0019126:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c001912d:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c0019131:	eb 17                	jmp    c001914a <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0019133:	80 fb 15             	cmp    bl,0x15
c0019136:	77 13                	ja     c001914b <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c0019138:	0f b6 d2             	movzx  edx,dl
c001913b:	0f b6 db             	movzx  ebx,bl
c001913e:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c0019146:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001914a:	ee                   	out    dx,al
c001914b:	83 c4 1c             	add    esp,0x1c
c001914e:	5b                   	pop    ebx
c001914f:	5e                   	pop    esi
c0019150:	5f                   	pop    edi
c0019151:	5d                   	pop    ebp
c0019152:	c3                   	ret    
c0019153:	90                   	nop

c0019154 <IDE::read(unsigned char, unsigned char)>:
c0019154:	55                   	push   ebp
c0019155:	57                   	push   edi
c0019156:	56                   	push   esi
c0019157:	53                   	push   ebx
c0019158:	83 ec 1c             	sub    esp,0x1c
c001915b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001915f:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0019163:	8d 43 f8             	lea    eax,[ebx-0x8]
c0019166:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001916a:	3c 03                	cmp    al,0x3
c001916c:	77 43                	ja     c00191b1 <IDE::read(unsigned char, unsigned char)+0x5d>
c001916e:	0f b6 f2             	movzx  esi,dl
c0019171:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0019174:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c0019178:	83 c8 80             	or     eax,0xffffff80
c001917b:	0f b6 c0             	movzx  eax,al
c001917e:	50                   	push   eax
c001917f:	6a 0c                	push   0xc
c0019181:	56                   	push   esi
c0019182:	57                   	push   edi
c0019183:	e8 0c ff ff ff       	call   c0019094 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019188:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c001918d:	0f b6 c3             	movzx  eax,bl
c0019190:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c0019194:	ec                   	in     al,dx
c0019195:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0019199:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c001919e:	52                   	push   edx
c001919f:	6a 0c                	push   0xc
c00191a1:	56                   	push   esi
c00191a2:	57                   	push   edi
c00191a3:	e8 ec fe ff ff       	call   c0019094 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00191a8:	83 c4 20             	add    esp,0x20
c00191ab:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00191af:	eb 49                	jmp    c00191fa <IDE::read(unsigned char, unsigned char)+0xa6>
c00191b1:	80 fb 07             	cmp    bl,0x7
c00191b4:	77 12                	ja     c00191c8 <IDE::read(unsigned char, unsigned char)+0x74>
c00191b6:	0f b6 d2             	movzx  edx,dl
c00191b9:	0f b6 c3             	movzx  eax,bl
c00191bc:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c00191c4:	89 c2                	mov    edx,eax
c00191c6:	eb 31                	jmp    c00191f9 <IDE::read(unsigned char, unsigned char)+0xa5>
c00191c8:	80 fb 0d             	cmp    bl,0xd
c00191cb:	77 13                	ja     c00191e0 <IDE::read(unsigned char, unsigned char)+0x8c>
c00191cd:	0f b6 d2             	movzx  edx,dl
c00191d0:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c00191d7:	0f b6 d3             	movzx  edx,bl
c00191da:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c00191de:	eb 19                	jmp    c00191f9 <IDE::read(unsigned char, unsigned char)+0xa5>
c00191e0:	31 c0                	xor    eax,eax
c00191e2:	80 fb 15             	cmp    bl,0x15
c00191e5:	77 13                	ja     c00191fa <IDE::read(unsigned char, unsigned char)+0xa6>
c00191e7:	0f b6 d2             	movzx  edx,dl
c00191ea:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c00191f2:	0f b6 d3             	movzx  edx,bl
c00191f5:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c00191f9:	ec                   	in     al,dx
c00191fa:	83 c4 1c             	add    esp,0x1c
c00191fd:	5b                   	pop    ebx
c00191fe:	5e                   	pop    esi
c00191ff:	5f                   	pop    edi
c0019200:	5d                   	pop    ebp
c0019201:	c3                   	ret    

c0019202 <IDE::waitInterrupt(unsigned char)>:
c0019202:	57                   	push   edi
c0019203:	56                   	push   esi
c0019204:	31 f6                	xor    esi,esi
c0019206:	53                   	push   ebx
c0019207:	83 ec 10             	sub    esp,0x10
c001920a:	8a 44 24 24          	mov    al,BYTE PTR [esp+0x24]
c001920e:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0019212:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0019216:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001921b:	8a 9c 07 6c 02 00 00 	mov    bl,BYTE PTR [edi+eax*1+0x26c]
c0019222:	84 db                	test   bl,bl
c0019224:	75 33                	jne    c0019259 <IDE::waitInterrupt(unsigned char)+0x57>
c0019226:	52                   	push   edx
c0019227:	6a 0c                	push   0xc
c0019229:	50                   	push   eax
c001922a:	57                   	push   edi
c001922b:	e8 24 ff ff ff       	call   c0019154 <IDE::read(unsigned char, unsigned char)>
c0019230:	83 c4 10             	add    esp,0x10
c0019233:	a8 01                	test   al,0x1
c0019235:	75 2a                	jne    c0019261 <IDE::waitInterrupt(unsigned char)+0x5f>
c0019237:	f7 c6 04 00 00 00    	test   esi,0x4
c001923d:	75 12                	jne    c0019251 <IDE::waitInterrupt(unsigned char)+0x4f>
c001923f:	83 fe 32             	cmp    esi,0x32
c0019242:	7e 0d                	jle    c0019251 <IDE::waitInterrupt(unsigned char)+0x4f>
c0019244:	83 ec 0c             	sub    esp,0xc
c0019247:	6a 64                	push   0x64
c0019249:	e8 76 a8 ff ff       	call   c0013ac4 <milliTenthSleep(unsigned int)>
c001924e:	83 c4 10             	add    esp,0x10
c0019251:	83 fe 3c             	cmp    esi,0x3c
c0019254:	74 0b                	je     c0019261 <IDE::waitInterrupt(unsigned char)+0x5f>
c0019256:	46                   	inc    esi
c0019257:	eb bd                	jmp    c0019216 <IDE::waitInterrupt(unsigned char)+0x14>
c0019259:	c6 84 07 6c 02 00 00 00 	mov    BYTE PTR [edi+eax*1+0x26c],0x0
c0019261:	83 c4 10             	add    esp,0x10
c0019264:	88 d8                	mov    al,bl
c0019266:	5b                   	pop    ebx
c0019267:	5e                   	pop    esi
c0019268:	5f                   	pop    edi
c0019269:	c3                   	ret    

c001926a <ideChannel0IRQHandler(regs*, void*)>:
c001926a:	83 ec 10             	sub    esp,0x10
c001926d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019271:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c0019278:	6a 07                	push   0x7
c001927a:	6a 00                	push   0x0
c001927c:	50                   	push   eax
c001927d:	e8 d2 fe ff ff       	call   c0019154 <IDE::read(unsigned char, unsigned char)>
c0019282:	83 c4 1c             	add    esp,0x1c
c0019285:	c3                   	ret    

c0019286 <ideChannel1IRQHandler(regs*, void*)>:
c0019286:	83 ec 10             	sub    esp,0x10
c0019289:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001928d:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c0019294:	6a 07                	push   0x7
c0019296:	6a 01                	push   0x1
c0019298:	50                   	push   eax
c0019299:	e8 b6 fe ff ff       	call   c0019154 <IDE::read(unsigned char, unsigned char)>
c001929e:	83 c4 1c             	add    esp,0x1c
c00192a1:	c3                   	ret    

c00192a2 <IDE::enableIRQs(unsigned char, bool)>:
c00192a2:	57                   	push   edi
c00192a3:	56                   	push   esi
c00192a4:	be 04 00 00 00       	mov    esi,0x4
c00192a9:	53                   	push   ebx
c00192aa:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00192af:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00192b3:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c00192b8:	0f 94 c0             	sete   al
c00192bb:	01 c0                	add    eax,eax
c00192bd:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c00192c4:	0f b6 c0             	movzx  eax,al
c00192c7:	50                   	push   eax
c00192c8:	6a 0c                	push   0xc
c00192ca:	57                   	push   edi
c00192cb:	53                   	push   ebx
c00192cc:	e8 c3 fd ff ff       	call   c0019094 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00192d1:	83 c4 10             	add    esp,0x10
c00192d4:	50                   	push   eax
c00192d5:	6a 0c                	push   0xc
c00192d7:	57                   	push   edi
c00192d8:	53                   	push   ebx
c00192d9:	e8 76 fe ff ff       	call   c0019154 <IDE::read(unsigned char, unsigned char)>
c00192de:	83 c4 10             	add    esp,0x10
c00192e1:	4e                   	dec    esi
c00192e2:	75 f0                	jne    c00192d4 <IDE::enableIRQs(unsigned char, bool)+0x32>
c00192e4:	5b                   	pop    ebx
c00192e5:	5e                   	pop    esi
c00192e6:	5f                   	pop    edi
c00192e7:	c3                   	ret    

c00192e8 <IDE::open(int, int, void*)>:
c00192e8:	55                   	push   ebp
c00192e9:	57                   	push   edi
c00192ea:	56                   	push   esi
c00192eb:	53                   	push   ebx
c00192ec:	83 ec 1c             	sub    esp,0x1c
c00192ef:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00192f3:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c00192fc:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c0019305:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001930c:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c0019313:	0f 85 b0 02 00 00    	jne    c00195c9 <IDE::open(int, int, void*)+0x2e1>
c0019319:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001931f:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0019323:	83 e0 7f             	and    eax,0x7f
c0019326:	3c 05                	cmp    al,0x5
c0019328:	74 04                	je     c001932e <IDE::open(int, int, void*)+0x46>
c001932a:	3c 0f                	cmp    al,0xf
c001932c:	75 32                	jne    c0019360 <IDE::open(int, int, void*)+0x78>
c001932e:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c0019334:	83 e0 fc             	and    eax,0xfffffffc
c0019337:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001933e:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c0019344:	83 e0 fc             	and    eax,0xfffffffc
c0019347:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001934e:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c0019354:	83 e0 fc             	and    eax,0xfffffffc
c0019357:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001935e:	eb 14                	jmp    c0019374 <IDE::open(int, int, void*)+0x8c>
c0019360:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001936a:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c0019374:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001937b:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c0019382:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019386:	89 c6                	mov    esi,eax
c0019388:	bf f8 0c 00 00       	mov    edi,0xcf8
c001938d:	c1 e6 10             	shl    esi,0x10
c0019390:	89 e8                	mov    eax,ebp
c0019392:	89 fa                	mov    edx,edi
c0019394:	c1 e0 0b             	shl    eax,0xb
c0019397:	09 f0                	or     eax,esi
c0019399:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c00193a0:	c1 e6 08             	shl    esi,0x8
c00193a3:	09 c6                	or     esi,eax
c00193a5:	89 f0                	mov    eax,esi
c00193a7:	0d 08 00 00 80       	or     eax,0x80000008
c00193ac:	ef                   	out    dx,eax
c00193ad:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c00193b2:	89 ca                	mov    edx,ecx
c00193b4:	ed                   	in     eax,dx
c00193b5:	c1 e8 10             	shr    eax,0x10
c00193b8:	3d ff ff 00 00       	cmp    eax,0xffff
c00193bd:	0f 84 f5 00 00 00    	je     c00194b8 <IDE::open(int, int, void*)+0x1d0>
c00193c3:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c00193c9:	89 fa                	mov    edx,edi
c00193cb:	89 f0                	mov    eax,esi
c00193cd:	ef                   	out    dx,eax
c00193ce:	b0 fe                	mov    al,0xfe
c00193d0:	89 ca                	mov    edx,ecx
c00193d2:	ee                   	out    dx,al
c00193d3:	89 f0                	mov    eax,esi
c00193d5:	89 fa                	mov    edx,edi
c00193d7:	ef                   	out    dx,eax
c00193d8:	89 ca                	mov    edx,ecx
c00193da:	ed                   	in     eax,dx
c00193db:	3c fe                	cmp    al,0xfe
c00193dd:	0f 85 a9 00 00 00    	jne    c001948c <IDE::open(int, int, void*)+0x1a4>
c00193e3:	8b 15 b8 2e 02 c0    	mov    edx,DWORD PTR ds:0xc0022eb8
c00193e9:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c00193f0:	74 33                	je     c0019425 <IDE::open(int, int, void*)+0x13d>
c00193f2:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c00193f8:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c00193fc:	40                   	inc    eax
c00193fd:	83 ec 0c             	sub    esp,0xc
c0019400:	0f b6 c0             	movzx  eax,al
c0019403:	50                   	push   eax
c0019404:	55                   	push   ebp
c0019405:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019409:	ff b2 68 01 00 00    	push   DWORD PTR [edx+0x168]
c001940f:	51                   	push   ecx
c0019410:	e8 ab 53 ff ff       	call   c000e7c0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c0019415:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001941a:	83 c4 1c             	add    esp,0x1c
c001941d:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0019423:	eb 0a                	jmp    c001942f <IDE::open(int, int, void*)+0x147>
c0019425:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001942f:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c0019436:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001943d:	c1 e1 10             	shl    ecx,0x10
c0019440:	c1 e0 08             	shl    eax,0x8
c0019443:	bf f8 0c 00 00       	mov    edi,0xcf8
c0019448:	09 c1                	or     ecx,eax
c001944a:	89 fa                	mov    edx,edi
c001944c:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c0019453:	c1 e0 0b             	shl    eax,0xb
c0019456:	09 c1                	or     ecx,eax
c0019458:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001945e:	89 c8                	mov    eax,ecx
c0019460:	ef                   	out    dx,eax
c0019461:	be fc 0c 00 00       	mov    esi,0xcfc
c0019466:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c001946c:	89 f2                	mov    edx,esi
c001946e:	ee                   	out    dx,al
c001946f:	89 c8                	mov    eax,ecx
c0019471:	89 fa                	mov    edx,edi
c0019473:	ef                   	out    dx,eax
c0019474:	89 f2                	mov    edx,esi
c0019476:	ed                   	in     eax,dx
c0019477:	0f b6 c0             	movzx  eax,al
c001947a:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c0019480:	74 46                	je     c00194c8 <IDE::open(int, int, void*)+0x1e0>
c0019482:	83 ec 0c             	sub    esp,0xc
c0019485:	68 90 fa 01 c0       	push   0xc001fa90
c001948a:	eb 34                	jmp    c00194c0 <IDE::open(int, int, void*)+0x1d8>
c001948c:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c0019495:	75 17                	jne    c00194ae <IDE::open(int, int, void*)+0x1c6>
c0019497:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c001949c:	74 07                	je     c00194a5 <IDE::open(int, int, void*)+0x1bd>
c001949e:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c00194a3:	75 09                	jne    c00194ae <IDE::open(int, int, void*)+0x1c6>
c00194a5:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c00194ac:	eb 1a                	jmp    c00194c8 <IDE::open(int, int, void*)+0x1e0>
c00194ae:	83 ec 0c             	sub    esp,0xc
c00194b1:	68 98 fa 01 c0       	push   0xc001fa98
c00194b6:	eb 08                	jmp    c00194c0 <IDE::open(int, int, void*)+0x1d8>
c00194b8:	83 ec 0c             	sub    esp,0xc
c00194bb:	68 c9 fa 01 c0       	push   0xc001fac9
c00194c0:	e8 e2 6d ff ff       	call   c00102a7 <KePanic(char const*)>
c00194c5:	83 c4 10             	add    esp,0x10
c00194c8:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c00194cf:	79 1a                	jns    c00194eb <IDE::open(int, int, void*)+0x203>
c00194d1:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c00194d7:	83 e0 fc             	and    eax,0xfffffffc
c00194da:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c00194e1:	83 c0 08             	add    eax,0x8
c00194e4:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c00194eb:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00194f1:	89 c2                	mov    edx,eax
c00194f3:	83 e2 0f             	and    edx,0xf
c00194f6:	66 83 fa 08          	cmp    dx,0x8
c00194fa:	75 0a                	jne    c0019506 <IDE::open(int, int, void*)+0x21e>
c00194fc:	83 e8 02             	sub    eax,0x2
c00194ff:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0019506:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001950c:	89 c2                	mov    edx,eax
c001950e:	83 e2 0f             	and    edx,0xf
c0019511:	66 83 fa 08          	cmp    dx,0x8
c0019515:	75 0a                	jne    c0019521 <IDE::open(int, int, void*)+0x239>
c0019517:	83 e8 02             	sub    eax,0x2
c001951a:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c0019521:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0019528:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001952f:	89 d0                	mov    eax,edx
c0019531:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0019534:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0019538:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001953c:	8d 4a 01             	lea    ecx,[edx+0x1]
c001953f:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0019544:	0f b6 c9             	movzx  ecx,cl
c0019547:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001954e:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0019551:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0019555:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c0019559:	8d 50 02             	lea    edx,[eax+0x2]
c001955c:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0019561:	0f b6 d2             	movzx  edx,dl
c0019564:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001956a:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001956d:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0019571:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c0019575:	8d 48 03             	lea    ecx,[eax+0x3]
c0019578:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001957d:	0f b6 c9             	movzx  ecx,cl
c0019580:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c0019586:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0019589:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001958d:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c0019591:	8d 50 04             	lea    edx,[eax+0x4]
c0019594:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001959a:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001959f:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c00195a6:	66 85 f6             	test   si,si
c00195a9:	74 5b                	je     c0019606 <IDE::open(int, int, void*)+0x31e>
c00195ab:	0f b6 d2             	movzx  edx,dl
c00195ae:	83 c0 05             	add    eax,0x5
c00195b1:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00195b4:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c00195b8:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c00195bc:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c00195c2:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00195c7:	eb 3d                	jmp    c0019606 <IDE::open(int, int, void*)+0x31e>
c00195c9:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c00195cf:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c00195d6:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c00195dd:	66 05 06 02          	add    ax,0x206
c00195e1:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00195e8:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c00195ef:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c00195f6:	66 05 06 02          	add    ax,0x206
c00195fa:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c0019601:	e9 e5 fe ff ff       	jmp    c00194eb <IDE::open(int, int, void*)+0x203>
c0019606:	50                   	push   eax
c0019607:	50                   	push   eax
c0019608:	6a 00                	push   0x0
c001960a:	53                   	push   ebx
c001960b:	e8 5e fa ff ff       	call   c001906e <IDE::prepareInterrupt(unsigned char)>
c0019610:	5a                   	pop    edx
c0019611:	59                   	pop    ecx
c0019612:	6a 01                	push   0x1
c0019614:	53                   	push   ebx
c0019615:	e8 54 fa ff ff       	call   c001906e <IDE::prepareInterrupt(unsigned char)>
c001961a:	83 c4 0c             	add    esp,0xc
c001961d:	6a 00                	push   0x0
c001961f:	6a 00                	push   0x0
c0019621:	53                   	push   ebx
c0019622:	e8 7b fc ff ff       	call   c00192a2 <IDE::enableIRQs(unsigned char, bool)>
c0019627:	83 c4 0c             	add    esp,0xc
c001962a:	6a 00                	push   0x0
c001962c:	6a 01                	push   0x1
c001962e:	53                   	push   ebx
c001962f:	e8 6e fc ff ff       	call   c00192a2 <IDE::enableIRQs(unsigned char, bool)>
c0019634:	83 c4 10             	add    esp,0x10
c0019637:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001963e:	74 34                	je     c0019674 <IDE::open(int, int, void*)+0x38c>
c0019640:	83 ec 0c             	sub    esp,0xc
c0019643:	53                   	push   ebx
c0019644:	6a 01                	push   0x1
c0019646:	68 6a 92 01 c0       	push   0xc001926a
c001964b:	6a 0e                	push   0xe
c001964d:	53                   	push   ebx
c001964e:	e8 35 23 ff ff       	call   c000b988 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0019653:	83 c4 14             	add    esp,0x14
c0019656:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001965c:	53                   	push   ebx
c001965d:	6a 01                	push   0x1
c001965f:	68 86 92 01 c0       	push   0xc0019286
c0019664:	6a 0f                	push   0xf
c0019666:	53                   	push   ebx
c0019667:	e8 1c 23 ff ff       	call   c000b988 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001966c:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c0019672:	eb 38                	jmp    c00196ac <IDE::open(int, int, void*)+0x3c4>
c0019674:	83 ec 0c             	sub    esp,0xc
c0019677:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c0019681:	53                   	push   ebx
c0019682:	6a 00                	push   0x0
c0019684:	68 6a 92 01 c0       	push   0xc001926a
c0019689:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001968f:	53                   	push   ebx
c0019690:	e8 f3 22 ff ff       	call   c000b988 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0019695:	83 c4 14             	add    esp,0x14
c0019698:	53                   	push   ebx
c0019699:	6a 00                	push   0x0
c001969b:	68 86 92 01 c0       	push   0xc0019286
c00196a0:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c00196a6:	53                   	push   ebx
c00196a7:	e8 dc 22 ff ff       	call   c000b988 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00196ac:	8b 03                	mov    eax,DWORD PTR [ebx]
c00196ae:	83 c4 20             	add    esp,0x20
c00196b1:	83 ec 0c             	sub    esp,0xc
c00196b4:	53                   	push   ebx
c00196b5:	ff 50 18             	call   DWORD PTR [eax+0x18]
c00196b8:	83 c4 0c             	add    esp,0xc
c00196bb:	6a 07                	push   0x7
c00196bd:	6a 00                	push   0x0
c00196bf:	53                   	push   ebx
c00196c0:	e8 8f fa ff ff       	call   c0019154 <IDE::read(unsigned char, unsigned char)>
c00196c5:	83 c4 0c             	add    esp,0xc
c00196c8:	6a 07                	push   0x7
c00196ca:	6a 01                	push   0x1
c00196cc:	53                   	push   ebx
c00196cd:	e8 82 fa ff ff       	call   c0019154 <IDE::read(unsigned char, unsigned char)>
c00196d2:	83 c4 0c             	add    esp,0xc
c00196d5:	6a 01                	push   0x1
c00196d7:	6a 00                	push   0x0
c00196d9:	53                   	push   ebx
c00196da:	e8 c3 fb ff ff       	call   c00192a2 <IDE::enableIRQs(unsigned char, bool)>
c00196df:	83 c4 0c             	add    esp,0xc
c00196e2:	6a 01                	push   0x1
c00196e4:	6a 01                	push   0x1
c00196e6:	53                   	push   ebx
c00196e7:	e8 b6 fb ff ff       	call   c00192a2 <IDE::enableIRQs(unsigned char, bool)>
c00196ec:	83 c4 2c             	add    esp,0x2c
c00196ef:	31 c0                	xor    eax,eax
c00196f1:	5b                   	pop    ebx
c00196f2:	5e                   	pop    esi
c00196f3:	5f                   	pop    edi
c00196f4:	5d                   	pop    ebp
c00196f5:	c3                   	ret    

c00196f6 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c00196f6:	55                   	push   ebp
c00196f7:	57                   	push   edi
c00196f8:	56                   	push   esi
c00196f9:	53                   	push   ebx
c00196fa:	83 ec 1c             	sub    esp,0x1c
c00196fd:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019701:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0019705:	8d 50 f8             	lea    edx,[eax-0x8]
c0019708:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001970c:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0019710:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0019714:	80 fa 03             	cmp    dl,0x3
c0019717:	77 5d                	ja     c0019776 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c0019719:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001971d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019721:	0f b6 db             	movzx  ebx,bl
c0019724:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c0019727:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c001972b:	83 ca 80             	or     edx,0xffffff80
c001972e:	0f b6 d2             	movzx  edx,dl
c0019731:	52                   	push   edx
c0019732:	6a 0c                	push   0xc
c0019734:	53                   	push   ebx
c0019735:	56                   	push   esi
c0019736:	e8 59 f9 ff ff       	call   c0019094 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001973b:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c0019740:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019744:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0019748:	0f b6 c0             	movzx  eax,al
c001974b:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c001974f:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0019751:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c0019756:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001975a:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001975e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0019762:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001976a:	83 c4 2c             	add    esp,0x2c
c001976d:	5b                   	pop    ebx
c001976e:	5e                   	pop    esi
c001976f:	5f                   	pop    edi
c0019770:	5d                   	pop    ebp
c0019771:	e9 1e f9 ff ff       	jmp    c0019094 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019776:	3c 07                	cmp    al,0x7
c0019778:	77 10                	ja     c001978a <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c001977a:	0f b6 db             	movzx  ebx,bl
c001977d:	0f b6 d0             	movzx  edx,al
c0019780:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c0019788:	eb 2d                	jmp    c00197b7 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001978a:	3c 0d                	cmp    al,0xd
c001978c:	77 13                	ja     c00197a1 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c001978e:	0f b6 db             	movzx  ebx,bl
c0019791:	0f b6 c0             	movzx  eax,al
c0019794:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c001979b:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c001979f:	eb 16                	jmp    c00197b7 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c00197a1:	3c 15                	cmp    al,0x15
c00197a3:	77 14                	ja     c00197b9 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c00197a5:	0f b6 db             	movzx  ebx,bl
c00197a8:	0f b6 c0             	movzx  eax,al
c00197ab:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c00197b3:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c00197b7:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c00197b9:	83 c4 1c             	add    esp,0x1c
c00197bc:	5b                   	pop    ebx
c00197bd:	5e                   	pop    esi
c00197be:	5f                   	pop    edi
c00197bf:	5d                   	pop    ebp
c00197c0:	c3                   	ret    
c00197c1:	90                   	nop

c00197c2 <IDE::detect()>:
c00197c2:	55                   	push   ebp
c00197c3:	57                   	push   edi
c00197c4:	56                   	push   esi
c00197c5:	53                   	push   ebx
c00197c6:	81 ec 1c 02 00 00    	sub    esp,0x21c
c00197cc:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c00197d3:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c00197da:	0f 85 97 02 00 00    	jne    c0019a77 <IDE::detect()+0x2b5>
c00197e0:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c00197e7:	31 f6                	xor    esi,esi
c00197e9:	31 ed                	xor    ebp,ebp
c00197eb:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00197f3:	89 e8                	mov    eax,ebp
c00197f5:	c1 e0 06             	shl    eax,0x6
c00197f8:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c0019800:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0019804:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0019808:	c1 e0 04             	shl    eax,0x4
c001980b:	83 c8 a0             	or     eax,0xffffffa0
c001980e:	0f b6 c0             	movzx  eax,al
c0019811:	50                   	push   eax
c0019812:	6a 06                	push   0x6
c0019814:	56                   	push   esi
c0019815:	53                   	push   ebx
c0019816:	e8 79 f8 ff ff       	call   c0019094 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001981b:	83 c4 0c             	add    esp,0xc
c001981e:	6a 0c                	push   0xc
c0019820:	56                   	push   esi
c0019821:	53                   	push   ebx
c0019822:	e8 2d f9 ff ff       	call   c0019154 <IDE::read(unsigned char, unsigned char)>
c0019827:	83 c4 0c             	add    esp,0xc
c001982a:	6a 0c                	push   0xc
c001982c:	56                   	push   esi
c001982d:	53                   	push   ebx
c001982e:	e8 21 f9 ff ff       	call   c0019154 <IDE::read(unsigned char, unsigned char)>
c0019833:	83 c4 0c             	add    esp,0xc
c0019836:	6a 0c                	push   0xc
c0019838:	56                   	push   esi
c0019839:	53                   	push   ebx
c001983a:	e8 15 f9 ff ff       	call   c0019154 <IDE::read(unsigned char, unsigned char)>
c001983f:	83 c4 0c             	add    esp,0xc
c0019842:	6a 0c                	push   0xc
c0019844:	56                   	push   esi
c0019845:	53                   	push   ebx
c0019846:	e8 09 f9 ff ff       	call   c0019154 <IDE::read(unsigned char, unsigned char)>
c001984b:	68 ec 00 00 00       	push   0xec
c0019850:	6a 07                	push   0x7
c0019852:	56                   	push   esi
c0019853:	53                   	push   ebx
c0019854:	e8 3b f8 ff ff       	call   c0019094 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019859:	83 c4 1c             	add    esp,0x1c
c001985c:	6a 0c                	push   0xc
c001985e:	56                   	push   esi
c001985f:	53                   	push   ebx
c0019860:	e8 ef f8 ff ff       	call   c0019154 <IDE::read(unsigned char, unsigned char)>
c0019865:	83 c4 0c             	add    esp,0xc
c0019868:	6a 0c                	push   0xc
c001986a:	56                   	push   esi
c001986b:	53                   	push   ebx
c001986c:	e8 e3 f8 ff ff       	call   c0019154 <IDE::read(unsigned char, unsigned char)>
c0019871:	83 c4 0c             	add    esp,0xc
c0019874:	6a 0c                	push   0xc
c0019876:	56                   	push   esi
c0019877:	53                   	push   ebx
c0019878:	e8 d7 f8 ff ff       	call   c0019154 <IDE::read(unsigned char, unsigned char)>
c001987d:	83 c4 0c             	add    esp,0xc
c0019880:	6a 0c                	push   0xc
c0019882:	56                   	push   esi
c0019883:	53                   	push   ebx
c0019884:	e8 cb f8 ff ff       	call   c0019154 <IDE::read(unsigned char, unsigned char)>
c0019889:	83 c4 0c             	add    esp,0xc
c001988c:	6a 0c                	push   0xc
c001988e:	56                   	push   esi
c001988f:	53                   	push   ebx
c0019890:	e8 bf f8 ff ff       	call   c0019154 <IDE::read(unsigned char, unsigned char)>
c0019895:	83 c4 10             	add    esp,0x10
c0019898:	84 c0                	test   al,al
c001989a:	0f 84 5f 01 00 00    	je     c00199ff <IDE::detect()+0x23d>
c00198a0:	31 ff                	xor    edi,edi
c00198a2:	50                   	push   eax
c00198a3:	6a 0c                	push   0xc
c00198a5:	56                   	push   esi
c00198a6:	53                   	push   ebx
c00198a7:	e8 a8 f8 ff ff       	call   c0019154 <IDE::read(unsigned char, unsigned char)>
c00198ac:	83 c4 10             	add    esp,0x10
c00198af:	a8 01                	test   al,0x1
c00198b1:	0f 85 69 01 00 00    	jne    c0019a20 <IDE::detect()+0x25e>
c00198b7:	84 c0                	test   al,al
c00198b9:	78 04                	js     c00198bf <IDE::detect()+0xfd>
c00198bb:	a8 08                	test   al,0x8
c00198bd:	75 23                	jne    c00198e2 <IDE::detect()+0x120>
c00198bf:	47                   	inc    edi
c00198c0:	81 ff 17 01 00 00    	cmp    edi,0x117
c00198c6:	7e da                	jle    c00198a2 <IDE::detect()+0xe0>
c00198c8:	83 ec 0c             	sub    esp,0xc
c00198cb:	6a 32                	push   0x32
c00198cd:	e8 f2 a1 ff ff       	call   c0013ac4 <milliTenthSleep(unsigned int)>
c00198d2:	83 c4 10             	add    esp,0x10
c00198d5:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c00198db:	75 c5                	jne    c00198a2 <IDE::detect()+0xe0>
c00198dd:	e9 3e 01 00 00       	jmp    c0019a20 <IDE::detect()+0x25e>
c00198e2:	31 c9                	xor    ecx,ecx
c00198e4:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c00198e8:	8d 7c 24 10          	lea    edi,[esp+0x10]
c00198ec:	83 ec 0c             	sub    esp,0xc
c00198ef:	68 80 00 00 00       	push   0x80
c00198f4:	57                   	push   edi
c00198f5:	6a 00                	push   0x0
c00198f7:	56                   	push   esi
c00198f8:	53                   	push   ebx
c00198f9:	e8 f8 fd ff ff       	call   c00196f6 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c00198fe:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c0019903:	89 e8                	mov    eax,ebp
c0019905:	89 d1                	mov    ecx,edx
c0019907:	c1 e0 06             	shl    eax,0x6
c001990a:	01 d8                	add    eax,ebx
c001990c:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c0019913:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c001991a:	89 f2                	mov    edx,esi
c001991c:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c0019922:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c0019926:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c001992c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0019930:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c0019937:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c001993f:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c0019946:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c001994e:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c0019954:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c001995b:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c0019961:	8d 54 24 58          	lea    edx,[esp+0x58]
c0019965:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0019969:	83 c4 20             	add    esp,0x20
c001996c:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c001996f:	83 c0 02             	add    eax,0x2
c0019972:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c0019978:	83 c7 02             	add    edi,0x2
c001997b:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c001997e:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c0019984:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0019988:	75 e2                	jne    c001996c <IDE::detect()+0x1aa>
c001998a:	89 e8                	mov    eax,ebp
c001998c:	c1 e0 06             	shl    eax,0x6
c001998f:	01 d8                	add    eax,ebx
c0019991:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c0019997:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001999e:	66 c1 ea 09          	shr    dx,0x9
c00199a2:	83 e2 01             	and    edx,0x1
c00199a5:	84 c9                	test   cl,cl
c00199a7:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c00199ad:	75 22                	jne    c00199d1 <IDE::detect()+0x20f>
c00199af:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c00199b6:	74 46                	je     c00199fe <IDE::detect()+0x23c>
c00199b8:	83 ec 0c             	sub    esp,0xc
c00199bb:	68 7c 01 00 00       	push   0x17c
c00199c0:	e8 f4 dd fe ff       	call   c00077b9 <malloc>
c00199c5:	89 c7                	mov    edi,eax
c00199c7:	89 04 24             	mov    DWORD PTR [esp],eax
c00199ca:	e8 11 05 00 00       	call   c0019ee0 <ATA::ATA()>
c00199cf:	eb 17                	jmp    c00199e8 <IDE::detect()+0x226>
c00199d1:	83 ec 0c             	sub    esp,0xc
c00199d4:	68 84 01 00 00       	push   0x184
c00199d9:	e8 db dd fe ff       	call   c00077b9 <malloc>
c00199de:	89 c7                	mov    edi,eax
c00199e0:	89 04 24             	mov    DWORD PTR [esp],eax
c00199e3:	e8 1e 0e 00 00       	call   c001a806 <ATAPI::ATAPI()>
c00199e8:	5a                   	pop    edx
c00199e9:	59                   	pop    ecx
c00199ea:	57                   	push   edi
c00199eb:	53                   	push   ebx
c00199ec:	e8 eb 1f ff ff       	call   c000b9dc <Device::addChild(Device*)>
c00199f1:	8b 07                	mov    eax,DWORD PTR [edi]
c00199f3:	53                   	push   ebx
c00199f4:	55                   	push   ebp
c00199f5:	6a 00                	push   0x0
c00199f7:	57                   	push   edi
c00199f8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00199fb:	83 c4 20             	add    esp,0x20
c00199fe:	45                   	inc    ebp
c00199ff:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0019a04:	74 0d                	je     c0019a13 <IDE::detect()+0x251>
c0019a06:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0019a0e:	e9 e0 fd ff ff       	jmp    c00197f3 <IDE::detect()+0x31>
c0019a13:	4e                   	dec    esi
c0019a14:	74 61                	je     c0019a77 <IDE::detect()+0x2b5>
c0019a16:	be 01 00 00 00       	mov    esi,0x1
c0019a1b:	e9 cb fd ff ff       	jmp    c00197eb <IDE::detect()+0x29>
c0019a20:	50                   	push   eax
c0019a21:	6a 04                	push   0x4
c0019a23:	56                   	push   esi
c0019a24:	53                   	push   ebx
c0019a25:	e8 2a f7 ff ff       	call   c0019154 <IDE::read(unsigned char, unsigned char)>
c0019a2a:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0019a2e:	83 c4 0c             	add    esp,0xc
c0019a31:	6a 05                	push   0x5
c0019a33:	56                   	push   esi
c0019a34:	53                   	push   ebx
c0019a35:	e8 1a f7 ff ff       	call   c0019154 <IDE::read(unsigned char, unsigned char)>
c0019a3a:	83 c4 10             	add    esp,0x10
c0019a3d:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0019a41:	80 fa 14             	cmp    dl,0x14
c0019a44:	75 04                	jne    c0019a4a <IDE::detect()+0x288>
c0019a46:	3c eb                	cmp    al,0xeb
c0019a48:	eb 07                	jmp    c0019a51 <IDE::detect()+0x28f>
c0019a4a:	3c 96                	cmp    al,0x96
c0019a4c:	75 b1                	jne    c00199ff <IDE::detect()+0x23d>
c0019a4e:	80 fa 69             	cmp    dl,0x69
c0019a51:	75 ac                	jne    c00199ff <IDE::detect()+0x23d>
c0019a53:	68 a1 00 00 00       	push   0xa1
c0019a58:	6a 07                	push   0x7
c0019a5a:	56                   	push   esi
c0019a5b:	53                   	push   ebx
c0019a5c:	e8 33 f6 ff ff       	call   c0019094 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019a61:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c0019a68:	e8 57 a0 ff ff       	call   c0013ac4 <milliTenthSleep(unsigned int)>
c0019a6d:	83 c4 10             	add    esp,0x10
c0019a70:	b1 01                	mov    cl,0x1
c0019a72:	e9 6d fe ff ff       	jmp    c00198e4 <IDE::detect()+0x122>
c0019a77:	81 c4 1c 02 00 00    	add    esp,0x21c
c0019a7d:	5b                   	pop    ebx
c0019a7e:	5e                   	pop    esi
c0019a7f:	5f                   	pop    edi
c0019a80:	5d                   	pop    ebp
c0019a81:	c3                   	ret    

c0019a82 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c0019a82:	55                   	push   ebp
c0019a83:	57                   	push   edi
c0019a84:	56                   	push   esi
c0019a85:	53                   	push   ebx
c0019a86:	83 ec 1c             	sub    esp,0x1c
c0019a89:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0019a8d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0019a91:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0019a95:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0019a99:	88 c3                	mov    bl,al
c0019a9b:	84 c0                	test   al,al
c0019a9d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019aa1:	0f 84 81 00 00 00    	je     c0019b28 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019aa7:	83 ec 0c             	sub    esp,0xc
c0019aaa:	68 f3 fa 01 c0       	push   0xc001faf3
c0019aaf:	e8 9e 0a ff ff       	call   c000a552 <Dbg::kprintf(char const*, ...)>
c0019ab4:	83 c4 10             	add    esp,0x10
c0019ab7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019abb:	3c 01                	cmp    al,0x1
c0019abd:	74 63                	je     c0019b22 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa0>
c0019abf:	3c 02                	cmp    al,0x2
c0019ac1:	75 53                	jne    c0019b16 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c0019ac3:	01 f6                	add    esi,esi
c0019ac5:	09 ee                	or     esi,ebp
c0019ac7:	50                   	push   eax
c0019ac8:	89 f0                	mov    eax,esi
c0019aca:	6a 01                	push   0x1
c0019acc:	0f b6 f0             	movzx  esi,al
c0019acf:	c1 e6 06             	shl    esi,0x6
c0019ad2:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c0019ada:	50                   	push   eax
c0019adb:	57                   	push   edi
c0019adc:	e8 73 f6 ff ff       	call   c0019154 <IDE::read(unsigned char, unsigned char)>
c0019ae1:	83 c4 10             	add    esp,0x10
c0019ae4:	a8 01                	test   al,0x1
c0019ae6:	74 02                	je     c0019aea <IDE::printError(unsigned char, unsigned char, unsigned char)+0x68>
c0019ae8:	b3 07                	mov    bl,0x7
c0019aea:	a8 02                	test   al,0x2
c0019aec:	74 02                	je     c0019af0 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x6e>
c0019aee:	b3 03                	mov    bl,0x3
c0019af0:	a8 04                	test   al,0x4
c0019af2:	74 02                	je     c0019af6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x74>
c0019af4:	b3 14                	mov    bl,0x14
c0019af6:	a8 08                	test   al,0x8
c0019af8:	74 02                	je     c0019afc <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7a>
c0019afa:	b3 03                	mov    bl,0x3
c0019afc:	a8 10                	test   al,0x10
c0019afe:	74 02                	je     c0019b02 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x80>
c0019b00:	b3 15                	mov    bl,0x15
c0019b02:	a8 20                	test   al,0x20
c0019b04:	74 02                	je     c0019b08 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x86>
c0019b06:	b3 03                	mov    bl,0x3
c0019b08:	a8 40                	test   al,0x40
c0019b0a:	74 02                	je     c0019b0e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8c>
c0019b0c:	b3 16                	mov    bl,0x16
c0019b0e:	84 c0                	test   al,al
c0019b10:	79 16                	jns    c0019b28 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019b12:	b3 0d                	mov    bl,0xd
c0019b14:	eb 12                	jmp    c0019b28 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019b16:	3c 03                	cmp    al,0x3
c0019b18:	74 0c                	je     c0019b26 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa4>
c0019b1a:	3c 04                	cmp    al,0x4
c0019b1c:	75 0a                	jne    c0019b28 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019b1e:	b3 08                	mov    bl,0x8
c0019b20:	eb 06                	jmp    c0019b28 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019b22:	b3 13                	mov    bl,0x13
c0019b24:	eb 02                	jmp    c0019b28 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019b26:	b3 17                	mov    bl,0x17
c0019b28:	83 c4 1c             	add    esp,0x1c
c0019b2b:	88 d8                	mov    al,bl
c0019b2d:	5b                   	pop    ebx
c0019b2e:	5e                   	pop    esi
c0019b2f:	5f                   	pop    edi
c0019b30:	5d                   	pop    ebp
c0019b31:	c3                   	ret    

c0019b32 <IDE::polling(unsigned char, unsigned int)>:
c0019b32:	55                   	push   ebp
c0019b33:	bd 04 00 00 00       	mov    ebp,0x4
c0019b38:	57                   	push   edi
c0019b39:	56                   	push   esi
c0019b3a:	53                   	push   ebx
c0019b3b:	83 ec 0c             	sub    esp,0xc
c0019b3e:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0019b42:	8a 5c 24 24          	mov    bl,BYTE PTR [esp+0x24]
c0019b46:	0f b6 f3             	movzx  esi,bl
c0019b49:	52                   	push   edx
c0019b4a:	6a 0c                	push   0xc
c0019b4c:	56                   	push   esi
c0019b4d:	57                   	push   edi
c0019b4e:	e8 01 f6 ff ff       	call   c0019154 <IDE::read(unsigned char, unsigned char)>
c0019b53:	83 c4 10             	add    esp,0x10
c0019b56:	4d                   	dec    ebp
c0019b57:	75 ed                	jne    c0019b46 <IDE::polling(unsigned char, unsigned int)+0x14>
c0019b59:	bb a0 86 01 00       	mov    ebx,0x186a0
c0019b5e:	50                   	push   eax
c0019b5f:	6a 0c                	push   0xc
c0019b61:	56                   	push   esi
c0019b62:	57                   	push   edi
c0019b63:	e8 ec f5 ff ff       	call   c0019154 <IDE::read(unsigned char, unsigned char)>
c0019b68:	83 c4 10             	add    esp,0x10
c0019b6b:	a8 01                	test   al,0x1
c0019b6d:	75 17                	jne    c0019b86 <IDE::polling(unsigned char, unsigned int)+0x54>
c0019b6f:	a8 20                	test   al,0x20
c0019b71:	75 0f                	jne    c0019b82 <IDE::polling(unsigned char, unsigned int)+0x50>
c0019b73:	4b                   	dec    ebx
c0019b74:	74 10                	je     c0019b86 <IDE::polling(unsigned char, unsigned int)+0x54>
c0019b76:	84 c0                	test   al,al
c0019b78:	78 e4                	js     c0019b5e <IDE::polling(unsigned char, unsigned int)+0x2c>
c0019b7a:	a8 08                	test   al,0x8
c0019b7c:	74 e0                	je     c0019b5e <IDE::polling(unsigned char, unsigned int)+0x2c>
c0019b7e:	31 c0                	xor    eax,eax
c0019b80:	eb 06                	jmp    c0019b88 <IDE::polling(unsigned char, unsigned int)+0x56>
c0019b82:	b0 01                	mov    al,0x1
c0019b84:	eb 02                	jmp    c0019b88 <IDE::polling(unsigned char, unsigned int)+0x56>
c0019b86:	b0 02                	mov    al,0x2
c0019b88:	83 c4 0c             	add    esp,0xc
c0019b8b:	5b                   	pop    ebx
c0019b8c:	5e                   	pop    esi
c0019b8d:	5f                   	pop    edi
c0019b8e:	5d                   	pop    ebp
c0019b8f:	c3                   	ret    

c0019b90 <SATABus::close(int, int, void*)>:
c0019b90:	31 c0                	xor    eax,eax
c0019b92:	c3                   	ret    
c0019b93:	90                   	nop

c0019b94 <SATABus::detect()>:
c0019b94:	c3                   	ret    
c0019b95:	90                   	nop

c0019b96 <SATABus::SATABus()>:
c0019b96:	83 ec 0c             	sub    esp,0xc
c0019b99:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019b9d:	83 ec 08             	sub    esp,0x8
c0019ba0:	68 2c fb 01 c0       	push   0xc001fb2c
c0019ba5:	50                   	push   eax
c0019ba6:	e8 75 21 ff ff       	call   c000bd20 <HardDiskController::HardDiskController(char const*)>
c0019bab:	83 c4 10             	add    esp,0x10
c0019bae:	ba 58 fb 01 c0       	mov    edx,0xc001fb58
c0019bb3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019bb7:	89 10                	mov    DWORD PTR [eax],edx
c0019bb9:	83 ec 0c             	sub    esp,0xc
c0019bbc:	6a 50                	push   0x50
c0019bbe:	e8 90 df fe ff       	call   c0007b53 <Phys::allocateContiguousPages(int)>
c0019bc3:	83 c4 10             	add    esp,0x10
c0019bc6:	89 c2                	mov    edx,eax
c0019bc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019bcc:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0019bd2:	83 ec 0c             	sub    esp,0xc
c0019bd5:	6a 50                	push   0x50
c0019bd7:	e8 b9 f6 fe ff       	call   c0009295 <Virt::allocateKernelVirtualPages(int)>
c0019bdc:	83 c4 10             	add    esp,0x10
c0019bdf:	89 c2                	mov    edx,eax
c0019be1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019be5:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0019beb:	a1 b0 2f 02 c0       	mov    eax,ds:0xc0022fb0
c0019bf0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019bf4:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c0019bfa:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019bfe:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0019c04:	83 ec 0c             	sub    esp,0xc
c0019c07:	6a 03                	push   0x3
c0019c09:	6a 50                	push   0x50
c0019c0b:	51                   	push   ecx
c0019c0c:	52                   	push   edx
c0019c0d:	50                   	push   eax
c0019c0e:	e8 3f 00 ff ff       	call   c0009c52 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0019c13:	83 c4 20             	add    esp,0x20
c0019c16:	90                   	nop
c0019c17:	83 c4 0c             	add    esp,0xc
c0019c1a:	c3                   	ret    
c0019c1b:	90                   	nop

c0019c1c <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c0019c1c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019c20:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0019c23:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0019c26:	09 c2                	or     edx,eax
c0019c28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019c2c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0019c32:	8b 08                	mov    ecx,DWORD PTR [eax]
c0019c34:	31 c0                	xor    eax,eax
c0019c36:	c1 e9 08             	shr    ecx,0x8
c0019c39:	83 e1 0f             	and    ecx,0xf
c0019c3c:	39 c8                	cmp    eax,ecx
c0019c3e:	74 0a                	je     c0019c4a <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c0019c40:	f6 c2 01             	test   dl,0x1
c0019c43:	74 08                	je     c0019c4d <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c0019c45:	d1 ea                	shr    edx,1
c0019c47:	40                   	inc    eax
c0019c48:	eb f2                	jmp    c0019c3c <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c0019c4a:	83 c8 ff             	or     eax,0xffffffff
c0019c4d:	c3                   	ret    

c0019c4e <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c0019c4e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0019c52:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0019c55:	89 c2                	mov    edx,eax
c0019c57:	c1 ea 08             	shr    edx,0x8
c0019c5a:	83 e2 0f             	and    edx,0xf
c0019c5d:	fe ca                	dec    dl
c0019c5f:	75 31                	jne    c0019c92 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0019c61:	83 e0 0f             	and    eax,0xf
c0019c64:	3c 03                	cmp    al,0x3
c0019c66:	75 2a                	jne    c0019c92 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0019c68:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c0019c6b:	b8 02 00 00 00       	mov    eax,0x2
c0019c70:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c0019c76:	74 1c                	je     c0019c94 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0019c78:	b8 04 00 00 00       	mov    eax,0x4
c0019c7d:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c0019c83:	74 0f                	je     c0019c94 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0019c85:	31 c0                	xor    eax,eax
c0019c87:	83 fa 03             	cmp    edx,0x3
c0019c8a:	0f 94 c0             	sete   al
c0019c8d:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c0019c91:	c3                   	ret    
c0019c92:	31 c0                	xor    eax,eax
c0019c94:	c3                   	ret    
c0019c95:	90                   	nop

c0019c96 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c0019c96:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019c9a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019c9d:	0f ba e2 0f          	bt     edx,0xf
c0019ca1:	72 f7                	jb     c0019c9a <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c0019ca3:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019ca6:	83 ca 10             	or     edx,0x10
c0019ca9:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0019cac:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019caf:	83 ca 01             	or     edx,0x1
c0019cb2:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0019cb5:	c3                   	ret    

c0019cb6 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c0019cb6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019cba:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019cbd:	83 e2 fe             	and    edx,0xfffffffe
c0019cc0:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0019cc3:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019cc6:	83 e2 ef             	and    edx,0xffffffef
c0019cc9:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0019ccc:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019ccf:	0f ba e2 0e          	bt     edx,0xe
c0019cd3:	72 f7                	jb     c0019ccc <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0019cd5:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019cd8:	0f ba e2 0f          	bt     edx,0xf
c0019cdc:	72 ee                	jb     c0019ccc <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0019cde:	c3                   	ret    
c0019cdf:	90                   	nop

c0019ce0 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c0019ce0:	55                   	push   ebp
c0019ce1:	57                   	push   edi
c0019ce2:	56                   	push   esi
c0019ce3:	53                   	push   ebx
c0019ce4:	83 ec 1c             	sub    esp,0x1c
c0019ce7:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0019ceb:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0019cef:	53                   	push   ebx
c0019cf0:	56                   	push   esi
c0019cf1:	e8 c0 ff ff ff       	call   c0019cb6 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c0019cf6:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0019cfa:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c0019d00:	83 ec 0c             	sub    esp,0xc
c0019d03:	c1 e5 0a             	shl    ebp,0xa
c0019d06:	01 e8                	add    eax,ebp
c0019d08:	89 03                	mov    DWORD PTR [ebx],eax
c0019d0a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019d0c:	68 00 04 00 00       	push   0x400
c0019d11:	6a 00                	push   0x0
c0019d13:	50                   	push   eax
c0019d14:	e8 b7 67 fe ff       	call   c00004d0 <memset>
c0019d19:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c0019d1f:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0019d23:	01 e8                	add    eax,ebp
c0019d25:	83 c4 1c             	add    esp,0x1c
c0019d28:	89 03                	mov    DWORD PTR [ebx],eax
c0019d2a:	c1 e2 08             	shl    edx,0x8
c0019d2d:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0019d34:	8d ba 00 80 00 00    	lea    edi,[edx+0x8000]
c0019d3a:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c0019d40:	01 f8                	add    eax,edi
c0019d42:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0019d45:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0019d48:	68 00 01 00 00       	push   0x100
c0019d4d:	6a 00                	push   0x0
c0019d4f:	50                   	push   eax
c0019d50:	e8 7b 67 fe ff       	call   c00004d0 <memset>
c0019d55:	8b 96 5c 01 00 00    	mov    edx,DWORD PTR [esi+0x15c]
c0019d5b:	01 fa                	add    edx,edi
c0019d5d:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0019d61:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0019d64:	c1 e7 0d             	shl    edi,0xd
c0019d67:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0019d6e:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c0019d74:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c0019d7a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019d7e:	31 ff                	xor    edi,edi
c0019d80:	83 c4 10             	add    esp,0x10
c0019d83:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c0019d89:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019d8d:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0019d93:	83 c5 20             	add    ebp,0x20
c0019d96:	01 f8                	add    eax,edi
c0019d98:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0019d9b:	52                   	push   edx
c0019d9c:	68 00 01 00 00       	push   0x100
c0019da1:	6a 00                	push   0x0
c0019da3:	50                   	push   eax
c0019da4:	e8 27 67 fe ff       	call   c00004d0 <memset>
c0019da9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019dad:	83 c4 10             	add    esp,0x10
c0019db0:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c0019db6:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0019dbd:	01 f8                	add    eax,edi
c0019dbf:	81 c7 00 01 00 00    	add    edi,0x100
c0019dc5:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0019dc8:	81 ff 00 20 00 00    	cmp    edi,0x2000
c0019dce:	75 b3                	jne    c0019d83 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa3>
c0019dd0:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c0019dd7:	50                   	push   eax
c0019dd8:	50                   	push   eax
c0019dd9:	53                   	push   ebx
c0019dda:	56                   	push   esi
c0019ddb:	e8 b6 fe ff ff       	call   c0019c96 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c0019de0:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c0019de7:	83 c4 2c             	add    esp,0x2c
c0019dea:	5b                   	pop    ebx
c0019deb:	5e                   	pop    esi
c0019dec:	5f                   	pop    edi
c0019ded:	5d                   	pop    ebp
c0019dee:	c3                   	ret    
c0019def:	90                   	nop

c0019df0 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c0019df0:	55                   	push   ebp
c0019df1:	57                   	push   edi
c0019df2:	56                   	push   esi
c0019df3:	53                   	push   ebx
c0019df4:	31 db                	xor    ebx,ebx
c0019df6:	83 ec 0c             	sub    esp,0xc
c0019df9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0019dfd:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0019e01:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c0019e04:	f7 c7 01 00 00 00    	test   edi,0x1
c0019e0a:	74 7a                	je     c0019e86 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c0019e0c:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0019e10:	89 d8                	mov    eax,ebx
c0019e12:	c1 e0 07             	shl    eax,0x7
c0019e15:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c0019e1c:	55                   	push   ebp
c0019e1d:	56                   	push   esi
c0019e1e:	e8 2b fe ff ff       	call   c0019c4e <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c0019e23:	5a                   	pop    edx
c0019e24:	83 f8 01             	cmp    eax,0x1
c0019e27:	59                   	pop    ecx
c0019e28:	75 21                	jne    c0019e4b <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c0019e2a:	50                   	push   eax
c0019e2b:	53                   	push   ebx
c0019e2c:	55                   	push   ebp
c0019e2d:	56                   	push   esi
c0019e2e:	e8 ad fe ff ff       	call   c0019ce0 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0019e33:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0019e3a:	e8 7a d9 fe ff       	call   c00077b9 <malloc>
c0019e3f:	89 c5                	mov    ebp,eax
c0019e41:	89 04 24             	mov    DWORD PTR [esp],eax
c0019e44:	e8 71 10 00 00       	call   c001aeba <SATA::SATA()>
c0019e49:	eb 24                	jmp    c0019e6f <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c0019e4b:	83 f8 04             	cmp    eax,0x4
c0019e4e:	75 36                	jne    c0019e86 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c0019e50:	51                   	push   ecx
c0019e51:	53                   	push   ebx
c0019e52:	55                   	push   ebp
c0019e53:	56                   	push   esi
c0019e54:	e8 87 fe ff ff       	call   c0019ce0 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0019e59:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c0019e60:	e8 54 d9 fe ff       	call   c00077b9 <malloc>
c0019e65:	89 c5                	mov    ebp,eax
c0019e67:	89 04 24             	mov    DWORD PTR [esp],eax
c0019e6a:	e8 a5 17 00 00       	call   c001b614 <SATAPI::SATAPI()>
c0019e6f:	58                   	pop    eax
c0019e70:	5a                   	pop    edx
c0019e71:	55                   	push   ebp
c0019e72:	56                   	push   esi
c0019e73:	e8 64 1b ff ff       	call   c000b9dc <Device::addChild(Device*)>
c0019e78:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0019e7b:	56                   	push   esi
c0019e7c:	6a 00                	push   0x0
c0019e7e:	53                   	push   ebx
c0019e7f:	55                   	push   ebp
c0019e80:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0019e83:	83 c4 20             	add    esp,0x20
c0019e86:	d1 ef                	shr    edi,1
c0019e88:	43                   	inc    ebx
c0019e89:	83 fb 20             	cmp    ebx,0x20
c0019e8c:	0f 85 72 ff ff ff    	jne    c0019e04 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c0019e92:	83 c4 0c             	add    esp,0xc
c0019e95:	5b                   	pop    ebx
c0019e96:	5e                   	pop    esi
c0019e97:	5f                   	pop    edi
c0019e98:	5d                   	pop    ebp
c0019e99:	c3                   	ret    

c0019e9a <SATABus::open(int, int, void*)>:
c0019e9a:	83 ec 14             	sub    esp,0x14
c0019e9d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019ea1:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c0019ea7:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0019ead:	52                   	push   edx
c0019eae:	50                   	push   eax
c0019eaf:	e8 3c ff ff ff       	call   c0019df0 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c0019eb4:	31 c0                	xor    eax,eax
c0019eb6:	83 c4 1c             	add    esp,0x1c
c0019eb9:	c3                   	ret    

c0019eba <ATA::close(int, int, void*)>:
c0019eba:	83 ec 0c             	sub    esp,0xc
c0019ebd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019ec1:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0019ec7:	85 c0                	test   eax,eax
c0019ec9:	74 0c                	je     c0019ed7 <ATA::close(int, int, void*)+0x1d>
c0019ecb:	83 ec 0c             	sub    esp,0xc
c0019ece:	8b 10                	mov    edx,DWORD PTR [eax]
c0019ed0:	50                   	push   eax
c0019ed1:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0019ed4:	83 c4 10             	add    esp,0x10
c0019ed7:	31 c0                	xor    eax,eax
c0019ed9:	83 c4 0c             	add    esp,0xc
c0019edc:	c3                   	ret    
c0019edd:	90                   	nop

c0019ede <ATA::powerSaving(PowerSavingLevel)>:
c0019ede:	c3                   	ret    
c0019edf:	90                   	nop

c0019ee0 <ATA::ATA()>:
c0019ee0:	83 ec 0c             	sub    esp,0xc
c0019ee3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019ee7:	83 ec 04             	sub    esp,0x4
c0019eea:	68 00 02 00 00       	push   0x200
c0019eef:	68 25 fc 01 c0       	push   0xc001fc25
c0019ef4:	50                   	push   eax
c0019ef5:	e8 b0 1e ff ff       	call   c000bdaa <PhysicalDisk::PhysicalDisk(char const*, int)>
c0019efa:	83 c4 10             	add    esp,0x10
c0019efd:	ba 98 fb 01 c0       	mov    edx,0xc001fb98
c0019f02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019f06:	89 10                	mov    DWORD PTR [eax],edx
c0019f08:	90                   	nop
c0019f09:	83 c4 0c             	add    esp,0xc
c0019f0c:	c3                   	ret    
c0019f0d:	90                   	nop

c0019f0e <ATA::flush(bool)>:
c0019f0e:	53                   	push   ebx
c0019f0f:	83 ec 08             	sub    esp,0x8
c0019f12:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c0019f17:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019f1b:	19 c0                	sbb    eax,eax
c0019f1d:	83 e0 fd             	and    eax,0xfffffffd
c0019f20:	05 ea 00 00 00       	add    eax,0xea
c0019f25:	50                   	push   eax
c0019f26:	6a 07                	push   0x7
c0019f28:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019f2f:	50                   	push   eax
c0019f30:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019f36:	e8 59 f1 ff ff       	call   c0019094 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019f3b:	83 c4 0c             	add    esp,0xc
c0019f3e:	6a 00                	push   0x0
c0019f40:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019f47:	50                   	push   eax
c0019f48:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019f4e:	e8 df fb ff ff       	call   c0019b32 <IDE::polling(unsigned char, unsigned int)>
c0019f53:	83 c4 18             	add    esp,0x18
c0019f56:	5b                   	pop    ebx
c0019f57:	c3                   	ret    

c0019f58 <ATA::readyForCommand()>:
c0019f58:	56                   	push   esi
c0019f59:	53                   	push   ebx
c0019f5a:	53                   	push   ebx
c0019f5b:	31 db                	xor    ebx,ebx
c0019f5d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019f61:	51                   	push   ecx
c0019f62:	6a 0c                	push   0xc
c0019f64:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0019f6b:	50                   	push   eax
c0019f6c:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0019f72:	e8 dd f1 ff ff       	call   c0019154 <IDE::read(unsigned char, unsigned char)>
c0019f77:	83 c4 10             	add    esp,0x10
c0019f7a:	a8 88                	test   al,0x88
c0019f7c:	74 1f                	je     c0019f9d <ATA::readyForCommand()+0x45>
c0019f7e:	43                   	inc    ebx
c0019f7f:	83 fb 63             	cmp    ebx,0x63
c0019f82:	7e dd                	jle    c0019f61 <ATA::readyForCommand()+0x9>
c0019f84:	83 ec 0c             	sub    esp,0xc
c0019f87:	6a 0a                	push   0xa
c0019f89:	e8 36 9b ff ff       	call   c0013ac4 <milliTenthSleep(unsigned int)>
c0019f8e:	83 c4 10             	add    esp,0x10
c0019f91:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0019f97:	75 c8                	jne    c0019f61 <ATA::readyForCommand()+0x9>
c0019f99:	31 c0                	xor    eax,eax
c0019f9b:	eb 02                	jmp    c0019f9f <ATA::readyForCommand()+0x47>
c0019f9d:	b0 01                	mov    al,0x1
c0019f9f:	5a                   	pop    edx
c0019fa0:	5b                   	pop    ebx
c0019fa1:	5e                   	pop    esi
c0019fa2:	c3                   	ret    
c0019fa3:	90                   	nop

c0019fa4 <ATA::access(unsigned long long, int, void*, bool)>:
c0019fa4:	55                   	push   ebp
c0019fa5:	57                   	push   edi
c0019fa6:	56                   	push   esi
c0019fa7:	53                   	push   ebx
c0019fa8:	83 ec 2c             	sub    esp,0x2c
c0019fab:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0019faf:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0019fb3:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0019fb7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019fbb:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0019fbf:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0019fc3:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0019fc7:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0019fcd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019fd1:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0019fd7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0019fdb:	c1 e0 06             	shl    eax,0x6
c0019fde:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c0019fe6:	74 5d                	je     c001a045 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c0019fe8:	89 fa                	mov    edx,edi
c0019fea:	89 f0                	mov    eax,esi
c0019fec:	0f ac d0 1c          	shrd   eax,edx,0x1c
c0019ff0:	c1 ea 1c             	shr    edx,0x1c
c0019ff3:	89 d1                	mov    ecx,edx
c0019ff5:	09 c1                	or     ecx,eax
c0019ff7:	74 25                	je     c001a01e <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c0019ff9:	31 ed                	xor    ebp,ebp
c0019ffb:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001a002:	89 fa                	mov    edx,edi
c001a004:	89 f0                	mov    eax,esi
c001a006:	0f ad d0             	shrd   eax,edx,cl
c001a009:	d3 ea                	shr    edx,cl
c001a00b:	f6 c1 20             	test   cl,0x20
c001a00e:	74 02                	je     c001a012 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c001a010:	89 d0                	mov    eax,edx
c001a012:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001a016:	45                   	inc    ebp
c001a017:	83 fd 06             	cmp    ebp,0x6
c001a01a:	75 df                	jne    c0019ffb <ATA::access(unsigned long long, int, void*, bool)+0x57>
c001a01c:	eb 76                	jmp    c001a094 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c001a01e:	89 f0                	mov    eax,esi
c001a020:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001a025:	89 fa                	mov    edx,edi
c001a027:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001a02e:	0f ac d0 10          	shrd   eax,edx,0x10
c001a032:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001a037:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001a03b:	c1 ee 18             	shr    esi,0x18
c001a03e:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001a043:	eb 56                	jmp    c001a09b <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001a045:	6a 00                	push   0x0
c001a047:	6a 3f                	push   0x3f
c001a049:	57                   	push   edi
c001a04a:	56                   	push   esi
c001a04b:	e8 90 29 00 00       	call   c001c9e0 <__umoddi3>
c001a050:	83 c4 10             	add    esp,0x10
c001a053:	40                   	inc    eax
c001a054:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001a058:	6a 00                	push   0x0
c001a05a:	68 f0 03 00 00       	push   0x3f0
c001a05f:	57                   	push   edi
c001a060:	56                   	push   esi
c001a061:	e8 7a 28 00 00       	call   c001c8e0 <__udivdi3>
c001a066:	83 c4 10             	add    esp,0x10
c001a069:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001a06e:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001a075:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001a07a:	6a 00                	push   0x0
c001a07c:	6a 3f                	push   0x3f
c001a07e:	57                   	push   edi
c001a07f:	56                   	push   esi
c001a080:	e8 5b 28 00 00       	call   c001c8e0 <__udivdi3>
c001a085:	83 c4 10             	add    esp,0x10
c001a088:	89 c6                	mov    esi,eax
c001a08a:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001a08f:	83 e6 0f             	and    esi,0xf
c001a092:	eb 07                	jmp    c001a09b <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001a094:	31 f6                	xor    esi,esi
c001a096:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c001a09b:	bf 01 00 00 00       	mov    edi,0x1
c001a0a0:	50                   	push   eax
c001a0a1:	6a 00                	push   0x0
c001a0a3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a0aa:	50                   	push   eax
c001a0ab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001a0af:	e8 ee f1 ff ff       	call   c00192a2 <IDE::enableIRQs(unsigned char, bool)>
c001a0b4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a0b7:	e8 9c fe ff ff       	call   c0019f58 <ATA::readyForCommand()>
c001a0bc:	83 c4 10             	add    esp,0x10
c001a0bf:	84 c0                	test   al,al
c001a0c1:	0f 84 4e 02 00 00    	je     c001a315 <ATA::access(unsigned long long, int, void*, bool)+0x371>
c001a0c7:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001a0cd:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001a0d3:	c1 e0 04             	shl    eax,0x4
c001a0d6:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001a0dd:	09 c6                	or     esi,eax
c001a0df:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001a0e4:	75 05                	jne    c001a0eb <ATA::access(unsigned long long, int, void*, bool)+0x147>
c001a0e6:	83 ce a0             	or     esi,0xffffffa0
c001a0e9:	eb 03                	jmp    c001a0ee <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c001a0eb:	83 ce e0             	or     esi,0xffffffe0
c001a0ee:	89 f0                	mov    eax,esi
c001a0f0:	0f b6 f0             	movzx  esi,al
c001a0f3:	56                   	push   esi
c001a0f4:	6a 06                	push   0x6
c001a0f6:	51                   	push   ecx
c001a0f7:	52                   	push   edx
c001a0f8:	e8 97 ef ff ff       	call   c0019094 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a0fd:	83 c4 10             	add    esp,0x10
c001a100:	6a 00                	push   0x0
c001a102:	6a 01                	push   0x1
c001a104:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a10b:	50                   	push   eax
c001a10c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a112:	e8 7d ef ff ff       	call   c0019094 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a117:	83 c4 10             	add    esp,0x10
c001a11a:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001a11f:	75 6e                	jne    c001a18f <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c001a121:	6a 00                	push   0x0
c001a123:	6a 08                	push   0x8
c001a125:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a12c:	50                   	push   eax
c001a12d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a133:	e8 5c ef ff ff       	call   c0019094 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a138:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001a13d:	50                   	push   eax
c001a13e:	6a 09                	push   0x9
c001a140:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a147:	50                   	push   eax
c001a148:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a14e:	e8 41 ef ff ff       	call   c0019094 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a153:	83 c4 20             	add    esp,0x20
c001a156:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001a15b:	50                   	push   eax
c001a15c:	6a 0a                	push   0xa
c001a15e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a165:	50                   	push   eax
c001a166:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a16c:	e8 23 ef ff ff       	call   c0019094 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a171:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001a176:	50                   	push   eax
c001a177:	6a 0b                	push   0xb
c001a179:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a180:	50                   	push   eax
c001a181:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a187:	e8 08 ef ff ff       	call   c0019094 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a18c:	83 c4 20             	add    esp,0x20
c001a18f:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001a194:	50                   	push   eax
c001a195:	6a 02                	push   0x2
c001a197:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a19e:	50                   	push   eax
c001a19f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a1a5:	e8 ea ee ff ff       	call   c0019094 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a1aa:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001a1af:	50                   	push   eax
c001a1b0:	6a 03                	push   0x3
c001a1b2:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a1b9:	50                   	push   eax
c001a1ba:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a1c0:	e8 cf ee ff ff       	call   c0019094 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a1c5:	83 c4 20             	add    esp,0x20
c001a1c8:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001a1cd:	50                   	push   eax
c001a1ce:	6a 04                	push   0x4
c001a1d0:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a1d7:	50                   	push   eax
c001a1d8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a1de:	e8 b1 ee ff ff       	call   c0019094 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a1e3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a1e8:	50                   	push   eax
c001a1e9:	6a 05                	push   0x5
c001a1eb:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a1f2:	50                   	push   eax
c001a1f3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a1f9:	e8 96 ee ff ff       	call   c0019094 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a1fe:	83 c4 20             	add    esp,0x20
c001a201:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001a206:	0f 94 c0             	sete   al
c001a209:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001a20e:	74 09                	je     c001a219 <ATA::access(unsigned long long, int, void*, bool)+0x275>
c001a210:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c001a217:	eb 07                	jmp    c001a220 <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c001a219:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c001a220:	0f b6 c0             	movzx  eax,al
c001a223:	50                   	push   eax
c001a224:	6a 07                	push   0x7
c001a226:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a22d:	50                   	push   eax
c001a22e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a234:	e8 5b ee ff ff       	call   c0019094 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a239:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001a23d:	83 c4 10             	add    esp,0x10
c001a240:	85 f6                	test   esi,esi
c001a242:	0f 84 ae 00 00 00    	je     c001a2f6 <ATA::access(unsigned long long, int, void*, bool)+0x352>
c001a248:	50                   	push   eax
c001a249:	6a 01                	push   0x1
c001a24b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a252:	50                   	push   eax
c001a253:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a259:	e8 d4 f8 ff ff       	call   c0019b32 <IDE::polling(unsigned char, unsigned int)>
c001a25e:	83 c4 10             	add    esp,0x10
c001a261:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001a267:	84 c0                	test   al,al
c001a269:	74 20                	je     c001a28b <ATA::access(unsigned long long, int, void*, bool)+0x2e7>
c001a26b:	0f b6 f8             	movzx  edi,al
c001a26e:	0f b6 d2             	movzx  edx,dl
c001a271:	57                   	push   edi
c001a272:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001a279:	50                   	push   eax
c001a27a:	52                   	push   edx
c001a27b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a281:	e8 fc f7 ff ff       	call   c0019a82 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001a286:	e9 87 00 00 00       	jmp    c001a312 <ATA::access(unsigned long long, int, void*, bool)+0x36e>
c001a28b:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001a290:	74 33                	je     c001a2c5 <ATA::access(unsigned long long, int, void*, bool)+0x321>
c001a292:	31 ed                	xor    ebp,ebp
c001a294:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001a298:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c001a29c:	50                   	push   eax
c001a29d:	50                   	push   eax
c001a29e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a2a5:	50                   	push   eax
c001a2a6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a2ac:	e8 d1 ed ff ff       	call   c0019082 <IDE::getBase(unsigned char)>
c001a2b1:	89 c2                	mov    edx,eax
c001a2b3:	89 f8                	mov    eax,edi
c001a2b5:	66 ef                	out    dx,ax
c001a2b7:	45                   	inc    ebp
c001a2b8:	83 c4 10             	add    esp,0x10
c001a2bb:	81 fd 00 01 00 00    	cmp    ebp,0x100
c001a2c1:	75 d1                	jne    c001a294 <ATA::access(unsigned long long, int, void*, bool)+0x2f0>
c001a2c3:	eb 23                	jmp    c001a2e8 <ATA::access(unsigned long long, int, void*, bool)+0x344>
c001a2c5:	0f b6 d2             	movzx  edx,dl
c001a2c8:	51                   	push   ecx
c001a2c9:	51                   	push   ecx
c001a2ca:	52                   	push   edx
c001a2cb:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a2d1:	e8 ac ed ff ff       	call   c0019082 <IDE::getBase(unsigned char)>
c001a2d6:	b9 00 01 00 00       	mov    ecx,0x100
c001a2db:	89 c2                	mov    edx,eax
c001a2dd:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001a2e1:	fc                   	cld    
c001a2e2:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001a2e5:	83 c4 10             	add    esp,0x10
c001a2e8:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001a2f0:	4e                   	dec    esi
c001a2f1:	e9 4a ff ff ff       	jmp    c001a240 <ATA::access(unsigned long long, int, void*, bool)+0x29c>
c001a2f6:	31 ff                	xor    edi,edi
c001a2f8:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001a2fd:	74 16                	je     c001a315 <ATA::access(unsigned long long, int, void*, bool)+0x371>
c001a2ff:	50                   	push   eax
c001a300:	50                   	push   eax
c001a301:	31 c0                	xor    eax,eax
c001a303:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c001a308:	0f 94 c0             	sete   al
c001a30b:	50                   	push   eax
c001a30c:	53                   	push   ebx
c001a30d:	e8 fc fb ff ff       	call   c0019f0e <ATA::flush(bool)>
c001a312:	83 c4 10             	add    esp,0x10
c001a315:	83 c4 2c             	add    esp,0x2c
c001a318:	89 f8                	mov    eax,edi
c001a31a:	5b                   	pop    ebx
c001a31b:	5e                   	pop    esi
c001a31c:	5f                   	pop    edi
c001a31d:	5d                   	pop    ebp
c001a31e:	c3                   	ret    
c001a31f:	90                   	nop

c001a320 <ATA::detectCHS()>:
c001a320:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001a324:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001a32a:	c1 e0 06             	shl    eax,0x6
c001a32d:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001a333:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001a33d:	c7 44 24 04 7c fb 01 c0 	mov    DWORD PTR [esp+0x4],0xc001fb7c
c001a345:	e9 5d 5f ff ff       	jmp    c00102a7 <KePanic(char const*)>

c001a34a <ATA::open(int, int, void*)>:
c001a34a:	53                   	push   ebx
c001a34b:	83 ec 08             	sub    esp,0x8
c001a34e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a352:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a356:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a35a:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001a360:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001a366:	c1 e0 06             	shl    eax,0x6
c001a369:	01 d0                	add    eax,edx
c001a36b:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001a372:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001a378:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001a37f:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001a389:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001a38f:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001a396:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001a39d:	75 0c                	jne    c001a3ab <ATA::open(int, int, void*)+0x61>
c001a39f:	83 ec 0c             	sub    esp,0xc
c001a3a2:	53                   	push   ebx
c001a3a3:	e8 78 ff ff ff       	call   c001a320 <ATA::detectCHS()>
c001a3a8:	83 c4 10             	add    esp,0x10
c001a3ab:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001a3b1:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001a3b7:	c1 e0 06             	shl    eax,0x6
c001a3ba:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001a3c1:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001a3cb:	d1 e8                	shr    eax,1
c001a3cd:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001a3d3:	6a 04                	push   0x4
c001a3d5:	6a 0c                	push   0xc
c001a3d7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a3de:	50                   	push   eax
c001a3df:	52                   	push   edx
c001a3e0:	e8 af ec ff ff       	call   c0019094 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a3e5:	90                   	nop
c001a3e6:	90                   	nop
c001a3e7:	6a 00                	push   0x0
c001a3e9:	6a 0c                	push   0xc
c001a3eb:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a3f2:	50                   	push   eax
c001a3f3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a3f9:	e8 96 ec ff ff       	call   c0019094 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a3fe:	83 c4 14             	add    esp,0x14
c001a401:	53                   	push   ebx
c001a402:	e8 0b 1a ff ff       	call   c000be12 <PhysicalDisk::startCache()>
c001a407:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a40a:	e8 ab 2a ff ff       	call   c000ceba <createPartitionsForDisk(PhysicalDisk*)>
c001a40f:	31 c0                	xor    eax,eax
c001a411:	83 c4 18             	add    esp,0x18
c001a414:	5b                   	pop    ebx
c001a415:	c3                   	ret    

c001a416 <combineCharAndColour(char, unsigned char)>:
c001a416:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a41b:	66 0f be 54 24 04    	movsx  dx,BYTE PTR [esp+0x4]
c001a421:	c1 e0 08             	shl    eax,0x8
c001a424:	09 d0                	or     eax,edx
c001a426:	c3                   	ret    

c001a427 <combineColours(unsigned char, unsigned char)>:
c001a427:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a42c:	c1 e0 04             	shl    eax,0x4
c001a42f:	0b 44 24 04          	or     eax,DWORD PTR [esp+0x4]
c001a433:	c3                   	ret    

c001a434 <ATA::read(unsigned long long, int, void*)>:
c001a434:	55                   	push   ebp
c001a435:	57                   	push   edi
c001a436:	56                   	push   esi
c001a437:	be 04 00 00 00       	mov    esi,0x4
c001a43c:	53                   	push   ebx
c001a43d:	83 ec 0c             	sub    esp,0xc
c001a440:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001a444:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001a448:	8d 7b ff             	lea    edi,[ebx-0x1]
c001a44b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001a44f:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001a453:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001a459:	0f 87 a1 01 00 00    	ja     c001a600 <ATA::read(unsigned long long, int, void*)+0x1cc>
c001a45f:	be 06 00 00 00       	mov    esi,0x6
c001a464:	85 c9                	test   ecx,ecx
c001a466:	0f 84 94 01 00 00    	je     c001a600 <ATA::read(unsigned long long, int, void*)+0x1cc>
c001a46c:	55                   	push   ebp
c001a46d:	55                   	push   ebp
c001a46e:	6a 00                	push   0x0
c001a470:	51                   	push   ecx
c001a471:	53                   	push   ebx
c001a472:	52                   	push   edx
c001a473:	50                   	push   eax
c001a474:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001a478:	e8 27 fb ff ff       	call   c0019fa4 <ATA::access(unsigned long long, int, void*, bool)>
c001a47d:	83 c4 20             	add    esp,0x20
c001a480:	89 c6                	mov    esi,eax
c001a482:	85 c0                	test   eax,eax
c001a484:	0f 85 71 01 00 00    	jne    c001a5fb <ATA::read(unsigned long long, int, void*)+0x1c7>
c001a48a:	03 1d 54 6b 02 c0    	add    ebx,DWORD PTR ds:0xc0026b54
c001a490:	89 da                	mov    edx,ebx
c001a492:	50                   	push   eax
c001a493:	bd 10 27 00 00       	mov    ebp,0x2710
c001a498:	50                   	push   eax
c001a499:	89 1d 54 6b 02 c0    	mov    DWORD PTR ds:0xc0026b54,ebx
c001a49f:	6a 0f                	push   0xf
c001a4a1:	6a 00                	push   0x0
c001a4a3:	e8 7f ff ff ff       	call   c001a427 <combineColours(unsigned char, unsigned char)>
c001a4a8:	59                   	pop    ecx
c001a4a9:	b9 0a 00 00 00       	mov    ecx,0xa
c001a4ae:	5b                   	pop    ebx
c001a4af:	0f b6 d8             	movzx  ebx,al
c001a4b2:	89 d0                	mov    eax,edx
c001a4b4:	53                   	push   ebx
c001a4b5:	99                   	cdq    
c001a4b6:	f7 fd                	idiv   ebp
c001a4b8:	99                   	cdq    
c001a4b9:	f7 f9                	idiv   ecx
c001a4bb:	83 c2 30             	add    edx,0x30
c001a4be:	0f b6 d2             	movzx  edx,dl
c001a4c1:	52                   	push   edx
c001a4c2:	e8 4f ff ff ff       	call   c001a416 <combineCharAndColour(char, unsigned char)>
c001a4c7:	5f                   	pop    edi
c001a4c8:	bf e8 03 00 00       	mov    edi,0x3e8
c001a4cd:	5a                   	pop    edx
c001a4ce:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001a4d4:	53                   	push   ebx
c001a4d5:	a1 54 6b 02 c0       	mov    eax,ds:0xc0026b54
c001a4da:	99                   	cdq    
c001a4db:	f7 ff                	idiv   edi
c001a4dd:	99                   	cdq    
c001a4de:	f7 f9                	idiv   ecx
c001a4e0:	8d 42 30             	lea    eax,[edx+0x30]
c001a4e3:	0f b6 c0             	movzx  eax,al
c001a4e6:	50                   	push   eax
c001a4e7:	e8 2a ff ff ff       	call   c001a416 <combineCharAndColour(char, unsigned char)>
c001a4ec:	5f                   	pop    edi
c001a4ed:	bf 64 00 00 00       	mov    edi,0x64
c001a4f2:	5a                   	pop    edx
c001a4f3:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001a4f9:	53                   	push   ebx
c001a4fa:	a1 54 6b 02 c0       	mov    eax,ds:0xc0026b54
c001a4ff:	99                   	cdq    
c001a500:	f7 ff                	idiv   edi
c001a502:	99                   	cdq    
c001a503:	f7 f9                	idiv   ecx
c001a505:	8d 42 30             	lea    eax,[edx+0x30]
c001a508:	0f b6 c0             	movzx  eax,al
c001a50b:	50                   	push   eax
c001a50c:	e8 05 ff ff ff       	call   c001a416 <combineCharAndColour(char, unsigned char)>
c001a511:	5a                   	pop    edx
c001a512:	5a                   	pop    edx
c001a513:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001a519:	53                   	push   ebx
c001a51a:	a1 54 6b 02 c0       	mov    eax,ds:0xc0026b54
c001a51f:	99                   	cdq    
c001a520:	f7 f9                	idiv   ecx
c001a522:	99                   	cdq    
c001a523:	f7 f9                	idiv   ecx
c001a525:	8d 42 30             	lea    eax,[edx+0x30]
c001a528:	0f b6 c0             	movzx  eax,al
c001a52b:	50                   	push   eax
c001a52c:	e8 e5 fe ff ff       	call   c001a416 <combineCharAndColour(char, unsigned char)>
c001a531:	5a                   	pop    edx
c001a532:	5a                   	pop    edx
c001a533:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001a539:	53                   	push   ebx
c001a53a:	a1 54 6b 02 c0       	mov    eax,ds:0xc0026b54
c001a53f:	99                   	cdq    
c001a540:	f7 f9                	idiv   ecx
c001a542:	83 c2 30             	add    edx,0x30
c001a545:	0f b6 d2             	movzx  edx,dl
c001a548:	52                   	push   edx
c001a549:	e8 c8 fe ff ff       	call   c001a416 <combineCharAndColour(char, unsigned char)>
c001a54e:	5a                   	pop    edx
c001a54f:	5a                   	pop    edx
c001a550:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001a556:	53                   	push   ebx
c001a557:	a1 50 6b 02 c0       	mov    eax,ds:0xc0026b50
c001a55c:	99                   	cdq    
c001a55d:	f7 fd                	idiv   ebp
c001a55f:	99                   	cdq    
c001a560:	f7 f9                	idiv   ecx
c001a562:	8d 42 30             	lea    eax,[edx+0x30]
c001a565:	0f b6 c0             	movzx  eax,al
c001a568:	50                   	push   eax
c001a569:	e8 a8 fe ff ff       	call   c001a416 <combineCharAndColour(char, unsigned char)>
c001a56e:	5d                   	pop    ebp
c001a56f:	bd e8 03 00 00       	mov    ebp,0x3e8
c001a574:	5a                   	pop    edx
c001a575:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001a57b:	53                   	push   ebx
c001a57c:	a1 50 6b 02 c0       	mov    eax,ds:0xc0026b50
c001a581:	99                   	cdq    
c001a582:	f7 fd                	idiv   ebp
c001a584:	99                   	cdq    
c001a585:	f7 f9                	idiv   ecx
c001a587:	8d 42 30             	lea    eax,[edx+0x30]
c001a58a:	0f b6 c0             	movzx  eax,al
c001a58d:	50                   	push   eax
c001a58e:	e8 83 fe ff ff       	call   c001a416 <combineCharAndColour(char, unsigned char)>
c001a593:	5d                   	pop    ebp
c001a594:	5a                   	pop    edx
c001a595:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001a59b:	53                   	push   ebx
c001a59c:	a1 50 6b 02 c0       	mov    eax,ds:0xc0026b50
c001a5a1:	99                   	cdq    
c001a5a2:	f7 ff                	idiv   edi
c001a5a4:	99                   	cdq    
c001a5a5:	f7 f9                	idiv   ecx
c001a5a7:	8d 42 30             	lea    eax,[edx+0x30]
c001a5aa:	0f b6 c0             	movzx  eax,al
c001a5ad:	50                   	push   eax
c001a5ae:	e8 63 fe ff ff       	call   c001a416 <combineCharAndColour(char, unsigned char)>
c001a5b3:	5f                   	pop    edi
c001a5b4:	5d                   	pop    ebp
c001a5b5:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001a5bb:	53                   	push   ebx
c001a5bc:	a1 50 6b 02 c0       	mov    eax,ds:0xc0026b50
c001a5c1:	99                   	cdq    
c001a5c2:	f7 f9                	idiv   ecx
c001a5c4:	99                   	cdq    
c001a5c5:	f7 f9                	idiv   ecx
c001a5c7:	8d 42 30             	lea    eax,[edx+0x30]
c001a5ca:	0f b6 c0             	movzx  eax,al
c001a5cd:	50                   	push   eax
c001a5ce:	e8 43 fe ff ff       	call   c001a416 <combineCharAndColour(char, unsigned char)>
c001a5d3:	5a                   	pop    edx
c001a5d4:	5f                   	pop    edi
c001a5d5:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001a5db:	53                   	push   ebx
c001a5dc:	a1 50 6b 02 c0       	mov    eax,ds:0xc0026b50
c001a5e1:	99                   	cdq    
c001a5e2:	f7 f9                	idiv   ecx
c001a5e4:	83 c2 30             	add    edx,0x30
c001a5e7:	0f b6 d2             	movzx  edx,dl
c001a5ea:	52                   	push   edx
c001a5eb:	e8 26 fe ff ff       	call   c001a416 <combineCharAndColour(char, unsigned char)>
c001a5f0:	83 c4 10             	add    esp,0x10
c001a5f3:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001a5f9:	eb 05                	jmp    c001a600 <ATA::read(unsigned long long, int, void*)+0x1cc>
c001a5fb:	be 01 00 00 00       	mov    esi,0x1
c001a600:	83 c4 0c             	add    esp,0xc
c001a603:	89 f0                	mov    eax,esi
c001a605:	5b                   	pop    ebx
c001a606:	5e                   	pop    esi
c001a607:	5f                   	pop    edi
c001a608:	5d                   	pop    ebp
c001a609:	c3                   	ret    

c001a60a <ATA::write(unsigned long long, int, void*)>:
c001a60a:	55                   	push   ebp
c001a60b:	57                   	push   edi
c001a60c:	56                   	push   esi
c001a60d:	be 04 00 00 00       	mov    esi,0x4
c001a612:	53                   	push   ebx
c001a613:	83 ec 0c             	sub    esp,0xc
c001a616:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001a61a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001a61e:	8d 7b ff             	lea    edi,[ebx-0x1]
c001a621:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001a625:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001a629:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001a62f:	0f 87 9c 01 00 00    	ja     c001a7d1 <ATA::write(unsigned long long, int, void*)+0x1c7>
c001a635:	be 06 00 00 00       	mov    esi,0x6
c001a63a:	85 c9                	test   ecx,ecx
c001a63c:	0f 84 8f 01 00 00    	je     c001a7d1 <ATA::write(unsigned long long, int, void*)+0x1c7>
c001a642:	55                   	push   ebp
c001a643:	55                   	push   ebp
c001a644:	6a 01                	push   0x1
c001a646:	51                   	push   ecx
c001a647:	53                   	push   ebx
c001a648:	52                   	push   edx
c001a649:	50                   	push   eax
c001a64a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001a64e:	e8 51 f9 ff ff       	call   c0019fa4 <ATA::access(unsigned long long, int, void*, bool)>
c001a653:	83 c4 20             	add    esp,0x20
c001a656:	89 c6                	mov    esi,eax
c001a658:	85 c0                	test   eax,eax
c001a65a:	0f 85 6c 01 00 00    	jne    c001a7cc <ATA::write(unsigned long long, int, void*)+0x1c2>
c001a660:	01 1d 50 6b 02 c0    	add    DWORD PTR ds:0xc0026b50,ebx
c001a666:	bd 10 27 00 00       	mov    ebp,0x2710
c001a66b:	50                   	push   eax
c001a66c:	50                   	push   eax
c001a66d:	6a 0f                	push   0xf
c001a66f:	6a 00                	push   0x0
c001a671:	e8 b1 fd ff ff       	call   c001a427 <combineColours(unsigned char, unsigned char)>
c001a676:	5a                   	pop    edx
c001a677:	0f b6 d8             	movzx  ebx,al
c001a67a:	59                   	pop    ecx
c001a67b:	a1 54 6b 02 c0       	mov    eax,ds:0xc0026b54
c001a680:	53                   	push   ebx
c001a681:	b9 0a 00 00 00       	mov    ecx,0xa
c001a686:	99                   	cdq    
c001a687:	f7 fd                	idiv   ebp
c001a689:	99                   	cdq    
c001a68a:	f7 f9                	idiv   ecx
c001a68c:	8d 42 30             	lea    eax,[edx+0x30]
c001a68f:	0f b6 c0             	movzx  eax,al
c001a692:	50                   	push   eax
c001a693:	e8 7e fd ff ff       	call   c001a416 <combineCharAndColour(char, unsigned char)>
c001a698:	5f                   	pop    edi
c001a699:	bf e8 03 00 00       	mov    edi,0x3e8
c001a69e:	5a                   	pop    edx
c001a69f:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001a6a5:	53                   	push   ebx
c001a6a6:	a1 54 6b 02 c0       	mov    eax,ds:0xc0026b54
c001a6ab:	99                   	cdq    
c001a6ac:	f7 ff                	idiv   edi
c001a6ae:	99                   	cdq    
c001a6af:	f7 f9                	idiv   ecx
c001a6b1:	8d 42 30             	lea    eax,[edx+0x30]
c001a6b4:	0f b6 c0             	movzx  eax,al
c001a6b7:	50                   	push   eax
c001a6b8:	e8 59 fd ff ff       	call   c001a416 <combineCharAndColour(char, unsigned char)>
c001a6bd:	5f                   	pop    edi
c001a6be:	bf 64 00 00 00       	mov    edi,0x64
c001a6c3:	5a                   	pop    edx
c001a6c4:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001a6ca:	53                   	push   ebx
c001a6cb:	a1 54 6b 02 c0       	mov    eax,ds:0xc0026b54
c001a6d0:	99                   	cdq    
c001a6d1:	f7 ff                	idiv   edi
c001a6d3:	99                   	cdq    
c001a6d4:	f7 f9                	idiv   ecx
c001a6d6:	8d 42 30             	lea    eax,[edx+0x30]
c001a6d9:	0f b6 c0             	movzx  eax,al
c001a6dc:	50                   	push   eax
c001a6dd:	e8 34 fd ff ff       	call   c001a416 <combineCharAndColour(char, unsigned char)>
c001a6e2:	5a                   	pop    edx
c001a6e3:	5a                   	pop    edx
c001a6e4:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001a6ea:	53                   	push   ebx
c001a6eb:	a1 54 6b 02 c0       	mov    eax,ds:0xc0026b54
c001a6f0:	99                   	cdq    
c001a6f1:	f7 f9                	idiv   ecx
c001a6f3:	99                   	cdq    
c001a6f4:	f7 f9                	idiv   ecx
c001a6f6:	8d 42 30             	lea    eax,[edx+0x30]
c001a6f9:	0f b6 c0             	movzx  eax,al
c001a6fc:	50                   	push   eax
c001a6fd:	e8 14 fd ff ff       	call   c001a416 <combineCharAndColour(char, unsigned char)>
c001a702:	5a                   	pop    edx
c001a703:	5a                   	pop    edx
c001a704:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001a70a:	53                   	push   ebx
c001a70b:	a1 54 6b 02 c0       	mov    eax,ds:0xc0026b54
c001a710:	99                   	cdq    
c001a711:	f7 f9                	idiv   ecx
c001a713:	8d 42 30             	lea    eax,[edx+0x30]
c001a716:	0f b6 c0             	movzx  eax,al
c001a719:	50                   	push   eax
c001a71a:	e8 f7 fc ff ff       	call   c001a416 <combineCharAndColour(char, unsigned char)>
c001a71f:	5a                   	pop    edx
c001a720:	5a                   	pop    edx
c001a721:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001a727:	53                   	push   ebx
c001a728:	a1 50 6b 02 c0       	mov    eax,ds:0xc0026b50
c001a72d:	99                   	cdq    
c001a72e:	f7 fd                	idiv   ebp
c001a730:	99                   	cdq    
c001a731:	f7 f9                	idiv   ecx
c001a733:	8d 42 30             	lea    eax,[edx+0x30]
c001a736:	0f b6 c0             	movzx  eax,al
c001a739:	50                   	push   eax
c001a73a:	e8 d7 fc ff ff       	call   c001a416 <combineCharAndColour(char, unsigned char)>
c001a73f:	5d                   	pop    ebp
c001a740:	bd e8 03 00 00       	mov    ebp,0x3e8
c001a745:	5a                   	pop    edx
c001a746:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001a74c:	53                   	push   ebx
c001a74d:	a1 50 6b 02 c0       	mov    eax,ds:0xc0026b50
c001a752:	99                   	cdq    
c001a753:	f7 fd                	idiv   ebp
c001a755:	99                   	cdq    
c001a756:	f7 f9                	idiv   ecx
c001a758:	8d 42 30             	lea    eax,[edx+0x30]
c001a75b:	0f b6 c0             	movzx  eax,al
c001a75e:	50                   	push   eax
c001a75f:	e8 b2 fc ff ff       	call   c001a416 <combineCharAndColour(char, unsigned char)>
c001a764:	5d                   	pop    ebp
c001a765:	5a                   	pop    edx
c001a766:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001a76c:	53                   	push   ebx
c001a76d:	a1 50 6b 02 c0       	mov    eax,ds:0xc0026b50
c001a772:	99                   	cdq    
c001a773:	f7 ff                	idiv   edi
c001a775:	99                   	cdq    
c001a776:	f7 f9                	idiv   ecx
c001a778:	8d 42 30             	lea    eax,[edx+0x30]
c001a77b:	0f b6 c0             	movzx  eax,al
c001a77e:	50                   	push   eax
c001a77f:	e8 92 fc ff ff       	call   c001a416 <combineCharAndColour(char, unsigned char)>
c001a784:	5f                   	pop    edi
c001a785:	5d                   	pop    ebp
c001a786:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001a78c:	53                   	push   ebx
c001a78d:	a1 50 6b 02 c0       	mov    eax,ds:0xc0026b50
c001a792:	99                   	cdq    
c001a793:	f7 f9                	idiv   ecx
c001a795:	99                   	cdq    
c001a796:	f7 f9                	idiv   ecx
c001a798:	8d 42 30             	lea    eax,[edx+0x30]
c001a79b:	0f b6 c0             	movzx  eax,al
c001a79e:	50                   	push   eax
c001a79f:	e8 72 fc ff ff       	call   c001a416 <combineCharAndColour(char, unsigned char)>
c001a7a4:	5a                   	pop    edx
c001a7a5:	5f                   	pop    edi
c001a7a6:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001a7ac:	53                   	push   ebx
c001a7ad:	a1 50 6b 02 c0       	mov    eax,ds:0xc0026b50
c001a7b2:	99                   	cdq    
c001a7b3:	f7 f9                	idiv   ecx
c001a7b5:	83 c2 30             	add    edx,0x30
c001a7b8:	0f b6 d2             	movzx  edx,dl
c001a7bb:	52                   	push   edx
c001a7bc:	e8 55 fc ff ff       	call   c001a416 <combineCharAndColour(char, unsigned char)>
c001a7c1:	83 c4 10             	add    esp,0x10
c001a7c4:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001a7ca:	eb 05                	jmp    c001a7d1 <ATA::write(unsigned long long, int, void*)+0x1c7>
c001a7cc:	be 01 00 00 00       	mov    esi,0x1
c001a7d1:	83 c4 0c             	add    esp,0xc
c001a7d4:	89 f0                	mov    eax,esi
c001a7d6:	5b                   	pop    ebx
c001a7d7:	5e                   	pop    esi
c001a7d8:	5f                   	pop    edi
c001a7d9:	5d                   	pop    ebp
c001a7da:	c3                   	ret    
c001a7db:	90                   	nop

c001a7dc <ATAPI::write(unsigned long long, int, void*)>:
c001a7dc:	b8 03 00 00 00       	mov    eax,0x3
c001a7e1:	c3                   	ret    

c001a7e2 <ATAPI::close(int, int, void*)>:
c001a7e2:	83 ec 0c             	sub    esp,0xc
c001a7e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a7e9:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001a7ef:	85 c0                	test   eax,eax
c001a7f1:	74 0c                	je     c001a7ff <ATAPI::close(int, int, void*)+0x1d>
c001a7f3:	83 ec 0c             	sub    esp,0xc
c001a7f6:	8b 10                	mov    edx,DWORD PTR [eax]
c001a7f8:	50                   	push   eax
c001a7f9:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001a7fc:	83 c4 10             	add    esp,0x10
c001a7ff:	31 c0                	xor    eax,eax
c001a801:	83 c4 0c             	add    esp,0xc
c001a804:	c3                   	ret    
c001a805:	90                   	nop

c001a806 <ATAPI::ATAPI()>:
c001a806:	83 ec 0c             	sub    esp,0xc
c001a809:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a80d:	83 ec 04             	sub    esp,0x4
c001a810:	68 00 08 00 00       	push   0x800
c001a815:	68 c5 fc 01 c0       	push   0xc001fcc5
c001a81a:	50                   	push   eax
c001a81b:	e8 8a 15 ff ff       	call   c000bdaa <PhysicalDisk::PhysicalDisk(char const*, int)>
c001a820:	83 c4 10             	add    esp,0x10
c001a823:	ba e0 fb 01 c0       	mov    edx,0xc001fbe0
c001a828:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a82c:	89 10                	mov    DWORD PTR [eax],edx
c001a82e:	90                   	nop
c001a82f:	83 c4 0c             	add    esp,0xc
c001a832:	c3                   	ret    
c001a833:	90                   	nop

c001a834 <ATAPI::readyForCommand()>:
c001a834:	56                   	push   esi
c001a835:	53                   	push   ebx
c001a836:	53                   	push   ebx
c001a837:	31 db                	xor    ebx,ebx
c001a839:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a83d:	51                   	push   ecx
c001a83e:	6a 0c                	push   0xc
c001a840:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001a847:	50                   	push   eax
c001a848:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001a84e:	e8 01 e9 ff ff       	call   c0019154 <IDE::read(unsigned char, unsigned char)>
c001a853:	83 c4 10             	add    esp,0x10
c001a856:	a8 88                	test   al,0x88
c001a858:	74 25                	je     c001a87f <ATAPI::readyForCommand()+0x4b>
c001a85a:	43                   	inc    ebx
c001a85b:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c001a861:	7e da                	jle    c001a83d <ATAPI::readyForCommand()+0x9>
c001a863:	83 ec 0c             	sub    esp,0xc
c001a866:	68 5e 01 00 00       	push   0x15e
c001a86b:	e8 54 92 ff ff       	call   c0013ac4 <milliTenthSleep(unsigned int)>
c001a870:	83 c4 10             	add    esp,0x10
c001a873:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c001a879:	75 c2                	jne    c001a83d <ATAPI::readyForCommand()+0x9>
c001a87b:	31 c0                	xor    eax,eax
c001a87d:	eb 02                	jmp    c001a881 <ATAPI::readyForCommand()+0x4d>
c001a87f:	b0 01                	mov    al,0x1
c001a881:	5a                   	pop    edx
c001a882:	5b                   	pop    ebx
c001a883:	5e                   	pop    esi
c001a884:	c3                   	ret    
c001a885:	90                   	nop

c001a886 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001a886:	55                   	push   ebp
c001a887:	57                   	push   edi
c001a888:	56                   	push   esi
c001a889:	53                   	push   ebx
c001a88a:	83 ec 20             	sub    esp,0x20
c001a88d:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001a891:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001a895:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001a899:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001a89d:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001a8a1:	6a 01                	push   0x1
c001a8a3:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a8aa:	50                   	push   eax
c001a8ab:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a8b1:	e8 ec e9 ff ff       	call   c00192a2 <IDE::enableIRQs(unsigned char, bool)>
c001a8b6:	5e                   	pop    esi
c001a8b7:	58                   	pop    eax
c001a8b8:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a8bf:	50                   	push   eax
c001a8c0:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a8c6:	e8 a3 e7 ff ff       	call   c001906e <IDE::prepareInterrupt(unsigned char)>
c001a8cb:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a8ce:	e8 61 ff ff ff       	call   c001a834 <ATAPI::readyForCommand()>
c001a8d3:	83 c4 10             	add    esp,0x10
c001a8d6:	84 c0                	test   al,al
c001a8d8:	75 0a                	jne    c001a8e4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c001a8da:	bb 01 00 00 00       	mov    ebx,0x1
c001a8df:	e9 57 02 00 00       	jmp    c001ab3b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001a8e4:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c001a8ea:	c1 e0 04             	shl    eax,0x4
c001a8ed:	0f b6 c0             	movzx  eax,al
c001a8f0:	50                   	push   eax
c001a8f1:	6a 06                	push   0x6
c001a8f3:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a8fa:	50                   	push   eax
c001a8fb:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a901:	e8 8e e7 ff ff       	call   c0019094 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a906:	6a 00                	push   0x0
c001a908:	6a 01                	push   0x1
c001a90a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a911:	50                   	push   eax
c001a912:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a918:	e8 77 e7 ff ff       	call   c0019094 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a91d:	83 c4 20             	add    esp,0x20
c001a920:	0f b6 c3             	movzx  eax,bl
c001a923:	0f b6 df             	movzx  ebx,bh
c001a926:	50                   	push   eax
c001a927:	6a 04                	push   0x4
c001a929:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a930:	50                   	push   eax
c001a931:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a937:	e8 58 e7 ff ff       	call   c0019094 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a93c:	53                   	push   ebx
c001a93d:	6a 05                	push   0x5
c001a93f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a946:	50                   	push   eax
c001a947:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a94d:	e8 42 e7 ff ff       	call   c0019094 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a952:	83 c4 20             	add    esp,0x20
c001a955:	68 a0 00 00 00       	push   0xa0
c001a95a:	6a 07                	push   0x7
c001a95c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a963:	50                   	push   eax
c001a964:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a96a:	e8 25 e7 ff ff       	call   c0019094 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a96f:	83 c4 0c             	add    esp,0xc
c001a972:	6a 01                	push   0x1
c001a974:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a97b:	50                   	push   eax
c001a97c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a982:	e8 ab f1 ff ff       	call   c0019b32 <IDE::polling(unsigned char, unsigned int)>
c001a987:	83 c4 10             	add    esp,0x10
c001a98a:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c001a990:	84 c0                	test   al,al
c001a992:	74 23                	je     c001a9b7 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c001a994:	0f b6 d8             	movzx  ebx,al
c001a997:	0f b6 d2             	movzx  edx,dl
c001a99a:	53                   	push   ebx
c001a99b:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c001a9a2:	50                   	push   eax
c001a9a3:	52                   	push   edx
c001a9a4:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a9aa:	e8 d3 f0 ff ff       	call   c0019a82 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001a9af:	83 c4 10             	add    esp,0x10
c001a9b2:	e9 84 01 00 00       	jmp    c001ab3b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001a9b7:	0f b6 d2             	movzx  edx,dl
c001a9ba:	53                   	push   ebx
c001a9bb:	53                   	push   ebx
c001a9bc:	52                   	push   edx
c001a9bd:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a9c3:	e8 ba e6 ff ff       	call   c0019082 <IDE::getBase(unsigned char)>
c001a9c8:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001a9cc:	b9 06 00 00 00       	mov    ecx,0x6
c001a9d1:	89 c2                	mov    edx,eax
c001a9d3:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001a9d6:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001a9da:	83 c4 10             	add    esp,0x10
c001a9dd:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001a9e3:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001a9ea:	85 db                	test   ebx,ebx
c001a9ec:	0f 84 ec 00 00 00    	je     c001aade <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c001a9f2:	51                   	push   ecx
c001a9f3:	51                   	push   ecx
c001a9f4:	52                   	push   edx
c001a9f5:	50                   	push   eax
c001a9f6:	e8 07 e8 ff ff       	call   c0019202 <IDE::waitInterrupt(unsigned char)>
c001a9fb:	83 c4 10             	add    esp,0x10
c001a9fe:	84 c0                	test   al,al
c001aa00:	0f 84 d4 fe ff ff    	je     c001a8da <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001aa06:	56                   	push   esi
c001aa07:	56                   	push   esi
c001aa08:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001aa0f:	50                   	push   eax
c001aa10:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001aa16:	e8 53 e6 ff ff       	call   c001906e <IDE::prepareInterrupt(unsigned char)>
c001aa1b:	83 c4 0c             	add    esp,0xc
c001aa1e:	6a 04                	push   0x4
c001aa20:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001aa27:	50                   	push   eax
c001aa28:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001aa2e:	e8 21 e7 ff ff       	call   c0019154 <IDE::read(unsigned char, unsigned char)>
c001aa33:	83 c4 0c             	add    esp,0xc
c001aa36:	89 c6                	mov    esi,eax
c001aa38:	6a 05                	push   0x5
c001aa3a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001aa41:	50                   	push   eax
c001aa42:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001aa48:	e8 07 e7 ff ff       	call   c0019154 <IDE::read(unsigned char, unsigned char)>
c001aa4d:	89 f1                	mov    ecx,esi
c001aa4f:	0f b6 c0             	movzx  eax,al
c001aa52:	0f b6 f1             	movzx  esi,cl
c001aa55:	c1 e0 08             	shl    eax,0x8
c001aa58:	09 c6                	or     esi,eax
c001aa5a:	d1 fe                	sar    esi,1
c001aa5c:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001aa60:	83 c4 10             	add    esp,0x10
c001aa63:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001aa68:	74 41                	je     c001aaab <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c001aa6a:	31 c9                	xor    ecx,ecx
c001aa6c:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001aa72:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001aa79:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c001aa7d:	75 0a                	jne    c001aa89 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c001aa7f:	01 c9                	add    ecx,ecx
c001aa81:	01 cd                	add    ebp,ecx
c001aa83:	4b                   	dec    ebx
c001aa84:	e9 54 ff ff ff       	jmp    c001a9dd <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c001aa89:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c001aa8e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001aa92:	51                   	push   ecx
c001aa93:	51                   	push   ecx
c001aa94:	52                   	push   edx
c001aa95:	50                   	push   eax
c001aa96:	e8 e7 e5 ff ff       	call   c0019082 <IDE::getBase(unsigned char)>
c001aa9b:	89 c2                	mov    edx,eax
c001aa9d:	89 f0                	mov    eax,esi
c001aa9f:	66 ef                	out    dx,ax
c001aaa1:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001aaa5:	83 c4 10             	add    esp,0x10
c001aaa8:	41                   	inc    ecx
c001aaa9:	eb c1                	jmp    c001aa6c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c001aaab:	31 f6                	xor    esi,esi
c001aaad:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001aab3:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001aaba:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c001aabe:	75 06                	jne    c001aac6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c001aac0:	01 f6                	add    esi,esi
c001aac2:	01 f5                	add    ebp,esi
c001aac4:	eb bd                	jmp    c001aa83 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c001aac6:	51                   	push   ecx
c001aac7:	51                   	push   ecx
c001aac8:	52                   	push   edx
c001aac9:	50                   	push   eax
c001aaca:	e8 b3 e5 ff ff       	call   c0019082 <IDE::getBase(unsigned char)>
c001aacf:	89 c2                	mov    edx,eax
c001aad1:	66 ed                	in     ax,dx
c001aad3:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c001aad8:	83 c4 10             	add    esp,0x10
c001aadb:	46                   	inc    esi
c001aadc:	eb cf                	jmp    c001aaad <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c001aade:	51                   	push   ecx
c001aadf:	51                   	push   ecx
c001aae0:	52                   	push   edx
c001aae1:	50                   	push   eax
c001aae2:	e8 1b e7 ff ff       	call   c0019202 <IDE::waitInterrupt(unsigned char)>
c001aae7:	83 c4 10             	add    esp,0x10
c001aaea:	84 c0                	test   al,al
c001aaec:	0f 84 e8 fd ff ff    	je     c001a8da <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001aaf2:	bb a0 86 01 00       	mov    ebx,0x186a0
c001aaf7:	52                   	push   edx
c001aaf8:	52                   	push   edx
c001aaf9:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ab00:	50                   	push   eax
c001ab01:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ab07:	e8 62 e5 ff ff       	call   c001906e <IDE::prepareInterrupt(unsigned char)>
c001ab0c:	83 c4 10             	add    esp,0x10
c001ab0f:	50                   	push   eax
c001ab10:	50                   	push   eax
c001ab11:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ab18:	50                   	push   eax
c001ab19:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ab1f:	e8 5e e5 ff ff       	call   c0019082 <IDE::getBase(unsigned char)>
c001ab24:	8d 50 07             	lea    edx,[eax+0x7]
c001ab27:	ec                   	in     al,dx
c001ab28:	83 c4 10             	add    esp,0x10
c001ab2b:	a8 88                	test   al,0x88
c001ab2d:	74 0a                	je     c001ab39 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c001ab2f:	4b                   	dec    ebx
c001ab30:	75 dd                	jne    c001ab0f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c001ab32:	bb 02 00 00 00       	mov    ebx,0x2
c001ab37:	eb 02                	jmp    c001ab3b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001ab39:	31 db                	xor    ebx,ebx
c001ab3b:	83 c4 1c             	add    esp,0x1c
c001ab3e:	89 d8                	mov    eax,ebx
c001ab40:	5b                   	pop    ebx
c001ab41:	5e                   	pop    esi
c001ab42:	5f                   	pop    edi
c001ab43:	5d                   	pop    ebp
c001ab44:	c3                   	ret    
c001ab45:	90                   	nop

c001ab46 <ATAPI::diskRemoved()>:
c001ab46:	53                   	push   ebx
c001ab47:	83 ec 14             	sub    esp,0x14
c001ab4a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001ab4e:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001ab55:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c001ab5b:	e8 da 20 ff ff       	call   c000cc3a <LogicalDisk::unmount()>
c001ab60:	58                   	pop    eax
c001ab61:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001ab67:	e8 1c 2a ff ff       	call   c000d588 <VCache::writeWriteBuffer()>
c001ab6c:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001ab72:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001ab76:	83 c4 18             	add    esp,0x18
c001ab79:	5b                   	pop    ebx
c001ab7a:	e9 f9 29 ff ff       	jmp    c000d578 <VCache::invalidateReadBuffer()>
c001ab7f:	90                   	nop

c001ab80 <ATAPI::eject()>:
c001ab80:	57                   	push   edi
c001ab81:	b9 03 00 00 00       	mov    ecx,0x3
c001ab86:	53                   	push   ebx
c001ab87:	83 ec 14             	sub    esp,0x14
c001ab8a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001ab8e:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001ab92:	fc                   	cld    
c001ab93:	31 c0                	xor    eax,eax
c001ab95:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001ab97:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001ab9c:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001aba1:	50                   	push   eax
c001aba2:	50                   	push   eax
c001aba3:	6a 00                	push   0x0
c001aba5:	6a 00                	push   0x0
c001aba7:	6a 00                	push   0x0
c001aba9:	6a 02                	push   0x2
c001abab:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001abaf:	50                   	push   eax
c001abb0:	53                   	push   ebx
c001abb1:	e8 d0 fc ff ff       	call   c001a886 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001abb6:	83 c4 14             	add    esp,0x14
c001abb9:	53                   	push   ebx
c001abba:	e8 87 ff ff ff       	call   c001ab46 <ATAPI::diskRemoved()>
c001abbf:	83 c4 24             	add    esp,0x24
c001abc2:	31 c0                	xor    eax,eax
c001abc4:	5b                   	pop    ebx
c001abc5:	5f                   	pop    edi
c001abc6:	c3                   	ret    
c001abc7:	90                   	nop

c001abc8 <ATAPI::diskInserted()>:
c001abc8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001abcc:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c001abd3:	c3                   	ret    

c001abd4 <ATAPI::detectMedia()>:
c001abd4:	56                   	push   esi
c001abd5:	53                   	push   ebx
c001abd6:	83 ec 28             	sub    esp,0x28
c001abd9:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001abdd:	6a 0c                	push   0xc
c001abdf:	6a 00                	push   0x0
c001abe1:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001abe5:	56                   	push   esi
c001abe6:	e8 e5 58 fe ff       	call   c00004d0 <memset>
c001abeb:	58                   	pop    eax
c001abec:	5a                   	pop    edx
c001abed:	6a 00                	push   0x0
c001abef:	6a 00                	push   0x0
c001abf1:	6a 00                	push   0x0
c001abf3:	6a 00                	push   0x0
c001abf5:	56                   	push   esi
c001abf6:	53                   	push   ebx
c001abf7:	e8 8a fc ff ff       	call   c001a886 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001abfc:	83 c4 1c             	add    esp,0x1c
c001abff:	6a 0c                	push   0xc
c001ac01:	6a 00                	push   0x0
c001ac03:	56                   	push   esi
c001ac04:	e8 c7 58 fe ff       	call   c00004d0 <memset>
c001ac09:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001ac0e:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001ac13:	59                   	pop    ecx
c001ac14:	58                   	pop    eax
c001ac15:	6a 01                	push   0x1
c001ac17:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001ac1b:	50                   	push   eax
c001ac1c:	6a 00                	push   0x0
c001ac1e:	6a 12                	push   0x12
c001ac20:	56                   	push   esi
c001ac21:	53                   	push   ebx
c001ac22:	e8 5f fc ff ff       	call   c001a886 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001ac27:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001ac2b:	83 c4 20             	add    esp,0x20
c001ac2e:	83 e0 7f             	and    eax,0x7f
c001ac31:	3c 70                	cmp    al,0x70
c001ac33:	74 15                	je     c001ac4a <ATAPI::detectMedia()+0x76>
c001ac35:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001ac3c:	75 0c                	jne    c001ac4a <ATAPI::detectMedia()+0x76>
c001ac3e:	83 ec 0c             	sub    esp,0xc
c001ac41:	53                   	push   ebx
c001ac42:	e8 81 ff ff ff       	call   c001abc8 <ATAPI::diskInserted()>
c001ac47:	83 c4 10             	add    esp,0x10
c001ac4a:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001ac4e:	83 e0 0f             	and    eax,0xf
c001ac51:	3c 02                	cmp    al,0x2
c001ac53:	75 1b                	jne    c001ac70 <ATAPI::detectMedia()+0x9c>
c001ac55:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001ac5a:	75 2d                	jne    c001ac89 <ATAPI::detectMedia()+0xb5>
c001ac5c:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001ac63:	74 24                	je     c001ac89 <ATAPI::detectMedia()+0xb5>
c001ac65:	83 ec 0c             	sub    esp,0xc
c001ac68:	53                   	push   ebx
c001ac69:	e8 d8 fe ff ff       	call   c001ab46 <ATAPI::diskRemoved()>
c001ac6e:	eb 16                	jmp    c001ac86 <ATAPI::detectMedia()+0xb2>
c001ac70:	84 c0                	test   al,al
c001ac72:	75 15                	jne    c001ac89 <ATAPI::detectMedia()+0xb5>
c001ac74:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001ac7b:	75 0c                	jne    c001ac89 <ATAPI::detectMedia()+0xb5>
c001ac7d:	83 ec 0c             	sub    esp,0xc
c001ac80:	53                   	push   ebx
c001ac81:	e8 42 ff ff ff       	call   c001abc8 <ATAPI::diskInserted()>
c001ac86:	83 c4 10             	add    esp,0x10
c001ac89:	83 c4 24             	add    esp,0x24
c001ac8c:	5b                   	pop    ebx
c001ac8d:	5e                   	pop    esi
c001ac8e:	c3                   	ret    
c001ac8f:	90                   	nop

c001ac90 <ATAPI::open(int, int, void*)>:
c001ac90:	56                   	push   esi
c001ac91:	53                   	push   ebx
c001ac92:	50                   	push   eax
c001ac93:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ac97:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ac9b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ac9f:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001aca5:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001acab:	c1 e0 06             	shl    eax,0x6
c001acae:	01 d0                	add    eax,edx
c001acb0:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001acb7:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001acbd:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001acc4:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001acce:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001acd4:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001acdb:	6a 04                	push   0x4
c001acdd:	6a 0c                	push   0xc
c001acdf:	51                   	push   ecx
c001ace0:	52                   	push   edx
c001ace1:	e8 ae e3 ff ff       	call   c0019094 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ace6:	90                   	nop
c001ace7:	90                   	nop
c001ace8:	6a 00                	push   0x0
c001acea:	6a 0c                	push   0xc
c001acec:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001acf3:	50                   	push   eax
c001acf4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001acfa:	e8 95 e3 ff ff       	call   c0019094 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001acff:	83 c4 14             	add    esp,0x14
c001ad02:	68 74 01 00 00       	push   0x174
c001ad07:	e8 ad ca fe ff       	call   c00077b9 <malloc>
c001ad0c:	83 c4 0c             	add    esp,0xc
c001ad0f:	89 c6                	mov    esi,eax
c001ad11:	6a 00                	push   0x0
c001ad13:	68 ff ff ff 7f       	push   0x7fffffff
c001ad18:	6a 00                	push   0x0
c001ad1a:	6a 00                	push   0x0
c001ad1c:	53                   	push   ebx
c001ad1d:	68 62 fd 01 c0       	push   0xc001fd62
c001ad22:	50                   	push   eax
c001ad23:	e8 5e 1d ff ff       	call   c000ca86 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001ad28:	83 c4 14             	add    esp,0x14
c001ad2b:	56                   	push   esi
c001ad2c:	e8 0b 1e ff ff       	call   c000cb3c <LogicalDisk::assignDriveLetter()>
c001ad31:	5a                   	pop    edx
c001ad32:	0f be c0             	movsx  eax,al
c001ad35:	59                   	pop    ecx
c001ad36:	50                   	push   eax
c001ad37:	68 c8 fb 01 c0       	push   0xc001fbc8
c001ad3c:	e8 11 f8 fe ff       	call   c000a552 <Dbg::kprintf(char const*, ...)>
c001ad41:	58                   	pop    eax
c001ad42:	5a                   	pop    edx
c001ad43:	56                   	push   esi
c001ad44:	53                   	push   ebx
c001ad45:	e8 92 0c ff ff       	call   c000b9dc <Device::addChild(Device*)>
c001ad4a:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c001ad50:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ad53:	e8 ba 10 ff ff       	call   c000be12 <PhysicalDisk::startCache()>
c001ad58:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001ad5f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ad62:	e8 6d fe ff ff       	call   c001abd4 <ATAPI::detectMedia()>
c001ad67:	83 c4 14             	add    esp,0x14
c001ad6a:	31 c0                	xor    eax,eax
c001ad6c:	5b                   	pop    ebx
c001ad6d:	5e                   	pop    esi
c001ad6e:	c3                   	ret    
c001ad6f:	90                   	nop

c001ad70 <ATAPI::read(unsigned long long, int, void*)>:
c001ad70:	55                   	push   ebp
c001ad71:	57                   	push   edi
c001ad72:	56                   	push   esi
c001ad73:	53                   	push   ebx
c001ad74:	83 ec 1c             	sub    esp,0x1c
c001ad77:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001ad7b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001ad7f:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001ad83:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001ad8a:	74 3c                	je     c001adc8 <ATAPI::read(unsigned long long, int, void*)+0x58>
c001ad8c:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001ad90:	b9 03 00 00 00       	mov    ecx,0x3
c001ad95:	fc                   	cld    
c001ad96:	31 c0                	xor    eax,eax
c001ad98:	0f ce                	bswap  esi
c001ad9a:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001ad9c:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001ada1:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c001ada5:	89 e8                	mov    eax,ebp
c001ada7:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001adab:	50                   	push   eax
c001adac:	50                   	push   eax
c001adad:	55                   	push   ebp
c001adae:	c1 e5 0b             	shl    ebp,0xb
c001adb1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001adb5:	6a 00                	push   0x0
c001adb7:	55                   	push   ebp
c001adb8:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001adbc:	50                   	push   eax
c001adbd:	53                   	push   ebx
c001adbe:	e8 c3 fa ff ff       	call   c001a886 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001adc3:	83 c4 20             	add    esp,0x20
c001adc6:	eb 1a                	jmp    c001ade2 <ATAPI::read(unsigned long long, int, void*)+0x72>
c001adc8:	83 ec 0c             	sub    esp,0xc
c001adcb:	53                   	push   ebx
c001adcc:	e8 03 fe ff ff       	call   c001abd4 <ATAPI::detectMedia()>
c001add1:	83 c4 10             	add    esp,0x10
c001add4:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001addb:	75 af                	jne    c001ad8c <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001addd:	b8 02 00 00 00       	mov    eax,0x2
c001ade2:	83 c4 1c             	add    esp,0x1c
c001ade5:	5b                   	pop    ebx
c001ade6:	5e                   	pop    esi
c001ade7:	5f                   	pop    edi
c001ade8:	5d                   	pop    ebp
c001ade9:	c3                   	ret    

c001adea <SATA::close(int, int, void*)>:
c001adea:	83 ec 0c             	sub    esp,0xc
c001aded:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001adf1:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001adf7:	85 c0                	test   eax,eax
c001adf9:	74 0c                	je     c001ae07 <SATA::close(int, int, void*)+0x1d>
c001adfb:	83 ec 0c             	sub    esp,0xc
c001adfe:	8b 10                	mov    edx,DWORD PTR [eax]
c001ae00:	50                   	push   eax
c001ae01:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001ae04:	83 c4 10             	add    esp,0x10
c001ae07:	31 c0                	xor    eax,eax
c001ae09:	83 c4 0c             	add    esp,0xc
c001ae0c:	c3                   	ret    
c001ae0d:	90                   	nop

c001ae0e <SATA::powerSaving(PowerSavingLevel)>:
c001ae0e:	c3                   	ret    
c001ae0f:	90                   	nop

c001ae10 <SATA::open(int, int, void*)>:
c001ae10:	56                   	push   esi
c001ae11:	53                   	push   ebx
c001ae12:	50                   	push   eax
c001ae13:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ae17:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ae1b:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001ae25:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001ae2b:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001ae35:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ae39:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001ae43:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001ae49:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001ae50:	e8 40 cc fe ff       	call   c0007a95 <Phys::allocatePage()>
c001ae55:	89 c6                	mov    esi,eax
c001ae57:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001ae5d:	81 c6 00 10 00 00    	add    esi,0x1000
c001ae63:	e8 2d cc fe ff       	call   c0007a95 <Phys::allocatePage()>
c001ae68:	39 c6                	cmp    esi,eax
c001ae6a:	74 10                	je     c001ae7c <SATA::open(int, int, void*)+0x6c>
c001ae6c:	83 ec 0c             	sub    esp,0xc
c001ae6f:	68 10 fc 01 c0       	push   0xc001fc10
c001ae74:	e8 2e 54 ff ff       	call   c00102a7 <KePanic(char const*)>
c001ae79:	83 c4 10             	add    esp,0x10
c001ae7c:	83 ec 0c             	sub    esp,0xc
c001ae7f:	6a 02                	push   0x2
c001ae81:	e8 0f e4 fe ff       	call   c0009295 <Virt::allocateKernelVirtualPages(int)>
c001ae86:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001ae8c:	6a 03                	push   0x3
c001ae8e:	50                   	push   eax
c001ae8f:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001ae95:	ff 35 b0 2f 02 c0    	push   DWORD PTR ds:0xc0022fb0
c001ae9b:	e8 b8 ea fe ff       	call   c0009958 <VAS::mapPage(unsigned long, unsigned long, int)>
c001aea0:	83 c4 14             	add    esp,0x14
c001aea3:	53                   	push   ebx
c001aea4:	e8 69 0f ff ff       	call   c000be12 <PhysicalDisk::startCache()>
c001aea9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001aeac:	e8 09 20 ff ff       	call   c000ceba <createPartitionsForDisk(PhysicalDisk*)>
c001aeb1:	83 c4 14             	add    esp,0x14
c001aeb4:	31 c0                	xor    eax,eax
c001aeb6:	5b                   	pop    ebx
c001aeb7:	5e                   	pop    esi
c001aeb8:	c3                   	ret    
c001aeb9:	90                   	nop

c001aeba <SATA::SATA()>:
c001aeba:	83 ec 0c             	sub    esp,0xc
c001aebd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aec1:	83 ec 04             	sub    esp,0x4
c001aec4:	68 00 02 00 00       	push   0x200
c001aec9:	68 24 fc 01 c0       	push   0xc001fc24
c001aece:	50                   	push   eax
c001aecf:	e8 d6 0e ff ff       	call   c000bdaa <PhysicalDisk::PhysicalDisk(char const*, int)>
c001aed4:	83 c4 10             	add    esp,0x10
c001aed7:	ba 94 fc 01 c0       	mov    edx,0xc001fc94
c001aedc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aee0:	89 10                	mov    DWORD PTR [eax],edx
c001aee2:	90                   	nop
c001aee3:	83 c4 0c             	add    esp,0xc
c001aee6:	c3                   	ret    
c001aee7:	90                   	nop

c001aee8 <SATA::access(unsigned long long, int, void*, bool)>:
c001aee8:	55                   	push   ebp
c001aee9:	57                   	push   edi
c001aeea:	56                   	push   esi
c001aeeb:	53                   	push   ebx
c001aeec:	83 ec 2c             	sub    esp,0x2c
c001aeef:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001aef3:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001aef7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001aefb:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001aeff:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001af03:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c001af08:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001af0c:	7e 10                	jle    c001af1e <SATA::access(unsigned long long, int, void*, bool)+0x36>
c001af0e:	83 ec 0c             	sub    esp,0xc
c001af11:	68 34 fc 01 c0       	push   0xc001fc34
c001af16:	e8 8c 53 ff ff       	call   c00102a7 <KePanic(char const*)>
c001af1b:	83 c4 10             	add    esp,0x10
c001af1e:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001af24:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001af2a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001af30:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001af34:	89 d0                	mov    eax,edx
c001af36:	c1 e0 07             	shl    eax,0x7
c001af39:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001af3d:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001af47:	51                   	push   ecx
c001af48:	8d 42 02             	lea    eax,[edx+0x2]
c001af4b:	51                   	push   ecx
c001af4c:	c1 e0 07             	shl    eax,0x7
c001af4f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001af53:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001af57:	50                   	push   eax
c001af58:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c001af5e:	e8 b9 ec ff ff       	call   c0019c1c <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001af63:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001af67:	83 c4 10             	add    esp,0x10
c001af6a:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001af6f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001af73:	0f 84 4f 01 00 00    	je     c001b0c8 <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001af79:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001af7d:	c1 e0 09             	shl    eax,0x9
c001af80:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001af85:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001af89:	74 0e                	je     c001af99 <SATA::access(unsigned long long, int, void*, bool)+0xb1>
c001af8b:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c001af91:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001af95:	89 c1                	mov    ecx,eax
c001af97:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001af99:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001af9d:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001afa3:	8d 42 02             	lea    eax,[edx+0x2]
c001afa6:	c1 e0 07             	shl    eax,0x7
c001afa9:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001afad:	8b 00                	mov    eax,DWORD PTR [eax]
c001afaf:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001afb5:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001afbb:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001afbf:	c1 e1 05             	shl    ecx,0x5
c001afc2:	01 c8                	add    eax,ecx
c001afc4:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001afc8:	83 e1 01             	and    ecx,0x1
c001afcb:	89 ce                	mov    esi,ecx
c001afcd:	8a 08                	mov    cl,BYTE PTR [eax]
c001afcf:	c1 e6 06             	shl    esi,0x6
c001afd2:	83 e1 bf             	and    ecx,0xffffffbf
c001afd5:	09 f1                	or     ecx,esi
c001afd7:	88 08                	mov    BYTE PTR [eax],cl
c001afd9:	8b 08                	mov    ecx,DWORD PTR [eax]
c001afdb:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c001afe1:	81 c9 05 00 01 00    	or     ecx,0x10005
c001afe7:	89 08                	mov    DWORD PTR [eax],ecx
c001afe9:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001afef:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c001aff5:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c001affb:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c001affe:	50                   	push   eax
c001afff:	68 90 00 00 00       	push   0x90
c001b004:	6a 00                	push   0x0
c001b006:	56                   	push   esi
c001b007:	e8 c4 54 fe ff       	call   c00004d0 <memset>
c001b00c:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001b012:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c001b016:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c001b01c:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c001b020:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b024:	83 c4 10             	add    esp,0x10
c001b027:	48                   	dec    eax
c001b028:	25 ff ff 3f 00       	and    eax,0x3fffff
c001b02d:	89 c1                	mov    ecx,eax
c001b02f:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c001b035:	25 00 00 c0 ff       	and    eax,0xffc00000
c001b03a:	09 c8                	or     eax,ecx
c001b03c:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c001b042:	66 8b 06             	mov    ax,WORD PTR [esi]
c001b045:	80 8e 8f 00 00 00 80 	or     BYTE PTR [esi+0x8f],0x80
c001b04c:	66 25 00 7f          	and    ax,0x7f00
c001b050:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001b054:	66 0d 27 80          	or     ax,0x8027
c001b058:	80 7c 24 0c 01       	cmp    BYTE PTR [esp+0xc],0x1
c001b05d:	66 89 06             	mov    WORD PTR [esi],ax
c001b060:	19 c0                	sbb    eax,eax
c001b062:	83 e0 f0             	and    eax,0xfffffff0
c001b065:	83 c0 35             	add    eax,0x35
c001b068:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c001b06b:	89 e8                	mov    eax,ebp
c001b06d:	c1 e8 10             	shr    eax,0x10
c001b070:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c001b073:	89 e8                	mov    eax,ebp
c001b075:	c1 e8 18             	shr    eax,0x18
c001b078:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c001b07b:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001b07f:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c001b082:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b086:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c001b089:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001b08d:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c001b091:	89 d6                	mov    esi,edx
c001b093:	31 c0                	xor    eax,eax
c001b095:	c1 e6 07             	shl    esi,0x7
c001b098:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001b09c:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c001b0a2:	80 e1 88             	and    cl,0x88
c001b0a5:	74 0a                	je     c001b0b1 <SATA::access(unsigned long long, int, void*, bool)+0x1c9>
c001b0a7:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001b0ac:	74 0a                	je     c001b0b8 <SATA::access(unsigned long long, int, void*, bool)+0x1d0>
c001b0ae:	40                   	inc    eax
c001b0af:	eb eb                	jmp    c001b09c <SATA::access(unsigned long long, int, void*, bool)+0x1b4>
c001b0b1:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001b0b6:	75 17                	jne    c001b0cf <SATA::access(unsigned long long, int, void*, bool)+0x1e7>
c001b0b8:	83 ec 0c             	sub    esp,0xc
c001b0bb:	68 6d fc 01 c0       	push   0xc001fc6d
c001b0c0:	e8 8d f4 fe ff       	call   c000a552 <Dbg::kprintf(char const*, ...)>
c001b0c5:	83 c4 10             	add    esp,0x10
c001b0c8:	b8 01 00 00 00       	mov    eax,0x1
c001b0cd:	eb 5d                	jmp    c001b12c <SATA::access(unsigned long long, int, void*, bool)+0x244>
c001b0cf:	b8 01 00 00 00       	mov    eax,0x1
c001b0d4:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001b0d8:	c1 e2 07             	shl    edx,0x7
c001b0db:	d3 e0                	shl    eax,cl
c001b0dd:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c001b0e1:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c001b0e7:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c001b0ed:	85 c8                	test   eax,ecx
c001b0ef:	74 16                	je     c001b107 <SATA::access(unsigned long long, int, void*, bool)+0x21f>
c001b0f1:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c001b0f7:	0f ba e1 1e          	bt     ecx,0x1e
c001b0fb:	73 ea                	jae    c001b0e7 <SATA::access(unsigned long long, int, void*, bool)+0x1ff>
c001b0fd:	83 ec 0c             	sub    esp,0xc
c001b100:	68 7b fc 01 c0       	push   0xc001fc7b
c001b105:	eb b9                	jmp    c001b0c0 <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c001b107:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c001b10d:	0f ba e0 1e          	bt     eax,0x1e
c001b111:	72 b5                	jb     c001b0c8 <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001b113:	31 c0                	xor    eax,eax
c001b115:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001b11a:	75 10                	jne    c001b12c <SATA::access(unsigned long long, int, void*, bool)+0x244>
c001b11c:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c001b122:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001b126:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001b12a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b12c:	83 c4 2c             	add    esp,0x2c
c001b12f:	5b                   	pop    ebx
c001b130:	5e                   	pop    esi
c001b131:	5f                   	pop    edi
c001b132:	5d                   	pop    ebp
c001b133:	c3                   	ret    

c001b134 <SATA::read(unsigned long long, int, void*)>:
c001b134:	55                   	push   ebp
c001b135:	57                   	push   edi
c001b136:	56                   	push   esi
c001b137:	be 04 00 00 00       	mov    esi,0x4
c001b13c:	53                   	push   ebx
c001b13d:	83 ec 0c             	sub    esp,0xc
c001b140:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001b144:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b148:	8d 7b ff             	lea    edi,[ebx-0x1]
c001b14b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b14f:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001b153:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001b159:	0f 87 1a 02 00 00    	ja     c001b379 <SATA::read(unsigned long long, int, void*)+0x245>
c001b15f:	be 06 00 00 00       	mov    esi,0x6
c001b164:	85 c9                	test   ecx,ecx
c001b166:	0f 84 0d 02 00 00    	je     c001b379 <SATA::read(unsigned long long, int, void*)+0x245>
c001b16c:	56                   	push   esi
c001b16d:	56                   	push   esi
c001b16e:	6a 00                	push   0x0
c001b170:	51                   	push   ecx
c001b171:	53                   	push   ebx
c001b172:	52                   	push   edx
c001b173:	50                   	push   eax
c001b174:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001b178:	e8 6b fd ff ff       	call   c001aee8 <SATA::access(unsigned long long, int, void*, bool)>
c001b17d:	83 c4 20             	add    esp,0x20
c001b180:	89 c6                	mov    esi,eax
c001b182:	85 c0                	test   eax,eax
c001b184:	0f 85 ea 01 00 00    	jne    c001b374 <SATA::read(unsigned long long, int, void*)+0x240>
c001b18a:	01 1d 54 6b 02 c0    	add    DWORD PTR ds:0xc0026b54,ebx
c001b190:	bb 0a 00 00 00       	mov    ebx,0xa
c001b195:	50                   	push   eax
c001b196:	50                   	push   eax
c001b197:	6a 0f                	push   0xf
c001b199:	6a 00                	push   0x0
c001b19b:	e8 87 f2 ff ff       	call   c001a427 <combineColours(unsigned char, unsigned char)>
c001b1a0:	5a                   	pop    edx
c001b1a1:	0f b6 c0             	movzx  eax,al
c001b1a4:	59                   	pop    ecx
c001b1a5:	b9 10 27 00 00       	mov    ecx,0x2710
c001b1aa:	50                   	push   eax
c001b1ab:	a1 54 6b 02 c0       	mov    eax,ds:0xc0026b54
c001b1b0:	99                   	cdq    
c001b1b1:	f7 f9                	idiv   ecx
c001b1b3:	99                   	cdq    
c001b1b4:	f7 fb                	idiv   ebx
c001b1b6:	8d 42 30             	lea    eax,[edx+0x30]
c001b1b9:	0f b6 c0             	movzx  eax,al
c001b1bc:	50                   	push   eax
c001b1bd:	e8 54 f2 ff ff       	call   c001a416 <combineCharAndColour(char, unsigned char)>
c001b1c2:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001b1c8:	5f                   	pop    edi
c001b1c9:	5d                   	pop    ebp
c001b1ca:	bd e8 03 00 00       	mov    ebp,0x3e8
c001b1cf:	6a 0f                	push   0xf
c001b1d1:	6a 00                	push   0x0
c001b1d3:	e8 4f f2 ff ff       	call   c001a427 <combineColours(unsigned char, unsigned char)>
c001b1d8:	5a                   	pop    edx
c001b1d9:	0f b6 c0             	movzx  eax,al
c001b1dc:	59                   	pop    ecx
c001b1dd:	50                   	push   eax
c001b1de:	a1 54 6b 02 c0       	mov    eax,ds:0xc0026b54
c001b1e3:	99                   	cdq    
c001b1e4:	f7 fd                	idiv   ebp
c001b1e6:	99                   	cdq    
c001b1e7:	f7 fb                	idiv   ebx
c001b1e9:	8d 42 30             	lea    eax,[edx+0x30]
c001b1ec:	0f b6 c0             	movzx  eax,al
c001b1ef:	50                   	push   eax
c001b1f0:	e8 21 f2 ff ff       	call   c001a416 <combineCharAndColour(char, unsigned char)>
c001b1f5:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001b1fb:	5f                   	pop    edi
c001b1fc:	bf 64 00 00 00       	mov    edi,0x64
c001b201:	58                   	pop    eax
c001b202:	6a 0f                	push   0xf
c001b204:	6a 00                	push   0x0
c001b206:	e8 1c f2 ff ff       	call   c001a427 <combineColours(unsigned char, unsigned char)>
c001b20b:	5a                   	pop    edx
c001b20c:	0f b6 c0             	movzx  eax,al
c001b20f:	59                   	pop    ecx
c001b210:	50                   	push   eax
c001b211:	a1 54 6b 02 c0       	mov    eax,ds:0xc0026b54
c001b216:	99                   	cdq    
c001b217:	f7 ff                	idiv   edi
c001b219:	99                   	cdq    
c001b21a:	f7 fb                	idiv   ebx
c001b21c:	8d 42 30             	lea    eax,[edx+0x30]
c001b21f:	0f b6 c0             	movzx  eax,al
c001b222:	50                   	push   eax
c001b223:	e8 ee f1 ff ff       	call   c001a416 <combineCharAndColour(char, unsigned char)>
c001b228:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001b22e:	58                   	pop    eax
c001b22f:	5a                   	pop    edx
c001b230:	6a 0f                	push   0xf
c001b232:	6a 00                	push   0x0
c001b234:	e8 ee f1 ff ff       	call   c001a427 <combineColours(unsigned char, unsigned char)>
c001b239:	59                   	pop    ecx
c001b23a:	0f b6 c0             	movzx  eax,al
c001b23d:	5a                   	pop    edx
c001b23e:	50                   	push   eax
c001b23f:	a1 54 6b 02 c0       	mov    eax,ds:0xc0026b54
c001b244:	99                   	cdq    
c001b245:	f7 fb                	idiv   ebx
c001b247:	99                   	cdq    
c001b248:	f7 fb                	idiv   ebx
c001b24a:	8d 42 30             	lea    eax,[edx+0x30]
c001b24d:	0f b6 c0             	movzx  eax,al
c001b250:	50                   	push   eax
c001b251:	e8 c0 f1 ff ff       	call   c001a416 <combineCharAndColour(char, unsigned char)>
c001b256:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001b25c:	59                   	pop    ecx
c001b25d:	58                   	pop    eax
c001b25e:	6a 0f                	push   0xf
c001b260:	6a 00                	push   0x0
c001b262:	e8 c0 f1 ff ff       	call   c001a427 <combineColours(unsigned char, unsigned char)>
c001b267:	5a                   	pop    edx
c001b268:	0f b6 c0             	movzx  eax,al
c001b26b:	59                   	pop    ecx
c001b26c:	50                   	push   eax
c001b26d:	a1 54 6b 02 c0       	mov    eax,ds:0xc0026b54
c001b272:	99                   	cdq    
c001b273:	f7 fb                	idiv   ebx
c001b275:	8d 42 30             	lea    eax,[edx+0x30]
c001b278:	0f b6 c0             	movzx  eax,al
c001b27b:	50                   	push   eax
c001b27c:	e8 95 f1 ff ff       	call   c001a416 <combineCharAndColour(char, unsigned char)>
c001b281:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001b287:	58                   	pop    eax
c001b288:	5a                   	pop    edx
c001b289:	6a 0f                	push   0xf
c001b28b:	6a 00                	push   0x0
c001b28d:	e8 95 f1 ff ff       	call   c001a427 <combineColours(unsigned char, unsigned char)>
c001b292:	59                   	pop    ecx
c001b293:	0f b6 c0             	movzx  eax,al
c001b296:	5a                   	pop    edx
c001b297:	b9 10 27 00 00       	mov    ecx,0x2710
c001b29c:	50                   	push   eax
c001b29d:	a1 50 6b 02 c0       	mov    eax,ds:0xc0026b50
c001b2a2:	99                   	cdq    
c001b2a3:	f7 f9                	idiv   ecx
c001b2a5:	99                   	cdq    
c001b2a6:	f7 fb                	idiv   ebx
c001b2a8:	8d 42 30             	lea    eax,[edx+0x30]
c001b2ab:	0f b6 c0             	movzx  eax,al
c001b2ae:	50                   	push   eax
c001b2af:	e8 62 f1 ff ff       	call   c001a416 <combineCharAndColour(char, unsigned char)>
c001b2b4:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001b2ba:	59                   	pop    ecx
c001b2bb:	58                   	pop    eax
c001b2bc:	6a 0f                	push   0xf
c001b2be:	6a 00                	push   0x0
c001b2c0:	e8 62 f1 ff ff       	call   c001a427 <combineColours(unsigned char, unsigned char)>
c001b2c5:	5a                   	pop    edx
c001b2c6:	0f b6 c0             	movzx  eax,al
c001b2c9:	59                   	pop    ecx
c001b2ca:	50                   	push   eax
c001b2cb:	a1 50 6b 02 c0       	mov    eax,ds:0xc0026b50
c001b2d0:	99                   	cdq    
c001b2d1:	f7 fd                	idiv   ebp
c001b2d3:	99                   	cdq    
c001b2d4:	f7 fb                	idiv   ebx
c001b2d6:	8d 42 30             	lea    eax,[edx+0x30]
c001b2d9:	0f b6 c0             	movzx  eax,al
c001b2dc:	50                   	push   eax
c001b2dd:	e8 34 f1 ff ff       	call   c001a416 <combineCharAndColour(char, unsigned char)>
c001b2e2:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001b2e8:	5d                   	pop    ebp
c001b2e9:	58                   	pop    eax
c001b2ea:	6a 0f                	push   0xf
c001b2ec:	6a 00                	push   0x0
c001b2ee:	e8 34 f1 ff ff       	call   c001a427 <combineColours(unsigned char, unsigned char)>
c001b2f3:	5a                   	pop    edx
c001b2f4:	0f b6 c0             	movzx  eax,al
c001b2f7:	59                   	pop    ecx
c001b2f8:	50                   	push   eax
c001b2f9:	a1 50 6b 02 c0       	mov    eax,ds:0xc0026b50
c001b2fe:	99                   	cdq    
c001b2ff:	f7 ff                	idiv   edi
c001b301:	99                   	cdq    
c001b302:	f7 fb                	idiv   ebx
c001b304:	8d 42 30             	lea    eax,[edx+0x30]
c001b307:	0f b6 c0             	movzx  eax,al
c001b30a:	50                   	push   eax
c001b30b:	e8 06 f1 ff ff       	call   c001a416 <combineCharAndColour(char, unsigned char)>
c001b310:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001b316:	5f                   	pop    edi
c001b317:	5d                   	pop    ebp
c001b318:	6a 0f                	push   0xf
c001b31a:	6a 00                	push   0x0
c001b31c:	e8 06 f1 ff ff       	call   c001a427 <combineColours(unsigned char, unsigned char)>
c001b321:	5a                   	pop    edx
c001b322:	0f b6 c0             	movzx  eax,al
c001b325:	59                   	pop    ecx
c001b326:	50                   	push   eax
c001b327:	a1 50 6b 02 c0       	mov    eax,ds:0xc0026b50
c001b32c:	99                   	cdq    
c001b32d:	f7 fb                	idiv   ebx
c001b32f:	99                   	cdq    
c001b330:	f7 fb                	idiv   ebx
c001b332:	8d 42 30             	lea    eax,[edx+0x30]
c001b335:	0f b6 c0             	movzx  eax,al
c001b338:	50                   	push   eax
c001b339:	e8 d8 f0 ff ff       	call   c001a416 <combineCharAndColour(char, unsigned char)>
c001b33e:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001b344:	5f                   	pop    edi
c001b345:	5d                   	pop    ebp
c001b346:	6a 0f                	push   0xf
c001b348:	6a 00                	push   0x0
c001b34a:	e8 d8 f0 ff ff       	call   c001a427 <combineColours(unsigned char, unsigned char)>
c001b34f:	5a                   	pop    edx
c001b350:	0f b6 c0             	movzx  eax,al
c001b353:	59                   	pop    ecx
c001b354:	50                   	push   eax
c001b355:	a1 50 6b 02 c0       	mov    eax,ds:0xc0026b50
c001b35a:	99                   	cdq    
c001b35b:	f7 fb                	idiv   ebx
c001b35d:	83 c2 30             	add    edx,0x30
c001b360:	0f b6 d2             	movzx  edx,dl
c001b363:	52                   	push   edx
c001b364:	e8 ad f0 ff ff       	call   c001a416 <combineCharAndColour(char, unsigned char)>
c001b369:	83 c4 10             	add    esp,0x10
c001b36c:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001b372:	eb 05                	jmp    c001b379 <SATA::read(unsigned long long, int, void*)+0x245>
c001b374:	be 01 00 00 00       	mov    esi,0x1
c001b379:	83 c4 0c             	add    esp,0xc
c001b37c:	89 f0                	mov    eax,esi
c001b37e:	5b                   	pop    ebx
c001b37f:	5e                   	pop    esi
c001b380:	5f                   	pop    edi
c001b381:	5d                   	pop    ebp
c001b382:	c3                   	ret    
c001b383:	90                   	nop

c001b384 <SATA::write(unsigned long long, int, void*)>:
c001b384:	55                   	push   ebp
c001b385:	b8 04 00 00 00       	mov    eax,0x4
c001b38a:	57                   	push   edi
c001b38b:	56                   	push   esi
c001b38c:	53                   	push   ebx
c001b38d:	83 ec 1c             	sub    esp,0x1c
c001b390:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001b394:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001b398:	8d 75 ff             	lea    esi,[ebp-0x1]
c001b39b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001b39f:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c001b3a3:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001b3a9:	0f 87 32 02 00 00    	ja     c001b5e1 <SATA::write(unsigned long long, int, void*)+0x25d>
c001b3af:	b8 06 00 00 00       	mov    eax,0x6
c001b3b4:	85 ff                	test   edi,edi
c001b3b6:	0f 84 25 02 00 00    	je     c001b5e1 <SATA::write(unsigned long long, int, void*)+0x25d>
c001b3bc:	89 ee                	mov    esi,ebp
c001b3be:	c1 e6 09             	shl    esi,0x9
c001b3c1:	01 fe                	add    esi,edi
c001b3c3:	89 c8                	mov    eax,ecx
c001b3c5:	89 da                	mov    edx,ebx
c001b3c7:	83 c0 01             	add    eax,0x1
c001b3ca:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b3ce:	83 d2 00             	adc    edx,0x0
c001b3d1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001b3d5:	50                   	push   eax
c001b3d6:	50                   	push   eax
c001b3d7:	6a 01                	push   0x1
c001b3d9:	57                   	push   edi
c001b3da:	81 c7 00 02 00 00    	add    edi,0x200
c001b3e0:	6a 01                	push   0x1
c001b3e2:	53                   	push   ebx
c001b3e3:	51                   	push   ecx
c001b3e4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001b3e8:	e8 fb fa ff ff       	call   c001aee8 <SATA::access(unsigned long long, int, void*, bool)>
c001b3ed:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001b3f1:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001b3f5:	83 c4 20             	add    esp,0x20
c001b3f8:	39 f7                	cmp    edi,esi
c001b3fa:	75 c7                	jne    c001b3c3 <SATA::write(unsigned long long, int, void*)+0x3f>
c001b3fc:	bb 0a 00 00 00       	mov    ebx,0xa
c001b401:	01 2d 50 6b 02 c0    	add    DWORD PTR ds:0xc0026b50,ebp
c001b407:	bd 10 27 00 00       	mov    ebp,0x2710
c001b40c:	50                   	push   eax
c001b40d:	50                   	push   eax
c001b40e:	6a 0f                	push   0xf
c001b410:	6a 00                	push   0x0
c001b412:	e8 10 f0 ff ff       	call   c001a427 <combineColours(unsigned char, unsigned char)>
c001b417:	5a                   	pop    edx
c001b418:	0f b6 c0             	movzx  eax,al
c001b41b:	59                   	pop    ecx
c001b41c:	50                   	push   eax
c001b41d:	a1 54 6b 02 c0       	mov    eax,ds:0xc0026b54
c001b422:	99                   	cdq    
c001b423:	f7 fd                	idiv   ebp
c001b425:	99                   	cdq    
c001b426:	f7 fb                	idiv   ebx
c001b428:	8d 42 30             	lea    eax,[edx+0x30]
c001b42b:	0f b6 c0             	movzx  eax,al
c001b42e:	50                   	push   eax
c001b42f:	e8 e2 ef ff ff       	call   c001a416 <combineCharAndColour(char, unsigned char)>
c001b434:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001b43a:	5e                   	pop    esi
c001b43b:	5f                   	pop    edi
c001b43c:	bf e8 03 00 00       	mov    edi,0x3e8
c001b441:	6a 0f                	push   0xf
c001b443:	6a 00                	push   0x0
c001b445:	e8 dd ef ff ff       	call   c001a427 <combineColours(unsigned char, unsigned char)>
c001b44a:	5a                   	pop    edx
c001b44b:	0f b6 c0             	movzx  eax,al
c001b44e:	59                   	pop    ecx
c001b44f:	50                   	push   eax
c001b450:	a1 54 6b 02 c0       	mov    eax,ds:0xc0026b54
c001b455:	99                   	cdq    
c001b456:	f7 ff                	idiv   edi
c001b458:	99                   	cdq    
c001b459:	f7 fb                	idiv   ebx
c001b45b:	8d 42 30             	lea    eax,[edx+0x30]
c001b45e:	0f b6 c0             	movzx  eax,al
c001b461:	50                   	push   eax
c001b462:	e8 af ef ff ff       	call   c001a416 <combineCharAndColour(char, unsigned char)>
c001b467:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001b46d:	5e                   	pop    esi
c001b46e:	be 64 00 00 00       	mov    esi,0x64
c001b473:	58                   	pop    eax
c001b474:	6a 0f                	push   0xf
c001b476:	6a 00                	push   0x0
c001b478:	e8 aa ef ff ff       	call   c001a427 <combineColours(unsigned char, unsigned char)>
c001b47d:	5a                   	pop    edx
c001b47e:	0f b6 c0             	movzx  eax,al
c001b481:	59                   	pop    ecx
c001b482:	50                   	push   eax
c001b483:	a1 54 6b 02 c0       	mov    eax,ds:0xc0026b54
c001b488:	99                   	cdq    
c001b489:	f7 fe                	idiv   esi
c001b48b:	99                   	cdq    
c001b48c:	f7 fb                	idiv   ebx
c001b48e:	8d 42 30             	lea    eax,[edx+0x30]
c001b491:	0f b6 c0             	movzx  eax,al
c001b494:	50                   	push   eax
c001b495:	e8 7c ef ff ff       	call   c001a416 <combineCharAndColour(char, unsigned char)>
c001b49a:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001b4a0:	58                   	pop    eax
c001b4a1:	5a                   	pop    edx
c001b4a2:	6a 0f                	push   0xf
c001b4a4:	6a 00                	push   0x0
c001b4a6:	e8 7c ef ff ff       	call   c001a427 <combineColours(unsigned char, unsigned char)>
c001b4ab:	59                   	pop    ecx
c001b4ac:	0f b6 c0             	movzx  eax,al
c001b4af:	5a                   	pop    edx
c001b4b0:	50                   	push   eax
c001b4b1:	a1 54 6b 02 c0       	mov    eax,ds:0xc0026b54
c001b4b6:	99                   	cdq    
c001b4b7:	f7 fb                	idiv   ebx
c001b4b9:	99                   	cdq    
c001b4ba:	f7 fb                	idiv   ebx
c001b4bc:	8d 42 30             	lea    eax,[edx+0x30]
c001b4bf:	0f b6 c0             	movzx  eax,al
c001b4c2:	50                   	push   eax
c001b4c3:	e8 4e ef ff ff       	call   c001a416 <combineCharAndColour(char, unsigned char)>
c001b4c8:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001b4ce:	59                   	pop    ecx
c001b4cf:	58                   	pop    eax
c001b4d0:	6a 0f                	push   0xf
c001b4d2:	6a 00                	push   0x0
c001b4d4:	e8 4e ef ff ff       	call   c001a427 <combineColours(unsigned char, unsigned char)>
c001b4d9:	5a                   	pop    edx
c001b4da:	0f b6 c0             	movzx  eax,al
c001b4dd:	59                   	pop    ecx
c001b4de:	50                   	push   eax
c001b4df:	a1 54 6b 02 c0       	mov    eax,ds:0xc0026b54
c001b4e4:	99                   	cdq    
c001b4e5:	f7 fb                	idiv   ebx
c001b4e7:	83 c2 30             	add    edx,0x30
c001b4ea:	0f b6 d2             	movzx  edx,dl
c001b4ed:	52                   	push   edx
c001b4ee:	e8 23 ef ff ff       	call   c001a416 <combineCharAndColour(char, unsigned char)>
c001b4f3:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001b4f9:	58                   	pop    eax
c001b4fa:	5a                   	pop    edx
c001b4fb:	6a 0f                	push   0xf
c001b4fd:	6a 00                	push   0x0
c001b4ff:	e8 23 ef ff ff       	call   c001a427 <combineColours(unsigned char, unsigned char)>
c001b504:	59                   	pop    ecx
c001b505:	0f b6 c0             	movzx  eax,al
c001b508:	5a                   	pop    edx
c001b509:	50                   	push   eax
c001b50a:	a1 50 6b 02 c0       	mov    eax,ds:0xc0026b50
c001b50f:	99                   	cdq    
c001b510:	f7 fd                	idiv   ebp
c001b512:	99                   	cdq    
c001b513:	f7 fb                	idiv   ebx
c001b515:	8d 42 30             	lea    eax,[edx+0x30]
c001b518:	0f b6 c0             	movzx  eax,al
c001b51b:	50                   	push   eax
c001b51c:	e8 f5 ee ff ff       	call   c001a416 <combineCharAndColour(char, unsigned char)>
c001b521:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001b527:	59                   	pop    ecx
c001b528:	5d                   	pop    ebp
c001b529:	6a 0f                	push   0xf
c001b52b:	6a 00                	push   0x0
c001b52d:	e8 f5 ee ff ff       	call   c001a427 <combineColours(unsigned char, unsigned char)>
c001b532:	5a                   	pop    edx
c001b533:	0f b6 c0             	movzx  eax,al
c001b536:	59                   	pop    ecx
c001b537:	50                   	push   eax
c001b538:	a1 50 6b 02 c0       	mov    eax,ds:0xc0026b50
c001b53d:	99                   	cdq    
c001b53e:	f7 ff                	idiv   edi
c001b540:	99                   	cdq    
c001b541:	f7 fb                	idiv   ebx
c001b543:	8d 42 30             	lea    eax,[edx+0x30]
c001b546:	0f b6 c0             	movzx  eax,al
c001b549:	50                   	push   eax
c001b54a:	e8 c7 ee ff ff       	call   c001a416 <combineCharAndColour(char, unsigned char)>
c001b54f:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001b555:	5f                   	pop    edi
c001b556:	5d                   	pop    ebp
c001b557:	6a 0f                	push   0xf
c001b559:	6a 00                	push   0x0
c001b55b:	e8 c7 ee ff ff       	call   c001a427 <combineColours(unsigned char, unsigned char)>
c001b560:	5a                   	pop    edx
c001b561:	0f b6 c0             	movzx  eax,al
c001b564:	59                   	pop    ecx
c001b565:	50                   	push   eax
c001b566:	a1 50 6b 02 c0       	mov    eax,ds:0xc0026b50
c001b56b:	99                   	cdq    
c001b56c:	f7 fe                	idiv   esi
c001b56e:	99                   	cdq    
c001b56f:	f7 fb                	idiv   ebx
c001b571:	8d 42 30             	lea    eax,[edx+0x30]
c001b574:	0f b6 c0             	movzx  eax,al
c001b577:	50                   	push   eax
c001b578:	e8 99 ee ff ff       	call   c001a416 <combineCharAndColour(char, unsigned char)>
c001b57d:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001b583:	5e                   	pop    esi
c001b584:	5f                   	pop    edi
c001b585:	6a 0f                	push   0xf
c001b587:	6a 00                	push   0x0
c001b589:	e8 99 ee ff ff       	call   c001a427 <combineColours(unsigned char, unsigned char)>
c001b58e:	5d                   	pop    ebp
c001b58f:	0f b6 c0             	movzx  eax,al
c001b592:	5a                   	pop    edx
c001b593:	50                   	push   eax
c001b594:	a1 50 6b 02 c0       	mov    eax,ds:0xc0026b50
c001b599:	99                   	cdq    
c001b59a:	f7 fb                	idiv   ebx
c001b59c:	99                   	cdq    
c001b59d:	f7 fb                	idiv   ebx
c001b59f:	8d 42 30             	lea    eax,[edx+0x30]
c001b5a2:	0f b6 c0             	movzx  eax,al
c001b5a5:	50                   	push   eax
c001b5a6:	e8 6b ee ff ff       	call   c001a416 <combineCharAndColour(char, unsigned char)>
c001b5ab:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001b5b1:	59                   	pop    ecx
c001b5b2:	5e                   	pop    esi
c001b5b3:	6a 0f                	push   0xf
c001b5b5:	6a 00                	push   0x0
c001b5b7:	e8 6b ee ff ff       	call   c001a427 <combineColours(unsigned char, unsigned char)>
c001b5bc:	5f                   	pop    edi
c001b5bd:	0f b6 c0             	movzx  eax,al
c001b5c0:	5d                   	pop    ebp
c001b5c1:	50                   	push   eax
c001b5c2:	a1 50 6b 02 c0       	mov    eax,ds:0xc0026b50
c001b5c7:	99                   	cdq    
c001b5c8:	f7 fb                	idiv   ebx
c001b5ca:	83 c2 30             	add    edx,0x30
c001b5cd:	0f b6 d2             	movzx  edx,dl
c001b5d0:	52                   	push   edx
c001b5d1:	e8 40 ee ff ff       	call   c001a416 <combineCharAndColour(char, unsigned char)>
c001b5d6:	83 c4 10             	add    esp,0x10
c001b5d9:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001b5df:	31 c0                	xor    eax,eax
c001b5e1:	83 c4 1c             	add    esp,0x1c
c001b5e4:	5b                   	pop    ebx
c001b5e5:	5e                   	pop    esi
c001b5e6:	5f                   	pop    edi
c001b5e7:	5d                   	pop    ebp
c001b5e8:	c3                   	ret    
c001b5e9:	90                   	nop

c001b5ea <SATAPI::write(unsigned long long, int, void*)>:
c001b5ea:	b8 03 00 00 00       	mov    eax,0x3
c001b5ef:	c3                   	ret    

c001b5f0 <SATAPI::close(int, int, void*)>:
c001b5f0:	83 ec 0c             	sub    esp,0xc
c001b5f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b5f7:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001b5fd:	85 c0                	test   eax,eax
c001b5ff:	74 0c                	je     c001b60d <SATAPI::close(int, int, void*)+0x1d>
c001b601:	83 ec 0c             	sub    esp,0xc
c001b604:	8b 10                	mov    edx,DWORD PTR [eax]
c001b606:	50                   	push   eax
c001b607:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001b60a:	83 c4 10             	add    esp,0x10
c001b60d:	31 c0                	xor    eax,eax
c001b60f:	83 c4 0c             	add    esp,0xc
c001b612:	c3                   	ret    
c001b613:	90                   	nop

c001b614 <SATAPI::SATAPI()>:
c001b614:	83 ec 0c             	sub    esp,0xc
c001b617:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b61b:	83 ec 04             	sub    esp,0x4
c001b61e:	68 00 08 00 00       	push   0x800
c001b623:	68 c4 fc 01 c0       	push   0xc001fcc4
c001b628:	50                   	push   eax
c001b629:	e8 7c 07 ff ff       	call   c000bdaa <PhysicalDisk::PhysicalDisk(char const*, int)>
c001b62e:	83 c4 10             	add    esp,0x10
c001b631:	ba a4 fd 01 c0       	mov    edx,0xc001fda4
c001b636:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b63a:	89 10                	mov    DWORD PTR [eax],edx
c001b63c:	90                   	nop
c001b63d:	83 c4 0c             	add    esp,0xc
c001b640:	c3                   	ret    
c001b641:	90                   	nop

c001b642 <SATAPI::diskRemoved()>:
c001b642:	c3                   	ret    
c001b643:	90                   	nop

c001b644 <SATAPI::diskInserted()>:
c001b644:	83 ec 18             	sub    esp,0x18
c001b647:	68 d0 fc 01 c0       	push   0xc001fcd0
c001b64c:	e8 01 ef fe ff       	call   c000a552 <Dbg::kprintf(char const*, ...)>
c001b651:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b655:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c001b65c:	83 c4 1c             	add    esp,0x1c
c001b65f:	c3                   	ret    

c001b660 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c001b660:	55                   	push   ebp
c001b661:	57                   	push   edi
c001b662:	56                   	push   esi
c001b663:	53                   	push   ebx
c001b664:	83 ec 34             	sub    esp,0x34
c001b667:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001b66b:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001b66f:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c001b673:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001b677:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c001b67b:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c001b681:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001b687:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001b68b:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c001b691:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b695:	83 c0 02             	add    eax,0x2
c001b698:	c1 e0 07             	shl    eax,0x7
c001b69b:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001b69f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b6a3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b6a7:	c1 e0 07             	shl    eax,0x7
c001b6aa:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001b6ae:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001b6b2:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001b6bc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001b6c0:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001b6c6:	e8 51 e5 ff ff       	call   c0019c1c <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001b6cb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001b6cf:	83 c4 10             	add    esp,0x10
c001b6d2:	b8 01 00 00 00       	mov    eax,0x1
c001b6d7:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001b6dc:	0f 84 49 02 00 00    	je     c001b92b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2cb>
c001b6e2:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001b6e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b6ec:	8b 00                	mov    eax,DWORD PTR [eax]
c001b6ee:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001b6f4:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001b6fa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b6fe:	c1 e1 05             	shl    ecx,0x5
c001b701:	01 c8                	add    eax,ecx
c001b703:	8b 08                	mov    ecx,DWORD PTR [eax]
c001b705:	81 e1 80 ff 00 00    	and    ecx,0xff80
c001b70b:	81 c9 25 00 01 00    	or     ecx,0x10025
c001b711:	89 08                	mov    DWORD PTR [eax],ecx
c001b713:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001b719:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c001b71f:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c001b725:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c001b728:	8d 7b 40             	lea    edi,[ebx+0x40]
c001b72b:	50                   	push   eax
c001b72c:	68 90 00 00 00       	push   0x90
c001b731:	6a 00                	push   0x0
c001b733:	53                   	push   ebx
c001b734:	e8 97 4d fe ff       	call   c00004d0 <memset>
c001b739:	b9 0c 00 00 00       	mov    ecx,0xc
c001b73e:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c001b742:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b744:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c001b74a:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c001b74e:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c001b754:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c001b758:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001b75c:	48                   	dec    eax
c001b75d:	25 ff ff 3f 00       	and    eax,0x3fffff
c001b762:	89 c1                	mov    ecx,eax
c001b764:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c001b76a:	25 00 00 c0 ff       	and    eax,0xffc00000
c001b76f:	09 c8                	or     eax,ecx
c001b771:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c001b777:	66 8b 03             	mov    ax,WORD PTR [ebx]
c001b77a:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c001b781:	66 25 00 7f          	and    ax,0x7f00
c001b785:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001b789:	66 0d 27 80          	or     ax,0x8027
c001b78d:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c001b791:	66 89 03             	mov    WORD PTR [ebx],ax
c001b794:	89 d0                	mov    eax,edx
c001b796:	c1 ea 18             	shr    edx,0x18
c001b799:	c1 e8 10             	shr    eax,0x10
c001b79c:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c001b79f:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c001b7a2:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001b7a6:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c001b7a9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b7ad:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c001b7b0:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001b7b4:	83 c4 10             	add    esp,0x10
c001b7b7:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c001b7bb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b7bf:	31 c0                	xor    eax,eax
c001b7c1:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c001b7c7:	80 e1 88             	and    cl,0x88
c001b7ca:	74 0a                	je     c001b7d6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x176>
c001b7cc:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001b7d1:	74 0a                	je     c001b7dd <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x17d>
c001b7d3:	40                   	inc    eax
c001b7d4:	eb eb                	jmp    c001b7c1 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x161>
c001b7d6:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001b7db:	75 43                	jne    c001b820 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1c0>
c001b7dd:	83 ec 0c             	sub    esp,0xc
c001b7e0:	68 e8 fc 01 c0       	push   0xc001fce8
c001b7e5:	e8 68 ed fe ff       	call   c000a552 <Dbg::kprintf(char const*, ...)>
c001b7ea:	58                   	pop    eax
c001b7eb:	5a                   	pop    edx
c001b7ec:	68 fd fc 01 c0       	push   0xc001fcfd
c001b7f1:	ff 35 04 2f 02 c0    	push   DWORD PTR ds:0xc0022f04
c001b7f7:	e8 3a cf fe ff       	call   c0008736 <VgaText::puts(char const*)>
c001b7fc:	59                   	pop    ecx
c001b7fd:	5b                   	pop    ebx
c001b7fe:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001b802:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001b808:	e8 a9 e4 ff ff       	call   c0019cb6 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001b80d:	5e                   	pop    esi
c001b80e:	5f                   	pop    edi
c001b80f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001b813:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001b819:	e8 78 e4 ff ff       	call   c0019c96 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001b81e:	eb 48                	jmp    c001b868 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x208>
c001b820:	be 01 00 00 00       	mov    esi,0x1
c001b825:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001b829:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001b82d:	d3 e6                	shl    esi,cl
c001b82f:	c1 e7 07             	shl    edi,0x7
c001b832:	89 b2 38 01 00 00    	mov    DWORD PTR [edx+0x138],esi
c001b838:	bb a8 e4 ff ff       	mov    ebx,0xffffe4a8
c001b83d:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c001b841:	8b 87 38 01 00 00    	mov    eax,DWORD PTR [edi+0x138]
c001b847:	85 c6                	test   esi,eax
c001b849:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c001b84f:	0f 84 a3 00 00 00    	je     c001b8f8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x298>
c001b855:	0f ba e0 1e          	bt     eax,0x1e
c001b859:	73 1a                	jae    c001b875 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x215>
c001b85b:	83 ec 0c             	sub    esp,0xc
c001b85e:	68 0f fd 01 c0       	push   0xc001fd0f
c001b863:	e8 ea ec fe ff       	call   c000a552 <Dbg::kprintf(char const*, ...)>
c001b868:	83 c4 10             	add    esp,0x10
c001b86b:	b8 01 00 00 00       	mov    eax,0x1
c001b870:	e9 b6 00 00 00       	jmp    c001b92b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2cb>
c001b875:	8d 83 70 17 00 00    	lea    eax,[ebx+0x1770]
c001b87b:	83 f8 0d             	cmp    eax,0xd
c001b87e:	77 0a                	ja     c001b88a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x22a>
c001b880:	83 ec 0c             	sub    esp,0xc
c001b883:	68 c8 00 00 00       	push   0xc8
c001b888:	eb 28                	jmp    c001b8b2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x252>
c001b88a:	8d 83 88 13 00 00    	lea    eax,[ebx+0x1388]
c001b890:	83 f8 0d             	cmp    eax,0xd
c001b893:	77 0a                	ja     c001b89f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x23f>
c001b895:	83 ec 0c             	sub    esp,0xc
c001b898:	68 58 02 00 00       	push   0x258
c001b89d:	eb 13                	jmp    c001b8b2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x252>
c001b89f:	8d 83 a0 0f 00 00    	lea    eax,[ebx+0xfa0]
c001b8a5:	83 f8 06             	cmp    eax,0x6
c001b8a8:	77 10                	ja     c001b8ba <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25a>
c001b8aa:	83 ec 0c             	sub    esp,0xc
c001b8ad:	68 dc 05 00 00       	push   0x5dc
c001b8b2:	e8 0d 82 ff ff       	call   c0013ac4 <milliTenthSleep(unsigned int)>
c001b8b7:	83 c4 10             	add    esp,0x10
c001b8ba:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001b8be:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c001b8c1:	75 06                	jne    c001b8c9 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x269>
c001b8c3:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c001b8c7:	74 15                	je     c001b8de <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x27e>
c001b8c9:	83 fb 06             	cmp    ebx,0x6
c001b8cc:	77 10                	ja     c001b8de <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x27e>
c001b8ce:	83 ec 0c             	sub    esp,0xc
c001b8d1:	68 c4 09 00 00       	push   0x9c4
c001b8d6:	e8 e9 81 ff ff       	call   c0013ac4 <milliTenthSleep(unsigned int)>
c001b8db:	83 c4 10             	add    esp,0x10
c001b8de:	43                   	inc    ebx
c001b8df:	81 fb b9 0b 00 00    	cmp    ebx,0xbb9
c001b8e5:	0f 85 56 ff ff ff    	jne    c001b841 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1e1>
c001b8eb:	83 ec 0c             	sub    esp,0xc
c001b8ee:	68 22 fd 01 c0       	push   0xc001fd22
c001b8f3:	e9 6b ff ff ff       	jmp    c001b863 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x203>
c001b8f8:	0f ba e0 1e          	bt     eax,0x1e
c001b8fc:	73 0d                	jae    c001b90b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2ab>
c001b8fe:	83 ec 0c             	sub    esp,0xc
c001b901:	68 36 fd 01 c0       	push   0xc001fd36
c001b906:	e9 58 ff ff ff       	jmp    c001b863 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x203>
c001b90b:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c001b910:	74 17                	je     c001b929 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2c9>
c001b912:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c001b917:	74 10                	je     c001b929 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2c9>
c001b919:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c001b91f:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001b923:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001b927:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b929:	31 c0                	xor    eax,eax
c001b92b:	83 c4 2c             	add    esp,0x2c
c001b92e:	5b                   	pop    ebx
c001b92f:	5e                   	pop    esi
c001b930:	5f                   	pop    edi
c001b931:	5d                   	pop    ebp
c001b932:	c3                   	ret    
c001b933:	90                   	nop

c001b934 <SATAPI::eject()>:
c001b934:	57                   	push   edi
c001b935:	b9 03 00 00 00       	mov    ecx,0x3
c001b93a:	83 ec 18             	sub    esp,0x18
c001b93d:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001b941:	fc                   	cld    
c001b942:	31 c0                	xor    eax,eax
c001b944:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001b946:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001b94b:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001b950:	50                   	push   eax
c001b951:	6a 00                	push   0x0
c001b953:	6a 00                	push   0x0
c001b955:	6a 00                	push   0x0
c001b957:	6a 00                	push   0x0
c001b959:	6a 02                	push   0x2
c001b95b:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001b95f:	50                   	push   eax
c001b960:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001b964:	e8 f7 fc ff ff       	call   c001b660 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001b969:	31 c0                	xor    eax,eax
c001b96b:	83 c4 38             	add    esp,0x38
c001b96e:	5f                   	pop    edi
c001b96f:	c3                   	ret    

c001b970 <SATAPI::detectMedia()>:
c001b970:	53                   	push   ebx
c001b971:	83 ec 14             	sub    esp,0x14
c001b974:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001b978:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001b97e:	e8 05 1c ff ff       	call   c000d588 <VCache::writeWriteBuffer()>
c001b983:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001b989:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001b98d:	83 c4 18             	add    esp,0x18
c001b990:	5b                   	pop    ebx
c001b991:	e9 e2 1b ff ff       	jmp    c000d578 <VCache::invalidateReadBuffer()>

c001b996 <SATAPI::open(int, int, void*)>:
c001b996:	56                   	push   esi
c001b997:	53                   	push   ebx
c001b998:	51                   	push   ecx
c001b999:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b99d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b9a1:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001b9ab:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001b9b1:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001b9bb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b9bf:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001b9c9:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001b9cf:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001b9d6:	e8 ba c0 fe ff       	call   c0007a95 <Phys::allocatePage()>
c001b9db:	89 c6                	mov    esi,eax
c001b9dd:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001b9e3:	81 c6 00 10 00 00    	add    esi,0x1000
c001b9e9:	e8 a7 c0 fe ff       	call   c0007a95 <Phys::allocatePage()>
c001b9ee:	39 c6                	cmp    esi,eax
c001b9f0:	74 10                	je     c001ba02 <SATAPI::open(int, int, void*)+0x6c>
c001b9f2:	83 ec 0c             	sub    esp,0xc
c001b9f5:	68 4b fd 01 c0       	push   0xc001fd4b
c001b9fa:	e8 a8 48 ff ff       	call   c00102a7 <KePanic(char const*)>
c001b9ff:	83 c4 10             	add    esp,0x10
c001ba02:	83 ec 0c             	sub    esp,0xc
c001ba05:	6a 02                	push   0x2
c001ba07:	e8 89 d8 fe ff       	call   c0009295 <Virt::allocateKernelVirtualPages(int)>
c001ba0c:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c001ba12:	6a 03                	push   0x3
c001ba14:	50                   	push   eax
c001ba15:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c001ba1b:	ff 35 b0 2f 02 c0    	push   DWORD PTR ds:0xc0022fb0
c001ba21:	e8 32 df fe ff       	call   c0009958 <VAS::mapPage(unsigned long, unsigned long, int)>
c001ba26:	83 c4 14             	add    esp,0x14
c001ba29:	68 74 01 00 00       	push   0x174
c001ba2e:	e8 86 bd fe ff       	call   c00077b9 <malloc>
c001ba33:	83 c4 0c             	add    esp,0xc
c001ba36:	89 c6                	mov    esi,eax
c001ba38:	6a 00                	push   0x0
c001ba3a:	68 ff ff ff 7f       	push   0x7fffffff
c001ba3f:	6a 00                	push   0x0
c001ba41:	6a 00                	push   0x0
c001ba43:	53                   	push   ebx
c001ba44:	68 61 fd 01 c0       	push   0xc001fd61
c001ba49:	50                   	push   eax
c001ba4a:	e8 37 10 ff ff       	call   c000ca86 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001ba4f:	83 c4 14             	add    esp,0x14
c001ba52:	56                   	push   esi
c001ba53:	e8 e4 10 ff ff       	call   c000cb3c <LogicalDisk::assignDriveLetter()>
c001ba58:	5a                   	pop    edx
c001ba59:	0f be c0             	movsx  eax,al
c001ba5c:	59                   	pop    ecx
c001ba5d:	50                   	push   eax
c001ba5e:	68 c8 fb 01 c0       	push   0xc001fbc8
c001ba63:	e8 ea ea fe ff       	call   c000a552 <Dbg::kprintf(char const*, ...)>
c001ba68:	58                   	pop    eax
c001ba69:	5a                   	pop    edx
c001ba6a:	56                   	push   esi
c001ba6b:	53                   	push   ebx
c001ba6c:	e8 6b ff fe ff       	call   c000b9dc <Device::addChild(Device*)>
c001ba71:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c001ba77:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ba7a:	e8 93 03 ff ff       	call   c000be12 <PhysicalDisk::startCache()>
c001ba7f:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c001ba86:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ba89:	e8 e2 fe ff ff       	call   c001b970 <SATAPI::detectMedia()>
c001ba8e:	83 c4 14             	add    esp,0x14
c001ba91:	31 c0                	xor    eax,eax
c001ba93:	5b                   	pop    ebx
c001ba94:	5e                   	pop    esi
c001ba95:	c3                   	ret    

c001ba96 <SATAPI::read(unsigned long long, int, void*)>:
c001ba96:	57                   	push   edi
c001ba97:	56                   	push   esi
c001ba98:	53                   	push   ebx
c001ba99:	83 ec 30             	sub    esp,0x30
c001ba9c:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001baa0:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c001baa4:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c001baa8:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001baac:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001bab0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001bab4:	83 fe 04             	cmp    esi,0x4
c001bab7:	7e 10                	jle    c001bac9 <SATAPI::read(unsigned long long, int, void*)+0x33>
c001bab9:	83 ec 0c             	sub    esp,0xc
c001babc:	68 6f fd 01 c0       	push   0xc001fd6f
c001bac1:	e8 e1 47 ff ff       	call   c00102a7 <KePanic(char const*)>
c001bac6:	83 c4 10             	add    esp,0x10
c001bac9:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001bacf:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001bad5:	51                   	push   ecx
c001bad6:	50                   	push   eax
c001bad7:	83 c0 02             	add    eax,0x2
c001bada:	c1 e0 07             	shl    eax,0x7
c001badd:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c001bae3:	50                   	push   eax
c001bae4:	52                   	push   edx
c001bae5:	e8 f6 e1 ff ff       	call   c0019ce0 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001baea:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001baee:	b9 03 00 00 00       	mov    ecx,0x3
c001baf3:	fc                   	cld    
c001baf4:	31 c0                	xor    eax,eax
c001baf6:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001baf8:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c001bafd:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c001bb02:	83 c4 0c             	add    esp,0xc
c001bb05:	6a 00                	push   0x0
c001bb07:	6a 00                	push   0x0
c001bb09:	6a 00                	push   0x0
c001bb0b:	6a 00                	push   0x0
c001bb0d:	6a 02                	push   0x2
c001bb0f:	8d 44 24 30          	lea    eax,[esp+0x30]
c001bb13:	50                   	push   eax
c001bb14:	53                   	push   ebx
c001bb15:	e8 46 fb ff ff       	call   c001b660 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001bb1a:	83 c4 20             	add    esp,0x20
c001bb1d:	85 c0                	test   eax,eax
c001bb1f:	75 44                	jne    c001bb65 <SATAPI::read(unsigned long long, int, void*)+0xcf>
c001bb21:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001bb25:	b9 03 00 00 00       	mov    ecx,0x3
c001bb2a:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001bb2c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bb30:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c001bb35:	0f c8                	bswap  eax
c001bb37:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c001bb3b:	89 f0                	mov    eax,esi
c001bb3d:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001bb41:	50                   	push   eax
c001bb42:	56                   	push   esi
c001bb43:	c1 e6 0b             	shl    esi,0xb
c001bb46:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001bb4a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001bb4e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001bb52:	56                   	push   esi
c001bb53:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001bb57:	50                   	push   eax
c001bb58:	53                   	push   ebx
c001bb59:	e8 02 fb ff ff       	call   c001b660 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001bb5e:	83 c4 20             	add    esp,0x20
c001bb61:	85 c0                	test   eax,eax
c001bb63:	74 14                	je     c001bb79 <SATAPI::read(unsigned long long, int, void*)+0xe3>
c001bb65:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001bb69:	83 ec 0c             	sub    esp,0xc
c001bb6c:	53                   	push   ebx
c001bb6d:	e8 fe fd ff ff       	call   c001b970 <SATAPI::detectMedia()>
c001bb72:	83 c4 10             	add    esp,0x10
c001bb75:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bb79:	83 c4 30             	add    esp,0x30
c001bb7c:	5b                   	pop    ebx
c001bb7d:	5e                   	pop    esi
c001bb7e:	5f                   	pop    edi
c001bb7f:	c3                   	ret    

c001bb80 <IOAPIC::close(int, int, void*)>:
c001bb80:	b8 00 00 00 00       	mov    eax,0x0
c001bb85:	c3                   	ret    

c001bb86 <apicGetBase()>:
c001bb86:	55                   	push   ebp
c001bb87:	89 e5                	mov    ebp,esp
c001bb89:	83 ec 18             	sub    esp,0x18
c001bb8c:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c001bb91:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001bb97:	83 e0 08             	and    eax,0x8
c001bb9a:	84 c0                	test   al,al
c001bb9c:	75 07                	jne    c001bba5 <apicGetBase()+0x1f>
c001bb9e:	b8 00 00 00 00       	mov    eax,0x0
c001bba3:	eb 21                	jmp    c001bbc6 <apicGetBase()+0x40>
c001bba5:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c001bbaa:	83 ec 08             	sub    esp,0x8
c001bbad:	6a 1b                	push   0x1b
c001bbaf:	50                   	push   eax
c001bbb0:	e8 3d b2 fe ff       	call   c0006df2 <Computer::rdmsr(unsigned int)>
c001bbb5:	83 c4 10             	add    esp,0x10
c001bbb8:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001bbbb:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001bbbe:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001bbc1:	25 00 00 ff ff       	and    eax,0xffff0000
c001bbc6:	c9                   	leave  
c001bbc7:	c3                   	ret    

c001bbc8 <IOAPIC::IOAPIC()>:
c001bbc8:	83 ec 0c             	sub    esp,0xc
c001bbcb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bbcf:	83 ec 08             	sub    esp,0x8
c001bbd2:	68 d4 fd 01 c0       	push   0xc001fdd4
c001bbd7:	50                   	push   eax
c001bbd8:	e8 97 ff fe ff       	call   c000bb74 <Device::Device(char const*)>
c001bbdd:	83 c4 10             	add    esp,0x10
c001bbe0:	ba e4 fd 01 c0       	mov    edx,0xc001fde4
c001bbe5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bbe9:	89 10                	mov    DWORD PTR [eax],edx
c001bbeb:	90                   	nop
c001bbec:	83 c4 0c             	add    esp,0xc
c001bbef:	c3                   	ret    

c001bbf0 <apicOpen()>:
c001bbf0:	55                   	push   ebp
c001bbf1:	89 e5                	mov    ebp,esp
c001bbf3:	53                   	push   ebx
c001bbf4:	83 ec 34             	sub    esp,0x34
c001bbf7:	a0 a0 6b 02 c0       	mov    al,ds:0xc0026ba0
c001bbfc:	83 f0 01             	xor    eax,0x1
c001bbff:	84 c0                	test   al,al
c001bc01:	0f 84 9d 00 00 00    	je     c001bca4 <apicOpen()+0xb4>
c001bc07:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001bc0b:	a0 80 57 02 c0       	mov    al,ds:0xc0025780
c001bc10:	38 45 f7             	cmp    BYTE PTR [ebp-0x9],al
c001bc13:	0f 83 84 00 00 00    	jae    c001bc9d <apicOpen()+0xad>
c001bc19:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c001bc20:	83 ec 0c             	sub    esp,0xc
c001bc23:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c001bc26:	e8 8e bb fe ff       	call   c00077b9 <malloc>
c001bc2b:	83 c4 10             	add    esp,0x10
c001bc2e:	89 c3                	mov    ebx,eax
c001bc30:	83 ec 0c             	sub    esp,0xc
c001bc33:	53                   	push   ebx
c001bc34:	e8 8f ff ff ff       	call   c001bbc8 <IOAPIC::IOAPIC()>
c001bc39:	83 c4 10             	add    esp,0x10
c001bc3c:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c001bc3f:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001bc42:	25 ff 00 00 00       	and    eax,0xff
c001bc47:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001bc4a:	89 14 85 80 6b 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9480],edx
c001bc51:	a1 60 6b 02 c0       	mov    eax,ds:0xc0026b60
c001bc56:	40                   	inc    eax
c001bc57:	a3 60 6b 02 c0       	mov    ds:0xc0026b60,eax
c001bc5c:	a1 b8 2e 02 c0       	mov    eax,ds:0xc0022eb8
c001bc61:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c001bc67:	83 ec 08             	sub    esp,0x8
c001bc6a:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001bc6d:	50                   	push   eax
c001bc6e:	e8 69 fd fe ff       	call   c000b9dc <Device::addChild(Device*)>
c001bc73:	83 c4 10             	add    esp,0x10
c001bc76:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001bc79:	8b 00                	mov    eax,DWORD PTR [eax]
c001bc7b:	83 c0 08             	add    eax,0x8
c001bc7e:	8b 10                	mov    edx,DWORD PTR [eax]
c001bc80:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001bc83:	25 ff 00 00 00       	and    eax,0xff
c001bc88:	6a 00                	push   0x0
c001bc8a:	6a 00                	push   0x0
c001bc8c:	50                   	push   eax
c001bc8d:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001bc90:	ff d2                	call   edx
c001bc92:	83 c4 10             	add    esp,0x10
c001bc95:	fe 45 f7             	inc    BYTE PTR [ebp-0x9]
c001bc98:	e9 6e ff ff ff       	jmp    c001bc0b <apicOpen()+0x1b>
c001bc9d:	c6 05 a0 6b 02 c0 01 	mov    BYTE PTR ds:0xc0026ba0,0x1
c001bca4:	e8 dd fe ff ff       	call   c001bb86 <apicGetBase()>
c001bca9:	05 f0 00 00 00       	add    eax,0xf0
c001bcae:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001bcb1:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001bcb4:	8b 00                	mov    eax,DWORD PTR [eax]
c001bcb6:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001bcb9:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c001bcc0:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c001bcc7:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001bcca:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001bccd:	89 10                	mov    DWORD PTR [eax],edx
c001bccf:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001bcd6:	a1 d0 56 02 c0       	mov    eax,ds:0xc00256d0
c001bcdb:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001bcde:	7d 70                	jge    c001bd50 <apicOpen()+0x160>
c001bce0:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001bce3:	8b 04 85 e0 56 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda920]
c001bcea:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c001bced:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001bcf0:	8b 04 85 e0 56 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda920]
c001bcf7:	c1 e8 08             	shr    eax,0x8
c001bcfa:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c001bcfe:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001bd01:	8b 04 85 e0 56 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda920]
c001bd08:	c1 e8 18             	shr    eax,0x18
c001bd0b:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c001bd0e:	80 7d e3 ff          	cmp    BYTE PTR [ebp-0x1d],0xff
c001bd12:	75 37                	jne    c001bd4b <apicOpen()+0x15b>
c001bd14:	e8 6d fe ff ff       	call   c001bb86 <apicGetBase()>
c001bd19:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c001bd1d:	75 07                	jne    c001bd26 <apicOpen()+0x136>
c001bd1f:	ba 60 03 00 00       	mov    edx,0x360
c001bd24:	eb 05                	jmp    c001bd2b <apicOpen()+0x13b>
c001bd26:	ba 50 03 00 00       	mov    edx,0x350
c001bd2b:	01 d0                	add    eax,edx
c001bd2d:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001bd30:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001bd33:	8b 00                	mov    eax,DWORD PTR [eax]
c001bd35:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c001bd38:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c001bd3f:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c001bd43:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001bd46:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001bd49:	89 10                	mov    DWORD PTR [eax],edx
c001bd4b:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
c001bd4e:	eb 86                	jmp    c001bcd6 <apicOpen()+0xe6>
c001bd50:	90                   	nop
c001bd51:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001bd54:	c9                   	leave  
c001bd55:	c3                   	ret    

c001bd56 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001bd56:	55                   	push   ebp
c001bd57:	89 e5                	mov    ebp,esp
c001bd59:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bd5c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001bd62:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001bd65:	72 1d                	jb     c001bd84 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001bd67:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bd6a:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001bd70:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bd73:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001bd79:	01 d0                	add    eax,edx
c001bd7b:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001bd7e:	73 04                	jae    c001bd84 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001bd80:	b0 01                	mov    al,0x1
c001bd82:	eb 02                	jmp    c001bd86 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001bd84:	b0 00                	mov    al,0x0
c001bd86:	5d                   	pop    ebp
c001bd87:	c3                   	ret    

c001bd88 <IOAPIC::read(int)>:
c001bd88:	55                   	push   ebp
c001bd89:	89 e5                	mov    ebp,esp
c001bd8b:	83 ec 10             	sub    esp,0x10
c001bd8e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bd91:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001bd97:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001bd9a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001bd9d:	31 d2                	xor    edx,edx
c001bd9f:	88 c2                	mov    dl,al
c001bda1:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001bda4:	89 10                	mov    DWORD PTR [eax],edx
c001bda6:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001bda9:	83 c0 10             	add    eax,0x10
c001bdac:	8b 00                	mov    eax,DWORD PTR [eax]
c001bdae:	c9                   	leave  
c001bdaf:	c3                   	ret    

c001bdb0 <IOAPIC::open(int, int, void*)>:
c001bdb0:	55                   	push   ebp
c001bdb1:	89 e5                	mov    ebp,esp
c001bdb3:	57                   	push   edi
c001bdb4:	56                   	push   esi
c001bdb5:	53                   	push   ebx
c001bdb6:	83 ec 04             	sub    esp,0x4
c001bdb9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bdbc:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001bdbf:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001bdc5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bdc8:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001bdce:	8b 14 85 c0 57 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffda840]
c001bdd5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bdd8:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001bdde:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bde1:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001bde7:	8b 14 85 40 58 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffda7c0]
c001bdee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bdf1:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001bdf7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bdfa:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001be00:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001be03:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001be09:	89 c6                	mov    esi,eax
c001be0b:	81 e6 ff 00 00 00    	and    esi,0xff
c001be11:	89 d0                	mov    eax,edx
c001be13:	ba 00 00 00 00       	mov    edx,0x0
c001be18:	89 c7                	mov    edi,eax
c001be1a:	83 e7 ff             	and    edi,0xffffffff
c001be1d:	89 f9                	mov    ecx,edi
c001be1f:	89 d0                	mov    eax,edx
c001be21:	25 ff 00 00 00       	and    eax,0xff
c001be26:	89 c3                	mov    ebx,eax
c001be28:	89 c8                	mov    eax,ecx
c001be2a:	89 da                	mov    edx,ebx
c001be2c:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001be2f:	8d 5e 08             	lea    ebx,[esi+0x8]
c001be32:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001be36:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001be3a:	83 e0 00             	and    eax,0x0
c001be3d:	09 d0                	or     eax,edx
c001be3f:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001be43:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001be46:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001be4c:	8d 50 01             	lea    edx,[eax+0x1]
c001be4f:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001be52:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001be58:	31 d2                	xor    edx,edx
c001be5a:	88 c2                	mov    dl,al
c001be5c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001be5f:	83 c2 08             	add    edx,0x8
c001be62:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001be66:	81 e1 ff 00 00 00    	and    ecx,0xff
c001be6c:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001be72:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001be76:	6a 01                	push   0x1
c001be78:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001be7b:	e8 08 ff ff ff       	call   c001bd88 <IOAPIC::read(int)>
c001be80:	83 c4 08             	add    esp,0x8
c001be83:	c1 f8 10             	sar    eax,0x10
c001be86:	25 ff 00 00 00       	and    eax,0xff
c001be8b:	8d 50 01             	lea    edx,[eax+0x1]
c001be8e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001be91:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001be97:	b8 00 00 00 00       	mov    eax,0x0
c001be9c:	8d 65 f4             	lea    esp,[ebp-0xc]
c001be9f:	5b                   	pop    ebx
c001bea0:	5e                   	pop    esi
c001bea1:	5f                   	pop    edi
c001bea2:	5d                   	pop    ebp
c001bea3:	c3                   	ret    

c001bea4 <IOAPIC::write(int, int)>:
c001bea4:	55                   	push   ebp
c001bea5:	89 e5                	mov    ebp,esp
c001bea7:	83 ec 10             	sub    esp,0x10
c001beaa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bead:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001beb3:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001beb6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001beb9:	31 d2                	xor    edx,edx
c001bebb:	88 c2                	mov    dl,al
c001bebd:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001bec0:	89 10                	mov    DWORD PTR [eax],edx
c001bec2:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001bec5:	8d 50 10             	lea    edx,[eax+0x10]
c001bec8:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001becb:	89 02                	mov    DWORD PTR [edx],eax
c001becd:	90                   	nop
c001bece:	c9                   	leave  
c001becf:	c3                   	ret    

c001bed0 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c001bed0:	55                   	push   ebp
c001bed1:	89 e5                	mov    ebp,esp
c001bed3:	53                   	push   ebx
c001bed4:	83 ec 2c             	sub    esp,0x2c
c001bed7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001beda:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c001bedd:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c001bee0:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c001bee3:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001bee6:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001bee9:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001beec:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001beef:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c001bef2:	88 d8                	mov    al,bl
c001bef4:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c001bef7:	88 c8                	mov    al,cl
c001bef9:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c001befc:	88 d0                	mov    al,dl
c001befe:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c001bf01:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
c001bf04:	25 ff 00 00 00       	and    eax,0xff
c001bf09:	83 c0 08             	add    eax,0x8
c001bf0c:	01 c0                	add    eax,eax
c001bf0e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001bf11:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
c001bf14:	25 ff 00 00 00       	and    eax,0xff
c001bf19:	83 c0 08             	add    eax,0x8
c001bf1c:	01 c0                	add    eax,eax
c001bf1e:	40                   	inc    eax
c001bf1f:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001bf22:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001bf25:	50                   	push   eax
c001bf26:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001bf29:	e8 5a fe ff ff       	call   c001bd88 <IOAPIC::read(int)>
c001bf2e:	83 c4 08             	add    esp,0x8
c001bf31:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001bf34:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c001bf3b:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001bf3e:	c1 e0 18             	shl    eax,0x18
c001bf41:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c001bf44:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001bf47:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001bf4a:	52                   	push   edx
c001bf4b:	50                   	push   eax
c001bf4c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001bf4f:	e8 50 ff ff ff       	call   c001bea4 <IOAPIC::write(int, int)>
c001bf54:	83 c4 0c             	add    esp,0xc
c001bf57:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001bf5a:	50                   	push   eax
c001bf5b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001bf5e:	e8 25 fe ff ff       	call   c001bd88 <IOAPIC::read(int)>
c001bf63:	83 c4 08             	add    esp,0x8
c001bf66:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001bf69:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c001bf70:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c001bf77:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c001bf7e:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c001bf82:	74 09                	je     c001bf8d <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbd>
c001bf84:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c001bf8b:	eb 07                	jmp    c001bf94 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc4>
c001bf8d:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c001bf94:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c001bf98:	74 09                	je     c001bfa3 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd3>
c001bf9a:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c001bfa1:	eb 07                	jmp    c001bfaa <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xda>
c001bfa3:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c001bfaa:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c001bfb1:	8a 45 e0             	mov    al,BYTE PTR [ebp-0x20]
c001bfb4:	25 ff 00 00 00       	and    eax,0xff
c001bfb9:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001bfbc:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001bfbf:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001bfc2:	52                   	push   edx
c001bfc3:	50                   	push   eax
c001bfc4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001bfc7:	e8 d8 fe ff ff       	call   c001bea4 <IOAPIC::write(int, int)>
c001bfcc:	83 c4 0c             	add    esp,0xc
c001bfcf:	90                   	nop
c001bfd0:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001bfd3:	c9                   	leave  
c001bfd4:	c3                   	ret    
c001bfd5:	66 90                	xchg   ax,ax
c001bfd7:	90                   	nop

c001bfd8 <APICTimer::close(int, int, void*)>:
c001bfd8:	b8 00 00 00 00       	mov    eax,0x0
c001bfdd:	c3                   	ret    
c001bfde:	66 90                	xchg   ax,ax

c001bfe0 <apicTimerHandler(regs*, void*)>:
c001bfe0:	83 ec 0c             	sub    esp,0xc
c001bfe3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001bfe7:	8b 08                	mov    ecx,DWORD PTR [eax]
c001bfe9:	b8 10 27 00 00       	mov    eax,0x2710
c001bfee:	ba 00 00 00 00       	mov    edx,0x0
c001bff3:	f7 f1                	div    ecx
c001bff5:	83 ec 0c             	sub    esp,0xc
c001bff8:	50                   	push   eax
c001bff9:	e8 a2 12 ff ff       	call   c000d2a0 <timerHandler(unsigned int)>
c001bffe:	83 c4 10             	add    esp,0x10
c001c001:	90                   	nop
c001c002:	83 c4 0c             	add    esp,0xc
c001c005:	c3                   	ret    
c001c006:	66 90                	xchg   ax,ax

c001c008 <APICTimer::open(int, int, void*)>:
c001c008:	83 ec 0c             	sub    esp,0xc
c001c00b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c00f:	8b 00                	mov    eax,DWORD PTR [eax]
c001c011:	83 c0 24             	add    eax,0x24
c001c014:	8b 00                	mov    eax,DWORD PTR [eax]
c001c016:	83 ec 08             	sub    esp,0x8
c001c019:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c01d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c021:	ff d0                	call   eax
c001c023:	83 c4 10             	add    esp,0x10
c001c026:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c02a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001c02e:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001c034:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c038:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001c03c:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001c042:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001c046:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001c04c:	83 ec 0c             	sub    esp,0xc
c001c04f:	51                   	push   ecx
c001c050:	6a 01                	push   0x1
c001c052:	68 e0 bf 01 c0       	push   0xc001bfe0
c001c057:	52                   	push   edx
c001c058:	50                   	push   eax
c001c059:	e8 2a f9 fe ff       	call   c000b988 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c05e:	83 c4 20             	add    esp,0x20
c001c061:	89 c2                	mov    edx,eax
c001c063:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c067:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001c06d:	b8 00 00 00 00       	mov    eax,0x0
c001c072:	83 c4 0c             	add    esp,0xc
c001c075:	c3                   	ret    
c001c076:	66 90                	xchg   ax,ax

c001c078 <APICTimer::write(int)>:
c001c078:	83 ec 0c             	sub    esp,0xc
c001c07b:	83 ec 0c             	sub    esp,0xc
c001c07e:	68 08 fe 01 c0       	push   0xc001fe08
c001c083:	e8 1f 42 ff ff       	call   c00102a7 <KePanic(char const*)>
c001c088:	83 c4 10             	add    esp,0x10
c001c08b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c08f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c093:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001c099:	90                   	nop
c001c09a:	83 c4 0c             	add    esp,0xc
c001c09d:	c3                   	ret    
c001c09e:	66 90                	xchg   ax,ax

c001c0a0 <APICTimer::APICTimer()>:
c001c0a0:	83 ec 0c             	sub    esp,0xc
c001c0a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c0a7:	83 ec 08             	sub    esp,0x8
c001c0aa:	68 18 fe 01 c0       	push   0xc001fe18
c001c0af:	50                   	push   eax
c001c0b0:	e8 1f 11 ff ff       	call   c000d1d4 <Timer::Timer(char const*)>
c001c0b5:	83 c4 10             	add    esp,0x10
c001c0b8:	ba 2c fe 01 c0       	mov    edx,0xc001fe2c
c001c0bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c0c1:	89 10                	mov    DWORD PTR [eax],edx
c001c0c3:	90                   	nop
c001c0c4:	83 c4 0c             	add    esp,0xc
c001c0c7:	c3                   	ret    

c001c0c8 <PIT::write(int)>:
c001c0c8:	83 ec 10             	sub    esp,0x10
c001c0cb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c0cf:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001c0d3:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001c0d9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c0dd:	a3 a4 6b 02 c0       	mov    ds:0xc0026ba4,eax
c001c0e2:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001c0e7:	99                   	cdq    
c001c0e8:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001c0ec:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c0f0:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001c0f7:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001c0fc:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001c100:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001c105:	ee                   	out    dx,al
c001c106:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c10a:	25 ff 00 00 00       	and    eax,0xff
c001c10f:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001c116:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001c11a:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001c11e:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001c123:	ee                   	out    dx,al
c001c124:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c128:	c1 f8 08             	sar    eax,0x8
c001c12b:	25 ff 00 00 00       	and    eax,0xff
c001c130:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001c137:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001c13b:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001c13f:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001c144:	ee                   	out    dx,al
c001c145:	90                   	nop
c001c146:	83 c4 10             	add    esp,0x10
c001c149:	c3                   	ret    
c001c14a:	66 90                	xchg   ax,ax

c001c14c <pitHandler(regs*, void*)>:
c001c14c:	83 ec 0c             	sub    esp,0xc
c001c14f:	8b 0d a4 6b 02 c0    	mov    ecx,DWORD PTR ds:0xc0026ba4
c001c155:	b8 10 27 00 00       	mov    eax,0x2710
c001c15a:	99                   	cdq    
c001c15b:	f7 f9                	idiv   ecx
c001c15d:	83 ec 0c             	sub    esp,0xc
c001c160:	50                   	push   eax
c001c161:	e8 3a 11 ff ff       	call   c000d2a0 <timerHandler(unsigned int)>
c001c166:	83 c4 10             	add    esp,0x10
c001c169:	90                   	nop
c001c16a:	83 c4 0c             	add    esp,0xc
c001c16d:	c3                   	ret    
c001c16e:	66 90                	xchg   ax,ax

c001c170 <PIT::open(int, int, void*)>:
c001c170:	83 ec 0c             	sub    esp,0xc
c001c173:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c177:	8b 00                	mov    eax,DWORD PTR [eax]
c001c179:	83 c0 24             	add    eax,0x24
c001c17c:	8b 00                	mov    eax,DWORD PTR [eax]
c001c17e:	83 ec 08             	sub    esp,0x8
c001c181:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c185:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c189:	ff d0                	call   eax
c001c18b:	83 c4 10             	add    esp,0x10
c001c18e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c192:	83 ec 0c             	sub    esp,0xc
c001c195:	6a 00                	push   0x0
c001c197:	6a 01                	push   0x1
c001c199:	68 4c c1 01 c0       	push   0xc001c14c
c001c19e:	6a 00                	push   0x0
c001c1a0:	50                   	push   eax
c001c1a1:	e8 e2 f7 fe ff       	call   c000b988 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c1a6:	83 c4 20             	add    esp,0x20
c001c1a9:	89 c2                	mov    edx,eax
c001c1ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c1af:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001c1b5:	b8 00 00 00 00       	mov    eax,0x0
c001c1ba:	83 c4 0c             	add    esp,0xc
c001c1bd:	c3                   	ret    
c001c1be:	66 90                	xchg   ax,ax

c001c1c0 <PIT::close(int, int, void*)>:
c001c1c0:	83 ec 0c             	sub    esp,0xc
c001c1c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c1c7:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001c1d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c1d5:	6a 01                	push   0x1
c001c1d7:	68 4c c1 01 c0       	push   0xc001c14c
c001c1dc:	6a 00                	push   0x0
c001c1de:	50                   	push   eax
c001c1df:	e8 da f7 fe ff       	call   c000b9be <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001c1e4:	83 c4 10             	add    esp,0x10
c001c1e7:	b8 00 00 00 00       	mov    eax,0x0
c001c1ec:	83 c4 0c             	add    esp,0xc
c001c1ef:	c3                   	ret    

c001c1f0 <PIT::PIT()>:
c001c1f0:	83 ec 0c             	sub    esp,0xc
c001c1f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c1f7:	83 ec 08             	sub    esp,0x8
c001c1fa:	68 54 fe 01 c0       	push   0xc001fe54
c001c1ff:	50                   	push   eax
c001c200:	e8 cf 0f ff ff       	call   c000d1d4 <Timer::Timer(char const*)>
c001c205:	83 c4 10             	add    esp,0x10
c001c208:	ba 7c fe 01 c0       	mov    edx,0xc001fe7c
c001c20d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c211:	89 10                	mov    DWORD PTR [eax],edx
c001c213:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c217:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001c21d:	31 d2                	xor    edx,edx
c001c21f:	88 c2                	mov    dl,al
c001c221:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c225:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001c22c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c230:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001c236:	31 d2                	xor    edx,edx
c001c238:	88 c2                	mov    dl,al
c001c23a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c23e:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001c243:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c247:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001c24d:	8d 50 01             	lea    edx,[eax+0x1]
c001c250:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001c254:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001c25a:	31 d2                	xor    edx,edx
c001c25c:	88 c2                	mov    dl,al
c001c25e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c262:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001c266:	83 e1 3f             	and    ecx,0x3f
c001c269:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001c26d:	90                   	nop
c001c26e:	83 c4 0c             	add    esp,0xc
c001c271:	c3                   	ret    
c001c272:	66 90                	xchg   ax,ax
c001c274:	66 90                	xchg   ax,ax
c001c276:	66 90                	xchg   ax,ax
c001c278:	66 90                	xchg   ax,ax
c001c27a:	66 90                	xchg   ax,ax
c001c27c:	66 90                	xchg   ax,ax
c001c27e:	66 90                	xchg   ax,ax

c001c280 <avxDetect>:
c001c280:	b8 01 00 00 00       	mov    eax,0x1
c001c285:	0f a2                	cpuid  
c001c287:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c001c28d:	74 15                	je     c001c2a4 <avxDetect.noAVX>
c001c28f:	b8 01 00 00 00       	mov    eax,0x1
c001c294:	0f a2                	cpuid  
c001c296:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c001c29c:	74 06                	je     c001c2a4 <avxDetect.noAVX>
c001c29e:	b8 01 00 00 00       	mov    eax,0x1
c001c2a3:	c3                   	ret    

c001c2a4 <avxDetect.noAVX>:
c001c2a4:	b8 00 00 00 00       	mov    eax,0x0
c001c2a9:	c3                   	ret    

c001c2aa <avxSave>:
c001c2aa:	53                   	push   ebx
c001c2ab:	52                   	push   edx
c001c2ac:	31 c0                	xor    eax,eax
c001c2ae:	48                   	dec    eax
c001c2af:	89 c2                	mov    edx,eax
c001c2b1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001c2b5:	0f ae 23             	xsave  [ebx]
c001c2b8:	5a                   	pop    edx
c001c2b9:	5b                   	pop    ebx
c001c2ba:	c3                   	ret    

c001c2bb <avxLoad>:
c001c2bb:	53                   	push   ebx
c001c2bc:	52                   	push   edx
c001c2bd:	31 c0                	xor    eax,eax
c001c2bf:	48                   	dec    eax
c001c2c0:	89 c2                	mov    edx,eax
c001c2c2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001c2c6:	0f ae 2b             	xrstor [ebx]
c001c2c9:	5a                   	pop    edx
c001c2ca:	5b                   	pop    ebx
c001c2cb:	c3                   	ret    

c001c2cc <avxInit>:
c001c2cc:	e8 b7 02 00 00       	call   c001c588 <sseInit>
c001c2d1:	50                   	push   eax
c001c2d2:	51                   	push   ecx
c001c2d3:	0f 20 e0             	mov    eax,cr4
c001c2d6:	0d 00 00 04 00       	or     eax,0x40000
c001c2db:	0f 22 e0             	mov    cr4,eax
c001c2de:	31 c9                	xor    ecx,ecx
c001c2e0:	0f 01 d0             	xgetbv 
c001c2e3:	0d 07 00 00 00       	or     eax,0x7
c001c2e8:	0f 01 d1             	xsetbv 
c001c2eb:	59                   	pop    ecx
c001c2ec:	58                   	pop    eax
c001c2ed:	c3                   	ret    

c001c2ee <avxClose>:
c001c2ee:	c3                   	ret    

c001c2ef <wouldSheSayYes>:
c001c2ef:	c3                   	ret    
c001c2f0:	49                   	dec    ecx
c001c2f1:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c001c2f5:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c001c2f9:	75 20                	jne    c001c31b <isr0+0xb>
c001c2fb:	4e                   	dec    esi
c001c2fc:	79 61                	jns    c001c35f <isr7+0x3>
c001c2fe:	68 2e 2e 2e 00       	push   0x2e2e2e
c001c303:	66 90                	xchg   ax,ax
c001c305:	66 90                	xchg   ax,ax
c001c307:	66 90                	xchg   ax,ax
c001c309:	66 90                	xchg   ax,ax
c001c30b:	66 90                	xchg   ax,ax
c001c30d:	66 90                	xchg   ax,ax
c001c30f:	90                   	nop

c001c310 <isr0>:
c001c310:	fa                   	cli    
c001c311:	68 00 00 00 00       	push   0x0
c001c316:	68 00 00 00 00       	push   0x0
c001c31b:	e9 44 01 00 00       	jmp    c001c464 <int_common_stub>

c001c320 <isr1>:
c001c320:	fa                   	cli    
c001c321:	6a 00                	push   0x0
c001c323:	6a 01                	push   0x1
c001c325:	e9 3a 01 00 00       	jmp    c001c464 <int_common_stub>

c001c32a <isr2>:
c001c32a:	fa                   	cli    
c001c32b:	6a 00                	push   0x0
c001c32d:	6a 02                	push   0x2
c001c32f:	e9 30 01 00 00       	jmp    c001c464 <int_common_stub>

c001c334 <isr3>:
c001c334:	fa                   	cli    
c001c335:	6a 00                	push   0x0
c001c337:	6a 03                	push   0x3
c001c339:	e9 26 01 00 00       	jmp    c001c464 <int_common_stub>

c001c33e <isr4>:
c001c33e:	fa                   	cli    
c001c33f:	6a 00                	push   0x0
c001c341:	6a 04                	push   0x4
c001c343:	e9 1c 01 00 00       	jmp    c001c464 <int_common_stub>

c001c348 <isr5>:
c001c348:	fa                   	cli    
c001c349:	6a 00                	push   0x0
c001c34b:	6a 05                	push   0x5
c001c34d:	e9 12 01 00 00       	jmp    c001c464 <int_common_stub>

c001c352 <isr6>:
c001c352:	fa                   	cli    
c001c353:	6a 00                	push   0x0
c001c355:	6a 06                	push   0x6
c001c357:	e9 08 01 00 00       	jmp    c001c464 <int_common_stub>

c001c35c <isr7>:
c001c35c:	fa                   	cli    
c001c35d:	6a 00                	push   0x0
c001c35f:	6a 07                	push   0x7
c001c361:	e9 fe 00 00 00       	jmp    c001c464 <int_common_stub>

c001c366 <isr8>:
c001c366:	fa                   	cli    
c001c367:	6a 08                	push   0x8
c001c369:	e9 f6 00 00 00       	jmp    c001c464 <int_common_stub>

c001c36e <isr9>:
c001c36e:	fa                   	cli    
c001c36f:	6a 00                	push   0x0
c001c371:	6a 09                	push   0x9
c001c373:	e9 ec 00 00 00       	jmp    c001c464 <int_common_stub>

c001c378 <isr10>:
c001c378:	fa                   	cli    
c001c379:	6a 0a                	push   0xa
c001c37b:	e9 e4 00 00 00       	jmp    c001c464 <int_common_stub>

c001c380 <isr11>:
c001c380:	fa                   	cli    
c001c381:	6a 0b                	push   0xb
c001c383:	e9 dc 00 00 00       	jmp    c001c464 <int_common_stub>

c001c388 <isr12>:
c001c388:	fa                   	cli    
c001c389:	6a 0c                	push   0xc
c001c38b:	e9 d4 00 00 00       	jmp    c001c464 <int_common_stub>

c001c390 <isr13>:
c001c390:	fa                   	cli    
c001c391:	6a 0d                	push   0xd
c001c393:	e9 cc 00 00 00       	jmp    c001c464 <int_common_stub>

c001c398 <isr14>:
c001c398:	fa                   	cli    
c001c399:	6a 0e                	push   0xe
c001c39b:	e9 c4 00 00 00       	jmp    c001c464 <int_common_stub>

c001c3a0 <isr15>:
c001c3a0:	fa                   	cli    
c001c3a1:	6a 00                	push   0x0
c001c3a3:	6a 0f                	push   0xf
c001c3a5:	e9 ba 00 00 00       	jmp    c001c464 <int_common_stub>

c001c3aa <isr16>:
c001c3aa:	fa                   	cli    
c001c3ab:	6a 00                	push   0x0
c001c3ad:	6a 10                	push   0x10
c001c3af:	e9 b0 00 00 00       	jmp    c001c464 <int_common_stub>

c001c3b4 <isr17>:
c001c3b4:	fa                   	cli    
c001c3b5:	6a 00                	push   0x0
c001c3b7:	6a 11                	push   0x11
c001c3b9:	e9 a6 00 00 00       	jmp    c001c464 <int_common_stub>

c001c3be <isr18>:
c001c3be:	fa                   	cli    
c001c3bf:	6a 00                	push   0x0
c001c3c1:	6a 12                	push   0x12
c001c3c3:	e9 9c 00 00 00       	jmp    c001c464 <int_common_stub>

c001c3c8 <irq3>:
c001c3c8:	fa                   	cli    
c001c3c9:	6a 00                	push   0x0
c001c3cb:	6a 23                	push   0x23
c001c3cd:	e9 92 00 00 00       	jmp    c001c464 <int_common_stub>

c001c3d2 <irq4>:
c001c3d2:	fa                   	cli    
c001c3d3:	6a 00                	push   0x0
c001c3d5:	6a 24                	push   0x24
c001c3d7:	e9 88 00 00 00       	jmp    c001c464 <int_common_stub>

c001c3dc <irq5>:
c001c3dc:	fa                   	cli    
c001c3dd:	6a 00                	push   0x0
c001c3df:	6a 25                	push   0x25
c001c3e1:	e9 7e 00 00 00       	jmp    c001c464 <int_common_stub>

c001c3e6 <irq6>:
c001c3e6:	fa                   	cli    
c001c3e7:	6a 00                	push   0x0
c001c3e9:	6a 26                	push   0x26
c001c3eb:	e9 74 00 00 00       	jmp    c001c464 <int_common_stub>

c001c3f0 <irq7>:
c001c3f0:	fa                   	cli    
c001c3f1:	6a 00                	push   0x0
c001c3f3:	6a 27                	push   0x27
c001c3f5:	e9 6a 00 00 00       	jmp    c001c464 <int_common_stub>

c001c3fa <irq8>:
c001c3fa:	fa                   	cli    
c001c3fb:	6a 00                	push   0x0
c001c3fd:	6a 28                	push   0x28
c001c3ff:	e9 60 00 00 00       	jmp    c001c464 <int_common_stub>

c001c404 <irq9>:
c001c404:	fa                   	cli    
c001c405:	6a 00                	push   0x0
c001c407:	6a 29                	push   0x29
c001c409:	e9 56 00 00 00       	jmp    c001c464 <int_common_stub>

c001c40e <irq10>:
c001c40e:	fa                   	cli    
c001c40f:	6a 00                	push   0x0
c001c411:	6a 2a                	push   0x2a
c001c413:	e9 4c 00 00 00       	jmp    c001c464 <int_common_stub>

c001c418 <irq11>:
c001c418:	fa                   	cli    
c001c419:	6a 00                	push   0x0
c001c41b:	6a 2b                	push   0x2b
c001c41d:	e9 42 00 00 00       	jmp    c001c464 <int_common_stub>

c001c422 <irq12>:
c001c422:	fa                   	cli    
c001c423:	6a 00                	push   0x0
c001c425:	6a 2c                	push   0x2c
c001c427:	e9 38 00 00 00       	jmp    c001c464 <int_common_stub>

c001c42c <irq13>:
c001c42c:	fa                   	cli    
c001c42d:	6a 00                	push   0x0
c001c42f:	6a 2d                	push   0x2d
c001c431:	e9 2e 00 00 00       	jmp    c001c464 <int_common_stub>

c001c436 <irq14>:
c001c436:	fa                   	cli    
c001c437:	6a 00                	push   0x0
c001c439:	6a 2e                	push   0x2e
c001c43b:	e9 24 00 00 00       	jmp    c001c464 <int_common_stub>

c001c440 <irq15>:
c001c440:	fa                   	cli    
c001c441:	6a 00                	push   0x0
c001c443:	6a 2f                	push   0x2f
c001c445:	e9 1a 00 00 00       	jmp    c001c464 <int_common_stub>

c001c44a <irq1>:
c001c44a:	fa                   	cli    
c001c44b:	6a 00                	push   0x0
c001c44d:	6a 21                	push   0x21
c001c44f:	eb 13                	jmp    c001c464 <int_common_stub>

c001c451 <irq2>:
c001c451:	fa                   	cli    
c001c452:	6a 00                	push   0x0
c001c454:	6a 22                	push   0x22
c001c456:	eb 0c                	jmp    c001c464 <int_common_stub>

c001c458 <isr96>:
c001c458:	6a 00                	push   0x0
c001c45a:	6a 60                	push   0x60
c001c45c:	fb                   	sti    
c001c45d:	eb 37                	jmp    c001c496 <syscall_common_stub>

c001c45f <irq0>:
c001c45f:	fa                   	cli    
c001c460:	6a 00                	push   0x0
c001c462:	6a 20                	push   0x20

c001c464 <int_common_stub>:
c001c464:	60                   	pusha  
c001c465:	1e                   	push   ds
c001c466:	06                   	push   es
c001c467:	0f a0                	push   fs
c001c469:	0f a8                	push   gs
c001c46b:	66 b8 10 00          	mov    ax,0x10
c001c46f:	66 8e d8             	mov    ds,ax
c001c472:	66 8e c0             	mov    es,ax
c001c475:	66 8e e0             	mov    fs,ax
c001c478:	66 8e e8             	mov    gs,ax
c001c47b:	54                   	push   esp
c001c47c:	fc                   	cld    
c001c47d:	e8 06 fa fe ff       	call   c000be88 <int_handler>
c001c482:	81 c4 04 00 00 00    	add    esp,0x4
c001c488:	0f a9                	pop    gs
c001c48a:	0f a1                	pop    fs
c001c48c:	07                   	pop    es
c001c48d:	1f                   	pop    ds
c001c48e:	61                   	popa   
c001c48f:	81 c4 08 00 00 00    	add    esp,0x8
c001c495:	cf                   	iret   

c001c496 <syscall_common_stub>:
c001c496:	60                   	pusha  
c001c497:	1e                   	push   ds
c001c498:	06                   	push   es
c001c499:	0f a0                	push   fs
c001c49b:	0f a8                	push   gs
c001c49d:	66 b8 10 00          	mov    ax,0x10
c001c4a1:	66 8e d8             	mov    ds,ax
c001c4a4:	66 8e c0             	mov    es,ax
c001c4a7:	66 8e e0             	mov    fs,ax
c001c4aa:	66 8e e8             	mov    gs,ax
c001c4ad:	54                   	push   esp
c001c4ae:	fc                   	cld    
c001c4af:	e8 d4 f9 fe ff       	call   c000be88 <int_handler>
c001c4b4:	81 c4 04 00 00 00    	add    esp,0x4
c001c4ba:	0f a9                	pop    gs
c001c4bc:	0f a1                	pop    fs
c001c4be:	07                   	pop    es
c001c4bf:	1f                   	pop    ds
c001c4c0:	e8 36 43 ff ff       	call   c00107fb <KiCheckSignalZ>
c001c4c5:	3d 00 00 00 00       	cmp    eax,0x0
c001c4ca:	74 1d                	je     c001c4e9 <syscall_common_stub.skipSignals>
c001c4cc:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001c4d0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001c4d4:	89 e3                	mov    ebx,esp
c001c4d6:	8b 63 34             	mov    esp,DWORD PTR [ebx+0x34]
c001c4d9:	51                   	push   ecx
c001c4da:	68 f1 c4 01 c0       	push   0xc001c4f1
c001c4df:	89 dc                	mov    esp,ebx
c001c4e1:	61                   	popa   
c001c4e2:	81 c4 08 00 00 00    	add    esp,0x8
c001c4e8:	cf                   	iret   

c001c4e9 <syscall_common_stub.skipSignals>:
c001c4e9:	61                   	popa   
c001c4ea:	81 c4 08 00 00 00    	add    esp,0x8
c001c4f0:	cf                   	iret   

c001c4f1 <irq16>:
c001c4f1:	fa                   	cli    
c001c4f2:	6a 00                	push   0x0
c001c4f4:	6a 30                	push   0x30
c001c4f6:	e9 69 ff ff ff       	jmp    c001c464 <int_common_stub>

c001c4fb <irq17>:
c001c4fb:	fa                   	cli    
c001c4fc:	6a 00                	push   0x0
c001c4fe:	6a 31                	push   0x31
c001c500:	e9 5f ff ff ff       	jmp    c001c464 <int_common_stub>

c001c505 <irq18>:
c001c505:	fa                   	cli    
c001c506:	6a 00                	push   0x0
c001c508:	6a 32                	push   0x32
c001c50a:	e9 55 ff ff ff       	jmp    c001c464 <int_common_stub>

c001c50f <irq19>:
c001c50f:	fa                   	cli    
c001c510:	6a 00                	push   0x0
c001c512:	6a 33                	push   0x33
c001c514:	e9 4b ff ff ff       	jmp    c001c464 <int_common_stub>

c001c519 <irq20>:
c001c519:	fa                   	cli    
c001c51a:	6a 00                	push   0x0
c001c51c:	6a 34                	push   0x34
c001c51e:	e9 41 ff ff ff       	jmp    c001c464 <int_common_stub>

c001c523 <irq21>:
c001c523:	fa                   	cli    
c001c524:	6a 00                	push   0x0
c001c526:	6a 35                	push   0x35
c001c528:	e9 37 ff ff ff       	jmp    c001c464 <int_common_stub>

c001c52d <irq22>:
c001c52d:	fa                   	cli    
c001c52e:	6a 00                	push   0x0
c001c530:	6a 36                	push   0x36
c001c532:	e9 2d ff ff ff       	jmp    c001c464 <int_common_stub>

c001c537 <irq23>:
c001c537:	fa                   	cli    
c001c538:	6a 00                	push   0x0
c001c53a:	6a 37                	push   0x37
c001c53c:	e9 23 ff ff ff       	jmp    c001c464 <int_common_stub>
c001c541:	66 90                	xchg   ax,ax
c001c543:	66 90                	xchg   ax,ax
c001c545:	66 90                	xchg   ax,ax
c001c547:	66 90                	xchg   ax,ax
c001c549:	66 90                	xchg   ax,ax
c001c54b:	66 90                	xchg   ax,ax
c001c54d:	66 90                	xchg   ax,ax
c001c54f:	90                   	nop

c001c550 <i386GetRDRAND>:
c001c550:	b9 64 00 00 00       	mov    ecx,0x64

c001c555 <retry>:
c001c555:	0f c7 f0             	rdrand eax
c001c558:	72 05                	jb     c001c55f <retry.done>
c001c55a:	e2 f9                	loop   c001c555 <retry>

c001c55c <retry.fail>:
c001c55c:	31 c0                	xor    eax,eax
c001c55e:	c3                   	ret    

c001c55f <retry.done>:
c001c55f:	c3                   	ret    

c001c560 <absolutelyNoChanceInHell>:
c001c560:	b8 01 00 00 00       	mov    eax,0x1
c001c565:	0f a2                	cpuid  
c001c567:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001c56d:	74 06                	je     c001c575 <sseDetect.noSSE>
c001c56f:	b8 01 00 00 00       	mov    eax,0x1
c001c574:	c3                   	ret    

c001c575 <sseDetect.noSSE>:
c001c575:	31 c0                	xor    eax,eax
c001c577:	c3                   	ret    

c001c578 <sseSave>:
c001c578:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c57c:	0f ae 00             	fxsave [eax]
c001c57f:	c3                   	ret    

c001c580 <sseLoad>:
c001c580:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c584:	0f ae 08             	fxrstor [eax]
c001c587:	c3                   	ret    

c001c588 <sseInit>:
c001c588:	e8 42 00 00 00       	call   c001c5cf <x87Init>
c001c58d:	0f 20 e0             	mov    eax,cr4
c001c590:	66 0d 00 06          	or     ax,0x600
c001c594:	0f 22 e0             	mov    cr4,eax
c001c597:	c3                   	ret    

c001c598 <sseClose>:
c001c598:	c3                   	ret    
c001c599:	66 90                	xchg   ax,ax
c001c59b:	66 90                	xchg   ax,ax
c001c59d:	66 90                	xchg   ax,ax
c001c59f:	90                   	nop

c001c5a0 <value_37F>:
c001c5a0:	7f 03                	jg     c001c5a5 <value_37A+0x1>

c001c5a2 <value_37E>:
c001c5a2:	7e 03                	jle    c001c5a7 <x87Detect+0x1>

c001c5a4 <value_37A>:
c001c5a4:	7a 03                	jp     c001c5a9 <x87Detect+0x3>

c001c5a6 <x87Detect>:
c001c5a6:	b8 01 00 00 00       	mov    eax,0x1
c001c5ab:	0f a2                	cpuid  
c001c5ad:	f7 c2 01 00 00 00    	test   edx,0x1
c001c5b3:	74 06                	je     c001c5bb <x87Detect.nox87>
c001c5b5:	b8 01 00 00 00       	mov    eax,0x1
c001c5ba:	c3                   	ret    

c001c5bb <x87Detect.nox87>:
c001c5bb:	b8 00 00 00 00       	mov    eax,0x0
c001c5c0:	c3                   	ret    

c001c5c1 <x87Save>:
c001c5c1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c5c5:	dd 30                	fnsave [eax]
c001c5c7:	c3                   	ret    

c001c5c8 <x87Load>:
c001c5c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c5cc:	dd 20                	frstor [eax]
c001c5ce:	c3                   	ret    

c001c5cf <x87Init>:
c001c5cf:	0f 20 c0             	mov    eax,cr0
c001c5d2:	66 25 fb ff          	and    ax,0xfffb
c001c5d6:	66 0d 22 00          	or     ax,0x22
c001c5da:	0f 22 c0             	mov    cr0,eax
c001c5dd:	db e3                	fninit 
c001c5df:	0f 06                	clts   
c001c5e1:	d9 2d a4 c5 01 c0    	fldcw  WORD PTR ds:0xc001c5a4
c001c5e7:	c3                   	ret    

c001c5e8 <x87Close>:
c001c5e8:	c3                   	ret    
c001c5e9:	66 90                	xchg   ax,ax
c001c5eb:	90                   	nop

c001c5ec <__do_global_ctors_aux>:
c001c5ec:	a1 9c d5 01 c0       	mov    eax,ds:0xc001d59c
c001c5f1:	83 f8 ff             	cmp    eax,0xffffffff
c001c5f4:	74 1a                	je     c001c610 <__do_global_ctors_aux+0x24>
c001c5f6:	55                   	push   ebp
c001c5f7:	89 e5                	mov    ebp,esp
c001c5f9:	53                   	push   ebx
c001c5fa:	52                   	push   edx
c001c5fb:	bb 9c d5 01 c0       	mov    ebx,0xc001d59c
c001c600:	ff d0                	call   eax
c001c602:	83 eb 04             	sub    ebx,0x4
c001c605:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c607:	83 f8 ff             	cmp    eax,0xffffffff
c001c60a:	75 f4                	jne    c001c600 <__do_global_ctors_aux+0x14>
c001c60c:	58                   	pop    eax
c001c60d:	5b                   	pop    ebx
c001c60e:	5d                   	pop    ebp
c001c60f:	c3                   	ret    
c001c610:	c3                   	ret    
c001c611:	66 90                	xchg   ax,ax
c001c613:	90                   	nop

c001c614 <__divdi3>:
c001c614:	55                   	push   ebp
c001c615:	57                   	push   edi
c001c616:	56                   	push   esi
c001c617:	53                   	push   ebx
c001c618:	83 ec 1c             	sub    esp,0x1c
c001c61b:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001c61f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001c623:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001c626:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001c62a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c62e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001c632:	85 db                	test   ebx,ebx
c001c634:	0f 88 8e 00 00 00    	js     c001c6c8 <__divdi3+0xb4>
c001c63a:	89 dd                	mov    ebp,ebx
c001c63c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001c644:	89 d3                	mov    ebx,edx
c001c646:	85 d2                	test   edx,edx
c001c648:	79 0d                	jns    c001c657 <__divdi3+0x43>
c001c64a:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001c64e:	f7 d8                	neg    eax
c001c650:	83 d2 00             	adc    edx,0x0
c001c653:	f7 da                	neg    edx
c001c655:	89 d3                	mov    ebx,edx
c001c657:	89 c7                	mov    edi,eax
c001c659:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001c65c:	85 db                	test   ebx,ebx
c001c65e:	75 48                	jne    c001c6a8 <__divdi3+0x94>
c001c660:	39 ef                	cmp    edi,ebp
c001c662:	76 24                	jbe    c001c688 <__divdi3+0x74>
c001c664:	89 ea                	mov    edx,ebp
c001c666:	f7 f7                	div    edi
c001c668:	89 c1                	mov    ecx,eax
c001c66a:	31 f6                	xor    esi,esi
c001c66c:	89 c8                	mov    eax,ecx
c001c66e:	89 f2                	mov    edx,esi
c001c670:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c674:	85 c9                	test   ecx,ecx
c001c676:	74 07                	je     c001c67f <__divdi3+0x6b>
c001c678:	f7 d8                	neg    eax
c001c67a:	83 d2 00             	adc    edx,0x0
c001c67d:	f7 da                	neg    edx
c001c67f:	83 c4 1c             	add    esp,0x1c
c001c682:	5b                   	pop    ebx
c001c683:	5e                   	pop    esi
c001c684:	5f                   	pop    edi
c001c685:	5d                   	pop    ebp
c001c686:	c3                   	ret    
c001c687:	90                   	nop
c001c688:	85 ff                	test   edi,edi
c001c68a:	75 0b                	jne    c001c697 <__divdi3+0x83>
c001c68c:	b8 01 00 00 00       	mov    eax,0x1
c001c691:	31 d2                	xor    edx,edx
c001c693:	f7 f3                	div    ebx
c001c695:	89 c7                	mov    edi,eax
c001c697:	31 d2                	xor    edx,edx
c001c699:	89 e8                	mov    eax,ebp
c001c69b:	f7 f7                	div    edi
c001c69d:	89 c6                	mov    esi,eax
c001c69f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001c6a2:	f7 f7                	div    edi
c001c6a4:	89 c1                	mov    ecx,eax
c001c6a6:	eb c4                	jmp    c001c66c <__divdi3+0x58>
c001c6a8:	39 eb                	cmp    ebx,ebp
c001c6aa:	77 3c                	ja     c001c6e8 <__divdi3+0xd4>
c001c6ac:	0f bd f3             	bsr    esi,ebx
c001c6af:	83 f6 1f             	xor    esi,0x1f
c001c6b2:	75 40                	jne    c001c6f4 <__divdi3+0xe0>
c001c6b4:	39 eb                	cmp    ebx,ebp
c001c6b6:	72 09                	jb     c001c6c1 <__divdi3+0xad>
c001c6b8:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001c6bb:	0f 87 97 00 00 00    	ja     c001c758 <__divdi3+0x144>
c001c6c1:	b9 01 00 00 00       	mov    ecx,0x1
c001c6c6:	eb a4                	jmp    c001c66c <__divdi3+0x58>
c001c6c8:	f7 d9                	neg    ecx
c001c6ca:	83 d3 00             	adc    ebx,0x0
c001c6cd:	f7 db                	neg    ebx
c001c6cf:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001c6d2:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001c6d6:	89 dd                	mov    ebp,ebx
c001c6d8:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001c6e0:	e9 5f ff ff ff       	jmp    c001c644 <__divdi3+0x30>
c001c6e5:	8d 76 00             	lea    esi,[esi+0x0]
c001c6e8:	31 f6                	xor    esi,esi
c001c6ea:	31 c9                	xor    ecx,ecx
c001c6ec:	e9 7b ff ff ff       	jmp    c001c66c <__divdi3+0x58>
c001c6f1:	8d 76 00             	lea    esi,[esi+0x0]
c001c6f4:	b8 20 00 00 00       	mov    eax,0x20
c001c6f9:	29 f0                	sub    eax,esi
c001c6fb:	89 f1                	mov    ecx,esi
c001c6fd:	d3 e3                	shl    ebx,cl
c001c6ff:	89 fa                	mov    edx,edi
c001c701:	88 c1                	mov    cl,al
c001c703:	d3 ea                	shr    edx,cl
c001c705:	09 da                	or     edx,ebx
c001c707:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001c70b:	89 f1                	mov    ecx,esi
c001c70d:	d3 e7                	shl    edi,cl
c001c70f:	89 eb                	mov    ebx,ebp
c001c711:	88 c1                	mov    cl,al
c001c713:	d3 eb                	shr    ebx,cl
c001c715:	89 f1                	mov    ecx,esi
c001c717:	d3 e5                	shl    ebp,cl
c001c719:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001c71c:	88 c1                	mov    cl,al
c001c71e:	d3 ea                	shr    edx,cl
c001c720:	09 d5                	or     ebp,edx
c001c722:	89 e8                	mov    eax,ebp
c001c724:	89 da                	mov    edx,ebx
c001c726:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001c72a:	89 d3                	mov    ebx,edx
c001c72c:	89 c5                	mov    ebp,eax
c001c72e:	f7 e7                	mul    edi
c001c730:	39 d3                	cmp    ebx,edx
c001c732:	72 18                	jb     c001c74c <__divdi3+0x138>
c001c734:	74 0a                	je     c001c740 <__divdi3+0x12c>
c001c736:	89 e9                	mov    ecx,ebp
c001c738:	31 f6                	xor    esi,esi
c001c73a:	e9 2d ff ff ff       	jmp    c001c66c <__divdi3+0x58>
c001c73f:	90                   	nop
c001c740:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001c743:	89 f1                	mov    ecx,esi
c001c745:	d3 e7                	shl    edi,cl
c001c747:	39 c7                	cmp    edi,eax
c001c749:	73 eb                	jae    c001c736 <__divdi3+0x122>
c001c74b:	90                   	nop
c001c74c:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001c74f:	31 f6                	xor    esi,esi
c001c751:	e9 16 ff ff ff       	jmp    c001c66c <__divdi3+0x58>
c001c756:	66 90                	xchg   ax,ax
c001c758:	31 c9                	xor    ecx,ecx
c001c75a:	e9 0d ff ff ff       	jmp    c001c66c <__divdi3+0x58>
c001c75f:	90                   	nop

c001c760 <__moddi3>:
c001c760:	55                   	push   ebp
c001c761:	57                   	push   edi
c001c762:	56                   	push   esi
c001c763:	53                   	push   ebx
c001c764:	83 ec 2c             	sub    esp,0x2c
c001c767:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001c76b:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001c76f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001c773:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001c777:	85 db                	test   ebx,ebx
c001c779:	0f 88 85 00 00 00    	js     c001c804 <__moddi3+0xa4>
c001c77f:	89 de                	mov    esi,ebx
c001c781:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001c789:	89 d7                	mov    edi,edx
c001c78b:	85 d2                	test   edx,edx
c001c78d:	79 09                	jns    c001c798 <__moddi3+0x38>
c001c78f:	f7 d8                	neg    eax
c001c791:	83 d2 00             	adc    edx,0x0
c001c794:	f7 da                	neg    edx
c001c796:	89 d7                	mov    edi,edx
c001c798:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c79c:	89 cd                	mov    ebp,ecx
c001c79e:	85 ff                	test   edi,edi
c001c7a0:	75 52                	jne    c001c7f4 <__moddi3+0x94>
c001c7a2:	89 c3                	mov    ebx,eax
c001c7a4:	39 f0                	cmp    eax,esi
c001c7a6:	76 24                	jbe    c001c7cc <__moddi3+0x6c>
c001c7a8:	89 c8                	mov    eax,ecx
c001c7aa:	89 f2                	mov    edx,esi
c001c7ac:	f7 f3                	div    ebx
c001c7ae:	89 d6                	mov    esi,edx
c001c7b0:	89 f0                	mov    eax,esi
c001c7b2:	31 d2                	xor    edx,edx
c001c7b4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001c7b8:	85 c9                	test   ecx,ecx
c001c7ba:	74 07                	je     c001c7c3 <__moddi3+0x63>
c001c7bc:	f7 d8                	neg    eax
c001c7be:	83 d2 00             	adc    edx,0x0
c001c7c1:	f7 da                	neg    edx
c001c7c3:	83 c4 2c             	add    esp,0x2c
c001c7c6:	5b                   	pop    ebx
c001c7c7:	5e                   	pop    esi
c001c7c8:	5f                   	pop    edi
c001c7c9:	5d                   	pop    ebp
c001c7ca:	c3                   	ret    
c001c7cb:	90                   	nop
c001c7cc:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001c7d0:	85 db                	test   ebx,ebx
c001c7d2:	75 0d                	jne    c001c7e1 <__moddi3+0x81>
c001c7d4:	b8 01 00 00 00       	mov    eax,0x1
c001c7d9:	31 d2                	xor    edx,edx
c001c7db:	f7 f7                	div    edi
c001c7dd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c7e1:	89 f0                	mov    eax,esi
c001c7e3:	31 d2                	xor    edx,edx
c001c7e5:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001c7e9:	f7 f7                	div    edi
c001c7eb:	89 e8                	mov    eax,ebp
c001c7ed:	f7 f7                	div    edi
c001c7ef:	89 d6                	mov    esi,edx
c001c7f1:	eb bd                	jmp    c001c7b0 <__moddi3+0x50>
c001c7f3:	90                   	nop
c001c7f4:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001c7f8:	39 f7                	cmp    edi,esi
c001c7fa:	76 20                	jbe    c001c81c <__moddi3+0xbc>
c001c7fc:	89 c8                	mov    eax,ecx
c001c7fe:	89 f2                	mov    edx,esi
c001c800:	eb b2                	jmp    c001c7b4 <__moddi3+0x54>
c001c802:	66 90                	xchg   ax,ax
c001c804:	f7 d9                	neg    ecx
c001c806:	83 d3 00             	adc    ebx,0x0
c001c809:	f7 db                	neg    ebx
c001c80b:	89 de                	mov    esi,ebx
c001c80d:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001c815:	e9 6f ff ff ff       	jmp    c001c789 <__moddi3+0x29>
c001c81a:	66 90                	xchg   ax,ax
c001c81c:	0f bd c7             	bsr    eax,edi
c001c81f:	83 f0 1f             	xor    eax,0x1f
c001c822:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c826:	75 24                	jne    c001c84c <__moddi3+0xec>
c001c828:	39 f7                	cmp    edi,esi
c001c82a:	72 06                	jb     c001c832 <__moddi3+0xd2>
c001c82c:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001c830:	77 0c                	ja     c001c83e <__moddi3+0xde>
c001c832:	89 e9                	mov    ecx,ebp
c001c834:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001c838:	19 fe                	sbb    esi,edi
c001c83a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001c83e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c842:	89 f2                	mov    edx,esi
c001c844:	e9 6b ff ff ff       	jmp    c001c7b4 <__moddi3+0x54>
c001c849:	8d 76 00             	lea    esi,[esi+0x0]
c001c84c:	b8 20 00 00 00       	mov    eax,0x20
c001c851:	89 c2                	mov    edx,eax
c001c853:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001c857:	29 da                	sub    edx,ebx
c001c859:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001c85d:	88 d9                	mov    cl,bl
c001c85f:	d3 e7                	shl    edi,cl
c001c861:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c865:	88 d1                	mov    cl,dl
c001c867:	d3 e8                	shr    eax,cl
c001c869:	09 c7                	or     edi,eax
c001c86b:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001c86f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001c873:	89 d8                	mov    eax,ebx
c001c875:	88 d9                	mov    cl,bl
c001c877:	d3 e7                	shl    edi,cl
c001c879:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001c87d:	89 f3                	mov    ebx,esi
c001c87f:	88 d1                	mov    cl,dl
c001c881:	d3 eb                	shr    ebx,cl
c001c883:	89 c7                	mov    edi,eax
c001c885:	88 c1                	mov    cl,al
c001c887:	d3 e6                	shl    esi,cl
c001c889:	89 e8                	mov    eax,ebp
c001c88b:	88 d1                	mov    cl,dl
c001c88d:	d3 e8                	shr    eax,cl
c001c88f:	09 f0                	or     eax,esi
c001c891:	89 f9                	mov    ecx,edi
c001c893:	d3 e5                	shl    ebp,cl
c001c895:	89 da                	mov    edx,ebx
c001c897:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001c89b:	89 d3                	mov    ebx,edx
c001c89d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001c8a1:	89 c6                	mov    esi,eax
c001c8a3:	89 d1                	mov    ecx,edx
c001c8a5:	39 d3                	cmp    ebx,edx
c001c8a7:	72 27                	jb     c001c8d0 <__moddi3+0x170>
c001c8a9:	74 21                	je     c001c8cc <__moddi3+0x16c>
c001c8ab:	29 f5                	sub    ebp,esi
c001c8ad:	19 cb                	sbb    ebx,ecx
c001c8af:	89 de                	mov    esi,ebx
c001c8b1:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001c8b5:	d3 e6                	shl    esi,cl
c001c8b7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001c8bb:	89 f9                	mov    ecx,edi
c001c8bd:	d3 ed                	shr    ebp,cl
c001c8bf:	09 ee                	or     esi,ebp
c001c8c1:	89 f0                	mov    eax,esi
c001c8c3:	d3 eb                	shr    ebx,cl
c001c8c5:	89 da                	mov    edx,ebx
c001c8c7:	e9 e8 fe ff ff       	jmp    c001c7b4 <__moddi3+0x54>
c001c8cc:	39 c5                	cmp    ebp,eax
c001c8ce:	73 db                	jae    c001c8ab <__moddi3+0x14b>
c001c8d0:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001c8d4:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001c8d8:	89 d1                	mov    ecx,edx
c001c8da:	89 c6                	mov    esi,eax
c001c8dc:	eb cd                	jmp    c001c8ab <__moddi3+0x14b>
c001c8de:	66 90                	xchg   ax,ax

c001c8e0 <__udivdi3>:
c001c8e0:	55                   	push   ebp
c001c8e1:	57                   	push   edi
c001c8e2:	56                   	push   esi
c001c8e3:	53                   	push   ebx
c001c8e4:	83 ec 1c             	sub    esp,0x1c
c001c8e7:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001c8eb:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001c8ef:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001c8f3:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001c8f7:	85 d2                	test   edx,edx
c001c8f9:	75 41                	jne    c001c93c <__udivdi3+0x5c>
c001c8fb:	39 f7                	cmp    edi,esi
c001c8fd:	76 15                	jbe    c001c914 <__udivdi3+0x34>
c001c8ff:	89 e8                	mov    eax,ebp
c001c901:	89 f2                	mov    edx,esi
c001c903:	f7 f7                	div    edi
c001c905:	31 db                	xor    ebx,ebx
c001c907:	89 da                	mov    edx,ebx
c001c909:	83 c4 1c             	add    esp,0x1c
c001c90c:	5b                   	pop    ebx
c001c90d:	5e                   	pop    esi
c001c90e:	5f                   	pop    edi
c001c90f:	5d                   	pop    ebp
c001c910:	c3                   	ret    
c001c911:	8d 76 00             	lea    esi,[esi+0x0]
c001c914:	89 f9                	mov    ecx,edi
c001c916:	85 ff                	test   edi,edi
c001c918:	75 0b                	jne    c001c925 <__udivdi3+0x45>
c001c91a:	b8 01 00 00 00       	mov    eax,0x1
c001c91f:	31 d2                	xor    edx,edx
c001c921:	f7 f7                	div    edi
c001c923:	89 c1                	mov    ecx,eax
c001c925:	31 d2                	xor    edx,edx
c001c927:	89 f0                	mov    eax,esi
c001c929:	f7 f1                	div    ecx
c001c92b:	89 c3                	mov    ebx,eax
c001c92d:	89 e8                	mov    eax,ebp
c001c92f:	f7 f1                	div    ecx
c001c931:	89 da                	mov    edx,ebx
c001c933:	83 c4 1c             	add    esp,0x1c
c001c936:	5b                   	pop    ebx
c001c937:	5e                   	pop    esi
c001c938:	5f                   	pop    edi
c001c939:	5d                   	pop    ebp
c001c93a:	c3                   	ret    
c001c93b:	90                   	nop
c001c93c:	39 f2                	cmp    edx,esi
c001c93e:	77 1c                	ja     c001c95c <__udivdi3+0x7c>
c001c940:	0f bd da             	bsr    ebx,edx
c001c943:	83 f3 1f             	xor    ebx,0x1f
c001c946:	75 24                	jne    c001c96c <__udivdi3+0x8c>
c001c948:	39 f2                	cmp    edx,esi
c001c94a:	72 08                	jb     c001c954 <__udivdi3+0x74>
c001c94c:	39 ef                	cmp    edi,ebp
c001c94e:	0f 87 84 00 00 00    	ja     c001c9d8 <__udivdi3+0xf8>
c001c954:	b8 01 00 00 00       	mov    eax,0x1
c001c959:	eb ac                	jmp    c001c907 <__udivdi3+0x27>
c001c95b:	90                   	nop
c001c95c:	31 db                	xor    ebx,ebx
c001c95e:	31 c0                	xor    eax,eax
c001c960:	89 da                	mov    edx,ebx
c001c962:	83 c4 1c             	add    esp,0x1c
c001c965:	5b                   	pop    ebx
c001c966:	5e                   	pop    esi
c001c967:	5f                   	pop    edi
c001c968:	5d                   	pop    ebp
c001c969:	c3                   	ret    
c001c96a:	66 90                	xchg   ax,ax
c001c96c:	b8 20 00 00 00       	mov    eax,0x20
c001c971:	29 d8                	sub    eax,ebx
c001c973:	88 d9                	mov    cl,bl
c001c975:	d3 e2                	shl    edx,cl
c001c977:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001c97b:	89 fa                	mov    edx,edi
c001c97d:	88 c1                	mov    cl,al
c001c97f:	d3 ea                	shr    edx,cl
c001c981:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c985:	09 d1                	or     ecx,edx
c001c987:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001c98b:	88 d9                	mov    cl,bl
c001c98d:	d3 e7                	shl    edi,cl
c001c98f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001c993:	89 f7                	mov    edi,esi
c001c995:	88 c1                	mov    cl,al
c001c997:	d3 ef                	shr    edi,cl
c001c999:	88 d9                	mov    cl,bl
c001c99b:	d3 e6                	shl    esi,cl
c001c99d:	89 ea                	mov    edx,ebp
c001c99f:	88 c1                	mov    cl,al
c001c9a1:	d3 ea                	shr    edx,cl
c001c9a3:	09 d6                	or     esi,edx
c001c9a5:	89 f0                	mov    eax,esi
c001c9a7:	89 fa                	mov    edx,edi
c001c9a9:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001c9ad:	89 d7                	mov    edi,edx
c001c9af:	89 c6                	mov    esi,eax
c001c9b1:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001c9b5:	39 d7                	cmp    edi,edx
c001c9b7:	72 13                	jb     c001c9cc <__udivdi3+0xec>
c001c9b9:	74 09                	je     c001c9c4 <__udivdi3+0xe4>
c001c9bb:	89 f0                	mov    eax,esi
c001c9bd:	31 db                	xor    ebx,ebx
c001c9bf:	e9 43 ff ff ff       	jmp    c001c907 <__udivdi3+0x27>
c001c9c4:	88 d9                	mov    cl,bl
c001c9c6:	d3 e5                	shl    ebp,cl
c001c9c8:	39 c5                	cmp    ebp,eax
c001c9ca:	73 ef                	jae    c001c9bb <__udivdi3+0xdb>
c001c9cc:	8d 46 ff             	lea    eax,[esi-0x1]
c001c9cf:	31 db                	xor    ebx,ebx
c001c9d1:	e9 31 ff ff ff       	jmp    c001c907 <__udivdi3+0x27>
c001c9d6:	66 90                	xchg   ax,ax
c001c9d8:	31 c0                	xor    eax,eax
c001c9da:	e9 28 ff ff ff       	jmp    c001c907 <__udivdi3+0x27>
c001c9df:	90                   	nop

c001c9e0 <__umoddi3>:
c001c9e0:	55                   	push   ebp
c001c9e1:	57                   	push   edi
c001c9e2:	56                   	push   esi
c001c9e3:	53                   	push   ebx
c001c9e4:	83 ec 1c             	sub    esp,0x1c
c001c9e7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001c9eb:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001c9ef:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001c9f3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001c9f7:	89 da                	mov    edx,ebx
c001c9f9:	85 c0                	test   eax,eax
c001c9fb:	75 37                	jne    c001ca34 <__umoddi3+0x54>
c001c9fd:	39 df                	cmp    edi,ebx
c001c9ff:	76 13                	jbe    c001ca14 <__umoddi3+0x34>
c001ca01:	89 f0                	mov    eax,esi
c001ca03:	f7 f7                	div    edi
c001ca05:	89 d0                	mov    eax,edx
c001ca07:	31 d2                	xor    edx,edx
c001ca09:	83 c4 1c             	add    esp,0x1c
c001ca0c:	5b                   	pop    ebx
c001ca0d:	5e                   	pop    esi
c001ca0e:	5f                   	pop    edi
c001ca0f:	5d                   	pop    ebp
c001ca10:	c3                   	ret    
c001ca11:	8d 76 00             	lea    esi,[esi+0x0]
c001ca14:	89 fd                	mov    ebp,edi
c001ca16:	85 ff                	test   edi,edi
c001ca18:	75 0b                	jne    c001ca25 <__umoddi3+0x45>
c001ca1a:	b8 01 00 00 00       	mov    eax,0x1
c001ca1f:	31 d2                	xor    edx,edx
c001ca21:	f7 f7                	div    edi
c001ca23:	89 c5                	mov    ebp,eax
c001ca25:	89 d8                	mov    eax,ebx
c001ca27:	31 d2                	xor    edx,edx
c001ca29:	f7 f5                	div    ebp
c001ca2b:	89 f0                	mov    eax,esi
c001ca2d:	f7 f5                	div    ebp
c001ca2f:	89 d0                	mov    eax,edx
c001ca31:	eb d4                	jmp    c001ca07 <__umoddi3+0x27>
c001ca33:	90                   	nop
c001ca34:	89 f1                	mov    ecx,esi
c001ca36:	39 d8                	cmp    eax,ebx
c001ca38:	76 0a                	jbe    c001ca44 <__umoddi3+0x64>
c001ca3a:	89 f0                	mov    eax,esi
c001ca3c:	83 c4 1c             	add    esp,0x1c
c001ca3f:	5b                   	pop    ebx
c001ca40:	5e                   	pop    esi
c001ca41:	5f                   	pop    edi
c001ca42:	5d                   	pop    ebp
c001ca43:	c3                   	ret    
c001ca44:	0f bd e8             	bsr    ebp,eax
c001ca47:	83 f5 1f             	xor    ebp,0x1f
c001ca4a:	75 1c                	jne    c001ca68 <__umoddi3+0x88>
c001ca4c:	39 d8                	cmp    eax,ebx
c001ca4e:	72 04                	jb     c001ca54 <__umoddi3+0x74>
c001ca50:	39 f7                	cmp    edi,esi
c001ca52:	77 08                	ja     c001ca5c <__umoddi3+0x7c>
c001ca54:	89 da                	mov    edx,ebx
c001ca56:	29 fe                	sub    esi,edi
c001ca58:	19 c2                	sbb    edx,eax
c001ca5a:	89 f1                	mov    ecx,esi
c001ca5c:	89 c8                	mov    eax,ecx
c001ca5e:	83 c4 1c             	add    esp,0x1c
c001ca61:	5b                   	pop    ebx
c001ca62:	5e                   	pop    esi
c001ca63:	5f                   	pop    edi
c001ca64:	5d                   	pop    ebp
c001ca65:	c3                   	ret    
c001ca66:	66 90                	xchg   ax,ax
c001ca68:	ba 20 00 00 00       	mov    edx,0x20
c001ca6d:	29 ea                	sub    edx,ebp
c001ca6f:	89 e9                	mov    ecx,ebp
c001ca71:	d3 e0                	shl    eax,cl
c001ca73:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ca77:	89 f8                	mov    eax,edi
c001ca79:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001ca7d:	88 d1                	mov    cl,dl
c001ca7f:	d3 e8                	shr    eax,cl
c001ca81:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001ca85:	09 c1                	or     ecx,eax
c001ca87:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001ca8b:	89 e9                	mov    ecx,ebp
c001ca8d:	d3 e7                	shl    edi,cl
c001ca8f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001ca93:	89 d8                	mov    eax,ebx
c001ca95:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ca99:	88 d1                	mov    cl,dl
c001ca9b:	d3 e8                	shr    eax,cl
c001ca9d:	89 c7                	mov    edi,eax
c001ca9f:	89 e9                	mov    ecx,ebp
c001caa1:	d3 e3                	shl    ebx,cl
c001caa3:	89 f0                	mov    eax,esi
c001caa5:	88 d1                	mov    cl,dl
c001caa7:	d3 e8                	shr    eax,cl
c001caa9:	09 d8                	or     eax,ebx
c001caab:	89 e9                	mov    ecx,ebp
c001caad:	d3 e6                	shl    esi,cl
c001caaf:	89 f3                	mov    ebx,esi
c001cab1:	89 fa                	mov    edx,edi
c001cab3:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001cab7:	89 d1                	mov    ecx,edx
c001cab9:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001cabd:	89 c6                	mov    esi,eax
c001cabf:	89 d7                	mov    edi,edx
c001cac1:	39 d1                	cmp    ecx,edx
c001cac3:	72 27                	jb     c001caec <__umoddi3+0x10c>
c001cac5:	74 21                	je     c001cae8 <__umoddi3+0x108>
c001cac7:	89 ca                	mov    edx,ecx
c001cac9:	29 f3                	sub    ebx,esi
c001cacb:	19 fa                	sbb    edx,edi
c001cacd:	89 d0                	mov    eax,edx
c001cacf:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001cad3:	d3 e0                	shl    eax,cl
c001cad5:	89 e9                	mov    ecx,ebp
c001cad7:	d3 eb                	shr    ebx,cl
c001cad9:	09 d8                	or     eax,ebx
c001cadb:	d3 ea                	shr    edx,cl
c001cadd:	83 c4 1c             	add    esp,0x1c
c001cae0:	5b                   	pop    ebx
c001cae1:	5e                   	pop    esi
c001cae2:	5f                   	pop    edi
c001cae3:	5d                   	pop    ebp
c001cae4:	c3                   	ret    
c001cae5:	8d 76 00             	lea    esi,[esi+0x0]
c001cae8:	39 c3                	cmp    ebx,eax
c001caea:	73 db                	jae    c001cac7 <__umoddi3+0xe7>
c001caec:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001caf0:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001caf4:	89 d7                	mov    edi,edx
c001caf6:	89 c6                	mov    esi,eax
c001caf8:	eb cd                	jmp    c001cac7 <__umoddi3+0xe7>

Disassembly of section .init:

c001cafa <_init>:
c001cafa:	55                   	push   ebp
c001cafb:	89 e5                	mov    ebp,esp
c001cafd:	e8 f2 35 fe ff       	call   c00000f4 <frame_dummy>
c001cb02:	e8 e5 fa ff ff       	call   c001c5ec <__do_global_ctors_aux>
c001cb07:	5d                   	pop    ebp
c001cb08:	c3                   	ret    

Disassembly of section .fini:

c001cb09 <_fini>:
c001cb09:	55                   	push   ebp
c001cb0a:	89 e5                	mov    ebp,esp
c001cb0c:	e8 73 35 fe ff       	call   c0000084 <__do_global_dtors_aux>
c001cb11:	5d                   	pop    ebp
c001cb12:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c001cb14 <Computer::~Computer()>:
c001cb14:	83 ec 0c             	sub    esp,0xc
c001cb17:	ba d8 dd 01 c0       	mov    edx,0xc001ddd8
c001cb1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb20:	89 10                	mov    DWORD PTR [eax],edx
c001cb22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb26:	83 ec 0c             	sub    esp,0xc
c001cb29:	50                   	push   eax
c001cb2a:	e8 af ed fe ff       	call   c000b8de <Device::~Device()>
c001cb2f:	83 c4 10             	add    esp,0x10
c001cb32:	90                   	nop
c001cb33:	83 c4 0c             	add    esp,0xc
c001cb36:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c001cb38 <Computer::~Computer()>:
c001cb38:	83 ec 0c             	sub    esp,0xc
c001cb3b:	83 ec 0c             	sub    esp,0xc
c001cb3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cb42:	e8 cd ff ff ff       	call   c001cb14 <Computer::~Computer()>
c001cb47:	83 c4 10             	add    esp,0x10
c001cb4a:	83 ec 08             	sub    esp,0x8
c001cb4d:	68 70 01 00 00       	push   0x170
c001cb52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cb56:	e8 01 d9 fe ff       	call   c000a45c <operator delete(void*, unsigned long)>
c001cb5b:	83 c4 10             	add    esp,0x10
c001cb5e:	83 c4 0c             	add    esp,0xc
c001cb61:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c001cb62 <idleCommon()>:
c001cb62:	83 ec 0c             	sub    esp,0xc
c001cb65:	fa                   	cli    
c001cb66:	ff 05 68 61 02 c0    	inc    DWORD PTR ds:0xc0026168
c001cb6c:	e8 53 6c ff ff       	call   c00137c4 <schedule()>
c001cb71:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c001cb76:	48                   	dec    eax
c001cb77:	a3 68 61 02 c0       	mov    ds:0xc0026168,eax
c001cb7c:	75 01                	jne    c001cb7f <idleCommon()+0x1d>
c001cb7e:	fb                   	sti    
c001cb7f:	83 c4 0c             	add    esp,0xc
c001cb82:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c001cb84 <LinkedList<UnixFile>::~LinkedList()>:
c001cb84:	90                   	nop
c001cb85:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c001cb86 <LinkedList<UnixFile>::LinkedList()>:
c001cb86:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cb8a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001cb90:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cb94:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001cb9b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cb9f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001cba6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cbaa:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001cbb0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cbb4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001cbbb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cbbf:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001cbc6:	90                   	nop
c001cbc7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c001cbc8 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c001cbc8:	83 ec 0c             	sub    esp,0xc
c001cbcb:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001cbd0:	75 10                	jne    c001cbe2 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c001cbd2:	83 ec 0c             	sub    esp,0xc
c001cbd5:	68 ec df 01 c0       	push   0xc001dfec
c001cbda:	e8 c8 36 ff ff       	call   c00102a7 <KePanic(char const*)>
c001cbdf:	83 c4 10             	add    esp,0x10
c001cbe2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cbe6:	8b 00                	mov    eax,DWORD PTR [eax]
c001cbe8:	85 c0                	test   eax,eax
c001cbea:	74 34                	je     c001cc20 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001cbec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cbf0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001cbf3:	85 c0                	test   eax,eax
c001cbf5:	74 29                	je     c001cc20 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001cbf7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cbfb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001cbfe:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001cc02:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001cc05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc09:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001cc0d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001cc10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc14:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001cc17:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001cc1e:	eb 65                	jmp    c001cc85 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001cc20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc24:	8b 00                	mov    eax,DWORD PTR [eax]
c001cc26:	85 c0                	test   eax,eax
c001cc28:	75 4b                	jne    c001cc75 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001cc2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc2e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001cc31:	85 c0                	test   eax,eax
c001cc33:	75 40                	jne    c001cc75 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001cc35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc39:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001cc3d:	89 10                	mov    DWORD PTR [eax],edx
c001cc3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc43:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001cc47:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001cc4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc4e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001cc51:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001cc58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc5c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001cc5f:	85 c0                	test   eax,eax
c001cc61:	74 22                	je     c001cc85 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001cc63:	83 ec 0c             	sub    esp,0xc
c001cc66:	68 0e e0 01 c0       	push   0xc001e00e
c001cc6b:	e8 37 36 ff ff       	call   c00102a7 <KePanic(char const*)>
c001cc70:	83 c4 10             	add    esp,0x10
c001cc73:	eb 10                	jmp    c001cc85 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001cc75:	83 ec 0c             	sub    esp,0xc
c001cc78:	68 18 e0 01 c0       	push   0xc001e018
c001cc7d:	e8 25 36 ff ff       	call   c00102a7 <KePanic(char const*)>
c001cc82:	83 c4 10             	add    esp,0x10
c001cc85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc89:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001cc8c:	8d 50 01             	lea    edx,[eax+0x1]
c001cc8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc93:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001cc96:	90                   	nop
c001cc97:	83 c4 0c             	add    esp,0xc
c001cc9a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c001cc9c <LinkedList<UnixFile>::getFirstElement()>:
c001cc9c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cca0:	8b 00                	mov    eax,DWORD PTR [eax]
c001cca2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c001cca4 <LinkedList<UnixFile>::removeFirst()>:
c001cca4:	83 ec 0c             	sub    esp,0xc
c001cca7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ccab:	8b 00                	mov    eax,DWORD PTR [eax]
c001ccad:	85 c0                	test   eax,eax
c001ccaf:	75 12                	jne    c001ccc3 <LinkedList<UnixFile>::removeFirst()+0x1f>
c001ccb1:	83 ec 0c             	sub    esp,0xc
c001ccb4:	68 24 e0 01 c0       	push   0xc001e024
c001ccb9:	e8 e9 35 ff ff       	call   c00102a7 <KePanic(char const*)>
c001ccbe:	83 c4 10             	add    esp,0x10
c001ccc1:	eb 7e                	jmp    c001cd41 <LinkedList<UnixFile>::removeFirst()+0x9d>
c001ccc3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ccc7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ccca:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001cccd:	85 c0                	test   eax,eax
c001cccf:	74 10                	je     c001cce1 <LinkedList<UnixFile>::removeFirst()+0x3d>
c001ccd1:	83 ec 0c             	sub    esp,0xc
c001ccd4:	68 6f e0 01 c0       	push   0xc001e06f
c001ccd9:	e8 c9 35 ff ff       	call   c00102a7 <KePanic(char const*)>
c001ccde:	83 c4 10             	add    esp,0x10
c001cce1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cce5:	8b 00                	mov    eax,DWORD PTR [eax]
c001cce7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ccea:	85 c0                	test   eax,eax
c001ccec:	75 33                	jne    c001cd21 <LinkedList<UnixFile>::removeFirst()+0x7d>
c001ccee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ccf2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ccf8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ccfc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001cd03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd07:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001cd0a:	83 f8 01             	cmp    eax,0x1
c001cd0d:	74 21                	je     c001cd30 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001cd0f:	83 ec 0c             	sub    esp,0xc
c001cd12:	68 48 e0 01 c0       	push   0xc001e048
c001cd17:	e8 8b 35 ff ff       	call   c00102a7 <KePanic(char const*)>
c001cd1c:	83 c4 10             	add    esp,0x10
c001cd1f:	eb 0f                	jmp    c001cd30 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001cd21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd25:	8b 00                	mov    eax,DWORD PTR [eax]
c001cd27:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001cd2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd2e:	89 10                	mov    DWORD PTR [eax],edx
c001cd30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd34:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001cd37:	8d 50 ff             	lea    edx,[eax-0x1]
c001cd3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd3e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001cd41:	83 c4 0c             	add    esp,0xc
c001cd44:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c001cd46 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c001cd46:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cd4a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001cd4d:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001cd4e <DriverlessDevice::~DriverlessDevice()>:
c001cd4e:	ba fc e6 01 c0       	mov    edx,0xc001e6fc
c001cd53:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cd57:	89 10                	mov    DWORD PTR [eax],edx
c001cd59:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cd5d:	50                   	push   eax
c001cd5e:	e8 7b eb fe ff       	call   c000b8de <Device::~Device()>
c001cd63:	83 c4 04             	add    esp,0x4
c001cd66:	90                   	nop
c001cd67:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001cd68 <DriverlessDevice::~DriverlessDevice()>:
c001cd68:	83 ec 0c             	sub    esp,0xc
c001cd6b:	83 ec 0c             	sub    esp,0xc
c001cd6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cd72:	e8 d7 ff ff ff       	call   c001cd4e <DriverlessDevice::~DriverlessDevice()>
c001cd77:	83 c4 10             	add    esp,0x10
c001cd7a:	83 ec 08             	sub    esp,0x8
c001cd7d:	68 58 01 00 00       	push   0x158
c001cd82:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cd86:	e8 d1 d6 fe ff       	call   c000a45c <operator delete(void*, unsigned long)>
c001cd8b:	83 c4 10             	add    esp,0x10
c001cd8e:	83 c4 0c             	add    esp,0xc
c001cd91:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001cd92 <LinkedList<Device>::addElement(Device*)>:
c001cd92:	83 ec 0c             	sub    esp,0xc
c001cd95:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001cd9a:	75 10                	jne    c001cdac <LinkedList<Device>::addElement(Device*)+0x1a>
c001cd9c:	83 ec 0c             	sub    esp,0xc
c001cd9f:	68 ec df 01 c0       	push   0xc001dfec
c001cda4:	e8 fe 34 ff ff       	call   c00102a7 <KePanic(char const*)>
c001cda9:	83 c4 10             	add    esp,0x10
c001cdac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cdb0:	8b 00                	mov    eax,DWORD PTR [eax]
c001cdb2:	85 c0                	test   eax,eax
c001cdb4:	74 3a                	je     c001cdf0 <LinkedList<Device>::addElement(Device*)+0x5e>
c001cdb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cdba:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001cdbd:	85 c0                	test   eax,eax
c001cdbf:	74 2f                	je     c001cdf0 <LinkedList<Device>::addElement(Device*)+0x5e>
c001cdc1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cdc5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001cdc8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001cdcc:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001cdd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cdd6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001cdda:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001cddd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cde1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001cde4:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001cdee:	eb 68                	jmp    c001ce58 <LinkedList<Device>::addElement(Device*)+0xc6>
c001cdf0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cdf4:	8b 00                	mov    eax,DWORD PTR [eax]
c001cdf6:	85 c0                	test   eax,eax
c001cdf8:	75 4e                	jne    c001ce48 <LinkedList<Device>::addElement(Device*)+0xb6>
c001cdfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cdfe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ce01:	85 c0                	test   eax,eax
c001ce03:	75 43                	jne    c001ce48 <LinkedList<Device>::addElement(Device*)+0xb6>
c001ce05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce09:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ce0d:	89 10                	mov    DWORD PTR [eax],edx
c001ce0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce13:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ce17:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001ce1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce1e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ce21:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001ce2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce2f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ce32:	85 c0                	test   eax,eax
c001ce34:	74 22                	je     c001ce58 <LinkedList<Device>::addElement(Device*)+0xc6>
c001ce36:	83 ec 0c             	sub    esp,0xc
c001ce39:	68 0e e0 01 c0       	push   0xc001e00e
c001ce3e:	e8 64 34 ff ff       	call   c00102a7 <KePanic(char const*)>
c001ce43:	83 c4 10             	add    esp,0x10
c001ce46:	eb 10                	jmp    c001ce58 <LinkedList<Device>::addElement(Device*)+0xc6>
c001ce48:	83 ec 0c             	sub    esp,0xc
c001ce4b:	68 18 e0 01 c0       	push   0xc001e018
c001ce50:	e8 52 34 ff ff       	call   c00102a7 <KePanic(char const*)>
c001ce55:	83 c4 10             	add    esp,0x10
c001ce58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce5c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ce5f:	8d 50 01             	lea    edx,[eax+0x1]
c001ce62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce66:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ce69:	90                   	nop
c001ce6a:	83 c4 0c             	add    esp,0xc
c001ce6d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c001ce6e <LinkedList<Device>::LinkedList()>:
c001ce6e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ce72:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ce78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ce7c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ce83:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ce87:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001ce8e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ce92:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ce98:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ce9c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001cea3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cea7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001ceae:	90                   	nop
c001ceaf:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c001ceb0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c001ceb0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ceb4:	8b 00                	mov    eax,DWORD PTR [eax]
c001ceb6:	85 c0                	test   eax,eax
c001ceb8:	75 0e                	jne    c001cec8 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001ceba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cebe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001cec1:	85 c0                	test   eax,eax
c001cec3:	75 03                	jne    c001cec8 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001cec5:	b0 01                	mov    al,0x1
c001cec7:	c3                   	ret    
c001cec8:	b0 00                	mov    al,0x0
c001ceca:	90                   	nop
c001cecb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c001cecc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c001cecc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ced0:	8b 00                	mov    eax,DWORD PTR [eax]
c001ced2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c001ced4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c001ced4:	83 ec 0c             	sub    esp,0xc
c001ced7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cedb:	8b 00                	mov    eax,DWORD PTR [eax]
c001cedd:	85 c0                	test   eax,eax
c001cedf:	75 17                	jne    c001cef8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c001cee1:	83 ec 0c             	sub    esp,0xc
c001cee4:	68 24 e0 01 c0       	push   0xc001e024
c001cee9:	e8 b9 33 ff ff       	call   c00102a7 <KePanic(char const*)>
c001ceee:	83 c4 10             	add    esp,0x10
c001cef1:	e9 92 00 00 00       	jmp    c001cf88 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb4>
c001cef6:	66 90                	xchg   ax,ax
c001cef8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cefc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ceff:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001cf02:	85 c0                	test   eax,eax
c001cf04:	0f 95 c0             	setne  al
c001cf07:	84 c0                	test   al,al
c001cf09:	74 11                	je     c001cf1c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x48>
c001cf0b:	83 ec 0c             	sub    esp,0xc
c001cf0e:	68 6f e0 01 c0       	push   0xc001e06f
c001cf13:	e8 8f 33 ff ff       	call   c00102a7 <KePanic(char const*)>
c001cf18:	83 c4 10             	add    esp,0x10
c001cf1b:	90                   	nop
c001cf1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf20:	8b 00                	mov    eax,DWORD PTR [eax]
c001cf22:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001cf25:	85 c0                	test   eax,eax
c001cf27:	0f 94 c0             	sete   al
c001cf2a:	84 c0                	test   al,al
c001cf2c:	74 36                	je     c001cf64 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x90>
c001cf2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf32:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001cf38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf3c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001cf43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf47:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001cf4a:	83 f8 01             	cmp    eax,0x1
c001cf4d:	74 25                	je     c001cf74 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c001cf4f:	83 ec 0c             	sub    esp,0xc
c001cf52:	68 48 e0 01 c0       	push   0xc001e048
c001cf57:	e8 4b 33 ff ff       	call   c00102a7 <KePanic(char const*)>
c001cf5c:	83 c4 10             	add    esp,0x10
c001cf5f:	eb 13                	jmp    c001cf74 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c001cf61:	8d 76 00             	lea    esi,[esi+0x0]
c001cf64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf68:	8b 00                	mov    eax,DWORD PTR [eax]
c001cf6a:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001cf6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf71:	89 10                	mov    DWORD PTR [eax],edx
c001cf73:	90                   	nop
c001cf74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf78:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001cf7b:	8d 50 ff             	lea    edx,[eax-0x1]
c001cf7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf82:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001cf85:	8d 76 00             	lea    esi,[esi+0x0]
c001cf88:	83 c4 0c             	add    esp,0xc
c001cf8b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c001cf8c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c001cf8c:	83 ec 0c             	sub    esp,0xc
c001cf8f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001cf94:	75 12                	jne    c001cfa8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c001cf96:	83 ec 0c             	sub    esp,0xc
c001cf99:	68 ec df 01 c0       	push   0xc001dfec
c001cf9e:	e8 04 33 ff ff       	call   c00102a7 <KePanic(char const*)>
c001cfa3:	83 c4 10             	add    esp,0x10
c001cfa6:	66 90                	xchg   ax,ax
c001cfa8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cfac:	8b 00                	mov    eax,DWORD PTR [eax]
c001cfae:	85 c0                	test   eax,eax
c001cfb0:	74 36                	je     c001cfe8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001cfb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cfb6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001cfb9:	85 c0                	test   eax,eax
c001cfbb:	74 2b                	je     c001cfe8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001cfbd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cfc1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001cfc4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001cfc8:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001cfcb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cfcf:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001cfd3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001cfd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cfda:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001cfdd:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001cfe4:	eb 6a                	jmp    c001d050 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001cfe6:	66 90                	xchg   ax,ax
c001cfe8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cfec:	8b 00                	mov    eax,DWORD PTR [eax]
c001cfee:	85 c0                	test   eax,eax
c001cff0:	75 4e                	jne    c001d040 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001cff2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cff6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001cff9:	85 c0                	test   eax,eax
c001cffb:	75 43                	jne    c001d040 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001cffd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d001:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d005:	89 10                	mov    DWORD PTR [eax],edx
c001d007:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d00b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d00f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001d012:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d016:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001d019:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001d020:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d024:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001d027:	85 c0                	test   eax,eax
c001d029:	74 25                	je     c001d050 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001d02b:	83 ec 0c             	sub    esp,0xc
c001d02e:	68 0e e0 01 c0       	push   0xc001e00e
c001d033:	e8 6f 32 ff ff       	call   c00102a7 <KePanic(char const*)>
c001d038:	83 c4 10             	add    esp,0x10
c001d03b:	eb 13                	jmp    c001d050 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001d03d:	8d 76 00             	lea    esi,[esi+0x0]
c001d040:	83 ec 0c             	sub    esp,0xc
c001d043:	68 18 e0 01 c0       	push   0xc001e018
c001d048:	e8 5a 32 ff ff       	call   c00102a7 <KePanic(char const*)>
c001d04d:	83 c4 10             	add    esp,0x10
c001d050:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d054:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001d057:	8d 50 01             	lea    edx,[eax+0x1]
c001d05a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d05e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001d061:	90                   	nop
c001d062:	83 c4 0c             	add    esp,0xc
c001d065:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c001d068 <ACPI::~ACPI()>:
c001d068:	83 ec 0c             	sub    esp,0xc
c001d06b:	ba 64 ec 01 c0       	mov    edx,0xc001ec64
c001d070:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d074:	89 10                	mov    DWORD PTR [eax],edx
c001d076:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d07a:	83 ec 0c             	sub    esp,0xc
c001d07d:	50                   	push   eax
c001d07e:	e8 5b e8 fe ff       	call   c000b8de <Device::~Device()>
c001d083:	83 c4 10             	add    esp,0x10
c001d086:	90                   	nop
c001d087:	83 c4 0c             	add    esp,0xc
c001d08a:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c001d08c <ACPI::~ACPI()>:
c001d08c:	83 ec 0c             	sub    esp,0xc
c001d08f:	83 ec 0c             	sub    esp,0xc
c001d092:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d096:	e8 cd ff ff ff       	call   c001d068 <ACPI::~ACPI()>
c001d09b:	83 c4 10             	add    esp,0x10
c001d09e:	83 ec 08             	sub    esp,0x8
c001d0a1:	68 64 12 00 00       	push   0x1264
c001d0a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d0aa:	e8 ad d3 fe ff       	call   c000a45c <operator delete(void*, unsigned long)>
c001d0af:	83 c4 10             	add    esp,0x10
c001d0b2:	83 c4 0c             	add    esp,0xc
c001d0b5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c001d0b8 <LinkedList<Device>::~LinkedList()>:
c001d0b8:	90                   	nop
c001d0b9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c001d0bc <LinkedList<Device>::isEmpty()>:
c001d0bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d0c0:	8b 00                	mov    eax,DWORD PTR [eax]
c001d0c2:	85 c0                	test   eax,eax
c001d0c4:	75 0e                	jne    c001d0d4 <LinkedList<Device>::isEmpty()+0x18>
c001d0c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d0ca:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001d0cd:	85 c0                	test   eax,eax
c001d0cf:	75 03                	jne    c001d0d4 <LinkedList<Device>::isEmpty()+0x18>
c001d0d1:	b0 01                	mov    al,0x1
c001d0d3:	c3                   	ret    
c001d0d4:	b0 00                	mov    al,0x0
c001d0d6:	90                   	nop
c001d0d7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c001d0d8 <LinkedList<Device>::getFirstElement()>:
c001d0d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d0dc:	8b 00                	mov    eax,DWORD PTR [eax]
c001d0de:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c001d0e0 <LinkedList<Device>::removeFirst()>:
c001d0e0:	83 ec 0c             	sub    esp,0xc
c001d0e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d0e7:	8b 00                	mov    eax,DWORD PTR [eax]
c001d0e9:	85 c0                	test   eax,eax
c001d0eb:	75 17                	jne    c001d104 <LinkedList<Device>::removeFirst()+0x24>
c001d0ed:	83 ec 0c             	sub    esp,0xc
c001d0f0:	68 24 e0 01 c0       	push   0xc001e024
c001d0f5:	e8 ad 31 ff ff       	call   c00102a7 <KePanic(char const*)>
c001d0fa:	83 c4 10             	add    esp,0x10
c001d0fd:	e9 92 00 00 00       	jmp    c001d194 <LinkedList<Device>::removeFirst()+0xb4>
c001d102:	66 90                	xchg   ax,ax
c001d104:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d108:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001d10b:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001d111:	85 c0                	test   eax,eax
c001d113:	74 13                	je     c001d128 <LinkedList<Device>::removeFirst()+0x48>
c001d115:	83 ec 0c             	sub    esp,0xc
c001d118:	68 6f e0 01 c0       	push   0xc001e06f
c001d11d:	e8 85 31 ff ff       	call   c00102a7 <KePanic(char const*)>
c001d122:	83 c4 10             	add    esp,0x10
c001d125:	8d 76 00             	lea    esi,[esi+0x0]
c001d128:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d12c:	8b 00                	mov    eax,DWORD PTR [eax]
c001d12e:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001d134:	85 c0                	test   eax,eax
c001d136:	75 34                	jne    c001d16c <LinkedList<Device>::removeFirst()+0x8c>
c001d138:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d13c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001d142:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d146:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001d14d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d151:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001d154:	83 f8 01             	cmp    eax,0x1
c001d157:	74 27                	je     c001d180 <LinkedList<Device>::removeFirst()+0xa0>
c001d159:	83 ec 0c             	sub    esp,0xc
c001d15c:	68 48 e0 01 c0       	push   0xc001e048
c001d161:	e8 41 31 ff ff       	call   c00102a7 <KePanic(char const*)>
c001d166:	83 c4 10             	add    esp,0x10
c001d169:	eb 15                	jmp    c001d180 <LinkedList<Device>::removeFirst()+0xa0>
c001d16b:	90                   	nop
c001d16c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d170:	8b 00                	mov    eax,DWORD PTR [eax]
c001d172:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c001d178:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d17c:	89 10                	mov    DWORD PTR [eax],edx
c001d17e:	66 90                	xchg   ax,ax
c001d180:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d184:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001d187:	8d 50 ff             	lea    edx,[eax-0x1]
c001d18a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d18e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001d191:	8d 76 00             	lea    esi,[esi+0x0]
c001d194:	83 c4 0c             	add    esp,0xc
c001d197:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c001d198 <CPU::~CPU()>:
c001d198:	83 ec 0c             	sub    esp,0xc
c001d19b:	ba 00 ee 01 c0       	mov    edx,0xc001ee00
c001d1a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d1a4:	89 10                	mov    DWORD PTR [eax],edx
c001d1a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d1aa:	83 ec 0c             	sub    esp,0xc
c001d1ad:	50                   	push   eax
c001d1ae:	e8 2b e7 fe ff       	call   c000b8de <Device::~Device()>
c001d1b3:	83 c4 10             	add    esp,0x10
c001d1b6:	90                   	nop
c001d1b7:	83 c4 0c             	add    esp,0xc
c001d1ba:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c001d1bc <CPU::~CPU()>:
c001d1bc:	83 ec 0c             	sub    esp,0xc
c001d1bf:	83 ec 0c             	sub    esp,0xc
c001d1c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d1c6:	e8 cd ff ff ff       	call   c001d198 <CPU::~CPU()>
c001d1cb:	83 c4 10             	add    esp,0x10
c001d1ce:	83 ec 08             	sub    esp,0x8
c001d1d1:	68 94 11 00 00       	push   0x1194
c001d1d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d1da:	e8 7d d2 fe ff       	call   c000a45c <operator delete(void*, unsigned long)>
c001d1df:	83 c4 10             	add    esp,0x10
c001d1e2:	83 c4 0c             	add    esp,0xc
c001d1e5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c001d1e8 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c001d1e8:	90                   	nop
c001d1e9:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c001d1ec <ThreadControlBlock::ThreadControlBlock()>:
c001d1ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d1f0:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001d1f7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d1fb:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001d202:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d206:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c001d20d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d211:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c001d218:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d21c:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c001d223:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d227:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c001d22b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d22f:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c001d233:	90                   	nop
c001d234:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c001d238 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c001d238:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d23c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001d242:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d246:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001d24d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d251:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001d258:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d25c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001d262:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d266:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001d26d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d271:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001d278:	90                   	nop
c001d279:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c001d27c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c001d27c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d280:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001d283:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c001d284 <PCI::~PCI()>:
c001d284:	83 ec 0c             	sub    esp,0xc
c001d287:	ba 54 fa 01 c0       	mov    edx,0xc001fa54
c001d28c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d290:	89 10                	mov    DWORD PTR [eax],edx
c001d292:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d296:	83 ec 0c             	sub    esp,0xc
c001d299:	50                   	push   eax
c001d29a:	e8 c9 e0 fe ff       	call   c000b368 <Bus::~Bus()>
c001d29f:	83 c4 10             	add    esp,0x10
c001d2a2:	90                   	nop
c001d2a3:	83 c4 0c             	add    esp,0xc
c001d2a6:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c001d2a8 <PCI::~PCI()>:
c001d2a8:	83 ec 0c             	sub    esp,0xc
c001d2ab:	83 ec 0c             	sub    esp,0xc
c001d2ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d2b2:	e8 cd ff ff ff       	call   c001d284 <PCI::~PCI()>
c001d2b7:	83 c4 10             	add    esp,0x10
c001d2ba:	83 ec 08             	sub    esp,0x8
c001d2bd:	68 5c 01 00 00       	push   0x15c
c001d2c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d2c6:	e8 91 d1 fe ff       	call   c000a45c <operator delete(void*, unsigned long)>
c001d2cb:	83 c4 10             	add    esp,0x10
c001d2ce:	83 c4 0c             	add    esp,0xc
c001d2d1:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c001d2d2 <IDE::~IDE()>:
c001d2d2:	83 ec 0c             	sub    esp,0xc
c001d2d5:	ba 08 fb 01 c0       	mov    edx,0xc001fb08
c001d2da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d2de:	89 10                	mov    DWORD PTR [eax],edx
c001d2e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d2e4:	83 ec 0c             	sub    esp,0xc
c001d2e7:	50                   	push   eax
c001d2e8:	e8 6b ea fe ff       	call   c000bd58 <HardDiskController::~HardDiskController()>
c001d2ed:	83 c4 10             	add    esp,0x10
c001d2f0:	90                   	nop
c001d2f1:	83 c4 0c             	add    esp,0xc
c001d2f4:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c001d2f6 <IDE::~IDE()>:
c001d2f6:	83 ec 0c             	sub    esp,0xc
c001d2f9:	83 ec 0c             	sub    esp,0xc
c001d2fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d300:	e8 cd ff ff ff       	call   c001d2d2 <IDE::~IDE()>
c001d305:	83 c4 10             	add    esp,0x10
c001d308:	83 ec 08             	sub    esp,0x8
c001d30b:	68 70 02 00 00       	push   0x270
c001d310:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d314:	e8 43 d1 fe ff       	call   c000a45c <operator delete(void*, unsigned long)>
c001d319:	83 c4 10             	add    esp,0x10
c001d31c:	83 c4 0c             	add    esp,0xc
c001d31f:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c001d320 <SATABus::~SATABus()>:
c001d320:	83 ec 0c             	sub    esp,0xc
c001d323:	ba 58 fb 01 c0       	mov    edx,0xc001fb58
c001d328:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d32c:	89 10                	mov    DWORD PTR [eax],edx
c001d32e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d332:	83 ec 0c             	sub    esp,0xc
c001d335:	50                   	push   eax
c001d336:	e8 1d ea fe ff       	call   c000bd58 <HardDiskController::~HardDiskController()>
c001d33b:	83 c4 10             	add    esp,0x10
c001d33e:	90                   	nop
c001d33f:	83 c4 0c             	add    esp,0xc
c001d342:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c001d344 <SATABus::~SATABus()>:
c001d344:	83 ec 0c             	sub    esp,0xc
c001d347:	83 ec 0c             	sub    esp,0xc
c001d34a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d34e:	e8 cd ff ff ff       	call   c001d320 <SATABus::~SATABus()>
c001d353:	83 c4 10             	add    esp,0x10
c001d356:	83 ec 08             	sub    esp,0x8
c001d359:	68 64 01 00 00       	push   0x164
c001d35e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d362:	e8 f5 d0 fe ff       	call   c000a45c <operator delete(void*, unsigned long)>
c001d367:	83 c4 10             	add    esp,0x10
c001d36a:	83 c4 0c             	add    esp,0xc
c001d36d:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c001d36e <ATA::~ATA()>:
c001d36e:	83 ec 0c             	sub    esp,0xc
c001d371:	ba 98 fb 01 c0       	mov    edx,0xc001fb98
c001d376:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d37a:	89 10                	mov    DWORD PTR [eax],edx
c001d37c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d380:	83 ec 0c             	sub    esp,0xc
c001d383:	50                   	push   eax
c001d384:	e8 b1 ea fe ff       	call   c000be3a <PhysicalDisk::~PhysicalDisk()>
c001d389:	83 c4 10             	add    esp,0x10
c001d38c:	90                   	nop
c001d38d:	83 c4 0c             	add    esp,0xc
c001d390:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c001d392 <ATA::~ATA()>:
c001d392:	83 ec 0c             	sub    esp,0xc
c001d395:	83 ec 0c             	sub    esp,0xc
c001d398:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d39c:	e8 cd ff ff ff       	call   c001d36e <ATA::~ATA()>
c001d3a1:	83 c4 10             	add    esp,0x10
c001d3a4:	83 ec 08             	sub    esp,0x8
c001d3a7:	68 7c 01 00 00       	push   0x17c
c001d3ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d3b0:	e8 a7 d0 fe ff       	call   c000a45c <operator delete(void*, unsigned long)>
c001d3b5:	83 c4 10             	add    esp,0x10
c001d3b8:	83 c4 0c             	add    esp,0xc
c001d3bb:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c001d3bc <ATAPI::~ATAPI()>:
c001d3bc:	83 ec 0c             	sub    esp,0xc
c001d3bf:	ba e0 fb 01 c0       	mov    edx,0xc001fbe0
c001d3c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d3c8:	89 10                	mov    DWORD PTR [eax],edx
c001d3ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d3ce:	83 ec 0c             	sub    esp,0xc
c001d3d1:	50                   	push   eax
c001d3d2:	e8 63 ea fe ff       	call   c000be3a <PhysicalDisk::~PhysicalDisk()>
c001d3d7:	83 c4 10             	add    esp,0x10
c001d3da:	90                   	nop
c001d3db:	83 c4 0c             	add    esp,0xc
c001d3de:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c001d3e0 <ATAPI::~ATAPI()>:
c001d3e0:	83 ec 0c             	sub    esp,0xc
c001d3e3:	83 ec 0c             	sub    esp,0xc
c001d3e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d3ea:	e8 cd ff ff ff       	call   c001d3bc <ATAPI::~ATAPI()>
c001d3ef:	83 c4 10             	add    esp,0x10
c001d3f2:	83 ec 08             	sub    esp,0x8
c001d3f5:	68 84 01 00 00       	push   0x184
c001d3fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d3fe:	e8 59 d0 fe ff       	call   c000a45c <operator delete(void*, unsigned long)>
c001d403:	83 c4 10             	add    esp,0x10
c001d406:	83 c4 0c             	add    esp,0xc
c001d409:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c001d40a <SATA::~SATA()>:
c001d40a:	83 ec 0c             	sub    esp,0xc
c001d40d:	ba 94 fc 01 c0       	mov    edx,0xc001fc94
c001d412:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d416:	89 10                	mov    DWORD PTR [eax],edx
c001d418:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d41c:	83 ec 0c             	sub    esp,0xc
c001d41f:	50                   	push   eax
c001d420:	e8 15 ea fe ff       	call   c000be3a <PhysicalDisk::~PhysicalDisk()>
c001d425:	83 c4 10             	add    esp,0x10
c001d428:	90                   	nop
c001d429:	83 c4 0c             	add    esp,0xc
c001d42c:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c001d42e <SATA::~SATA()>:
c001d42e:	83 ec 0c             	sub    esp,0xc
c001d431:	83 ec 0c             	sub    esp,0xc
c001d434:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d438:	e8 cd ff ff ff       	call   c001d40a <SATA::~SATA()>
c001d43d:	83 c4 10             	add    esp,0x10
c001d440:	83 ec 08             	sub    esp,0x8
c001d443:	68 7c 01 00 00       	push   0x17c
c001d448:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d44c:	e8 0b d0 fe ff       	call   c000a45c <operator delete(void*, unsigned long)>
c001d451:	83 c4 10             	add    esp,0x10
c001d454:	83 c4 0c             	add    esp,0xc
c001d457:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c001d458 <SATAPI::~SATAPI()>:
c001d458:	83 ec 0c             	sub    esp,0xc
c001d45b:	ba a4 fd 01 c0       	mov    edx,0xc001fda4
c001d460:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d464:	89 10                	mov    DWORD PTR [eax],edx
c001d466:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d46a:	83 ec 0c             	sub    esp,0xc
c001d46d:	50                   	push   eax
c001d46e:	e8 c7 e9 fe ff       	call   c000be3a <PhysicalDisk::~PhysicalDisk()>
c001d473:	83 c4 10             	add    esp,0x10
c001d476:	90                   	nop
c001d477:	83 c4 0c             	add    esp,0xc
c001d47a:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c001d47c <SATAPI::~SATAPI()>:
c001d47c:	83 ec 0c             	sub    esp,0xc
c001d47f:	83 ec 0c             	sub    esp,0xc
c001d482:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d486:	e8 cd ff ff ff       	call   c001d458 <SATAPI::~SATAPI()>
c001d48b:	83 c4 10             	add    esp,0x10
c001d48e:	83 ec 08             	sub    esp,0x8
c001d491:	68 84 01 00 00       	push   0x184
c001d496:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d49a:	e8 bd cf fe ff       	call   c000a45c <operator delete(void*, unsigned long)>
c001d49f:	83 c4 10             	add    esp,0x10
c001d4a2:	83 c4 0c             	add    esp,0xc
c001d4a5:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c001d4a6 <IOAPIC::~IOAPIC()>:
c001d4a6:	83 ec 0c             	sub    esp,0xc
c001d4a9:	ba e4 fd 01 c0       	mov    edx,0xc001fde4
c001d4ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d4b2:	89 10                	mov    DWORD PTR [eax],edx
c001d4b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d4b8:	83 ec 0c             	sub    esp,0xc
c001d4bb:	50                   	push   eax
c001d4bc:	e8 1d e4 fe ff       	call   c000b8de <Device::~Device()>
c001d4c1:	83 c4 10             	add    esp,0x10
c001d4c4:	90                   	nop
c001d4c5:	83 c4 0c             	add    esp,0xc
c001d4c8:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c001d4ca <IOAPIC::~IOAPIC()>:
c001d4ca:	83 ec 0c             	sub    esp,0xc
c001d4cd:	83 ec 0c             	sub    esp,0xc
c001d4d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d4d4:	e8 cd ff ff ff       	call   c001d4a6 <IOAPIC::~IOAPIC()>
c001d4d9:	83 c4 10             	add    esp,0x10
c001d4dc:	83 ec 08             	sub    esp,0x8
c001d4df:	68 68 01 00 00       	push   0x168
c001d4e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d4e8:	e8 6f cf fe ff       	call   c000a45c <operator delete(void*, unsigned long)>
c001d4ed:	83 c4 10             	add    esp,0x10
c001d4f0:	83 c4 0c             	add    esp,0xc
c001d4f3:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c001d4f4 <APICTimer::~APICTimer()>:
c001d4f4:	83 ec 0c             	sub    esp,0xc
c001d4f7:	ba 2c fe 01 c0       	mov    edx,0xc001fe2c
c001d4fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d500:	89 10                	mov    DWORD PTR [eax],edx
c001d502:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d506:	83 ec 0c             	sub    esp,0xc
c001d509:	50                   	push   eax
c001d50a:	e8 fd fc fe ff       	call   c000d20c <Timer::~Timer()>
c001d50f:	83 c4 10             	add    esp,0x10
c001d512:	90                   	nop
c001d513:	83 c4 0c             	add    esp,0xc
c001d516:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c001d518 <APICTimer::~APICTimer()>:
c001d518:	83 ec 0c             	sub    esp,0xc
c001d51b:	83 ec 0c             	sub    esp,0xc
c001d51e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d522:	e8 cd ff ff ff       	call   c001d4f4 <APICTimer::~APICTimer()>
c001d527:	83 c4 10             	add    esp,0x10
c001d52a:	83 ec 08             	sub    esp,0x8
c001d52d:	68 60 01 00 00       	push   0x160
c001d532:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d536:	e8 21 cf fe ff       	call   c000a45c <operator delete(void*, unsigned long)>
c001d53b:	83 c4 10             	add    esp,0x10
c001d53e:	83 c4 0c             	add    esp,0xc
c001d541:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c001d544 <PIT::~PIT()>:
c001d544:	83 ec 0c             	sub    esp,0xc
c001d547:	ba 7c fe 01 c0       	mov    edx,0xc001fe7c
c001d54c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d550:	89 10                	mov    DWORD PTR [eax],edx
c001d552:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d556:	83 ec 0c             	sub    esp,0xc
c001d559:	50                   	push   eax
c001d55a:	e8 ad fc fe ff       	call   c000d20c <Timer::~Timer()>
c001d55f:	83 c4 10             	add    esp,0x10
c001d562:	90                   	nop
c001d563:	83 c4 0c             	add    esp,0xc
c001d566:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c001d568 <PIT::~PIT()>:
c001d568:	83 ec 0c             	sub    esp,0xc
c001d56b:	83 ec 0c             	sub    esp,0xc
c001d56e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d572:	e8 cd ff ff ff       	call   c001d544 <PIT::~PIT()>
c001d577:	83 c4 10             	add    esp,0x10
c001d57a:	83 ec 08             	sub    esp,0x8
c001d57d:	68 5c 01 00 00       	push   0x15c
c001d582:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d586:	e8 d1 ce fe ff       	call   c000a45c <operator delete(void*, unsigned long)>
c001d58b:	83 c4 10             	add    esp,0x10
c001d58e:	83 c4 0c             	add    esp,0xc
c001d591:	c3                   	ret    

Disassembly of section userkernel:

c0021000 <KiDefaultSignalHandlerAbort(int)>:
c0021000:	57                   	push   edi
c0021001:	b9 07 00 00 00       	mov    ecx,0x7
c0021006:	56                   	push   esi
c0021007:	be f1 ee 01 c0       	mov    esi,0xc001eef1
c002100c:	83 ec 24             	sub    esp,0x24
c002100f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0021013:	fc                   	cld    
c0021014:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0021016:	8d 44 24 04          	lea    eax,[esp+0x4]
c002101a:	50                   	push   eax
c002101b:	6a 00                	push   0x0
c002101d:	6a 38                	push   0x38
c002101f:	6a 01                	push   0x1
c0021021:	e8 2c 00 00 00       	call   c0021052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0021026:	83 c4 34             	add    esp,0x34
c0021029:	5e                   	pop    esi
c002102a:	5f                   	pop    edi
c002102b:	c3                   	ret    

c002102c <KiDefaultSignalHandlerTerminate(int)>:
c002102c:	57                   	push   edi
c002102d:	b9 08 00 00 00       	mov    ecx,0x8
c0021032:	56                   	push   esi
c0021033:	be 0d ef 01 c0       	mov    esi,0xc001ef0d
c0021038:	83 ec 24             	sub    esp,0x24
c002103b:	89 e7                	mov    edi,esp
c002103d:	fc                   	cld    
c002103e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0021040:	54                   	push   esp
c0021041:	6a 00                	push   0x0
c0021043:	6a 37                	push   0x37
c0021045:	6a 01                	push   0x1
c0021047:	e8 06 00 00 00       	call   c0021052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c002104c:	83 c4 34             	add    esp,0x34
c002104f:	5e                   	pop    esi
c0021050:	5f                   	pop    edi
c0021051:	c3                   	ret    

c0021052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>:
c0021052:	53                   	push   ebx
c0021053:	83 ec 10             	sub    esp,0x10
c0021056:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002105a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c002105e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0021062:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0021066:	cd 60                	int    0x60
c0021068:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002106c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021070:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021074:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021078:	83 c4 10             	add    esp,0x10
c002107b:	5b                   	pop    ebx
c002107c:	c3                   	ret    

Disassembly of section align_previous:

c0022000 <DO_NOT_DELETE()>:
c0022000:	c3                   	ret    
