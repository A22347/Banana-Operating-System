
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 3d 98 00 00       	call   c000985d <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 95 16 02 00       	call   c00216ba <_init>
c0000025:	c3                   	ret    
c0000026:	bb 66 21 02 c0       	mov    ebx,0xc0022166
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb 74 21 02 c0    	cmp    ebx,0xc0022174
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 64 5d 02 c0       	mov    eax,0xc0025d64
c0000049:	3d 64 5d 02 c0       	cmp    eax,0xc0025d64
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 64 5d 02 c0       	push   0xc0025d64
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 64 5d 02 c0       	mov    eax,0xc0025d64
c0000075:	2d 64 5d 02 c0       	sub    eax,0xc0025d64
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 64 5d 02 c0       	push   0xc0025d64
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d ec 5e 02 c0 00 	cmp    BYTE PTR ds:0xc0025eec,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb 7c 21 02 c0       	mov    ebx,0xc002217c
c00000bb:	81 eb 78 21 02 c0    	sub    ebx,0xc0022178
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be 78 21 02 c0       	mov    esi,0xc0022178
c00000ca:	a1 f0 5e 02 c0       	mov    eax,ds:0xc0025ef0
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 f0 5e 02 c0       	mov    ds:0xc0025ef0,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 f0 5e 02 c0       	mov    eax,ds:0xc0025ef0
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 64 5d 02 c0       	push   0xc0025d64
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 ec 5e 02 c0 01 	mov    BYTE PTR ds:0xc0025eec,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 f4 5e 02 c0       	push   0xc0025ef4
c000012c:	68 64 5d 02 c0       	push   0xc0025d64
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <doTPAUSE>:
c00001b4:	fb                   	sti    
c00001b5:	31 c0                	xor    eax,eax
c00001b7:	31 d2                	xor    edx,edx
c00001b9:	66 0f ae f0          	tpause eax
c00001bd:	c3                   	ret    

c00001be <hasLegacyFPU>:
c00001be:	0f 20 c2             	mov    edx,cr0
c00001c1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001c7:	0f 22 c2             	mov    cr0,edx
c00001ca:	db e3                	fninit 
c00001cc:	dd 3d e1 01 00 c0    	fnstsw WORD PTR ds:0xc00001e1
c00001d2:	31 c0                	xor    eax,eax
c00001d4:	66 81 3d e1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001e1,0x0
c00001dd:	75 01                	jne    c00001e0 <hasLegacyFPU.nofpu>

c00001df <hasLegacyFPU.hasfpu>:
c00001df:	40                   	inc    eax

c00001e0 <hasLegacyFPU.nofpu>:
c00001e0:	c3                   	ret    

c00001e1 <testword>:
c00001e1:	aa                   	stos   BYTE PTR es:[edi],al
c00001e2:	55                   	push   ebp

c00001e3 <is486>:
c00001e3:	0f 09                	wbinvd 
c00001e5:	31 c0                	xor    eax,eax
c00001e7:	40                   	inc    eax
c00001e8:	c3                   	ret    
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	90                   	nop
c00001f7:	90                   	nop
c00001f8:	90                   	nop
c00001f9:	90                   	nop
c00001fa:	90                   	nop
c00001fb:	90                   	nop
c00001fc:	90                   	nop
c00001fd:	90                   	nop
c00001fe:	90                   	nop
c00001ff:	90                   	nop
c0000200:	90                   	nop
c0000201:	90                   	nop
c0000202:	90                   	nop
c0000203:	90                   	nop
c0000204:	90                   	nop
c0000205:	90                   	nop
c0000206:	90                   	nop
c0000207:	90                   	nop
c0000208:	90                   	nop
c0000209:	90                   	nop
c000020a:	90                   	nop
c000020b:	90                   	nop
c000020c:	90                   	nop
c000020d:	90                   	nop
c000020e:	90                   	nop
c000020f:	90                   	nop
c0000210:	90                   	nop
c0000211:	90                   	nop
c0000212:	90                   	nop
c0000213:	90                   	nop
c0000214:	90                   	nop
c0000215:	90                   	nop
c0000216:	31 c0                	xor    eax,eax
c0000218:	c3                   	ret    

c0000219 <detectCPUID>:
c0000219:	9c                   	pushf  
c000021a:	9c                   	pushf  
c000021b:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000222:	9d                   	popf   
c0000223:	9c                   	pushf  
c0000224:	58                   	pop    eax
c0000225:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000228:	9d                   	popf   
c0000229:	25 00 00 20 00       	and    eax,0x200000
c000022e:	c3                   	ret    

c000022f <goToVM86>:
c000022f:	55                   	push   ebp
c0000230:	89 e5                	mov    ebp,esp
c0000232:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000235:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000238:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000023b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000023e:	25 ff ff 00 00       	and    eax,0xffff
c0000243:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000249:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000024f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000255:	52                   	push   edx
c0000256:	51                   	push   ecx
c0000257:	68 02 02 02 00       	push   0x20202
c000025c:	53                   	push   ebx
c000025d:	50                   	push   eax
c000025e:	cf                   	iret   

c000025f <goToUsermode>:
c000025f:	55                   	push   ebp
c0000260:	89 e5                	mov    ebp,esp
c0000262:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000265:	66 b8 23 00          	mov    ax,0x23
c0000269:	66 8e d8             	mov    ds,ax
c000026c:	66 8e c0             	mov    es,ax
c000026f:	66 8e e0             	mov    fs,ax
c0000272:	66 8e e8             	mov    gs,ax
c0000275:	89 e0                	mov    eax,esp
c0000277:	68 23 00 00 00       	push   0x23
c000027c:	50                   	push   eax
c000027d:	68 02 02 00 00       	push   0x202
c0000282:	68 1b 00 00 00       	push   0x1b
c0000287:	53                   	push   ebx
c0000288:	cf                   	iret   

c0000289 <switchToThreadASMFirstTime>:
c0000289:	9c                   	pushf  
c000028a:	fa                   	cli    
c000028b:	50                   	push   eax
c000028c:	53                   	push   ebx
c000028d:	51                   	push   ecx
c000028e:	52                   	push   edx
c000028f:	56                   	push   esi
c0000290:	57                   	push   edi
c0000291:	55                   	push   ebp
c0000292:	e9 11 00 00 00       	jmp    c00002a8 <commonThreadSwitch>

c0000297 <switchToThreadASM>:
c0000297:	9c                   	pushf  
c0000298:	50                   	push   eax
c0000299:	53                   	push   ebx
c000029a:	51                   	push   ecx
c000029b:	52                   	push   edx
c000029c:	56                   	push   esi
c000029d:	57                   	push   edi
c000029e:	55                   	push   ebp
c000029f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c00002a5:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c00002a8 <commonThreadSwitch>:
c00002a8:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00002ac:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c00002b2:	8b 06                	mov    eax,DWORD PTR [esi]
c00002b4:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c00002b7:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c00002ba:	0f 20 d9             	mov    ecx,cr3
c00002bd:	39 c8                	cmp    eax,ecx
c00002bf:	74 03                	je     c00002c4 <commonThreadSwitch.doneVAS>
c00002c1:	0f 22 d8             	mov    cr3,eax

c00002c4 <commonThreadSwitch.doneVAS>:
c00002c4:	85 d2                	test   edx,edx
c00002c6:	75 11                	jne    c00002d9 <commonThreadSwitch.firstTime>
c00002c8:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002cb:	e8 c4 55 01 00       	call   c0015894 <changeTSS>
c00002d0:	5d                   	pop    ebp
c00002d1:	5f                   	pop    edi
c00002d2:	5e                   	pop    esi
c00002d3:	5a                   	pop    edx
c00002d4:	59                   	pop    ecx
c00002d5:	5b                   	pop    ebx
c00002d6:	58                   	pop    eax
c00002d7:	9d                   	popf   
c00002d8:	c3                   	ret    

c00002d9 <commonThreadSwitch.firstTime>:
c00002d9:	fa                   	cli    
c00002da:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002dd:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002e2:	60                   	pusha  
c00002e3:	e8 b6 c1 00 00       	call   c000c49e <mapVASFirstTime>
c00002e8:	61                   	popa   
c00002e9:	89 c4                	mov    esp,eax
c00002eb:	56                   	push   esi
c00002ec:	52                   	push   edx
c00002ed:	e8 a2 55 01 00       	call   c0015894 <changeTSS>
c00002f2:	5a                   	pop    edx
c00002f3:	5e                   	pop    esi
c00002f4:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002fb:	5d                   	pop    ebp
c00002fc:	5f                   	pop    edi
c00002fd:	5e                   	pop    esi
c00002fe:	59                   	pop    ecx
c00002ff:	59                   	pop    ecx
c0000300:	5b                   	pop    ebx
c0000301:	58                   	pop    eax
c0000302:	81 c4 04 00 00 00    	add    esp,0x4
c0000308:	6a 02                	push   0x2
c000030a:	9d                   	popf   
c000030b:	52                   	push   edx
c000030c:	e8 63 5a 01 00       	call   c0015d74 <taskStartupFunction>
c0000311:	5a                   	pop    edx
c0000312:	50                   	push   eax
c0000313:	ff d2                	call   edx
c0000315:	e8 a6 60 01 00       	call   c00163c0 <taskReturned>
c000031a:	e9 fb ff ff ff       	jmp    c000031a <commonThreadSwitch.firstTime+0x41>

c000031f <asmQuickAcquireLock>:
c000031f:	55                   	push   ebp
c0000320:	89 e5                	mov    ebp,esp
c0000322:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000325 <asmQuickAcquireLock.retry>:
c0000325:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c000032a:	72 02                	jb     c000032e <asmQuickAcquireLock.spin_with_pause>
c000032c:	fa                   	cli    
c000032d:	c3                   	ret    

c000032e <asmQuickAcquireLock.spin_with_pause>:
c000032e:	f3 90                	pause  
c0000330:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000336:	75 f6                	jne    c000032e <asmQuickAcquireLock.spin_with_pause>
c0000338:	e9 e8 ff ff ff       	jmp    c0000325 <asmQuickAcquireLock.retry>

c000033d <asmQuickReleaseLock>:
c000033d:	55                   	push   ebp
c000033e:	89 e5                	mov    ebp,esp
c0000340:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000347:	5d                   	pop    ebp
c0000348:	c3                   	ret    

c0000349 <asmAcquireLock>:
c0000349:	55                   	push   ebp
c000034a:	89 e5                	mov    ebp,esp
c000034c:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000034f <asmAcquireLock.retry>:
c000034f:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000354:	72 05                	jb     c000035b <asmAcquireLock.spin_with_pause>
c0000356:	9c                   	pushf  
c0000357:	58                   	pop    eax
c0000358:	fa                   	cli    
c0000359:	5d                   	pop    ebp
c000035a:	c3                   	ret    

c000035b <asmAcquireLock.spin_with_pause>:
c000035b:	f3 90                	pause  
c000035d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000363:	75 f6                	jne    c000035b <asmAcquireLock.spin_with_pause>
c0000365:	e9 e5 ff ff ff       	jmp    c000034f <asmAcquireLock.retry>

c000036a <asmReleaseLock>:
c000036a:	55                   	push   ebp
c000036b:	89 e5                	mov    ebp,esp
c000036d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000370:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000373:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000379:	52                   	push   edx
c000037a:	9d                   	popf   
c000037b:	5d                   	pop    ebp
c000037c:	c3                   	ret    

c000037d <loadGDT>:
c000037d:	0f 01 15 30 63 02 c0 	lgdtd  ds:0xc0026330
c0000384:	66 b8 10 00          	mov    ax,0x10
c0000388:	66 8e d8             	mov    ds,ax
c000038b:	66 8e c0             	mov    es,ax
c000038e:	66 8e e0             	mov    fs,ax
c0000391:	66 8e e8             	mov    gs,ax
c0000394:	66 8e d0             	mov    ss,ax
c0000397:	e9 00 00 00 00       	jmp    c000039c <flush2>

c000039c <flush2>:
c000039c:	c3                   	ret    

c000039d <memcpy>:
c000039d:	e9 7c 83 00 00       	jmp    c000871e <__not_memcpy>
c00003a2:	66 90                	xchg   ax,ax

c00003a4 <memcmp>:
c00003a4:	56                   	push   esi
c00003a5:	53                   	push   ebx
c00003a6:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00003aa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00003ae:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00003b2:	85 f6                	test   esi,esi
c00003b4:	74 1d                	je     c00003d3 <memcmp+0x2f>
c00003b6:	8a 08                	mov    cl,BYTE PTR [eax]
c00003b8:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00003bb:	38 cb                	cmp    bl,cl
c00003bd:	75 19                	jne    c00003d8 <memcmp+0x34>
c00003bf:	01 c6                	add    esi,eax
c00003c1:	eb 0a                	jmp    c00003cd <memcmp+0x29>
c00003c3:	90                   	nop
c00003c4:	8a 08                	mov    cl,BYTE PTR [eax]
c00003c6:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00003c9:	38 d9                	cmp    cl,bl
c00003cb:	75 0b                	jne    c00003d8 <memcmp+0x34>
c00003cd:	40                   	inc    eax
c00003ce:	42                   	inc    edx
c00003cf:	39 f0                	cmp    eax,esi
c00003d1:	75 f1                	jne    c00003c4 <memcmp+0x20>
c00003d3:	31 c0                	xor    eax,eax
c00003d5:	5b                   	pop    ebx
c00003d6:	5e                   	pop    esi
c00003d7:	c3                   	ret    
c00003d8:	0f b6 c1             	movzx  eax,cl
c00003db:	29 d8                	sub    eax,ebx
c00003dd:	5b                   	pop    ebx
c00003de:	5e                   	pop    esi
c00003df:	c3                   	ret    

c00003e0 <memmove>:
c00003e0:	55                   	push   ebp
c00003e1:	57                   	push   edi
c00003e2:	56                   	push   esi
c00003e3:	53                   	push   ebx
c00003e4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00003e8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00003ec:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00003f0:	39 dd                	cmp    ebp,ebx
c00003f2:	0f 83 80 00 00 00    	jae    c0000478 <memmove+0x98>
c00003f8:	85 d2                	test   edx,edx
c00003fa:	74 74                	je     c0000470 <memmove+0x90>
c00003fc:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00003ff:	8d 75 04             	lea    esi,[ebp+0x4]
c0000402:	39 cd                	cmp    ebp,ecx
c0000404:	0f 93 c1             	setae  cl
c0000407:	39 f3                	cmp    ebx,esi
c0000409:	0f 93 c0             	setae  al
c000040c:	89 c6                	mov    esi,eax
c000040e:	09 ce                	or     esi,ecx
c0000410:	8d 4a ff             	lea    ecx,[edx-0x1]
c0000413:	89 f0                	mov    eax,esi
c0000415:	83 f9 0c             	cmp    ecx,0xc
c0000418:	0f 97 c1             	seta   cl
c000041b:	84 c8                	test   al,cl
c000041d:	74 75                	je     c0000494 <memmove+0xb4>
c000041f:	89 e9                	mov    ecx,ebp
c0000421:	09 d9                	or     ecx,ebx
c0000423:	83 e1 03             	and    ecx,0x3
c0000426:	75 6c                	jne    c0000494 <memmove+0xb4>
c0000428:	89 d7                	mov    edi,edx
c000042a:	89 d9                	mov    ecx,ebx
c000042c:	83 e7 fc             	and    edi,0xfffffffc
c000042f:	89 ee                	mov    esi,ebp
c0000431:	01 df                	add    edi,ebx
c0000433:	90                   	nop
c0000434:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000436:	83 c6 04             	add    esi,0x4
c0000439:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c000043c:	83 c1 04             	add    ecx,0x4
c000043f:	39 f9                	cmp    ecx,edi
c0000441:	75 f1                	jne    c0000434 <memmove+0x54>
c0000443:	89 d1                	mov    ecx,edx
c0000445:	89 d7                	mov    edi,edx
c0000447:	83 e1 fc             	and    ecx,0xfffffffc
c000044a:	29 cf                	sub    edi,ecx
c000044c:	01 cb                	add    ebx,ecx
c000044e:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c0000452:	39 ca                	cmp    edx,ecx
c0000454:	74 1a                	je     c0000470 <memmove+0x90>
c0000456:	8a 03                	mov    al,BYTE PTR [ebx]
c0000458:	83 ff 01             	cmp    edi,0x1
c000045b:	88 06                	mov    BYTE PTR [esi],al
c000045d:	74 11                	je     c0000470 <memmove+0x90>
c000045f:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c0000462:	83 ff 02             	cmp    edi,0x2
c0000465:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000468:	74 06                	je     c0000470 <memmove+0x90>
c000046a:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c000046d:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c0000470:	5b                   	pop    ebx
c0000471:	89 e8                	mov    eax,ebp
c0000473:	5e                   	pop    esi
c0000474:	5f                   	pop    edi
c0000475:	5d                   	pop    ebp
c0000476:	c3                   	ret    
c0000477:	90                   	nop
c0000478:	76 f6                	jbe    c0000470 <memmove+0x90>
c000047a:	85 d2                	test   edx,edx
c000047c:	74 f2                	je     c0000470 <memmove+0x90>
c000047e:	4b                   	dec    ebx
c000047f:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0000482:	66 90                	xchg   ax,ax
c0000484:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0000487:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c000048a:	4a                   	dec    edx
c000048b:	75 f7                	jne    c0000484 <memmove+0xa4>
c000048d:	5b                   	pop    ebx
c000048e:	89 e8                	mov    eax,ebp
c0000490:	5e                   	pop    esi
c0000491:	5f                   	pop    edi
c0000492:	5d                   	pop    ebp
c0000493:	c3                   	ret    
c0000494:	01 ea                	add    edx,ebp
c0000496:	89 e9                	mov    ecx,ebp
c0000498:	8a 03                	mov    al,BYTE PTR [ebx]
c000049a:	41                   	inc    ecx
c000049b:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c000049e:	43                   	inc    ebx
c000049f:	39 d1                	cmp    ecx,edx
c00004a1:	75 f5                	jne    c0000498 <memmove+0xb8>
c00004a3:	eb cb                	jmp    c0000470 <memmove+0x90>
c00004a5:	8d 76 00             	lea    esi,[esi+0x0]

c00004a8 <memset>:
c00004a8:	57                   	push   edi
c00004a9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00004ad:	85 c9                	test   ecx,ecx
c00004af:	74 0b                	je     c00004bc <memset+0x14>
c00004b1:	fc                   	cld    
c00004b2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00004b6:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00004ba:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00004bc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00004c0:	5f                   	pop    edi
c00004c1:	c3                   	ret    
c00004c2:	66 90                	xchg   ax,ax

c00004c4 <strlen>:
c00004c4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00004c8:	31 c0                	xor    eax,eax
c00004ca:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c00004cd:	74 09                	je     c00004d8 <strlen+0x14>
c00004cf:	90                   	nop
c00004d0:	40                   	inc    eax
c00004d1:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c00004d5:	75 f9                	jne    c00004d0 <strlen+0xc>
c00004d7:	c3                   	ret    
c00004d8:	c3                   	ret    
c00004d9:	8d 76 00             	lea    esi,[esi+0x0]

c00004dc <strpbrk>:
c00004dc:	57                   	push   edi
c00004dd:	56                   	push   esi
c00004de:	53                   	push   ebx
c00004df:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00004e3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00004e7:	8a 1e                	mov    bl,BYTE PTR [esi]
c00004e9:	84 db                	test   bl,bl
c00004eb:	74 21                	je     c000050e <strpbrk+0x32>
c00004ed:	8a 07                	mov    al,BYTE PTR [edi]
c00004ef:	84 c0                	test   al,al
c00004f1:	74 14                	je     c0000507 <strpbrk+0x2b>
c00004f3:	38 d8                	cmp    al,bl
c00004f5:	74 19                	je     c0000510 <strpbrk+0x34>
c00004f7:	89 fa                	mov    edx,edi
c00004f9:	eb 05                	jmp    c0000500 <strpbrk+0x24>
c00004fb:	90                   	nop
c00004fc:	38 d9                	cmp    cl,bl
c00004fe:	74 10                	je     c0000510 <strpbrk+0x34>
c0000500:	42                   	inc    edx
c0000501:	8a 0a                	mov    cl,BYTE PTR [edx]
c0000503:	84 c9                	test   cl,cl
c0000505:	75 f5                	jne    c00004fc <strpbrk+0x20>
c0000507:	46                   	inc    esi
c0000508:	8a 1e                	mov    bl,BYTE PTR [esi]
c000050a:	84 db                	test   bl,bl
c000050c:	75 e1                	jne    c00004ef <strpbrk+0x13>
c000050e:	31 f6                	xor    esi,esi
c0000510:	89 f0                	mov    eax,esi
c0000512:	5b                   	pop    ebx
c0000513:	5e                   	pop    esi
c0000514:	5f                   	pop    edi
c0000515:	c3                   	ret    
c0000516:	66 90                	xchg   ax,ax

c0000518 <strtok>:
c0000518:	56                   	push   esi
c0000519:	53                   	push   ebx
c000051a:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000051e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000522:	85 db                	test   ebx,ebx
c0000524:	75 07                	jne    c000052d <strtok+0x15>
c0000526:	eb 2c                	jmp    c0000554 <strtok+0x3c>
c0000528:	43                   	inc    ebx
c0000529:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c000052d:	56                   	push   esi
c000052e:	53                   	push   ebx
c000052f:	e8 a8 ff ff ff       	call   c00004dc <strpbrk>
c0000534:	5a                   	pop    edx
c0000535:	a3 0c 5f 02 c0       	mov    ds:0xc0025f0c,eax
c000053a:	59                   	pop    ecx
c000053b:	39 d8                	cmp    eax,ebx
c000053d:	74 e9                	je     c0000528 <strtok+0x10>
c000053f:	85 c0                	test   eax,eax
c0000541:	74 1b                	je     c000055e <strtok+0x46>
c0000543:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000546:	8d 50 01             	lea    edx,[eax+0x1]
c0000549:	89 d8                	mov    eax,ebx
c000054b:	89 15 0c 5f 02 c0    	mov    DWORD PTR ds:0xc0025f0c,edx
c0000551:	5b                   	pop    ebx
c0000552:	5e                   	pop    esi
c0000553:	c3                   	ret    
c0000554:	8b 1d 0c 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025f0c
c000055a:	85 db                	test   ebx,ebx
c000055c:	75 cf                	jne    c000052d <strtok+0x15>
c000055e:	31 c0                	xor    eax,eax
c0000560:	5b                   	pop    ebx
c0000561:	5e                   	pop    esi
c0000562:	c3                   	ret    
c0000563:	90                   	nop

c0000564 <strcpy>:
c0000564:	53                   	push   ebx
c0000565:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000569:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000056d:	89 c3                	mov    ebx,eax
c000056f:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000571:	84 d2                	test   dl,dl
c0000573:	74 0d                	je     c0000582 <strcpy+0x1e>
c0000575:	8d 76 00             	lea    esi,[esi+0x0]
c0000578:	88 13                	mov    BYTE PTR [ebx],dl
c000057a:	41                   	inc    ecx
c000057b:	43                   	inc    ebx
c000057c:	8a 11                	mov    dl,BYTE PTR [ecx]
c000057e:	84 d2                	test   dl,dl
c0000580:	75 f6                	jne    c0000578 <strcpy+0x14>
c0000582:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000585:	5b                   	pop    ebx
c0000586:	c3                   	ret    
c0000587:	90                   	nop

c0000588 <strncpy>:
c0000588:	55                   	push   ebp
c0000589:	57                   	push   edi
c000058a:	56                   	push   esi
c000058b:	53                   	push   ebx
c000058c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000590:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000594:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000598:	85 c0                	test   eax,eax
c000059a:	74 39                	je     c00005d5 <strncpy+0x4d>
c000059c:	8a 1e                	mov    bl,BYTE PTR [esi]
c000059e:	8d 48 ff             	lea    ecx,[eax-0x1]
c00005a1:	8d 55 01             	lea    edx,[ebp+0x1]
c00005a4:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c00005a7:	84 db                	test   bl,bl
c00005a9:	74 31                	je     c00005dc <strncpy+0x54>
c00005ab:	85 c9                	test   ecx,ecx
c00005ad:	74 26                	je     c00005d5 <strncpy+0x4d>
c00005af:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c00005b2:	8d 48 fe             	lea    ecx,[eax-0x2]
c00005b5:	8d 55 02             	lea    edx,[ebp+0x2]
c00005b8:	8d 46 02             	lea    eax,[esi+0x2]
c00005bb:	88 5d 01             	mov    BYTE PTR [ebp+0x1],bl
c00005be:	84 db                	test   bl,bl
c00005c0:	75 0f                	jne    c00005d1 <strncpy+0x49>
c00005c2:	eb 18                	jmp    c00005dc <strncpy+0x54>
c00005c4:	40                   	inc    eax
c00005c5:	42                   	inc    edx
c00005c6:	8a 58 ff             	mov    bl,BYTE PTR [eax-0x1]
c00005c9:	49                   	dec    ecx
c00005ca:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00005cd:	84 db                	test   bl,bl
c00005cf:	74 0b                	je     c00005dc <strncpy+0x54>
c00005d1:	85 c9                	test   ecx,ecx
c00005d3:	75 ef                	jne    c00005c4 <strncpy+0x3c>
c00005d5:	5b                   	pop    ebx
c00005d6:	89 e8                	mov    eax,ebp
c00005d8:	5e                   	pop    esi
c00005d9:	5f                   	pop    edi
c00005da:	5d                   	pop    ebp
c00005db:	c3                   	ret    
c00005dc:	85 c9                	test   ecx,ecx
c00005de:	74 f5                	je     c00005d5 <strncpy+0x4d>
c00005e0:	fc                   	cld    
c00005e1:	31 c0                	xor    eax,eax
c00005e3:	89 d7                	mov    edi,edx
c00005e5:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00005e7:	89 e8                	mov    eax,ebp
c00005e9:	5b                   	pop    ebx
c00005ea:	5e                   	pop    esi
c00005eb:	5f                   	pop    edi
c00005ec:	5d                   	pop    ebp
c00005ed:	c3                   	ret    
c00005ee:	66 90                	xchg   ax,ax

c00005f0 <strcmp>:
c00005f0:	56                   	push   esi
c00005f1:	53                   	push   ebx
c00005f2:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00005f6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00005fa:	8a 16                	mov    dl,BYTE PTR [esi]
c00005fc:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00005ff:	38 d1                	cmp    cl,dl
c0000601:	75 1d                	jne    c0000620 <strcmp+0x30>
c0000603:	84 c9                	test   cl,cl
c0000605:	74 21                	je     c0000628 <strcmp+0x38>
c0000607:	b8 01 00 00 00       	mov    eax,0x1
c000060c:	eb 07                	jmp    c0000615 <strcmp+0x25>
c000060e:	66 90                	xchg   ax,ax
c0000610:	40                   	inc    eax
c0000611:	84 d2                	test   dl,dl
c0000613:	74 13                	je     c0000628 <strcmp+0x38>
c0000615:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c0000618:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c000061c:	38 ca                	cmp    dl,cl
c000061e:	74 f0                	je     c0000610 <strcmp+0x20>
c0000620:	0f b6 c2             	movzx  eax,dl
c0000623:	5b                   	pop    ebx
c0000624:	29 c8                	sub    eax,ecx
c0000626:	5e                   	pop    esi
c0000627:	c3                   	ret    
c0000628:	31 c0                	xor    eax,eax
c000062a:	5b                   	pop    ebx
c000062b:	5e                   	pop    esi
c000062c:	c3                   	ret    
c000062d:	8d 76 00             	lea    esi,[esi+0x0]

c0000630 <strchr>:
c0000630:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000634:	8a 10                	mov    dl,BYTE PTR [eax]
c0000636:	84 d2                	test   dl,dl
c0000638:	74 15                	je     c000064f <strchr+0x1f>
c000063a:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000063e:	38 ca                	cmp    dl,cl
c0000640:	75 06                	jne    c0000648 <strchr+0x18>
c0000642:	eb 0e                	jmp    c0000652 <strchr+0x22>
c0000644:	38 ca                	cmp    dl,cl
c0000646:	74 09                	je     c0000651 <strchr+0x21>
c0000648:	40                   	inc    eax
c0000649:	8a 10                	mov    dl,BYTE PTR [eax]
c000064b:	84 d2                	test   dl,dl
c000064d:	75 f5                	jne    c0000644 <strchr+0x14>
c000064f:	31 c0                	xor    eax,eax
c0000651:	c3                   	ret    
c0000652:	c3                   	ret    
c0000653:	90                   	nop

c0000654 <strncmp>:
c0000654:	57                   	push   edi
c0000655:	56                   	push   esi
c0000656:	53                   	push   ebx
c0000657:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000065b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000065f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0000663:	85 ff                	test   edi,edi
c0000665:	74 28                	je     c000068f <strncmp+0x3b>
c0000667:	8a 16                	mov    dl,BYTE PTR [esi]
c0000669:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c000066c:	38 d1                	cmp    cl,dl
c000066e:	75 28                	jne    c0000698 <strncmp+0x44>
c0000670:	8d 46 01             	lea    eax,[esi+0x1]
c0000673:	84 c9                	test   cl,cl
c0000675:	74 18                	je     c000068f <strncmp+0x3b>
c0000677:	01 fe                	add    esi,edi
c0000679:	eb 0f                	jmp    c000068a <strncmp+0x36>
c000067b:	90                   	nop
c000067c:	8a 10                	mov    dl,BYTE PTR [eax]
c000067e:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000681:	38 ca                	cmp    dl,cl
c0000683:	75 13                	jne    c0000698 <strncmp+0x44>
c0000685:	40                   	inc    eax
c0000686:	84 d2                	test   dl,dl
c0000688:	74 05                	je     c000068f <strncmp+0x3b>
c000068a:	43                   	inc    ebx
c000068b:	39 c6                	cmp    esi,eax
c000068d:	75 ed                	jne    c000067c <strncmp+0x28>
c000068f:	5b                   	pop    ebx
c0000690:	31 c0                	xor    eax,eax
c0000692:	5e                   	pop    esi
c0000693:	5f                   	pop    edi
c0000694:	c3                   	ret    
c0000695:	8d 76 00             	lea    esi,[esi+0x0]
c0000698:	5b                   	pop    ebx
c0000699:	0f b6 c2             	movzx  eax,dl
c000069c:	5e                   	pop    esi
c000069d:	29 c8                	sub    eax,ecx
c000069f:	5f                   	pop    edi
c00006a0:	c3                   	ret    
c00006a1:	8d 76 00             	lea    esi,[esi+0x0]

c00006a4 <strcat>:
c00006a4:	56                   	push   esi
c00006a5:	53                   	push   ebx
c00006a6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00006aa:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00006ae:	89 c3                	mov    ebx,eax
c00006b0:	eb 04                	jmp    c00006b6 <strcat+0x12>
c00006b2:	66 90                	xchg   ax,ax
c00006b4:	89 d3                	mov    ebx,edx
c00006b6:	8d 53 01             	lea    edx,[ebx+0x1]
c00006b9:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00006bd:	75 f5                	jne    c00006b4 <strcat+0x10>
c00006bf:	31 d2                	xor    edx,edx
c00006c1:	8d 76 00             	lea    esi,[esi+0x0]
c00006c4:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c00006c7:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c00006ca:	42                   	inc    edx
c00006cb:	84 c9                	test   cl,cl
c00006cd:	75 f5                	jne    c00006c4 <strcat+0x20>
c00006cf:	5b                   	pop    ebx
c00006d0:	5e                   	pop    esi
c00006d1:	c3                   	ret    
c00006d2:	66 90                	xchg   ax,ax

c00006d4 <strncat>:
c00006d4:	56                   	push   esi
c00006d5:	53                   	push   ebx
c00006d6:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00006da:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00006de:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00006e2:	85 f6                	test   esi,esi
c00006e4:	74 1e                	je     c0000704 <strncat+0x30>
c00006e6:	89 c2                	mov    edx,eax
c00006e8:	42                   	inc    edx
c00006e9:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00006ed:	75 f9                	jne    c00006e8 <strncat+0x14>
c00006ef:	01 ce                	add    esi,ecx
c00006f1:	eb 06                	jmp    c00006f9 <strncat+0x25>
c00006f3:	90                   	nop
c00006f4:	39 f1                	cmp    ecx,esi
c00006f6:	74 10                	je     c0000708 <strncat+0x34>
c00006f8:	42                   	inc    edx
c00006f9:	41                   	inc    ecx
c00006fa:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00006fd:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c0000700:	84 db                	test   bl,bl
c0000702:	75 f0                	jne    c00006f4 <strncat+0x20>
c0000704:	5b                   	pop    ebx
c0000705:	5e                   	pop    esi
c0000706:	c3                   	ret    
c0000707:	90                   	nop
c0000708:	c6 02 00             	mov    BYTE PTR [edx],0x0
c000070b:	5b                   	pop    ebx
c000070c:	5e                   	pop    esi
c000070d:	c3                   	ret    
c000070e:	66 90                	xchg   ax,ax

c0000710 <strstr>:
c0000710:	57                   	push   edi
c0000711:	56                   	push   esi
c0000712:	53                   	push   ebx
c0000713:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000717:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000071b:	57                   	push   edi
c000071c:	e8 a3 fd ff ff       	call   c00004c4 <strlen>
c0000721:	59                   	pop    ecx
c0000722:	85 c0                	test   eax,eax
c0000724:	74 2a                	je     c0000750 <strstr+0x40>
c0000726:	89 c6                	mov    esi,eax
c0000728:	eb 12                	jmp    c000073c <strstr+0x2c>
c000072a:	66 90                	xchg   ax,ax
c000072c:	56                   	push   esi
c000072d:	57                   	push   edi
c000072e:	53                   	push   ebx
c000072f:	e8 70 fc ff ff       	call   c00003a4 <memcmp>
c0000734:	83 c4 0c             	add    esp,0xc
c0000737:	85 c0                	test   eax,eax
c0000739:	74 15                	je     c0000750 <strstr+0x40>
c000073b:	43                   	inc    ebx
c000073c:	53                   	push   ebx
c000073d:	e8 82 fd ff ff       	call   c00004c4 <strlen>
c0000742:	5a                   	pop    edx
c0000743:	39 f0                	cmp    eax,esi
c0000745:	73 e5                	jae    c000072c <strstr+0x1c>
c0000747:	5b                   	pop    ebx
c0000748:	31 c0                	xor    eax,eax
c000074a:	5e                   	pop    esi
c000074b:	5f                   	pop    edi
c000074c:	c3                   	ret    
c000074d:	8d 76 00             	lea    esi,[esi+0x0]
c0000750:	89 d8                	mov    eax,ebx
c0000752:	5b                   	pop    ebx
c0000753:	5e                   	pop    esi
c0000754:	5f                   	pop    edi
c0000755:	c3                   	ret    
c0000756:	66 90                	xchg   ax,ax

c0000758 <toupper>:
c0000758:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000075c:	0f b6 d0             	movzx  edx,al
c000075f:	f6 82 80 21 02 c0 02 	test   BYTE PTR [edx-0x3ffdde80],0x2
c0000766:	74 03                	je     c000076b <toupper+0x13>
c0000768:	83 e8 20             	sub    eax,0x20
c000076b:	c3                   	ret    

c000076c <tolower>:
c000076c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000770:	0f b6 d0             	movzx  edx,al
c0000773:	f6 82 80 21 02 c0 01 	test   BYTE PTR [edx-0x3ffdde80],0x1
c000077a:	74 03                	je     c000077f <tolower+0x13>
c000077c:	83 c0 20             	add    eax,0x20
c000077f:	c3                   	ret    

c0000780 <simple_strtoul>:
c0000780:	55                   	push   ebp
c0000781:	57                   	push   edi
c0000782:	56                   	push   esi
c0000783:	53                   	push   ebx
c0000784:	83 ec 08             	sub    esp,0x8
c0000787:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000078b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000078f:	90                   	nop
c0000790:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0000793:	f6 82 80 21 02 c0 08 	test   BYTE PTR [edx-0x3ffdde80],0x8
c000079a:	75 05                	jne    c00007a1 <simple_strtoul+0x21>
c000079c:	80 fa 09             	cmp    dl,0x9
c000079f:	75 03                	jne    c00007a4 <simple_strtoul+0x24>
c00007a1:	41                   	inc    ecx
c00007a2:	eb ec                	jmp    c0000790 <simple_strtoul+0x10>
c00007a4:	80 fa 2d             	cmp    dl,0x2d
c00007a7:	0f 84 1b 01 00 00    	je     c00008c8 <simple_strtoul+0x148>
c00007ad:	80 fa 2b             	cmp    dl,0x2b
c00007b0:	0f 84 c2 00 00 00    	je     c0000878 <simple_strtoul+0xf8>
c00007b6:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00007be:	85 f6                	test   esi,esi
c00007c0:	0f 85 c3 00 00 00    	jne    c0000889 <simple_strtoul+0x109>
c00007c6:	8a 11                	mov    dl,BYTE PTR [ecx]
c00007c8:	80 fa 30             	cmp    dl,0x30
c00007cb:	0f 84 47 01 00 00    	je     c0000918 <simple_strtoul+0x198>
c00007d1:	be 0a 00 00 00       	mov    esi,0xa
c00007d6:	84 d2                	test   dl,dl
c00007d8:	0f 84 6f 01 00 00    	je     c000094d <simple_strtoul+0x1cd>
c00007de:	31 ed                	xor    ebp,ebp
c00007e0:	31 ff                	xor    edi,edi
c00007e2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00007e9:	eb 2b                	jmp    c0000816 <simple_strtoul+0x96>
c00007eb:	90                   	nop
c00007ec:	83 eb 30             	sub    ebx,0x30
c00007ef:	39 f3                	cmp    ebx,esi
c00007f1:	73 4d                	jae    c0000840 <simple_strtoul+0xc0>
c00007f3:	31 d2                	xor    edx,edx
c00007f5:	89 d8                	mov    eax,ebx
c00007f7:	f7 d0                	not    eax
c00007f9:	f7 f6                	div    esi
c00007fb:	39 f8                	cmp    eax,edi
c00007fd:	0f 82 b1 00 00 00    	jb     c00008b4 <simple_strtoul+0x134>
c0000803:	0f af fe             	imul   edi,esi
c0000806:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000080d:	01 df                	add    edi,ebx
c000080f:	41                   	inc    ecx
c0000810:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000812:	84 d2                	test   dl,dl
c0000814:	74 2a                	je     c0000840 <simple_strtoul+0xc0>
c0000816:	0f b6 da             	movzx  ebx,dl
c0000819:	f6 83 80 21 02 c0 04 	test   BYTE PTR [ebx-0x3ffdde80],0x4
c0000820:	75 ca                	jne    c00007ec <simple_strtoul+0x6c>
c0000822:	0f be d2             	movsx  edx,dl
c0000825:	52                   	push   edx
c0000826:	e8 2d ff ff ff       	call   c0000758 <toupper>
c000082b:	5b                   	pop    ebx
c000082c:	0f b6 d0             	movzx  edx,al
c000082f:	f6 82 80 21 02 c0 01 	test   BYTE PTR [edx-0x3ffdde80],0x1
c0000836:	74 08                	je     c0000840 <simple_strtoul+0xc0>
c0000838:	8d 58 c9             	lea    ebx,[eax-0x37]
c000083b:	39 f3                	cmp    ebx,esi
c000083d:	72 b4                	jb     c00007f3 <simple_strtoul+0x73>
c000083f:	90                   	nop
c0000840:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000844:	85 c0                	test   eax,eax
c0000846:	74 14                	je     c000085c <simple_strtoul+0xdc>
c0000848:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000084b:	09 f8                	or     eax,edi
c000084d:	75 71                	jne    c00008c0 <simple_strtoul+0x140>
c000084f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000853:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000857:	31 ff                	xor    edi,edi
c0000859:	89 30                	mov    DWORD PTR [eax],esi
c000085b:	90                   	nop
c000085c:	4d                   	dec    ebp
c000085d:	75 05                	jne    c0000864 <simple_strtoul+0xe4>
c000085f:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000864:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000869:	75 02                	jne    c000086d <simple_strtoul+0xed>
c000086b:	f7 df                	neg    edi
c000086d:	83 c4 08             	add    esp,0x8
c0000870:	89 f8                	mov    eax,edi
c0000872:	5b                   	pop    ebx
c0000873:	5e                   	pop    esi
c0000874:	5f                   	pop    edi
c0000875:	5d                   	pop    ebp
c0000876:	c3                   	ret    
c0000877:	90                   	nop
c0000878:	41                   	inc    ecx
c0000879:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000881:	85 f6                	test   esi,esi
c0000883:	0f 84 3d ff ff ff    	je     c00007c6 <simple_strtoul+0x46>
c0000889:	8d 46 fe             	lea    eax,[esi-0x2]
c000088c:	83 f8 22             	cmp    eax,0x22
c000088f:	77 6a                	ja     c00008fb <simple_strtoul+0x17b>
c0000891:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000893:	83 fe 08             	cmp    esi,0x8
c0000896:	0f 84 a2 00 00 00    	je     c000093e <simple_strtoul+0x1be>
c000089c:	83 fe 10             	cmp    esi,0x10
c000089f:	0f 85 31 ff ff ff    	jne    c00007d6 <simple_strtoul+0x56>
c00008a5:	80 fa 30             	cmp    dl,0x30
c00008a8:	74 2c                	je     c00008d6 <simple_strtoul+0x156>
c00008aa:	be 10 00 00 00       	mov    esi,0x10
c00008af:	e9 22 ff ff ff       	jmp    c00007d6 <simple_strtoul+0x56>
c00008b4:	bd 01 00 00 00       	mov    ebp,0x1
c00008b9:	31 ff                	xor    edi,edi
c00008bb:	e9 4f ff ff ff       	jmp    c000080f <simple_strtoul+0x8f>
c00008c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00008c4:	89 08                	mov    DWORD PTR [eax],ecx
c00008c6:	eb 94                	jmp    c000085c <simple_strtoul+0xdc>
c00008c8:	41                   	inc    ecx
c00008c9:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c00008d1:	e9 e8 fe ff ff       	jmp    c00007be <simple_strtoul+0x3e>
c00008d6:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c00008da:	88 04 24             	mov    BYTE PTR [esp],al
c00008dd:	50                   	push   eax
c00008de:	e8 89 fe ff ff       	call   c000076c <tolower>
c00008e3:	5e                   	pop    esi
c00008e4:	83 f8 78             	cmp    eax,0x78
c00008e7:	0f 84 84 00 00 00    	je     c0000971 <simple_strtoul+0x1f1>
c00008ed:	41                   	inc    ecx
c00008ee:	be 10 00 00 00       	mov    esi,0x10
c00008f3:	8a 14 24             	mov    dl,BYTE PTR [esp]
c00008f6:	e9 db fe ff ff       	jmp    c00007d6 <simple_strtoul+0x56>
c00008fb:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00008ff:	85 ff                	test   edi,edi
c0000901:	74 5c                	je     c000095f <simple_strtoul+0x1df>
c0000903:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000907:	85 c9                	test   ecx,ecx
c0000909:	75 4e                	jne    c0000959 <simple_strtoul+0x1d9>
c000090b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000911:	31 ff                	xor    edi,edi
c0000913:	e9 4c ff ff ff       	jmp    c0000864 <simple_strtoul+0xe4>
c0000918:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c000091c:	88 04 24             	mov    BYTE PTR [esp],al
c000091f:	50                   	push   eax
c0000920:	e8 47 fe ff ff       	call   c000076c <tolower>
c0000925:	5d                   	pop    ebp
c0000926:	83 f8 78             	cmp    eax,0x78
c0000929:	74 3b                	je     c0000966 <simple_strtoul+0x1e6>
c000092b:	41                   	inc    ecx
c000092c:	8a 14 24             	mov    dl,BYTE PTR [esp]
c000092f:	80 fa 30             	cmp    dl,0x30
c0000932:	74 13                	je     c0000947 <simple_strtoul+0x1c7>
c0000934:	be 08 00 00 00       	mov    esi,0x8
c0000939:	e9 98 fe ff ff       	jmp    c00007d6 <simple_strtoul+0x56>
c000093e:	80 fa 30             	cmp    dl,0x30
c0000941:	0f 85 8f fe ff ff    	jne    c00007d6 <simple_strtoul+0x56>
c0000947:	8a 51 01             	mov    dl,BYTE PTR [ecx+0x1]
c000094a:	41                   	inc    ecx
c000094b:	eb e7                	jmp    c0000934 <simple_strtoul+0x1b4>
c000094d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000951:	85 d2                	test   edx,edx
c0000953:	74 0a                	je     c000095f <simple_strtoul+0x1df>
c0000955:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000959:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000095d:	89 30                	mov    DWORD PTR [eax],esi
c000095f:	31 ff                	xor    edi,edi
c0000961:	e9 fe fe ff ff       	jmp    c0000864 <simple_strtoul+0xe4>
c0000966:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000969:	83 c1 02             	add    ecx,0x2
c000096c:	e9 34 ff ff ff       	jmp    c00008a5 <simple_strtoul+0x125>
c0000971:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000974:	be 10 00 00 00       	mov    esi,0x10
c0000979:	83 c1 02             	add    ecx,0x2
c000097c:	e9 55 fe ff ff       	jmp    c00007d6 <simple_strtoul+0x56>

c0000981 <largebin_index>:
c0000981:	89 c2                	mov    edx,eax
c0000983:	c1 ea 08             	shr    edx,0x8
c0000986:	81 fa ff ff 00 00    	cmp    edx,0xffff
c000098c:	77 10                	ja     c000099e <largebin_index+0x1d>
c000098e:	0f bd d2             	bsr    edx,edx
c0000991:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000994:	d3 e8                	shr    eax,cl
c0000996:	83 e0 03             	and    eax,0x3
c0000999:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c000099d:	c3                   	ret    
c000099e:	b8 5f 00 00 00       	mov    eax,0x5f
c00009a3:	c3                   	ret    

c00009a4 <malloc_init_state>:
c00009a4:	53                   	push   ebx
c00009a5:	8d 50 34             	lea    edx,[eax+0x34]
c00009a8:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c00009ae:	89 d1                	mov    ecx,edx
c00009b0:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c00009b3:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c00009b6:	83 c2 08             	add    edx,0x8
c00009b9:	39 da                	cmp    edx,ebx
c00009bb:	75 f3                	jne    c00009b0 <malloc_init_state+0xc>
c00009bd:	8b 10                	mov    edx,DWORD PTR [eax]
c00009bf:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c00009c9:	83 e2 03             	and    edx,0x3
c00009cc:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c00009d6:	83 ca 48             	or     edx,0x48
c00009d9:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c00009e3:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c00009ed:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c00009f4:	89 10                	mov    DWORD PTR [eax],edx
c00009f6:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c00009f9:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000a03:	5b                   	pop    ebx
c0000a04:	c3                   	ret    

c0000a05 <malloc_consolidate>:
c0000a05:	8b 10                	mov    edx,DWORD PTR [eax]
c0000a07:	85 d2                	test   edx,edx
c0000a09:	0f 84 d8 00 00 00    	je     c0000ae7 <malloc_consolidate+0xe2>
c0000a0f:	55                   	push   ebp
c0000a10:	83 e2 fd             	and    edx,0xfffffffd
c0000a13:	57                   	push   edi
c0000a14:	89 c5                	mov    ebp,eax
c0000a16:	56                   	push   esi
c0000a17:	8d 78 34             	lea    edi,[eax+0x34]
c0000a1a:	53                   	push   ebx
c0000a1b:	83 ec 10             	sub    esp,0x10
c0000a1e:	89 10                	mov    DWORD PTR [eax],edx
c0000a20:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000a24:	c1 ea 03             	shr    edx,0x3
c0000a27:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000a2b:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000a2f:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000a32:	85 d2                	test   edx,edx
c0000a34:	0f 84 98 00 00 00    	je     c0000ad2 <malloc_consolidate+0xcd>
c0000a3a:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000a41:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000a44:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000a47:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000a4b:	89 f9                	mov    ecx,edi
c0000a4d:	83 e1 fe             	and    ecx,0xfffffffe
c0000a50:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000a53:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000a56:	83 e3 fc             	and    ebx,0xfffffffc
c0000a59:	83 e7 01             	and    edi,0x1
c0000a5c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000a5f:	75 14                	jne    c0000a75 <malloc_consolidate+0x70>
c0000a61:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000a63:	29 fa                	sub    edx,edi
c0000a65:	01 f9                	add    ecx,edi
c0000a67:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000a6a:	89 fb                	mov    ebx,edi
c0000a6c:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000a6f:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000a72:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000a75:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000a78:	74 40                	je     c0000aba <malloc_consolidate+0xb5>
c0000a7a:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000a7d:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000a80:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000a84:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000a87:	83 e7 01             	and    edi,0x1
c0000a8a:	75 0e                	jne    c0000a9a <malloc_consolidate+0x95>
c0000a8c:	01 d9                	add    ecx,ebx
c0000a8e:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000a91:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000a94:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000a97:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000a9a:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000a9d:	89 ce                	mov    esi,ecx
c0000a9f:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000aa2:	83 ce 01             	or     esi,0x1
c0000aa5:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000aa8:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000aab:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000aae:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000ab2:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000ab5:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000ab8:	eb 0c                	jmp    c0000ac6 <malloc_consolidate+0xc1>
c0000aba:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000abd:	83 c9 01             	or     ecx,0x1
c0000ac0:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000ac3:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000ac6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000aca:	85 d2                	test   edx,edx
c0000acc:	0f 85 6f ff ff ff    	jne    c0000a41 <malloc_consolidate+0x3c>
c0000ad2:	83 c5 04             	add    ebp,0x4
c0000ad5:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000ad9:	0f 85 50 ff ff ff    	jne    c0000a2f <malloc_consolidate+0x2a>
c0000adf:	83 c4 10             	add    esp,0x10
c0000ae2:	5b                   	pop    ebx
c0000ae3:	5e                   	pop    esi
c0000ae4:	5f                   	pop    edi
c0000ae5:	5d                   	pop    ebp
c0000ae6:	c3                   	ret    
c0000ae7:	e9 b8 fe ff ff       	jmp    c00009a4 <malloc_init_state>

c0000aec <dlfree>:
c0000aec:	57                   	push   edi
c0000aed:	56                   	push   esi
c0000aee:	53                   	push   ebx
c0000aef:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000af3:	85 db                	test   ebx,ebx
c0000af5:	0f 84 e2 00 00 00    	je     c0000bdd <dlfree+0xf1>
c0000afb:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000afe:	8b 0d 20 5f 02 c0    	mov    ecx,DWORD PTR ds:0xc0025f20
c0000b04:	89 f0                	mov    eax,esi
c0000b06:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000b09:	83 e0 fc             	and    eax,0xfffffffc
c0000b0c:	39 c1                	cmp    ecx,eax
c0000b0e:	72 24                	jb     c0000b34 <dlfree+0x48>
c0000b10:	83 c9 03             	or     ecx,0x3
c0000b13:	c1 e8 03             	shr    eax,0x3
c0000b16:	89 0d 20 5f 02 c0    	mov    DWORD PTR ds:0xc0025f20,ecx
c0000b1c:	83 e8 02             	sub    eax,0x2
c0000b1f:	8b 0c 85 24 5f 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffda0dc]
c0000b26:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000b28:	89 14 85 24 5f 02 c0 	mov    DWORD PTR [eax*4-0x3ffda0dc],edx
c0000b2f:	e9 a9 00 00 00       	jmp    c0000bdd <dlfree+0xf1>
c0000b34:	83 e6 02             	and    esi,0x2
c0000b37:	0f 85 a0 00 00 00    	jne    c0000bdd <dlfree+0xf1>
c0000b3d:	83 c9 01             	or     ecx,0x1
c0000b40:	8d 34 02             	lea    esi,[edx+eax*1]
c0000b43:	89 0d 20 5f 02 c0    	mov    DWORD PTR ds:0xc0025f20,ecx
c0000b49:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000b4c:	83 e1 fc             	and    ecx,0xfffffffc
c0000b4f:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000b53:	75 13                	jne    c0000b68 <dlfree+0x7c>
c0000b55:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000b58:	29 da                	sub    edx,ebx
c0000b5a:	01 d8                	add    eax,ebx
c0000b5c:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000b5f:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000b62:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000b65:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000b68:	39 35 4c 5f 02 c0    	cmp    DWORD PTR ds:0xc0025f4c,esi
c0000b6e:	74 40                	je     c0000bb0 <dlfree+0xc4>
c0000b70:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000b74:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000b77:	80 e3 01             	and    bl,0x1
c0000b7a:	75 0e                	jne    c0000b8a <dlfree+0x9e>
c0000b7c:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000b7f:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000b82:	01 c8                	add    eax,ecx
c0000b84:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000b87:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000b8a:	8b 0d 5c 5f 02 c0    	mov    ecx,DWORD PTR ds:0xc0025f5c
c0000b90:	c7 42 0c 54 5f 02 c0 	mov    DWORD PTR [edx+0xc],0xc0025f54
c0000b97:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000b9a:	89 15 5c 5f 02 c0    	mov    DWORD PTR ds:0xc0025f5c,edx
c0000ba0:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000ba3:	89 c1                	mov    ecx,eax
c0000ba5:	83 c9 01             	or     ecx,0x1
c0000ba8:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000bab:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000bae:	eb 10                	jmp    c0000bc0 <dlfree+0xd4>
c0000bb0:	01 c8                	add    eax,ecx
c0000bb2:	89 c1                	mov    ecx,eax
c0000bb4:	83 c9 01             	or     ecx,0x1
c0000bb7:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000bba:	89 15 4c 5f 02 c0    	mov    DWORD PTR ds:0xc0025f4c,edx
c0000bc0:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000bc5:	76 16                	jbe    c0000bdd <dlfree+0xf1>
c0000bc7:	f6 05 20 5f 02 c0 02 	test   BYTE PTR ds:0xc0025f20,0x2
c0000bce:	74 0d                	je     c0000bdd <dlfree+0xf1>
c0000bd0:	5b                   	pop    ebx
c0000bd1:	b8 20 5f 02 c0       	mov    eax,0xc0025f20
c0000bd6:	5e                   	pop    esi
c0000bd7:	5f                   	pop    edi
c0000bd8:	e9 28 fe ff ff       	jmp    c0000a05 <malloc_consolidate>
c0000bdd:	5b                   	pop    ebx
c0000bde:	5e                   	pop    esi
c0000bdf:	5f                   	pop    edi
c0000be0:	c3                   	ret    

c0000be1 <sYSMALLOc>:
c0000be1:	55                   	push   ebp
c0000be2:	57                   	push   edi
c0000be3:	56                   	push   esi
c0000be4:	53                   	push   ebx
c0000be5:	89 d3                	mov    ebx,edx
c0000be7:	83 ec 2c             	sub    esp,0x2c
c0000bea:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000bee:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000bf4:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000bf7:	8d 42 ff             	lea    eax,[edx-0x1]
c0000bfa:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000bfe:	74 1f                	je     c0000c1f <sYSMALLOc+0x3e>
c0000c00:	89 d8                	mov    eax,ebx
c0000c02:	e8 fe fd ff ff       	call   c0000a05 <malloc_consolidate>
c0000c07:	83 ec 0c             	sub    esp,0xc
c0000c0a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000c0e:	83 e8 07             	sub    eax,0x7
c0000c11:	50                   	push   eax
c0000c12:	e8 30 02 00 00       	call   c0000e47 <dlmalloc>
c0000c17:	83 c4 10             	add    esp,0x10
c0000c1a:	e9 20 02 00 00       	jmp    c0000e3f <sYSMALLOc+0x25e>
c0000c1f:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000c22:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000c28:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000c2b:	83 e0 fc             	and    eax,0xfffffffc
c0000c2e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000c32:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000c36:	83 c0 10             	add    eax,0x10
c0000c39:	01 c1                	add    ecx,eax
c0000c3b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000c3f:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000c46:	74 04                	je     c0000c4c <sYSMALLOc+0x6b>
c0000c48:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000c4c:	f7 da                	neg    edx
c0000c4e:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000c52:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000c56:	21 d1                	and    ecx,edx
c0000c58:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000c5c:	7f 07                	jg     c0000c65 <sYSMALLOc+0x84>
c0000c5e:	31 c0                	xor    eax,eax
c0000c60:	e9 da 01 00 00       	jmp    c0000e3f <sYSMALLOc+0x25e>
c0000c65:	83 ec 0c             	sub    esp,0xc
c0000c68:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000c6c:	e8 ef 89 00 00       	call   c0009660 <sbrk>
c0000c71:	83 c4 10             	add    esp,0x10
c0000c74:	89 c6                	mov    esi,eax
c0000c76:	83 f8 ff             	cmp    eax,0xffffffff
c0000c79:	74 e3                	je     c0000c5e <sYSMALLOc+0x7d>
c0000c7b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000c7f:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000c83:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000c86:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000c8c:	39 f1                	cmp    ecx,esi
c0000c8e:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000c94:	75 13                	jne    c0000ca9 <sYSMALLOc+0xc8>
c0000c96:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000c9a:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000c9e:	83 c8 01             	or     eax,0x1
c0000ca1:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000ca4:	e9 3e 01 00 00       	jmp    c0000de7 <sYSMALLOc+0x206>
c0000ca9:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000caf:	88 d0                	mov    al,dl
c0000cb1:	83 e0 01             	and    eax,0x1
c0000cb4:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000cb9:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000cbd:	0f 95 c0             	setne  al
c0000cc0:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000cc4:	39 f1                	cmp    ecx,esi
c0000cc6:	76 12                	jbe    c0000cda <sYSMALLOc+0xf9>
c0000cc8:	84 c0                	test   al,al
c0000cca:	74 0e                	je     c0000cda <sYSMALLOc+0xf9>
c0000ccc:	83 e2 fe             	and    edx,0xfffffffe
c0000ccf:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000cd5:	e9 83 00 00 00       	jmp    c0000d5d <sYSMALLOc+0x17c>
c0000cda:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000cdf:	74 7c                	je     c0000d5d <sYSMALLOc+0x17c>
c0000ce1:	84 c0                	test   al,al
c0000ce3:	74 0c                	je     c0000cf1 <sYSMALLOc+0x110>
c0000ce5:	89 f0                	mov    eax,esi
c0000ce7:	29 c8                	sub    eax,ecx
c0000ce9:	01 e8                	add    eax,ebp
c0000ceb:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000cf1:	89 f2                	mov    edx,esi
c0000cf3:	83 e2 07             	and    edx,0x7
c0000cf6:	74 0c                	je     c0000d04 <sYSMALLOc+0x123>
c0000cf8:	b8 08 00 00 00       	mov    eax,0x8
c0000cfd:	29 d0                	sub    eax,edx
c0000cff:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000d02:	eb 04                	jmp    c0000d08 <sYSMALLOc+0x127>
c0000d04:	89 f5                	mov    ebp,esi
c0000d06:	31 c0                	xor    eax,eax
c0000d08:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000d0c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000d10:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000d14:	01 c1                	add    ecx,eax
c0000d16:	83 ec 0c             	sub    esp,0xc
c0000d19:	01 f1                	add    ecx,esi
c0000d1b:	01 ca                	add    edx,ecx
c0000d1d:	29 c8                	sub    eax,ecx
c0000d1f:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000d23:	01 c2                	add    edx,eax
c0000d25:	52                   	push   edx
c0000d26:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000d2a:	e8 31 89 00 00       	call   c0009660 <sbrk>
c0000d2f:	83 c4 10             	add    esp,0x10
c0000d32:	83 f8 ff             	cmp    eax,0xffffffff
c0000d35:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000d39:	75 0f                	jne    c0000d4a <sYSMALLOc+0x169>
c0000d3b:	83 ec 0c             	sub    esp,0xc
c0000d3e:	6a 00                	push   0x0
c0000d40:	e8 1b 89 00 00       	call   c0009660 <sbrk>
c0000d45:	83 c4 10             	add    esp,0x10
c0000d48:	eb 30                	jmp    c0000d7a <sYSMALLOc+0x199>
c0000d4a:	39 c6                	cmp    esi,eax
c0000d4c:	76 33                	jbe    c0000d81 <sYSMALLOc+0x1a0>
c0000d4e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000d52:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000d59:	01 f0                	add    eax,esi
c0000d5b:	eb 1d                	jmp    c0000d7a <sYSMALLOc+0x199>
c0000d5d:	83 ec 0c             	sub    esp,0xc
c0000d60:	89 f5                	mov    ebp,esi
c0000d62:	6a 00                	push   0x0
c0000d64:	e8 f7 88 00 00       	call   c0009660 <sbrk>
c0000d69:	89 c2                	mov    edx,eax
c0000d6b:	29 f2                	sub    edx,esi
c0000d6d:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000d71:	83 c4 10             	add    esp,0x10
c0000d74:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000d7a:	31 d2                	xor    edx,edx
c0000d7c:	83 f8 ff             	cmp    eax,0xffffffff
c0000d7f:	74 66                	je     c0000de7 <sYSMALLOc+0x206>
c0000d81:	29 e8                	sub    eax,ebp
c0000d83:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000d86:	01 d0                	add    eax,edx
c0000d88:	83 c8 01             	or     eax,0x1
c0000d8b:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000d8e:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000d94:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000d99:	74 4c                	je     c0000de7 <sYSMALLOc+0x206>
c0000d9b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000d9f:	83 e8 0c             	sub    eax,0xc
c0000da2:	83 e0 f8             	and    eax,0xfffffff8
c0000da5:	89 c2                	mov    edx,eax
c0000da7:	83 ca 01             	or     edx,0x1
c0000daa:	83 f8 0f             	cmp    eax,0xf
c0000dad:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0000db0:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0000db8:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0000dc0:	76 25                	jbe    c0000de7 <sYSMALLOc+0x206>
c0000dc2:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0000dc8:	83 ec 0c             	sub    esp,0xc
c0000dcb:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0000dd5:	83 c7 08             	add    edi,0x8
c0000dd8:	57                   	push   edi
c0000dd9:	e8 0e fd ff ff       	call   c0000aec <dlfree>
c0000dde:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0000de4:	83 c4 10             	add    esp,0x10
c0000de7:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000ded:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000df3:	73 06                	jae    c0000dfb <sYSMALLOc+0x21a>
c0000df5:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000dfb:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000e01:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000e07:	73 06                	jae    c0000e0f <sYSMALLOc+0x22e>
c0000e09:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000e0f:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000e12:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000e15:	83 e2 fc             	and    edx,0xfffffffc
c0000e18:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0000e1c:	0f 82 3c fe ff ff    	jb     c0000c5e <sYSMALLOc+0x7d>
c0000e22:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0000e26:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0000e29:	29 fa                	sub    edx,edi
c0000e2b:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0000e2e:	83 ca 01             	or     edx,0x1
c0000e31:	89 fb                	mov    ebx,edi
c0000e33:	83 c0 08             	add    eax,0x8
c0000e36:	83 cb 01             	or     ebx,0x1
c0000e39:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0000e3c:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0000e3f:	83 c4 2c             	add    esp,0x2c
c0000e42:	5b                   	pop    ebx
c0000e43:	5e                   	pop    esi
c0000e44:	5f                   	pop    edi
c0000e45:	5d                   	pop    ebp
c0000e46:	c3                   	ret    

c0000e47 <dlmalloc>:
c0000e47:	55                   	push   ebp
c0000e48:	57                   	push   edi
c0000e49:	56                   	push   esi
c0000e4a:	53                   	push   ebx
c0000e4b:	83 ec 1c             	sub    esp,0x1c
c0000e4e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0000e52:	83 f8 df             	cmp    eax,0xffffffdf
c0000e55:	0f 87 70 03 00 00    	ja     c00011cb <dlmalloc+0x384>
c0000e5b:	83 c0 0b             	add    eax,0xb
c0000e5e:	be 10 00 00 00       	mov    esi,0x10
c0000e63:	83 f8 0f             	cmp    eax,0xf
c0000e66:	76 05                	jbe    c0000e6d <dlmalloc+0x26>
c0000e68:	83 e0 f8             	and    eax,0xfffffff8
c0000e6b:	89 c6                	mov    esi,eax
c0000e6d:	8b 3d 20 5f 02 c0    	mov    edi,DWORD PTR ds:0xc0025f20
c0000e73:	f7 c7 01 00 00 00    	test   edi,0x1
c0000e79:	75 17                	jne    c0000e92 <dlmalloc+0x4b>
c0000e7b:	85 ff                	test   edi,edi
c0000e7d:	0f 85 05 03 00 00    	jne    c0001188 <dlmalloc+0x341>
c0000e83:	b8 20 5f 02 c0       	mov    eax,0xc0025f20
c0000e88:	e8 78 fb ff ff       	call   c0000a05 <malloc_consolidate>
c0000e8d:	e9 f6 02 00 00       	jmp    c0001188 <dlmalloc+0x341>
c0000e92:	39 f7                	cmp    edi,esi
c0000e94:	72 1f                	jb     c0000eb5 <dlmalloc+0x6e>
c0000e96:	89 f2                	mov    edx,esi
c0000e98:	c1 ea 03             	shr    edx,0x3
c0000e9b:	83 ea 02             	sub    edx,0x2
c0000e9e:	8b 04 95 24 5f 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffda0dc]
c0000ea5:	85 c0                	test   eax,eax
c0000ea7:	74 0c                	je     c0000eb5 <dlmalloc+0x6e>
c0000ea9:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0000eac:	89 0c 95 24 5f 02 c0 	mov    DWORD PTR [edx*4-0x3ffda0dc],ecx
c0000eb3:	eb 30                	jmp    c0000ee5 <dlmalloc+0x9e>
c0000eb5:	89 f0                	mov    eax,esi
c0000eb7:	81 fe ff 00 00 00    	cmp    esi,0xff
c0000ebd:	77 2e                	ja     c0000eed <dlmalloc+0xa6>
c0000ebf:	c1 e8 03             	shr    eax,0x3
c0000ec2:	8d 14 c5 54 5f 02 c0 	lea    edx,[eax*8-0x3ffda0ac]
c0000ec9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000ecd:	8d 5a f8             	lea    ebx,[edx-0x8]
c0000ed0:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0000ed3:	39 c3                	cmp    ebx,eax
c0000ed5:	74 2e                	je     c0000f05 <dlmalloc+0xbe>
c0000ed7:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0000eda:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c0000edf:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000ee2:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0000ee5:	83 c0 08             	add    eax,0x8
c0000ee8:	e9 e0 02 00 00       	jmp    c00011cd <dlmalloc+0x386>
c0000eed:	e8 8f fa ff ff       	call   c0000981 <largebin_index>
c0000ef2:	83 e7 02             	and    edi,0x2
c0000ef5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000ef9:	74 0a                	je     c0000f05 <dlmalloc+0xbe>
c0000efb:	b8 20 5f 02 c0       	mov    eax,0xc0025f20
c0000f00:	e8 00 fb ff ff       	call   c0000a05 <malloc_consolidate>
c0000f05:	8d 46 10             	lea    eax,[esi+0x10]
c0000f08:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000f0c:	8b 1d 60 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025f60
c0000f12:	81 fb 54 5f 02 c0    	cmp    ebx,0xc0025f54
c0000f18:	0f 84 13 01 00 00    	je     c0001031 <dlmalloc+0x1ea>
c0000f1e:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0000f21:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0000f24:	83 e7 fc             	and    edi,0xfffffffc
c0000f27:	81 fe ff 00 00 00    	cmp    esi,0xff
c0000f2d:	77 4c                	ja     c0000f7b <dlmalloc+0x134>
c0000f2f:	3d 54 5f 02 c0       	cmp    eax,0xc0025f54
c0000f34:	75 45                	jne    c0000f7b <dlmalloc+0x134>
c0000f36:	39 1d 50 5f 02 c0    	cmp    DWORD PTR ds:0xc0025f50,ebx
c0000f3c:	75 3d                	jne    c0000f7b <dlmalloc+0x134>
c0000f3e:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0000f42:	73 37                	jae    c0000f7b <dlmalloc+0x134>
c0000f44:	8d 04 33             	lea    eax,[ebx+esi*1]
c0000f47:	89 fa                	mov    edx,edi
c0000f49:	a3 5c 5f 02 c0       	mov    ds:0xc0025f5c,eax
c0000f4e:	a3 60 5f 02 c0       	mov    ds:0xc0025f60,eax
c0000f53:	a3 50 5f 02 c0       	mov    ds:0xc0025f50,eax
c0000f58:	29 f2                	sub    edx,esi
c0000f5a:	c7 40 08 54 5f 02 c0 	mov    DWORD PTR [eax+0x8],0xc0025f54
c0000f61:	c7 40 0c 54 5f 02 c0 	mov    DWORD PTR [eax+0xc],0xc0025f54
c0000f68:	83 ce 01             	or     esi,0x1
c0000f6b:	89 d1                	mov    ecx,edx
c0000f6d:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0000f70:	83 c9 01             	or     ecx,0x1
c0000f73:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0000f76:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0000f79:	eb 15                	jmp    c0000f90 <dlmalloc+0x149>
c0000f7b:	a3 60 5f 02 c0       	mov    ds:0xc0025f60,eax
c0000f80:	39 fe                	cmp    esi,edi
c0000f82:	c7 40 08 54 5f 02 c0 	mov    DWORD PTR [eax+0x8],0xc0025f54
c0000f89:	75 0d                	jne    c0000f98 <dlmalloc+0x151>
c0000f8b:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0000f90:	8d 43 08             	lea    eax,[ebx+0x8]
c0000f93:	e9 35 02 00 00       	jmp    c00011cd <dlmalloc+0x386>
c0000f98:	89 f8                	mov    eax,edi
c0000f9a:	81 ff ff 00 00 00    	cmp    edi,0xff
c0000fa0:	77 19                	ja     c0000fbb <dlmalloc+0x174>
c0000fa2:	c1 e8 03             	shr    eax,0x3
c0000fa5:	8d 14 00             	lea    edx,[eax+eax*1]
c0000fa8:	83 c2 0d             	add    edx,0xd
c0000fab:	8d 2c 95 18 5f 02 c0 	lea    ebp,[edx*4-0x3ffda0e8]
c0000fb2:	8b 14 95 20 5f 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffda0e0]
c0000fb9:	eb 46                	jmp    c0001001 <dlmalloc+0x1ba>
c0000fbb:	e8 c1 f9 ff ff       	call   c0000981 <largebin_index>
c0000fc0:	8d 14 00             	lea    edx,[eax+eax*1]
c0000fc3:	83 c2 0d             	add    edx,0xd
c0000fc6:	8d 0c 95 20 5f 02 c0 	lea    ecx,[edx*4-0x3ffda0e0]
c0000fcd:	8b 14 95 20 5f 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffda0e0]
c0000fd4:	8d 69 f8             	lea    ebp,[ecx-0x8]
c0000fd7:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0000fdb:	89 d5                	mov    ebp,edx
c0000fdd:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0000fe1:	74 1e                	je     c0001001 <dlmalloc+0x1ba>
c0000fe3:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c0000fe6:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c0000fe9:	77 12                	ja     c0000ffd <dlmalloc+0x1b6>
c0000feb:	83 cf 01             	or     edi,0x1
c0000fee:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c0000ff1:	76 05                	jbe    c0000ff8 <dlmalloc+0x1b1>
c0000ff3:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0000ff6:	eb f6                	jmp    c0000fee <dlmalloc+0x1a7>
c0000ff8:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c0000ffb:	eb 04                	jmp    c0001001 <dlmalloc+0x1ba>
c0000ffd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001001:	89 c7                	mov    edi,eax
c0001003:	88 c1                	mov    cl,al
c0001005:	c1 ff 05             	sar    edi,0x5
c0001008:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000100c:	bf 01 00 00 00       	mov    edi,0x1
c0001011:	d3 e7                	shl    edi,cl
c0001013:	89 f8                	mov    eax,edi
c0001015:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0001019:	09 04 bd 54 62 02 c0 	or     DWORD PTR [edi*4-0x3ffd9dac],eax
c0001020:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c0001023:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0001026:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c0001029:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c000102c:	e9 db fe ff ff       	jmp    c0000f0c <dlmalloc+0xc5>
c0001031:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001037:	76 78                	jbe    c00010b1 <dlmalloc+0x26a>
c0001039:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000103d:	8d 04 c5 54 5f 02 c0 	lea    eax,[eax*8-0x3ffda0ac]
c0001044:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001047:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000104a:	39 ca                	cmp    edx,ecx
c000104c:	74 63                	je     c00010b1 <dlmalloc+0x26a>
c000104e:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c0001051:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001054:	83 e3 fc             	and    ebx,0xfffffffc
c0001057:	39 de                	cmp    esi,ebx
c0001059:	77 52                	ja     c00010ad <dlmalloc+0x266>
c000105b:	89 df                	mov    edi,ebx
c000105d:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001060:	29 f7                	sub    edi,esi
c0001062:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001065:	01 d3                	add    ebx,edx
c0001067:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000106a:	83 ff 0f             	cmp    edi,0xf
c000106d:	8d 42 08             	lea    eax,[edx+0x8]
c0001070:	77 09                	ja     c000107b <dlmalloc+0x234>
c0001072:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001076:	e9 52 01 00 00       	jmp    c00011cd <dlmalloc+0x386>
c000107b:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000107e:	83 ce 01             	or     esi,0x1
c0001081:	89 0d 5c 5f 02 c0    	mov    DWORD PTR ds:0xc0025f5c,ecx
c0001087:	89 0d 60 5f 02 c0    	mov    DWORD PTR ds:0xc0025f60,ecx
c000108d:	c7 41 08 54 5f 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0025f54
c0001094:	c7 41 0c 54 5f 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0025f54
c000109b:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000109e:	89 fa                	mov    edx,edi
c00010a0:	83 ca 01             	or     edx,0x1
c00010a3:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00010a6:	89 3b                	mov    DWORD PTR [ebx],edi
c00010a8:	e9 20 01 00 00       	jmp    c00011cd <dlmalloc+0x386>
c00010ad:	89 c2                	mov    edx,eax
c00010af:	eb 99                	jmp    c000104a <dlmalloc+0x203>
c00010b1:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00010b5:	b8 01 00 00 00       	mov    eax,0x1
c00010ba:	41                   	inc    ecx
c00010bb:	89 cb                	mov    ebx,ecx
c00010bd:	8d 14 cd 4c 5f 02 c0 	lea    edx,[ecx*8-0x3ffda0b4]
c00010c4:	c1 eb 05             	shr    ebx,0x5
c00010c7:	d3 e0                	shl    eax,cl
c00010c9:	8b 3c 9d 54 62 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd9dac]
c00010d0:	39 f8                	cmp    eax,edi
c00010d2:	77 04                	ja     c00010d8 <dlmalloc+0x291>
c00010d4:	85 c0                	test   eax,eax
c00010d6:	75 26                	jne    c00010fe <dlmalloc+0x2b7>
c00010d8:	43                   	inc    ebx
c00010d9:	83 fb 02             	cmp    ebx,0x2
c00010dc:	0f 87 a6 00 00 00    	ja     c0001188 <dlmalloc+0x341>
c00010e2:	8b 3c 9d 54 62 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd9dac]
c00010e9:	85 ff                	test   edi,edi
c00010eb:	74 eb                	je     c00010d8 <dlmalloc+0x291>
c00010ed:	89 d8                	mov    eax,ebx
c00010ef:	c1 e0 06             	shl    eax,0x6
c00010f2:	8d 14 85 4c 5f 02 c0 	lea    edx,[eax*4-0x3ffda0b4]
c00010f9:	b8 01 00 00 00       	mov    eax,0x1
c00010fe:	85 f8                	test   eax,edi
c0001100:	75 07                	jne    c0001109 <dlmalloc+0x2c2>
c0001102:	83 c2 08             	add    edx,0x8
c0001105:	01 c0                	add    eax,eax
c0001107:	eb f5                	jmp    c00010fe <dlmalloc+0x2b7>
c0001109:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c000110c:	39 ca                	cmp    edx,ecx
c000110e:	75 14                	jne    c0001124 <dlmalloc+0x2dd>
c0001110:	89 c1                	mov    ecx,eax
c0001112:	83 c2 08             	add    edx,0x8
c0001115:	f7 d1                	not    ecx
c0001117:	01 c0                	add    eax,eax
c0001119:	21 cf                	and    edi,ecx
c000111b:	89 3c 9d 54 62 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd9dac],edi
c0001122:	eb ac                	jmp    c00010d0 <dlmalloc+0x289>
c0001124:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0001127:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c000112a:	83 e0 fc             	and    eax,0xfffffffc
c000112d:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c0001130:	89 c3                	mov    ebx,eax
c0001132:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001135:	29 f3                	sub    ebx,esi
c0001137:	8d 14 01             	lea    edx,[ecx+eax*1]
c000113a:	83 fb 0f             	cmp    ebx,0xf
c000113d:	8d 41 08             	lea    eax,[ecx+0x8]
c0001140:	77 09                	ja     c000114b <dlmalloc+0x304>
c0001142:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001146:	e9 82 00 00 00       	jmp    c00011cd <dlmalloc+0x386>
c000114b:	8d 3c 31             	lea    edi,[ecx+esi*1]
c000114e:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001154:	89 3d 5c 5f 02 c0    	mov    DWORD PTR ds:0xc0025f5c,edi
c000115a:	89 3d 60 5f 02 c0    	mov    DWORD PTR ds:0xc0025f60,edi
c0001160:	c7 47 08 54 5f 02 c0 	mov    DWORD PTR [edi+0x8],0xc0025f54
c0001167:	c7 47 0c 54 5f 02 c0 	mov    DWORD PTR [edi+0xc],0xc0025f54
c000116e:	77 06                	ja     c0001176 <dlmalloc+0x32f>
c0001170:	89 3d 50 5f 02 c0    	mov    DWORD PTR ds:0xc0025f50,edi
c0001176:	83 ce 01             	or     esi,0x1
c0001179:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c000117c:	89 d9                	mov    ecx,ebx
c000117e:	83 c9 01             	or     ecx,0x1
c0001181:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001184:	89 1a                	mov    DWORD PTR [edx],ebx
c0001186:	eb 45                	jmp    c00011cd <dlmalloc+0x386>
c0001188:	a1 4c 5f 02 c0       	mov    eax,ds:0xc0025f4c
c000118d:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001190:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001193:	83 e2 fc             	and    edx,0xfffffffc
c0001196:	39 d1                	cmp    ecx,edx
c0001198:	77 1e                	ja     c00011b8 <dlmalloc+0x371>
c000119a:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000119d:	89 f3                	mov    ebx,esi
c000119f:	89 0d 4c 5f 02 c0    	mov    DWORD PTR ds:0xc0025f4c,ecx
c00011a5:	83 cb 01             	or     ebx,0x1
c00011a8:	29 f2                	sub    edx,esi
c00011aa:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00011ad:	83 ca 01             	or     edx,0x1
c00011b0:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00011b3:	e9 2d fd ff ff       	jmp    c0000ee5 <dlmalloc+0x9e>
c00011b8:	83 c4 1c             	add    esp,0x1c
c00011bb:	89 f0                	mov    eax,esi
c00011bd:	5b                   	pop    ebx
c00011be:	ba 20 5f 02 c0       	mov    edx,0xc0025f20
c00011c3:	5e                   	pop    esi
c00011c4:	5f                   	pop    edi
c00011c5:	5d                   	pop    ebp
c00011c6:	e9 16 fa ff ff       	jmp    c0000be1 <sYSMALLOc>
c00011cb:	31 c0                	xor    eax,eax
c00011cd:	83 c4 1c             	add    esp,0x1c
c00011d0:	5b                   	pop    ebx
c00011d1:	5e                   	pop    esi
c00011d2:	5f                   	pop    edi
c00011d3:	5d                   	pop    ebp
c00011d4:	c3                   	ret    

c00011d5 <iALLOc>:
c00011d5:	55                   	push   ebp
c00011d6:	89 c5                	mov    ebp,eax
c00011d8:	57                   	push   edi
c00011d9:	56                   	push   esi
c00011da:	53                   	push   ebx
c00011db:	83 ec 2c             	sub    esp,0x2c
c00011de:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00011e2:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00011e6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00011ea:	83 3d 20 5f 02 c0 00 	cmp    DWORD PTR ds:0xc0025f20,0x0
c00011f1:	75 12                	jne    c0001205 <iALLOc+0x30>
c00011f3:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00011f7:	b8 20 5f 02 c0       	mov    eax,0xc0025f20
c00011fc:	e8 04 f8 ff ff       	call   c0000a05 <malloc_consolidate>
c0001201:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0001205:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000120a:	74 12                	je     c000121e <iALLOc+0x49>
c000120c:	85 ed                	test   ebp,ebp
c000120e:	0f 84 64 01 00 00    	je     c0001378 <iALLOc+0x1a3>
c0001214:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000121c:	eb 33                	jmp    c0001251 <iALLOc+0x7c>
c000121e:	85 ed                	test   ebp,ebp
c0001220:	75 14                	jne    c0001236 <iALLOc+0x61>
c0001222:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c000122a:	83 c4 2c             	add    esp,0x2c
c000122d:	5b                   	pop    ebx
c000122e:	5e                   	pop    esi
c000122f:	5f                   	pop    edi
c0001230:	5d                   	pop    ebp
c0001231:	e9 11 fc ff ff       	jmp    c0000e47 <dlmalloc>
c0001236:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c000123d:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c0001245:	83 f8 0f             	cmp    eax,0xf
c0001248:	76 07                	jbe    c0001251 <iALLOc+0x7c>
c000124a:	83 e0 f8             	and    eax,0xfffffff8
c000124d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0001251:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001256:	75 09                	jne    c0001261 <iALLOc+0x8c>
c0001258:	89 d0                	mov    eax,edx
c000125a:	8d 3c aa             	lea    edi,[edx+ebp*4]
c000125d:	31 f6                	xor    esi,esi
c000125f:	eb 3b                	jmp    c000129c <iALLOc+0xc7>
c0001261:	8b 02                	mov    eax,DWORD PTR [edx]
c0001263:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c000126b:	83 c0 0b             	add    eax,0xb
c000126e:	83 f8 0f             	cmp    eax,0xf
c0001271:	76 07                	jbe    c000127a <iALLOc+0xa5>
c0001273:	83 e0 f8             	and    eax,0xfffffff8
c0001276:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000127a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000127e:	0f af f5             	imul   esi,ebp
c0001281:	eb 25                	jmp    c00012a8 <iALLOc+0xd3>
c0001283:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001285:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001288:	bb 10 00 00 00       	mov    ebx,0x10
c000128d:	83 f9 0f             	cmp    ecx,0xf
c0001290:	76 05                	jbe    c0001297 <iALLOc+0xc2>
c0001292:	83 e1 f8             	and    ecx,0xfffffff8
c0001295:	89 cb                	mov    ebx,ecx
c0001297:	01 de                	add    esi,ebx
c0001299:	83 c0 04             	add    eax,0x4
c000129c:	39 c7                	cmp    edi,eax
c000129e:	75 e3                	jne    c0001283 <iALLOc+0xae>
c00012a0:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00012a8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00012ac:	8b 1d 74 62 02 c0    	mov    ebx,DWORD PTR ds:0xc0026274
c00012b2:	83 ec 0c             	sub    esp,0xc
c00012b5:	c7 05 74 62 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026274,0x0
c00012bf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00012c3:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c00012c7:	50                   	push   eax
c00012c8:	e8 7a fb ff ff       	call   c0000e47 <dlmalloc>
c00012cd:	83 c4 10             	add    esp,0x10
c00012d0:	89 1d 74 62 02 c0    	mov    DWORD PTR ds:0xc0026274,ebx
c00012d6:	85 c0                	test   eax,eax
c00012d8:	0f 84 92 00 00 00    	je     c0001370 <iALLOc+0x19b>
c00012de:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00012e1:	8d 78 f8             	lea    edi,[eax-0x8]
c00012e4:	83 e3 fc             	and    ebx,0xfffffffc
c00012e7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00012eb:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00012f0:	74 1e                	je     c0001310 <iALLOc+0x13b>
c00012f2:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00012f6:	89 d9                	mov    ecx,ebx
c00012f8:	52                   	push   edx
c00012f9:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00012fd:	83 e9 04             	sub    ecx,0x4
c0001300:	51                   	push   ecx
c0001301:	6a 00                	push   0x0
c0001303:	50                   	push   eax
c0001304:	e8 9f f1 ff ff       	call   c00004a8 <memset>
c0001309:	83 c4 10             	add    esp,0x10
c000130c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001310:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0001315:	75 14                	jne    c000132b <iALLOc+0x156>
c0001317:	8d 04 37             	lea    eax,[edi+esi*1]
c000131a:	29 f3                	sub    ebx,esi
c000131c:	8d 48 08             	lea    ecx,[eax+0x8]
c000131f:	83 cb 01             	or     ebx,0x1
c0001322:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0001326:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001329:	89 f3                	mov    ebx,esi
c000132b:	31 c0                	xor    eax,eax
c000132d:	4d                   	dec    ebp
c000132e:	8d 4f 08             	lea    ecx,[edi+0x8]
c0001331:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001335:	39 c5                	cmp    ebp,eax
c0001337:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c000133a:	74 2c                	je     c0001368 <iALLOc+0x193>
c000133c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0001340:	85 c9                	test   ecx,ecx
c0001342:	75 15                	jne    c0001359 <iALLOc+0x184>
c0001344:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0001347:	8d 71 0b             	lea    esi,[ecx+0xb]
c000134a:	b9 10 00 00 00       	mov    ecx,0x10
c000134f:	83 fe 0f             	cmp    esi,0xf
c0001352:	76 05                	jbe    c0001359 <iALLOc+0x184>
c0001354:	83 e6 f8             	and    esi,0xfffffff8
c0001357:	89 f1                	mov    ecx,esi
c0001359:	89 ce                	mov    esi,ecx
c000135b:	29 cb                	sub    ebx,ecx
c000135d:	83 ce 01             	or     esi,0x1
c0001360:	40                   	inc    eax
c0001361:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001364:	01 cf                	add    edi,ecx
c0001366:	eb c6                	jmp    c000132e <iALLOc+0x159>
c0001368:	83 cb 01             	or     ebx,0x1
c000136b:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000136e:	eb 08                	jmp    c0001378 <iALLOc+0x1a3>
c0001370:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001378:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000137c:	83 c4 2c             	add    esp,0x2c
c000137f:	5b                   	pop    ebx
c0001380:	5e                   	pop    esi
c0001381:	5f                   	pop    edi
c0001382:	5d                   	pop    ebp
c0001383:	c3                   	ret    

c0001384 <dlrealloc>:
c0001384:	55                   	push   ebp
c0001385:	57                   	push   edi
c0001386:	56                   	push   esi
c0001387:	53                   	push   ebx
c0001388:	83 ec 1c             	sub    esp,0x1c
c000138b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000138f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001393:	85 db                	test   ebx,ebx
c0001395:	75 10                	jne    c00013a7 <dlrealloc+0x23>
c0001397:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000139b:	83 c4 1c             	add    esp,0x1c
c000139e:	5b                   	pop    ebx
c000139f:	5e                   	pop    esi
c00013a0:	5f                   	pop    edi
c00013a1:	5d                   	pop    ebp
c00013a2:	e9 a0 fa ff ff       	jmp    c0000e47 <dlmalloc>
c00013a7:	83 f8 df             	cmp    eax,0xffffffdf
c00013aa:	76 07                	jbe    c00013b3 <dlrealloc+0x2f>
c00013ac:	31 db                	xor    ebx,ebx
c00013ae:	e9 6a 01 00 00       	jmp    c000151d <dlrealloc+0x199>
c00013b3:	83 c0 0b             	add    eax,0xb
c00013b6:	bd 10 00 00 00       	mov    ebp,0x10
c00013bb:	83 f8 0f             	cmp    eax,0xf
c00013be:	76 05                	jbe    c00013c5 <dlrealloc+0x41>
c00013c0:	83 e0 f8             	and    eax,0xfffffff8
c00013c3:	89 c5                	mov    ebp,eax
c00013c5:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c00013c8:	8d 7b f8             	lea    edi,[ebx-0x8]
c00013cb:	89 c6                	mov    esi,eax
c00013cd:	83 e6 fc             	and    esi,0xfffffffc
c00013d0:	a8 02                	test   al,0x2
c00013d2:	75 d8                	jne    c00013ac <dlrealloc+0x28>
c00013d4:	39 f5                	cmp    ebp,esi
c00013d6:	0f 86 04 01 00 00    	jbe    c00014e0 <dlrealloc+0x15c>
c00013dc:	8d 14 37             	lea    edx,[edi+esi*1]
c00013df:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00013e2:	39 15 4c 5f 02 c0    	cmp    DWORD PTR ds:0xc0025f4c,edx
c00013e8:	75 33                	jne    c000141d <dlrealloc+0x99>
c00013ea:	83 e1 fc             	and    ecx,0xfffffffc
c00013ed:	01 f1                	add    ecx,esi
c00013ef:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00013f3:	8d 4d 10             	lea    ecx,[ebp+0x10]
c00013f6:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00013fa:	77 49                	ja     c0001445 <dlrealloc+0xc1>
c00013fc:	01 ef                	add    edi,ebp
c00013fe:	83 e0 01             	and    eax,0x1
c0001401:	09 e8                	or     eax,ebp
c0001403:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c0001406:	89 3d 4c 5f 02 c0    	mov    DWORD PTR ds:0xc0025f4c,edi
c000140c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001410:	29 e8                	sub    eax,ebp
c0001412:	83 c8 01             	or     eax,0x1
c0001415:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0001418:	e9 00 01 00 00       	jmp    c000151d <dlrealloc+0x199>
c000141d:	89 c8                	mov    eax,ecx
c000141f:	83 e0 fe             	and    eax,0xfffffffe
c0001422:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c0001427:	75 1c                	jne    c0001445 <dlrealloc+0xc1>
c0001429:	83 e1 fc             	and    ecx,0xfffffffc
c000142c:	01 f1                	add    ecx,esi
c000142e:	39 cd                	cmp    ebp,ecx
c0001430:	77 13                	ja     c0001445 <dlrealloc+0xc1>
c0001432:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001435:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001438:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c000143b:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c000143e:	89 ce                	mov    esi,ecx
c0001440:	e9 9b 00 00 00       	jmp    c00014e0 <dlrealloc+0x15c>
c0001445:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0001449:	8d 45 f9             	lea    eax,[ebp-0x7]
c000144c:	83 ec 0c             	sub    esp,0xc
c000144f:	50                   	push   eax
c0001450:	e8 f2 f9 ff ff       	call   c0000e47 <dlmalloc>
c0001455:	83 c4 10             	add    esp,0x10
c0001458:	85 c0                	test   eax,eax
c000145a:	0f 84 4c ff ff ff    	je     c00013ac <dlrealloc+0x28>
c0001460:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001463:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001467:	39 ca                	cmp    edx,ecx
c0001469:	75 0a                	jne    c0001475 <dlrealloc+0xf1>
c000146b:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c000146e:	83 e0 fc             	and    eax,0xfffffffc
c0001471:	01 c6                	add    esi,eax
c0001473:	eb 6b                	jmp    c00014e0 <dlrealloc+0x15c>
c0001475:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001478:	83 f9 27             	cmp    ecx,0x27
c000147b:	76 08                	jbe    c0001485 <dlrealloc+0x101>
c000147d:	89 de                	mov    esi,ebx
c000147f:	89 c7                	mov    edi,eax
c0001481:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001483:	eb 43                	jmp    c00014c8 <dlrealloc+0x144>
c0001485:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001487:	83 f9 13             	cmp    ecx,0x13
c000148a:	89 10                	mov    DWORD PTR [eax],edx
c000148c:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000148f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0001492:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001495:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001498:	76 2e                	jbe    c00014c8 <dlrealloc+0x144>
c000149a:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000149d:	83 f9 1b             	cmp    ecx,0x1b
c00014a0:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00014a3:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00014a6:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00014a9:	76 1d                	jbe    c00014c8 <dlrealloc+0x144>
c00014ab:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00014ae:	83 f9 23             	cmp    ecx,0x23
c00014b1:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00014b4:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00014b7:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00014ba:	76 0c                	jbe    c00014c8 <dlrealloc+0x144>
c00014bc:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00014bf:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c00014c2:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00014c5:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00014c8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00014cc:	83 ec 0c             	sub    esp,0xc
c00014cf:	53                   	push   ebx
c00014d0:	e8 17 f6 ff ff       	call   c0000aec <dlfree>
c00014d5:	83 c4 10             	add    esp,0x10
c00014d8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00014dc:	89 c3                	mov    ebx,eax
c00014de:	eb 3d                	jmp    c000151d <dlrealloc+0x199>
c00014e0:	89 f2                	mov    edx,esi
c00014e2:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00014e5:	29 ea                	sub    edx,ebp
c00014e7:	83 e1 01             	and    ecx,0x1
c00014ea:	8d 04 37             	lea    eax,[edi+esi*1]
c00014ed:	83 fa 0f             	cmp    edx,0xf
c00014f0:	77 0b                	ja     c00014fd <dlrealloc+0x179>
c00014f2:	09 ce                	or     esi,ecx
c00014f4:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00014f7:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00014fb:	eb 20                	jmp    c000151d <dlrealloc+0x199>
c00014fd:	01 ef                	add    edi,ebp
c00014ff:	83 ec 0c             	sub    esp,0xc
c0001502:	09 cd                	or     ebp,ecx
c0001504:	83 ca 01             	or     edx,0x1
c0001507:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c000150a:	83 c7 08             	add    edi,0x8
c000150d:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c0001510:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001514:	57                   	push   edi
c0001515:	e8 d2 f5 ff ff       	call   c0000aec <dlfree>
c000151a:	83 c4 10             	add    esp,0x10
c000151d:	83 c4 1c             	add    esp,0x1c
c0001520:	89 d8                	mov    eax,ebx
c0001522:	5b                   	pop    ebx
c0001523:	5e                   	pop    esi
c0001524:	5f                   	pop    edi
c0001525:	5d                   	pop    ebp
c0001526:	c3                   	ret    

c0001527 <dlmemalign>:
c0001527:	55                   	push   ebp
c0001528:	57                   	push   edi
c0001529:	56                   	push   esi
c000152a:	53                   	push   ebx
c000152b:	83 ec 0c             	sub    esp,0xc
c000152e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0001532:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001536:	83 fa 08             	cmp    edx,0x8
c0001539:	77 10                	ja     c000154b <dlmemalign+0x24>
c000153b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000153f:	83 c4 0c             	add    esp,0xc
c0001542:	5b                   	pop    ebx
c0001543:	5e                   	pop    esi
c0001544:	5f                   	pop    edi
c0001545:	5d                   	pop    ebp
c0001546:	e9 fc f8 ff ff       	jmp    c0000e47 <dlmalloc>
c000154b:	bf 10 00 00 00       	mov    edi,0x10
c0001550:	83 fa 0f             	cmp    edx,0xf
c0001553:	76 13                	jbe    c0001568 <dlmemalign+0x41>
c0001555:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001558:	85 d1                	test   ecx,edx
c000155a:	75 04                	jne    c0001560 <dlmemalign+0x39>
c000155c:	89 d7                	mov    edi,edx
c000155e:	eb 08                	jmp    c0001568 <dlmemalign+0x41>
c0001560:	39 d7                	cmp    edi,edx
c0001562:	73 04                	jae    c0001568 <dlmemalign+0x41>
c0001564:	01 ff                	add    edi,edi
c0001566:	eb f8                	jmp    c0001560 <dlmemalign+0x39>
c0001568:	83 f8 df             	cmp    eax,0xffffffdf
c000156b:	76 07                	jbe    c0001574 <dlmemalign+0x4d>
c000156d:	31 c0                	xor    eax,eax
c000156f:	e9 ce 00 00 00       	jmp    c0001642 <dlmemalign+0x11b>
c0001574:	83 c0 0b             	add    eax,0xb
c0001577:	bd 10 00 00 00       	mov    ebp,0x10
c000157c:	83 f8 0f             	cmp    eax,0xf
c000157f:	76 05                	jbe    c0001586 <dlmemalign+0x5f>
c0001581:	83 e0 f8             	and    eax,0xfffffff8
c0001584:	89 c5                	mov    ebp,eax
c0001586:	83 ec 0c             	sub    esp,0xc
c0001589:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c000158d:	50                   	push   eax
c000158e:	e8 b4 f8 ff ff       	call   c0000e47 <dlmalloc>
c0001593:	83 c4 10             	add    esp,0x10
c0001596:	89 c1                	mov    ecx,eax
c0001598:	85 c0                	test   eax,eax
c000159a:	74 d1                	je     c000156d <dlmemalign+0x46>
c000159c:	31 d2                	xor    edx,edx
c000159e:	8d 70 f8             	lea    esi,[eax-0x8]
c00015a1:	f7 f7                	div    edi
c00015a3:	85 d2                	test   edx,edx
c00015a5:	74 62                	je     c0001609 <dlmemalign+0xe2>
c00015a7:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c00015ab:	89 f8                	mov    eax,edi
c00015ad:	f7 d8                	neg    eax
c00015af:	21 c3                	and    ebx,eax
c00015b1:	83 eb 08             	sub    ebx,0x8
c00015b4:	89 d8                	mov    eax,ebx
c00015b6:	29 f0                	sub    eax,esi
c00015b8:	83 f8 0f             	cmp    eax,0xf
c00015bb:	77 02                	ja     c00015bf <dlmemalign+0x98>
c00015bd:	01 fb                	add    ebx,edi
c00015bf:	89 d8                	mov    eax,ebx
c00015c1:	29 f0                	sub    eax,esi
c00015c3:	89 c6                	mov    esi,eax
c00015c5:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00015c8:	89 c2                	mov    edx,eax
c00015ca:	83 e2 fc             	and    edx,0xfffffffc
c00015cd:	29 f2                	sub    edx,esi
c00015cf:	a8 02                	test   al,0x2
c00015d1:	74 10                	je     c00015e3 <dlmemalign+0xbc>
c00015d3:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00015d6:	83 ca 02             	or     edx,0x2
c00015d9:	8d 43 08             	lea    eax,[ebx+0x8]
c00015dc:	89 33                	mov    DWORD PTR [ebx],esi
c00015de:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00015e1:	eb 5f                	jmp    c0001642 <dlmemalign+0x11b>
c00015e3:	83 ec 0c             	sub    esp,0xc
c00015e6:	89 d0                	mov    eax,edx
c00015e8:	83 c8 01             	or     eax,0x1
c00015eb:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00015ee:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00015f3:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00015f6:	83 e0 01             	and    eax,0x1
c00015f9:	09 f0                	or     eax,esi
c00015fb:	89 de                	mov    esi,ebx
c00015fd:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c0001600:	51                   	push   ecx
c0001601:	e8 e6 f4 ff ff       	call   c0000aec <dlfree>
c0001606:	83 c4 10             	add    esp,0x10
c0001609:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000160c:	a8 02                	test   al,0x2
c000160e:	75 2f                	jne    c000163f <dlmemalign+0x118>
c0001610:	83 e0 fc             	and    eax,0xfffffffc
c0001613:	8d 55 10             	lea    edx,[ebp+0x10]
c0001616:	39 c2                	cmp    edx,eax
c0001618:	73 25                	jae    c000163f <dlmemalign+0x118>
c000161a:	8d 14 2e             	lea    edx,[esi+ebp*1]
c000161d:	83 ec 0c             	sub    esp,0xc
c0001620:	29 e8                	sub    eax,ebp
c0001622:	83 c2 08             	add    edx,0x8
c0001625:	83 c8 01             	or     eax,0x1
c0001628:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c000162b:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000162e:	83 e0 01             	and    eax,0x1
c0001631:	09 c5                	or     ebp,eax
c0001633:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001636:	52                   	push   edx
c0001637:	e8 b0 f4 ff ff       	call   c0000aec <dlfree>
c000163c:	83 c4 10             	add    esp,0x10
c000163f:	8d 46 08             	lea    eax,[esi+0x8]
c0001642:	83 c4 0c             	add    esp,0xc
c0001645:	5b                   	pop    ebx
c0001646:	5e                   	pop    esi
c0001647:	5f                   	pop    edi
c0001648:	5d                   	pop    ebp
c0001649:	c3                   	ret    

c000164a <dlcalloc>:
c000164a:	53                   	push   ebx
c000164b:	83 ec 14             	sub    esp,0x14
c000164e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001652:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001657:	50                   	push   eax
c0001658:	e8 ea f7 ff ff       	call   c0000e47 <dlmalloc>
c000165d:	83 c4 10             	add    esp,0x10
c0001660:	89 c3                	mov    ebx,eax
c0001662:	85 c0                	test   eax,eax
c0001664:	74 77                	je     c00016dd <dlcalloc+0x93>
c0001666:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001669:	89 d0                	mov    eax,edx
c000166b:	83 e0 fc             	and    eax,0xfffffffc
c000166e:	80 e2 02             	and    dl,0x2
c0001671:	75 5a                	jne    c00016cd <dlcalloc+0x83>
c0001673:	83 e8 04             	sub    eax,0x4
c0001676:	83 f8 27             	cmp    eax,0x27
c0001679:	76 03                	jbe    c000167e <dlcalloc+0x34>
c000167b:	51                   	push   ecx
c000167c:	eb 53                	jmp    c00016d1 <dlcalloc+0x87>
c000167e:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001684:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000168b:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001692:	83 f8 13             	cmp    eax,0x13
c0001695:	76 46                	jbe    c00016dd <dlcalloc+0x93>
c0001697:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000169e:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00016a5:	83 f8 1b             	cmp    eax,0x1b
c00016a8:	76 33                	jbe    c00016dd <dlcalloc+0x93>
c00016aa:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00016b1:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00016b8:	83 f8 23             	cmp    eax,0x23
c00016bb:	76 20                	jbe    c00016dd <dlcalloc+0x93>
c00016bd:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00016c4:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00016cb:	eb 10                	jmp    c00016dd <dlcalloc+0x93>
c00016cd:	83 e8 08             	sub    eax,0x8
c00016d0:	52                   	push   edx
c00016d1:	50                   	push   eax
c00016d2:	6a 00                	push   0x0
c00016d4:	53                   	push   ebx
c00016d5:	e8 ce ed ff ff       	call   c00004a8 <memset>
c00016da:	83 c4 10             	add    esp,0x10
c00016dd:	89 d8                	mov    eax,ebx
c00016df:	83 c4 08             	add    esp,0x8
c00016e2:	5b                   	pop    ebx
c00016e3:	c3                   	ret    

c00016e4 <dlcfree>:
c00016e4:	e9 03 f4 ff ff       	jmp    c0000aec <dlfree>

c00016e9 <dlindependent_calloc>:
c00016e9:	83 ec 28             	sub    esp,0x28
c00016ec:	b9 03 00 00 00       	mov    ecx,0x3
c00016f1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00016f5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00016f9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00016fd:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0001701:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001705:	e8 cb fa ff ff       	call   c00011d5 <iALLOc>
c000170a:	83 c4 2c             	add    esp,0x2c
c000170d:	c3                   	ret    

c000170e <dlindependent_comalloc>:
c000170e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001712:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001716:	31 c9                	xor    ecx,ecx
c0001718:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000171c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001720:	e9 b0 fa ff ff       	jmp    c00011d5 <iALLOc>

c0001725 <dlvalloc>:
c0001725:	83 ec 0c             	sub    esp,0xc
c0001728:	83 3d 20 5f 02 c0 00 	cmp    DWORD PTR ds:0xc0025f20,0x0
c000172f:	75 0a                	jne    c000173b <dlvalloc+0x16>
c0001731:	b8 20 5f 02 c0       	mov    eax,0xc0025f20
c0001736:	e8 ca f2 ff ff       	call   c0000a05 <malloc_consolidate>
c000173b:	50                   	push   eax
c000173c:	50                   	push   eax
c000173d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0001741:	ff 35 7c 62 02 c0    	push   DWORD PTR ds:0xc002627c
c0001747:	e8 db fd ff ff       	call   c0001527 <dlmemalign>
c000174c:	83 c4 1c             	add    esp,0x1c
c000174f:	c3                   	ret    

c0001750 <dlpvalloc>:
c0001750:	83 ec 0c             	sub    esp,0xc
c0001753:	83 3d 20 5f 02 c0 00 	cmp    DWORD PTR ds:0xc0025f20,0x0
c000175a:	75 0a                	jne    c0001766 <dlpvalloc+0x16>
c000175c:	b8 20 5f 02 c0       	mov    eax,0xc0025f20
c0001761:	e8 9f f2 ff ff       	call   c0000a05 <malloc_consolidate>
c0001766:	a1 7c 62 02 c0       	mov    eax,ds:0xc002627c
c000176b:	89 c1                	mov    ecx,eax
c000176d:	52                   	push   edx
c000176e:	f7 d9                	neg    ecx
c0001770:	52                   	push   edx
c0001771:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001775:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001779:	21 ca                	and    edx,ecx
c000177b:	52                   	push   edx
c000177c:	50                   	push   eax
c000177d:	e8 a5 fd ff ff       	call   c0001527 <dlmemalign>
c0001782:	83 c4 1c             	add    esp,0x1c
c0001785:	c3                   	ret    

c0001786 <dlmalloc_trim>:
c0001786:	b8 20 5f 02 c0       	mov    eax,0xc0025f20
c000178b:	e8 75 f2 ff ff       	call   c0000a05 <malloc_consolidate>
c0001790:	31 c0                	xor    eax,eax
c0001792:	c3                   	ret    

c0001793 <dlmalloc_usable_size>:
c0001793:	53                   	push   ebx
c0001794:	31 c0                	xor    eax,eax
c0001796:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000179a:	85 c9                	test   ecx,ecx
c000179c:	74 24                	je     c00017c2 <dlmalloc_usable_size+0x2f>
c000179e:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c00017a1:	f6 c2 02             	test   dl,0x2
c00017a4:	74 08                	je     c00017ae <dlmalloc_usable_size+0x1b>
c00017a6:	83 e2 fc             	and    edx,0xfffffffc
c00017a9:	8d 42 f8             	lea    eax,[edx-0x8]
c00017ac:	eb 14                	jmp    c00017c2 <dlmalloc_usable_size+0x2f>
c00017ae:	89 d3                	mov    ebx,edx
c00017b0:	31 c0                	xor    eax,eax
c00017b2:	83 e3 fe             	and    ebx,0xfffffffe
c00017b5:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c00017ba:	74 06                	je     c00017c2 <dlmalloc_usable_size+0x2f>
c00017bc:	83 e2 fc             	and    edx,0xfffffffc
c00017bf:	8d 42 fc             	lea    eax,[edx-0x4]
c00017c2:	5b                   	pop    ebx
c00017c3:	c3                   	ret    

c00017c4 <dlmallinfo>:
c00017c4:	55                   	push   ebp
c00017c5:	57                   	push   edi
c00017c6:	56                   	push   esi
c00017c7:	53                   	push   ebx
c00017c8:	83 ec 08             	sub    esp,0x8
c00017cb:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00017cf:	83 3d 4c 5f 02 c0 00 	cmp    DWORD PTR ds:0xc0025f4c,0x0
c00017d6:	75 0a                	jne    c00017e2 <dlmallinfo+0x1e>
c00017d8:	b8 20 5f 02 c0       	mov    eax,0xc0025f20
c00017dd:	e8 23 f2 ff ff       	call   c0000a05 <malloc_consolidate>
c00017e2:	a1 4c 5f 02 c0       	mov    eax,ds:0xc0025f4c
c00017e7:	31 ed                	xor    ebp,ebp
c00017e9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00017ec:	31 c9                	xor    ecx,ecx
c00017ee:	83 e0 fc             	and    eax,0xfffffffc
c00017f1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00017f5:	31 c0                	xor    eax,eax
c00017f7:	8b 14 85 24 5f 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffda0dc]
c00017fe:	85 d2                	test   edx,edx
c0001800:	74 0e                	je     c0001810 <dlmallinfo+0x4c>
c0001802:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001805:	45                   	inc    ebp
c0001806:	83 e6 fc             	and    esi,0xfffffffc
c0001809:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000180c:	01 f1                	add    ecx,esi
c000180e:	eb ee                	jmp    c00017fe <dlmallinfo+0x3a>
c0001810:	40                   	inc    eax
c0001811:	83 f8 0a             	cmp    eax,0xa
c0001814:	75 e1                	jne    c00017f7 <dlmallinfo+0x33>
c0001816:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000181a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001821:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001824:	b8 54 5f 02 c0       	mov    eax,0xc0025f54
c0001829:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c000182c:	39 f0                	cmp    eax,esi
c000182e:	74 10                	je     c0001840 <dlmallinfo+0x7c>
c0001830:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001833:	ff 04 24             	inc    DWORD PTR [esp]
c0001836:	83 e7 fc             	and    edi,0xfffffffc
c0001839:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c000183c:	01 fa                	add    edx,edi
c000183e:	eb ec                	jmp    c000182c <dlmallinfo+0x68>
c0001840:	83 c0 08             	add    eax,0x8
c0001843:	3d 4c 62 02 c0       	cmp    eax,0xc002624c
c0001848:	75 df                	jne    c0001829 <dlmallinfo+0x65>
c000184a:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c000184d:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001850:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001853:	a1 88 62 02 c0       	mov    eax,ds:0xc0026288
c0001858:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000185b:	89 03                	mov    DWORD PTR [ebx],eax
c000185d:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001860:	8b 35 70 62 02 c0    	mov    esi,DWORD PTR ds:0xc0026270
c0001866:	29 d0                	sub    eax,edx
c0001868:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c000186b:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000186e:	8b 35 84 62 02 c0    	mov    esi,DWORD PTR ds:0xc0026284
c0001874:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001878:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c000187b:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000187e:	8b 35 94 62 02 c0    	mov    esi,DWORD PTR ds:0xc0026294
c0001884:	89 d8                	mov    eax,ebx
c0001886:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001889:	83 c4 08             	add    esp,0x8
c000188c:	5b                   	pop    ebx
c000188d:	5e                   	pop    esi
c000188e:	5f                   	pop    edi
c000188f:	5d                   	pop    ebp
c0001890:	c2 04 00             	ret    0x4

c0001893 <dlmalloc_stats>:
c0001893:	83 ec 30             	sub    esp,0x30
c0001896:	8d 44 24 08          	lea    eax,[esp+0x8]
c000189a:	50                   	push   eax
c000189b:	e8 24 ff ff ff       	call   c00017c4 <dlmallinfo>
c00018a0:	83 c4 30             	add    esp,0x30
c00018a3:	c3                   	ret    

c00018a4 <dlmallopt>:
c00018a4:	56                   	push   esi
c00018a5:	b8 20 5f 02 c0       	mov    eax,0xc0025f20
c00018aa:	53                   	push   ebx
c00018ab:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00018af:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00018b3:	e8 4d f1 ff ff       	call   c0000a05 <malloc_consolidate>
c00018b8:	8d 46 04             	lea    eax,[esi+0x4]
c00018bb:	83 f8 05             	cmp    eax,0x5
c00018be:	77 67                	ja     c0001927 <dlmallopt+0x83>
c00018c0:	ff 24 85 84 22 02 c0 	jmp    DWORD PTR [eax*4-0x3ffddd7c]
c00018c7:	83 fb 50             	cmp    ebx,0x50
c00018ca:	77 5b                	ja     c0001927 <dlmallopt+0x83>
c00018cc:	ba 08 00 00 00       	mov    edx,0x8
c00018d1:	85 db                	test   ebx,ebx
c00018d3:	74 12                	je     c00018e7 <dlmallopt+0x43>
c00018d5:	83 c3 0b             	add    ebx,0xb
c00018d8:	ba 10 00 00 00       	mov    edx,0x10
c00018dd:	83 fb 0f             	cmp    ebx,0xf
c00018e0:	76 05                	jbe    c00018e7 <dlmallopt+0x43>
c00018e2:	89 da                	mov    edx,ebx
c00018e4:	83 e2 f8             	and    edx,0xfffffff8
c00018e7:	a1 20 5f 02 c0       	mov    eax,ds:0xc0025f20
c00018ec:	83 e0 03             	and    eax,0x3
c00018ef:	09 d0                	or     eax,edx
c00018f1:	a3 20 5f 02 c0       	mov    ds:0xc0025f20,eax
c00018f6:	eb 31                	jmp    c0001929 <dlmallopt+0x85>
c00018f8:	89 1d 64 62 02 c0    	mov    DWORD PTR ds:0xc0026264,ebx
c00018fe:	eb 06                	jmp    c0001906 <dlmallopt+0x62>
c0001900:	89 1d 68 62 02 c0    	mov    DWORD PTR ds:0xc0026268,ebx
c0001906:	be 01 00 00 00       	mov    esi,0x1
c000190b:	eb 1c                	jmp    c0001929 <dlmallopt+0x85>
c000190d:	89 1d 6c 62 02 c0    	mov    DWORD PTR ds:0xc002626c,ebx
c0001913:	eb f1                	jmp    c0001906 <dlmallopt+0x62>
c0001915:	31 f6                	xor    esi,esi
c0001917:	85 db                	test   ebx,ebx
c0001919:	75 0e                	jne    c0001929 <dlmallopt+0x85>
c000191b:	c7 05 74 62 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026274,0x0
c0001925:	eb df                	jmp    c0001906 <dlmallopt+0x62>
c0001927:	31 f6                	xor    esi,esi
c0001929:	89 f0                	mov    eax,esi
c000192b:	5b                   	pop    ebx
c000192c:	5e                   	pop    esi
c000192d:	c3                   	ret    

c000192e <disk_status>:
c000192e:	31 c0                	xor    eax,eax
c0001930:	c3                   	ret    

c0001931 <disk_initialize>:
c0001931:	31 c0                	xor    eax,eax
c0001933:	c3                   	ret    

c0001934 <disk_read>:
c0001934:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001939:	0f b6 04 85 c0 99 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd6640]
c0001941:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001945:	e9 be 94 01 00       	jmp    c001ae08 <fatWrapperReadDisk>

c000194a <disk_write>:
c000194a:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000194f:	0f b6 04 85 c0 99 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd6640]
c0001957:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000195b:	e9 f0 94 01 00       	jmp    c001ae50 <fatWrapperWriteDisk>

c0001960 <disk_ioctl>:
c0001960:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001965:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001969:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000196e:	0f b6 04 85 c0 99 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd6640]
c0001976:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000197a:	e9 19 95 01 00       	jmp    c001ae98 <fatWrapperIoctl>

c000197f <ld_word>:
c000197f:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001983:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001986:	c1 e2 08             	shl    edx,0x8
c0001989:	09 d0                	or     eax,edx
c000198b:	c3                   	ret    

c000198c <ld_dword>:
c000198c:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001990:	89 d1                	mov    ecx,edx
c0001992:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001996:	c1 e1 08             	shl    ecx,0x8
c0001999:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000199c:	09 ca                	or     edx,ecx
c000199e:	c1 e2 08             	shl    edx,0x8
c00019a1:	09 d0                	or     eax,edx
c00019a3:	c3                   	ret    

c00019a4 <ld_qword>:
c00019a4:	57                   	push   edi
c00019a5:	56                   	push   esi
c00019a6:	53                   	push   ebx
c00019a7:	31 db                	xor    ebx,ebx
c00019a9:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c00019ac:	89 df                	mov    edi,ebx
c00019ae:	89 ce                	mov    esi,ecx
c00019b0:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c00019b4:	0f a4 f7 08          	shld   edi,esi,0x8
c00019b8:	c1 e6 08             	shl    esi,0x8
c00019bb:	09 f2                	or     edx,esi
c00019bd:	89 d6                	mov    esi,edx
c00019bf:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c00019c3:	0f a4 f7 08          	shld   edi,esi,0x8
c00019c7:	c1 e6 08             	shl    esi,0x8
c00019ca:	09 f2                	or     edx,esi
c00019cc:	89 d6                	mov    esi,edx
c00019ce:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c00019d2:	0f a4 f7 08          	shld   edi,esi,0x8
c00019d6:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00019d9:	c1 e6 08             	shl    esi,0x8
c00019dc:	89 fb                	mov    ebx,edi
c00019de:	09 f2                	or     edx,esi
c00019e0:	89 d1                	mov    ecx,edx
c00019e2:	0f a4 cb 08          	shld   ebx,ecx,0x8
c00019e6:	c1 e1 08             	shl    ecx,0x8
c00019e9:	89 da                	mov    edx,ebx
c00019eb:	09 c8                	or     eax,ecx
c00019ed:	5b                   	pop    ebx
c00019ee:	5e                   	pop    esi
c00019ef:	5f                   	pop    edi
c00019f0:	c3                   	ret    

c00019f1 <st_word>:
c00019f1:	66 89 10             	mov    WORD PTR [eax],dx
c00019f4:	c3                   	ret    

c00019f5 <st_dword>:
c00019f5:	89 10                	mov    DWORD PTR [eax],edx
c00019f7:	c3                   	ret    

c00019f8 <st_qword>:
c00019f8:	89 10                	mov    DWORD PTR [eax],edx
c00019fa:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c00019fd:	c3                   	ret    

c00019fe <mem_cpy>:
c00019fe:	85 c9                	test   ecx,ecx
c0001a00:	74 10                	je     c0001a12 <mem_cpy+0x14>
c0001a02:	57                   	push   edi
c0001a03:	01 c1                	add    ecx,eax
c0001a05:	56                   	push   esi
c0001a06:	89 c7                	mov    edi,eax
c0001a08:	89 d6                	mov    esi,edx
c0001a0a:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001a0b:	39 f9                	cmp    ecx,edi
c0001a0d:	75 fb                	jne    c0001a0a <mem_cpy+0xc>
c0001a0f:	5e                   	pop    esi
c0001a10:	5f                   	pop    edi
c0001a11:	c3                   	ret    
c0001a12:	c3                   	ret    

c0001a13 <mem_set>:
c0001a13:	01 c1                	add    ecx,eax
c0001a15:	40                   	inc    eax
c0001a16:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001a19:	39 c8                	cmp    eax,ecx
c0001a1b:	75 f8                	jne    c0001a15 <mem_set+0x2>
c0001a1d:	c3                   	ret    

c0001a1e <mem_cmp>:
c0001a1e:	57                   	push   edi
c0001a1f:	56                   	push   esi
c0001a20:	89 c6                	mov    esi,eax
c0001a22:	53                   	push   ebx
c0001a23:	46                   	inc    esi
c0001a24:	42                   	inc    edx
c0001a25:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001a29:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001a2d:	29 fb                	sub    ebx,edi
c0001a2f:	89 cf                	mov    edi,ecx
c0001a31:	29 f7                	sub    edi,esi
c0001a33:	01 c7                	add    edi,eax
c0001a35:	74 04                	je     c0001a3b <mem_cmp+0x1d>
c0001a37:	85 db                	test   ebx,ebx
c0001a39:	74 e8                	je     c0001a23 <mem_cmp+0x5>
c0001a3b:	89 d8                	mov    eax,ebx
c0001a3d:	5b                   	pop    ebx
c0001a3e:	5e                   	pop    esi
c0001a3f:	5f                   	pop    edi
c0001a40:	c3                   	ret    

c0001a41 <chk_chr>:
c0001a41:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001a44:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001a47:	74 07                	je     c0001a50 <chk_chr+0xf>
c0001a49:	39 d1                	cmp    ecx,edx
c0001a4b:	74 03                	je     c0001a50 <chk_chr+0xf>
c0001a4d:	40                   	inc    eax
c0001a4e:	eb f1                	jmp    c0001a41 <chk_chr>
c0001a50:	89 c8                	mov    eax,ecx
c0001a52:	c3                   	ret    

c0001a53 <dbc_1st>:
c0001a53:	31 c0                	xor    eax,eax
c0001a55:	c3                   	ret    

c0001a56 <dbc_2nd>:
c0001a56:	31 c0                	xor    eax,eax
c0001a58:	c3                   	ret    

c0001a59 <tchar2uni>:
c0001a59:	57                   	push   edi
c0001a5a:	89 c7                	mov    edi,eax
c0001a5c:	56                   	push   esi
c0001a5d:	53                   	push   ebx
c0001a5e:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001a60:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001a62:	8d 73 01             	lea    esi,[ebx+0x1]
c0001a65:	84 c9                	test   cl,cl
c0001a67:	78 0a                	js     c0001a73 <tchar2uni+0x1a>
c0001a69:	0f b6 d1             	movzx  edx,cl
c0001a6c:	89 f3                	mov    ebx,esi
c0001a6e:	e9 9f 00 00 00       	jmp    c0001b12 <tchar2uni+0xb9>
c0001a73:	88 ca                	mov    dl,cl
c0001a75:	83 e2 e0             	and    edx,0xffffffe0
c0001a78:	80 fa c0             	cmp    dl,0xc0
c0001a7b:	75 0c                	jne    c0001a89 <tchar2uni+0x30>
c0001a7d:	89 ca                	mov    edx,ecx
c0001a7f:	b9 01 00 00 00       	mov    ecx,0x1
c0001a84:	83 e2 1f             	and    edx,0x1f
c0001a87:	eb 2e                	jmp    c0001ab7 <tchar2uni+0x5e>
c0001a89:	88 ca                	mov    dl,cl
c0001a8b:	83 e2 f0             	and    edx,0xfffffff0
c0001a8e:	80 fa e0             	cmp    dl,0xe0
c0001a91:	75 0c                	jne    c0001a9f <tchar2uni+0x46>
c0001a93:	89 ca                	mov    edx,ecx
c0001a95:	b9 02 00 00 00       	mov    ecx,0x2
c0001a9a:	83 e2 0f             	and    edx,0xf
c0001a9d:	eb 18                	jmp    c0001ab7 <tchar2uni+0x5e>
c0001a9f:	88 ca                	mov    dl,cl
c0001aa1:	83 e2 f8             	and    edx,0xfffffff8
c0001aa4:	88 d0                	mov    al,dl
c0001aa6:	83 ca ff             	or     edx,0xffffffff
c0001aa9:	3c f0                	cmp    al,0xf0
c0001aab:	75 6c                	jne    c0001b19 <tchar2uni+0xc0>
c0001aad:	89 ca                	mov    edx,ecx
c0001aaf:	b9 03 00 00 00       	mov    ecx,0x3
c0001ab4:	83 e2 07             	and    edx,0x7
c0001ab7:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001abb:	46                   	inc    esi
c0001abc:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001abf:	88 c8                	mov    al,cl
c0001ac1:	83 e0 c0             	and    eax,0xffffffc0
c0001ac4:	3c 80                	cmp    al,0x80
c0001ac6:	75 4e                	jne    c0001b16 <tchar2uni+0xbd>
c0001ac8:	c1 e2 06             	shl    edx,0x6
c0001acb:	83 e1 3f             	and    ecx,0x3f
c0001ace:	09 ca                	or     edx,ecx
c0001ad0:	39 de                	cmp    esi,ebx
c0001ad2:	75 e7                	jne    c0001abb <tchar2uni+0x62>
c0001ad4:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001ad7:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001add:	77 37                	ja     c0001b16 <tchar2uni+0xbd>
c0001adf:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001ae5:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001aeb:	76 29                	jbe    c0001b16 <tchar2uni+0xbd>
c0001aed:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001af3:	76 1d                	jbe    c0001b12 <tchar2uni+0xb9>
c0001af5:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001afb:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001b01:	c1 e1 06             	shl    ecx,0x6
c0001b04:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001b0a:	09 ca                	or     edx,ecx
c0001b0c:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001b12:	89 1f                	mov    DWORD PTR [edi],ebx
c0001b14:	eb 03                	jmp    c0001b19 <tchar2uni+0xc0>
c0001b16:	83 ca ff             	or     edx,0xffffffff
c0001b19:	5b                   	pop    ebx
c0001b1a:	89 d0                	mov    eax,edx
c0001b1c:	5e                   	pop    esi
c0001b1d:	5f                   	pop    edi
c0001b1e:	c3                   	ret    

c0001b1f <put_utf>:
c0001b1f:	53                   	push   ebx
c0001b20:	83 f8 7f             	cmp    eax,0x7f
c0001b23:	89 c3                	mov    ebx,eax
c0001b25:	b0 00                	mov    al,0x0
c0001b27:	77 11                	ja     c0001b3a <put_utf+0x1b>
c0001b29:	85 c9                	test   ecx,ecx
c0001b2b:	0f 84 e5 00 00 00    	je     c0001c16 <put_utf+0xf7>
c0001b31:	88 1a                	mov    BYTE PTR [edx],bl
c0001b33:	b0 01                	mov    al,0x1
c0001b35:	e9 dc 00 00 00       	jmp    c0001c16 <put_utf+0xf7>
c0001b3a:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001b40:	77 23                	ja     c0001b65 <put_utf+0x46>
c0001b42:	83 f9 01             	cmp    ecx,0x1
c0001b45:	0f 86 cb 00 00 00    	jbe    c0001c16 <put_utf+0xf7>
c0001b4b:	89 d8                	mov    eax,ebx
c0001b4d:	83 e3 3f             	and    ebx,0x3f
c0001b50:	c1 e8 06             	shr    eax,0x6
c0001b53:	83 cb 80             	or     ebx,0xffffff80
c0001b56:	83 c8 c0             	or     eax,0xffffffc0
c0001b59:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001b5c:	88 02                	mov    BYTE PTR [edx],al
c0001b5e:	b0 02                	mov    al,0x2
c0001b60:	e9 b1 00 00 00       	jmp    c0001c16 <put_utf+0xf7>
c0001b65:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001b6b:	77 40                	ja     c0001bad <put_utf+0x8e>
c0001b6d:	83 f9 02             	cmp    ecx,0x2
c0001b70:	0f 86 a0 00 00 00    	jbe    c0001c16 <put_utf+0xf7>
c0001b76:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001b7c:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001b82:	0f 86 8e 00 00 00    	jbe    c0001c16 <put_utf+0xf7>
c0001b88:	89 d8                	mov    eax,ebx
c0001b8a:	c1 e8 0c             	shr    eax,0xc
c0001b8d:	83 c8 e0             	or     eax,0xffffffe0
c0001b90:	88 02                	mov    BYTE PTR [edx],al
c0001b92:	89 d8                	mov    eax,ebx
c0001b94:	83 e3 3f             	and    ebx,0x3f
c0001b97:	c1 e8 06             	shr    eax,0x6
c0001b9a:	83 cb 80             	or     ebx,0xffffff80
c0001b9d:	83 e0 3f             	and    eax,0x3f
c0001ba0:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001ba3:	83 c8 80             	or     eax,0xffffff80
c0001ba6:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001ba9:	b0 03                	mov    al,0x3
c0001bab:	eb 69                	jmp    c0001c16 <put_utf+0xf7>
c0001bad:	83 f9 03             	cmp    ecx,0x3
c0001bb0:	76 64                	jbe    c0001c16 <put_utf+0xf7>
c0001bb2:	89 d9                	mov    ecx,ebx
c0001bb4:	0f b7 c3             	movzx  eax,bx
c0001bb7:	66 31 c9             	xor    cx,cx
c0001bba:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001bc0:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001bc6:	c1 e9 06             	shr    ecx,0x6
c0001bc9:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001bcf:	77 43                	ja     c0001c14 <put_utf+0xf5>
c0001bd1:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001bd7:	77 3b                	ja     c0001c14 <put_utf+0xf5>
c0001bd9:	09 cb                	or     ebx,ecx
c0001bdb:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001be1:	89 d8                	mov    eax,ebx
c0001be3:	c1 e8 12             	shr    eax,0x12
c0001be6:	83 c8 f0             	or     eax,0xfffffff0
c0001be9:	88 02                	mov    BYTE PTR [edx],al
c0001beb:	89 d8                	mov    eax,ebx
c0001bed:	c1 e8 0c             	shr    eax,0xc
c0001bf0:	83 e0 3f             	and    eax,0x3f
c0001bf3:	83 c8 80             	or     eax,0xffffff80
c0001bf6:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001bf9:	89 d8                	mov    eax,ebx
c0001bfb:	83 e3 3f             	and    ebx,0x3f
c0001bfe:	c1 e8 06             	shr    eax,0x6
c0001c01:	83 cb 80             	or     ebx,0xffffff80
c0001c04:	83 e0 3f             	and    eax,0x3f
c0001c07:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001c0a:	83 c8 80             	or     eax,0xffffff80
c0001c0d:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001c10:	b0 04                	mov    al,0x4
c0001c12:	eb 02                	jmp    c0001c16 <put_utf+0xf7>
c0001c14:	31 c0                	xor    eax,eax
c0001c16:	5b                   	pop    ebx
c0001c17:	c3                   	ret    

c0001c18 <clst2sect>:
c0001c18:	89 c1                	mov    ecx,eax
c0001c1a:	83 ea 02             	sub    edx,0x2
c0001c1d:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001c20:	83 e8 02             	sub    eax,0x2
c0001c23:	39 d0                	cmp    eax,edx
c0001c25:	76 0d                	jbe    c0001c34 <clst2sect+0x1c>
c0001c27:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001c2b:	f7 e2                	mul    edx
c0001c2d:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001c30:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001c33:	c3                   	ret    
c0001c34:	31 c0                	xor    eax,eax
c0001c36:	31 d2                	xor    edx,edx
c0001c38:	c3                   	ret    

c0001c39 <clmt_clust>:
c0001c39:	57                   	push   edi
c0001c3a:	89 cf                	mov    edi,ecx
c0001c3c:	56                   	push   esi
c0001c3d:	89 d6                	mov    esi,edx
c0001c3f:	53                   	push   ebx
c0001c40:	0f ac fe 09          	shrd   esi,edi,0x9
c0001c44:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001c47:	89 f2                	mov    edx,esi
c0001c49:	8b 00                	mov    eax,DWORD PTR [eax]
c0001c4b:	c1 ef 09             	shr    edi,0x9
c0001c4e:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001c52:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001c55:	89 f9                	mov    ecx,edi
c0001c57:	31 ff                	xor    edi,edi
c0001c59:	57                   	push   edi
c0001c5a:	56                   	push   esi
c0001c5b:	51                   	push   ecx
c0001c5c:	52                   	push   edx
c0001c5d:	e8 3e f8 01 00       	call   c00214a0 <__udivdi3>
c0001c62:	83 c4 10             	add    esp,0x10
c0001c65:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001c67:	85 d2                	test   edx,edx
c0001c69:	74 10                	je     c0001c7b <clmt_clust+0x42>
c0001c6b:	39 d0                	cmp    eax,edx
c0001c6d:	72 07                	jb     c0001c76 <clmt_clust+0x3d>
c0001c6f:	29 d0                	sub    eax,edx
c0001c71:	83 c3 08             	add    ebx,0x8
c0001c74:	eb ef                	jmp    c0001c65 <clmt_clust+0x2c>
c0001c76:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001c79:	89 c2                	mov    edx,eax
c0001c7b:	5b                   	pop    ebx
c0001c7c:	89 d0                	mov    eax,edx
c0001c7e:	5e                   	pop    esi
c0001c7f:	5f                   	pop    edi
c0001c80:	c3                   	ret    

c0001c81 <pick_lfn>:
c0001c81:	55                   	push   ebp
c0001c82:	57                   	push   edi
c0001c83:	56                   	push   esi
c0001c84:	89 d6                	mov    esi,edx
c0001c86:	53                   	push   ebx
c0001c87:	89 c3                	mov    ebx,eax
c0001c89:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001c8c:	e8 ee fc ff ff       	call   c000197f <ld_word>
c0001c91:	66 85 c0             	test   ax,ax
c0001c94:	74 04                	je     c0001c9a <pick_lfn+0x19>
c0001c96:	31 c0                	xor    eax,eax
c0001c98:	eb 5c                	jmp    c0001cf6 <pick_lfn+0x75>
c0001c9a:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001c9d:	bd 01 00 00 00       	mov    ebp,0x1
c0001ca2:	83 e1 bf             	and    ecx,0xffffffbf
c0001ca5:	31 ff                	xor    edi,edi
c0001ca7:	49                   	dec    ecx
c0001ca8:	6b c9 0d             	imul   ecx,ecx,0xd
c0001cab:	0f b6 87 a0 23 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffddc60]
c0001cb2:	01 f0                	add    eax,esi
c0001cb4:	e8 c6 fc ff ff       	call   c000197f <ld_word>
c0001cb9:	66 85 ed             	test   bp,bp
c0001cbc:	74 11                	je     c0001ccf <pick_lfn+0x4e>
c0001cbe:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001cc4:	77 d0                	ja     c0001c96 <pick_lfn+0x15>
c0001cc6:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001cca:	89 c5                	mov    ebp,eax
c0001ccc:	41                   	inc    ecx
c0001ccd:	eb 04                	jmp    c0001cd3 <pick_lfn+0x52>
c0001ccf:	66 40                	inc    ax
c0001cd1:	75 c3                	jne    c0001c96 <pick_lfn+0x15>
c0001cd3:	47                   	inc    edi
c0001cd4:	83 ff 0d             	cmp    edi,0xd
c0001cd7:	75 d2                	jne    c0001cab <pick_lfn+0x2a>
c0001cd9:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001cdc:	74 13                	je     c0001cf1 <pick_lfn+0x70>
c0001cde:	66 85 ed             	test   bp,bp
c0001ce1:	74 0e                	je     c0001cf1 <pick_lfn+0x70>
c0001ce3:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001ce9:	77 ab                	ja     c0001c96 <pick_lfn+0x15>
c0001ceb:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001cf1:	b8 01 00 00 00       	mov    eax,0x1
c0001cf6:	5b                   	pop    ebx
c0001cf7:	5e                   	pop    esi
c0001cf8:	5f                   	pop    edi
c0001cf9:	5d                   	pop    ebp
c0001cfa:	c3                   	ret    

c0001cfb <put_lfn>:
c0001cfb:	55                   	push   ebp
c0001cfc:	31 ed                	xor    ebp,ebp
c0001cfe:	57                   	push   edi
c0001cff:	89 d7                	mov    edi,edx
c0001d01:	56                   	push   esi
c0001d02:	31 f6                	xor    esi,esi
c0001d04:	53                   	push   ebx
c0001d05:	83 ec 08             	sub    esp,0x8
c0001d08:	89 04 24             	mov    DWORD PTR [esp],eax
c0001d0b:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001d0f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001d13:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001d19:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001d1c:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001d1f:	31 d2                	xor    edx,edx
c0001d21:	e8 cb fc ff ff       	call   c00019f1 <st_word>
c0001d26:	0f b6 d9             	movzx  ebx,cl
c0001d29:	4b                   	dec    ebx
c0001d2a:	6b db 0d             	imul   ebx,ebx,0xd
c0001d2d:	66 83 fe ff          	cmp    si,0xffff
c0001d31:	74 08                	je     c0001d3b <put_lfn+0x40>
c0001d33:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001d36:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0001d3a:	43                   	inc    ebx
c0001d3b:	0f b6 85 a0 23 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffddc60]
c0001d42:	0f b7 d6             	movzx  edx,si
c0001d45:	01 f8                	add    eax,edi
c0001d47:	e8 a5 fc ff ff       	call   c00019f1 <st_word>
c0001d4c:	66 85 f6             	test   si,si
c0001d4f:	75 03                	jne    c0001d54 <put_lfn+0x59>
c0001d51:	83 ce ff             	or     esi,0xffffffff
c0001d54:	45                   	inc    ebp
c0001d55:	83 fd 0d             	cmp    ebp,0xd
c0001d58:	75 d3                	jne    c0001d2d <put_lfn+0x32>
c0001d5a:	66 46                	inc    si
c0001d5c:	74 0a                	je     c0001d68 <put_lfn+0x6d>
c0001d5e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001d61:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0001d66:	75 09                	jne    c0001d71 <put_lfn+0x76>
c0001d68:	88 c8                	mov    al,cl
c0001d6a:	83 c8 40             	or     eax,0x40
c0001d6d:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0001d71:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0001d75:	88 07                	mov    BYTE PTR [edi],al
c0001d77:	83 c4 08             	add    esp,0x8
c0001d7a:	5b                   	pop    ebx
c0001d7b:	5e                   	pop    esi
c0001d7c:	5f                   	pop    edi
c0001d7d:	5d                   	pop    ebp
c0001d7e:	c3                   	ret    

c0001d7f <gen_numname>:
c0001d7f:	57                   	push   edi
c0001d80:	89 cf                	mov    edi,ecx
c0001d82:	56                   	push   esi
c0001d83:	b9 0b 00 00 00       	mov    ecx,0xb
c0001d88:	53                   	push   ebx
c0001d89:	89 c6                	mov    esi,eax
c0001d8b:	83 ec 10             	sub    esp,0x10
c0001d8e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0001d92:	e8 67 fc ff ff       	call   c00019fe <mem_cpy>
c0001d97:	83 fb 05             	cmp    ebx,0x5
c0001d9a:	76 2d                	jbe    c0001dc9 <gen_numname+0x4a>
c0001d9c:	66 8b 07             	mov    ax,WORD PTR [edi]
c0001d9f:	66 85 c0             	test   ax,ax
c0001da2:	74 25                	je     c0001dc9 <gen_numname+0x4a>
c0001da4:	83 c7 02             	add    edi,0x2
c0001da7:	ba 10 00 00 00       	mov    edx,0x10
c0001dac:	01 db                	add    ebx,ebx
c0001dae:	89 c1                	mov    ecx,eax
c0001db0:	66 d1 e8             	shr    ax,1
c0001db3:	83 e1 01             	and    ecx,0x1
c0001db6:	01 cb                	add    ebx,ecx
c0001db8:	0f ba e3 10          	bt     ebx,0x10
c0001dbc:	73 06                	jae    c0001dc4 <gen_numname+0x45>
c0001dbe:	81 f3 21 10 01 00    	xor    ebx,0x11021
c0001dc4:	4a                   	dec    edx
c0001dc5:	75 e5                	jne    c0001dac <gen_numname+0x2d>
c0001dc7:	eb d3                	jmp    c0001d9c <gen_numname+0x1d>
c0001dc9:	b8 07 00 00 00       	mov    eax,0x7
c0001dce:	88 d9                	mov    cl,bl
c0001dd0:	83 e1 0f             	and    ecx,0xf
c0001dd3:	8d 51 30             	lea    edx,[ecx+0x30]
c0001dd6:	80 fa 39             	cmp    dl,0x39
c0001dd9:	76 03                	jbe    c0001dde <gen_numname+0x5f>
c0001ddb:	8d 51 37             	lea    edx,[ecx+0x37]
c0001dde:	8d 48 ff             	lea    ecx,[eax-0x1]
c0001de1:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c0001de5:	89 da                	mov    edx,ebx
c0001de7:	c1 ea 04             	shr    edx,0x4
c0001dea:	83 fb 0f             	cmp    ebx,0xf
c0001ded:	76 06                	jbe    c0001df5 <gen_numname+0x76>
c0001def:	89 c8                	mov    eax,ecx
c0001df1:	89 d3                	mov    ebx,edx
c0001df3:	eb d9                	jmp    c0001dce <gen_numname+0x4f>
c0001df5:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c0001dfa:	31 d2                	xor    edx,edx
c0001dfc:	8d 58 fe             	lea    ebx,[eax-0x2]
c0001dff:	8d 04 16             	lea    eax,[esi+edx*1]
c0001e02:	39 ca                	cmp    edx,ecx
c0001e04:	73 18                	jae    c0001e1e <gen_numname+0x9f>
c0001e06:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001e09:	3c 20                	cmp    al,0x20
c0001e0b:	74 11                	je     c0001e1e <gen_numname+0x9f>
c0001e0d:	e8 41 fc ff ff       	call   c0001a53 <dbc_1st>
c0001e12:	85 c0                	test   eax,eax
c0001e14:	74 05                	je     c0001e1b <gen_numname+0x9c>
c0001e16:	39 d3                	cmp    ebx,edx
c0001e18:	74 04                	je     c0001e1e <gen_numname+0x9f>
c0001e1a:	42                   	inc    edx
c0001e1b:	42                   	inc    edx
c0001e1c:	eb e1                	jmp    c0001dff <gen_numname+0x80>
c0001e1e:	b0 20                	mov    al,0x20
c0001e20:	83 f9 07             	cmp    ecx,0x7
c0001e23:	77 05                	ja     c0001e2a <gen_numname+0xab>
c0001e25:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0001e29:	41                   	inc    ecx
c0001e2a:	42                   	inc    edx
c0001e2b:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0001e2f:	83 fa 07             	cmp    edx,0x7
c0001e32:	76 ea                	jbe    c0001e1e <gen_numname+0x9f>
c0001e34:	83 c4 10             	add    esp,0x10
c0001e37:	5b                   	pop    ebx
c0001e38:	5e                   	pop    esi
c0001e39:	5f                   	pop    edi
c0001e3a:	c3                   	ret    

c0001e3b <sum_sfn>:
c0001e3b:	31 c9                	xor    ecx,ecx
c0001e3d:	31 d2                	xor    edx,edx
c0001e3f:	d0 ca                	ror    dl,1
c0001e41:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0001e44:	41                   	inc    ecx
c0001e45:	83 f9 0b             	cmp    ecx,0xb
c0001e48:	75 f5                	jne    c0001e3f <sum_sfn+0x4>
c0001e4a:	88 d0                	mov    al,dl
c0001e4c:	c3                   	ret    

c0001e4d <xdir_sum>:
c0001e4d:	56                   	push   esi
c0001e4e:	31 c9                	xor    ecx,ecx
c0001e50:	53                   	push   ebx
c0001e51:	31 d2                	xor    edx,edx
c0001e53:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c0001e57:	43                   	inc    ebx
c0001e58:	c1 e3 05             	shl    ebx,0x5
c0001e5b:	83 fa 02             	cmp    edx,0x2
c0001e5e:	74 0b                	je     c0001e6b <xdir_sum+0x1e>
c0001e60:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c0001e64:	66 d1 c9             	ror    cx,1
c0001e67:	01 f1                	add    ecx,esi
c0001e69:	eb 05                	jmp    c0001e70 <xdir_sum+0x23>
c0001e6b:	ba 03 00 00 00       	mov    edx,0x3
c0001e70:	42                   	inc    edx
c0001e71:	39 d3                	cmp    ebx,edx
c0001e73:	77 e6                	ja     c0001e5b <xdir_sum+0xe>
c0001e75:	89 c8                	mov    eax,ecx
c0001e77:	5b                   	pop    ebx
c0001e78:	5e                   	pop    esi
c0001e79:	c3                   	ret    

c0001e7a <xsum32>:
c0001e7a:	d1 ca                	ror    edx,1
c0001e7c:	0f b6 c0             	movzx  eax,al
c0001e7f:	01 d0                	add    eax,edx
c0001e81:	c3                   	ret    

c0001e82 <get_xfileinfo>:
c0001e82:	55                   	push   ebp
c0001e83:	31 c9                	xor    ecx,ecx
c0001e85:	57                   	push   edi
c0001e86:	bd 40 00 00 00       	mov    ebp,0x40
c0001e8b:	56                   	push   esi
c0001e8c:	31 ff                	xor    edi,edi
c0001e8e:	53                   	push   ebx
c0001e8f:	89 c6                	mov    esi,eax
c0001e91:	83 ec 0c             	sub    esp,0xc
c0001e94:	89 d3                	mov    ebx,edx
c0001e96:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0001e9d:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0001ea1:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0001ea4:	76 6d                	jbe    c0001f13 <get_xfileinfo+0x91>
c0001ea6:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0001eac:	76 0b                	jbe    c0001eb9 <get_xfileinfo+0x37>
c0001eae:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0001eb2:	bf 01 00 00 00       	mov    edi,0x1
c0001eb7:	eb 63                	jmp    c0001f1c <get_xfileinfo+0x9a>
c0001eb9:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c0001ebf:	75 03                	jne    c0001ec4 <get_xfileinfo+0x42>
c0001ec1:	83 c5 02             	add    ebp,0x2
c0001ec4:	8d 04 2e             	lea    eax,[esi+ebp*1]
c0001ec7:	83 c5 02             	add    ebp,0x2
c0001eca:	e8 b0 fa ff ff       	call   c000197f <ld_word>
c0001ecf:	ff 04 24             	inc    DWORD PTR [esp]
c0001ed2:	66 85 c9             	test   cx,cx
c0001ed5:	75 0d                	jne    c0001ee4 <get_xfileinfo+0x62>
c0001ed7:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0001edd:	66 81 fa ff 07       	cmp    dx,0x7ff
c0001ee2:	76 2b                	jbe    c0001f0f <get_xfileinfo+0x8d>
c0001ee4:	c1 e1 10             	shl    ecx,0x10
c0001ee7:	ba ff 00 00 00       	mov    edx,0xff
c0001eec:	0f b7 c0             	movzx  eax,ax
c0001eef:	29 fa                	sub    edx,edi
c0001ef1:	09 c8                	or     eax,ecx
c0001ef3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001ef7:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0001efb:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001eff:	e8 1b fc ff ff       	call   c0001b1f <put_utf>
c0001f04:	84 c0                	test   al,al
c0001f06:	74 a6                	je     c0001eae <get_xfileinfo+0x2c>
c0001f08:	0f b6 c0             	movzx  eax,al
c0001f0b:	01 c7                	add    edi,eax
c0001f0d:	31 c0                	xor    eax,eax
c0001f0f:	89 c1                	mov    ecx,eax
c0001f11:	eb 8a                	jmp    c0001e9d <get_xfileinfo+0x1b>
c0001f13:	85 ff                	test   edi,edi
c0001f15:	74 97                	je     c0001eae <get_xfileinfo+0x2c>
c0001f17:	66 85 c9             	test   cx,cx
c0001f1a:	75 92                	jne    c0001eae <get_xfileinfo+0x2c>
c0001f1c:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0001f21:	31 c0                	xor    eax,eax
c0001f23:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0001f27:	31 d2                	xor    edx,edx
c0001f29:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c0001f2c:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c0001f2f:	80 e1 10             	and    cl,0x10
c0001f32:	75 08                	jne    c0001f3c <get_xfileinfo+0xba>
c0001f34:	8d 46 38             	lea    eax,[esi+0x38]
c0001f37:	e8 68 fa ff ff       	call   c00019a4 <ld_qword>
c0001f3c:	89 03                	mov    DWORD PTR [ebx],eax
c0001f3e:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001f41:	8d 46 0c             	lea    eax,[esi+0xc]
c0001f44:	e8 36 fa ff ff       	call   c000197f <ld_word>
c0001f49:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0001f4d:	8d 46 0e             	lea    eax,[esi+0xe]
c0001f50:	e8 2a fa ff ff       	call   c000197f <ld_word>
c0001f55:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0001f59:	83 c4 0c             	add    esp,0xc
c0001f5c:	5b                   	pop    ebx
c0001f5d:	5e                   	pop    esi
c0001f5e:	5f                   	pop    edi
c0001f5f:	5d                   	pop    ebp
c0001f60:	c3                   	ret    

c0001f61 <get_ldnumber>:
c0001f61:	8b 10                	mov    edx,DWORD PTR [eax]
c0001f63:	85 d2                	test   edx,edx
c0001f65:	74 14                	je     c0001f7b <get_ldnumber+0x1a>
c0001f67:	56                   	push   esi
c0001f68:	53                   	push   ebx
c0001f69:	89 d3                	mov    ebx,edx
c0001f6b:	43                   	inc    ebx
c0001f6c:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0001f6f:	80 f9 1f             	cmp    cl,0x1f
c0001f72:	76 0d                	jbe    c0001f81 <get_ldnumber+0x20>
c0001f74:	80 f9 3a             	cmp    cl,0x3a
c0001f77:	75 f2                	jne    c0001f6b <get_ldnumber+0xa>
c0001f79:	eb 0a                	jmp    c0001f85 <get_ldnumber+0x24>
c0001f7b:	83 c9 ff             	or     ecx,0xffffffff
c0001f7e:	89 c8                	mov    eax,ecx
c0001f80:	c3                   	ret    
c0001f81:	31 c9                	xor    ecx,ecx
c0001f83:	eb 24                	jmp    c0001fa9 <get_ldnumber+0x48>
c0001f85:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0001f88:	8d 4e d0             	lea    ecx,[esi-0x30]
c0001f8b:	80 f9 09             	cmp    cl,0x9
c0001f8e:	77 16                	ja     c0001fa6 <get_ldnumber+0x45>
c0001f90:	83 c2 02             	add    edx,0x2
c0001f93:	83 c9 ff             	or     ecx,0xffffffff
c0001f96:	39 d3                	cmp    ebx,edx
c0001f98:	75 0f                	jne    c0001fa9 <get_ldnumber+0x48>
c0001f9a:	89 f2                	mov    edx,esi
c0001f9c:	89 18                	mov    DWORD PTR [eax],ebx
c0001f9e:	0f be ca             	movsx  ecx,dl
c0001fa1:	83 e9 30             	sub    ecx,0x30
c0001fa4:	eb 03                	jmp    c0001fa9 <get_ldnumber+0x48>
c0001fa6:	83 c9 ff             	or     ecx,0xffffffff
c0001fa9:	89 c8                	mov    eax,ecx
c0001fab:	5b                   	pop    ebx
c0001fac:	5e                   	pop    esi
c0001fad:	c3                   	ret    

c0001fae <crc32>:
c0001fae:	56                   	push   esi
c0001faf:	89 d6                	mov    esi,edx
c0001fb1:	53                   	push   ebx
c0001fb2:	b2 01                	mov    dl,0x1
c0001fb4:	bb 08 00 00 00       	mov    ebx,0x8
c0001fb9:	89 f1                	mov    ecx,esi
c0001fbb:	84 d1                	test   cl,dl
c0001fbd:	0f 95 c1             	setne  cl
c0001fc0:	0f b6 c9             	movzx  ecx,cl
c0001fc3:	31 c1                	xor    ecx,eax
c0001fc5:	89 c8                	mov    eax,ecx
c0001fc7:	d1 e8                	shr    eax,1
c0001fc9:	80 e1 01             	and    cl,0x1
c0001fcc:	74 05                	je     c0001fd3 <crc32+0x25>
c0001fce:	35 20 83 b8 ed       	xor    eax,0xedb88320
c0001fd3:	d1 e2                	shl    edx,1
c0001fd5:	4b                   	dec    ebx
c0001fd6:	75 e1                	jne    c0001fb9 <crc32+0xb>
c0001fd8:	5b                   	pop    ebx
c0001fd9:	5e                   	pop    esi
c0001fda:	c3                   	ret    

c0001fdb <test_gpt_header>:
c0001fdb:	55                   	push   ebp
c0001fdc:	b9 10 00 00 00       	mov    ecx,0x10
c0001fe1:	57                   	push   edi
c0001fe2:	ba a0 22 02 c0       	mov    edx,0xc00222a0
c0001fe7:	56                   	push   esi
c0001fe8:	31 ff                	xor    edi,edi
c0001fea:	53                   	push   ebx
c0001feb:	89 c3                	mov    ebx,eax
c0001fed:	e8 2c fa ff ff       	call   c0001a1e <mem_cmp>
c0001ff2:	85 c0                	test   eax,eax
c0001ff4:	75 55                	jne    c000204b <test_gpt_header+0x70>
c0001ff6:	89 c7                	mov    edi,eax
c0001ff8:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c0001ffd:	83 ce ff             	or     esi,0xffffffff
c0002000:	31 d2                	xor    edx,edx
c0002002:	83 fd 03             	cmp    ebp,0x3
c0002005:	76 05                	jbe    c000200c <test_gpt_header+0x31>
c0002007:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c000200c:	89 f0                	mov    eax,esi
c000200e:	45                   	inc    ebp
c000200f:	e8 9a ff ff ff       	call   c0001fae <crc32>
c0002014:	83 fd 4c             	cmp    ebp,0x4c
c0002017:	89 c6                	mov    esi,eax
c0002019:	75 e5                	jne    c0002000 <test_gpt_header+0x25>
c000201b:	8d 43 10             	lea    eax,[ebx+0x10]
c000201e:	f7 d6                	not    esi
c0002020:	e8 67 f9 ff ff       	call   c000198c <ld_dword>
c0002025:	39 c6                	cmp    esi,eax
c0002027:	75 22                	jne    c000204b <test_gpt_header+0x70>
c0002029:	8d 43 54             	lea    eax,[ebx+0x54]
c000202c:	e8 5b f9 ff ff       	call   c000198c <ld_dword>
c0002031:	83 c0 80             	add    eax,0xffffff80
c0002034:	75 15                	jne    c000204b <test_gpt_header+0x70>
c0002036:	8d 43 50             	lea    eax,[ebx+0x50]
c0002039:	e8 4e f9 ff ff       	call   c000198c <ld_dword>
c000203e:	3d 80 00 00 00       	cmp    eax,0x80
c0002043:	0f 96 c0             	setbe  al
c0002046:	0f b6 c0             	movzx  eax,al
c0002049:	89 c7                	mov    edi,eax
c000204b:	5b                   	pop    ebx
c000204c:	89 f8                	mov    eax,edi
c000204e:	5e                   	pop    esi
c000204f:	5f                   	pop    edi
c0002050:	5d                   	pop    ebp
c0002051:	c3                   	ret    

c0002052 <make_rand>:
c0002052:	56                   	push   esi
c0002053:	85 c0                	test   eax,eax
c0002055:	53                   	push   ebx
c0002056:	75 05                	jne    c000205d <make_rand+0xb>
c0002058:	b8 01 00 00 00       	mov    eax,0x1
c000205d:	01 d1                	add    ecx,edx
c000205f:	bb 08 00 00 00       	mov    ebx,0x8
c0002064:	89 c6                	mov    esi,eax
c0002066:	d1 e8                	shr    eax,1
c0002068:	83 e6 01             	and    esi,0x1
c000206b:	85 f6                	test   esi,esi
c000206d:	74 05                	je     c0002074 <make_rand+0x22>
c000206f:	35 00 00 00 a3       	xor    eax,0xa3000000
c0002074:	4b                   	dec    ebx
c0002075:	75 ed                	jne    c0002064 <make_rand+0x12>
c0002077:	42                   	inc    edx
c0002078:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c000207b:	39 ca                	cmp    edx,ecx
c000207d:	75 e0                	jne    c000205f <make_rand+0xd>
c000207f:	5b                   	pop    ebx
c0002080:	5e                   	pop    esi
c0002081:	c3                   	ret    

c0002082 <validate>:
c0002082:	56                   	push   esi
c0002083:	53                   	push   ebx
c0002084:	89 d6                	mov    esi,edx
c0002086:	51                   	push   ecx
c0002087:	85 c0                	test   eax,eax
c0002089:	75 09                	jne    c0002094 <validate+0x12>
c000208b:	b8 09 00 00 00       	mov    eax,0x9
c0002090:	31 c9                	xor    ecx,ecx
c0002092:	eb 2f                	jmp    c00020c3 <validate+0x41>
c0002094:	89 c3                	mov    ebx,eax
c0002096:	8b 00                	mov    eax,DWORD PTR [eax]
c0002098:	85 c0                	test   eax,eax
c000209a:	74 ef                	je     c000208b <validate+0x9>
c000209c:	80 38 00             	cmp    BYTE PTR [eax],0x0
c000209f:	74 ea                	je     c000208b <validate+0x9>
c00020a1:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c00020a5:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c00020a9:	75 e0                	jne    c000208b <validate+0x9>
c00020ab:	83 ec 0c             	sub    esp,0xc
c00020ae:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00020b2:	50                   	push   eax
c00020b3:	e8 76 f8 ff ff       	call   c000192e <disk_status>
c00020b8:	83 c4 10             	add    esp,0x10
c00020bb:	a8 01                	test   al,0x1
c00020bd:	75 cc                	jne    c000208b <validate+0x9>
c00020bf:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00020c1:	31 c0                	xor    eax,eax
c00020c3:	89 0e                	mov    DWORD PTR [esi],ecx
c00020c5:	5a                   	pop    edx
c00020c6:	5b                   	pop    ebx
c00020c7:	5e                   	pop    esi
c00020c8:	c3                   	ret    

c00020c9 <sync_window>:
c00020c9:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00020cd:	0f 84 85 00 00 00    	je     c0002158 <sync_window+0x8f>
c00020d3:	55                   	push   ebp
c00020d4:	8d 68 54             	lea    ebp,[eax+0x54]
c00020d7:	57                   	push   edi
c00020d8:	56                   	push   esi
c00020d9:	53                   	push   ebx
c00020da:	89 c3                	mov    ebx,eax
c00020dc:	83 ec 28             	sub    esp,0x28
c00020df:	6a 01                	push   0x1
c00020e1:	ff 70 50             	push   DWORD PTR [eax+0x50]
c00020e4:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c00020e7:	55                   	push   ebp
c00020e8:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00020ec:	50                   	push   eax
c00020ed:	e8 58 f8 ff ff       	call   c000194a <disk_write>
c00020f2:	83 c4 20             	add    esp,0x20
c00020f5:	ba 01 00 00 00       	mov    edx,0x1
c00020fa:	85 c0                	test   eax,eax
c00020fc:	75 50                	jne    c000214e <sync_window+0x85>
c00020fe:	31 ff                	xor    edi,edi
c0002100:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c0002103:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0002107:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000210b:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c000210e:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c0002111:	89 c6                	mov    esi,eax
c0002113:	89 d7                	mov    edi,edx
c0002115:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c0002118:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000211c:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c000211f:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0002123:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0002127:	73 23                	jae    c000214c <sync_window+0x83>
c0002129:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c000212d:	75 1d                	jne    c000214c <sync_window+0x83>
c000212f:	83 ec 0c             	sub    esp,0xc
c0002132:	6a 01                	push   0x1
c0002134:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0002138:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c000213c:	52                   	push   edx
c000213d:	50                   	push   eax
c000213e:	55                   	push   ebp
c000213f:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002143:	50                   	push   eax
c0002144:	e8 01 f8 ff ff       	call   c000194a <disk_write>
c0002149:	83 c4 20             	add    esp,0x20
c000214c:	31 d2                	xor    edx,edx
c000214e:	83 c4 1c             	add    esp,0x1c
c0002151:	89 d0                	mov    eax,edx
c0002153:	5b                   	pop    ebx
c0002154:	5e                   	pop    esi
c0002155:	5f                   	pop    edi
c0002156:	5d                   	pop    ebp
c0002157:	c3                   	ret    
c0002158:	31 d2                	xor    edx,edx
c000215a:	89 d0                	mov    eax,edx
c000215c:	c3                   	ret    

c000215d <move_window>:
c000215d:	56                   	push   esi
c000215e:	53                   	push   ebx
c000215f:	89 c3                	mov    ebx,eax
c0002161:	83 ec 14             	sub    esp,0x14
c0002164:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c0002167:	75 07                	jne    c0002170 <move_window+0x13>
c0002169:	31 f6                	xor    esi,esi
c000216b:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c000216e:	74 59                	je     c00021c9 <move_window+0x6c>
c0002170:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002174:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002178:	89 d8                	mov    eax,ebx
c000217a:	e8 4a ff ff ff       	call   c00020c9 <sync_window>
c000217f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002183:	89 c6                	mov    esi,eax
c0002185:	85 c0                	test   eax,eax
c0002187:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000218b:	75 3c                	jne    c00021c9 <move_window+0x6c>
c000218d:	83 ec 0c             	sub    esp,0xc
c0002190:	8d 43 54             	lea    eax,[ebx+0x54]
c0002193:	6a 01                	push   0x1
c0002195:	51                   	push   ecx
c0002196:	52                   	push   edx
c0002197:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000219b:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000219f:	50                   	push   eax
c00021a0:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00021a4:	50                   	push   eax
c00021a5:	e8 8a f7 ff ff       	call   c0001934 <disk_read>
c00021aa:	83 c4 20             	add    esp,0x20
c00021ad:	85 c0                	test   eax,eax
c00021af:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00021b3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00021b7:	74 0a                	je     c00021c3 <move_window+0x66>
c00021b9:	83 ca ff             	or     edx,0xffffffff
c00021bc:	be 01 00 00 00       	mov    esi,0x1
c00021c1:	89 d1                	mov    ecx,edx
c00021c3:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c00021c6:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c00021c9:	89 f0                	mov    eax,esi
c00021cb:	83 c4 14             	add    esp,0x14
c00021ce:	5b                   	pop    ebx
c00021cf:	5e                   	pop    esi
c00021d0:	c3                   	ret    

c00021d1 <check_fs>:
c00021d1:	53                   	push   ebx
c00021d2:	89 c3                	mov    ebx,eax
c00021d4:	83 ec 08             	sub    esp,0x8
c00021d7:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00021db:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c00021e2:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c00021e9:	e8 6f ff ff ff       	call   c000215d <move_window>
c00021ee:	ba 04 00 00 00       	mov    edx,0x4
c00021f3:	85 c0                	test   eax,eax
c00021f5:	0f 85 89 00 00 00    	jne    c0002284 <check_fs+0xb3>
c00021fb:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c0002201:	e8 79 f7 ff ff       	call   c000197f <ld_word>
c0002206:	ba 03 00 00 00       	mov    edx,0x3
c000220b:	66 3d 55 aa          	cmp    ax,0xaa55
c000220f:	75 73                	jne    c0002284 <check_fs+0xb3>
c0002211:	ba c0 23 02 c0       	mov    edx,0xc00223c0
c0002216:	8d 43 54             	lea    eax,[ebx+0x54]
c0002219:	b9 0b 00 00 00       	mov    ecx,0xb
c000221e:	e8 fb f7 ff ff       	call   c0001a1e <mem_cmp>
c0002223:	ba 01 00 00 00       	mov    edx,0x1
c0002228:	85 c0                	test   eax,eax
c000222a:	74 58                	je     c0002284 <check_fs+0xb3>
c000222c:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c000222f:	8d 50 18             	lea    edx,[eax+0x18]
c0002232:	80 fa 01             	cmp    dl,0x1
c0002235:	76 09                	jbe    c0002240 <check_fs+0x6f>
c0002237:	ba 02 00 00 00       	mov    edx,0x2
c000223c:	3c eb                	cmp    al,0xeb
c000223e:	75 44                	jne    c0002284 <check_fs+0xb3>
c0002240:	ba 18 4c 02 c0       	mov    edx,0xc0024c18
c0002245:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c000224b:	b9 03 00 00 00       	mov    ecx,0x3
c0002250:	e8 c9 f7 ff ff       	call   c0001a1e <mem_cmp>
c0002255:	31 d2                	xor    edx,edx
c0002257:	85 c0                	test   eax,eax
c0002259:	74 29                	je     c0002284 <check_fs+0xb3>
c000225b:	ba cc 23 02 c0       	mov    edx,0xc00223cc
c0002260:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c0002266:	b9 05 00 00 00       	mov    ecx,0x5
c000226b:	e8 ae f7 ff ff       	call   c0001a1e <mem_cmp>
c0002270:	31 d2                	xor    edx,edx
c0002272:	85 c0                	test   eax,eax
c0002274:	74 0e                	je     c0002284 <check_fs+0xb3>
c0002276:	31 d2                	xor    edx,edx
c0002278:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c000227f:	0f 95 c2             	setne  dl
c0002282:	01 d2                	add    edx,edx
c0002284:	89 d0                	mov    eax,edx
c0002286:	83 c4 08             	add    esp,0x8
c0002289:	5b                   	pop    ebx
c000228a:	c3                   	ret    

c000228b <find_volume>:
c000228b:	55                   	push   ebp
c000228c:	31 c9                	xor    ecx,ecx
c000228e:	57                   	push   edi
c000228f:	56                   	push   esi
c0002290:	89 d6                	mov    esi,edx
c0002292:	53                   	push   ebx
c0002293:	31 d2                	xor    edx,edx
c0002295:	83 ec 3c             	sub    esp,0x3c
c0002298:	89 c3                	mov    ebx,eax
c000229a:	e8 32 ff ff ff       	call   c00021d1 <check_fs>
c000229f:	83 f8 02             	cmp    eax,0x2
c00022a2:	74 0e                	je     c00022b2 <find_volume+0x27>
c00022a4:	0f 87 5d 01 00 00    	ja     c0002407 <find_volume+0x17c>
c00022aa:	85 f6                	test   esi,esi
c00022ac:	0f 84 55 01 00 00    	je     c0002407 <find_volume+0x17c>
c00022b2:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c00022b9:	0f 85 dd 00 00 00    	jne    c000239c <find_volume+0x111>
c00022bf:	31 c9                	xor    ecx,ecx
c00022c1:	ba 01 00 00 00       	mov    edx,0x1
c00022c6:	89 d8                	mov    eax,ebx
c00022c8:	e8 90 fe ff ff       	call   c000215d <move_window>
c00022cd:	85 c0                	test   eax,eax
c00022cf:	74 0a                	je     c00022db <find_volume+0x50>
c00022d1:	b8 04 00 00 00       	mov    eax,0x4
c00022d6:	e9 2c 01 00 00       	jmp    c0002407 <find_volume+0x17c>
c00022db:	8d 6b 54             	lea    ebp,[ebx+0x54]
c00022de:	89 e8                	mov    eax,ebp
c00022e0:	e8 f6 fc ff ff       	call   c0001fdb <test_gpt_header>
c00022e5:	85 c0                	test   eax,eax
c00022e7:	75 0a                	jne    c00022f3 <find_volume+0x68>
c00022e9:	b8 03 00 00 00       	mov    eax,0x3
c00022ee:	e9 14 01 00 00       	jmp    c0002407 <find_volume+0x17c>
c00022f3:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00022f9:	e8 8e f6 ff ff       	call   c000198c <ld_dword>
c00022fe:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002302:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c0002308:	e8 97 f6 ff ff       	call   c00019a4 <ld_qword>
c000230d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0002315:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002319:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000231d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002325:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0002329:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c000232d:	74 ba                	je     c00022e9 <find_volume+0x5e>
c000232f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0002333:	31 c9                	xor    ecx,ecx
c0002335:	c1 e7 07             	shl    edi,0x7
c0002338:	89 d8                	mov    eax,ebx
c000233a:	89 fa                	mov    edx,edi
c000233c:	c1 ea 09             	shr    edx,0x9
c000233f:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0002343:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c0002347:	e8 11 fe ff ff       	call   c000215d <move_window>
c000234c:	85 c0                	test   eax,eax
c000234e:	75 81                	jne    c00022d1 <find_volume+0x46>
c0002350:	81 e7 80 01 00 00    	and    edi,0x180
c0002356:	b9 10 00 00 00       	mov    ecx,0x10
c000235b:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c000235f:	ba b0 23 02 c0       	mov    edx,0xc00223b0
c0002364:	e8 b5 f6 ff ff       	call   c0001a1e <mem_cmp>
c0002369:	85 c0                	test   eax,eax
c000236b:	75 29                	jne    c0002396 <find_volume+0x10b>
c000236d:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0002371:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c0002375:	e8 2a f6 ff ff       	call   c00019a4 <ld_qword>
c000237a:	89 d1                	mov    ecx,edx
c000237c:	89 c2                	mov    edx,eax
c000237e:	89 d8                	mov    eax,ebx
c0002380:	e8 4c fe ff ff       	call   c00021d1 <check_fs>
c0002385:	85 f6                	test   esi,esi
c0002387:	75 07                	jne    c0002390 <find_volume+0x105>
c0002389:	83 f8 01             	cmp    eax,0x1
c000238c:	77 08                	ja     c0002396 <find_volume+0x10b>
c000238e:	eb 77                	jmp    c0002407 <find_volume+0x17c>
c0002390:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002394:	74 71                	je     c0002407 <find_volume+0x17c>
c0002396:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000239a:	eb 89                	jmp    c0002325 <find_volume+0x9a>
c000239c:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c00023a0:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c00023a6:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c00023ac:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00023b0:	89 cd                	mov    ebp,ecx
c00023b2:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00023b6:	89 f8                	mov    eax,edi
c00023b8:	83 c7 10             	add    edi,0x10
c00023bb:	e8 cc f5 ff ff       	call   c000198c <ld_dword>
c00023c0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00023c4:	89 01                	mov    DWORD PTR [ecx],eax
c00023c6:	83 c1 04             	add    ecx,0x4
c00023c9:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c00023cd:	75 e3                	jne    c00023b2 <find_volume+0x127>
c00023cf:	31 ff                	xor    edi,edi
c00023d1:	85 f6                	test   esi,esi
c00023d3:	74 03                	je     c00023d8 <find_volume+0x14d>
c00023d5:	8d 7e ff             	lea    edi,[esi-0x1]
c00023d8:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c00023dc:	85 d2                	test   edx,edx
c00023de:	74 14                	je     c00023f4 <find_volume+0x169>
c00023e0:	31 c9                	xor    ecx,ecx
c00023e2:	89 d8                	mov    eax,ebx
c00023e4:	e8 e8 fd ff ff       	call   c00021d1 <check_fs>
c00023e9:	83 f8 01             	cmp    eax,0x1
c00023ec:	76 19                	jbe    c0002407 <find_volume+0x17c>
c00023ee:	85 f6                	test   esi,esi
c00023f0:	74 0f                	je     c0002401 <find_volume+0x176>
c00023f2:	eb 13                	jmp    c0002407 <find_volume+0x17c>
c00023f4:	85 f6                	test   esi,esi
c00023f6:	0f 85 ed fe ff ff    	jne    c00022e9 <find_volume+0x5e>
c00023fc:	b8 03 00 00 00       	mov    eax,0x3
c0002401:	47                   	inc    edi
c0002402:	83 ff 03             	cmp    edi,0x3
c0002405:	76 d1                	jbe    c00023d8 <find_volume+0x14d>
c0002407:	83 c4 3c             	add    esp,0x3c
c000240a:	5b                   	pop    ebx
c000240b:	5e                   	pop    esi
c000240c:	5f                   	pop    edi
c000240d:	5d                   	pop    ebp
c000240e:	c3                   	ret    

c000240f <mount_volume>:
c000240f:	55                   	push   ebp
c0002410:	57                   	push   edi
c0002411:	89 cf                	mov    edi,ecx
c0002413:	56                   	push   esi
c0002414:	53                   	push   ebx
c0002415:	bb 0b 00 00 00       	mov    ebx,0xb
c000241a:	83 ec 3c             	sub    esp,0x3c
c000241d:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0002423:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002427:	e8 35 fb ff ff       	call   c0001f61 <get_ldnumber>
c000242c:	85 c0                	test   eax,eax
c000242e:	0f 88 3a 05 00 00    	js     c000296e <mount_volume+0x55f>
c0002434:	8b 2c 85 c0 62 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd9d40]
c000243b:	89 c6                	mov    esi,eax
c000243d:	bb 0c 00 00 00       	mov    ebx,0xc
c0002442:	85 ed                	test   ebp,ebp
c0002444:	0f 84 24 05 00 00    	je     c000296e <mount_volume+0x55f>
c000244a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000244e:	83 e7 fe             	and    edi,0xfffffffe
c0002451:	89 2a                	mov    DWORD PTR [edx],ebp
c0002453:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c0002457:	74 32                	je     c000248b <mount_volume+0x7c>
c0002459:	83 ec 0c             	sub    esp,0xc
c000245c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0002460:	50                   	push   eax
c0002461:	e8 c8 f4 ff ff       	call   c000192e <disk_status>
c0002466:	83 c4 10             	add    esp,0x10
c0002469:	a8 01                	test   al,0x1
c000246b:	75 1e                	jne    c000248b <mount_volume+0x7c>
c000246d:	31 db                	xor    ebx,ebx
c000246f:	89 f9                	mov    ecx,edi
c0002471:	84 c9                	test   cl,cl
c0002473:	0f 84 f5 04 00 00    	je     c000296e <mount_volume+0x55f>
c0002479:	a8 04                	test   al,0x4
c000247b:	0f 84 ed 04 00 00    	je     c000296e <mount_volume+0x55f>
c0002481:	bb 0a 00 00 00       	mov    ebx,0xa
c0002486:	e9 e3 04 00 00       	jmp    c000296e <mount_volume+0x55f>
c000248b:	83 ec 0c             	sub    esp,0xc
c000248e:	89 f0                	mov    eax,esi
c0002490:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0002494:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c0002497:	0f b6 f0             	movzx  esi,al
c000249a:	bb 03 00 00 00       	mov    ebx,0x3
c000249f:	56                   	push   esi
c00024a0:	e8 8c f4 ff ff       	call   c0001931 <disk_initialize>
c00024a5:	83 c4 10             	add    esp,0x10
c00024a8:	a8 01                	test   al,0x1
c00024aa:	0f 85 be 04 00 00    	jne    c000296e <mount_volume+0x55f>
c00024b0:	89 f9                	mov    ecx,edi
c00024b2:	84 c9                	test   cl,cl
c00024b4:	74 04                	je     c00024ba <mount_volume+0xab>
c00024b6:	a8 04                	test   al,0x4
c00024b8:	75 c7                	jne    c0002481 <mount_volume+0x72>
c00024ba:	31 d2                	xor    edx,edx
c00024bc:	89 e8                	mov    eax,ebp
c00024be:	e8 c8 fd ff ff       	call   c000228b <find_volume>
c00024c3:	83 f8 04             	cmp    eax,0x4
c00024c6:	75 0a                	jne    c00024d2 <mount_volume+0xc3>
c00024c8:	bb 01 00 00 00       	mov    ebx,0x1
c00024cd:	e9 9c 04 00 00       	jmp    c000296e <mount_volume+0x55f>
c00024d2:	83 f8 01             	cmp    eax,0x1
c00024d5:	76 0a                	jbe    c00024e1 <mount_volume+0xd2>
c00024d7:	bb 0d 00 00 00       	mov    ebx,0xd
c00024dc:	e9 8d 04 00 00       	jmp    c000296e <mount_volume+0x55f>
c00024e1:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c00024e4:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c00024e7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00024eb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00024ef:	75 17                	jne    c0002508 <mount_volume+0xf9>
c00024f1:	b8 0b 00 00 00       	mov    eax,0xb
c00024f6:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00024fb:	75 da                	jne    c00024d7 <mount_volume+0xc8>
c00024fd:	40                   	inc    eax
c00024fe:	83 f8 40             	cmp    eax,0x40
c0002501:	75 f3                	jne    c00024f6 <mount_volume+0xe7>
c0002503:	e9 5a 02 00 00       	jmp    c0002762 <mount_volume+0x353>
c0002508:	8d 45 5f             	lea    eax,[ebp+0x5f]
c000250b:	e8 6f f4 ff ff       	call   c000197f <ld_word>
c0002510:	66 3d 00 02          	cmp    ax,0x200
c0002514:	75 c1                	jne    c00024d7 <mount_volume+0xc8>
c0002516:	8d 45 6a             	lea    eax,[ebp+0x6a]
c0002519:	e8 61 f4 ff ff       	call   c000197f <ld_word>
c000251e:	0f b7 c0             	movzx  eax,ax
c0002521:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002525:	85 c0                	test   eax,eax
c0002527:	75 0c                	jne    c0002535 <mount_volume+0x126>
c0002529:	8d 45 78             	lea    eax,[ebp+0x78]
c000252c:	e8 5b f4 ff ff       	call   c000198c <ld_dword>
c0002531:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002535:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002539:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c000253c:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c000253f:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0002543:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002546:	48                   	dec    eax
c0002547:	3c 01                	cmp    al,0x1
c0002549:	77 8c                	ja     c00024d7 <mount_volume+0xc8>
c000254b:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c000254f:	89 c3                	mov    ebx,eax
c0002551:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c0002555:	66 85 c0             	test   ax,ax
c0002558:	0f 84 79 ff ff ff    	je     c00024d7 <mount_volume+0xc8>
c000255e:	8d 40 ff             	lea    eax,[eax-0x1]
c0002561:	85 d8                	test   eax,ebx
c0002563:	0f 85 6e ff ff ff    	jne    c00024d7 <mount_volume+0xc8>
c0002569:	8d 45 65             	lea    eax,[ebp+0x65]
c000256c:	e8 0e f4 ff ff       	call   c000197f <ld_word>
c0002571:	89 c7                	mov    edi,eax
c0002573:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c0002577:	a8 0f                	test   al,0xf
c0002579:	0f 85 58 ff ff ff    	jne    c00024d7 <mount_volume+0xc8>
c000257f:	8d 45 67             	lea    eax,[ebp+0x67]
c0002582:	e8 f8 f3 ff ff       	call   c000197f <ld_word>
c0002587:	0f b7 f0             	movzx  esi,ax
c000258a:	85 f6                	test   esi,esi
c000258c:	75 0a                	jne    c0002598 <mount_volume+0x189>
c000258e:	8d 45 74             	lea    eax,[ebp+0x74]
c0002591:	e8 f6 f3 ff ff       	call   c000198c <ld_dword>
c0002596:	89 c6                	mov    esi,eax
c0002598:	8d 45 62             	lea    eax,[ebp+0x62]
c000259b:	e8 df f3 ff ff       	call   c000197f <ld_word>
c00025a0:	66 85 c0             	test   ax,ax
c00025a3:	0f 84 2e ff ff ff    	je     c00024d7 <mount_volume+0xc8>
c00025a9:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c00025ae:	0f b7 c8             	movzx  ecx,ax
c00025b1:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c00025b6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00025ba:	89 fa                	mov    edx,edi
c00025bc:	66 c1 ea 04          	shr    dx,0x4
c00025c0:	0f b7 d2             	movzx  edx,dx
c00025c3:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c00025c7:	8d 04 0a             	lea    eax,[edx+ecx*1]
c00025ca:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00025ce:	39 c6                	cmp    esi,eax
c00025d0:	0f 82 01 ff ff ff    	jb     c00024d7 <mount_volume+0xc8>
c00025d6:	29 c6                	sub    esi,eax
c00025d8:	31 d2                	xor    edx,edx
c00025da:	89 f0                	mov    eax,esi
c00025dc:	f7 f3                	div    ebx
c00025de:	39 de                	cmp    esi,ebx
c00025e0:	0f 82 f1 fe ff ff    	jb     c00024d7 <mount_volume+0xc8>
c00025e6:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c00025eb:	0f 87 e6 fe ff ff    	ja     c00024d7 <mount_volume+0xc8>
c00025f1:	3d f5 ff 00 00       	cmp    eax,0xfff5
c00025f6:	0f 86 63 03 00 00    	jbe    c000295f <mount_volume+0x550>
c00025fc:	bb 03 00 00 00       	mov    ebx,0x3
c0002601:	8d 70 02             	lea    esi,[eax+0x2]
c0002604:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002608:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000260c:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c000260f:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c0002612:	31 d2                	xor    edx,edx
c0002614:	89 c8                	mov    eax,ecx
c0002616:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c0002619:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000261d:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002621:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0002625:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0002629:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c000262c:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c000262f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002633:	31 d2                	xor    edx,edx
c0002635:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002639:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000263d:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002640:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002643:	83 fb 03             	cmp    ebx,0x3
c0002646:	75 2b                	jne    c0002673 <mount_volume+0x264>
c0002648:	8d 45 7e             	lea    eax,[ebp+0x7e]
c000264b:	e8 2f f3 ff ff       	call   c000197f <ld_word>
c0002650:	66 09 c7             	or     di,ax
c0002653:	0f 85 7e fe ff ff    	jne    c00024d7 <mount_volume+0xc8>
c0002659:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c000265f:	c1 e6 02             	shl    esi,0x2
c0002662:	e8 25 f3 ff ff       	call   c000198c <ld_dword>
c0002667:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c000266e:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002671:	eb 30                	jmp    c00026a3 <mount_volume+0x294>
c0002673:	66 85 ff             	test   di,di
c0002676:	0f 84 5b fe ff ff    	je     c00024d7 <mount_volume+0xc8>
c000267c:	31 d2                	xor    edx,edx
c000267e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002682:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0002686:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000268a:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000268d:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c0002690:	83 fb 02             	cmp    ebx,0x2
c0002693:	75 04                	jne    c0002699 <mount_volume+0x28a>
c0002695:	01 f6                	add    esi,esi
c0002697:	eb 0a                	jmp    c00026a3 <mount_volume+0x294>
c0002699:	8d 04 76             	lea    eax,[esi+esi*2]
c000269c:	83 e6 01             	and    esi,0x1
c000269f:	d1 e8                	shr    eax,1
c00026a1:	01 c6                	add    esi,eax
c00026a3:	81 c6 ff 01 00 00    	add    esi,0x1ff
c00026a9:	c1 ee 09             	shr    esi,0x9
c00026ac:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00026b0:	0f 87 21 fe ff ff    	ja     c00024d7 <mount_volume+0xc8>
c00026b6:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c00026bd:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c00026c4:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c00026c8:	83 fb 03             	cmp    ebx,0x3
c00026cb:	75 7a                	jne    c0002747 <mount_volume+0x338>
c00026cd:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c00026d3:	e8 a7 f2 ff ff       	call   c000197f <ld_word>
c00026d8:	66 48                	dec    ax
c00026da:	75 6b                	jne    c0002747 <mount_volume+0x338>
c00026dc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00026e0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00026e4:	83 c2 01             	add    edx,0x1
c00026e7:	89 e8                	mov    eax,ebp
c00026e9:	83 d1 00             	adc    ecx,0x0
c00026ec:	e8 6c fa ff ff       	call   c000215d <move_window>
c00026f1:	85 c0                	test   eax,eax
c00026f3:	75 52                	jne    c0002747 <mount_volume+0x338>
c00026f5:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00026f9:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00026ff:	e8 7b f2 ff ff       	call   c000197f <ld_word>
c0002704:	66 3d 55 aa          	cmp    ax,0xaa55
c0002708:	75 3d                	jne    c0002747 <mount_volume+0x338>
c000270a:	8d 45 54             	lea    eax,[ebp+0x54]
c000270d:	e8 7a f2 ff ff       	call   c000198c <ld_dword>
c0002712:	3d 52 52 61 41       	cmp    eax,0x41615252
c0002717:	75 2e                	jne    c0002747 <mount_volume+0x338>
c0002719:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c000271f:	e8 68 f2 ff ff       	call   c000198c <ld_dword>
c0002724:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002729:	75 1c                	jne    c0002747 <mount_volume+0x338>
c000272b:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c0002731:	e8 56 f2 ff ff       	call   c000198c <ld_dword>
c0002736:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c0002739:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c000273f:	e8 48 f2 ff ff       	call   c000198c <ld_dword>
c0002744:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c0002747:	66 a1 a0 62 02 c0    	mov    ax,ds:0xc00262a0
c000274d:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c0002750:	40                   	inc    eax
c0002751:	31 db                	xor    ebx,ebx
c0002753:	66 a3 a0 62 02 c0    	mov    ds:0xc00262a0,ax
c0002759:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c000275d:	e9 0c 02 00 00       	jmp    c000296e <mount_volume+0x55f>
c0002762:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002768:	e8 12 f2 ff ff       	call   c000197f <ld_word>
c000276d:	66 3d 00 01          	cmp    ax,0x100
c0002771:	0f 85 60 fd ff ff    	jne    c00024d7 <mount_volume+0xc8>
c0002777:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c000277e:	0f 85 53 fd ff ff    	jne    c00024d7 <mount_volume+0xc8>
c0002784:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c000278a:	e8 15 f2 ff ff       	call   c00019a4 <ld_qword>
c000278f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002793:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002797:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c000279d:	e8 ea f1 ff ff       	call   c000198c <ld_dword>
c00027a2:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c00027a5:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c00027ab:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c00027ae:	fe c8                	dec    al
c00027b0:	0f 85 21 fd ff ff    	jne    c00024d7 <mount_volume+0xc8>
c00027b6:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c00027bd:	bb 01 00 00 00       	mov    ebx,0x1
c00027c2:	d3 e3                	shl    ebx,cl
c00027c4:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c00027c8:	66 85 db             	test   bx,bx
c00027cb:	0f 84 06 fd ff ff    	je     c00024d7 <mount_volume+0xc8>
c00027d1:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c00027d7:	e8 b0 f1 ff ff       	call   c000198c <ld_dword>
c00027dc:	89 c6                	mov    esi,eax
c00027de:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c00027e3:	0f 87 ee fc ff ff    	ja     c00024d7 <mount_volume+0xc8>
c00027e9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00027ed:	8d 40 02             	lea    eax,[eax+0x2]
c00027f0:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00027f3:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c00027f6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00027fa:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00027fd:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c0002803:	e8 84 f1 ff ff       	call   c000198c <ld_dword>
c0002808:	31 d2                	xor    edx,edx
c000280a:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000280e:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002812:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002816:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000281a:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c000281d:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002820:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c0002826:	e8 61 f1 ff ff       	call   c000198c <ld_dword>
c000282b:	31 d2                	xor    edx,edx
c000282d:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002831:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002835:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002839:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c000283c:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c000283f:	0f b7 c3             	movzx  eax,bx
c0002842:	31 d2                	xor    edx,edx
c0002844:	0f af f0             	imul   esi,eax
c0002847:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000284b:	89 f0                	mov    eax,esi
c000284d:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002851:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002855:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002859:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c000285d:	39 c1                	cmp    ecx,eax
c000285f:	89 df                	mov    edi,ebx
c0002861:	19 d7                	sbb    edi,edx
c0002863:	0f 82 6e fc ff ff    	jb     c00024d7 <mount_volume+0xc8>
c0002869:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c000286f:	31 db                	xor    ebx,ebx
c0002871:	e8 16 f1 ff ff       	call   c000198c <ld_dword>
c0002876:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c000287d:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002880:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002888:	85 db                	test   ebx,ebx
c000288a:	75 39                	jne    c00028c5 <mount_volume+0x4b6>
c000288c:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002890:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002894:	0f 86 3d fc ff ff    	jbe    c00024d7 <mount_volume+0xc8>
c000289a:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c000289d:	31 ff                	xor    edi,edi
c000289f:	89 e8                	mov    eax,ebp
c00028a1:	e8 72 f3 ff ff       	call   c0001c18 <clst2sect>
c00028a6:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00028aa:	01 c6                	add    esi,eax
c00028ac:	89 e8                	mov    eax,ebp
c00028ae:	11 d7                	adc    edi,edx
c00028b0:	89 f2                	mov    edx,esi
c00028b2:	89 f9                	mov    ecx,edi
c00028b4:	e8 a4 f8 ff ff       	call   c000215d <move_window>
c00028b9:	85 c0                	test   eax,eax
c00028bb:	0f 85 07 fc ff ff    	jne    c00024c8 <mount_volume+0xb9>
c00028c1:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c00028c5:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c00028ca:	74 0b                	je     c00028d7 <mount_volume+0x4c8>
c00028cc:	83 c3 20             	add    ebx,0x20
c00028cf:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00028d5:	eb b1                	jmp    c0002888 <mount_volume+0x479>
c00028d7:	8d 75 54             	lea    esi,[ebp+0x54]
c00028da:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c00028de:	e8 a9 f0 ff ff       	call   c000198c <ld_dword>
c00028e3:	89 c3                	mov    ebx,eax
c00028e5:	83 f8 01             	cmp    eax,0x1
c00028e8:	0f 86 e9 fb ff ff    	jbe    c00024d7 <mount_volume+0xc8>
c00028ee:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00028f1:	0f 86 e0 fb ff ff    	jbe    c00024d7 <mount_volume+0xc8>
c00028f7:	8d 53 fe             	lea    edx,[ebx-0x2]
c00028fa:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c00028fe:	0f af c2             	imul   eax,edx
c0002901:	31 d2                	xor    edx,edx
c0002903:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002906:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c0002909:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c000290c:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c000290f:	31 c9                	xor    ecx,ecx
c0002911:	89 da                	mov    edx,ebx
c0002913:	89 e8                	mov    eax,ebp
c0002915:	c1 ea 07             	shr    edx,0x7
c0002918:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c000291b:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c000291e:	e8 3a f8 ff ff       	call   c000215d <move_window>
c0002923:	85 c0                	test   eax,eax
c0002925:	0f 85 9d fb ff ff    	jne    c00024c8 <mount_volume+0xb9>
c000292b:	89 d8                	mov    eax,ebx
c000292d:	83 e0 7f             	and    eax,0x7f
c0002930:	8d 04 86             	lea    eax,[esi+eax*4]
c0002933:	e8 54 f0 ff ff       	call   c000198c <ld_dword>
c0002938:	83 f8 ff             	cmp    eax,0xffffffff
c000293b:	74 0a                	je     c0002947 <mount_volume+0x538>
c000293d:	43                   	inc    ebx
c000293e:	39 d8                	cmp    eax,ebx
c0002940:	74 cd                	je     c000290f <mount_volume+0x500>
c0002942:	e9 90 fb ff ff       	jmp    c00024d7 <mount_volume+0xc8>
c0002947:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c000294e:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002955:	bb 04 00 00 00       	mov    ebx,0x4
c000295a:	e9 e8 fd ff ff       	jmp    c0002747 <mount_volume+0x338>
c000295f:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002964:	19 db                	sbb    ebx,ebx
c0002966:	83 c3 02             	add    ebx,0x2
c0002969:	e9 93 fc ff ff       	jmp    c0002601 <mount_volume+0x1f2>
c000296e:	83 c4 3c             	add    esp,0x3c
c0002971:	89 d8                	mov    eax,ebx
c0002973:	5b                   	pop    ebx
c0002974:	5e                   	pop    esi
c0002975:	5f                   	pop    edi
c0002976:	5d                   	pop    ebp
c0002977:	c3                   	ret    

c0002978 <find_bitmap>:
c0002978:	55                   	push   ebp
c0002979:	57                   	push   edi
c000297a:	89 c7                	mov    edi,eax
c000297c:	56                   	push   esi
c000297d:	8d 72 fe             	lea    esi,[edx-0x2]
c0002980:	53                   	push   ebx
c0002981:	83 ec 1c             	sub    esp,0x1c
c0002984:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002987:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000298b:	83 e8 02             	sub    eax,0x2
c000298e:	39 f0                	cmp    eax,esi
c0002990:	77 02                	ja     c0002994 <find_bitmap+0x1c>
c0002992:	31 f6                	xor    esi,esi
c0002994:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002998:	89 f3                	mov    ebx,esi
c000299a:	31 ed                	xor    ebp,ebp
c000299c:	31 c9                	xor    ecx,ecx
c000299e:	89 da                	mov    edx,ebx
c00029a0:	89 f8                	mov    eax,edi
c00029a2:	c1 ea 0c             	shr    edx,0xc
c00029a5:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c00029a8:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c00029ab:	e8 ad f7 ff ff       	call   c000215d <move_window>
c00029b0:	85 c0                	test   eax,eax
c00029b2:	75 68                	jne    c0002a1c <find_bitmap+0xa4>
c00029b4:	89 da                	mov    edx,ebx
c00029b6:	89 d9                	mov    ecx,ebx
c00029b8:	c1 ea 03             	shr    edx,0x3
c00029bb:	83 e1 07             	and    ecx,0x7
c00029be:	b8 01 00 00 00       	mov    eax,0x1
c00029c3:	81 e2 ff 01 00 00    	and    edx,0x1ff
c00029c9:	d3 e0                	shl    eax,cl
c00029cb:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c00029ce:	83 e9 02             	sub    ecx,0x2
c00029d1:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00029d5:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c00029d9:	43                   	inc    ebx
c00029da:	21 c1                	and    ecx,eax
c00029dc:	d1 e0                	shl    eax,1
c00029de:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c00029e2:	77 09                	ja     c00029ed <find_bitmap+0x75>
c00029e4:	31 db                	xor    ebx,ebx
c00029e6:	ba 00 02 00 00       	mov    edx,0x200
c00029eb:	31 c0                	xor    eax,eax
c00029ed:	84 c9                	test   cl,cl
c00029ef:	75 10                	jne    c0002a01 <find_bitmap+0x89>
c00029f1:	45                   	inc    ebp
c00029f2:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c00029f6:	75 0f                	jne    c0002a07 <find_bitmap+0x8f>
c00029f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00029fc:	83 c0 02             	add    eax,0x2
c00029ff:	eb 22                	jmp    c0002a23 <find_bitmap+0xab>
c0002a01:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002a05:	31 ed                	xor    ebp,ebp
c0002a07:	39 de                	cmp    esi,ebx
c0002a09:	74 16                	je     c0002a21 <find_bitmap+0xa9>
c0002a0b:	84 c0                	test   al,al
c0002a0d:	75 c6                	jne    c00029d5 <find_bitmap+0x5d>
c0002a0f:	42                   	inc    edx
c0002a10:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002a16:	77 84                	ja     c000299c <find_bitmap+0x24>
c0002a18:	b0 01                	mov    al,0x1
c0002a1a:	eb b9                	jmp    c00029d5 <find_bitmap+0x5d>
c0002a1c:	83 c8 ff             	or     eax,0xffffffff
c0002a1f:	eb 02                	jmp    c0002a23 <find_bitmap+0xab>
c0002a21:	31 c0                	xor    eax,eax
c0002a23:	83 c4 1c             	add    esp,0x1c
c0002a26:	5b                   	pop    ebx
c0002a27:	5e                   	pop    esi
c0002a28:	5f                   	pop    edi
c0002a29:	5d                   	pop    ebp
c0002a2a:	c3                   	ret    

c0002a2b <change_bitmap>:
c0002a2b:	55                   	push   ebp
c0002a2c:	89 cd                	mov    ebp,ecx
c0002a2e:	57                   	push   edi
c0002a2f:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002a32:	56                   	push   esi
c0002a33:	89 c7                	mov    edi,eax
c0002a35:	53                   	push   ebx
c0002a36:	89 c8                	mov    eax,ecx
c0002a38:	83 ec 1c             	sub    esp,0x1c
c0002a3b:	31 d2                	xor    edx,edx
c0002a3d:	89 ce                	mov    esi,ecx
c0002a3f:	c1 e8 0c             	shr    eax,0xc
c0002a42:	bb 01 00 00 00       	mov    ebx,0x1
c0002a47:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002a4a:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002a4d:	c1 ee 03             	shr    esi,0x3
c0002a50:	83 e1 07             	and    ecx,0x7
c0002a53:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002a59:	d3 e3                	shl    ebx,cl
c0002a5b:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002a5f:	89 c1                	mov    ecx,eax
c0002a61:	89 d3                	mov    ebx,edx
c0002a63:	83 c1 01             	add    ecx,0x1
c0002a66:	83 d3 00             	adc    ebx,0x0
c0002a69:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002a6d:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002a71:	89 d1                	mov    ecx,edx
c0002a73:	89 c2                	mov    edx,eax
c0002a75:	89 f8                	mov    eax,edi
c0002a77:	e8 e1 f6 ff ff       	call   c000215d <move_window>
c0002a7c:	89 c1                	mov    ecx,eax
c0002a7e:	85 c0                	test   eax,eax
c0002a80:	75 48                	jne    c0002aca <change_bitmap+0x9f>
c0002a82:	31 d2                	xor    edx,edx
c0002a84:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002a88:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002a8c:	0f 95 c2             	setne  dl
c0002a8f:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002a93:	74 3c                	je     c0002ad1 <change_bitmap+0xa6>
c0002a95:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002a99:	4d                   	dec    ebp
c0002a9a:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002a9e:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002aa2:	74 32                	je     c0002ad6 <change_bitmap+0xab>
c0002aa4:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002aa8:	75 d8                	jne    c0002a82 <change_bitmap+0x57>
c0002aaa:	8d 46 01             	lea    eax,[esi+0x1]
c0002aad:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002ab2:	89 c3                	mov    ebx,eax
c0002ab4:	31 f6                	xor    esi,esi
c0002ab6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002aba:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002abe:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002ac4:	74 99                	je     c0002a5f <change_bitmap+0x34>
c0002ac6:	89 de                	mov    esi,ebx
c0002ac8:	eb b8                	jmp    c0002a82 <change_bitmap+0x57>
c0002aca:	b9 01 00 00 00       	mov    ecx,0x1
c0002acf:	eb 05                	jmp    c0002ad6 <change_bitmap+0xab>
c0002ad1:	b9 02 00 00 00       	mov    ecx,0x2
c0002ad6:	83 c4 1c             	add    esp,0x1c
c0002ad9:	89 c8                	mov    eax,ecx
c0002adb:	5b                   	pop    ebx
c0002adc:	5e                   	pop    esi
c0002add:	5f                   	pop    edi
c0002ade:	5d                   	pop    ebp
c0002adf:	c3                   	ret    

c0002ae0 <put_fat>:
c0002ae0:	83 fa 01             	cmp    edx,0x1
c0002ae3:	0f 86 7b 01 00 00    	jbe    c0002c64 <put_fat+0x184>
c0002ae9:	55                   	push   ebp
c0002aea:	57                   	push   edi
c0002aeb:	89 cf                	mov    edi,ecx
c0002aed:	56                   	push   esi
c0002aee:	b9 02 00 00 00       	mov    ecx,0x2
c0002af3:	53                   	push   ebx
c0002af4:	89 c6                	mov    esi,eax
c0002af6:	83 ec 1c             	sub    esp,0x1c
c0002af9:	89 d3                	mov    ebx,edx
c0002afb:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002afe:	0f 86 68 01 00 00    	jbe    c0002c6c <put_fat+0x18c>
c0002b04:	8a 00                	mov    al,BYTE PTR [eax]
c0002b06:	3c 02                	cmp    al,0x2
c0002b08:	0f 84 c7 00 00 00    	je     c0002bd5 <put_fat+0xf5>
c0002b0e:	77 09                	ja     c0002b19 <put_fat+0x39>
c0002b10:	fe c8                	dec    al
c0002b12:	74 17                	je     c0002b2b <put_fat+0x4b>
c0002b14:	e9 53 01 00 00       	jmp    c0002c6c <put_fat+0x18c>
c0002b19:	b9 02 00 00 00       	mov    ecx,0x2
c0002b1e:	3c 04                	cmp    al,0x4
c0002b20:	0f 86 e1 00 00 00    	jbe    c0002c07 <put_fat+0x127>
c0002b26:	e9 41 01 00 00       	jmp    c0002c6c <put_fat+0x18c>
c0002b2b:	89 d5                	mov    ebp,edx
c0002b2d:	31 c9                	xor    ecx,ecx
c0002b2f:	d1 ed                	shr    ebp,1
c0002b31:	89 f0                	mov    eax,esi
c0002b33:	01 d5                	add    ebp,edx
c0002b35:	89 ea                	mov    edx,ebp
c0002b37:	c1 ea 09             	shr    edx,0x9
c0002b3a:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002b3d:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002b40:	e8 18 f6 ff ff       	call   c000215d <move_window>
c0002b45:	89 c1                	mov    ecx,eax
c0002b47:	85 c0                	test   eax,eax
c0002b49:	0f 85 1d 01 00 00    	jne    c0002c6c <put_fat+0x18c>
c0002b4f:	8d 46 54             	lea    eax,[esi+0x54]
c0002b52:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002b56:	8d 45 01             	lea    eax,[ebp+0x1]
c0002b59:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002b5f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002b63:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002b67:	89 f8                	mov    eax,edi
c0002b69:	83 e3 01             	and    ebx,0x1
c0002b6c:	74 0d                	je     c0002b7b <put_fat+0x9b>
c0002b6e:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002b71:	89 fa                	mov    edx,edi
c0002b73:	83 e0 0f             	and    eax,0xf
c0002b76:	c1 e2 04             	shl    edx,0x4
c0002b79:	09 d0                	or     eax,edx
c0002b7b:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002b7e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002b82:	31 c9                	xor    ecx,ecx
c0002b84:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002b88:	c1 ea 09             	shr    edx,0x9
c0002b8b:	89 f0                	mov    eax,esi
c0002b8d:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002b90:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002b93:	e8 c5 f5 ff ff       	call   c000215d <move_window>
c0002b98:	89 c1                	mov    ecx,eax
c0002b9a:	85 c0                	test   eax,eax
c0002b9c:	0f 85 ca 00 00 00    	jne    c0002c6c <put_fat+0x18c>
c0002ba2:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002ba6:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002bac:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002bb0:	85 db                	test   ebx,ebx
c0002bb2:	74 07                	je     c0002bbb <put_fat+0xdb>
c0002bb4:	c1 ef 04             	shr    edi,0x4
c0002bb7:	89 fa                	mov    edx,edi
c0002bb9:	eb 0e                	jmp    c0002bc9 <put_fat+0xe9>
c0002bbb:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002bbe:	c1 ef 08             	shr    edi,0x8
c0002bc1:	83 e2 f0             	and    edx,0xfffffff0
c0002bc4:	83 e7 0f             	and    edi,0xf
c0002bc7:	09 fa                	or     edx,edi
c0002bc9:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002bcc:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002bd0:	e9 97 00 00 00       	jmp    c0002c6c <put_fat+0x18c>
c0002bd5:	31 c9                	xor    ecx,ecx
c0002bd7:	c1 ea 08             	shr    edx,0x8
c0002bda:	89 f0                	mov    eax,esi
c0002bdc:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002bdf:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002be2:	e8 76 f5 ff ff       	call   c000215d <move_window>
c0002be7:	89 c1                	mov    ecx,eax
c0002be9:	85 c0                	test   eax,eax
c0002beb:	75 7f                	jne    c0002c6c <put_fat+0x18c>
c0002bed:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002bf1:	01 db                	add    ebx,ebx
c0002bf3:	0f b7 d7             	movzx  edx,di
c0002bf6:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002bfc:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002c00:	e8 ec ed ff ff       	call   c00019f1 <st_word>
c0002c05:	eb 53                	jmp    c0002c5a <put_fat+0x17a>
c0002c07:	31 c9                	xor    ecx,ecx
c0002c09:	c1 ea 07             	shr    edx,0x7
c0002c0c:	89 f0                	mov    eax,esi
c0002c0e:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002c11:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002c14:	e8 44 f5 ff ff       	call   c000215d <move_window>
c0002c19:	89 c1                	mov    ecx,eax
c0002c1b:	85 c0                	test   eax,eax
c0002c1d:	75 4d                	jne    c0002c6c <put_fat+0x18c>
c0002c1f:	c1 e3 02             	shl    ebx,0x2
c0002c22:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002c28:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002c2b:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002c2f:	74 1c                	je     c0002c4d <put_fat+0x16d>
c0002c31:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002c35:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002c3b:	89 d8                	mov    eax,ebx
c0002c3d:	e8 4a ed ff ff       	call   c000198c <ld_dword>
c0002c42:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002c46:	25 00 00 00 f0       	and    eax,0xf0000000
c0002c4b:	09 c7                	or     edi,eax
c0002c4d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002c51:	89 fa                	mov    edx,edi
c0002c53:	89 d8                	mov    eax,ebx
c0002c55:	e8 9b ed ff ff       	call   c00019f5 <st_dword>
c0002c5a:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002c5e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002c62:	eb 08                	jmp    c0002c6c <put_fat+0x18c>
c0002c64:	b9 02 00 00 00       	mov    ecx,0x2
c0002c69:	89 c8                	mov    eax,ecx
c0002c6b:	c3                   	ret    
c0002c6c:	83 c4 1c             	add    esp,0x1c
c0002c6f:	89 c8                	mov    eax,ecx
c0002c71:	5b                   	pop    ebx
c0002c72:	5e                   	pop    esi
c0002c73:	5f                   	pop    edi
c0002c74:	5d                   	pop    ebp
c0002c75:	c3                   	ret    

c0002c76 <fill_last_frag>:
c0002c76:	57                   	push   edi
c0002c77:	89 cf                	mov    edi,ecx
c0002c79:	56                   	push   esi
c0002c7a:	89 d6                	mov    esi,edx
c0002c7c:	53                   	push   ebx
c0002c7d:	89 c3                	mov    ebx,eax
c0002c7f:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002c82:	85 c0                	test   eax,eax
c0002c84:	74 21                	je     c0002ca7 <fill_last_frag+0x31>
c0002c86:	89 f9                	mov    ecx,edi
c0002c88:	83 f8 01             	cmp    eax,0x1
c0002c8b:	76 05                	jbe    c0002c92 <fill_last_frag+0x1c>
c0002c8d:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002c90:	29 c1                	sub    ecx,eax
c0002c92:	8d 56 01             	lea    edx,[esi+0x1]
c0002c95:	29 c2                	sub    edx,eax
c0002c97:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002c99:	e8 42 fe ff ff       	call   c0002ae0 <put_fat>
c0002c9e:	85 c0                	test   eax,eax
c0002ca0:	75 05                	jne    c0002ca7 <fill_last_frag+0x31>
c0002ca2:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002ca5:	eb d8                	jmp    c0002c7f <fill_last_frag+0x9>
c0002ca7:	5b                   	pop    ebx
c0002ca8:	5e                   	pop    esi
c0002ca9:	5f                   	pop    edi
c0002caa:	c3                   	ret    

c0002cab <fill_first_frag>:
c0002cab:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002caf:	75 2d                	jne    c0002cde <fill_first_frag+0x33>
c0002cb1:	57                   	push   edi
c0002cb2:	56                   	push   esi
c0002cb3:	53                   	push   ebx
c0002cb4:	89 c3                	mov    ebx,eax
c0002cb6:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002cb9:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002cbc:	01 d7                	add    edi,edx
c0002cbe:	39 fa                	cmp    edx,edi
c0002cc0:	74 14                	je     c0002cd6 <fill_first_frag+0x2b>
c0002cc2:	8d 72 01             	lea    esi,[edx+0x1]
c0002cc5:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002cc7:	89 f1                	mov    ecx,esi
c0002cc9:	e8 12 fe ff ff       	call   c0002ae0 <put_fat>
c0002cce:	89 f2                	mov    edx,esi
c0002cd0:	85 c0                	test   eax,eax
c0002cd2:	74 ea                	je     c0002cbe <fill_first_frag+0x13>
c0002cd4:	eb 0b                	jmp    c0002ce1 <fill_first_frag+0x36>
c0002cd6:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002cda:	31 c0                	xor    eax,eax
c0002cdc:	eb 03                	jmp    c0002ce1 <fill_first_frag+0x36>
c0002cde:	31 c0                	xor    eax,eax
c0002ce0:	c3                   	ret    
c0002ce1:	5b                   	pop    ebx
c0002ce2:	5e                   	pop    esi
c0002ce3:	5f                   	pop    edi
c0002ce4:	c3                   	ret    

c0002ce5 <get_fat>:
c0002ce5:	83 fa 01             	cmp    edx,0x1
c0002ce8:	0f 86 db 01 00 00    	jbe    c0002ec9 <get_fat+0x1e4>
c0002cee:	55                   	push   ebp
c0002cef:	b9 01 00 00 00       	mov    ecx,0x1
c0002cf4:	57                   	push   edi
c0002cf5:	56                   	push   esi
c0002cf6:	53                   	push   ebx
c0002cf7:	83 ec 1c             	sub    esp,0x1c
c0002cfa:	8b 38                	mov    edi,DWORD PTR [eax]
c0002cfc:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002cff:	0f 86 cc 01 00 00    	jbe    c0002ed1 <get_fat+0x1ec>
c0002d05:	89 c3                	mov    ebx,eax
c0002d07:	89 d6                	mov    esi,edx
c0002d09:	8a 07                	mov    al,BYTE PTR [edi]
c0002d0b:	3c 02                	cmp    al,0x2
c0002d0d:	0f 84 99 00 00 00    	je     c0002dac <get_fat+0xc7>
c0002d13:	77 09                	ja     c0002d1e <get_fat+0x39>
c0002d15:	fe c8                	dec    al
c0002d17:	74 1a                	je     c0002d33 <get_fat+0x4e>
c0002d19:	e9 b3 01 00 00       	jmp    c0002ed1 <get_fat+0x1ec>
c0002d1e:	3c 03                	cmp    al,0x3
c0002d20:	0f 84 b5 00 00 00    	je     c0002ddb <get_fat+0xf6>
c0002d26:	3c 04                	cmp    al,0x4
c0002d28:	0f 84 e3 00 00 00    	je     c0002e11 <get_fat+0x12c>
c0002d2e:	e9 9e 01 00 00       	jmp    c0002ed1 <get_fat+0x1ec>
c0002d33:	89 d3                	mov    ebx,edx
c0002d35:	31 c9                	xor    ecx,ecx
c0002d37:	d1 eb                	shr    ebx,1
c0002d39:	89 f8                	mov    eax,edi
c0002d3b:	01 d3                	add    ebx,edx
c0002d3d:	89 da                	mov    edx,ebx
c0002d3f:	c1 ea 09             	shr    edx,0x9
c0002d42:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002d45:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002d48:	e8 10 f4 ff ff       	call   c000215d <move_window>
c0002d4d:	85 c0                	test   eax,eax
c0002d4f:	74 08                	je     c0002d59 <get_fat+0x74>
c0002d51:	83 c9 ff             	or     ecx,0xffffffff
c0002d54:	e9 78 01 00 00       	jmp    c0002ed1 <get_fat+0x1ec>
c0002d59:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0002d5c:	31 c9                	xor    ecx,ecx
c0002d5e:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002d64:	89 ea                	mov    edx,ebp
c0002d66:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c0002d6a:	c1 ea 09             	shr    edx,0x9
c0002d6d:	89 f8                	mov    eax,edi
c0002d6f:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002d72:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002d75:	e8 e3 f3 ff ff       	call   c000215d <move_window>
c0002d7a:	85 c0                	test   eax,eax
c0002d7c:	75 d3                	jne    c0002d51 <get_fat+0x6c>
c0002d7e:	0f b6 c3             	movzx  eax,bl
c0002d81:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002d87:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c0002d8c:	c1 e3 08             	shl    ebx,0x8
c0002d8f:	09 c3                	or     ebx,eax
c0002d91:	89 d9                	mov    ecx,ebx
c0002d93:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0002d99:	83 e6 01             	and    esi,0x1
c0002d9c:	0f 84 2f 01 00 00    	je     c0002ed1 <get_fat+0x1ec>
c0002da2:	89 d9                	mov    ecx,ebx
c0002da4:	c1 e9 04             	shr    ecx,0x4
c0002da7:	e9 25 01 00 00       	jmp    c0002ed1 <get_fat+0x1ec>
c0002dac:	31 c9                	xor    ecx,ecx
c0002dae:	c1 ea 08             	shr    edx,0x8
c0002db1:	89 f8                	mov    eax,edi
c0002db3:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002db6:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002db9:	e8 9f f3 ff ff       	call   c000215d <move_window>
c0002dbe:	85 c0                	test   eax,eax
c0002dc0:	75 8f                	jne    c0002d51 <get_fat+0x6c>
c0002dc2:	01 f6                	add    esi,esi
c0002dc4:	81 e6 fe 01 00 00    	and    esi,0x1fe
c0002dca:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002dce:	e8 ac eb ff ff       	call   c000197f <ld_word>
c0002dd3:	0f b7 c8             	movzx  ecx,ax
c0002dd6:	e9 f6 00 00 00       	jmp    c0002ed1 <get_fat+0x1ec>
c0002ddb:	31 c9                	xor    ecx,ecx
c0002ddd:	c1 ea 07             	shr    edx,0x7
c0002de0:	89 f8                	mov    eax,edi
c0002de2:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002de5:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002de8:	e8 70 f3 ff ff       	call   c000215d <move_window>
c0002ded:	85 c0                	test   eax,eax
c0002def:	0f 85 5c ff ff ff    	jne    c0002d51 <get_fat+0x6c>
c0002df5:	c1 e6 02             	shl    esi,0x2
c0002df8:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002dfe:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002e02:	e8 85 eb ff ff       	call   c000198c <ld_dword>
c0002e07:	25 ff ff ff 0f       	and    eax,0xfffffff
c0002e0c:	e9 b4 00 00 00       	jmp    c0002ec5 <get_fat+0x1e0>
c0002e11:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0002e14:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002e17:	89 d1                	mov    ecx,edx
c0002e19:	09 c1                	or     ecx,eax
c0002e1b:	74 06                	je     c0002e23 <get_fat+0x13e>
c0002e1d:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0002e21:	75 0f                	jne    c0002e32 <get_fat+0x14d>
c0002e23:	b9 01 00 00 00       	mov    ecx,0x1
c0002e28:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c0002e2c:	0f 85 9f 00 00 00    	jne    c0002ed1 <get_fat+0x1ec>
c0002e32:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c0002e36:	89 f5                	mov    ebp,esi
c0002e38:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c0002e3d:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c0002e40:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c0002e43:	80 f9 02             	cmp    cl,0x2
c0002e46:	75 35                	jne    c0002e7d <get_fat+0x198>
c0002e48:	83 c0 ff             	add    eax,0xffffffff
c0002e4b:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c0002e50:	83 d2 ff             	adc    edx,0xffffffff
c0002e53:	31 db                	xor    ebx,ebx
c0002e55:	0f ac d0 09          	shrd   eax,edx,0x9
c0002e59:	53                   	push   ebx
c0002e5a:	c1 ea 09             	shr    edx,0x9
c0002e5d:	51                   	push   ecx
c0002e5e:	52                   	push   edx
c0002e5f:	50                   	push   eax
c0002e60:	e8 3b e6 01 00       	call   c00214a0 <__udivdi3>
c0002e65:	83 c4 10             	add    esp,0x10
c0002e68:	b9 01 00 00 00       	mov    ecx,0x1
c0002e6d:	39 c5                	cmp    ebp,eax
c0002e6f:	77 60                	ja     c0002ed1 <get_fat+0x1ec>
c0002e71:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0002e76:	74 59                	je     c0002ed1 <get_fat+0x1ec>
c0002e78:	8d 4e 01             	lea    ecx,[esi+0x1]
c0002e7b:	eb 54                	jmp    c0002ed1 <get_fat+0x1ec>
c0002e7d:	80 f9 03             	cmp    cl,0x3
c0002e80:	75 05                	jne    c0002e87 <get_fat+0x1a2>
c0002e82:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c0002e85:	77 f1                	ja     c0002e78 <get_fat+0x193>
c0002e87:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0002e8c:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0002e90:	75 3f                	jne    c0002ed1 <get_fat+0x1ec>
c0002e92:	31 c9                	xor    ecx,ecx
c0002e94:	89 f2                	mov    edx,esi
c0002e96:	89 f8                	mov    eax,edi
c0002e98:	c1 ea 07             	shr    edx,0x7
c0002e9b:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002e9e:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002ea1:	e8 b7 f2 ff ff       	call   c000215d <move_window>
c0002ea6:	85 c0                	test   eax,eax
c0002ea8:	0f 85 a3 fe ff ff    	jne    c0002d51 <get_fat+0x6c>
c0002eae:	c1 e6 02             	shl    esi,0x2
c0002eb1:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002eb7:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002ebb:	e8 cc ea ff ff       	call   c000198c <ld_dword>
c0002ec0:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0002ec5:	89 c1                	mov    ecx,eax
c0002ec7:	eb 08                	jmp    c0002ed1 <get_fat+0x1ec>
c0002ec9:	b9 01 00 00 00       	mov    ecx,0x1
c0002ece:	89 c8                	mov    eax,ecx
c0002ed0:	c3                   	ret    
c0002ed1:	83 c4 1c             	add    esp,0x1c
c0002ed4:	89 c8                	mov    eax,ecx
c0002ed6:	5b                   	pop    ebx
c0002ed7:	5e                   	pop    esi
c0002ed8:	5f                   	pop    edi
c0002ed9:	5d                   	pop    ebp
c0002eda:	c3                   	ret    

c0002edb <dir_sdi>:
c0002edb:	55                   	push   ebp
c0002edc:	57                   	push   edi
c0002edd:	56                   	push   esi
c0002ede:	53                   	push   ebx
c0002edf:	89 c3                	mov    ebx,eax
c0002ee1:	83 ec 1c             	sub    esp,0x1c
c0002ee4:	8b 38                	mov    edi,DWORD PTR [eax]
c0002ee6:	31 c0                	xor    eax,eax
c0002ee8:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0002eeb:	0f 94 c0             	sete   al
c0002eee:	48                   	dec    eax
c0002eef:	25 00 00 20 f0       	and    eax,0xf0200000
c0002ef4:	05 00 00 00 10       	add    eax,0x10000000
c0002ef9:	39 d0                	cmp    eax,edx
c0002efb:	77 0a                	ja     c0002f07 <dir_sdi+0x2c>
c0002efd:	b8 02 00 00 00       	mov    eax,0x2
c0002f02:	e9 c4 00 00 00       	jmp    c0002fcb <dir_sdi+0xf0>
c0002f07:	89 d6                	mov    esi,edx
c0002f09:	f6 c2 1f             	test   dl,0x1f
c0002f0c:	75 ef                	jne    c0002efd <dir_sdi+0x22>
c0002f0e:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0002f11:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c0002f14:	85 c9                	test   ecx,ecx
c0002f16:	75 2d                	jne    c0002f45 <dir_sdi+0x6a>
c0002f18:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0002f1b:	77 1b                	ja     c0002f38 <dir_sdi+0x5d>
c0002f1d:	89 f2                	mov    edx,esi
c0002f1f:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0002f23:	c1 ea 05             	shr    edx,0x5
c0002f26:	39 c2                	cmp    edx,eax
c0002f28:	73 d3                	jae    c0002efd <dir_sdi+0x22>
c0002f2a:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0002f2d:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c0002f30:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002f33:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0002f36:	eb 4b                	jmp    c0002f83 <dir_sdi+0xa8>
c0002f38:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0002f3b:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002f3f:	85 c0                	test   eax,eax
c0002f41:	74 da                	je     c0002f1d <dir_sdi+0x42>
c0002f43:	89 c1                	mov    ecx,eax
c0002f45:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c0002f49:	c1 e5 09             	shl    ebp,0x9
c0002f4c:	89 ca                	mov    edx,ecx
c0002f4e:	39 ee                	cmp    esi,ebp
c0002f50:	72 1c                	jb     c0002f6e <dir_sdi+0x93>
c0002f52:	89 d8                	mov    eax,ebx
c0002f54:	e8 8c fd ff ff       	call   c0002ce5 <get_fat>
c0002f59:	89 c1                	mov    ecx,eax
c0002f5b:	83 f8 ff             	cmp    eax,0xffffffff
c0002f5e:	74 66                	je     c0002fc6 <dir_sdi+0xeb>
c0002f60:	83 f8 01             	cmp    eax,0x1
c0002f63:	76 98                	jbe    c0002efd <dir_sdi+0x22>
c0002f65:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c0002f68:	76 93                	jbe    c0002efd <dir_sdi+0x22>
c0002f6a:	29 ee                	sub    esi,ebp
c0002f6c:	eb de                	jmp    c0002f4c <dir_sdi+0x71>
c0002f6e:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002f72:	89 f8                	mov    eax,edi
c0002f74:	e8 9f ec ff ff       	call   c0001c18 <clst2sect>
c0002f79:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f7d:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002f80:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0002f83:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0002f86:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0002f89:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0002f8c:	89 d1                	mov    ecx,edx
c0002f8e:	09 c1                	or     ecx,eax
c0002f90:	0f 84 67 ff ff ff    	je     c0002efd <dir_sdi+0x22>
c0002f96:	89 f1                	mov    ecx,esi
c0002f98:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002fa0:	c1 e9 09             	shr    ecx,0x9
c0002fa3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002fa7:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002fab:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002faf:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002fb2:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002fb8:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0002fbb:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002fbf:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0002fc2:	31 c0                	xor    eax,eax
c0002fc4:	eb 05                	jmp    c0002fcb <dir_sdi+0xf0>
c0002fc6:	b8 01 00 00 00       	mov    eax,0x1
c0002fcb:	83 c4 1c             	add    esp,0x1c
c0002fce:	5b                   	pop    ebx
c0002fcf:	5e                   	pop    esi
c0002fd0:	5f                   	pop    edi
c0002fd1:	5d                   	pop    ebp
c0002fd2:	c3                   	ret    

c0002fd3 <create_chain>:
c0002fd3:	55                   	push   ebp
c0002fd4:	89 c5                	mov    ebp,eax
c0002fd6:	57                   	push   edi
c0002fd7:	56                   	push   esi
c0002fd8:	53                   	push   ebx
c0002fd9:	83 ec 1c             	sub    esp,0x1c
c0002fdc:	85 d2                	test   edx,edx
c0002fde:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002fe2:	8b 30                	mov    esi,DWORD PTR [eax]
c0002fe4:	75 0e                	jne    c0002ff4 <create_chain+0x21>
c0002fe6:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0002fe9:	85 ff                	test   edi,edi
c0002feb:	74 39                	je     c0003026 <create_chain+0x53>
c0002fed:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c0002ff0:	77 39                	ja     c000302b <create_chain+0x58>
c0002ff2:	eb 32                	jmp    c0003026 <create_chain+0x53>
c0002ff4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002ff8:	e8 e8 fc ff ff       	call   c0002ce5 <get_fat>
c0002ffd:	89 c3                	mov    ebx,eax
c0002fff:	83 f8 01             	cmp    eax,0x1
c0003002:	77 0a                	ja     c000300e <create_chain+0x3b>
c0003004:	bb 01 00 00 00       	mov    ebx,0x1
c0003009:	e9 ba 01 00 00       	jmp    c00031c8 <create_chain+0x1f5>
c000300e:	83 f8 ff             	cmp    eax,0xffffffff
c0003011:	0f 84 62 01 00 00    	je     c0003179 <create_chain+0x1a6>
c0003017:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c000301a:	0f 87 a8 01 00 00    	ja     c00031c8 <create_chain+0x1f5>
c0003020:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0003024:	eb 05                	jmp    c000302b <create_chain+0x58>
c0003026:	bf 01 00 00 00       	mov    edi,0x1
c000302b:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c000302f:	75 07                	jne    c0003038 <create_chain+0x65>
c0003031:	31 db                	xor    ebx,ebx
c0003033:	e9 90 01 00 00       	jmp    c00031c8 <create_chain+0x1f5>
c0003038:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c000303b:	75 74                	jne    c00030b1 <create_chain+0xde>
c000303d:	b9 01 00 00 00       	mov    ecx,0x1
c0003042:	89 fa                	mov    edx,edi
c0003044:	89 f0                	mov    eax,esi
c0003046:	e8 2d f9 ff ff       	call   c0002978 <find_bitmap>
c000304b:	89 c3                	mov    ebx,eax
c000304d:	8d 40 ff             	lea    eax,[eax-0x1]
c0003050:	83 f8 fd             	cmp    eax,0xfffffffd
c0003053:	0f 87 6f 01 00 00    	ja     c00031c8 <create_chain+0x1f5>
c0003059:	83 ec 0c             	sub    esp,0xc
c000305c:	b9 01 00 00 00       	mov    ecx,0x1
c0003061:	6a 01                	push   0x1
c0003063:	89 da                	mov    edx,ebx
c0003065:	89 f0                	mov    eax,esi
c0003067:	e8 bf f9 ff ff       	call   c0002a2b <change_bitmap>
c000306c:	83 c4 10             	add    esp,0x10
c000306f:	83 f8 02             	cmp    eax,0x2
c0003072:	74 90                	je     c0003004 <create_chain+0x31>
c0003074:	83 f8 01             	cmp    eax,0x1
c0003077:	0f 84 fc 00 00 00    	je     c0003179 <create_chain+0x1a6>
c000307d:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003082:	75 09                	jne    c000308d <create_chain+0xba>
c0003084:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c0003088:	e9 0c 01 00 00       	jmp    c0003199 <create_chain+0x1c6>
c000308d:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c0003091:	0f 85 e7 00 00 00    	jne    c000317e <create_chain+0x1ab>
c0003097:	8d 57 01             	lea    edx,[edi+0x1]
c000309a:	39 da                	cmp    edx,ebx
c000309c:	0f 84 f7 00 00 00    	je     c0003199 <create_chain+0x1c6>
c00030a2:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c00030a5:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c00030a9:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c00030ac:	e9 cd 00 00 00       	jmp    c000317e <create_chain+0x1ab>
c00030b1:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c00030b5:	75 41                	jne    c00030f8 <create_chain+0x125>
c00030b7:	8d 5f 01             	lea    ebx,[edi+0x1]
c00030ba:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00030bd:	77 05                	ja     c00030c4 <create_chain+0xf1>
c00030bf:	bb 02 00 00 00       	mov    ebx,0x2
c00030c4:	89 da                	mov    edx,ebx
c00030c6:	89 e8                	mov    eax,ebp
c00030c8:	e8 18 fc ff ff       	call   c0002ce5 <get_fat>
c00030cd:	83 f8 01             	cmp    eax,0x1
c00030d0:	0f 84 2e ff ff ff    	je     c0003004 <create_chain+0x31>
c00030d6:	83 f8 ff             	cmp    eax,0xffffffff
c00030d9:	0f 84 9a 00 00 00    	je     c0003179 <create_chain+0x1a6>
c00030df:	85 c0                	test   eax,eax
c00030e1:	74 11                	je     c00030f4 <create_chain+0x121>
c00030e3:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00030e6:	83 f8 01             	cmp    eax,0x1
c00030e9:	76 0d                	jbe    c00030f8 <create_chain+0x125>
c00030eb:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00030ee:	76 08                	jbe    c00030f8 <create_chain+0x125>
c00030f0:	89 c7                	mov    edi,eax
c00030f2:	eb 04                	jmp    c00030f8 <create_chain+0x125>
c00030f4:	85 db                	test   ebx,ebx
c00030f6:	75 38                	jne    c0003130 <create_chain+0x15d>
c00030f8:	89 fb                	mov    ebx,edi
c00030fa:	43                   	inc    ebx
c00030fb:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00030fe:	77 0e                	ja     c000310e <create_chain+0x13b>
c0003100:	83 ff 01             	cmp    edi,0x1
c0003103:	0f 86 28 ff ff ff    	jbe    c0003031 <create_chain+0x5e>
c0003109:	bb 02 00 00 00       	mov    ebx,0x2
c000310e:	89 da                	mov    edx,ebx
c0003110:	89 e8                	mov    eax,ebp
c0003112:	e8 ce fb ff ff       	call   c0002ce5 <get_fat>
c0003117:	85 c0                	test   eax,eax
c0003119:	74 15                	je     c0003130 <create_chain+0x15d>
c000311b:	83 f8 01             	cmp    eax,0x1
c000311e:	0f 84 e0 fe ff ff    	je     c0003004 <create_chain+0x31>
c0003124:	40                   	inc    eax
c0003125:	74 52                	je     c0003179 <create_chain+0x1a6>
c0003127:	39 fb                	cmp    ebx,edi
c0003129:	75 cf                	jne    c00030fa <create_chain+0x127>
c000312b:	e9 01 ff ff ff       	jmp    c0003031 <create_chain+0x5e>
c0003130:	83 c9 ff             	or     ecx,0xffffffff
c0003133:	89 da                	mov    edx,ebx
c0003135:	89 f0                	mov    eax,esi
c0003137:	e8 a4 f9 ff ff       	call   c0002ae0 <put_fat>
c000313c:	85 c0                	test   eax,eax
c000313e:	75 32                	jne    c0003172 <create_chain+0x19f>
c0003140:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003145:	74 11                	je     c0003158 <create_chain+0x185>
c0003147:	89 d9                	mov    ecx,ebx
c0003149:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000314d:	89 f0                	mov    eax,esi
c000314f:	e8 8c f9 ff ff       	call   c0002ae0 <put_fat>
c0003154:	85 c0                	test   eax,eax
c0003156:	75 1a                	jne    c0003172 <create_chain+0x19f>
c0003158:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000315b:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c000315e:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c0003161:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003164:	39 d0                	cmp    eax,edx
c0003166:	77 04                	ja     c000316c <create_chain+0x199>
c0003168:	48                   	dec    eax
c0003169:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c000316c:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c0003170:	eb 56                	jmp    c00031c8 <create_chain+0x1f5>
c0003172:	48                   	dec    eax
c0003173:	0f 85 8b fe ff ff    	jne    c0003004 <create_chain+0x31>
c0003179:	83 cb ff             	or     ebx,0xffffffff
c000317c:	eb 4a                	jmp    c00031c8 <create_chain+0x1f5>
c000317e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003182:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003185:	41                   	inc    ecx
c0003186:	39 d9                	cmp    ecx,ebx
c0003188:	75 19                	jne    c00031a3 <create_chain+0x1d0>
c000318a:	b9 02 00 00 00       	mov    ecx,0x2
c000318f:	85 d2                	test   edx,edx
c0003191:	74 03                	je     c0003196 <create_chain+0x1c3>
c0003193:	8d 4a 01             	lea    ecx,[edx+0x1]
c0003196:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c0003199:	85 c0                	test   eax,eax
c000319b:	0f 85 63 fe ff ff    	jne    c0003004 <create_chain+0x31>
c00031a1:	eb b5                	jmp    c0003158 <create_chain+0x185>
c00031a3:	85 d2                	test   edx,edx
c00031a5:	75 07                	jne    c00031ae <create_chain+0x1db>
c00031a7:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c00031ae:	89 d9                	mov    ecx,ebx
c00031b0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00031b4:	89 e8                	mov    eax,ebp
c00031b6:	e8 bb fa ff ff       	call   c0002c76 <fill_last_frag>
c00031bb:	85 c0                	test   eax,eax
c00031bd:	75 b3                	jne    c0003172 <create_chain+0x19f>
c00031bf:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c00031c6:	eb 90                	jmp    c0003158 <create_chain+0x185>
c00031c8:	83 c4 1c             	add    esp,0x1c
c00031cb:	89 d8                	mov    eax,ebx
c00031cd:	5b                   	pop    ebx
c00031ce:	5e                   	pop    esi
c00031cf:	5f                   	pop    edi
c00031d0:	5d                   	pop    ebp
c00031d1:	c3                   	ret    

c00031d2 <remove_chain>:
c00031d2:	55                   	push   ebp
c00031d3:	57                   	push   edi
c00031d4:	56                   	push   esi
c00031d5:	53                   	push   ebx
c00031d6:	83 ec 1c             	sub    esp,0x1c
c00031d9:	83 fa 01             	cmp    edx,0x1
c00031dc:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00031e0:	8b 18                	mov    ebx,DWORD PTR [eax]
c00031e2:	77 0a                	ja     c00031ee <remove_chain+0x1c>
c00031e4:	b8 02 00 00 00       	mov    eax,0x2
c00031e9:	e9 24 01 00 00       	jmp    c0003312 <remove_chain+0x140>
c00031ee:	89 d6                	mov    esi,edx
c00031f0:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c00031f3:	76 ef                	jbe    c00031e4 <remove_chain+0x12>
c00031f5:	89 c7                	mov    edi,eax
c00031f7:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00031fc:	75 06                	jne    c0003204 <remove_chain+0x32>
c00031fe:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0003202:	eb 54                	jmp    c0003258 <remove_chain+0x86>
c0003204:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003207:	75 06                	jne    c000320f <remove_chain+0x3d>
c0003209:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c000320d:	74 ef                	je     c00031fe <remove_chain+0x2c>
c000320f:	83 c9 ff             	or     ecx,0xffffffff
c0003212:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003216:	89 d8                	mov    eax,ebx
c0003218:	e8 c3 f8 ff ff       	call   c0002ae0 <put_fat>
c000321d:	85 c0                	test   eax,eax
c000321f:	74 dd                	je     c00031fe <remove_chain+0x2c>
c0003221:	e9 ec 00 00 00       	jmp    c0003312 <remove_chain+0x140>
c0003226:	83 f8 01             	cmp    eax,0x1
c0003229:	74 b9                	je     c00031e4 <remove_chain+0x12>
c000322b:	83 f8 ff             	cmp    eax,0xffffffff
c000322e:	74 6d                	je     c000329d <remove_chain+0xcb>
c0003230:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003233:	75 6f                	jne    c00032a4 <remove_chain+0xd2>
c0003235:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0003238:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c000323b:	8d 51 fe             	lea    edx,[ecx-0x2]
c000323e:	39 d0                	cmp    eax,edx
c0003240:	73 08                	jae    c000324a <remove_chain+0x78>
c0003242:	40                   	inc    eax
c0003243:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c0003247:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000324a:	8d 4e 01             	lea    ecx,[esi+0x1]
c000324d:	39 e9                	cmp    ecx,ebp
c000324f:	75 64                	jne    c00032b5 <remove_chain+0xe3>
c0003251:	89 ee                	mov    esi,ebp
c0003253:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0003256:	76 0f                	jbe    c0003267 <remove_chain+0x95>
c0003258:	89 f2                	mov    edx,esi
c000325a:	89 f8                	mov    eax,edi
c000325c:	e8 84 fa ff ff       	call   c0002ce5 <get_fat>
c0003261:	89 c5                	mov    ebp,eax
c0003263:	85 c0                	test   eax,eax
c0003265:	75 bf                	jne    c0003226 <remove_chain+0x54>
c0003267:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000326a:	0f 85 a0 00 00 00    	jne    c0003310 <remove_chain+0x13e>
c0003270:	eb 6c                	jmp    c00032de <remove_chain+0x10c>
c0003272:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c0003275:	84 c0                	test   al,al
c0003277:	75 7d                	jne    c00032f6 <remove_chain+0x124>
c0003279:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000327c:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c0003280:	0f 84 86 00 00 00    	je     c000330c <remove_chain+0x13a>
c0003286:	89 da                	mov    edx,ebx
c0003288:	89 f8                	mov    eax,edi
c000328a:	e8 56 fa ff ff       	call   c0002ce5 <get_fat>
c000328f:	83 f8 01             	cmp    eax,0x1
c0003292:	0f 86 4c ff ff ff    	jbe    c00031e4 <remove_chain+0x12>
c0003298:	83 f8 ff             	cmp    eax,0xffffffff
c000329b:	75 4e                	jne    c00032eb <remove_chain+0x119>
c000329d:	b8 01 00 00 00       	mov    eax,0x1
c00032a2:	eb 6e                	jmp    c0003312 <remove_chain+0x140>
c00032a4:	31 c9                	xor    ecx,ecx
c00032a6:	89 f2                	mov    edx,esi
c00032a8:	89 d8                	mov    eax,ebx
c00032aa:	e8 31 f8 ff ff       	call   c0002ae0 <put_fat>
c00032af:	85 c0                	test   eax,eax
c00032b1:	74 82                	je     c0003235 <remove_chain+0x63>
c00032b3:	eb 5d                	jmp    c0003312 <remove_chain+0x140>
c00032b5:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00032b8:	75 1b                	jne    c00032d5 <remove_chain+0x103>
c00032ba:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c00032be:	89 d8                	mov    eax,ebx
c00032c0:	83 ec 0c             	sub    esp,0xc
c00032c3:	6a 00                	push   0x0
c00032c5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00032c9:	e8 5d f7 ff ff       	call   c0002a2b <change_bitmap>
c00032ce:	83 c4 10             	add    esp,0x10
c00032d1:	85 c0                	test   eax,eax
c00032d3:	75 3d                	jne    c0003312 <remove_chain+0x140>
c00032d5:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c00032d9:	e9 73 ff ff ff       	jmp    c0003251 <remove_chain+0x7f>
c00032de:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00032e3:	75 8d                	jne    c0003272 <remove_chain+0xa0>
c00032e5:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c00032e9:	eb 25                	jmp    c0003310 <remove_chain+0x13e>
c00032eb:	8d 53 01             	lea    edx,[ebx+0x1]
c00032ee:	89 c3                	mov    ebx,eax
c00032f0:	39 c2                	cmp    edx,eax
c00032f2:	74 88                	je     c000327c <remove_chain+0xaa>
c00032f4:	eb 1a                	jmp    c0003310 <remove_chain+0x13e>
c00032f6:	3c 03                	cmp    al,0x3
c00032f8:	75 16                	jne    c0003310 <remove_chain+0x13e>
c00032fa:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00032fd:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0003301:	77 0d                	ja     c0003310 <remove_chain+0x13e>
c0003303:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c0003306:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c000330a:	72 04                	jb     c0003310 <remove_chain+0x13e>
c000330c:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c0003310:	31 c0                	xor    eax,eax
c0003312:	83 c4 1c             	add    esp,0x1c
c0003315:	5b                   	pop    ebx
c0003316:	5e                   	pop    esi
c0003317:	5f                   	pop    edi
c0003318:	5d                   	pop    ebp
c0003319:	c3                   	ret    

c000331a <dir_clear>:
c000331a:	55                   	push   ebp
c000331b:	57                   	push   edi
c000331c:	56                   	push   esi
c000331d:	89 c6                	mov    esi,eax
c000331f:	53                   	push   ebx
c0003320:	83 ec 1c             	sub    esp,0x1c
c0003323:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003327:	e8 9d ed ff ff       	call   c00020c9 <sync_window>
c000332c:	85 c0                	test   eax,eax
c000332e:	0f 85 de 00 00 00    	jne    c0003412 <dir_clear+0xf8>
c0003334:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003338:	89 f0                	mov    eax,esi
c000333a:	8d 6e 54             	lea    ebp,[esi+0x54]
c000333d:	e8 d6 e8 ff ff       	call   c0001c18 <clst2sect>
c0003342:	b9 00 02 00 00       	mov    ecx,0x200
c0003347:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000334b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000334f:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c0003352:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c0003355:	89 e8                	mov    eax,ebp
c0003357:	31 d2                	xor    edx,edx
c0003359:	e8 b5 e6 ff ff       	call   c0001a13 <mem_set>
c000335e:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0003362:	c1 e3 09             	shl    ebx,0x9
c0003365:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c000336b:	76 1f                	jbe    c000338c <dir_clear+0x72>
c000336d:	bb 00 80 00 00       	mov    ebx,0x8000
c0003372:	eb 18                	jmp    c000338c <dir_clear+0x72>
c0003374:	83 ec 0c             	sub    esp,0xc
c0003377:	53                   	push   ebx
c0003378:	e8 6b 50 00 00       	call   c00083e8 <ff_memalloc>
c000337d:	83 c4 10             	add    esp,0x10
c0003380:	89 c7                	mov    edi,eax
c0003382:	85 c0                	test   eax,eax
c0003384:	0f 85 8f 00 00 00    	jne    c0003419 <dir_clear+0xff>
c000338a:	d1 eb                	shr    ebx,1
c000338c:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0003392:	77 e0                	ja     c0003374 <dir_clear+0x5a>
c0003394:	31 db                	xor    ebx,ebx
c0003396:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000339a:	39 d8                	cmp    eax,ebx
c000339c:	76 66                	jbe    c0003404 <dir_clear+0xea>
c000339e:	83 ec 0c             	sub    esp,0xc
c00033a1:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00033a5:	6a 01                	push   0x1
c00033a7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00033ab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00033af:	55                   	push   ebp
c00033b0:	50                   	push   eax
c00033b1:	e8 94 e5 ff ff       	call   c000194a <disk_write>
c00033b6:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c00033bb:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c00033c0:	83 c4 20             	add    esp,0x20
c00033c3:	85 c0                	test   eax,eax
c00033c5:	75 3d                	jne    c0003404 <dir_clear+0xea>
c00033c7:	43                   	inc    ebx
c00033c8:	eb cc                	jmp    c0003396 <dir_clear+0x7c>
c00033ca:	83 ec 0c             	sub    esp,0xc
c00033cd:	31 d2                	xor    edx,edx
c00033cf:	55                   	push   ebp
c00033d0:	89 d8                	mov    eax,ebx
c00033d2:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00033d6:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00033da:	52                   	push   edx
c00033db:	50                   	push   eax
c00033dc:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00033e0:	57                   	push   edi
c00033e1:	50                   	push   eax
c00033e2:	e8 63 e5 ff ff       	call   c000194a <disk_write>
c00033e7:	83 c4 20             	add    esp,0x20
c00033ea:	85 c0                	test   eax,eax
c00033ec:	75 0a                	jne    c00033f8 <dir_clear+0xde>
c00033ee:	01 eb                	add    ebx,ebp
c00033f0:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00033f4:	39 d8                	cmp    eax,ebx
c00033f6:	77 d2                	ja     c00033ca <dir_clear+0xb0>
c00033f8:	83 ec 0c             	sub    esp,0xc
c00033fb:	57                   	push   edi
c00033fc:	e8 ff 4f 00 00       	call   c0008400 <ff_memfree>
c0003401:	83 c4 10             	add    esp,0x10
c0003404:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0003408:	39 d8                	cmp    eax,ebx
c000340a:	0f 95 c0             	setne  al
c000340d:	0f b6 c0             	movzx  eax,al
c0003410:	eb 19                	jmp    c000342b <dir_clear+0x111>
c0003412:	b8 01 00 00 00       	mov    eax,0x1
c0003417:	eb 12                	jmp    c000342b <dir_clear+0x111>
c0003419:	89 d9                	mov    ecx,ebx
c000341b:	31 d2                	xor    edx,edx
c000341d:	c1 eb 09             	shr    ebx,0x9
c0003420:	e8 ee e5 ff ff       	call   c0001a13 <mem_set>
c0003425:	89 dd                	mov    ebp,ebx
c0003427:	31 db                	xor    ebx,ebx
c0003429:	eb c5                	jmp    c00033f0 <dir_clear+0xd6>
c000342b:	83 c4 1c             	add    esp,0x1c
c000342e:	5b                   	pop    ebx
c000342f:	5e                   	pop    esi
c0003430:	5f                   	pop    edi
c0003431:	5d                   	pop    ebp
c0003432:	c3                   	ret    

c0003433 <dir_next>:
c0003433:	55                   	push   ebp
c0003434:	57                   	push   edi
c0003435:	56                   	push   esi
c0003436:	53                   	push   ebx
c0003437:	89 c3                	mov    ebx,eax
c0003439:	83 ec 1c             	sub    esp,0x1c
c000343c:	8b 28                	mov    ebp,DWORD PTR [eax]
c000343e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003442:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0003445:	8d 78 20             	lea    edi,[eax+0x20]
c0003448:	31 c0                	xor    eax,eax
c000344a:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c000344e:	0f 94 c0             	sete   al
c0003451:	48                   	dec    eax
c0003452:	25 00 00 20 f0       	and    eax,0xf0200000
c0003457:	05 00 00 00 10       	add    eax,0x10000000
c000345c:	39 f8                	cmp    eax,edi
c000345e:	77 0e                	ja     c000346e <dir_next+0x3b>
c0003460:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003467:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000346e:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003471:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003474:	b8 04 00 00 00       	mov    eax,0x4
c0003479:	89 ce                	mov    esi,ecx
c000347b:	09 d6                	or     esi,edx
c000347d:	0f 84 da 00 00 00    	je     c000355d <dir_next+0x12a>
c0003483:	89 f8                	mov    eax,edi
c0003485:	25 ff 01 00 00       	and    eax,0x1ff
c000348a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000348e:	0f 85 b9 00 00 00    	jne    c000354d <dir_next+0x11a>
c0003494:	83 c2 01             	add    edx,0x1
c0003497:	83 d1 00             	adc    ecx,0x0
c000349a:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c000349d:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c00034a0:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00034a3:	85 d2                	test   edx,edx
c00034a5:	75 29                	jne    c00034d0 <dir_next+0x9d>
c00034a7:	89 fa                	mov    edx,edi
c00034a9:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c00034ad:	c1 ea 05             	shr    edx,0x5
c00034b0:	39 c2                	cmp    edx,eax
c00034b2:	0f 82 95 00 00 00    	jb     c000354d <dir_next+0x11a>
c00034b8:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00034bf:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00034c6:	b8 04 00 00 00       	mov    eax,0x4
c00034cb:	e9 8d 00 00 00       	jmp    c000355d <dir_next+0x12a>
c00034d0:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c00034d4:	89 f9                	mov    ecx,edi
c00034d6:	48                   	dec    eax
c00034d7:	c1 e9 09             	shr    ecx,0x9
c00034da:	85 c8                	test   eax,ecx
c00034dc:	75 6f                	jne    c000354d <dir_next+0x11a>
c00034de:	89 d8                	mov    eax,ebx
c00034e0:	e8 00 f8 ff ff       	call   c0002ce5 <get_fat>
c00034e5:	89 c6                	mov    esi,eax
c00034e7:	83 f8 01             	cmp    eax,0x1
c00034ea:	77 07                	ja     c00034f3 <dir_next+0xc0>
c00034ec:	b8 02 00 00 00       	mov    eax,0x2
c00034f1:	eb 6a                	jmp    c000355d <dir_next+0x12a>
c00034f3:	83 f8 ff             	cmp    eax,0xffffffff
c00034f6:	75 07                	jne    c00034ff <dir_next+0xcc>
c00034f8:	b8 01 00 00 00       	mov    eax,0x1
c00034fd:	eb 5e                	jmp    c000355d <dir_next+0x12a>
c00034ff:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0003502:	77 37                	ja     c000353b <dir_next+0x108>
c0003504:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003509:	74 ad                	je     c00034b8 <dir_next+0x85>
c000350b:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000350e:	89 d8                	mov    eax,ebx
c0003510:	e8 be fa ff ff       	call   c0002fd3 <create_chain>
c0003515:	89 c6                	mov    esi,eax
c0003517:	b8 07 00 00 00       	mov    eax,0x7
c000351c:	85 f6                	test   esi,esi
c000351e:	74 3d                	je     c000355d <dir_next+0x12a>
c0003520:	83 fe 01             	cmp    esi,0x1
c0003523:	74 c7                	je     c00034ec <dir_next+0xb9>
c0003525:	83 fe ff             	cmp    esi,0xffffffff
c0003528:	74 ce                	je     c00034f8 <dir_next+0xc5>
c000352a:	89 f2                	mov    edx,esi
c000352c:	89 e8                	mov    eax,ebp
c000352e:	e8 e7 fd ff ff       	call   c000331a <dir_clear>
c0003533:	85 c0                	test   eax,eax
c0003535:	75 c1                	jne    c00034f8 <dir_next+0xc5>
c0003537:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c000353b:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c000353e:	89 f2                	mov    edx,esi
c0003540:	89 e8                	mov    eax,ebp
c0003542:	e8 d1 e6 ff ff       	call   c0001c18 <clst2sect>
c0003547:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000354a:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000354d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003551:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c0003554:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c0003558:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000355b:	31 c0                	xor    eax,eax
c000355d:	83 c4 1c             	add    esp,0x1c
c0003560:	5b                   	pop    ebx
c0003561:	5e                   	pop    esi
c0003562:	5f                   	pop    edi
c0003563:	5d                   	pop    ebp
c0003564:	c3                   	ret    

c0003565 <load_xdir>:
c0003565:	55                   	push   ebp
c0003566:	57                   	push   edi
c0003567:	56                   	push   esi
c0003568:	89 c6                	mov    esi,eax
c000356a:	53                   	push   ebx
c000356b:	83 ec 1c             	sub    esp,0x1c
c000356e:	8b 00                	mov    eax,DWORD PTR [eax]
c0003570:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003573:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003576:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003579:	e8 df eb ff ff       	call   c000215d <move_window>
c000357e:	89 c3                	mov    ebx,eax
c0003580:	85 c0                	test   eax,eax
c0003582:	0f 85 0c 01 00 00    	jne    c0003694 <load_xdir+0x12f>
c0003588:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000358b:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c000358e:	0f 85 fb 00 00 00    	jne    c000368f <load_xdir+0x12a>
c0003594:	89 f8                	mov    eax,edi
c0003596:	b9 20 00 00 00       	mov    ecx,0x20
c000359b:	e8 5e e4 ff ff       	call   c00019fe <mem_cpy>
c00035a0:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c00035a4:	40                   	inc    eax
c00035a5:	c1 e0 05             	shl    eax,0x5
c00035a8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00035ac:	83 e8 60             	sub    eax,0x60
c00035af:	3d 00 02 00 00       	cmp    eax,0x200
c00035b4:	0f 87 d5 00 00 00    	ja     c000368f <load_xdir+0x12a>
c00035ba:	31 d2                	xor    edx,edx
c00035bc:	89 f0                	mov    eax,esi
c00035be:	e8 70 fe ff ff       	call   c0003433 <dir_next>
c00035c3:	89 c3                	mov    ebx,eax
c00035c5:	83 f8 04             	cmp    eax,0x4
c00035c8:	0f 84 c1 00 00 00    	je     c000368f <load_xdir+0x12a>
c00035ce:	85 c0                	test   eax,eax
c00035d0:	0f 85 be 00 00 00    	jne    c0003694 <load_xdir+0x12f>
c00035d6:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00035d9:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00035dc:	8b 06                	mov    eax,DWORD PTR [esi]
c00035de:	e8 7a eb ff ff       	call   c000215d <move_window>
c00035e3:	89 c3                	mov    ebx,eax
c00035e5:	85 c0                	test   eax,eax
c00035e7:	0f 85 a7 00 00 00    	jne    c0003694 <load_xdir+0x12f>
c00035ed:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00035f0:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c00035f3:	0f 85 96 00 00 00    	jne    c000368f <load_xdir+0x12a>
c00035f9:	8d 47 20             	lea    eax,[edi+0x20]
c00035fc:	b9 20 00 00 00       	mov    ecx,0x20
c0003601:	e8 f8 e3 ff ff       	call   c00019fe <mem_cpy>
c0003606:	31 d2                	xor    edx,edx
c0003608:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c000360c:	b9 0f 00 00 00       	mov    ecx,0xf
c0003611:	83 c0 2c             	add    eax,0x2c
c0003614:	f7 f1                	div    ecx
c0003616:	c1 e0 05             	shl    eax,0x5
c0003619:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000361d:	77 70                	ja     c000368f <load_xdir+0x12a>
c000361f:	bd 40 00 00 00       	mov    ebp,0x40
c0003624:	31 d2                	xor    edx,edx
c0003626:	89 f0                	mov    eax,esi
c0003628:	e8 06 fe ff ff       	call   c0003433 <dir_next>
c000362d:	89 c3                	mov    ebx,eax
c000362f:	83 f8 04             	cmp    eax,0x4
c0003632:	74 5b                	je     c000368f <load_xdir+0x12a>
c0003634:	85 c0                	test   eax,eax
c0003636:	75 5c                	jne    c0003694 <load_xdir+0x12f>
c0003638:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000363b:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000363e:	8b 06                	mov    eax,DWORD PTR [esi]
c0003640:	e8 18 eb ff ff       	call   c000215d <move_window>
c0003645:	89 c3                	mov    ebx,eax
c0003647:	85 c0                	test   eax,eax
c0003649:	75 49                	jne    c0003694 <load_xdir+0x12f>
c000364b:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000364e:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c0003651:	75 3c                	jne    c000368f <load_xdir+0x12a>
c0003653:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0003659:	77 0d                	ja     c0003668 <load_xdir+0x103>
c000365b:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000365e:	b9 20 00 00 00       	mov    ecx,0x20
c0003663:	e8 96 e3 ff ff       	call   c00019fe <mem_cpy>
c0003668:	83 c5 20             	add    ebp,0x20
c000366b:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c000366f:	77 b3                	ja     c0003624 <load_xdir+0xbf>
c0003671:	81 fd 60 02 00 00    	cmp    ebp,0x260
c0003677:	77 1b                	ja     c0003694 <load_xdir+0x12f>
c0003679:	89 f8                	mov    eax,edi
c000367b:	e8 cd e7 ff ff       	call   c0001e4d <xdir_sum>
c0003680:	89 c1                	mov    ecx,eax
c0003682:	8d 47 02             	lea    eax,[edi+0x2]
c0003685:	e8 f5 e2 ff ff       	call   c000197f <ld_word>
c000368a:	66 39 c1             	cmp    cx,ax
c000368d:	74 05                	je     c0003694 <load_xdir+0x12f>
c000368f:	bb 02 00 00 00       	mov    ebx,0x2
c0003694:	83 c4 1c             	add    esp,0x1c
c0003697:	89 d8                	mov    eax,ebx
c0003699:	5b                   	pop    ebx
c000369a:	5e                   	pop    esi
c000369b:	5f                   	pop    edi
c000369c:	5d                   	pop    ebp
c000369d:	c3                   	ret    

c000369e <load_obj_xdir>:
c000369e:	53                   	push   ebx
c000369f:	89 c3                	mov    ebx,eax
c00036a1:	83 ec 08             	sub    esp,0x8
c00036a4:	8b 02                	mov    eax,DWORD PTR [edx]
c00036a6:	89 03                	mov    DWORD PTR [ebx],eax
c00036a8:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c00036ab:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00036ae:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00036b1:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c00036b4:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00036b7:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00036be:	30 c0                	xor    al,al
c00036c0:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00036c7:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00036ca:	89 d8                	mov    eax,ebx
c00036cc:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c00036cf:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c00036d2:	e8 04 f8 ff ff       	call   c0002edb <dir_sdi>
c00036d7:	85 c0                	test   eax,eax
c00036d9:	75 0b                	jne    c00036e6 <load_obj_xdir+0x48>
c00036db:	89 d8                	mov    eax,ebx
c00036dd:	83 c4 08             	add    esp,0x8
c00036e0:	5b                   	pop    ebx
c00036e1:	e9 7f fe ff ff       	jmp    c0003565 <load_xdir>
c00036e6:	83 c4 08             	add    esp,0x8
c00036e9:	5b                   	pop    ebx
c00036ea:	c3                   	ret    

c00036eb <dir_read>:
c00036eb:	55                   	push   ebp
c00036ec:	bd 04 00 00 00       	mov    ebp,0x4
c00036f1:	57                   	push   edi
c00036f2:	56                   	push   esi
c00036f3:	be ff ff ff ff       	mov    esi,0xffffffff
c00036f8:	53                   	push   ebx
c00036f9:	89 c3                	mov    ebx,eax
c00036fb:	83 ec 1c             	sub    esp,0x1c
c00036fe:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003702:	8b 38                	mov    edi,DWORD PTR [eax]
c0003704:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c0003709:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000370c:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000370f:	89 c8                	mov    eax,ecx
c0003711:	09 d0                	or     eax,edx
c0003713:	0f 84 25 01 00 00    	je     c000383e <dir_read+0x153>
c0003719:	89 f8                	mov    eax,edi
c000371b:	e8 3d ea ff ff       	call   c000215d <move_window>
c0003720:	89 c5                	mov    ebp,eax
c0003722:	85 c0                	test   eax,eax
c0003724:	0f 85 23 01 00 00    	jne    c000384d <dir_read+0x162>
c000372a:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000372d:	8a 0a                	mov    cl,BYTE PTR [edx]
c000372f:	84 c9                	test   cl,cl
c0003731:	0f 84 11 01 00 00    	je     c0003848 <dir_read+0x15d>
c0003737:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c000373a:	75 48                	jne    c0003784 <dir_read+0x99>
c000373c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003741:	74 10                	je     c0003753 <dir_read+0x68>
c0003743:	80 f9 83             	cmp    cl,0x83
c0003746:	0f 85 dd 00 00 00    	jne    c0003829 <dir_read+0x13e>
c000374c:	31 ed                	xor    ebp,ebp
c000374e:	e9 08 01 00 00       	jmp    c000385b <dir_read+0x170>
c0003753:	80 f9 85             	cmp    cl,0x85
c0003756:	0f 85 cd 00 00 00    	jne    c0003829 <dir_read+0x13e>
c000375c:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000375f:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003762:	89 d8                	mov    eax,ebx
c0003764:	e8 fc fd ff ff       	call   c0003565 <load_xdir>
c0003769:	89 c5                	mov    ebp,eax
c000376b:	85 c0                	test   eax,eax
c000376d:	0f 85 da 00 00 00    	jne    c000384d <dir_read+0x162>
c0003773:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003776:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003779:	83 e0 3f             	and    eax,0x3f
c000377c:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000377f:	e9 d7 00 00 00       	jmp    c000385b <dir_read+0x170>
c0003784:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003787:	83 e0 3f             	and    eax,0x3f
c000378a:	80 f9 2e             	cmp    cl,0x2e
c000378d:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003791:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003794:	0f 84 8a 00 00 00    	je     c0003824 <dir_read+0x139>
c000379a:	80 f9 e5             	cmp    cl,0xe5
c000379d:	0f 84 81 00 00 00    	je     c0003824 <dir_read+0x139>
c00037a3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00037a7:	83 e0 1f             	and    eax,0x1f
c00037aa:	83 f8 08             	cmp    eax,0x8
c00037ad:	0f 94 c0             	sete   al
c00037b0:	0f b6 c0             	movzx  eax,al
c00037b3:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00037b7:	75 6b                	jne    c0003824 <dir_read+0x139>
c00037b9:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c00037be:	75 44                	jne    c0003804 <dir_read+0x119>
c00037c0:	f6 c1 40             	test   cl,0x40
c00037c3:	74 12                	je     c00037d7 <dir_read+0xec>
c00037c5:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c00037c8:	83 e1 bf             	and    ecx,0xffffffbf
c00037cb:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00037cf:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00037d2:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c00037d5:	eb 06                	jmp    c00037dd <dir_read+0xf2>
c00037d7:	89 f0                	mov    eax,esi
c00037d9:	38 c8                	cmp    al,cl
c00037db:	75 47                	jne    c0003824 <dir_read+0x139>
c00037dd:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00037e1:	be ff ff ff ff       	mov    esi,0xffffffff
c00037e6:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c00037e9:	75 3e                	jne    c0003829 <dir_read+0x13e>
c00037eb:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00037ef:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00037f2:	e8 8a e4 ff ff       	call   c0001c81 <pick_lfn>
c00037f7:	85 c0                	test   eax,eax
c00037f9:	74 2e                	je     c0003829 <dir_read+0x13e>
c00037fb:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00037ff:	8d 71 ff             	lea    esi,[ecx-0x1]
c0003802:	eb 25                	jmp    c0003829 <dir_read+0x13e>
c0003804:	89 f0                	mov    eax,esi
c0003806:	84 c0                	test   al,al
c0003808:	75 11                	jne    c000381b <dir_read+0x130>
c000380a:	89 d0                	mov    eax,edx
c000380c:	e8 2a e6 ff ff       	call   c0001e3b <sum_sfn>
c0003811:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c0003815:	0f 84 31 ff ff ff    	je     c000374c <dir_read+0x61>
c000381b:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003822:	eb 37                	jmp    c000385b <dir_read+0x170>
c0003824:	be ff ff ff ff       	mov    esi,0xffffffff
c0003829:	31 d2                	xor    edx,edx
c000382b:	89 d8                	mov    eax,ebx
c000382d:	e8 01 fc ff ff       	call   c0003433 <dir_next>
c0003832:	89 c5                	mov    ebp,eax
c0003834:	85 c0                	test   eax,eax
c0003836:	0f 84 cd fe ff ff    	je     c0003709 <dir_read+0x1e>
c000383c:	eb 0f                	jmp    c000384d <dir_read+0x162>
c000383e:	85 ed                	test   ebp,ebp
c0003840:	0f 84 06 ff ff ff    	je     c000374c <dir_read+0x61>
c0003846:	eb 05                	jmp    c000384d <dir_read+0x162>
c0003848:	bd 04 00 00 00       	mov    ebp,0x4
c000384d:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003854:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000385b:	83 c4 1c             	add    esp,0x1c
c000385e:	89 e8                	mov    eax,ebp
c0003860:	5b                   	pop    ebx
c0003861:	5e                   	pop    esi
c0003862:	5f                   	pop    edi
c0003863:	5d                   	pop    ebp
c0003864:	c3                   	ret    

c0003865 <dir_alloc>:
c0003865:	55                   	push   ebp
c0003866:	89 d5                	mov    ebp,edx
c0003868:	57                   	push   edi
c0003869:	31 d2                	xor    edx,edx
c000386b:	56                   	push   esi
c000386c:	53                   	push   ebx
c000386d:	89 c3                	mov    ebx,eax
c000386f:	83 ec 0c             	sub    esp,0xc
c0003872:	8b 38                	mov    edi,DWORD PTR [eax]
c0003874:	e8 62 f6 ff ff       	call   c0002edb <dir_sdi>
c0003879:	85 c0                	test   eax,eax
c000387b:	75 4e                	jne    c00038cb <dir_alloc+0x66>
c000387d:	31 f6                	xor    esi,esi
c000387f:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003882:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003885:	89 f8                	mov    eax,edi
c0003887:	e8 d1 e8 ff ff       	call   c000215d <move_window>
c000388c:	85 c0                	test   eax,eax
c000388e:	75 3b                	jne    c00038cb <dir_alloc+0x66>
c0003890:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003893:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003896:	8a 12                	mov    dl,BYTE PTR [edx]
c0003898:	75 07                	jne    c00038a1 <dir_alloc+0x3c>
c000389a:	f7 d2                	not    edx
c000389c:	c0 ea 07             	shr    dl,0x7
c000389f:	eb 0d                	jmp    c00038ae <dir_alloc+0x49>
c00038a1:	84 d2                	test   dl,dl
c00038a3:	0f 94 c1             	sete   cl
c00038a6:	80 fa e5             	cmp    dl,0xe5
c00038a9:	0f 94 c2             	sete   dl
c00038ac:	09 ca                	or     edx,ecx
c00038ae:	84 d2                	test   dl,dl
c00038b0:	74 07                	je     c00038b9 <dir_alloc+0x54>
c00038b2:	46                   	inc    esi
c00038b3:	39 ee                	cmp    esi,ebp
c00038b5:	75 04                	jne    c00038bb <dir_alloc+0x56>
c00038b7:	eb 1c                	jmp    c00038d5 <dir_alloc+0x70>
c00038b9:	31 f6                	xor    esi,esi
c00038bb:	ba 01 00 00 00       	mov    edx,0x1
c00038c0:	89 d8                	mov    eax,ebx
c00038c2:	e8 6c fb ff ff       	call   c0003433 <dir_next>
c00038c7:	85 c0                	test   eax,eax
c00038c9:	74 b4                	je     c000387f <dir_alloc+0x1a>
c00038cb:	83 f8 04             	cmp    eax,0x4
c00038ce:	75 05                	jne    c00038d5 <dir_alloc+0x70>
c00038d0:	b8 07 00 00 00       	mov    eax,0x7
c00038d5:	83 c4 0c             	add    esp,0xc
c00038d8:	5b                   	pop    ebx
c00038d9:	5e                   	pop    esi
c00038da:	5f                   	pop    edi
c00038db:	5d                   	pop    ebp
c00038dc:	c3                   	ret    

c00038dd <store_xdir>:
c00038dd:	55                   	push   ebp
c00038de:	57                   	push   edi
c00038df:	89 c7                	mov    edi,eax
c00038e1:	56                   	push   esi
c00038e2:	53                   	push   ebx
c00038e3:	83 ec 0c             	sub    esp,0xc
c00038e6:	8b 00                	mov    eax,DWORD PTR [eax]
c00038e8:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c00038eb:	89 e8                	mov    eax,ebp
c00038ed:	e8 5b e5 ff ff       	call   c0001e4d <xdir_sum>
c00038f2:	0f b7 d0             	movzx  edx,ax
c00038f5:	8d 45 02             	lea    eax,[ebp+0x2]
c00038f8:	e8 f4 e0 ff ff       	call   c00019f1 <st_word>
c00038fd:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003901:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003904:	89 f8                	mov    eax,edi
c0003906:	e8 d0 f5 ff ff       	call   c0002edb <dir_sdi>
c000390b:	89 c6                	mov    esi,eax
c000390d:	85 f6                	test   esi,esi
c000390f:	75 3d                	jne    c000394e <store_xdir+0x71>
c0003911:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003914:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003917:	8b 07                	mov    eax,DWORD PTR [edi]
c0003919:	e8 3f e8 ff ff       	call   c000215d <move_window>
c000391e:	89 c6                	mov    esi,eax
c0003920:	85 c0                	test   eax,eax
c0003922:	75 2a                	jne    c000394e <store_xdir+0x71>
c0003924:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003927:	b9 20 00 00 00       	mov    ecx,0x20
c000392c:	89 ea                	mov    edx,ebp
c000392e:	e8 cb e0 ff ff       	call   c00019fe <mem_cpy>
c0003933:	8b 07                	mov    eax,DWORD PTR [edi]
c0003935:	85 db                	test   ebx,ebx
c0003937:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000393b:	74 11                	je     c000394e <store_xdir+0x71>
c000393d:	31 d2                	xor    edx,edx
c000393f:	89 f8                	mov    eax,edi
c0003941:	83 c5 20             	add    ebp,0x20
c0003944:	e8 ea fa ff ff       	call   c0003433 <dir_next>
c0003949:	4b                   	dec    ebx
c000394a:	89 c6                	mov    esi,eax
c000394c:	eb bf                	jmp    c000390d <store_xdir+0x30>
c000394e:	89 f0                	mov    eax,esi
c0003950:	83 fe 02             	cmp    esi,0x2
c0003953:	76 05                	jbe    c000395a <store_xdir+0x7d>
c0003955:	b8 02 00 00 00       	mov    eax,0x2
c000395a:	83 c4 0c             	add    esp,0xc
c000395d:	5b                   	pop    ebx
c000395e:	5e                   	pop    esi
c000395f:	5f                   	pop    edi
c0003960:	5d                   	pop    ebp
c0003961:	c3                   	ret    

c0003962 <dir_remove>:
c0003962:	57                   	push   edi
c0003963:	56                   	push   esi
c0003964:	53                   	push   ebx
c0003965:	89 c3                	mov    ebx,eax
c0003967:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c000396a:	8b 30                	mov    esi,DWORD PTR [eax]
c000396c:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c000396f:	83 fa ff             	cmp    edx,0xffffffff
c0003972:	74 09                	je     c000397d <dir_remove+0x1b>
c0003974:	e8 62 f5 ff ff       	call   c0002edb <dir_sdi>
c0003979:	85 c0                	test   eax,eax
c000397b:	75 41                	jne    c00039be <dir_remove+0x5c>
c000397d:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003980:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003983:	89 f0                	mov    eax,esi
c0003985:	e8 d3 e7 ff ff       	call   c000215d <move_window>
c000398a:	85 c0                	test   eax,eax
c000398c:	75 26                	jne    c00039b4 <dir_remove+0x52>
c000398e:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003991:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003994:	75 05                	jne    c000399b <dir_remove+0x39>
c0003996:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003999:	eb 03                	jmp    c000399e <dir_remove+0x3c>
c000399b:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c000399e:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c00039a2:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c00039a5:	73 17                	jae    c00039be <dir_remove+0x5c>
c00039a7:	31 d2                	xor    edx,edx
c00039a9:	89 d8                	mov    eax,ebx
c00039ab:	e8 83 fa ff ff       	call   c0003433 <dir_next>
c00039b0:	85 c0                	test   eax,eax
c00039b2:	74 c9                	je     c000397d <dir_remove+0x1b>
c00039b4:	83 f8 04             	cmp    eax,0x4
c00039b7:	75 05                	jne    c00039be <dir_remove+0x5c>
c00039b9:	b8 02 00 00 00       	mov    eax,0x2
c00039be:	5b                   	pop    ebx
c00039bf:	5e                   	pop    esi
c00039c0:	5f                   	pop    edi
c00039c1:	c3                   	ret    

c00039c2 <create_name>:
c00039c2:	55                   	push   ebp
c00039c3:	89 d5                	mov    ebp,edx
c00039c5:	57                   	push   edi
c00039c6:	89 c7                	mov    edi,eax
c00039c8:	56                   	push   esi
c00039c9:	31 f6                	xor    esi,esi
c00039cb:	53                   	push   ebx
c00039cc:	83 ec 3c             	sub    esp,0x3c
c00039cf:	8b 02                	mov    eax,DWORD PTR [edx]
c00039d1:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00039d5:	8b 07                	mov    eax,DWORD PTR [edi]
c00039d7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00039da:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00039de:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00039e2:	e8 72 e0 ff ff       	call   c0001a59 <tchar2uni>
c00039e7:	89 c3                	mov    ebx,eax
c00039e9:	83 f8 ff             	cmp    eax,0xffffffff
c00039ec:	75 0a                	jne    c00039f8 <create_name+0x36>
c00039ee:	b8 06 00 00 00       	mov    eax,0x6
c00039f3:	e9 9e 02 00 00       	jmp    c0003c96 <create_name+0x2d4>
c00039f8:	3d ff ff 00 00       	cmp    eax,0xffff
c00039fd:	76 0c                	jbe    c0003a0b <create_name+0x49>
c00039ff:	c1 e8 10             	shr    eax,0x10
c0003a02:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003a06:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003a0a:	46                   	inc    esi
c0003a0b:	66 83 fb 1f          	cmp    bx,0x1f
c0003a0f:	76 4f                	jbe    c0003a60 <create_name+0x9e>
c0003a11:	66 83 fb 5c          	cmp    bx,0x5c
c0003a15:	74 35                	je     c0003a4c <create_name+0x8a>
c0003a17:	66 83 fb 2f          	cmp    bx,0x2f
c0003a1b:	74 2f                	je     c0003a4c <create_name+0x8a>
c0003a1d:	66 83 fb 7f          	cmp    bx,0x7f
c0003a21:	77 11                	ja     c0003a34 <create_name+0x72>
c0003a23:	0f b7 d3             	movzx  edx,bx
c0003a26:	b8 d2 23 02 c0       	mov    eax,0xc00223d2
c0003a2b:	e8 11 e0 ff ff       	call   c0001a41 <chk_chr>
c0003a30:	85 c0                	test   eax,eax
c0003a32:	75 ba                	jne    c00039ee <create_name+0x2c>
c0003a34:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003a3a:	77 b2                	ja     c00039ee <create_name+0x2c>
c0003a3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003a40:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003a44:	46                   	inc    esi
c0003a45:	eb 97                	jmp    c00039de <create_name+0x1c>
c0003a47:	40                   	inc    eax
c0003a48:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003a4c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003a50:	8a 10                	mov    dl,BYTE PTR [eax]
c0003a52:	80 fa 2f             	cmp    dl,0x2f
c0003a55:	74 f0                	je     c0003a47 <create_name+0x85>
c0003a57:	80 fa 5c             	cmp    dl,0x5c
c0003a5a:	74 eb                	je     c0003a47 <create_name+0x85>
c0003a5c:	31 db                	xor    ebx,ebx
c0003a5e:	eb 02                	jmp    c0003a62 <create_name+0xa0>
c0003a60:	b3 04                	mov    bl,0x4
c0003a62:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003a66:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003a69:	85 f6                	test   esi,esi
c0003a6b:	74 18                	je     c0003a85 <create_name+0xc3>
c0003a6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003a71:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003a76:	66 83 f8 20          	cmp    ax,0x20
c0003a7a:	74 06                	je     c0003a82 <create_name+0xc0>
c0003a7c:	66 83 f8 2e          	cmp    ax,0x2e
c0003a80:	75 03                	jne    c0003a85 <create_name+0xc3>
c0003a82:	4e                   	dec    esi
c0003a83:	eb e4                	jmp    c0003a69 <create_name+0xa7>
c0003a85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003a89:	31 ed                	xor    ebp,ebp
c0003a8b:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003a91:	85 f6                	test   esi,esi
c0003a93:	0f 84 55 ff ff ff    	je     c00039ee <create_name+0x2c>
c0003a99:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003a9d:	8d 55 01             	lea    edx,[ebp+0x1]
c0003aa0:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003aa4:	66 83 f8 20          	cmp    ax,0x20
c0003aa8:	75 04                	jne    c0003aae <create_name+0xec>
c0003aaa:	89 d5                	mov    ebp,edx
c0003aac:	eb eb                	jmp    c0003a99 <create_name+0xd7>
c0003aae:	85 ed                	test   ebp,ebp
c0003ab0:	75 06                	jne    c0003ab8 <create_name+0xf6>
c0003ab2:	66 83 f8 2e          	cmp    ax,0x2e
c0003ab6:	75 08                	jne    c0003ac0 <create_name+0xfe>
c0003ab8:	83 cb 03             	or     ebx,0x3
c0003abb:	eb 03                	jmp    c0003ac0 <create_name+0xfe>
c0003abd:	4e                   	dec    esi
c0003abe:	74 0c                	je     c0003acc <create_name+0x10a>
c0003ac0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003ac4:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003aca:	75 f1                	jne    c0003abd <create_name+0xfb>
c0003acc:	b9 0b 00 00 00       	mov    ecx,0xb
c0003ad1:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003ad4:	ba 20 00 00 00       	mov    edx,0x20
c0003ad9:	e8 35 df ff ff       	call   c0001a13 <mem_set>
c0003ade:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003ae6:	31 c9                	xor    ecx,ecx
c0003ae8:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003aed:	8d 45 01             	lea    eax,[ebp+0x1]
c0003af0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003af4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003af8:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003afc:	66 85 ed             	test   bp,bp
c0003aff:	0f 84 30 01 00 00    	je     c0003c35 <create_name+0x273>
c0003b05:	66 83 fd 20          	cmp    bp,0x20
c0003b09:	74 10                	je     c0003b1b <create_name+0x159>
c0003b0b:	66 83 fd 2e          	cmp    bp,0x2e
c0003b0f:	75 13                	jne    c0003b24 <create_name+0x162>
c0003b11:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003b15:	0f 84 6b 01 00 00    	je     c0003c86 <create_name+0x2c4>
c0003b1b:	83 cb 03             	or     ebx,0x3
c0003b1e:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003b22:	eb c9                	jmp    c0003aed <create_name+0x12b>
c0003b24:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003b28:	73 0b                	jae    c0003b35 <create_name+0x173>
c0003b2a:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003b2e:	75 47                	jne    c0003b77 <create_name+0x1b5>
c0003b30:	e9 51 01 00 00       	jmp    c0003c86 <create_name+0x2c4>
c0003b35:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003b3a:	75 10                	jne    c0003b4c <create_name+0x18a>
c0003b3c:	83 cb 03             	or     ebx,0x3
c0003b3f:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003b47:	e9 e9 00 00 00       	jmp    c0003c35 <create_name+0x273>
c0003b4c:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003b50:	74 0d                	je     c0003b5f <create_name+0x19d>
c0003b52:	83 cb 03             	or     ebx,0x3
c0003b55:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003b59:	0f 87 d6 00 00 00    	ja     c0003c35 <create_name+0x273>
c0003b5f:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003b64:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003b68:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003b70:	b9 08 00 00 00       	mov    ecx,0x8
c0003b75:	eb a7                	jmp    c0003b1e <create_name+0x15c>
c0003b77:	66 83 fd 7f          	cmp    bp,0x7f
c0003b7b:	76 68                	jbe    c0003be5 <create_name+0x223>
c0003b7d:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003b81:	88 da                	mov    dl,bl
c0003b83:	83 ca 02             	or     edx,0x2
c0003b86:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003b8a:	50                   	push   eax
c0003b8b:	50                   	push   eax
c0003b8c:	68 b5 01 00 00       	push   0x1b5
c0003b91:	55                   	push   ebp
c0003b92:	e8 81 48 00 00       	call   c0008418 <ff_uni2oem>
c0003b97:	83 c4 10             	add    esp,0x10
c0003b9a:	89 c5                	mov    ebp,eax
c0003b9c:	a8 80                	test   al,0x80
c0003b9e:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003ba2:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003ba6:	74 0c                	je     c0003bb4 <create_name+0x1f2>
c0003ba8:	83 e5 7f             	and    ebp,0x7f
c0003bab:	0f b6 ad 20 23 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffddce0]
c0003bb2:	eb 2a                	jmp    c0003bde <create_name+0x21c>
c0003bb4:	66 3d ff 00          	cmp    ax,0xff
c0003bb8:	76 24                	jbe    c0003bde <create_name+0x21c>
c0003bba:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003bbe:	48                   	dec    eax
c0003bbf:	39 c8                	cmp    eax,ecx
c0003bc1:	77 0c                	ja     c0003bcf <create_name+0x20d>
c0003bc3:	83 cb 03             	or     ebx,0x3
c0003bc6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003bca:	e9 4f ff ff ff       	jmp    c0003b1e <create_name+0x15c>
c0003bcf:	89 e8                	mov    eax,ebp
c0003bd1:	88 d3                	mov    bl,dl
c0003bd3:	66 c1 e8 08          	shr    ax,0x8
c0003bd7:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003bdb:	41                   	inc    ecx
c0003bdc:	eb 4b                	jmp    c0003c29 <create_name+0x267>
c0003bde:	88 d3                	mov    bl,dl
c0003be0:	66 85 ed             	test   bp,bp
c0003be3:	74 19                	je     c0003bfe <create_name+0x23c>
c0003be5:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003be9:	0f b7 d5             	movzx  edx,bp
c0003bec:	b8 db 23 02 c0       	mov    eax,0xc00223db
c0003bf1:	e8 4b de ff ff       	call   c0001a41 <chk_chr>
c0003bf6:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003bfa:	85 c0                	test   eax,eax
c0003bfc:	74 0a                	je     c0003c08 <create_name+0x246>
c0003bfe:	83 cb 03             	or     ebx,0x3
c0003c01:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003c06:	eb 21                	jmp    c0003c29 <create_name+0x267>
c0003c08:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003c0b:	66 83 f8 19          	cmp    ax,0x19
c0003c0f:	77 07                	ja     c0003c18 <create_name+0x256>
c0003c11:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003c16:	eb 11                	jmp    c0003c29 <create_name+0x267>
c0003c18:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003c1b:	66 83 f8 19          	cmp    ax,0x19
c0003c1f:	77 08                	ja     c0003c29 <create_name+0x267>
c0003c21:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003c26:	83 ed 20             	sub    ebp,0x20
c0003c29:	89 e8                	mov    eax,ebp
c0003c2b:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003c2f:	41                   	inc    ecx
c0003c30:	e9 e9 fe ff ff       	jmp    c0003b1e <create_name+0x15c>
c0003c35:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003c39:	75 04                	jne    c0003c3f <create_name+0x27d>
c0003c3b:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003c3f:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003c44:	75 05                	jne    c0003c4b <create_name+0x289>
c0003c46:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003c4b:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003c4f:	83 e0 0c             	and    eax,0xc
c0003c52:	3c 0c                	cmp    al,0xc
c0003c54:	74 0b                	je     c0003c61 <create_name+0x29f>
c0003c56:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003c5a:	83 e0 03             	and    eax,0x3
c0003c5d:	3c 03                	cmp    al,0x3
c0003c5f:	75 05                	jne    c0003c66 <create_name+0x2a4>
c0003c61:	83 cb 02             	or     ebx,0x2
c0003c64:	eb 19                	jmp    c0003c7f <create_name+0x2bd>
c0003c66:	f6 c3 02             	test   bl,0x2
c0003c69:	75 14                	jne    c0003c7f <create_name+0x2bd>
c0003c6b:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003c70:	74 03                	je     c0003c75 <create_name+0x2b3>
c0003c72:	83 cb 10             	or     ebx,0x10
c0003c75:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003c7a:	74 03                	je     c0003c7f <create_name+0x2bd>
c0003c7c:	83 cb 08             	or     ebx,0x8
c0003c7f:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003c82:	31 c0                	xor    eax,eax
c0003c84:	eb 10                	jmp    c0003c96 <create_name+0x2d4>
c0003c86:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003c8b:	0f 85 ce fe ff ff    	jne    c0003b5f <create_name+0x19d>
c0003c91:	e9 a6 fe ff ff       	jmp    c0003b3c <create_name+0x17a>
c0003c96:	83 c4 3c             	add    esp,0x3c
c0003c99:	5b                   	pop    ebx
c0003c9a:	5e                   	pop    esi
c0003c9b:	5f                   	pop    edi
c0003c9c:	5d                   	pop    ebp
c0003c9d:	c3                   	ret    

c0003c9e <xname_sum>:
c0003c9e:	56                   	push   esi
c0003c9f:	53                   	push   ebx
c0003ca0:	89 c6                	mov    esi,eax
c0003ca2:	51                   	push   ecx
c0003ca3:	31 db                	xor    ebx,ebx
c0003ca5:	83 c6 02             	add    esi,0x2
c0003ca8:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003cac:	66 85 c0             	test   ax,ax
c0003caf:	74 1f                	je     c0003cd0 <xname_sum+0x32>
c0003cb1:	83 ec 0c             	sub    esp,0xc
c0003cb4:	66 d1 cb             	ror    bx,1
c0003cb7:	50                   	push   eax
c0003cb8:	e8 67 48 00 00       	call   c0008524 <ff_wtoupper>
c0003cbd:	83 c4 10             	add    esp,0x10
c0003cc0:	0f b6 d0             	movzx  edx,al
c0003cc3:	66 c1 e8 08          	shr    ax,0x8
c0003cc7:	01 d3                	add    ebx,edx
c0003cc9:	66 d1 cb             	ror    bx,1
c0003ccc:	01 c3                	add    ebx,eax
c0003cce:	eb d5                	jmp    c0003ca5 <xname_sum+0x7>
c0003cd0:	89 d8                	mov    eax,ebx
c0003cd2:	5a                   	pop    edx
c0003cd3:	5b                   	pop    ebx
c0003cd4:	5e                   	pop    esi
c0003cd5:	c3                   	ret    

c0003cd6 <create_xdir>:
c0003cd6:	55                   	push   ebp
c0003cd7:	b9 40 00 00 00       	mov    ecx,0x40
c0003cdc:	57                   	push   edi
c0003cdd:	bd 01 00 00 00       	mov    ebp,0x1
c0003ce2:	56                   	push   esi
c0003ce3:	31 ff                	xor    edi,edi
c0003ce5:	53                   	push   ebx
c0003ce6:	be 40 00 00 00       	mov    esi,0x40
c0003ceb:	89 c3                	mov    ebx,eax
c0003ced:	83 ec 1c             	sub    esp,0x1c
c0003cf0:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003cf4:	31 d2                	xor    edx,edx
c0003cf6:	e8 18 dd ff ff       	call   c0001a13 <mem_set>
c0003cfb:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003cfe:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003d02:	31 c9                	xor    ecx,ecx
c0003d04:	8d 46 01             	lea    eax,[esi+0x1]
c0003d07:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003d0b:	83 c6 02             	add    esi,0x2
c0003d0e:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003d12:	66 85 ed             	test   bp,bp
c0003d15:	74 12                	je     c0003d29 <create_xdir+0x53>
c0003d17:	0f b6 c1             	movzx  eax,cl
c0003d1a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003d1e:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0003d22:	66 83 fd 01          	cmp    bp,0x1
c0003d26:	80 d9 ff             	sbb    cl,0xff
c0003d29:	8d 04 33             	lea    eax,[ebx+esi*1]
c0003d2c:	0f b7 d5             	movzx  edx,bp
c0003d2f:	83 c6 02             	add    esi,0x2
c0003d32:	e8 ba dc ff ff       	call   c00019f1 <st_word>
c0003d37:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0003d3d:	75 d3                	jne    c0003d12 <create_xdir+0x3c>
c0003d3f:	8d 47 01             	lea    eax,[edi+0x1]
c0003d42:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003d46:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0003d4a:	0f b6 c1             	movzx  eax,cl
c0003d4d:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0003d52:	74 07                	je     c0003d5b <create_xdir+0x85>
c0003d54:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c0003d59:	eb a9                	jmp    c0003d04 <create_xdir+0x2e>
c0003d5b:	8d 47 02             	lea    eax,[edi+0x2]
c0003d5e:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0003d61:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c0003d64:	89 d0                	mov    eax,edx
c0003d66:	e8 33 ff ff ff       	call   c0003c9e <xname_sum>
c0003d6b:	83 c4 1c             	add    esp,0x1c
c0003d6e:	0f b7 d0             	movzx  edx,ax
c0003d71:	8d 43 24             	lea    eax,[ebx+0x24]
c0003d74:	5b                   	pop    ebx
c0003d75:	5e                   	pop    esi
c0003d76:	5f                   	pop    edi
c0003d77:	5d                   	pop    ebp
c0003d78:	e9 74 dc ff ff       	jmp    c00019f1 <st_word>

c0003d7d <cmp_lfn>:
c0003d7d:	55                   	push   ebp
c0003d7e:	57                   	push   edi
c0003d7f:	89 d7                	mov    edi,edx
c0003d81:	56                   	push   esi
c0003d82:	53                   	push   ebx
c0003d83:	83 ec 1c             	sub    esp,0x1c
c0003d86:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003d8a:	8d 42 1a             	lea    eax,[edx+0x1a]
c0003d8d:	e8 ed db ff ff       	call   c000197f <ld_word>
c0003d92:	66 85 c0             	test   ax,ax
c0003d95:	74 07                	je     c0003d9e <cmp_lfn+0x21>
c0003d97:	31 c0                	xor    eax,eax
c0003d99:	e9 9a 00 00 00       	jmp    c0003e38 <cmp_lfn+0xbb>
c0003d9e:	8a 1f                	mov    bl,BYTE PTR [edi]
c0003da0:	bd 01 00 00 00       	mov    ebp,0x1
c0003da5:	83 e3 3f             	and    ebx,0x3f
c0003da8:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0003db0:	4b                   	dec    ebx
c0003db1:	6b db 0d             	imul   ebx,ebx,0xd
c0003db4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003db8:	0f b6 80 a0 23 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffddc60]
c0003dbf:	01 f8                	add    eax,edi
c0003dc1:	e8 b9 db ff ff       	call   c000197f <ld_word>
c0003dc6:	66 85 ed             	test   bp,bp
c0003dc9:	89 c6                	mov    esi,eax
c0003dcb:	74 3c                	je     c0003e09 <cmp_lfn+0x8c>
c0003dcd:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0003dd3:	77 c2                	ja     c0003d97 <cmp_lfn+0x1a>
c0003dd5:	83 ec 0c             	sub    esp,0xc
c0003dd8:	0f b7 c0             	movzx  eax,ax
c0003ddb:	50                   	push   eax
c0003ddc:	e8 43 47 00 00       	call   c0008524 <ff_wtoupper>
c0003de1:	89 c5                	mov    ebp,eax
c0003de3:	8d 43 01             	lea    eax,[ebx+0x1]
c0003de6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0003dea:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0003dee:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0003df2:	89 04 24             	mov    DWORD PTR [esp],eax
c0003df5:	e8 2a 47 00 00       	call   c0008524 <ff_wtoupper>
c0003dfa:	83 c4 10             	add    esp,0x10
c0003dfd:	39 c5                	cmp    ebp,eax
c0003dff:	75 96                	jne    c0003d97 <cmp_lfn+0x1a>
c0003e01:	89 f5                	mov    ebp,esi
c0003e03:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0003e07:	eb 04                	jmp    c0003e0d <cmp_lfn+0x90>
c0003e09:	66 46                	inc    si
c0003e0b:	75 8a                	jne    c0003d97 <cmp_lfn+0x1a>
c0003e0d:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0003e11:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0003e16:	75 9c                	jne    c0003db4 <cmp_lfn+0x37>
c0003e18:	f6 07 40             	test   BYTE PTR [edi],0x40
c0003e1b:	74 16                	je     c0003e33 <cmp_lfn+0xb6>
c0003e1d:	66 85 ed             	test   bp,bp
c0003e20:	74 11                	je     c0003e33 <cmp_lfn+0xb6>
c0003e22:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003e26:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0003e2b:	0f 94 c0             	sete   al
c0003e2e:	0f b6 c0             	movzx  eax,al
c0003e31:	eb 05                	jmp    c0003e38 <cmp_lfn+0xbb>
c0003e33:	b8 01 00 00 00       	mov    eax,0x1
c0003e38:	83 c4 1c             	add    esp,0x1c
c0003e3b:	5b                   	pop    ebx
c0003e3c:	5e                   	pop    esi
c0003e3d:	5f                   	pop    edi
c0003e3e:	5d                   	pop    ebp
c0003e3f:	c3                   	ret    

c0003e40 <dir_find>:
c0003e40:	55                   	push   ebp
c0003e41:	31 d2                	xor    edx,edx
c0003e43:	57                   	push   edi
c0003e44:	56                   	push   esi
c0003e45:	53                   	push   ebx
c0003e46:	89 c3                	mov    ebx,eax
c0003e48:	83 ec 1c             	sub    esp,0x1c
c0003e4b:	8b 30                	mov    esi,DWORD PTR [eax]
c0003e4d:	e8 89 f0 ff ff       	call   c0002edb <dir_sdi>
c0003e52:	89 04 24             	mov    DWORD PTR [esp],eax
c0003e55:	85 c0                	test   eax,eax
c0003e57:	0f 85 9e 01 00 00    	jne    c0003ffb <dir_find+0x1bb>
c0003e5d:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003e60:	0f 85 8d 00 00 00    	jne    c0003ef3 <dir_find+0xb3>
c0003e66:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003e69:	e8 30 fe ff ff       	call   c0003c9e <xname_sum>
c0003e6e:	89 c7                	mov    edi,eax
c0003e70:	31 d2                	xor    edx,edx
c0003e72:	89 d8                	mov    eax,ebx
c0003e74:	e8 72 f8 ff ff       	call   c00036eb <dir_read>
c0003e79:	85 c0                	test   eax,eax
c0003e7b:	0f 85 5e 01 00 00    	jne    c0003fdf <dir_find+0x19f>
c0003e81:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c0003e84:	8d 41 24             	lea    eax,[ecx+0x24]
c0003e87:	e8 f3 da ff ff       	call   c000197f <ld_word>
c0003e8c:	66 39 f8             	cmp    ax,di
c0003e8f:	75 df                	jne    c0003e70 <dir_find+0x30>
c0003e91:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c0003e94:	31 ed                	xor    ebp,ebp
c0003e96:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0003e9a:	ba 40 00 00 00       	mov    edx,0x40
c0003e9f:	89 e9                	mov    ecx,ebp
c0003ea1:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c0003ea5:	0f 84 42 01 00 00    	je     c0003fed <dir_find+0x1ad>
c0003eab:	f6 c2 1f             	test   dl,0x1f
c0003eae:	75 03                	jne    c0003eb3 <dir_find+0x73>
c0003eb0:	83 c2 02             	add    edx,0x2
c0003eb3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003eb7:	89 d0                	mov    eax,edx
c0003eb9:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0003ebc:	e8 be da ff ff       	call   c000197f <ld_word>
c0003ec1:	83 ec 0c             	sub    esp,0xc
c0003ec4:	0f b7 c0             	movzx  eax,ax
c0003ec7:	50                   	push   eax
c0003ec8:	e8 57 46 00 00       	call   c0008524 <ff_wtoupper>
c0003ecd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003ed1:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003ed4:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c0003ed8:	89 04 24             	mov    DWORD PTR [esp],eax
c0003edb:	e8 44 46 00 00       	call   c0008524 <ff_wtoupper>
c0003ee0:	83 c4 10             	add    esp,0x10
c0003ee3:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c0003ee7:	75 87                	jne    c0003e70 <dir_find+0x30>
c0003ee9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003eed:	45                   	inc    ebp
c0003eee:	83 c2 02             	add    edx,0x2
c0003ef1:	eb ac                	jmp    c0003e9f <dir_find+0x5f>
c0003ef3:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003efa:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c0003eff:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003f04:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003f07:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003f0a:	89 f0                	mov    eax,esi
c0003f0c:	e8 4c e2 ff ff       	call   c000215d <move_window>
c0003f11:	85 c0                	test   eax,eax
c0003f13:	0f 85 c6 00 00 00    	jne    c0003fdf <dir_find+0x19f>
c0003f19:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c0003f1c:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c0003f1f:	84 c9                	test   cl,cl
c0003f21:	0f 84 bd 00 00 00    	je     c0003fe4 <dir_find+0x1a4>
c0003f27:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c0003f2a:	88 d0                	mov    al,dl
c0003f2c:	83 e0 3f             	and    eax,0x3f
c0003f2f:	80 f9 e5             	cmp    cl,0xe5
c0003f32:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003f35:	0f 84 87 00 00 00    	je     c0003fc2 <dir_find+0x182>
c0003f3b:	80 e2 08             	and    dl,0x8
c0003f3e:	74 06                	je     c0003f46 <dir_find+0x106>
c0003f40:	3c 0f                	cmp    al,0xf
c0003f42:	75 7e                	jne    c0003fc2 <dir_find+0x182>
c0003f44:	eb 04                	jmp    c0003f4a <dir_find+0x10a>
c0003f46:	3c 0f                	cmp    al,0xf
c0003f48:	75 4c                	jne    c0003f96 <dir_find+0x156>
c0003f4a:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c0003f4e:	75 7e                	jne    c0003fce <dir_find+0x18e>
c0003f50:	f6 c1 40             	test   cl,0x40
c0003f53:	74 12                	je     c0003f67 <dir_find+0x127>
c0003f55:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0003f58:	83 e1 bf             	and    ecx,0xffffffbf
c0003f5b:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0003f5f:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003f62:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003f65:	eb 06                	jmp    c0003f6d <dir_find+0x12d>
c0003f67:	89 f8                	mov    eax,edi
c0003f69:	38 c8                	cmp    al,cl
c0003f6b:	75 5c                	jne    c0003fc9 <dir_find+0x189>
c0003f6d:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0003f71:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003f76:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0003f79:	75 53                	jne    c0003fce <dir_find+0x18e>
c0003f7b:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0003f7f:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003f82:	89 ea                	mov    edx,ebp
c0003f84:	e8 f4 fd ff ff       	call   c0003d7d <cmp_lfn>
c0003f89:	85 c0                	test   eax,eax
c0003f8b:	74 41                	je     c0003fce <dir_find+0x18e>
c0003f8d:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c0003f91:	8d 79 ff             	lea    edi,[ecx-0x1]
c0003f94:	eb 38                	jmp    c0003fce <dir_find+0x18e>
c0003f96:	89 f8                	mov    eax,edi
c0003f98:	84 c0                	test   al,al
c0003f9a:	75 0d                	jne    c0003fa9 <dir_find+0x169>
c0003f9c:	89 e8                	mov    eax,ebp
c0003f9e:	e8 98 de ff ff       	call   c0001e3b <sum_sfn>
c0003fa3:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c0003fa7:	74 52                	je     c0003ffb <dir_find+0x1bb>
c0003fa9:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c0003fad:	75 13                	jne    c0003fc2 <dir_find+0x182>
c0003faf:	8d 53 3c             	lea    edx,[ebx+0x3c]
c0003fb2:	b9 0b 00 00 00       	mov    ecx,0xb
c0003fb7:	89 e8                	mov    eax,ebp
c0003fb9:	e8 60 da ff ff       	call   c0001a1e <mem_cmp>
c0003fbe:	85 c0                	test   eax,eax
c0003fc0:	74 39                	je     c0003ffb <dir_find+0x1bb>
c0003fc2:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003fc9:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003fce:	31 d2                	xor    edx,edx
c0003fd0:	89 d8                	mov    eax,ebx
c0003fd2:	e8 5c f4 ff ff       	call   c0003433 <dir_next>
c0003fd7:	85 c0                	test   eax,eax
c0003fd9:	0f 84 25 ff ff ff    	je     c0003f04 <dir_find+0xc4>
c0003fdf:	89 04 24             	mov    DWORD PTR [esp],eax
c0003fe2:	eb 17                	jmp    c0003ffb <dir_find+0x1bb>
c0003fe4:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0003feb:	eb 0e                	jmp    c0003ffb <dir_find+0x1bb>
c0003fed:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003ff0:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c0003ff5:	0f 85 75 fe ff ff    	jne    c0003e70 <dir_find+0x30>
c0003ffb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0003ffe:	83 c4 1c             	add    esp,0x1c
c0004001:	5b                   	pop    ebx
c0004002:	5e                   	pop    esi
c0004003:	5f                   	pop    edi
c0004004:	5d                   	pop    ebp
c0004005:	c3                   	ret    

c0004006 <dir_register>:
c0004006:	55                   	push   ebp
c0004007:	57                   	push   edi
c0004008:	56                   	push   esi
c0004009:	be 06 00 00 00       	mov    esi,0x6
c000400e:	53                   	push   ebx
c000400f:	83 ec 6c             	sub    esp,0x6c
c0004012:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c0004016:	0f 85 62 02 00 00    	jne    c000427e <dir_register+0x278>
c000401c:	8b 28                	mov    ebp,DWORD PTR [eax]
c000401e:	31 ff                	xor    edi,edi
c0004020:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0004023:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c0004028:	74 03                	je     c000402d <dir_register+0x27>
c000402a:	47                   	inc    edi
c000402b:	eb f6                	jmp    c0004023 <dir_register+0x1d>
c000402d:	89 c3                	mov    ebx,eax
c000402f:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c0004033:	0f 85 e1 00 00 00    	jne    c000411a <dir_register+0x114>
c0004039:	83 c7 0e             	add    edi,0xe
c000403c:	b9 0f 00 00 00       	mov    ecx,0xf
c0004041:	89 f8                	mov    eax,edi
c0004043:	31 d2                	xor    edx,edx
c0004045:	f7 f1                	div    ecx
c0004047:	8d 50 02             	lea    edx,[eax+0x2]
c000404a:	89 c7                	mov    edi,eax
c000404c:	89 d8                	mov    eax,ebx
c000404e:	e8 12 f8 ff ff       	call   c0003865 <dir_alloc>
c0004053:	89 c6                	mov    esi,eax
c0004055:	85 c0                	test   eax,eax
c0004057:	0f 85 21 02 00 00    	jne    c000427e <dir_register+0x278>
c000405d:	81 c7 01 00 00 08    	add    edi,0x8000001
c0004063:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004066:	c1 e7 05             	shl    edi,0x5
c0004069:	29 f8                	sub    eax,edi
c000406b:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000406e:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004071:	a8 04                	test   al,0x4
c0004073:	0f 84 91 00 00 00    	je     c000410a <dir_register+0x104>
c0004079:	83 e0 fb             	and    eax,0xfffffffb
c000407c:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c000407f:	89 d8                	mov    eax,ebx
c0004081:	e8 25 ec ff ff       	call   c0002cab <fill_first_frag>
c0004086:	85 c0                	test   eax,eax
c0004088:	0f 85 ee 01 00 00    	jne    c000427c <dir_register+0x276>
c000408e:	83 c9 ff             	or     ecx,0xffffffff
c0004091:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0004094:	89 d8                	mov    eax,ebx
c0004096:	e8 db eb ff ff       	call   c0002c76 <fill_last_frag>
c000409b:	85 c0                	test   eax,eax
c000409d:	0f 85 d9 01 00 00    	jne    c000427c <dir_register+0x276>
c00040a3:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00040a7:	74 61                	je     c000410a <dir_register+0x104>
c00040a9:	89 da                	mov    edx,ebx
c00040ab:	8d 44 24 14          	lea    eax,[esp+0x14]
c00040af:	e8 ea f5 ff ff       	call   c000369e <load_obj_xdir>
c00040b4:	85 c0                	test   eax,eax
c00040b6:	0f 85 c0 01 00 00    	jne    c000427c <dir_register+0x276>
c00040bc:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c00040c0:	31 c9                	xor    ecx,ecx
c00040c2:	c1 e2 09             	shl    edx,0x9
c00040c5:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c00040c8:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c00040cb:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00040ce:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c00040d1:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00040d4:	83 c0 38             	add    eax,0x38
c00040d7:	e8 1c d9 ff ff       	call   c00019f8 <st_qword>
c00040dc:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00040df:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00040e2:	83 c0 28             	add    eax,0x28
c00040e5:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00040e8:	e8 0b d9 ff ff       	call   c00019f8 <st_qword>
c00040ed:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c00040f0:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00040f3:	83 c8 01             	or     eax,0x1
c00040f6:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c00040f9:	8d 44 24 14          	lea    eax,[esp+0x14]
c00040fd:	e8 db f7 ff ff       	call   c00038dd <store_xdir>
c0004102:	85 c0                	test   eax,eax
c0004104:	0f 85 72 01 00 00    	jne    c000427c <dir_register+0x276>
c000410a:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000410d:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0004110:	e8 c1 fb ff ff       	call   c0003cd6 <create_xdir>
c0004115:	e9 64 01 00 00       	jmp    c000427e <dir_register+0x278>
c000411a:	8d 40 3c             	lea    eax,[eax+0x3c]
c000411d:	b9 0c 00 00 00       	mov    ecx,0xc
c0004122:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004126:	89 c2                	mov    edx,eax
c0004128:	8d 44 24 14          	lea    eax,[esp+0x14]
c000412c:	e8 cd d8 ff ff       	call   c00019fe <mem_cpy>
c0004131:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0004136:	74 58                	je     c0004190 <dir_register+0x18a>
c0004138:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c000413c:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0004144:	83 ec 0c             	sub    esp,0xc
c0004147:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c000414a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000414e:	8d 54 24 24          	lea    edx,[esp+0x24]
c0004152:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004156:	e8 24 dc ff ff       	call   c0001d7f <gen_numname>
c000415b:	89 d8                	mov    eax,ebx
c000415d:	e8 de fc ff ff       	call   c0003e40 <dir_find>
c0004162:	83 c4 10             	add    esp,0x10
c0004165:	89 c6                	mov    esi,eax
c0004167:	85 c0                	test   eax,eax
c0004169:	75 15                	jne    c0004180 <dir_register+0x17a>
c000416b:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000416f:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c0004174:	75 ce                	jne    c0004144 <dir_register+0x13e>
c0004176:	be 07 00 00 00       	mov    esi,0x7
c000417b:	e9 fe 00 00 00       	jmp    c000427e <dir_register+0x278>
c0004180:	83 f8 04             	cmp    eax,0x4
c0004183:	0f 85 f5 00 00 00    	jne    c000427e <dir_register+0x278>
c0004189:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000418d:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c0004190:	b9 01 00 00 00       	mov    ecx,0x1
c0004195:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c000419a:	74 0f                	je     c00041ab <dir_register+0x1a5>
c000419c:	b9 0d 00 00 00       	mov    ecx,0xd
c00041a1:	8d 47 0c             	lea    eax,[edi+0xc]
c00041a4:	31 d2                	xor    edx,edx
c00041a6:	f7 f1                	div    ecx
c00041a8:	8d 48 01             	lea    ecx,[eax+0x1]
c00041ab:	89 ca                	mov    edx,ecx
c00041ad:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00041b1:	89 d8                	mov    eax,ebx
c00041b3:	e8 ad f6 ff ff       	call   c0003865 <dir_alloc>
c00041b8:	89 c6                	mov    esi,eax
c00041ba:	85 c0                	test   eax,eax
c00041bc:	0f 85 bc 00 00 00    	jne    c000427e <dir_register+0x278>
c00041c2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00041c6:	49                   	dec    ecx
c00041c7:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00041cb:	74 6a                	je     c0004237 <dir_register+0x231>
c00041cd:	89 c8                	mov    eax,ecx
c00041cf:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00041d2:	c1 e0 05             	shl    eax,0x5
c00041d5:	29 c2                	sub    edx,eax
c00041d7:	89 d8                	mov    eax,ebx
c00041d9:	e8 fd ec ff ff       	call   c0002edb <dir_sdi>
c00041de:	89 c6                	mov    esi,eax
c00041e0:	85 c0                	test   eax,eax
c00041e2:	0f 85 96 00 00 00    	jne    c000427e <dir_register+0x278>
c00041e8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00041ec:	e8 4a dc ff ff       	call   c0001e3b <sum_sfn>
c00041f1:	0f b6 f8             	movzx  edi,al
c00041f4:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00041f7:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00041fa:	89 e8                	mov    eax,ebp
c00041fc:	e8 5c df ff ff       	call   c000215d <move_window>
c0004201:	89 c6                	mov    esi,eax
c0004203:	85 c0                	test   eax,eax
c0004205:	75 77                	jne    c000427e <dir_register+0x278>
c0004207:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c000420c:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000420f:	83 ec 0c             	sub    esp,0xc
c0004212:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0004215:	57                   	push   edi
c0004216:	e8 e0 da ff ff       	call   c0001cfb <put_lfn>
c000421b:	31 d2                	xor    edx,edx
c000421d:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004221:	89 d8                	mov    eax,ebx
c0004223:	e8 0b f2 ff ff       	call   c0003433 <dir_next>
c0004228:	83 c4 10             	add    esp,0x10
c000422b:	89 c6                	mov    esi,eax
c000422d:	85 c0                	test   eax,eax
c000422f:	75 4d                	jne    c000427e <dir_register+0x278>
c0004231:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0004235:	75 bd                	jne    c00041f4 <dir_register+0x1ee>
c0004237:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000423a:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000423d:	89 e8                	mov    eax,ebp
c000423f:	e8 19 df ff ff       	call   c000215d <move_window>
c0004244:	89 c6                	mov    esi,eax
c0004246:	85 c0                	test   eax,eax
c0004248:	75 34                	jne    c000427e <dir_register+0x278>
c000424a:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000424d:	b9 20 00 00 00       	mov    ecx,0x20
c0004252:	31 d2                	xor    edx,edx
c0004254:	e8 ba d7 ff ff       	call   c0001a13 <mem_set>
c0004259:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000425c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004260:	b9 0b 00 00 00       	mov    ecx,0xb
c0004265:	e8 94 d7 ff ff       	call   c00019fe <mem_cpy>
c000426a:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c000426d:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0004270:	83 e0 18             	and    eax,0x18
c0004273:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0004276:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c000427a:	eb 02                	jmp    c000427e <dir_register+0x278>
c000427c:	89 c6                	mov    esi,eax
c000427e:	83 c4 6c             	add    esp,0x6c
c0004281:	89 f0                	mov    eax,esi
c0004283:	5b                   	pop    ebx
c0004284:	5e                   	pop    esi
c0004285:	5f                   	pop    edi
c0004286:	5d                   	pop    ebp
c0004287:	c3                   	ret    

c0004288 <sync_fs>:
c0004288:	56                   	push   esi
c0004289:	53                   	push   ebx
c000428a:	53                   	push   ebx
c000428b:	89 c3                	mov    ebx,eax
c000428d:	e8 37 de ff ff       	call   c00020c9 <sync_window>
c0004292:	85 c0                	test   eax,eax
c0004294:	0f 85 b1 00 00 00    	jne    c000434b <sync_fs+0xc3>
c000429a:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c000429d:	0f 85 8e 00 00 00    	jne    c0004331 <sync_fs+0xa9>
c00042a3:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c00042a7:	0f 85 84 00 00 00    	jne    c0004331 <sync_fs+0xa9>
c00042ad:	b9 00 02 00 00       	mov    ecx,0x200
c00042b2:	8d 73 54             	lea    esi,[ebx+0x54]
c00042b5:	31 d2                	xor    edx,edx
c00042b7:	89 f0                	mov    eax,esi
c00042b9:	e8 55 d7 ff ff       	call   c0001a13 <mem_set>
c00042be:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00042c4:	ba 55 aa 00 00       	mov    edx,0xaa55
c00042c9:	e8 23 d7 ff ff       	call   c00019f1 <st_word>
c00042ce:	ba 52 52 61 41       	mov    edx,0x41615252
c00042d3:	89 f0                	mov    eax,esi
c00042d5:	e8 1b d7 ff ff       	call   c00019f5 <st_dword>
c00042da:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c00042e0:	ba 72 72 41 61       	mov    edx,0x61417272
c00042e5:	e8 0b d7 ff ff       	call   c00019f5 <st_dword>
c00042ea:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00042ed:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c00042f3:	e8 fd d6 ff ff       	call   c00019f5 <st_dword>
c00042f8:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00042fb:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c0004301:	e8 ef d6 ff ff       	call   c00019f5 <st_dword>
c0004306:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0004309:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c000430c:	83 c0 01             	add    eax,0x1
c000430f:	83 d2 00             	adc    edx,0x0
c0004312:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c0004315:	83 ec 0c             	sub    esp,0xc
c0004318:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c000431b:	6a 01                	push   0x1
c000431d:	52                   	push   edx
c000431e:	50                   	push   eax
c000431f:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004323:	56                   	push   esi
c0004324:	50                   	push   eax
c0004325:	e8 20 d6 ff ff       	call   c000194a <disk_write>
c000432a:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c000432e:	83 c4 20             	add    esp,0x20
c0004331:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004335:	51                   	push   ecx
c0004336:	6a 00                	push   0x0
c0004338:	6a 00                	push   0x0
c000433a:	50                   	push   eax
c000433b:	e8 20 d6 ff ff       	call   c0001960 <disk_ioctl>
c0004340:	83 c4 10             	add    esp,0x10
c0004343:	85 c0                	test   eax,eax
c0004345:	0f 95 c0             	setne  al
c0004348:	0f b6 c0             	movzx  eax,al
c000434b:	5a                   	pop    edx
c000434c:	5b                   	pop    ebx
c000434d:	5e                   	pop    esi
c000434e:	c3                   	ret    

c000434f <create_partition>:
c000434f:	55                   	push   ebp
c0004350:	0f b6 c0             	movzx  eax,al
c0004353:	57                   	push   edi
c0004354:	56                   	push   esi
c0004355:	53                   	push   ebx
c0004356:	83 ec 60             	sub    esp,0x60
c0004359:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000435d:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0004361:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0004365:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0004369:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c000436d:	50                   	push   eax
c000436e:	6a 01                	push   0x1
c0004370:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004374:	e8 e7 d5 ff ff       	call   c0001960 <disk_ioctl>
c0004379:	83 c4 10             	add    esp,0x10
c000437c:	85 c0                	test   eax,eax
c000437e:	74 0a                	je     c000438a <create_partition+0x3b>
c0004380:	b8 01 00 00 00       	mov    eax,0x1
c0004385:	e9 67 05 00 00       	jmp    c00048f1 <create_partition+0x5a2>
c000438a:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000438e:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0004392:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004396:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000439a:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000439f:	0f 86 ed 03 00 00    	jbe    c0004792 <create_partition+0x443>
c00043a5:	83 c0 df             	add    eax,0xffffffdf
c00043a8:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00043b0:	83 d2 ff             	adc    edx,0xffffffff
c00043b3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00043b7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00043bb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00043bf:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00043c3:	83 c0 bd             	add    eax,0xffffffbd
c00043c6:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00043cd:	83 d2 ff             	adc    edx,0xffffffff
c00043d0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00043d4:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00043d8:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00043e0:	be 22 00 00 00       	mov    esi,0x22
c00043e5:	31 ff                	xor    edi,edi
c00043e7:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c00043ef:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c00043f7:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00043ff:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004403:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0004409:	75 0e                	jne    c0004419 <create_partition+0xca>
c000440b:	b9 00 02 00 00       	mov    ecx,0x200
c0004410:	31 d2                	xor    edx,edx
c0004412:	89 d8                	mov    eax,ebx
c0004414:	e8 fa d5 ff ff       	call   c0001a13 <mem_set>
c0004419:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000441d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0004421:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004425:	0b 04 24             	or     eax,DWORD PTR [esp]
c0004428:	0f 84 23 01 00 00    	je     c0004551 <create_partition+0x202>
c000442e:	89 f0                	mov    eax,esi
c0004430:	89 fa                	mov    edx,edi
c0004432:	05 ff 07 00 00       	add    eax,0x7ff
c0004437:	83 d2 00             	adc    edx,0x0
c000443a:	89 c1                	mov    ecx,eax
c000443c:	89 d7                	mov    edi,edx
c000443e:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004444:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004448:	89 ce                	mov    esi,ecx
c000444a:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c000444e:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0004452:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c0004456:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c0004459:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000445d:	89 04 24             	mov    DWORD PTR [esp],eax
c0004460:	b8 64 00 00 00       	mov    eax,0x64
c0004465:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004468:	b8 00 00 00 00       	mov    eax,0x0
c000446d:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0004471:	72 41                	jb     c00044b4 <create_partition+0x165>
c0004473:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0004477:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000447b:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c000447f:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0004484:	01 c1                	add    ecx,eax
c0004486:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000448a:	f7 24 24             	mul    DWORD PTR [esp]
c000448d:	6a 00                	push   0x0
c000448f:	01 ca                	add    edx,ecx
c0004491:	6a 64                	push   0x64
c0004493:	52                   	push   edx
c0004494:	50                   	push   eax
c0004495:	e8 06 d0 01 00       	call   c00214a0 <__udivdi3>
c000449a:	83 c4 10             	add    esp,0x10
c000449d:	05 ff 07 00 00       	add    eax,0x7ff
c00044a2:	83 d2 00             	adc    edx,0x0
c00044a5:	89 c1                	mov    ecx,eax
c00044a7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00044ab:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c00044b1:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00044b4:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00044b7:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00044bb:	01 f0                	add    eax,esi
c00044bd:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00044c1:	11 fa                	adc    edx,edi
c00044c3:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c00044c7:	19 d1                	sbb    ecx,edx
c00044c9:	73 2e                	jae    c00044f9 <create_partition+0x1aa>
c00044cb:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00044cf:	89 f8                	mov    eax,edi
c00044d1:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00044d8:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c00044dc:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00044e4:	73 6b                	jae    c0004551 <create_partition+0x202>
c00044e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00044ea:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00044ee:	29 f0                	sub    eax,esi
c00044f0:	19 fa                	sbb    edx,edi
c00044f2:	89 04 24             	mov    DWORD PTR [esp],eax
c00044f5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00044f9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00044fd:	0b 04 24             	or     eax,DWORD PTR [esp]
c0004500:	74 4f                	je     c0004551 <create_partition+0x202>
c0004502:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0004505:	b9 10 00 00 00       	mov    ecx,0x10
c000450a:	ba b0 23 02 c0       	mov    edx,0xc00223b0
c000450f:	e8 ea d4 ff ff       	call   c00019fe <mem_cpy>
c0004514:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c0004518:	b9 10 00 00 00       	mov    ecx,0x10
c000451d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004521:	e8 2c db ff ff       	call   c0002052 <make_rand>
c0004526:	89 f2                	mov    edx,esi
c0004528:	89 f9                	mov    ecx,edi
c000452a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000452e:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c0004532:	e8 c1 d4 ff ff       	call   c00019f8 <st_qword>
c0004537:	03 34 24             	add    esi,DWORD PTR [esp]
c000453a:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c000453e:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c0004542:	89 f2                	mov    edx,esi
c0004544:	89 f9                	mov    ecx,edi
c0004546:	83 c2 ff             	add    edx,0xffffffff
c0004549:	83 d1 ff             	adc    ecx,0xffffffff
c000454c:	e8 a7 d4 ff ff       	call   c00019f8 <st_qword>
c0004551:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004555:	83 e8 80             	sub    eax,0xffffff80
c0004558:	89 c5                	mov    ebp,eax
c000455a:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000455e:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0004564:	75 6b                	jne    c00045d1 <create_partition+0x282>
c0004566:	45                   	inc    ebp
c0004567:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000456b:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c0004570:	e8 39 da ff ff       	call   c0001fae <crc32>
c0004575:	81 fd 00 02 00 00    	cmp    ebp,0x200
c000457b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000457f:	75 e5                	jne    c0004566 <create_partition+0x217>
c0004581:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004585:	31 d2                	xor    edx,edx
c0004587:	83 ec 0c             	sub    esp,0xc
c000458a:	c1 ed 09             	shr    ebp,0x9
c000458d:	6a 01                	push   0x1
c000458f:	8d 45 02             	lea    eax,[ebp+0x2]
c0004592:	52                   	push   edx
c0004593:	50                   	push   eax
c0004594:	53                   	push   ebx
c0004595:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004599:	e8 ac d3 ff ff       	call   c000194a <disk_write>
c000459e:	83 c4 20             	add    esp,0x20
c00045a1:	85 c0                	test   eax,eax
c00045a3:	0f 85 d7 fd ff ff    	jne    c0004380 <create_partition+0x31>
c00045a9:	83 ec 0c             	sub    esp,0xc
c00045ac:	31 d2                	xor    edx,edx
c00045ae:	6a 01                	push   0x1
c00045b0:	89 e8                	mov    eax,ebp
c00045b2:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c00045b6:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c00045ba:	52                   	push   edx
c00045bb:	50                   	push   eax
c00045bc:	53                   	push   ebx
c00045bd:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00045c1:	e8 84 d3 ff ff       	call   c000194a <disk_write>
c00045c6:	83 c4 20             	add    esp,0x20
c00045c9:	85 c0                	test   eax,eax
c00045cb:	0f 85 af fd ff ff    	jne    c0004380 <create_partition+0x31>
c00045d1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00045d5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00045d9:	3d 00 40 00 00       	cmp    eax,0x4000
c00045de:	74 0d                	je     c00045ed <create_partition+0x29e>
c00045e0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00045e4:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00045e8:	e9 12 fe ff ff       	jmp    c00043ff <create_partition+0xb0>
c00045ed:	31 d2                	xor    edx,edx
c00045ef:	b9 00 02 00 00       	mov    ecx,0x200
c00045f4:	89 d8                	mov    eax,ebx
c00045f6:	8d 6b 20             	lea    ebp,[ebx+0x20]
c00045f9:	e8 15 d4 ff ff       	call   c0001a13 <mem_set>
c00045fe:	8d 7b 48             	lea    edi,[ebx+0x48]
c0004601:	b9 10 00 00 00       	mov    ecx,0x10
c0004606:	ba a0 22 02 c0       	mov    edx,0xc00222a0
c000460b:	89 d8                	mov    eax,ebx
c000460d:	e8 ec d3 ff ff       	call   c00019fe <mem_cpy>
c0004612:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0004616:	8d 43 58             	lea    eax,[ebx+0x58]
c0004619:	f7 d2                	not    edx
c000461b:	e8 d5 d3 ff ff       	call   c00019f5 <st_dword>
c0004620:	8d 43 18             	lea    eax,[ebx+0x18]
c0004623:	31 c9                	xor    ecx,ecx
c0004625:	89 04 24             	mov    DWORD PTR [esp],eax
c0004628:	ba 01 00 00 00       	mov    edx,0x1
c000462d:	e8 c6 d3 ff ff       	call   c00019f8 <st_qword>
c0004632:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004636:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000463a:	83 c2 ff             	add    edx,0xffffffff
c000463d:	89 e8                	mov    eax,ebp
c000463f:	83 d1 ff             	adc    ecx,0xffffffff
c0004642:	e8 b1 d3 ff ff       	call   c00019f8 <st_qword>
c0004647:	31 c9                	xor    ecx,ecx
c0004649:	8d 43 28             	lea    eax,[ebx+0x28]
c000464c:	ba 22 00 00 00       	mov    edx,0x22
c0004651:	e8 a2 d3 ff ff       	call   c00019f8 <st_qword>
c0004656:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000465a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000465e:	83 c2 de             	add    edx,0xffffffde
c0004661:	8d 43 30             	lea    eax,[ebx+0x30]
c0004664:	83 d1 ff             	adc    ecx,0xffffffff
c0004667:	31 f6                	xor    esi,esi
c0004669:	e8 8a d3 ff ff       	call   c00019f8 <st_qword>
c000466e:	8d 43 54             	lea    eax,[ebx+0x54]
c0004671:	ba 80 00 00 00       	mov    edx,0x80
c0004676:	e8 7a d3 ff ff       	call   c00019f5 <st_dword>
c000467b:	8d 43 50             	lea    eax,[ebx+0x50]
c000467e:	ba 80 00 00 00       	mov    edx,0x80
c0004683:	e8 6d d3 ff ff       	call   c00019f5 <st_dword>
c0004688:	ba 02 00 00 00       	mov    edx,0x2
c000468d:	89 f8                	mov    eax,edi
c000468f:	e8 61 d3 ff ff       	call   c00019f5 <st_dword>
c0004694:	8d 53 38             	lea    edx,[ebx+0x38]
c0004697:	b9 10 00 00 00       	mov    ecx,0x10
c000469c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00046a0:	e8 ad d9 ff ff       	call   c0002052 <make_rand>
c00046a5:	83 c8 ff             	or     eax,0xffffffff
c00046a8:	46                   	inc    esi
c00046a9:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c00046ae:	e8 fb d8 ff ff       	call   c0001fae <crc32>
c00046b3:	83 fe 5c             	cmp    esi,0x5c
c00046b6:	75 f0                	jne    c00046a8 <create_partition+0x359>
c00046b8:	f7 d0                	not    eax
c00046ba:	8d 73 10             	lea    esi,[ebx+0x10]
c00046bd:	89 c2                	mov    edx,eax
c00046bf:	89 f0                	mov    eax,esi
c00046c1:	e8 2f d3 ff ff       	call   c00019f5 <st_dword>
c00046c6:	83 ec 0c             	sub    esp,0xc
c00046c9:	6a 01                	push   0x1
c00046cb:	6a 00                	push   0x0
c00046cd:	6a 01                	push   0x1
c00046cf:	53                   	push   ebx
c00046d0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00046d4:	e8 71 d2 ff ff       	call   c000194a <disk_write>
c00046d9:	83 c4 20             	add    esp,0x20
c00046dc:	85 c0                	test   eax,eax
c00046de:	0f 85 9c fc ff ff    	jne    c0004380 <create_partition+0x31>
c00046e4:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00046e8:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00046ec:	83 c2 ff             	add    edx,0xffffffff
c00046ef:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00046f2:	83 d1 ff             	adc    ecx,0xffffffff
c00046f5:	e8 fe d2 ff ff       	call   c00019f8 <st_qword>
c00046fa:	ba 01 00 00 00       	mov    edx,0x1
c00046ff:	31 c9                	xor    ecx,ecx
c0004701:	89 e8                	mov    eax,ebp
c0004703:	e8 f0 d2 ff ff       	call   c00019f8 <st_qword>
c0004708:	89 f8                	mov    eax,edi
c000470a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000470e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004712:	31 ff                	xor    edi,edi
c0004714:	e8 df d2 ff ff       	call   c00019f8 <st_qword>
c0004719:	89 f0                	mov    eax,esi
c000471b:	31 d2                	xor    edx,edx
c000471d:	e8 d3 d2 ff ff       	call   c00019f5 <st_dword>
c0004722:	83 c8 ff             	or     eax,0xffffffff
c0004725:	47                   	inc    edi
c0004726:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c000472b:	e8 7e d8 ff ff       	call   c0001fae <crc32>
c0004730:	83 ff 5c             	cmp    edi,0x5c
c0004733:	75 f0                	jne    c0004725 <create_partition+0x3d6>
c0004735:	f7 d0                	not    eax
c0004737:	89 c2                	mov    edx,eax
c0004739:	89 f0                	mov    eax,esi
c000473b:	e8 b5 d2 ff ff       	call   c00019f5 <st_dword>
c0004740:	83 ec 0c             	sub    esp,0xc
c0004743:	6a 01                	push   0x1
c0004745:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0004749:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c000474d:	83 c0 ff             	add    eax,0xffffffff
c0004750:	83 d2 ff             	adc    edx,0xffffffff
c0004753:	52                   	push   edx
c0004754:	50                   	push   eax
c0004755:	53                   	push   ebx
c0004756:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000475a:	e8 eb d1 ff ff       	call   c000194a <disk_write>
c000475f:	83 c4 20             	add    esp,0x20
c0004762:	85 c0                	test   eax,eax
c0004764:	0f 85 16 fc ff ff    	jne    c0004380 <create_partition+0x31>
c000476a:	31 d2                	xor    edx,edx
c000476c:	89 d8                	mov    eax,ebx
c000476e:	b9 00 02 00 00       	mov    ecx,0x200
c0004773:	e8 9b d2 ff ff       	call   c0001a13 <mem_set>
c0004778:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c000477e:	b9 10 00 00 00       	mov    ecx,0x10
c0004783:	ba b0 22 02 c0       	mov    edx,0xc00222b0
c0004788:	e8 71 d2 ff ff       	call   c00019fe <mem_cpy>
c000478d:	e9 21 01 00 00       	jmp    c00048b3 <create_partition+0x564>
c0004792:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004796:	b9 05 00 00 00       	mov    ecx,0x5
c000479b:	89 04 24             	mov    DWORD PTR [esp],eax
c000479e:	bf 08 00 00 00       	mov    edi,0x8
c00047a3:	89 f8                	mov    eax,edi
c00047a5:	31 d2                	xor    edx,edx
c00047a7:	0f b6 f0             	movzx  esi,al
c00047aa:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00047ad:	f7 f6                	div    esi
c00047af:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c00047b4:	76 0a                	jbe    c00047c0 <create_partition+0x471>
c00047b6:	d1 e7                	shl    edi,1
c00047b8:	49                   	dec    ecx
c00047b9:	75 e8                	jne    c00047a3 <create_partition+0x454>
c00047bb:	bf ff ff ff ff       	mov    edi,0xffffffff
c00047c0:	b9 00 02 00 00       	mov    ecx,0x200
c00047c5:	31 d2                	xor    edx,edx
c00047c7:	89 d8                	mov    eax,ebx
c00047c9:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c00047cf:	e8 3f d2 ff ff       	call   c0001a13 <mem_set>
c00047d4:	b9 64 00 00 00       	mov    ecx,0x64
c00047d9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00047dc:	31 d2                	xor    edx,edx
c00047de:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00047e6:	f7 f1                	div    ecx
c00047e8:	b9 3f 00 00 00       	mov    ecx,0x3f
c00047ed:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00047f1:	89 f8                	mov    eax,edi
c00047f3:	0f b6 c0             	movzx  eax,al
c00047f6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00047fa:	e9 80 00 00 00       	jmp    c000487f <create_partition+0x530>
c00047ff:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004802:	29 cf                	sub    edi,ecx
c0004804:	89 ca                	mov    edx,ecx
c0004806:	89 f0                	mov    eax,esi
c0004808:	bd 3f 00 00 00       	mov    ebp,0x3f
c000480d:	e8 e3 d1 ff ff       	call   c00019f5 <st_dword>
c0004812:	8d 46 04             	lea    eax,[esi+0x4]
c0004815:	89 fa                	mov    edx,edi
c0004817:	83 c6 10             	add    esi,0x10
c000481a:	e8 d6 d1 ff ff       	call   c00019f5 <st_dword>
c000481f:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c0004823:	31 d2                	xor    edx,edx
c0004825:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c0004828:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c000482c:	89 c8                	mov    eax,ecx
c000482e:	01 f9                	add    ecx,edi
c0004830:	f7 f5                	div    ebp
c0004832:	89 d5                	mov    ebp,edx
c0004834:	31 d2                	xor    edx,edx
c0004836:	45                   	inc    ebp
c0004837:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c000483b:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c000483e:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0004841:	89 c2                	mov    edx,eax
c0004843:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004846:	c1 ea 02             	shr    edx,0x2
c0004849:	83 e2 c0             	and    edx,0xffffffc0
c000484c:	09 ea                	or     edx,ebp
c000484e:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004853:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004856:	31 d2                	xor    edx,edx
c0004858:	f7 f5                	div    ebp
c000485a:	89 d7                	mov    edi,edx
c000485c:	31 d2                	xor    edx,edx
c000485e:	47                   	inc    edi
c000485f:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004863:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004866:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004869:	89 c5                	mov    ebp,eax
c000486b:	c1 ed 02             	shr    ebp,0x2
c000486e:	83 e5 c0             	and    ebp,0xffffffc0
c0004871:	09 ef                	or     edi,ebp
c0004873:	89 fa                	mov    edx,edi
c0004875:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004878:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c000487d:	74 34                	je     c00048b3 <create_partition+0x564>
c000487f:	85 c9                	test   ecx,ecx
c0004881:	74 30                	je     c00048b3 <create_partition+0x564>
c0004883:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004886:	76 2b                	jbe    c00048b3 <create_partition+0x564>
c0004888:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000488c:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004890:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004893:	83 ff 64             	cmp    edi,0x64
c0004896:	76 4b                	jbe    c00048e3 <create_partition+0x594>
c0004898:	89 f8                	mov    eax,edi
c000489a:	01 c8                	add    eax,ecx
c000489c:	0f 82 5d ff ff ff    	jb     c00047ff <create_partition+0x4b0>
c00048a2:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c00048a5:	0f 87 54 ff ff ff    	ja     c00047ff <create_partition+0x4b0>
c00048ab:	85 ff                	test   edi,edi
c00048ad:	0f 85 51 ff ff ff    	jne    c0004804 <create_partition+0x4b5>
c00048b3:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c00048b9:	ba 55 aa 00 00       	mov    edx,0xaa55
c00048be:	e8 2e d1 ff ff       	call   c00019f1 <st_word>
c00048c3:	83 ec 0c             	sub    esp,0xc
c00048c6:	6a 01                	push   0x1
c00048c8:	6a 00                	push   0x0
c00048ca:	6a 00                	push   0x0
c00048cc:	53                   	push   ebx
c00048cd:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00048d1:	e8 74 d0 ff ff       	call   c000194a <disk_write>
c00048d6:	83 c4 20             	add    esp,0x20
c00048d9:	85 c0                	test   eax,eax
c00048db:	0f 95 c0             	setne  al
c00048de:	0f b6 c0             	movzx  eax,al
c00048e1:	eb 0e                	jmp    c00048f1 <create_partition+0x5a2>
c00048e3:	74 07                	je     c00048ec <create_partition+0x59d>
c00048e5:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c00048ea:	eb ac                	jmp    c0004898 <create_partition+0x549>
c00048ec:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00048ef:	eb a7                	jmp    c0004898 <create_partition+0x549>
c00048f1:	83 c4 5c             	add    esp,0x5c
c00048f4:	5b                   	pop    ebx
c00048f5:	5e                   	pop    esi
c00048f6:	5f                   	pop    edi
c00048f7:	5d                   	pop    ebp
c00048f8:	c3                   	ret    

c00048f9 <get_fileinfo>:
c00048f9:	55                   	push   ebp
c00048fa:	57                   	push   edi
c00048fb:	56                   	push   esi
c00048fc:	53                   	push   ebx
c00048fd:	83 ec 1c             	sub    esp,0x1c
c0004900:	8b 30                	mov    esi,DWORD PTR [eax]
c0004902:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004906:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000490a:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c000490d:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c0004910:	0f 84 dc 01 00 00    	je     c0004af2 <get_fileinfo+0x1f9>
c0004916:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004919:	75 0f                	jne    c000492a <get_fileinfo+0x31>
c000491b:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c000491e:	83 c4 1c             	add    esp,0x1c
c0004921:	5b                   	pop    ebx
c0004922:	5e                   	pop    esi
c0004923:	5f                   	pop    edi
c0004924:	5d                   	pop    ebp
c0004925:	e9 58 d5 ff ff       	jmp    c0001e82 <get_xfileinfo>
c000492a:	89 d3                	mov    ebx,edx
c000492c:	89 c6                	mov    esi,eax
c000492e:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c0004932:	74 6a                	je     c000499e <get_fileinfo+0xa5>
c0004934:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000493c:	31 ed                	xor    ebp,ebp
c000493e:	31 ff                	xor    edi,edi
c0004940:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004944:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004948:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000494b:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c000494f:	66 85 d2             	test   dx,dx
c0004952:	74 3e                	je     c0004992 <get_fileinfo+0x99>
c0004954:	66 85 ed             	test   bp,bp
c0004957:	75 0c                	jne    c0004965 <get_fileinfo+0x6c>
c0004959:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c000495f:	66 3d ff 07          	cmp    ax,0x7ff
c0004963:	76 22                	jbe    c0004987 <get_fileinfo+0x8e>
c0004965:	b9 ff 00 00 00       	mov    ecx,0xff
c000496a:	89 e8                	mov    eax,ebp
c000496c:	29 f9                	sub    ecx,edi
c000496e:	c1 e0 10             	shl    eax,0x10
c0004971:	09 d0                	or     eax,edx
c0004973:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004977:	e8 a3 d1 ff ff       	call   c0001b1f <put_utf>
c000497c:	84 c0                	test   al,al
c000497e:	74 10                	je     c0004990 <get_fileinfo+0x97>
c0004980:	0f b6 c0             	movzx  eax,al
c0004983:	31 d2                	xor    edx,edx
c0004985:	01 c7                	add    edi,eax
c0004987:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c000498c:	89 d5                	mov    ebp,edx
c000498e:	eb b0                	jmp    c0004940 <get_fileinfo+0x47>
c0004990:	31 ff                	xor    edi,edi
c0004992:	66 85 ed             	test   bp,bp
c0004995:	74 02                	je     c0004999 <get_fileinfo+0xa0>
c0004997:	31 ff                	xor    edi,edi
c0004999:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c000499e:	31 ff                	xor    edi,edi
c00049a0:	31 c9                	xor    ecx,ecx
c00049a2:	83 f9 0a             	cmp    ecx,0xa
c00049a5:	0f 87 ad 00 00 00    	ja     c0004a58 <get_fileinfo+0x15f>
c00049ab:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c00049ae:	8d 69 01             	lea    ebp,[ecx+0x1]
c00049b1:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c00049b5:	66 83 fa 20          	cmp    dx,0x20
c00049b9:	0f 84 92 00 00 00    	je     c0004a51 <get_fileinfo+0x158>
c00049bf:	66 83 fa 05          	cmp    dx,0x5
c00049c3:	75 05                	jne    c00049ca <get_fileinfo+0xd1>
c00049c5:	ba e5 00 00 00       	mov    edx,0xe5
c00049ca:	83 ff 0b             	cmp    edi,0xb
c00049cd:	77 0b                	ja     c00049da <get_fileinfo+0xe1>
c00049cf:	83 fd 09             	cmp    ebp,0x9
c00049d2:	75 06                	jne    c00049da <get_fileinfo+0xe1>
c00049d4:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c00049d9:	47                   	inc    edi
c00049da:	0f b7 c2             	movzx  eax,dx
c00049dd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00049e1:	e8 6d d0 ff ff       	call   c0001a53 <dbc_1st>
c00049e6:	85 c0                	test   eax,eax
c00049e8:	74 2f                	je     c0004a19 <get_fileinfo+0x120>
c00049ea:	83 fd 08             	cmp    ebp,0x8
c00049ed:	74 2a                	je     c0004a19 <get_fileinfo+0x120>
c00049ef:	83 fd 0b             	cmp    ebp,0xb
c00049f2:	74 25                	je     c0004a19 <get_fileinfo+0x120>
c00049f4:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c00049f7:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c00049fb:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00049ff:	e8 52 d0 ff ff       	call   c0001a56 <dbc_2nd>
c0004a04:	85 c0                	test   eax,eax
c0004a06:	74 11                	je     c0004a19 <get_fileinfo+0x120>
c0004a08:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004a0c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004a11:	c1 e2 08             	shl    edx,0x8
c0004a14:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004a17:	09 c2                	or     edx,eax
c0004a19:	0f b7 d2             	movzx  edx,dx
c0004a1c:	50                   	push   eax
c0004a1d:	50                   	push   eax
c0004a1e:	68 b5 01 00 00       	push   0x1b5
c0004a23:	52                   	push   edx
c0004a24:	e8 87 3a 00 00       	call   c00084b0 <ff_oem2uni>
c0004a29:	83 c4 10             	add    esp,0x10
c0004a2c:	66 85 c0             	test   ax,ax
c0004a2f:	75 04                	jne    c0004a35 <get_fileinfo+0x13c>
c0004a31:	31 ff                	xor    edi,edi
c0004a33:	eb 23                	jmp    c0004a58 <get_fileinfo+0x15f>
c0004a35:	b9 0c 00 00 00       	mov    ecx,0xc
c0004a3a:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004a3e:	29 f9                	sub    ecx,edi
c0004a40:	0f b7 c0             	movzx  eax,ax
c0004a43:	e8 d7 d0 ff ff       	call   c0001b1f <put_utf>
c0004a48:	84 c0                	test   al,al
c0004a4a:	74 e5                	je     c0004a31 <get_fileinfo+0x138>
c0004a4c:	0f b6 c0             	movzx  eax,al
c0004a4f:	01 c7                	add    edi,eax
c0004a51:	89 e9                	mov    ecx,ebp
c0004a53:	e9 4a ff ff ff       	jmp    c00049a2 <get_fileinfo+0xa9>
c0004a58:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004a5d:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004a61:	75 54                	jne    c0004ab7 <get_fileinfo+0x1be>
c0004a63:	85 ff                	test   edi,edi
c0004a65:	75 0b                	jne    c0004a72 <get_fileinfo+0x179>
c0004a67:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004a6b:	ba 01 00 00 00       	mov    edx,0x1
c0004a70:	eb 33                	jmp    c0004aa5 <get_fileinfo+0x1ac>
c0004a72:	b1 08                	mov    cl,0x8
c0004a74:	31 d2                	xor    edx,edx
c0004a76:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004a7c:	84 c0                	test   al,al
c0004a7e:	74 25                	je     c0004aa5 <get_fileinfo+0x1ac>
c0004a80:	66 83 f8 2e          	cmp    ax,0x2e
c0004a84:	74 16                	je     c0004a9c <get_fileinfo+0x1a3>
c0004a86:	8d 78 bf             	lea    edi,[eax-0x41]
c0004a89:	66 83 ff 19          	cmp    di,0x19
c0004a8d:	77 0f                	ja     c0004a9e <get_fileinfo+0x1a5>
c0004a8f:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004a92:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004a95:	74 07                	je     c0004a9e <get_fileinfo+0x1a5>
c0004a97:	83 c0 20             	add    eax,0x20
c0004a9a:	eb 02                	jmp    c0004a9e <get_fileinfo+0x1a5>
c0004a9c:	b1 10                	mov    cl,0x10
c0004a9e:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004aa2:	42                   	inc    edx
c0004aa3:	eb d1                	jmp    c0004a76 <get_fileinfo+0x17d>
c0004aa5:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004aaa:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004aad:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004ab1:	75 04                	jne    c0004ab7 <get_fileinfo+0x1be>
c0004ab3:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004ab7:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004aba:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004abd:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004ac0:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004ac3:	83 c0 1c             	add    eax,0x1c
c0004ac6:	e8 c1 ce ff ff       	call   c000198c <ld_dword>
c0004acb:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004ad2:	89 03                	mov    DWORD PTR [ebx],eax
c0004ad4:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004ad7:	83 c0 16             	add    eax,0x16
c0004ada:	e8 a0 ce ff ff       	call   c000197f <ld_word>
c0004adf:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004ae3:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004ae6:	83 c0 18             	add    eax,0x18
c0004ae9:	e8 91 ce ff ff       	call   c000197f <ld_word>
c0004aee:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004af2:	83 c4 1c             	add    esp,0x1c
c0004af5:	5b                   	pop    ebx
c0004af6:	5e                   	pop    esi
c0004af7:	5f                   	pop    edi
c0004af8:	5d                   	pop    ebp
c0004af9:	c3                   	ret    

c0004afa <ld_clust.isra.0>:
c0004afa:	56                   	push   esi
c0004afb:	89 c6                	mov    esi,eax
c0004afd:	53                   	push   ebx
c0004afe:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004b01:	89 d3                	mov    ebx,edx
c0004b03:	e8 77 ce ff ff       	call   c000197f <ld_word>
c0004b08:	0f b7 c8             	movzx  ecx,ax
c0004b0b:	89 f0                	mov    eax,esi
c0004b0d:	3c 03                	cmp    al,0x3
c0004b0f:	75 0d                	jne    c0004b1e <ld_clust.isra.0+0x24>
c0004b11:	8d 43 14             	lea    eax,[ebx+0x14]
c0004b14:	e8 66 ce ff ff       	call   c000197f <ld_word>
c0004b19:	c1 e0 10             	shl    eax,0x10
c0004b1c:	09 c1                	or     ecx,eax
c0004b1e:	89 c8                	mov    eax,ecx
c0004b20:	5b                   	pop    ebx
c0004b21:	5e                   	pop    esi
c0004b22:	c3                   	ret    

c0004b23 <st_clust.isra.1>:
c0004b23:	56                   	push   esi
c0004b24:	89 c6                	mov    esi,eax
c0004b26:	53                   	push   ebx
c0004b27:	89 d3                	mov    ebx,edx
c0004b29:	0f b7 d1             	movzx  edx,cx
c0004b2c:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004b2f:	e8 bd ce ff ff       	call   c00019f1 <st_word>
c0004b34:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004b37:	75 0f                	jne    c0004b48 <st_clust.isra.1+0x25>
c0004b39:	c1 e9 10             	shr    ecx,0x10
c0004b3c:	8d 43 14             	lea    eax,[ebx+0x14]
c0004b3f:	89 ca                	mov    edx,ecx
c0004b41:	5b                   	pop    ebx
c0004b42:	5e                   	pop    esi
c0004b43:	e9 a9 ce ff ff       	jmp    c00019f1 <st_word>
c0004b48:	5b                   	pop    ebx
c0004b49:	5e                   	pop    esi
c0004b4a:	c3                   	ret    

c0004b4b <init_alloc_info.isra.2>:
c0004b4b:	56                   	push   esi
c0004b4c:	53                   	push   ebx
c0004b4d:	89 c6                	mov    esi,eax
c0004b4f:	89 d3                	mov    ebx,edx
c0004b51:	51                   	push   ecx
c0004b52:	8b 00                	mov    eax,DWORD PTR [eax]
c0004b54:	83 c0 34             	add    eax,0x34
c0004b57:	e8 30 ce ff ff       	call   c000198c <ld_dword>
c0004b5c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004b5f:	8b 06                	mov    eax,DWORD PTR [esi]
c0004b61:	83 c0 38             	add    eax,0x38
c0004b64:	e8 3b ce ff ff       	call   c00019a4 <ld_qword>
c0004b69:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004b6c:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004b6f:	8b 06                	mov    eax,DWORD PTR [esi]
c0004b71:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004b74:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004b7b:	83 e0 02             	and    eax,0x2
c0004b7e:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004b81:	5b                   	pop    ebx
c0004b82:	5b                   	pop    ebx
c0004b83:	5e                   	pop    esi
c0004b84:	c3                   	ret    

c0004b85 <follow_path>:
c0004b85:	56                   	push   esi
c0004b86:	53                   	push   ebx
c0004b87:	89 c3                	mov    ebx,eax
c0004b89:	83 ec 14             	sub    esp,0x14
c0004b8c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004b90:	8b 30                	mov    esi,DWORD PTR [eax]
c0004b92:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b96:	8a 10                	mov    dl,BYTE PTR [eax]
c0004b98:	80 fa 5c             	cmp    dl,0x5c
c0004b9b:	75 07                	jne    c0004ba4 <follow_path+0x1f>
c0004b9d:	40                   	inc    eax
c0004b9e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004ba2:	eb ee                	jmp    c0004b92 <follow_path+0xd>
c0004ba4:	80 fa 2f             	cmp    dl,0x2f
c0004ba7:	74 f4                	je     c0004b9d <follow_path+0x18>
c0004ba9:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004bb0:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004bb7:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004bba:	77 52                	ja     c0004c0e <follow_path+0x89>
c0004bbc:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004bc0:	31 d2                	xor    edx,edx
c0004bc2:	89 d8                	mov    eax,ebx
c0004bc4:	e8 12 e3 ff ff       	call   c0002edb <dir_sdi>
c0004bc9:	eb 7c                	jmp    c0004c47 <follow_path+0xc2>
c0004bcb:	89 d8                	mov    eax,ebx
c0004bcd:	e8 6e f2 ff ff       	call   c0003e40 <dir_find>
c0004bd2:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004bd5:	85 c0                	test   eax,eax
c0004bd7:	75 46                	jne    c0004c1f <follow_path+0x9a>
c0004bd9:	80 e2 04             	and    dl,0x4
c0004bdc:	75 69                	jne    c0004c47 <follow_path+0xc2>
c0004bde:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004be2:	74 5e                	je     c0004c42 <follow_path+0xbd>
c0004be4:	8a 06                	mov    al,BYTE PTR [esi]
c0004be6:	3c 04                	cmp    al,0x4
c0004be8:	75 41                	jne    c0004c2b <follow_path+0xa6>
c0004bea:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004bed:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004bf1:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004bf4:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004bf7:	30 c0                	xor    al,al
c0004bf9:	09 d0                	or     eax,edx
c0004bfb:	89 da                	mov    edx,ebx
c0004bfd:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004c00:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004c03:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004c06:	8d 46 10             	lea    eax,[esi+0x10]
c0004c09:	e8 3d ff ff ff       	call   c0004b4b <init_alloc_info.isra.2>
c0004c0e:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004c12:	89 d8                	mov    eax,ebx
c0004c14:	e8 a9 ed ff ff       	call   c00039c2 <create_name>
c0004c19:	85 c0                	test   eax,eax
c0004c1b:	74 ae                	je     c0004bcb <follow_path+0x46>
c0004c1d:	eb 28                	jmp    c0004c47 <follow_path+0xc2>
c0004c1f:	83 f8 04             	cmp    eax,0x4
c0004c22:	75 23                	jne    c0004c47 <follow_path+0xc2>
c0004c24:	80 e2 04             	and    dl,0x4
c0004c27:	74 19                	je     c0004c42 <follow_path+0xbd>
c0004c29:	eb 1c                	jmp    c0004c47 <follow_path+0xc2>
c0004c2b:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004c2e:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004c34:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004c38:	e8 bd fe ff ff       	call   c0004afa <ld_clust.isra.0>
c0004c3d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004c40:	eb cc                	jmp    c0004c0e <follow_path+0x89>
c0004c42:	b8 05 00 00 00       	mov    eax,0x5
c0004c47:	83 c4 14             	add    esp,0x14
c0004c4a:	5b                   	pop    ebx
c0004c4b:	5e                   	pop    esi
c0004c4c:	c3                   	ret    

c0004c4d <f_mount>:
c0004c4d:	53                   	push   ebx
c0004c4e:	83 ec 18             	sub    esp,0x18
c0004c51:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004c55:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004c59:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004c5d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004c61:	e8 fb d2 ff ff       	call   c0001f61 <get_ldnumber>
c0004c66:	89 c2                	mov    edx,eax
c0004c68:	b8 0b 00 00 00       	mov    eax,0xb
c0004c6d:	85 d2                	test   edx,edx
c0004c6f:	78 39                	js     c0004caa <f_mount+0x5d>
c0004c71:	8b 04 95 c0 62 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd9d40]
c0004c78:	85 c0                	test   eax,eax
c0004c7a:	74 03                	je     c0004c7f <f_mount+0x32>
c0004c7c:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004c7f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004c83:	85 c0                	test   eax,eax
c0004c85:	74 03                	je     c0004c8a <f_mount+0x3d>
c0004c87:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004c8a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004c8e:	89 04 95 c0 62 02 c0 	mov    DWORD PTR [edx*4-0x3ffd9d40],eax
c0004c95:	31 c0                	xor    eax,eax
c0004c97:	84 db                	test   bl,bl
c0004c99:	74 0f                	je     c0004caa <f_mount+0x5d>
c0004c9b:	31 c9                	xor    ecx,ecx
c0004c9d:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004ca1:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004ca5:	e8 65 d7 ff ff       	call   c000240f <mount_volume>
c0004caa:	83 c4 18             	add    esp,0x18
c0004cad:	5b                   	pop    ebx
c0004cae:	c3                   	ret    

c0004caf <f_open>:
c0004caf:	55                   	push   ebp
c0004cb0:	bd 09 00 00 00       	mov    ebp,0x9
c0004cb5:	57                   	push   edi
c0004cb6:	56                   	push   esi
c0004cb7:	53                   	push   ebx
c0004cb8:	83 ec 7c             	sub    esp,0x7c
c0004cbb:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004cc2:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004cc9:	85 db                	test   ebx,ebx
c0004ccb:	0f 84 10 04 00 00    	je     c00050e1 <f_open+0x432>
c0004cd1:	89 fe                	mov    esi,edi
c0004cd3:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004cd7:	83 e6 3f             	and    esi,0x3f
c0004cda:	89 f0                	mov    eax,esi
c0004cdc:	0f b6 c8             	movzx  ecx,al
c0004cdf:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004ce6:	e8 24 d7 ff ff       	call   c000240f <mount_volume>
c0004ceb:	89 c5                	mov    ebp,eax
c0004ced:	85 c0                	test   eax,eax
c0004cef:	0f 85 e6 03 00 00    	jne    c00050db <f_open+0x42c>
c0004cf5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004cf9:	bd 11 00 00 00       	mov    ebp,0x11
c0004cfe:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004d02:	83 ec 0c             	sub    esp,0xc
c0004d05:	68 60 04 00 00       	push   0x460
c0004d0a:	e8 d9 36 00 00       	call   c00083e8 <ff_memalloc>
c0004d0f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004d13:	83 c4 10             	add    esp,0x10
c0004d16:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004d1b:	0f 84 c0 03 00 00    	je     c00050e1 <f_open+0x432>
c0004d21:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004d25:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004d29:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0004d2f:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0004d32:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0004d35:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0004d3c:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004d40:	e8 40 fe ff ff       	call   c0004b85 <follow_path>
c0004d45:	89 c5                	mov    ebp,eax
c0004d47:	85 c0                	test   eax,eax
c0004d49:	75 0c                	jne    c0004d57 <f_open+0xa8>
c0004d4b:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0004d50:	79 05                	jns    c0004d57 <f_open+0xa8>
c0004d52:	bd 06 00 00 00       	mov    ebp,0x6
c0004d57:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0004d5d:	0f 84 84 01 00 00    	je     c0004ee7 <f_open+0x238>
c0004d63:	85 ed                	test   ebp,ebp
c0004d65:	74 20                	je     c0004d87 <f_open+0xd8>
c0004d67:	83 fd 04             	cmp    ebp,0x4
c0004d6a:	0f 85 58 03 00 00    	jne    c00050c8 <f_open+0x419>
c0004d70:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004d74:	83 ce 08             	or     esi,0x8
c0004d77:	e8 8a f2 ff ff       	call   c0004006 <dir_register>
c0004d7c:	89 c5                	mov    ebp,eax
c0004d7e:	85 c0                	test   eax,eax
c0004d80:	74 2f                	je     c0004db1 <f_open+0x102>
c0004d82:	e9 41 03 00 00       	jmp    c00050c8 <f_open+0x419>
c0004d87:	bd 07 00 00 00       	mov    ebp,0x7
c0004d8c:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0004d91:	0f 85 31 03 00 00    	jne    c00050c8 <f_open+0x419>
c0004d97:	bd 08 00 00 00       	mov    ebp,0x8
c0004d9c:	f7 c7 04 00 00 00    	test   edi,0x4
c0004da2:	0f 85 20 03 00 00    	jne    c00050c8 <f_open+0x419>
c0004da8:	83 e7 08             	and    edi,0x8
c0004dab:	0f 84 65 01 00 00    	je     c0004f16 <f_open+0x267>
c0004db1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004db5:	8a 02                	mov    al,BYTE PTR [edx]
c0004db7:	3c 04                	cmp    al,0x4
c0004db9:	0f 85 97 00 00 00    	jne    c0004e56 <f_open+0x1a7>
c0004dbf:	8d 42 10             	lea    eax,[edx+0x10]
c0004dc2:	89 13                	mov    DWORD PTR [ebx],edx
c0004dc4:	89 da                	mov    edx,ebx
c0004dc6:	e8 80 fd ff ff       	call   c0004b4b <init_alloc_info.isra.2>
c0004dcb:	31 d2                	xor    edx,edx
c0004dcd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004dd1:	b9 1e 00 00 00       	mov    ecx,0x1e
c0004dd6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004dd9:	83 c0 02             	add    eax,0x2
c0004ddc:	e8 32 cc ff ff       	call   c0001a13 <mem_set>
c0004de1:	b9 1a 00 00 00       	mov    ecx,0x1a
c0004de6:	31 d2                	xor    edx,edx
c0004de8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004dec:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004def:	83 c0 26             	add    eax,0x26
c0004df2:	e8 1c cc ff ff       	call   c0001a13 <mem_set>
c0004df7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004dfb:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0004dfe:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c0004e02:	ba 00 00 21 50       	mov    edx,0x50210000
c0004e07:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004e0a:	83 c0 08             	add    eax,0x8
c0004e0d:	e8 e3 cb ff ff       	call   c00019f5 <st_dword>
c0004e12:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e16:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004e19:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c0004e1d:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004e21:	e8 b7 ea ff ff       	call   c00038dd <store_xdir>
c0004e26:	89 c5                	mov    ebp,eax
c0004e28:	85 c0                	test   eax,eax
c0004e2a:	0f 85 98 02 00 00    	jne    c00050c8 <f_open+0x419>
c0004e30:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004e33:	85 d2                	test   edx,edx
c0004e35:	0f 84 db 00 00 00    	je     c0004f16 <f_open+0x267>
c0004e3b:	31 c9                	xor    ecx,ecx
c0004e3d:	89 d8                	mov    eax,ebx
c0004e3f:	e8 8e e3 ff ff       	call   c00031d2 <remove_chain>
c0004e44:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004e48:	89 c5                	mov    ebp,eax
c0004e4a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004e4d:	48                   	dec    eax
c0004e4e:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0004e51:	e9 b8 00 00 00       	jmp    c0004f0e <f_open+0x25f>
c0004e56:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0004e5a:	89 ea                	mov    edx,ebp
c0004e5c:	e8 99 fc ff ff       	call   c0004afa <ld_clust.isra.0>
c0004e61:	ba 00 00 21 50       	mov    edx,0x50210000
c0004e66:	89 c7                	mov    edi,eax
c0004e68:	8d 45 0e             	lea    eax,[ebp+0xe]
c0004e6b:	e8 85 cb ff ff       	call   c00019f5 <st_dword>
c0004e70:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0004e74:	31 c9                	xor    ecx,ecx
c0004e76:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0004e7a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e7e:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004e82:	e8 9c fc ff ff       	call   c0004b23 <st_clust.isra.1>
c0004e87:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0004e8b:	31 d2                	xor    edx,edx
c0004e8d:	83 c0 1c             	add    eax,0x1c
c0004e90:	e8 60 cb ff ff       	call   c00019f5 <st_dword>
c0004e95:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e99:	85 ff                	test   edi,edi
c0004e9b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e9f:	74 75                	je     c0004f16 <f_open+0x267>
c0004ea1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ea5:	31 c9                	xor    ecx,ecx
c0004ea7:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c0004eaa:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c0004ead:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004eb1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004eb5:	89 fa                	mov    edx,edi
c0004eb7:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004ebb:	e8 12 e3 ff ff       	call   c00031d2 <remove_chain>
c0004ec0:	89 c5                	mov    ebp,eax
c0004ec2:	85 c0                	test   eax,eax
c0004ec4:	0f 85 fe 01 00 00    	jne    c00050c8 <f_open+0x419>
c0004eca:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004ece:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004ed2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ed6:	4f                   	dec    edi
c0004ed7:	e8 81 d2 ff ff       	call   c000215d <move_window>
c0004edc:	89 c5                	mov    ebp,eax
c0004ede:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ee2:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0004ee5:	eb 27                	jmp    c0004f0e <f_open+0x25f>
c0004ee7:	85 ed                	test   ebp,ebp
c0004ee9:	0f 85 d9 01 00 00    	jne    c00050c8 <f_open+0x419>
c0004eef:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c0004ef3:	bd 04 00 00 00       	mov    ebp,0x4
c0004ef8:	a8 10                	test   al,0x10
c0004efa:	0f 85 c8 01 00 00    	jne    c00050c8 <f_open+0x419>
c0004f00:	83 e7 02             	and    edi,0x2
c0004f03:	74 11                	je     c0004f16 <f_open+0x267>
c0004f05:	bd 07 00 00 00       	mov    ebp,0x7
c0004f0a:	a8 01                	test   al,0x1
c0004f0c:	eb 02                	jmp    c0004f10 <f_open+0x261>
c0004f0e:	85 ed                	test   ebp,ebp
c0004f10:	0f 85 b2 01 00 00    	jne    c00050c8 <f_open+0x419>
c0004f16:	f7 c6 08 00 00 00    	test   esi,0x8
c0004f1c:	74 03                	je     c0004f21 <f_open+0x272>
c0004f1e:	83 ce 40             	or     esi,0x40
c0004f21:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004f25:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c0004f28:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c0004f2b:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c0004f2e:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c0004f31:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0004f35:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c0004f38:	8a 02                	mov    al,BYTE PTR [edx]
c0004f3a:	3c 04                	cmp    al,0x4
c0004f3c:	75 2a                	jne    c0004f68 <f_open+0x2b9>
c0004f3e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004f42:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c0004f47:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004f4a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0004f4e:	30 c0                	xor    al,al
c0004f50:	09 c8                	or     eax,ecx
c0004f52:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004f55:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0004f59:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004f5c:	8d 42 10             	lea    eax,[edx+0x10]
c0004f5f:	89 da                	mov    edx,ebx
c0004f61:	e8 e5 fb ff ff       	call   c0004b4b <init_alloc_info.isra.2>
c0004f66:	eb 1c                	jmp    c0004f84 <f_open+0x2d5>
c0004f68:	89 fa                	mov    edx,edi
c0004f6a:	e8 8b fb ff ff       	call   c0004afa <ld_clust.isra.0>
c0004f6f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004f72:	8d 47 1c             	lea    eax,[edi+0x1c]
c0004f75:	e8 12 ca ff ff       	call   c000198c <ld_dword>
c0004f7a:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0004f81:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004f84:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f88:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c0004f8f:	89 03                	mov    DWORD PTR [ebx],eax
c0004f91:	31 d2                	xor    edx,edx
c0004f93:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0004f97:	b9 00 02 00 00       	mov    ecx,0x200
c0004f9c:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0004fa0:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c0004fa4:	89 f0                	mov    eax,esi
c0004fa6:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0004fad:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c0004fb0:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c0004fb7:	8d 43 50             	lea    eax,[ebx+0x50]
c0004fba:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0004fc1:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0004fc8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004fcc:	e8 42 ca ff ff       	call   c0001a13 <mem_set>
c0004fd1:	83 e6 20             	and    esi,0x20
c0004fd4:	75 07                	jne    c0004fdd <f_open+0x32e>
c0004fd6:	31 ed                	xor    ebp,ebp
c0004fd8:	e9 eb 00 00 00       	jmp    c00050c8 <f_open+0x419>
c0004fdd:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004fe0:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0004fe3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004fe7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004feb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004fef:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0004ff3:	74 e1                	je     c0004fd6 <f_open+0x327>
c0004ff5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004ff9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004ffd:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005000:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005003:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005007:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000500a:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c000500e:	31 ff                	xor    edi,edi
c0005010:	c1 e5 09             	shl    ebp,0x9
c0005013:	89 ee                	mov    esi,ebp
c0005015:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c0005019:	89 f8                	mov    eax,edi
c000501b:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c000501f:	73 22                	jae    c0005043 <f_open+0x394>
c0005021:	89 d8                	mov    eax,ebx
c0005023:	e8 bd dc ff ff       	call   c0002ce5 <get_fat>
c0005028:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c000502c:	89 c2                	mov    edx,eax
c000502e:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c0005032:	83 f8 01             	cmp    eax,0x1
c0005035:	76 10                	jbe    c0005047 <f_open+0x398>
c0005037:	83 f8 ff             	cmp    eax,0xffffffff
c000503a:	75 d9                	jne    c0005015 <f_open+0x366>
c000503c:	bd 01 00 00 00       	mov    ebp,0x1
c0005041:	eb 09                	jmp    c000504c <f_open+0x39d>
c0005043:	31 ed                	xor    ebp,ebp
c0005045:	eb 05                	jmp    c000504c <f_open+0x39d>
c0005047:	bd 02 00 00 00       	mov    ebp,0x2
c000504c:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000504f:	85 ed                	test   ebp,ebp
c0005051:	75 75                	jne    c00050c8 <f_open+0x419>
c0005053:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005057:	25 ff 01 00 00       	and    eax,0x1ff
c000505c:	0f 84 74 ff ff ff    	je     c0004fd6 <f_open+0x327>
c0005062:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0005066:	bd 02 00 00 00       	mov    ebp,0x2
c000506b:	89 c8                	mov    eax,ecx
c000506d:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0005071:	e8 a2 cb ff ff       	call   c0001c18 <clst2sect>
c0005076:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000507a:	89 d7                	mov    edi,edx
c000507c:	09 c7                	or     edi,eax
c000507e:	74 48                	je     c00050c8 <f_open+0x419>
c0005080:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005084:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005088:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0005090:	0f ac fe 09          	shrd   esi,edi,0x9
c0005094:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0005098:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000509c:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000509f:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00050a3:	83 ec 0c             	sub    esp,0xc
c00050a6:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c00050a9:	6a 01                	push   0x1
c00050ab:	52                   	push   edx
c00050ac:	50                   	push   eax
c00050ad:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00050b1:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00050b5:	50                   	push   eax
c00050b6:	e8 79 c8 ff ff       	call   c0001934 <disk_read>
c00050bb:	83 c4 20             	add    esp,0x20
c00050be:	85 c0                	test   eax,eax
c00050c0:	0f 95 c0             	setne  al
c00050c3:	0f b6 c0             	movzx  eax,al
c00050c6:	89 c5                	mov    ebp,eax
c00050c8:	83 ec 0c             	sub    esp,0xc
c00050cb:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00050cf:	e8 2c 33 00 00       	call   c0008400 <ff_memfree>
c00050d4:	83 c4 10             	add    esp,0x10
c00050d7:	85 ed                	test   ebp,ebp
c00050d9:	74 06                	je     c00050e1 <f_open+0x432>
c00050db:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00050e1:	83 c4 7c             	add    esp,0x7c
c00050e4:	89 e8                	mov    eax,ebp
c00050e6:	5b                   	pop    ebx
c00050e7:	5e                   	pop    esi
c00050e8:	5f                   	pop    edi
c00050e9:	5d                   	pop    ebp
c00050ea:	c3                   	ret    

c00050eb <f_read>:
c00050eb:	55                   	push   ebp
c00050ec:	57                   	push   edi
c00050ed:	56                   	push   esi
c00050ee:	53                   	push   ebx
c00050ef:	83 ec 2c             	sub    esp,0x2c
c00050f2:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00050f6:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00050fa:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005100:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005104:	89 d8                	mov    eax,ebx
c0005106:	e8 77 cf ff ff       	call   c0002082 <validate>
c000510b:	89 c5                	mov    ebp,eax
c000510d:	85 c0                	test   eax,eax
c000510f:	0f 85 4c 02 00 00    	jne    c0005361 <f_read+0x276>
c0005115:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0005119:	85 ed                	test   ebp,ebp
c000511b:	0f 85 40 02 00 00    	jne    c0005361 <f_read+0x276>
c0005121:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0005125:	0f 84 31 02 00 00    	je     c000535c <f_read+0x271>
c000512b:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000512e:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005131:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0005134:	bf 00 00 00 00       	mov    edi,0x0
c0005139:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c000513c:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0005140:	89 d1                	mov    ecx,edx
c0005142:	19 f9                	sbb    ecx,edi
c0005144:	0f 83 cf 00 00 00    	jae    c0005219 <f_read+0x12e>
c000514a:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000514e:	e9 c6 00 00 00       	jmp    c0005219 <f_read+0x12e>
c0005153:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005156:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005159:	89 d0                	mov    eax,edx
c000515b:	25 ff 01 00 00       	and    eax,0x1ff
c0005160:	0f 85 c9 01 00 00    	jne    c000532f <f_read+0x244>
c0005166:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000516a:	89 d6                	mov    esi,edx
c000516c:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005170:	89 cf                	mov    edi,ecx
c0005172:	48                   	dec    eax
c0005173:	0f ac fe 09          	shrd   esi,edi,0x9
c0005177:	21 f0                	and    eax,esi
c0005179:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000517d:	0f 84 a6 00 00 00    	je     c0005229 <f_read+0x13e>
c0005183:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005187:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000518a:	89 c8                	mov    eax,ecx
c000518c:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000518f:	e8 84 ca ff ff       	call   c0001c18 <clst2sect>
c0005194:	89 d7                	mov    edi,edx
c0005196:	09 c7                	or     edi,eax
c0005198:	0f 84 b4 00 00 00    	je     c0005252 <f_read+0x167>
c000519e:	31 ff                	xor    edi,edi
c00051a0:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00051a4:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00051a7:	01 c6                	add    esi,eax
c00051a9:	11 d7                	adc    edi,edx
c00051ab:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00051b3:	0f 86 fd 00 00 00    	jbe    c00052b6 <f_read+0x1cb>
c00051b9:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00051bd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00051c1:	c1 e8 09             	shr    eax,0x9
c00051c4:	89 04 24             	mov    DWORD PTR [esp],eax
c00051c7:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00051cb:	03 14 24             	add    edx,DWORD PTR [esp]
c00051ce:	39 c2                	cmp    edx,eax
c00051d0:	76 07                	jbe    c00051d9 <f_read+0xee>
c00051d2:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00051d6:	89 04 24             	mov    DWORD PTR [esp],eax
c00051d9:	83 ec 0c             	sub    esp,0xc
c00051dc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00051e0:	57                   	push   edi
c00051e1:	56                   	push   esi
c00051e2:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00051e6:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00051ea:	50                   	push   eax
c00051eb:	e8 44 c7 ff ff       	call   c0001934 <disk_read>
c00051f0:	83 c4 20             	add    esp,0x20
c00051f3:	85 c0                	test   eax,eax
c00051f5:	75 6e                	jne    c0005265 <f_read+0x17a>
c00051f7:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00051fb:	78 7e                	js     c000527b <f_read+0x190>
c00051fd:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005200:	c1 e6 09             	shl    esi,0x9
c0005203:	31 ff                	xor    edi,edi
c0005205:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c0005209:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000520d:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0005211:	01 30                	add    DWORD PTR [eax],esi
c0005213:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c0005216:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c0005219:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000521e:	0f 85 2f ff ff ff    	jne    c0005153 <f_read+0x68>
c0005224:	e9 38 01 00 00       	jmp    c0005361 <f_read+0x276>
c0005229:	89 c8                	mov    eax,ecx
c000522b:	09 d0                	or     eax,edx
c000522d:	75 05                	jne    c0005234 <f_read+0x149>
c000522f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005232:	eb 19                	jmp    c000524d <f_read+0x162>
c0005234:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c0005238:	74 09                	je     c0005243 <f_read+0x158>
c000523a:	89 d8                	mov    eax,ebx
c000523c:	e8 f8 c9 ff ff       	call   c0001c39 <clmt_clust>
c0005241:	eb 0a                	jmp    c000524d <f_read+0x162>
c0005243:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005246:	89 d8                	mov    eax,ebx
c0005248:	e8 98 da ff ff       	call   c0002ce5 <get_fat>
c000524d:	83 f8 01             	cmp    eax,0x1
c0005250:	77 0e                	ja     c0005260 <f_read+0x175>
c0005252:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005256:	bd 02 00 00 00       	mov    ebp,0x2
c000525b:	e9 01 01 00 00       	jmp    c0005361 <f_read+0x276>
c0005260:	83 f8 ff             	cmp    eax,0xffffffff
c0005263:	75 0e                	jne    c0005273 <f_read+0x188>
c0005265:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005269:	bd 01 00 00 00       	mov    ebp,0x1
c000526e:	e9 ee 00 00 00       	jmp    c0005361 <f_read+0x276>
c0005273:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005276:	e9 08 ff ff ff       	jmp    c0005183 <f_read+0x98>
c000527b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000527e:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005281:	29 f0                	sub    eax,esi
c0005283:	19 fa                	sbb    edx,edi
c0005285:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0005288:	89 d7                	mov    edi,edx
c000528a:	ba 00 00 00 00       	mov    edx,0x0
c000528f:	89 f9                	mov    ecx,edi
c0005291:	19 d1                	sbb    ecx,edx
c0005293:	0f 83 64 ff ff ff    	jae    c00051fd <f_read+0x112>
c0005299:	89 c7                	mov    edi,eax
c000529b:	8d 53 50             	lea    edx,[ebx+0x50]
c000529e:	c1 e7 09             	shl    edi,0x9
c00052a1:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00052a5:	b9 00 02 00 00       	mov    ecx,0x200
c00052aa:	01 f8                	add    eax,edi
c00052ac:	e8 4d c7 ff ff       	call   c00019fe <mem_cpy>
c00052b1:	e9 47 ff ff ff       	jmp    c00051fd <f_read+0x112>
c00052b6:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00052b9:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c00052bc:	89 04 24             	mov    DWORD PTR [esp],eax
c00052bf:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00052c3:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c00052c7:	75 05                	jne    c00052ce <f_read+0x1e3>
c00052c9:	39 34 24             	cmp    DWORD PTR [esp],esi
c00052cc:	74 5b                	je     c0005329 <f_read+0x23e>
c00052ce:	8d 43 50             	lea    eax,[ebx+0x50]
c00052d1:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00052d5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00052d9:	79 2a                	jns    c0005305 <f_read+0x21a>
c00052db:	83 ec 0c             	sub    esp,0xc
c00052de:	6a 01                	push   0x1
c00052e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00052e4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00052e8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00052ec:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00052f0:	50                   	push   eax
c00052f1:	e8 54 c6 ff ff       	call   c000194a <disk_write>
c00052f6:	83 c4 20             	add    esp,0x20
c00052f9:	85 c0                	test   eax,eax
c00052fb:	0f 85 64 ff ff ff    	jne    c0005265 <f_read+0x17a>
c0005301:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005305:	83 ec 0c             	sub    esp,0xc
c0005308:	6a 01                	push   0x1
c000530a:	57                   	push   edi
c000530b:	56                   	push   esi
c000530c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005310:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0005314:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005318:	50                   	push   eax
c0005319:	e8 16 c6 ff ff       	call   c0001934 <disk_read>
c000531e:	83 c4 20             	add    esp,0x20
c0005321:	85 c0                	test   eax,eax
c0005323:	0f 85 3c ff ff ff    	jne    c0005265 <f_read+0x17a>
c0005329:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000532c:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c000532f:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005332:	ba 00 02 00 00       	mov    edx,0x200
c0005337:	25 ff 01 00 00       	and    eax,0x1ff
c000533c:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0005340:	29 c2                	sub    edx,eax
c0005342:	39 d6                	cmp    esi,edx
c0005344:	76 02                	jbe    c0005348 <f_read+0x25d>
c0005346:	89 d6                	mov    esi,edx
c0005348:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c000534c:	89 f1                	mov    ecx,esi
c000534e:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005352:	e8 a7 c6 ff ff       	call   c00019fe <mem_cpy>
c0005357:	e9 a7 fe ff ff       	jmp    c0005203 <f_read+0x118>
c000535c:	bd 07 00 00 00       	mov    ebp,0x7
c0005361:	83 c4 2c             	add    esp,0x2c
c0005364:	89 e8                	mov    eax,ebp
c0005366:	5b                   	pop    ebx
c0005367:	5e                   	pop    esi
c0005368:	5f                   	pop    edi
c0005369:	5d                   	pop    ebp
c000536a:	c3                   	ret    

c000536b <f_write>:
c000536b:	55                   	push   ebp
c000536c:	57                   	push   edi
c000536d:	56                   	push   esi
c000536e:	53                   	push   ebx
c000536f:	83 ec 2c             	sub    esp,0x2c
c0005372:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005376:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000537a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005380:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005384:	89 d8                	mov    eax,ebx
c0005386:	e8 f7 cc ff ff       	call   c0002082 <validate>
c000538b:	89 c5                	mov    ebp,eax
c000538d:	85 c0                	test   eax,eax
c000538f:	0f 85 86 02 00 00    	jne    c000561b <f_write+0x2b0>
c0005395:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0005399:	85 ed                	test   ebp,ebp
c000539b:	0f 85 7a 02 00 00    	jne    c000561b <f_write+0x2b0>
c00053a1:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c00053a5:	0f 84 6b 02 00 00    	je     c0005616 <f_write+0x2ab>
c00053ab:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00053af:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00053b2:	0f 84 43 01 00 00    	je     c00054fb <f_write+0x190>
c00053b8:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00053bb:	89 c1                	mov    ecx,eax
c00053bd:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00053c1:	0f 83 34 01 00 00    	jae    c00054fb <f_write+0x190>
c00053c7:	f7 d0                	not    eax
c00053c9:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00053cd:	e9 29 01 00 00       	jmp    c00054fb <f_write+0x190>
c00053d2:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00053d5:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c00053d8:	89 d0                	mov    eax,edx
c00053da:	25 ff 01 00 00       	and    eax,0x1ff
c00053df:	0f 85 00 02 00 00    	jne    c00055e5 <f_write+0x27a>
c00053e5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00053e9:	89 d6                	mov    esi,edx
c00053eb:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c00053ef:	89 cf                	mov    edi,ecx
c00053f1:	48                   	dec    eax
c00053f2:	0f ac fe 09          	shrd   esi,edi,0x9
c00053f6:	21 f0                	and    eax,esi
c00053f8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00053fc:	0f 84 06 01 00 00    	je     c0005508 <f_write+0x19d>
c0005402:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005406:	0f 88 6e 01 00 00    	js     c000557a <f_write+0x20f>
c000540c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005410:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005413:	89 c8                	mov    eax,ecx
c0005415:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0005419:	e8 fa c7 ff ff       	call   c0001c18 <clst2sect>
c000541e:	89 d1                	mov    ecx,edx
c0005420:	09 c1                	or     ecx,eax
c0005422:	0f 84 1c 01 00 00    	je     c0005544 <f_write+0x1d9>
c0005428:	31 ff                	xor    edi,edi
c000542a:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000542e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0005432:	01 c6                	add    esi,eax
c0005434:	11 d7                	adc    edi,edx
c0005436:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c000543e:	0f 86 63 01 00 00    	jbe    c00055a7 <f_write+0x23c>
c0005444:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005448:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000544c:	c1 e8 09             	shr    eax,0x9
c000544f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005453:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005457:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c000545b:	39 c2                	cmp    edx,eax
c000545d:	76 08                	jbe    c0005467 <f_write+0xfc>
c000545f:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0005463:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005467:	83 ec 0c             	sub    esp,0xc
c000546a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000546e:	57                   	push   edi
c000546f:	56                   	push   esi
c0005470:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0005474:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005478:	50                   	push   eax
c0005479:	e8 cc c4 ff ff       	call   c000194a <disk_write>
c000547e:	83 c4 20             	add    esp,0x20
c0005481:	85 c0                	test   eax,eax
c0005483:	0f 85 ce 00 00 00    	jne    c0005557 <f_write+0x1ec>
c0005489:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000548c:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000548f:	29 f0                	sub    eax,esi
c0005491:	19 fa                	sbb    edx,edi
c0005493:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0005497:	89 d7                	mov    edi,edx
c0005499:	ba 00 00 00 00       	mov    edx,0x0
c000549e:	89 f9                	mov    ecx,edi
c00054a0:	19 d1                	sbb    ecx,edx
c00054a2:	73 1c                	jae    c00054c0 <f_write+0x155>
c00054a4:	89 c7                	mov    edi,eax
c00054a6:	b9 00 02 00 00       	mov    ecx,0x200
c00054ab:	c1 e7 09             	shl    edi,0x9
c00054ae:	8d 43 50             	lea    eax,[ebx+0x50]
c00054b1:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c00054b5:	89 fa                	mov    edx,edi
c00054b7:	e8 42 c5 ff ff       	call   c00019fe <mem_cpy>
c00054bc:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00054c0:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00054c4:	c1 e6 09             	shl    esi,0x9
c00054c7:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00054cb:	31 ff                	xor    edi,edi
c00054cd:	01 30                	add    DWORD PTR [eax],esi
c00054cf:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00054d3:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00054d7:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00054da:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c00054dd:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00054e0:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c00054e3:	89 c1                	mov    ecx,eax
c00054e5:	39 f2                	cmp    edx,esi
c00054e7:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00054ea:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c00054ed:	19 f9                	sbb    ecx,edi
c00054ef:	73 04                	jae    c00054f5 <f_write+0x18a>
c00054f1:	89 f2                	mov    edx,esi
c00054f3:	89 f8                	mov    eax,edi
c00054f5:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00054f8:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00054fb:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0005500:	0f 85 cc fe ff ff    	jne    c00053d2 <f_write+0x67>
c0005506:	eb 2e                	jmp    c0005536 <f_write+0x1cb>
c0005508:	89 c8                	mov    eax,ecx
c000550a:	09 d0                	or     eax,edx
c000550c:	75 0b                	jne    c0005519 <f_write+0x1ae>
c000550e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005511:	31 d2                	xor    edx,edx
c0005513:	85 c0                	test   eax,eax
c0005515:	75 28                	jne    c000553f <f_write+0x1d4>
c0005517:	eb 12                	jmp    c000552b <f_write+0x1c0>
c0005519:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c000551d:	74 09                	je     c0005528 <f_write+0x1bd>
c000551f:	89 d8                	mov    eax,ebx
c0005521:	e8 13 c7 ff ff       	call   c0001c39 <clmt_clust>
c0005526:	eb 0a                	jmp    c0005532 <f_write+0x1c7>
c0005528:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000552b:	89 d8                	mov    eax,ebx
c000552d:	e8 a1 da ff ff       	call   c0002fd3 <create_chain>
c0005532:	85 c0                	test   eax,eax
c0005534:	75 09                	jne    c000553f <f_write+0x1d4>
c0005536:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c000553a:	e9 dc 00 00 00       	jmp    c000561b <f_write+0x2b0>
c000553f:	83 f8 01             	cmp    eax,0x1
c0005542:	75 0e                	jne    c0005552 <f_write+0x1e7>
c0005544:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005548:	bd 02 00 00 00       	mov    ebp,0x2
c000554d:	e9 c9 00 00 00       	jmp    c000561b <f_write+0x2b0>
c0005552:	83 f8 ff             	cmp    eax,0xffffffff
c0005555:	75 0e                	jne    c0005565 <f_write+0x1fa>
c0005557:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000555b:	bd 01 00 00 00       	mov    ebp,0x1
c0005560:	e9 b6 00 00 00       	jmp    c000561b <f_write+0x2b0>
c0005565:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005568:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000556c:	0f 85 90 fe ff ff    	jne    c0005402 <f_write+0x97>
c0005572:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005575:	e9 88 fe ff ff       	jmp    c0005402 <f_write+0x97>
c000557a:	83 ec 0c             	sub    esp,0xc
c000557d:	8d 43 50             	lea    eax,[ebx+0x50]
c0005580:	6a 01                	push   0x1
c0005582:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005585:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005588:	50                   	push   eax
c0005589:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000558d:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005591:	50                   	push   eax
c0005592:	e8 b3 c3 ff ff       	call   c000194a <disk_write>
c0005597:	83 c4 20             	add    esp,0x20
c000559a:	85 c0                	test   eax,eax
c000559c:	75 b9                	jne    c0005557 <f_write+0x1ec>
c000559e:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00055a2:	e9 65 fe ff ff       	jmp    c000540c <f_write+0xa1>
c00055a7:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c00055aa:	75 05                	jne    c00055b1 <f_write+0x246>
c00055ac:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c00055af:	74 2e                	je     c00055df <f_write+0x274>
c00055b1:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c00055b4:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00055b7:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c00055ba:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c00055bd:	73 20                	jae    c00055df <f_write+0x274>
c00055bf:	83 ec 0c             	sub    esp,0xc
c00055c2:	8d 43 50             	lea    eax,[ebx+0x50]
c00055c5:	6a 01                	push   0x1
c00055c7:	57                   	push   edi
c00055c8:	56                   	push   esi
c00055c9:	50                   	push   eax
c00055ca:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00055ce:	50                   	push   eax
c00055cf:	e8 60 c3 ff ff       	call   c0001934 <disk_read>
c00055d4:	83 c4 20             	add    esp,0x20
c00055d7:	85 c0                	test   eax,eax
c00055d9:	0f 85 78 ff ff ff    	jne    c0005557 <f_write+0x1ec>
c00055df:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00055e2:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00055e5:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00055e8:	ba 00 02 00 00       	mov    edx,0x200
c00055ed:	25 ff 01 00 00       	and    eax,0x1ff
c00055f2:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00055f6:	29 c2                	sub    edx,eax
c00055f8:	39 d6                	cmp    esi,edx
c00055fa:	76 02                	jbe    c00055fe <f_write+0x293>
c00055fc:	89 d6                	mov    esi,edx
c00055fe:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c0005602:	89 f1                	mov    ecx,esi
c0005604:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0005608:	e8 f1 c3 ff ff       	call   c00019fe <mem_cpy>
c000560d:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c0005611:	e9 b1 fe ff ff       	jmp    c00054c7 <f_write+0x15c>
c0005616:	bd 07 00 00 00       	mov    ebp,0x7
c000561b:	83 c4 2c             	add    esp,0x2c
c000561e:	89 e8                	mov    eax,ebp
c0005620:	5b                   	pop    ebx
c0005621:	5e                   	pop    esi
c0005622:	5f                   	pop    edi
c0005623:	5d                   	pop    ebp
c0005624:	c3                   	ret    

c0005625 <f_sync>:
c0005625:	56                   	push   esi
c0005626:	53                   	push   ebx
c0005627:	83 ec 64             	sub    esp,0x64
c000562a:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c000562e:	8d 54 24 10          	lea    edx,[esp+0x10]
c0005632:	89 d8                	mov    eax,ebx
c0005634:	e8 49 ca ff ff       	call   c0002082 <validate>
c0005639:	85 c0                	test   eax,eax
c000563b:	0f 85 ba 01 00 00    	jne    c00057fb <f_sync+0x1d6>
c0005641:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0005644:	f6 c2 40             	test   dl,0x40
c0005647:	0f 84 ae 01 00 00    	je     c00057fb <f_sync+0x1d6>
c000564d:	84 d2                	test   dl,dl
c000564f:	79 33                	jns    c0005684 <f_sync+0x5f>
c0005651:	83 ec 0c             	sub    esp,0xc
c0005654:	8d 43 50             	lea    eax,[ebx+0x50]
c0005657:	6a 01                	push   0x1
c0005659:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000565c:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000565f:	50                   	push   eax
c0005660:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005664:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005668:	50                   	push   eax
c0005669:	e8 dc c2 ff ff       	call   c000194a <disk_write>
c000566e:	83 c4 20             	add    esp,0x20
c0005671:	89 c2                	mov    edx,eax
c0005673:	b8 01 00 00 00       	mov    eax,0x1
c0005678:	85 d2                	test   edx,edx
c000567a:	0f 85 7b 01 00 00    	jne    c00057fb <f_sync+0x1d6>
c0005680:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005684:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005688:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000568b:	0f 85 11 01 00 00    	jne    c00057a2 <f_sync+0x17d>
c0005691:	89 d8                	mov    eax,ebx
c0005693:	e8 13 d6 ff ff       	call   c0002cab <fill_first_frag>
c0005698:	85 c0                	test   eax,eax
c000569a:	0f 85 5b 01 00 00    	jne    c00057fb <f_sync+0x1d6>
c00056a0:	83 c9 ff             	or     ecx,0xffffffff
c00056a3:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00056a6:	89 d8                	mov    eax,ebx
c00056a8:	e8 c9 d5 ff ff       	call   c0002c76 <fill_last_frag>
c00056ad:	85 c0                	test   eax,eax
c00056af:	0f 85 46 01 00 00    	jne    c00057fb <f_sync+0x1d6>
c00056b5:	83 ec 0c             	sub    esp,0xc
c00056b8:	68 60 04 00 00       	push   0x460
c00056bd:	e8 26 2d 00 00       	call   c00083e8 <ff_memalloc>
c00056c2:	83 c4 10             	add    esp,0x10
c00056c5:	89 c6                	mov    esi,eax
c00056c7:	b8 11 00 00 00       	mov    eax,0x11
c00056cc:	85 f6                	test   esi,esi
c00056ce:	0f 84 27 01 00 00    	je     c00057fb <f_sync+0x1d6>
c00056d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00056d8:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00056de:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00056e1:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00056e4:	89 da                	mov    edx,ebx
c00056e6:	8d 44 24 14          	lea    eax,[esp+0x14]
c00056ea:	e8 af df ff ff       	call   c000369e <load_obj_xdir>
c00056ef:	85 c0                	test   eax,eax
c00056f1:	0f 85 95 00 00 00    	jne    c000578c <f_sync+0x167>
c00056f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00056fb:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00056fe:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c0005702:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c0005705:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c0005708:	83 ca 01             	or     edx,0x1
c000570b:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c000570e:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0005711:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005714:	83 c0 34             	add    eax,0x34
c0005717:	e8 d9 c2 ff ff       	call   c00019f5 <st_dword>
c000571c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005720:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005723:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005726:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005729:	83 c0 38             	add    eax,0x38
c000572c:	e8 c7 c2 ff ff       	call   c00019f8 <st_qword>
c0005731:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005734:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005738:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000573b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000573e:	83 c0 28             	add    eax,0x28
c0005741:	e8 b2 c2 ff ff       	call   c00019f8 <st_qword>
c0005746:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000574a:	ba 00 00 21 50       	mov    edx,0x50210000
c000574f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005752:	83 c0 0c             	add    eax,0xc
c0005755:	e8 9b c2 ff ff       	call   c00019f5 <st_dword>
c000575a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000575e:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005761:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005765:	31 d2                	xor    edx,edx
c0005767:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000576a:	83 c0 10             	add    eax,0x10
c000576d:	e8 83 c2 ff ff       	call   c00019f5 <st_dword>
c0005772:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005776:	e8 62 e1 ff ff       	call   c00038dd <store_xdir>
c000577b:	85 c0                	test   eax,eax
c000577d:	75 0d                	jne    c000578c <f_sync+0x167>
c000577f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005783:	e8 00 eb ff ff       	call   c0004288 <sync_fs>
c0005788:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c000578c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005790:	83 ec 0c             	sub    esp,0xc
c0005793:	56                   	push   esi
c0005794:	e8 67 2c 00 00       	call   c0008400 <ff_memfree>
c0005799:	83 c4 10             	add    esp,0x10
c000579c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00057a0:	eb 59                	jmp    c00057fb <f_sync+0x1d6>
c00057a2:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c00057a5:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c00057a8:	e8 b0 c9 ff ff       	call   c000215d <move_window>
c00057ad:	85 c0                	test   eax,eax
c00057af:	75 4a                	jne    c00057fb <f_sync+0x1d6>
c00057b1:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c00057b4:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c00057b8:	89 f2                	mov    edx,esi
c00057ba:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00057bd:	8b 03                	mov    eax,DWORD PTR [ebx]
c00057bf:	e8 5f f3 ff ff       	call   c0004b23 <st_clust.isra.1>
c00057c4:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00057c7:	8d 46 1c             	lea    eax,[esi+0x1c]
c00057ca:	e8 26 c2 ff ff       	call   c00019f5 <st_dword>
c00057cf:	8d 46 16             	lea    eax,[esi+0x16]
c00057d2:	ba 00 00 21 50       	mov    edx,0x50210000
c00057d7:	e8 19 c2 ff ff       	call   c00019f5 <st_dword>
c00057dc:	8d 46 12             	lea    eax,[esi+0x12]
c00057df:	31 d2                	xor    edx,edx
c00057e1:	e8 0b c2 ff ff       	call   c00019f1 <st_word>
c00057e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057ea:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00057ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057f2:	e8 91 ea ff ff       	call   c0004288 <sync_fs>
c00057f7:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c00057fb:	83 c4 64             	add    esp,0x64
c00057fe:	5b                   	pop    ebx
c00057ff:	5e                   	pop    esi
c0005800:	c3                   	ret    

c0005801 <f_close>:
c0005801:	53                   	push   ebx
c0005802:	83 ec 24             	sub    esp,0x24
c0005805:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0005809:	53                   	push   ebx
c000580a:	e8 16 fe ff ff       	call   c0005625 <f_sync>
c000580f:	83 c4 10             	add    esp,0x10
c0005812:	85 c0                	test   eax,eax
c0005814:	75 15                	jne    c000582b <f_close+0x2a>
c0005816:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000581a:	89 d8                	mov    eax,ebx
c000581c:	e8 61 c8 ff ff       	call   c0002082 <validate>
c0005821:	85 c0                	test   eax,eax
c0005823:	75 06                	jne    c000582b <f_close+0x2a>
c0005825:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000582b:	83 c4 18             	add    esp,0x18
c000582e:	5b                   	pop    ebx
c000582f:	c3                   	ret    

c0005830 <f_lseek>:
c0005830:	55                   	push   ebp
c0005831:	57                   	push   edi
c0005832:	56                   	push   esi
c0005833:	53                   	push   ebx
c0005834:	83 ec 3c             	sub    esp,0x3c
c0005837:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000583b:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c000583f:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005843:	89 04 24             	mov    DWORD PTR [esp],eax
c0005846:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000584a:	89 d8                	mov    eax,ebx
c000584c:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0005850:	e8 2d c8 ff ff       	call   c0002082 <validate>
c0005855:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005859:	85 c0                	test   eax,eax
c000585b:	0f 85 7a 04 00 00    	jne    c0005cdb <f_lseek+0x4ab>
c0005861:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005865:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005869:	85 c0                	test   eax,eax
c000586b:	0f 85 6a 04 00 00    	jne    c0005cdb <f_lseek+0x4ab>
c0005871:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005875:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005878:	74 0c                	je     c0005886 <f_lseek+0x56>
c000587a:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c000587d:	85 c0                	test   eax,eax
c000587f:	75 1f                	jne    c00058a0 <f_lseek+0x70>
c0005881:	e9 b5 01 00 00       	jmp    c0005a3b <f_lseek+0x20b>
c0005886:	83 c9 ff             	or     ecx,0xffffffff
c0005889:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000588c:	89 d8                	mov    eax,ebx
c000588e:	e8 e3 d3 ff ff       	call   c0002c76 <fill_last_frag>
c0005893:	85 c0                	test   eax,eax
c0005895:	74 e3                	je     c000587a <f_lseek+0x4a>
c0005897:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000589b:	e9 3b 04 00 00       	jmp    c0005cdb <f_lseek+0x4ab>
c00058a0:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c00058a5:	0f 85 ac 00 00 00    	jne    c0005957 <f_lseek+0x127>
c00058ab:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c00058af:	0f 85 a2 00 00 00    	jne    c0005957 <f_lseek+0x127>
c00058b5:	8d 78 04             	lea    edi,[eax+0x4]
c00058b8:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c00058bb:	8b 00                	mov    eax,DWORD PTR [eax]
c00058bd:	be 02 00 00 00       	mov    esi,0x2
c00058c2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00058c6:	85 ed                	test   ebp,ebp
c00058c8:	74 73                	je     c000593d <f_lseek+0x10d>
c00058ca:	89 e9                	mov    ecx,ebp
c00058cc:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00058d3:	ff 04 24             	inc    DWORD PTR [esp]
c00058d6:	89 ca                	mov    edx,ecx
c00058d8:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00058dc:	89 d8                	mov    eax,ebx
c00058de:	e8 02 d4 ff ff       	call   c0002ce5 <get_fat>
c00058e3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00058e7:	83 f8 01             	cmp    eax,0x1
c00058ea:	77 11                	ja     c00058fd <f_lseek+0xcd>
c00058ec:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00058f0:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c00058f8:	e9 de 03 00 00       	jmp    c0005cdb <f_lseek+0x4ab>
c00058fd:	83 f8 ff             	cmp    eax,0xffffffff
c0005900:	75 11                	jne    c0005913 <f_lseek+0xe3>
c0005902:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005906:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c000590e:	e9 c8 03 00 00       	jmp    c0005cdb <f_lseek+0x4ab>
c0005913:	8d 51 01             	lea    edx,[ecx+0x1]
c0005916:	89 c1                	mov    ecx,eax
c0005918:	39 c2                	cmp    edx,eax
c000591a:	74 b7                	je     c00058d3 <f_lseek+0xa3>
c000591c:	83 c6 02             	add    esi,0x2
c000591f:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0005923:	72 0b                	jb     c0005930 <f_lseek+0x100>
c0005925:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005928:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c000592b:	89 0f                	mov    DWORD PTR [edi],ecx
c000592d:	83 c7 08             	add    edi,0x8
c0005930:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005934:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005937:	76 04                	jbe    c000593d <f_lseek+0x10d>
c0005939:	89 c5                	mov    ebp,eax
c000593b:	eb 8d                	jmp    c00058ca <f_lseek+0x9a>
c000593d:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005940:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005944:	89 30                	mov    DWORD PTR [eax],esi
c0005946:	0f 87 87 03 00 00    	ja     c0005cd3 <f_lseek+0x4a3>
c000594c:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005952:	e9 84 03 00 00       	jmp    c0005cdb <f_lseek+0x4ab>
c0005957:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000595a:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000595d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005961:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005965:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005969:	39 04 24             	cmp    DWORD PTR [esp],eax
c000596c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005970:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005974:	73 0f                	jae    c0005985 <f_lseek+0x155>
c0005976:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005979:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000597d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005981:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005985:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005989:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000598d:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005990:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005993:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005997:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000599b:	0f 84 3a 03 00 00    	je     c0005cdb <f_lseek+0x4ab>
c00059a1:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00059a5:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00059a9:	83 c6 ff             	add    esi,0xffffffff
c00059ac:	89 d8                	mov    eax,ebx
c00059ae:	83 d7 ff             	adc    edi,0xffffffff
c00059b1:	89 f2                	mov    edx,esi
c00059b3:	89 f9                	mov    ecx,edi
c00059b5:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c00059b9:	89 34 24             	mov    DWORD PTR [esp],esi
c00059bc:	e8 78 c2 ff ff       	call   c0001c39 <clmt_clust>
c00059c1:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00059c5:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00059c8:	89 c2                	mov    edx,eax
c00059ca:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00059ce:	89 c8                	mov    eax,ecx
c00059d0:	e8 43 c2 ff ff       	call   c0001c18 <clst2sect>
c00059d5:	89 d7                	mov    edi,edx
c00059d7:	09 c7                	or     edi,eax
c00059d9:	0f 84 0d ff ff ff    	je     c00058ec <f_lseek+0xbc>
c00059df:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c00059e3:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00059e9:	0f 84 ec 02 00 00    	je     c0005cdb <f_lseek+0x4ab>
c00059ef:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c00059f3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00059f7:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00059fa:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c00059fe:	0f ac fe 09          	shrd   esi,edi,0x9
c0005a02:	4d                   	dec    ebp
c0005a03:	31 ff                	xor    edi,edi
c0005a05:	21 ee                	and    esi,ebp
c0005a07:	01 c6                	add    esi,eax
c0005a09:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005a0c:	11 d7                	adc    edi,edx
c0005a0e:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005a11:	39 fa                	cmp    edx,edi
c0005a13:	75 08                	jne    c0005a1d <f_lseek+0x1ed>
c0005a15:	39 f0                	cmp    eax,esi
c0005a17:	0f 84 be 02 00 00    	je     c0005cdb <f_lseek+0x4ab>
c0005a1d:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005a20:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005a24:	0f 89 80 02 00 00    	jns    c0005caa <f_lseek+0x47a>
c0005a2a:	83 ec 0c             	sub    esp,0xc
c0005a2d:	6a 01                	push   0x1
c0005a2f:	52                   	push   edx
c0005a30:	50                   	push   eax
c0005a31:	55                   	push   ebp
c0005a32:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005a36:	e9 5a 02 00 00       	jmp    c0005c95 <f_lseek+0x465>
c0005a3b:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005a3f:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005a42:	74 16                	je     c0005a5a <f_lseek+0x22a>
c0005a44:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005a49:	76 0f                	jbe    c0005a5a <f_lseek+0x22a>
c0005a4b:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005a52:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005a5a:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a5d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005a60:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005a63:	89 c7                	mov    edi,eax
c0005a65:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005a69:	73 0d                	jae    c0005a78 <f_lseek+0x248>
c0005a6b:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005a6f:	75 07                	jne    c0005a78 <f_lseek+0x248>
c0005a71:	89 14 24             	mov    DWORD PTR [esp],edx
c0005a74:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005a78:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005a7b:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005a7e:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005a82:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005a89:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005a90:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005a93:	75 09                	jne    c0005a9e <f_lseek+0x26e>
c0005a95:	31 f6                	xor    esi,esi
c0005a97:	31 ff                	xor    edi,edi
c0005a99:	e9 af 01 00 00       	jmp    c0005c4d <f_lseek+0x41d>
c0005a9e:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005aa2:	89 d7                	mov    edi,edx
c0005aa4:	c1 e1 09             	shl    ecx,0x9
c0005aa7:	09 c7                	or     edi,eax
c0005aa9:	89 cd                	mov    ebp,ecx
c0005aab:	74 6d                	je     c0005b1a <f_lseek+0x2ea>
c0005aad:	83 c0 ff             	add    eax,0xffffffff
c0005ab0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005ab4:	83 d2 ff             	adc    edx,0xffffffff
c0005ab7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005aba:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005abe:	83 c0 ff             	add    eax,0xffffffff
c0005ac1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005ac5:	83 d2 ff             	adc    edx,0xffffffff
c0005ac8:	31 ff                	xor    edi,edi
c0005aca:	57                   	push   edi
c0005acb:	51                   	push   ecx
c0005acc:	52                   	push   edx
c0005acd:	50                   	push   eax
c0005ace:	e8 cd b9 01 00       	call   c00214a0 <__udivdi3>
c0005ad3:	83 c4 10             	add    esp,0x10
c0005ad6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005ada:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005ade:	57                   	push   edi
c0005adf:	55                   	push   ebp
c0005ae0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005ae4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005ae8:	e8 b3 b9 01 00       	call   c00214a0 <__udivdi3>
c0005aed:	83 c4 10             	add    esp,0x10
c0005af0:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005af4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005af8:	19 d1                	sbb    ecx,edx
c0005afa:	72 1e                	jb     c0005b1a <f_lseek+0x2ea>
c0005afc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005b00:	89 e9                	mov    ecx,ebp
c0005b02:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005b05:	f7 d9                	neg    ecx
c0005b07:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005b0a:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005b0e:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005b11:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005b14:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005b18:	eb 28                	jmp    c0005b42 <f_lseek+0x312>
c0005b1a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005b1d:	85 c0                	test   eax,eax
c0005b1f:	75 1e                	jne    c0005b3f <f_lseek+0x30f>
c0005b21:	31 d2                	xor    edx,edx
c0005b23:	89 d8                	mov    eax,ebx
c0005b25:	e8 a9 d4 ff ff       	call   c0002fd3 <create_chain>
c0005b2a:	83 f8 01             	cmp    eax,0x1
c0005b2d:	0f 84 b9 fd ff ff    	je     c00058ec <f_lseek+0xbc>
c0005b33:	83 f8 ff             	cmp    eax,0xffffffff
c0005b36:	0f 84 c6 fd ff ff    	je     c0005902 <f_lseek+0xd2>
c0005b3c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005b3f:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005b42:	85 c0                	test   eax,eax
c0005b44:	0f 84 4b ff ff ff    	je     c0005a95 <f_lseek+0x265>
c0005b4a:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005b4e:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005b56:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005b59:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005b5d:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005b60:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005b63:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005b67:	0f 83 9d 00 00 00    	jae    c0005c0a <f_lseek+0x3da>
c0005b6d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005b71:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005b75:	29 34 24             	sub    DWORD PTR [esp],esi
c0005b78:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005b7c:	01 f2                	add    edx,esi
c0005b7e:	11 f9                	adc    ecx,edi
c0005b80:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005b84:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005b88:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005b8b:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005b8e:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005b91:	f6 c1 02             	test   cl,0x2
c0005b94:	74 35                	je     c0005bcb <f_lseek+0x39b>
c0005b96:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005b9a:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005b9d:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005ba0:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005ba4:	73 16                	jae    c0005bbc <f_lseek+0x38c>
c0005ba6:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005baa:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005bae:	88 ca                	mov    dl,cl
c0005bb0:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005bb3:	83 ca 40             	or     edx,0x40
c0005bb6:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005bb9:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005bbc:	89 c2                	mov    edx,eax
c0005bbe:	89 d8                	mov    eax,ebx
c0005bc0:	e8 0e d4 ff ff       	call   c0002fd3 <create_chain>
c0005bc5:	85 c0                	test   eax,eax
c0005bc7:	75 0b                	jne    c0005bd4 <f_lseek+0x3a4>
c0005bc9:	eb 30                	jmp    c0005bfb <f_lseek+0x3cb>
c0005bcb:	89 c2                	mov    edx,eax
c0005bcd:	89 d8                	mov    eax,ebx
c0005bcf:	e8 11 d1 ff ff       	call   c0002ce5 <get_fat>
c0005bd4:	83 f8 ff             	cmp    eax,0xffffffff
c0005bd7:	0f 84 25 fd ff ff    	je     c0005902 <f_lseek+0xd2>
c0005bdd:	83 f8 01             	cmp    eax,0x1
c0005be0:	0f 86 06 fd ff ff    	jbe    c00058ec <f_lseek+0xbc>
c0005be6:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005bea:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005bed:	0f 86 f9 fc ff ff    	jbe    c00058ec <f_lseek+0xbc>
c0005bf3:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005bf6:	e9 5b ff ff ff       	jmp    c0005b56 <f_lseek+0x326>
c0005bfb:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005c02:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005c0a:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005c0d:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005c11:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005c14:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005c17:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005c1a:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005c20:	0f 84 6f fe ff ff    	je     c0005a95 <f_lseek+0x265>
c0005c26:	89 c2                	mov    edx,eax
c0005c28:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005c2c:	e8 e7 bf ff ff       	call   c0001c18 <clst2sect>
c0005c31:	89 d7                	mov    edi,edx
c0005c33:	09 c7                	or     edi,eax
c0005c35:	0f 84 b1 fc ff ff    	je     c00058ec <f_lseek+0xbc>
c0005c3b:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005c3f:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005c42:	0f ac fe 09          	shrd   esi,edi,0x9
c0005c46:	c1 ef 09             	shr    edi,0x9
c0005c49:	01 c6                	add    esi,eax
c0005c4b:	11 d7                	adc    edi,edx
c0005c4d:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005c50:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005c53:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005c56:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005c59:	19 d1                	sbb    ecx,edx
c0005c5b:	73 0a                	jae    c0005c67 <f_lseek+0x437>
c0005c5d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005c60:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005c63:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005c67:	a9 ff 01 00 00       	test   eax,0x1ff
c0005c6c:	74 6d                	je     c0005cdb <f_lseek+0x4ab>
c0005c6e:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005c71:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005c74:	39 fa                	cmp    edx,edi
c0005c76:	75 04                	jne    c0005c7c <f_lseek+0x44c>
c0005c78:	39 f0                	cmp    eax,esi
c0005c7a:	74 5f                	je     c0005cdb <f_lseek+0x4ab>
c0005c7c:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005c7f:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005c83:	79 25                	jns    c0005caa <f_lseek+0x47a>
c0005c85:	83 ec 0c             	sub    esp,0xc
c0005c88:	6a 01                	push   0x1
c0005c8a:	52                   	push   edx
c0005c8b:	50                   	push   eax
c0005c8c:	55                   	push   ebp
c0005c8d:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005c91:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005c95:	50                   	push   eax
c0005c96:	e8 af bc ff ff       	call   c000194a <disk_write>
c0005c9b:	83 c4 20             	add    esp,0x20
c0005c9e:	85 c0                	test   eax,eax
c0005ca0:	0f 85 5c fc ff ff    	jne    c0005902 <f_lseek+0xd2>
c0005ca6:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005caa:	83 ec 0c             	sub    esp,0xc
c0005cad:	6a 01                	push   0x1
c0005caf:	57                   	push   edi
c0005cb0:	56                   	push   esi
c0005cb1:	55                   	push   ebp
c0005cb2:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005cb6:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005cba:	50                   	push   eax
c0005cbb:	e8 74 bc ff ff       	call   c0001934 <disk_read>
c0005cc0:	83 c4 20             	add    esp,0x20
c0005cc3:	85 c0                	test   eax,eax
c0005cc5:	0f 85 37 fc ff ff    	jne    c0005902 <f_lseek+0xd2>
c0005ccb:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005cce:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005cd1:	eb 08                	jmp    c0005cdb <f_lseek+0x4ab>
c0005cd3:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005cdb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005cdf:	83 c4 3c             	add    esp,0x3c
c0005ce2:	5b                   	pop    ebx
c0005ce3:	5e                   	pop    esi
c0005ce4:	5f                   	pop    edi
c0005ce5:	5d                   	pop    ebp
c0005ce6:	c3                   	ret    

c0005ce7 <f_opendir>:
c0005ce7:	56                   	push   esi
c0005ce8:	b8 09 00 00 00       	mov    eax,0x9
c0005ced:	53                   	push   ebx
c0005cee:	83 ec 24             	sub    esp,0x24
c0005cf1:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005cf5:	85 db                	test   ebx,ebx
c0005cf7:	0f 84 e6 00 00 00    	je     c0005de3 <f_opendir+0xfc>
c0005cfd:	31 c9                	xor    ecx,ecx
c0005cff:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005d03:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005d07:	e8 03 c7 ff ff       	call   c000240f <mount_volume>
c0005d0c:	85 c0                	test   eax,eax
c0005d0e:	0f 85 c9 00 00 00    	jne    c0005ddd <f_opendir+0xf6>
c0005d14:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005d18:	83 ec 0c             	sub    esp,0xc
c0005d1b:	89 03                	mov    DWORD PTR [ebx],eax
c0005d1d:	68 60 04 00 00       	push   0x460
c0005d22:	e8 c1 26 00 00       	call   c00083e8 <ff_memalloc>
c0005d27:	83 c4 10             	add    esp,0x10
c0005d2a:	89 c6                	mov    esi,eax
c0005d2c:	b8 11 00 00 00       	mov    eax,0x11
c0005d31:	85 f6                	test   esi,esi
c0005d33:	0f 84 aa 00 00 00    	je     c0005de3 <f_opendir+0xfc>
c0005d39:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005d3d:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005d43:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005d46:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005d49:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005d4d:	89 d8                	mov    eax,ebx
c0005d4f:	e8 31 ee ff ff       	call   c0004b85 <follow_path>
c0005d54:	85 c0                	test   eax,eax
c0005d56:	75 61                	jne    c0005db9 <f_opendir+0xd2>
c0005d58:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0005d5c:	78 46                	js     c0005da4 <f_opendir+0xbd>
c0005d5e:	b8 05 00 00 00       	mov    eax,0x5
c0005d63:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0005d67:	74 50                	je     c0005db9 <f_opendir+0xd2>
c0005d69:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005d6d:	8a 01                	mov    al,BYTE PTR [ecx]
c0005d6f:	3c 04                	cmp    al,0x4
c0005d71:	75 26                	jne    c0005d99 <f_opendir+0xb2>
c0005d73:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005d76:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005d79:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0005d7c:	30 d2                	xor    dl,dl
c0005d7e:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c0005d82:	09 c2                	or     edx,eax
c0005d84:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0005d87:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0005d8a:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005d8d:	89 da                	mov    edx,ebx
c0005d8f:	8d 41 10             	lea    eax,[ecx+0x10]
c0005d92:	e8 b4 ed ff ff       	call   c0004b4b <init_alloc_info.isra.2>
c0005d97:	eb 0b                	jmp    c0005da4 <f_opendir+0xbd>
c0005d99:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0005d9c:	e8 59 ed ff ff       	call   c0004afa <ld_clust.isra.0>
c0005da1:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005da4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005da8:	31 d2                	xor    edx,edx
c0005daa:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005dae:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005db2:	89 d8                	mov    eax,ebx
c0005db4:	e8 22 d1 ff ff       	call   c0002edb <dir_sdi>
c0005db9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005dbd:	83 ec 0c             	sub    esp,0xc
c0005dc0:	56                   	push   esi
c0005dc1:	e8 3a 26 00 00       	call   c0008400 <ff_memfree>
c0005dc6:	83 c4 10             	add    esp,0x10
c0005dc9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005dcd:	83 f8 04             	cmp    eax,0x4
c0005dd0:	74 06                	je     c0005dd8 <f_opendir+0xf1>
c0005dd2:	85 c0                	test   eax,eax
c0005dd4:	74 0d                	je     c0005de3 <f_opendir+0xfc>
c0005dd6:	eb 05                	jmp    c0005ddd <f_opendir+0xf6>
c0005dd8:	b8 05 00 00 00       	mov    eax,0x5
c0005ddd:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005de3:	83 c4 24             	add    esp,0x24
c0005de6:	5b                   	pop    ebx
c0005de7:	5e                   	pop    esi
c0005de8:	c3                   	ret    

c0005de9 <f_closedir>:
c0005de9:	53                   	push   ebx
c0005dea:	83 ec 18             	sub    esp,0x18
c0005ded:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0005df1:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005df5:	89 d8                	mov    eax,ebx
c0005df7:	e8 86 c2 ff ff       	call   c0002082 <validate>
c0005dfc:	85 c0                	test   eax,eax
c0005dfe:	75 06                	jne    c0005e06 <f_closedir+0x1d>
c0005e00:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005e06:	83 c4 18             	add    esp,0x18
c0005e09:	5b                   	pop    ebx
c0005e0a:	c3                   	ret    

c0005e0b <f_readdir>:
c0005e0b:	57                   	push   edi
c0005e0c:	56                   	push   esi
c0005e0d:	53                   	push   ebx
c0005e0e:	83 ec 20             	sub    esp,0x20
c0005e11:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005e15:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0005e19:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005e1d:	89 d8                	mov    eax,ebx
c0005e1f:	e8 5e c2 ff ff       	call   c0002082 <validate>
c0005e24:	85 c0                	test   eax,eax
c0005e26:	75 77                	jne    c0005e9f <f_readdir+0x94>
c0005e28:	85 ff                	test   edi,edi
c0005e2a:	75 0b                	jne    c0005e37 <f_readdir+0x2c>
c0005e2c:	31 d2                	xor    edx,edx
c0005e2e:	89 d8                	mov    eax,ebx
c0005e30:	e8 a6 d0 ff ff       	call   c0002edb <dir_sdi>
c0005e35:	eb 68                	jmp    c0005e9f <f_readdir+0x94>
c0005e37:	83 ec 0c             	sub    esp,0xc
c0005e3a:	68 60 04 00 00       	push   0x460
c0005e3f:	e8 a4 25 00 00       	call   c00083e8 <ff_memalloc>
c0005e44:	83 c4 10             	add    esp,0x10
c0005e47:	89 c6                	mov    esi,eax
c0005e49:	b8 11 00 00 00       	mov    eax,0x11
c0005e4e:	85 f6                	test   esi,esi
c0005e50:	74 4d                	je     c0005e9f <f_readdir+0x94>
c0005e52:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005e56:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005e5c:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005e5f:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005e62:	31 d2                	xor    edx,edx
c0005e64:	89 d8                	mov    eax,ebx
c0005e66:	e8 80 d8 ff ff       	call   c00036eb <dir_read>
c0005e6b:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0005e70:	75 19                	jne    c0005e8b <f_readdir+0x80>
c0005e72:	89 fa                	mov    edx,edi
c0005e74:	89 d8                	mov    eax,ebx
c0005e76:	e8 7e ea ff ff       	call   c00048f9 <get_fileinfo>
c0005e7b:	31 d2                	xor    edx,edx
c0005e7d:	89 d8                	mov    eax,ebx
c0005e7f:	e8 af d5 ff ff       	call   c0003433 <dir_next>
c0005e84:	83 f8 04             	cmp    eax,0x4
c0005e87:	75 02                	jne    c0005e8b <f_readdir+0x80>
c0005e89:	31 c0                	xor    eax,eax
c0005e8b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005e8f:	83 ec 0c             	sub    esp,0xc
c0005e92:	56                   	push   esi
c0005e93:	e8 68 25 00 00       	call   c0008400 <ff_memfree>
c0005e98:	83 c4 10             	add    esp,0x10
c0005e9b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005e9f:	83 c4 20             	add    esp,0x20
c0005ea2:	5b                   	pop    ebx
c0005ea3:	5e                   	pop    esi
c0005ea4:	5f                   	pop    edi
c0005ea5:	c3                   	ret    

c0005ea6 <f_stat>:
c0005ea6:	57                   	push   edi
c0005ea7:	31 c9                	xor    ecx,ecx
c0005ea9:	56                   	push   esi
c0005eaa:	53                   	push   ebx
c0005eab:	83 ec 50             	sub    esp,0x50
c0005eae:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0005eb2:	8d 54 24 04          	lea    edx,[esp+0x4]
c0005eb6:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005eba:	e8 50 c5 ff ff       	call   c000240f <mount_volume>
c0005ebf:	89 c3                	mov    ebx,eax
c0005ec1:	85 c0                	test   eax,eax
c0005ec3:	75 67                	jne    c0005f2c <f_stat+0x86>
c0005ec5:	83 ec 0c             	sub    esp,0xc
c0005ec8:	bb 11 00 00 00       	mov    ebx,0x11
c0005ecd:	68 60 04 00 00       	push   0x460
c0005ed2:	e8 11 25 00 00       	call   c00083e8 <ff_memalloc>
c0005ed7:	83 c4 10             	add    esp,0x10
c0005eda:	89 c6                	mov    esi,eax
c0005edc:	85 c0                	test   eax,eax
c0005ede:	74 4c                	je     c0005f2c <f_stat+0x86>
c0005ee0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005ee4:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005eea:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005eed:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005ef0:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0005ef4:	8d 44 24 04          	lea    eax,[esp+0x4]
c0005ef8:	e8 88 ec ff ff       	call   c0004b85 <follow_path>
c0005efd:	89 c3                	mov    ebx,eax
c0005eff:	85 c0                	test   eax,eax
c0005f01:	75 1d                	jne    c0005f20 <f_stat+0x7a>
c0005f03:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0005f08:	78 11                	js     c0005f1b <f_stat+0x75>
c0005f0a:	85 ff                	test   edi,edi
c0005f0c:	74 12                	je     c0005f20 <f_stat+0x7a>
c0005f0e:	89 fa                	mov    edx,edi
c0005f10:	8d 44 24 04          	lea    eax,[esp+0x4]
c0005f14:	e8 e0 e9 ff ff       	call   c00048f9 <get_fileinfo>
c0005f19:	eb 05                	jmp    c0005f20 <f_stat+0x7a>
c0005f1b:	bb 06 00 00 00       	mov    ebx,0x6
c0005f20:	83 ec 0c             	sub    esp,0xc
c0005f23:	56                   	push   esi
c0005f24:	e8 d7 24 00 00       	call   c0008400 <ff_memfree>
c0005f29:	83 c4 10             	add    esp,0x10
c0005f2c:	83 c4 50             	add    esp,0x50
c0005f2f:	89 d8                	mov    eax,ebx
c0005f31:	5b                   	pop    ebx
c0005f32:	5e                   	pop    esi
c0005f33:	5f                   	pop    edi
c0005f34:	c3                   	ret    

c0005f35 <f_getfree>:
c0005f35:	55                   	push   ebp
c0005f36:	31 c9                	xor    ecx,ecx
c0005f38:	57                   	push   edi
c0005f39:	56                   	push   esi
c0005f3a:	53                   	push   ebx
c0005f3b:	83 ec 5c             	sub    esp,0x5c
c0005f3e:	8d 54 24 24          	lea    edx,[esp+0x24]
c0005f42:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005f46:	e8 c4 c4 ff ff       	call   c000240f <mount_volume>
c0005f4b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005f4f:	85 c0                	test   eax,eax
c0005f51:	0f 85 9d 01 00 00    	jne    c00060f4 <f_getfree+0x1bf>
c0005f57:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005f5b:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0005f5f:	89 02                	mov    DWORD PTR [edx],eax
c0005f61:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c0005f64:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0005f67:	8d 71 fe             	lea    esi,[ecx-0x2]
c0005f6a:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005f6e:	39 f2                	cmp    edx,esi
c0005f70:	77 0b                	ja     c0005f7d <f_getfree+0x48>
c0005f72:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0005f76:	89 10                	mov    DWORD PTR [eax],edx
c0005f78:	e9 77 01 00 00       	jmp    c00060f4 <f_getfree+0x1bf>
c0005f7d:	8a 10                	mov    dl,BYTE PTR [eax]
c0005f7f:	80 fa 01             	cmp    dl,0x1
c0005f82:	75 3a                	jne    c0005fbe <f_getfree+0x89>
c0005f84:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0005f88:	be 02 00 00 00       	mov    esi,0x2
c0005f8d:	31 db                	xor    ebx,ebx
c0005f8f:	89 f2                	mov    edx,esi
c0005f91:	8d 44 24 28          	lea    eax,[esp+0x28]
c0005f95:	e8 4b cd ff ff       	call   c0002ce5 <get_fat>
c0005f9a:	83 f8 ff             	cmp    eax,0xffffffff
c0005f9d:	0f 84 28 01 00 00    	je     c00060cb <f_getfree+0x196>
c0005fa3:	83 f8 01             	cmp    eax,0x1
c0005fa6:	0f 84 29 01 00 00    	je     c00060d5 <f_getfree+0x1a0>
c0005fac:	83 d3 00             	adc    ebx,0x0
c0005faf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005fb3:	46                   	inc    esi
c0005fb4:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c0005fb7:	77 d6                	ja     c0005f8f <f_getfree+0x5a>
c0005fb9:	e9 25 01 00 00       	jmp    c00060e3 <f_getfree+0x1ae>
c0005fbe:	80 fa 04             	cmp    dl,0x4
c0005fc1:	0f 85 88 00 00 00    	jne    c000604f <f_getfree+0x11a>
c0005fc7:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0005fca:	31 ed                	xor    ebp,ebp
c0005fcc:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0005fcf:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0005fd3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005fd7:	31 db                	xor    ebx,ebx
c0005fd9:	85 ed                	test   ebp,ebp
c0005fdb:	75 3f                	jne    c000601c <f_getfree+0xe7>
c0005fdd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005fe1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005fe5:	83 c0 01             	add    eax,0x1
c0005fe8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0005fec:	83 d2 00             	adc    edx,0x0
c0005fef:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005ff3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005ff7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005ffb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0005fff:	e8 59 c1 ff ff       	call   c000215d <move_window>
c0006004:	85 c0                	test   eax,eax
c0006006:	0f 85 d3 00 00 00    	jne    c00060df <f_getfree+0x1aa>
c000600c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0006010:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006014:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006018:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000601c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006020:	8d 4e f8             	lea    ecx,[esi-0x8]
c0006023:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c0006027:	89 cf                	mov    edi,ecx
c0006029:	85 f6                	test   esi,esi
c000602b:	74 12                	je     c000603f <f_getfree+0x10a>
c000602d:	88 c1                	mov    cl,al
c000602f:	83 e1 01             	and    ecx,0x1
c0006032:	80 f9 01             	cmp    cl,0x1
c0006035:	83 d3 00             	adc    ebx,0x0
c0006038:	d0 e8                	shr    al,1
c000603a:	4e                   	dec    esi
c000603b:	39 fe                	cmp    esi,edi
c000603d:	75 ea                	jne    c0006029 <f_getfree+0xf4>
c000603f:	45                   	inc    ebp
c0006040:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0006046:	85 f6                	test   esi,esi
c0006048:	75 8f                	jne    c0005fd9 <f_getfree+0xa4>
c000604a:	e9 94 00 00 00       	jmp    c00060e3 <f_getfree+0x1ae>
c000604f:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0006052:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0006055:	31 f6                	xor    esi,esi
c0006057:	31 db                	xor    ebx,ebx
c0006059:	85 f6                	test   esi,esi
c000605b:	75 1b                	jne    c0006078 <f_getfree+0x143>
c000605d:	89 d7                	mov    edi,edx
c000605f:	89 cd                	mov    ebp,ecx
c0006061:	83 c7 01             	add    edi,0x1
c0006064:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006068:	83 d5 00             	adc    ebp,0x0
c000606b:	e8 ed c0 ff ff       	call   c000215d <move_window>
c0006070:	85 c0                	test   eax,eax
c0006072:	75 6b                	jne    c00060df <f_getfree+0x1aa>
c0006074:	89 fa                	mov    edx,edi
c0006076:	89 e9                	mov    ecx,ebp
c0006078:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000607c:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0006080:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c0006084:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0006087:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000608b:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000608f:	75 11                	jne    c00060a2 <f_getfree+0x16d>
c0006091:	e8 e9 b8 ff ff       	call   c000197f <ld_word>
c0006096:	66 83 f8 01          	cmp    ax,0x1
c000609a:	83 d3 00             	adc    ebx,0x0
c000609d:	83 c6 02             	add    esi,0x2
c00060a0:	eb 13                	jmp    c00060b5 <f_getfree+0x180>
c00060a2:	e8 e5 b8 ff ff       	call   c000198c <ld_dword>
c00060a7:	25 ff ff ff 0f       	and    eax,0xfffffff
c00060ac:	83 f8 01             	cmp    eax,0x1
c00060af:	83 d3 00             	adc    ebx,0x0
c00060b2:	83 c6 04             	add    esi,0x4
c00060b5:	81 e6 ff 01 00 00    	and    esi,0x1ff
c00060bb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00060bf:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00060c3:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c00060c7:	75 90                	jne    c0006059 <f_getfree+0x124>
c00060c9:	eb 18                	jmp    c00060e3 <f_getfree+0x1ae>
c00060cb:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00060d3:	eb 0e                	jmp    c00060e3 <f_getfree+0x1ae>
c00060d5:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c00060dd:	eb 04                	jmp    c00060e3 <f_getfree+0x1ae>
c00060df:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00060e3:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00060e7:	89 18                	mov    DWORD PTR [eax],ebx
c00060e9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00060ed:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c00060f0:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c00060f4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00060f8:	83 c4 5c             	add    esp,0x5c
c00060fb:	5b                   	pop    ebx
c00060fc:	5e                   	pop    esi
c00060fd:	5f                   	pop    edi
c00060fe:	5d                   	pop    ebp
c00060ff:	c3                   	ret    

c0006100 <f_truncate>:
c0006100:	56                   	push   esi
c0006101:	53                   	push   ebx
c0006102:	83 ec 14             	sub    esp,0x14
c0006105:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0006109:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000610d:	89 d8                	mov    eax,ebx
c000610f:	e8 6e bf ff ff       	call   c0002082 <validate>
c0006114:	89 c6                	mov    esi,eax
c0006116:	85 c0                	test   eax,eax
c0006118:	0f 85 d2 00 00 00    	jne    c00061f0 <f_truncate+0xf0>
c000611e:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c0006122:	85 f6                	test   esi,esi
c0006124:	0f 85 c6 00 00 00    	jne    c00061f0 <f_truncate+0xf0>
c000612a:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c000612e:	0f 84 b7 00 00 00    	je     c00061eb <f_truncate+0xeb>
c0006134:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006137:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000613a:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000613d:	89 d1                	mov    ecx,edx
c000613f:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c0006142:	0f 83 a8 00 00 00    	jae    c00061f0 <f_truncate+0xf0>
c0006148:	09 c2                	or     edx,eax
c000614a:	75 15                	jne    c0006161 <f_truncate+0x61>
c000614c:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000614f:	31 c9                	xor    ecx,ecx
c0006151:	89 d8                	mov    eax,ebx
c0006153:	e8 7a d0 ff ff       	call   c00031d2 <remove_chain>
c0006158:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000615f:	eb 35                	jmp    c0006196 <f_truncate+0x96>
c0006161:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0006164:	89 d8                	mov    eax,ebx
c0006166:	e8 7a cb ff ff       	call   c0002ce5 <get_fat>
c000616b:	89 c2                	mov    edx,eax
c000616d:	b8 01 00 00 00       	mov    eax,0x1
c0006172:	83 fa ff             	cmp    edx,0xffffffff
c0006175:	74 1f                	je     c0006196 <f_truncate+0x96>
c0006177:	b8 02 00 00 00       	mov    eax,0x2
c000617c:	83 fa 01             	cmp    edx,0x1
c000617f:	74 15                	je     c0006196 <f_truncate+0x96>
c0006181:	31 c0                	xor    eax,eax
c0006183:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006187:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c000618a:	76 0a                	jbe    c0006196 <f_truncate+0x96>
c000618c:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000618f:	89 d8                	mov    eax,ebx
c0006191:	e8 3c d0 ff ff       	call   c00031d2 <remove_chain>
c0006196:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0006199:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c000619c:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000619f:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c00061a2:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c00061a5:	83 ca 40             	or     edx,0x40
c00061a8:	85 c0                	test   eax,eax
c00061aa:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c00061ad:	75 35                	jne    c00061e4 <f_truncate+0xe4>
c00061af:	84 d2                	test   dl,dl
c00061b1:	79 3d                	jns    c00061f0 <f_truncate+0xf0>
c00061b3:	83 ec 0c             	sub    esp,0xc
c00061b6:	8d 43 50             	lea    eax,[ebx+0x50]
c00061b9:	6a 01                	push   0x1
c00061bb:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c00061be:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00061c1:	50                   	push   eax
c00061c2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00061c6:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00061ca:	50                   	push   eax
c00061cb:	e8 7a b7 ff ff       	call   c000194a <disk_write>
c00061d0:	83 c4 20             	add    esp,0x20
c00061d3:	85 c0                	test   eax,eax
c00061d5:	75 08                	jne    c00061df <f_truncate+0xdf>
c00061d7:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00061db:	31 f6                	xor    esi,esi
c00061dd:	eb 11                	jmp    c00061f0 <f_truncate+0xf0>
c00061df:	b8 01 00 00 00       	mov    eax,0x1
c00061e4:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c00061e7:	89 c6                	mov    esi,eax
c00061e9:	eb 05                	jmp    c00061f0 <f_truncate+0xf0>
c00061eb:	be 07 00 00 00       	mov    esi,0x7
c00061f0:	89 f0                	mov    eax,esi
c00061f2:	83 c4 14             	add    esp,0x14
c00061f5:	5b                   	pop    ebx
c00061f6:	5e                   	pop    esi
c00061f7:	c3                   	ret    

c00061f8 <f_unlink>:
c00061f8:	56                   	push   esi
c00061f9:	b9 02 00 00 00       	mov    ecx,0x2
c00061fe:	53                   	push   ebx
c00061ff:	81 ec e4 00 00 00    	sub    esp,0xe4
c0006205:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0006209:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c0006210:	e8 fa c1 ff ff       	call   c000240f <mount_volume>
c0006215:	85 c0                	test   eax,eax
c0006217:	0f 85 55 01 00 00    	jne    c0006372 <f_unlink+0x17a>
c000621d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006221:	83 ec 0c             	sub    esp,0xc
c0006224:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0006228:	68 60 04 00 00       	push   0x460
c000622d:	e8 b6 21 00 00       	call   c00083e8 <ff_memalloc>
c0006232:	83 c4 10             	add    esp,0x10
c0006235:	89 c3                	mov    ebx,eax
c0006237:	b8 11 00 00 00       	mov    eax,0x11
c000623c:	85 db                	test   ebx,ebx
c000623e:	0f 84 2e 01 00 00    	je     c0006372 <f_unlink+0x17a>
c0006244:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006248:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c000624e:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006251:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006254:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c000625b:	8d 44 24 48          	lea    eax,[esp+0x48]
c000625f:	e8 21 e9 ff ff       	call   c0004b85 <follow_path>
c0006264:	85 c0                	test   eax,eax
c0006266:	0f 85 f2 00 00 00    	jne    c000635e <f_unlink+0x166>
c000626c:	b8 06 00 00 00       	mov    eax,0x6
c0006271:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c0006279:	0f 88 df 00 00 00    	js     c000635e <f_unlink+0x166>
c000627f:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c0006284:	74 0a                	je     c0006290 <f_unlink+0x98>
c0006286:	b8 07 00 00 00       	mov    eax,0x7
c000628b:	e9 ce 00 00 00       	jmp    c000635e <f_unlink+0x166>
c0006290:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006294:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0006298:	8a 02                	mov    al,BYTE PTR [edx]
c000629a:	3c 04                	cmp    al,0x4
c000629c:	75 12                	jne    c00062b0 <f_unlink+0xb8>
c000629e:	8d 42 10             	lea    eax,[edx+0x10]
c00062a1:	8d 54 24 20          	lea    edx,[esp+0x20]
c00062a5:	e8 a1 e8 ff ff       	call   c0004b4b <init_alloc_info.isra.2>
c00062aa:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c00062ae:	eb 0e                	jmp    c00062be <f_unlink+0xc6>
c00062b0:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c00062b7:	e8 3e e8 ff ff       	call   c0004afa <ld_clust.isra.0>
c00062bc:	89 c6                	mov    esi,eax
c00062be:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c00062c3:	75 12                	jne    c00062d7 <f_unlink+0xdf>
c00062c5:	8d 44 24 48          	lea    eax,[esp+0x48]
c00062c9:	e8 94 d6 ff ff       	call   c0003962 <dir_remove>
c00062ce:	85 c0                	test   eax,eax
c00062d0:	74 6c                	je     c000633e <f_unlink+0x146>
c00062d2:	e9 87 00 00 00       	jmp    c000635e <f_unlink+0x166>
c00062d7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00062db:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c00062e2:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c00062e9:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00062ec:	75 21                	jne    c000630f <f_unlink+0x117>
c00062ee:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00062f2:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00062f6:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c00062fd:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c0006304:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c0006308:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c000630f:	31 d2                	xor    edx,edx
c0006311:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0006318:	e8 be cb ff ff       	call   c0002edb <dir_sdi>
c000631d:	85 c0                	test   eax,eax
c000631f:	75 3d                	jne    c000635e <f_unlink+0x166>
c0006321:	31 d2                	xor    edx,edx
c0006323:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c000632a:	e8 bc d3 ff ff       	call   c00036eb <dir_read>
c000632f:	85 c0                	test   eax,eax
c0006331:	0f 84 4f ff ff ff    	je     c0006286 <f_unlink+0x8e>
c0006337:	83 f8 04             	cmp    eax,0x4
c000633a:	75 22                	jne    c000635e <f_unlink+0x166>
c000633c:	eb 87                	jmp    c00062c5 <f_unlink+0xcd>
c000633e:	85 f6                	test   esi,esi
c0006340:	75 0b                	jne    c000634d <f_unlink+0x155>
c0006342:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006346:	e8 3d df ff ff       	call   c0004288 <sync_fs>
c000634b:	eb 11                	jmp    c000635e <f_unlink+0x166>
c000634d:	31 c9                	xor    ecx,ecx
c000634f:	89 f2                	mov    edx,esi
c0006351:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006355:	e8 78 ce ff ff       	call   c00031d2 <remove_chain>
c000635a:	85 c0                	test   eax,eax
c000635c:	74 e4                	je     c0006342 <f_unlink+0x14a>
c000635e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006362:	83 ec 0c             	sub    esp,0xc
c0006365:	53                   	push   ebx
c0006366:	e8 95 20 00 00       	call   c0008400 <ff_memfree>
c000636b:	83 c4 10             	add    esp,0x10
c000636e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006372:	81 c4 e4 00 00 00    	add    esp,0xe4
c0006378:	5b                   	pop    ebx
c0006379:	5e                   	pop    esi
c000637a:	c3                   	ret    

c000637b <f_mkdir>:
c000637b:	57                   	push   edi
c000637c:	b9 02 00 00 00       	mov    ecx,0x2
c0006381:	56                   	push   esi
c0006382:	53                   	push   ebx
c0006383:	83 c4 80             	add    esp,0xffffff80
c0006386:	8d 54 24 08          	lea    edx,[esp+0x8]
c000638a:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c0006391:	e8 79 c0 ff ff       	call   c000240f <mount_volume>
c0006396:	89 c3                	mov    ebx,eax
c0006398:	85 c0                	test   eax,eax
c000639a:	0f 85 fe 01 00 00    	jne    c000659e <f_mkdir+0x223>
c00063a0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00063a4:	bb 11 00 00 00       	mov    ebx,0x11
c00063a9:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00063ad:	83 ec 0c             	sub    esp,0xc
c00063b0:	68 60 04 00 00       	push   0x460
c00063b5:	e8 2e 20 00 00       	call   c00083e8 <ff_memalloc>
c00063ba:	83 c4 10             	add    esp,0x10
c00063bd:	89 c7                	mov    edi,eax
c00063bf:	85 c0                	test   eax,eax
c00063c1:	0f 84 d7 01 00 00    	je     c000659e <f_mkdir+0x223>
c00063c7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00063cb:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c00063d1:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c00063d4:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00063d7:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c00063de:	8d 44 24 34          	lea    eax,[esp+0x34]
c00063e2:	e8 9e e7 ff ff       	call   c0004b85 <follow_path>
c00063e7:	89 c3                	mov    ebx,eax
c00063e9:	85 c0                	test   eax,eax
c00063eb:	74 3e                	je     c000642b <f_mkdir+0xb0>
c00063ed:	83 f8 04             	cmp    eax,0x4
c00063f0:	75 3e                	jne    c0006430 <f_mkdir+0xb5>
c00063f2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00063f6:	31 d2                	xor    edx,edx
c00063f8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00063fc:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0006400:	e8 ce cb ff ff       	call   c0002fd3 <create_chain>
c0006405:	89 c6                	mov    esi,eax
c0006407:	85 c0                	test   eax,eax
c0006409:	74 0c                	je     c0006417 <f_mkdir+0x9c>
c000640b:	bb 02 00 00 00       	mov    ebx,0x2
c0006410:	83 f8 01             	cmp    eax,0x1
c0006413:	74 07                	je     c000641c <f_mkdir+0xa1>
c0006415:	eb 2a                	jmp    c0006441 <f_mkdir+0xc6>
c0006417:	bb 07 00 00 00       	mov    ebx,0x7
c000641c:	31 c9                	xor    ecx,ecx
c000641e:	89 f2                	mov    edx,esi
c0006420:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0006424:	e8 a9 cd ff ff       	call   c00031d2 <remove_chain>
c0006429:	eb 05                	jmp    c0006430 <f_mkdir+0xb5>
c000642b:	bb 08 00 00 00       	mov    ebx,0x8
c0006430:	83 ec 0c             	sub    esp,0xc
c0006433:	57                   	push   edi
c0006434:	e8 c7 1f 00 00       	call   c0008400 <ff_memfree>
c0006439:	83 c4 10             	add    esp,0x10
c000643c:	e9 5d 01 00 00       	jmp    c000659e <f_mkdir+0x223>
c0006441:	bb 01 00 00 00       	mov    ebx,0x1
c0006446:	83 f8 ff             	cmp    eax,0xffffffff
c0006449:	74 d1                	je     c000641c <f_mkdir+0xa1>
c000644b:	89 f2                	mov    edx,esi
c000644d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006451:	e8 c4 ce ff ff       	call   c000331a <dir_clear>
c0006456:	89 c3                	mov    ebx,eax
c0006458:	85 c0                	test   eax,eax
c000645a:	75 c0                	jne    c000641c <f_mkdir+0xa1>
c000645c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006460:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006463:	74 69                	je     c00064ce <f_mkdir+0x153>
c0006465:	b9 0b 00 00 00       	mov    ecx,0xb
c000646a:	83 c0 54             	add    eax,0x54
c000646d:	ba 20 00 00 00       	mov    edx,0x20
c0006472:	e8 9c b5 ff ff       	call   c0001a13 <mem_set>
c0006477:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000647b:	ba 00 00 21 50       	mov    edx,0x50210000
c0006480:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c0006484:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c0006488:	83 c0 6a             	add    eax,0x6a
c000648b:	e8 65 b5 ff ff       	call   c00019f5 <st_dword>
c0006490:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006494:	89 f1                	mov    ecx,esi
c0006496:	8d 50 54             	lea    edx,[eax+0x54]
c0006499:	e8 85 e6 ff ff       	call   c0004b23 <st_clust.isra.1>
c000649e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064a2:	b9 20 00 00 00       	mov    ecx,0x20
c00064a7:	8d 50 54             	lea    edx,[eax+0x54]
c00064aa:	83 c0 74             	add    eax,0x74
c00064ad:	e8 4c b5 ff ff       	call   c00019fe <mem_cpy>
c00064b2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064b6:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c00064ba:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c00064be:	8d 50 74             	lea    edx,[eax+0x74]
c00064c1:	e8 5d e6 ff ff       	call   c0004b23 <st_clust.isra.1>
c00064c6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064ca:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00064ce:	8d 44 24 34          	lea    eax,[esp+0x34]
c00064d2:	e8 2f db ff ff       	call   c0004006 <dir_register>
c00064d7:	89 c3                	mov    ebx,eax
c00064d9:	85 c0                	test   eax,eax
c00064db:	0f 85 3b ff ff ff    	jne    c000641c <f_mkdir+0xa1>
c00064e1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064e5:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00064e8:	75 74                	jne    c000655e <f_mkdir+0x1e3>
c00064ea:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00064ed:	ba 00 00 21 50       	mov    edx,0x50210000
c00064f2:	83 c0 0c             	add    eax,0xc
c00064f5:	e8 fb b4 ff ff       	call   c00019f5 <st_dword>
c00064fa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064fe:	89 f2                	mov    edx,esi
c0006500:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006503:	83 c0 34             	add    eax,0x34
c0006506:	e8 ea b4 ff ff       	call   c00019f5 <st_dword>
c000650b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000650f:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0006513:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006516:	c1 e2 09             	shl    edx,0x9
c0006519:	83 c0 38             	add    eax,0x38
c000651c:	e8 d4 b4 ff ff       	call   c00019f5 <st_dword>
c0006521:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006525:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0006529:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000652c:	c1 e2 09             	shl    edx,0x9
c000652f:	83 c0 28             	add    eax,0x28
c0006532:	e8 be b4 ff ff       	call   c00019f5 <st_dword>
c0006537:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000653b:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000653e:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c0006542:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006545:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c0006549:	8d 44 24 34          	lea    eax,[esp+0x34]
c000654d:	e8 8b d3 ff ff       	call   c00038dd <store_xdir>
c0006552:	89 c3                	mov    ebx,eax
c0006554:	85 c0                	test   eax,eax
c0006556:	0f 85 d4 fe ff ff    	jne    c0006430 <f_mkdir+0xb5>
c000655c:	eb 30                	jmp    c000658e <f_mkdir+0x213>
c000655e:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006562:	ba 00 00 21 50       	mov    edx,0x50210000
c0006567:	83 c0 16             	add    eax,0x16
c000656a:	e8 86 b4 ff ff       	call   c00019f5 <st_dword>
c000656f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006573:	89 f1                	mov    ecx,esi
c0006575:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0006579:	e8 a5 e5 ff ff       	call   c0004b23 <st_clust.isra.1>
c000657e:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006582:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0006586:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000658a:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000658e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006592:	e8 f1 dc ff ff       	call   c0004288 <sync_fs>
c0006597:	89 c3                	mov    ebx,eax
c0006599:	e9 92 fe ff ff       	jmp    c0006430 <f_mkdir+0xb5>
c000659e:	83 ec 80             	sub    esp,0xffffff80
c00065a1:	89 d8                	mov    eax,ebx
c00065a3:	5b                   	pop    ebx
c00065a4:	5e                   	pop    esi
c00065a5:	5f                   	pop    edi
c00065a6:	c3                   	ret    

c00065a7 <f_rename>:
c00065a7:	55                   	push   ebp
c00065a8:	57                   	push   edi
c00065a9:	56                   	push   esi
c00065aa:	53                   	push   ebx
c00065ab:	81 ec fc 00 00 00    	sub    esp,0xfc
c00065b1:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c00065b8:	e8 a4 b9 ff ff       	call   c0001f61 <get_ldnumber>
c00065bd:	b9 02 00 00 00       	mov    ecx,0x2
c00065c2:	8d 54 24 14          	lea    edx,[esp+0x14]
c00065c6:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c00065cd:	e8 3d be ff ff       	call   c000240f <mount_volume>
c00065d2:	85 c0                	test   eax,eax
c00065d4:	0f 85 b5 02 00 00    	jne    c000688f <f_rename+0x2e8>
c00065da:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00065de:	83 ec 0c             	sub    esp,0xc
c00065e1:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00065e5:	68 60 04 00 00       	push   0x460
c00065ea:	e8 f9 1d 00 00       	call   c00083e8 <ff_memalloc>
c00065ef:	83 c4 10             	add    esp,0x10
c00065f2:	89 c3                	mov    ebx,eax
c00065f4:	b8 11 00 00 00       	mov    eax,0x11
c00065f9:	85 db                	test   ebx,ebx
c00065fb:	0f 84 8e 02 00 00    	je     c000688f <f_rename+0x2e8>
c0006601:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006605:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c000660b:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c000660e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006611:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c0006618:	8d 44 24 58          	lea    eax,[esp+0x58]
c000661c:	e8 64 e5 ff ff       	call   c0004b85 <follow_path>
c0006621:	85 c0                	test   eax,eax
c0006623:	0f 85 52 02 00 00    	jne    c000687b <f_rename+0x2d4>
c0006629:	b8 06 00 00 00       	mov    eax,0x6
c000662e:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c0006636:	0f 85 3f 02 00 00    	jne    c000687b <f_rename+0x2d4>
c000663c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006640:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006643:	0f 85 05 01 00 00    	jne    c000674e <f_rename+0x1a7>
c0006649:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000664c:	b9 40 00 00 00       	mov    ecx,0x40
c0006651:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006655:	e8 a4 b3 ff ff       	call   c00019fe <mem_cpy>
c000665a:	b9 4c 00 00 00       	mov    ecx,0x4c
c000665f:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006663:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000666a:	e8 8f b3 ff ff       	call   c00019fe <mem_cpy>
c000666f:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006676:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000667d:	e8 03 e5 ff ff       	call   c0004b85 <follow_path>
c0006682:	85 c0                	test   eax,eax
c0006684:	75 29                	jne    c00066af <f_rename+0x108>
c0006686:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000668a:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006691:	74 0a                	je     c000669d <f_rename+0xf6>
c0006693:	b8 08 00 00 00       	mov    eax,0x8
c0006698:	e9 de 01 00 00       	jmp    c000687b <f_rename+0x2d4>
c000669d:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c00066a4:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c00066ab:	75 e6                	jne    c0006693 <f_rename+0xec>
c00066ad:	eb 09                	jmp    c00066b8 <f_rename+0x111>
c00066af:	83 f8 04             	cmp    eax,0x4
c00066b2:	0f 85 c3 01 00 00    	jne    c000687b <f_rename+0x2d4>
c00066b8:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00066bf:	e8 42 d9 ff ff       	call   c0004006 <dir_register>
c00066c4:	85 c0                	test   eax,eax
c00066c6:	0f 85 af 01 00 00    	jne    c000687b <f_rename+0x2d4>
c00066cc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00066d0:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c00066d3:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00066d6:	89 c5                	mov    ebp,eax
c00066d8:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c00066db:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00066df:	8d 46 24             	lea    eax,[esi+0x24]
c00066e2:	e8 98 b2 ff ff       	call   c000197f <ld_word>
c00066e7:	b9 40 00 00 00       	mov    ecx,0x40
c00066ec:	89 c7                	mov    edi,eax
c00066ee:	8d 54 24 18          	lea    edx,[esp+0x18]
c00066f2:	89 f0                	mov    eax,esi
c00066f4:	e8 05 b3 ff ff       	call   c00019fe <mem_cpy>
c00066f9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00066fd:	89 e9                	mov    ecx,ebp
c00066ff:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006702:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c0006705:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0006709:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000670d:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006710:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c0006713:	0f b7 d7             	movzx  edx,di
c0006716:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006719:	83 c0 24             	add    eax,0x24
c000671c:	e8 d0 b2 ff ff       	call   c00019f1 <st_word>
c0006721:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006725:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006728:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c000672b:	a8 10                	test   al,0x10
c000672d:	75 06                	jne    c0006735 <f_rename+0x18e>
c000672f:	83 c8 20             	or     eax,0x20
c0006732:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0006735:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000673c:	e8 9c d1 ff ff       	call   c00038dd <store_xdir>
c0006741:	85 c0                	test   eax,eax
c0006743:	0f 84 1c 01 00 00    	je     c0006865 <f_rename+0x2be>
c0006749:	e9 2d 01 00 00       	jmp    c000687b <f_rename+0x2d4>
c000674e:	b9 20 00 00 00       	mov    ecx,0x20
c0006753:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c000675a:	8d 44 24 18          	lea    eax,[esp+0x18]
c000675e:	e8 9b b2 ff ff       	call   c00019fe <mem_cpy>
c0006763:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006768:	8d 54 24 58          	lea    edx,[esp+0x58]
c000676c:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006773:	e8 86 b2 ff ff       	call   c00019fe <mem_cpy>
c0006778:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c000677f:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006786:	e8 fa e3 ff ff       	call   c0004b85 <follow_path>
c000678b:	85 c0                	test   eax,eax
c000678d:	75 27                	jne    c00067b6 <f_rename+0x20f>
c000678f:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006793:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c000679a:	0f 85 f3 fe ff ff    	jne    c0006693 <f_rename+0xec>
c00067a0:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c00067a7:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c00067ae:	0f 85 df fe ff ff    	jne    c0006693 <f_rename+0xec>
c00067b4:	eb 09                	jmp    c00067bf <f_rename+0x218>
c00067b6:	83 f8 04             	cmp    eax,0x4
c00067b9:	0f 85 bc 00 00 00    	jne    c000687b <f_rename+0x2d4>
c00067bf:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00067c6:	e8 3b d8 ff ff       	call   c0004006 <dir_register>
c00067cb:	85 c0                	test   eax,eax
c00067cd:	0f 85 a8 00 00 00    	jne    c000687b <f_rename+0x2d4>
c00067d3:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c00067da:	b9 13 00 00 00       	mov    ecx,0x13
c00067df:	8d 46 0d             	lea    eax,[esi+0xd]
c00067e2:	8d 54 24 25          	lea    edx,[esp+0x25]
c00067e6:	e8 13 b2 ff ff       	call   c00019fe <mem_cpy>
c00067eb:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c00067ef:	a8 10                	test   al,0x10
c00067f1:	75 03                	jne    c00067f6 <f_rename+0x24f>
c00067f3:	83 c8 20             	or     eax,0x20
c00067f6:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c00067f9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00067fd:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006801:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c0006805:	74 5e                	je     c0006865 <f_rename+0x2be>
c0006807:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c000680e:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c0006812:	74 51                	je     c0006865 <f_rename+0x2be>
c0006814:	89 f2                	mov    edx,esi
c0006816:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000681a:	8a 07                	mov    al,BYTE PTR [edi]
c000681c:	e8 d9 e2 ff ff       	call   c0004afa <ld_clust.isra.0>
c0006821:	89 c2                	mov    edx,eax
c0006823:	89 f8                	mov    eax,edi
c0006825:	e8 ee b3 ff ff       	call   c0001c18 <clst2sect>
c000682a:	89 c6                	mov    esi,eax
c000682c:	89 d1                	mov    ecx,edx
c000682e:	b8 02 00 00 00       	mov    eax,0x2
c0006833:	09 f2                	or     edx,esi
c0006835:	74 44                	je     c000687b <f_rename+0x2d4>
c0006837:	89 f2                	mov    edx,esi
c0006839:	89 f8                	mov    eax,edi
c000683b:	e8 1d b9 ff ff       	call   c000215d <move_window>
c0006840:	85 c0                	test   eax,eax
c0006842:	75 37                	jne    c000687b <f_rename+0x2d4>
c0006844:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006848:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c000684c:	75 17                	jne    c0006865 <f_rename+0x2be>
c000684e:	8d 50 74             	lea    edx,[eax+0x74]
c0006851:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006858:	e8 c6 e2 ff ff       	call   c0004b23 <st_clust.isra.1>
c000685d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006861:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006865:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006869:	e8 f4 d0 ff ff       	call   c0003962 <dir_remove>
c000686e:	85 c0                	test   eax,eax
c0006870:	75 09                	jne    c000687b <f_rename+0x2d4>
c0006872:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006876:	e8 0d da ff ff       	call   c0004288 <sync_fs>
c000687b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000687f:	83 ec 0c             	sub    esp,0xc
c0006882:	53                   	push   ebx
c0006883:	e8 78 1b 00 00       	call   c0008400 <ff_memfree>
c0006888:	83 c4 10             	add    esp,0x10
c000688b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000688f:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006895:	5b                   	pop    ebx
c0006896:	5e                   	pop    esi
c0006897:	5f                   	pop    edi
c0006898:	5d                   	pop    ebp
c0006899:	c3                   	ret    

c000689a <f_chmod>:
c000689a:	57                   	push   edi
c000689b:	b9 02 00 00 00       	mov    ecx,0x2
c00068a0:	56                   	push   esi
c00068a1:	53                   	push   ebx
c00068a2:	83 ec 60             	sub    esp,0x60
c00068a5:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c00068a9:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c00068ad:	8d 54 24 10          	lea    edx,[esp+0x10]
c00068b1:	8d 44 24 70          	lea    eax,[esp+0x70]
c00068b5:	e8 55 bb ff ff       	call   c000240f <mount_volume>
c00068ba:	85 c0                	test   eax,eax
c00068bc:	0f 85 af 00 00 00    	jne    c0006971 <f_chmod+0xd7>
c00068c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00068c6:	83 ec 0c             	sub    esp,0xc
c00068c9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00068cd:	68 60 04 00 00       	push   0x460
c00068d2:	e8 11 1b 00 00       	call   c00083e8 <ff_memalloc>
c00068d7:	83 c4 10             	add    esp,0x10
c00068da:	89 c6                	mov    esi,eax
c00068dc:	b8 11 00 00 00       	mov    eax,0x11
c00068e1:	85 f6                	test   esi,esi
c00068e3:	0f 84 88 00 00 00    	je     c0006971 <f_chmod+0xd7>
c00068e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00068ed:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00068f3:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00068f6:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00068f9:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c00068fd:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006901:	e8 7f e2 ff ff       	call   c0004b85 <follow_path>
c0006906:	85 c0                	test   eax,eax
c0006908:	75 53                	jne    c000695d <f_chmod+0xc3>
c000690a:	b8 06 00 00 00       	mov    eax,0x6
c000690f:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006914:	75 47                	jne    c000695d <f_chmod+0xc3>
c0006916:	89 f9                	mov    ecx,edi
c0006918:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000691c:	83 e1 27             	and    ecx,0x27
c000691f:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006922:	75 1d                	jne    c0006941 <f_chmod+0xa7>
c0006924:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006927:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c000692a:	21 cb                	and    ebx,ecx
c000692c:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c000692f:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c0006932:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006936:	e8 a2 cf ff ff       	call   c00038dd <store_xdir>
c000693b:	85 c0                	test   eax,eax
c000693d:	75 1e                	jne    c000695d <f_chmod+0xc3>
c000693f:	eb 13                	jmp    c0006954 <f_chmod+0xba>
c0006941:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006945:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006948:	21 cb                	and    ebx,ecx
c000694a:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c000694d:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0006950:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006954:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006958:	e8 2b d9 ff ff       	call   c0004288 <sync_fs>
c000695d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006961:	83 ec 0c             	sub    esp,0xc
c0006964:	56                   	push   esi
c0006965:	e8 96 1a 00 00       	call   c0008400 <ff_memfree>
c000696a:	83 c4 10             	add    esp,0x10
c000696d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006971:	83 c4 60             	add    esp,0x60
c0006974:	5b                   	pop    ebx
c0006975:	5e                   	pop    esi
c0006976:	5f                   	pop    edi
c0006977:	c3                   	ret    

c0006978 <f_utime>:
c0006978:	56                   	push   esi
c0006979:	b9 02 00 00 00       	mov    ecx,0x2
c000697e:	53                   	push   ebx
c000697f:	83 ec 64             	sub    esp,0x64
c0006982:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006986:	8d 54 24 10          	lea    edx,[esp+0x10]
c000698a:	8d 44 24 70          	lea    eax,[esp+0x70]
c000698e:	e8 7c ba ff ff       	call   c000240f <mount_volume>
c0006993:	85 c0                	test   eax,eax
c0006995:	0f 85 b5 00 00 00    	jne    c0006a50 <f_utime+0xd8>
c000699b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000699f:	83 ec 0c             	sub    esp,0xc
c00069a2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00069a6:	68 60 04 00 00       	push   0x460
c00069ab:	e8 38 1a 00 00       	call   c00083e8 <ff_memalloc>
c00069b0:	83 c4 10             	add    esp,0x10
c00069b3:	89 c3                	mov    ebx,eax
c00069b5:	b8 11 00 00 00       	mov    eax,0x11
c00069ba:	85 db                	test   ebx,ebx
c00069bc:	0f 84 8e 00 00 00    	je     c0006a50 <f_utime+0xd8>
c00069c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00069c6:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00069cc:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00069cf:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00069d2:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c00069d6:	8d 44 24 14          	lea    eax,[esp+0x14]
c00069da:	e8 a6 e1 ff ff       	call   c0004b85 <follow_path>
c00069df:	85 c0                	test   eax,eax
c00069e1:	75 59                	jne    c0006a3c <f_utime+0xc4>
c00069e3:	b8 06 00 00 00       	mov    eax,0x6
c00069e8:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c00069ed:	75 4d                	jne    c0006a3c <f_utime+0xc4>
c00069ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00069f3:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c00069f7:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c00069fb:	c1 e2 10             	shl    edx,0x10
c00069fe:	09 ca                	or     edx,ecx
c0006a00:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006a03:	75 1a                	jne    c0006a1f <f_utime+0xa7>
c0006a05:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006a08:	83 c0 0c             	add    eax,0xc
c0006a0b:	e8 e5 af ff ff       	call   c00019f5 <st_dword>
c0006a10:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006a14:	e8 c4 ce ff ff       	call   c00038dd <store_xdir>
c0006a19:	85 c0                	test   eax,eax
c0006a1b:	75 1f                	jne    c0006a3c <f_utime+0xc4>
c0006a1d:	eb 14                	jmp    c0006a33 <f_utime+0xbb>
c0006a1f:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006a23:	83 c0 16             	add    eax,0x16
c0006a26:	e8 ca af ff ff       	call   c00019f5 <st_dword>
c0006a2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a2f:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006a33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a37:	e8 4c d8 ff ff       	call   c0004288 <sync_fs>
c0006a3c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006a40:	83 ec 0c             	sub    esp,0xc
c0006a43:	53                   	push   ebx
c0006a44:	e8 b7 19 00 00       	call   c0008400 <ff_memfree>
c0006a49:	83 c4 10             	add    esp,0x10
c0006a4c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006a50:	83 c4 64             	add    esp,0x64
c0006a53:	5b                   	pop    ebx
c0006a54:	5e                   	pop    esi
c0006a55:	c3                   	ret    

c0006a56 <f_getlabel>:
c0006a56:	55                   	push   ebp
c0006a57:	31 c9                	xor    ecx,ecx
c0006a59:	57                   	push   edi
c0006a5a:	56                   	push   esi
c0006a5b:	53                   	push   ebx
c0006a5c:	83 ec 6c             	sub    esp,0x6c
c0006a5f:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006a63:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006a6a:	e8 a0 b9 ff ff       	call   c000240f <mount_volume>
c0006a6f:	89 c6                	mov    esi,eax
c0006a71:	85 c0                	test   eax,eax
c0006a73:	0f 85 c1 01 00 00    	jne    c0006c3a <f_getlabel+0x1e4>
c0006a79:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006a81:	0f 84 5f 01 00 00    	je     c0006be6 <f_getlabel+0x190>
c0006a87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a8b:	31 d2                	xor    edx,edx
c0006a8d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006a91:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006a99:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006a9d:	e8 39 c4 ff ff       	call   c0002edb <dir_sdi>
c0006aa2:	85 c0                	test   eax,eax
c0006aa4:	0f 85 2d 01 00 00    	jne    c0006bd7 <f_getlabel+0x181>
c0006aaa:	ba 01 00 00 00       	mov    edx,0x1
c0006aaf:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006ab3:	e8 33 cc ff ff       	call   c00036eb <dir_read>
c0006ab8:	85 c0                	test   eax,eax
c0006aba:	0f 85 17 01 00 00    	jne    c0006bd7 <f_getlabel+0x181>
c0006ac0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ac4:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006ac7:	74 09                	je     c0006ad2 <f_getlabel+0x7c>
c0006ac9:	31 db                	xor    ebx,ebx
c0006acb:	31 c9                	xor    ecx,ecx
c0006acd:	e9 c8 00 00 00       	jmp    c0006b9a <f_getlabel+0x144>
c0006ad2:	31 ed                	xor    ebp,ebp
c0006ad4:	31 db                	xor    ebx,ebx
c0006ad6:	31 ff                	xor    edi,edi
c0006ad8:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006adc:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006ae0:	39 fa                	cmp    edx,edi
c0006ae2:	76 4b                	jbe    c0006b2f <f_getlabel+0xd9>
c0006ae4:	47                   	inc    edi
c0006ae5:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006ae8:	01 d0                	add    eax,edx
c0006aea:	e8 90 ae ff ff       	call   c000197f <ld_word>
c0006aef:	66 85 ed             	test   bp,bp
c0006af2:	75 0d                	jne    c0006b01 <f_getlabel+0xab>
c0006af4:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006afa:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006aff:	76 28                	jbe    c0006b29 <f_getlabel+0xd3>
c0006b01:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006b08:	89 e9                	mov    ecx,ebp
c0006b0a:	01 da                	add    edx,ebx
c0006b0c:	c1 e1 10             	shl    ecx,0x10
c0006b0f:	0f b7 c0             	movzx  eax,ax
c0006b12:	09 c8                	or     eax,ecx
c0006b14:	b9 04 00 00 00       	mov    ecx,0x4
c0006b19:	e8 01 b0 ff ff       	call   c0001b1f <put_utf>
c0006b1e:	84 c0                	test   al,al
c0006b20:	74 0b                	je     c0006b2d <f_getlabel+0xd7>
c0006b22:	0f b6 c0             	movzx  eax,al
c0006b25:	01 c3                	add    ebx,eax
c0006b27:	31 c0                	xor    eax,eax
c0006b29:	89 c5                	mov    ebp,eax
c0006b2b:	eb ab                	jmp    c0006ad8 <f_getlabel+0x82>
c0006b2d:	31 db                	xor    ebx,ebx
c0006b2f:	66 85 ed             	test   bp,bp
c0006b32:	74 02                	je     c0006b36 <f_getlabel+0xe0>
c0006b34:	31 db                	xor    ebx,ebx
c0006b36:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006b3d:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006b41:	e9 a0 00 00 00       	jmp    c0006be6 <f_getlabel+0x190>
c0006b46:	83 ff 0b             	cmp    edi,0xb
c0006b49:	74 11                	je     c0006b5c <f_getlabel+0x106>
c0006b4b:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006b50:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b54:	8d 79 02             	lea    edi,[ecx+0x2]
c0006b57:	c1 e0 08             	shl    eax,0x8
c0006b5a:	09 c2                	or     edx,eax
c0006b5c:	0f b7 d2             	movzx  edx,dx
c0006b5f:	50                   	push   eax
c0006b60:	50                   	push   eax
c0006b61:	68 b5 01 00 00       	push   0x1b5
c0006b66:	52                   	push   edx
c0006b67:	e8 44 19 00 00       	call   c00084b0 <ff_oem2uni>
c0006b6c:	83 c4 10             	add    esp,0x10
c0006b6f:	66 85 c0             	test   ax,ax
c0006b72:	74 46                	je     c0006bba <f_getlabel+0x164>
c0006b74:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006b7b:	0f b7 c0             	movzx  eax,ax
c0006b7e:	01 da                	add    edx,ebx
c0006b80:	b9 04 00 00 00       	mov    ecx,0x4
c0006b85:	e8 95 af ff ff       	call   c0001b1f <put_utf>
c0006b8a:	84 c0                	test   al,al
c0006b8c:	74 2c                	je     c0006bba <f_getlabel+0x164>
c0006b8e:	0f b6 c0             	movzx  eax,al
c0006b91:	01 c3                	add    ebx,eax
c0006b93:	83 ff 0b             	cmp    edi,0xb
c0006b96:	74 24                	je     c0006bbc <f_getlabel+0x166>
c0006b98:	89 f9                	mov    ecx,edi
c0006b9a:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006b9e:	8d 79 01             	lea    edi,[ecx+0x1]
c0006ba1:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006ba6:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006bab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006baf:	e8 9f ae ff ff       	call   c0001a53 <dbc_1st>
c0006bb4:	85 c0                	test   eax,eax
c0006bb6:	74 a4                	je     c0006b5c <f_getlabel+0x106>
c0006bb8:	eb 8c                	jmp    c0006b46 <f_getlabel+0xf0>
c0006bba:	31 db                	xor    ebx,ebx
c0006bbc:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006bc3:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006bc6:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006bcd:	74 17                	je     c0006be6 <f_getlabel+0x190>
c0006bcf:	4b                   	dec    ebx
c0006bd0:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006bd3:	74 ee                	je     c0006bc3 <f_getlabel+0x16d>
c0006bd5:	eb 0f                	jmp    c0006be6 <f_getlabel+0x190>
c0006bd7:	83 f8 04             	cmp    eax,0x4
c0006bda:	75 5c                	jne    c0006c38 <f_getlabel+0x1e2>
c0006bdc:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006be3:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006be6:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006bee:	74 4a                	je     c0006c3a <f_getlabel+0x1e4>
c0006bf0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bf4:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006bf7:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006bfa:	e8 5e b5 ff ff       	call   c000215d <move_window>
c0006bff:	89 c6                	mov    esi,eax
c0006c01:	85 c0                	test   eax,eax
c0006c03:	75 35                	jne    c0006c3a <f_getlabel+0x1e4>
c0006c05:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006c09:	b8 43 00 00 00       	mov    eax,0x43
c0006c0e:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006c10:	80 f9 03             	cmp    cl,0x3
c0006c13:	74 0f                	je     c0006c24 <f_getlabel+0x1ce>
c0006c15:	31 c0                	xor    eax,eax
c0006c17:	80 f9 04             	cmp    cl,0x4
c0006c1a:	0f 94 c0             	sete   al
c0006c1d:	48                   	dec    eax
c0006c1e:	83 e0 c3             	and    eax,0xffffffc3
c0006c21:	83 c0 64             	add    eax,0x64
c0006c24:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006c28:	e8 5f ad ff ff       	call   c000198c <ld_dword>
c0006c2d:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006c34:	89 07                	mov    DWORD PTR [edi],eax
c0006c36:	eb 02                	jmp    c0006c3a <f_getlabel+0x1e4>
c0006c38:	89 c6                	mov    esi,eax
c0006c3a:	83 c4 6c             	add    esp,0x6c
c0006c3d:	89 f0                	mov    eax,esi
c0006c3f:	5b                   	pop    ebx
c0006c40:	5e                   	pop    esi
c0006c41:	5f                   	pop    edi
c0006c42:	5d                   	pop    ebp
c0006c43:	c3                   	ret    

c0006c44 <f_setlabel>:
c0006c44:	56                   	push   esi
c0006c45:	b9 02 00 00 00       	mov    ecx,0x2
c0006c4a:	53                   	push   ebx
c0006c4b:	83 ec 74             	sub    esp,0x74
c0006c4e:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006c52:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006c59:	e8 b1 b7 ff ff       	call   c000240f <mount_volume>
c0006c5e:	89 c6                	mov    esi,eax
c0006c60:	85 c0                	test   eax,eax
c0006c62:	0f 85 41 02 00 00    	jne    c0006ea9 <f_setlabel+0x265>
c0006c68:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006c6c:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006c6f:	0f 85 8e 00 00 00    	jne    c0006d03 <f_setlabel+0xbf>
c0006c75:	b9 16 00 00 00       	mov    ecx,0x16
c0006c7a:	31 d2                	xor    edx,edx
c0006c7c:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006c80:	31 db                	xor    ebx,ebx
c0006c82:	e8 8c ad ff ff       	call   c0001a13 <mem_set>
c0006c87:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006c8e:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006c91:	0f 86 0a 01 00 00    	jbe    c0006da1 <f_setlabel+0x15d>
c0006c97:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006c9e:	e8 b6 ad ff ff       	call   c0001a59 <tchar2uni>
c0006ca3:	89 c6                	mov    esi,eax
c0006ca5:	3d ff ff 00 00       	cmp    eax,0xffff
c0006caa:	76 2a                	jbe    c0006cd6 <f_setlabel+0x92>
c0006cac:	83 f8 ff             	cmp    eax,0xffffffff
c0006caf:	74 05                	je     c0006cb6 <f_setlabel+0x72>
c0006cb1:	83 fb 09             	cmp    ebx,0x9
c0006cb4:	76 0a                	jbe    c0006cc0 <f_setlabel+0x7c>
c0006cb6:	be 06 00 00 00       	mov    esi,0x6
c0006cbb:	e9 e9 01 00 00       	jmp    c0006ea9 <f_setlabel+0x265>
c0006cc0:	89 c2                	mov    edx,eax
c0006cc2:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006cc6:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006cc9:	c1 ea 10             	shr    edx,0x10
c0006ccc:	01 c8                	add    eax,ecx
c0006cce:	43                   	inc    ebx
c0006ccf:	e8 1d ad ff ff       	call   c00019f1 <st_word>
c0006cd4:	eb 04                	jmp    c0006cda <f_setlabel+0x96>
c0006cd6:	85 c0                	test   eax,eax
c0006cd8:	74 dc                	je     c0006cb6 <f_setlabel+0x72>
c0006cda:	89 f2                	mov    edx,esi
c0006cdc:	b8 f7 22 02 c0       	mov    eax,0xc00222f7
c0006ce1:	e8 5b ad ff ff       	call   c0001a41 <chk_chr>
c0006ce6:	85 c0                	test   eax,eax
c0006ce8:	75 cc                	jne    c0006cb6 <f_setlabel+0x72>
c0006cea:	83 fb 0a             	cmp    ebx,0xa
c0006ced:	77 c7                	ja     c0006cb6 <f_setlabel+0x72>
c0006cef:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006cf2:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006cf6:	0f b7 d6             	movzx  edx,si
c0006cf9:	01 c8                	add    eax,ecx
c0006cfb:	43                   	inc    ebx
c0006cfc:	e8 f0 ac ff ff       	call   c00019f1 <st_word>
c0006d01:	eb 84                	jmp    c0006c87 <f_setlabel+0x43>
c0006d03:	b9 0b 00 00 00       	mov    ecx,0xb
c0006d08:	ba 20 00 00 00       	mov    edx,0x20
c0006d0d:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006d11:	31 db                	xor    ebx,ebx
c0006d13:	e8 fb ac ff ff       	call   c0001a13 <mem_set>
c0006d18:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006d1f:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006d22:	76 60                	jbe    c0006d84 <f_setlabel+0x140>
c0006d24:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d2b:	e8 29 ad ff ff       	call   c0001a59 <tchar2uni>
c0006d30:	3d ff ff 00 00       	cmp    eax,0xffff
c0006d35:	0f 87 7b ff ff ff    	ja     c0006cb6 <f_setlabel+0x72>
c0006d3b:	83 ec 0c             	sub    esp,0xc
c0006d3e:	50                   	push   eax
c0006d3f:	e8 e0 17 00 00       	call   c0008524 <ff_wtoupper>
c0006d44:	5a                   	pop    edx
c0006d45:	59                   	pop    ecx
c0006d46:	68 b5 01 00 00       	push   0x1b5
c0006d4b:	50                   	push   eax
c0006d4c:	e8 c7 16 00 00       	call   c0008418 <ff_uni2oem>
c0006d51:	83 c4 10             	add    esp,0x10
c0006d54:	89 c6                	mov    esi,eax
c0006d56:	66 85 c0             	test   ax,ax
c0006d59:	0f 84 57 ff ff ff    	je     c0006cb6 <f_setlabel+0x72>
c0006d5f:	0f b7 d0             	movzx  edx,ax
c0006d62:	b8 f0 22 02 c0       	mov    eax,0xc00222f0
c0006d67:	e8 d5 ac ff ff       	call   c0001a41 <chk_chr>
c0006d6c:	85 c0                	test   eax,eax
c0006d6e:	0f 85 42 ff ff ff    	jne    c0006cb6 <f_setlabel+0x72>
c0006d74:	66 81 fe ff 00       	cmp    si,0xff
c0006d79:	0f 87 14 01 00 00    	ja     c0006e93 <f_setlabel+0x24f>
c0006d7f:	e9 fa 00 00 00       	jmp    c0006e7e <f_setlabel+0x23a>
c0006d84:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c0006d89:	0f 84 27 ff ff ff    	je     c0006cb6 <f_setlabel+0x72>
c0006d8f:	85 db                	test   ebx,ebx
c0006d91:	74 0e                	je     c0006da1 <f_setlabel+0x15d>
c0006d93:	8d 43 ff             	lea    eax,[ebx-0x1]
c0006d96:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c0006d9b:	75 04                	jne    c0006da1 <f_setlabel+0x15d>
c0006d9d:	89 c3                	mov    ebx,eax
c0006d9f:	eb ee                	jmp    c0006d8f <f_setlabel+0x14b>
c0006da1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006da5:	31 d2                	xor    edx,edx
c0006da7:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0006dab:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0006db3:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006db7:	e8 1f c1 ff ff       	call   c0002edb <dir_sdi>
c0006dbc:	89 c6                	mov    esi,eax
c0006dbe:	85 c0                	test   eax,eax
c0006dc0:	0f 85 e3 00 00 00    	jne    c0006ea9 <f_setlabel+0x265>
c0006dc6:	ba 01 00 00 00       	mov    edx,0x1
c0006dcb:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006dcf:	e8 17 c9 ff ff       	call   c00036eb <dir_read>
c0006dd4:	85 c0                	test   eax,eax
c0006dd6:	75 21                	jne    c0006df9 <f_setlabel+0x1b5>
c0006dd8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006ddc:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006de0:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c0006de3:	74 5d                	je     c0006e42 <f_setlabel+0x1fe>
c0006de5:	85 db                	test   ebx,ebx
c0006de7:	74 0b                	je     c0006df4 <f_setlabel+0x1b0>
c0006de9:	b9 0b 00 00 00       	mov    ecx,0xb
c0006dee:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006df2:	eb 70                	jmp    c0006e64 <f_setlabel+0x220>
c0006df4:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c0006df7:	eb 70                	jmp    c0006e69 <f_setlabel+0x225>
c0006df9:	83 f8 04             	cmp    eax,0x4
c0006dfc:	75 7c                	jne    c0006e7a <f_setlabel+0x236>
c0006dfe:	85 db                	test   ebx,ebx
c0006e00:	0f 84 a3 00 00 00    	je     c0006ea9 <f_setlabel+0x265>
c0006e06:	ba 01 00 00 00       	mov    edx,0x1
c0006e0b:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006e0f:	e8 51 ca ff ff       	call   c0003865 <dir_alloc>
c0006e14:	89 c6                	mov    esi,eax
c0006e16:	85 c0                	test   eax,eax
c0006e18:	0f 85 8b 00 00 00    	jne    c0006ea9 <f_setlabel+0x265>
c0006e1e:	31 d2                	xor    edx,edx
c0006e20:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006e24:	b9 20 00 00 00       	mov    ecx,0x20
c0006e29:	e8 e5 ab ff ff       	call   c0001a13 <mem_set>
c0006e2e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006e32:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006e35:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006e39:	75 18                	jne    c0006e53 <f_setlabel+0x20f>
c0006e3b:	c6 00 83             	mov    BYTE PTR [eax],0x83
c0006e3e:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006e42:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0006e45:	b9 16 00 00 00       	mov    ecx,0x16
c0006e4a:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006e4e:	83 c0 02             	add    eax,0x2
c0006e51:	eb 9b                	jmp    c0006dee <f_setlabel+0x1aa>
c0006e53:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0006e57:	b9 0b 00 00 00       	mov    ecx,0xb
c0006e5c:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006e60:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006e64:	e8 95 ab ff ff       	call   c00019fe <mem_cpy>
c0006e69:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006e6d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006e71:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006e75:	e8 0e d4 ff ff       	call   c0004288 <sync_fs>
c0006e7a:	89 c6                	mov    esi,eax
c0006e7c:	eb 2b                	jmp    c0006ea9 <f_setlabel+0x265>
c0006e7e:	83 fb 0a             	cmp    ebx,0xa
c0006e81:	0f 87 2f fe ff ff    	ja     c0006cb6 <f_setlabel+0x72>
c0006e87:	89 f0                	mov    eax,esi
c0006e89:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0006e8d:	43                   	inc    ebx
c0006e8e:	e9 85 fe ff ff       	jmp    c0006d18 <f_setlabel+0xd4>
c0006e93:	83 fb 09             	cmp    ebx,0x9
c0006e96:	0f 87 1a fe ff ff    	ja     c0006cb6 <f_setlabel+0x72>
c0006e9c:	89 f0                	mov    eax,esi
c0006e9e:	66 c1 e8 08          	shr    ax,0x8
c0006ea2:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0006ea6:	43                   	inc    ebx
c0006ea7:	eb de                	jmp    c0006e87 <f_setlabel+0x243>
c0006ea9:	89 f0                	mov    eax,esi
c0006eab:	83 c4 74             	add    esp,0x74
c0006eae:	5b                   	pop    ebx
c0006eaf:	5e                   	pop    esi
c0006eb0:	c3                   	ret    

c0006eb1 <f_expand>:
c0006eb1:	55                   	push   ebp
c0006eb2:	57                   	push   edi
c0006eb3:	56                   	push   esi
c0006eb4:	53                   	push   ebx
c0006eb5:	83 ec 3c             	sub    esp,0x3c
c0006eb8:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0006ebc:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0006ec0:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0006ec4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006ec8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006ecc:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006ed0:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0006ed4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0006ed8:	89 d8                	mov    eax,ebx
c0006eda:	e8 a3 b1 ff ff       	call   c0002082 <validate>
c0006edf:	89 c5                	mov    ebp,eax
c0006ee1:	85 c0                	test   eax,eax
c0006ee3:	0f 85 f4 01 00 00    	jne    c00070dd <f_expand+0x22c>
c0006ee9:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0006eed:	85 ed                	test   ebp,ebp
c0006eef:	0f 85 e8 01 00 00    	jne    c00070dd <f_expand+0x22c>
c0006ef5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006ef9:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0006efd:	75 0a                	jne    c0006f09 <f_expand+0x58>
c0006eff:	bd 07 00 00 00       	mov    ebp,0x7
c0006f04:	e9 d4 01 00 00       	jmp    c00070dd <f_expand+0x22c>
c0006f09:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0006f0c:	0b 43 0c             	or     eax,DWORD PTR [ebx+0xc]
c0006f0f:	75 ee                	jne    c0006eff <f_expand+0x4e>
c0006f11:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0006f15:	74 e8                	je     c0006eff <f_expand+0x4e>
c0006f17:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0006f1b:	8a 0e                	mov    cl,BYTE PTR [esi]
c0006f1d:	80 f9 04             	cmp    cl,0x4
c0006f20:	74 07                	je     c0006f29 <f_expand+0x78>
c0006f22:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0006f27:	77 d6                	ja     c0006eff <f_expand+0x4e>
c0006f29:	88 4c 24 04          	mov    BYTE PTR [esp+0x4],cl
c0006f2d:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0006f31:	c1 e0 09             	shl    eax,0x9
c0006f34:	8d 50 ff             	lea    edx,[eax-0x1]
c0006f37:	85 54 24 08          	test   DWORD PTR [esp+0x8],edx
c0006f3b:	0f 95 c2             	setne  dl
c0006f3e:	0f b6 d2             	movzx  edx,dl
c0006f41:	89 d7                	mov    edi,edx
c0006f43:	31 d2                	xor    edx,edx
c0006f45:	52                   	push   edx
c0006f46:	50                   	push   eax
c0006f47:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0006f4b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0006f4f:	e8 4c a5 01 00       	call   c00214a0 <__udivdi3>
c0006f54:	83 c4 10             	add    esp,0x10
c0006f57:	01 f8                	add    eax,edi
c0006f59:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0006f5d:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0006f60:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006f64:	83 ff 01             	cmp    edi,0x1
c0006f67:	76 05                	jbe    c0006f6e <f_expand+0xbd>
c0006f69:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c0006f6c:	77 05                	ja     c0006f73 <f_expand+0xc2>
c0006f6e:	bf 02 00 00 00       	mov    edi,0x2
c0006f73:	80 f9 04             	cmp    cl,0x4
c0006f76:	75 19                	jne    c0006f91 <f_expand+0xe0>
c0006f78:	89 f0                	mov    eax,esi
c0006f7a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0006f7e:	89 fa                	mov    edx,edi
c0006f80:	e8 f3 b9 ff ff       	call   c0002978 <find_bitmap>
c0006f85:	89 c6                	mov    esi,eax
c0006f87:	85 c0                	test   eax,eax
c0006f89:	0f 84 70 ff ff ff    	je     c0006eff <f_expand+0x4e>
c0006f8f:	eb 7f                	jmp    c0007010 <f_expand+0x15f>
c0006f91:	89 fe                	mov    esi,edi
c0006f93:	89 f9                	mov    ecx,edi
c0006f95:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0006f9d:	89 ca                	mov    edx,ecx
c0006f9f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006fa3:	89 d8                	mov    eax,ebx
c0006fa5:	e8 3b bd ff ff       	call   c0002ce5 <get_fat>
c0006faa:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006fae:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006fb2:	41                   	inc    ecx
c0006fb3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0006fb7:	39 48 1c             	cmp    DWORD PTR [eax+0x1c],ecx
c0006fba:	77 05                	ja     c0006fc1 <f_expand+0x110>
c0006fbc:	b9 02 00 00 00       	mov    ecx,0x2
c0006fc1:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0006fc6:	74 3e                	je     c0007006 <f_expand+0x155>
c0006fc8:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0006fcd:	75 0a                	jne    c0006fd9 <f_expand+0x128>
c0006fcf:	bd 01 00 00 00       	mov    ebp,0x1
c0006fd4:	e9 04 01 00 00       	jmp    c00070dd <f_expand+0x22c>
c0006fd9:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0006fde:	75 13                	jne    c0006ff3 <f_expand+0x142>
c0006fe0:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0006fe4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0006fe8:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c0006fec:	75 0f                	jne    c0006ffd <f_expand+0x14c>
c0006fee:	e9 ce 00 00 00       	jmp    c00070c1 <f_expand+0x210>
c0006ff3:	89 ce                	mov    esi,ecx
c0006ff5:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0006ffd:	39 f9                	cmp    ecx,edi
c0006fff:	75 9c                	jne    c0006f9d <f_expand+0xec>
c0007001:	e9 f9 fe ff ff       	jmp    c0006eff <f_expand+0x4e>
c0007006:	bd 02 00 00 00       	mov    ebp,0x2
c000700b:	e9 cd 00 00 00       	jmp    c00070dd <f_expand+0x22c>
c0007010:	83 f8 ff             	cmp    eax,0xffffffff
c0007013:	74 ba                	je     c0006fcf <f_expand+0x11e>
c0007015:	8d 7e ff             	lea    edi,[esi-0x1]
c0007018:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000701c:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007020:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0007025:	74 51                	je     c0007078 <f_expand+0x1c7>
c0007027:	83 ec 0c             	sub    esp,0xc
c000702a:	89 f2                	mov    edx,esi
c000702c:	6a 01                	push   0x1
c000702e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007032:	e8 f4 b9 ff ff       	call   c0002a2b <change_bitmap>
c0007037:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000703b:	8d 54 3e ff          	lea    edx,[esi+edi*1-0x1]
c000703f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0007043:	83 c4 10             	add    esp,0x10
c0007046:	85 c0                	test   eax,eax
c0007048:	74 2e                	je     c0007078 <f_expand+0x1c7>
c000704a:	eb 71                	jmp    c00070bd <f_expand+0x20c>
c000704c:	83 c9 ff             	or     ecx,0xffffffff
c000704f:	83 7c 24 14 01       	cmp    DWORD PTR [esp+0x14],0x1
c0007054:	74 03                	je     c0007059 <f_expand+0x1a8>
c0007056:	8d 4f 01             	lea    ecx,[edi+0x1]
c0007059:	89 fa                	mov    edx,edi
c000705b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000705f:	e8 7c ba ff ff       	call   c0002ae0 <put_fat>
c0007064:	85 c0                	test   eax,eax
c0007066:	75 55                	jne    c00070bd <f_expand+0x20c>
c0007068:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c000706c:	ff 4c 24 14          	dec    DWORD PTR [esp+0x14]
c0007070:	47                   	inc    edi
c0007071:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0007076:	75 d4                	jne    c000704c <f_expand+0x19b>
c0007078:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000707c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007080:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0007085:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0007088:	74 53                	je     c00070dd <f_expand+0x22c>
c000708a:	89 73 08             	mov    DWORD PTR [ebx+0x8],esi
c000708d:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0007091:	c6 43 07 02          	mov    BYTE PTR [ebx+0x7],0x2
c0007095:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007099:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000709d:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c00070a0:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c00070a3:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00070a6:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c00070a9:	8d 4b fe             	lea    ecx,[ebx-0x2]
c00070ac:	39 ca                	cmp    edx,ecx
c00070ae:	77 2d                	ja     c00070dd <f_expand+0x22c>
c00070b0:	2b 54 24 10          	sub    edx,DWORD PTR [esp+0x10]
c00070b4:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c00070b8:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00070bb:	eb 20                	jmp    c00070dd <f_expand+0x22c>
c00070bd:	89 c5                	mov    ebp,eax
c00070bf:	eb 1c                	jmp    c00070dd <f_expand+0x22c>
c00070c1:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00070c6:	74 0c                	je     c00070d4 <f_expand+0x223>
c00070c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00070cc:	89 f7                	mov    edi,esi
c00070ce:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00070d2:	eb 9d                	jmp    c0007071 <f_expand+0x1c0>
c00070d4:	8d 46 ff             	lea    eax,[esi-0x1]
c00070d7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00070db:	eb 9b                	jmp    c0007078 <f_expand+0x1c7>
c00070dd:	83 c4 3c             	add    esp,0x3c
c00070e0:	89 e8                	mov    eax,ebp
c00070e2:	5b                   	pop    ebx
c00070e3:	5e                   	pop    esi
c00070e4:	5f                   	pop    edi
c00070e5:	5d                   	pop    ebp
c00070e6:	c3                   	ret    

c00070e7 <f_forward>:
c00070e7:	55                   	push   ebp
c00070e8:	57                   	push   edi
c00070e9:	56                   	push   esi
c00070ea:	53                   	push   ebx
c00070eb:	83 ec 2c             	sub    esp,0x2c
c00070ee:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00070f2:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00070f6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00070fc:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0007100:	89 d8                	mov    eax,ebx
c0007102:	e8 7b af ff ff       	call   c0002082 <validate>
c0007107:	89 c5                	mov    ebp,eax
c0007109:	85 c0                	test   eax,eax
c000710b:	0f 85 aa 01 00 00    	jne    c00072bb <f_forward+0x1d4>
c0007111:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0007115:	85 ed                	test   ebp,ebp
c0007117:	0f 85 9e 01 00 00    	jne    c00072bb <f_forward+0x1d4>
c000711d:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0007121:	0f 84 8f 01 00 00    	je     c00072b6 <f_forward+0x1cf>
c0007127:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000712a:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000712d:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0007130:	bf 00 00 00 00       	mov    edi,0x0
c0007135:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0007138:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c000713c:	89 d1                	mov    ecx,edx
c000713e:	19 f9                	sbb    ecx,edi
c0007140:	0f 83 cf 00 00 00    	jae    c0007215 <f_forward+0x12e>
c0007146:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000714a:	e9 c6 00 00 00       	jmp    c0007215 <f_forward+0x12e>
c000714f:	50                   	push   eax
c0007150:	50                   	push   eax
c0007151:	6a 00                	push   0x0
c0007153:	6a 00                	push   0x0
c0007155:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0007159:	83 c4 10             	add    esp,0x10
c000715c:	85 c0                	test   eax,eax
c000715e:	0f 84 57 01 00 00    	je     c00072bb <f_forward+0x1d4>
c0007164:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0007167:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000716b:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000716e:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c0007172:	89 d7                	mov    edi,edx
c0007174:	8d 4e ff             	lea    ecx,[esi-0x1]
c0007177:	89 c6                	mov    esi,eax
c0007179:	0f ac fe 09          	shrd   esi,edi,0x9
c000717d:	21 ce                	and    esi,ecx
c000717f:	89 c1                	mov    ecx,eax
c0007181:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0007187:	0f 84 98 00 00 00    	je     c0007225 <f_forward+0x13e>
c000718d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007191:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007194:	89 c8                	mov    eax,ecx
c0007196:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000719a:	e8 79 aa ff ff       	call   c0001c18 <clst2sect>
c000719f:	89 d7                	mov    edi,edx
c00071a1:	09 c7                	or     edi,eax
c00071a3:	0f 84 9e 00 00 00    	je     c0007247 <f_forward+0x160>
c00071a9:	31 ff                	xor    edi,edi
c00071ab:	8d 4b 50             	lea    ecx,[ebx+0x50]
c00071ae:	01 c6                	add    esi,eax
c00071b0:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00071b4:	11 d7                	adc    edi,edx
c00071b6:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00071b9:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c00071bc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00071c0:	39 fa                	cmp    edx,edi
c00071c2:	0f 85 a2 00 00 00    	jne    c000726a <f_forward+0x183>
c00071c8:	39 f0                	cmp    eax,esi
c00071ca:	0f 85 9a 00 00 00    	jne    c000726a <f_forward+0x183>
c00071d0:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00071d3:	ba 00 02 00 00       	mov    edx,0x200
c00071d8:	25 ff 01 00 00       	and    eax,0x1ff
c00071dd:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c00071e1:	29 c2                	sub    edx,eax
c00071e3:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00071e6:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00071e9:	39 d1                	cmp    ecx,edx
c00071eb:	76 02                	jbe    c00071ef <f_forward+0x108>
c00071ed:	89 d1                	mov    ecx,edx
c00071ef:	8d 73 50             	lea    esi,[ebx+0x50]
c00071f2:	52                   	push   edx
c00071f3:	01 c6                	add    esi,eax
c00071f5:	52                   	push   edx
c00071f6:	51                   	push   ecx
c00071f7:	56                   	push   esi
c00071f8:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c00071fc:	83 c4 10             	add    esp,0x10
c00071ff:	85 c0                	test   eax,eax
c0007201:	74 44                	je     c0007247 <f_forward+0x160>
c0007203:	31 ff                	xor    edi,edi
c0007205:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c0007208:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c000720b:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c000720f:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c0007213:	01 07                	add    DWORD PTR [edi],eax
c0007215:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000721a:	0f 85 2f ff ff ff    	jne    c000714f <f_forward+0x68>
c0007220:	e9 96 00 00 00       	jmp    c00072bb <f_forward+0x1d4>
c0007225:	85 f6                	test   esi,esi
c0007227:	0f 85 60 ff ff ff    	jne    c000718d <f_forward+0xa6>
c000722d:	89 d7                	mov    edi,edx
c000722f:	09 c7                	or     edi,eax
c0007231:	75 05                	jne    c0007238 <f_forward+0x151>
c0007233:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0007236:	eb 0a                	jmp    c0007242 <f_forward+0x15b>
c0007238:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000723b:	89 d8                	mov    eax,ebx
c000723d:	e8 a3 ba ff ff       	call   c0002ce5 <get_fat>
c0007242:	83 f8 01             	cmp    eax,0x1
c0007245:	77 0b                	ja     c0007252 <f_forward+0x16b>
c0007247:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c000724b:	bd 02 00 00 00       	mov    ebp,0x2
c0007250:	eb 69                	jmp    c00072bb <f_forward+0x1d4>
c0007252:	83 f8 ff             	cmp    eax,0xffffffff
c0007255:	75 0b                	jne    c0007262 <f_forward+0x17b>
c0007257:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000725b:	bd 01 00 00 00       	mov    ebp,0x1
c0007260:	eb 59                	jmp    c00072bb <f_forward+0x1d4>
c0007262:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0007265:	e9 23 ff ff ff       	jmp    c000718d <f_forward+0xa6>
c000726a:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c000726e:	79 20                	jns    c0007290 <f_forward+0x1a9>
c0007270:	83 ec 0c             	sub    esp,0xc
c0007273:	6a 01                	push   0x1
c0007275:	52                   	push   edx
c0007276:	50                   	push   eax
c0007277:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000727b:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000727f:	50                   	push   eax
c0007280:	e8 c5 a6 ff ff       	call   c000194a <disk_write>
c0007285:	83 c4 20             	add    esp,0x20
c0007288:	85 c0                	test   eax,eax
c000728a:	75 cb                	jne    c0007257 <f_forward+0x170>
c000728c:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0007290:	83 ec 0c             	sub    esp,0xc
c0007293:	6a 01                	push   0x1
c0007295:	57                   	push   edi
c0007296:	56                   	push   esi
c0007297:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000729b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000729f:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00072a3:	50                   	push   eax
c00072a4:	e8 8b a6 ff ff       	call   c0001934 <disk_read>
c00072a9:	83 c4 20             	add    esp,0x20
c00072ac:	85 c0                	test   eax,eax
c00072ae:	0f 84 1c ff ff ff    	je     c00071d0 <f_forward+0xe9>
c00072b4:	eb a1                	jmp    c0007257 <f_forward+0x170>
c00072b6:	bd 07 00 00 00       	mov    ebp,0x7
c00072bb:	83 c4 2c             	add    esp,0x2c
c00072be:	89 e8                	mov    eax,ebp
c00072c0:	5b                   	pop    ebx
c00072c1:	5e                   	pop    esi
c00072c2:	5f                   	pop    edi
c00072c3:	5d                   	pop    ebp
c00072c4:	c3                   	ret    

c00072c5 <f_mkfs>:
c00072c5:	55                   	push   ebp
c00072c6:	57                   	push   edi
c00072c7:	56                   	push   esi
c00072c8:	53                   	push   ebx
c00072c9:	bb 0b 00 00 00       	mov    ebx,0xb
c00072ce:	81 ec 9c 00 00 00    	sub    esp,0x9c
c00072d4:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c00072db:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c00072e2:	e8 7a ac ff ff       	call   c0001f61 <get_ldnumber>
c00072e7:	85 c0                	test   eax,eax
c00072e9:	0f 88 ec 10 00 00    	js     c00083db <f_mkfs+0x1116>
c00072ef:	8b 14 85 c0 62 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9d40]
c00072f6:	85 d2                	test   edx,edx
c00072f8:	74 03                	je     c00072fd <f_mkfs+0x38>
c00072fa:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00072fd:	85 f6                	test   esi,esi
c00072ff:	75 05                	jne    c0007306 <f_mkfs+0x41>
c0007301:	be e0 22 02 c0       	mov    esi,0xc00222e0
c0007306:	83 ec 0c             	sub    esp,0xc
c0007309:	0f b6 c0             	movzx  eax,al
c000730c:	bb 03 00 00 00       	mov    ebx,0x3
c0007311:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007315:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007319:	e8 13 a6 ff ff       	call   c0001931 <disk_initialize>
c000731e:	83 c4 10             	add    esp,0x10
c0007321:	a8 01                	test   al,0x1
c0007323:	0f 85 b2 10 00 00    	jne    c00083db <f_mkfs+0x1116>
c0007329:	bb 0a 00 00 00       	mov    ebx,0xa
c000732e:	a8 04                	test   al,0x4
c0007330:	0f 85 a5 10 00 00    	jne    c00083db <f_mkfs+0x1116>
c0007336:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0007339:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c000733d:	85 c0                	test   eax,eax
c000733f:	75 20                	jne    c0007361 <f_mkfs+0x9c>
c0007341:	51                   	push   ecx
c0007342:	8d 44 24 78          	lea    eax,[esp+0x78]
c0007346:	50                   	push   eax
c0007347:	6a 03                	push   0x3
c0007349:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000734d:	e8 0e a6 ff ff       	call   c0001960 <disk_ioctl>
c0007352:	83 c4 10             	add    esp,0x10
c0007355:	85 c0                	test   eax,eax
c0007357:	74 08                	je     c0007361 <f_mkfs+0x9c>
c0007359:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c0007361:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007365:	8d 42 ff             	lea    eax,[edx-0x1]
c0007368:	3d ff 7f 00 00       	cmp    eax,0x7fff
c000736d:	77 04                	ja     c0007373 <f_mkfs+0xae>
c000736f:	85 c2                	test   edx,eax
c0007371:	74 08                	je     c000737b <f_mkfs+0xb6>
c0007373:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c000737b:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c000737e:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c0007382:	48                   	dec    eax
c0007383:	3c 01                	cmp    al,0x1
c0007385:	76 05                	jbe    c000738c <f_mkfs+0xc7>
c0007387:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c000738c:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000738f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007393:	48                   	dec    eax
c0007394:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007399:	77 07                	ja     c00073a2 <f_mkfs+0xdd>
c000739b:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c00073a0:	74 08                	je     c00073aa <f_mkfs+0xe5>
c00073a2:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c00073aa:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c00073ad:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c00073b3:	77 07                	ja     c00073bc <f_mkfs+0xf7>
c00073b5:	8d 43 ff             	lea    eax,[ebx-0x1]
c00073b8:	85 d8                	test   eax,ebx
c00073ba:	74 02                	je     c00073be <f_mkfs+0xf9>
c00073bc:	31 db                	xor    ebx,ebx
c00073be:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c00073c9:	77 0a                	ja     c00073d5 <f_mkfs+0x110>
c00073cb:	bb 11 00 00 00       	mov    ebx,0x11
c00073d0:	e9 06 10 00 00       	jmp    c00083db <f_mkfs+0x1116>
c00073d5:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c00073dc:	8b 36                	mov    esi,DWORD PTR [esi]
c00073de:	85 ed                	test   ebp,ebp
c00073e0:	75 1e                	jne    c0007400 <f_mkfs+0x13b>
c00073e2:	83 ec 0c             	sub    esp,0xc
c00073e5:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c00073ec:	25 00 fe ff ff       	and    eax,0xfffffe00
c00073f1:	50                   	push   eax
c00073f2:	e8 f1 0f 00 00       	call   c00083e8 <ff_memalloc>
c00073f7:	83 c4 10             	add    esp,0x10
c00073fa:	89 c5                	mov    ebp,eax
c00073fc:	85 c0                	test   eax,eax
c00073fe:	74 cb                	je     c00073cb <f_mkfs+0x106>
c0007400:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c0007408:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c0007410:	52                   	push   edx
c0007411:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c0007415:	50                   	push   eax
c0007416:	6a 01                	push   0x1
c0007418:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000741c:	e8 3f a5 ff ff       	call   c0001960 <disk_ioctl>
c0007421:	83 c4 10             	add    esp,0x10
c0007424:	85 c0                	test   eax,eax
c0007426:	0f 85 4a 0f 00 00    	jne    c0008376 <f_mkfs+0x10b1>
c000742c:	89 f1                	mov    ecx,esi
c000742e:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0007436:	83 e1 0f             	and    ecx,0xf
c0007439:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007441:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c0007445:	83 e6 08             	and    esi,0x8
c0007448:	75 56                	jne    c00074a0 <f_mkfs+0x1db>
c000744a:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c000744e:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c0007452:	83 ff 00             	cmp    edi,0x0
c0007455:	76 20                	jbe    c0007477 <f_mkfs+0x1b2>
c0007457:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c000745c:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c0007464:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c000746a:	83 d7 ff             	adc    edi,0xffffffff
c000746d:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007471:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007475:	eb 21                	jmp    c0007498 <f_mkfs+0x1d3>
c0007477:	ba 3f 00 00 00       	mov    edx,0x3f
c000747c:	39 f2                	cmp    edx,esi
c000747e:	19 f8                	sbb    eax,edi
c0007480:	73 1e                	jae    c00074a0 <f_mkfs+0x1db>
c0007482:	83 c6 c1             	add    esi,0xffffffc1
c0007485:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c000748d:	83 d7 ff             	adc    edi,0xffffffff
c0007490:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007494:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007498:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00074a0:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00074a4:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c00074a8:	89 04 24             	mov    DWORD PTR [esp],eax
c00074ab:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00074af:	31 c0                	xor    eax,eax
c00074b1:	ba 7f 00 00 00       	mov    edx,0x7f
c00074b6:	89 c7                	mov    edi,eax
c00074b8:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c00074bb:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c00074bf:	0f 83 c5 0a 00 00    	jae    c0007f8a <f_mkfs+0xcc5>
c00074c5:	89 df                	mov    edi,ebx
c00074c7:	c1 ef 09             	shr    edi,0x9
c00074ca:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00074ce:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c00074d5:	c1 ef 09             	shr    edi,0x9
c00074d8:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c00074dd:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c00074e1:	74 29                	je     c000750c <f_mkfs+0x247>
c00074e3:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00074e9:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c00074ee:	0f 97 c2             	seta   dl
c00074f1:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c00074f4:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00074f8:	0f 92 c0             	setb   al
c00074fb:	08 c2                	or     dl,al
c00074fd:	75 5b                	jne    c000755a <f_mkfs+0x295>
c00074ff:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0007503:	83 e0 07             	and    eax,0x7
c0007506:	3c 04                	cmp    al,0x4
c0007508:	74 50                	je     c000755a <f_mkfs+0x295>
c000750a:	eb 1b                	jmp    c0007527 <f_mkfs+0x262>
c000750c:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0007511:	0f 87 73 0a 00 00    	ja     c0007f8a <f_mkfs+0xcc5>
c0007517:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c000751d:	76 08                	jbe    c0007527 <f_mkfs+0x262>
c000751f:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c0007527:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c000752b:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c000752f:	83 e0 01             	and    eax,0x1
c0007532:	80 e1 02             	and    cl,0x2
c0007535:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c0007539:	74 0d                	je     c0007548 <f_mkfs+0x283>
c000753b:	84 c0                	test   al,al
c000753d:	0f 84 53 09 00 00    	je     c0007e96 <f_mkfs+0xbd1>
c0007543:	e9 12 08 00 00       	jmp    c0007d5a <f_mkfs+0xa95>
c0007548:	bb 13 00 00 00       	mov    ebx,0x13
c000754d:	84 c0                	test   al,al
c000754f:	0f 85 05 08 00 00    	jne    c0007d5a <f_mkfs+0xa95>
c0007555:	e9 39 0e 00 00       	jmp    c0008393 <f_mkfs+0x10ce>
c000755a:	31 c0                	xor    eax,eax
c000755c:	ba ff 0f 00 00       	mov    edx,0xfff
c0007561:	89 c7                	mov    edi,eax
c0007563:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007566:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c000756a:	0f 83 1a 0a 00 00    	jae    c0007f8a <f_mkfs+0xcc5>
c0007570:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c0007576:	77 39                	ja     c00075b1 <f_mkfs+0x2ec>
c0007578:	ba ff ff 07 00       	mov    edx,0x7ffff
c000757d:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0007585:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007588:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000758c:	73 08                	jae    c0007596 <f_mkfs+0x2d1>
c000758e:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c0007596:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c000759b:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000759e:	b8 00 00 00 00       	mov    eax,0x0
c00075a3:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00075a7:	73 08                	jae    c00075b1 <f_mkfs+0x2ec>
c00075a9:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c00075b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00075b5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00075b9:	83 c0 20             	add    eax,0x20
c00075bc:	83 d2 00             	adc    edx,0x0
c00075bf:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00075c3:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c00075c7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00075cb:	31 d2                	xor    edx,edx
c00075cd:	31 ff                	xor    edi,edi
c00075cf:	52                   	push   edx
c00075d0:	89 fb                	mov    ebx,edi
c00075d2:	50                   	push   eax
c00075d3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00075d7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00075db:	e8 c0 9e 01 00       	call   c00214a0 <__udivdi3>
c00075e0:	83 c4 10             	add    esp,0x10
c00075e3:	c1 e0 02             	shl    eax,0x2
c00075e6:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c00075ea:	05 07 02 00 00       	add    eax,0x207
c00075ef:	89 f1                	mov    ecx,esi
c00075f1:	c1 e8 09             	shr    eax,0x9
c00075f4:	83 c1 ff             	add    ecx,0xffffffff
c00075f7:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c00075fb:	83 d3 ff             	adc    ebx,0xffffffff
c00075fe:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c0007602:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c0007606:	31 d2                	xor    edx,edx
c0007608:	01 c8                	add    eax,ecx
c000760a:	11 da                	adc    edx,ebx
c000760c:	89 c1                	mov    ecx,eax
c000760e:	f7 de                	neg    esi
c0007610:	89 d0                	mov    eax,edx
c0007612:	83 d7 00             	adc    edi,0x0
c0007615:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007619:	f7 df                	neg    edi
c000761b:	21 f1                	and    ecx,esi
c000761d:	21 f8                	and    eax,edi
c000761f:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0007623:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0007627:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000762b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000762f:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c0007633:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007636:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c000763a:	0f ac d0 01          	shrd   eax,edx,0x1
c000763e:	89 df                	mov    edi,ebx
c0007640:	d1 ea                	shr    edx,1
c0007642:	39 c1                	cmp    ecx,eax
c0007644:	19 d7                	sbb    edi,edx
c0007646:	0f 83 3e 09 00 00    	jae    c0007f8a <f_mkfs+0xcc5>
c000764c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007650:	31 d2                	xor    edx,edx
c0007652:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c0007656:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000765a:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000765e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007661:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c0007665:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c0007669:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c000766d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007671:	83 f8 0f             	cmp    eax,0xf
c0007674:	0f 86 10 09 00 00    	jbe    c0007f8a <f_mkfs+0xcc5>
c000767a:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c0007682:	0f 87 02 09 00 00    	ja     c0007f8a <f_mkfs+0xcc5>
c0007688:	31 d2                	xor    edx,edx
c000768a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000768e:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0007696:	83 c0 07             	add    eax,0x7
c0007699:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c00076a1:	c1 e8 03             	shr    eax,0x3
c00076a4:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00076ab:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00076af:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00076b3:	c1 e0 09             	shl    eax,0x9
c00076b6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00076ba:	48                   	dec    eax
c00076bb:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00076bf:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c00076c3:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c00076c7:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00076cb:	31 d2                	xor    edx,edx
c00076cd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00076d1:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00076d8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00076dc:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c00076e1:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00076e5:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00076e9:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00076ed:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c00076f1:	31 ff                	xor    edi,edi
c00076f3:	31 f6                	xor    esi,esi
c00076f5:	31 db                	xor    ebx,ebx
c00076f7:	85 ff                	test   edi,edi
c00076f9:	74 05                	je     c0007700 <f_mkfs+0x43b>
c00076fb:	4f                   	dec    edi
c00076fc:	74 44                	je     c0007742 <f_mkfs+0x47d>
c00076fe:	eb 4f                	jmp    c000774f <f_mkfs+0x48a>
c0007700:	83 ec 0c             	sub    esp,0xc
c0007703:	0f b7 c3             	movzx  eax,bx
c0007706:	50                   	push   eax
c0007707:	e8 18 0e 00 00       	call   c0008524 <ff_wtoupper>
c000770c:	83 c4 10             	add    esp,0x10
c000770f:	89 c1                	mov    ecx,eax
c0007711:	8d 53 01             	lea    edx,[ebx+0x1]
c0007714:	66 39 c3             	cmp    bx,ax
c0007717:	75 3e                	jne    c0007757 <f_mkfs+0x492>
c0007719:	be 01 00 00 00       	mov    esi,0x1
c000771e:	89 df                	mov    edi,ebx
c0007720:	66 01 f7             	add    di,si
c0007723:	75 07                	jne    c000772c <f_mkfs+0x467>
c0007725:	83 fe 7f             	cmp    esi,0x7f
c0007728:	77 31                	ja     c000775b <f_mkfs+0x496>
c000772a:	eb 16                	jmp    c0007742 <f_mkfs+0x47d>
c000772c:	83 ec 0c             	sub    esp,0xc
c000772f:	0f b7 ff             	movzx  edi,di
c0007732:	57                   	push   edi
c0007733:	e8 ec 0d 00 00       	call   c0008524 <ff_wtoupper>
c0007738:	83 c4 10             	add    esp,0x10
c000773b:	39 c7                	cmp    edi,eax
c000773d:	75 e6                	jne    c0007725 <f_mkfs+0x460>
c000773f:	46                   	inc    esi
c0007740:	eb dc                	jmp    c000771e <f_mkfs+0x459>
c0007742:	31 c0                	xor    eax,eax
c0007744:	89 d9                	mov    ecx,ebx
c0007746:	4e                   	dec    esi
c0007747:	0f 95 c0             	setne  al
c000774a:	43                   	inc    ebx
c000774b:	89 c7                	mov    edi,eax
c000774d:	eb 14                	jmp    c0007763 <f_mkfs+0x49e>
c000774f:	89 f1                	mov    ecx,esi
c0007751:	01 f3                	add    ebx,esi
c0007753:	31 ff                	xor    edi,edi
c0007755:	eb 0c                	jmp    c0007763 <f_mkfs+0x49e>
c0007757:	89 d3                	mov    ebx,edx
c0007759:	eb 08                	jmp    c0007763 <f_mkfs+0x49e>
c000775b:	bf 02 00 00 00       	mov    edi,0x2
c0007760:	83 c9 ff             	or     ecx,0xffffffff
c0007763:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007767:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000776a:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c000776e:	0f b6 c1             	movzx  eax,cl
c0007771:	e8 04 a7 ff ff       	call   c0001e7a <xsum32>
c0007776:	66 c1 e9 08          	shr    cx,0x8
c000777a:	89 c2                	mov    edx,eax
c000777c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000777f:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c0007783:	0f b7 c1             	movzx  eax,cx
c0007786:	e8 ef a6 ff ff       	call   c0001e7a <xsum32>
c000778b:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c0007790:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007794:	66 85 db             	test   bx,bx
c0007797:	74 1f                	je     c00077b8 <f_mkfs+0x4f3>
c0007799:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000779c:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c00077a3:	83 c0 02             	add    eax,0x2
c00077a6:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c00077ac:	39 c2                	cmp    edx,eax
c00077ae:	74 08                	je     c00077b8 <f_mkfs+0x4f3>
c00077b0:	89 04 24             	mov    DWORD PTR [esp],eax
c00077b3:	e9 3f ff ff ff       	jmp    c00076f7 <f_mkfs+0x432>
c00077b8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00077bb:	83 ec 0c             	sub    esp,0xc
c00077be:	05 01 02 00 00       	add    eax,0x201
c00077c3:	c1 e8 09             	shr    eax,0x9
c00077c6:	50                   	push   eax
c00077c7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00077cb:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00077cf:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00077d3:	55                   	push   ebp
c00077d4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00077d8:	e8 6d a1 ff ff       	call   c000194a <disk_write>
c00077dd:	83 c4 20             	add    esp,0x20
c00077e0:	85 c0                	test   eax,eax
c00077e2:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00077e5:	0f 85 8b 0b 00 00    	jne    c0008376 <f_mkfs+0x10b1>
c00077eb:	89 d0                	mov    eax,edx
c00077ed:	31 d2                	xor    edx,edx
c00077ef:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c00077f3:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c00077f7:	66 85 db             	test   bx,bx
c00077fa:	74 04                	je     c0007800 <f_mkfs+0x53b>
c00077fc:	31 c0                	xor    eax,eax
c00077fe:	eb b0                	jmp    c00077b0 <f_mkfs+0x4eb>
c0007800:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007804:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0007808:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c000780c:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c0007812:	31 d2                	xor    edx,edx
c0007814:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c000781f:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007823:	c1 eb 09             	shr    ebx,0x9
c0007826:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c000782d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007831:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007835:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007839:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000783d:	8d 70 01             	lea    esi,[eax+0x1]
c0007840:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007844:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007848:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c000784f:	31 d2                	xor    edx,edx
c0007851:	25 00 fe ff ff       	and    eax,0xfffffe00
c0007856:	89 04 24             	mov    DWORD PTR [esp],eax
c0007859:	89 c1                	mov    ecx,eax
c000785b:	89 e8                	mov    eax,ebp
c000785d:	e8 b1 a1 ff ff       	call   c0001a13 <mem_set>
c0007862:	31 c0                	xor    eax,eax
c0007864:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007867:	76 10                	jbe    c0007879 <f_mkfs+0x5b4>
c0007869:	83 fe 07             	cmp    esi,0x7
c000786c:	76 0b                	jbe    c0007879 <f_mkfs+0x5b4>
c000786e:	40                   	inc    eax
c000786f:	83 ee 08             	sub    esi,0x8
c0007872:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c0007877:	eb eb                	jmp    c0007864 <f_mkfs+0x59f>
c0007879:	b2 01                	mov    dl,0x1
c000787b:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c000787f:	85 f6                	test   esi,esi
c0007881:	74 0c                	je     c000788f <f_mkfs+0x5ca>
c0007883:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007886:	76 07                	jbe    c000788f <f_mkfs+0x5ca>
c0007888:	08 11                	or     BYTE PTR [ecx],dl
c000788a:	4e                   	dec    esi
c000788b:	d1 e2                	shl    edx,1
c000788d:	eb f0                	jmp    c000787f <f_mkfs+0x5ba>
c000788f:	89 df                	mov    edi,ebx
c0007891:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0007895:	76 04                	jbe    c000789b <f_mkfs+0x5d6>
c0007897:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000789b:	83 ec 0c             	sub    esp,0xc
c000789e:	57                   	push   edi
c000789f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00078a3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00078a7:	55                   	push   ebp
c00078a8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00078ac:	e8 99 a0 ff ff       	call   c000194a <disk_write>
c00078b1:	83 c4 20             	add    esp,0x20
c00078b4:	85 c0                	test   eax,eax
c00078b6:	0f 85 ba 0a 00 00    	jne    c0008376 <f_mkfs+0x10b1>
c00078bc:	31 d2                	xor    edx,edx
c00078be:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c00078c2:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c00078c6:	29 fb                	sub    ebx,edi
c00078c8:	0f 85 7a ff ff ff    	jne    c0007848 <f_mkfs+0x583>
c00078ce:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00078d2:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00078da:	31 f6                	xor    esi,esi
c00078dc:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00078e0:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00078e3:	31 d2                	xor    edx,edx
c00078e5:	89 e8                	mov    eax,ebp
c00078e7:	e8 27 a1 ff ff       	call   c0001a13 <mem_set>
c00078ec:	31 c9                	xor    ecx,ecx
c00078ee:	85 db                	test   ebx,ebx
c00078f0:	75 40                	jne    c0007932 <f_mkfs+0x66d>
c00078f2:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00078f7:	89 e8                	mov    eax,ebp
c00078f9:	bb 02 00 00 00       	mov    ebx,0x2
c00078fe:	e8 f2 a0 ff ff       	call   c00019f5 <st_dword>
c0007903:	8d 45 04             	lea    eax,[ebp+0x4]
c0007906:	83 ca ff             	or     edx,0xffffffff
c0007909:	e8 e7 a0 ff ff       	call   c00019f5 <st_dword>
c000790e:	b9 08 00 00 00       	mov    ecx,0x8
c0007913:	eb 1d                	jmp    c0007932 <f_mkfs+0x66d>
c0007915:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0007918:	76 3b                	jbe    c0007955 <f_mkfs+0x690>
c000791a:	43                   	inc    ebx
c000791b:	83 fe 01             	cmp    esi,0x1
c000791e:	89 da                	mov    edx,ebx
c0007920:	77 03                	ja     c0007925 <f_mkfs+0x660>
c0007922:	83 ca ff             	or     edx,0xffffffff
c0007925:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0007929:	4e                   	dec    esi
c000792a:	e8 c6 a0 ff ff       	call   c00019f5 <st_dword>
c000792f:	83 c1 04             	add    ecx,0x4
c0007932:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007936:	85 f6                	test   esi,esi
c0007938:	75 db                	jne    c0007915 <f_mkfs+0x650>
c000793a:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c000793f:	77 14                	ja     c0007955 <f_mkfs+0x690>
c0007941:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c0007945:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c000794c:	85 f6                	test   esi,esi
c000794e:	74 05                	je     c0007955 <f_mkfs+0x690>
c0007950:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0007953:	77 dd                	ja     c0007932 <f_mkfs+0x66d>
c0007955:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0007959:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000795d:	39 cf                	cmp    edi,ecx
c000795f:	76 02                	jbe    c0007963 <f_mkfs+0x69e>
c0007961:	89 cf                	mov    edi,ecx
c0007963:	83 ec 0c             	sub    esp,0xc
c0007966:	57                   	push   edi
c0007967:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000796b:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000796f:	55                   	push   ebp
c0007970:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007974:	e8 d1 9f ff ff       	call   c000194a <disk_write>
c0007979:	83 c4 20             	add    esp,0x20
c000797c:	85 c0                	test   eax,eax
c000797e:	0f 85 f2 09 00 00    	jne    c0008376 <f_mkfs+0x10b1>
c0007984:	31 d2                	xor    edx,edx
c0007986:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c000798a:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c000798e:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c0007992:	0f 85 48 ff ff ff    	jne    c00078e0 <f_mkfs+0x61b>
c0007998:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000799b:	31 d2                	xor    edx,edx
c000799d:	89 e8                	mov    eax,ebp
c000799f:	31 ff                	xor    edi,edi
c00079a1:	e8 6d a0 ff ff       	call   c0001a13 <mem_set>
c00079a6:	8d 45 34             	lea    eax,[ebp+0x34]
c00079a9:	ba 02 00 00 00       	mov    edx,0x2
c00079ae:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c00079b2:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c00079b6:	e8 3a a0 ff ff       	call   c00019f5 <st_dword>
c00079bb:	8d 45 38             	lea    eax,[ebp+0x38]
c00079be:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c00079c2:	e8 2e a0 ff ff       	call   c00019f5 <st_dword>
c00079c7:	8d 45 44             	lea    eax,[ebp+0x44]
c00079ca:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c00079ce:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c00079d2:	e8 1e a0 ff ff       	call   c00019f5 <st_dword>
c00079d7:	8d 45 54             	lea    eax,[ebp+0x54]
c00079da:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00079de:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00079e2:	83 c2 02             	add    edx,0x2
c00079e5:	e8 0b a0 ff ff       	call   c00019f5 <st_dword>
c00079ea:	8d 45 58             	lea    eax,[ebp+0x58]
c00079ed:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c00079f1:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00079f5:	e8 fb 9f ff ff       	call   c00019f5 <st_dword>
c00079fa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00079fe:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007a03:	89 c6                	mov    esi,eax
c0007a05:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007a09:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007a0d:	89 04 24             	mov    DWORD PTR [esp],eax
c0007a10:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007a14:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007a17:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007a1b:	39 cb                	cmp    ebx,ecx
c0007a1d:	76 02                	jbe    c0007a21 <f_mkfs+0x75c>
c0007a1f:	89 cb                	mov    ebx,ecx
c0007a21:	83 ec 0c             	sub    esp,0xc
c0007a24:	53                   	push   ebx
c0007a25:	57                   	push   edi
c0007a26:	56                   	push   esi
c0007a27:	55                   	push   ebp
c0007a28:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a2c:	e8 19 9f ff ff       	call   c000194a <disk_write>
c0007a31:	83 c4 20             	add    esp,0x20
c0007a34:	85 c0                	test   eax,eax
c0007a36:	0f 85 3a 09 00 00    	jne    c0008376 <f_mkfs+0x10b1>
c0007a3c:	31 d2                	xor    edx,edx
c0007a3e:	b9 00 02 00 00       	mov    ecx,0x200
c0007a43:	89 e8                	mov    eax,ebp
c0007a45:	e8 c9 9f ff ff       	call   c0001a13 <mem_set>
c0007a4a:	31 d2                	xor    edx,edx
c0007a4c:	01 de                	add    esi,ebx
c0007a4e:	11 d7                	adc    edi,edx
c0007a50:	29 1c 24             	sub    DWORD PTR [esp],ebx
c0007a53:	75 bf                	jne    c0007a14 <f_mkfs+0x74f>
c0007a55:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007a59:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0007a5d:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c0007a65:	b9 00 02 00 00       	mov    ecx,0x200
c0007a6a:	31 d2                	xor    edx,edx
c0007a6c:	89 e8                	mov    eax,ebp
c0007a6e:	e8 a0 9f ff ff       	call   c0001a13 <mem_set>
c0007a73:	b9 0b 00 00 00       	mov    ecx,0xb
c0007a78:	ba c0 23 02 c0       	mov    edx,0xc00223c0
c0007a7d:	89 e8                	mov    eax,ebp
c0007a7f:	e8 7a 9f ff ff       	call   c00019fe <mem_cpy>
c0007a84:	8d 45 40             	lea    eax,[ebp+0x40]
c0007a87:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007a8b:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007a8f:	e8 64 9f ff ff       	call   c00019f8 <st_qword>
c0007a94:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0007a98:	8d 45 48             	lea    eax,[ebp+0x48]
c0007a9b:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007a9f:	e8 54 9f ff ff       	call   c00019f8 <st_qword>
c0007aa4:	8d 45 50             	lea    eax,[ebp+0x50]
c0007aa7:	ba 20 00 00 00       	mov    edx,0x20
c0007aac:	e8 44 9f ff ff       	call   c00019f5 <st_dword>
c0007ab1:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007ab5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007ab9:	e8 37 9f ff ff       	call   c00019f5 <st_dword>
c0007abe:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007ac2:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007ac6:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007aca:	e8 26 9f ff ff       	call   c00019f5 <st_dword>
c0007acf:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007ad2:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007ad6:	e8 1a 9f ff ff       	call   c00019f5 <st_dword>
c0007adb:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007adf:	8d 50 02             	lea    edx,[eax+0x2]
c0007ae2:	8d 45 60             	lea    eax,[ebp+0x60]
c0007ae5:	e8 0b 9f ff ff       	call   c00019f5 <st_dword>
c0007aea:	8d 45 64             	lea    eax,[ebp+0x64]
c0007aed:	ba 00 00 21 50       	mov    edx,0x50210000
c0007af2:	e8 fe 9e ff ff       	call   c00019f5 <st_dword>
c0007af7:	8d 45 68             	lea    eax,[ebp+0x68]
c0007afa:	ba 00 01 00 00       	mov    edx,0x100
c0007aff:	e8 ed 9e ff ff       	call   c00019f1 <st_word>
c0007b04:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007b08:	b8 0a 00 00 00       	mov    eax,0xa
c0007b0d:	48                   	dec    eax
c0007b0e:	74 05                	je     c0007b15 <f_mkfs+0x850>
c0007b10:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c0007b13:	eb f8                	jmp    c0007b0d <f_mkfs+0x848>
c0007b15:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007b19:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007b1d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007b21:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007b25:	74 05                	je     c0007b2c <f_mkfs+0x867>
c0007b27:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007b2a:	eb f5                	jmp    c0007b21 <f_mkfs+0x85c>
c0007b2c:	8d 45 78             	lea    eax,[ebp+0x78]
c0007b2f:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007b34:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007b3a:	31 db                	xor    ebx,ebx
c0007b3c:	e8 b0 9e ff ff       	call   c00019f1 <st_word>
c0007b41:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007b47:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007b4c:	89 04 24             	mov    DWORD PTR [esp],eax
c0007b4f:	e8 9d 9e ff ff       	call   c00019f1 <st_word>
c0007b54:	31 c9                	xor    ecx,ecx
c0007b56:	8d 41 96             	lea    eax,[ecx-0x6a]
c0007b59:	83 f8 01             	cmp    eax,0x1
c0007b5c:	76 13                	jbe    c0007b71 <f_mkfs+0x8ac>
c0007b5e:	83 f9 70             	cmp    ecx,0x70
c0007b61:	74 0e                	je     c0007b71 <f_mkfs+0x8ac>
c0007b63:	89 da                	mov    edx,ebx
c0007b65:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007b6a:	e8 0b a3 ff ff       	call   c0001e7a <xsum32>
c0007b6f:	89 c3                	mov    ebx,eax
c0007b71:	41                   	inc    ecx
c0007b72:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007b78:	75 dc                	jne    c0007b56 <f_mkfs+0x891>
c0007b7a:	89 f0                	mov    eax,esi
c0007b7c:	89 fa                	mov    edx,edi
c0007b7e:	83 c0 01             	add    eax,0x1
c0007b81:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007b85:	83 d2 00             	adc    edx,0x0
c0007b88:	83 ec 0c             	sub    esp,0xc
c0007b8b:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007b8f:	6a 01                	push   0x1
c0007b91:	57                   	push   edi
c0007b92:	56                   	push   esi
c0007b93:	55                   	push   ebp
c0007b94:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007b98:	e8 ad 9d ff ff       	call   c000194a <disk_write>
c0007b9d:	83 c4 20             	add    esp,0x20
c0007ba0:	85 c0                	test   eax,eax
c0007ba2:	0f 85 ce 07 00 00    	jne    c0008376 <f_mkfs+0x10b1>
c0007ba8:	31 d2                	xor    edx,edx
c0007baa:	b9 00 02 00 00       	mov    ecx,0x200
c0007baf:	89 e8                	mov    eax,ebp
c0007bb1:	e8 5d 9e ff ff       	call   c0001a13 <mem_set>
c0007bb6:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007bbb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007bbe:	e8 2e 9e ff ff       	call   c00019f1 <st_word>
c0007bc3:	89 f0                	mov    eax,esi
c0007bc5:	89 fa                	mov    edx,edi
c0007bc7:	83 c0 09             	add    eax,0x9
c0007bca:	83 d2 00             	adc    edx,0x0
c0007bcd:	89 04 24             	mov    DWORD PTR [esp],eax
c0007bd0:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007bd4:	31 c9                	xor    ecx,ecx
c0007bd6:	41                   	inc    ecx
c0007bd7:	89 da                	mov    edx,ebx
c0007bd9:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007bde:	e8 97 a2 ff ff       	call   c0001e7a <xsum32>
c0007be3:	89 c3                	mov    ebx,eax
c0007be5:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007beb:	75 e9                	jne    c0007bd6 <f_mkfs+0x911>
c0007bed:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007bf1:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007bf5:	83 c0 01             	add    eax,0x1
c0007bf8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007bfc:	83 d2 00             	adc    edx,0x0
c0007bff:	83 ec 0c             	sub    esp,0xc
c0007c02:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007c06:	6a 01                	push   0x1
c0007c08:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007c0c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007c10:	55                   	push   ebp
c0007c11:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c15:	e8 30 9d ff ff       	call   c000194a <disk_write>
c0007c1a:	83 c4 20             	add    esp,0x20
c0007c1d:	85 c0                	test   eax,eax
c0007c1f:	0f 85 51 07 00 00    	jne    c0008376 <f_mkfs+0x10b1>
c0007c25:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007c29:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007c2d:	75 09                	jne    c0007c38 <f_mkfs+0x973>
c0007c2f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007c32:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007c36:	74 12                	je     c0007c4a <f_mkfs+0x985>
c0007c38:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007c3c:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007c40:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007c44:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007c48:	eb 8a                	jmp    c0007bd4 <f_mkfs+0x90f>
c0007c4a:	31 d2                	xor    edx,edx
c0007c4c:	b9 00 02 00 00       	mov    ecx,0x200
c0007c51:	89 e8                	mov    eax,ebp
c0007c53:	e8 bb 9d ff ff       	call   c0001a13 <mem_set>
c0007c58:	83 c6 0b             	add    esi,0xb
c0007c5b:	83 d7 00             	adc    edi,0x0
c0007c5e:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007c62:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007c66:	31 c9                	xor    ecx,ecx
c0007c68:	41                   	inc    ecx
c0007c69:	89 da                	mov    edx,ebx
c0007c6b:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007c70:	e8 05 a2 ff ff       	call   c0001e7a <xsum32>
c0007c75:	89 c3                	mov    ebx,eax
c0007c77:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007c7d:	75 e9                	jne    c0007c68 <f_mkfs+0x9a3>
c0007c7f:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007c82:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007c86:	83 c6 01             	add    esi,0x1
c0007c89:	83 d7 00             	adc    edi,0x0
c0007c8c:	83 ec 0c             	sub    esp,0xc
c0007c8f:	6a 01                	push   0x1
c0007c91:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007c95:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007c99:	55                   	push   ebp
c0007c9a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c9e:	e8 a7 9c ff ff       	call   c000194a <disk_write>
c0007ca3:	83 c4 20             	add    esp,0x20
c0007ca6:	85 c0                	test   eax,eax
c0007ca8:	0f 85 c8 06 00 00    	jne    c0008376 <f_mkfs+0x10b1>
c0007cae:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007cb2:	75 06                	jne    c0007cba <f_mkfs+0x9f5>
c0007cb4:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007cb8:	74 09                	je     c0007cc3 <f_mkfs+0x9fe>
c0007cba:	89 34 24             	mov    DWORD PTR [esp],esi
c0007cbd:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007cc1:	eb a3                	jmp    c0007c66 <f_mkfs+0x9a1>
c0007cc3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007cc7:	89 da                	mov    edx,ebx
c0007cc9:	01 e8                	add    eax,ebp
c0007ccb:	e8 25 9d ff ff       	call   c00019f5 <st_dword>
c0007cd0:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007cd5:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007cdd:	75 e4                	jne    c0007cc3 <f_mkfs+0x9fe>
c0007cdf:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007ce2:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007ce6:	83 c6 02             	add    esi,0x2
c0007ce9:	83 d7 00             	adc    edi,0x0
c0007cec:	83 ec 0c             	sub    esp,0xc
c0007cef:	6a 01                	push   0x1
c0007cf1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007cf5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007cf9:	55                   	push   ebp
c0007cfa:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007cfe:	e8 47 9c ff ff       	call   c000194a <disk_write>
c0007d03:	83 c4 20             	add    esp,0x20
c0007d06:	85 c0                	test   eax,eax
c0007d08:	0f 85 68 06 00 00    	jne    c0008376 <f_mkfs+0x10b1>
c0007d0e:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007d13:	74 0d                	je     c0007d22 <f_mkfs+0xa5d>
c0007d15:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007d1d:	e9 43 fd ff ff       	jmp    c0007a65 <f_mkfs+0x7a0>
c0007d22:	b1 07                	mov    cl,0x7
c0007d24:	e9 e3 05 00 00       	jmp    c000830c <f_mkfs+0x1047>
c0007d29:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007d2e:	0f 85 4f 02 00 00    	jne    c0007f83 <f_mkfs+0xcbe>
c0007d34:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007d39:	0f 86 22 02 00 00    	jbe    c0007f61 <f_mkfs+0xc9c>
c0007d3f:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007d44:	0f 85 81 06 00 00    	jne    c00083cb <f_mkfs+0x1106>
c0007d4a:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007d4d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007d51:	83 f8 40             	cmp    eax,0x40
c0007d54:	0f 87 51 06 00 00    	ja     c00083ab <f_mkfs+0x10e6>
c0007d5a:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007d5e:	85 ff                	test   edi,edi
c0007d60:	75 1c                	jne    c0007d7e <f_mkfs+0xab9>
c0007d62:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007d65:	ba c0 22 02 c0       	mov    edx,0xc00222c0
c0007d6a:	c1 e9 0c             	shr    ecx,0xc
c0007d6d:	bf 01 00 00 00       	mov    edi,0x1
c0007d72:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007d75:	66 85 c0             	test   ax,ax
c0007d78:	0f 85 95 01 00 00    	jne    c0007f13 <f_mkfs+0xc4e>
c0007d7e:	31 d2                	xor    edx,edx
c0007d80:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007d83:	f7 f7                	div    edi
c0007d85:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007d8a:	0f 86 95 01 00 00    	jbe    c0007f25 <f_mkfs+0xc60>
c0007d90:	83 c0 02             	add    eax,0x2
c0007d93:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007d98:	01 c0                	add    eax,eax
c0007d9a:	05 ff 01 00 00       	add    eax,0x1ff
c0007d9f:	be 01 00 00 00       	mov    esi,0x1
c0007da4:	c1 e8 09             	shr    eax,0x9
c0007da7:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007dab:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007daf:	c1 e0 05             	shl    eax,0x5
c0007db2:	c1 e8 09             	shr    eax,0x9
c0007db5:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007db9:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007dbe:	31 d2                	xor    edx,edx
c0007dc0:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007dc4:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007dc8:	89 f0                	mov    eax,esi
c0007dca:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007dce:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007dd2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007dd6:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007dda:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007dde:	31 d2                	xor    edx,edx
c0007de0:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007de5:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007de9:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007ded:	31 db                	xor    ebx,ebx
c0007def:	01 c8                	add    eax,ecx
c0007df1:	11 da                	adc    edx,ebx
c0007df3:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007df7:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007dfb:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007dff:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007e03:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007e07:	f7 da                	neg    edx
c0007e09:	21 d1                	and    ecx,edx
c0007e0b:	29 d9                	sub    ecx,ebx
c0007e0d:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007e12:	0f 85 20 01 00 00    	jne    c0007f38 <f_mkfs+0xc73>
c0007e18:	31 db                	xor    ebx,ebx
c0007e1a:	01 ce                	add    esi,ecx
c0007e1c:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007e20:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007e24:	31 d2                	xor    edx,edx
c0007e26:	89 f8                	mov    eax,edi
c0007e28:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007e2c:	c1 e0 04             	shl    eax,0x4
c0007e2f:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007e33:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007e37:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007e3b:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007e3f:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007e42:	19 d3                	sbb    ebx,edx
c0007e44:	0f 82 40 01 00 00    	jb     c0007f8a <f_mkfs+0xcc5>
c0007e4a:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007e4d:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007e51:	89 c8                	mov    eax,ecx
c0007e53:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0007e58:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0007e5c:	29 f0                	sub    eax,esi
c0007e5e:	29 d0                	sub    eax,edx
c0007e60:	31 d2                	xor    edx,edx
c0007e62:	f7 f7                	div    edi
c0007e64:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007e69:	89 c3                	mov    ebx,eax
c0007e6b:	0f 85 b8 fe ff ff    	jne    c0007d29 <f_mkfs+0xa64>
c0007e71:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007e76:	0f 87 1d 01 00 00    	ja     c0007f99 <f_mkfs+0xcd4>
c0007e7c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007e81:	0f 85 03 01 00 00    	jne    c0007f8a <f_mkfs+0xcc5>
c0007e87:	83 ff 01             	cmp    edi,0x1
c0007e8a:	0f 86 fa 00 00 00    	jbe    c0007f8a <f_mkfs+0xcc5>
c0007e90:	d1 ef                	shr    edi,1
c0007e92:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007e96:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007e9a:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007e9d:	85 db                	test   ebx,ebx
c0007e9f:	75 2d                	jne    c0007ece <f_mkfs+0xc09>
c0007ea1:	89 cb                	mov    ebx,ecx
c0007ea3:	ba d0 22 02 c0       	mov    edx,0xc00222d0
c0007ea8:	c1 eb 11             	shr    ebx,0x11
c0007eab:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007eb3:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007eb6:	66 85 c0             	test   ax,ax
c0007eb9:	74 11                	je     c0007ecc <f_mkfs+0xc07>
c0007ebb:	83 c2 02             	add    edx,0x2
c0007ebe:	39 d8                	cmp    eax,ebx
c0007ec0:	77 0a                	ja     c0007ecc <f_mkfs+0xc07>
c0007ec2:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007ec6:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007eca:	eb e7                	jmp    c0007eb3 <f_mkfs+0xbee>
c0007ecc:	31 db                	xor    ebx,ebx
c0007ece:	31 d2                	xor    edx,edx
c0007ed0:	89 c8                	mov    eax,ecx
c0007ed2:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007ed6:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007edd:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007ee2:	c1 ea 09             	shr    edx,0x9
c0007ee5:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007eea:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007eee:	0f 87 96 00 00 00    	ja     c0007f8a <f_mkfs+0xcc5>
c0007ef4:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007ef8:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c0007f00:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007f04:	be 20 00 00 00       	mov    esi,0x20
c0007f09:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0007f0e:	e9 a6 fe ff ff       	jmp    c0007db9 <f_mkfs+0xaf4>
c0007f13:	83 c2 02             	add    edx,0x2
c0007f16:	39 c8                	cmp    eax,ecx
c0007f18:	0f 87 60 fe ff ff    	ja     c0007d7e <f_mkfs+0xab9>
c0007f1e:	01 ff                	add    edi,edi
c0007f20:	e9 4d fe ff ff       	jmp    c0007d72 <f_mkfs+0xaad>
c0007f25:	8d 04 40             	lea    eax,[eax+eax*2]
c0007f28:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007f2d:	40                   	inc    eax
c0007f2e:	d1 e8                	shr    eax,1
c0007f30:	83 c0 03             	add    eax,0x3
c0007f33:	e9 62 fe ff ff       	jmp    c0007d9a <f_mkfs+0xad5>
c0007f38:	31 d2                	xor    edx,edx
c0007f3a:	89 c8                	mov    eax,ecx
c0007f3c:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007f40:	85 d2                	test   edx,edx
c0007f42:	74 0c                	je     c0007f50 <f_mkfs+0xc8b>
c0007f44:	49                   	dec    ecx
c0007f45:	46                   	inc    esi
c0007f46:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0007f4b:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0007f50:	89 c8                	mov    eax,ecx
c0007f52:	31 d2                	xor    edx,edx
c0007f54:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007f58:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0007f5c:	e9 c3 fe ff ff       	jmp    c0007e24 <f_mkfs+0xb5f>
c0007f61:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007f66:	77 31                	ja     c0007f99 <f_mkfs+0xcd4>
c0007f68:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007f6d:	75 1b                	jne    c0007f8a <f_mkfs+0xcc5>
c0007f6f:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007f72:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007f76:	3d 80 00 00 00       	cmp    eax,0x80
c0007f7b:	0f 86 d9 fd ff ff    	jbe    c0007d5a <f_mkfs+0xa95>
c0007f81:	eb 07                	jmp    c0007f8a <f_mkfs+0xcc5>
c0007f83:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007f88:	76 0a                	jbe    c0007f94 <f_mkfs+0xccf>
c0007f8a:	bb 0e 00 00 00       	mov    ebx,0xe
c0007f8f:	e9 ff 03 00 00       	jmp    c0008393 <f_mkfs+0x10ce>
c0007f94:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007f99:	31 d2                	xor    edx,edx
c0007f9b:	b9 00 02 00 00       	mov    ecx,0x200
c0007fa0:	89 e8                	mov    eax,ebp
c0007fa2:	e8 6c 9a ff ff       	call   c0001a13 <mem_set>
c0007fa7:	b9 0b 00 00 00       	mov    ecx,0xb
c0007fac:	ba e2 23 02 c0       	mov    edx,0xc00223e2
c0007fb1:	89 e8                	mov    eax,ebp
c0007fb3:	e8 46 9a ff ff       	call   c00019fe <mem_cpy>
c0007fb8:	8d 45 0b             	lea    eax,[ebp+0xb]
c0007fbb:	ba 00 02 00 00       	mov    edx,0x200
c0007fc0:	e8 2c 9a ff ff       	call   c00019f1 <st_word>
c0007fc5:	89 f8                	mov    eax,edi
c0007fc7:	0f b7 d6             	movzx  edx,si
c0007fca:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c0007fcd:	8d 45 0e             	lea    eax,[ebp+0xe]
c0007fd0:	e8 1c 9a ff ff       	call   c00019f1 <st_word>
c0007fd5:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c0007fd9:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007fde:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c0007fe1:	75 08                	jne    c0007feb <f_mkfs+0xd26>
c0007fe3:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007feb:	8d 45 11             	lea    eax,[ebp+0x11]
c0007fee:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0007ff2:	e8 fa 99 ff ff       	call   c00019f1 <st_word>
c0007ff7:	b8 ff ff 00 00       	mov    eax,0xffff
c0007ffc:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0008000:	39 d0                	cmp    eax,edx
c0008002:	b8 00 00 00 00       	mov    eax,0x0
c0008007:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c000800b:	72 0a                	jb     c0008017 <f_mkfs+0xd52>
c000800d:	8d 45 13             	lea    eax,[ebp+0x13]
c0008010:	e8 dc 99 ff ff       	call   c00019f1 <st_word>
c0008015:	eb 08                	jmp    c000801f <f_mkfs+0xd5a>
c0008017:	8d 45 20             	lea    eax,[ebp+0x20]
c000801a:	e8 d6 99 ff ff       	call   c00019f5 <st_dword>
c000801f:	8d 45 18             	lea    eax,[ebp+0x18]
c0008022:	ba 3f 00 00 00       	mov    edx,0x3f
c0008027:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c000802b:	e8 c1 99 ff ff       	call   c00019f1 <st_word>
c0008030:	8d 45 1a             	lea    eax,[ebp+0x1a]
c0008033:	ba ff 00 00 00       	mov    edx,0xff
c0008038:	e8 b4 99 ff ff       	call   c00019f1 <st_word>
c000803d:	8d 45 1c             	lea    eax,[ebp+0x1c]
c0008040:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008044:	e8 ac 99 ff ff       	call   c00019f5 <st_dword>
c0008049:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000804e:	75 57                	jne    c00080a7 <f_mkfs+0xde2>
c0008050:	8d 45 43             	lea    eax,[ebp+0x43]
c0008053:	ba 00 00 21 50       	mov    edx,0x50210000
c0008058:	e8 98 99 ff ff       	call   c00019f5 <st_dword>
c000805d:	8d 45 24             	lea    eax,[ebp+0x24]
c0008060:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0008064:	e8 8c 99 ff ff       	call   c00019f5 <st_dword>
c0008069:	8d 45 2c             	lea    eax,[ebp+0x2c]
c000806c:	ba 02 00 00 00       	mov    edx,0x2
c0008071:	e8 7f 99 ff ff       	call   c00019f5 <st_dword>
c0008076:	8d 45 30             	lea    eax,[ebp+0x30]
c0008079:	ba 01 00 00 00       	mov    edx,0x1
c000807e:	e8 6e 99 ff ff       	call   c00019f1 <st_word>
c0008083:	8d 45 32             	lea    eax,[ebp+0x32]
c0008086:	ba 06 00 00 00       	mov    edx,0x6
c000808b:	e8 61 99 ff ff       	call   c00019f1 <st_word>
c0008090:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0008094:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c0008098:	8d 45 47             	lea    eax,[ebp+0x47]
c000809b:	b9 13 00 00 00       	mov    ecx,0x13
c00080a0:	ba ee 23 02 c0       	mov    edx,0xc00223ee
c00080a5:	eb 2f                	jmp    c00080d6 <f_mkfs+0xe11>
c00080a7:	8d 45 27             	lea    eax,[ebp+0x27]
c00080aa:	ba 00 00 21 50       	mov    edx,0x50210000
c00080af:	e8 41 99 ff ff       	call   c00019f5 <st_dword>
c00080b4:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c00080b9:	8d 45 16             	lea    eax,[ebp+0x16]
c00080bc:	e8 30 99 ff ff       	call   c00019f1 <st_word>
c00080c1:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c00080c5:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c00080c9:	8d 45 2b             	lea    eax,[ebp+0x2b]
c00080cc:	b9 13 00 00 00       	mov    ecx,0x13
c00080d1:	ba 02 24 02 c0       	mov    edx,0xc0022402
c00080d6:	e8 23 99 ff ff       	call   c00019fe <mem_cpy>
c00080db:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c00080e1:	ba 55 aa 00 00       	mov    edx,0xaa55
c00080e6:	89 f0                	mov    eax,esi
c00080e8:	e8 04 99 ff ff       	call   c00019f1 <st_word>
c00080ed:	83 ec 0c             	sub    esp,0xc
c00080f0:	6a 01                	push   0x1
c00080f2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00080f6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00080fa:	55                   	push   ebp
c00080fb:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00080ff:	e8 46 98 ff ff       	call   c000194a <disk_write>
c0008104:	83 c4 20             	add    esp,0x20
c0008107:	85 c0                	test   eax,eax
c0008109:	0f 85 67 02 00 00    	jne    c0008376 <f_mkfs+0x10b1>
c000810f:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008114:	0f 85 b7 00 00 00    	jne    c00081d1 <f_mkfs+0xf0c>
c000811a:	83 ec 0c             	sub    esp,0xc
c000811d:	6a 01                	push   0x1
c000811f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008123:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008127:	83 c0 06             	add    eax,0x6
c000812a:	83 d2 00             	adc    edx,0x0
c000812d:	52                   	push   edx
c000812e:	50                   	push   eax
c000812f:	55                   	push   ebp
c0008130:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008134:	e8 11 98 ff ff       	call   c000194a <disk_write>
c0008139:	83 c4 20             	add    esp,0x20
c000813c:	b9 00 02 00 00       	mov    ecx,0x200
c0008141:	31 d2                	xor    edx,edx
c0008143:	89 e8                	mov    eax,ebp
c0008145:	e8 c9 98 ff ff       	call   c0001a13 <mem_set>
c000814a:	ba 52 52 61 41       	mov    edx,0x41615252
c000814f:	89 e8                	mov    eax,ebp
c0008151:	e8 9f 98 ff ff       	call   c00019f5 <st_dword>
c0008156:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c000815c:	ba 72 72 41 61       	mov    edx,0x61417272
c0008161:	e8 8f 98 ff ff       	call   c00019f5 <st_dword>
c0008166:	8d 53 ff             	lea    edx,[ebx-0x1]
c0008169:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c000816f:	e8 81 98 ff ff       	call   c00019f5 <st_dword>
c0008174:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c000817a:	ba 02 00 00 00       	mov    edx,0x2
c000817f:	e8 71 98 ff ff       	call   c00019f5 <st_dword>
c0008184:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008189:	89 f0                	mov    eax,esi
c000818b:	e8 61 98 ff ff       	call   c00019f1 <st_word>
c0008190:	83 ec 0c             	sub    esp,0xc
c0008193:	6a 01                	push   0x1
c0008195:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008199:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000819d:	83 c0 07             	add    eax,0x7
c00081a0:	83 d2 00             	adc    edx,0x0
c00081a3:	52                   	push   edx
c00081a4:	50                   	push   eax
c00081a5:	55                   	push   ebp
c00081a6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00081aa:	e8 9b 97 ff ff       	call   c000194a <disk_write>
c00081af:	83 c4 14             	add    esp,0x14
c00081b2:	6a 01                	push   0x1
c00081b4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00081b8:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00081bc:	83 c0 01             	add    eax,0x1
c00081bf:	83 d2 00             	adc    edx,0x0
c00081c2:	52                   	push   edx
c00081c3:	50                   	push   eax
c00081c4:	55                   	push   ebp
c00081c5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00081c9:	e8 7c 97 ff ff       	call   c000194a <disk_write>
c00081ce:	83 c4 20             	add    esp,0x20
c00081d1:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c00081d8:	31 d2                	xor    edx,edx
c00081da:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c00081e0:	31 db                	xor    ebx,ebx
c00081e2:	89 e8                	mov    eax,ebp
c00081e4:	e8 2a 98 ff ff       	call   c0001a13 <mem_set>
c00081e9:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c00081ee:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00081f5:	0f 94 c3             	sete   bl
c00081f8:	4b                   	dec    ebx
c00081f9:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c00081ff:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c0008205:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000820a:	75 21                	jne    c000822d <f_mkfs+0xf68>
c000820c:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0008211:	89 e8                	mov    eax,ebp
c0008213:	e8 dd 97 ff ff       	call   c00019f5 <st_dword>
c0008218:	8d 45 04             	lea    eax,[ebp+0x4]
c000821b:	83 ca ff             	or     edx,0xffffffff
c000821e:	e8 d2 97 ff ff       	call   c00019f5 <st_dword>
c0008223:	8d 45 08             	lea    eax,[ebp+0x8]
c0008226:	ba ff ff ff 0f       	mov    edx,0xfffffff
c000822b:	eb 04                	jmp    c0008231 <f_mkfs+0xf6c>
c000822d:	89 da                	mov    edx,ebx
c000822f:	89 e8                	mov    eax,ebp
c0008231:	e8 bf 97 ff ff       	call   c00019f5 <st_dword>
c0008236:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000823a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000823e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0008242:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008246:	39 ce                	cmp    esi,ecx
c0008248:	76 02                	jbe    c000824c <f_mkfs+0xf87>
c000824a:	89 ce                	mov    esi,ecx
c000824c:	83 ec 0c             	sub    esp,0xc
c000824f:	56                   	push   esi
c0008250:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008254:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008258:	55                   	push   ebp
c0008259:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000825d:	e8 e8 96 ff ff       	call   c000194a <disk_write>
c0008262:	83 c4 20             	add    esp,0x20
c0008265:	85 c0                	test   eax,eax
c0008267:	0f 85 09 01 00 00    	jne    c0008376 <f_mkfs+0x10b1>
c000826d:	31 d2                	xor    edx,edx
c000826f:	b9 00 02 00 00       	mov    ecx,0x200
c0008274:	89 e8                	mov    eax,ebp
c0008276:	e8 98 97 ff ff       	call   c0001a13 <mem_set>
c000827b:	31 d2                	xor    edx,edx
c000827d:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c0008281:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008285:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0008289:	75 b3                	jne    c000823e <f_mkfs+0xf79>
c000828b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000828e:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0008295:	40                   	inc    eax
c0008296:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c000829a:	0f 87 65 ff ff ff    	ja     c0008205 <f_mkfs+0xf40>
c00082a0:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00082a5:	74 04                	je     c00082ab <f_mkfs+0xfe6>
c00082a7:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c00082ab:	89 fb                	mov    ebx,edi
c00082ad:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c00082b1:	76 04                	jbe    c00082b7 <f_mkfs+0xff2>
c00082b3:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00082b7:	83 ec 0c             	sub    esp,0xc
c00082ba:	53                   	push   ebx
c00082bb:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00082bf:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00082c3:	55                   	push   ebp
c00082c4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00082c8:	e8 7d 96 ff ff       	call   c000194a <disk_write>
c00082cd:	83 c4 20             	add    esp,0x20
c00082d0:	85 c0                	test   eax,eax
c00082d2:	0f 85 9e 00 00 00    	jne    c0008376 <f_mkfs+0x10b1>
c00082d8:	31 d2                	xor    edx,edx
c00082da:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c00082de:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c00082e2:	29 df                	sub    edi,ebx
c00082e4:	75 c5                	jne    c00082ab <f_mkfs+0xfe6>
c00082e6:	b1 0c                	mov    cl,0xc
c00082e8:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00082ed:	74 1d                	je     c000830c <f_mkfs+0x1047>
c00082ef:	b8 ff ff 00 00       	mov    eax,0xffff
c00082f4:	b1 06                	mov    cl,0x6
c00082f6:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c00082fa:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c00082fe:	72 0c                	jb     c000830c <f_mkfs+0x1047>
c0008300:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0008305:	0f 94 c1             	sete   cl
c0008308:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c000830c:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c0008311:	75 4c                	jne    c000835f <f_mkfs+0x109a>
c0008313:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0008317:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c000831b:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0008322:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0008329:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c0008334:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c000833f:	0f b6 c9             	movzx  ecx,cl
c0008342:	83 ec 0c             	sub    esp,0xc
c0008345:	55                   	push   ebp
c0008346:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c000834d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008351:	e8 f9 bf ff ff       	call   c000434f <create_partition>
c0008356:	83 c4 10             	add    esp,0x10
c0008359:	89 c3                	mov    ebx,eax
c000835b:	85 c0                	test   eax,eax
c000835d:	75 34                	jne    c0008393 <f_mkfs+0x10ce>
c000835f:	31 db                	xor    ebx,ebx
c0008361:	50                   	push   eax
c0008362:	6a 00                	push   0x0
c0008364:	6a 00                	push   0x0
c0008366:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000836a:	e8 f1 95 ff ff       	call   c0001960 <disk_ioctl>
c000836f:	83 c4 10             	add    esp,0x10
c0008372:	85 c0                	test   eax,eax
c0008374:	74 1d                	je     c0008393 <f_mkfs+0x10ce>
c0008376:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c000837e:	75 0c                	jne    c000838c <f_mkfs+0x10c7>
c0008380:	83 ec 0c             	sub    esp,0xc
c0008383:	55                   	push   ebp
c0008384:	e8 77 00 00 00       	call   c0008400 <ff_memfree>
c0008389:	83 c4 10             	add    esp,0x10
c000838c:	bb 01 00 00 00       	mov    ebx,0x1
c0008391:	eb 48                	jmp    c00083db <f_mkfs+0x1116>
c0008393:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c000839b:	75 3e                	jne    c00083db <f_mkfs+0x1116>
c000839d:	83 ec 0c             	sub    esp,0xc
c00083a0:	55                   	push   ebp
c00083a1:	e8 5a 00 00 00       	call   c0008400 <ff_memfree>
c00083a6:	83 c4 10             	add    esp,0x10
c00083a9:	eb 30                	jmp    c00083db <f_mkfs+0x1116>
c00083ab:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c00083b0:	0f 85 eb fa ff ff    	jne    c0007ea1 <f_mkfs+0xbdc>
c00083b6:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00083ba:	81 ff 80 00 00 00    	cmp    edi,0x80
c00083c0:	0f 86 b8 f9 ff ff    	jbe    c0007d7e <f_mkfs+0xab9>
c00083c6:	e9 bf fb ff ff       	jmp    c0007f8a <f_mkfs+0xcc5>
c00083cb:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c00083d0:	0f 85 c0 fa ff ff    	jne    c0007e96 <f_mkfs+0xbd1>
c00083d6:	e9 af fb ff ff       	jmp    c0007f8a <f_mkfs+0xcc5>
c00083db:	81 c4 9c 00 00 00    	add    esp,0x9c
c00083e1:	89 d8                	mov    eax,ebx
c00083e3:	5b                   	pop    ebx
c00083e4:	5e                   	pop    esi
c00083e5:	5f                   	pop    edi
c00083e6:	5d                   	pop    ebp
c00083e7:	c3                   	ret    

c00083e8 <ff_memalloc>:
c00083e8:	83 ec 0c             	sub    esp,0xc
c00083eb:	83 ec 0c             	sub    esp,0xc
c00083ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00083f2:	e8 a0 13 00 00       	call   c0009797 <malloc>
c00083f7:	83 c4 10             	add    esp,0x10
c00083fa:	83 c4 0c             	add    esp,0xc
c00083fd:	c3                   	ret    
c00083fe:	66 90                	xchg   ax,ax

c0008400 <ff_memfree>:
c0008400:	83 ec 0c             	sub    esp,0xc
c0008403:	83 ec 0c             	sub    esp,0xc
c0008406:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000840a:	e8 98 13 00 00       	call   c00097a7 <free>
c000840f:	83 c4 10             	add    esp,0x10
c0008412:	90                   	nop
c0008413:	83 c4 0c             	add    esp,0xc
c0008416:	c3                   	ret    
c0008417:	90                   	nop

c0008418 <ff_uni2oem>:
c0008418:	83 ec 14             	sub    esp,0x14
c000841b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000841f:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008423:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c000842a:	c7 44 24 0c 20 27 02 c0 	mov    DWORD PTR [esp+0xc],0xc0022720
c0008432:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0008437:	77 0b                	ja     c0008444 <ff_uni2oem+0x2c>
c0008439:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000843d:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008442:	eb 60                	jmp    c00084a4 <ff_uni2oem+0x8c>
c0008444:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c000844c:	77 56                	ja     c00084a4 <ff_uni2oem+0x8c>
c000844e:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0008454:	75 4e                	jne    c00084a4 <ff_uni2oem+0x8c>
c0008456:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c000845d:	eb 0d                	jmp    c000846c <ff_uni2oem+0x54>
c000845f:	90                   	nop
c0008460:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008465:	40                   	inc    eax
c0008466:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000846b:	90                   	nop
c000846c:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c0008472:	77 1c                	ja     c0008490 <ff_uni2oem+0x78>
c0008474:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0008479:	01 c0                	add    eax,eax
c000847b:	89 c2                	mov    edx,eax
c000847d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008481:	01 d0                	add    eax,edx
c0008483:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008486:	0f b7 c0             	movzx  eax,ax
c0008489:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000848d:	75 d1                	jne    c0008460 <ff_uni2oem+0x48>
c000848f:	90                   	nop
c0008490:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008495:	83 e8 80             	sub    eax,0xffffff80
c0008498:	25 ff 00 00 00       	and    eax,0xff
c000849d:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00084a2:	66 90                	xchg   ax,ax
c00084a4:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00084a9:	83 c4 14             	add    esp,0x14
c00084ac:	c3                   	ret    
c00084ad:	8d 76 00             	lea    esi,[esi+0x0]

c00084b0 <ff_oem2uni>:
c00084b0:	83 ec 18             	sub    esp,0x18
c00084b3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00084b7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00084bb:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c00084c0:	66 89 04 24          	mov    WORD PTR [esp],ax
c00084c4:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c00084cb:	c7 44 24 10 20 27 02 c0 	mov    DWORD PTR [esp+0x10],0xc0022720
c00084d3:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c00084d9:	77 0d                	ja     c00084e8 <ff_oem2uni+0x38>
c00084db:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00084df:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00084e4:	eb 32                	jmp    c0008518 <ff_oem2uni+0x68>
c00084e6:	66 90                	xchg   ax,ax
c00084e8:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00084ee:	75 28                	jne    c0008518 <ff_oem2uni+0x68>
c00084f0:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c00084f7:	77 1f                	ja     c0008518 <ff_oem2uni+0x68>
c00084f9:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00084fe:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0008503:	01 c0                	add    eax,eax
c0008505:	89 c2                	mov    edx,eax
c0008507:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000850b:	01 d0                	add    eax,edx
c000850d:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008510:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0008515:	8d 76 00             	lea    esi,[esi+0x0]
c0008518:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c000851d:	83 c4 18             	add    esp,0x18
c0008520:	c3                   	ret    
c0008521:	8d 76 00             	lea    esi,[esi+0x0]

c0008524 <ff_wtoupper>:
c0008524:	83 ec 10             	sub    esp,0x10
c0008527:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000852f:	0f 87 4f 01 00 00    	ja     c0008684 <ff_wtoupper+0x160>
c0008535:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008539:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c000853e:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c0008545:	77 09                	ja     c0008550 <ff_wtoupper+0x2c>
c0008547:	b8 20 25 02 c0       	mov    eax,0xc0022520
c000854c:	eb 0a                	jmp    c0008558 <ff_wtoupper+0x34>
c000854e:	66 90                	xchg   ax,ax
c0008550:	b8 60 24 02 c0       	mov    eax,0xc0022460
c0008555:	8d 76 00             	lea    esi,[esi+0x0]
c0008558:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000855c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008560:	8d 50 02             	lea    edx,[eax+0x2]
c0008563:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008567:	66 8b 00             	mov    ax,WORD PTR [eax]
c000856a:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000856f:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0008575:	0f 84 fd 00 00 00    	je     c0008678 <ff_wtoupper+0x154>
c000857b:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008580:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0008585:	0f 82 ed 00 00 00    	jb     c0008678 <ff_wtoupper+0x154>
c000858b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000858f:	8d 50 02             	lea    edx,[eax+0x2]
c0008592:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008596:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008599:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c000859e:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c00085a3:	66 c1 e8 08          	shr    ax,0x8
c00085a7:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c00085ac:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c00085b3:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c00085b8:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c00085bd:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c00085c2:	01 ca                	add    edx,ecx
c00085c4:	39 d0                	cmp    eax,edx
c00085c6:	0f 8d 8c 00 00 00    	jge    c0008658 <ff_wtoupper+0x134>
c00085cc:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00085d1:	83 f8 08             	cmp    eax,0x8
c00085d4:	0f 87 9a 00 00 00    	ja     c0008674 <ff_wtoupper+0x150>
c00085da:	8b 04 85 20 24 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffddbe0]
c00085e1:	ff e0                	jmp    eax
c00085e3:	90                   	nop
c00085e4:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c00085e9:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c00085ee:	29 c2                	sub    edx,eax
c00085f0:	89 d0                	mov    eax,edx
c00085f2:	01 c0                	add    eax,eax
c00085f4:	89 c2                	mov    edx,eax
c00085f6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00085fa:	01 d0                	add    eax,edx
c00085fc:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085ff:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008604:	eb 4e                	jmp    c0008654 <ff_wtoupper+0x130>
c0008606:	66 90                	xchg   ax,ax
c0008608:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000860d:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0008611:	83 e0 01             	and    eax,0x1
c0008614:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c0008619:	eb 39                	jmp    c0008654 <ff_wtoupper+0x130>
c000861b:	90                   	nop
c000861c:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c0008622:	eb 30                	jmp    c0008654 <ff_wtoupper+0x130>
c0008624:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c000862a:	eb 28                	jmp    c0008654 <ff_wtoupper+0x130>
c000862c:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c0008632:	eb 20                	jmp    c0008654 <ff_wtoupper+0x130>
c0008634:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c000863a:	eb 18                	jmp    c0008654 <ff_wtoupper+0x130>
c000863c:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c0008642:	eb 10                	jmp    c0008654 <ff_wtoupper+0x130>
c0008644:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c000864a:	eb 08                	jmp    c0008654 <ff_wtoupper+0x130>
c000864c:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c0008653:	90                   	nop
c0008654:	eb 1e                	jmp    c0008674 <ff_wtoupper+0x150>
c0008656:	66 90                	xchg   ax,ax
c0008658:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c000865e:	0f 85 f8 fe ff ff    	jne    c000855c <ff_wtoupper+0x38>
c0008664:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0008669:	01 c0                	add    eax,eax
c000866b:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c000866f:	e9 e8 fe ff ff       	jmp    c000855c <ff_wtoupper+0x38>
c0008674:	90                   	nop
c0008675:	8d 76 00             	lea    esi,[esi+0x0]
c0008678:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c000867d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0008681:	8d 76 00             	lea    esi,[esi+0x0]
c0008684:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008688:	83 c4 10             	add    esp,0x10
c000868b:	c3                   	ret    

c000868c <CPU::current()>:
c000868c:	a1 28 63 02 c0       	mov    eax,ds:0xc0026328
c0008691:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0008697:	c3                   	ret    

c0008698 <operator new(unsigned long)>:
c0008698:	e9 fa 10 00 00       	jmp    c0009797 <malloc>

c000869d <operator delete(void*)>:
c000869d:	e9 15 11 00 00       	jmp    c00097b7 <rfree>

c00086a2 <disableIRQs()>:
c00086a2:	fa                   	cli    
c00086a3:	ff 05 08 98 02 c0    	inc    DWORD PTR ds:0xc0029808
c00086a9:	c3                   	ret    

c00086aa <enableIRQs()>:
c00086aa:	a1 08 98 02 c0       	mov    eax,ds:0xc0029808
c00086af:	48                   	dec    eax
c00086b0:	a3 08 98 02 c0       	mov    ds:0xc0029808,eax
c00086b5:	75 01                	jne    c00086b8 <enableIRQs()+0xe>
c00086b7:	fb                   	sti    
c00086b8:	c3                   	ret    

c00086b9 <lockScheduler()>:
c00086b9:	fa                   	cli    
c00086ba:	ff 05 08 98 02 c0    	inc    DWORD PTR ds:0xc0029808
c00086c0:	c3                   	ret    

c00086c1 <unlockScheduler()>:
c00086c1:	a1 08 98 02 c0       	mov    eax,ds:0xc0029808
c00086c6:	48                   	dec    eax
c00086c7:	a3 08 98 02 c0       	mov    ds:0xc0029808,eax
c00086cc:	75 01                	jne    c00086cf <unlockScheduler()+0xe>
c00086ce:	fb                   	sti    
c00086cf:	c3                   	ret    

c00086d0 <lockStuff()>:
c00086d0:	fa                   	cli    
c00086d1:	ff 05 08 98 02 c0    	inc    DWORD PTR ds:0xc0029808
c00086d7:	ff 05 04 98 02 c0    	inc    DWORD PTR ds:0xc0029804
c00086dd:	c3                   	ret    

c00086de <unlockStuff()>:
c00086de:	83 ec 0c             	sub    esp,0xc
c00086e1:	a1 04 98 02 c0       	mov    eax,ds:0xc0029804
c00086e6:	48                   	dec    eax
c00086e7:	a3 04 98 02 c0       	mov    ds:0xc0029804,eax
c00086ec:	75 18                	jne    c0008706 <unlockStuff()+0x28>
c00086ee:	83 3d 00 98 02 c0 00 	cmp    DWORD PTR ds:0xc0029800,0x0
c00086f5:	74 0f                	je     c0008706 <unlockStuff()+0x28>
c00086f7:	c7 05 00 98 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029800,0x0
c0008701:	e8 da d8 00 00       	call   c0015fe0 <schedule()>
c0008706:	a1 08 98 02 c0       	mov    eax,ds:0xc0029808
c000870b:	48                   	dec    eax
c000870c:	a3 08 98 02 c0       	mov    ds:0xc0029808,eax
c0008711:	75 01                	jne    c0008714 <unlockStuff()+0x36>
c0008713:	fb                   	sti    
c0008714:	83 c4 0c             	add    esp,0xc
c0008717:	c3                   	ret    

c0008718 <Virt::getAKernelVAS()>:
c0008718:	a1 14 64 02 c0       	mov    eax,ds:0xc0026414
c000871d:	c3                   	ret    

c000871e <__not_memcpy>:
c000871e:	57                   	push   edi
c000871f:	56                   	push   esi
c0008720:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008724:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008728:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000872c:	89 c7                	mov    edi,eax
c000872e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008730:	5e                   	pop    esi
c0008731:	5f                   	pop    edi
c0008732:	c3                   	ret    
c0008733:	90                   	nop

c0008734 <Krnl::resolveCompatibilitySymbol(char*)>:
c0008734:	83 ec 0c             	sub    esp,0xc
c0008737:	83 ec 08             	sub    esp,0x8
c000873a:	68 20 28 02 c0       	push   0xc0022820
c000873f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008743:	e8 a8 7e ff ff       	call   c00005f0 <strcmp>
c0008748:	83 c4 10             	add    esp,0x10
c000874b:	85 c0                	test   eax,eax
c000874d:	0f 94 c0             	sete   al
c0008750:	84 c0                	test   al,al
c0008752:	74 0c                	je     c0008760 <Krnl::resolveCompatibilitySymbol(char*)+0x2c>
c0008754:	b8 28 63 02 c0       	mov    eax,0xc0026328
c0008759:	e9 ea 00 00 00       	jmp    c0008848 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c000875e:	66 90                	xchg   ax,ax
c0008760:	83 ec 08             	sub    esp,0x8
c0008763:	68 29 28 02 c0       	push   0xc0022829
c0008768:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000876c:	e8 7f 7e ff ff       	call   c00005f0 <strcmp>
c0008771:	83 c4 10             	add    esp,0x10
c0008774:	85 c0                	test   eax,eax
c0008776:	0f 94 c0             	sete   al
c0008779:	84 c0                	test   al,al
c000877b:	74 0b                	je     c0008788 <Krnl::resolveCompatibilitySymbol(char*)+0x54>
c000877d:	b8 a0 14 02 c0       	mov    eax,0xc00214a0
c0008782:	e9 c1 00 00 00       	jmp    c0008848 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0008787:	90                   	nop
c0008788:	83 ec 08             	sub    esp,0x8
c000878b:	68 33 28 02 c0       	push   0xc0022833
c0008790:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008794:	e8 57 7e ff ff       	call   c00005f0 <strcmp>
c0008799:	83 c4 10             	add    esp,0x10
c000879c:	85 c0                	test   eax,eax
c000879e:	0f 94 c0             	sete   al
c00087a1:	84 c0                	test   al,al
c00087a3:	74 0b                	je     c00087b0 <Krnl::resolveCompatibilitySymbol(char*)+0x7c>
c00087a5:	b8 d4 11 02 c0       	mov    eax,0xc00211d4
c00087aa:	e9 99 00 00 00       	jmp    c0008848 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c00087af:	90                   	nop
c00087b0:	83 ec 08             	sub    esp,0x8
c00087b3:	68 3c 28 02 c0       	push   0xc002283c
c00087b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00087bc:	e8 2f 7e ff ff       	call   c00005f0 <strcmp>
c00087c1:	83 c4 10             	add    esp,0x10
c00087c4:	85 c0                	test   eax,eax
c00087c6:	0f 94 c0             	sete   al
c00087c9:	84 c0                	test   al,al
c00087cb:	74 07                	je     c00087d4 <Krnl::resolveCompatibilitySymbol(char*)+0xa0>
c00087cd:	b8 a0 15 02 c0       	mov    eax,0xc00215a0
c00087d2:	eb 74                	jmp    c0008848 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c00087d4:	83 ec 08             	sub    esp,0x8
c00087d7:	68 46 28 02 c0       	push   0xc0022846
c00087dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00087e0:	e8 0b 7e ff ff       	call   c00005f0 <strcmp>
c00087e5:	83 c4 10             	add    esp,0x10
c00087e8:	85 c0                	test   eax,eax
c00087ea:	0f 94 c0             	sete   al
c00087ed:	84 c0                	test   al,al
c00087ef:	74 07                	je     c00087f8 <Krnl::resolveCompatibilitySymbol(char*)+0xc4>
c00087f1:	b8 20 13 02 c0       	mov    eax,0xc0021320
c00087f6:	eb 50                	jmp    c0008848 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c00087f8:	83 ec 08             	sub    esp,0x8
c00087fb:	68 4f 28 02 c0       	push   0xc002284f
c0008800:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008804:	e8 e7 7d ff ff       	call   c00005f0 <strcmp>
c0008809:	83 c4 10             	add    esp,0x10
c000880c:	85 c0                	test   eax,eax
c000880e:	0f 94 c0             	sete   al
c0008811:	84 c0                	test   al,al
c0008813:	74 07                	je     c000881c <Krnl::resolveCompatibilitySymbol(char*)+0xe8>
c0008815:	b8 2c 63 02 c0       	mov    eax,0xc002632c
c000881a:	eb 2c                	jmp    c0008848 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c000881c:	83 ec 08             	sub    esp,0x8
c000881f:	68 5c 28 02 c0       	push   0xc002285c
c0008824:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008828:	e8 c3 7d ff ff       	call   c00005f0 <strcmp>
c000882d:	83 c4 10             	add    esp,0x10
c0008830:	85 c0                	test   eax,eax
c0008832:	0f 94 c0             	sete   al
c0008835:	84 c0                	test   al,al
c0008837:	74 07                	je     c0008840 <Krnl::resolveCompatibilitySymbol(char*)+0x10c>
c0008839:	b8 2d 63 02 c0       	mov    eax,0xc002632d
c000883e:	eb 08                	jmp    c0008848 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0008840:	b8 00 00 00 00       	mov    eax,0x0
c0008845:	8d 76 00             	lea    esi,[esi+0x0]
c0008848:	83 c4 0c             	add    esp,0xc
c000884b:	c3                   	ret    

c000884c <Computer::close(int, int, void*)>:
c000884c:	57                   	push   edi
c000884d:	56                   	push   esi
c000884e:	53                   	push   ebx
c000884f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008853:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008857:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000885b:	83 ec 0c             	sub    esp,0xc
c000885e:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c0008864:	e8 cf 54 00 00       	call   c000dd38 <Device::closeAll()>
c0008869:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000886f:	83 c4 10             	add    esp,0x10
c0008872:	8b 10                	mov    edx,DWORD PTR [eax]
c0008874:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c0008878:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c0008880:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0008884:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008888:	5b                   	pop    ebx
c0008889:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000888c:	5e                   	pop    esi
c000888d:	5f                   	pop    edi
c000888e:	ff e0                	jmp    eax

c0008890 <Krnl::firstTask()>:
c0008890:	53                   	push   ebx
c0008891:	83 ec 14             	sub    esp,0x14
c0008894:	68 69 28 02 c0       	push   0xc0022869
c0008899:	e8 53 0f 00 00       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c000889e:	fb                   	sti    
c000889f:	c7 04 24 80 28 02 c0 	mov    DWORD PTR [esp],0xc0022880
c00088a6:	e8 46 0f 00 00       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c00088ab:	c7 04 24 1f 07 00 00 	mov    DWORD PTR [esp],0x71f
c00088b2:	e8 e0 0e 00 00       	call   c0009797 <malloc>
c00088b7:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00088be:	89 c3                	mov    ebx,eax
c00088c0:	ff 35 30 98 02 c0    	push   DWORD PTR ds:0xc0029830
c00088c6:	68 99 28 02 c0       	push   0xc0022899
c00088cb:	6a 01                	push   0x1
c00088cd:	50                   	push   eax
c00088ce:	e8 e9 d2 00 00       	call   c0015bbc <Process::Process(bool, char const*, Process*, char**)>
c00088d3:	83 c4 20             	add    esp,0x20
c00088d6:	68 ff 00 00 00       	push   0xff
c00088db:	6a 00                	push   0x0
c00088dd:	68 e1 91 00 c0       	push   0xc00091e1
c00088e2:	53                   	push   ebx
c00088e3:	e8 dc d4 00 00       	call   c0015dc4 <Process::createThread(void (*)(void*), void*, int)>
c00088e8:	6a 7a                	push   0x7a
c00088ea:	6a 00                	push   0x0
c00088ec:	68 08 68 01 c0       	push   0xc0016808
c00088f1:	ff 35 30 98 02 c0    	push   DWORD PTR ds:0xc0029830
c00088f7:	e8 c8 d4 00 00       	call   c0015dc4 <Process::createThread(void (*)(void*), void*, int)>
c00088fc:	83 c4 14             	add    esp,0x14
c00088ff:	a3 e8 97 02 c0       	mov    ds:0xc00297e8,eax
c0008904:	68 98 29 02 c0       	push   0xc0022998
c0008909:	c6 05 2d 63 02 c0 01 	mov    BYTE PTR ds:0xc002632d,0x1
c0008910:	e8 dc 0e 00 00       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c0008915:	e8 c9 e2 00 00       	call   c0016be3 <Vm::initialise8086()>
c000891a:	e8 a9 41 00 00       	call   c000cac8 <Fs::initVFS()>
c000891f:	c7 04 24 a6 28 02 c0 	mov    DWORD PTR [esp],0xc00228a6
c0008926:	e8 c6 0e 00 00       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c000892b:	a1 28 63 02 c0       	mov    eax,ds:0xc0026328
c0008930:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0008936:	8b 10                	mov    edx,DWORD PTR [eax]
c0008938:	6a 00                	push   0x0
c000893a:	6a 00                	push   0x0
c000893c:	6a 00                	push   0x0
c000893e:	50                   	push   eax
c000893f:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0008942:	83 c4 14             	add    esp,0x14
c0008945:	68 98 29 02 c0       	push   0xc0022998
c000894a:	e8 a2 0e 00 00       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c000894f:	e8 e8 ba 00 00       	call   c001443c <Sys::loadSyscalls()>
c0008954:	e8 39 a0 00 00       	call   c0012992 <Krnl::loadSystemEnv()>
c0008959:	e8 8b a4 00 00       	call   c0012de9 <Krnl::setupPowerManager()>
c000895e:	83 c4 0c             	add    esp,0xc
c0008961:	6a 3a                	push   0x3a
c0008963:	68 c0 28 02 c0       	push   0xc00228c0
c0008968:	68 c9 28 02 c0       	push   0xc00228c9
c000896d:	e8 a1 a9 00 00       	call   c0013313 <Reg::readIntWithDefault(char*, char*, int)>
c0008972:	89 04 24             	mov    DWORD PTR [esp],eax
c0008975:	e8 aa 4c 00 00       	call   c000d624 <User::loadClockSettings(int)>
c000897a:	c7 04 24 bc 29 02 c0 	mov    DWORD PTR [esp],0xc00229bc
c0008981:	e8 6b 0e 00 00       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c0008986:	58                   	pop    eax
c0008987:	a1 28 63 02 c0       	mov    eax,ds:0xc0026328
c000898c:	ff b0 e4 01 00 00    	push   DWORD PTR [eax+0x1e4]
c0008992:	e8 61 53 00 00       	call   c000dcf8 <Device::loadDriversForAll()>
c0008997:	c7 04 24 d1 28 02 c0 	mov    DWORD PTR [esp],0xc00228d1
c000899e:	e8 4e 0e 00 00       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c00089a3:	e8 52 9b 00 00       	call   c00124fa <Krnl::startCPUs()>
c00089a8:	c7 04 24 eb 28 02 c0 	mov    DWORD PTR [esp],0xc00228eb
c00089af:	e8 3d 0e 00 00       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c00089b4:	5a                   	pop    edx
c00089b5:	8b 1d 28 63 02 c0    	mov    ebx,DWORD PTR ds:0xc0026328
c00089bb:	59                   	pop    ecx
c00089bc:	6a 01                	push   0x1
c00089be:	68 fc 28 02 c0       	push   0xc00228fc
c00089c3:	e8 3a cc 00 00       	call   c0015602 <Thr::loadDLL(char const*, bool)>
c00089c8:	5a                   	pop    edx
c00089c9:	59                   	pop    ecx
c00089ca:	53                   	push   ebx
c00089cb:	50                   	push   eax
c00089cc:	e8 62 ce 00 00       	call   c0015833 <Thr::executeDLL(unsigned long, void*)>
c00089d1:	83 c4 10             	add    esp,0x10
c00089d4:	83 ec 0c             	sub    esp,0xc
c00089d7:	6a 02                	push   0x2
c00089d9:	e8 fa d7 00 00       	call   c00161d8 <blockTask(TaskState)>
c00089de:	83 c4 10             	add    esp,0x10
c00089e1:	eb f1                	jmp    c00089d4 <Krnl::firstTask()+0x144>
c00089e3:	90                   	nop

c00089e4 <Computer::Computer()>:
c00089e4:	83 ec 0c             	sub    esp,0xc
c00089e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00089eb:	83 ec 08             	sub    esp,0x8
c00089ee:	68 18 29 02 c0       	push   0xc0022918
c00089f3:	50                   	push   eax
c00089f4:	e8 b9 53 00 00       	call   c000ddb2 <Device::Device(char const*)>
c00089f9:	83 c4 10             	add    esp,0x10
c00089fc:	ba 2c 2a 02 c0       	mov    edx,0xc0022a2c
c0008a01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a05:	89 10                	mov    DWORD PTR [eax],edx
c0008a07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a0b:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0008a15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a19:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c0008a23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a27:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0008a2d:	83 ca 04             	or     edx,0x4
c0008a30:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0008a36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a3a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008a40:	0f b6 d0             	movzx  edx,al
c0008a43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a47:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c0008a4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a52:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008a58:	0f b6 d0             	movzx  edx,al
c0008a5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a5f:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0008a64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a68:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008a6e:	8d 50 01             	lea    edx,[eax+0x1]
c0008a71:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008a75:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0008a7b:	0f b6 d0             	movzx  edx,al
c0008a7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a82:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0008a86:	83 e1 3f             	and    ecx,0x3f
c0008a89:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0008a8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a91:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008a97:	0f b6 d0             	movzx  edx,al
c0008a9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a9e:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c0008aa5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008aa9:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008aaf:	0f b6 d0             	movzx  edx,al
c0008ab2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ab6:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c0008abb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008abf:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008ac5:	8d 50 01             	lea    edx,[eax+0x1]
c0008ac8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008acc:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0008ad2:	0f b6 d0             	movzx  edx,al
c0008ad5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ad9:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0008add:	83 e1 3f             	and    ecx,0x3f
c0008ae0:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0008ae4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ae8:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008aee:	0f b6 d0             	movzx  edx,al
c0008af1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008af5:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c0008afc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008b00:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008b06:	0f b6 d0             	movzx  edx,al
c0008b09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008b0d:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c0008b12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008b16:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008b1c:	8d 50 01             	lea    edx,[eax+0x1]
c0008b1f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008b23:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0008b29:	0f b6 d0             	movzx  edx,al
c0008b2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008b30:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0008b34:	83 e1 3f             	and    ecx,0x3f
c0008b37:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0008b3b:	90                   	nop
c0008b3c:	83 c4 0c             	add    esp,0xc
c0008b3f:	c3                   	ret    

c0008b40 <Computer::setBootMessage(char const*)>:
c0008b40:	c3                   	ret    
c0008b41:	90                   	nop

c0008b42 <Computer::detectFeatures()>:
c0008b42:	55                   	push   ebp
c0008b43:	57                   	push   edi
c0008b44:	56                   	push   esi
c0008b45:	53                   	push   ebx
c0008b46:	83 ec 1c             	sub    esp,0x1c
c0008b49:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0008b4d:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c0008b57:	e8 bd 76 ff ff       	call   c0000219 <detectCPUID>
c0008b5c:	85 c0                	test   eax,eax
c0008b5e:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008b64:	0f 95 c2             	setne  dl
c0008b67:	83 e0 fd             	and    eax,0xfffffffd
c0008b6a:	d1 e2                	shl    edx,1
c0008b6c:	09 d0                	or     eax,edx
c0008b6e:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008b74:	a8 02                	test   al,0x2
c0008b76:	75 46                	jne    c0008bbe <Computer::detectFeatures()+0x7c>
c0008b78:	f6 05 41 63 02 c0 04 	test   BYTE PTR ds:0xc0026341,0x4
c0008b7f:	74 07                	je     c0008b88 <Computer::detectFeatures()+0x46>
c0008b81:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c0008b88:	e8 d9 85 01 00       	call   c0021166 <x87Detect>
c0008b8d:	83 e0 01             	and    eax,0x1
c0008b90:	c1 e0 04             	shl    eax,0x4
c0008b93:	88 c2                	mov    dl,al
c0008b95:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008b9b:	83 e0 ef             	and    eax,0xffffffef
c0008b9e:	09 d0                	or     eax,edx
c0008ba0:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008ba6:	a8 10                	test   al,0x10
c0008ba8:	0f 85 2a 01 00 00    	jne    c0008cd8 <Computer::detectFeatures()+0x196>
c0008bae:	84 c0                	test   al,al
c0008bb0:	0f 88 45 01 00 00    	js     c0008cfb <Computer::detectFeatures()+0x1b9>
c0008bb6:	83 c4 1c             	add    esp,0x1c
c0008bb9:	5b                   	pop    ebx
c0008bba:	5e                   	pop    esi
c0008bbb:	5f                   	pop    edi
c0008bbc:	5d                   	pop    ebp
c0008bbd:	c3                   	ret    
c0008bbe:	83 ec 0c             	sub    esp,0xc
c0008bc1:	6a 20                	push   0x20
c0008bc3:	e8 4c 8b 00 00       	call   c0011714 <CPU::cpuidCheckEDX(unsigned int)>
c0008bc8:	83 e0 01             	and    eax,0x1
c0008bcb:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0008bd2:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008bd8:	83 e0 f7             	and    eax,0xfffffff7
c0008bdb:	09 d0                	or     eax,edx
c0008bdd:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008be3:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c0008bea:	e8 25 8b 00 00       	call   c0011714 <CPU::cpuidCheckEDX(unsigned int)>
c0008bef:	83 e0 01             	and    eax,0x1
c0008bf2:	88 c2                	mov    dl,al
c0008bf4:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c0008bfa:	83 e0 fe             	and    eax,0xfffffffe
c0008bfd:	09 d0                	or     eax,edx
c0008bff:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c0008c05:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0008c0c:	e8 03 8b 00 00       	call   c0011714 <CPU::cpuidCheckEDX(unsigned int)>
c0008c11:	c1 e0 07             	shl    eax,0x7
c0008c14:	88 c2                	mov    dl,al
c0008c16:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c0008c1c:	83 e0 7f             	and    eax,0x7f
c0008c1f:	09 d0                	or     eax,edx
c0008c21:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c0008c27:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c0008c2e:	e8 e1 8a 00 00       	call   c0011714 <CPU::cpuidCheckEDX(unsigned int)>
c0008c33:	83 c4 10             	add    esp,0x10
c0008c36:	83 e0 01             	and    eax,0x1
c0008c39:	c1 e0 05             	shl    eax,0x5
c0008c3c:	88 c2                	mov    dl,al
c0008c3e:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008c44:	83 e0 df             	and    eax,0xffffffdf
c0008c47:	09 d0                	or     eax,edx
c0008c49:	f7 05 40 63 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc0026340,0x401
c0008c53:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008c59:	0f 84 c2 00 00 00    	je     c0008d21 <Computer::detectFeatures()+0x1df>
c0008c5f:	83 e0 fe             	and    eax,0xfffffffe
c0008c62:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008c68:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008c6e:	88 c2                	mov    dl,al
c0008c70:	83 e2 09             	and    edx,0x9
c0008c73:	fe ca                	dec    dl
c0008c75:	75 09                	jne    c0008c80 <Computer::detectFeatures()+0x13e>
c0008c77:	83 e0 fe             	and    eax,0xfffffffe
c0008c7a:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008c80:	83 ec 0c             	sub    esp,0xc
c0008c83:	8d 44 24 18          	lea    eax,[esp+0x18]
c0008c87:	50                   	push   eax
c0008c88:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c0008c8c:	55                   	push   ebp
c0008c8d:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0008c91:	57                   	push   edi
c0008c92:	8d 74 24 18          	lea    esi,[esp+0x18]
c0008c96:	56                   	push   esi
c0008c97:	68 00 00 00 80       	push   0x80000000
c0008c9c:	e8 ef 89 00 00       	call   c0011690 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0008ca1:	83 c4 20             	add    esp,0x20
c0008ca4:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c0008cab:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0008caf:	0f 86 c3 fe ff ff    	jbe    c0008b78 <Computer::detectFeatures()+0x36>
c0008cb5:	83 ec 0c             	sub    esp,0xc
c0008cb8:	50                   	push   eax
c0008cb9:	55                   	push   ebp
c0008cba:	57                   	push   edi
c0008cbb:	56                   	push   esi
c0008cbc:	68 01 00 00 80       	push   0x80000001
c0008cc1:	e8 ca 89 00 00       	call   c0011690 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0008cc6:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c0008cd0:	83 c4 20             	add    esp,0x20
c0008cd3:	e9 a0 fe ff ff       	jmp    c0008b78 <Computer::detectFeatures()+0x36>
c0008cd8:	e8 43 84 01 00       	call   c0021120 <absolutelyNoChanceInHell>
c0008cdd:	88 c2                	mov    dl,al
c0008cdf:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008ce5:	c1 e2 07             	shl    edx,0x7
c0008ce8:	83 e0 7f             	and    eax,0x7f
c0008ceb:	09 d0                	or     eax,edx
c0008ced:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008cf3:	84 c0                	test   al,al
c0008cf5:	0f 89 bb fe ff ff    	jns    c0008bb6 <Computer::detectFeatures()+0x74>
c0008cfb:	e8 a0 81 01 00       	call   c0020ea0 <avxDetect>
c0008d00:	83 e0 01             	and    eax,0x1
c0008d03:	c1 e0 05             	shl    eax,0x5
c0008d06:	88 c2                	mov    dl,al
c0008d08:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c0008d0e:	83 e0 df             	and    eax,0xffffffdf
c0008d11:	09 d0                	or     eax,edx
c0008d13:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c0008d19:	83 c4 1c             	add    esp,0x1c
c0008d1c:	5b                   	pop    ebx
c0008d1d:	5e                   	pop    esi
c0008d1e:	5f                   	pop    edi
c0008d1f:	5d                   	pop    ebp
c0008d20:	c3                   	ret    
c0008d21:	83 ec 0c             	sub    esp,0xc
c0008d24:	68 00 02 00 00       	push   0x200
c0008d29:	e8 e6 89 00 00       	call   c0011714 <CPU::cpuidCheckEDX(unsigned int)>
c0008d2e:	83 c4 10             	add    esp,0x10
c0008d31:	83 e0 01             	and    eax,0x1
c0008d34:	88 c2                	mov    dl,al
c0008d36:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008d3c:	83 e0 fe             	and    eax,0xfffffffe
c0008d3f:	09 d0                	or     eax,edx
c0008d41:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008d47:	e9 1c ff ff ff       	jmp    c0008c68 <Computer::detectFeatures()+0x126>

c0008d4c <Computer::displayFeatures()>:
c0008d4c:	c3                   	ret    
c0008d4d:	90                   	nop

c0008d4e <Computer::rdmsr(unsigned int)>:
c0008d4e:	83 ec 0c             	sub    esp,0xc
c0008d51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d55:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0008d5c:	74 0a                	je     c0008d68 <Computer::rdmsr(unsigned int)+0x1a>
c0008d5e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008d62:	0f 32                	rdmsr  
c0008d64:	83 c4 0c             	add    esp,0xc
c0008d67:	c3                   	ret    
c0008d68:	83 ec 0c             	sub    esp,0xc
c0008d6b:	68 21 29 02 c0       	push   0xc0022921
c0008d70:	e8 26 9d 00 00       	call   c0012a9b <Krnl::panic(char const*)>
c0008d75:	83 c4 10             	add    esp,0x10
c0008d78:	eb e4                	jmp    c0008d5e <Computer::rdmsr(unsigned int)+0x10>

c0008d7a <Computer::wrmsr(unsigned int, unsigned long long)>:
c0008d7a:	57                   	push   edi
c0008d7b:	56                   	push   esi
c0008d7c:	52                   	push   edx
c0008d7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d81:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008d85:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008d89:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0008d90:	74 0e                	je     c0008da0 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c0008d92:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008d96:	89 f0                	mov    eax,esi
c0008d98:	89 fa                	mov    edx,edi
c0008d9a:	0f 30                	wrmsr  
c0008d9c:	58                   	pop    eax
c0008d9d:	5e                   	pop    esi
c0008d9e:	5f                   	pop    edi
c0008d9f:	c3                   	ret    
c0008da0:	83 ec 0c             	sub    esp,0xc
c0008da3:	68 27 29 02 c0       	push   0xc0022927
c0008da8:	e8 ee 9c 00 00       	call   c0012a9b <Krnl::panic(char const*)>
c0008dad:	83 c4 10             	add    esp,0x10
c0008db0:	eb e0                	jmp    c0008d92 <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c0008db2 <Computer::shutdown()>:
c0008db2:	83 ec 0c             	sub    esp,0xc
c0008db5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008db9:	8b 10                	mov    edx,DWORD PTR [eax]
c0008dbb:	6a 00                	push   0x0
c0008dbd:	6a 00                	push   0x0
c0008dbf:	6a 00                	push   0x0
c0008dc1:	50                   	push   eax
c0008dc2:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0008dc5:	83 c4 1c             	add    esp,0x1c
c0008dc8:	c3                   	ret    
c0008dc9:	90                   	nop

c0008dca <Computer::restart()>:
c0008dca:	83 ec 0c             	sub    esp,0xc
c0008dcd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008dd1:	8b 10                	mov    edx,DWORD PTR [eax]
c0008dd3:	6a 00                	push   0x0
c0008dd5:	6a 00                	push   0x0
c0008dd7:	6a 01                	push   0x1
c0008dd9:	50                   	push   eax
c0008dda:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0008ddd:	83 c4 1c             	add    esp,0x1c
c0008de0:	c3                   	ret    
c0008de1:	90                   	nop

c0008de2 <Computer::sleep()>:
c0008de2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008de6:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0008dec:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008df0:	e9 77 83 00 00       	jmp    c001116c <ACPI::sleep()>
c0008df5:	90                   	nop

c0008df6 <Computer::nmiEnabled()>:
c0008df6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008dfa:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c0008e00:	c3                   	ret    
c0008e01:	90                   	nop

c0008e02 <Computer::readCMOS(unsigned char)>:
c0008e02:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008e06:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c0008e0d:	19 c0                	sbb    eax,eax
c0008e0f:	83 e0 80             	and    eax,0xffffff80
c0008e12:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0008e16:	e6 70                	out    0x70,al
c0008e18:	e4 71                	in     al,0x71
c0008e1a:	c3                   	ret    
c0008e1b:	90                   	nop

c0008e1c <Computer::enableNMI(bool)>:
c0008e1c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008e20:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008e24:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c0008e2a:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c0008e32:	eb ce                	jmp    c0008e02 <Computer::readCMOS(unsigned char)>

c0008e34 <Computer::open(int, int, void*)>:
c0008e34:	56                   	push   esi
c0008e35:	53                   	push   ebx
c0008e36:	83 ec 10             	sub    esp,0x10
c0008e39:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008e3d:	68 dc 29 02 c0       	push   0xc00229dc
c0008e42:	e8 aa 09 00 00       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c0008e47:	f6 05 40 63 02 c0 04 	test   BYTE PTR ds:0xc0026340,0x4
c0008e4e:	c7 04 24 2d 29 02 c0 	mov    DWORD PTR [esp],0xc002292d
c0008e55:	0f 94 05 c0 59 02 c0 	sete   BYTE PTR ds:0xc00259c0
c0008e5c:	e8 90 09 00 00       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c0008e61:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c0008e68:	e8 2a 09 00 00       	call   c0009797 <malloc>
c0008e6d:	89 04 24             	mov    DWORD PTR [esp],eax
c0008e70:	89 c6                	mov    esi,eax
c0008e72:	e8 ad 7b 00 00       	call   c0010a24 <ACPI::ACPI()>
c0008e77:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c0008e7d:	58                   	pop    eax
c0008e7e:	5a                   	pop    edx
c0008e7f:	56                   	push   esi
c0008e80:	53                   	push   ebx
c0008e81:	e8 28 4d 00 00       	call   c000dbae <Device::addChild(Device*)>
c0008e86:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008e89:	e8 b4 fc ff ff       	call   c0008b42 <Computer::detectFeatures()>
c0008e8e:	59                   	pop    ecx
c0008e8f:	5e                   	pop    esi
c0008e90:	6a 01                	push   0x1
c0008e92:	53                   	push   ebx
c0008e93:	e8 84 ff ff ff       	call   c0008e1c <Computer::enableNMI(bool)>
c0008e98:	c7 04 24 d1 28 02 c0 	mov    DWORD PTR [esp],0xc00228d1
c0008e9f:	e8 4d 09 00 00       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c0008ea4:	c7 04 24 94 11 00 00 	mov    DWORD PTR [esp],0x1194
c0008eab:	e8 e7 08 00 00       	call   c0009797 <malloc>
c0008eb0:	89 04 24             	mov    DWORD PTR [esp],eax
c0008eb3:	89 c6                	mov    esi,eax
c0008eb5:	e8 12 89 00 00       	call   c00117cc <CPU::CPU()>
c0008eba:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c0008ec0:	58                   	pop    eax
c0008ec1:	5a                   	pop    edx
c0008ec2:	56                   	push   esi
c0008ec3:	53                   	push   ebx
c0008ec4:	e8 e5 4c 00 00       	call   c000dbae <Device::addChild(Device*)>
c0008ec9:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0008ecf:	8b 10                	mov    edx,DWORD PTR [eax]
c0008ed1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0008ed5:	6a 00                	push   0x0
c0008ed7:	6a 00                	push   0x0
c0008ed9:	50                   	push   eax
c0008eda:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0008edd:	83 c4 14             	add    esp,0x14
c0008ee0:	68 00 2a 02 c0       	push   0xc0022a00
c0008ee5:	e8 07 09 00 00       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c0008eea:	e8 7f 04 01 00       	call   c001936e <Hal::initialiseCoprocessor()>
c0008eef:	c7 04 24 45 29 02 c0 	mov    DWORD PTR [esp],0xc0022945
c0008ef6:	e8 f6 08 00 00       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c0008efb:	c7 04 24 90 88 00 c0 	mov    DWORD PTR [esp],0xc0008890
c0008f02:	e8 d1 cf 00 00       	call   c0015ed8 <setupMultitasking(void (*)())>
c0008f07:	83 c4 14             	add    esp,0x14
c0008f0a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0008f0f:	5b                   	pop    ebx
c0008f10:	5e                   	pop    esi
c0008f11:	c3                   	ret    

c0008f12 <Computer::disableNMI()>:
c0008f12:	6a 00                	push   0x0
c0008f14:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0008f18:	e8 ff fe ff ff       	call   c0008e1c <Computer::enableNMI(bool)>
c0008f1d:	58                   	pop    eax
c0008f1e:	5a                   	pop    edx
c0008f1f:	c3                   	ret    

c0008f20 <Computer::writeCMOS(unsigned char, unsigned char)>:
c0008f20:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008f24:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c0008f2b:	19 c0                	sbb    eax,eax
c0008f2d:	83 e0 80             	and    eax,0xffffff80
c0008f30:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0008f34:	e6 70                	out    0x70,al
c0008f36:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008f3a:	e6 71                	out    0x71,al
c0008f3c:	c3                   	ret    
c0008f3d:	90                   	nop

c0008f3e <Computer::handleNMI()>:
c0008f3e:	56                   	push   esi
c0008f3f:	53                   	push   ebx
c0008f40:	83 ec 10             	sub    esp,0x10
c0008f43:	e4 92                	in     al,0x92
c0008f45:	89 c6                	mov    esi,eax
c0008f47:	e4 61                	in     al,0x61
c0008f49:	68 60 29 02 c0       	push   0xc0022960
c0008f4e:	88 c3                	mov    bl,al
c0008f50:	e8 dc 37 00 00       	call   c000c731 <Dbg::kprintf(char const*, ...)>
c0008f55:	83 c4 10             	add    esp,0x10
c0008f58:	83 e6 10             	and    esi,0x10
c0008f5b:	75 0d                	jne    c0008f6a <Computer::handleNMI()+0x2c>
c0008f5d:	f6 c3 40             	test   bl,0x40
c0008f60:	75 1d                	jne    c0008f7f <Computer::handleNMI()+0x41>
c0008f62:	84 db                	test   bl,bl
c0008f64:	78 2d                	js     c0008f93 <Computer::handleNMI()+0x55>
c0008f66:	58                   	pop    eax
c0008f67:	5b                   	pop    ebx
c0008f68:	5e                   	pop    esi
c0008f69:	c3                   	ret    
c0008f6a:	83 ec 0c             	sub    esp,0xc
c0008f6d:	68 71 29 02 c0       	push   0xc0022971
c0008f72:	e8 24 9b 00 00       	call   c0012a9b <Krnl::panic(char const*)>
c0008f77:	83 c4 10             	add    esp,0x10
c0008f7a:	f6 c3 40             	test   bl,0x40
c0008f7d:	74 e3                	je     c0008f62 <Computer::handleNMI()+0x24>
c0008f7f:	83 ec 0c             	sub    esp,0xc
c0008f82:	68 7e 29 02 c0       	push   0xc002297e
c0008f87:	e8 0f 9b 00 00       	call   c0012a9b <Krnl::panic(char const*)>
c0008f8c:	83 c4 10             	add    esp,0x10
c0008f8f:	84 db                	test   bl,bl
c0008f91:	79 d3                	jns    c0008f66 <Computer::handleNMI()+0x28>
c0008f93:	c7 44 24 10 88 29 02 c0 	mov    DWORD PTR [esp+0x10],0xc0022988
c0008f9b:	5a                   	pop    edx
c0008f9c:	5b                   	pop    ebx
c0008f9d:	5e                   	pop    esi
c0008f9e:	e9 f8 9a 00 00       	jmp    c0012a9b <Krnl::panic(char const*)>
c0008fa3:	90                   	nop

c0008fa4 <Computer::setDiskActivityLight(int, bool)>:
c0008fa4:	56                   	push   esi
c0008fa5:	53                   	push   ebx
c0008fa6:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008faa:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0008faf:	77 1b                	ja     c0008fcc <Computer::setDiskActivityLight(int, bool)+0x28>
c0008fb1:	e4 92                	in     al,0x92
c0008fb3:	bb 40 00 00 00       	mov    ebx,0x40
c0008fb8:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0008fbc:	89 da                	mov    edx,ebx
c0008fbe:	d3 e2                	shl    edx,cl
c0008fc0:	89 f1                	mov    ecx,esi
c0008fc2:	f7 d2                	not    edx
c0008fc4:	d3 e3                	shl    ebx,cl
c0008fc6:	21 d0                	and    eax,edx
c0008fc8:	09 d8                	or     eax,ebx
c0008fca:	e6 92                	out    0x92,al
c0008fcc:	5b                   	pop    ebx
c0008fcd:	5e                   	pop    esi
c0008fce:	c3                   	ret    
c0008fcf:	90                   	nop

c0008fd0 <GDTEntry::setBase(unsigned int)>:
c0008fd0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008fd4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008fd8:	89 c1                	mov    ecx,eax
c0008fda:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0008fde:	c1 e9 10             	shr    ecx,0x10
c0008fe1:	c1 e8 18             	shr    eax,0x18
c0008fe4:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c0008fe7:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c0008fea:	c3                   	ret    
c0008feb:	90                   	nop

c0008fec <GDTEntry::setLimit(unsigned int)>:
c0008fec:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0008ff0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008ff4:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c0008ff7:	66 89 01             	mov    WORD PTR [ecx],ax
c0008ffa:	83 e2 f0             	and    edx,0xfffffff0
c0008ffd:	c1 e8 10             	shr    eax,0x10
c0009000:	83 e0 0f             	and    eax,0xf
c0009003:	09 d0                	or     eax,edx
c0009005:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c0009008:	c3                   	ret    
c0009009:	90                   	nop

c000900a <GDT::GDT()>:
c000900a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000900e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0009014:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009018:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000901e:	90                   	nop
c000901f:	c3                   	ret    

c0009020 <GDT::addEntry(GDTEntry)>:
c0009020:	53                   	push   ebx
c0009021:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009025:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0009029:	8b 02                	mov    eax,DWORD PTR [edx]
c000902b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000902f:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c0009033:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c0009037:	8d 48 01             	lea    ecx,[eax+0x1]
c000903a:	c1 e0 03             	shl    eax,0x3
c000903d:	89 0a                	mov    DWORD PTR [edx],ecx
c000903f:	5b                   	pop    ebx
c0009040:	c3                   	ret    
c0009041:	90                   	nop

c0009042 <GDT::getNumberOfEntries()>:
c0009042:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009046:	8b 00                	mov    eax,DWORD PTR [eax]
c0009048:	c3                   	ret    
c0009049:	90                   	nop

c000904a <GDT::flush()>:
c000904a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000904e:	8b 10                	mov    edx,DWORD PTR [eax]
c0009050:	83 c0 04             	add    eax,0x4
c0009053:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000905a:	a3 32 63 02 c0       	mov    ds:0xc0026332,eax
c000905f:	66 89 15 30 63 02 c0 	mov    WORD PTR ds:0xc0026330,dx
c0009066:	e9 12 73 ff ff       	jmp    c000037d <loadGDT>
c000906b:	90                   	nop

c000906c <GDT::setup()>:
c000906c:	57                   	push   edi
c000906d:	56                   	push   esi
c000906e:	53                   	push   ebx
c000906f:	83 ec 40             	sub    esp,0x40
c0009072:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0009076:	6a 00                	push   0x0
c0009078:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c000907c:	56                   	push   esi
c000907d:	e8 4e ff ff ff       	call   c0008fd0 <GDTEntry::setBase(unsigned int)>
c0009082:	6a 00                	push   0x0
c0009084:	56                   	push   esi
c0009085:	e8 62 ff ff ff       	call   c0008fec <GDTEntry::setLimit(unsigned int)>
c000908a:	81 64 24 3c ff 00 0f ff 	and    DWORD PTR [esp+0x3c],0xff0f00ff
c0009092:	6a 00                	push   0x0
c0009094:	8d 74 24 44          	lea    esi,[esp+0x44]
c0009098:	56                   	push   esi
c0009099:	e8 32 ff ff ff       	call   c0008fd0 <GDTEntry::setBase(unsigned int)>
c000909e:	68 ff ff ff 00       	push   0xffffff
c00090a3:	56                   	push   esi
c00090a4:	e8 43 ff ff ff       	call   c0008fec <GDTEntry::setLimit(unsigned int)>
c00090a9:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00090ad:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c00090b2:	0d 00 9a c0 00       	or     eax,0xc09a00
c00090b7:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00090bb:	83 c4 20             	add    esp,0x20
c00090be:	6a 00                	push   0x0
c00090c0:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c00090c4:	56                   	push   esi
c00090c5:	e8 06 ff ff ff       	call   c0008fd0 <GDTEntry::setBase(unsigned int)>
c00090ca:	68 ff ff ff 00       	push   0xffffff
c00090cf:	56                   	push   esi
c00090d0:	e8 17 ff ff ff       	call   c0008fec <GDTEntry::setLimit(unsigned int)>
c00090d5:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00090d9:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00090dd:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00090e1:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00090e5:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00090e9:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c00090ee:	0d 00 92 c0 00       	or     eax,0xc09200
c00090f3:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00090f7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00090fb:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c00090ff:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009103:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009107:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000910b:	89 fa                	mov    edx,edi
c000910d:	80 cc 60             	or     ah,0x60
c0009110:	81 e2 00 00 3f 00    	and    edx,0x3f0000
c0009116:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000911a:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000911e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009122:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0009126:	80 cc 60             	or     ah,0x60
c0009129:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000912d:	89 f8                	mov    eax,edi
c000912f:	25 ff ff 00 ff       	and    eax,0xff00ffff
c0009134:	09 d0                	or     eax,edx
c0009136:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c000913a:	89 c7                	mov    edi,eax
c000913c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009140:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0009144:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009148:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000914c:	81 e2 00 00 3f 00    	and    edx,0x3f0000
c0009152:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009156:	25 ff ff 00 ff       	and    eax,0xff00ffff
c000915b:	09 d0                	or     eax,edx
c000915d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009161:	83 c4 0c             	add    esp,0xc
c0009164:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0009168:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000916c:	53                   	push   ebx
c000916d:	e8 ae fe ff ff       	call   c0009020 <GDT::addEntry(GDTEntry)>
c0009172:	83 c4 0c             	add    esp,0xc
c0009175:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0009179:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000917d:	53                   	push   ebx
c000917e:	e8 9d fe ff ff       	call   c0009020 <GDT::addEntry(GDTEntry)>
c0009183:	83 c4 0c             	add    esp,0xc
c0009186:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000918a:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000918e:	53                   	push   ebx
c000918f:	e8 8c fe ff ff       	call   c0009020 <GDT::addEntry(GDTEntry)>
c0009194:	83 c4 0c             	add    esp,0xc
c0009197:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000919b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000919f:	53                   	push   ebx
c00091a0:	e8 7b fe ff ff       	call   c0009020 <GDT::addEntry(GDTEntry)>
c00091a5:	83 c4 0c             	add    esp,0xc
c00091a8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00091ac:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00091b0:	53                   	push   ebx
c00091b1:	e8 6a fe ff ff       	call   c0009020 <GDT::addEntry(GDTEntry)>
c00091b6:	83 c4 0c             	add    esp,0xc
c00091b9:	57                   	push   edi
c00091ba:	56                   	push   esi
c00091bb:	53                   	push   ebx
c00091bc:	e8 5f fe ff ff       	call   c0009020 <GDT::addEntry(GDTEntry)>
c00091c1:	83 c4 0c             	add    esp,0xc
c00091c4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00091c8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00091cc:	53                   	push   ebx
c00091cd:	e8 4e fe ff ff       	call   c0009020 <GDT::addEntry(GDTEntry)>
c00091d2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00091d5:	e8 70 fe ff ff       	call   c000904a <GDT::flush()>
c00091da:	83 c4 50             	add    esp,0x50
c00091dd:	5b                   	pop    ebx
c00091de:	5e                   	pop    esi
c00091df:	5f                   	pop    edi
c00091e0:	c3                   	ret    

c00091e1 <idleFunction(void*)>:
c00091e1:	83 ec 0c             	sub    esp,0xc
c00091e4:	a1 08 98 02 c0       	mov    eax,ds:0xc0029808
c00091e9:	48                   	dec    eax
c00091ea:	a3 08 98 02 c0       	mov    ds:0xc0029808,eax
c00091ef:	75 01                	jne    c00091f2 <idleFunction(void*)+0x11>
c00091f1:	fb                   	sti    
c00091f2:	f4                   	hlt    
c00091f3:	e8 2a 85 01 00       	call   c0021722 <idleCommon()>
c00091f8:	eb f8                	jmp    c00091f2 <idleFunction(void*)+0x11>
c00091fa:	66 90                	xchg   ax,ax

c00091fc <IDTEntry::IDTEntry(bool)>:
c00091fc:	83 ec 04             	sub    esp,0x4
c00091ff:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009203:	88 04 24             	mov    BYTE PTR [esp],al
c0009206:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000920a:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c0009210:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009214:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0009218:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000921c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000921f:	83 e2 f0             	and    edx,0xfffffff0
c0009222:	83 ca 0e             	or     edx,0xe
c0009225:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0009228:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000922c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000922f:	83 e2 ef             	and    edx,0xffffffef
c0009232:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0009235:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0009239:	74 05                	je     c0009240 <IDTEntry::IDTEntry(bool)+0x44>
c000923b:	b2 03                	mov    dl,0x3
c000923d:	eb 05                	jmp    c0009244 <IDTEntry::IDTEntry(bool)+0x48>
c000923f:	90                   	nop
c0009240:	b2 00                	mov    dl,0x0
c0009242:	66 90                	xchg   ax,ax
c0009244:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009248:	83 e2 03             	and    edx,0x3
c000924b:	88 d1                	mov    cl,dl
c000924d:	c1 e1 05             	shl    ecx,0x5
c0009250:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0009253:	83 e2 9f             	and    edx,0xffffff9f
c0009256:	09 ca                	or     edx,ecx
c0009258:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000925b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000925f:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0009262:	83 ca 80             	or     edx,0xffffff80
c0009265:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0009268:	90                   	nop
c0009269:	83 c4 04             	add    esp,0x4
c000926c:	c3                   	ret    
c000926d:	90                   	nop

c000926e <IDTEntry::setOffset(unsigned int)>:
c000926e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0009272:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009276:	66 89 02             	mov    WORD PTR [edx],ax
c0009279:	c1 e8 10             	shr    eax,0x10
c000927c:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c0009280:	c3                   	ret    
c0009281:	90                   	nop
c0009282:	66 90                	xchg   ax,ax

c0009284 <IDT::IDT()>:
c0009284:	90                   	nop
c0009285:	c3                   	ret    

c0009286 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c0009286:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000928a:	83 c0 30             	add    eax,0x30
c000928d:	c3                   	ret    

c000928e <IDT::addEntry(IDTEntry, int)>:
c000928e:	53                   	push   ebx
c000928f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009293:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009297:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000929b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000929f:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c00092a2:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c00092a6:	5b                   	pop    ebx
c00092a7:	c3                   	ret    

c00092a8 <IDT::addEntry(int, void (*)(), bool)>:
c00092a8:	53                   	push   ebx
c00092a9:	83 ec 10             	sub    esp,0x10
c00092ac:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c00092b1:	50                   	push   eax
c00092b2:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c00092b6:	53                   	push   ebx
c00092b7:	e8 40 ff ff ff       	call   c00091fc <IDTEntry::IDTEntry(bool)>
c00092bc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00092c0:	53                   	push   ebx
c00092c1:	e8 a8 ff ff ff       	call   c000926e <IDTEntry::setOffset(unsigned int)>
c00092c6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00092ca:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00092ce:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00092d2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00092d6:	e8 b3 ff ff ff       	call   c000928e <IDT::addEntry(IDTEntry, int)>
c00092db:	83 c4 30             	add    esp,0x30
c00092de:	5b                   	pop    ebx
c00092df:	c3                   	ret    

c00092e0 <IDT::flush()>:
c00092e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00092e4:	66 c7 05 38 63 02 c0 ff 07 	mov    WORD PTR ds:0xc0026338,0x7ff
c00092ed:	a3 3a 63 02 c0       	mov    ds:0xc002633a,eax
c00092f2:	0f 01 1d 38 63 02 c0 	lidtd  ds:0xc0026338
c00092f9:	c3                   	ret    

c00092fa <IDT::setup()>:
c00092fa:	57                   	push   edi
c00092fb:	56                   	push   esi
c00092fc:	53                   	push   ebx
c00092fd:	83 ec 10             	sub    esp,0x10
c0009300:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0009304:	6a 00                	push   0x0
c0009306:	68 30 0f 02 c0       	push   0xc0020f30
c000930b:	6a 00                	push   0x0
c000930d:	53                   	push   ebx
c000930e:	e8 95 ff ff ff       	call   c00092a8 <IDT::addEntry(int, void (*)(), bool)>
c0009313:	6a 00                	push   0x0
c0009315:	68 40 0f 02 c0       	push   0xc0020f40
c000931a:	6a 01                	push   0x1
c000931c:	53                   	push   ebx
c000931d:	e8 86 ff ff ff       	call   c00092a8 <IDT::addEntry(int, void (*)(), bool)>
c0009322:	83 c4 20             	add    esp,0x20
c0009325:	6a 00                	push   0x0
c0009327:	68 4a 0f 02 c0       	push   0xc0020f4a
c000932c:	6a 02                	push   0x2
c000932e:	53                   	push   ebx
c000932f:	e8 74 ff ff ff       	call   c00092a8 <IDT::addEntry(int, void (*)(), bool)>
c0009334:	6a 00                	push   0x0
c0009336:	68 54 0f 02 c0       	push   0xc0020f54
c000933b:	6a 03                	push   0x3
c000933d:	53                   	push   ebx
c000933e:	e8 65 ff ff ff       	call   c00092a8 <IDT::addEntry(int, void (*)(), bool)>
c0009343:	83 c4 20             	add    esp,0x20
c0009346:	6a 00                	push   0x0
c0009348:	68 5e 0f 02 c0       	push   0xc0020f5e
c000934d:	6a 04                	push   0x4
c000934f:	53                   	push   ebx
c0009350:	e8 53 ff ff ff       	call   c00092a8 <IDT::addEntry(int, void (*)(), bool)>
c0009355:	6a 00                	push   0x0
c0009357:	68 68 0f 02 c0       	push   0xc0020f68
c000935c:	6a 05                	push   0x5
c000935e:	53                   	push   ebx
c000935f:	e8 44 ff ff ff       	call   c00092a8 <IDT::addEntry(int, void (*)(), bool)>
c0009364:	83 c4 20             	add    esp,0x20
c0009367:	6a 00                	push   0x0
c0009369:	68 72 0f 02 c0       	push   0xc0020f72
c000936e:	6a 06                	push   0x6
c0009370:	53                   	push   ebx
c0009371:	e8 32 ff ff ff       	call   c00092a8 <IDT::addEntry(int, void (*)(), bool)>
c0009376:	6a 00                	push   0x0
c0009378:	68 7c 0f 02 c0       	push   0xc0020f7c
c000937d:	6a 07                	push   0x7
c000937f:	53                   	push   ebx
c0009380:	e8 23 ff ff ff       	call   c00092a8 <IDT::addEntry(int, void (*)(), bool)>
c0009385:	83 c4 20             	add    esp,0x20
c0009388:	6a 00                	push   0x0
c000938a:	68 86 0f 02 c0       	push   0xc0020f86
c000938f:	6a 08                	push   0x8
c0009391:	53                   	push   ebx
c0009392:	e8 11 ff ff ff       	call   c00092a8 <IDT::addEntry(int, void (*)(), bool)>
c0009397:	6a 00                	push   0x0
c0009399:	68 8e 0f 02 c0       	push   0xc0020f8e
c000939e:	6a 09                	push   0x9
c00093a0:	53                   	push   ebx
c00093a1:	e8 02 ff ff ff       	call   c00092a8 <IDT::addEntry(int, void (*)(), bool)>
c00093a6:	83 c4 20             	add    esp,0x20
c00093a9:	6a 00                	push   0x0
c00093ab:	68 98 0f 02 c0       	push   0xc0020f98
c00093b0:	6a 0a                	push   0xa
c00093b2:	53                   	push   ebx
c00093b3:	e8 f0 fe ff ff       	call   c00092a8 <IDT::addEntry(int, void (*)(), bool)>
c00093b8:	6a 00                	push   0x0
c00093ba:	68 a0 0f 02 c0       	push   0xc0020fa0
c00093bf:	6a 0b                	push   0xb
c00093c1:	53                   	push   ebx
c00093c2:	e8 e1 fe ff ff       	call   c00092a8 <IDT::addEntry(int, void (*)(), bool)>
c00093c7:	83 c4 20             	add    esp,0x20
c00093ca:	6a 00                	push   0x0
c00093cc:	68 a8 0f 02 c0       	push   0xc0020fa8
c00093d1:	6a 0c                	push   0xc
c00093d3:	53                   	push   ebx
c00093d4:	e8 cf fe ff ff       	call   c00092a8 <IDT::addEntry(int, void (*)(), bool)>
c00093d9:	6a 00                	push   0x0
c00093db:	68 b0 0f 02 c0       	push   0xc0020fb0
c00093e0:	6a 0d                	push   0xd
c00093e2:	53                   	push   ebx
c00093e3:	e8 c0 fe ff ff       	call   c00092a8 <IDT::addEntry(int, void (*)(), bool)>
c00093e8:	83 c4 20             	add    esp,0x20
c00093eb:	6a 00                	push   0x0
c00093ed:	68 b8 0f 02 c0       	push   0xc0020fb8
c00093f2:	6a 0e                	push   0xe
c00093f4:	53                   	push   ebx
c00093f5:	e8 ae fe ff ff       	call   c00092a8 <IDT::addEntry(int, void (*)(), bool)>
c00093fa:	6a 00                	push   0x0
c00093fc:	68 c0 0f 02 c0       	push   0xc0020fc0
c0009401:	6a 0f                	push   0xf
c0009403:	53                   	push   ebx
c0009404:	e8 9f fe ff ff       	call   c00092a8 <IDT::addEntry(int, void (*)(), bool)>
c0009409:	83 c4 20             	add    esp,0x20
c000940c:	6a 00                	push   0x0
c000940e:	68 ca 0f 02 c0       	push   0xc0020fca
c0009413:	6a 10                	push   0x10
c0009415:	53                   	push   ebx
c0009416:	e8 8d fe ff ff       	call   c00092a8 <IDT::addEntry(int, void (*)(), bool)>
c000941b:	6a 00                	push   0x0
c000941d:	68 d4 0f 02 c0       	push   0xc0020fd4
c0009422:	6a 11                	push   0x11
c0009424:	53                   	push   ebx
c0009425:	e8 7e fe ff ff       	call   c00092a8 <IDT::addEntry(int, void (*)(), bool)>
c000942a:	83 c4 20             	add    esp,0x20
c000942d:	6a 00                	push   0x0
c000942f:	68 de 0f 02 c0       	push   0xc0020fde
c0009434:	6a 12                	push   0x12
c0009436:	53                   	push   ebx
c0009437:	e8 6c fe ff ff       	call   c00092a8 <IDT::addEntry(int, void (*)(), bool)>
c000943c:	6a 01                	push   0x1
c000943e:	68 78 10 02 c0       	push   0xc0021078
c0009443:	6a 60                	push   0x60
c0009445:	53                   	push   ebx
c0009446:	e8 5d fe ff ff       	call   c00092a8 <IDT::addEntry(int, void (*)(), bool)>
c000944b:	83 c4 20             	add    esp,0x20
c000944e:	6a 00                	push   0x0
c0009450:	68 7f 10 02 c0       	push   0xc002107f
c0009455:	6a 20                	push   0x20
c0009457:	53                   	push   ebx
c0009458:	e8 4b fe ff ff       	call   c00092a8 <IDT::addEntry(int, void (*)(), bool)>
c000945d:	6a 00                	push   0x0
c000945f:	68 6a 10 02 c0       	push   0xc002106a
c0009464:	6a 21                	push   0x21
c0009466:	53                   	push   ebx
c0009467:	e8 3c fe ff ff       	call   c00092a8 <IDT::addEntry(int, void (*)(), bool)>
c000946c:	83 c4 20             	add    esp,0x20
c000946f:	6a 00                	push   0x0
c0009471:	68 71 10 02 c0       	push   0xc0021071
c0009476:	6a 22                	push   0x22
c0009478:	53                   	push   ebx
c0009479:	e8 2a fe ff ff       	call   c00092a8 <IDT::addEntry(int, void (*)(), bool)>
c000947e:	6a 00                	push   0x0
c0009480:	68 e8 0f 02 c0       	push   0xc0020fe8
c0009485:	6a 23                	push   0x23
c0009487:	53                   	push   ebx
c0009488:	e8 1b fe ff ff       	call   c00092a8 <IDT::addEntry(int, void (*)(), bool)>
c000948d:	83 c4 20             	add    esp,0x20
c0009490:	6a 00                	push   0x0
c0009492:	68 f2 0f 02 c0       	push   0xc0020ff2
c0009497:	6a 24                	push   0x24
c0009499:	53                   	push   ebx
c000949a:	e8 09 fe ff ff       	call   c00092a8 <IDT::addEntry(int, void (*)(), bool)>
c000949f:	6a 00                	push   0x0
c00094a1:	68 fc 0f 02 c0       	push   0xc0020ffc
c00094a6:	6a 25                	push   0x25
c00094a8:	53                   	push   ebx
c00094a9:	e8 fa fd ff ff       	call   c00092a8 <IDT::addEntry(int, void (*)(), bool)>
c00094ae:	83 c4 20             	add    esp,0x20
c00094b1:	6a 00                	push   0x0
c00094b3:	68 06 10 02 c0       	push   0xc0021006
c00094b8:	6a 26                	push   0x26
c00094ba:	53                   	push   ebx
c00094bb:	e8 e8 fd ff ff       	call   c00092a8 <IDT::addEntry(int, void (*)(), bool)>
c00094c0:	6a 00                	push   0x0
c00094c2:	68 10 10 02 c0       	push   0xc0021010
c00094c7:	6a 27                	push   0x27
c00094c9:	53                   	push   ebx
c00094ca:	e8 d9 fd ff ff       	call   c00092a8 <IDT::addEntry(int, void (*)(), bool)>
c00094cf:	83 c4 20             	add    esp,0x20
c00094d2:	6a 00                	push   0x0
c00094d4:	68 1a 10 02 c0       	push   0xc002101a
c00094d9:	6a 28                	push   0x28
c00094db:	53                   	push   ebx
c00094dc:	e8 c7 fd ff ff       	call   c00092a8 <IDT::addEntry(int, void (*)(), bool)>
c00094e1:	6a 00                	push   0x0
c00094e3:	68 24 10 02 c0       	push   0xc0021024
c00094e8:	6a 29                	push   0x29
c00094ea:	53                   	push   ebx
c00094eb:	e8 b8 fd ff ff       	call   c00092a8 <IDT::addEntry(int, void (*)(), bool)>
c00094f0:	83 c4 20             	add    esp,0x20
c00094f3:	6a 00                	push   0x0
c00094f5:	68 2e 10 02 c0       	push   0xc002102e
c00094fa:	6a 2a                	push   0x2a
c00094fc:	53                   	push   ebx
c00094fd:	e8 a6 fd ff ff       	call   c00092a8 <IDT::addEntry(int, void (*)(), bool)>
c0009502:	6a 00                	push   0x0
c0009504:	68 38 10 02 c0       	push   0xc0021038
c0009509:	6a 2b                	push   0x2b
c000950b:	53                   	push   ebx
c000950c:	e8 97 fd ff ff       	call   c00092a8 <IDT::addEntry(int, void (*)(), bool)>
c0009511:	83 c4 20             	add    esp,0x20
c0009514:	6a 00                	push   0x0
c0009516:	68 42 10 02 c0       	push   0xc0021042
c000951b:	6a 2c                	push   0x2c
c000951d:	53                   	push   ebx
c000951e:	e8 85 fd ff ff       	call   c00092a8 <IDT::addEntry(int, void (*)(), bool)>
c0009523:	6a 00                	push   0x0
c0009525:	68 4c 10 02 c0       	push   0xc002104c
c000952a:	6a 2d                	push   0x2d
c000952c:	53                   	push   ebx
c000952d:	e8 76 fd ff ff       	call   c00092a8 <IDT::addEntry(int, void (*)(), bool)>
c0009532:	83 c4 20             	add    esp,0x20
c0009535:	6a 00                	push   0x0
c0009537:	68 56 10 02 c0       	push   0xc0021056
c000953c:	6a 2e                	push   0x2e
c000953e:	53                   	push   ebx
c000953f:	e8 64 fd ff ff       	call   c00092a8 <IDT::addEntry(int, void (*)(), bool)>
c0009544:	6a 00                	push   0x0
c0009546:	68 60 10 02 c0       	push   0xc0021060
c000954b:	6a 2f                	push   0x2f
c000954d:	53                   	push   ebx
c000954e:	e8 55 fd ff ff       	call   c00092a8 <IDT::addEntry(int, void (*)(), bool)>
c0009553:	83 c4 20             	add    esp,0x20
c0009556:	6a 00                	push   0x0
c0009558:	68 b6 10 02 c0       	push   0xc00210b6
c000955d:	6a 30                	push   0x30
c000955f:	53                   	push   ebx
c0009560:	e8 43 fd ff ff       	call   c00092a8 <IDT::addEntry(int, void (*)(), bool)>
c0009565:	6a 00                	push   0x0
c0009567:	68 c0 10 02 c0       	push   0xc00210c0
c000956c:	6a 31                	push   0x31
c000956e:	53                   	push   ebx
c000956f:	e8 34 fd ff ff       	call   c00092a8 <IDT::addEntry(int, void (*)(), bool)>
c0009574:	83 c4 20             	add    esp,0x20
c0009577:	6a 00                	push   0x0
c0009579:	68 ca 10 02 c0       	push   0xc00210ca
c000957e:	6a 32                	push   0x32
c0009580:	53                   	push   ebx
c0009581:	e8 22 fd ff ff       	call   c00092a8 <IDT::addEntry(int, void (*)(), bool)>
c0009586:	6a 00                	push   0x0
c0009588:	68 d4 10 02 c0       	push   0xc00210d4
c000958d:	6a 33                	push   0x33
c000958f:	53                   	push   ebx
c0009590:	e8 13 fd ff ff       	call   c00092a8 <IDT::addEntry(int, void (*)(), bool)>
c0009595:	83 c4 20             	add    esp,0x20
c0009598:	6a 00                	push   0x0
c000959a:	68 de 10 02 c0       	push   0xc00210de
c000959f:	6a 34                	push   0x34
c00095a1:	53                   	push   ebx
c00095a2:	e8 01 fd ff ff       	call   c00092a8 <IDT::addEntry(int, void (*)(), bool)>
c00095a7:	6a 00                	push   0x0
c00095a9:	68 e8 10 02 c0       	push   0xc00210e8
c00095ae:	6a 35                	push   0x35
c00095b0:	53                   	push   ebx
c00095b1:	e8 f2 fc ff ff       	call   c00092a8 <IDT::addEntry(int, void (*)(), bool)>
c00095b6:	83 c4 20             	add    esp,0x20
c00095b9:	6a 00                	push   0x0
c00095bb:	68 f2 10 02 c0       	push   0xc00210f2
c00095c0:	6a 36                	push   0x36
c00095c2:	53                   	push   ebx
c00095c3:	e8 e0 fc ff ff       	call   c00092a8 <IDT::addEntry(int, void (*)(), bool)>
c00095c8:	6a 00                	push   0x0
c00095ca:	68 fc 10 02 c0       	push   0xc00210fc
c00095cf:	6a 37                	push   0x37
c00095d1:	53                   	push   ebx
c00095d2:	e8 d1 fc ff ff       	call   c00092a8 <IDT::addEntry(int, void (*)(), bool)>
c00095d7:	83 c4 1c             	add    esp,0x1c
c00095da:	6a 03                	push   0x3
c00095dc:	6a 02                	push   0x2
c00095de:	ff 35 14 64 02 c0    	push   DWORD PTR ds:0xc0026414
c00095e4:	e8 5b 25 00 00       	call   c000bb44 <VAS::allocatePages(int, int)>
c00095e9:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c00095f0:	89 c6                	mov    esi,eax
c00095f2:	e8 a0 01 00 00       	call   c0009797 <malloc>
c00095f7:	81 c6 00 20 00 00    	add    esi,0x2000
c00095fd:	89 04 24             	mov    DWORD PTR [esp],eax
c0009600:	89 c7                	mov    edi,eax
c0009602:	e8 11 17 00 00       	call   c000ad18 <TSS::TSS()>
c0009607:	83 c4 0c             	add    esp,0xc
c000960a:	68 86 0f 02 c0       	push   0xc0020f86
c000960f:	56                   	push   esi
c0009610:	57                   	push   edi
c0009611:	e8 46 17 00 00       	call   c000ad5c <TSS::setup(unsigned long, unsigned long)>
c0009616:	89 c6                	mov    esi,eax
c0009618:	58                   	pop    eax
c0009619:	5a                   	pop    edx
c000961a:	6a 00                	push   0x0
c000961c:	8d 44 24 14          	lea    eax,[esp+0x14]
c0009620:	50                   	push   eax
c0009621:	e8 d6 fb ff ff       	call   c00091fc <IDTEntry::IDTEntry(bool)>
c0009626:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000962a:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000962f:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c0009636:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000963c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009640:	80 ce 05             	or     dh,0x5
c0009643:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c0009646:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000964a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000964e:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0009651:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009654:	e8 87 fc ff ff       	call   c00092e0 <IDT::flush()>
c0009659:	83 c4 20             	add    esp,0x20
c000965c:	5b                   	pop    ebx
c000965d:	5e                   	pop    esi
c000965e:	5f                   	pop    edi
c000965f:	c3                   	ret    

c0009660 <sbrk>:
c0009660:	55                   	push   ebp
c0009661:	57                   	push   edi
c0009662:	56                   	push   esi
c0009663:	53                   	push   ebx
c0009664:	83 ec 24             	sub    esp,0x24
c0009667:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000966b:	53                   	push   ebx
c000966c:	68 50 2a 02 c0       	push   0xc0022a50
c0009671:	e8 bb 30 00 00       	call   c000c731 <Dbg::kprintf(char const*, ...)>
c0009676:	83 c4 10             	add    esp,0x10
c0009679:	85 db                	test   ebx,ebx
c000967b:	74 5f                	je     c00096dc <sbrk+0x7c>
c000967d:	78 64                	js     c00096e3 <sbrk+0x83>
c000967f:	a1 40 58 02 c0       	mov    eax,ds:0xc0025840
c0009684:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009688:	81 c3 ff 0f 00 00    	add    ebx,0xfff
c000968e:	89 dd                	mov    ebp,ebx
c0009690:	78 69                	js     c00096fb <sbrk+0x9b>
c0009692:	c1 fd 0c             	sar    ebp,0xc
c0009695:	bb 00 00 00 00       	mov    ebx,0x0
c000969a:	8b 35 14 64 02 c0    	mov    esi,DWORD PTR ds:0xc0026414
c00096a0:	8b 3d 40 58 02 c0    	mov    edi,DWORD PTR ds:0xc0025840
c00096a6:	e8 2b 05 00 00       	call   c0009bd6 <Phys::allocatePage()>
c00096ab:	68 01 04 00 00       	push   0x401
c00096b0:	57                   	push   edi
c00096b1:	50                   	push   eax
c00096b2:	56                   	push   esi
c00096b3:	e8 88 23 00 00       	call   c000ba40 <VAS::mapPage(unsigned long, unsigned long, int)>
c00096b8:	81 05 40 58 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc0025840,0x1000
c00096c2:	43                   	inc    ebx
c00096c3:	83 c4 10             	add    esp,0x10
c00096c6:	39 dd                	cmp    ebp,ebx
c00096c8:	75 d0                	jne    c000969a <sbrk+0x3a>
c00096ca:	0f 20 d8             	mov    eax,cr3
c00096cd:	0f 22 d8             	mov    cr3,eax
c00096d0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00096d4:	83 c4 1c             	add    esp,0x1c
c00096d7:	5b                   	pop    ebx
c00096d8:	5e                   	pop    esi
c00096d9:	5f                   	pop    edi
c00096da:	5d                   	pop    ebp
c00096db:	c3                   	ret    
c00096dc:	a1 40 58 02 c0       	mov    eax,ds:0xc0025840
c00096e1:	eb f1                	jmp    c00096d4 <sbrk+0x74>
c00096e3:	83 ec 08             	sub    esp,0x8
c00096e6:	53                   	push   ebx
c00096e7:	68 7c 2a 02 c0       	push   0xc0022a7c
c00096ec:	e8 40 30 00 00       	call   c000c731 <Dbg::kprintf(char const*, ...)>
c00096f1:	83 c4 10             	add    esp,0x10
c00096f4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00096f9:	eb d9                	jmp    c00096d4 <sbrk+0x74>
c00096fb:	8d ab ff 0f 00 00    	lea    ebp,[ebx+0xfff]
c0009701:	eb 8f                	jmp    c0009692 <sbrk+0x32>

c0009703 <mmap>:
c0009703:	83 ec 18             	sub    esp,0x18
c0009706:	68 6e 2a 02 c0       	push   0xc0022a6e
c000970b:	e8 8b 93 00 00       	call   c0012a9b <Krnl::panic(char const*)>
c0009710:	b8 00 00 00 00       	mov    eax,0x0
c0009715:	83 c4 1c             	add    esp,0x1c
c0009718:	c3                   	ret    

c0009719 <munmap>:
c0009719:	83 ec 18             	sub    esp,0x18
c000971c:	68 73 2a 02 c0       	push   0xc0022a73
c0009721:	e8 75 93 00 00       	call   c0012a9b <Krnl::panic(char const*)>
c0009726:	b8 00 00 00 00       	mov    eax,0x0
c000972b:	83 c4 1c             	add    esp,0x1c
c000972e:	c3                   	ret    

c000972f <liballoc_lock()>:
c000972f:	fa                   	cli    
c0009730:	ff 05 08 98 02 c0    	inc    DWORD PTR ds:0xc0029808
c0009736:	b8 00 00 00 00       	mov    eax,0x0
c000973b:	c3                   	ret    

c000973c <liballoc_unlock()>:
c000973c:	a1 08 98 02 c0       	mov    eax,ds:0xc0029808
c0009741:	48                   	dec    eax
c0009742:	a3 08 98 02 c0       	mov    ds:0xc0029808,eax
c0009747:	75 01                	jne    c000974a <liballoc_unlock()+0xe>
c0009749:	fb                   	sti    
c000974a:	b8 00 00 00 00       	mov    eax,0x0
c000974f:	c3                   	ret    

c0009750 <liballoc_alloc(int)>:
c0009750:	83 ec 10             	sub    esp,0x10
c0009753:	6a 01                	push   0x1
c0009755:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009759:	ff 35 14 64 02 c0    	push   DWORD PTR ds:0xc0026414
c000975f:	e8 e0 23 00 00       	call   c000bb44 <VAS::allocatePages(int, int)>
c0009764:	83 c4 1c             	add    esp,0x1c
c0009767:	c3                   	ret    

c0009768 <liballoc_free(void*, int)>:
c0009768:	83 ec 14             	sub    esp,0x14
c000976b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000976f:	ff 35 14 64 02 c0    	push   DWORD PTR ds:0xc0026414
c0009775:	e8 72 20 00 00       	call   c000b7ec <VAS::freeAllocatedPages(unsigned long)>
c000977a:	b8 00 00 00 00       	mov    eax,0x0
c000977f:	83 c4 1c             	add    esp,0x1c
c0009782:	c3                   	ret    

c0009783 <realloc>:
c0009783:	83 ec 14             	sub    esp,0x14
c0009786:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000978a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000978e:	e8 f1 7b ff ff       	call   c0001384 <dlrealloc>
c0009793:	83 c4 1c             	add    esp,0x1c
c0009796:	c3                   	ret    

c0009797 <malloc>:
c0009797:	83 ec 18             	sub    esp,0x18
c000979a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000979e:	e8 a4 76 ff ff       	call   c0000e47 <dlmalloc>
c00097a3:	83 c4 1c             	add    esp,0x1c
c00097a6:	c3                   	ret    

c00097a7 <free>:
c00097a7:	83 ec 18             	sub    esp,0x18
c00097aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00097ae:	e8 39 73 ff ff       	call   c0000aec <dlfree>
c00097b3:	83 c4 1c             	add    esp,0x1c
c00097b6:	c3                   	ret    

c00097b7 <rfree>:
c00097b7:	83 ec 18             	sub    esp,0x18
c00097ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00097be:	e8 29 73 ff ff       	call   c0000aec <dlfree>
c00097c3:	83 c4 1c             	add    esp,0x1c
c00097c6:	c3                   	ret    

c00097c7 <calloc>:
c00097c7:	56                   	push   esi
c00097c8:	53                   	push   ebx
c00097c9:	83 ec 10             	sub    esp,0x10
c00097cc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00097d0:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c00097d5:	53                   	push   ebx
c00097d6:	e8 bc ff ff ff       	call   c0009797 <malloc>
c00097db:	89 c6                	mov    esi,eax
c00097dd:	83 c4 0c             	add    esp,0xc
c00097e0:	53                   	push   ebx
c00097e1:	6a 00                	push   0x0
c00097e3:	50                   	push   eax
c00097e4:	e8 bf 6c ff ff       	call   c00004a8 <memset>
c00097e9:	89 f0                	mov    eax,esi
c00097eb:	83 c4 14             	add    esp,0x14
c00097ee:	5b                   	pop    ebx
c00097ef:	5e                   	pop    esi
c00097f0:	c3                   	ret    

c00097f1 <Krnl::setBootMessage(char const*)>:
c00097f1:	57                   	push   edi
c00097f2:	56                   	push   esi
c00097f3:	53                   	push   ebx
c00097f4:	81 ec a4 00 00 00    	sub    esp,0xa4
c00097fa:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c0009801:	68 9e 00 00 00       	push   0x9e
c0009806:	6a 00                	push   0x0
c0009808:	8d 74 24 0e          	lea    esi,[esp+0xe]
c000980c:	56                   	push   esi
c000980d:	e8 96 6c ff ff       	call   c00004a8 <memset>
c0009812:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009815:	e8 aa 6c ff ff       	call   c00004c4 <strlen>
c000981a:	ba 50 00 00 00       	mov    edx,0x50
c000981f:	83 c4 10             	add    esp,0x10
c0009822:	29 c2                	sub    edx,eax
c0009824:	66 0f be 03          	movsx  ax,BYTE PTR [ebx]
c0009828:	d1 ea                	shr    edx,1
c000982a:	84 c0                	test   al,al
c000982c:	74 19                	je     c0009847 <Krnl::setBootMessage(char const*)+0x56>
c000982e:	01 d2                	add    edx,edx
c0009830:	43                   	inc    ebx
c0009831:	01 f2                	add    edx,esi
c0009833:	80 cc 0f             	or     ah,0xf
c0009836:	83 c2 02             	add    edx,0x2
c0009839:	66 89 42 fe          	mov    WORD PTR [edx-0x2],ax
c000983d:	43                   	inc    ebx
c000983e:	66 0f be 43 ff       	movsx  ax,BYTE PTR [ebx-0x1]
c0009843:	84 c0                	test   al,al
c0009845:	75 ec                	jne    c0009833 <Krnl::setBootMessage(char const*)+0x42>
c0009847:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c000984c:	b9 9e 00 00 00       	mov    ecx,0x9e
c0009851:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0009853:	81 c4 a0 00 00 00    	add    esp,0xa0
c0009859:	5b                   	pop    ebx
c000985a:	5e                   	pop    esi
c000985b:	5f                   	pop    edi
c000985c:	c3                   	ret    

c000985d <kernel_main>:
c000985d:	55                   	push   ebp
c000985e:	57                   	push   edi
c000985f:	bf f9 03 00 00       	mov    edi,0x3f9
c0009864:	56                   	push   esi
c0009865:	89 fa                	mov    edx,edi
c0009867:	53                   	push   ebx
c0009868:	31 f6                	xor    esi,esi
c000986a:	83 ec 38             	sub    esp,0x38
c000986d:	a1 00 05 00 00       	mov    eax,ds:0x500
c0009872:	a3 40 63 02 c0       	mov    ds:0xc0026340,eax
c0009877:	89 f0                	mov    eax,esi
c0009879:	ee                   	out    dx,al
c000987a:	bb fb 03 00 00       	mov    ebx,0x3fb
c000987f:	b0 80                	mov    al,0x80
c0009881:	89 da                	mov    edx,ebx
c0009883:	ee                   	out    dx,al
c0009884:	b1 03                	mov    cl,0x3
c0009886:	ba f8 03 00 00       	mov    edx,0x3f8
c000988b:	88 c8                	mov    al,cl
c000988d:	ee                   	out    dx,al
c000988e:	89 f0                	mov    eax,esi
c0009890:	89 fa                	mov    edx,edi
c0009892:	ee                   	out    dx,al
c0009893:	88 c8                	mov    al,cl
c0009895:	89 da                	mov    edx,ebx
c0009897:	ee                   	out    dx,al
c0009898:	b0 c7                	mov    al,0xc7
c000989a:	ba fa 03 00 00       	mov    edx,0x3fa
c000989f:	ee                   	out    dx,al
c00098a0:	b0 0b                	mov    al,0xb
c00098a2:	ba fc 03 00 00       	mov    edx,0x3fc
c00098a7:	ee                   	out    dx,al
c00098a8:	68 ac 2a 02 c0       	push   0xc0022aac
c00098ad:	e8 7f 2e 00 00       	call   c000c731 <Dbg::kprintf(char const*, ...)>
c00098b2:	0f be 05 60 58 02 c0 	movsx  eax,BYTE PTR ds:0xc0025860
c00098b9:	83 c4 10             	add    esp,0x10
c00098bc:	84 c0                	test   al,al
c00098be:	74 5c                	je     c000991c <kernel_main+0xbf>
c00098c0:	31 db                	xor    ebx,ebx
c00098c2:	bd 0a 00 00 00       	mov    ebp,0xa
c00098c7:	bf 05 00 00 00       	mov    edi,0x5
c00098cc:	31 f6                	xor    esi,esi
c00098ce:	eb 14                	jmp    c00098e4 <kernel_main+0x87>
c00098d0:	47                   	inc    edi
c00098d1:	bd 0a 00 00 00       	mov    ebp,0xa
c00098d6:	31 f6                	xor    esi,esi
c00098d8:	43                   	inc    ebx
c00098d9:	0f be 83 60 58 02 c0 	movsx  eax,BYTE PTR [ebx-0x3ffda7a0]
c00098e0:	84 c0                	test   al,al
c00098e2:	74 38                	je     c000991c <kernel_main+0xbf>
c00098e4:	80 be 96 58 02 c0 db 	cmp    BYTE PTR [esi-0x3ffda76a],0xdb
c00098eb:	0f 84 a3 00 00 00    	je     c0009994 <kernel_main+0x137>
c00098f1:	3c 0d                	cmp    al,0xd
c00098f3:	74 e3                	je     c00098d8 <kernel_main+0x7b>
c00098f5:	3c 0a                	cmp    al,0xa
c00098f7:	74 d7                	je     c00098d0 <kernel_main+0x73>
c00098f9:	83 ec 0c             	sub    esp,0xc
c00098fc:	8d 54 35 00          	lea    edx,[ebp+esi*1+0x0]
c0009900:	57                   	push   edi
c0009901:	43                   	inc    ebx
c0009902:	52                   	push   edx
c0009903:	46                   	inc    esi
c0009904:	6a 00                	push   0x0
c0009906:	6a 0e                	push   0xe
c0009908:	50                   	push   eax
c0009909:	e8 fe 08 01 00       	call   c001a20c <Hal::consoleWriteCharacter(char, int, int, int, int)>
c000990e:	83 c4 20             	add    esp,0x20
c0009911:	0f be 83 60 58 02 c0 	movsx  eax,BYTE PTR [ebx-0x3ffda7a0]
c0009918:	84 c0                	test   al,al
c000991a:	75 c8                	jne    c00098e4 <kernel_main+0x87>
c000991c:	83 ec 0c             	sub    esp,0xc
c000991f:	68 c4 2a 02 c0       	push   0xc0022ac4
c0009924:	e8 c8 fe ff ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c0009929:	a1 24 05 00 00       	mov    eax,ds:0x524
c000992e:	05 ff 0f 00 00       	add    eax,0xfff
c0009933:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009938:	89 04 24             	mov    DWORD PTR [esp],eax
c000993b:	e8 15 04 00 00       	call   c0009d55 <Phys::physicalMemorySetup(unsigned int)>
c0009940:	e8 4f 1c 00 00       	call   c000b594 <Virt::virtualMemorySetup()>
c0009945:	58                   	pop    eax
c0009946:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c000994a:	53                   	push   ebx
c000994b:	e8 1c 28 00 00       	call   c000c16c <VAS::VAS()>
c0009950:	89 1d 14 64 02 c0    	mov    DWORD PTR ds:0xc0026414,ebx
c0009956:	e8 c5 66 ff ff       	call   c0000020 <callGlobalConstructors>
c000995b:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c0009962:	e8 30 fe ff ff       	call   c0009797 <malloc>
c0009967:	89 04 24             	mov    DWORD PTR [esp],eax
c000996a:	89 c6                	mov    esi,eax
c000996c:	e8 73 f0 ff ff       	call   c00089e4 <Computer::Computer()>
c0009971:	6a 00                	push   0x0
c0009973:	89 35 28 63 02 c0    	mov    DWORD PTR ds:0xc0026328,esi
c0009979:	6a 00                	push   0x0
c000997b:	6a 00                	push   0x0
c000997d:	56                   	push   esi
c000997e:	e8 b1 f4 ff ff       	call   c0008e34 <Computer::open(int, int, void*)>
c0009983:	83 c4 14             	add    esp,0x14
c0009986:	53                   	push   ebx
c0009987:	e8 38 1f 00 00       	call   c000b8c4 <VAS::~VAS()>
c000998c:	83 c4 3c             	add    esp,0x3c
c000998f:	5b                   	pop    ebx
c0009990:	5e                   	pop    esi
c0009991:	5f                   	pop    edi
c0009992:	5d                   	pop    ebp
c0009993:	c3                   	ret    
c0009994:	0f b6 96 95 58 02 c0 	movzx  edx,BYTE PTR [esi-0x3ffda76b]
c000999b:	83 e2 fe             	and    edx,0xfffffffe
c000999e:	81 fa ba 00 00 00    	cmp    edx,0xba
c00099a4:	0f 85 47 ff ff ff    	jne    c00098f1 <kernel_main+0x94>
c00099aa:	45                   	inc    ebp
c00099ab:	e9 41 ff ff ff       	jmp    c00098f1 <kernel_main+0x94>

c00099b0 <Phys::allocateDMA(unsigned long)>:
c00099b0:	55                   	push   ebp
c00099b1:	31 ed                	xor    ebp,ebp
c00099b3:	57                   	push   edi
c00099b4:	56                   	push   esi
c00099b5:	53                   	push   ebx
c00099b6:	31 db                	xor    ebx,ebx
c00099b8:	83 ec 28             	sub    esp,0x28
c00099bb:	68 e3 2a 02 c0       	push   0xc0022ae3
c00099c0:	e8 6c 2d 00 00       	call   c000c731 <Dbg::kprintf(char const*, ...)>
c00099c5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00099c9:	83 c4 10             	add    esp,0x10
c00099cc:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c00099d2:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00099da:	c1 ef 0c             	shr    edi,0xc
c00099dd:	31 c0                	xor    eax,eax
c00099df:	eb 19                	jmp    c00099fa <Phys::allocateDMA(unsigned long)+0x4a>
c00099e1:	85 c0                	test   eax,eax
c00099e3:	75 06                	jne    c00099eb <Phys::allocateDMA(unsigned long)+0x3b>
c00099e5:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00099e9:	89 dd                	mov    ebp,ebx
c00099eb:	8d 70 01             	lea    esi,[eax+0x1]
c00099ee:	39 f7                	cmp    edi,esi
c00099f0:	74 3f                	je     c0009a31 <Phys::allocateDMA(unsigned long)+0x81>
c00099f2:	89 f0                	mov    eax,esi
c00099f4:	43                   	inc    ebx
c00099f5:	83 fb 0f             	cmp    ebx,0xf
c00099f8:	7f 11                	jg     c0009a0b <Phys::allocateDMA(unsigned long)+0x5b>
c00099fa:	80 bb 5c 63 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffd9ca4],0x0
c0009a01:	74 de                	je     c00099e1 <Phys::allocateDMA(unsigned long)+0x31>
c0009a03:	31 c0                	xor    eax,eax
c0009a05:	43                   	inc    ebx
c0009a06:	83 fb 0f             	cmp    ebx,0xf
c0009a09:	7e ef                	jle    c00099fa <Phys::allocateDMA(unsigned long)+0x4a>
c0009a0b:	83 ec 0c             	sub    esp,0xc
c0009a0e:	68 13 2b 02 c0       	push   0xc0022b13
c0009a13:	e8 19 2d 00 00       	call   c000c731 <Dbg::kprintf(char const*, ...)>
c0009a18:	c7 04 24 d0 2b 02 c0 	mov    DWORD PTR [esp],0xc0022bd0
c0009a1f:	e8 77 90 00 00       	call   c0012a9b <Krnl::panic(char const*)>
c0009a24:	83 c4 10             	add    esp,0x10
c0009a27:	31 c0                	xor    eax,eax
c0009a29:	83 c4 1c             	add    esp,0x1c
c0009a2c:	5b                   	pop    ebx
c0009a2d:	5e                   	pop    esi
c0009a2e:	5f                   	pop    edi
c0009a2f:	5d                   	pop    ebp
c0009a30:	c3                   	ret    
c0009a31:	89 e9                	mov    ecx,ebp
c0009a33:	c1 f9 04             	sar    ecx,0x4
c0009a36:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0009a3a:	8d 4c 3d 00          	lea    ecx,[ebp+edi*1+0x0]
c0009a3e:	89 ca                	mov    edx,ecx
c0009a40:	4a                   	dec    edx
c0009a41:	79 03                	jns    c0009a46 <Phys::allocateDMA(unsigned long)+0x96>
c0009a43:	8d 51 0e             	lea    edx,[ecx+0xe]
c0009a46:	c1 fa 04             	sar    edx,0x4
c0009a49:	39 54 24 0c          	cmp    DWORD PTR [esp+0xc],edx
c0009a4d:	74 08                	je     c0009a57 <Phys::allocateDMA(unsigned long)+0xa7>
c0009a4f:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009a53:	31 c0                	xor    eax,eax
c0009a55:	eb ae                	jmp    c0009a05 <Phys::allocateDMA(unsigned long)+0x55>
c0009a57:	85 f6                	test   esi,esi
c0009a59:	74 15                	je     c0009a70 <Phys::allocateDMA(unsigned long)+0xc0>
c0009a5b:	8d 95 5c 63 02 c0    	lea    edx,[ebp-0x3ffd9ca4]
c0009a61:	8d 84 05 5d 63 02 c0 	lea    eax,[ebp+eax*1-0x3ffd9ca3]
c0009a68:	c6 02 01             	mov    BYTE PTR [edx],0x1
c0009a6b:	42                   	inc    edx
c0009a6c:	39 d0                	cmp    eax,edx
c0009a6e:	75 f8                	jne    c0009a68 <Phys::allocateDMA(unsigned long)+0xb8>
c0009a70:	83 ec 0c             	sub    esp,0xc
c0009a73:	01 3d 54 63 02 c0    	add    DWORD PTR ds:0xc0026354,edi
c0009a79:	68 fc 2a 02 c0       	push   0xc0022afc
c0009a7e:	e8 ae 2c 00 00       	call   c000c731 <Dbg::kprintf(char const*, ...)>
c0009a83:	83 c4 10             	add    esp,0x10
c0009a86:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009a8a:	85 c0                	test   eax,eax
c0009a8c:	74 23                	je     c0009ab1 <Phys::allocateDMA(unsigned long)+0x101>
c0009a8e:	83 ec 0c             	sub    esp,0xc
c0009a91:	68 f0 56 02 c0       	push   0xc00256f0
c0009a96:	e8 96 2c 00 00       	call   c000c731 <Dbg::kprintf(char const*, ...)>
c0009a9b:	c7 04 24 d0 2b 02 c0 	mov    DWORD PTR [esp],0xc0022bd0
c0009aa2:	e8 f4 8f 00 00       	call   c0012a9b <Krnl::panic(char const*)>
c0009aa7:	83 c4 10             	add    esp,0x10
c0009aaa:	89 f0                	mov    eax,esi
c0009aac:	e9 43 ff ff ff       	jmp    c00099f4 <Phys::allocateDMA(unsigned long)+0x44>
c0009ab1:	c1 e5 0c             	shl    ebp,0xc
c0009ab4:	8d 85 00 00 01 c2    	lea    eax,[ebp-0x3dff0000]
c0009aba:	e9 6a ff ff ff       	jmp    c0009a29 <Phys::allocateDMA(unsigned long)+0x79>

c0009abf <Phys::freeDMA(unsigned long, unsigned long)>:
c0009abf:	83 ec 18             	sub    esp,0x18
c0009ac2:	68 17 2b 02 c0       	push   0xc0022b17
c0009ac7:	e8 65 2c 00 00       	call   c000c731 <Dbg::kprintf(char const*, ...)>
c0009acc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0009ad0:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c0009ad6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009ada:	c1 ea 0c             	shr    edx,0xc
c0009add:	05 00 00 ff 3d       	add    eax,0x3dff0000
c0009ae2:	29 15 54 63 02 c0    	sub    DWORD PTR ds:0xc0026354,edx
c0009ae8:	c1 e8 0c             	shr    eax,0xc
c0009aeb:	83 c4 10             	add    esp,0x10
c0009aee:	85 d2                	test   edx,edx
c0009af0:	74 0f                	je     c0009b01 <Phys::freeDMA(unsigned long, unsigned long)+0x42>
c0009af2:	05 5c 63 02 c0       	add    eax,0xc002635c
c0009af7:	01 c2                	add    edx,eax
c0009af9:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0009afc:	40                   	inc    eax
c0009afd:	39 d0                	cmp    eax,edx
c0009aff:	75 f8                	jne    c0009af9 <Phys::freeDMA(unsigned long, unsigned long)+0x3a>
c0009b01:	83 c4 0c             	add    esp,0xc
c0009b04:	c3                   	ret    

c0009b05 <Phys::setPageState(unsigned long, bool)>:
c0009b05:	56                   	push   esi
c0009b06:	ba 01 00 00 00       	mov    edx,0x1
c0009b0b:	53                   	push   ebx
c0009b0c:	8b 35 a4 59 02 c0    	mov    esi,DWORD PTR ds:0xc00259a4
c0009b12:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009b16:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0009b1a:	89 c8                	mov    eax,ecx
c0009b1c:	83 e1 07             	and    ecx,0x7
c0009b1f:	c1 e8 03             	shr    eax,0x3
c0009b22:	d3 e3                	shl    ebx,cl
c0009b24:	01 c6                	add    esi,eax
c0009b26:	d3 e2                	shl    edx,cl
c0009b28:	f7 d2                	not    edx
c0009b2a:	20 16                	and    BYTE PTR [esi],dl
c0009b2c:	03 05 a4 59 02 c0    	add    eax,DWORD PTR ds:0xc00259a4
c0009b32:	08 18                	or     BYTE PTR [eax],bl
c0009b34:	5b                   	pop    ebx
c0009b35:	5e                   	pop    esi
c0009b36:	c3                   	ret    

c0009b37 <Phys::getPageState(unsigned long)>:
c0009b37:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0009b3b:	8b 15 a4 59 02 c0    	mov    edx,DWORD PTR ds:0xc00259a4
c0009b41:	89 c8                	mov    eax,ecx
c0009b43:	83 e1 07             	and    ecx,0x7
c0009b46:	c1 e8 03             	shr    eax,0x3
c0009b49:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c0009b4d:	d3 f8                	sar    eax,cl
c0009b4f:	83 e0 01             	and    eax,0x1
c0009b52:	c3                   	ret    

c0009b53 <Phys::freePage(unsigned long)>:
c0009b53:	53                   	push   ebx
c0009b54:	83 ec 10             	sub    esp,0x10
c0009b57:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0009b5b:	53                   	push   ebx
c0009b5c:	68 2d 2b 02 c0       	push   0xc0022b2d
c0009b61:	e8 cb 2b 00 00       	call   c000c731 <Dbg::kprintf(char const*, ...)>
c0009b66:	8d 83 00 00 ff ff    	lea    eax,[ebx-0x10000]
c0009b6c:	83 c4 10             	add    esp,0x10
c0009b6f:	3d ff ff 00 00       	cmp    eax,0xffff
c0009b74:	76 3d                	jbe    c0009bb3 <Phys::freePage(unsigned long)+0x60>
c0009b76:	83 ec 0c             	sub    esp,0xc
c0009b79:	c1 eb 0c             	shr    ebx,0xc
c0009b7c:	53                   	push   ebx
c0009b7d:	e8 b5 ff ff ff       	call   c0009b37 <Phys::getPageState(unsigned long)>
c0009b82:	83 c4 10             	add    esp,0x10
c0009b85:	84 c0                	test   al,al
c0009b87:	74 19                	je     c0009ba2 <Phys::freePage(unsigned long)+0x4f>
c0009b89:	83 ec 08             	sub    esp,0x8
c0009b8c:	ff 0d 54 63 02 c0    	dec    DWORD PTR ds:0xc0026354
c0009b92:	6a 00                	push   0x0
c0009b94:	53                   	push   ebx
c0009b95:	e8 6b ff ff ff       	call   c0009b05 <Phys::setPageState(unsigned long, bool)>
c0009b9a:	83 c4 10             	add    esp,0x10
c0009b9d:	83 c4 08             	add    esp,0x8
c0009ba0:	5b                   	pop    ebx
c0009ba1:	c3                   	ret    
c0009ba2:	c7 44 24 10 57 2b 02 c0 	mov    DWORD PTR [esp+0x10],0xc0022b57
c0009baa:	83 c4 08             	add    esp,0x8
c0009bad:	5b                   	pop    ebx
c0009bae:	e9 e8 8e 00 00       	jmp    c0012a9b <Krnl::panic(char const*)>
c0009bb3:	83 ec 08             	sub    esp,0x8
c0009bb6:	53                   	push   ebx
c0009bb7:	68 40 2b 02 c0       	push   0xc0022b40
c0009bbc:	e8 70 2b 00 00       	call   c000c731 <Dbg::kprintf(char const*, ...)>
c0009bc1:	58                   	pop    eax
c0009bc2:	5a                   	pop    edx
c0009bc3:	68 00 10 00 00       	push   0x1000
c0009bc8:	53                   	push   ebx
c0009bc9:	e8 f1 fe ff ff       	call   c0009abf <Phys::freeDMA(unsigned long, unsigned long)>
c0009bce:	83 c4 10             	add    esp,0x10
c0009bd1:	83 c4 08             	add    esp,0x8
c0009bd4:	5b                   	pop    ebx
c0009bd5:	c3                   	ret    

c0009bd6 <Phys::allocatePage()>:
c0009bd6:	56                   	push   esi
c0009bd7:	53                   	push   ebx
c0009bd8:	83 ec 14             	sub    esp,0x14
c0009bdb:	8b 35 48 63 02 c0    	mov    esi,DWORD PTR ds:0xc0026348
c0009be1:	89 f3                	mov    ebx,esi
c0009be3:	eb 0a                	jmp    c0009bef <Phys::allocatePage()+0x19>
c0009be5:	89 1d 48 63 02 c0    	mov    DWORD PTR ds:0xc0026348,ebx
c0009beb:	39 de                	cmp    esi,ebx
c0009bed:	74 24                	je     c0009c13 <Phys::allocatePage()+0x3d>
c0009bef:	53                   	push   ebx
c0009bf0:	e8 42 ff ff ff       	call   c0009b37 <Phys::getPageState(unsigned long)>
c0009bf5:	5a                   	pop    edx
c0009bf6:	84 c0                	test   al,al
c0009bf8:	74 69                	je     c0009c63 <Phys::allocatePage()+0x8d>
c0009bfa:	43                   	inc    ebx
c0009bfb:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0009c01:	75 e2                	jne    c0009be5 <Phys::allocatePage()+0xf>
c0009c03:	31 db                	xor    ebx,ebx
c0009c05:	c7 05 48 63 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026348,0x0
c0009c0f:	39 de                	cmp    esi,ebx
c0009c11:	75 dc                	jne    c0009bef <Phys::allocatePage()+0x19>
c0009c13:	83 ec 0c             	sub    esp,0xc
c0009c16:	80 35 6c 63 02 c0 01 	xor    BYTE PTR ds:0xc002636c,0x1
c0009c1d:	68 f8 2b 02 c0       	push   0xc0022bf8
c0009c22:	e8 0a 2b 00 00       	call   c000c731 <Dbg::kprintf(char const*, ...)>
c0009c27:	58                   	pop    eax
c0009c28:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0009c2d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009c30:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0009c36:	e8 85 27 00 00       	call   c000c3c0 <VAS::scanForEviction()>
c0009c3b:	83 c4 10             	add    esp,0x10
c0009c3e:	85 c0                	test   eax,eax
c0009c40:	75 62                	jne    c0009ca4 <Phys::allocatePage()+0xce>
c0009c42:	83 ec 0c             	sub    esp,0xc
c0009c45:	68 1c 2c 02 c0       	push   0xc0022c1c
c0009c4a:	e8 4c 8e 00 00       	call   c0012a9b <Krnl::panic(char const*)>
c0009c4f:	83 c4 10             	add    esp,0x10
c0009c52:	8b 1d 48 63 02 c0    	mov    ebx,DWORD PTR ds:0xc0026348
c0009c58:	53                   	push   ebx
c0009c59:	e8 d9 fe ff ff       	call   c0009b37 <Phys::getPageState(unsigned long)>
c0009c5e:	5a                   	pop    edx
c0009c5f:	84 c0                	test   al,al
c0009c61:	75 97                	jne    c0009bfa <Phys::allocatePage()+0x24>
c0009c63:	6a 01                	push   0x1
c0009c65:	53                   	push   ebx
c0009c66:	e8 9a fe ff ff       	call   c0009b05 <Phys::setPageState(unsigned long, bool)>
c0009c6b:	5a                   	pop    edx
c0009c6c:	a1 54 63 02 c0       	mov    eax,ds:0xc0026354
c0009c71:	59                   	pop    ecx
c0009c72:	40                   	inc    eax
c0009c73:	8b 15 48 63 02 c0    	mov    edx,DWORD PTR ds:0xc0026348
c0009c79:	a3 54 63 02 c0       	mov    ds:0xc0026354,eax
c0009c7e:	c1 e2 0c             	shl    edx,0xc
c0009c81:	52                   	push   edx
c0009c82:	ff 35 58 63 02 c0    	push   DWORD PTR ds:0xc0026358
c0009c88:	50                   	push   eax
c0009c89:	68 6d 2b 02 c0       	push   0xc0022b6d
c0009c8e:	e8 9e 2a 00 00       	call   c000c731 <Dbg::kprintf(char const*, ...)>
c0009c93:	a1 48 63 02 c0       	mov    eax,ds:0xc0026348
c0009c98:	83 c4 10             	add    esp,0x10
c0009c9b:	c1 e0 0c             	shl    eax,0xc
c0009c9e:	83 c4 14             	add    esp,0x14
c0009ca1:	5b                   	pop    ebx
c0009ca2:	5e                   	pop    esi
c0009ca3:	c3                   	ret    
c0009ca4:	83 ec 08             	sub    esp,0x8
c0009ca7:	89 c2                	mov    edx,eax
c0009ca9:	6a 01                	push   0x1
c0009cab:	c1 ea 0c             	shr    edx,0xc
c0009cae:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009cb2:	52                   	push   edx
c0009cb3:	e8 4d fe ff ff       	call   c0009b05 <Phys::setPageState(unsigned long, bool)>
c0009cb8:	83 c4 10             	add    esp,0x10
c0009cbb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009cbf:	eb dd                	jmp    c0009c9e <Phys::allocatePage()+0xc8>

c0009cc1 <Phys::allocateContiguousPages(int)>:
c0009cc1:	57                   	push   edi
c0009cc2:	56                   	push   esi
c0009cc3:	53                   	push   ebx
c0009cc4:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0009cc8:	fa                   	cli    
c0009cc9:	ff 05 08 98 02 c0    	inc    DWORD PTR ds:0xc0029808
c0009ccf:	31 db                	xor    ebx,ebx
c0009cd1:	85 db                	test   ebx,ebx
c0009cd3:	75 11                	jne    c0009ce6 <Phys::allocateContiguousPages(int)+0x25>
c0009cd5:	e8 fc fe ff ff       	call   c0009bd6 <Phys::allocatePage()>
c0009cda:	83 fe 01             	cmp    esi,0x1
c0009cdd:	89 c7                	mov    edi,eax
c0009cdf:	74 21                	je     c0009d02 <Phys::allocateContiguousPages(int)+0x41>
c0009ce1:	bb 01 00 00 00       	mov    ebx,0x1
c0009ce6:	e8 eb fe ff ff       	call   c0009bd6 <Phys::allocatePage()>
c0009ceb:	89 da                	mov    edx,ebx
c0009ced:	c1 e2 0c             	shl    edx,0xc
c0009cf0:	01 fa                	add    edx,edi
c0009cf2:	39 c2                	cmp    edx,eax
c0009cf4:	74 20                	je     c0009d16 <Phys::allocateContiguousPages(int)+0x55>
c0009cf6:	bb 01 00 00 00       	mov    ebx,0x1
c0009cfb:	89 c7                	mov    edi,eax
c0009cfd:	83 fe 01             	cmp    esi,0x1
c0009d00:	75 e4                	jne    c0009ce6 <Phys::allocateContiguousPages(int)+0x25>
c0009d02:	a1 08 98 02 c0       	mov    eax,ds:0xc0029808
c0009d07:	48                   	dec    eax
c0009d08:	a3 08 98 02 c0       	mov    ds:0xc0029808,eax
c0009d0d:	75 01                	jne    c0009d10 <Phys::allocateContiguousPages(int)+0x4f>
c0009d0f:	fb                   	sti    
c0009d10:	89 f8                	mov    eax,edi
c0009d12:	5b                   	pop    ebx
c0009d13:	5e                   	pop    esi
c0009d14:	5f                   	pop    edi
c0009d15:	c3                   	ret    
c0009d16:	43                   	inc    ebx
c0009d17:	39 f3                	cmp    ebx,esi
c0009d19:	75 b6                	jne    c0009cd1 <Phys::allocateContiguousPages(int)+0x10>
c0009d1b:	eb e5                	jmp    c0009d02 <Phys::allocateContiguousPages(int)+0x41>

c0009d1d <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0009d1d:	56                   	push   esi
c0009d1e:	53                   	push   ebx
c0009d1f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009d23:	39 1d 4c 63 02 c0    	cmp    DWORD PTR ds:0xc002634c,ebx
c0009d29:	73 06                	jae    c0009d31 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0009d2b:	89 1d 4c 63 02 c0    	mov    DWORD PTR ds:0xc002634c,ebx
c0009d31:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009d35:	c1 eb 0c             	shr    ebx,0xc
c0009d38:	c1 e8 0c             	shr    eax,0xc
c0009d3b:	39 d8                	cmp    eax,ebx
c0009d3d:	73 13                	jae    c0009d52 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c0009d3f:	6a 00                	push   0x0
c0009d41:	8d 70 01             	lea    esi,[eax+0x1]
c0009d44:	50                   	push   eax
c0009d45:	e8 bb fd ff ff       	call   c0009b05 <Phys::setPageState(unsigned long, bool)>
c0009d4a:	5a                   	pop    edx
c0009d4b:	89 f0                	mov    eax,esi
c0009d4d:	59                   	pop    ecx
c0009d4e:	39 f3                	cmp    ebx,esi
c0009d50:	75 ed                	jne    c0009d3f <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0009d52:	5b                   	pop    ebx
c0009d53:	5e                   	pop    esi
c0009d54:	c3                   	ret    

c0009d55 <Phys::physicalMemorySetup(unsigned int)>:
c0009d55:	55                   	push   ebp
c0009d56:	57                   	push   edi
c0009d57:	56                   	push   esi
c0009d58:	53                   	push   ebx
c0009d59:	31 db                	xor    ebx,ebx
c0009d5b:	83 ec 40             	sub    esp,0x40
c0009d5e:	6a 10                	push   0x10
c0009d60:	6a 00                	push   0x0
c0009d62:	68 5c 63 02 c0       	push   0xc002635c
c0009d67:	e8 3c 67 ff ff       	call   c00004a8 <memset>
c0009d6c:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0009d70:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009d75:	05 00 10 00 00       	add    eax,0x1000
c0009d7a:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0009d7e:	5a                   	pop    edx
c0009d7f:	59                   	pop    ecx
c0009d80:	50                   	push   eax
c0009d81:	68 8b 2b 02 c0       	push   0xc0022b8b
c0009d86:	e8 a6 29 00 00       	call   c000c731 <Dbg::kprintf(char const*, ...)>
c0009d8b:	83 c4 10             	add    esp,0x10
c0009d8e:	83 ec 08             	sub    esp,0x8
c0009d91:	6a 01                	push   0x1
c0009d93:	53                   	push   ebx
c0009d94:	43                   	inc    ebx
c0009d95:	e8 6b fd ff ff       	call   c0009b05 <Phys::setPageState(unsigned long, bool)>
c0009d9a:	83 c4 10             	add    esp,0x10
c0009d9d:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0009da3:	75 e9                	jne    c0009d8e <Phys::physicalMemorySetup(unsigned int)+0x39>
c0009da5:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c0009dac:	66 85 c0             	test   ax,ax
c0009daf:	0f 84 8e 01 00 00    	je     c0009f43 <Phys::physicalMemorySetup(unsigned int)+0x1ee>
c0009db5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009db9:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009dc1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0009dc5:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c0009dca:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009dce:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0009dd6:	eb 15                	jmp    c0009ded <Phys::physicalMemorySetup(unsigned int)+0x98>
c0009dd8:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0009ddc:	83 c3 18             	add    ebx,0x18
c0009ddf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009de3:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0009de7:	0f 84 66 01 00 00    	je     c0009f53 <Phys::physicalMemorySetup(unsigned int)+0x1fe>
c0009ded:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0009df0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0009df3:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0009df6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009dfa:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009dfe:	8b 33                	mov    esi,DWORD PTR [ebx]
c0009e00:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0009e03:	01 f0                	add    eax,esi
c0009e05:	55                   	push   ebp
c0009e06:	11 fa                	adc    edx,edi
c0009e08:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009e0c:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009e10:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009e14:	56                   	push   esi
c0009e15:	68 4c 2c 02 c0       	push   0xc0022c4c
c0009e1a:	e8 12 29 00 00       	call   c000c731 <Dbg::kprintf(char const*, ...)>
c0009e1f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009e23:	83 c4 10             	add    esp,0x10
c0009e26:	09 f8                	or     eax,edi
c0009e28:	0f 85 25 01 00 00    	jne    c0009f53 <Phys::physicalMemorySetup(unsigned int)+0x1fe>
c0009e2e:	4d                   	dec    ebp
c0009e2f:	75 a7                	jne    c0009dd8 <Phys::physicalMemorySetup(unsigned int)+0x83>
c0009e31:	ba 00 00 08 00       	mov    edx,0x80000
c0009e36:	89 c1                	mov    ecx,eax
c0009e38:	39 f2                	cmp    edx,esi
c0009e3a:	19 f9                	sbb    ecx,edi
c0009e3c:	0f 82 a7 00 00 00    	jb     c0009ee9 <Phys::physicalMemorySetup(unsigned int)+0x194>
c0009e42:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0009e46:	89 c1                	mov    ecx,eax
c0009e48:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c0009e4c:	0f 83 97 00 00 00    	jae    c0009ee9 <Phys::physicalMemorySetup(unsigned int)+0x194>
c0009e52:	ba 00 00 0a 00       	mov    edx,0xa0000
c0009e57:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0009e5b:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0009e5f:	39 fa                	cmp    edx,edi
c0009e61:	19 e8                	sbb    eax,ebp
c0009e63:	0f 82 9a 01 00 00    	jb     c000a003 <Phys::physicalMemorySetup(unsigned int)+0x2ae>
c0009e69:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0009e6d:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0009e71:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c0009e77:	ba ff 1f 00 00       	mov    edx,0x1fff
c0009e7c:	83 d5 ff             	adc    ebp,0xffffffff
c0009e7f:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0009e83:	31 c0                	xor    eax,eax
c0009e85:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c0009e89:	39 fa                	cmp    edx,edi
c0009e8b:	89 c1                	mov    ecx,eax
c0009e8d:	19 e9                	sbb    ecx,ebp
c0009e8f:	0f 83 43 ff ff ff    	jae    c0009dd8 <Phys::physicalMemorySetup(unsigned int)+0x83>
c0009e95:	be 00 00 08 00       	mov    esi,0x80000
c0009e9a:	51                   	push   ecx
c0009e9b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0009e9f:	57                   	push   edi
c0009ea0:	56                   	push   esi
c0009ea1:	68 70 2c 02 c0       	push   0xc0022c70
c0009ea6:	e8 86 28 00 00       	call   c000c731 <Dbg::kprintf(char const*, ...)>
c0009eab:	5d                   	pop    ebp
c0009eac:	58                   	pop    eax
c0009ead:	57                   	push   edi
c0009eae:	56                   	push   esi
c0009eaf:	e8 69 fe ff ff       	call   c0009d1d <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c0009eb4:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0009eb8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009ebc:	83 c4 0c             	add    esp,0xc
c0009ebf:	0f ac d0 0c          	shrd   eax,edx,0xc
c0009ec3:	03 05 58 63 02 c0    	add    eax,DWORD PTR ds:0xc0026358
c0009ec9:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0009ed0:	a3 58 63 02 c0       	mov    ds:0xc0026358,eax
c0009ed5:	52                   	push   edx
c0009ed6:	50                   	push   eax
c0009ed7:	68 b1 2b 02 c0       	push   0xc0022bb1
c0009edc:	e8 50 28 00 00       	call   c000c731 <Dbg::kprintf(char const*, ...)>
c0009ee1:	83 c4 10             	add    esp,0x10
c0009ee4:	e9 ef fe ff ff       	jmp    c0009dd8 <Phys::physicalMemorySetup(unsigned int)+0x83>
c0009ee9:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c0009eed:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009ef1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0009ef5:	39 ea                	cmp    edx,ebp
c0009ef7:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c0009efb:	0f 82 d7 fe ff ff    	jb     c0009dd8 <Phys::physicalMemorySetup(unsigned int)+0x83>
c0009f01:	ba ff 1f 00 00       	mov    edx,0x1fff
c0009f06:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0009f0a:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c0009f0e:	0f 83 c4 fe ff ff    	jae    c0009dd8 <Phys::physicalMemorySetup(unsigned int)+0x83>
c0009f14:	39 ee                	cmp    esi,ebp
c0009f16:	89 f8                	mov    eax,edi
c0009f18:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c0009f1c:	0f 83 78 ff ff ff    	jae    c0009e9a <Phys::physicalMemorySetup(unsigned int)+0x145>
c0009f22:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009f26:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009f2a:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0009f2e:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0009f32:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c0009f36:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009f3a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009f3e:	e9 57 ff ff ff       	jmp    c0009e9a <Phys::physicalMemorySetup(unsigned int)+0x145>
c0009f43:	83 ec 0c             	sub    esp,0xc
c0009f46:	68 a3 2b 02 c0       	push   0xc0022ba3
c0009f4b:	e8 4b 8b 00 00       	call   c0012a9b <Krnl::panic(char const*)>
c0009f50:	83 c4 10             	add    esp,0x10
c0009f53:	83 ec 08             	sub    esp,0x8
c0009f56:	bb 60 00 00 00       	mov    ebx,0x60
c0009f5b:	6a 00                	push   0x0
c0009f5d:	6a 06                	push   0x6
c0009f5f:	e8 a1 fb ff ff       	call   c0009b05 <Phys::setPageState(unsigned long, bool)>
c0009f64:	58                   	pop    eax
c0009f65:	5a                   	pop    edx
c0009f66:	6a 00                	push   0x0
c0009f68:	6a 07                	push   0x7
c0009f6a:	e8 96 fb ff ff       	call   c0009b05 <Phys::setPageState(unsigned long, bool)>
c0009f6f:	83 05 58 63 02 c0 02 	add    DWORD PTR ds:0xc0026358,0x2
c0009f76:	83 c4 10             	add    esp,0x10
c0009f79:	83 ec 08             	sub    esp,0x8
c0009f7c:	6a 00                	push   0x0
c0009f7e:	53                   	push   ebx
c0009f7f:	43                   	inc    ebx
c0009f80:	e8 80 fb ff ff       	call   c0009b05 <Phys::setPageState(unsigned long, bool)>
c0009f85:	83 c4 10             	add    esp,0x10
c0009f88:	81 fb 80 00 00 00    	cmp    ebx,0x80
c0009f8e:	75 e9                	jne    c0009f79 <Phys::physicalMemorySetup(unsigned int)+0x224>
c0009f90:	a1 58 63 02 c0       	mov    eax,ds:0xc0026358
c0009f95:	bb 40 01 00 00       	mov    ebx,0x140
c0009f9a:	83 c0 20             	add    eax,0x20
c0009f9d:	a3 58 63 02 c0       	mov    ds:0xc0026358,eax
c0009fa2:	eb 22                	jmp    c0009fc6 <Phys::physicalMemorySetup(unsigned int)+0x271>
c0009fa4:	83 ec 08             	sub    esp,0x8
c0009fa7:	6a 00                	push   0x0
c0009fa9:	53                   	push   ebx
c0009faa:	43                   	inc    ebx
c0009fab:	e8 55 fb ff ff       	call   c0009b05 <Phys::setPageState(unsigned long, bool)>
c0009fb0:	a1 58 63 02 c0       	mov    eax,ds:0xc0026358
c0009fb5:	83 c4 10             	add    esp,0x10
c0009fb8:	40                   	inc    eax
c0009fb9:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c0009fbf:	a3 58 63 02 c0       	mov    ds:0xc0026358,eax
c0009fc4:	74 07                	je     c0009fcd <Phys::physicalMemorySetup(unsigned int)+0x278>
c0009fc6:	3d ff 03 00 00       	cmp    eax,0x3ff
c0009fcb:	7e d7                	jle    c0009fa4 <Phys::physicalMemorySetup(unsigned int)+0x24f>
c0009fcd:	bb d0 01 00 00       	mov    ebx,0x1d0
c0009fd2:	3d ff 07 00 00       	cmp    eax,0x7ff
c0009fd7:	7f 22                	jg     c0009ffb <Phys::physicalMemorySetup(unsigned int)+0x2a6>
c0009fd9:	83 ec 08             	sub    esp,0x8
c0009fdc:	6a 00                	push   0x0
c0009fde:	53                   	push   ebx
c0009fdf:	43                   	inc    ebx
c0009fe0:	e8 20 fb ff ff       	call   c0009b05 <Phys::setPageState(unsigned long, bool)>
c0009fe5:	a1 58 63 02 c0       	mov    eax,ds:0xc0026358
c0009fea:	83 c4 10             	add    esp,0x10
c0009fed:	40                   	inc    eax
c0009fee:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c0009ff4:	a3 58 63 02 c0       	mov    ds:0xc0026358,eax
c0009ff9:	75 d7                	jne    c0009fd2 <Phys::physicalMemorySetup(unsigned int)+0x27d>
c0009ffb:	83 c4 3c             	add    esp,0x3c
c0009ffe:	5b                   	pop    ebx
c0009fff:	5e                   	pop    esi
c000a000:	5f                   	pop    edi
c000a001:	5d                   	pop    ebp
c000a002:	c3                   	ret    
c000a003:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c000a00b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000a013:	e9 51 fe ff ff       	jmp    c0009e69 <Phys::physicalMemorySetup(unsigned int)+0x114>

c000a018 <Pipe::isAtty()>:
c000a018:	31 c0                	xor    eax,eax
c000a01a:	c3                   	ret    
c000a01b:	90                   	nop

c000a01c <Pipe::~Pipe()>:
c000a01c:	83 ec 0c             	sub    esp,0xc
c000a01f:	ba dc 2c 02 c0       	mov    edx,0xc0022cdc
c000a024:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a028:	89 10                	mov    DWORD PTR [eax],edx
c000a02a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a02e:	83 ec 0c             	sub    esp,0xc
c000a031:	50                   	push   eax
c000a032:	e8 3d 11 00 00       	call   c000b174 <UnixFile::~UnixFile()>
c000a037:	83 c4 10             	add    esp,0x10
c000a03a:	90                   	nop
c000a03b:	83 c4 0c             	add    esp,0xc
c000a03e:	c3                   	ret    
c000a03f:	90                   	nop

c000a040 <Pipe::~Pipe()>:
c000a040:	83 ec 0c             	sub    esp,0xc
c000a043:	83 ec 0c             	sub    esp,0xc
c000a046:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a04a:	e8 cd ff ff ff       	call   c000a01c <Pipe::~Pipe()>
c000a04f:	83 c4 10             	add    esp,0x10
c000a052:	83 ec 08             	sub    esp,0x8
c000a055:	6a 20                	push   0x20
c000a057:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a05b:	e8 f0 25 00 00       	call   c000c650 <operator delete(void*, unsigned long)>
c000a060:	83 c4 10             	add    esp,0x10
c000a063:	83 c4 0c             	add    esp,0xc
c000a066:	c3                   	ret    
c000a067:	90                   	nop

c000a068 <Pipe::write(unsigned long long, void*, int*)>:
c000a068:	55                   	push   ebp
c000a069:	57                   	push   edi
c000a06a:	56                   	push   esi
c000a06b:	53                   	push   ebx
c000a06c:	83 ec 1c             	sub    esp,0x1c
c000a06f:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000a073:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a077:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c000a07a:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000a07e:	89 04 24             	mov    DWORD PTR [esp],eax
c000a081:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a085:	89 d8                	mov    eax,ebx
c000a087:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000a08a:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000a08e:	89 d6                	mov    esi,edx
c000a090:	89 d7                	mov    edi,edx
c000a092:	c1 ff 1f             	sar    edi,0x1f
c000a095:	03 34 24             	add    esi,DWORD PTR [esp]
c000a098:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c000a09c:	c1 f8 1f             	sar    eax,0x1f
c000a09f:	39 f3                	cmp    ebx,esi
c000a0a1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a0a5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a0a9:	19 f8                	sbb    eax,edi
c000a0ab:	b8 01 00 00 00       	mov    eax,0x1
c000a0b0:	72 6e                	jb     c000a120 <Pipe::write(unsigned long long, void*, int*)+0xb8>
c000a0b2:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000a0b5:	01 d0                	add    eax,edx
c000a0b7:	99                   	cdq    
c000a0b8:	f7 fb                	idiv   ebx
c000a0ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a0be:	29 d3                	sub    ebx,edx
c000a0c0:	89 d7                	mov    edi,edx
c000a0c2:	89 de                	mov    esi,ebx
c000a0c4:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000a0c7:	c1 fb 1f             	sar    ebx,0x1f
c000a0ca:	39 f2                	cmp    edx,esi
c000a0cc:	19 d8                	sbb    eax,ebx
c000a0ce:	b8 00 00 00 00       	mov    eax,0x0
c000a0d3:	72 04                	jb     c000a0d9 <Pipe::write(unsigned long long, void*, int*)+0x71>
c000a0d5:	89 d0                	mov    eax,edx
c000a0d7:	29 f0                	sub    eax,esi
c000a0d9:	89 d3                	mov    ebx,edx
c000a0db:	29 c3                	sub    ebx,eax
c000a0dd:	74 0b                	je     c000a0ea <Pipe::write(unsigned long long, void*, int*)+0x82>
c000a0df:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c000a0e2:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000a0e6:	89 d9                	mov    ecx,ebx
c000a0e8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a0ea:	85 c0                	test   eax,eax
c000a0ec:	74 0d                	je     c000a0fb <Pipe::write(unsigned long long, void*, int*)+0x93>
c000a0ee:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000a0f2:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c000a0f5:	89 de                	mov    esi,ebx
c000a0f7:	89 c1                	mov    ecx,eax
c000a0f9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a0fb:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c000a0fe:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000a103:	75 10                	jne    c000a115 <Pipe::write(unsigned long long, void*, int*)+0xad>
c000a105:	83 ec 0c             	sub    esp,0xc
c000a108:	68 99 2c 02 c0       	push   0xc0022c99
c000a10d:	e8 89 89 00 00       	call   c0012a9b <Krnl::panic(char const*)>
c000a112:	83 c4 10             	add    esp,0x10
c000a115:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000a119:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000a11c:	89 08                	mov    DWORD PTR [eax],ecx
c000a11e:	31 c0                	xor    eax,eax
c000a120:	83 c4 1c             	add    esp,0x1c
c000a123:	5b                   	pop    ebx
c000a124:	5e                   	pop    esi
c000a125:	5f                   	pop    edi
c000a126:	5d                   	pop    ebp
c000a127:	c3                   	ret    

c000a128 <Pipe::read(unsigned long long, void*, int*)>:
c000a128:	55                   	push   ebp
c000a129:	57                   	push   edi
c000a12a:	56                   	push   esi
c000a12b:	53                   	push   ebx
c000a12c:	83 ec 1c             	sub    esp,0x1c
c000a12f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000a133:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000a137:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000a13b:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000a13e:	89 c8                	mov    eax,ecx
c000a140:	99                   	cdq    
c000a141:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c000a145:	74 24                	je     c000a16b <Pipe::read(unsigned long long, void*, int*)+0x43>
c000a147:	39 f9                	cmp    ecx,edi
c000a149:	89 d1                	mov    ecx,edx
c000a14b:	19 f1                	sbb    ecx,esi
c000a14d:	73 1c                	jae    c000a16b <Pipe::read(unsigned long long, void*, int*)+0x43>
c000a14f:	fa                   	cli    
c000a150:	ff 05 08 98 02 c0    	inc    DWORD PTR ds:0xc0029808
c000a156:	e8 85 be 00 00       	call   c0015fe0 <schedule()>
c000a15b:	a1 08 98 02 c0       	mov    eax,ds:0xc0029808
c000a160:	48                   	dec    eax
c000a161:	a3 08 98 02 c0       	mov    ds:0xc0029808,eax
c000a166:	75 d3                	jne    c000a13b <Pipe::read(unsigned long long, void*, int*)+0x13>
c000a168:	fb                   	sti    
c000a169:	eb d0                	jmp    c000a13b <Pipe::read(unsigned long long, void*, int*)+0x13>
c000a16b:	39 f8                	cmp    eax,edi
c000a16d:	89 d1                	mov    ecx,edx
c000a16f:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a172:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000a176:	19 f1                	sbb    ecx,esi
c000a178:	73 07                	jae    c000a181 <Pipe::read(unsigned long long, void*, int*)+0x59>
c000a17a:	89 04 24             	mov    DWORD PTR [esp],eax
c000a17d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a181:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c000a184:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000a187:	29 f7                	sub    edi,esi
c000a189:	89 f8                	mov    eax,edi
c000a18b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000a18f:	99                   	cdq    
c000a190:	39 3c 24             	cmp    DWORD PTR [esp],edi
c000a193:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a197:	19 d0                	sbb    eax,edx
c000a199:	73 07                	jae    c000a1a2 <Pipe::read(unsigned long long, void*, int*)+0x7a>
c000a19b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000a19e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a1a2:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000a1a5:	89 ea                	mov    edx,ebp
c000a1a7:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c000a1ab:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000a1b0:	74 0d                	je     c000a1bf <Pipe::read(unsigned long long, void*, int*)+0x97>
c000a1b2:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000a1b5:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000a1b9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000a1bd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a1bf:	85 d2                	test   edx,edx
c000a1c1:	74 11                	je     c000a1d4 <Pipe::read(unsigned long long, void*, int*)+0xac>
c000a1c3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a1c7:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c000a1ca:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000a1ce:	89 d1                	mov    ecx,edx
c000a1d0:	89 c7                	mov    edi,eax
c000a1d2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a1d4:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a1d7:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c000a1da:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000a1dd:	99                   	cdq    
c000a1de:	89 f7                	mov    edi,esi
c000a1e0:	03 04 24             	add    eax,DWORD PTR [esp]
c000a1e3:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c000a1e7:	c1 ff 1f             	sar    edi,0x1f
c000a1ea:	57                   	push   edi
c000a1eb:	56                   	push   esi
c000a1ec:	52                   	push   edx
c000a1ed:	50                   	push   eax
c000a1ee:	e8 ad 73 01 00       	call   c00215a0 <__umoddi3>
c000a1f3:	83 c4 10             	add    esp,0x10
c000a1f6:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000a1f9:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000a1fe:	75 10                	jne    c000a210 <Pipe::read(unsigned long long, void*, int*)+0xe8>
c000a200:	83 ec 0c             	sub    esp,0xc
c000a203:	68 b6 2c 02 c0       	push   0xc0022cb6
c000a208:	e8 8e 88 00 00       	call   c0012a9b <Krnl::panic(char const*)>
c000a20d:	83 c4 10             	add    esp,0x10
c000a210:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000a214:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000a217:	89 10                	mov    DWORD PTR [eax],edx
c000a219:	83 c4 1c             	add    esp,0x1c
c000a21c:	31 c0                	xor    eax,eax
c000a21e:	5b                   	pop    ebx
c000a21f:	5e                   	pop    esi
c000a220:	5f                   	pop    edi
c000a221:	5d                   	pop    ebp
c000a222:	c3                   	ret    
c000a223:	90                   	nop

c000a224 <Pipe::Pipe(int)>:
c000a224:	83 ec 0c             	sub    esp,0xc
c000a227:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a22b:	83 ec 08             	sub    esp,0x8
c000a22e:	6a 00                	push   0x0
c000a230:	50                   	push   eax
c000a231:	e8 5c 0d 00 00       	call   c000af92 <UnixFile::UnixFile(int)>
c000a236:	83 c4 10             	add    esp,0x10
c000a239:	ba dc 2c 02 c0       	mov    edx,0xc0022cdc
c000a23e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a242:	89 10                	mov    DWORD PTR [eax],edx
c000a244:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a248:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000a24c:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000a24f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a253:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000a25a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a25e:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c000a265:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a269:	83 ec 0c             	sub    esp,0xc
c000a26c:	50                   	push   eax
c000a26d:	e8 25 f5 ff ff       	call   c0009797 <malloc>
c000a272:	83 c4 10             	add    esp,0x10
c000a275:	89 c2                	mov    edx,eax
c000a277:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a27b:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000a27e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a282:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c000a286:	90                   	nop
c000a287:	83 c4 0c             	add    esp,0xc
c000a28a:	c3                   	ret    
c000a28b:	90                   	nop

c000a28c <VgaText::isAtty()>:
c000a28c:	b0 01                	mov    al,0x1
c000a28e:	c3                   	ret    
c000a28f:	90                   	nop

c000a290 <VgaText::~VgaText()>:
c000a290:	83 ec 0c             	sub    esp,0xc
c000a293:	ba 64 2d 02 c0       	mov    edx,0xc0022d64
c000a298:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a29c:	89 10                	mov    DWORD PTR [eax],edx
c000a29e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a2a2:	83 ec 0c             	sub    esp,0xc
c000a2a5:	50                   	push   eax
c000a2a6:	e8 c9 0e 00 00       	call   c000b174 <UnixFile::~UnixFile()>
c000a2ab:	83 c4 10             	add    esp,0x10
c000a2ae:	90                   	nop
c000a2af:	83 c4 0c             	add    esp,0xc
c000a2b2:	c3                   	ret    
c000a2b3:	90                   	nop

c000a2b4 <VgaText::~VgaText()>:
c000a2b4:	83 ec 0c             	sub    esp,0xc
c000a2b7:	83 ec 0c             	sub    esp,0xc
c000a2ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2be:	e8 cd ff ff ff       	call   c000a290 <VgaText::~VgaText()>
c000a2c3:	83 c4 10             	add    esp,0x10
c000a2c6:	83 ec 08             	sub    esp,0x8
c000a2c9:	68 b4 01 00 00       	push   0x1b4
c000a2ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2d2:	e8 79 23 00 00       	call   c000c650 <operator delete(void*, unsigned long)>
c000a2d7:	83 c4 10             	add    esp,0x10
c000a2da:	83 c4 0c             	add    esp,0xc
c000a2dd:	c3                   	ret    

c000a2de <VgaText::read(unsigned long long, void*, int*)>:
c000a2de:	83 ec 10             	sub    esp,0x10
c000a2e1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a2e5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a2e9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2ed:	e8 1b 47 00 00       	call   c000ea0d <readKeyboard(VgaText*, char*, unsigned long)>
c000a2f2:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000a2f6:	89 02                	mov    DWORD PTR [edx],eax
c000a2f8:	31 c0                	xor    eax,eax
c000a2fa:	83 c4 1c             	add    esp,0x1c
c000a2fd:	c3                   	ret    

c000a2fe <setTerminalScrollLock(bool)>:
c000a2fe:	c3                   	ret    

c000a2ff <addToTerminalCycle(VgaText*)>:
c000a2ff:	8b 15 70 63 02 c0    	mov    edx,DWORD PTR ds:0xc0026370
c000a305:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a309:	85 d2                	test   edx,edx
c000a30b:	75 09                	jne    c000a316 <addToTerminalCycle(VgaText*)+0x17>
c000a30d:	89 40 24             	mov    DWORD PTR [eax+0x24],eax
c000a310:	a3 70 63 02 c0       	mov    ds:0xc0026370,eax
c000a315:	c3                   	ret    
c000a316:	8b 4a 24             	mov    ecx,DWORD PTR [edx+0x24]
c000a319:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c000a31c:	89 48 24             	mov    DWORD PTR [eax+0x24],ecx
c000a31f:	c3                   	ret    

c000a320 <scrollTerminalScrollLock(int)>:
c000a320:	c3                   	ret    
c000a321:	90                   	nop

c000a322 <VgaText::updateTitle()>:
c000a322:	c3                   	ret    
c000a323:	90                   	nop

c000a324 <VgaText::load()>:
c000a324:	c3                   	ret    
c000a325:	90                   	nop

c000a326 <VgaText::updateCursor()>:
c000a326:	83 ec 14             	sub    esp,0x14
c000a329:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a32d:	ff 70 18             	push   DWORD PTR [eax+0x18]
c000a330:	ff 70 14             	push   DWORD PTR [eax+0x14]
c000a333:	e8 38 ff 00 00       	call   c001a270 <Hal::consoleCursorUpdate(int, int)>
c000a338:	83 c4 1c             	add    esp,0x1c
c000a33b:	c3                   	ret    

c000a33c <VgaText::doANSI_SGR(int)>:
c000a33c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a340:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a344:	85 d2                	test   edx,edx
c000a346:	75 0b                	jne    c000a353 <VgaText::doANSI_SGR(int)+0x17>
c000a348:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000a34b:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000a34e:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000a351:	eb 59                	jmp    c000a3ac <VgaText::doANSI_SGR(int)+0x70>
c000a353:	83 fa 07             	cmp    edx,0x7
c000a356:	75 0b                	jne    c000a363 <VgaText::doANSI_SGR(int)+0x27>
c000a358:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c000a35b:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c000a35e:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c000a361:	eb 49                	jmp    c000a3ac <VgaText::doANSI_SGR(int)+0x70>
c000a363:	83 fa 1b             	cmp    edx,0x1b
c000a366:	74 e0                	je     c000a348 <VgaText::doANSI_SGR(int)+0xc>
c000a368:	8d 4a e2             	lea    ecx,[edx-0x1e]
c000a36b:	83 f9 07             	cmp    ecx,0x7
c000a36e:	77 09                	ja     c000a379 <VgaText::doANSI_SGR(int)+0x3d>
c000a370:	8b 14 8d e0 59 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffda620]
c000a377:	eb 20                	jmp    c000a399 <VgaText::doANSI_SGR(int)+0x5d>
c000a379:	8d 4a d8             	lea    ecx,[edx-0x28]
c000a37c:	83 f9 07             	cmp    ecx,0x7
c000a37f:	77 09                	ja     c000a38a <VgaText::doANSI_SGR(int)+0x4e>
c000a381:	8b 14 8d e0 59 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffda620]
c000a388:	eb 22                	jmp    c000a3ac <VgaText::doANSI_SGR(int)+0x70>
c000a38a:	8d 4a a6             	lea    ecx,[edx-0x5a]
c000a38d:	83 f9 07             	cmp    ecx,0x7
c000a390:	77 0b                	ja     c000a39d <VgaText::doANSI_SGR(int)+0x61>
c000a392:	8b 14 95 98 58 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffda768]
c000a399:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000a39c:	c3                   	ret    
c000a39d:	8d 4a 9c             	lea    ecx,[edx-0x64]
c000a3a0:	83 f9 07             	cmp    ecx,0x7
c000a3a3:	77 0a                	ja     c000a3af <VgaText::doANSI_SGR(int)+0x73>
c000a3a5:	8b 14 95 70 58 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffda790]
c000a3ac:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000a3af:	c3                   	ret    

c000a3b0 <VgaText::setDefaultBgColour(VgaColour)>:
c000a3b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a3b4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a3b8:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000a3bb:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000a3be:	c3                   	ret    
c000a3bf:	90                   	nop

c000a3c0 <VgaText::setDefaultFgColour(VgaColour)>:
c000a3c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a3c4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a3c8:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c000a3cb:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000a3ce:	c3                   	ret    
c000a3cf:	90                   	nop

c000a3d0 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c000a3d0:	53                   	push   ebx
c000a3d1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a3d5:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000a3d9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000a3dd:	51                   	push   ecx
c000a3de:	e8 cd ff ff ff       	call   c000a3b0 <VgaText::setDefaultBgColour(VgaColour)>
c000a3e3:	58                   	pop    eax
c000a3e4:	5a                   	pop    edx
c000a3e5:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000a3e9:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000a3ed:	5b                   	pop    ebx
c000a3ee:	eb d0                	jmp    c000a3c0 <VgaText::setDefaultFgColour(VgaColour)>

c000a3f0 <VgaText::setTitleTextColour(VgaColour)>:
c000a3f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a3f4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a3f8:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c000a3fb:	c3                   	ret    

c000a3fc <VgaText::setTitleColour(VgaColour)>:
c000a3fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a400:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a404:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000a407:	c3                   	ret    

c000a408 <VgaText::setTitle(char*)>:
c000a408:	81 44 24 04 82 00 00 00 	add    DWORD PTR [esp+0x4],0x82
c000a410:	e9 4f 61 ff ff       	jmp    c0000564 <strcpy>
c000a415:	90                   	nop

c000a416 <VgaText::combineColours(unsigned char, unsigned char)>:
c000a416:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000a41a:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c000a41f:	83 e0 0f             	and    eax,0xf
c000a422:	c1 e2 04             	shl    edx,0x4
c000a425:	09 d0                	or     eax,edx
c000a427:	c3                   	ret    

c000a428 <VgaText::scrollScreen()>:
c000a428:	55                   	push   ebp
c000a429:	b9 01 00 00 00       	mov    ecx,0x1
c000a42e:	57                   	push   edi
c000a42f:	56                   	push   esi
c000a430:	53                   	push   ebx
c000a431:	83 ec 0c             	sub    esp,0xc
c000a434:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000a438:	69 f1 a0 00 00 00    	imul   esi,ecx,0xa0
c000a43e:	31 ff                	xor    edi,edi
c000a440:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a443:	83 f9 18             	cmp    ecx,0x18
c000a446:	8a 14 30             	mov    dl,BYTE PTR [eax+esi*1]
c000a449:	88 94 30 60 ff ff ff 	mov    BYTE PTR [eax+esi*1-0xa0],dl
c000a450:	75 27                	jne    c000a479 <VgaText::scrollScreen()+0x51>
c000a452:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000a455:	01 f5                	add    ebp,esi
c000a457:	f7 c7 01 00 00 00    	test   edi,0x1
c000a45d:	74 16                	je     c000a475 <VgaText::scrollScreen()+0x4d>
c000a45f:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c000a463:	50                   	push   eax
c000a464:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c000a468:	50                   	push   eax
c000a469:	e8 a8 ff ff ff       	call   c000a416 <VgaText::combineColours(unsigned char, unsigned char)>
c000a46e:	5a                   	pop    edx
c000a46f:	5a                   	pop    edx
c000a470:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c000a473:	eb 04                	jmp    c000a479 <VgaText::scrollScreen()+0x51>
c000a475:	c6 45 00 20          	mov    BYTE PTR [ebp+0x0],0x20
c000a479:	47                   	inc    edi
c000a47a:	46                   	inc    esi
c000a47b:	81 ff a0 00 00 00    	cmp    edi,0xa0
c000a481:	75 bd                	jne    c000a440 <VgaText::scrollScreen()+0x18>
c000a483:	41                   	inc    ecx
c000a484:	83 f9 19             	cmp    ecx,0x19
c000a487:	75 af                	jne    c000a438 <VgaText::scrollScreen()+0x10>
c000a489:	39 1d 74 63 02 c0    	cmp    DWORD PTR ds:0xc0026374,ebx
c000a48f:	75 1f                	jne    c000a4b0 <VgaText::scrollScreen()+0x88>
c000a491:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c000a495:	74 05                	je     c000a49c <VgaText::scrollScreen()+0x74>
c000a497:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c000a49a:	eb 14                	jmp    c000a4b0 <VgaText::scrollScreen()+0x88>
c000a49c:	50                   	push   eax
c000a49d:	50                   	push   eax
c000a49e:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c000a4a2:	50                   	push   eax
c000a4a3:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c000a4a7:	50                   	push   eax
c000a4a8:	e8 57 fc 00 00       	call   c001a104 <Hal::consoleScroll(int, int)>
c000a4ad:	83 c4 10             	add    esp,0x10
c000a4b0:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000a4b4:	83 c4 0c             	add    esp,0xc
c000a4b7:	5b                   	pop    ebx
c000a4b8:	5e                   	pop    esi
c000a4b9:	5f                   	pop    edi
c000a4ba:	5d                   	pop    ebp
c000a4bb:	e9 66 fe ff ff       	jmp    c000a326 <VgaText::updateCursor()>

c000a4c0 <VgaText::combineCharAndColour(char, unsigned char)>:
c000a4c0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000a4c5:	c1 e0 08             	shl    eax,0x8
c000a4c8:	89 c2                	mov    edx,eax
c000a4ca:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000a4cf:	09 d0                	or     eax,edx
c000a4d1:	c3                   	ret    

c000a4d2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c000a4d2:	55                   	push   ebp
c000a4d3:	57                   	push   edi
c000a4d4:	56                   	push   esi
c000a4d5:	53                   	push   ebx
c000a4d6:	83 ec 1c             	sub    esp,0x1c
c000a4d9:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000a4dd:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a4e1:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000a4e5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a4e9:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000a4ed:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000a4f1:	0f b6 c3             	movzx  eax,bl
c000a4f4:	50                   	push   eax
c000a4f5:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c000a4fa:	50                   	push   eax
c000a4fb:	e8 16 ff ff ff       	call   c000a416 <VgaText::combineColours(unsigned char, unsigned char)>
c000a500:	5a                   	pop    edx
c000a501:	0f b6 c0             	movzx  eax,al
c000a504:	59                   	pop    ecx
c000a505:	0f be 4c 24 34       	movsx  ecx,BYTE PTR [esp+0x34]
c000a50a:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000a50e:	50                   	push   eax
c000a50f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a513:	e8 a8 ff ff ff       	call   c000a4c0 <VgaText::combineCharAndColour(char, unsigned char)>
c000a518:	5a                   	pop    edx
c000a519:	66 6b d7 50          	imul   dx,di,0x50
c000a51d:	59                   	pop    ecx
c000a51e:	01 f2                	add    edx,esi
c000a520:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c000a523:	0f b7 d2             	movzx  edx,dx
c000a526:	66 89 04 51          	mov    WORD PTR [ecx+edx*2],ax
c000a52a:	39 2d 74 63 02 c0    	cmp    DWORD PTR ds:0xc0026374,ebp
c000a530:	75 28                	jne    c000a55a <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x88>
c000a532:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a536:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c000a53a:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
c000a53e:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c000a542:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a546:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000a54a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a54e:	83 c4 1c             	add    esp,0x1c
c000a551:	5b                   	pop    ebx
c000a552:	5e                   	pop    esi
c000a553:	5f                   	pop    edi
c000a554:	5d                   	pop    ebp
c000a555:	e9 b2 fc 00 00       	jmp    c001a20c <Hal::consoleWriteCharacter(char, int, int, int, int)>
c000a55a:	83 c4 1c             	add    esp,0x1c
c000a55d:	5b                   	pop    ebx
c000a55e:	5e                   	pop    esi
c000a55f:	5f                   	pop    edi
c000a560:	5d                   	pop    ebp
c000a561:	c3                   	ret    

c000a562 <VgaText::getCursorX()>:
c000a562:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a566:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c000a569:	c3                   	ret    

c000a56a <VgaText::getCursorY()>:
c000a56a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a56e:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c000a571:	c3                   	ret    

c000a572 <VgaText::setCursor(int, int)>:
c000a572:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a576:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a57a:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c000a57d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a581:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000a584:	e9 9d fd ff ff       	jmp    c000a326 <VgaText::updateCursor()>

c000a589 <setActiveTerminal(VgaText*)>:
c000a589:	53                   	push   ebx
c000a58a:	83 ec 08             	sub    esp,0x8
c000a58d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000a591:	85 db                	test   ebx,ebx
c000a593:	75 11                	jne    c000a5a6 <setActiveTerminal(VgaText*)+0x1d>
c000a595:	c7 44 24 10 f0 2c 02 c0 	mov    DWORD PTR [esp+0x10],0xc0022cf0
c000a59d:	83 c4 08             	add    esp,0x8
c000a5a0:	5b                   	pop    ebx
c000a5a1:	e9 f5 84 00 00       	jmp    c0012a9b <Krnl::panic(char const*)>
c000a5a6:	a1 74 63 02 c0       	mov    eax,ds:0xc0026374
c000a5ab:	85 c0                	test   eax,eax
c000a5ad:	74 0c                	je     c000a5bb <setActiveTerminal(VgaText*)+0x32>
c000a5af:	83 ec 0c             	sub    esp,0xc
c000a5b2:	50                   	push   eax
c000a5b3:	e8 6e fd ff ff       	call   c000a326 <VgaText::updateCursor()>
c000a5b8:	83 c4 10             	add    esp,0x10
c000a5bb:	89 1d 74 63 02 c0    	mov    DWORD PTR ds:0xc0026374,ebx
c000a5c1:	51                   	push   ecx
c000a5c2:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000a5c5:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000a5c8:	53                   	push   ebx
c000a5c9:	e8 a4 ff ff ff       	call   c000a572 <VgaText::setCursor(int, int)>
c000a5ce:	83 c4 10             	add    esp,0x10
c000a5d1:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c000a5d5:	75 07                	jne    c000a5de <setActiveTerminal(VgaText*)+0x55>
c000a5d7:	c7 43 5c 00 00 00 00 	mov    DWORD PTR [ebx+0x5c],0x0
c000a5de:	83 c4 08             	add    esp,0x8
c000a5e1:	5b                   	pop    ebx
c000a5e2:	c3                   	ret    

c000a5e3 <doTerminalCycle()>:
c000a5e3:	83 ec 18             	sub    esp,0x18
c000a5e6:	a1 70 63 02 c0       	mov    eax,ds:0xc0026370
c000a5eb:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c000a5ee:	50                   	push   eax
c000a5ef:	a3 70 63 02 c0       	mov    ds:0xc0026370,eax
c000a5f4:	e8 90 ff ff ff       	call   c000a589 <setActiveTerminal(VgaText*)>
c000a5f9:	83 c4 1c             	add    esp,0x1c
c000a5fc:	c3                   	ret    
c000a5fd:	90                   	nop

c000a5fe <VgaText::clearScreen()>:
c000a5fe:	57                   	push   edi
c000a5ff:	56                   	push   esi
c000a600:	31 f6                	xor    esi,esi
c000a602:	53                   	push   ebx
c000a603:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000a607:	52                   	push   edx
c000a608:	6a 00                	push   0x0
c000a60a:	6a 00                	push   0x0
c000a60c:	53                   	push   ebx
c000a60d:	e8 60 ff ff ff       	call   c000a572 <VgaText::setCursor(int, int)>
c000a612:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c000a619:	83 c4 10             	add    esp,0x10
c000a61c:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c000a61f:	7e 20                	jle    c000a641 <VgaText::clearScreen()+0x43>
c000a621:	31 ff                	xor    edi,edi
c000a623:	50                   	push   eax
c000a624:	50                   	push   eax
c000a625:	56                   	push   esi
c000a626:	57                   	push   edi
c000a627:	47                   	inc    edi
c000a628:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000a62b:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000a62e:	6a 20                	push   0x20
c000a630:	53                   	push   ebx
c000a631:	e8 9c fe ff ff       	call   c000a4d2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000a636:	83 c4 20             	add    esp,0x20
c000a639:	83 ff 50             	cmp    edi,0x50
c000a63c:	75 e5                	jne    c000a623 <VgaText::clearScreen()+0x25>
c000a63e:	46                   	inc    esi
c000a63f:	eb db                	jmp    c000a61c <VgaText::clearScreen()+0x1e>
c000a641:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c000a648:	5b                   	pop    ebx
c000a649:	5e                   	pop    esi
c000a64a:	5f                   	pop    edi
c000a64b:	c3                   	ret    

c000a64c <VgaText::setCursorX(int)>:
c000a64c:	83 ec 10             	sub    esp,0x10
c000a64f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a653:	ff 70 18             	push   DWORD PTR [eax+0x18]
c000a656:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a65a:	50                   	push   eax
c000a65b:	e8 12 ff ff ff       	call   c000a572 <VgaText::setCursor(int, int)>
c000a660:	83 c4 1c             	add    esp,0x1c
c000a663:	c3                   	ret    

c000a664 <VgaText::setCursorY(int)>:
c000a664:	83 ec 10             	sub    esp,0x10
c000a667:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a66b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a66f:	ff 70 14             	push   DWORD PTR [eax+0x14]
c000a672:	50                   	push   eax
c000a673:	e8 fa fe ff ff       	call   c000a572 <VgaText::setCursor(int, int)>
c000a678:	83 c4 1c             	add    esp,0x1c
c000a67b:	c3                   	ret    

c000a67c <VgaText::incrementCursor(bool)>:
c000a67c:	56                   	push   esi
c000a67d:	53                   	push   ebx
c000a67e:	51                   	push   ecx
c000a67f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000a683:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000a687:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000a68a:	40                   	inc    eax
c000a68b:	83 f8 50             	cmp    eax,0x50
c000a68e:	74 05                	je     c000a695 <VgaText::incrementCursor(bool)+0x19>
c000a690:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000a693:	eb 24                	jmp    c000a6b9 <VgaText::incrementCursor(bool)+0x3d>
c000a695:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a698:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a69f:	8d 50 01             	lea    edx,[eax+0x1]
c000a6a2:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c000a6a5:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c000a6a8:	75 0f                	jne    c000a6b9 <VgaText::incrementCursor(bool)+0x3d>
c000a6aa:	83 ec 0c             	sub    esp,0xc
c000a6ad:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000a6b0:	53                   	push   ebx
c000a6b1:	e8 72 fd ff ff       	call   c000a428 <VgaText::scrollScreen()>
c000a6b6:	83 c4 10             	add    esp,0x10
c000a6b9:	89 f0                	mov    eax,esi
c000a6bb:	84 c0                	test   al,al
c000a6bd:	74 0c                	je     c000a6cb <VgaText::incrementCursor(bool)+0x4f>
c000a6bf:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000a6c3:	5a                   	pop    edx
c000a6c4:	5b                   	pop    ebx
c000a6c5:	5e                   	pop    esi
c000a6c6:	e9 5b fc ff ff       	jmp    c000a326 <VgaText::updateCursor()>
c000a6cb:	58                   	pop    eax
c000a6cc:	5b                   	pop    ebx
c000a6cd:	5e                   	pop    esi
c000a6ce:	c3                   	ret    
c000a6cf:	90                   	nop

c000a6d0 <VgaText::decrementCursor(bool)>:
c000a6d0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a6d4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a6d8:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c000a6db:	85 c0                	test   eax,eax
c000a6dd:	74 04                	je     c000a6e3 <VgaText::decrementCursor(bool)+0x13>
c000a6df:	48                   	dec    eax
c000a6e0:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c000a6e3:	84 c9                	test   cl,cl
c000a6e5:	74 09                	je     c000a6f0 <VgaText::decrementCursor(bool)+0x20>
c000a6e7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a6eb:	e9 36 fc ff ff       	jmp    c000a326 <VgaText::updateCursor()>
c000a6f0:	c3                   	ret    
c000a6f1:	90                   	nop

c000a6f2 <VgaText::putchar(char, VgaColour, VgaColour)>:
c000a6f2:	53                   	push   ebx
c000a6f3:	83 ec 08             	sub    esp,0x8
c000a6f6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a6fa:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000a6fe:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a702:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000a706:	3c 07                	cmp    al,0x7
c000a708:	75 21                	jne    c000a72b <VgaText::putchar(char, VgaColour, VgaColour)+0x39>
c000a70a:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000a712:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c000a71a:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c000a722:	83 c4 08             	add    esp,0x8
c000a725:	5b                   	pop    ebx
c000a726:	e9 a0 2e 00 00       	jmp    c000d5cb <Krnl::beep(int, int, bool)>
c000a72b:	3c 0d                	cmp    al,0xd
c000a72d:	75 09                	jne    c000a738 <VgaText::putchar(char, VgaColour, VgaColour)+0x46>
c000a72f:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a736:	eb 2c                	jmp    c000a764 <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c000a738:	3c 0a                	cmp    al,0xa
c000a73a:	75 31                	jne    c000a76d <VgaText::putchar(char, VgaColour, VgaColour)+0x7b>
c000a73c:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a73f:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a746:	8d 50 01             	lea    edx,[eax+0x1]
c000a749:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c000a74c:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c000a74f:	75 0f                	jne    c000a760 <VgaText::putchar(char, VgaColour, VgaColour)+0x6e>
c000a751:	83 ec 0c             	sub    esp,0xc
c000a754:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000a757:	53                   	push   ebx
c000a758:	e8 cb fc ff ff       	call   c000a428 <VgaText::scrollScreen()>
c000a75d:	83 c4 10             	add    esp,0x10
c000a760:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000a764:	83 c4 08             	add    esp,0x8
c000a767:	5b                   	pop    ebx
c000a768:	e9 b9 fb ff ff       	jmp    c000a326 <VgaText::updateCursor()>
c000a76d:	3c 08                	cmp    al,0x8
c000a76f:	75 25                	jne    c000a796 <VgaText::putchar(char, VgaColour, VgaColour)+0xa4>
c000a771:	50                   	push   eax
c000a772:	50                   	push   eax
c000a773:	6a 01                	push   0x1
c000a775:	53                   	push   ebx
c000a776:	e8 55 ff ff ff       	call   c000a6d0 <VgaText::decrementCursor(bool)>
c000a77b:	5a                   	pop    edx
c000a77c:	59                   	pop    ecx
c000a77d:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000a780:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000a783:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000a786:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000a789:	6a 20                	push   0x20
c000a78b:	53                   	push   ebx
c000a78c:	e8 41 fd ff ff       	call   c000a4d2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000a791:	83 c4 28             	add    esp,0x28
c000a794:	5b                   	pop    ebx
c000a795:	c3                   	ret    
c000a796:	83 ec 08             	sub    esp,0x8
c000a799:	0f be c0             	movsx  eax,al
c000a79c:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000a79f:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000a7a2:	51                   	push   ecx
c000a7a3:	52                   	push   edx
c000a7a4:	50                   	push   eax
c000a7a5:	53                   	push   ebx
c000a7a6:	e8 27 fd ff ff       	call   c000a4d2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000a7ab:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c000a7af:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c000a7b7:	83 c4 28             	add    esp,0x28
c000a7ba:	5b                   	pop    ebx
c000a7bb:	e9 bc fe ff ff       	jmp    c000a67c <VgaText::incrementCursor(bool)>

c000a7c0 <VgaText::putchar(char)>:
c000a7c0:	56                   	push   esi
c000a7c1:	53                   	push   ebx
c000a7c2:	83 ec 14             	sub    esp,0x14
c000a7c5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000a7c9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000a7cd:	3c 5b                	cmp    al,0x5b
c000a7cf:	75 18                	jne    c000a7e9 <VgaText::putchar(char)+0x29>
c000a7d1:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c000a7d5:	74 1f                	je     c000a7f6 <VgaText::putchar(char)+0x36>
c000a7d7:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c000a7dd:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c000a7e4:	e9 bd 00 00 00       	jmp    c000a8a6 <VgaText::putchar(char)+0xe6>
c000a7e9:	3c 1b                	cmp    al,0x1b
c000a7eb:	75 09                	jne    c000a7f6 <VgaText::putchar(char)+0x36>
c000a7ed:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c000a7f1:	e9 b0 00 00 00       	jmp    c000a8a6 <VgaText::putchar(char)+0xe6>
c000a7f6:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c000a7f9:	84 c9                	test   cl,cl
c000a7fb:	0f 84 92 00 00 00    	je     c000a893 <VgaText::putchar(char)+0xd3>
c000a801:	8d 50 c0             	lea    edx,[eax-0x40]
c000a804:	80 fa 3e             	cmp    dl,0x3e
c000a807:	77 76                	ja     c000a87f <VgaText::putchar(char)+0xbf>
c000a809:	3c 6d                	cmp    al,0x6d
c000a80b:	75 47                	jne    c000a854 <VgaText::putchar(char)+0x94>
c000a80d:	31 f6                	xor    esi,esi
c000a80f:	31 d2                	xor    edx,edx
c000a811:	31 c0                	xor    eax,eax
c000a813:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c000a816:	7e 2d                	jle    c000a845 <VgaText::putchar(char)+0x85>
c000a818:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c000a81d:	80 fa 3b             	cmp    dl,0x3b
c000a820:	75 17                	jne    c000a839 <VgaText::putchar(char)+0x79>
c000a822:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c000a826:	50                   	push   eax
c000a827:	53                   	push   ebx
c000a828:	e8 0f fb ff ff       	call   c000a33c <VgaText::doANSI_SGR(int)>
c000a82d:	59                   	pop    ecx
c000a82e:	31 d2                	xor    edx,edx
c000a830:	58                   	pop    eax
c000a831:	31 c0                	xor    eax,eax
c000a833:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c000a837:	eb 09                	jmp    c000a842 <VgaText::putchar(char)+0x82>
c000a839:	6b c0 0a             	imul   eax,eax,0xa
c000a83c:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c000a840:	88 ca                	mov    dl,cl
c000a842:	46                   	inc    esi
c000a843:	eb ce                	jmp    c000a813 <VgaText::putchar(char)+0x53>
c000a845:	84 d2                	test   dl,dl
c000a847:	74 2e                	je     c000a877 <VgaText::putchar(char)+0xb7>
c000a849:	50                   	push   eax
c000a84a:	53                   	push   ebx
c000a84b:	e8 ec fa ff ff       	call   c000a33c <VgaText::doANSI_SGR(int)>
c000a850:	58                   	pop    eax
c000a851:	5a                   	pop    edx
c000a852:	eb 23                	jmp    c000a877 <VgaText::putchar(char)+0xb7>
c000a854:	3c 4a                	cmp    al,0x4a
c000a856:	75 1f                	jne    c000a877 <VgaText::putchar(char)+0xb7>
c000a858:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c000a85c:	75 19                	jne    c000a877 <VgaText::putchar(char)+0xb7>
c000a85e:	83 ec 0c             	sub    esp,0xc
c000a861:	53                   	push   ebx
c000a862:	e8 97 fd ff ff       	call   c000a5fe <VgaText::clearScreen()>
c000a867:	83 c4 0c             	add    esp,0xc
c000a86a:	6a 00                	push   0x0
c000a86c:	6a 00                	push   0x0
c000a86e:	53                   	push   ebx
c000a86f:	e8 fe fc ff ff       	call   c000a572 <VgaText::setCursor(int, int)>
c000a874:	83 c4 10             	add    esp,0x10
c000a877:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c000a87d:	eb 27                	jmp    c000a8a6 <VgaText::putchar(char)+0xe6>
c000a87f:	8b 53 54             	mov    edx,DWORD PTR [ebx+0x54]
c000a882:	83 fa 0e             	cmp    edx,0xe
c000a885:	7f 1f                	jg     c000a8a6 <VgaText::putchar(char)+0xe6>
c000a887:	8d 4a 01             	lea    ecx,[edx+0x1]
c000a88a:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c000a88d:	88 44 13 42          	mov    BYTE PTR [ebx+edx*1+0x42],al
c000a891:	eb 13                	jmp    c000a8a6 <VgaText::putchar(char)+0xe6>
c000a893:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000a896:	0f be c0             	movsx  eax,al
c000a899:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000a89c:	50                   	push   eax
c000a89d:	53                   	push   ebx
c000a89e:	e8 4f fe ff ff       	call   c000a6f2 <VgaText::putchar(char, VgaColour, VgaColour)>
c000a8a3:	83 c4 10             	add    esp,0x10
c000a8a6:	83 c4 14             	add    esp,0x14
c000a8a9:	5b                   	pop    ebx
c000a8aa:	5e                   	pop    esi
c000a8ab:	c3                   	ret    

c000a8ac <VgaText::putx(unsigned int)>:
c000a8ac:	57                   	push   edi
c000a8ad:	b9 11 00 00 00       	mov    ecx,0x11
c000a8b2:	56                   	push   esi
c000a8b3:	be fe 2c 02 c0       	mov    esi,0xc0022cfe
c000a8b8:	53                   	push   ebx
c000a8b9:	83 ec 20             	sub    esp,0x20
c000a8bc:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000a8c0:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c000a8c4:	fc                   	cld    
c000a8c5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a8c7:	be 08 00 00 00       	mov    esi,0x8
c000a8cc:	50                   	push   eax
c000a8cd:	50                   	push   eax
c000a8ce:	89 d8                	mov    eax,ebx
c000a8d0:	c1 e3 04             	shl    ebx,0x4
c000a8d3:	c1 e8 1c             	shr    eax,0x1c
c000a8d6:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c000a8db:	50                   	push   eax
c000a8dc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a8e0:	e8 db fe ff ff       	call   c000a7c0 <VgaText::putchar(char)>
c000a8e5:	83 c4 10             	add    esp,0x10
c000a8e8:	4e                   	dec    esi
c000a8e9:	75 e1                	jne    c000a8cc <VgaText::putx(unsigned int)+0x20>
c000a8eb:	83 c4 20             	add    esp,0x20
c000a8ee:	5b                   	pop    ebx
c000a8ef:	5e                   	pop    esi
c000a8f0:	5f                   	pop    edi
c000a8f1:	c3                   	ret    

c000a8f2 <VgaText::puts(char const*)>:
c000a8f2:	53                   	push   ebx
c000a8f3:	83 ec 08             	sub    esp,0x8
c000a8f6:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000a8fa:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a8fd:	84 c0                	test   al,al
c000a8ff:	74 12                	je     c000a913 <VgaText::puts(char const*)+0x21>
c000a901:	43                   	inc    ebx
c000a902:	51                   	push   ecx
c000a903:	51                   	push   ecx
c000a904:	50                   	push   eax
c000a905:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a909:	e8 b2 fe ff ff       	call   c000a7c0 <VgaText::putchar(char)>
c000a90e:	83 c4 10             	add    esp,0x10
c000a911:	eb e7                	jmp    c000a8fa <VgaText::puts(char const*)+0x8>
c000a913:	83 c4 08             	add    esp,0x8
c000a916:	5b                   	pop    ebx
c000a917:	c3                   	ret    

c000a918 <VgaText::write(unsigned long long, void*, int*)>:
c000a918:	55                   	push   ebp
c000a919:	57                   	push   edi
c000a91a:	56                   	push   esi
c000a91b:	53                   	push   ebx
c000a91c:	83 ec 0c             	sub    esp,0xc
c000a91f:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000a923:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000a927:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000a92b:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c000a932:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c000a935:	39 eb                	cmp    ebx,ebp
c000a937:	74 13                	je     c000a94c <VgaText::write(unsigned long long, void*, int*)+0x34>
c000a939:	43                   	inc    ebx
c000a93a:	50                   	push   eax
c000a93b:	50                   	push   eax
c000a93c:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c000a940:	50                   	push   eax
c000a941:	56                   	push   esi
c000a942:	e8 79 fe ff ff       	call   c000a7c0 <VgaText::putchar(char)>
c000a947:	83 c4 10             	add    esp,0x10
c000a94a:	eb e9                	jmp    c000a935 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c000a94c:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c000a953:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a957:	89 38                	mov    DWORD PTR [eax],edi
c000a959:	83 c4 0c             	add    esp,0xc
c000a95c:	31 c0                	xor    eax,eax
c000a95e:	5b                   	pop    ebx
c000a95f:	5e                   	pop    esi
c000a960:	5f                   	pop    edi
c000a961:	5d                   	pop    ebp
c000a962:	c3                   	ret    
c000a963:	90                   	nop

c000a964 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c000a964:	55                   	push   ebp
c000a965:	57                   	push   edi
c000a966:	56                   	push   esi
c000a967:	53                   	push   ebx
c000a968:	83 ec 0c             	sub    esp,0xc
c000a96b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000a96f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c000a974:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c000a97b:	50                   	push   eax
c000a97c:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c000a981:	50                   	push   eax
c000a982:	e8 8f fa ff ff       	call   c000a416 <VgaText::combineColours(unsigned char, unsigned char)>
c000a987:	5a                   	pop    edx
c000a988:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000a98d:	59                   	pop    ecx
c000a98e:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000a991:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000a995:	0f b7 f6             	movzx  esi,si
c000a998:	0f b6 e8             	movzx  ebp,al
c000a99b:	01 f6                	add    esi,esi
c000a99d:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000a9a0:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000a9a3:	84 c0                	test   al,al
c000a9a5:	0f 84 ef 00 00 00    	je     c000aa9a <VgaText::puts(char const*, VgaColour, VgaColour)+0x136>
c000a9ab:	3c 0d                	cmp    al,0xd
c000a9ad:	75 0c                	jne    c000a9bb <VgaText::puts(char const*, VgaColour, VgaColour)+0x57>
c000a9af:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a9b6:	e9 d9 00 00 00       	jmp    c000aa94 <VgaText::puts(char const*, VgaColour, VgaColour)+0x130>
c000a9bb:	3c 0a                	cmp    al,0xa
c000a9bd:	75 45                	jne    c000aa04 <VgaText::puts(char const*, VgaColour, VgaColour)+0xa0>
c000a9bf:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a9c2:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a9c9:	8d 48 01             	lea    ecx,[eax+0x1]
c000a9cc:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c000a9cf:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c000a9d2:	75 0f                	jne    c000a9e3 <VgaText::puts(char const*, VgaColour, VgaColour)+0x7f>
c000a9d4:	83 ec 0c             	sub    esp,0xc
c000a9d7:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000a9da:	53                   	push   ebx
c000a9db:	e8 48 fa ff ff       	call   c000a428 <VgaText::scrollScreen()>
c000a9e0:	83 c4 10             	add    esp,0x10
c000a9e3:	83 ec 0c             	sub    esp,0xc
c000a9e6:	53                   	push   ebx
c000a9e7:	e8 3a f9 ff ff       	call   c000a326 <VgaText::updateCursor()>
c000a9ec:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000a9f1:	83 c4 10             	add    esp,0x10
c000a9f4:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000a9f7:	0f b7 f6             	movzx  esi,si
c000a9fa:	01 f6                	add    esi,esi
c000a9fc:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000a9ff:	e9 90 00 00 00       	jmp    c000aa94 <VgaText::puts(char const*, VgaColour, VgaColour)+0x130>
c000aa04:	3c 08                	cmp    al,0x8
c000aa06:	75 35                	jne    c000aa3d <VgaText::puts(char const*, VgaColour, VgaColour)+0xd9>
c000aa08:	51                   	push   ecx
c000aa09:	51                   	push   ecx
c000aa0a:	6a 01                	push   0x1
c000aa0c:	53                   	push   ebx
c000aa0d:	e8 be fc ff ff       	call   c000a6d0 <VgaText::decrementCursor(bool)>
c000aa12:	5e                   	pop    esi
c000aa13:	58                   	pop    eax
c000aa14:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000aa17:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000aa1a:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000aa1d:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000aa20:	6a 20                	push   0x20
c000aa22:	53                   	push   ebx
c000aa23:	e8 aa fa ff ff       	call   c000a4d2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000aa28:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000aa2d:	83 c4 20             	add    esp,0x20
c000aa30:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000aa33:	0f b7 f6             	movzx  esi,si
c000aa36:	01 f6                	add    esi,esi
c000aa38:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000aa3b:	eb 57                	jmp    c000aa94 <VgaText::puts(char const*, VgaColour, VgaColour)+0x130>
c000aa3d:	52                   	push   edx
c000aa3e:	52                   	push   edx
c000aa3f:	55                   	push   ebp
c000aa40:	50                   	push   eax
c000aa41:	e8 7a fa ff ff       	call   c000a4c0 <VgaText::combineCharAndColour(char, unsigned char)>
c000aa46:	83 c4 10             	add    esp,0x10
c000aa49:	66 89 06             	mov    WORD PTR [esi],ax
c000aa4c:	39 1d 74 63 02 c0    	cmp    DWORD PTR ds:0xc0026374,ebx
c000aa52:	75 1d                	jne    c000aa71 <VgaText::puts(char const*, VgaColour, VgaColour)+0x10d>
c000aa54:	83 ec 0c             	sub    esp,0xc
c000aa57:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000aa5a:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000aa5d:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000aa61:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000aa65:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000aa68:	50                   	push   eax
c000aa69:	e8 9e f7 00 00       	call   c001a20c <Hal::consoleWriteCharacter(char, int, int, int, int)>
c000aa6e:	83 c4 20             	add    esp,0x20
c000aa71:	83 c6 02             	add    esi,0x2
c000aa74:	50                   	push   eax
c000aa75:	50                   	push   eax
c000aa76:	6a 00                	push   0x0
c000aa78:	53                   	push   ebx
c000aa79:	e8 fe fb ff ff       	call   c000a67c <VgaText::incrementCursor(bool)>
c000aa7e:	83 c4 10             	add    esp,0x10
c000aa81:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c000aa85:	75 0d                	jne    c000aa94 <VgaText::puts(char const*, VgaColour, VgaColour)+0x130>
c000aa87:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000aa8c:	0f b7 f6             	movzx  esi,si
c000aa8f:	01 f6                	add    esi,esi
c000aa91:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000aa94:	47                   	inc    edi
c000aa95:	e9 06 ff ff ff       	jmp    c000a9a0 <VgaText::puts(char const*, VgaColour, VgaColour)+0x3c>
c000aa9a:	83 ec 0c             	sub    esp,0xc
c000aa9d:	53                   	push   ebx
c000aa9e:	e8 83 f8 ff ff       	call   c000a326 <VgaText::updateCursor()>
c000aaa3:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c000aaaa:	83 c4 1c             	add    esp,0x1c
c000aaad:	5b                   	pop    ebx
c000aaae:	5e                   	pop    esi
c000aaaf:	5f                   	pop    edi
c000aab0:	5d                   	pop    ebp
c000aab1:	c3                   	ret    

c000aab2 <VgaText::VgaText(char const*)>:
c000aab2:	56                   	push   esi
c000aab3:	53                   	push   ebx
c000aab4:	83 ec 04             	sub    esp,0x4
c000aab7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aabb:	83 ec 08             	sub    esp,0x8
c000aabe:	6a 00                	push   0x0
c000aac0:	50                   	push   eax
c000aac1:	e8 cc 04 00 00       	call   c000af92 <UnixFile::UnixFile(int)>
c000aac6:	83 c4 10             	add    esp,0x10
c000aac9:	ba 64 2d 02 c0       	mov    edx,0xc0022d64
c000aace:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aad2:	89 10                	mov    DWORD PTR [eax],edx
c000aad4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aad8:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c000aadf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aae3:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c000aaea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aaee:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c000aaf2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aaf6:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c000aafa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aafe:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c000ab05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab09:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c000ab10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab14:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c000ab1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab1f:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c000ab26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab2a:	05 82 00 00 00       	add    eax,0x82
c000ab2f:	83 ec 08             	sub    esp,0x8
c000ab32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ab36:	50                   	push   eax
c000ab37:	e8 28 5a ff ff       	call   c0000564 <strcpy>
c000ab3c:	83 c4 10             	add    esp,0x10
c000ab3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab43:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c000ab4a:	83 ec 0c             	sub    esp,0xc
c000ab4d:	6a 01                	push   0x1
c000ab4f:	e8 81 08 00 00       	call   c000b3d5 <Virt::allocateKernelVirtualPages(int)>
c000ab54:	83 c4 10             	add    esp,0x10
c000ab57:	89 c2                	mov    edx,eax
c000ab59:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab5d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000ab60:	8b 1d 14 64 02 c0    	mov    ebx,DWORD PTR ds:0xc0026414
c000ab66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab6a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ab6d:	89 c6                	mov    esi,eax
c000ab6f:	e8 62 f0 ff ff       	call   c0009bd6 <Phys::allocatePage()>
c000ab74:	68 05 0c 00 00       	push   0xc05
c000ab79:	56                   	push   esi
c000ab7a:	50                   	push   eax
c000ab7b:	53                   	push   ebx
c000ab7c:	e8 bf 0e 00 00       	call   c000ba40 <VAS::mapPage(unsigned long, unsigned long, int)>
c000ab81:	83 c4 10             	add    esp,0x10
c000ab84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab88:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ab8b:	83 ec 04             	sub    esp,0x4
c000ab8e:	68 a0 0f 00 00       	push   0xfa0
c000ab93:	6a 00                	push   0x0
c000ab95:	50                   	push   eax
c000ab96:	e8 0d 59 ff ff       	call   c00004a8 <memset>
c000ab9b:	83 c4 10             	add    esp,0x10
c000ab9e:	83 ec 04             	sub    esp,0x4
c000aba1:	6a 00                	push   0x0
c000aba3:	6a 07                	push   0x7
c000aba5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aba9:	e8 22 f8 ff ff       	call   c000a3d0 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c000abae:	83 c4 10             	add    esp,0x10
c000abb1:	83 ec 04             	sub    esp,0x4
c000abb4:	6a 00                	push   0x0
c000abb6:	6a 00                	push   0x0
c000abb8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000abbc:	e8 b1 f9 ff ff       	call   c000a572 <VgaText::setCursor(int, int)>
c000abc1:	83 c4 10             	add    esp,0x10
c000abc4:	83 ec 0c             	sub    esp,0xc
c000abc7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000abcb:	e8 2e fa ff ff       	call   c000a5fe <VgaText::clearScreen()>
c000abd0:	83 c4 10             	add    esp,0x10
c000abd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000abd7:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c000abdb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000abdf:	05 02 01 00 00       	add    eax,0x102
c000abe4:	83 ec 04             	sub    esp,0x4
c000abe7:	6a 30                	push   0x30
c000abe9:	6a 00                	push   0x0
c000abeb:	50                   	push   eax
c000abec:	e8 b7 58 ff ff       	call   c00004a8 <memset>
c000abf1:	83 c4 10             	add    esp,0x10
c000abf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000abf8:	05 32 01 00 00       	add    eax,0x132
c000abfd:	83 ec 04             	sub    esp,0x4
c000ac00:	68 80 00 00 00       	push   0x80
c000ac05:	6a 00                	push   0x0
c000ac07:	50                   	push   eax
c000ac08:	e8 9b 58 ff ff       	call   c00004a8 <memset>
c000ac0d:	83 c4 10             	add    esp,0x10
c000ac10:	90                   	nop
c000ac11:	83 c4 04             	add    esp,0x4
c000ac14:	5b                   	pop    ebx
c000ac15:	5e                   	pop    esi
c000ac16:	c3                   	ret    
c000ac17:	90                   	nop

c000ac18 <VgaText::receiveKey(unsigned char)>:
c000ac18:	57                   	push   edi
c000ac19:	56                   	push   esi
c000ac1a:	53                   	push   ebx
c000ac1b:	83 ec 10             	sub    esp,0x10
c000ac1e:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c000ac22:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000ac26:	84 db                	test   bl,bl
c000ac28:	0f 84 ba 00 00 00    	je     c000ace8 <VgaText::receiveKey(unsigned char)+0xd0>
c000ac2e:	8d be 02 01 00 00    	lea    edi,[esi+0x102]
c000ac34:	80 fb 08             	cmp    bl,0x8
c000ac37:	75 2c                	jne    c000ac65 <VgaText::receiveKey(unsigned char)+0x4d>
c000ac39:	83 ec 0c             	sub    esp,0xc
c000ac3c:	57                   	push   edi
c000ac3d:	e8 82 58 ff ff       	call   c00004c4 <strlen>
c000ac42:	83 c4 10             	add    esp,0x10
c000ac45:	85 c0                	test   eax,eax
c000ac47:	74 41                	je     c000ac8a <VgaText::receiveKey(unsigned char)+0x72>
c000ac49:	50                   	push   eax
c000ac4a:	50                   	push   eax
c000ac4b:	6a 08                	push   0x8
c000ac4d:	56                   	push   esi
c000ac4e:	e8 6d fb ff ff       	call   c000a7c0 <VgaText::putchar(char)>
c000ac53:	89 3c 24             	mov    DWORD PTR [esp],edi
c000ac56:	e8 69 58 ff ff       	call   c00004c4 <strlen>
c000ac5b:	c6 84 06 01 01 00 00 00 	mov    BYTE PTR [esi+eax*1+0x101],0x0
c000ac63:	eb 22                	jmp    c000ac87 <VgaText::receiveKey(unsigned char)+0x6f>
c000ac65:	0f be c3             	movsx  eax,bl
c000ac68:	52                   	push   edx
c000ac69:	52                   	push   edx
c000ac6a:	50                   	push   eax
c000ac6b:	56                   	push   esi
c000ac6c:	e8 4f fb ff ff       	call   c000a7c0 <VgaText::putchar(char)>
c000ac71:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c000ac75:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000ac7a:	59                   	pop    ecx
c000ac7b:	58                   	pop    eax
c000ac7c:	8d 44 24 16          	lea    eax,[esp+0x16]
c000ac80:	50                   	push   eax
c000ac81:	57                   	push   edi
c000ac82:	e8 1d 5a ff ff       	call   c00006a4 <strcat>
c000ac87:	83 c4 10             	add    esp,0x10
c000ac8a:	80 be 80 00 00 00 00 	cmp    BYTE PTR [esi+0x80],0x0
c000ac91:	75 05                	jne    c000ac98 <VgaText::receiveKey(unsigned char)+0x80>
c000ac93:	80 fb 0a             	cmp    bl,0xa
c000ac96:	75 50                	jne    c000ace8 <VgaText::receiveKey(unsigned char)+0xd0>
c000ac98:	83 ec 0c             	sub    esp,0xc
c000ac9b:	81 c6 32 01 00 00    	add    esi,0x132
c000aca1:	56                   	push   esi
c000aca2:	e8 1d 58 ff ff       	call   c00004c4 <strlen>
c000aca7:	89 3c 24             	mov    DWORD PTR [esp],edi
c000acaa:	89 c3                	mov    ebx,eax
c000acac:	e8 13 58 ff ff       	call   c00004c4 <strlen>
c000acb1:	83 c4 10             	add    esp,0x10
c000acb4:	8d 44 03 04          	lea    eax,[ebx+eax*1+0x4]
c000acb8:	3d 80 00 00 00       	cmp    eax,0x80
c000acbd:	76 10                	jbe    c000accf <VgaText::receiveKey(unsigned char)+0xb7>
c000acbf:	83 ec 0c             	sub    esp,0xc
c000acc2:	68 0f 2d 02 c0       	push   0xc0022d0f
c000acc7:	e8 cf 7d 00 00       	call   c0012a9b <Krnl::panic(char const*)>
c000accc:	83 c4 10             	add    esp,0x10
c000accf:	50                   	push   eax
c000acd0:	50                   	push   eax
c000acd1:	57                   	push   edi
c000acd2:	56                   	push   esi
c000acd3:	e8 cc 59 ff ff       	call   c00006a4 <strcat>
c000acd8:	83 c4 0c             	add    esp,0xc
c000acdb:	6a 30                	push   0x30
c000acdd:	6a 00                	push   0x0
c000acdf:	57                   	push   edi
c000ace0:	e8 c3 57 ff ff       	call   c00004a8 <memset>
c000ace5:	83 c4 10             	add    esp,0x10
c000ace8:	83 c4 10             	add    esp,0x10
c000aceb:	5b                   	pop    ebx
c000acec:	5e                   	pop    esi
c000aced:	5f                   	pop    edi
c000acee:	c3                   	ret    
c000acef:	90                   	nop

c000acf0 <VgaText::doUpdate()>:
c000acf0:	c3                   	ret    

c000acf1 <newTerminal(char*)>:
c000acf1:	83 ec 28             	sub    esp,0x28
c000acf4:	68 b4 01 00 00       	push   0x1b4
c000acf9:	e8 99 ea ff ff       	call   c0009797 <malloc>
c000acfe:	5a                   	pop    edx
c000acff:	59                   	pop    ecx
c000ad00:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ad04:	50                   	push   eax
c000ad05:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ad09:	e8 a4 fd ff ff       	call   c000aab2 <VgaText::VgaText(char const*)>
c000ad0e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ad12:	83 c4 2c             	add    esp,0x2c
c000ad15:	c3                   	ret    
c000ad16:	66 90                	xchg   ax,ax

c000ad18 <TSS::TSS()>:
c000ad18:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ad1c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000ad23:	90                   	nop
c000ad24:	c3                   	ret    
c000ad25:	90                   	nop
c000ad26:	66 90                	xchg   ax,ax

c000ad28 <TSS::setESP(unsigned long)>:
c000ad28:	55                   	push   ebp
c000ad29:	89 e5                	mov    ebp,esp
c000ad2b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ad2e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ad31:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000ad34:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000ad37:	90                   	nop
c000ad38:	5d                   	pop    ebp
c000ad39:	c3                   	ret    
c000ad3a:	66 90                	xchg   ax,ax

c000ad3c <TSS::flush()>:
c000ad3c:	55                   	push   ebp
c000ad3d:	89 e5                	mov    ebp,esp
c000ad3f:	83 ec 10             	sub    esp,0x10
c000ad42:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ad45:	8b 00                	mov    eax,DWORD PTR [eax]
c000ad47:	83 c8 03             	or     eax,0x3
c000ad4a:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c000ad4e:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c000ad52:	66 89 d0             	mov    ax,dx
c000ad55:	0f 00 d8             	ltr    ax
c000ad58:	90                   	nop
c000ad59:	c9                   	leave  
c000ad5a:	c3                   	ret    
c000ad5b:	90                   	nop

c000ad5c <TSS::setup(unsigned long, unsigned long)>:
c000ad5c:	55                   	push   ebp
c000ad5d:	89 e5                	mov    ebp,esp
c000ad5f:	83 ec 18             	sub    esp,0x18
c000ad62:	83 ec 0c             	sub    esp,0xc
c000ad65:	6a 68                	push   0x68
c000ad67:	e8 2b ea ff ff       	call   c0009797 <malloc>
c000ad6c:	83 c4 10             	add    esp,0x10
c000ad6f:	89 c2                	mov    edx,eax
c000ad71:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ad74:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000ad77:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ad7a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ad7d:	83 ec 04             	sub    esp,0x4
c000ad80:	6a 68                	push   0x68
c000ad82:	6a 00                	push   0x0
c000ad84:	50                   	push   eax
c000ad85:	e8 1e 57 ff ff       	call   c00004a8 <memset>
c000ad8a:	83 c4 10             	add    esp,0x10
c000ad8d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ad90:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ad93:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c000ad99:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ad9c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ad9f:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c000ada5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ada8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000adab:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000adae:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000adb1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000adb4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000adb7:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c000adbd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000adc0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000adc3:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c000adc9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000adcc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000adcf:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c000add5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000add8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000addb:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c000ade1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ade4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ade7:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c000aded:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000adf0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000adf3:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c000adf9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000adfc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000adff:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c000ae02:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c000ae05:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ae08:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ae0b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000ae0e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000ae11:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ae14:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ae17:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c000ae1e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ae21:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ae24:	0f 20 da             	mov    edx,cr3
c000ae27:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c000ae2a:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c000ae2d:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000ae30:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ae33:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ae36:	83 ec 08             	sub    esp,0x8
c000ae39:	50                   	push   eax
c000ae3a:	8d 45 ec             	lea    eax,[ebp-0x14]
c000ae3d:	50                   	push   eax
c000ae3e:	e8 8d e1 ff ff       	call   c0008fd0 <GDTEntry::setBase(unsigned int)>
c000ae43:	83 c4 10             	add    esp,0x10
c000ae46:	83 ec 08             	sub    esp,0x8
c000ae49:	6a 68                	push   0x68
c000ae4b:	8d 45 ec             	lea    eax,[ebp-0x14]
c000ae4e:	50                   	push   eax
c000ae4f:	e8 98 e1 ff ff       	call   c0008fec <GDTEntry::setLimit(unsigned int)>
c000ae54:	83 c4 10             	add    esp,0x10
c000ae57:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c000ae5b:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c000ae5e:	83 e0 0f             	and    eax,0xf
c000ae61:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c000ae64:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c000ae67:	83 c8 40             	or     eax,0x40
c000ae6a:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c000ae6d:	a1 28 63 02 c0       	mov    eax,ds:0xc0026328
c000ae72:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000ae78:	05 78 01 00 00       	add    eax,0x178
c000ae7d:	83 ec 04             	sub    esp,0x4
c000ae80:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000ae83:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c000ae86:	50                   	push   eax
c000ae87:	e8 94 e1 ff ff       	call   c0009020 <GDT::addEntry(GDTEntry)>
c000ae8c:	83 c4 10             	add    esp,0x10
c000ae8f:	89 c2                	mov    edx,eax
c000ae91:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ae94:	89 10                	mov    DWORD PTR [eax],edx
c000ae96:	a1 28 63 02 c0       	mov    eax,ds:0xc0026328
c000ae9b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000aea1:	05 78 01 00 00       	add    eax,0x178
c000aea6:	83 ec 0c             	sub    esp,0xc
c000aea9:	50                   	push   eax
c000aeaa:	e8 9b e1 ff ff       	call   c000904a <GDT::flush()>
c000aeaf:	83 c4 10             	add    esp,0x10
c000aeb2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000aeb5:	8b 00                	mov    eax,DWORD PTR [eax]
c000aeb7:	c9                   	leave  
c000aeb8:	c3                   	ret    
c000aeb9:	90                   	nop

c000aeba <ReservedFilename::read(unsigned long long, void*, int*)>:
c000aeba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000aebe:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000aec2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000aec5:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c000aeca:	75 08                	jne    c000aed4 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c000aecc:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000aed2:	eb 38                	jmp    c000af0c <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c000aed4:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000aed9:	75 17                	jne    c000aef2 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c000aedb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000aee0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000aee3:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000aee9:	8b 10                	mov    edx,DWORD PTR [eax]
c000aeeb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000aeef:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c000aef2:	89 c1                	mov    ecx,eax
c000aef4:	83 e1 fd             	and    ecx,0xfffffffd
c000aef7:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c000aefd:	74 cd                	je     c000aecc <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c000aeff:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c000af04:	83 e0 ef             	and    eax,0xffffffef
c000af07:	83 f8 08             	cmp    eax,0x8
c000af0a:	76 c0                	jbe    c000aecc <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c000af0c:	31 c0                	xor    eax,eax
c000af0e:	c3                   	ret    
c000af0f:	90                   	nop

c000af10 <ReservedFilename::isAtty()>:
c000af10:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000af14:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000af17:	31 c0                	xor    eax,eax
c000af19:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c000af1f:	74 09                	je     c000af2a <ReservedFilename::isAtty()+0x1a>
c000af21:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c000af27:	0f 94 c0             	sete   al
c000af2a:	c3                   	ret    
c000af2b:	90                   	nop

c000af2c <ReservedFilename::write(unsigned long long, void*, int*)>:
c000af2c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000af30:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000af34:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000af37:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000af3b:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c000af40:	75 08                	jne    c000af4a <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c000af42:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000af48:	eb 3d                	jmp    c000af87 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000af4a:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000af4f:	75 17                	jne    c000af68 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c000af51:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000af56:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000af59:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000af5f:	8b 10                	mov    edx,DWORD PTR [eax]
c000af61:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000af65:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c000af68:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c000af6d:	75 04                	jne    c000af73 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c000af6f:	89 0a                	mov    DWORD PTR [edx],ecx
c000af71:	eb 14                	jmp    c000af87 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000af73:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c000af78:	74 c8                	je     c000af42 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c000af7a:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c000af7f:	83 e0 ef             	and    eax,0xffffffef
c000af82:	83 f8 08             	cmp    eax,0x8
c000af85:	76 bb                	jbe    c000af42 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c000af87:	31 c0                	xor    eax,eax
c000af89:	c3                   	ret    

c000af8a <UnixFile::getFileDescriptor()>:
c000af8a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000af8e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000af91:	c3                   	ret    

c000af92 <UnixFile::UnixFile(int)>:
c000af92:	53                   	push   ebx
c000af93:	83 ec 28             	sub    esp,0x28
c000af96:	ba 2c 2e 02 c0       	mov    edx,0xc0022e2c
c000af9b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000af9f:	89 10                	mov    DWORD PTR [eax],edx
c000afa1:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c000afa9:	0f 8f 8c 01 00 00    	jg     c000b13b <UnixFile::UnixFile(int)+0x1a9>
c000afaf:	a1 20 5a 02 c0       	mov    eax,ds:0xc0025a20
c000afb4:	8d 50 01             	lea    edx,[eax+0x1]
c000afb7:	89 15 20 5a 02 c0    	mov    DWORD PTR ds:0xc0025a20,edx
c000afbd:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000afc1:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000afc4:	83 ec 08             	sub    esp,0x8
c000afc7:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000afcb:	68 f8 63 02 c0       	push   0xc00263f8
c000afd0:	e8 b3 67 01 00       	call   c0021788 <LinkedList<UnixFile>::addElement(UnixFile*)>
c000afd5:	83 c4 10             	add    esp,0x10
c000afd8:	a0 f4 63 02 c0       	mov    al,ds:0xc00263f4
c000afdd:	83 f0 01             	xor    eax,0x1
c000afe0:	84 c0                	test   al,al
c000afe2:	0f 84 54 01 00 00    	je     c000b13c <UnixFile::UnixFile(int)+0x1aa>
c000afe8:	c6 05 f4 63 02 c0 01 	mov    BYTE PTR ds:0xc00263f4,0x1
c000afef:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c000aff7:	83 ec 0c             	sub    esp,0xc
c000affa:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000affe:	e8 94 e7 ff ff       	call   c0009797 <malloc>
c000b003:	83 c4 10             	add    esp,0x10
c000b006:	89 c3                	mov    ebx,eax
c000b008:	83 ec 08             	sub    esp,0x8
c000b00b:	68 03 ff ff 0f       	push   0xfffff03
c000b010:	53                   	push   ebx
c000b011:	e8 2c 01 00 00       	call   c000b142 <ReservedFilename::ReservedFilename(int)>
c000b016:	83 c4 10             	add    esp,0x10
c000b019:	89 1d ec 63 02 c0    	mov    DWORD PTR ds:0xc00263ec,ebx
c000b01f:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c000b027:	83 ec 0c             	sub    esp,0xc
c000b02a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b02e:	e8 64 e7 ff ff       	call   c0009797 <malloc>
c000b033:	83 c4 10             	add    esp,0x10
c000b036:	89 c3                	mov    ebx,eax
c000b038:	83 ec 08             	sub    esp,0x8
c000b03b:	68 01 ff ff 0f       	push   0xfffff01
c000b040:	53                   	push   ebx
c000b041:	e8 fc 00 00 00       	call   c000b142 <ReservedFilename::ReservedFilename(int)>
c000b046:	83 c4 10             	add    esp,0x10
c000b049:	89 1d f0 63 02 c0    	mov    DWORD PTR ds:0xc00263f0,ebx
c000b04f:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c000b057:	83 ec 0c             	sub    esp,0xc
c000b05a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b05e:	e8 34 e7 ff ff       	call   c0009797 <malloc>
c000b063:	83 c4 10             	add    esp,0x10
c000b066:	89 c3                	mov    ebx,eax
c000b068:	83 ec 08             	sub    esp,0x8
c000b06b:	68 00 ff ff 0f       	push   0xfffff00
c000b070:	53                   	push   ebx
c000b071:	e8 cc 00 00 00       	call   c000b142 <ReservedFilename::ReservedFilename(int)>
c000b076:	83 c4 10             	add    esp,0x10
c000b079:	89 1d e4 63 02 c0    	mov    DWORD PTR ds:0xc00263e4,ebx
c000b07f:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c000b087:	83 ec 0c             	sub    esp,0xc
c000b08a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b08e:	e8 04 e7 ff ff       	call   c0009797 <malloc>
c000b093:	83 c4 10             	add    esp,0x10
c000b096:	89 c3                	mov    ebx,eax
c000b098:	83 ec 08             	sub    esp,0x8
c000b09b:	68 02 ff ff 0f       	push   0xfffff02
c000b0a0:	53                   	push   ebx
c000b0a1:	e8 9c 00 00 00       	call   c000b142 <ReservedFilename::ReservedFilename(int)>
c000b0a6:	83 c4 10             	add    esp,0x10
c000b0a9:	89 1d e8 63 02 c0    	mov    DWORD PTR ds:0xc00263e8,ebx
c000b0af:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000b0b7:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c000b0bc:	7f 7e                	jg     c000b13c <UnixFile::UnixFile(int)+0x1aa>
c000b0be:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c000b0c6:	83 ec 0c             	sub    esp,0xc
c000b0c9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b0cd:	e8 c5 e6 ff ff       	call   c0009797 <malloc>
c000b0d2:	83 c4 10             	add    esp,0x10
c000b0d5:	89 c3                	mov    ebx,eax
c000b0d7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b0db:	05 10 ff ff 0f       	add    eax,0xfffff10
c000b0e0:	83 ec 08             	sub    esp,0x8
c000b0e3:	50                   	push   eax
c000b0e4:	53                   	push   ebx
c000b0e5:	e8 58 00 00 00       	call   c000b142 <ReservedFilename::ReservedFilename(int)>
c000b0ea:	83 c4 10             	add    esp,0x10
c000b0ed:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b0f1:	89 1c 85 c0 63 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9c40],ebx
c000b0f8:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c000b100:	83 ec 0c             	sub    esp,0xc
c000b103:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b107:	e8 8b e6 ff ff       	call   c0009797 <malloc>
c000b10c:	83 c4 10             	add    esp,0x10
c000b10f:	89 c3                	mov    ebx,eax
c000b111:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b115:	05 20 ff ff 0f       	add    eax,0xfffff20
c000b11a:	83 ec 08             	sub    esp,0x8
c000b11d:	50                   	push   eax
c000b11e:	53                   	push   ebx
c000b11f:	e8 1e 00 00 00       	call   c000b142 <ReservedFilename::ReservedFilename(int)>
c000b124:	83 c4 10             	add    esp,0x10
c000b127:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b12b:	89 1c 85 80 63 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9c80],ebx
c000b132:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000b136:	e9 7c ff ff ff       	jmp    c000b0b7 <UnixFile::UnixFile(int)+0x125>
c000b13b:	90                   	nop
c000b13c:	83 c4 28             	add    esp,0x28
c000b13f:	5b                   	pop    ebx
c000b140:	c3                   	ret    
c000b141:	90                   	nop

c000b142 <ReservedFilename::ReservedFilename(int)>:
c000b142:	83 ec 0c             	sub    esp,0xc
c000b145:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b149:	83 ec 08             	sub    esp,0x8
c000b14c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b150:	50                   	push   eax
c000b151:	e8 3c fe ff ff       	call   c000af92 <UnixFile::UnixFile(int)>
c000b156:	83 c4 10             	add    esp,0x10
c000b159:	ba 48 2e 02 c0       	mov    edx,0xc0022e48
c000b15e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b162:	89 10                	mov    DWORD PTR [eax],edx
c000b164:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b168:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000b16c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b16f:	90                   	nop
c000b170:	83 c4 0c             	add    esp,0xc
c000b173:	c3                   	ret    

c000b174 <UnixFile::~UnixFile()>:
c000b174:	83 ec 1c             	sub    esp,0x1c
c000b177:	ba 2c 2e 02 c0       	mov    edx,0xc0022e2c
c000b17c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b180:	89 10                	mov    DWORD PTR [eax],edx
c000b182:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b186:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b189:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c000b18e:	7f 73                	jg     c000b203 <UnixFile::~UnixFile()+0x8f>
c000b190:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000b198:	83 ec 0c             	sub    esp,0xc
c000b19b:	68 f8 63 02 c0       	push   0xc00263f8
c000b1a0:	e8 b7 66 01 00       	call   c002185c <LinkedList<UnixFile>::getFirstElement()>
c000b1a5:	83 c4 10             	add    esp,0x10
c000b1a8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b1ac:	83 ec 0c             	sub    esp,0xc
c000b1af:	68 f8 63 02 c0       	push   0xc00263f8
c000b1b4:	e8 ab 66 01 00       	call   c0021864 <LinkedList<UnixFile>::removeFirst()>
c000b1b9:	83 c4 10             	add    esp,0x10
c000b1bc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b1c0:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000b1c4:	74 40                	je     c000b206 <UnixFile::~UnixFile()+0x92>
c000b1c6:	83 ec 08             	sub    esp,0x8
c000b1c9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b1cd:	68 f8 63 02 c0       	push   0xc00263f8
c000b1d2:	e8 b1 65 01 00       	call   c0021788 <LinkedList<UnixFile>::addElement(UnixFile*)>
c000b1d7:	83 c4 10             	add    esp,0x10
c000b1da:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b1de:	8d 50 01             	lea    edx,[eax+0x1]
c000b1e1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b1e5:	3d 88 13 00 00       	cmp    eax,0x1388
c000b1ea:	0f 94 c0             	sete   al
c000b1ed:	84 c0                	test   al,al
c000b1ef:	74 a7                	je     c000b198 <UnixFile::~UnixFile()+0x24>
c000b1f1:	83 ec 0c             	sub    esp,0xc
c000b1f4:	68 04 2e 02 c0       	push   0xc0022e04
c000b1f9:	e8 9d 78 00 00       	call   c0012a9b <Krnl::panic(char const*)>
c000b1fe:	83 c4 10             	add    esp,0x10
c000b201:	eb 95                	jmp    c000b198 <UnixFile::~UnixFile()+0x24>
c000b203:	90                   	nop
c000b204:	eb 01                	jmp    c000b207 <UnixFile::~UnixFile()+0x93>
c000b206:	90                   	nop
c000b207:	90                   	nop
c000b208:	83 c4 1c             	add    esp,0x1c
c000b20b:	c3                   	ret    

c000b20c <UnixFile::~UnixFile()>:
c000b20c:	83 ec 0c             	sub    esp,0xc
c000b20f:	83 ec 0c             	sub    esp,0xc
c000b212:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b216:	e8 59 ff ff ff       	call   c000b174 <UnixFile::~UnixFile()>
c000b21b:	83 c4 10             	add    esp,0x10
c000b21e:	83 ec 08             	sub    esp,0x8
c000b221:	6a 0c                	push   0xc
c000b223:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b227:	e8 24 14 00 00       	call   c000c650 <operator delete(void*, unsigned long)>
c000b22c:	83 c4 10             	add    esp,0x10
c000b22f:	83 c4 0c             	add    esp,0xc
c000b232:	c3                   	ret    
c000b233:	90                   	nop

c000b234 <ReservedFilename::~ReservedFilename()>:
c000b234:	83 ec 0c             	sub    esp,0xc
c000b237:	ba 48 2e 02 c0       	mov    edx,0xc0022e48
c000b23c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b240:	89 10                	mov    DWORD PTR [eax],edx
c000b242:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b246:	83 ec 0c             	sub    esp,0xc
c000b249:	50                   	push   eax
c000b24a:	e8 25 ff ff ff       	call   c000b174 <UnixFile::~UnixFile()>
c000b24f:	83 c4 10             	add    esp,0x10
c000b252:	90                   	nop
c000b253:	83 c4 0c             	add    esp,0xc
c000b256:	c3                   	ret    
c000b257:	90                   	nop

c000b258 <ReservedFilename::~ReservedFilename()>:
c000b258:	83 ec 0c             	sub    esp,0xc
c000b25b:	83 ec 0c             	sub    esp,0xc
c000b25e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b262:	e8 cd ff ff ff       	call   c000b234 <ReservedFilename::~ReservedFilename()>
c000b267:	83 c4 10             	add    esp,0x10
c000b26a:	83 ec 08             	sub    esp,0x8
c000b26d:	6a 0c                	push   0xc
c000b26f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b273:	e8 d8 13 00 00       	call   c000c650 <operator delete(void*, unsigned long)>
c000b278:	83 c4 10             	add    esp,0x10
c000b27b:	83 c4 0c             	add    esp,0xc
c000b27e:	c3                   	ret    

c000b27f <getFromFileDescriptor(int)>:
c000b27f:	53                   	push   ebx
c000b280:	83 ec 08             	sub    esp,0x8
c000b283:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b287:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c000b28d:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c000b293:	7f 2c                	jg     c000b2c1 <getFromFileDescriptor(int)+0x42>
c000b295:	83 ec 0c             	sub    esp,0xc
c000b298:	68 f8 63 02 c0       	push   0xc00263f8
c000b29d:	e8 ba 65 01 00       	call   c002185c <LinkedList<UnixFile>::getFirstElement()>
c000b2a2:	83 c4 10             	add    esp,0x10
c000b2a5:	85 c0                	test   eax,eax
c000b2a7:	75 04                	jne    c000b2ad <getFromFileDescriptor(int)+0x2e>
c000b2a9:	31 c0                	xor    eax,eax
c000b2ab:	eb 6e                	jmp    c000b31b <getFromFileDescriptor(int)+0x9c>
c000b2ad:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c000b2b0:	74 69                	je     c000b31b <getFromFileDescriptor(int)+0x9c>
c000b2b2:	52                   	push   edx
c000b2b3:	52                   	push   edx
c000b2b4:	50                   	push   eax
c000b2b5:	68 f8 63 02 c0       	push   0xc00263f8
c000b2ba:	e8 47 66 01 00       	call   c0021906 <LinkedList<UnixFile>::getNext(UnixFile*)>
c000b2bf:	eb e1                	jmp    c000b2a2 <getFromFileDescriptor(int)+0x23>
c000b2c1:	a1 ec 63 02 c0       	mov    eax,ds:0xc00263ec
c000b2c6:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c000b2cc:	74 4d                	je     c000b31b <getFromFileDescriptor(int)+0x9c>
c000b2ce:	a1 f0 63 02 c0       	mov    eax,ds:0xc00263f0
c000b2d3:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c000b2d9:	74 40                	je     c000b31b <getFromFileDescriptor(int)+0x9c>
c000b2db:	a1 e8 63 02 c0       	mov    eax,ds:0xc00263e8
c000b2e0:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c000b2e6:	74 33                	je     c000b31b <getFromFileDescriptor(int)+0x9c>
c000b2e8:	a1 e4 63 02 c0       	mov    eax,ds:0xc00263e4
c000b2ed:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c000b2f3:	74 26                	je     c000b31b <getFromFileDescriptor(int)+0x9c>
c000b2f5:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c000b2fb:	83 f8 08             	cmp    eax,0x8
c000b2fe:	77 09                	ja     c000b309 <getFromFileDescriptor(int)+0x8a>
c000b300:	8b 04 85 c0 63 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9c40]
c000b307:	eb 12                	jmp    c000b31b <getFromFileDescriptor(int)+0x9c>
c000b309:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c000b30f:	83 fb 08             	cmp    ebx,0x8
c000b312:	77 95                	ja     c000b2a9 <getFromFileDescriptor(int)+0x2a>
c000b314:	8b 04 9d 80 63 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd9c80]
c000b31b:	83 c4 08             	add    esp,0x8
c000b31e:	5b                   	pop    ebx
c000b31f:	c3                   	ret    

c000b320 <__static_initialization_and_destruction_0(int, int)>:
c000b320:	83 ec 0c             	sub    esp,0xc
c000b323:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000b328:	75 34                	jne    c000b35e <__static_initialization_and_destruction_0(int, int)+0x3e>
c000b32a:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000b332:	75 2a                	jne    c000b35e <__static_initialization_and_destruction_0(int, int)+0x3e>
c000b334:	83 ec 0c             	sub    esp,0xc
c000b337:	68 f8 63 02 c0       	push   0xc00263f8
c000b33c:	e8 05 64 01 00       	call   c0021746 <LinkedList<UnixFile>::LinkedList()>
c000b341:	83 c4 10             	add    esp,0x10
c000b344:	83 ec 04             	sub    esp,0x4
c000b347:	68 3c 58 02 c0       	push   0xc002583c
c000b34c:	68 f8 63 02 c0       	push   0xc00263f8
c000b351:	68 44 17 02 c0       	push   0xc0021744
c000b356:	e8 6f 12 00 00       	call   c000c5ca <__cxa_atexit>
c000b35b:	83 c4 10             	add    esp,0x10
c000b35e:	90                   	nop
c000b35f:	83 c4 0c             	add    esp,0xc
c000b362:	c3                   	ret    

c000b363 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c000b363:	83 ec 0c             	sub    esp,0xc
c000b366:	83 ec 08             	sub    esp,0x8
c000b369:	68 ff ff 00 00       	push   0xffff
c000b36e:	6a 01                	push   0x1
c000b370:	e8 ab ff ff ff       	call   c000b320 <__static_initialization_and_destruction_0(int, int)>
c000b375:	83 c4 10             	add    esp,0x10
c000b378:	83 c4 0c             	add    esp,0xc
c000b37b:	c3                   	ret    

c000b37c <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c000b37c:	53                   	push   ebx
c000b37d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b381:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000b385:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c000b38b:	89 c8                	mov    eax,ecx
c000b38d:	d1 e8                	shr    eax,1
c000b38f:	03 05 28 5a 02 c0    	add    eax,DWORD PTR ds:0xc0025a28
c000b395:	83 e1 01             	and    ecx,0x1
c000b398:	8a 10                	mov    dl,BYTE PTR [eax]
c000b39a:	75 09                	jne    c000b3a5 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c000b39c:	83 e2 f0             	and    edx,0xfffffff0
c000b39f:	09 da                	or     edx,ebx
c000b3a1:	88 10                	mov    BYTE PTR [eax],dl
c000b3a3:	5b                   	pop    ebx
c000b3a4:	c3                   	ret    
c000b3a5:	c1 e3 04             	shl    ebx,0x4
c000b3a8:	83 e2 0f             	and    edx,0xf
c000b3ab:	09 da                	or     edx,ebx
c000b3ad:	88 10                	mov    BYTE PTR [eax],dl
c000b3af:	5b                   	pop    ebx
c000b3b0:	c3                   	ret    

c000b3b1 <Virt::getPageState(unsigned long)>:
c000b3b1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b3b5:	8b 0d 28 5a 02 c0    	mov    ecx,DWORD PTR ds:0xc0025a28
c000b3bb:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c000b3c1:	89 d0                	mov    eax,edx
c000b3c3:	d1 e8                	shr    eax,1
c000b3c5:	83 e2 01             	and    edx,0x1
c000b3c8:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c000b3cb:	75 04                	jne    c000b3d1 <Virt::getPageState(unsigned long)+0x20>
c000b3cd:	83 e0 0f             	and    eax,0xf
c000b3d0:	c3                   	ret    
c000b3d1:	c0 e8 04             	shr    al,0x4
c000b3d4:	c3                   	ret    

c000b3d5 <Virt::allocateKernelVirtualPages(int)>:
c000b3d5:	55                   	push   ebp
c000b3d6:	31 ed                	xor    ebp,ebp
c000b3d8:	57                   	push   edi
c000b3d9:	56                   	push   esi
c000b3da:	53                   	push   ebx
c000b3db:	31 db                	xor    ebx,ebx
c000b3dd:	83 ec 1c             	sub    esp,0x1c
c000b3e0:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000b3e4:	8b 3d 24 5a 02 c0    	mov    edi,DWORD PTR ds:0xc0025a24
c000b3ea:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000b3ef:	57                   	push   edi
c000b3f0:	e8 bc ff ff ff       	call   c000b3b1 <Virt::getPageState(unsigned long)>
c000b3f5:	5a                   	pop    edx
c000b3f6:	84 c0                	test   al,al
c000b3f8:	75 3a                	jne    c000b434 <Virt::allocateKernelVirtualPages(int)+0x5f>
c000b3fa:	85 db                	test   ebx,ebx
c000b3fc:	75 02                	jne    c000b400 <Virt::allocateKernelVirtualPages(int)+0x2b>
c000b3fe:	89 fd                	mov    ebp,edi
c000b400:	43                   	inc    ebx
c000b401:	39 f3                	cmp    ebx,esi
c000b403:	74 5a                	je     c000b45f <Virt::allocateKernelVirtualPages(int)+0x8a>
c000b405:	47                   	inc    edi
c000b406:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c000b40c:	76 31                	jbe    c000b43f <Virt::allocateKernelVirtualPages(int)+0x6a>
c000b40e:	c7 05 24 5a 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc0025a24,0xc8000
c000b418:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000b41d:	75 28                	jne    c000b447 <Virt::allocateKernelVirtualPages(int)+0x72>
c000b41f:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000b424:	bf 00 80 0c 00       	mov    edi,0xc8000
c000b429:	57                   	push   edi
c000b42a:	e8 82 ff ff ff       	call   c000b3b1 <Virt::getPageState(unsigned long)>
c000b42f:	5a                   	pop    edx
c000b430:	84 c0                	test   al,al
c000b432:	74 c6                	je     c000b3fa <Virt::allocateKernelVirtualPages(int)+0x25>
c000b434:	31 db                	xor    ebx,ebx
c000b436:	47                   	inc    edi
c000b437:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c000b43d:	77 cf                	ja     c000b40e <Virt::allocateKernelVirtualPages(int)+0x39>
c000b43f:	89 3d 24 5a 02 c0    	mov    DWORD PTR ds:0xc0025a24,edi
c000b445:	eb a8                	jmp    c000b3ef <Virt::allocateKernelVirtualPages(int)+0x1a>
c000b447:	83 ec 0c             	sub    esp,0xc
c000b44a:	68 5c 2e 02 c0       	push   0xc0022e5c
c000b44f:	e8 47 76 00 00       	call   c0012a9b <Krnl::panic(char const*)>
c000b454:	8b 3d 24 5a 02 c0    	mov    edi,DWORD PTR ds:0xc0025a24
c000b45a:	83 c4 10             	add    esp,0x10
c000b45d:	eb 90                	jmp    c000b3ef <Virt::allocateKernelVirtualPages(int)+0x1a>
c000b45f:	89 2d 24 5a 02 c0    	mov    DWORD PTR ds:0xc0025a24,ebp
c000b465:	4b                   	dec    ebx
c000b466:	74 5f                	je     c000b4c7 <Virt::allocateKernelVirtualPages(int)+0xf2>
c000b468:	85 f6                	test   esi,esi
c000b46a:	74 3d                	je     c000b4a9 <Virt::allocateKernelVirtualPages(int)+0xd4>
c000b46c:	89 e8                	mov    eax,ebp
c000b46e:	31 db                	xor    ebx,ebx
c000b470:	8d 7e ff             	lea    edi,[esi-0x1]
c000b473:	eb 14                	jmp    c000b489 <Virt::allocateKernelVirtualPages(int)+0xb4>
c000b475:	6a 01                	push   0x1
c000b477:	43                   	inc    ebx
c000b478:	50                   	push   eax
c000b479:	e8 fe fe ff ff       	call   c000b37c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000b47e:	58                   	pop    eax
c000b47f:	39 f3                	cmp    ebx,esi
c000b481:	5a                   	pop    edx
c000b482:	74 25                	je     c000b4a9 <Virt::allocateKernelVirtualPages(int)+0xd4>
c000b484:	a1 24 5a 02 c0       	mov    eax,ds:0xc0025a24
c000b489:	8d 50 01             	lea    edx,[eax+0x1]
c000b48c:	85 db                	test   ebx,ebx
c000b48e:	89 15 24 5a 02 c0    	mov    DWORD PTR ds:0xc0025a24,edx
c000b494:	74 20                	je     c000b4b6 <Virt::allocateKernelVirtualPages(int)+0xe1>
c000b496:	39 df                	cmp    edi,ebx
c000b498:	75 db                	jne    c000b475 <Virt::allocateKernelVirtualPages(int)+0xa0>
c000b49a:	6a 03                	push   0x3
c000b49c:	43                   	inc    ebx
c000b49d:	50                   	push   eax
c000b49e:	e8 d9 fe ff ff       	call   c000b37c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000b4a3:	59                   	pop    ecx
c000b4a4:	39 f3                	cmp    ebx,esi
c000b4a6:	58                   	pop    eax
c000b4a7:	75 db                	jne    c000b484 <Virt::allocateKernelVirtualPages(int)+0xaf>
c000b4a9:	83 c4 1c             	add    esp,0x1c
c000b4ac:	89 e8                	mov    eax,ebp
c000b4ae:	5b                   	pop    ebx
c000b4af:	c1 e0 0c             	shl    eax,0xc
c000b4b2:	5e                   	pop    esi
c000b4b3:	5f                   	pop    edi
c000b4b4:	5d                   	pop    ebp
c000b4b5:	c3                   	ret    
c000b4b6:	6a 02                	push   0x2
c000b4b8:	bb 01 00 00 00       	mov    ebx,0x1
c000b4bd:	50                   	push   eax
c000b4be:	e8 b9 fe ff ff       	call   c000b37c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000b4c3:	58                   	pop    eax
c000b4c4:	5a                   	pop    edx
c000b4c5:	eb bd                	jmp    c000b484 <Virt::allocateKernelVirtualPages(int)+0xaf>
c000b4c7:	6a 04                	push   0x4
c000b4c9:	8d 45 01             	lea    eax,[ebp+0x1]
c000b4cc:	55                   	push   ebp
c000b4cd:	a3 24 5a 02 c0       	mov    ds:0xc0025a24,eax
c000b4d2:	e8 a5 fe ff ff       	call   c000b37c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000b4d7:	59                   	pop    ecx
c000b4d8:	89 e8                	mov    eax,ebp
c000b4da:	5b                   	pop    ebx
c000b4db:	c1 e0 0c             	shl    eax,0xc
c000b4de:	83 c4 1c             	add    esp,0x1c
c000b4e1:	5b                   	pop    ebx
c000b4e2:	5e                   	pop    esi
c000b4e3:	5f                   	pop    edi
c000b4e4:	5d                   	pop    ebp
c000b4e5:	c3                   	ret    

c000b4e6 <Virt::freeSwapfilePage(unsigned long)>:
c000b4e6:	53                   	push   ebx
c000b4e7:	8b 15 10 64 02 c0    	mov    edx,DWORD PTR ds:0xc0026410
c000b4ed:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000b4f1:	b8 01 00 00 00       	mov    eax,0x1
c000b4f6:	89 cb                	mov    ebx,ecx
c000b4f8:	d3 e0                	shl    eax,cl
c000b4fa:	c1 eb 05             	shr    ebx,0x5
c000b4fd:	f7 d0                	not    eax
c000b4ff:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c000b502:	5b                   	pop    ebx
c000b503:	c3                   	ret    

c000b504 <Virt::swapIDToSector(unsigned long)>:
c000b504:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b508:	0f af 05 2c 5a 02 c0 	imul   eax,DWORD PTR ds:0xc0025a2c
c000b50f:	03 05 34 5a 02 c0    	add    eax,DWORD PTR ds:0xc0025a34
c000b515:	c3                   	ret    

c000b516 <Virt::allocateSwapfilePage()>:
c000b516:	55                   	push   ebp
c000b517:	31 d2                	xor    edx,edx
c000b519:	57                   	push   edi
c000b51a:	56                   	push   esi
c000b51b:	53                   	push   ebx
c000b51c:	83 ec 0c             	sub    esp,0xc
c000b51f:	8b 0d 2c 5a 02 c0    	mov    ecx,DWORD PTR ds:0xc0025a2c
c000b525:	a1 30 5a 02 c0       	mov    eax,ds:0xc0025a30
c000b52a:	f7 f1                	div    ecx
c000b52c:	39 0d 30 5a 02 c0    	cmp    DWORD PTR ds:0xc0025a30,ecx
c000b532:	72 2d                	jb     c000b561 <Virt::allocateSwapfilePage()+0x4b>
c000b534:	8b 35 10 64 02 c0    	mov    esi,DWORD PTR ds:0xc0026410
c000b53a:	8b 16                	mov    edx,DWORD PTR [esi]
c000b53c:	f6 c2 01             	test   dl,0x1
c000b53f:	74 3c                	je     c000b57d <Virt::allocateSwapfilePage()+0x67>
c000b541:	31 c9                	xor    ecx,ecx
c000b543:	bf 01 00 00 00       	mov    edi,0x1
c000b548:	eb 12                	jmp    c000b55c <Virt::allocateSwapfilePage()+0x46>
c000b54a:	89 fd                	mov    ebp,edi
c000b54c:	89 ca                	mov    edx,ecx
c000b54e:	d3 e5                	shl    ebp,cl
c000b550:	c1 ea 05             	shr    edx,0x5
c000b553:	8d 1c 96             	lea    ebx,[esi+edx*4]
c000b556:	8b 13                	mov    edx,DWORD PTR [ebx]
c000b558:	85 ea                	test   edx,ebp
c000b55a:	74 2a                	je     c000b586 <Virt::allocateSwapfilePage()+0x70>
c000b55c:	41                   	inc    ecx
c000b55d:	39 c8                	cmp    eax,ecx
c000b55f:	77 e9                	ja     c000b54a <Virt::allocateSwapfilePage()+0x34>
c000b561:	83 ec 0c             	sub    esp,0xc
c000b564:	68 14 30 02 c0       	push   0xc0023014
c000b569:	e8 2d 75 00 00       	call   c0012a9b <Krnl::panic(char const*)>
c000b56e:	83 c4 10             	add    esp,0x10
c000b571:	31 c9                	xor    ecx,ecx
c000b573:	83 c4 0c             	add    esp,0xc
c000b576:	89 c8                	mov    eax,ecx
c000b578:	5b                   	pop    ebx
c000b579:	5e                   	pop    esi
c000b57a:	5f                   	pop    edi
c000b57b:	5d                   	pop    ebp
c000b57c:	c3                   	ret    
c000b57d:	89 f3                	mov    ebx,esi
c000b57f:	bd 01 00 00 00       	mov    ebp,0x1
c000b584:	31 c9                	xor    ecx,ecx
c000b586:	09 ea                	or     edx,ebp
c000b588:	89 c8                	mov    eax,ecx
c000b58a:	89 13                	mov    DWORD PTR [ebx],edx
c000b58c:	83 c4 0c             	add    esp,0xc
c000b58f:	5b                   	pop    ebx
c000b590:	5e                   	pop    esi
c000b591:	5f                   	pop    edi
c000b592:	5d                   	pop    ebp
c000b593:	c3                   	ret    

c000b594 <Virt::virtualMemorySetup()>:
c000b594:	53                   	push   ebx
c000b595:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000b59a:	6a 0f                	push   0xf
c000b59c:	53                   	push   ebx
c000b59d:	43                   	inc    ebx
c000b59e:	e8 d9 fd ff ff       	call   c000b37c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000b5a3:	58                   	pop    eax
c000b5a4:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000b5aa:	5a                   	pop    edx
c000b5ab:	75 ed                	jne    c000b59a <Virt::virtualMemorySetup()+0x6>
c000b5ad:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000b5b2:	6a 00                	push   0x0
c000b5b4:	53                   	push   ebx
c000b5b5:	43                   	inc    ebx
c000b5b6:	e8 c1 fd ff ff       	call   c000b37c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000b5bb:	59                   	pop    ecx
c000b5bc:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000b5c2:	58                   	pop    eax
c000b5c3:	75 ed                	jne    c000b5b2 <Virt::virtualMemorySetup()+0x1e>
c000b5c5:	bb 00 00 0d 00       	mov    ebx,0xd0000
c000b5ca:	6a 0f                	push   0xf
c000b5cc:	53                   	push   ebx
c000b5cd:	43                   	inc    ebx
c000b5ce:	e8 a9 fd ff ff       	call   c000b37c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000b5d3:	58                   	pop    eax
c000b5d4:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c000b5da:	5a                   	pop    edx
c000b5db:	75 ed                	jne    c000b5ca <Virt::virtualMemorySetup()+0x36>
c000b5dd:	5b                   	pop    ebx
c000b5de:	c3                   	ret    

c000b5df <Virt::setupPageSwapping(int)>:
c000b5df:	53                   	push   ebx
c000b5e0:	83 ec 0c             	sub    esp,0xc
c000b5e3:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000b5e7:	a1 a8 88 02 c0       	mov    eax,ds:0xc00288a8
c000b5ec:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000b5f2:	8b 10                	mov    edx,DWORD PTR [eax]
c000b5f4:	53                   	push   ebx
c000b5f5:	c1 e3 0b             	shl    ebx,0xb
c000b5f8:	68 2b 30 02 c0       	push   0xc002302b
c000b5fd:	50                   	push   eax
c000b5fe:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c000b601:	89 1d 30 5a 02 c0    	mov    DWORD PTR ds:0xc0025a30,ebx
c000b607:	c6 05 38 5a 02 c0 43 	mov    BYTE PTR ds:0xc0025a38,0x43
c000b60e:	c1 eb 08             	shr    ebx,0x8
c000b611:	a3 34 5a 02 c0       	mov    ds:0xc0025a34,eax
c000b616:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b619:	c7 05 2c 5a 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc0025a2c,0x8
c000b623:	e8 6f e1 ff ff       	call   c0009797 <malloc>
c000b628:	83 c4 0c             	add    esp,0xc
c000b62b:	89 c1                	mov    ecx,eax
c000b62d:	a3 10 64 02 c0       	mov    ds:0xc0026410,eax
c000b632:	31 d2                	xor    edx,edx
c000b634:	a1 30 5a 02 c0       	mov    eax,ds:0xc0025a30
c000b639:	f7 35 2c 5a 02 c0    	div    DWORD PTR ds:0xc0025a2c
c000b63f:	c1 e8 05             	shr    eax,0x5
c000b642:	50                   	push   eax
c000b643:	6a 00                	push   0x0
c000b645:	51                   	push   ecx
c000b646:	e8 5d 4e ff ff       	call   c00004a8 <memset>
c000b64b:	83 c4 18             	add    esp,0x18
c000b64e:	5b                   	pop    ebx
c000b64f:	c3                   	ret    

c000b650 <VAS::VAS(VAS*)>:
c000b650:	83 ec 0c             	sub    esp,0xc
c000b653:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b657:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000b65e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b662:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000b669:	83 ec 0c             	sub    esp,0xc
c000b66c:	68 7c 2e 02 c0       	push   0xc0022e7c
c000b671:	e8 25 74 00 00       	call   c0012a9b <Krnl::panic(char const*)>
c000b676:	83 c4 10             	add    esp,0x10
c000b679:	90                   	nop
c000b67a:	83 c4 0c             	add    esp,0xc
c000b67d:	c3                   	ret    

c000b67e <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c000b67e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b682:	89 c2                	mov    edx,eax
c000b684:	c1 e8 0a             	shr    eax,0xa
c000b687:	c1 ea 16             	shr    edx,0x16
c000b68a:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c000b68f:	19 c9                	sbb    ecx,ecx
c000b691:	c1 e2 0c             	shl    edx,0xc
c000b694:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c000b69a:	25 fc 0f 00 00       	and    eax,0xffc
c000b69f:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c000b6a6:	01 d0                	add    eax,edx
c000b6a8:	c3                   	ret    
c000b6a9:	90                   	nop

c000b6aa <VAS::getPageTableEntry(unsigned long)>:
c000b6aa:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000b6ae:	89 ca                	mov    edx,ecx
c000b6b0:	c1 e9 0a             	shr    ecx,0xa
c000b6b3:	c1 ea 16             	shr    edx,0x16
c000b6b6:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c000b6bc:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c000b6c2:	c1 e0 0c             	shl    eax,0xc
c000b6c5:	8d 04 08             	lea    eax,[eax+ecx*1]
c000b6c8:	c3                   	ret    

c000b6c9 <Virt::freeKernelVirtualPages(unsigned long)>:
c000b6c9:	57                   	push   edi
c000b6ca:	56                   	push   esi
c000b6cb:	be 01 00 00 00       	mov    esi,0x1
c000b6d0:	53                   	push   ebx
c000b6d1:	83 ec 10             	sub    esp,0x10
c000b6d4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000b6d8:	c1 eb 0c             	shr    ebx,0xc
c000b6db:	eb 3f                	jmp    c000b71c <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c000b6dd:	83 ec 08             	sub    esp,0x8
c000b6e0:	57                   	push   edi
c000b6e1:	ff 35 14 64 02 c0    	push   DWORD PTR ds:0xc0026414
c000b6e7:	e8 be ff ff ff       	call   c000b6aa <VAS::getPageTableEntry(unsigned long)>
c000b6ec:	83 c4 10             	add    esp,0x10
c000b6ef:	8b 00                	mov    eax,DWORD PTR [eax]
c000b6f1:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000b6f5:	f6 c4 04             	test   ah,0x4
c000b6f8:	75 5f                	jne    c000b759 <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c000b6fa:	80 fa 04             	cmp    dl,0x4
c000b6fd:	74 78                	je     c000b777 <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c000b6ff:	80 fa 02             	cmp    dl,0x2
c000b702:	0f 84 88 00 00 00    	je     c000b790 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c000b708:	80 fa 03             	cmp    dl,0x3
c000b70b:	0f 84 ad 00 00 00    	je     c000b7be <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c000b711:	fe ca                	dec    dl
c000b713:	0f 84 92 00 00 00    	je     c000b7ab <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c000b719:	43                   	inc    ebx
c000b71a:	31 f6                	xor    esi,esi
c000b71c:	53                   	push   ebx
c000b71d:	89 df                	mov    edi,ebx
c000b71f:	e8 8d fc ff ff       	call   c000b3b1 <Virt::getPageState(unsigned long)>
c000b724:	c1 e7 0c             	shl    edi,0xc
c000b727:	59                   	pop    ecx
c000b728:	84 c0                	test   al,al
c000b72a:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000b72e:	75 ad                	jne    c000b6dd <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c000b730:	83 ec 0c             	sub    esp,0xc
c000b733:	68 42 30 02 c0       	push   0xc0023042
c000b738:	e8 5e 73 00 00       	call   c0012a9b <Krnl::panic(char const*)>
c000b73d:	58                   	pop    eax
c000b73e:	5a                   	pop    edx
c000b73f:	57                   	push   edi
c000b740:	ff 35 14 64 02 c0    	push   DWORD PTR ds:0xc0026414
c000b746:	e8 5f ff ff ff       	call   c000b6aa <VAS::getPageTableEntry(unsigned long)>
c000b74b:	83 c4 10             	add    esp,0x10
c000b74e:	8b 00                	mov    eax,DWORD PTR [eax]
c000b750:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000b754:	f6 c4 04             	test   ah,0x4
c000b757:	74 c0                	je     c000b719 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000b759:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c000b75d:	25 00 f0 ff ff       	and    eax,0xfffff000
c000b762:	83 ec 0c             	sub    esp,0xc
c000b765:	50                   	push   eax
c000b766:	e8 e8 e3 ff ff       	call   c0009b53 <Phys::freePage(unsigned long)>
c000b76b:	83 c4 10             	add    esp,0x10
c000b76e:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000b772:	80 fa 04             	cmp    dl,0x4
c000b775:	75 88                	jne    c000b6ff <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c000b777:	89 f0                	mov    eax,esi
c000b779:	84 c0                	test   al,al
c000b77b:	75 47                	jne    c000b7c4 <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c000b77d:	c7 44 24 20 a0 2e 02 c0 	mov    DWORD PTR [esp+0x20],0xc0022ea0
c000b785:	83 c4 10             	add    esp,0x10
c000b788:	5b                   	pop    ebx
c000b789:	5e                   	pop    esi
c000b78a:	5f                   	pop    edi
c000b78b:	e9 0b 73 00 00       	jmp    c0012a9b <Krnl::panic(char const*)>
c000b790:	89 f0                	mov    eax,esi
c000b792:	84 c0                	test   al,al
c000b794:	75 15                	jne    c000b7ab <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c000b796:	83 ec 0c             	sub    esp,0xc
c000b799:	68 5e 30 02 c0       	push   0xc002305e
c000b79e:	e8 f8 72 00 00       	call   c0012a9b <Krnl::panic(char const*)>
c000b7a3:	83 c4 10             	add    esp,0x10
c000b7a6:	e9 6e ff ff ff       	jmp    c000b719 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000b7ab:	83 ec 08             	sub    esp,0x8
c000b7ae:	6a 00                	push   0x0
c000b7b0:	53                   	push   ebx
c000b7b1:	e8 c6 fb ff ff       	call   c000b37c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000b7b6:	83 c4 10             	add    esp,0x10
c000b7b9:	e9 5b ff ff ff       	jmp    c000b719 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000b7be:	89 f0                	mov    eax,esi
c000b7c0:	84 c0                	test   al,al
c000b7c2:	75 15                	jne    c000b7d9 <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c000b7c4:	83 ec 08             	sub    esp,0x8
c000b7c7:	6a 00                	push   0x0
c000b7c9:	53                   	push   ebx
c000b7ca:	e8 ad fb ff ff       	call   c000b37c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000b7cf:	83 c4 10             	add    esp,0x10
c000b7d2:	83 c4 10             	add    esp,0x10
c000b7d5:	5b                   	pop    ebx
c000b7d6:	5e                   	pop    esi
c000b7d7:	5f                   	pop    edi
c000b7d8:	c3                   	ret    
c000b7d9:	c7 44 24 20 7a 30 02 c0 	mov    DWORD PTR [esp+0x20],0xc002307a
c000b7e1:	83 c4 10             	add    esp,0x10
c000b7e4:	5b                   	pop    ebx
c000b7e5:	5e                   	pop    esi
c000b7e6:	5f                   	pop    edi
c000b7e7:	e9 af 72 00 00       	jmp    c0012a9b <Krnl::panic(char const*)>

c000b7ec <VAS::freeAllocatedPages(unsigned long)>:
c000b7ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7f0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b7f4:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c000b7f8:	74 09                	je     c000b803 <VAS::freeAllocatedPages(unsigned long)+0x17>
c000b7fa:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000b7fe:	e9 c6 fe ff ff       	jmp    c000b6c9 <Virt::freeKernelVirtualPages(unsigned long)>
c000b803:	c7 44 24 04 c4 2e 02 c0 	mov    DWORD PTR [esp+0x4],0xc0022ec4
c000b80b:	e9 21 0f 00 00       	jmp    c000c731 <Dbg::kprintf(char const*, ...)>

c000b810 <VAS::virtualToPhysical(unsigned long)>:
c000b810:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000b814:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000b818:	e8 8d fe ff ff       	call   c000b6aa <VAS::getPageTableEntry(unsigned long)>
c000b81d:	5a                   	pop    edx
c000b81e:	8b 00                	mov    eax,DWORD PTR [eax]
c000b820:	59                   	pop    ecx
c000b821:	25 00 f0 ff ff       	and    eax,0xfffff000
c000b826:	c3                   	ret    
c000b827:	90                   	nop

c000b828 <VAS::reflagRange(unsigned long, int, int, int)>:
c000b828:	55                   	push   ebp
c000b829:	57                   	push   edi
c000b82a:	56                   	push   esi
c000b82b:	53                   	push   ebx
c000b82c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000b830:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000b834:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000b838:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000b83c:	85 db                	test   ebx,ebx
c000b83e:	7e 22                	jle    c000b862 <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c000b840:	c1 e3 0c             	shl    ebx,0xc
c000b843:	01 f3                	add    ebx,esi
c000b845:	56                   	push   esi
c000b846:	81 c6 00 10 00 00    	add    esi,0x1000
c000b84c:	55                   	push   ebp
c000b84d:	e8 58 fe ff ff       	call   c000b6aa <VAS::getPageTableEntry(unsigned long)>
c000b852:	5a                   	pop    edx
c000b853:	59                   	pop    ecx
c000b854:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b856:	21 f9                	and    ecx,edi
c000b858:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c000b85c:	39 f3                	cmp    ebx,esi
c000b85e:	89 08                	mov    DWORD PTR [eax],ecx
c000b860:	75 e3                	jne    c000b845 <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c000b862:	5b                   	pop    ebx
c000b863:	5e                   	pop    esi
c000b864:	5f                   	pop    edi
c000b865:	5d                   	pop    ebp
c000b866:	c3                   	ret    
c000b867:	90                   	nop

c000b868 <VAS::setToWriteCombining(unsigned long, int)>:
c000b868:	a1 28 63 02 c0       	mov    eax,ds:0xc0026328
c000b86d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000b873:	f6 80 8c 11 00 00 20 	test   BYTE PTR [eax+0x118c],0x20
c000b87a:	75 01                	jne    c000b87d <VAS::setToWriteCombining(unsigned long, int)+0x15>
c000b87c:	c3                   	ret    
c000b87d:	68 80 00 00 00       	push   0x80
c000b882:	6a ff                	push   0xffffffff
c000b884:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b888:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b88c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b890:	e8 93 ff ff ff       	call   c000b828 <VAS::reflagRange(unsigned long, int, int, int)>
c000b895:	83 c4 14             	add    esp,0x14
c000b898:	c3                   	ret    
c000b899:	90                   	nop

c000b89a <VAS::mapOtherVASIn(bool, VAS*)>:
c000b89a:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c000b89f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b8a3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000b8a6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b8aa:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c000b8ad:	19 c0                	sbb    eax,eax
c000b8af:	83 ca 03             	or     edx,0x3
c000b8b2:	83 e0 fc             	and    eax,0xfffffffc
c000b8b5:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c000b8bc:	0f 20 d8             	mov    eax,cr3
c000b8bf:	0f 22 d8             	mov    cr3,eax
c000b8c2:	c3                   	ret    
c000b8c3:	90                   	nop

c000b8c4 <VAS::~VAS()>:
c000b8c4:	83 ec 2c             	sub    esp,0x2c
c000b8c7:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000b8cf:	fa                   	cli    
c000b8d0:	a1 08 98 02 c0       	mov    eax,ds:0xc0029808
c000b8d5:	40                   	inc    eax
c000b8d6:	a3 08 98 02 c0       	mov    ds:0xc0029808,eax
c000b8db:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000b8e0:	8b 00                	mov    eax,DWORD PTR [eax]
c000b8e2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000b8e5:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c000b8eb:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000b8ef:	6a 01                	push   0x1
c000b8f1:	50                   	push   eax
c000b8f2:	e8 a3 ff ff ff       	call   c000b89a <VAS::mapOtherVASIn(bool, VAS*)>
c000b8f7:	83 c4 0c             	add    esp,0xc
c000b8fa:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000b902:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c000b90a:	0f 8f d4 00 00 00    	jg     c000b9e4 <VAS::~VAS()+0x120>
c000b910:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b914:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000b917:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000b91b:	c1 e2 02             	shl    edx,0x2
c000b91e:	01 d0                	add    eax,edx
c000b920:	8b 00                	mov    eax,DWORD PTR [eax]
c000b922:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b926:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b92a:	83 e0 01             	and    eax,0x1
c000b92d:	0f 84 a8 00 00 00    	je     c000b9db <VAS::~VAS()+0x117>
c000b933:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000b93b:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c000b943:	7f 72                	jg     c000b9b7 <VAS::~VAS()+0xf3>
c000b945:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b949:	c1 e0 0a             	shl    eax,0xa
c000b94c:	89 c2                	mov    edx,eax
c000b94e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b952:	01 d0                	add    eax,edx
c000b954:	c1 e0 0c             	shl    eax,0xc
c000b957:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b95b:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000b960:	8b 00                	mov    eax,DWORD PTR [eax]
c000b962:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000b965:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c000b96b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000b96f:	6a 01                	push   0x1
c000b971:	50                   	push   eax
c000b972:	e8 07 fd ff ff       	call   c000b67e <VAS::getForeignPageTableEntry(bool, unsigned long)>
c000b977:	83 c4 0c             	add    esp,0xc
c000b97a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b97e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b982:	8b 00                	mov    eax,DWORD PTR [eax]
c000b984:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b988:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b98c:	25 01 04 00 00       	and    eax,0x401
c000b991:	3d 01 04 00 00       	cmp    eax,0x401
c000b996:	75 19                	jne    c000b9b1 <VAS::~VAS()+0xed>
c000b998:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b99c:	25 00 f0 ff ff       	and    eax,0xfffff000
c000b9a1:	83 ec 0c             	sub    esp,0xc
c000b9a4:	50                   	push   eax
c000b9a5:	e8 a9 e1 ff ff       	call   c0009b53 <Phys::freePage(unsigned long)>
c000b9aa:	83 c4 10             	add    esp,0x10
c000b9ad:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000b9b1:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000b9b5:	eb 84                	jmp    c000b93b <VAS::~VAS()+0x77>
c000b9b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b9bb:	25 00 04 00 00       	and    eax,0x400
c000b9c0:	74 19                	je     c000b9db <VAS::~VAS()+0x117>
c000b9c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b9c6:	25 00 f0 ff ff       	and    eax,0xfffff000
c000b9cb:	83 ec 0c             	sub    esp,0xc
c000b9ce:	50                   	push   eax
c000b9cf:	e8 7f e1 ff ff       	call   c0009b53 <Phys::freePage(unsigned long)>
c000b9d4:	83 c4 10             	add    esp,0x10
c000b9d7:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000b9db:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000b9df:	e9 1e ff ff ff       	jmp    c000b902 <VAS::~VAS()+0x3e>
c000b9e4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b9e8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000b9eb:	83 ec 0c             	sub    esp,0xc
c000b9ee:	50                   	push   eax
c000b9ef:	e8 d5 fc ff ff       	call   c000b6c9 <Virt::freeKernelVirtualPages(unsigned long)>
c000b9f4:	83 c4 10             	add    esp,0x10
c000b9f7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b9fb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000b9fe:	83 ec 0c             	sub    esp,0xc
c000ba01:	50                   	push   eax
c000ba02:	e8 4c e1 ff ff       	call   c0009b53 <Phys::freePage(unsigned long)>
c000ba07:	83 c4 10             	add    esp,0x10
c000ba0a:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000ba0e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ba12:	c1 e0 02             	shl    eax,0x2
c000ba15:	83 ec 08             	sub    esp,0x8
c000ba18:	50                   	push   eax
c000ba19:	68 e8 2e 02 c0       	push   0xc0022ee8
c000ba1e:	e8 0e 0d 00 00       	call   c000c731 <Dbg::kprintf(char const*, ...)>
c000ba23:	83 c4 10             	add    esp,0x10
c000ba26:	a1 08 98 02 c0       	mov    eax,ds:0xc0029808
c000ba2b:	48                   	dec    eax
c000ba2c:	a3 08 98 02 c0       	mov    ds:0xc0029808,eax
c000ba31:	a1 08 98 02 c0       	mov    eax,ds:0xc0029808
c000ba36:	85 c0                	test   eax,eax
c000ba38:	75 01                	jne    c000ba3b <VAS::~VAS()+0x177>
c000ba3a:	fb                   	sti    
c000ba3b:	90                   	nop
c000ba3c:	83 c4 2c             	add    esp,0x2c
c000ba3f:	c3                   	ret    

c000ba40 <VAS::mapPage(unsigned long, unsigned long, int)>:
c000ba40:	55                   	push   ebp
c000ba41:	57                   	push   edi
c000ba42:	56                   	push   esi
c000ba43:	53                   	push   ebx
c000ba44:	83 ec 1c             	sub    esp,0x1c
c000ba47:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000ba4b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000ba4f:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c000ba55:	77 0b                	ja     c000ba62 <VAS::mapPage(unsigned long, unsigned long, int)+0x22>
c000ba57:	0f 20 d8             	mov    eax,cr3
c000ba5a:	0f 20 d8             	mov    eax,cr3
c000ba5d:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c000ba60:	75 47                	jne    c000baa9 <VAS::mapPage(unsigned long, unsigned long, int)+0x69>
c000ba62:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ba66:	09 d8                	or     eax,ebx
c000ba68:	a9 ff 0f 00 00       	test   eax,0xfff
c000ba6d:	75 57                	jne    c000bac6 <VAS::mapPage(unsigned long, unsigned long, int)+0x86>
c000ba6f:	89 de                	mov    esi,ebx
c000ba71:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000ba74:	c1 ee 16             	shr    esi,0x16
c000ba77:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c000ba7e:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c000ba82:	74 54                	je     c000bad8 <VAS::mapPage(unsigned long, unsigned long, int)+0x98>
c000ba84:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ba88:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c000ba8e:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000ba92:	c1 e6 0c             	shl    esi,0xc
c000ba95:	c1 eb 0a             	shr    ebx,0xa
c000ba98:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c000ba9e:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c000baa1:	83 c4 1c             	add    esp,0x1c
c000baa4:	5b                   	pop    ebx
c000baa5:	5e                   	pop    esi
c000baa6:	5f                   	pop    edi
c000baa7:	5d                   	pop    ebp
c000baa8:	c3                   	ret    
c000baa9:	83 ec 0c             	sub    esp,0xc
c000baac:	68 08 2f 02 c0       	push   0xc0022f08
c000bab1:	e8 7b 0c 00 00       	call   c000c731 <Dbg::kprintf(char const*, ...)>
c000bab6:	83 c4 10             	add    esp,0x10
c000bab9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000babd:	09 d8                	or     eax,ebx
c000babf:	a9 ff 0f 00 00       	test   eax,0xfff
c000bac4:	74 a9                	je     c000ba6f <VAS::mapPage(unsigned long, unsigned long, int)+0x2f>
c000bac6:	83 ec 0c             	sub    esp,0xc
c000bac9:	68 70 2f 02 c0       	push   0xc0022f70
c000bace:	e8 c8 6f 00 00       	call   c0012a9b <Krnl::panic(char const*)>
c000bad3:	83 c4 10             	add    esp,0x10
c000bad6:	eb 97                	jmp    c000ba6f <VAS::mapPage(unsigned long, unsigned long, int)+0x2f>
c000bad8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000badc:	e8 f5 e0 ff ff       	call   c0009bd6 <Phys::allocatePage()>
c000bae1:	83 ec 0c             	sub    esp,0xc
c000bae4:	89 c5                	mov    ebp,eax
c000bae6:	8b 0d 14 64 02 c0    	mov    ecx,DWORD PTR ds:0xc0026414
c000baec:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000baf0:	6a 01                	push   0x1
c000baf2:	e8 de f8 ff ff       	call   c000b3d5 <Virt::allocateKernelVirtualPages(int)>
c000baf7:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000bafe:	6a 01                	push   0x1
c000bb00:	50                   	push   eax
c000bb01:	55                   	push   ebp
c000bb02:	81 cd 07 04 00 00    	or     ebp,0x407
c000bb08:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000bb0c:	51                   	push   ecx
c000bb0d:	e8 26 02 00 00       	call   c000bd38 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000bb12:	83 c4 1c             	add    esp,0x1c
c000bb15:	68 00 10 00 00       	push   0x1000
c000bb1a:	6a 00                	push   0x0
c000bb1c:	50                   	push   eax
c000bb1d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb21:	e8 82 49 ff ff       	call   c00004a8 <memset>
c000bb26:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000bb2a:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000bb2d:	e8 97 fb ff ff       	call   c000b6c9 <Virt::freeKernelVirtualPages(unsigned long)>
c000bb32:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bb36:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000bb39:	83 c4 10             	add    esp,0x10
c000bb3c:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c000bb3f:	e9 40 ff ff ff       	jmp    c000ba84 <VAS::mapPage(unsigned long, unsigned long, int)+0x44>

c000bb44 <VAS::allocatePages(int, int)>:
c000bb44:	55                   	push   ebp
c000bb45:	57                   	push   edi
c000bb46:	56                   	push   esi
c000bb47:	53                   	push   ebx
c000bb48:	83 ec 1c             	sub    esp,0x1c
c000bb4b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000bb4f:	a1 28 63 02 c0       	mov    eax,ds:0xc0026328
c000bb54:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000bb5a:	8a 80 8d 11 00 00    	mov    al,BYTE PTR [eax+0x118d]
c000bb60:	83 e0 01             	and    eax,0x1
c000bb63:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c000bb67:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000bb6b:	0f 85 cc 00 00 00    	jne    c000bc3d <VAS::allocatePages(int, int)+0xf9>
c000bb71:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000bb74:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000bb78:	85 c0                	test   eax,eax
c000bb7a:	0f 84 a1 00 00 00    	je     c000bc21 <VAS::allocatePages(int, int)+0xdd>
c000bb80:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000bb84:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000bb88:	c1 e6 0c             	shl    esi,0xc
c000bb8b:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c000bb8f:	85 c0                	test   eax,eax
c000bb91:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c000bb94:	7e 33                	jle    c000bbc9 <VAS::allocatePages(int, int)+0x85>
c000bb96:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000bb9a:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000bb9e:	81 cd 00 04 00 00    	or     ebp,0x400
c000bba4:	e8 2d e0 ff ff       	call   c0009bd6 <Phys::allocatePage()>
c000bba9:	55                   	push   ebp
c000bbaa:	53                   	push   ebx
c000bbab:	50                   	push   eax
c000bbac:	57                   	push   edi
c000bbad:	e8 8e fe ff ff       	call   c000ba40 <VAS::mapPage(unsigned long, unsigned long, int)>
c000bbb2:	83 c4 10             	add    esp,0x10
c000bbb5:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000bbba:	74 03                	je     c000bbbf <VAS::allocatePages(int, int)+0x7b>
c000bbbc:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000bbbf:	81 c3 00 10 00 00    	add    ebx,0x1000
c000bbc5:	39 de                	cmp    esi,ebx
c000bbc7:	75 db                	jne    c000bba4 <VAS::allocatePages(int, int)+0x60>
c000bbc9:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000bbce:	75 12                	jne    c000bbe2 <VAS::allocatePages(int, int)+0x9e>
c000bbd0:	0f 20 d8             	mov    eax,cr3
c000bbd3:	0f 22 d8             	mov    cr3,eax
c000bbd6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bbda:	83 c4 1c             	add    esp,0x1c
c000bbdd:	5b                   	pop    ebx
c000bbde:	5e                   	pop    esi
c000bbdf:	5f                   	pop    edi
c000bbe0:	5d                   	pop    ebp
c000bbe1:	c3                   	ret    
c000bbe2:	c1 ee 0a             	shr    esi,0xa
c000bbe5:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000bbe9:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c000bbef:	c1 eb 0a             	shr    ebx,0xa
c000bbf2:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c000bbf8:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000bbfe:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000bc04:	39 c3                	cmp    ebx,eax
c000bc06:	77 ce                	ja     c000bbd6 <VAS::allocatePages(int, int)+0x92>
c000bc08:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000bc0b:	81 c3 00 10 00 00    	add    ebx,0x1000
c000bc11:	39 d8                	cmp    eax,ebx
c000bc13:	73 f3                	jae    c000bc08 <VAS::allocatePages(int, int)+0xc4>
c000bc15:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bc19:	83 c4 1c             	add    esp,0x1c
c000bc1c:	5b                   	pop    ebx
c000bc1d:	5e                   	pop    esi
c000bc1e:	5f                   	pop    edi
c000bc1f:	5d                   	pop    ebp
c000bc20:	c3                   	ret    
c000bc21:	83 ec 0c             	sub    esp,0xc
c000bc24:	68 94 2f 02 c0       	push   0xc0022f94
c000bc29:	e8 6d 6e 00 00       	call   c0012a9b <Krnl::panic(char const*)>
c000bc2e:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000bc31:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000bc35:	83 c4 10             	add    esp,0x10
c000bc38:	e9 43 ff ff ff       	jmp    c000bb80 <VAS::allocatePages(int, int)+0x3c>
c000bc3d:	83 ec 0c             	sub    esp,0xc
c000bc40:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000bc44:	e8 8c f7 ff ff       	call   c000b3d5 <Virt::allocateKernelVirtualPages(int)>
c000bc49:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000bc4d:	83 c4 10             	add    esp,0x10
c000bc50:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c000bc55:	0f 87 9b 00 00 00    	ja     c000bcf6 <VAS::allocatePages(int, int)+0x1b2>
c000bc5b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000bc5f:	85 d2                	test   edx,edx
c000bc61:	7e 3c                	jle    c000bc9f <VAS::allocatePages(int, int)+0x15b>
c000bc63:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000bc67:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000bc6b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000bc6f:	c1 e5 0c             	shl    ebp,0xc
c000bc72:	81 ce 00 04 00 00    	or     esi,0x400
c000bc78:	01 dd                	add    ebp,ebx
c000bc7a:	e8 57 df ff ff       	call   c0009bd6 <Phys::allocatePage()>
c000bc7f:	56                   	push   esi
c000bc80:	53                   	push   ebx
c000bc81:	50                   	push   eax
c000bc82:	57                   	push   edi
c000bc83:	e8 b8 fd ff ff       	call   c000ba40 <VAS::mapPage(unsigned long, unsigned long, int)>
c000bc88:	83 c4 10             	add    esp,0x10
c000bc8b:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000bc90:	74 03                	je     c000bc95 <VAS::allocatePages(int, int)+0x151>
c000bc92:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000bc95:	81 c3 00 10 00 00    	add    ebx,0x1000
c000bc9b:	39 dd                	cmp    ebp,ebx
c000bc9d:	75 db                	jne    c000bc7a <VAS::allocatePages(int, int)+0x136>
c000bc9f:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000bca4:	0f 84 26 ff ff ff    	je     c000bbd0 <VAS::allocatePages(int, int)+0x8c>
c000bcaa:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bcae:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000bcb2:	89 d3                	mov    ebx,edx
c000bcb4:	c1 e0 0c             	shl    eax,0xc
c000bcb7:	c1 eb 0a             	shr    ebx,0xa
c000bcba:	01 d0                	add    eax,edx
c000bcbc:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000bcc2:	c1 e8 0a             	shr    eax,0xa
c000bcc5:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000bccb:	25 00 f0 ff ff       	and    eax,0xfffff000
c000bcd0:	2d 00 00 40 00       	sub    eax,0x400000
c000bcd5:	39 c3                	cmp    ebx,eax
c000bcd7:	0f 87 f9 fe ff ff    	ja     c000bbd6 <VAS::allocatePages(int, int)+0x92>
c000bcdd:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000bce0:	81 c3 00 10 00 00    	add    ebx,0x1000
c000bce6:	39 d8                	cmp    eax,ebx
c000bce8:	73 f3                	jae    c000bcdd <VAS::allocatePages(int, int)+0x199>
c000bcea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bcee:	83 c4 1c             	add    esp,0x1c
c000bcf1:	5b                   	pop    ebx
c000bcf2:	5e                   	pop    esi
c000bcf3:	5f                   	pop    edi
c000bcf4:	5d                   	pop    ebp
c000bcf5:	c3                   	ret    
c000bcf6:	a1 28 63 02 c0       	mov    eax,ds:0xc0026328
c000bcfb:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000bd01:	f6 80 8c 11 00 00 10 	test   BYTE PTR [eax+0x118c],0x10
c000bd08:	0f 84 4d ff ff ff    	je     c000bc5b <VAS::allocatePages(int, int)+0x117>
c000bd0e:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c000bd16:	e9 40 ff ff ff       	jmp    c000bc5b <VAS::allocatePages(int, int)+0x117>
c000bd1b:	90                   	nop

c000bd1c <VAS::setCPUSpecific(unsigned long)>:
c000bd1c:	83 ec 0c             	sub    esp,0xc
c000bd1f:	6a 05                	push   0x5
c000bd21:	68 00 00 40 c2       	push   0xc2400000
c000bd26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bd2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bd2e:	e8 0d fd ff ff       	call   c000ba40 <VAS::mapPage(unsigned long, unsigned long, int)>
c000bd33:	83 c4 1c             	add    esp,0x1c
c000bd36:	c3                   	ret    
c000bd37:	90                   	nop

c000bd38 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c000bd38:	55                   	push   ebp
c000bd39:	57                   	push   edi
c000bd3a:	56                   	push   esi
c000bd3b:	53                   	push   ebx
c000bd3c:	83 ec 1c             	sub    esp,0x1c
c000bd3f:	a1 28 63 02 c0       	mov    eax,ds:0xc0026328
c000bd44:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000bd48:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000bd4e:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000bd52:	8a 80 8d 11 00 00    	mov    al,BYTE PTR [eax+0x118d]
c000bd58:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c000bd5c:	83 e0 01             	and    eax,0x1
c000bd5f:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000bd63:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000bd67:	85 c0                	test   eax,eax
c000bd69:	7e 39                	jle    c000bda4 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c000bd6b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000bd6f:	89 f3                	mov    ebx,esi
c000bd71:	c1 e0 0c             	shl    eax,0xc
c000bd74:	01 f0                	add    eax,esi
c000bd76:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000bd7a:	55                   	push   ebp
c000bd7b:	53                   	push   ebx
c000bd7c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000bd80:	29 f0                	sub    eax,esi
c000bd82:	01 d8                	add    eax,ebx
c000bd84:	50                   	push   eax
c000bd85:	57                   	push   edi
c000bd86:	e8 b5 fc ff ff       	call   c000ba40 <VAS::mapPage(unsigned long, unsigned long, int)>
c000bd8b:	83 c4 10             	add    esp,0x10
c000bd8e:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000bd93:	74 03                	je     c000bd98 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c000bd95:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000bd98:	81 c3 00 10 00 00    	add    ebx,0x1000
c000bd9e:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c000bda2:	75 d6                	jne    c000bd7a <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c000bda4:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000bda9:	75 10                	jne    c000bdbb <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c000bdab:	0f 20 d8             	mov    eax,cr3
c000bdae:	0f 22 d8             	mov    cr3,eax
c000bdb1:	83 c4 1c             	add    esp,0x1c
c000bdb4:	89 f0                	mov    eax,esi
c000bdb6:	5b                   	pop    ebx
c000bdb7:	5e                   	pop    esi
c000bdb8:	5f                   	pop    edi
c000bdb9:	5d                   	pop    ebp
c000bdba:	c3                   	ret    
c000bdbb:	89 f3                	mov    ebx,esi
c000bdbd:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000bdc1:	c1 eb 0a             	shr    ebx,0xa
c000bdc4:	c1 e0 0c             	shl    eax,0xc
c000bdc7:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000bdcd:	01 f0                	add    eax,esi
c000bdcf:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000bdd5:	c1 e8 0a             	shr    eax,0xa
c000bdd8:	25 00 f0 ff ff       	and    eax,0xfffff000
c000bddd:	2d 00 00 40 00       	sub    eax,0x400000
c000bde2:	39 c3                	cmp    ebx,eax
c000bde4:	77 cb                	ja     c000bdb1 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c000bde6:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000bde9:	81 c3 00 10 00 00    	add    ebx,0x1000
c000bdef:	39 d8                	cmp    eax,ebx
c000bdf1:	73 f3                	jae    c000bde6 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c000bdf3:	83 c4 1c             	add    esp,0x1c
c000bdf6:	89 f0                	mov    eax,esi
c000bdf8:	5b                   	pop    ebx
c000bdf9:	5e                   	pop    esi
c000bdfa:	5f                   	pop    edi
c000bdfb:	5d                   	pop    ebp
c000bdfc:	c3                   	ret    
c000bdfd:	90                   	nop

c000bdfe <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c000bdfe:	55                   	push   ebp
c000bdff:	57                   	push   edi
c000be00:	56                   	push   esi
c000be01:	53                   	push   ebx
c000be02:	83 ec 1c             	sub    esp,0x1c
c000be05:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000be09:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000be0d:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c000be11:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000be15:	a9 ff 0f 00 00       	test   eax,0xfff
c000be1a:	75 4a                	jne    c000be66 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c000be1c:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000be20:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000be23:	c1 eb 16             	shr    ebx,0x16
c000be26:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c000be2d:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c000be31:	74 4d                	je     c000be80 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c000be33:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000be37:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c000be3b:	c1 e8 0a             	shr    eax,0xa
c000be3e:	80 fa 01             	cmp    dl,0x1
c000be41:	19 d2                	sbb    edx,edx
c000be43:	c1 e3 0c             	shl    ebx,0xc
c000be46:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c000be4a:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c000be50:	25 fc 0f 00 00       	and    eax,0xffc
c000be55:	01 d8                	add    eax,ebx
c000be57:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c000be5e:	83 c4 1c             	add    esp,0x1c
c000be61:	5b                   	pop    ebx
c000be62:	5e                   	pop    esi
c000be63:	5f                   	pop    edi
c000be64:	5d                   	pop    ebp
c000be65:	c3                   	ret    
c000be66:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000be6a:	83 ec 0c             	sub    esp,0xc
c000be6d:	68 c0 2f 02 c0       	push   0xc0022fc0
c000be72:	e8 24 6c 00 00       	call   c0012a9b <Krnl::panic(char const*)>
c000be77:	83 c4 10             	add    esp,0x10
c000be7a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000be7e:	eb 9c                	jmp    c000be1c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c000be80:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000be84:	e8 4d dd ff ff       	call   c0009bd6 <Phys::allocatePage()>
c000be89:	83 ec 0c             	sub    esp,0xc
c000be8c:	89 c5                	mov    ebp,eax
c000be8e:	8b 0d 14 64 02 c0    	mov    ecx,DWORD PTR ds:0xc0026414
c000be94:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000be98:	6a 01                	push   0x1
c000be9a:	e8 36 f5 ff ff       	call   c000b3d5 <Virt::allocateKernelVirtualPages(int)>
c000be9f:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000bea6:	6a 01                	push   0x1
c000bea8:	50                   	push   eax
c000bea9:	55                   	push   ebp
c000beaa:	81 cd 07 04 00 00    	or     ebp,0x407
c000beb0:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000beb4:	51                   	push   ecx
c000beb5:	e8 7e fe ff ff       	call   c000bd38 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000beba:	83 c4 1c             	add    esp,0x1c
c000bebd:	68 00 10 00 00       	push   0x1000
c000bec2:	6a 00                	push   0x0
c000bec4:	50                   	push   eax
c000bec5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bec9:	e8 da 45 ff ff       	call   c00004a8 <memset>
c000bece:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000bed2:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000bed5:	e8 ef f7 ff ff       	call   c000b6c9 <Virt::freeKernelVirtualPages(unsigned long)>
c000beda:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000bedd:	83 c4 10             	add    esp,0x10
c000bee0:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c000bee3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bee7:	e9 47 ff ff ff       	jmp    c000be33 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>

c000beec <VAS::VAS(bool)>:
c000beec:	53                   	push   ebx
c000beed:	83 ec 28             	sub    esp,0x28
c000bef0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000bef4:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000bef8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000befc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000bf03:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bf07:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000bf0e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bf12:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c000bf16:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000bf19:	e8 b8 dc ff ff       	call   c0009bd6 <Phys::allocatePage()>
c000bf1e:	89 c2                	mov    edx,eax
c000bf20:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bf24:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000bf27:	8b 1d 14 64 02 c0    	mov    ebx,DWORD PTR ds:0xc0026414
c000bf2d:	83 ec 0c             	sub    esp,0xc
c000bf30:	6a 01                	push   0x1
c000bf32:	e8 9e f4 ff ff       	call   c000b3d5 <Virt::allocateKernelVirtualPages(int)>
c000bf37:	83 c4 10             	add    esp,0x10
c000bf3a:	89 c2                	mov    edx,eax
c000bf3c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bf40:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000bf43:	83 ec 0c             	sub    esp,0xc
c000bf46:	6a 03                	push   0x3
c000bf48:	6a 01                	push   0x1
c000bf4a:	52                   	push   edx
c000bf4b:	50                   	push   eax
c000bf4c:	53                   	push   ebx
c000bf4d:	e8 e6 fd ff ff       	call   c000bd38 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000bf52:	83 c4 20             	add    esp,0x20
c000bf55:	89 c2                	mov    edx,eax
c000bf57:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bf5b:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000bf5e:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000bf66:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c000bf6e:	7f 1c                	jg     c000bf8c <VAS::VAS(bool)+0xa0>
c000bf70:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bf74:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000bf77:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bf7b:	c1 e2 02             	shl    edx,0x2
c000bf7e:	01 d0                	add    eax,edx
c000bf80:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000bf86:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000bf8a:	eb da                	jmp    c000bf66 <VAS::VAS(bool)+0x7a>
c000bf8c:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c000bf94:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c000bf9c:	7f 7a                	jg     c000c018 <VAS::VAS(bool)+0x12c>
c000bf9e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bfa2:	2d 00 02 00 00       	sub    eax,0x200
c000bfa7:	c1 e0 0c             	shl    eax,0xc
c000bfaa:	83 c8 03             	or     eax,0x3
c000bfad:	89 c2                	mov    edx,eax
c000bfaf:	a1 28 63 02 c0       	mov    eax,ds:0xc0026328
c000bfb4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000bfba:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000bfc0:	83 e0 10             	and    eax,0x10
c000bfc3:	84 c0                	test   al,al
c000bfc5:	74 07                	je     c000bfce <VAS::VAS(bool)+0xe2>
c000bfc7:	b8 00 01 00 00       	mov    eax,0x100
c000bfcc:	eb 05                	jmp    c000bfd3 <VAS::VAS(bool)+0xe7>
c000bfce:	b8 00 00 00 00       	mov    eax,0x0
c000bfd3:	09 d0                	or     eax,edx
c000bfd5:	89 c1                	mov    ecx,eax
c000bfd7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bfdb:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000bfde:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000bfe2:	c1 e2 02             	shl    edx,0x2
c000bfe5:	01 d0                	add    eax,edx
c000bfe7:	89 ca                	mov    edx,ecx
c000bfe9:	89 10                	mov    DWORD PTR [eax],edx
c000bfeb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bfef:	2d 40 03 00 00       	sub    eax,0x340
c000bff4:	83 f8 7f             	cmp    eax,0x7f
c000bff7:	77 16                	ja     c000c00f <VAS::VAS(bool)+0x123>
c000bff9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bffd:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c000:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c004:	c1 e2 02             	shl    edx,0x2
c000c007:	01 d0                	add    eax,edx
c000c009:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000c00f:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000c013:	e9 7c ff ff ff       	jmp    c000bf94 <VAS::VAS(bool)+0xa8>
c000c018:	a1 28 63 02 c0       	mov    eax,ds:0xc0026328
c000c01d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c023:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000c029:	83 e0 10             	and    eax,0x10
c000c02c:	84 c0                	test   al,al
c000c02e:	74 07                	je     c000c037 <VAS::VAS(bool)+0x14b>
c000c030:	b8 03 41 00 00       	mov    eax,0x4103
c000c035:	eb 05                	jmp    c000c03c <VAS::VAS(bool)+0x150>
c000c037:	b8 03 40 00 00       	mov    eax,0x4003
c000c03c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000c040:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000c043:	81 c2 20 0c 00 00    	add    edx,0xc20
c000c049:	89 02                	mov    DWORD PTR [edx],eax
c000c04b:	a1 28 63 02 c0       	mov    eax,ds:0xc0026328
c000c050:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c056:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000c05c:	83 ec 08             	sub    esp,0x8
c000c05f:	50                   	push   eax
c000c060:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c064:	e8 b3 fc ff ff       	call   c000bd1c <VAS::setCPUSpecific(unsigned long)>
c000c069:	83 c4 10             	add    esp,0x10
c000c06c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c070:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000c073:	a1 28 63 02 c0       	mov    eax,ds:0xc0026328
c000c078:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c07e:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000c084:	83 e0 10             	and    eax,0x10
c000c087:	84 c0                	test   al,al
c000c089:	74 07                	je     c000c092 <VAS::VAS(bool)+0x1a6>
c000c08b:	b8 00 01 00 00       	mov    eax,0x100
c000c090:	eb 05                	jmp    c000c097 <VAS::VAS(bool)+0x1ab>
c000c092:	b8 00 00 00 00       	mov    eax,0x0
c000c097:	09 c2                	or     edx,eax
c000c099:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c09d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c0a0:	05 fc 0f 00 00       	add    eax,0xffc
c000c0a5:	83 ca 03             	or     edx,0x3
c000c0a8:	89 10                	mov    DWORD PTR [eax],edx
c000c0aa:	a1 28 63 02 c0       	mov    eax,ds:0xc0026328
c000c0af:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c0b5:	83 ec 0c             	sub    esp,0xc
c000c0b8:	50                   	push   eax
c000c0b9:	e8 f0 1d 00 00       	call   c000deae <Device::getName()>
c000c0be:	83 c4 10             	add    esp,0x10
c000c0c1:	83 ec 08             	sub    esp,0x8
c000c0c4:	68 94 30 02 c0       	push   0xc0023094
c000c0c9:	50                   	push   eax
c000c0ca:	e8 21 45 ff ff       	call   c00005f0 <strcmp>
c000c0cf:	83 c4 10             	add    esp,0x10
c000c0d2:	85 c0                	test   eax,eax
c000c0d4:	0f 94 c0             	sete   al
c000c0d7:	84 c0                	test   al,al
c000c0d9:	0f 84 87 00 00 00    	je     c000c166 <VAS::VAS(bool)+0x27a>
c000c0df:	fa                   	cli    
c000c0e0:	a1 08 98 02 c0       	mov    eax,ds:0xc0029808
c000c0e5:	40                   	inc    eax
c000c0e6:	a3 08 98 02 c0       	mov    ds:0xc0029808,eax
c000c0eb:	a1 28 63 02 c0       	mov    eax,ds:0xc0026328
c000c0f0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c0f6:	05 7c 09 00 00       	add    eax,0x97c
c000c0fb:	83 ec 0c             	sub    esp,0xc
c000c0fe:	50                   	push   eax
c000c0ff:	e8 82 d1 ff ff       	call   c0009286 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000c104:	83 c4 10             	add    esp,0x10
c000c107:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c10c:	89 c3                	mov    ebx,eax
c000c10e:	a1 28 63 02 c0       	mov    eax,ds:0xc0026328
c000c113:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c119:	05 7c 09 00 00       	add    eax,0x97c
c000c11e:	83 ec 0c             	sub    esp,0xc
c000c121:	50                   	push   eax
c000c122:	e8 5f d1 ff ff       	call   c0009286 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000c127:	83 c4 10             	add    esp,0x10
c000c12a:	83 ec 08             	sub    esp,0x8
c000c12d:	50                   	push   eax
c000c12e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c132:	e8 73 f5 ff ff       	call   c000b6aa <VAS::getPageTableEntry(unsigned long)>
c000c137:	83 c4 10             	add    esp,0x10
c000c13a:	8b 00                	mov    eax,DWORD PTR [eax]
c000c13c:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c141:	6a 11                	push   0x11
c000c143:	53                   	push   ebx
c000c144:	50                   	push   eax
c000c145:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c149:	e8 f2 f8 ff ff       	call   c000ba40 <VAS::mapPage(unsigned long, unsigned long, int)>
c000c14e:	83 c4 10             	add    esp,0x10
c000c151:	a1 08 98 02 c0       	mov    eax,ds:0xc0029808
c000c156:	48                   	dec    eax
c000c157:	a3 08 98 02 c0       	mov    ds:0xc0029808,eax
c000c15c:	a1 08 98 02 c0       	mov    eax,ds:0xc0029808
c000c161:	85 c0                	test   eax,eax
c000c163:	75 01                	jne    c000c166 <VAS::VAS(bool)+0x27a>
c000c165:	fb                   	sti    
c000c166:	90                   	nop
c000c167:	83 c4 28             	add    esp,0x28
c000c16a:	5b                   	pop    ebx
c000c16b:	c3                   	ret    

c000c16c <VAS::VAS()>:
c000c16c:	53                   	push   ebx
c000c16d:	83 ec 18             	sub    esp,0x18
c000c170:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c174:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c17b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c17f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000c186:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c18a:	a3 14 64 02 c0       	mov    ds:0xc0026414,eax
c000c18f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c193:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c000c197:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c19b:	c6 00 01             	mov    BYTE PTR [eax],0x1
c000c19e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c1a2:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c000c1a9:	c7 44 24 0c 14 00 00 00 	mov    DWORD PTR [esp+0xc],0x14
c000c1b1:	83 ec 0c             	sub    esp,0xc
c000c1b4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c1b8:	e8 da d5 ff ff       	call   c0009797 <malloc>
c000c1bd:	83 c4 10             	add    esp,0x10
c000c1c0:	89 c3                	mov    ebx,eax
c000c1c2:	83 ec 08             	sub    esp,0x8
c000c1c5:	6a 01                	push   0x1
c000c1c7:	53                   	push   ebx
c000c1c8:	e8 1f fd ff ff       	call   c000beec <VAS::VAS(bool)>
c000c1cd:	83 c4 10             	add    esp,0x10
c000c1d0:	89 1d 0c 64 02 c0    	mov    DWORD PTR ds:0xc002640c,ebx
c000c1d6:	90                   	nop
c000c1d7:	83 c4 18             	add    esp,0x18
c000c1da:	5b                   	pop    ebx
c000c1db:	c3                   	ret    

c000c1dc <VAS::evict(unsigned long)>:
c000c1dc:	55                   	push   ebp
c000c1dd:	57                   	push   edi
c000c1de:	56                   	push   esi
c000c1df:	53                   	push   ebx
c000c1e0:	83 ec 1c             	sub    esp,0x1c
c000c1e3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c1e7:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000c1eb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c1ef:	e8 22 f3 ff ff       	call   c000b516 <Virt::allocateSwapfilePage()>
c000c1f4:	89 c7                	mov    edi,eax
c000c1f6:	a1 2c 5a 02 c0       	mov    eax,ds:0xc0025a2c
c000c1fb:	85 c0                	test   eax,eax
c000c1fd:	7e 3d                	jle    c000c23c <VAS::evict(unsigned long)+0x60>
c000c1ff:	89 ee                	mov    esi,ebp
c000c201:	31 db                	xor    ebx,ebx
c000c203:	83 ec 0c             	sub    esp,0xc
c000c206:	57                   	push   edi
c000c207:	e8 f8 f2 ff ff       	call   c000b504 <Virt::swapIDToSector(unsigned long)>
c000c20c:	89 34 24             	mov    DWORD PTR [esp],esi
c000c20f:	01 d8                	add    eax,ebx
c000c211:	6a 01                	push   0x1
c000c213:	31 d2                	xor    edx,edx
c000c215:	43                   	inc    ebx
c000c216:	52                   	push   edx
c000c217:	81 c6 00 02 00 00    	add    esi,0x200
c000c21d:	50                   	push   eax
c000c21e:	0f be 05 38 5a 02 c0 	movsx  eax,BYTE PTR ds:0xc0025a38
c000c225:	ff 34 85 9c 87 02 c0 	push   DWORD PTR [eax*4-0x3ffd7864]
c000c22c:	e8 15 2d 00 00       	call   c000ef46 <LogicalDisk::write(unsigned long long, int, void*)>
c000c231:	83 c4 20             	add    esp,0x20
c000c234:	39 1d 2c 5a 02 c0    	cmp    DWORD PTR ds:0xc0025a2c,ebx
c000c23a:	7f c7                	jg     c000c203 <VAS::evict(unsigned long)+0x27>
c000c23c:	83 ec 08             	sub    esp,0x8
c000c23f:	c1 e7 0b             	shl    edi,0xb
c000c242:	55                   	push   ebp
c000c243:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c247:	e8 5e f4 ff ff       	call   c000b6aa <VAS::getPageTableEntry(unsigned long)>
c000c24c:	8b 10                	mov    edx,DWORD PTR [eax]
c000c24e:	89 d3                	mov    ebx,edx
c000c250:	81 e2 fe 07 00 00    	and    edx,0x7fe
c000c256:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000c25c:	09 d7                	or     edi,edx
c000c25e:	89 38                	mov    DWORD PTR [eax],edi
c000c260:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000c263:	ff 05 08 64 02 c0    	inc    DWORD PTR ds:0xc0026408
c000c269:	e8 e5 d8 ff ff       	call   c0009b53 <Phys::freePage(unsigned long)>
c000c26e:	0f 20 d8             	mov    eax,cr3
c000c271:	0f 22 d8             	mov    cr3,eax
c000c274:	ff 35 08 64 02 c0    	push   DWORD PTR ds:0xc0026408
c000c27a:	55                   	push   ebp
c000c27b:	53                   	push   ebx
c000c27c:	68 e4 2f 02 c0       	push   0xc0022fe4
c000c281:	e8 ab 04 00 00       	call   c000c731 <Dbg::kprintf(char const*, ...)>
c000c286:	a1 04 64 02 c0       	mov    eax,ds:0xc0026404
c000c28b:	c7 44 24 50 a2 30 02 c0 	mov    DWORD PTR [esp+0x50],0xc00230a2
c000c293:	8d 50 01             	lea    edx,[eax+0x1]
c000c296:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000c29a:	89 15 04 64 02 c0    	mov    DWORD PTR ds:0xc0026404,edx
c000c2a0:	83 c4 3c             	add    esp,0x3c
c000c2a3:	5b                   	pop    ebx
c000c2a4:	5e                   	pop    esi
c000c2a5:	5f                   	pop    edi
c000c2a6:	5d                   	pop    ebp
c000c2a7:	e9 85 04 00 00       	jmp    c000c731 <Dbg::kprintf(char const*, ...)>

c000c2ac <VAS::tryLoadBackOffDisk(unsigned long)>:
c000c2ac:	55                   	push   ebp
c000c2ad:	57                   	push   edi
c000c2ae:	56                   	push   esi
c000c2af:	53                   	push   ebx
c000c2b0:	83 ec 14             	sub    esp,0x14
c000c2b3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c2b7:	68 b3 30 02 c0       	push   0xc00230b3
c000c2bc:	e8 70 04 00 00       	call   c000c731 <Dbg::kprintf(char const*, ...)>
c000c2c1:	83 c4 10             	add    esp,0x10
c000c2c4:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c000c2c8:	81 e5 00 f0 ff ff    	and    ebp,0xfffff000
c000c2ce:	74 20                	je     c000c2f0 <VAS::tryLoadBackOffDisk(unsigned long)+0x44>
c000c2d0:	83 ec 08             	sub    esp,0x8
c000c2d3:	55                   	push   ebp
c000c2d4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c2d8:	e8 cd f3 ff ff       	call   c000b6aa <VAS::getPageTableEntry(unsigned long)>
c000c2dd:	83 c4 10             	add    esp,0x10
c000c2e0:	89 c3                	mov    ebx,eax
c000c2e2:	85 c0                	test   eax,eax
c000c2e4:	74 0a                	je     c000c2f0 <VAS::tryLoadBackOffDisk(unsigned long)+0x44>
c000c2e6:	8b 38                	mov    edi,DWORD PTR [eax]
c000c2e8:	f7 c7 01 00 00 00    	test   edi,0x1
c000c2ee:	74 0a                	je     c000c2fa <VAS::tryLoadBackOffDisk(unsigned long)+0x4e>
c000c2f0:	31 c0                	xor    eax,eax
c000c2f2:	83 c4 0c             	add    esp,0xc
c000c2f5:	5b                   	pop    ebx
c000c2f6:	5e                   	pop    esi
c000c2f7:	5f                   	pop    edi
c000c2f8:	5d                   	pop    ebp
c000c2f9:	c3                   	ret    
c000c2fa:	e8 d7 d8 ff ff       	call   c0009bd6 <Phys::allocatePage()>
c000c2ff:	c1 ef 0b             	shr    edi,0xb
c000c302:	8b 13                	mov    edx,DWORD PTR [ebx]
c000c304:	81 e2 ff 0f 00 00    	and    edx,0xfff
c000c30a:	09 c2                	or     edx,eax
c000c30c:	81 ca 01 08 00 00    	or     edx,0x801
c000c312:	89 13                	mov    DWORD PTR [ebx],edx
c000c314:	8b 0d 2c 5a 02 c0    	mov    ecx,DWORD PTR ds:0xc0025a2c
c000c31a:	85 c9                	test   ecx,ecx
c000c31c:	7e 3d                	jle    c000c35b <VAS::tryLoadBackOffDisk(unsigned long)+0xaf>
c000c31e:	89 ee                	mov    esi,ebp
c000c320:	31 db                	xor    ebx,ebx
c000c322:	83 ec 0c             	sub    esp,0xc
c000c325:	57                   	push   edi
c000c326:	e8 d9 f1 ff ff       	call   c000b504 <Virt::swapIDToSector(unsigned long)>
c000c32b:	89 34 24             	mov    DWORD PTR [esp],esi
c000c32e:	01 d8                	add    eax,ebx
c000c330:	6a 01                	push   0x1
c000c332:	31 d2                	xor    edx,edx
c000c334:	43                   	inc    ebx
c000c335:	52                   	push   edx
c000c336:	81 c6 00 02 00 00    	add    esi,0x200
c000c33c:	50                   	push   eax
c000c33d:	0f be 05 38 5a 02 c0 	movsx  eax,BYTE PTR ds:0xc0025a38
c000c344:	ff 34 85 9c 87 02 c0 	push   DWORD PTR [eax*4-0x3ffd7864]
c000c34b:	e8 8a 2b 00 00       	call   c000eeda <LogicalDisk::read(unsigned long long, int, void*)>
c000c350:	83 c4 20             	add    esp,0x20
c000c353:	39 1d 2c 5a 02 c0    	cmp    DWORD PTR ds:0xc0025a2c,ebx
c000c359:	7f c7                	jg     c000c322 <VAS::tryLoadBackOffDisk(unsigned long)+0x76>
c000c35b:	a1 08 64 02 c0       	mov    eax,ds:0xc0026408
c000c360:	48                   	dec    eax
c000c361:	52                   	push   edx
c000c362:	a3 08 64 02 c0       	mov    ds:0xc0026408,eax
c000c367:	50                   	push   eax
c000c368:	55                   	push   ebp
c000c369:	68 c6 30 02 c0       	push   0xc00230c6
c000c36e:	e8 be 03 00 00       	call   c000c731 <Dbg::kprintf(char const*, ...)>
c000c373:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c376:	e8 6b f1 ff ff       	call   c000b4e6 <Virt::freeSwapfilePage(unsigned long)>
c000c37b:	a1 08 98 02 c0       	mov    eax,ds:0xc0029808
c000c380:	83 c4 10             	add    esp,0x10
c000c383:	48                   	dec    eax
c000c384:	a3 08 98 02 c0       	mov    ds:0xc0029808,eax
c000c389:	85 c0                	test   eax,eax
c000c38b:	74 1d                	je     c000c3aa <VAS::tryLoadBackOffDisk(unsigned long)+0xfe>
c000c38d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000c391:	25 ff 0f 00 00       	and    eax,0xfff
c000c396:	3d e0 0f 00 00       	cmp    eax,0xfe0
c000c39b:	77 10                	ja     c000c3ad <VAS::tryLoadBackOffDisk(unsigned long)+0x101>
c000c39d:	0f 20 d8             	mov    eax,cr3
c000c3a0:	0f 22 d8             	mov    cr3,eax
c000c3a3:	b0 01                	mov    al,0x1
c000c3a5:	e9 48 ff ff ff       	jmp    c000c2f2 <VAS::tryLoadBackOffDisk(unsigned long)+0x46>
c000c3aa:	fb                   	sti    
c000c3ab:	eb e0                	jmp    c000c38d <VAS::tryLoadBackOffDisk(unsigned long)+0xe1>
c000c3ad:	83 ec 0c             	sub    esp,0xc
c000c3b0:	68 db 30 02 c0       	push   0xc00230db
c000c3b5:	e8 77 03 00 00       	call   c000c731 <Dbg::kprintf(char const*, ...)>
c000c3ba:	83 c4 10             	add    esp,0x10
c000c3bd:	eb de                	jmp    c000c39d <VAS::tryLoadBackOffDisk(unsigned long)+0xf1>
c000c3bf:	90                   	nop

c000c3c0 <VAS::scanForEviction()>:
c000c3c0:	57                   	push   edi
c000c3c1:	31 ff                	xor    edi,edi
c000c3c3:	56                   	push   esi
c000c3c4:	53                   	push   ebx
c000c3c5:	83 ec 10             	sub    esp,0x10
c000c3c8:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000c3cc:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000c3cf:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000c3d5:	75 0e                	jne    c000c3e5 <VAS::scanForEviction()+0x25>
c000c3d7:	89 da                	mov    edx,ebx
c000c3d9:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c3dc:	c1 ea 16             	shr    edx,0x16
c000c3df:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000c3e3:	74 4e                	je     c000c433 <VAS::scanForEviction()+0x73>
c000c3e5:	53                   	push   ebx
c000c3e6:	56                   	push   esi
c000c3e7:	e8 be f2 ff ff       	call   c000b6aa <VAS::getPageTableEntry(unsigned long)>
c000c3ec:	5a                   	pop    edx
c000c3ed:	8b 10                	mov    edx,DWORD PTR [eax]
c000c3ef:	59                   	pop    ecx
c000c3f0:	89 d1                	mov    ecx,edx
c000c3f2:	81 e1 01 08 00 00    	and    ecx,0x801
c000c3f8:	81 f9 01 08 00 00    	cmp    ecx,0x801
c000c3fe:	74 3e                	je     c000c43e <VAS::scanForEviction()+0x7e>
c000c400:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c406:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c000c40c:	76 2b                	jbe    c000c439 <VAS::scanForEviction()+0x79>
c000c40e:	47                   	inc    edi
c000c40f:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c000c416:	83 ff 03             	cmp    edi,0x3
c000c419:	74 32                	je     c000c44d <VAS::scanForEviction()+0x8d>
c000c41b:	31 db                	xor    ebx,ebx
c000c41d:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000c423:	75 c0                	jne    c000c3e5 <VAS::scanForEviction()+0x25>
c000c425:	89 da                	mov    edx,ebx
c000c427:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c42a:	c1 ea 16             	shr    edx,0x16
c000c42d:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000c431:	75 b2                	jne    c000c3e5 <VAS::scanForEviction()+0x25>
c000c433:	81 c3 00 00 40 00    	add    ebx,0x400000
c000c439:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c000c43c:	eb 91                	jmp    c000c3cf <VAS::scanForEviction()+0xf>
c000c43e:	f6 c2 20             	test   dl,0x20
c000c441:	74 13                	je     c000c456 <VAS::scanForEviction()+0x96>
c000c443:	83 e2 df             	and    edx,0xffffffdf
c000c446:	89 10                	mov    DWORD PTR [eax],edx
c000c448:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000c44b:	eb b3                	jmp    c000c400 <VAS::scanForEviction()+0x40>
c000c44d:	83 c4 10             	add    esp,0x10
c000c450:	31 c0                	xor    eax,eax
c000c452:	5b                   	pop    ebx
c000c453:	5e                   	pop    esi
c000c454:	5f                   	pop    edi
c000c455:	c3                   	ret    
c000c456:	83 ec 08             	sub    esp,0x8
c000c459:	89 d0                	mov    eax,edx
c000c45b:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c460:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c464:	53                   	push   ebx
c000c465:	68 eb 30 02 c0       	push   0xc00230eb
c000c46a:	e8 c2 02 00 00       	call   c000c731 <Dbg::kprintf(char const*, ...)>
c000c46f:	58                   	pop    eax
c000c470:	5a                   	pop    edx
c000c471:	ff 76 08             	push   DWORD PTR [esi+0x8]
c000c474:	56                   	push   esi
c000c475:	e8 62 fd ff ff       	call   c000c1dc <VAS::evict(unsigned long)>
c000c47a:	59                   	pop    ecx
c000c47b:	5b                   	pop    ebx
c000c47c:	ff 76 08             	push   DWORD PTR [esi+0x8]
c000c47f:	68 ff 30 02 c0       	push   0xc00230ff
c000c484:	e8 a8 02 00 00       	call   c000c731 <Dbg::kprintf(char const*, ...)>
c000c489:	81 46 08 00 10 00 00 	add    DWORD PTR [esi+0x8],0x1000
c000c490:	83 c4 10             	add    esp,0x10
c000c493:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c497:	83 c4 10             	add    esp,0x10
c000c49a:	5b                   	pop    ebx
c000c49b:	5e                   	pop    esi
c000c49c:	5f                   	pop    edi
c000c49d:	c3                   	ret    

c000c49e <mapVASFirstTime>:
c000c49e:	55                   	push   ebp
c000c49f:	57                   	push   edi
c000c4a0:	56                   	push   esi
c000c4a1:	53                   	push   ebx
c000c4a2:	83 ec 0c             	sub    esp,0xc
c000c4a5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000c4aa:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000c4ad:	4a                   	dec    edx
c000c4ae:	0f 84 fe 00 00 00    	je     c000c5b2 <mapVASFirstTime+0x114>
c000c4b4:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000c4b7:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c000c4ba:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000c4bf:	c1 e5 15             	shl    ebp,0x15
c000c4c2:	bf 00 90 e7 01       	mov    edi,0x1e79000
c000c4c7:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c000c4cd:	29 eb                	sub    ebx,ebp
c000c4cf:	29 ef                	sub    edi,ebp
c000c4d1:	83 ec 08             	sub    esp,0x8
c000c4d4:	53                   	push   ebx
c000c4d5:	68 2b 31 02 c0       	push   0xc002312b
c000c4da:	e8 52 02 00 00       	call   c000c731 <Dbg::kprintf(char const*, ...)>
c000c4df:	e8 f2 d6 ff ff       	call   c0009bd6 <Phys::allocatePage()>
c000c4e4:	c7 04 24 03 04 00 00 	mov    DWORD PTR [esp],0x403
c000c4eb:	6a 01                	push   0x1
c000c4ed:	53                   	push   ebx
c000c4ee:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000c4f4:	50                   	push   eax
c000c4f5:	56                   	push   esi
c000c4f6:	e8 3d f8 ff ff       	call   c000bd38 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c4fb:	83 c4 20             	add    esp,0x20
c000c4fe:	39 fb                	cmp    ebx,edi
c000c500:	75 cf                	jne    c000c4d1 <mapVASFirstTime+0x33>
c000c502:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c000c507:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c000c50c:	29 eb                	sub    ebx,ebp
c000c50e:	29 ef                	sub    edi,ebp
c000c510:	83 ec 08             	sub    esp,0x8
c000c513:	53                   	push   ebx
c000c514:	68 47 31 02 c0       	push   0xc0023147
c000c519:	e8 13 02 00 00       	call   c000c731 <Dbg::kprintf(char const*, ...)>
c000c51e:	58                   	pop    eax
c000c51f:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c000c523:	5a                   	pop    edx
c000c524:	19 c0                	sbb    eax,eax
c000c526:	83 e0 04             	and    eax,0x4
c000c529:	05 03 04 00 00       	add    eax,0x403
c000c52e:	50                   	push   eax
c000c52f:	68 5b 31 02 c0       	push   0xc002315b
c000c534:	e8 f8 01 00 00       	call   c000c731 <Dbg::kprintf(char const*, ...)>
c000c539:	e8 98 d6 ff ff       	call   c0009bd6 <Phys::allocatePage()>
c000c53e:	59                   	pop    ecx
c000c53f:	89 c5                	mov    ebp,eax
c000c541:	58                   	pop    eax
c000c542:	55                   	push   ebp
c000c543:	68 69 31 02 c0       	push   0xc0023169
c000c548:	e8 e4 01 00 00       	call   c000c731 <Dbg::kprintf(char const*, ...)>
c000c54d:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c000c551:	19 d2                	sbb    edx,edx
c000c553:	83 e2 04             	and    edx,0x4
c000c556:	81 c2 03 04 00 00    	add    edx,0x403
c000c55c:	89 14 24             	mov    DWORD PTR [esp],edx
c000c55f:	6a 01                	push   0x1
c000c561:	53                   	push   ebx
c000c562:	55                   	push   ebp
c000c563:	56                   	push   esi
c000c564:	e8 cf f7 ff ff       	call   c000bd38 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c569:	83 c4 18             	add    esp,0x18
c000c56c:	53                   	push   ebx
c000c56d:	56                   	push   esi
c000c56e:	e8 37 f1 ff ff       	call   c000b6aa <VAS::getPageTableEntry(unsigned long)>
c000c573:	5a                   	pop    edx
c000c574:	59                   	pop    ecx
c000c575:	ff 30                	push   DWORD PTR [eax]
c000c577:	68 85 31 02 c0       	push   0xc0023185
c000c57c:	e8 b0 01 00 00       	call   c000c731 <Dbg::kprintf(char const*, ...)>
c000c581:	0f 20 d8             	mov    eax,cr3
c000c584:	83 c4 0c             	add    esp,0xc
c000c587:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000c58d:	56                   	push   esi
c000c58e:	50                   	push   eax
c000c58f:	68 90 31 02 c0       	push   0xc0023190
c000c594:	e8 98 01 00 00       	call   c000c731 <Dbg::kprintf(char const*, ...)>
c000c599:	83 c4 10             	add    esp,0x10
c000c59c:	39 df                	cmp    edi,ebx
c000c59e:	0f 85 6c ff ff ff    	jne    c000c510 <mapVASFirstTime+0x72>
c000c5a4:	0f 20 d8             	mov    eax,cr3
c000c5a7:	0f 22 d8             	mov    cr3,eax
c000c5aa:	83 c4 0c             	add    esp,0xc
c000c5ad:	5b                   	pop    ebx
c000c5ae:	5e                   	pop    esi
c000c5af:	5f                   	pop    edi
c000c5b0:	5d                   	pop    ebp
c000c5b1:	c3                   	ret    
c000c5b2:	83 ec 0c             	sub    esp,0xc
c000c5b5:	68 12 31 02 c0       	push   0xc0023112
c000c5ba:	e8 72 01 00 00       	call   c000c731 <Dbg::kprintf(char const*, ...)>
c000c5bf:	83 c4 10             	add    esp,0x10
c000c5c2:	83 c4 0c             	add    esp,0xc
c000c5c5:	5b                   	pop    ebx
c000c5c6:	5e                   	pop    esi
c000c5c7:	5f                   	pop    edi
c000c5c8:	5d                   	pop    ebp
c000c5c9:	c3                   	ret    

c000c5ca <__cxa_atexit>:
c000c5ca:	31 c0                	xor    eax,eax
c000c5cc:	c3                   	ret    

c000c5cd <__cxa_finalize>:
c000c5cd:	c3                   	ret    

c000c5ce <__stack_chk_fail>:
c000c5ce:	55                   	push   ebp
c000c5cf:	89 e5                	mov    ebp,esp
c000c5d1:	83 ec 14             	sub    esp,0x14
c000c5d4:	68 a8 31 02 c0       	push   0xc00231a8
c000c5d9:	e8 53 01 00 00       	call   c000c731 <Dbg::kprintf(char const*, ...)>
c000c5de:	58                   	pop    eax
c000c5df:	5a                   	pop    edx
c000c5e0:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c5e3:	68 f8 31 02 c0       	push   0xc00231f8
c000c5e8:	e8 44 01 00 00       	call   c000c731 <Dbg::kprintf(char const*, ...)>
c000c5ed:	59                   	pop    ecx
c000c5ee:	58                   	pop    eax
c000c5ef:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c5f2:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000c5f5:	68 f8 31 02 c0       	push   0xc00231f8
c000c5fa:	e8 32 01 00 00       	call   c000c731 <Dbg::kprintf(char const*, ...)>
c000c5ff:	5a                   	pop    edx
c000c600:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c603:	59                   	pop    ecx
c000c604:	8b 00                	mov    eax,DWORD PTR [eax]
c000c606:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000c609:	68 f8 31 02 c0       	push   0xc00231f8
c000c60e:	e8 1e 01 00 00       	call   c000c731 <Dbg::kprintf(char const*, ...)>
c000c613:	5a                   	pop    edx
c000c614:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c617:	59                   	pop    ecx
c000c618:	8b 00                	mov    eax,DWORD PTR [eax]
c000c61a:	8b 00                	mov    eax,DWORD PTR [eax]
c000c61c:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000c61f:	68 f8 31 02 c0       	push   0xc00231f8
c000c624:	e8 08 01 00 00       	call   c000c731 <Dbg::kprintf(char const*, ...)>
c000c629:	c7 04 24 00 32 02 c0 	mov    DWORD PTR [esp],0xc0023200
c000c630:	e8 66 64 00 00       	call   c0012a9b <Krnl::panic(char const*)>
c000c635:	83 c4 10             	add    esp,0x10
c000c638:	c9                   	leave  
c000c639:	c3                   	ret    

c000c63a <__cxa_pure_virtual>:
c000c63a:	83 ec 18             	sub    esp,0x18
c000c63d:	68 18 32 02 c0       	push   0xc0023218
c000c642:	e8 54 64 00 00       	call   c0012a9b <Krnl::panic(char const*)>
c000c647:	83 c4 1c             	add    esp,0x1c
c000c64a:	c3                   	ret    

c000c64b <operator new[](unsigned long)>:
c000c64b:	e9 47 d1 ff ff       	jmp    c0009797 <malloc>

c000c650 <operator delete(void*, unsigned long)>:
c000c650:	e9 62 d1 ff ff       	jmp    c00097b7 <rfree>

c000c655 <operator delete[](void*)>:
c000c655:	e9 5d d1 ff ff       	jmp    c00097b7 <rfree>

c000c65a <operator delete[](void*, unsigned long)>:
c000c65a:	e9 58 d1 ff ff       	jmp    c00097b7 <rfree>

c000c65f <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000c65f:	55                   	push   ebp
c000c660:	b9 11 00 00 00       	mov    ecx,0x11
c000c665:	57                   	push   edi
c000c666:	56                   	push   esi
c000c667:	be fe 2c 02 c0       	mov    esi,0xc0022cfe
c000c66c:	53                   	push   ebx
c000c66d:	83 ec 20             	sub    esp,0x20
c000c670:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000c674:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000c678:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c000c67c:	fc                   	cld    
c000c67d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c67f:	89 ee                	mov    esi,ebp
c000c681:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000c685:	eb 02                	jmp    c000c689 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x2a>
c000c687:	89 c6                	mov    esi,eax
c000c689:	31 d2                	xor    edx,edx
c000c68b:	41                   	inc    ecx
c000c68c:	89 f0                	mov    eax,esi
c000c68e:	f7 f3                	div    ebx
c000c690:	39 de                	cmp    esi,ebx
c000c692:	73 f3                	jae    c000c687 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x28>
c000c694:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000c697:	eb 02                	jmp    c000c69b <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3c>
c000c699:	89 c5                	mov    ebp,eax
c000c69b:	31 d2                	xor    edx,edx
c000c69d:	49                   	dec    ecx
c000c69e:	89 e8                	mov    eax,ebp
c000c6a0:	f7 f3                	div    ebx
c000c6a2:	39 dd                	cmp    ebp,ebx
c000c6a4:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c000c6a8:	88 11                	mov    BYTE PTR [ecx],dl
c000c6aa:	73 ed                	jae    c000c699 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3a>
c000c6ac:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c6b0:	83 c4 20             	add    esp,0x20
c000c6b3:	5b                   	pop    ebx
c000c6b4:	5e                   	pop    esi
c000c6b5:	5f                   	pop    edi
c000c6b6:	5d                   	pop    ebp
c000c6b7:	c3                   	ret    

c000c6b8 <Dbg::logc(char)>:
c000c6b8:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000c6bc:	f6 05 40 63 02 c0 10 	test   BYTE PTR ds:0xc0026340,0x10
c000c6c3:	75 12                	jne    c000c6d7 <Dbg::logc(char)+0x1f>
c000c6c5:	ba fd 03 00 00       	mov    edx,0x3fd
c000c6ca:	ec                   	in     al,dx
c000c6cb:	a8 20                	test   al,0x20
c000c6cd:	74 fb                	je     c000c6ca <Dbg::logc(char)+0x12>
c000c6cf:	ba f8 03 00 00       	mov    edx,0x3f8
c000c6d4:	88 c8                	mov    al,cl
c000c6d6:	ee                   	out    dx,al
c000c6d7:	c3                   	ret    

c000c6d8 <Dbg::logs(char*)>:
c000c6d8:	53                   	push   ebx
c000c6d9:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000c6dd:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000c6e0:	84 c0                	test   al,al
c000c6e2:	74 0f                	je     c000c6f3 <Dbg::logs(char*)+0x1b>
c000c6e4:	50                   	push   eax
c000c6e5:	43                   	inc    ebx
c000c6e6:	e8 cd ff ff ff       	call   c000c6b8 <Dbg::logc(char)>
c000c6eb:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000c6ee:	5a                   	pop    edx
c000c6ef:	84 c0                	test   al,al
c000c6f1:	75 f1                	jne    c000c6e4 <Dbg::logs(char*)+0xc>
c000c6f3:	5b                   	pop    ebx
c000c6f4:	c3                   	ret    

c000c6f5 <Dbg::logWriteInt(unsigned int)>:
c000c6f5:	83 ec 10             	sub    esp,0x10
c000c6f8:	6a 0a                	push   0xa
c000c6fa:	8d 44 24 08          	lea    eax,[esp+0x8]
c000c6fe:	50                   	push   eax
c000c6ff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c703:	e8 57 ff ff ff       	call   c000c65f <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000c708:	50                   	push   eax
c000c709:	e8 ca ff ff ff       	call   c000c6d8 <Dbg::logs(char*)>
c000c70e:	83 c4 20             	add    esp,0x20
c000c711:	c3                   	ret    

c000c712 <Dbg::logWriteIntBase(unsigned int, int)>:
c000c712:	83 ec 10             	sub    esp,0x10
c000c715:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c719:	8d 44 24 08          	lea    eax,[esp+0x8]
c000c71d:	50                   	push   eax
c000c71e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c722:	e8 38 ff ff ff       	call   c000c65f <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000c727:	50                   	push   eax
c000c728:	e8 ab ff ff ff       	call   c000c6d8 <Dbg::logs(char*)>
c000c72d:	83 c4 20             	add    esp,0x20
c000c730:	c3                   	ret    

c000c731 <Dbg::kprintf(char const*, ...)>:
c000c731:	55                   	push   ebp
c000c732:	57                   	push   edi
c000c733:	56                   	push   esi
c000c734:	53                   	push   ebx
c000c735:	83 ec 0c             	sub    esp,0xc
c000c738:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000c73c:	f6 05 40 63 02 c0 10 	test   BYTE PTR ds:0xc0026340,0x10
c000c743:	74 08                	je     c000c74d <Dbg::kprintf(char const*, ...)+0x1c>
c000c745:	83 c4 0c             	add    esp,0xc
c000c748:	5b                   	pop    ebx
c000c749:	5e                   	pop    esi
c000c74a:	5f                   	pop    edi
c000c74b:	5d                   	pop    ebp
c000c74c:	c3                   	ret    
c000c74d:	8d 44 24 24          	lea    eax,[esp+0x24]
c000c751:	31 db                	xor    ebx,ebx
c000c753:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c757:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000c75a:	84 c0                	test   al,al
c000c75c:	74 e7                	je     c000c745 <Dbg::kprintf(char const*, ...)+0x14>
c000c75e:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000c761:	3c 25                	cmp    al,0x25
c000c763:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c000c766:	75 44                	jne    c000c7ac <Dbg::kprintf(char const*, ...)+0x7b>
c000c768:	83 c3 02             	add    ebx,0x2
c000c76b:	8a 07                	mov    al,BYTE PTR [edi]
c000c76d:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c000c770:	83 e8 25             	sub    eax,0x25
c000c773:	3c 53                	cmp    al,0x53
c000c775:	0f 87 c9 00 00 00    	ja     c000c844 <Dbg::kprintf(char const*, ...)+0x113>
c000c77b:	0f b6 c0             	movzx  eax,al
c000c77e:	ff 24 85 2c 32 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdcdd4]
c000c785:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000c789:	89 c8                	mov    eax,ecx
c000c78b:	83 c1 04             	add    ecx,0x4
c000c78e:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000c792:	ff 30                	push   DWORD PTR [eax]
c000c794:	e8 5c ff ff ff       	call   c000c6f5 <Dbg::logWriteInt(unsigned int)>
c000c799:	5f                   	pop    edi
c000c79a:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000c79e:	84 c0                	test   al,al
c000c7a0:	74 a3                	je     c000c745 <Dbg::kprintf(char const*, ...)+0x14>
c000c7a2:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000c7a5:	3c 25                	cmp    al,0x25
c000c7a7:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c000c7aa:	74 bc                	je     c000c768 <Dbg::kprintf(char const*, ...)+0x37>
c000c7ac:	50                   	push   eax
c000c7ad:	89 eb                	mov    ebx,ebp
c000c7af:	e8 04 ff ff ff       	call   c000c6b8 <Dbg::logc(char)>
c000c7b4:	89 fd                	mov    ebp,edi
c000c7b6:	58                   	pop    eax
c000c7b7:	eb e1                	jmp    c000c79a <Dbg::kprintf(char const*, ...)+0x69>
c000c7b9:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000c7bd:	89 c8                	mov    eax,ecx
c000c7bf:	83 c1 04             	add    ecx,0x4
c000c7c2:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000c7c6:	ff 30                	push   DWORD PTR [eax]
c000c7c8:	e8 0b ff ff ff       	call   c000c6d8 <Dbg::logs(char*)>
c000c7cd:	58                   	pop    eax
c000c7ce:	eb ca                	jmp    c000c79a <Dbg::kprintf(char const*, ...)+0x69>
c000c7d0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000c7d4:	89 d0                	mov    eax,edx
c000c7d6:	83 c2 04             	add    edx,0x4
c000c7d9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000c7dd:	ff 30                	push   DWORD PTR [eax]
c000c7df:	e8 11 ff ff ff       	call   c000c6f5 <Dbg::logWriteInt(unsigned int)>
c000c7e4:	58                   	pop    eax
c000c7e5:	eb b3                	jmp    c000c79a <Dbg::kprintf(char const*, ...)+0x69>
c000c7e7:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000c7eb:	89 d0                	mov    eax,edx
c000c7ed:	83 c2 04             	add    edx,0x4
c000c7f0:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000c7f3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000c7f7:	50                   	push   eax
c000c7f8:	e8 bb fe ff ff       	call   c000c6b8 <Dbg::logc(char)>
c000c7fd:	58                   	pop    eax
c000c7fe:	eb 9a                	jmp    c000c79a <Dbg::kprintf(char const*, ...)+0x69>
c000c800:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000c804:	89 c8                	mov    eax,ecx
c000c806:	83 c1 04             	add    ecx,0x4
c000c809:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000c80d:	6a 10                	push   0x10
c000c80f:	ff 30                	push   DWORD PTR [eax]
c000c811:	e8 fc fe ff ff       	call   c000c712 <Dbg::logWriteIntBase(unsigned int, int)>
c000c816:	59                   	pop    ecx
c000c817:	5f                   	pop    edi
c000c818:	eb 80                	jmp    c000c79a <Dbg::kprintf(char const*, ...)+0x69>
c000c81a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000c81e:	89 d0                	mov    eax,edx
c000c820:	83 c2 08             	add    edx,0x8
c000c823:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000c827:	6a 10                	push   0x10
c000c829:	ff 30                	push   DWORD PTR [eax]
c000c82b:	e8 e2 fe ff ff       	call   c000c712 <Dbg::logWriteIntBase(unsigned int, int)>
c000c830:	58                   	pop    eax
c000c831:	5a                   	pop    edx
c000c832:	e9 63 ff ff ff       	jmp    c000c79a <Dbg::kprintf(char const*, ...)+0x69>
c000c837:	6a 25                	push   0x25
c000c839:	e8 7a fe ff ff       	call   c000c6b8 <Dbg::logc(char)>
c000c83e:	58                   	pop    eax
c000c83f:	e9 56 ff ff ff       	jmp    c000c79a <Dbg::kprintf(char const*, ...)+0x69>
c000c844:	6a 25                	push   0x25
c000c846:	e8 6d fe ff ff       	call   c000c6b8 <Dbg::logc(char)>
c000c84b:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000c84e:	50                   	push   eax
c000c84f:	e8 64 fe ff ff       	call   c000c6b8 <Dbg::logc(char)>
c000c854:	5a                   	pop    edx
c000c855:	59                   	pop    ecx
c000c856:	e9 3f ff ff ff       	jmp    c000c79a <Dbg::kprintf(char const*, ...)+0x69>
c000c85b:	90                   	nop

c000c85c <File::read(unsigned long long, void*, int*)>:
c000c85c:	53                   	push   ebx
c000c85d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c861:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000c865:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000c86c:	3c 19                	cmp    al,0x19
c000c86e:	77 35                	ja     c000c8a5 <File::read(unsigned long long, void*, int*)+0x49>
c000c870:	8b 04 85 a0 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7760]
c000c877:	85 c0                	test   eax,eax
c000c879:	74 2a                	je     c000c8a5 <File::read(unsigned long long, void*, int*)+0x49>
c000c87b:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000c881:	85 c0                	test   eax,eax
c000c883:	74 20                	je     c000c8a5 <File::read(unsigned long long, void*, int*)+0x49>
c000c885:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000c889:	74 21                	je     c000c8ac <File::read(unsigned long long, void*, int*)+0x50>
c000c88b:	8b 08                	mov    ecx,DWORD PTR [eax]
c000c88d:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000c891:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000c897:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c89b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c89f:	5b                   	pop    ebx
c000c8a0:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000c8a3:	ff e0                	jmp    eax
c000c8a5:	b8 0b 00 00 00       	mov    eax,0xb
c000c8aa:	eb 05                	jmp    c000c8b1 <File::read(unsigned long long, void*, int*)+0x55>
c000c8ac:	b8 05 00 00 00       	mov    eax,0x5
c000c8b1:	5b                   	pop    ebx
c000c8b2:	c3                   	ret    
c000c8b3:	90                   	nop

c000c8b4 <File::write(unsigned long long, void*, int*)>:
c000c8b4:	53                   	push   ebx
c000c8b5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c8b9:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000c8bd:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000c8c4:	3c 19                	cmp    al,0x19
c000c8c6:	77 35                	ja     c000c8fd <File::write(unsigned long long, void*, int*)+0x49>
c000c8c8:	8b 04 85 a0 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7760]
c000c8cf:	85 c0                	test   eax,eax
c000c8d1:	74 2a                	je     c000c8fd <File::write(unsigned long long, void*, int*)+0x49>
c000c8d3:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000c8d9:	85 c0                	test   eax,eax
c000c8db:	74 20                	je     c000c8fd <File::write(unsigned long long, void*, int*)+0x49>
c000c8dd:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000c8e1:	74 21                	je     c000c904 <File::write(unsigned long long, void*, int*)+0x50>
c000c8e3:	8b 08                	mov    ecx,DWORD PTR [eax]
c000c8e5:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000c8e9:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000c8ef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c8f3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c8f7:	5b                   	pop    ebx
c000c8f8:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000c8fb:	ff e0                	jmp    eax
c000c8fd:	b8 0b 00 00 00       	mov    eax,0xb
c000c902:	eb 05                	jmp    c000c909 <File::write(unsigned long long, void*, int*)+0x55>
c000c904:	b8 05 00 00 00       	mov    eax,0x5
c000c909:	5b                   	pop    ebx
c000c90a:	c3                   	ret    
c000c90b:	90                   	nop

c000c90c <Directory::read(unsigned long long, void*, int*)>:
c000c90c:	53                   	push   ebx
c000c90d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c911:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000c915:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000c91c:	3c 19                	cmp    al,0x19
c000c91e:	77 35                	ja     c000c955 <Directory::read(unsigned long long, void*, int*)+0x49>
c000c920:	8b 04 85 a0 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7760]
c000c927:	85 c0                	test   eax,eax
c000c929:	74 2a                	je     c000c955 <Directory::read(unsigned long long, void*, int*)+0x49>
c000c92b:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000c931:	85 c0                	test   eax,eax
c000c933:	74 20                	je     c000c955 <Directory::read(unsigned long long, void*, int*)+0x49>
c000c935:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000c939:	74 21                	je     c000c95c <Directory::read(unsigned long long, void*, int*)+0x50>
c000c93b:	8b 08                	mov    ecx,DWORD PTR [eax]
c000c93d:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000c941:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000c947:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c94b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c94f:	5b                   	pop    ebx
c000c950:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c000c953:	ff e0                	jmp    eax
c000c955:	b8 0b 00 00 00       	mov    eax,0xb
c000c95a:	eb 05                	jmp    c000c961 <Directory::read(unsigned long long, void*, int*)+0x55>
c000c95c:	b8 05 00 00 00       	mov    eax,0x5
c000c961:	5b                   	pop    ebx
c000c962:	c3                   	ret    
c000c963:	90                   	nop

c000c964 <Directory::write(unsigned long long, void*, int*)>:
c000c964:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c968:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000c96f:	b8 0b 00 00 00       	mov    eax,0xb
c000c974:	80 fa 19             	cmp    dl,0x19
c000c977:	77 18                	ja     c000c991 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000c979:	8b 14 95 a0 88 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7760]
c000c980:	85 d2                	test   edx,edx
c000c982:	74 0d                	je     c000c991 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000c984:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c000c98b:	19 c0                	sbb    eax,eax
c000c98d:	83 e0 0a             	and    eax,0xa
c000c990:	40                   	inc    eax
c000c991:	c3                   	ret    

c000c992 <File::isAtty()>:
c000c992:	31 c0                	xor    eax,eax
c000c994:	c3                   	ret    
c000c995:	90                   	nop

c000c996 <Directory::isAtty()>:
c000c996:	31 c0                	xor    eax,eax
c000c998:	c3                   	ret    
c000c999:	90                   	nop

c000c99a <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000c99a:	b8 0a 00 00 00       	mov    eax,0xa
c000c99f:	c3                   	ret    

c000c9a0 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000c9a0:	b8 0a 00 00 00       	mov    eax,0xa
c000c9a5:	c3                   	ret    

c000c9a6 <Filesystem::allocateSwapfile(char const*, int)>:
c000c9a6:	31 c0                	xor    eax,eax
c000c9a8:	31 d2                	xor    edx,edx
c000c9aa:	c3                   	ret    
c000c9ab:	90                   	nop

c000c9ac <File::~File()>:
c000c9ac:	83 ec 0c             	sub    esp,0xc
c000c9af:	ba 68 34 02 c0       	mov    edx,0xc0023468
c000c9b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c9b8:	89 10                	mov    DWORD PTR [eax],edx
c000c9ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c9be:	83 ec 0c             	sub    esp,0xc
c000c9c1:	50                   	push   eax
c000c9c2:	e8 ad e7 ff ff       	call   c000b174 <UnixFile::~UnixFile()>
c000c9c7:	83 c4 10             	add    esp,0x10
c000c9ca:	90                   	nop
c000c9cb:	83 c4 0c             	add    esp,0xc
c000c9ce:	c3                   	ret    
c000c9cf:	90                   	nop

c000c9d0 <File::~File()>:
c000c9d0:	83 ec 0c             	sub    esp,0xc
c000c9d3:	83 ec 0c             	sub    esp,0xc
c000c9d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c9da:	e8 cd ff ff ff       	call   c000c9ac <File::~File()>
c000c9df:	83 c4 10             	add    esp,0x10
c000c9e2:	83 ec 08             	sub    esp,0x8
c000c9e5:	68 14 01 00 00       	push   0x114
c000c9ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c9ee:	e8 5d fc ff ff       	call   c000c650 <operator delete(void*, unsigned long)>
c000c9f3:	83 c4 10             	add    esp,0x10
c000c9f6:	83 c4 0c             	add    esp,0xc
c000c9f9:	c3                   	ret    

c000c9fa <Directory::~Directory()>:
c000c9fa:	83 ec 0c             	sub    esp,0xc
c000c9fd:	ba 84 34 02 c0       	mov    edx,0xc0023484
c000ca02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca06:	89 10                	mov    DWORD PTR [eax],edx
c000ca08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca0c:	83 ec 0c             	sub    esp,0xc
c000ca0f:	50                   	push   eax
c000ca10:	e8 5f e7 ff ff       	call   c000b174 <UnixFile::~UnixFile()>
c000ca15:	83 c4 10             	add    esp,0x10
c000ca18:	90                   	nop
c000ca19:	83 c4 0c             	add    esp,0xc
c000ca1c:	c3                   	ret    
c000ca1d:	90                   	nop

c000ca1e <Directory::~Directory()>:
c000ca1e:	83 ec 0c             	sub    esp,0xc
c000ca21:	83 ec 0c             	sub    esp,0xc
c000ca24:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca28:	e8 cd ff ff ff       	call   c000c9fa <Directory::~Directory()>
c000ca2d:	83 c4 10             	add    esp,0x10
c000ca30:	83 ec 08             	sub    esp,0x8
c000ca33:	68 14 01 00 00       	push   0x114
c000ca38:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca3c:	e8 0f fc ff ff       	call   c000c650 <operator delete(void*, unsigned long)>
c000ca41:	83 c4 10             	add    esp,0x10
c000ca44:	83 c4 0c             	add    esp,0xc
c000ca47:	c3                   	ret    

c000ca48 <Filesystem::Filesystem()>:
c000ca48:	ba 00 34 02 c0       	mov    edx,0xc0023400
c000ca4d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ca51:	89 10                	mov    DWORD PTR [eax],edx
c000ca53:	8b 15 18 64 02 c0    	mov    edx,DWORD PTR ds:0xc0026418
c000ca59:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ca5d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000ca60:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ca64:	a3 18 64 02 c0       	mov    ds:0xc0026418,eax
c000ca69:	90                   	nop
c000ca6a:	c3                   	ret    
c000ca6b:	90                   	nop

c000ca6c <Filesystem::~Filesystem()>:
c000ca6c:	ba 00 34 02 c0       	mov    edx,0xc0023400
c000ca71:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ca75:	89 10                	mov    DWORD PTR [eax],edx
c000ca77:	90                   	nop
c000ca78:	c3                   	ret    
c000ca79:	90                   	nop

c000ca7a <Filesystem::~Filesystem()>:
c000ca7a:	83 ec 0c             	sub    esp,0xc
c000ca7d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000ca81:	e8 e6 ff ff ff       	call   c000ca6c <Filesystem::~Filesystem()>
c000ca86:	83 c4 04             	add    esp,0x4
c000ca89:	83 ec 08             	sub    esp,0x8
c000ca8c:	6a 08                	push   0x8
c000ca8e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca92:	e8 b9 fb ff ff       	call   c000c650 <operator delete(void*, unsigned long)>
c000ca97:	83 c4 10             	add    esp,0x10
c000ca9a:	83 c4 0c             	add    esp,0xc
c000ca9d:	c3                   	ret    

c000ca9e <Fs::getcwd(Process*, char*, int)>:
c000ca9e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000caa2:	31 c0                	xor    eax,eax
c000caa4:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000caa7:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000caab:	7d 15                	jge    c000cac2 <Fs::getcwd(Process*, char*, int)+0x24>
c000caad:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000cab1:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000cab8:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000cabb:	84 c9                	test   cl,cl
c000cabd:	74 06                	je     c000cac5 <Fs::getcwd(Process*, char*, int)+0x27>
c000cabf:	40                   	inc    eax
c000cac0:	eb e2                	jmp    c000caa4 <Fs::getcwd(Process*, char*, int)+0x6>
c000cac2:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000cac5:	31 c0                	xor    eax,eax
c000cac7:	c3                   	ret    

c000cac8 <Fs::initVFS()>:
c000cac8:	83 ec 18             	sub    esp,0x18
c000cacb:	6a 08                	push   0x8
c000cacd:	e8 c5 cc ff ff       	call   c0009797 <malloc>
c000cad2:	89 04 24             	mov    DWORD PTR [esp],eax
c000cad5:	e8 ce e4 00 00       	call   c001afa8 <FAT::FAT()>
c000cada:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000cae1:	e8 b1 cc ff ff       	call   c0009797 <malloc>
c000cae6:	89 04 24             	mov    DWORD PTR [esp],eax
c000cae9:	e8 4a f7 00 00       	call   c001c238 <ISO9660::ISO9660()>
c000caee:	83 c4 1c             	add    esp,0x1c
c000caf1:	c3                   	ret    

c000caf2 <Fs::standardiseFiles(char*, char const*, char const*)>:
c000caf2:	55                   	push   ebp
c000caf3:	57                   	push   edi
c000caf4:	56                   	push   esi
c000caf5:	53                   	push   ebx
c000caf6:	81 ec 10 04 00 00    	sub    esp,0x410
c000cafc:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c000cb03:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c000cb0a:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c000cb11:	68 00 04 00 00       	push   0x400
c000cb16:	6a 00                	push   0x0
c000cb18:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000cb1c:	56                   	push   esi
c000cb1d:	e8 86 39 ff ff       	call   c00004a8 <memset>
c000cb22:	83 c4 10             	add    esp,0x10
c000cb25:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c000cb29:	75 0b                	jne    c000cb36 <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c000cb2b:	50                   	push   eax
c000cb2c:	50                   	push   eax
c000cb2d:	57                   	push   edi
c000cb2e:	56                   	push   esi
c000cb2f:	e8 30 3a ff ff       	call   c0000564 <strcpy>
c000cb34:	eb 41                	jmp    c000cb77 <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c000cb36:	8a 07                	mov    al,BYTE PTR [edi]
c000cb38:	3c 5c                	cmp    al,0x5c
c000cb3a:	74 04                	je     c000cb40 <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c000cb3c:	3c 2f                	cmp    al,0x2f
c000cb3e:	75 18                	jne    c000cb58 <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c000cb40:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000cb43:	3c 60                	cmp    al,0x60
c000cb45:	7e 03                	jle    c000cb4a <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c000cb47:	83 e8 20             	sub    eax,0x20
c000cb4a:	88 04 24             	mov    BYTE PTR [esp],al
c000cb4d:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000cb54:	50                   	push   eax
c000cb55:	50                   	push   eax
c000cb56:	eb 18                	jmp    c000cb70 <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c000cb58:	50                   	push   eax
c000cb59:	50                   	push   eax
c000cb5a:	55                   	push   ebp
c000cb5b:	56                   	push   esi
c000cb5c:	e8 03 3a ff ff       	call   c0000564 <strcpy>
c000cb61:	5a                   	pop    edx
c000cb62:	59                   	pop    ecx
c000cb63:	68 13 45 02 c0       	push   0xc0024513
c000cb68:	56                   	push   esi
c000cb69:	e8 36 3b ff ff       	call   c00006a4 <strcat>
c000cb6e:	5d                   	pop    ebp
c000cb6f:	58                   	pop    eax
c000cb70:	57                   	push   edi
c000cb71:	56                   	push   esi
c000cb72:	e8 2d 3b ff ff       	call   c00006a4 <strcat>
c000cb77:	83 c4 10             	add    esp,0x10
c000cb7a:	8a 04 24             	mov    al,BYTE PTR [esp]
c000cb7d:	3c 60                	cmp    al,0x60
c000cb7f:	7e 03                	jle    c000cb84 <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c000cb81:	83 e8 20             	sub    eax,0x20
c000cb84:	88 04 24             	mov    BYTE PTR [esp],al
c000cb87:	88 03                	mov    BYTE PTR [ebx],al
c000cb89:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000cb90:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c000cb96:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000cb9a:	bf 03 00 00 00       	mov    edi,0x3
c000cb9f:	b8 03 00 00 00       	mov    eax,0x3
c000cba4:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c000cba7:	84 d2                	test   dl,dl
c000cba9:	0f 84 91 00 00 00    	je     c000cc40 <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c000cbaf:	8d 4f 01             	lea    ecx,[edi+0x1]
c000cbb2:	80 fa 5c             	cmp    dl,0x5c
c000cbb5:	74 05                	je     c000cbbc <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c000cbb7:	80 fa 2f             	cmp    dl,0x2f
c000cbba:	75 12                	jne    c000cbce <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000cbbc:	89 c5                	mov    ebp,eax
c000cbbe:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000cbc3:	74 09                	je     c000cbce <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000cbc5:	40                   	inc    eax
c000cbc6:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c000cbca:	89 cf                	mov    edi,ecx
c000cbcc:	eb d6                	jmp    c000cba4 <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c000cbce:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c000cbd3:	75 5b                	jne    c000cc30 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000cbd5:	80 fa 2e             	cmp    dl,0x2e
c000cbd8:	75 56                	jne    c000cc30 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000cbda:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c000cbde:	74 19                	je     c000cbf9 <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c000cbe0:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000cbe5:	74 53                	je     c000cc3a <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000cbe7:	89 f9                	mov    ecx,edi
c000cbe9:	41                   	inc    ecx
c000cbea:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000cbed:	80 fa 2f             	cmp    dl,0x2f
c000cbf0:	74 f7                	je     c000cbe9 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000cbf2:	80 fa 5c             	cmp    dl,0x5c
c000cbf5:	74 f2                	je     c000cbe9 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000cbf7:	eb d1                	jmp    c000cbca <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000cbf9:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000cbfe:	74 3a                	je     c000cc3a <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000cc00:	83 f8 03             	cmp    eax,0x3
c000cc03:	74 c5                	je     c000cbca <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000cc05:	41                   	inc    ecx
c000cc06:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000cc09:	80 fa 2f             	cmp    dl,0x2f
c000cc0c:	74 f7                	je     c000cc05 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000cc0e:	80 fa 5c             	cmp    dl,0x5c
c000cc11:	74 f2                	je     c000cc05 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000cc13:	48                   	dec    eax
c000cc14:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000cc18:	75 06                	jne    c000cc20 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000cc1a:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000cc1e:	eb f3                	jmp    c000cc13 <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c000cc20:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000cc24:	74 07                	je     c000cc2d <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c000cc26:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000cc2a:	48                   	dec    eax
c000cc2b:	eb f3                	jmp    c000cc20 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000cc2d:	40                   	inc    eax
c000cc2e:	eb 9a                	jmp    c000cbca <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000cc30:	80 fa 2f             	cmp    dl,0x2f
c000cc33:	74 95                	je     c000cbca <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000cc35:	80 fa 5c             	cmp    dl,0x5c
c000cc38:	74 90                	je     c000cbca <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000cc3a:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c000cc3d:	40                   	inc    eax
c000cc3e:	eb 8a                	jmp    c000cbca <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000cc40:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000cc44:	83 ec 0c             	sub    esp,0xc
c000cc47:	53                   	push   ebx
c000cc48:	e8 77 38 ff ff       	call   c00004c4 <strlen>
c000cc4d:	83 c4 10             	add    esp,0x10
c000cc50:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c000cc55:	75 26                	jne    c000cc7d <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c000cc57:	83 ec 0c             	sub    esp,0xc
c000cc5a:	53                   	push   ebx
c000cc5b:	e8 64 38 ff ff       	call   c00004c4 <strlen>
c000cc60:	83 c4 10             	add    esp,0x10
c000cc63:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c000cc68:	74 26                	je     c000cc90 <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c000cc6a:	83 ec 0c             	sub    esp,0xc
c000cc6d:	53                   	push   ebx
c000cc6e:	e8 51 38 ff ff       	call   c00004c4 <strlen>
c000cc73:	83 c4 10             	add    esp,0x10
c000cc76:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000cc7b:	eb c7                	jmp    c000cc44 <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c000cc7d:	83 ec 0c             	sub    esp,0xc
c000cc80:	53                   	push   ebx
c000cc81:	e8 3e 38 ff ff       	call   c00004c4 <strlen>
c000cc86:	83 c4 10             	add    esp,0x10
c000cc89:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000cc8e:	74 c7                	je     c000cc57 <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c000cc90:	81 c4 0c 04 00 00    	add    esp,0x40c
c000cc96:	5b                   	pop    ebx
c000cc97:	5e                   	pop    esi
c000cc98:	5f                   	pop    edi
c000cc99:	5d                   	pop    ebp
c000cc9a:	c3                   	ret    
c000cc9b:	90                   	nop

c000cc9c <File::File(char const*, Process*)>:
c000cc9c:	83 ec 0c             	sub    esp,0xc
c000cc9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cca3:	83 ec 08             	sub    esp,0x8
c000cca6:	6a 00                	push   0x0
c000cca8:	50                   	push   eax
c000cca9:	e8 e4 e2 ff ff       	call   c000af92 <UnixFile::UnixFile(int)>
c000ccae:	83 c4 10             	add    esp,0x10
c000ccb1:	ba 68 34 02 c0       	mov    edx,0xc0023468
c000ccb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ccba:	89 10                	mov    DWORD PTR [eax],edx
c000ccbc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ccc0:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000ccc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ccca:	83 c0 0d             	add    eax,0xd
c000cccd:	83 ec 04             	sub    esp,0x4
c000ccd0:	52                   	push   edx
c000ccd1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccd5:	50                   	push   eax
c000ccd6:	e8 17 fe ff ff       	call   c000caf2 <Fs::standardiseFiles(char*, char const*, char const*)>
c000ccdb:	83 c4 10             	add    esp,0x10
c000ccde:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cce2:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000cce5:	8d 50 bf             	lea    edx,[eax-0x41]
c000cce8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ccec:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000ccf2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ccf6:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000ccfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ccfe:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000cd04:	0f b6 c0             	movzx  eax,al
c000cd07:	8b 04 85 a0 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7760]
c000cd0e:	85 c0                	test   eax,eax
c000cd10:	74 5e                	je     c000cd70 <File::File(char const*, Process*)+0xd4>
c000cd12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd16:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000cd1c:	0f b6 c0             	movzx  eax,al
c000cd1f:	8b 04 85 a0 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7760]
c000cd26:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000cd2c:	85 c0                	test   eax,eax
c000cd2e:	75 40                	jne    c000cd70 <File::File(char const*, Process*)+0xd4>
c000cd30:	83 ec 0c             	sub    esp,0xc
c000cd33:	68 a4 33 02 c0       	push   0xc00233a4
c000cd38:	e8 f4 f9 ff ff       	call   c000c731 <Dbg::kprintf(char const*, ...)>
c000cd3d:	83 c4 10             	add    esp,0x10
c000cd40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd44:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000cd4a:	0f b6 c0             	movzx  eax,al
c000cd4d:	8b 04 85 a0 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7760]
c000cd54:	83 ec 0c             	sub    esp,0xc
c000cd57:	50                   	push   eax
c000cd58:	e8 7b 20 00 00       	call   c000edd8 <LogicalDisk::mount()>
c000cd5d:	83 c4 10             	add    esp,0x10
c000cd60:	83 ec 0c             	sub    esp,0xc
c000cd63:	68 5f 53 02 c0       	push   0xc002535f
c000cd68:	e8 c4 f9 ff ff       	call   c000c731 <Dbg::kprintf(char const*, ...)>
c000cd6d:	83 c4 10             	add    esp,0x10
c000cd70:	90                   	nop
c000cd71:	83 c4 0c             	add    esp,0xc
c000cd74:	c3                   	ret    
c000cd75:	90                   	nop

c000cd76 <File::open(FileOpenMode)>:
c000cd76:	53                   	push   ebx
c000cd77:	b8 0b 00 00 00       	mov    eax,0xb
c000cd7c:	83 ec 08             	sub    esp,0x8
c000cd7f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000cd83:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000cd8a:	80 fa 19             	cmp    dl,0x19
c000cd8d:	77 40                	ja     c000cdcf <File::open(FileOpenMode)+0x59>
c000cd8f:	8b 14 95 a0 88 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7760]
c000cd96:	85 d2                	test   edx,edx
c000cd98:	74 35                	je     c000cdcf <File::open(FileOpenMode)+0x59>
c000cd9a:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000cda0:	85 d2                	test   edx,edx
c000cda2:	74 2b                	je     c000cdcf <File::open(FileOpenMode)+0x59>
c000cda4:	b8 06 00 00 00       	mov    eax,0x6
c000cda9:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000cdad:	75 20                	jne    c000cdcf <File::open(FileOpenMode)+0x59>
c000cdaf:	8b 02                	mov    eax,DWORD PTR [edx]
c000cdb1:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000cdb7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cdbb:	51                   	push   ecx
c000cdbc:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000cdbf:	51                   	push   ecx
c000cdc0:	52                   	push   edx
c000cdc1:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000cdc4:	83 c4 10             	add    esp,0x10
c000cdc7:	85 c0                	test   eax,eax
c000cdc9:	75 04                	jne    c000cdcf <File::open(FileOpenMode)+0x59>
c000cdcb:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000cdcf:	83 c4 08             	add    esp,0x8
c000cdd2:	5b                   	pop    ebx
c000cdd3:	c3                   	ret    

c000cdd4 <File::close()>:
c000cdd4:	53                   	push   ebx
c000cdd5:	b8 0b 00 00 00       	mov    eax,0xb
c000cdda:	83 ec 08             	sub    esp,0x8
c000cddd:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000cde1:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000cde8:	80 fa 19             	cmp    dl,0x19
c000cdeb:	77 41                	ja     c000ce2e <File::close()+0x5a>
c000cded:	8b 1c 95 a0 88 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd7760]
c000cdf4:	85 db                	test   ebx,ebx
c000cdf6:	74 36                	je     c000ce2e <File::close()+0x5a>
c000cdf8:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000cdff:	74 2d                	je     c000ce2e <File::close()+0x5a>
c000ce01:	b8 05 00 00 00       	mov    eax,0x5
c000ce06:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000ce0a:	74 22                	je     c000ce2e <File::close()+0x5a>
c000ce0c:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000ce10:	8b 04 95 a0 88 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd7760]
c000ce17:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000ce1d:	53                   	push   ebx
c000ce1e:	53                   	push   ebx
c000ce1f:	8b 10                	mov    edx,DWORD PTR [eax]
c000ce21:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000ce27:	50                   	push   eax
c000ce28:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c000ce2b:	83 c4 10             	add    esp,0x10
c000ce2e:	83 c4 08             	add    esp,0x8
c000ce31:	5b                   	pop    ebx
c000ce32:	c3                   	ret    
c000ce33:	90                   	nop

c000ce34 <File::seek(unsigned long long)>:
c000ce34:	56                   	push   esi
c000ce35:	53                   	push   ebx
c000ce36:	b8 0b 00 00 00       	mov    eax,0xb
c000ce3b:	51                   	push   ecx
c000ce3c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ce40:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ce44:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000ce4b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000ce4f:	80 fa 19             	cmp    dl,0x19
c000ce52:	77 31                	ja     c000ce85 <File::seek(unsigned long long)+0x51>
c000ce54:	8b 14 95 a0 88 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7760]
c000ce5b:	85 d2                	test   edx,edx
c000ce5d:	74 26                	je     c000ce85 <File::seek(unsigned long long)+0x51>
c000ce5f:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000ce65:	85 d2                	test   edx,edx
c000ce67:	74 1c                	je     c000ce85 <File::seek(unsigned long long)+0x51>
c000ce69:	b8 05 00 00 00       	mov    eax,0x5
c000ce6e:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000ce72:	74 11                	je     c000ce85 <File::seek(unsigned long long)+0x51>
c000ce74:	8b 02                	mov    eax,DWORD PTR [edx]
c000ce76:	53                   	push   ebx
c000ce77:	51                   	push   ecx
c000ce78:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000ce7e:	52                   	push   edx
c000ce7f:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000ce82:	83 c4 10             	add    esp,0x10
c000ce85:	5a                   	pop    edx
c000ce86:	5b                   	pop    ebx
c000ce87:	5e                   	pop    esi
c000ce88:	c3                   	ret    
c000ce89:	90                   	nop

c000ce8a <File::tell(unsigned long long*)>:
c000ce8a:	83 ec 0c             	sub    esp,0xc
c000ce8d:	b8 0b 00 00 00       	mov    eax,0xb
c000ce92:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ce96:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000ce9d:	80 fa 19             	cmp    dl,0x19
c000cea0:	77 34                	ja     c000ced6 <File::tell(unsigned long long*)+0x4c>
c000cea2:	8b 14 95 a0 88 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7760]
c000cea9:	85 d2                	test   edx,edx
c000ceab:	74 29                	je     c000ced6 <File::tell(unsigned long long*)+0x4c>
c000cead:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000ceb3:	85 d2                	test   edx,edx
c000ceb5:	74 1f                	je     c000ced6 <File::tell(unsigned long long*)+0x4c>
c000ceb7:	b8 05 00 00 00       	mov    eax,0x5
c000cebc:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000cec0:	74 14                	je     c000ced6 <File::tell(unsigned long long*)+0x4c>
c000cec2:	50                   	push   eax
c000cec3:	8b 02                	mov    eax,DWORD PTR [edx]
c000cec5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cec9:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000cecf:	52                   	push   edx
c000ced0:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000ced3:	83 c4 10             	add    esp,0x10
c000ced6:	83 c4 0c             	add    esp,0xc
c000ced9:	c3                   	ret    

c000ceda <File::rewind()>:
c000ceda:	83 ec 10             	sub    esp,0x10
c000cedd:	6a 00                	push   0x0
c000cedf:	6a 00                	push   0x0
c000cee1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cee5:	e8 4a ff ff ff       	call   c000ce34 <File::seek(unsigned long long)>
c000ceea:	83 c4 1c             	add    esp,0x1c
c000ceed:	c3                   	ret    

c000ceee <File::unlink()>:
c000ceee:	83 ec 0c             	sub    esp,0xc
c000cef1:	b8 0b 00 00 00       	mov    eax,0xb
c000cef6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000cefa:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000cf01:	80 f9 19             	cmp    cl,0x19
c000cf04:	77 2f                	ja     c000cf35 <File::unlink()+0x47>
c000cf06:	8b 0c 8d a0 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7760]
c000cf0d:	85 c9                	test   ecx,ecx
c000cf0f:	74 24                	je     c000cf35 <File::unlink()+0x47>
c000cf11:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000cf17:	85 c9                	test   ecx,ecx
c000cf19:	74 1a                	je     c000cf35 <File::unlink()+0x47>
c000cf1b:	b8 06 00 00 00       	mov    eax,0x6
c000cf20:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000cf24:	75 0f                	jne    c000cf35 <File::unlink()+0x47>
c000cf26:	83 c2 0d             	add    edx,0xd
c000cf29:	50                   	push   eax
c000cf2a:	50                   	push   eax
c000cf2b:	8b 01                	mov    eax,DWORD PTR [ecx]
c000cf2d:	52                   	push   edx
c000cf2e:	51                   	push   ecx
c000cf2f:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000cf32:	83 c4 10             	add    esp,0x10
c000cf35:	83 c4 0c             	add    esp,0xc
c000cf38:	c3                   	ret    
c000cf39:	90                   	nop

c000cf3a <File::rename(char const*)>:
c000cf3a:	83 ec 0c             	sub    esp,0xc
c000cf3d:	b8 0b 00 00 00       	mov    eax,0xb
c000cf42:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000cf46:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000cf4d:	80 f9 19             	cmp    cl,0x19
c000cf50:	77 32                	ja     c000cf84 <File::rename(char const*)+0x4a>
c000cf52:	8b 0c 8d a0 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7760]
c000cf59:	85 c9                	test   ecx,ecx
c000cf5b:	74 27                	je     c000cf84 <File::rename(char const*)+0x4a>
c000cf5d:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000cf63:	85 c9                	test   ecx,ecx
c000cf65:	74 1d                	je     c000cf84 <File::rename(char const*)+0x4a>
c000cf67:	b8 06 00 00 00       	mov    eax,0x6
c000cf6c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000cf70:	75 12                	jne    c000cf84 <File::rename(char const*)+0x4a>
c000cf72:	83 c2 0d             	add    edx,0xd
c000cf75:	50                   	push   eax
c000cf76:	8b 01                	mov    eax,DWORD PTR [ecx]
c000cf78:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cf7c:	52                   	push   edx
c000cf7d:	51                   	push   ecx
c000cf7e:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000cf81:	83 c4 10             	add    esp,0x10
c000cf84:	83 c4 0c             	add    esp,0xc
c000cf87:	c3                   	ret    

c000cf88 <File::chfatattr(unsigned char, unsigned char)>:
c000cf88:	57                   	push   edi
c000cf89:	b8 0b 00 00 00       	mov    eax,0xb
c000cf8e:	56                   	push   esi
c000cf8f:	53                   	push   ebx
c000cf90:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000cf94:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000cf98:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000cf9f:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000cfa3:	80 f9 19             	cmp    cl,0x19
c000cfa6:	77 37                	ja     c000cfdf <File::chfatattr(unsigned char, unsigned char)+0x57>
c000cfa8:	8b 0c 8d a0 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7760]
c000cfaf:	85 c9                	test   ecx,ecx
c000cfb1:	74 2c                	je     c000cfdf <File::chfatattr(unsigned char, unsigned char)+0x57>
c000cfb3:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000cfb9:	85 c9                	test   ecx,ecx
c000cfbb:	74 22                	je     c000cfdf <File::chfatattr(unsigned char, unsigned char)+0x57>
c000cfbd:	b8 06 00 00 00       	mov    eax,0x6
c000cfc2:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000cfc6:	75 17                	jne    c000cfdf <File::chfatattr(unsigned char, unsigned char)+0x57>
c000cfc8:	8b 39                	mov    edi,DWORD PTR [ecx]
c000cfca:	89 f0                	mov    eax,esi
c000cfcc:	83 c2 0d             	add    edx,0xd
c000cfcf:	0f b6 f0             	movzx  esi,al
c000cfd2:	0f b6 db             	movzx  ebx,bl
c000cfd5:	56                   	push   esi
c000cfd6:	53                   	push   ebx
c000cfd7:	52                   	push   edx
c000cfd8:	51                   	push   ecx
c000cfd9:	ff 57 34             	call   DWORD PTR [edi+0x34]
c000cfdc:	83 c4 10             	add    esp,0x10
c000cfdf:	5b                   	pop    ebx
c000cfe0:	5e                   	pop    esi
c000cfe1:	5f                   	pop    edi
c000cfe2:	c3                   	ret    
c000cfe3:	90                   	nop

c000cfe4 <File::exists()>:
c000cfe4:	83 ec 0c             	sub    esp,0xc
c000cfe7:	31 c0                	xor    eax,eax
c000cfe9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000cfed:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000cff4:	80 f9 19             	cmp    cl,0x19
c000cff7:	77 24                	ja     c000d01d <File::exists()+0x39>
c000cff9:	8b 0c 8d a0 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7760]
c000d000:	85 c9                	test   ecx,ecx
c000d002:	74 19                	je     c000d01d <File::exists()+0x39>
c000d004:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d00a:	85 c9                	test   ecx,ecx
c000d00c:	74 0f                	je     c000d01d <File::exists()+0x39>
c000d00e:	83 c2 0d             	add    edx,0xd
c000d011:	50                   	push   eax
c000d012:	50                   	push   eax
c000d013:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d015:	52                   	push   edx
c000d016:	51                   	push   ecx
c000d017:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000d01a:	83 c4 10             	add    esp,0x10
c000d01d:	83 c4 0c             	add    esp,0xc
c000d020:	c3                   	ret    
c000d021:	90                   	nop

c000d022 <File::stat(unsigned long long*, bool*)>:
c000d022:	56                   	push   esi
c000d023:	53                   	push   ebx
c000d024:	50                   	push   eax
c000d025:	b8 0b 00 00 00       	mov    eax,0xb
c000d02a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d02e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000d032:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d039:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d03d:	80 f9 19             	cmp    cl,0x19
c000d040:	77 3d                	ja     c000d07f <File::stat(unsigned long long*, bool*)+0x5d>
c000d042:	8b 0c 8d a0 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7760]
c000d049:	85 c9                	test   ecx,ecx
c000d04b:	74 32                	je     c000d07f <File::stat(unsigned long long*, bool*)+0x5d>
c000d04d:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d053:	85 c9                	test   ecx,ecx
c000d055:	74 28                	je     c000d07f <File::stat(unsigned long long*, bool*)+0x5d>
c000d057:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d059:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d05d:	74 13                	je     c000d072 <File::stat(unsigned long long*, bool*)+0x50>
c000d05f:	83 ec 04             	sub    esp,0x4
c000d062:	56                   	push   esi
c000d063:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000d069:	51                   	push   ecx
c000d06a:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000d06d:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000d070:	eb 0a                	jmp    c000d07c <File::stat(unsigned long long*, bool*)+0x5a>
c000d072:	53                   	push   ebx
c000d073:	83 c2 0d             	add    edx,0xd
c000d076:	56                   	push   esi
c000d077:	52                   	push   edx
c000d078:	51                   	push   ecx
c000d079:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000d07c:	83 c4 10             	add    esp,0x10
c000d07f:	5a                   	pop    edx
c000d080:	5b                   	pop    ebx
c000d081:	5e                   	pop    esi
c000d082:	c3                   	ret    

c000d083 <Fs::setcwd(Process*, char*)>:
c000d083:	55                   	push   ebp
c000d084:	57                   	push   edi
c000d085:	56                   	push   esi
c000d086:	53                   	push   ebx
c000d087:	81 ec 20 02 00 00    	sub    esp,0x220
c000d08d:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c000d094:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000d09a:	57                   	push   edi
c000d09b:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000d0a2:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000d0a6:	56                   	push   esi
c000d0a7:	e8 46 fa ff ff       	call   c000caf2 <Fs::standardiseFiles(char*, char const*, char const*)>
c000d0ac:	89 34 24             	mov    DWORD PTR [esp],esi
c000d0af:	e8 10 34 ff ff       	call   c00004c4 <strlen>
c000d0b4:	83 c4 10             	add    esp,0x10
c000d0b7:	83 f8 02             	cmp    eax,0x2
c000d0ba:	77 15                	ja     c000d0d1 <Fs::setcwd(Process*, char*)+0x4e>
c000d0bc:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c000d0c1:	83 eb 41             	sub    ebx,0x41
c000d0c4:	8b 04 9d a0 88 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd7760]
c000d0cb:	85 c0                	test   eax,eax
c000d0cd:	75 1c                	jne    c000d0eb <Fs::setcwd(Process*, char*)+0x68>
c000d0cf:	eb 4c                	jmp    c000d11d <Fs::setcwd(Process*, char*)+0x9a>
c000d0d1:	83 ec 0c             	sub    esp,0xc
c000d0d4:	56                   	push   esi
c000d0d5:	e8 ea 33 ff ff       	call   c00004c4 <strlen>
c000d0da:	83 c4 10             	add    esp,0x10
c000d0dd:	83 f8 03             	cmp    eax,0x3
c000d0e0:	75 74                	jne    c000d156 <Fs::setcwd(Process*, char*)+0xd3>
c000d0e2:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000d0e7:	75 6d                	jne    c000d156 <Fs::setcwd(Process*, char*)+0xd3>
c000d0e9:	eb d1                	jmp    c000d0bc <Fs::setcwd(Process*, char*)+0x39>
c000d0eb:	83 b8 70 01 00 00 00 	cmp    DWORD PTR [eax+0x170],0x0
c000d0f2:	75 29                	jne    c000d11d <Fs::setcwd(Process*, char*)+0x9a>
c000d0f4:	83 ec 0c             	sub    esp,0xc
c000d0f7:	68 7c 33 02 c0       	push   0xc002337c
c000d0fc:	e8 30 f6 ff ff       	call   c000c731 <Dbg::kprintf(char const*, ...)>
c000d101:	5a                   	pop    edx
c000d102:	ff 34 9d a0 88 02 c0 	push   DWORD PTR [ebx*4-0x3ffd7760]
c000d109:	e8 ca 1c 00 00       	call   c000edd8 <LogicalDisk::mount()>
c000d10e:	c7 04 24 5f 53 02 c0 	mov    DWORD PTR [esp],0xc002535f
c000d115:	e8 17 f6 ff ff       	call   c000c731 <Dbg::kprintf(char const*, ...)>
c000d11a:	83 c4 10             	add    esp,0x10
c000d11d:	b8 03 00 00 00       	mov    eax,0x3
c000d122:	83 fb 19             	cmp    ebx,0x19
c000d125:	0f 87 c6 00 00 00    	ja     c000d1f1 <Fs::setcwd(Process*, char*)+0x16e>
c000d12b:	8b 14 9d a0 88 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffd7760]
c000d132:	b8 05 00 00 00       	mov    eax,0x5
c000d137:	85 d2                	test   edx,edx
c000d139:	0f 84 b2 00 00 00    	je     c000d1f1 <Fs::setcwd(Process*, char*)+0x16e>
c000d13f:	b8 06 00 00 00       	mov    eax,0x6
c000d144:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000d14b:	0f 85 92 00 00 00    	jne    c000d1e3 <Fs::setcwd(Process*, char*)+0x160>
c000d151:	e9 9b 00 00 00       	jmp    c000d1f1 <Fs::setcwd(Process*, char*)+0x16e>
c000d156:	83 ec 0c             	sub    esp,0xc
c000d159:	68 14 01 00 00       	push   0x114
c000d15e:	e8 34 c6 ff ff       	call   c0009797 <malloc>
c000d163:	83 c4 0c             	add    esp,0xc
c000d166:	89 c3                	mov    ebx,eax
c000d168:	55                   	push   ebp
c000d169:	56                   	push   esi
c000d16a:	50                   	push   eax
c000d16b:	e8 2c fb ff ff       	call   c000cc9c <File::File(char const*, Process*)>
c000d170:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000d175:	83 c4 0c             	add    esp,0xc
c000d178:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000d17c:	50                   	push   eax
c000d17d:	8d 44 24 10          	lea    eax,[esp+0x10]
c000d181:	50                   	push   eax
c000d182:	53                   	push   ebx
c000d183:	e8 9a fe ff ff       	call   c000d022 <File::stat(unsigned long long*, bool*)>
c000d188:	83 c4 10             	add    esp,0x10
c000d18b:	83 f8 02             	cmp    eax,0x2
c000d18e:	74 04                	je     c000d194 <Fs::setcwd(Process*, char*)+0x111>
c000d190:	85 c0                	test   eax,eax
c000d192:	74 1c                	je     c000d1b0 <Fs::setcwd(Process*, char*)+0x12d>
c000d194:	b8 01 00 00 00       	mov    eax,0x1
c000d199:	85 db                	test   ebx,ebx
c000d19b:	74 54                	je     c000d1f1 <Fs::setcwd(Process*, char*)+0x16e>
c000d19d:	83 ec 0c             	sub    esp,0xc
c000d1a0:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d1a2:	53                   	push   ebx
c000d1a3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000d1a6:	83 c4 10             	add    esp,0x10
c000d1a9:	b8 01 00 00 00       	mov    eax,0x1
c000d1ae:	eb 41                	jmp    c000d1f1 <Fs::setcwd(Process*, char*)+0x16e>
c000d1b0:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000d1b5:	75 1c                	jne    c000d1d3 <Fs::setcwd(Process*, char*)+0x150>
c000d1b7:	b8 02 00 00 00       	mov    eax,0x2
c000d1bc:	85 db                	test   ebx,ebx
c000d1be:	74 31                	je     c000d1f1 <Fs::setcwd(Process*, char*)+0x16e>
c000d1c0:	83 ec 0c             	sub    esp,0xc
c000d1c3:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d1c5:	53                   	push   ebx
c000d1c6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000d1c9:	83 c4 10             	add    esp,0x10
c000d1cc:	b8 02 00 00 00       	mov    eax,0x2
c000d1d1:	eb 1e                	jmp    c000d1f1 <Fs::setcwd(Process*, char*)+0x16e>
c000d1d3:	85 db                	test   ebx,ebx
c000d1d5:	74 0c                	je     c000d1e3 <Fs::setcwd(Process*, char*)+0x160>
c000d1d7:	83 ec 0c             	sub    esp,0xc
c000d1da:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d1dc:	53                   	push   ebx
c000d1dd:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000d1e0:	83 c4 10             	add    esp,0x10
c000d1e3:	50                   	push   eax
c000d1e4:	50                   	push   eax
c000d1e5:	56                   	push   esi
c000d1e6:	57                   	push   edi
c000d1e7:	e8 78 33 ff ff       	call   c0000564 <strcpy>
c000d1ec:	83 c4 10             	add    esp,0x10
c000d1ef:	31 c0                	xor    eax,eax
c000d1f1:	81 c4 1c 02 00 00    	add    esp,0x21c
c000d1f7:	5b                   	pop    ebx
c000d1f8:	5e                   	pop    esi
c000d1f9:	5f                   	pop    edi
c000d1fa:	5d                   	pop    ebp
c000d1fb:	c3                   	ret    

c000d1fc <Directory::Directory(char const*, Process*)>:
c000d1fc:	83 ec 0c             	sub    esp,0xc
c000d1ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d203:	83 ec 08             	sub    esp,0x8
c000d206:	6a 00                	push   0x0
c000d208:	50                   	push   eax
c000d209:	e8 84 dd ff ff       	call   c000af92 <UnixFile::UnixFile(int)>
c000d20e:	83 c4 10             	add    esp,0x10
c000d211:	ba 84 34 02 c0       	mov    edx,0xc0023484
c000d216:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d21a:	89 10                	mov    DWORD PTR [eax],edx
c000d21c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d220:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000d226:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d22a:	83 c0 0d             	add    eax,0xd
c000d22d:	83 ec 04             	sub    esp,0x4
c000d230:	52                   	push   edx
c000d231:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d235:	50                   	push   eax
c000d236:	e8 b7 f8 ff ff       	call   c000caf2 <Fs::standardiseFiles(char*, char const*, char const*)>
c000d23b:	83 c4 10             	add    esp,0x10
c000d23e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d242:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000d245:	8d 50 bf             	lea    edx,[eax-0x41]
c000d248:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d24c:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000d252:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d256:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000d25a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d25e:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000d264:	0f b6 c0             	movzx  eax,al
c000d267:	8b 04 85 a0 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7760]
c000d26e:	85 c0                	test   eax,eax
c000d270:	74 5e                	je     c000d2d0 <Directory::Directory(char const*, Process*)+0xd4>
c000d272:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d276:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000d27c:	0f b6 c0             	movzx  eax,al
c000d27f:	8b 04 85 a0 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7760]
c000d286:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000d28c:	85 c0                	test   eax,eax
c000d28e:	75 40                	jne    c000d2d0 <Directory::Directory(char const*, Process*)+0xd4>
c000d290:	83 ec 0c             	sub    esp,0xc
c000d293:	68 cc 33 02 c0       	push   0xc00233cc
c000d298:	e8 94 f4 ff ff       	call   c000c731 <Dbg::kprintf(char const*, ...)>
c000d29d:	83 c4 10             	add    esp,0x10
c000d2a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d2a4:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000d2aa:	0f b6 c0             	movzx  eax,al
c000d2ad:	8b 04 85 a0 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7760]
c000d2b4:	83 ec 0c             	sub    esp,0xc
c000d2b7:	50                   	push   eax
c000d2b8:	e8 1b 1b 00 00       	call   c000edd8 <LogicalDisk::mount()>
c000d2bd:	83 c4 10             	add    esp,0x10
c000d2c0:	83 ec 0c             	sub    esp,0xc
c000d2c3:	68 5f 53 02 c0       	push   0xc002535f
c000d2c8:	e8 64 f4 ff ff       	call   c000c731 <Dbg::kprintf(char const*, ...)>
c000d2cd:	83 c4 10             	add    esp,0x10
c000d2d0:	90                   	nop
c000d2d1:	83 c4 0c             	add    esp,0xc
c000d2d4:	c3                   	ret    
c000d2d5:	90                   	nop

c000d2d6 <Directory::open()>:
c000d2d6:	53                   	push   ebx
c000d2d7:	b8 0b 00 00 00       	mov    eax,0xb
c000d2dc:	83 ec 08             	sub    esp,0x8
c000d2df:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d2e3:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000d2ea:	80 fa 19             	cmp    dl,0x19
c000d2ed:	77 3d                	ja     c000d32c <Directory::open()+0x56>
c000d2ef:	8b 14 95 a0 88 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7760]
c000d2f6:	85 d2                	test   edx,edx
c000d2f8:	74 32                	je     c000d32c <Directory::open()+0x56>
c000d2fa:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000d300:	85 d2                	test   edx,edx
c000d302:	74 28                	je     c000d32c <Directory::open()+0x56>
c000d304:	b8 06 00 00 00       	mov    eax,0x6
c000d309:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000d30d:	75 1d                	jne    c000d32c <Directory::open()+0x56>
c000d30f:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000d315:	50                   	push   eax
c000d316:	8b 02                	mov    eax,DWORD PTR [edx]
c000d318:	51                   	push   ecx
c000d319:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000d31c:	51                   	push   ecx
c000d31d:	52                   	push   edx
c000d31e:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c000d321:	83 c4 10             	add    esp,0x10
c000d324:	85 c0                	test   eax,eax
c000d326:	75 04                	jne    c000d32c <Directory::open()+0x56>
c000d328:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000d32c:	83 c4 08             	add    esp,0x8
c000d32f:	5b                   	pop    ebx
c000d330:	c3                   	ret    
c000d331:	90                   	nop

c000d332 <Directory::close()>:
c000d332:	53                   	push   ebx
c000d333:	b8 0b 00 00 00       	mov    eax,0xb
c000d338:	83 ec 08             	sub    esp,0x8
c000d33b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000d33f:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000d346:	80 fa 19             	cmp    dl,0x19
c000d349:	77 41                	ja     c000d38c <Directory::close()+0x5a>
c000d34b:	8b 1c 95 a0 88 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd7760]
c000d352:	85 db                	test   ebx,ebx
c000d354:	74 36                	je     c000d38c <Directory::close()+0x5a>
c000d356:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000d35d:	74 2d                	je     c000d38c <Directory::close()+0x5a>
c000d35f:	b8 05 00 00 00       	mov    eax,0x5
c000d364:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000d368:	74 22                	je     c000d38c <Directory::close()+0x5a>
c000d36a:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000d36e:	8b 04 95 a0 88 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd7760]
c000d375:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000d37b:	53                   	push   ebx
c000d37c:	53                   	push   ebx
c000d37d:	8b 10                	mov    edx,DWORD PTR [eax]
c000d37f:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000d385:	50                   	push   eax
c000d386:	ff 52 20             	call   DWORD PTR [edx+0x20]
c000d389:	83 c4 10             	add    esp,0x10
c000d38c:	83 c4 08             	add    esp,0x8
c000d38f:	5b                   	pop    ebx
c000d390:	c3                   	ret    
c000d391:	90                   	nop

c000d392 <Directory::unlink()>:
c000d392:	83 ec 0c             	sub    esp,0xc
c000d395:	b8 0b 00 00 00       	mov    eax,0xb
c000d39a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d39e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d3a5:	80 f9 19             	cmp    cl,0x19
c000d3a8:	77 2f                	ja     c000d3d9 <Directory::unlink()+0x47>
c000d3aa:	8b 0c 8d a0 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7760]
c000d3b1:	85 c9                	test   ecx,ecx
c000d3b3:	74 24                	je     c000d3d9 <Directory::unlink()+0x47>
c000d3b5:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d3bb:	85 c9                	test   ecx,ecx
c000d3bd:	74 1a                	je     c000d3d9 <Directory::unlink()+0x47>
c000d3bf:	b8 06 00 00 00       	mov    eax,0x6
c000d3c4:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d3c8:	75 0f                	jne    c000d3d9 <Directory::unlink()+0x47>
c000d3ca:	83 c2 0d             	add    edx,0xd
c000d3cd:	50                   	push   eax
c000d3ce:	50                   	push   eax
c000d3cf:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d3d1:	52                   	push   edx
c000d3d2:	51                   	push   ecx
c000d3d3:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000d3d6:	83 c4 10             	add    esp,0x10
c000d3d9:	83 c4 0c             	add    esp,0xc
c000d3dc:	c3                   	ret    
c000d3dd:	90                   	nop

c000d3de <Directory::rename(char const*)>:
c000d3de:	83 ec 0c             	sub    esp,0xc
c000d3e1:	b8 0b 00 00 00       	mov    eax,0xb
c000d3e6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d3ea:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d3f1:	80 f9 19             	cmp    cl,0x19
c000d3f4:	77 32                	ja     c000d428 <Directory::rename(char const*)+0x4a>
c000d3f6:	8b 0c 8d a0 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7760]
c000d3fd:	85 c9                	test   ecx,ecx
c000d3ff:	74 27                	je     c000d428 <Directory::rename(char const*)+0x4a>
c000d401:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d407:	85 c9                	test   ecx,ecx
c000d409:	74 1d                	je     c000d428 <Directory::rename(char const*)+0x4a>
c000d40b:	b8 06 00 00 00       	mov    eax,0x6
c000d410:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d414:	75 12                	jne    c000d428 <Directory::rename(char const*)+0x4a>
c000d416:	83 c2 0d             	add    edx,0xd
c000d419:	50                   	push   eax
c000d41a:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d41c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d420:	52                   	push   edx
c000d421:	51                   	push   ecx
c000d422:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000d425:	83 c4 10             	add    esp,0x10
c000d428:	83 c4 0c             	add    esp,0xc
c000d42b:	c3                   	ret    

c000d42c <Directory::exists()>:
c000d42c:	83 ec 0c             	sub    esp,0xc
c000d42f:	31 c0                	xor    eax,eax
c000d431:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d435:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d43c:	80 f9 19             	cmp    cl,0x19
c000d43f:	77 24                	ja     c000d465 <Directory::exists()+0x39>
c000d441:	8b 0c 8d a0 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7760]
c000d448:	85 c9                	test   ecx,ecx
c000d44a:	74 19                	je     c000d465 <Directory::exists()+0x39>
c000d44c:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d452:	85 c9                	test   ecx,ecx
c000d454:	74 0f                	je     c000d465 <Directory::exists()+0x39>
c000d456:	83 c2 0d             	add    edx,0xd
c000d459:	50                   	push   eax
c000d45a:	50                   	push   eax
c000d45b:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d45d:	52                   	push   edx
c000d45e:	51                   	push   ecx
c000d45f:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000d462:	83 c4 10             	add    esp,0x10
c000d465:	83 c4 0c             	add    esp,0xc
c000d468:	c3                   	ret    
c000d469:	90                   	nop

c000d46a <Directory::read(dirent*)>:
c000d46a:	83 ec 1c             	sub    esp,0x1c
c000d46d:	b8 0b 00 00 00       	mov    eax,0xb
c000d472:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000d476:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000d47d:	80 fa 19             	cmp    dl,0x19
c000d480:	77 30                	ja     c000d4b2 <Directory::read(dirent*)+0x48>
c000d482:	8b 14 95 a0 88 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7760]
c000d489:	85 d2                	test   edx,edx
c000d48b:	74 25                	je     c000d4b2 <Directory::read(dirent*)+0x48>
c000d48d:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000d494:	74 1c                	je     c000d4b2 <Directory::read(dirent*)+0x48>
c000d496:	83 ec 0c             	sub    esp,0xc
c000d499:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d49b:	8d 54 24 18          	lea    edx,[esp+0x18]
c000d49f:	52                   	push   edx
c000d4a0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d4a4:	6a 00                	push   0x0
c000d4a6:	68 10 01 00 00       	push   0x110
c000d4ab:	51                   	push   ecx
c000d4ac:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000d4af:	83 c4 20             	add    esp,0x20
c000d4b2:	83 c4 1c             	add    esp,0x1c
c000d4b5:	c3                   	ret    

c000d4b6 <Directory::create()>:
c000d4b6:	83 ec 0c             	sub    esp,0xc
c000d4b9:	b8 0b 00 00 00       	mov    eax,0xb
c000d4be:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d4c2:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d4c9:	80 f9 19             	cmp    cl,0x19
c000d4cc:	77 2f                	ja     c000d4fd <Directory::create()+0x47>
c000d4ce:	8b 0c 8d a0 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7760]
c000d4d5:	85 c9                	test   ecx,ecx
c000d4d7:	74 24                	je     c000d4fd <Directory::create()+0x47>
c000d4d9:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d4df:	85 c9                	test   ecx,ecx
c000d4e1:	74 1a                	je     c000d4fd <Directory::create()+0x47>
c000d4e3:	b8 06 00 00 00       	mov    eax,0x6
c000d4e8:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d4ec:	75 0f                	jne    c000d4fd <Directory::create()+0x47>
c000d4ee:	83 c2 0d             	add    edx,0xd
c000d4f1:	50                   	push   eax
c000d4f2:	50                   	push   eax
c000d4f3:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d4f5:	52                   	push   edx
c000d4f6:	51                   	push   ecx
c000d4f7:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000d4fa:	83 c4 10             	add    esp,0x10
c000d4fd:	83 c4 0c             	add    esp,0xc
c000d500:	c3                   	ret    
c000d501:	90                   	nop

c000d502 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000d502:	b8 0a 00 00 00       	mov    eax,0xa
c000d507:	c3                   	ret    

c000d508 <Bus::Bus(char const*)>:
c000d508:	83 ec 0c             	sub    esp,0xc
c000d50b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d50f:	83 ec 08             	sub    esp,0x8
c000d512:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d516:	50                   	push   eax
c000d517:	e8 96 08 00 00       	call   c000ddb2 <Device::Device(char const*)>
c000d51c:	83 c4 10             	add    esp,0x10
c000d51f:	ba a0 34 02 c0       	mov    edx,0xc00234a0
c000d524:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d528:	89 10                	mov    DWORD PTR [eax],edx
c000d52a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d52e:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000d538:	90                   	nop
c000d539:	83 c4 0c             	add    esp,0xc
c000d53c:	c3                   	ret    
c000d53d:	90                   	nop
c000d53e:	66 90                	xchg   ax,ax

c000d540 <Bus::~Bus()>:
c000d540:	83 ec 0c             	sub    esp,0xc
c000d543:	ba a0 34 02 c0       	mov    edx,0xc00234a0
c000d548:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d54c:	89 10                	mov    DWORD PTR [eax],edx
c000d54e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d552:	83 ec 0c             	sub    esp,0xc
c000d555:	50                   	push   eax
c000d556:	e8 55 05 00 00       	call   c000dab0 <Device::~Device()>
c000d55b:	83 c4 10             	add    esp,0x10
c000d55e:	90                   	nop
c000d55f:	83 c4 0c             	add    esp,0xc
c000d562:	c3                   	ret    
c000d563:	90                   	nop

c000d564 <Bus::~Bus()>:
c000d564:	83 ec 0c             	sub    esp,0xc
c000d567:	83 ec 0c             	sub    esp,0xc
c000d56a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d56e:	e8 cd ff ff ff       	call   c000d540 <Bus::~Bus()>
c000d573:	83 c4 10             	add    esp,0x10
c000d576:	83 ec 08             	sub    esp,0x8
c000d579:	68 58 01 00 00       	push   0x158
c000d57e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d582:	e8 c9 f0 ff ff       	call   c000c650 <operator delete(void*, unsigned long)>
c000d587:	83 c4 10             	add    esp,0x10
c000d58a:	83 c4 0c             	add    esp,0xc
c000d58d:	c3                   	ret    

c000d58e <beepThread(void*)>:
c000d58e:	83 ec 0c             	sub    esp,0xc
c000d591:	a1 08 98 02 c0       	mov    eax,ds:0xc0029808
c000d596:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d59a:	48                   	dec    eax
c000d59b:	a3 08 98 02 c0       	mov    ds:0xc0029808,eax
c000d5a0:	75 01                	jne    c000d5a3 <beepThread(void*)+0x15>
c000d5a2:	fb                   	sti    
c000d5a3:	83 ec 0c             	sub    esp,0xc
c000d5a6:	6b c2 0a             	imul   eax,edx,0xa
c000d5a9:	50                   	push   eax
c000d5aa:	e8 29 8d 00 00       	call   c00162d8 <milliTenthSleep(unsigned int)>
c000d5af:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000d5b6:	e8 da c0 00 00       	call   c0019695 <Hal::makeBeep(int)>
c000d5bb:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000d5c3:	83 c4 1c             	add    esp,0x1c
c000d5c6:	e9 0d 8c 00 00       	jmp    c00161d8 <blockTask(TaskState)>

c000d5cb <Krnl::beep(int, int, bool)>:
c000d5cb:	56                   	push   esi
c000d5cc:	53                   	push   ebx
c000d5cd:	83 ec 10             	sub    esp,0x10
c000d5d0:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000d5d4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000d5d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5dc:	e8 b4 c0 00 00       	call   c0019695 <Hal::makeBeep(int)>
c000d5e1:	83 c4 10             	add    esp,0x10
c000d5e4:	89 f0                	mov    eax,esi
c000d5e6:	84 c0                	test   al,al
c000d5e8:	74 1e                	je     c000d608 <Krnl::beep(int, int, bool)+0x3d>
c000d5ea:	83 ec 0c             	sub    esp,0xc
c000d5ed:	6b db 0a             	imul   ebx,ebx,0xa
c000d5f0:	53                   	push   ebx
c000d5f1:	e8 e2 8c 00 00       	call   c00162d8 <milliTenthSleep(unsigned int)>
c000d5f6:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000d5fe:	83 c4 14             	add    esp,0x14
c000d601:	5b                   	pop    ebx
c000d602:	5e                   	pop    esi
c000d603:	e9 8d c0 00 00       	jmp    c0019695 <Hal::makeBeep(int)>
c000d608:	68 e6 00 00 00       	push   0xe6
c000d60d:	53                   	push   ebx
c000d60e:	68 8e d5 00 c0       	push   0xc000d58e
c000d613:	ff 35 30 98 02 c0    	push   DWORD PTR ds:0xc0029830
c000d619:	e8 a6 87 00 00       	call   c0015dc4 <Process::createThread(void (*)(void*), void*, int)>
c000d61e:	83 c4 14             	add    esp,0x14
c000d621:	5b                   	pop    ebx
c000d622:	5e                   	pop    esi
c000d623:	c3                   	ret    

c000d624 <User::loadClockSettings(int)>:
c000d624:	53                   	push   ebx
c000d625:	83 ec 14             	sub    esp,0x14
c000d628:	68 14 01 00 00       	push   0x114
c000d62d:	e8 65 c1 ff ff       	call   c0009797 <malloc>
c000d632:	83 c4 0c             	add    esp,0xc
c000d635:	89 c3                	mov    ebx,eax
c000d637:	ff 35 30 98 02 c0    	push   DWORD PTR ds:0xc0029830
c000d63d:	68 c4 34 02 c0       	push   0xc00234c4
c000d642:	50                   	push   eax
c000d643:	e8 54 f6 ff ff       	call   c000cc9c <File::File(char const*, Process*)>
c000d648:	58                   	pop    eax
c000d649:	5a                   	pop    edx
c000d64a:	6a 01                	push   0x1
c000d64c:	53                   	push   ebx
c000d64d:	e8 24 f7 ff ff       	call   c000cd76 <File::open(FileOpenMode)>
c000d652:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000d655:	e8 7a f7 ff ff       	call   c000cdd4 <File::close()>
c000d65a:	83 c4 10             	add    esp,0x10
c000d65d:	85 db                	test   ebx,ebx
c000d65f:	74 0f                	je     c000d670 <User::loadClockSettings(int)+0x4c>
c000d661:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d663:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000d667:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d66a:	83 c4 08             	add    esp,0x8
c000d66d:	5b                   	pop    ebx
c000d66e:	ff e0                	jmp    eax
c000d670:	83 c4 08             	add    esp,0x8
c000d673:	5b                   	pop    ebx
c000d674:	c3                   	ret    
c000d675:	90                   	nop

c000d676 <Clock::Clock(char const*)>:
c000d676:	83 ec 0c             	sub    esp,0xc
c000d679:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d67d:	83 ec 08             	sub    esp,0x8
c000d680:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d684:	50                   	push   eax
c000d685:	e8 28 07 00 00       	call   c000ddb2 <Device::Device(char const*)>
c000d68a:	83 c4 10             	add    esp,0x10
c000d68d:	ba ec 34 02 c0       	mov    edx,0xc00234ec
c000d692:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d696:	89 10                	mov    DWORD PTR [eax],edx
c000d698:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d69c:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000d6a6:	90                   	nop
c000d6a7:	83 c4 0c             	add    esp,0xc
c000d6aa:	c3                   	ret    
c000d6ab:	90                   	nop

c000d6ac <Clock::~Clock()>:
c000d6ac:	83 ec 0c             	sub    esp,0xc
c000d6af:	ba ec 34 02 c0       	mov    edx,0xc00234ec
c000d6b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6b8:	89 10                	mov    DWORD PTR [eax],edx
c000d6ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6be:	83 ec 0c             	sub    esp,0xc
c000d6c1:	50                   	push   eax
c000d6c2:	e8 e9 03 00 00       	call   c000dab0 <Device::~Device()>
c000d6c7:	83 c4 10             	add    esp,0x10
c000d6ca:	90                   	nop
c000d6cb:	83 c4 0c             	add    esp,0xc
c000d6ce:	c3                   	ret    
c000d6cf:	90                   	nop

c000d6d0 <Clock::~Clock()>:
c000d6d0:	83 ec 0c             	sub    esp,0xc
c000d6d3:	83 ec 0c             	sub    esp,0xc
c000d6d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d6da:	e8 cd ff ff ff       	call   c000d6ac <Clock::~Clock()>
c000d6df:	83 c4 10             	add    esp,0x10
c000d6e2:	83 ec 08             	sub    esp,0x8
c000d6e5:	68 58 01 00 00       	push   0x158
c000d6ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d6ee:	e8 5d ef ff ff       	call   c000c650 <operator delete(void*, unsigned long)>
c000d6f3:	83 c4 10             	add    esp,0x10
c000d6f6:	83 c4 0c             	add    esp,0xc
c000d6f9:	c3                   	ret    

c000d6fa <Clock::timeInSecondsLocal()>:
c000d6fa:	53                   	push   ebx
c000d6fb:	83 ec 14             	sub    esp,0x14
c000d6fe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000d702:	8b 10                	mov    edx,DWORD PTR [eax]
c000d704:	50                   	push   eax
c000d705:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000d708:	0f b6 0d 1c 64 02 c0 	movzx  ecx,BYTE PTR ds:0xc002641c
c000d70f:	03 0d 20 64 02 c0    	add    ecx,DWORD PTR ds:0xc0026420
c000d715:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000d71b:	89 cb                	mov    ebx,ecx
c000d71d:	c1 fb 1f             	sar    ebx,0x1f
c000d720:	01 c8                	add    eax,ecx
c000d722:	11 da                	adc    edx,ebx
c000d724:	83 c4 10             	add    esp,0x10
c000d727:	31 c9                	xor    ecx,ecx
c000d729:	80 3d 1d 64 02 c0 00 	cmp    BYTE PTR ds:0xc002641d,0x0
c000d730:	74 05                	je     c000d737 <Clock::timeInSecondsLocal()+0x3d>
c000d732:	b9 08 07 00 00       	mov    ecx,0x708
c000d737:	31 db                	xor    ebx,ebx
c000d739:	01 c8                	add    eax,ecx
c000d73b:	11 da                	adc    edx,ebx
c000d73d:	83 c4 08             	add    esp,0x8
c000d740:	5b                   	pop    ebx
c000d741:	c3                   	ret    

c000d742 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000d742:	57                   	push   edi
c000d743:	56                   	push   esi
c000d744:	53                   	push   ebx
c000d745:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000d749:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000d74d:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d74f:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000d753:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000d756:	0f b6 05 1c 64 02 c0 	movzx  eax,BYTE PTR ds:0xc002641c
c000d75d:	03 05 20 64 02 c0    	add    eax,DWORD PTR ds:0xc0026420
c000d763:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000d769:	99                   	cdq    
c000d76a:	29 c6                	sub    esi,eax
c000d76c:	19 d7                	sbb    edi,edx
c000d76e:	89 f0                	mov    eax,esi
c000d770:	89 fa                	mov    edx,edi
c000d772:	31 f6                	xor    esi,esi
c000d774:	80 3d 1d 64 02 c0 00 	cmp    BYTE PTR ds:0xc002641d,0x0
c000d77b:	74 05                	je     c000d782 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000d77d:	be 08 07 00 00       	mov    esi,0x708
c000d782:	31 ff                	xor    edi,edi
c000d784:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000d788:	29 f0                	sub    eax,esi
c000d78a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d78e:	19 fa                	sbb    edx,edi
c000d790:	89 d8                	mov    eax,ebx
c000d792:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d796:	5b                   	pop    ebx
c000d797:	5e                   	pop    esi
c000d798:	5f                   	pop    edi
c000d799:	ff e0                	jmp    eax

c000d79b <datetimeToSeconds(datetime_t)>:
c000d79b:	55                   	push   ebp
c000d79c:	57                   	push   edi
c000d79d:	56                   	push   esi
c000d79e:	53                   	push   ebx
c000d79f:	83 ec 14             	sub    esp,0x14
c000d7a2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000d7a6:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000d7aa:	89 d3                	mov    ebx,edx
c000d7ac:	0f b6 c6             	movzx  eax,dh
c000d7af:	c1 eb 10             	shr    ebx,0x10
c000d7b2:	48                   	dec    eax
c000d7b3:	66 81 eb 6c 07       	sub    bx,0x76c
c000d7b8:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000d7bc:	0f b6 f5             	movzx  esi,ch
c000d7bf:	89 cf                	mov    edi,ecx
c000d7c1:	6b f6 3c             	imul   esi,esi,0x3c
c000d7c4:	c1 ef 10             	shr    edi,0x10
c000d7c7:	0f b6 c9             	movzx  ecx,cl
c000d7ca:	89 f8                	mov    eax,edi
c000d7cc:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000d7d2:	0f b6 f8             	movzx  edi,al
c000d7d5:	0f b6 d2             	movzx  edx,dl
c000d7d8:	01 fe                	add    esi,edi
c000d7da:	01 f1                	add    ecx,esi
c000d7dc:	0f b7 f3             	movzx  esi,bx
c000d7df:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000d7e3:	c1 f9 1f             	sar    ecx,0x1f
c000d7e6:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c000d7eb:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000d7ef:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c000d7f4:	8b 0c 8d 20 35 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdcae0]
c000d7fb:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c000d7ff:	76 29                	jbe    c000d82a <datetimeToSeconds(datetime_t)+0x8f>
c000d801:	f6 c3 03             	test   bl,0x3
c000d804:	75 24                	jne    c000d82a <datetimeToSeconds(datetime_t)+0x8f>
c000d806:	31 d2                	xor    edx,edx
c000d808:	bf 64 00 00 00       	mov    edi,0x64
c000d80d:	89 d8                	mov    eax,ebx
c000d80f:	66 f7 f7             	div    di
c000d812:	66 85 d2             	test   dx,dx
c000d815:	75 12                	jne    c000d829 <datetimeToSeconds(datetime_t)+0x8e>
c000d817:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000d81d:	bf 90 01 00 00       	mov    edi,0x190
c000d822:	99                   	cdq    
c000d823:	f7 ff                	idiv   edi
c000d825:	85 d2                	test   edx,edx
c000d827:	75 01                	jne    c000d82a <datetimeToSeconds(datetime_t)+0x8f>
c000d829:	41                   	inc    ecx
c000d82a:	66 83 fb 46          	cmp    bx,0x46
c000d82e:	76 45                	jbe    c000d875 <datetimeToSeconds(datetime_t)+0xda>
c000d830:	bb 46 00 00 00       	mov    ebx,0x46
c000d835:	bf 64 00 00 00       	mov    edi,0x64
c000d83a:	bd 90 01 00 00       	mov    ebp,0x190
c000d83f:	b8 6d 01 00 00       	mov    eax,0x16d
c000d844:	f6 c3 03             	test   bl,0x3
c000d847:	75 23                	jne    c000d86c <datetimeToSeconds(datetime_t)+0xd1>
c000d849:	89 d8                	mov    eax,ebx
c000d84b:	99                   	cdq    
c000d84c:	f7 ff                	idiv   edi
c000d84e:	b8 6e 01 00 00       	mov    eax,0x16e
c000d853:	85 d2                	test   edx,edx
c000d855:	75 15                	jne    c000d86c <datetimeToSeconds(datetime_t)+0xd1>
c000d857:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c000d85d:	99                   	cdq    
c000d85e:	f7 fd                	idiv   ebp
c000d860:	83 fa 01             	cmp    edx,0x1
c000d863:	19 c0                	sbb    eax,eax
c000d865:	f7 d0                	not    eax
c000d867:	05 6e 01 00 00       	add    eax,0x16e
c000d86c:	01 c1                	add    ecx,eax
c000d86e:	43                   	inc    ebx
c000d86f:	39 f3                	cmp    ebx,esi
c000d871:	7c cc                	jl     c000d83f <datetimeToSeconds(datetime_t)+0xa4>
c000d873:	eb 35                	jmp    c000d8aa <datetimeToSeconds(datetime_t)+0x10f>
c000d875:	74 33                	je     c000d8aa <datetimeToSeconds(datetime_t)+0x10f>
c000d877:	b8 45 00 00 00       	mov    eax,0x45
c000d87c:	89 c2                	mov    edx,eax
c000d87e:	83 e2 03             	and    edx,0x3
c000d881:	39 f0                	cmp    eax,esi
c000d883:	7e 0f                	jle    c000d894 <datetimeToSeconds(datetime_t)+0xf9>
c000d885:	83 fa 01             	cmp    edx,0x1
c000d888:	19 d2                	sbb    edx,edx
c000d88a:	48                   	dec    eax
c000d88b:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c000d892:	eb e8                	jmp    c000d87c <datetimeToSeconds(datetime_t)+0xe1>
c000d894:	b8 6d 01 00 00       	mov    eax,0x16d
c000d899:	85 d2                	test   edx,edx
c000d89b:	75 0b                	jne    c000d8a8 <datetimeToSeconds(datetime_t)+0x10d>
c000d89d:	66 83 fb 01          	cmp    bx,0x1
c000d8a1:	19 c0                	sbb    eax,eax
c000d8a3:	05 6e 01 00 00       	add    eax,0x16e
c000d8a8:	29 c1                	sub    ecx,eax
c000d8aa:	b8 80 51 01 00       	mov    eax,0x15180
c000d8af:	f7 e9                	imul   ecx
c000d8b1:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000d8b5:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000d8b9:	83 c4 14             	add    esp,0x14
c000d8bc:	5b                   	pop    ebx
c000d8bd:	5e                   	pop    esi
c000d8be:	5f                   	pop    edi
c000d8bf:	5d                   	pop    ebp
c000d8c0:	c3                   	ret    
c000d8c1:	90                   	nop

c000d8c2 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000d8c2:	57                   	push   edi
c000d8c3:	56                   	push   esi
c000d8c4:	53                   	push   ebx
c000d8c5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d8c9:	8b 06                	mov    eax,DWORD PTR [esi]
c000d8cb:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c000d8ce:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d8d2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d8d6:	e8 c0 fe ff ff       	call   c000d79b <datetimeToSeconds(datetime_t)>
c000d8db:	59                   	pop    ecx
c000d8dc:	0f b6 0d 1c 64 02 c0 	movzx  ecx,BYTE PTR ds:0xc002641c
c000d8e3:	5b                   	pop    ebx
c000d8e4:	03 0d 20 64 02 c0    	add    ecx,DWORD PTR ds:0xc0026420
c000d8ea:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000d8f0:	89 cb                	mov    ebx,ecx
c000d8f2:	c1 fb 1f             	sar    ebx,0x1f
c000d8f5:	29 c8                	sub    eax,ecx
c000d8f7:	19 da                	sbb    edx,ebx
c000d8f9:	31 c9                	xor    ecx,ecx
c000d8fb:	80 3d 1d 64 02 c0 00 	cmp    BYTE PTR ds:0xc002641d,0x0
c000d902:	74 05                	je     c000d909 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c000d904:	b9 08 07 00 00       	mov    ecx,0x708
c000d909:	31 db                	xor    ebx,ebx
c000d90b:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000d90f:	29 c8                	sub    eax,ecx
c000d911:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d915:	19 da                	sbb    edx,ebx
c000d917:	89 f8                	mov    eax,edi
c000d919:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d91d:	5b                   	pop    ebx
c000d91e:	5e                   	pop    esi
c000d91f:	5f                   	pop    edi
c000d920:	ff e0                	jmp    eax

c000d922 <secondsToDatetime(unsigned long long)>:
c000d922:	55                   	push   ebp
c000d923:	57                   	push   edi
c000d924:	56                   	push   esi
c000d925:	53                   	push   ebx
c000d926:	83 ec 1c             	sub    esp,0x1c
c000d929:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000d92d:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000d931:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000d935:	6a 00                	push   0x0
c000d937:	68 80 51 01 00       	push   0x15180
c000d93c:	55                   	push   ebp
c000d93d:	57                   	push   edi
c000d93e:	e8 5d 3b 01 00       	call   c00214a0 <__udivdi3>
c000d943:	83 c4 10             	add    esp,0x10
c000d946:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c000d94c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d950:	6a 00                	push   0x0
c000d952:	68 80 51 01 00       	push   0x15180
c000d957:	55                   	push   ebp
c000d958:	57                   	push   edi
c000d959:	bf 10 0e 00 00       	mov    edi,0xe10
c000d95e:	e8 3d 3c 01 00       	call   c00215a0 <__umoddi3>
c000d963:	83 c4 10             	add    esp,0x10
c000d966:	99                   	cdq    
c000d967:	f7 ff                	idiv   edi
c000d969:	bf 3c 00 00 00       	mov    edi,0x3c
c000d96e:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c000d971:	89 d0                	mov    eax,edx
c000d973:	99                   	cdq    
c000d974:	f7 ff                	idiv   edi
c000d976:	85 db                	test   ebx,ebx
c000d978:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c000d97b:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c000d97e:	79 11                	jns    c000d991 <secondsToDatetime(unsigned long long)+0x6f>
c000d980:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d984:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c000d98a:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000d98f:	eb 07                	jmp    c000d998 <secondsToDatetime(unsigned long long)+0x76>
c000d991:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000d996:	89 d8                	mov    eax,ebx
c000d998:	bf b4 05 00 00       	mov    edi,0x5b4
c000d99d:	99                   	cdq    
c000d99e:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c000d9a3:	f7 f9                	idiv   ecx
c000d9a5:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c000d9aa:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d9ae:	31 d2                	xor    edx,edx
c000d9b0:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c000d9b8:	01 c3                	add    ebx,eax
c000d9ba:	89 d8                	mov    eax,ebx
c000d9bc:	f7 f1                	div    ecx
c000d9be:	31 d2                	xor    edx,edx
c000d9c0:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c000d9c3:	89 d8                	mov    eax,ebx
c000d9c5:	f7 f7                	div    edi
c000d9c7:	31 d2                	xor    edx,edx
c000d9c9:	29 c1                	sub    ecx,eax
c000d9cb:	89 d8                	mov    eax,ebx
c000d9cd:	f7 f5                	div    ebp
c000d9cf:	bd 6d 01 00 00       	mov    ebp,0x16d
c000d9d4:	29 c1                	sub    ecx,eax
c000d9d6:	31 d2                	xor    edx,edx
c000d9d8:	89 c8                	mov    eax,ecx
c000d9da:	f7 f5                	div    ebp
c000d9dc:	bd 94 8e 00 00       	mov    ebp,0x8e94
c000d9e1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d9e5:	31 d2                	xor    edx,edx
c000d9e7:	89 c8                	mov    eax,ecx
c000d9e9:	f7 f5                	div    ebp
c000d9eb:	31 d2                	xor    edx,edx
c000d9ed:	01 c3                	add    ebx,eax
c000d9ef:	89 c8                	mov    eax,ecx
c000d9f1:	f7 f7                	div    edi
c000d9f3:	bf 99 00 00 00       	mov    edi,0x99
c000d9f8:	29 c3                	sub    ebx,eax
c000d9fa:	31 d2                	xor    edx,edx
c000d9fc:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c000da04:	29 c3                	sub    ebx,eax
c000da06:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000da09:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000da0c:	bb 05 00 00 00       	mov    ebx,0x5
c000da11:	83 c1 02             	add    ecx,0x2
c000da14:	89 c8                	mov    eax,ecx
c000da16:	f7 f7                	div    edi
c000da18:	31 d2                	xor    edx,edx
c000da1a:	89 c7                	mov    edi,eax
c000da1c:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c000da22:	83 c0 02             	add    eax,0x2
c000da25:	f7 f3                	div    ebx
c000da27:	89 eb                	mov    ebx,ebp
c000da29:	29 c3                	sub    ebx,eax
c000da2b:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c000da31:	88 1e                	mov    BYTE PTR [esi],bl
c000da33:	19 c0                	sbb    eax,eax
c000da35:	31 d2                	xor    edx,edx
c000da37:	83 e0 0c             	and    eax,0xc
c000da3a:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c000da3e:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c000da46:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000da4a:	83 f9 01             	cmp    ecx,0x1
c000da4d:	0f 96 c2             	setbe  dl
c000da50:	41                   	inc    ecx
c000da51:	01 d0                	add    eax,edx
c000da53:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c000da56:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c000da5a:	83 c4 1c             	add    esp,0x1c
c000da5d:	89 f0                	mov    eax,esi
c000da5f:	5b                   	pop    ebx
c000da60:	5e                   	pop    esi
c000da61:	5f                   	pop    edi
c000da62:	5d                   	pop    ebp
c000da63:	c2 04 00             	ret    0x4

c000da66 <Clock::timeInDatetimeLocal()>:
c000da66:	53                   	push   ebx
c000da67:	83 ec 14             	sub    esp,0x14
c000da6a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000da6e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000da72:	e8 83 fc ff ff       	call   c000d6fa <Clock::timeInSecondsLocal()>
c000da77:	83 c4 0c             	add    esp,0xc
c000da7a:	52                   	push   edx
c000da7b:	50                   	push   eax
c000da7c:	53                   	push   ebx
c000da7d:	e8 a0 fe ff ff       	call   c000d922 <secondsToDatetime(unsigned long long)>
c000da82:	89 d8                	mov    eax,ebx
c000da84:	83 c4 14             	add    esp,0x14
c000da87:	5b                   	pop    ebx
c000da88:	c2 04 00             	ret    0x4
c000da8b:	90                   	nop

c000da8c <Device::hibernate()>:
c000da8c:	c3                   	ret    
c000da8d:	90                   	nop

c000da8e <Device::wake()>:
c000da8e:	c3                   	ret    
c000da8f:	90                   	nop

c000da90 <Device::detect()>:
c000da90:	c3                   	ret    
c000da91:	90                   	nop

c000da92 <Device::disableLegacy()>:
c000da92:	c3                   	ret    
c000da93:	90                   	nop

c000da94 <Device::powerSaving(PowerSavingLevel)>:
c000da94:	c3                   	ret    
c000da95:	90                   	nop

c000da96 <DriverlessDevice::close(int, int, void*)>:
c000da96:	31 c0                	xor    eax,eax
c000da98:	c3                   	ret    
c000da99:	90                   	nop

c000da9a <DriverlessDevice::detect()>:
c000da9a:	c3                   	ret    
c000da9b:	90                   	nop

c000da9c <DriverlessDevice::open(int, int, void*)>:
c000da9c:	83 ec 18             	sub    esp,0x18
c000da9f:	68 50 35 02 c0       	push   0xc0023550
c000daa4:	e8 f2 4f 00 00       	call   c0012a9b <Krnl::panic(char const*)>
c000daa9:	83 c8 ff             	or     eax,0xffffffff
c000daac:	83 c4 1c             	add    esp,0x1c
c000daaf:	c3                   	ret    

c000dab0 <Device::~Device()>:
c000dab0:	ba b0 35 02 c0       	mov    edx,0xc00235b0
c000dab5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dab9:	89 10                	mov    DWORD PTR [eax],edx
c000dabb:	90                   	nop
c000dabc:	c3                   	ret    
c000dabd:	90                   	nop

c000dabe <Device::~Device()>:
c000dabe:	83 ec 0c             	sub    esp,0xc
c000dac1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000dac5:	e8 e6 ff ff ff       	call   c000dab0 <Device::~Device()>
c000daca:	83 c4 04             	add    esp,0x4
c000dacd:	83 ec 08             	sub    esp,0x8
c000dad0:	68 58 01 00 00       	push   0x158
c000dad5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dad9:	e8 72 eb ff ff       	call   c000c650 <operator delete(void*, unsigned long)>
c000dade:	83 c4 10             	add    esp,0x10
c000dae1:	83 c4 0c             	add    esp,0xc
c000dae4:	c3                   	ret    
c000dae5:	90                   	nop

c000dae6 <Device::findAndLoadDriver()>:
c000dae6:	c7 44 24 04 6e 35 02 c0 	mov    DWORD PTR [esp+0x4],0xc002356e
c000daee:	e9 3e ec ff ff       	jmp    c000c731 <Dbg::kprintf(char const*, ...)>
c000daf3:	90                   	nop

c000daf4 <Device::preOpenPCI(PCIDeviceInfo)>:
c000daf4:	57                   	push   edi
c000daf5:	b9 09 00 00 00       	mov    ecx,0x9
c000dafa:	56                   	push   esi
c000dafb:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000daff:	8d 74 24 10          	lea    esi,[esp+0x10]
c000db03:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000db0d:	81 c7 18 01 00 00    	add    edi,0x118
c000db13:	fc                   	cld    
c000db14:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000db16:	5e                   	pop    esi
c000db17:	5f                   	pop    edi
c000db18:	c3                   	ret    
c000db19:	90                   	nop

c000db1a <Device::preOpenACPI(void*, char*, char*)>:
c000db1a:	57                   	push   edi
c000db1b:	b9 1e 00 00 00       	mov    ecx,0x1e
c000db20:	56                   	push   esi
c000db21:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000db25:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000db29:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000db33:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000db39:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000db3f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000db43:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000db45:	b9 0e 00 00 00       	mov    ecx,0xe
c000db4a:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000db50:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000db54:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000db56:	5e                   	pop    esi
c000db57:	5f                   	pop    edi
c000db58:	c3                   	ret    
c000db59:	90                   	nop

c000db5a <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000db5a:	53                   	push   ebx
c000db5b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000db5f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000db63:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000db67:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000db6b:	0f b6 c0             	movzx  eax,al
c000db6e:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000db72:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000db76:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000db7a:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000db7e:	5b                   	pop    ebx
c000db7f:	e9 10 06 00 00       	jmp    c000e194 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c000db84 <Device::getParent()>:
c000db84:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000db88:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000db8e:	c3                   	ret    
c000db8f:	90                   	nop

c000db90 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000db90:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000db94:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000db98:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c000db9d:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000dba1:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000dba5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000dba9:	e9 45 07 00 00       	jmp    c000e2f3 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c000dbae <Device::addChild(Device*)>:
c000dbae:	53                   	push   ebx
c000dbaf:	83 ec 08             	sub    esp,0x8
c000dbb2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000dbb6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000dbba:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c000dbc0:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000dbc6:	8b 13                	mov    edx,DWORD PTR [ebx]
c000dbc8:	85 d2                	test   edx,edx
c000dbca:	74 04                	je     c000dbd0 <Device::addChild(Device*)+0x22>
c000dbcc:	89 d3                	mov    ebx,edx
c000dbce:	eb f6                	jmp    c000dbc6 <Device::addChild(Device*)+0x18>
c000dbd0:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000dbd3:	83 ec 0c             	sub    esp,0xc
c000dbd6:	6a 08                	push   0x8
c000dbd8:	e8 ba bb ff ff       	call   c0009797 <malloc>
c000dbdd:	89 03                	mov    DWORD PTR [ebx],eax
c000dbdf:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000dbe5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000dbec:	83 c4 18             	add    esp,0x18
c000dbef:	5b                   	pop    ebx
c000dbf0:	c3                   	ret    
c000dbf1:	90                   	nop

c000dbf2 <Device::removeAllChildren()>:
c000dbf2:	56                   	push   esi
c000dbf3:	53                   	push   ebx
c000dbf4:	52                   	push   edx
c000dbf5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000dbf9:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000dbff:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000dc02:	74 17                	je     c000dc1b <Device::removeAllChildren()+0x29>
c000dc04:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000dc07:	85 c0                	test   eax,eax
c000dc09:	74 0c                	je     c000dc17 <Device::removeAllChildren()+0x25>
c000dc0b:	83 ec 0c             	sub    esp,0xc
c000dc0e:	8b 10                	mov    edx,DWORD PTR [eax]
c000dc10:	50                   	push   eax
c000dc11:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000dc14:	83 c4 10             	add    esp,0x10
c000dc17:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000dc19:	eb e4                	jmp    c000dbff <Device::removeAllChildren()+0xd>
c000dc1b:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000dc21:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000dc27:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000dc2d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000dc34:	58                   	pop    eax
c000dc35:	5b                   	pop    ebx
c000dc36:	5e                   	pop    esi
c000dc37:	c3                   	ret    

c000dc38 <Device::hibernateAll()>:
c000dc38:	53                   	push   ebx
c000dc39:	83 ec 14             	sub    esp,0x14
c000dc3c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000dc40:	8b 03                	mov    eax,DWORD PTR [ebx]
c000dc42:	53                   	push   ebx
c000dc43:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000dc46:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000dc4c:	83 c4 10             	add    esp,0x10
c000dc4f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000dc52:	74 0f                	je     c000dc63 <Device::hibernateAll()+0x2b>
c000dc54:	83 ec 0c             	sub    esp,0xc
c000dc57:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000dc5a:	e8 d9 ff ff ff       	call   c000dc38 <Device::hibernateAll()>
c000dc5f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000dc61:	eb e9                	jmp    c000dc4c <Device::hibernateAll()+0x14>
c000dc63:	83 c4 08             	add    esp,0x8
c000dc66:	5b                   	pop    ebx
c000dc67:	c3                   	ret    

c000dc68 <Device::wakeAll()>:
c000dc68:	53                   	push   ebx
c000dc69:	83 ec 14             	sub    esp,0x14
c000dc6c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000dc70:	8b 03                	mov    eax,DWORD PTR [ebx]
c000dc72:	53                   	push   ebx
c000dc73:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000dc76:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000dc7c:	83 c4 10             	add    esp,0x10
c000dc7f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000dc82:	74 0f                	je     c000dc93 <Device::wakeAll()+0x2b>
c000dc84:	83 ec 0c             	sub    esp,0xc
c000dc87:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000dc8a:	e8 d9 ff ff ff       	call   c000dc68 <Device::wakeAll()>
c000dc8f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000dc91:	eb e9                	jmp    c000dc7c <Device::wakeAll()+0x14>
c000dc93:	83 c4 08             	add    esp,0x8
c000dc96:	5b                   	pop    ebx
c000dc97:	c3                   	ret    

c000dc98 <Device::detectAll()>:
c000dc98:	53                   	push   ebx
c000dc99:	83 ec 14             	sub    esp,0x14
c000dc9c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000dca0:	8b 03                	mov    eax,DWORD PTR [ebx]
c000dca2:	53                   	push   ebx
c000dca3:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000dca6:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000dcac:	83 c4 10             	add    esp,0x10
c000dcaf:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000dcb2:	74 0f                	je     c000dcc3 <Device::detectAll()+0x2b>
c000dcb4:	83 ec 0c             	sub    esp,0xc
c000dcb7:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000dcba:	e8 d9 ff ff ff       	call   c000dc98 <Device::detectAll()>
c000dcbf:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000dcc1:	eb e9                	jmp    c000dcac <Device::detectAll()+0x14>
c000dcc3:	83 c4 08             	add    esp,0x8
c000dcc6:	5b                   	pop    ebx
c000dcc7:	c3                   	ret    

c000dcc8 <Device::disableLegacyAll()>:
c000dcc8:	53                   	push   ebx
c000dcc9:	83 ec 14             	sub    esp,0x14
c000dccc:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000dcd0:	8b 03                	mov    eax,DWORD PTR [ebx]
c000dcd2:	53                   	push   ebx
c000dcd3:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c000dcd6:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000dcdc:	83 c4 10             	add    esp,0x10
c000dcdf:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000dce2:	74 0f                	je     c000dcf3 <Device::disableLegacyAll()+0x2b>
c000dce4:	83 ec 0c             	sub    esp,0xc
c000dce7:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000dcea:	e8 d9 ff ff ff       	call   c000dcc8 <Device::disableLegacyAll()>
c000dcef:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000dcf1:	eb e9                	jmp    c000dcdc <Device::disableLegacyAll()+0x14>
c000dcf3:	83 c4 08             	add    esp,0x8
c000dcf6:	5b                   	pop    ebx
c000dcf7:	c3                   	ret    

c000dcf8 <Device::loadDriversForAll()>:
c000dcf8:	53                   	push   ebx
c000dcf9:	83 ec 08             	sub    esp,0x8
c000dcfc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000dd00:	83 bb 10 01 00 00 13 	cmp    DWORD PTR [ebx+0x110],0x13
c000dd07:	75 0c                	jne    c000dd15 <Device::loadDriversForAll()+0x1d>
c000dd09:	83 ec 0c             	sub    esp,0xc
c000dd0c:	53                   	push   ebx
c000dd0d:	e8 d4 fd ff ff       	call   c000dae6 <Device::findAndLoadDriver()>
c000dd12:	83 c4 10             	add    esp,0x10
c000dd15:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000dd1b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000dd1e:	74 12                	je     c000dd32 <Device::loadDriversForAll()+0x3a>
c000dd20:	83 ec 0c             	sub    esp,0xc
c000dd23:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000dd26:	e8 cd ff ff ff       	call   c000dcf8 <Device::loadDriversForAll()>
c000dd2b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000dd2d:	83 c4 10             	add    esp,0x10
c000dd30:	eb e9                	jmp    c000dd1b <Device::loadDriversForAll()+0x23>
c000dd32:	83 c4 08             	add    esp,0x8
c000dd35:	5b                   	pop    ebx
c000dd36:	c3                   	ret    
c000dd37:	90                   	nop

c000dd38 <Device::closeAll()>:
c000dd38:	53                   	push   ebx
c000dd39:	83 ec 08             	sub    esp,0x8
c000dd3c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000dd40:	8b 03                	mov    eax,DWORD PTR [ebx]
c000dd42:	6a 00                	push   0x0
c000dd44:	6a 00                	push   0x0
c000dd46:	6a 00                	push   0x0
c000dd48:	53                   	push   ebx
c000dd49:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000dd4c:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000dd52:	83 c4 10             	add    esp,0x10
c000dd55:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000dd58:	74 0f                	je     c000dd69 <Device::closeAll()+0x31>
c000dd5a:	83 ec 0c             	sub    esp,0xc
c000dd5d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000dd60:	e8 d3 ff ff ff       	call   c000dd38 <Device::closeAll()>
c000dd65:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000dd67:	eb e9                	jmp    c000dd52 <Device::closeAll()+0x1a>
c000dd69:	83 c4 08             	add    esp,0x8
c000dd6c:	5b                   	pop    ebx
c000dd6d:	c3                   	ret    

c000dd6e <Device::powerSavingAll(PowerSavingLevel)>:
c000dd6e:	56                   	push   esi
c000dd6f:	53                   	push   ebx
c000dd70:	83 ec 0c             	sub    esp,0xc
c000dd73:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000dd77:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000dd7b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000dd7d:	56                   	push   esi
c000dd7e:	53                   	push   ebx
c000dd7f:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000dd82:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000dd88:	83 c4 10             	add    esp,0x10
c000dd8b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000dd8e:	74 0f                	je     c000dd9f <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000dd90:	52                   	push   edx
c000dd91:	52                   	push   edx
c000dd92:	56                   	push   esi
c000dd93:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000dd96:	e8 d3 ff ff ff       	call   c000dd6e <Device::powerSavingAll(PowerSavingLevel)>
c000dd9b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000dd9d:	eb e9                	jmp    c000dd88 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000dd9f:	58                   	pop    eax
c000dda0:	5b                   	pop    ebx
c000dda1:	5e                   	pop    esi
c000dda2:	c3                   	ret    
c000dda3:	90                   	nop

c000dda4 <Device::setName(char const*)>:
c000dda4:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000ddac:	e9 b3 27 ff ff       	jmp    c0000564 <strcpy>
c000ddb1:	90                   	nop

c000ddb2 <Device::Device(char const*)>:
c000ddb2:	83 ec 1c             	sub    esp,0x1c
c000ddb5:	ba b0 35 02 c0       	mov    edx,0xc00235b0
c000ddba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ddbe:	89 10                	mov    DWORD PTR [eax],edx
c000ddc0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ddc4:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000ddce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ddd2:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000dddc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dde0:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000ddea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ddee:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000ddf8:	83 ec 08             	sub    esp,0x8
c000ddfb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ddff:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000de03:	e8 9c ff ff ff       	call   c000dda4 <Device::setName(char const*)>
c000de08:	83 c4 10             	add    esp,0x10
c000de0b:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c000de13:	83 ec 0c             	sub    esp,0xc
c000de16:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000de1a:	e8 78 b9 ff ff       	call   c0009797 <malloc>
c000de1f:	83 c4 10             	add    esp,0x10
c000de22:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000de28:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000de2f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000de33:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000de39:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000de3d:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000de43:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000de49:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000de4d:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000de53:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000de5a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000de5e:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000de65:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000de69:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000de70:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000de74:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000de7e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000de82:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000de8c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000de90:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000de9a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000de9e:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000dea8:	90                   	nop
c000dea9:	83 c4 1c             	add    esp,0x1c
c000deac:	c3                   	ret    
c000dead:	90                   	nop

c000deae <Device::getName()>:
c000deae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000deb2:	05 d0 00 00 00       	add    eax,0xd0
c000deb7:	c3                   	ret    

c000deb8 <DriverlessDevice::DriverlessDevice(char const*)>:
c000deb8:	83 ec 0c             	sub    esp,0xc
c000debb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000debf:	83 ec 08             	sub    esp,0x8
c000dec2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dec6:	50                   	push   eax
c000dec7:	e8 e6 fe ff ff       	call   c000ddb2 <Device::Device(char const*)>
c000decc:	83 c4 10             	add    esp,0x10
c000decf:	ba dc 35 02 c0       	mov    edx,0xc00235dc
c000ded4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ded8:	89 10                	mov    DWORD PTR [eax],edx
c000deda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dede:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c000dee8:	90                   	nop
c000dee9:	83 c4 0c             	add    esp,0xc
c000deec:	c3                   	ret    
c000deed:	90                   	nop

c000deee <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000deee:	57                   	push   edi
c000deef:	56                   	push   esi
c000def0:	53                   	push   ebx
c000def1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000def5:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000def9:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000defd:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000df03:	75 0c                	jne    c000df11 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000df05:	52                   	push   edx
c000df06:	52                   	push   edx
c000df07:	53                   	push   ebx
c000df08:	56                   	push   esi
c000df09:	e8 44 3a 01 00       	call   c0021952 <LinkedList<Device>::addElement(Device*)>
c000df0e:	83 c4 10             	add    esp,0x10
c000df11:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000df17:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000df1a:	74 12                	je     c000df2e <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000df1c:	50                   	push   eax
c000df1d:	57                   	push   edi
c000df1e:	56                   	push   esi
c000df1f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000df22:	e8 c7 ff ff ff       	call   c000deee <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000df27:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000df29:	83 c4 10             	add    esp,0x10
c000df2c:	eb e9                	jmp    c000df17 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000df2e:	5b                   	pop    ebx
c000df2f:	5e                   	pop    esi
c000df30:	5f                   	pop    edi
c000df31:	c3                   	ret    

c000df32 <getDevicesOfType(DeviceType)>:
c000df32:	53                   	push   ebx
c000df33:	83 ec 14             	sub    esp,0x14
c000df36:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000df3a:	53                   	push   ebx
c000df3b:	e8 ee 3a 01 00       	call   c0021a2e <LinkedList<Device>::LinkedList()>
c000df40:	83 c4 0c             	add    esp,0xc
c000df43:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000df47:	53                   	push   ebx
c000df48:	ff 35 28 63 02 c0    	push   DWORD PTR ds:0xc0026328
c000df4e:	e8 9b ff ff ff       	call   c000deee <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000df53:	89 d8                	mov    eax,ebx
c000df55:	83 c4 18             	add    esp,0x18
c000df58:	5b                   	pop    ebx
c000df59:	c2 04 00             	ret    0x4

c000df5c <HardDiskController::HardDiskController(char const*)>:
c000df5c:	83 ec 0c             	sub    esp,0xc
c000df5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df63:	83 ec 08             	sub    esp,0x8
c000df66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df6a:	50                   	push   eax
c000df6b:	e8 42 fe ff ff       	call   c000ddb2 <Device::Device(char const*)>
c000df70:	83 c4 10             	add    esp,0x10
c000df73:	ba 08 36 02 c0       	mov    edx,0xc0023608
c000df78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df7c:	89 10                	mov    DWORD PTR [eax],edx
c000df7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df82:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000df8c:	90                   	nop
c000df8d:	83 c4 0c             	add    esp,0xc
c000df90:	c3                   	ret    
c000df91:	90                   	nop
c000df92:	66 90                	xchg   ax,ax

c000df94 <HardDiskController::~HardDiskController()>:
c000df94:	83 ec 0c             	sub    esp,0xc
c000df97:	ba 08 36 02 c0       	mov    edx,0xc0023608
c000df9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfa0:	89 10                	mov    DWORD PTR [eax],edx
c000dfa2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfa6:	83 ec 0c             	sub    esp,0xc
c000dfa9:	50                   	push   eax
c000dfaa:	e8 01 fb ff ff       	call   c000dab0 <Device::~Device()>
c000dfaf:	83 c4 10             	add    esp,0x10
c000dfb2:	90                   	nop
c000dfb3:	83 c4 0c             	add    esp,0xc
c000dfb6:	c3                   	ret    
c000dfb7:	90                   	nop

c000dfb8 <HardDiskController::~HardDiskController()>:
c000dfb8:	83 ec 0c             	sub    esp,0xc
c000dfbb:	83 ec 0c             	sub    esp,0xc
c000dfbe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfc2:	e8 cd ff ff ff       	call   c000df94 <HardDiskController::~HardDiskController()>
c000dfc7:	83 c4 10             	add    esp,0x10
c000dfca:	83 ec 08             	sub    esp,0x8
c000dfcd:	68 58 01 00 00       	push   0x158
c000dfd2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfd6:	e8 75 e6 ff ff       	call   c000c650 <operator delete(void*, unsigned long)>
c000dfdb:	83 c4 10             	add    esp,0x10
c000dfde:	83 c4 0c             	add    esp,0xc
c000dfe1:	c3                   	ret    

c000dfe2 <PhysicalDisk::eject()>:
c000dfe2:	83 c8 ff             	or     eax,0xffffffff
c000dfe5:	c3                   	ret    

c000dfe6 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000dfe6:	83 ec 0c             	sub    esp,0xc
c000dfe9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfed:	83 ec 08             	sub    esp,0x8
c000dff0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dff4:	50                   	push   eax
c000dff5:	e8 b8 fd ff ff       	call   c000ddb2 <Device::Device(char const*)>
c000dffa:	83 c4 10             	add    esp,0x10
c000dffd:	ba 34 36 02 c0       	mov    edx,0xc0023634
c000e002:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e006:	89 10                	mov    DWORD PTR [eax],edx
c000e008:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e00c:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000e013:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e017:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000e01e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e022:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000e02c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e030:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e034:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000e03a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e03e:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000e048:	90                   	nop
c000e049:	83 c4 0c             	add    esp,0xc
c000e04c:	c3                   	ret    
c000e04d:	90                   	nop

c000e04e <PhysicalDisk::startCache()>:
c000e04e:	56                   	push   esi
c000e04f:	53                   	push   ebx
c000e050:	83 ec 10             	sub    esp,0x10
c000e053:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e057:	6a 44                	push   0x44
c000e059:	e8 39 b7 ff ff       	call   c0009797 <malloc>
c000e05e:	89 c6                	mov    esi,eax
c000e060:	58                   	pop    eax
c000e061:	5a                   	pop    edx
c000e062:	53                   	push   ebx
c000e063:	56                   	push   esi
c000e064:	e8 c7 15 00 00       	call   c000f630 <VCache::VCache(PhysicalDisk*)>
c000e069:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000e06f:	83 c4 14             	add    esp,0x14
c000e072:	5b                   	pop    ebx
c000e073:	5e                   	pop    esi
c000e074:	c3                   	ret    
c000e075:	90                   	nop

c000e076 <PhysicalDisk::~PhysicalDisk()>:
c000e076:	83 ec 0c             	sub    esp,0xc
c000e079:	ba 34 36 02 c0       	mov    edx,0xc0023634
c000e07e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e082:	89 10                	mov    DWORD PTR [eax],edx
c000e084:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e088:	83 ec 0c             	sub    esp,0xc
c000e08b:	50                   	push   eax
c000e08c:	e8 1f fa ff ff       	call   c000dab0 <Device::~Device()>
c000e091:	83 c4 10             	add    esp,0x10
c000e094:	90                   	nop
c000e095:	83 c4 0c             	add    esp,0xc
c000e098:	c3                   	ret    
c000e099:	90                   	nop

c000e09a <PhysicalDisk::~PhysicalDisk()>:
c000e09a:	83 ec 0c             	sub    esp,0xc
c000e09d:	83 ec 0c             	sub    esp,0xc
c000e0a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e0a4:	e8 cd ff ff ff       	call   c000e076 <PhysicalDisk::~PhysicalDisk()>
c000e0a9:	83 c4 10             	add    esp,0x10
c000e0ac:	83 ec 08             	sub    esp,0x8
c000e0af:	68 6c 01 00 00       	push   0x16c
c000e0b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e0b8:	e8 93 e5 ff ff       	call   c000c650 <operator delete(void*, unsigned long)>
c000e0bd:	83 c4 10             	add    esp,0x10
c000e0c0:	83 c4 0c             	add    esp,0xc
c000e0c3:	c3                   	ret    

c000e0c4 <int_handler>:
c000e0c4:	55                   	push   ebp
c000e0c5:	57                   	push   edi
c000e0c6:	56                   	push   esi
c000e0c7:	53                   	push   ebx
c000e0c8:	83 ec 0c             	sub    esp,0xc
c000e0cb:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000e0cf:	80 3d c4 8d 02 c0 00 	cmp    BYTE PTR ds:0xc0028dc4,0x0
c000e0d6:	74 0b                	je     c000e0e3 <int_handler+0x1f>
c000e0d8:	fa                   	cli    
c000e0d9:	f4                   	hlt    
c000e0da:	80 3d c4 8d 02 c0 00 	cmp    BYTE PTR ds:0xc0028dc4,0x0
c000e0e1:	75 f5                	jne    c000e0d8 <int_handler+0x14>
c000e0e3:	8b 77 30             	mov    esi,DWORD PTR [edi+0x30]
c000e0e6:	8d 46 e0             	lea    eax,[esi-0x20]
c000e0e9:	83 f8 17             	cmp    eax,0x17
c000e0ec:	76 3e                	jbe    c000e12c <int_handler+0x68>
c000e0ee:	c1 e6 04             	shl    esi,0x4
c000e0f1:	31 db                	xor    ebx,ebx
c000e0f3:	8d ae 40 74 02 c0    	lea    ebp,[esi-0x3ffd8bc0]
c000e0f9:	81 c6 40 64 02 c0    	add    esi,0xc0026440
c000e0ff:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c000e103:	85 c0                	test   eax,eax
c000e105:	74 13                	je     c000e11a <int_handler+0x56>
c000e107:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c000e10a:	83 7f 30 60          	cmp    DWORD PTR [edi+0x30],0x60
c000e10e:	74 2a                	je     c000e13a <int_handler+0x76>
c000e110:	83 ec 08             	sub    esp,0x8
c000e113:	52                   	push   edx
c000e114:	57                   	push   edi
c000e115:	ff d0                	call   eax
c000e117:	83 c4 10             	add    esp,0x10
c000e11a:	43                   	inc    ebx
c000e11b:	83 fb 04             	cmp    ebx,0x4
c000e11e:	75 df                	jne    c000e0ff <int_handler+0x3b>
c000e120:	83 c4 0c             	add    esp,0xc
c000e123:	31 c0                	xor    eax,eax
c000e125:	5b                   	pop    ebx
c000e126:	31 d2                	xor    edx,edx
c000e128:	5e                   	pop    esi
c000e129:	5f                   	pop    edi
c000e12a:	5d                   	pop    ebp
c000e12b:	c3                   	ret    
c000e12c:	83 ec 0c             	sub    esp,0xc
c000e12f:	50                   	push   eax
c000e130:	e8 9d b5 00 00       	call   c00196d2 <Hal::endOfInterrupt(int)>
c000e135:	83 c4 10             	add    esp,0x10
c000e138:	eb b4                	jmp    c000e0ee <int_handler+0x2a>
c000e13a:	83 ec 08             	sub    esp,0x8
c000e13d:	52                   	push   edx
c000e13e:	57                   	push   edi
c000e13f:	ff d0                	call   eax
c000e141:	83 c4 10             	add    esp,0x10
c000e144:	83 c4 0c             	add    esp,0xc
c000e147:	5b                   	pop    ebx
c000e148:	5e                   	pop    esi
c000e149:	5f                   	pop    edi
c000e14a:	5d                   	pop    ebp
c000e14b:	c3                   	ret    

c000e14c <installISRHandler(int, void (*)(regs*, void*), void*)>:
c000e14c:	56                   	push   esi
c000e14d:	31 c0                	xor    eax,eax
c000e14f:	53                   	push   ebx
c000e150:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e154:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e158:	89 ca                	mov    edx,ecx
c000e15a:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e15e:	c1 e2 04             	shl    edx,0x4
c000e161:	83 bc 82 40 74 02 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffd8bc0],0x0
c000e169:	74 15                	je     c000e180 <installISRHandler(int, void (*)(regs*, void*), void*)+0x34>
c000e16b:	40                   	inc    eax
c000e16c:	83 f8 04             	cmp    eax,0x4
c000e16f:	75 f0                	jne    c000e161 <installISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c000e171:	c7 44 24 0c 64 36 02 c0 	mov    DWORD PTR [esp+0xc],0xc0023664
c000e179:	5b                   	pop    ebx
c000e17a:	5e                   	pop    esi
c000e17b:	e9 1b 49 00 00       	jmp    c0012a9b <Krnl::panic(char const*)>
c000e180:	8d 04 88             	lea    eax,[eax+ecx*4]
c000e183:	89 1c 85 40 74 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8bc0],ebx
c000e18a:	89 34 85 40 64 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9bc0],esi
c000e191:	5b                   	pop    ebx
c000e192:	5e                   	pop    esi
c000e193:	c3                   	ret    

c000e194 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000e194:	57                   	push   edi
c000e195:	8b 15 28 63 02 c0    	mov    edx,DWORD PTR ds:0xc0026328
c000e19b:	56                   	push   esi
c000e19c:	53                   	push   ebx
c000e19d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e1a1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e1a5:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c000e1ac:	74 55                	je     c000e203 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x6f>
c000e1ae:	89 c7                	mov    edi,eax
c000e1b0:	84 c0                	test   al,al
c000e1b2:	74 1e                	je     c000e1d2 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3e>
c000e1b4:	83 fe 0f             	cmp    esi,0xf
c000e1b7:	0f 8f cc 00 00 00    	jg     c000e289 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xf5>
c000e1bd:	0f b6 b6 40 5a 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffda5c0]
c000e1c4:	66 8b bc 36 e0 8b 02 c0 	mov    di,WORD PTR [esi+esi*1-0x3ffd7420]
c000e1cc:	66 d1 ef             	shr    di,1
c000e1cf:	83 e7 01             	and    edi,0x1
c000e1d2:	83 ec 08             	sub    esp,0x8
c000e1d5:	31 db                	xor    ebx,ebx
c000e1d7:	ff 35 60 a2 02 c0    	push   DWORD PTR ds:0xc002a260
c000e1dd:	68 71 36 02 c0       	push   0xc0023671
c000e1e2:	e8 4a e5 ff ff       	call   c000c731 <Dbg::kprintf(char const*, ...)>
c000e1e7:	83 c4 10             	add    esp,0x10
c000e1ea:	a1 60 a2 02 c0       	mov    eax,ds:0xc002a260
c000e1ef:	85 c0                	test   eax,eax
c000e1f1:	7f 51                	jg     c000e244 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xb0>
c000e1f3:	83 ec 0c             	sub    esp,0xc
c000e1f6:	68 88 36 02 c0       	push   0xc0023688
c000e1fb:	e8 9b 48 00 00       	call   c0012a9b <Krnl::panic(char const*)>
c000e200:	83 c4 10             	add    esp,0x10
c000e203:	8d 4e 20             	lea    ecx,[esi+0x20]
c000e206:	31 d2                	xor    edx,edx
c000e208:	89 c8                	mov    eax,ecx
c000e20a:	c1 e0 04             	shl    eax,0x4
c000e20d:	8b 9c 90 40 74 02 c0 	mov    ebx,DWORD PTR [eax+edx*4-0x3ffd8bc0]
c000e214:	85 db                	test   ebx,ebx
c000e216:	0f 84 84 00 00 00    	je     c000e2a0 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x10c>
c000e21c:	42                   	inc    edx
c000e21d:	83 fa 04             	cmp    edx,0x4
c000e220:	75 eb                	jne    c000e20d <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x79>
c000e222:	83 ec 0c             	sub    esp,0xc
c000e225:	68 dc 36 02 c0       	push   0xc00236dc
c000e22a:	e8 6c 48 00 00       	call   c0012a9b <Krnl::panic(char const*)>
c000e22f:	83 c4 10             	add    esp,0x10
c000e232:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e237:	5b                   	pop    ebx
c000e238:	5e                   	pop    esi
c000e239:	5f                   	pop    edi
c000e23a:	c3                   	ret    
c000e23b:	43                   	inc    ebx
c000e23c:	39 1d 60 a2 02 c0    	cmp    DWORD PTR ds:0xc002a260,ebx
c000e242:	7e af                	jle    c000e1f3 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x5f>
c000e244:	83 ec 08             	sub    esp,0x8
c000e247:	56                   	push   esi
c000e248:	ff 34 9d 80 a2 02 c0 	push   DWORD PTR [ebx*4-0x3ffd5d80]
c000e24f:	e8 34 27 01 00       	call   c0020988 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c000e254:	83 c4 10             	add    esp,0x10
c000e257:	84 c0                	test   al,al
c000e259:	74 e0                	je     c000e23b <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xa7>
c000e25b:	50                   	push   eax
c000e25c:	89 f8                	mov    eax,edi
c000e25e:	0f b6 f8             	movzx  edi,al
c000e261:	8d 46 20             	lea    eax,[esi+0x20]
c000e264:	57                   	push   edi
c000e265:	0f b6 c0             	movzx  eax,al
c000e268:	6a 00                	push   0x0
c000e26a:	50                   	push   eax
c000e26b:	89 f0                	mov    eax,esi
c000e26d:	6a 00                	push   0x0
c000e26f:	0f b6 c0             	movzx  eax,al
c000e272:	6a 00                	push   0x0
c000e274:	50                   	push   eax
c000e275:	ff 34 9d 80 a2 02 c0 	push   DWORD PTR [ebx*4-0x3ffd5d80]
c000e27c:	e8 83 28 01 00       	call   c0020b04 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c000e281:	83 c4 20             	add    esp,0x20
c000e284:	e9 7a ff ff ff       	jmp    c000e203 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x6f>
c000e289:	83 ec 0c             	sub    esp,0xc
c000e28c:	31 ff                	xor    edi,edi
c000e28e:	68 a4 36 02 c0       	push   0xc00236a4
c000e293:	e8 03 48 00 00       	call   c0012a9b <Krnl::panic(char const*)>
c000e298:	83 c4 10             	add    esp,0x10
c000e29b:	e9 32 ff ff ff       	jmp    c000e1d2 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3e>
c000e2a0:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000e2a3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000e2a7:	89 14 85 40 74 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8bc0],edx
c000e2ae:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e2b2:	5b                   	pop    ebx
c000e2b3:	89 14 85 40 64 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9bc0],edx
c000e2ba:	89 f0                	mov    eax,esi
c000e2bc:	5e                   	pop    esi
c000e2bd:	5f                   	pop    edi
c000e2be:	c3                   	ret    

c000e2bf <uninstallISRHandler(int, void (*)(regs*, void*))>:
c000e2bf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e2c3:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000e2c7:	c1 e0 04             	shl    eax,0x4
c000e2ca:	8d 50 10             	lea    edx,[eax+0x10]
c000e2cd:	39 88 40 74 02 c0    	cmp    DWORD PTR [eax-0x3ffd8bc0],ecx
c000e2d3:	74 08                	je     c000e2dd <uninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c000e2d5:	83 c0 04             	add    eax,0x4
c000e2d8:	39 d0                	cmp    eax,edx
c000e2da:	75 f1                	jne    c000e2cd <uninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c000e2dc:	c3                   	ret    
c000e2dd:	c7 80 40 74 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8bc0],0x0
c000e2e7:	c7 80 40 64 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9bc0],0x0
c000e2f1:	eb e2                	jmp    c000e2d5 <uninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c000e2f3 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c000e2f3:	53                   	push   ebx
c000e2f4:	83 ec 08             	sub    esp,0x8
c000e2f7:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000e2fb:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000e300:	74 0e                	je     c000e310 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000e302:	a1 28 63 02 c0       	mov    eax,ds:0xc0026328
c000e307:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c000e30e:	75 37                	jne    c000e347 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x54>
c000e310:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e314:	83 c0 20             	add    eax,0x20
c000e317:	c1 e0 04             	shl    eax,0x4
c000e31a:	8d 50 10             	lea    edx,[eax+0x10]
c000e31d:	39 98 40 74 02 c0    	cmp    DWORD PTR [eax-0x3ffd8bc0],ebx
c000e323:	74 0c                	je     c000e331 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x3e>
c000e325:	83 c0 04             	add    eax,0x4
c000e328:	39 d0                	cmp    eax,edx
c000e32a:	75 f1                	jne    c000e31d <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2a>
c000e32c:	83 c4 08             	add    esp,0x8
c000e32f:	5b                   	pop    ebx
c000e330:	c3                   	ret    
c000e331:	c7 80 40 74 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8bc0],0x0
c000e33b:	c7 80 40 64 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9bc0],0x0
c000e345:	eb de                	jmp    c000e325 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x32>
c000e347:	83 7c 24 10 0f       	cmp    DWORD PTR [esp+0x10],0xf
c000e34c:	7f 11                	jg     c000e35f <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x6c>
c000e34e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e352:	0f b6 80 40 5a 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffda5c0]
c000e359:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e35d:	eb b1                	jmp    c000e310 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000e35f:	83 ec 0c             	sub    esp,0xc
c000e362:	68 95 36 02 c0       	push   0xc0023695
c000e367:	e8 2f 47 00 00       	call   c0012a9b <Krnl::panic(char const*)>
c000e36c:	83 c4 10             	add    esp,0x10
c000e36f:	eb 9f                	jmp    c000e310 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>

c000e371 <setupINTS()>:
c000e371:	31 c0                	xor    eax,eax
c000e373:	c7 80 40 74 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8bc0],0x0
c000e37d:	c7 80 40 64 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9bc0],0x0
c000e387:	c7 80 44 74 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8bbc],0x0
c000e391:	c7 80 44 64 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9bbc],0x0
c000e39b:	c7 80 48 74 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8bb8],0x0
c000e3a5:	c7 80 48 64 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9bb8],0x0
c000e3af:	c7 80 4c 74 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8bb4],0x0
c000e3b9:	c7 80 4c 64 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9bb4],0x0
c000e3c3:	83 c0 10             	add    eax,0x10
c000e3c6:	3d 00 10 00 00       	cmp    eax,0x1000
c000e3cb:	75 a6                	jne    c000e373 <setupINTS()+0x2>
c000e3cd:	c3                   	ret    

c000e3ce <convertLegacyIRQNumber(int)>:
c000e3ce:	83 ec 0c             	sub    esp,0xc
c000e3d1:	8b 15 28 63 02 c0    	mov    edx,DWORD PTR ds:0xc0026328
c000e3d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3db:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c000e3e2:	74 0c                	je     c000e3f0 <convertLegacyIRQNumber(int)+0x22>
c000e3e4:	83 f8 0f             	cmp    eax,0xf
c000e3e7:	7f 0b                	jg     c000e3f4 <convertLegacyIRQNumber(int)+0x26>
c000e3e9:	0f b6 80 40 5a 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffda5c0]
c000e3f0:	83 c4 0c             	add    esp,0xc
c000e3f3:	c3                   	ret    
c000e3f4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e3f8:	83 ec 0c             	sub    esp,0xc
c000e3fb:	68 a4 36 02 c0       	push   0xc00236a4
c000e400:	e8 96 46 00 00       	call   c0012a9b <Krnl::panic(char const*)>
c000e405:	83 c4 10             	add    esp,0x10
c000e408:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e40c:	83 c4 0c             	add    esp,0xc
c000e40f:	c3                   	ret    

c000e410 <startGUI(void*)>:
c000e410:	55                   	push   ebp
c000e411:	89 e5                	mov    ebp,esp
c000e413:	53                   	push   ebx
c000e414:	83 ec 04             	sub    esp,0x4
c000e417:	a1 08 98 02 c0       	mov    eax,ds:0xc0029808
c000e41c:	48                   	dec    eax
c000e41d:	a3 08 98 02 c0       	mov    ds:0xc0029808,eax
c000e422:	a1 08 98 02 c0       	mov    eax,ds:0xc0029808
c000e427:	85 c0                	test   eax,eax
c000e429:	75 01                	jne    c000e42c <startGUI(void*)+0x1c>
c000e42b:	fb                   	sti    
c000e42c:	8b 1d 28 63 02 c0    	mov    ebx,DWORD PTR ds:0xc0026328
c000e432:	83 ec 08             	sub    esp,0x8
c000e435:	6a 01                	push   0x1
c000e437:	68 01 37 02 c0       	push   0xc0023701
c000e43c:	e8 c1 71 00 00       	call   c0015602 <Thr::loadDLL(char const*, bool)>
c000e441:	83 c4 10             	add    esp,0x10
c000e444:	83 ec 08             	sub    esp,0x8
c000e447:	53                   	push   ebx
c000e448:	50                   	push   eax
c000e449:	e8 e5 73 00 00       	call   c0015833 <Thr::executeDLL(unsigned long, void*)>
c000e44e:	83 c4 10             	add    esp,0x10
c000e451:	8b 1d 28 63 02 c0    	mov    ebx,DWORD PTR ds:0xc0026328
c000e457:	83 ec 08             	sub    esp,0x8
c000e45a:	6a 01                	push   0x1
c000e45c:	68 1b 37 02 c0       	push   0xc002371b
c000e461:	e8 9c 71 00 00       	call   c0015602 <Thr::loadDLL(char const*, bool)>
c000e466:	83 c4 10             	add    esp,0x10
c000e469:	83 ec 08             	sub    esp,0x8
c000e46c:	53                   	push   ebx
c000e46d:	50                   	push   eax
c000e46e:	e8 c0 73 00 00       	call   c0015833 <Thr::executeDLL(unsigned long, void*)>
c000e473:	83 c4 10             	add    esp,0x10
c000e476:	90                   	nop
c000e477:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000e47a:	c9                   	leave  
c000e47b:	c3                   	ret    

c000e47c <startGUIVESA(void*)>:
c000e47c:	55                   	push   ebp
c000e47d:	89 e5                	mov    ebp,esp
c000e47f:	53                   	push   ebx
c000e480:	83 ec 04             	sub    esp,0x4
c000e483:	a1 08 98 02 c0       	mov    eax,ds:0xc0029808
c000e488:	48                   	dec    eax
c000e489:	a3 08 98 02 c0       	mov    ds:0xc0029808,eax
c000e48e:	a1 08 98 02 c0       	mov    eax,ds:0xc0029808
c000e493:	85 c0                	test   eax,eax
c000e495:	75 01                	jne    c000e498 <startGUIVESA(void*)+0x1c>
c000e497:	fb                   	sti    
c000e498:	8b 1d 28 63 02 c0    	mov    ebx,DWORD PTR ds:0xc0026328
c000e49e:	83 ec 08             	sub    esp,0x8
c000e4a1:	6a 01                	push   0x1
c000e4a3:	68 39 37 02 c0       	push   0xc0023739
c000e4a8:	e8 55 71 00 00       	call   c0015602 <Thr::loadDLL(char const*, bool)>
c000e4ad:	83 c4 10             	add    esp,0x10
c000e4b0:	83 ec 08             	sub    esp,0x8
c000e4b3:	53                   	push   ebx
c000e4b4:	50                   	push   eax
c000e4b5:	e8 79 73 00 00       	call   c0015833 <Thr::executeDLL(unsigned long, void*)>
c000e4ba:	83 c4 10             	add    esp,0x10
c000e4bd:	8b 1d 28 63 02 c0    	mov    ebx,DWORD PTR ds:0xc0026328
c000e4c3:	83 ec 08             	sub    esp,0x8
c000e4c6:	6a 01                	push   0x1
c000e4c8:	68 1b 37 02 c0       	push   0xc002371b
c000e4cd:	e8 30 71 00 00       	call   c0015602 <Thr::loadDLL(char const*, bool)>
c000e4d2:	83 c4 10             	add    esp,0x10
c000e4d5:	83 ec 08             	sub    esp,0x8
c000e4d8:	53                   	push   ebx
c000e4d9:	50                   	push   eax
c000e4da:	e8 54 73 00 00       	call   c0015833 <Thr::executeDLL(unsigned long, void*)>
c000e4df:	83 c4 10             	add    esp,0x10
c000e4e2:	90                   	nop
c000e4e3:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000e4e6:	c9                   	leave  
c000e4e7:	c3                   	ret    

c000e4e8 <sendKeyToTerminal(unsigned char)>:
c000e4e8:	55                   	push   ebp
c000e4e9:	89 e5                	mov    ebp,esp
c000e4eb:	83 ec 28             	sub    esp,0x28
c000e4ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e4f1:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000e4f4:	a1 74 63 02 c0       	mov    eax,ds:0xc0026374
c000e4f9:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c000e4fd:	83 ec 08             	sub    esp,0x8
c000e500:	52                   	push   edx
c000e501:	50                   	push   eax
c000e502:	e8 11 c7 ff ff       	call   c000ac18 <VgaText::receiveKey(unsigned char)>
c000e507:	83 c4 10             	add    esp,0x10
c000e50a:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c000e50e:	0f 85 8f 00 00 00    	jne    c000e5a3 <sendKeyToTerminal(unsigned char)+0xbb>
c000e514:	fa                   	cli    
c000e515:	a1 08 98 02 c0       	mov    eax,ds:0xc0029808
c000e51a:	40                   	inc    eax
c000e51b:	a3 08 98 02 c0       	mov    ds:0xc0029808,eax
c000e520:	a1 04 98 02 c0       	mov    eax,ds:0xc0029804
c000e525:	40                   	inc    eax
c000e526:	a3 04 98 02 c0       	mov    ds:0xc0029804,eax
c000e52b:	a1 40 84 02 c0       	mov    eax,ds:0xc0028440
c000e530:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000e533:	c7 05 40 84 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028440,0x0
c000e53d:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000e541:	74 1f                	je     c000e562 <sendKeyToTerminal(unsigned char)+0x7a>
c000e543:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000e546:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000e549:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000e54c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000e54f:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000e552:	83 ec 0c             	sub    esp,0xc
c000e555:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000e558:	e8 3f 7f 00 00       	call   c001649c <unblockTask(ThreadControlBlock*)>
c000e55d:	83 c4 10             	add    esp,0x10
c000e560:	eb db                	jmp    c000e53d <sendKeyToTerminal(unsigned char)+0x55>
c000e562:	a1 04 98 02 c0       	mov    eax,ds:0xc0029804
c000e567:	48                   	dec    eax
c000e568:	a3 04 98 02 c0       	mov    ds:0xc0029804,eax
c000e56d:	a1 04 98 02 c0       	mov    eax,ds:0xc0029804
c000e572:	85 c0                	test   eax,eax
c000e574:	75 18                	jne    c000e58e <sendKeyToTerminal(unsigned char)+0xa6>
c000e576:	a1 00 98 02 c0       	mov    eax,ds:0xc0029800
c000e57b:	85 c0                	test   eax,eax
c000e57d:	74 0f                	je     c000e58e <sendKeyToTerminal(unsigned char)+0xa6>
c000e57f:	c7 05 00 98 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029800,0x0
c000e589:	e8 52 7a 00 00       	call   c0015fe0 <schedule()>
c000e58e:	a1 08 98 02 c0       	mov    eax,ds:0xc0029808
c000e593:	48                   	dec    eax
c000e594:	a3 08 98 02 c0       	mov    ds:0xc0029808,eax
c000e599:	a1 08 98 02 c0       	mov    eax,ds:0xc0029808
c000e59e:	85 c0                	test   eax,eax
c000e5a0:	75 01                	jne    c000e5a3 <sendKeyToTerminal(unsigned char)+0xbb>
c000e5a2:	fb                   	sti    
c000e5a3:	90                   	nop
c000e5a4:	c9                   	leave  
c000e5a5:	c3                   	ret    

c000e5a6 <sendKeyboardToken(KeyboardToken)>:
c000e5a6:	55                   	push   ebp
c000e5a7:	89 e5                	mov    ebp,esp
c000e5a9:	83 ec 18             	sub    esp,0x18
c000e5ac:	e8 c3 47 00 00       	call   c0012d74 <Krnl::userIOReceived()>
c000e5b1:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000e5b4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e5b7:	0f b7 c0             	movzx  eax,ax
c000e5ba:	83 f2 01             	xor    edx,0x1
c000e5bd:	88 90 60 84 02 c0    	mov    BYTE PTR [eax-0x3ffd7ba0],dl
c000e5c3:	a1 48 84 02 c0       	mov    eax,ds:0xc0028448
c000e5c8:	85 c0                	test   eax,eax
c000e5ca:	74 24                	je     c000e5f0 <sendKeyboardToken(KeyboardToken)+0x4a>
c000e5cc:	8b 0d 48 84 02 c0    	mov    ecx,DWORD PTR ds:0xc0028448
c000e5d2:	83 ec 04             	sub    esp,0x4
c000e5d5:	68 60 84 02 c0       	push   0xc0028460
c000e5da:	83 ec 08             	sub    esp,0x8
c000e5dd:	89 e2                	mov    edx,esp
c000e5df:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e5e2:	89 02                	mov    DWORD PTR [edx],eax
c000e5e4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000e5e7:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000e5eb:	ff d1                	call   ecx
c000e5ed:	83 c4 10             	add    esp,0x10
c000e5f0:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000e5f4:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c000e5f7:	a0 68 88 02 c0       	mov    al,ds:0xc0028868
c000e5fc:	38 c2                	cmp    dl,al
c000e5fe:	74 1c                	je     c000e61c <sendKeyboardToken(KeyboardToken)+0x76>
c000e600:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c000e603:	a2 68 88 02 c0       	mov    ds:0xc0028868,al
c000e608:	a0 68 88 02 c0       	mov    al,ds:0xc0028868
c000e60d:	0f b6 c0             	movzx  eax,al
c000e610:	83 ec 0c             	sub    esp,0xc
c000e613:	50                   	push   eax
c000e614:	e8 e5 bc ff ff       	call   c000a2fe <setTerminalScrollLock(bool)>
c000e619:	83 c4 10             	add    esp,0x10
c000e61c:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000e61f:	84 c0                	test   al,al
c000e621:	0f 84 ae 00 00 00    	je     c000e6d5 <sendKeyboardToken(KeyboardToken)+0x12f>
c000e627:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e62a:	66 3d 10 03          	cmp    ax,0x310
c000e62e:	75 06                	jne    c000e636 <sendKeyboardToken(KeyboardToken)+0x90>
c000e630:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000e636:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e639:	66 3d 11 03          	cmp    ax,0x311
c000e63d:	75 06                	jne    c000e645 <sendKeyboardToken(KeyboardToken)+0x9f>
c000e63f:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000e645:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e648:	66 3d 12 03          	cmp    ax,0x312
c000e64c:	75 06                	jne    c000e654 <sendKeyboardToken(KeyboardToken)+0xae>
c000e64e:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000e654:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e657:	66 3d 13 03          	cmp    ax,0x313
c000e65b:	75 06                	jne    c000e663 <sendKeyboardToken(KeyboardToken)+0xbd>
c000e65d:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000e663:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e666:	66 3d 14 03          	cmp    ax,0x314
c000e66a:	75 06                	jne    c000e672 <sendKeyboardToken(KeyboardToken)+0xcc>
c000e66c:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000e672:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e675:	66 3d 15 03          	cmp    ax,0x315
c000e679:	75 06                	jne    c000e681 <sendKeyboardToken(KeyboardToken)+0xdb>
c000e67b:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000e681:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e684:	66 3d 16 03          	cmp    ax,0x316
c000e688:	75 06                	jne    c000e690 <sendKeyboardToken(KeyboardToken)+0xea>
c000e68a:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000e690:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e693:	66 3d 17 03          	cmp    ax,0x317
c000e697:	75 06                	jne    c000e69f <sendKeyboardToken(KeyboardToken)+0xf9>
c000e699:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000e69f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e6a2:	66 3d 18 03          	cmp    ax,0x318
c000e6a6:	75 06                	jne    c000e6ae <sendKeyboardToken(KeyboardToken)+0x108>
c000e6a8:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000e6ae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e6b1:	66 3d 19 03          	cmp    ax,0x319
c000e6b5:	75 06                	jne    c000e6bd <sendKeyboardToken(KeyboardToken)+0x117>
c000e6b7:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000e6bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e6c0:	66 3d 1a 03          	cmp    ax,0x31a
c000e6c4:	0f 85 c9 00 00 00    	jne    c000e793 <sendKeyboardToken(KeyboardToken)+0x1ed>
c000e6ca:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000e6d0:	e9 be 00 00 00       	jmp    c000e793 <sendKeyboardToken(KeyboardToken)+0x1ed>
c000e6d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e6d8:	66 3d 10 03          	cmp    ax,0x310
c000e6dc:	75 0a                	jne    c000e6e8 <sendKeyboardToken(KeyboardToken)+0x142>
c000e6de:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000e6e4:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000e6e8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e6eb:	66 3d 11 03          	cmp    ax,0x311
c000e6ef:	75 0a                	jne    c000e6fb <sendKeyboardToken(KeyboardToken)+0x155>
c000e6f1:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000e6f7:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000e6fb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e6fe:	66 3d 12 03          	cmp    ax,0x312
c000e702:	75 0a                	jne    c000e70e <sendKeyboardToken(KeyboardToken)+0x168>
c000e704:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000e70a:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000e70e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e711:	66 3d 13 03          	cmp    ax,0x313
c000e715:	75 0a                	jne    c000e721 <sendKeyboardToken(KeyboardToken)+0x17b>
c000e717:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000e71d:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000e721:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e724:	66 3d 14 03          	cmp    ax,0x314
c000e728:	75 0a                	jne    c000e734 <sendKeyboardToken(KeyboardToken)+0x18e>
c000e72a:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000e730:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000e734:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e737:	66 3d 15 03          	cmp    ax,0x315
c000e73b:	75 0a                	jne    c000e747 <sendKeyboardToken(KeyboardToken)+0x1a1>
c000e73d:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000e743:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000e747:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e74a:	66 3d 16 03          	cmp    ax,0x316
c000e74e:	75 0a                	jne    c000e75a <sendKeyboardToken(KeyboardToken)+0x1b4>
c000e750:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000e756:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000e75a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e75d:	66 3d 17 03          	cmp    ax,0x317
c000e761:	75 0a                	jne    c000e76d <sendKeyboardToken(KeyboardToken)+0x1c7>
c000e763:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000e769:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000e76d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e770:	66 3d 18 03          	cmp    ax,0x318
c000e774:	75 0a                	jne    c000e780 <sendKeyboardToken(KeyboardToken)+0x1da>
c000e776:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000e77c:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000e780:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e783:	66 3d 19 03          	cmp    ax,0x319
c000e787:	75 0a                	jne    c000e793 <sendKeyboardToken(KeyboardToken)+0x1ed>
c000e789:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000e78f:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000e793:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e796:	66 3d 00 02          	cmp    ax,0x200
c000e79a:	75 2c                	jne    c000e7c8 <sendKeyboardToken(KeyboardToken)+0x222>
c000e79c:	a0 60 88 02 c0       	mov    al,ds:0xc0028860
c000e7a1:	83 f0 01             	xor    eax,0x1
c000e7a4:	84 c0                	test   al,al
c000e7a6:	74 20                	je     c000e7c8 <sendKeyboardToken(KeyboardToken)+0x222>
c000e7a8:	a1 30 98 02 c0       	mov    eax,ds:0xc0029830
c000e7ad:	6a 01                	push   0x1
c000e7af:	6a 00                	push   0x0
c000e7b1:	68 10 e4 00 c0       	push   0xc000e410
c000e7b6:	50                   	push   eax
c000e7b7:	e8 08 76 00 00       	call   c0015dc4 <Process::createThread(void (*)(void*), void*, int)>
c000e7bc:	83 c4 10             	add    esp,0x10
c000e7bf:	c6 05 60 88 02 c0 01 	mov    BYTE PTR ds:0xc0028860,0x1
c000e7c6:	eb 33                	jmp    c000e7fb <sendKeyboardToken(KeyboardToken)+0x255>
c000e7c8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e7cb:	66 3d 01 02          	cmp    ax,0x201
c000e7cf:	75 2a                	jne    c000e7fb <sendKeyboardToken(KeyboardToken)+0x255>
c000e7d1:	a0 60 88 02 c0       	mov    al,ds:0xc0028860
c000e7d6:	83 f0 01             	xor    eax,0x1
c000e7d9:	84 c0                	test   al,al
c000e7db:	74 1e                	je     c000e7fb <sendKeyboardToken(KeyboardToken)+0x255>
c000e7dd:	a1 30 98 02 c0       	mov    eax,ds:0xc0029830
c000e7e2:	6a 01                	push   0x1
c000e7e4:	6a 00                	push   0x0
c000e7e6:	68 7c e4 00 c0       	push   0xc000e47c
c000e7eb:	50                   	push   eax
c000e7ec:	e8 d3 75 00 00       	call   c0015dc4 <Process::createThread(void (*)(void*), void*, int)>
c000e7f1:	83 c4 10             	add    esp,0x10
c000e7f4:	c6 05 60 88 02 c0 01 	mov    BYTE PTR ds:0xc0028860,0x1
c000e7fb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e7fe:	66 3d 1d 03          	cmp    ax,0x31d
c000e802:	75 06                	jne    c000e80a <sendKeyboardToken(KeyboardToken)+0x264>
c000e804:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000e80a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e80d:	66 3d 1c 03          	cmp    ax,0x31c
c000e811:	75 06                	jne    c000e819 <sendKeyboardToken(KeyboardToken)+0x273>
c000e813:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000e819:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e81c:	66 3d 1b 03          	cmp    ax,0x31b
c000e820:	75 06                	jne    c000e828 <sendKeyboardToken(KeyboardToken)+0x282>
c000e822:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000e828:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e82b:	66 3d 1e 03          	cmp    ax,0x31e
c000e82f:	75 06                	jne    c000e837 <sendKeyboardToken(KeyboardToken)+0x291>
c000e831:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000e837:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e83a:	66 3d 1f 03          	cmp    ax,0x31f
c000e83e:	75 06                	jne    c000e846 <sendKeyboardToken(KeyboardToken)+0x2a0>
c000e840:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000e846:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e849:	66 3d 1a 03          	cmp    ax,0x31a
c000e84d:	75 06                	jne    c000e855 <sendKeyboardToken(KeyboardToken)+0x2af>
c000e84f:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000e855:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000e859:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000e85c:	83 f0 01             	xor    eax,0x1
c000e85f:	84 c0                	test   al,al
c000e861:	74 77                	je     c000e8da <sendKeyboardToken(KeyboardToken)+0x334>
c000e863:	a0 61 85 02 c0       	mov    al,ds:0xc0028561
c000e868:	84 c0                	test   al,al
c000e86a:	74 41                	je     c000e8ad <sendKeyboardToken(KeyboardToken)+0x307>
c000e86c:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000e870:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c000e874:	74 2b                	je     c000e8a1 <sendKeyboardToken(KeyboardToken)+0x2fb>
c000e876:	8b 15 64 88 02 c0    	mov    edx,DWORD PTR ds:0xc0028864
c000e87c:	89 d0                	mov    eax,edx
c000e87e:	c1 e0 02             	shl    eax,0x2
c000e881:	01 d0                	add    eax,edx
c000e883:	01 c0                	add    eax,eax
c000e885:	a3 64 88 02 c0       	mov    ds:0xc0028864,eax
c000e88a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e88d:	0f b7 c0             	movzx  eax,ax
c000e890:	8d 50 d0             	lea    edx,[eax-0x30]
c000e893:	a1 64 88 02 c0       	mov    eax,ds:0xc0028864
c000e898:	01 d0                	add    eax,edx
c000e89a:	a3 64 88 02 c0       	mov    ds:0xc0028864,eax
c000e89f:	eb 6d                	jmp    c000e90e <sendKeyboardToken(KeyboardToken)+0x368>
c000e8a1:	c7 05 64 88 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028864,0x0
c000e8ab:	eb 61                	jmp    c000e90e <sendKeyboardToken(KeyboardToken)+0x368>
c000e8ad:	a1 64 88 02 c0       	mov    eax,ds:0xc0028864
c000e8b2:	85 c0                	test   eax,eax
c000e8b4:	74 18                	je     c000e8ce <sendKeyboardToken(KeyboardToken)+0x328>
c000e8b6:	a1 64 88 02 c0       	mov    eax,ds:0xc0028864
c000e8bb:	0f b6 c0             	movzx  eax,al
c000e8be:	83 ec 0c             	sub    esp,0xc
c000e8c1:	50                   	push   eax
c000e8c2:	e8 21 fc ff ff       	call   c000e4e8 <sendKeyToTerminal(unsigned char)>
c000e8c7:	83 c4 10             	add    esp,0x10
c000e8ca:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000e8ce:	c7 05 64 88 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028864,0x0
c000e8d8:	eb 34                	jmp    c000e90e <sendKeyboardToken(KeyboardToken)+0x368>
c000e8da:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e8dd:	66 3d 01 01          	cmp    ax,0x101
c000e8e1:	75 2b                	jne    c000e90e <sendKeyboardToken(KeyboardToken)+0x368>
c000e8e3:	a1 64 88 02 c0       	mov    eax,ds:0xc0028864
c000e8e8:	85 c0                	test   eax,eax
c000e8ea:	74 18                	je     c000e904 <sendKeyboardToken(KeyboardToken)+0x35e>
c000e8ec:	a1 64 88 02 c0       	mov    eax,ds:0xc0028864
c000e8f1:	0f b6 c0             	movzx  eax,al
c000e8f4:	83 ec 0c             	sub    esp,0xc
c000e8f7:	50                   	push   eax
c000e8f8:	e8 eb fb ff ff       	call   c000e4e8 <sendKeyToTerminal(unsigned char)>
c000e8fd:	83 c4 10             	add    esp,0x10
c000e900:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000e904:	c7 05 64 88 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028864,0x0
c000e90e:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000e911:	83 f0 01             	xor    eax,0x1
c000e914:	84 c0                	test   al,al
c000e916:	74 4c                	je     c000e964 <sendKeyboardToken(KeyboardToken)+0x3be>
c000e918:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000e91b:	83 f0 01             	xor    eax,0x1
c000e91e:	84 c0                	test   al,al
c000e920:	74 42                	je     c000e964 <sendKeyboardToken(KeyboardToken)+0x3be>
c000e922:	a0 60 85 02 c0       	mov    al,ds:0xc0028560
c000e927:	83 f0 01             	xor    eax,0x1
c000e92a:	84 c0                	test   al,al
c000e92c:	74 36                	je     c000e964 <sendKeyboardToken(KeyboardToken)+0x3be>
c000e92e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e931:	66 83 f8 1f          	cmp    ax,0x1f
c000e935:	76 09                	jbe    c000e940 <sendKeyboardToken(KeyboardToken)+0x39a>
c000e937:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e93a:	66 83 f8 7e          	cmp    ax,0x7e
c000e93e:	76 12                	jbe    c000e952 <sendKeyboardToken(KeyboardToken)+0x3ac>
c000e940:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e943:	66 83 f8 0a          	cmp    ax,0xa
c000e947:	74 09                	je     c000e952 <sendKeyboardToken(KeyboardToken)+0x3ac>
c000e949:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e94c:	66 83 f8 08          	cmp    ax,0x8
c000e950:	75 12                	jne    c000e964 <sendKeyboardToken(KeyboardToken)+0x3be>
c000e952:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e955:	0f b6 c0             	movzx  eax,al
c000e958:	83 ec 0c             	sub    esp,0xc
c000e95b:	50                   	push   eax
c000e95c:	e8 87 fb ff ff       	call   c000e4e8 <sendKeyToTerminal(unsigned char)>
c000e961:	83 c4 10             	add    esp,0x10
c000e964:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000e967:	83 f0 01             	xor    eax,0x1
c000e96a:	84 c0                	test   al,al
c000e96c:	74 4f                	je     c000e9bd <sendKeyboardToken(KeyboardToken)+0x417>
c000e96e:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000e971:	83 f0 01             	xor    eax,0x1
c000e974:	84 c0                	test   al,al
c000e976:	74 45                	je     c000e9bd <sendKeyboardToken(KeyboardToken)+0x417>
c000e978:	a0 60 85 02 c0       	mov    al,ds:0xc0028560
c000e97d:	84 c0                	test   al,al
c000e97f:	74 3c                	je     c000e9bd <sendKeyboardToken(KeyboardToken)+0x417>
c000e981:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e984:	66 83 f8 3f          	cmp    ax,0x3f
c000e988:	76 33                	jbe    c000e9bd <sendKeyboardToken(KeyboardToken)+0x417>
c000e98a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e98d:	66 83 f8 7f          	cmp    ax,0x7f
c000e991:	77 2a                	ja     c000e9bd <sendKeyboardToken(KeyboardToken)+0x417>
c000e993:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e996:	88 c2                	mov    dl,al
c000e998:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e99b:	66 83 f8 5f          	cmp    ax,0x5f
c000e99f:	76 04                	jbe    c000e9a5 <sendKeyboardToken(KeyboardToken)+0x3ff>
c000e9a1:	b0 20                	mov    al,0x20
c000e9a3:	eb 02                	jmp    c000e9a7 <sendKeyboardToken(KeyboardToken)+0x401>
c000e9a5:	b0 00                	mov    al,0x0
c000e9a7:	29 c2                	sub    edx,eax
c000e9a9:	88 d0                	mov    al,dl
c000e9ab:	83 e8 40             	sub    eax,0x40
c000e9ae:	0f b6 c0             	movzx  eax,al
c000e9b1:	83 ec 0c             	sub    esp,0xc
c000e9b4:	50                   	push   eax
c000e9b5:	e8 2e fb ff ff       	call   c000e4e8 <sendKeyToTerminal(unsigned char)>
c000e9ba:	83 c4 10             	add    esp,0x10
c000e9bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e9c0:	66 3d 00 03          	cmp    ax,0x300
c000e9c4:	75 0f                	jne    c000e9d5 <sendKeyboardToken(KeyboardToken)+0x42f>
c000e9c6:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000e9c9:	83 f0 01             	xor    eax,0x1
c000e9cc:	84 c0                	test   al,al
c000e9ce:	74 05                	je     c000e9d5 <sendKeyboardToken(KeyboardToken)+0x42f>
c000e9d0:	e8 0e bc ff ff       	call   c000a5e3 <doTerminalCycle()>
c000e9d5:	90                   	nop
c000e9d6:	c9                   	leave  
c000e9d7:	c3                   	ret    

c000e9d8 <clearInternalKeybuffer(VgaText*)>:
c000e9d8:	55                   	push   ebp
c000e9d9:	89 e5                	mov    ebp,esp
c000e9db:	83 ec 08             	sub    esp,0x8
c000e9de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e9e1:	05 32 01 00 00       	add    eax,0x132
c000e9e6:	83 ec 0c             	sub    esp,0xc
c000e9e9:	50                   	push   eax
c000e9ea:	e8 d5 1a ff ff       	call   c00004c4 <strlen>
c000e9ef:	83 c4 10             	add    esp,0x10
c000e9f2:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000e9f5:	81 c2 32 01 00 00    	add    edx,0x132
c000e9fb:	83 ec 04             	sub    esp,0x4
c000e9fe:	50                   	push   eax
c000e9ff:	6a 00                	push   0x0
c000ea01:	52                   	push   edx
c000ea02:	e8 a1 1a ff ff       	call   c00004a8 <memset>
c000ea07:	83 c4 10             	add    esp,0x10
c000ea0a:	90                   	nop
c000ea0b:	c9                   	leave  
c000ea0c:	c3                   	ret    

c000ea0d <readKeyboard(VgaText*, char*, unsigned long)>:
c000ea0d:	55                   	push   ebp
c000ea0e:	89 e5                	mov    ebp,esp
c000ea10:	83 ec 18             	sub    esp,0x18
c000ea13:	a1 48 84 02 c0       	mov    eax,ds:0xc0028448
c000ea18:	85 c0                	test   eax,eax
c000ea1a:	74 2a                	je     c000ea46 <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c000ea1c:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000ea22:	8b 0d 48 84 02 c0    	mov    ecx,DWORD PTR ds:0xc0028448
c000ea28:	83 ec 04             	sub    esp,0x4
c000ea2b:	68 60 84 02 c0       	push   0xc0028460
c000ea30:	83 ec 08             	sub    esp,0x8
c000ea33:	89 e2                	mov    edx,esp
c000ea35:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c000ea38:	89 02                	mov    DWORD PTR [edx],eax
c000ea3a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000ea3d:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000ea41:	ff d1                	call   ecx
c000ea43:	83 c4 10             	add    esp,0x10
c000ea46:	fb                   	sti    
c000ea47:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000ea4e:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000ea52:	0f 84 a1 00 00 00    	je     c000eaf9 <readKeyboard(VgaText*, char*, unsigned long)+0xec>
c000ea58:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ea5b:	8a 80 32 01 00 00    	mov    al,BYTE PTR [eax+0x132]
c000ea61:	84 c0                	test   al,al
c000ea63:	75 28                	jne    c000ea8d <readKeyboard(VgaText*, char*, unsigned long)+0x80>
c000ea65:	fa                   	cli    
c000ea66:	a1 08 98 02 c0       	mov    eax,ds:0xc0029808
c000ea6b:	40                   	inc    eax
c000ea6c:	a3 08 98 02 c0       	mov    ds:0xc0029808,eax
c000ea71:	e8 6a 75 00 00       	call   c0015fe0 <schedule()>
c000ea76:	a1 08 98 02 c0       	mov    eax,ds:0xc0029808
c000ea7b:	48                   	dec    eax
c000ea7c:	a3 08 98 02 c0       	mov    ds:0xc0029808,eax
c000ea81:	a1 08 98 02 c0       	mov    eax,ds:0xc0029808
c000ea86:	85 c0                	test   eax,eax
c000ea88:	75 ce                	jne    c000ea58 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000ea8a:	fb                   	sti    
c000ea8b:	eb cb                	jmp    c000ea58 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000ea8d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000ea90:	8d 50 01             	lea    edx,[eax+0x1]
c000ea93:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000ea96:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000ea99:	8a 92 32 01 00 00    	mov    dl,BYTE PTR [edx+0x132]
c000ea9f:	88 10                	mov    BYTE PTR [eax],dl
c000eaa1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000eaa4:	8a 80 32 01 00 00    	mov    al,BYTE PTR [eax+0x132]
c000eaaa:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c000eaad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000eab0:	05 32 01 00 00       	add    eax,0x132
c000eab5:	83 ec 0c             	sub    esp,0xc
c000eab8:	50                   	push   eax
c000eab9:	e8 06 1a ff ff       	call   c00004c4 <strlen>
c000eabe:	83 c4 10             	add    esp,0x10
c000eac1:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000eac4:	81 c2 32 01 00 00    	add    edx,0x132
c000eaca:	8d 4a 01             	lea    ecx,[edx+0x1]
c000eacd:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000ead0:	81 c2 32 01 00 00    	add    edx,0x132
c000ead6:	83 ec 04             	sub    esp,0x4
c000ead9:	50                   	push   eax
c000eada:	51                   	push   ecx
c000eadb:	52                   	push   edx
c000eadc:	e8 ff 18 ff ff       	call   c00003e0 <memmove>
c000eae1:	83 c4 10             	add    esp,0x10
c000eae4:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c000eae7:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000eaea:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c000eaee:	0f 85 5a ff ff ff    	jne    c000ea4e <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c000eaf4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000eaf7:	eb 03                	jmp    c000eafc <readKeyboard(VgaText*, char*, unsigned long)+0xef>
c000eaf9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000eafc:	c9                   	leave  
c000eafd:	c3                   	ret    

c000eafe <Keyboard::Keyboard(char const*)>:
c000eafe:	83 ec 0c             	sub    esp,0xc
c000eb01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb05:	83 ec 08             	sub    esp,0x8
c000eb08:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000eb0c:	50                   	push   eax
c000eb0d:	e8 a0 f2 ff ff       	call   c000ddb2 <Device::Device(char const*)>
c000eb12:	83 c4 10             	add    esp,0x10
c000eb15:	ba 5c 37 02 c0       	mov    edx,0xc002375c
c000eb1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb1e:	89 10                	mov    DWORD PTR [eax],edx
c000eb20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb24:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c000eb2e:	c6 05 44 84 02 c0 01 	mov    BYTE PTR ds:0xc0028444,0x1
c000eb35:	90                   	nop
c000eb36:	83 c4 0c             	add    esp,0xc
c000eb39:	c3                   	ret    

c000eb3a <Keyboard::~Keyboard()>:
c000eb3a:	83 ec 0c             	sub    esp,0xc
c000eb3d:	ba 5c 37 02 c0       	mov    edx,0xc002375c
c000eb42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb46:	89 10                	mov    DWORD PTR [eax],edx
c000eb48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb4c:	83 ec 0c             	sub    esp,0xc
c000eb4f:	50                   	push   eax
c000eb50:	e8 5b ef ff ff       	call   c000dab0 <Device::~Device()>
c000eb55:	83 c4 10             	add    esp,0x10
c000eb58:	90                   	nop
c000eb59:	83 c4 0c             	add    esp,0xc
c000eb5c:	c3                   	ret    
c000eb5d:	90                   	nop

c000eb5e <Keyboard::~Keyboard()>:
c000eb5e:	83 ec 0c             	sub    esp,0xc
c000eb61:	83 ec 0c             	sub    esp,0xc
c000eb64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000eb68:	e8 cd ff ff ff       	call   c000eb3a <Keyboard::~Keyboard()>
c000eb6d:	83 c4 10             	add    esp,0x10
c000eb70:	83 ec 08             	sub    esp,0x8
c000eb73:	68 5c 01 00 00       	push   0x15c
c000eb78:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000eb7c:	e8 cf da ff ff       	call   c000c650 <operator delete(void*, unsigned long)>
c000eb81:	83 c4 10             	add    esp,0x10
c000eb84:	83 c4 0c             	add    esp,0xc
c000eb87:	c3                   	ret    

c000eb88 <LogicalDisk::close(int, int, void*)>:
c000eb88:	83 c8 ff             	or     eax,0xffffffff
c000eb8b:	c3                   	ret    

c000eb8c <LogicalDisk::~LogicalDisk()>:
c000eb8c:	83 ec 0c             	sub    esp,0xc
c000eb8f:	ba 2c 38 02 c0       	mov    edx,0xc002382c
c000eb94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb98:	89 10                	mov    DWORD PTR [eax],edx
c000eb9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb9e:	83 ec 0c             	sub    esp,0xc
c000eba1:	50                   	push   eax
c000eba2:	e8 09 ef ff ff       	call   c000dab0 <Device::~Device()>
c000eba7:	83 c4 10             	add    esp,0x10
c000ebaa:	90                   	nop
c000ebab:	83 c4 0c             	add    esp,0xc
c000ebae:	c3                   	ret    
c000ebaf:	90                   	nop

c000ebb0 <LogicalDisk::~LogicalDisk()>:
c000ebb0:	83 ec 0c             	sub    esp,0xc
c000ebb3:	83 ec 0c             	sub    esp,0xc
c000ebb6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ebba:	e8 cd ff ff ff       	call   c000eb8c <LogicalDisk::~LogicalDisk()>
c000ebbf:	83 c4 10             	add    esp,0x10
c000ebc2:	83 ec 08             	sub    esp,0x8
c000ebc5:	68 74 01 00 00       	push   0x174
c000ebca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ebce:	e8 7d da ff ff       	call   c000c650 <operator delete(void*, unsigned long)>
c000ebd3:	83 c4 10             	add    esp,0x10
c000ebd6:	83 c4 0c             	add    esp,0xc
c000ebd9:	c3                   	ret    

c000ebda <LogicalDisk::open(int, int, void*)>:
c000ebda:	83 ec 18             	sub    esp,0x18
c000ebdd:	68 88 37 02 c0       	push   0xc0023788
c000ebe2:	e8 b4 3e 00 00       	call   c0012a9b <Krnl::panic(char const*)>
c000ebe7:	83 c8 ff             	or     eax,0xffffffff
c000ebea:	83 c4 1c             	add    esp,0x1c
c000ebed:	c3                   	ret    

c000ebee <LogicalDisk::absoluteToRelative(unsigned long long)>:
c000ebee:	53                   	push   ebx
c000ebef:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000ebf3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ebf7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ebfb:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c000ec01:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c000ec07:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000ec0d:	77 10                	ja     c000ec1f <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c000ec0f:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c000ec15:	89 d3                	mov    ebx,edx
c000ec17:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c000ec1d:	72 05                	jb     c000ec24 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c000ec1f:	83 c8 ff             	or     eax,0xffffffff
c000ec22:	89 c2                	mov    edx,eax
c000ec24:	5b                   	pop    ebx
c000ec25:	c3                   	ret    

c000ec26 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c000ec26:	56                   	push   esi
c000ec27:	83 c8 ff             	or     eax,0xffffffff
c000ec2a:	53                   	push   ebx
c000ec2b:	89 c2                	mov    edx,eax
c000ec2d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000ec31:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000ec35:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ec39:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000ec3f:	77 27                	ja     c000ec68 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000ec41:	89 d8                	mov    eax,ebx
c000ec43:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c000ec49:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c000ec4f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ec54:	89 c2                	mov    edx,eax
c000ec56:	73 10                	jae    c000ec68 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000ec58:	89 c8                	mov    eax,ecx
c000ec5a:	89 da                	mov    edx,ebx
c000ec5c:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c000ec62:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c000ec68:	5b                   	pop    ebx
c000ec69:	5e                   	pop    esi
c000ec6a:	c3                   	ret    
c000ec6b:	90                   	nop

c000ec6c <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c000ec6c:	83 ec 1c             	sub    esp,0x1c
c000ec6f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ec73:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ec77:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ec7b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ec7f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ec83:	89 04 24             	mov    DWORD PTR [esp],eax
c000ec86:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ec8a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ec8e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ec92:	83 ec 08             	sub    esp,0x8
c000ec95:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ec99:	50                   	push   eax
c000ec9a:	e8 13 f1 ff ff       	call   c000ddb2 <Device::Device(char const*)>
c000ec9f:	83 c4 10             	add    esp,0x10
c000eca2:	ba 2c 38 02 c0       	mov    edx,0xc002382c
c000eca7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ecab:	89 10                	mov    DWORD PTR [eax],edx
c000ecad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ecb1:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000ecb8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ecbc:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000ecc3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ecc7:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c000ecd1:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000ecd5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ecd9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ecdd:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c000ece3:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c000ece9:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000eced:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ecf0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000ecf4:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c000ecfa:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c000ed00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ed04:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ed08:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c000ed0e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ed12:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c000ed1c:	90                   	nop
c000ed1d:	83 c4 1c             	add    esp,0x1c
c000ed20:	c3                   	ret    
c000ed21:	90                   	nop

c000ed22 <LogicalDisk::assignDriveLetter()>:
c000ed22:	55                   	push   ebp
c000ed23:	57                   	push   edi
c000ed24:	56                   	push   esi
c000ed25:	53                   	push   ebx
c000ed26:	83 ec 14             	sub    esp,0x14
c000ed29:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ed2d:	8b 3d 80 88 02 c0    	mov    edi,DWORD PTR ds:0xc0028880
c000ed33:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c000ed39:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000ed3d:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c000ed43:	8b 3d 84 88 02 c0    	mov    edi,DWORD PTR ds:0xc0028884
c000ed49:	3c 01                	cmp    al,0x1
c000ed4b:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000ed4f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000ed53:	19 c0                	sbb    eax,eax
c000ed55:	83 e0 02             	and    eax,0x2
c000ed58:	83 c0 41             	add    eax,0x41
c000ed5b:	0f be e8             	movsx  ebp,al
c000ed5e:	3c 43                	cmp    al,0x43
c000ed60:	75 10                	jne    c000ed72 <LogicalDisk::assignDriveLetter()+0x50>
c000ed62:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c000ed69:	75 5d                	jne    c000edc8 <LogicalDisk::assignDriveLetter()+0xa6>
c000ed6b:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c000ed70:	75 56                	jne    c000edc8 <LogicalDisk::assignDriveLetter()+0xa6>
c000ed72:	8d 75 bf             	lea    esi,[ebp-0x41]
c000ed75:	ba 01 00 00 00       	mov    edx,0x1
c000ed7a:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000ed7e:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c000ed82:	d3 e2                	shl    edx,cl
c000ed84:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ed88:	89 d7                	mov    edi,edx
c000ed8a:	89 d6                	mov    esi,edx
c000ed8c:	c1 ff 1f             	sar    edi,0x1f
c000ed8f:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c000ed93:	21 f9                	and    ecx,edi
c000ed95:	09 d1                	or     ecx,edx
c000ed97:	75 2f                	jne    c000edc8 <LogicalDisk::assignDriveLetter()+0xa6>
c000ed99:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c000ed9d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000eda1:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c000eda7:	09 f2                	or     edx,esi
c000eda9:	89 15 80 88 02 c0    	mov    DWORD PTR ds:0xc0028880,edx
c000edaf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000edb3:	09 fa                	or     edx,edi
c000edb5:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000edb9:	89 15 84 88 02 c0    	mov    DWORD PTR ds:0xc0028884,edx
c000edbf:	89 1c bd a0 88 02 c0 	mov    DWORD PTR [edi*4-0x3ffd7760],ebx
c000edc6:	eb 08                	jmp    c000edd0 <LogicalDisk::assignDriveLetter()+0xae>
c000edc8:	45                   	inc    ebp
c000edc9:	40                   	inc    eax
c000edca:	3c 5b                	cmp    al,0x5b
c000edcc:	75 90                	jne    c000ed5e <LogicalDisk::assignDriveLetter()+0x3c>
c000edce:	31 c0                	xor    eax,eax
c000edd0:	83 c4 14             	add    esp,0x14
c000edd3:	5b                   	pop    ebx
c000edd4:	5e                   	pop    esi
c000edd5:	5f                   	pop    edi
c000edd6:	5d                   	pop    ebp
c000edd7:	c3                   	ret    

c000edd8 <LogicalDisk::mount()>:
c000edd8:	56                   	push   esi
c000edd9:	53                   	push   ebx
c000edda:	83 ec 1c             	sub    esp,0x1c
c000eddd:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c000ede1:	8b 1d 18 64 02 c0    	mov    ebx,DWORD PTR ds:0xc0026418
c000ede7:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000edee:	50                   	push   eax
c000edef:	68 ac 37 02 c0       	push   0xc00237ac
c000edf4:	e8 38 d9 ff ff       	call   c000c731 <Dbg::kprintf(char const*, ...)>
c000edf9:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c000ee03:	83 c4 10             	add    esp,0x10
c000ee06:	85 db                	test   ebx,ebx
c000ee08:	74 4e                	je     c000ee58 <LogicalDisk::mount()+0x80>
c000ee0a:	83 ec 0c             	sub    esp,0xc
c000ee0d:	68 cd 37 02 c0       	push   0xc00237cd
c000ee12:	e8 1a d9 ff ff       	call   c000c731 <Dbg::kprintf(char const*, ...)>
c000ee17:	83 c4 0c             	add    esp,0xc
c000ee1a:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000ee21:	8b 13                	mov    edx,DWORD PTR [ebx]
c000ee23:	83 e8 41             	sub    eax,0x41
c000ee26:	50                   	push   eax
c000ee27:	56                   	push   esi
c000ee28:	53                   	push   ebx
c000ee29:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000ee2c:	83 c4 10             	add    esp,0x10
c000ee2f:	84 c0                	test   al,al
c000ee31:	74 20                	je     c000ee53 <LogicalDisk::mount()+0x7b>
c000ee33:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000ee37:	83 ec 0c             	sub    esp,0xc
c000ee3a:	68 e9 37 02 c0       	push   0xc00237e9
c000ee3f:	e8 ed d8 ff ff       	call   c000c731 <Dbg::kprintf(char const*, ...)>
c000ee44:	83 c4 10             	add    esp,0x10
c000ee47:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c000ee4d:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000ee51:	eb 07                	jmp    c000ee5a <LogicalDisk::mount()+0x82>
c000ee53:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000ee56:	eb ae                	jmp    c000ee06 <LogicalDisk::mount()+0x2e>
c000ee58:	31 c0                	xor    eax,eax
c000ee5a:	83 c4 14             	add    esp,0x14
c000ee5d:	5b                   	pop    ebx
c000ee5e:	5e                   	pop    esi
c000ee5f:	c3                   	ret    

c000ee60 <LogicalDisk::unmount()>:
c000ee60:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee64:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c000ee6e:	c3                   	ret    
c000ee6f:	90                   	nop

c000ee70 <LogicalDisk::eject()>:
c000ee70:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee74:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000ee7a:	8b 10                	mov    edx,DWORD PTR [eax]
c000ee7c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ee80:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000ee83:	90                   	nop

c000ee84 <LogicalDisk::unassignDriveLetter()>:
c000ee84:	57                   	push   edi
c000ee85:	56                   	push   esi
c000ee86:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ee8a:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c000ee91:	84 c9                	test   cl,cl
c000ee93:	75 0f                	jne    c000eea4 <LogicalDisk::unassignDriveLetter()+0x20>
c000ee95:	c7 44 24 0c 02 38 02 c0 	mov    DWORD PTR [esp+0xc],0xc0023802
c000ee9d:	5e                   	pop    esi
c000ee9e:	5f                   	pop    edi
c000ee9f:	e9 f7 3b 00 00       	jmp    c0012a9b <Krnl::panic(char const*)>
c000eea4:	83 e9 41             	sub    ecx,0x41
c000eea7:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000eeae:	b8 01 00 00 00       	mov    eax,0x1
c000eeb3:	c7 04 8d a0 88 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd7760],0x0
c000eebe:	d3 e0                	shl    eax,cl
c000eec0:	89 c7                	mov    edi,eax
c000eec2:	f7 d0                	not    eax
c000eec4:	c1 ff 1f             	sar    edi,0x1f
c000eec7:	21 05 80 88 02 c0    	and    DWORD PTR ds:0xc0028880,eax
c000eecd:	89 fe                	mov    esi,edi
c000eecf:	f7 d6                	not    esi
c000eed1:	21 35 84 88 02 c0    	and    DWORD PTR ds:0xc0028884,esi
c000eed7:	5e                   	pop    esi
c000eed8:	5f                   	pop    edi
c000eed9:	c3                   	ret    

c000eeda <LogicalDisk::read(unsigned long long, int, void*)>:
c000eeda:	57                   	push   edi
c000eedb:	56                   	push   esi
c000eedc:	53                   	push   ebx
c000eedd:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000eee1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000eee5:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000eee9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000eeed:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000eef3:	77 41                	ja     c000ef36 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000eef5:	99                   	cdq    
c000eef6:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000eefc:	01 c8                	add    eax,ecx
c000eefe:	11 da                	adc    edx,ebx
c000ef00:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000ef06:	19 d7                	sbb    edi,edx
c000ef08:	72 33                	jb     c000ef3d <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000ef0a:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000ef10:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000ef16:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000ef1a:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000ef1e:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000ef24:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000ef2a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ef2e:	5b                   	pop    ebx
c000ef2f:	5e                   	pop    esi
c000ef30:	5f                   	pop    edi
c000ef31:	e9 34 0a 00 00       	jmp    c000f96a <VCache::read(unsigned long long, int, void*)>
c000ef36:	b8 05 00 00 00       	mov    eax,0x5
c000ef3b:	eb 05                	jmp    c000ef42 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000ef3d:	b8 07 00 00 00       	mov    eax,0x7
c000ef42:	5b                   	pop    ebx
c000ef43:	5e                   	pop    esi
c000ef44:	5f                   	pop    edi
c000ef45:	c3                   	ret    

c000ef46 <LogicalDisk::write(unsigned long long, int, void*)>:
c000ef46:	57                   	push   edi
c000ef47:	56                   	push   esi
c000ef48:	53                   	push   ebx
c000ef49:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000ef4d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ef51:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ef55:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ef59:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000ef5f:	77 41                	ja     c000efa2 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000ef61:	99                   	cdq    
c000ef62:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000ef68:	01 c8                	add    eax,ecx
c000ef6a:	11 da                	adc    edx,ebx
c000ef6c:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000ef72:	19 d7                	sbb    edi,edx
c000ef74:	72 33                	jb     c000efa9 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000ef76:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000ef7c:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000ef82:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000ef86:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000ef8a:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000ef90:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000ef96:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ef9a:	5b                   	pop    ebx
c000ef9b:	5e                   	pop    esi
c000ef9c:	5f                   	pop    edi
c000ef9d:	e9 ce 08 00 00       	jmp    c000f870 <VCache::write(unsigned long long, int, void*)>
c000efa2:	b8 05 00 00 00       	mov    eax,0x5
c000efa7:	eb 05                	jmp    c000efae <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000efa9:	b8 07 00 00 00       	mov    eax,0x7
c000efae:	5b                   	pop    ebx
c000efaf:	5e                   	pop    esi
c000efb0:	5f                   	pop    edi
c000efb1:	c3                   	ret    
c000efb2:	66 90                	xchg   ax,ax

c000efb4 <Mouse::Mouse(char const*)>:
c000efb4:	83 ec 0c             	sub    esp,0xc
c000efb7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000efbb:	83 ec 08             	sub    esp,0x8
c000efbe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000efc2:	50                   	push   eax
c000efc3:	e8 ea ed ff ff       	call   c000ddb2 <Device::Device(char const*)>
c000efc8:	83 c4 10             	add    esp,0x10
c000efcb:	ba 58 38 02 c0       	mov    edx,0xc0023858
c000efd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000efd4:	89 10                	mov    DWORD PTR [eax],edx
c000efd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000efda:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000efe4:	90                   	nop
c000efe5:	83 c4 0c             	add    esp,0xc
c000efe8:	c3                   	ret    
c000efe9:	90                   	nop
c000efea:	66 90                	xchg   ax,ax

c000efec <Mouse::~Mouse()>:
c000efec:	83 ec 0c             	sub    esp,0xc
c000efef:	ba 58 38 02 c0       	mov    edx,0xc0023858
c000eff4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eff8:	89 10                	mov    DWORD PTR [eax],edx
c000effa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000effe:	83 ec 0c             	sub    esp,0xc
c000f001:	50                   	push   eax
c000f002:	e8 a9 ea ff ff       	call   c000dab0 <Device::~Device()>
c000f007:	83 c4 10             	add    esp,0x10
c000f00a:	90                   	nop
c000f00b:	83 c4 0c             	add    esp,0xc
c000f00e:	c3                   	ret    
c000f00f:	90                   	nop

c000f010 <Mouse::~Mouse()>:
c000f010:	83 ec 0c             	sub    esp,0xc
c000f013:	83 ec 0c             	sub    esp,0xc
c000f016:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f01a:	e8 cd ff ff ff       	call   c000efec <Mouse::~Mouse()>
c000f01f:	83 c4 10             	add    esp,0x10
c000f022:	83 ec 08             	sub    esp,0x8
c000f025:	68 58 01 00 00       	push   0x158
c000f02a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f02e:	e8 1d d6 ff ff       	call   c000c650 <operator delete(void*, unsigned long)>
c000f033:	83 c4 10             	add    esp,0x10
c000f036:	83 c4 0c             	add    esp,0xc
c000f039:	c3                   	ret    

c000f03a <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000f03a:	55                   	push   ebp
c000f03b:	57                   	push   edi
c000f03c:	56                   	push   esi
c000f03d:	53                   	push   ebx
c000f03e:	81 ec 28 01 00 00    	sub    esp,0x128
c000f044:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c000f04b:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c000f052:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c000f059:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c000f060:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000f064:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000f068:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000f06f:	e8 3a ee ff ff       	call   c000deae <Device::getName()>
c000f074:	5a                   	pop    edx
c000f075:	59                   	pop    ecx
c000f076:	50                   	push   eax
c000f077:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000f07b:	55                   	push   ebp
c000f07c:	e8 e3 14 ff ff       	call   c0000564 <strcpy>
c000f081:	5b                   	pop    ebx
c000f082:	58                   	pop    eax
c000f083:	68 7c 38 02 c0       	push   0xc002387c
c000f088:	55                   	push   ebp
c000f089:	e8 16 16 ff ff       	call   c00006a4 <strcat>
c000f08e:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c000f095:	e8 fd a6 ff ff       	call   c0009797 <malloc>
c000f09a:	83 c4 0c             	add    esp,0xc
c000f09d:	89 c3                	mov    ebx,eax
c000f09f:	57                   	push   edi
c000f0a0:	56                   	push   esi
c000f0a1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f0a5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f0a9:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000f0b0:	55                   	push   ebp
c000f0b1:	50                   	push   eax
c000f0b2:	e8 b5 fb ff ff       	call   c000ec6c <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000f0b7:	83 c4 14             	add    esp,0x14
c000f0ba:	53                   	push   ebx
c000f0bb:	e8 62 fc ff ff       	call   c000ed22 <LogicalDisk::assignDriveLetter()>
c000f0c0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f0c3:	e8 10 fd ff ff       	call   c000edd8 <LogicalDisk::mount()>
c000f0c8:	58                   	pop    eax
c000f0c9:	5a                   	pop    edx
c000f0ca:	53                   	push   ebx
c000f0cb:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000f0d2:	e8 d7 ea ff ff       	call   c000dbae <Device::addChild(Device*)>
c000f0d7:	81 c4 2c 01 00 00    	add    esp,0x12c
c000f0dd:	5b                   	pop    ebx
c000f0de:	5e                   	pop    esi
c000f0df:	5f                   	pop    edi
c000f0e0:	5d                   	pop    ebp
c000f0e1:	c3                   	ret    

c000f0e2 <createPartitionsForDisk(PhysicalDisk*)>:
c000f0e2:	55                   	push   ebp
c000f0e3:	57                   	push   edi
c000f0e4:	56                   	push   esi
c000f0e5:	53                   	push   ebx
c000f0e6:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000f0ec:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000f0f3:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000f0f9:	3d 00 02 00 00       	cmp    eax,0x200
c000f0fe:	74 27                	je     c000f127 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c000f100:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c000f106:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c000f10c:	83 ec 10             	sub    esp,0x10
c000f10f:	0f a4 f7 0a          	shld   edi,esi,0xa
c000f113:	99                   	cdq    
c000f114:	c1 e6 0a             	shl    esi,0xa
c000f117:	52                   	push   edx
c000f118:	89 fd                	mov    ebp,edi
c000f11a:	50                   	push   eax
c000f11b:	55                   	push   ebp
c000f11c:	56                   	push   esi
c000f11d:	e8 7e 23 01 00       	call   c00214a0 <__udivdi3>
c000f122:	e9 b1 00 00 00       	jmp    c000f1d8 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c000f127:	83 ec 0c             	sub    esp,0xc
c000f12a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f12c:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c000f130:	56                   	push   esi
c000f131:	6a 01                	push   0x1
c000f133:	6a 00                	push   0x0
c000f135:	6a 00                	push   0x0
c000f137:	53                   	push   ebx
c000f138:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000f13b:	83 c4 20             	add    esp,0x20
c000f13e:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000f146:	75 0a                	jne    c000f152 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c000f148:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000f150:	74 2c                	je     c000f17e <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c000f152:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000f158:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000f15e:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000f164:	83 ec 10             	sub    esp,0x10
c000f167:	0f a4 c2 0a          	shld   edx,eax,0xa
c000f16b:	89 f7                	mov    edi,esi
c000f16d:	c1 e0 0a             	shl    eax,0xa
c000f170:	c1 ff 1f             	sar    edi,0x1f
c000f173:	57                   	push   edi
c000f174:	56                   	push   esi
c000f175:	52                   	push   edx
c000f176:	50                   	push   eax
c000f177:	e8 24 23 01 00       	call   c00214a0 <__udivdi3>
c000f17c:	eb 5a                	jmp    c000f1d8 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c000f17e:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c000f185:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c000f18c:	83 e1 7f             	and    ecx,0x7f
c000f18f:	83 e0 7f             	and    eax,0x7f
c000f192:	01 c1                	add    ecx,eax
c000f194:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c000f19b:	83 e0 7f             	and    eax,0x7f
c000f19e:	01 c1                	add    ecx,eax
c000f1a0:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000f1a7:	83 e0 7f             	and    eax,0x7f
c000f1aa:	00 c1                	add    cl,al
c000f1ac:	74 41                	je     c000f1ef <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c000f1ae:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000f1b4:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000f1ba:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000f1c0:	83 ec 10             	sub    esp,0x10
c000f1c3:	0f a4 c2 0a          	shld   edx,eax,0xa
c000f1c7:	89 f7                	mov    edi,esi
c000f1c9:	c1 e0 0a             	shl    eax,0xa
c000f1cc:	c1 ff 1f             	sar    edi,0x1f
c000f1cf:	57                   	push   edi
c000f1d0:	56                   	push   esi
c000f1d1:	52                   	push   edx
c000f1d2:	50                   	push   eax
c000f1d3:	e8 c8 22 01 00       	call   c00214a0 <__udivdi3>
c000f1d8:	83 c4 14             	add    esp,0x14
c000f1db:	52                   	push   edx
c000f1dc:	50                   	push   eax
c000f1dd:	6a 00                	push   0x0
c000f1df:	6a 00                	push   0x0
c000f1e1:	53                   	push   ebx
c000f1e2:	e8 53 fe ff ff       	call   c000f03a <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000f1e7:	83 c4 20             	add    esp,0x20
c000f1ea:	e9 79 01 00 00       	jmp    c000f368 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c000f1ef:	89 f0                	mov    eax,esi
c000f1f1:	31 f6                	xor    esi,esi
c000f1f3:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000f1fa:	75 02                	jne    c000f1fe <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c000f1fc:	89 f1                	mov    ecx,esi
c000f1fe:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c000f205:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c000f20c:	c1 e2 08             	shl    edx,0x8
c000f20f:	c1 e7 10             	shl    edi,0x10
c000f212:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c000f21a:	09 fa                	or     edx,edi
c000f21c:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c000f224:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c000f22b:	83 c0 10             	add    eax,0x10
c000f22e:	09 fa                	or     edx,edi
c000f230:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c000f237:	c1 e7 18             	shl    edi,0x18
c000f23a:	09 fa                	or     edx,edi
c000f23c:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c000f243:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c000f247:	c1 e7 10             	shl    edi,0x10
c000f24a:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c000f251:	c1 e2 08             	shl    edx,0x8
c000f254:	09 fa                	or     edx,edi
c000f256:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c000f25d:	09 fa                	or     edx,edi
c000f25f:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c000f266:	c1 e7 18             	shl    edi,0x18
c000f269:	09 fa                	or     edx,edi
c000f26b:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c000f26f:	46                   	inc    esi
c000f270:	83 fe 04             	cmp    esi,0x4
c000f273:	0f 85 7a ff ff ff    	jne    c000f1f3 <createPartitionsForDisk(PhysicalDisk*)+0x111>
c000f279:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f27d:	83 f0 01             	xor    eax,0x1
c000f280:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000f284:	75 57                	jne    c000f2dd <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000f286:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f28a:	83 f0 01             	xor    eax,0x1
c000f28d:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000f291:	75 4a                	jne    c000f2dd <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000f293:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c000f297:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000f29f:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000f2a7:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000f2ad:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000f2b3:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000f2b9:	0f a4 c2 0a          	shld   edx,eax,0xa
c000f2bd:	89 f7                	mov    edi,esi
c000f2bf:	c1 e0 0a             	shl    eax,0xa
c000f2c2:	c1 ff 1f             	sar    edi,0x1f
c000f2c5:	57                   	push   edi
c000f2c6:	56                   	push   esi
c000f2c7:	52                   	push   edx
c000f2c8:	50                   	push   eax
c000f2c9:	e8 d2 21 01 00       	call   c00214a0 <__udivdi3>
c000f2ce:	83 c4 10             	add    esp,0x10
c000f2d1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f2d5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000f2d9:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000f2dd:	84 c9                	test   cl,cl
c000f2df:	74 53                	je     c000f334 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c000f2e1:	0f b6 c9             	movzx  ecx,cl
c000f2e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f2e8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000f2ec:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000f2f0:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000f2f4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f2f8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f2fc:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c000f300:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c000f304:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000f308:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000f30c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f310:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f314:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c000f318:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c000f31c:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c000f320:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c000f324:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f328:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000f32c:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c000f330:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c000f334:	31 ed                	xor    ebp,ebp
c000f336:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000f33a:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000f33e:	89 f8                	mov    eax,edi
c000f340:	09 f0                	or     eax,esi
c000f342:	74 1e                	je     c000f362 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c000f344:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000f348:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000f34c:	89 d1                	mov    ecx,edx
c000f34e:	09 c1                	or     ecx,eax
c000f350:	74 10                	je     c000f362 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c000f352:	83 ec 0c             	sub    esp,0xc
c000f355:	57                   	push   edi
c000f356:	56                   	push   esi
c000f357:	52                   	push   edx
c000f358:	50                   	push   eax
c000f359:	53                   	push   ebx
c000f35a:	e8 db fc ff ff       	call   c000f03a <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000f35f:	83 c4 20             	add    esp,0x20
c000f362:	45                   	inc    ebp
c000f363:	83 fd 04             	cmp    ebp,0x4
c000f366:	75 ce                	jne    c000f336 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c000f368:	81 c4 5c 02 00 00    	add    esp,0x25c
c000f36e:	5b                   	pop    ebx
c000f36f:	5e                   	pop    esi
c000f370:	5f                   	pop    edi
c000f371:	5d                   	pop    ebp
c000f372:	c3                   	ret    
c000f373:	90                   	nop

c000f374 <Serial::Serial(char const*)>:
c000f374:	83 ec 0c             	sub    esp,0xc
c000f377:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f37b:	83 ec 08             	sub    esp,0x8
c000f37e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f382:	50                   	push   eax
c000f383:	e8 2a ea ff ff       	call   c000ddb2 <Device::Device(char const*)>
c000f388:	83 c4 10             	add    esp,0x10
c000f38b:	ba 90 38 02 c0       	mov    edx,0xc0023890
c000f390:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f394:	89 10                	mov    DWORD PTR [eax],edx
c000f396:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f39a:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000f3a4:	90                   	nop
c000f3a5:	83 c4 0c             	add    esp,0xc
c000f3a8:	c3                   	ret    
c000f3a9:	90                   	nop
c000f3aa:	66 90                	xchg   ax,ax

c000f3ac <Serial::~Serial()>:
c000f3ac:	83 ec 0c             	sub    esp,0xc
c000f3af:	ba 90 38 02 c0       	mov    edx,0xc0023890
c000f3b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f3b8:	89 10                	mov    DWORD PTR [eax],edx
c000f3ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f3be:	83 ec 0c             	sub    esp,0xc
c000f3c1:	50                   	push   eax
c000f3c2:	e8 e9 e6 ff ff       	call   c000dab0 <Device::~Device()>
c000f3c7:	83 c4 10             	add    esp,0x10
c000f3ca:	90                   	nop
c000f3cb:	83 c4 0c             	add    esp,0xc
c000f3ce:	c3                   	ret    
c000f3cf:	90                   	nop

c000f3d0 <Serial::~Serial()>:
c000f3d0:	83 ec 0c             	sub    esp,0xc
c000f3d3:	83 ec 0c             	sub    esp,0xc
c000f3d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f3da:	e8 cd ff ff ff       	call   c000f3ac <Serial::~Serial()>
c000f3df:	83 c4 10             	add    esp,0x10
c000f3e2:	83 ec 08             	sub    esp,0x8
c000f3e5:	68 58 01 00 00       	push   0x158
c000f3ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f3ee:	e8 5d d2 ff ff       	call   c000c650 <operator delete(void*, unsigned long)>
c000f3f3:	83 c4 10             	add    esp,0x10
c000f3f6:	83 c4 0c             	add    esp,0xc
c000f3f9:	c3                   	ret    
c000f3fa:	66 90                	xchg   ax,ax

c000f3fc <Timer::Timer(char const*)>:
c000f3fc:	83 ec 0c             	sub    esp,0xc
c000f3ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f403:	83 ec 08             	sub    esp,0x8
c000f406:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f40a:	50                   	push   eax
c000f40b:	e8 a2 e9 ff ff       	call   c000ddb2 <Device::Device(char const*)>
c000f410:	83 c4 10             	add    esp,0x10
c000f413:	ba d4 38 02 c0       	mov    edx,0xc00238d4
c000f418:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f41c:	89 10                	mov    DWORD PTR [eax],edx
c000f41e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f422:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c000f42c:	90                   	nop
c000f42d:	83 c4 0c             	add    esp,0xc
c000f430:	c3                   	ret    
c000f431:	90                   	nop
c000f432:	66 90                	xchg   ax,ax

c000f434 <Timer::~Timer()>:
c000f434:	83 ec 0c             	sub    esp,0xc
c000f437:	ba d4 38 02 c0       	mov    edx,0xc00238d4
c000f43c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f440:	89 10                	mov    DWORD PTR [eax],edx
c000f442:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f446:	83 ec 0c             	sub    esp,0xc
c000f449:	50                   	push   eax
c000f44a:	e8 61 e6 ff ff       	call   c000dab0 <Device::~Device()>
c000f44f:	83 c4 10             	add    esp,0x10
c000f452:	90                   	nop
c000f453:	83 c4 0c             	add    esp,0xc
c000f456:	c3                   	ret    
c000f457:	90                   	nop

c000f458 <Timer::~Timer()>:
c000f458:	83 ec 0c             	sub    esp,0xc
c000f45b:	83 ec 0c             	sub    esp,0xc
c000f45e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f462:	e8 cd ff ff ff       	call   c000f434 <Timer::~Timer()>
c000f467:	83 c4 10             	add    esp,0x10
c000f46a:	83 ec 08             	sub    esp,0x8
c000f46d:	68 5c 01 00 00       	push   0x15c
c000f472:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f476:	e8 d5 d1 ff ff       	call   c000c650 <operator delete(void*, unsigned long)>
c000f47b:	83 c4 10             	add    esp,0x10
c000f47e:	83 c4 0c             	add    esp,0xc
c000f481:	c3                   	ret    

c000f482 <Timer::read()>:
c000f482:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f486:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000f48c:	c3                   	ret    

c000f48d <setupTimer(int)>:
c000f48d:	53                   	push   ebx
c000f48e:	83 ec 14             	sub    esp,0x14
c000f491:	68 5c 01 00 00       	push   0x15c
c000f496:	e8 fc a2 ff ff       	call   c0009797 <malloc>
c000f49b:	89 04 24             	mov    DWORD PTR [esp],eax
c000f49e:	89 c3                	mov    ebx,eax
c000f4a0:	e8 6f 19 01 00       	call   c0020e14 <PIT::PIT()>
c000f4a5:	58                   	pop    eax
c000f4a6:	5a                   	pop    edx
c000f4a7:	53                   	push   ebx
c000f4a8:	ff 35 28 63 02 c0    	push   DWORD PTR ds:0xc0026328
c000f4ae:	e8 fb e6 ff ff       	call   c000dbae <Device::addChild(Device*)>
c000f4b3:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f4b5:	6a 00                	push   0x0
c000f4b7:	6a 00                	push   0x0
c000f4b9:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f4bd:	53                   	push   ebx
c000f4be:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000f4c1:	89 d8                	mov    eax,ebx
c000f4c3:	83 c4 28             	add    esp,0x28
c000f4c6:	5b                   	pop    ebx
c000f4c7:	c3                   	ret    

c000f4c8 <timerHandler(unsigned int)>:
c000f4c8:	56                   	push   esi
c000f4c9:	53                   	push   ebx
c000f4ca:	51                   	push   ecx
c000f4cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f4cf:	01 05 0c 89 02 c0    	add    DWORD PTR ds:0xc002890c,eax
c000f4d5:	80 3d 2d 63 02 c0 00 	cmp    BYTE PTR ds:0xc002632d,0x0
c000f4dc:	0f 84 4a 01 00 00    	je     c000f62c <timerHandler(unsigned int)+0x164>
c000f4e2:	fa                   	cli    
c000f4e3:	ff 05 08 98 02 c0    	inc    DWORD PTR ds:0xc0029808
c000f4e9:	83 ec 0c             	sub    esp,0xc
c000f4ec:	ff 05 04 98 02 c0    	inc    DWORD PTR ds:0xc0029804
c000f4f2:	68 18 98 02 c0       	push   0xc0029818
c000f4f7:	e8 74 25 01 00       	call   c0021a70 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000f4fc:	83 c4 10             	add    esp,0x10
c000f4ff:	84 c0                	test   al,al
c000f501:	0f 85 a1 00 00 00    	jne    c000f5a8 <timerHandler(unsigned int)+0xe0>
c000f507:	83 ec 0c             	sub    esp,0xc
c000f50a:	68 18 98 02 c0       	push   0xc0029818
c000f50f:	e8 78 25 01 00       	call   c0021a8c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000f514:	83 c4 10             	add    esp,0x10
c000f517:	89 c6                	mov    esi,eax
c000f519:	8d 76 00             	lea    esi,[esi+0x0]
c000f51c:	83 ec 0c             	sub    esp,0xc
c000f51f:	68 18 98 02 c0       	push   0xc0029818
c000f524:	e8 63 25 01 00       	call   c0021a8c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000f529:	c7 04 24 18 98 02 c0 	mov    DWORD PTR [esp],0xc0029818
c000f530:	89 c3                	mov    ebx,eax
c000f532:	e8 5d 25 01 00       	call   c0021a94 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000f537:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000f53a:	83 c4 10             	add    esp,0x10
c000f53d:	3b 05 0c 89 02 c0    	cmp    eax,DWORD PTR ds:0xc002890c
c000f543:	77 23                	ja     c000f568 <timerHandler(unsigned int)+0xa0>
c000f545:	83 ec 0c             	sub    esp,0xc
c000f548:	53                   	push   ebx
c000f549:	e8 4e 6f 00 00       	call   c001649c <unblockTask(ThreadControlBlock*)>
c000f54e:	83 c4 10             	add    esp,0x10
c000f551:	39 de                	cmp    esi,ebx
c000f553:	75 27                	jne    c000f57c <timerHandler(unsigned int)+0xb4>
c000f555:	83 ec 0c             	sub    esp,0xc
c000f558:	68 18 98 02 c0       	push   0xc0029818
c000f55d:	e8 2a 25 01 00       	call   c0021a8c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000f562:	89 c6                	mov    esi,eax
c000f564:	eb 12                	jmp    c000f578 <timerHandler(unsigned int)+0xb0>
c000f566:	66 90                	xchg   ax,ax
c000f568:	52                   	push   edx
c000f569:	52                   	push   edx
c000f56a:	53                   	push   ebx
c000f56b:	68 18 98 02 c0       	push   0xc0029818
c000f570:	e8 d7 25 01 00       	call   c0021b4c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000f575:	8d 76 00             	lea    esi,[esi+0x0]
c000f578:	83 c4 10             	add    esp,0x10
c000f57b:	90                   	nop
c000f57c:	83 ec 0c             	sub    esp,0xc
c000f57f:	68 18 98 02 c0       	push   0xc0029818
c000f584:	e8 e7 24 01 00       	call   c0021a70 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000f589:	83 c4 10             	add    esp,0x10
c000f58c:	84 c0                	test   al,al
c000f58e:	75 18                	jne    c000f5a8 <timerHandler(unsigned int)+0xe0>
c000f590:	83 ec 0c             	sub    esp,0xc
c000f593:	68 18 98 02 c0       	push   0xc0029818
c000f598:	e8 ef 24 01 00       	call   c0021a8c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000f59d:	83 c4 10             	add    esp,0x10
c000f5a0:	39 f0                	cmp    eax,esi
c000f5a2:	0f 85 74 ff ff ff    	jne    c000f51c <timerHandler(unsigned int)+0x54>
c000f5a8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f5ad:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c000f5b1:	74 41                	je     c000f5f4 <timerHandler(unsigned int)+0x12c>
c000f5b3:	80 3d 2c 63 02 c0 00 	cmp    BYTE PTR ds:0xc002632c,0x0
c000f5ba:	74 38                	je     c000f5f4 <timerHandler(unsigned int)+0x12c>
c000f5bc:	fa                   	cli    
c000f5bd:	ff 05 08 98 02 c0    	inc    DWORD PTR ds:0xc0029808
c000f5c3:	a1 0c 89 02 c0       	mov    eax,ds:0xc002890c
c000f5c8:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000f5ce:	29 42 34             	sub    DWORD PTR [edx+0x34],eax
c000f5d1:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000f5d7:	3b 42 34             	cmp    eax,DWORD PTR [edx+0x34]
c000f5da:	72 08                	jb     c000f5e4 <timerHandler(unsigned int)+0x11c>
c000f5dc:	e8 ff 69 00 00       	call   c0015fe0 <schedule()>
c000f5e1:	8d 76 00             	lea    esi,[esi+0x0]
c000f5e4:	a1 08 98 02 c0       	mov    eax,ds:0xc0029808
c000f5e9:	48                   	dec    eax
c000f5ea:	a3 08 98 02 c0       	mov    ds:0xc0029808,eax
c000f5ef:	75 03                	jne    c000f5f4 <timerHandler(unsigned int)+0x12c>
c000f5f1:	fb                   	sti    
c000f5f2:	66 90                	xchg   ax,ax
c000f5f4:	a1 04 98 02 c0       	mov    eax,ds:0xc0029804
c000f5f9:	48                   	dec    eax
c000f5fa:	a3 04 98 02 c0       	mov    ds:0xc0029804,eax
c000f5ff:	75 1b                	jne    c000f61c <timerHandler(unsigned int)+0x154>
c000f601:	83 3d 00 98 02 c0 00 	cmp    DWORD PTR ds:0xc0029800,0x0
c000f608:	74 12                	je     c000f61c <timerHandler(unsigned int)+0x154>
c000f60a:	c7 05 00 98 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029800,0x0
c000f614:	e8 c7 69 00 00       	call   c0015fe0 <schedule()>
c000f619:	8d 76 00             	lea    esi,[esi+0x0]
c000f61c:	a1 08 98 02 c0       	mov    eax,ds:0xc0029808
c000f621:	48                   	dec    eax
c000f622:	a3 08 98 02 c0       	mov    ds:0xc0029808,eax
c000f627:	75 03                	jne    c000f62c <timerHandler(unsigned int)+0x164>
c000f629:	fb                   	sti    
c000f62a:	66 90                	xchg   ax,ax
c000f62c:	58                   	pop    eax
c000f62d:	5b                   	pop    ebx
c000f62e:	5e                   	pop    esi
c000f62f:	c3                   	ret    

c000f630 <VCache::VCache(PhysicalDisk*)>:
c000f630:	53                   	push   ebx
c000f631:	83 ec 18             	sub    esp,0x18
c000f634:	ba 04 39 02 c0       	mov    edx,0xc0023904
c000f639:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f63d:	89 10                	mov    DWORD PTR [eax],edx
c000f63f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f643:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000f64a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f64e:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000f655:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f659:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000f660:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000f667:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f66b:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000f672:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000f679:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f67d:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000f684:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f688:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000f68c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f690:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000f697:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000f69e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f6a2:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000f6a6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f6aa:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000f6ae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f6b2:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000f6b6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f6ba:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000f6c1:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c000f6c9:	83 ec 0c             	sub    esp,0xc
c000f6cc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f6d0:	e8 c2 a0 ff ff       	call   c0009797 <malloc>
c000f6d5:	83 c4 10             	add    esp,0x10
c000f6d8:	89 c3                	mov    ebx,eax
c000f6da:	83 ec 0c             	sub    esp,0xc
c000f6dd:	53                   	push   ebx
c000f6de:	e8 cd 66 00 00       	call   c0015db0 <Mutex::Mutex()>
c000f6e3:	83 c4 10             	add    esp,0x10
c000f6e6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f6ea:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000f6ed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f6f1:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000f6f5:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000f6f8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f6fc:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000f703:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f707:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000f70d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f711:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000f714:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f718:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000f71e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000f724:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000f728:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000f72b:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000f72e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f732:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000f736:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f73a:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000f740:	05 00 01 00 00       	add    eax,0x100
c000f745:	c1 e0 04             	shl    eax,0x4
c000f748:	83 ec 0c             	sub    esp,0xc
c000f74b:	50                   	push   eax
c000f74c:	e8 46 a0 ff ff       	call   c0009797 <malloc>
c000f751:	83 c4 10             	add    esp,0x10
c000f754:	89 c2                	mov    edx,eax
c000f756:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f75a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f75d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f761:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000f768:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f76c:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000f770:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f774:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000f77a:	c1 e0 06             	shl    eax,0x6
c000f77d:	83 ec 0c             	sub    esp,0xc
c000f780:	50                   	push   eax
c000f781:	e8 11 a0 ff ff       	call   c0009797 <malloc>
c000f786:	83 c4 10             	add    esp,0x10
c000f789:	89 c2                	mov    edx,eax
c000f78b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f78f:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000f792:	90                   	nop
c000f793:	83 c4 18             	add    esp,0x18
c000f796:	5b                   	pop    ebx
c000f797:	c3                   	ret    

c000f798 <VCache::invalidateReadBuffer()>:
c000f798:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f79c:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000f7a2:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000f7a6:	c3                   	ret    
c000f7a7:	90                   	nop

c000f7a8 <VCache::writeWriteBuffer()>:
c000f7a8:	53                   	push   ebx
c000f7a9:	83 ec 08             	sub    esp,0x8
c000f7ac:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f7b0:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000f7b4:	74 1e                	je     c000f7d4 <VCache::writeWriteBuffer()+0x2c>
c000f7b6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000f7b9:	83 ec 0c             	sub    esp,0xc
c000f7bc:	8b 10                	mov    edx,DWORD PTR [eax]
c000f7be:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000f7c1:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000f7c4:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000f7c7:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000f7ca:	50                   	push   eax
c000f7cb:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000f7ce:	83 c4 20             	add    esp,0x20
c000f7d1:	8d 76 00             	lea    esi,[esi+0x0]
c000f7d4:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000f7db:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000f7e2:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000f7e6:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000f7ed:	83 c4 08             	add    esp,0x8
c000f7f0:	5b                   	pop    ebx
c000f7f1:	c3                   	ret    
c000f7f2:	66 90                	xchg   ax,ax

c000f7f4 <VCache::~VCache()>:
c000f7f4:	83 ec 0c             	sub    esp,0xc
c000f7f7:	ba 04 39 02 c0       	mov    edx,0xc0023904
c000f7fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f800:	89 10                	mov    DWORD PTR [eax],edx
c000f802:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f806:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c000f809:	84 c0                	test   al,al
c000f80b:	74 0f                	je     c000f81c <VCache::~VCache()+0x28>
c000f80d:	83 ec 0c             	sub    esp,0xc
c000f810:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f814:	e8 8f ff ff ff       	call   c000f7a8 <VCache::writeWriteBuffer()>
c000f819:	83 c4 10             	add    esp,0x10
c000f81c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f820:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000f823:	83 ec 0c             	sub    esp,0xc
c000f826:	50                   	push   eax
c000f827:	e8 7b 9f ff ff       	call   c00097a7 <free>
c000f82c:	83 c4 10             	add    esp,0x10
c000f82f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f833:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f836:	83 ec 0c             	sub    esp,0xc
c000f839:	50                   	push   eax
c000f83a:	e8 68 9f ff ff       	call   c00097a7 <free>
c000f83f:	83 c4 10             	add    esp,0x10
c000f842:	90                   	nop
c000f843:	83 c4 0c             	add    esp,0xc
c000f846:	c3                   	ret    
c000f847:	90                   	nop

c000f848 <VCache::~VCache()>:
c000f848:	83 ec 0c             	sub    esp,0xc
c000f84b:	83 ec 0c             	sub    esp,0xc
c000f84e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f852:	e8 9d ff ff ff       	call   c000f7f4 <VCache::~VCache()>
c000f857:	83 c4 10             	add    esp,0x10
c000f85a:	83 ec 08             	sub    esp,0x8
c000f85d:	6a 44                	push   0x44
c000f85f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f863:	e8 e8 cd ff ff       	call   c000c650 <operator delete(void*, unsigned long)>
c000f868:	83 c4 10             	add    esp,0x10
c000f86b:	83 c4 0c             	add    esp,0xc
c000f86e:	c3                   	ret    
c000f86f:	90                   	nop

c000f870 <VCache::write(unsigned long long, int, void*)>:
c000f870:	55                   	push   ebp
c000f871:	31 c0                	xor    eax,eax
c000f873:	57                   	push   edi
c000f874:	56                   	push   esi
c000f875:	53                   	push   ebx
c000f876:	83 ec 0c             	sub    esp,0xc
c000f879:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f87d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000f881:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000f885:	8d 76 00             	lea    esi,[esi+0x0]
c000f888:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c000f88c:	7d 1a                	jge    c000f8a8 <VCache::write(unsigned long long, int, void*)+0x38>
c000f88e:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000f891:	8b 8a 5c 01 00 00    	mov    ecx,DWORD PTR [edx+0x15c]
c000f897:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000f89b:	0f af c8             	imul   ecx,eax
c000f89e:	01 ca                	add    edx,ecx
c000f8a0:	8b 0a                	mov    ecx,DWORD PTR [edx]
c000f8a2:	40                   	inc    eax
c000f8a3:	eb e3                	jmp    c000f888 <VCache::write(unsigned long long, int, void*)+0x18>
c000f8a5:	8d 76 00             	lea    esi,[esi+0x0]
c000f8a8:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000f8ac:	74 0a                	je     c000f8b8 <VCache::write(unsigned long long, int, void*)+0x48>
c000f8ae:	53                   	push   ebx
c000f8af:	e8 e4 fe ff ff       	call   c000f798 <VCache::invalidateReadBuffer()>
c000f8b4:	58                   	pop    eax
c000f8b5:	8d 76 00             	lea    esi,[esi+0x0]
c000f8b8:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000f8bc:	74 5e                	je     c000f91c <VCache::write(unsigned long long, int, void*)+0xac>
c000f8be:	8b 6b 24             	mov    ebp,DWORD PTR [ebx+0x24]
c000f8c1:	89 e8                	mov    eax,ebp
c000f8c3:	99                   	cdq    
c000f8c4:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c000f8c7:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c000f8ca:	89 c1                	mov    ecx,eax
c000f8cc:	89 d0                	mov    eax,edx
c000f8ce:	31 f1                	xor    ecx,esi
c000f8d0:	31 f8                	xor    eax,edi
c000f8d2:	09 c1                	or     ecx,eax
c000f8d4:	75 3a                	jne    c000f910 <VCache::write(unsigned long long, int, void*)+0xa0>
c000f8d6:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c000f8db:	75 33                	jne    c000f910 <VCache::write(unsigned long long, int, void*)+0xa0>
c000f8dd:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000f8e0:	89 ef                	mov    edi,ebp
c000f8e2:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000f8e8:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000f8ec:	0f af f9             	imul   edi,ecx
c000f8ef:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c000f8f2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f8f4:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000f8f7:	40                   	inc    eax
c000f8f8:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000f8fb:	83 f8 40             	cmp    eax,0x40
c000f8fe:	75 60                	jne    c000f960 <VCache::write(unsigned long long, int, void*)+0xf0>
c000f900:	83 ec 0c             	sub    esp,0xc
c000f903:	53                   	push   ebx
c000f904:	e8 9f fe ff ff       	call   c000f7a8 <VCache::writeWriteBuffer()>
c000f909:	83 c4 10             	add    esp,0x10
c000f90c:	eb 52                	jmp    c000f960 <VCache::write(unsigned long long, int, void*)+0xf0>
c000f90e:	66 90                	xchg   ax,ax
c000f910:	83 ec 0c             	sub    esp,0xc
c000f913:	53                   	push   ebx
c000f914:	e8 8f fe ff ff       	call   c000f7a8 <VCache::writeWriteBuffer()>
c000f919:	83 c4 10             	add    esp,0x10
c000f91c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000f91f:	83 7c 24 2c 3f       	cmp    DWORD PTR [esp+0x2c],0x3f
c000f924:	7f 22                	jg     c000f948 <VCache::write(unsigned long long, int, void*)+0xd8>
c000f926:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c000f929:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c000f92c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000f930:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c000f934:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c000f937:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000f93a:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000f940:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000f944:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f946:	eb 18                	jmp    c000f960 <VCache::write(unsigned long long, int, void*)+0xf0>
c000f948:	83 ec 0c             	sub    esp,0xc
c000f94b:	8b 10                	mov    edx,DWORD PTR [eax]
c000f94d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000f951:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000f955:	57                   	push   edi
c000f956:	56                   	push   esi
c000f957:	50                   	push   eax
c000f958:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000f95b:	83 c4 20             	add    esp,0x20
c000f95e:	66 90                	xchg   ax,ax
c000f960:	83 c4 0c             	add    esp,0xc
c000f963:	31 c0                	xor    eax,eax
c000f965:	5b                   	pop    ebx
c000f966:	5e                   	pop    esi
c000f967:	5f                   	pop    edi
c000f968:	5d                   	pop    ebp
c000f969:	c3                   	ret    

c000f96a <VCache::read(unsigned long long, int, void*)>:
c000f96a:	55                   	push   ebp
c000f96b:	31 c0                	xor    eax,eax
c000f96d:	57                   	push   edi
c000f96e:	56                   	push   esi
c000f96f:	53                   	push   ebx
c000f970:	83 ec 1c             	sub    esp,0x1c
c000f973:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000f977:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000f97b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000f97f:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000f983:	90                   	nop
c000f984:	39 e8                	cmp    eax,ebp
c000f986:	7d 18                	jge    c000f9a0 <VCache::read(unsigned long long, int, void*)+0x36>
c000f988:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000f98b:	8b 8a 5c 01 00 00    	mov    ecx,DWORD PTR [edx+0x15c]
c000f991:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000f995:	0f af c8             	imul   ecx,eax
c000f998:	01 ca                	add    edx,ecx
c000f99a:	8b 0a                	mov    ecx,DWORD PTR [edx]
c000f99c:	40                   	inc    eax
c000f99d:	eb e5                	jmp    c000f984 <VCache::read(unsigned long long, int, void*)+0x1a>
c000f99f:	90                   	nop
c000f9a0:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000f9a4:	74 0e                	je     c000f9b4 <VCache::read(unsigned long long, int, void*)+0x4a>
c000f9a6:	83 ec 0c             	sub    esp,0xc
c000f9a9:	53                   	push   ebx
c000f9aa:	e8 f9 fd ff ff       	call   c000f7a8 <VCache::writeWriteBuffer()>
c000f9af:	83 c4 10             	add    esp,0x10
c000f9b2:	66 90                	xchg   ax,ax
c000f9b4:	83 fd 01             	cmp    ebp,0x1
c000f9b7:	0f 85 87 00 00 00    	jne    c000fa44 <VCache::read(unsigned long long, int, void*)+0xda>
c000f9bd:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000f9c0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000f9c4:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c000f9cb:	75 77                	jne    c000fa44 <VCache::read(unsigned long long, int, void*)+0xda>
c000f9cd:	8b 6b 40             	mov    ebp,DWORD PTR [ebx+0x40]
c000f9d0:	89 e9                	mov    ecx,ebp
c000f9d2:	f7 d9                	neg    ecx
c000f9d4:	89 c8                	mov    eax,ecx
c000f9d6:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000f9da:	c1 f8 1f             	sar    eax,0x1f
c000f9dd:	21 f1                	and    ecx,esi
c000f9df:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f9e3:	89 c8                	mov    eax,ecx
c000f9e5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f9e9:	21 f9                	and    ecx,edi
c000f9eb:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000f9ef:	89 ca                	mov    edx,ecx
c000f9f1:	74 0d                	je     c000fa00 <VCache::read(unsigned long long, int, void*)+0x96>
c000f9f3:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c000f9f6:	75 08                	jne    c000fa00 <VCache::read(unsigned long long, int, void*)+0x96>
c000f9f8:	39 43 30             	cmp    DWORD PTR [ebx+0x30],eax
c000f9fb:	74 27                	je     c000fa24 <VCache::read(unsigned long long, int, void*)+0xba>
c000f9fd:	8d 76 00             	lea    esi,[esi+0x0]
c000fa00:	83 ec 0c             	sub    esp,0xc
c000fa03:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c000fa07:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000fa0b:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000fa0e:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000fa11:	8b 09                	mov    ecx,DWORD PTR [ecx]
c000fa13:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000fa16:	55                   	push   ebp
c000fa17:	52                   	push   edx
c000fa18:	50                   	push   eax
c000fa19:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000fa1d:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c000fa20:	83 c4 20             	add    esp,0x20
c000fa23:	90                   	nop
c000fa24:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000fa27:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000fa2b:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000fa31:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000fa34:	48                   	dec    eax
c000fa35:	21 c6                	and    esi,eax
c000fa37:	0f af f1             	imul   esi,ecx
c000fa3a:	03 73 38             	add    esi,DWORD PTR [ebx+0x38]
c000fa3d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fa3f:	eb 23                	jmp    c000fa64 <VCache::read(unsigned long long, int, void*)+0xfa>
c000fa41:	8d 76 00             	lea    esi,[esi+0x0]
c000fa44:	83 ec 0c             	sub    esp,0xc
c000fa47:	53                   	push   ebx
c000fa48:	e8 4b fd ff ff       	call   c000f798 <VCache::invalidateReadBuffer()>
c000fa4d:	5a                   	pop    edx
c000fa4e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000fa51:	8b 10                	mov    edx,DWORD PTR [eax]
c000fa53:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000fa57:	55                   	push   ebp
c000fa58:	57                   	push   edi
c000fa59:	56                   	push   esi
c000fa5a:	50                   	push   eax
c000fa5b:	ff 52 28             	call   DWORD PTR [edx+0x28]
c000fa5e:	83 c4 20             	add    esp,0x20
c000fa61:	8d 76 00             	lea    esi,[esi+0x0]
c000fa64:	83 c4 1c             	add    esp,0x1c
c000fa67:	31 c0                	xor    eax,eax
c000fa69:	5b                   	pop    ebx
c000fa6a:	5e                   	pop    esi
c000fa6b:	5f                   	pop    edi
c000fa6c:	5d                   	pop    ebp
c000fa6d:	c3                   	ret    

c000fa6e <Video::putrect(int, int, int, int, unsigned int)>:
c000fa6e:	55                   	push   ebp
c000fa6f:	57                   	push   edi
c000fa70:	56                   	push   esi
c000fa71:	53                   	push   ebx
c000fa72:	83 ec 1c             	sub    esp,0x1c
c000fa75:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000fa79:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000fa7d:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000fa81:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000fa85:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000fa89:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fa8d:	01 df                	add    edi,ebx
c000fa8f:	39 fb                	cmp    ebx,edi
c000fa91:	7d 1f                	jge    c000fab2 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c000fa93:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000fa97:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000fa9b:	7d 12                	jge    c000faaf <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000fa9d:	8b 16                	mov    edx,DWORD PTR [esi]
c000fa9f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000faa3:	53                   	push   ebx
c000faa4:	55                   	push   ebp
c000faa5:	45                   	inc    ebp
c000faa6:	56                   	push   esi
c000faa7:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000faaa:	83 c4 10             	add    esp,0x10
c000faad:	eb e8                	jmp    c000fa97 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c000faaf:	43                   	inc    ebx
c000fab0:	eb dd                	jmp    c000fa8f <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000fab2:	83 c4 1c             	add    esp,0x1c
c000fab5:	5b                   	pop    ebx
c000fab6:	5e                   	pop    esi
c000fab7:	5f                   	pop    edi
c000fab8:	5d                   	pop    ebp
c000fab9:	c3                   	ret    

c000faba <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c000faba:	55                   	push   ebp
c000fabb:	57                   	push   edi
c000fabc:	31 ff                	xor    edi,edi
c000fabe:	56                   	push   esi
c000fabf:	53                   	push   ebx
c000fac0:	83 ec 1c             	sub    esp,0x1c
c000fac3:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c000fac7:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000facb:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000fad2:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c000fad7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000fadb:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000fadf:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000fae3:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000fae6:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000faea:	01 f9                	add    ecx,edi
c000faec:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c000faf0:	7d 2f                	jge    c000fb21 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c000faf2:	31 f6                	xor    esi,esi
c000faf4:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000faf8:	01 f2                	add    edx,esi
c000fafa:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000fafe:	7d 1a                	jge    c000fb1a <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c000fb00:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000fb03:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c000fb06:	46                   	inc    esi
c000fb07:	51                   	push   ecx
c000fb08:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000fb0c:	52                   	push   edx
c000fb0d:	55                   	push   ebp
c000fb0e:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000fb11:	83 c4 10             	add    esp,0x10
c000fb14:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fb18:	eb da                	jmp    c000faf4 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c000fb1a:	47                   	inc    edi
c000fb1b:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c000fb1f:	eb c5                	jmp    c000fae6 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c000fb21:	83 c4 1c             	add    esp,0x1c
c000fb24:	5b                   	pop    ebx
c000fb25:	5e                   	pop    esi
c000fb26:	5f                   	pop    edi
c000fb27:	5d                   	pop    ebp
c000fb28:	c3                   	ret    
c000fb29:	90                   	nop

c000fb2a <Video::blit(unsigned int*, int, int, int, int)>:
c000fb2a:	55                   	push   ebp
c000fb2b:	57                   	push   edi
c000fb2c:	56                   	push   esi
c000fb2d:	53                   	push   ebx
c000fb2e:	83 ec 1c             	sub    esp,0x1c
c000fb31:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fb35:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000fb39:	85 c0                	test   eax,eax
c000fb3b:	79 02                	jns    c000fb3f <Video::blit(unsigned int*, int, int, int, int)+0x15>
c000fb3d:	31 c0                	xor    eax,eax
c000fb3f:	c1 e0 02             	shl    eax,0x2
c000fb42:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000fb46:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fb4a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000fb4e:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000fb52:	39 d8                	cmp    eax,ebx
c000fb54:	7e 49                	jle    c000fb9f <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000fb56:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000fb5c:	7c 41                	jl     c000fb9f <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000fb5e:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000fb62:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000fb66:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000fb6a:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c000fb6e:	39 f9                	cmp    ecx,edi
c000fb70:	7e 22                	jle    c000fb94 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c000fb72:	83 c5 04             	add    ebp,0x4
c000fb75:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000fb7b:	7c 14                	jl     c000fb91 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c000fb7d:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000fb7f:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c000fb82:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000fb86:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000fb8a:	56                   	push   esi
c000fb8b:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000fb8e:	83 c4 10             	add    esp,0x10
c000fb91:	47                   	inc    edi
c000fb92:	eb d2                	jmp    c000fb66 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c000fb94:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fb98:	43                   	inc    ebx
c000fb99:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000fb9d:	eb ab                	jmp    c000fb4a <Video::blit(unsigned int*, int, int, int, int)+0x20>
c000fb9f:	83 c4 1c             	add    esp,0x1c
c000fba2:	5b                   	pop    ebx
c000fba3:	5e                   	pop    esi
c000fba4:	5f                   	pop    edi
c000fba5:	5d                   	pop    ebp
c000fba6:	c3                   	ret    
c000fba7:	90                   	nop

c000fba8 <Video::clearScreen(unsigned int)>:
c000fba8:	57                   	push   edi
c000fba9:	56                   	push   esi
c000fbaa:	53                   	push   ebx
c000fbab:	31 db                	xor    ebx,ebx
c000fbad:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000fbb1:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000fbb7:	7e 1f                	jle    c000fbd8 <Video::clearScreen(unsigned int)+0x30>
c000fbb9:	31 ff                	xor    edi,edi
c000fbbb:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000fbc1:	7e 12                	jle    c000fbd5 <Video::clearScreen(unsigned int)+0x2d>
c000fbc3:	8b 06                	mov    eax,DWORD PTR [esi]
c000fbc5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000fbc9:	53                   	push   ebx
c000fbca:	57                   	push   edi
c000fbcb:	47                   	inc    edi
c000fbcc:	56                   	push   esi
c000fbcd:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000fbd0:	83 c4 10             	add    esp,0x10
c000fbd3:	eb e6                	jmp    c000fbbb <Video::clearScreen(unsigned int)+0x13>
c000fbd5:	43                   	inc    ebx
c000fbd6:	eb d9                	jmp    c000fbb1 <Video::clearScreen(unsigned int)+0x9>
c000fbd8:	5b                   	pop    ebx
c000fbd9:	5e                   	pop    esi
c000fbda:	5f                   	pop    edi
c000fbdb:	c3                   	ret    

c000fbdc <Video::putpixel(int, int, unsigned int)>:
c000fbdc:	c7 44 24 04 0c 39 02 c0 	mov    DWORD PTR [esp+0x4],0xc002390c
c000fbe4:	e9 b2 2e 00 00       	jmp    c0012a9b <Krnl::panic(char const*)>
c000fbe9:	90                   	nop

c000fbea <Video::Video(char const*)>:
c000fbea:	83 ec 0c             	sub    esp,0xc
c000fbed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fbf1:	83 ec 08             	sub    esp,0x8
c000fbf4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fbf8:	50                   	push   eax
c000fbf9:	e8 b4 e1 ff ff       	call   c000ddb2 <Device::Device(char const*)>
c000fbfe:	83 c4 10             	add    esp,0x10
c000fc01:	ba 7c 39 02 c0       	mov    edx,0xc002397c
c000fc06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fc0a:	89 10                	mov    DWORD PTR [eax],edx
c000fc0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fc10:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c000fc1a:	90                   	nop
c000fc1b:	83 c4 0c             	add    esp,0xc
c000fc1e:	c3                   	ret    
c000fc1f:	90                   	nop

c000fc20 <Video::~Video()>:
c000fc20:	83 ec 0c             	sub    esp,0xc
c000fc23:	ba 7c 39 02 c0       	mov    edx,0xc002397c
c000fc28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fc2c:	89 10                	mov    DWORD PTR [eax],edx
c000fc2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fc32:	83 ec 0c             	sub    esp,0xc
c000fc35:	50                   	push   eax
c000fc36:	e8 75 de ff ff       	call   c000dab0 <Device::~Device()>
c000fc3b:	83 c4 10             	add    esp,0x10
c000fc3e:	90                   	nop
c000fc3f:	83 c4 0c             	add    esp,0xc
c000fc42:	c3                   	ret    
c000fc43:	90                   	nop

c000fc44 <Video::~Video()>:
c000fc44:	83 ec 0c             	sub    esp,0xc
c000fc47:	83 ec 0c             	sub    esp,0xc
c000fc4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fc4e:	e8 cd ff ff ff       	call   c000fc20 <Video::~Video()>
c000fc53:	83 c4 10             	add    esp,0x10
c000fc56:	83 ec 08             	sub    esp,0x8
c000fc59:	68 64 01 00 00       	push   0x164
c000fc5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fc62:	e8 e9 c9 ff ff       	call   c000c650 <operator delete(void*, unsigned long)>
c000fc67:	83 c4 10             	add    esp,0x10
c000fc6a:	83 c4 0c             	add    esp,0xc
c000fc6d:	c3                   	ret    

c000fc6e <Video::isMonochrome()>:
c000fc6e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fc72:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c000fc78:	c3                   	ret    
c000fc79:	90                   	nop

c000fc7a <Video::getWidth()>:
c000fc7a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fc7e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000fc84:	c3                   	ret    
c000fc85:	90                   	nop

c000fc86 <Video::getHeight()>:
c000fc86:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fc8a:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000fc90:	c3                   	ret    
c000fc91:	90                   	nop

c000fc92 <Video::drawCursor(int, int, unsigned char*, int)>:
c000fc92:	55                   	push   ebp
c000fc93:	57                   	push   edi
c000fc94:	56                   	push   esi
c000fc95:	53                   	push   ebx
c000fc96:	83 ec 2c             	sub    esp,0x2c
c000fc99:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000fc9d:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000fca1:	83 f8 01             	cmp    eax,0x1
c000fca4:	19 c9                	sbb    ecx,ecx
c000fca6:	31 db                	xor    ebx,ebx
c000fca8:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000fcac:	89 cd                	mov    ebp,ecx
c000fcae:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c000fcb6:	f7 d5                	not    ebp
c000fcb8:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c000fcbe:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000fcc2:	01 d8                	add    eax,ebx
c000fcc4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fcc8:	56                   	push   esi
c000fcc9:	e8 b8 ff ff ff       	call   c000fc86 <Video::getHeight()>
c000fcce:	59                   	pop    ecx
c000fccf:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000fcd3:	7e 70                	jle    c000fd45 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c000fcd5:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000fcd9:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000fcdd:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c000fce0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000fce4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000fce8:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c000fcef:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000fcf3:	89 f8                	mov    eax,edi
c000fcf5:	83 c0 20             	add    eax,0x20
c000fcf8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000fcfc:	56                   	push   esi
c000fcfd:	e8 78 ff ff ff       	call   c000fc7a <Video::getWidth()>
c000fd02:	5a                   	pop    edx
c000fd03:	39 c7                	cmp    edi,eax
c000fd05:	7d 34                	jge    c000fd3b <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c000fd07:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c000fd0c:	74 05                	je     c000fd13 <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c000fd0e:	8b 06                	mov    eax,DWORD PTR [esi]
c000fd10:	55                   	push   ebp
c000fd11:	eb 0d                	jmp    c000fd20 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c000fd13:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c000fd18:	74 12                	je     c000fd2c <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c000fd1a:	8b 06                	mov    eax,DWORD PTR [esi]
c000fd1c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fd20:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000fd24:	57                   	push   edi
c000fd25:	56                   	push   esi
c000fd26:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000fd29:	83 c4 10             	add    esp,0x10
c000fd2c:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c000fd30:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c000fd34:	47                   	inc    edi
c000fd35:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c000fd39:	75 c1                	jne    c000fcfc <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c000fd3b:	43                   	inc    ebx
c000fd3c:	83 fb 20             	cmp    ebx,0x20
c000fd3f:	0f 85 79 ff ff ff    	jne    c000fcbe <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c000fd45:	83 c4 2c             	add    esp,0x2c
c000fd48:	5b                   	pop    ebx
c000fd49:	5e                   	pop    esi
c000fd4a:	5f                   	pop    edi
c000fd4b:	5d                   	pop    ebp
c000fd4c:	c3                   	ret    
c000fd4d:	90                   	nop

c000fd4e <Video::tgaParse(unsigned char*, int, int*, int*)>:
c000fd4e:	55                   	push   ebp
c000fd4f:	57                   	push   edi
c000fd50:	56                   	push   esi
c000fd51:	53                   	push   ebx
c000fd52:	83 ec 28             	sub    esp,0x28
c000fd55:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000fd59:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c000fd5d:	0f b6 73 0d          	movzx  esi,BYTE PTR [ebx+0xd]
c000fd61:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c000fd65:	c1 e6 08             	shl    esi,0x8
c000fd68:	01 c6                	add    esi,eax
c000fd6a:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c000fd6e:	c1 e0 08             	shl    eax,0x8
c000fd71:	01 d0                	add    eax,edx
c000fd73:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fd77:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fd7b:	0f af c6             	imul   eax,esi
c000fd7e:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c000fd85:	50                   	push   eax
c000fd86:	e8 0c 9a ff ff       	call   c0009797 <malloc>
c000fd8b:	83 c4 10             	add    esp,0x10
c000fd8e:	89 c7                	mov    edi,eax
c000fd90:	85 c0                	test   eax,eax
c000fd92:	75 10                	jne    c000fda4 <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c000fd94:	83 ec 0c             	sub    esp,0xc
c000fd97:	68 2d 39 02 c0       	push   0xc002392d
c000fd9c:	e8 fa 2c 00 00       	call   c0012a9b <Krnl::panic(char const*)>
c000fda1:	83 c4 10             	add    esp,0x10
c000fda4:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000fda7:	ba 12 00 00 00       	mov    edx,0x12
c000fdac:	84 c0                	test   al,al
c000fdae:	74 11                	je     c000fdc1 <Video::tgaParse(unsigned char*, int, int*, int*)+0x73>
c000fdb0:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c000fdb4:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c000fdb8:	c1 fa 03             	sar    edx,0x3
c000fdbb:	0f af d1             	imul   edx,ecx
c000fdbe:	83 c2 12             	add    edx,0x12
c000fdc1:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c000fdc5:	74 04                	je     c000fdcb <Video::tgaParse(unsigned char*, int, int*, int*)+0x7d>
c000fdc7:	85 f6                	test   esi,esi
c000fdc9:	75 12                	jne    c000fddd <Video::tgaParse(unsigned char*, int, int*, int*)+0x8f>
c000fdcb:	83 ec 0c             	sub    esp,0xc
c000fdce:	68 3d 39 02 c0       	push   0xc002393d
c000fdd3:	e8 59 c9 ff ff       	call   c000c731 <Dbg::kprintf(char const*, ...)>
c000fdd8:	e9 b8 00 00 00       	jmp    c000fe95 <Video::tgaParse(unsigned char*, int, int*, int*)+0x147>
c000fddd:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c000fde1:	80 f9 02             	cmp    cl,0x2
c000fde4:	0f 85 96 00 00 00    	jne    c000fe80 <Video::tgaParse(unsigned char*, int, int*, int*)+0x132>
c000fdea:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000fdef:	75 0e                	jne    c000fdff <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c000fdf1:	84 c0                	test   al,al
c000fdf3:	75 0a                	jne    c000fdff <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c000fdf5:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000fdf8:	83 e8 18             	sub    eax,0x18
c000fdfb:	a8 f7                	test   al,0xf7
c000fdfd:	74 0a                	je     c000fe09 <Video::tgaParse(unsigned char*, int, int*, int*)+0xbb>
c000fdff:	83 ec 0c             	sub    esp,0xc
c000fe02:	68 52 39 02 c0       	push   0xc0023952
c000fe07:	eb 7f                	jmp    c000fe88 <Video::tgaParse(unsigned char*, int, int*, int*)+0x13a>
c000fe09:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000fe11:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000fe19:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c000fe1d:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000fe25:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000fe29:	75 0c                	jne    c000fe37 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c000fe2b:	0f b6 44 13 03       	movzx  eax,BYTE PTR [ebx+edx*1+0x3]
c000fe30:	c1 e0 18             	shl    eax,0x18
c000fe33:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000fe37:	45                   	inc    ebp
c000fe38:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c000fe3d:	c1 e1 10             	shl    ecx,0x10
c000fe40:	89 c8                	mov    eax,ecx
c000fe42:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c000fe47:	c1 e1 08             	shl    ecx,0x8
c000fe4a:	09 c1                	or     ecx,eax
c000fe4c:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c000fe50:	09 c1                	or     ecx,eax
c000fe52:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c000fe56:	89 4c af fc          	mov    DWORD PTR [edi+ebp*4-0x4],ecx
c000fe5a:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000fe5e:	c1 f8 03             	sar    eax,0x3
c000fe61:	01 c2                	add    edx,eax
c000fe63:	89 e8                	mov    eax,ebp
c000fe65:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000fe69:	39 c6                	cmp    esi,eax
c000fe6b:	7f b0                	jg     c000fe1d <Video::tgaParse(unsigned char*, int, int*, int*)+0xcf>
c000fe6d:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000fe71:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fe75:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000fe78:	7e 22                	jle    c000fe9c <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c000fe7a:	89 6c 24 04          	mov    DWORD PTR [esp+0x4],ebp
c000fe7e:	eb 99                	jmp    c000fe19 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c000fe80:	50                   	push   eax
c000fe81:	50                   	push   eax
c000fe82:	51                   	push   ecx
c000fe83:	68 60 39 02 c0       	push   0xc0023960
c000fe88:	e8 a4 c8 ff ff       	call   c000c731 <Dbg::kprintf(char const*, ...)>
c000fe8d:	89 3c 24             	mov    DWORD PTR [esp],edi
c000fe90:	e8 12 99 ff ff       	call   c00097a7 <free>
c000fe95:	83 c4 10             	add    esp,0x10
c000fe98:	31 ff                	xor    edi,edi
c000fe9a:	eb 0f                	jmp    c000feab <Video::tgaParse(unsigned char*, int, int*, int*)+0x15d>
c000fe9c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000fea0:	89 30                	mov    DWORD PTR [eax],esi
c000fea2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fea6:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000fea9:	89 30                	mov    DWORD PTR [eax],esi
c000feab:	83 c4 1c             	add    esp,0x1c
c000feae:	89 f8                	mov    eax,edi
c000feb0:	5b                   	pop    ebx
c000feb1:	5e                   	pop    esi
c000feb2:	5f                   	pop    edi
c000feb3:	5d                   	pop    ebp
c000feb4:	c3                   	ret    
c000feb5:	90                   	nop

c000feb6 <Video::putTGA(int, int, unsigned char*, int)>:
c000feb6:	55                   	push   ebp
c000feb7:	57                   	push   edi
c000feb8:	56                   	push   esi
c000feb9:	53                   	push   ebx
c000feba:	83 ec 28             	sub    esp,0x28
c000febd:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000fec1:	8d 44 24 18          	lea    eax,[esp+0x18]
c000fec5:	50                   	push   eax
c000fec6:	8d 44 24 18          	lea    eax,[esp+0x18]
c000feca:	50                   	push   eax
c000fecb:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000fecf:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000fed3:	56                   	push   esi
c000fed4:	e8 75 fe ff ff       	call   c000fd4e <Video::tgaParse(unsigned char*, int, int*, int*)>
c000fed9:	83 c4 20             	add    esp,0x20
c000fedc:	85 c0                	test   eax,eax
c000fede:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000fee2:	74 35                	je     c000ff19 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000fee4:	89 c7                	mov    edi,eax
c000fee6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000feea:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000feee:	39 d8                	cmp    eax,ebx
c000fef0:	7e 27                	jle    c000ff19 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000fef2:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000fef6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000fefa:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000fefe:	39 e8                	cmp    eax,ebp
c000ff00:	7e 14                	jle    c000ff16 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c000ff02:	8b 06                	mov    eax,DWORD PTR [esi]
c000ff04:	83 c7 04             	add    edi,0x4
c000ff07:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c000ff0a:	53                   	push   ebx
c000ff0b:	55                   	push   ebp
c000ff0c:	45                   	inc    ebp
c000ff0d:	56                   	push   esi
c000ff0e:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000ff11:	83 c4 10             	add    esp,0x10
c000ff14:	eb e0                	jmp    c000fef6 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c000ff16:	43                   	inc    ebx
c000ff17:	eb cd                	jmp    c000fee6 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c000ff19:	83 c4 1c             	add    esp,0x1c
c000ff1c:	5b                   	pop    ebx
c000ff1d:	5e                   	pop    esi
c000ff1e:	5f                   	pop    edi
c000ff1f:	5d                   	pop    ebp
c000ff20:	c3                   	ret    
c000ff21:	66 90                	xchg   ax,ax
c000ff23:	90                   	nop

c000ff24 <ACPI::close(int, int, void*)>:
c000ff24:	83 ec 1c             	sub    esp,0x1c
c000ff27:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c000ff2f:	74 0b                	je     c000ff3c <ACPI::close(int, int, void*)+0x18>
c000ff31:	b8 00 00 00 00       	mov    eax,0x0
c000ff36:	e9 99 00 00 00       	jmp    c000ffd4 <ACPI::close(int, int, void*)+0xb0>
c000ff3b:	90                   	nop
c000ff3c:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000ff41:	75 29                	jne    c000ff6c <ACPI::close(int, int, void*)+0x48>
c000ff43:	a1 28 89 02 c0       	mov    eax,ds:0xc0028928
c000ff48:	85 c0                	test   eax,eax
c000ff4a:	74 08                	je     c000ff54 <ACPI::close(int, int, void*)+0x30>
c000ff4c:	a1 28 89 02 c0       	mov    eax,ds:0xc0028928
c000ff51:	ff d0                	call   eax
c000ff53:	90                   	nop
c000ff54:	83 ec 0c             	sub    esp,0xc
c000ff57:	68 bc 39 02 c0       	push   0xc00239bc
c000ff5c:	e8 3a 2b 00 00       	call   c0012a9b <Krnl::panic(char const*)>
c000ff61:	83 c4 10             	add    esp,0x10
c000ff64:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ff69:	eb 69                	jmp    c000ffd4 <ACPI::close(int, int, void*)+0xb0>
c000ff6b:	90                   	nop
c000ff6c:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c000ff71:	75 59                	jne    c000ffcc <ACPI::close(int, int, void*)+0xa8>
c000ff73:	a1 24 89 02 c0       	mov    eax,ds:0xc0028924
c000ff78:	85 c0                	test   eax,eax
c000ff7a:	74 08                	je     c000ff84 <ACPI::close(int, int, void*)+0x60>
c000ff7c:	a1 24 89 02 c0       	mov    eax,ds:0xc0028924
c000ff81:	ff d0                	call   eax
c000ff83:	90                   	nop
c000ff84:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c000ff89:	8d 76 00             	lea    esi,[esi+0x0]
c000ff8c:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000ff91:	83 e0 02             	and    eax,0x2
c000ff94:	74 1e                	je     c000ffb4 <ACPI::close(int, int, void*)+0x90>
c000ff96:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c000ff9d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ffa1:	89 c2                	mov    edx,eax
c000ffa3:	ec                   	in     al,dx
c000ffa4:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000ffa8:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000ffac:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000ffb0:	eb da                	jmp    c000ff8c <ACPI::close(int, int, void*)+0x68>
c000ffb2:	66 90                	xchg   ax,ax
c000ffb4:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c000ffbb:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c000ffc0:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000ffc4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ffc8:	ee                   	out    dx,al
c000ffc9:	8d 76 00             	lea    esi,[esi+0x0]
c000ffcc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ffd1:	8d 76 00             	lea    esi,[esi+0x0]
c000ffd4:	83 c4 1c             	add    esp,0x1c
c000ffd7:	c3                   	ret    

c000ffd8 <findRSDP()>:
c000ffd8:	83 ec 1c             	sub    esp,0x1c
c000ffdb:	83 ec 0c             	sub    esp,0xc
c000ffde:	68 df 3a 02 c0       	push   0xc0023adf
c000ffe3:	e8 09 98 ff ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c000ffe8:	83 c4 10             	add    esp,0x10
c000ffeb:	a1 28 63 02 c0       	mov    eax,ds:0xc0026328
c000fff0:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c000fff6:	83 e0 04             	and    eax,0x4
c000fff9:	84 c0                	test   al,al
c000fffb:	75 0b                	jne    c0010008 <findRSDP()+0x30>
c000fffd:	b8 00 00 00 00       	mov    eax,0x0
c0010002:	e9 a1 00 00 00       	jmp    c00100a8 <findRSDP()+0xd0>
c0010007:	90                   	nop
c0010008:	a1 58 63 02 c0       	mov    eax,ds:0xc0026358
c001000d:	3d ff 07 00 00       	cmp    eax,0x7ff
c0010012:	7f 1c                	jg     c0010030 <findRSDP()+0x58>
c0010014:	a1 28 63 02 c0       	mov    eax,ds:0xc0026328
c0010019:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c001001f:	83 e2 fb             	and    edx,0xfffffffb
c0010022:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0010028:	b8 00 00 00 00       	mov    eax,0x0
c001002d:	eb 79                	jmp    c00100a8 <findRSDP()+0xd0>
c001002f:	90                   	nop
c0010030:	83 ec 0c             	sub    esp,0xc
c0010033:	68 ef 3a 02 c0       	push   0xc0023aef
c0010038:	e8 b4 97 ff ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c001003d:	83 c4 10             	add    esp,0x10
c0010040:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c0010048:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c0010050:	77 3e                	ja     c0010090 <findRSDP()+0xb8>
c0010052:	83 ec 04             	sub    esp,0x4
c0010055:	6a 08                	push   0x8
c0010057:	68 08 3b 02 c0       	push   0xc0023b08
c001005c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010060:	e8 3f 03 ff ff       	call   c00003a4 <memcmp>
c0010065:	83 c4 10             	add    esp,0x10
c0010068:	85 c0                	test   eax,eax
c001006a:	0f 94 c0             	sete   al
c001006d:	84 c0                	test   al,al
c001006f:	74 17                	je     c0010088 <findRSDP()+0xb0>
c0010071:	83 ec 0c             	sub    esp,0xc
c0010074:	68 11 3b 02 c0       	push   0xc0023b11
c0010079:	e8 73 97 ff ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c001007e:	83 c4 10             	add    esp,0x10
c0010081:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010085:	eb 21                	jmp    c00100a8 <findRSDP()+0xd0>
c0010087:	90                   	nop
c0010088:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c001008d:	eb b9                	jmp    c0010048 <findRSDP()+0x70>
c001008f:	90                   	nop
c0010090:	83 ec 0c             	sub    esp,0xc
c0010093:	68 1f 3b 02 c0       	push   0xc0023b1f
c0010098:	e8 54 97 ff ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c001009d:	83 c4 10             	add    esp,0x10
c00100a0:	b8 00 00 00 00       	mov    eax,0x0
c00100a5:	8d 76 00             	lea    esi,[esi+0x0]
c00100a8:	83 c4 1c             	add    esp,0x1c
c00100ab:	c3                   	ret    

c00100ac <loadACPITables(unsigned char*)>:
c00100ac:	57                   	push   edi
c00100ad:	56                   	push   esi
c00100ae:	53                   	push   ebx
c00100af:	83 ec 60             	sub    esp,0x60
c00100b2:	a1 28 63 02 c0       	mov    eax,ds:0xc0026328
c00100b7:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00100bd:	83 e0 04             	and    eax,0x4
c00100c0:	84 c0                	test   al,al
c00100c2:	0f 84 3c 02 00 00    	je     c0010304 <loadACPITables(unsigned char*)+0x258>
c00100c8:	a0 40 8b 02 c0       	mov    al,ds:0xc0028b40
c00100cd:	84 c0                	test   al,al
c00100cf:	74 77                	je     c0010148 <loadACPITables(unsigned char*)+0x9c>
c00100d1:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00100d5:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00100d9:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00100dd:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00100e0:	83 e8 24             	sub    eax,0x24
c00100e3:	c1 e8 03             	shr    eax,0x3
c00100e6:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00100ea:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c00100f2:	66 90                	xchg   ax,ax
c00100f4:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00100f8:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c00100fc:	0f 8d b6 00 00 00    	jge    c00101b8 <loadACPITables(unsigned char*)+0x10c>
c0010102:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0010106:	83 c0 24             	add    eax,0x24
c0010109:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c001010d:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0010111:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0010115:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0010119:	c1 e0 03             	shl    eax,0x3
c001011c:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c0010120:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0010124:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0010127:	8b 00                	mov    eax,DWORD PTR [eax]
c0010129:	89 c1                	mov    ecx,eax
c001012b:	a1 2c 89 02 c0       	mov    eax,ds:0xc002892c
c0010130:	8d 50 01             	lea    edx,[eax+0x1]
c0010133:	89 15 2c 89 02 c0    	mov    DWORD PTR ds:0xc002892c,edx
c0010139:	89 ca                	mov    edx,ecx
c001013b:	89 14 c5 44 89 02 c0 	mov    DWORD PTR [eax*8-0x3ffd76bc],edx
c0010142:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c0010146:	eb ac                	jmp    c00100f4 <loadACPITables(unsigned char*)+0x48>
c0010148:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001014c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0010150:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010154:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010157:	83 e8 24             	sub    eax,0x24
c001015a:	c1 e8 02             	shr    eax,0x2
c001015d:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0010161:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0010169:	8d 76 00             	lea    esi,[esi+0x0]
c001016c:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0010170:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c0010174:	7d 42                	jge    c00101b8 <loadACPITables(unsigned char*)+0x10c>
c0010176:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001017a:	83 c0 24             	add    eax,0x24
c001017d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0010181:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0010185:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0010189:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001018d:	c1 e0 02             	shl    eax,0x2
c0010190:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0010194:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0010198:	8b 08                	mov    ecx,DWORD PTR [eax]
c001019a:	a1 2c 89 02 c0       	mov    eax,ds:0xc002892c
c001019f:	8d 50 01             	lea    edx,[eax+0x1]
c00101a2:	89 15 2c 89 02 c0    	mov    DWORD PTR ds:0xc002892c,edx
c00101a8:	89 ca                	mov    edx,ecx
c00101aa:	89 14 c5 44 89 02 c0 	mov    DWORD PTR [eax*8-0x3ffd76bc],edx
c00101b1:	ff 44 24 58          	inc    DWORD PTR [esp+0x58]
c00101b5:	eb b5                	jmp    c001016c <loadACPITables(unsigned char*)+0xc0>
c00101b7:	90                   	nop
c00101b8:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c00101c0:	a1 2c 89 02 c0       	mov    eax,ds:0xc002892c
c00101c5:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c00101c9:	0f 8d 39 01 00 00    	jge    c0010308 <loadACPITables(unsigned char*)+0x25c>
c00101cf:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00101d3:	8b 04 c5 44 89 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd76bc]
c00101da:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00101de:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00101e2:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00101e6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00101ea:	25 ff 0f 00 00       	and    eax,0xfff
c00101ef:	89 c6                	mov    esi,eax
c00101f1:	8b 1d 14 64 02 c0    	mov    ebx,DWORD PTR ds:0xc0026414
c00101f7:	83 ec 0c             	sub    esp,0xc
c00101fa:	6a 01                	push   0x1
c00101fc:	e8 d4 b1 ff ff       	call   c000b3d5 <Virt::allocateKernelVirtualPages(int)>
c0010201:	83 c4 10             	add    esp,0x10
c0010204:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0010208:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001020e:	83 ec 0c             	sub    esp,0xc
c0010211:	6a 01                	push   0x1
c0010213:	6a 01                	push   0x1
c0010215:	50                   	push   eax
c0010216:	52                   	push   edx
c0010217:	53                   	push   ebx
c0010218:	e8 1b bb ff ff       	call   c000bd38 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001021d:	83 c4 20             	add    esp,0x20
c0010220:	09 f0                	or     eax,esi
c0010222:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0010226:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001022a:	c1 e0 03             	shl    eax,0x3
c001022d:	05 40 89 02 c0       	add    eax,0xc0028940
c0010232:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010236:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001023a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001023e:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c0010246:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001024a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001024e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0010252:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0010256:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001025a:	89 c6                	mov    esi,eax
c001025c:	89 d7                	mov    edi,edx
c001025e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010260:	89 c8                	mov    eax,ecx
c0010262:	89 fa                	mov    edx,edi
c0010264:	89 f3                	mov    ebx,esi
c0010266:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001026a:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001026e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010272:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010276:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010279:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001027d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0010281:	05 00 10 00 00       	add    eax,0x1000
c0010286:	c1 e8 0c             	shr    eax,0xc
c0010289:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001028d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010291:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0010295:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010299:	25 ff 0f 00 00       	and    eax,0xfff
c001029e:	89 c6                	mov    esi,eax
c00102a0:	8b 1d 14 64 02 c0    	mov    ebx,DWORD PTR ds:0xc0026414
c00102a6:	83 ec 0c             	sub    esp,0xc
c00102a9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00102ad:	e8 23 b1 ff ff       	call   c000b3d5 <Virt::allocateKernelVirtualPages(int)>
c00102b2:	83 c4 10             	add    esp,0x10
c00102b5:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00102b9:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00102bf:	83 ec 0c             	sub    esp,0xc
c00102c2:	6a 01                	push   0x1
c00102c4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00102c8:	50                   	push   eax
c00102c9:	52                   	push   edx
c00102ca:	53                   	push   ebx
c00102cb:	e8 68 ba ff ff       	call   c000bd38 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00102d0:	83 c4 20             	add    esp,0x20
c00102d3:	09 f0                	or     eax,esi
c00102d5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00102d9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00102dd:	83 ec 0c             	sub    esp,0xc
c00102e0:	50                   	push   eax
c00102e1:	e8 e3 b3 ff ff       	call   c000b6c9 <Virt::freeKernelVirtualPages(unsigned long)>
c00102e6:	83 c4 10             	add    esp,0x10
c00102e9:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00102ed:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00102f1:	89 14 c5 44 89 02 c0 	mov    DWORD PTR [eax*8-0x3ffd76bc],edx
c00102f8:	ff 44 24 54          	inc    DWORD PTR [esp+0x54]
c00102fc:	e9 bf fe ff ff       	jmp    c00101c0 <loadACPITables(unsigned char*)+0x114>
c0010301:	8d 76 00             	lea    esi,[esi+0x0]
c0010304:	90                   	nop
c0010305:	8d 76 00             	lea    esi,[esi+0x0]
c0010308:	83 c4 60             	add    esp,0x60
c001030b:	5b                   	pop    ebx
c001030c:	5e                   	pop    esi
c001030d:	5f                   	pop    edi
c001030e:	c3                   	ret    
c001030f:	90                   	nop

c0010310 <findRSDT(unsigned char*)>:
c0010310:	57                   	push   edi
c0010311:	56                   	push   esi
c0010312:	53                   	push   ebx
c0010313:	83 ec 50             	sub    esp,0x50
c0010316:	83 ec 0c             	sub    esp,0xc
c0010319:	68 33 3b 02 c0       	push   0xc0023b33
c001031e:	e8 ce 94 ff ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c0010323:	83 c4 10             	add    esp,0x10
c0010326:	a1 28 63 02 c0       	mov    eax,ds:0xc0026328
c001032b:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0010331:	83 e0 04             	and    eax,0x4
c0010334:	84 c0                	test   al,al
c0010336:	75 0c                	jne    c0010344 <findRSDT(unsigned char*)+0x34>
c0010338:	b8 00 00 00 00       	mov    eax,0x0
c001033d:	e9 86 01 00 00       	jmp    c00104c8 <findRSDT(unsigned char*)+0x1b8>
c0010342:	66 90                	xchg   ax,ax
c0010344:	83 ec 0c             	sub    esp,0xc
c0010347:	68 45 3b 02 c0       	push   0xc0023b45
c001034c:	e8 a0 94 ff ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c0010351:	83 c4 10             	add    esp,0x10
c0010354:	89 e0                	mov    eax,esp
c0010356:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001035a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001035e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0010362:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c001036a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001036e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0010372:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0010376:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001037a:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001037e:	89 c6                	mov    esi,eax
c0010380:	89 d7                	mov    edi,edx
c0010382:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010384:	89 c8                	mov    eax,ecx
c0010386:	89 fa                	mov    edx,edi
c0010388:	89 f3                	mov    ebx,esi
c001038a:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c001038e:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0010392:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0010396:	83 ec 0c             	sub    esp,0xc
c0010399:	68 57 3b 02 c0       	push   0xc0023b57
c001039e:	e8 4e 94 ff ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c00103a3:	83 c4 10             	add    esp,0x10
c00103a6:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00103aa:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c00103ae:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c00103b6:	83 ec 0c             	sub    esp,0xc
c00103b9:	68 69 3b 02 c0       	push   0xc0023b69
c00103be:	e8 2e 94 ff ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c00103c3:	83 c4 10             	add    esp,0x10
c00103c6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00103ca:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00103ce:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00103d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00103d6:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00103da:	83 ec 04             	sub    esp,0x4
c00103dd:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00103e1:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00103e5:	68 e0 39 02 c0       	push   0xc00239e0
c00103ea:	e8 42 c3 ff ff       	call   c000c731 <Dbg::kprintf(char const*, ...)>
c00103ef:	83 c4 10             	add    esp,0x10
c00103f2:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00103f6:	25 ff 0f 00 00       	and    eax,0xfff
c00103fb:	89 c6                	mov    esi,eax
c00103fd:	8b 1d 14 64 02 c0    	mov    ebx,DWORD PTR ds:0xc0026414
c0010403:	83 ec 0c             	sub    esp,0xc
c0010406:	6a 02                	push   0x2
c0010408:	e8 c8 af ff ff       	call   c000b3d5 <Virt::allocateKernelVirtualPages(int)>
c001040d:	83 c4 10             	add    esp,0x10
c0010410:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0010414:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001041a:	83 ec 0c             	sub    esp,0xc
c001041d:	6a 01                	push   0x1
c001041f:	6a 02                	push   0x2
c0010421:	50                   	push   eax
c0010422:	52                   	push   edx
c0010423:	53                   	push   ebx
c0010424:	e8 0f b9 ff ff       	call   c000bd38 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0010429:	83 c4 20             	add    esp,0x20
c001042c:	09 f0                	or     eax,esi
c001042e:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0010432:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010436:	25 ff 0f 00 00       	and    eax,0xfff
c001043b:	89 c6                	mov    esi,eax
c001043d:	8b 1d 14 64 02 c0    	mov    ebx,DWORD PTR ds:0xc0026414
c0010443:	83 ec 0c             	sub    esp,0xc
c0010446:	6a 02                	push   0x2
c0010448:	e8 88 af ff ff       	call   c000b3d5 <Virt::allocateKernelVirtualPages(int)>
c001044d:	83 c4 10             	add    esp,0x10
c0010450:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0010454:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001045a:	83 ec 0c             	sub    esp,0xc
c001045d:	6a 01                	push   0x1
c001045f:	6a 02                	push   0x2
c0010461:	50                   	push   eax
c0010462:	52                   	push   edx
c0010463:	53                   	push   ebx
c0010464:	e8 cf b8 ff ff       	call   c000bd38 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0010469:	83 c4 20             	add    esp,0x20
c001046c:	09 f0                	or     eax,esi
c001046e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0010472:	83 ec 04             	sub    esp,0x4
c0010475:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0010479:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001047d:	68 00 3a 02 c0       	push   0xc0023a00
c0010482:	e8 aa c2 ff ff       	call   c000c731 <Dbg::kprintf(char const*, ...)>
c0010487:	83 c4 10             	add    esp,0x10
c001048a:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c001048f:	75 13                	jne    c00104a4 <findRSDT(unsigned char*)+0x194>
c0010491:	c6 05 40 8b 02 c0 00 	mov    BYTE PTR ds:0xc0028b40,0x0
c0010498:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001049c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00104a0:	eb 22                	jmp    c00104c4 <findRSDT(unsigned char*)+0x1b4>
c00104a2:	66 90                	xchg   ax,ax
c00104a4:	80 7c 24 4b 02       	cmp    BYTE PTR [esp+0x4b],0x2
c00104a9:	75 11                	jne    c00104bc <findRSDT(unsigned char*)+0x1ac>
c00104ab:	c6 05 40 8b 02 c0 01 	mov    BYTE PTR ds:0xc0028b40,0x1
c00104b2:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00104b6:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00104ba:	eb 08                	jmp    c00104c4 <findRSDT(unsigned char*)+0x1b4>
c00104bc:	b8 00 00 00 00       	mov    eax,0x0
c00104c1:	eb 05                	jmp    c00104c8 <findRSDT(unsigned char*)+0x1b8>
c00104c3:	90                   	nop
c00104c4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00104c8:	83 c4 50             	add    esp,0x50
c00104cb:	5b                   	pop    ebx
c00104cc:	5e                   	pop    esi
c00104cd:	5f                   	pop    edi
c00104ce:	c3                   	ret    
c00104cf:	90                   	nop

c00104d0 <findDataTable(unsigned char*, char*)>:
c00104d0:	83 ec 1c             	sub    esp,0x1c
c00104d3:	a1 28 63 02 c0       	mov    eax,ds:0xc0026328
c00104d8:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00104de:	83 e0 04             	and    eax,0x4
c00104e1:	84 c0                	test   al,al
c00104e3:	75 07                	jne    c00104ec <findDataTable(unsigned char*, char*)+0x1c>
c00104e5:	b8 00 00 00 00       	mov    eax,0x0
c00104ea:	eb 58                	jmp    c0010544 <findDataTable(unsigned char*, char*)+0x74>
c00104ec:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00104f4:	a1 2c 89 02 c0       	mov    eax,ds:0xc002892c
c00104f9:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00104fd:	7d 3d                	jge    c001053c <findDataTable(unsigned char*, char*)+0x6c>
c00104ff:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010503:	c1 e0 03             	shl    eax,0x3
c0010506:	05 40 89 02 c0       	add    eax,0xc0028940
c001050b:	83 ec 04             	sub    esp,0x4
c001050e:	6a 04                	push   0x4
c0010510:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010514:	50                   	push   eax
c0010515:	e8 8a fe fe ff       	call   c00003a4 <memcmp>
c001051a:	83 c4 10             	add    esp,0x10
c001051d:	85 c0                	test   eax,eax
c001051f:	0f 94 c0             	sete   al
c0010522:	84 c0                	test   al,al
c0010524:	74 0e                	je     c0010534 <findDataTable(unsigned char*, char*)+0x64>
c0010526:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001052a:	8b 04 c5 44 89 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd76bc]
c0010531:	eb 11                	jmp    c0010544 <findDataTable(unsigned char*, char*)+0x74>
c0010533:	90                   	nop
c0010534:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0010538:	eb ba                	jmp    c00104f4 <findDataTable(unsigned char*, char*)+0x24>
c001053a:	66 90                	xchg   ax,ax
c001053c:	b8 00 00 00 00       	mov    eax,0x0
c0010541:	8d 76 00             	lea    esi,[esi+0x0]
c0010544:	83 c4 1c             	add    esp,0x1c
c0010547:	c3                   	ret    

c0010548 <scanMADT()>:
c0010548:	53                   	push   ebx
c0010549:	83 ec 38             	sub    esp,0x38
c001054c:	83 ec 0c             	sub    esp,0xc
c001054f:	68 7b 3b 02 c0       	push   0xc0023b7b
c0010554:	e8 98 92 ff ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c0010559:	83 c4 10             	add    esp,0x10
c001055c:	a1 40 63 02 c0       	mov    eax,ds:0xc0026340
c0010561:	25 00 04 00 00       	and    eax,0x400
c0010566:	74 14                	je     c001057c <scanMADT()+0x34>
c0010568:	a1 28 63 02 c0       	mov    eax,ds:0xc0026328
c001056d:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0010573:	83 e2 fb             	and    edx,0xfffffffb
c0010576:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c001057c:	a1 28 63 02 c0       	mov    eax,ds:0xc0026328
c0010581:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0010587:	83 e0 04             	and    eax,0x4
c001058a:	84 c0                	test   al,al
c001058c:	0f 84 82 04 00 00    	je     c0010a14 <scanMADT()+0x4cc>
c0010592:	83 ec 0c             	sub    esp,0xc
c0010595:	68 88 3b 02 c0       	push   0xc0023b88
c001059a:	e8 52 92 ff ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c001059f:	83 c4 10             	add    esp,0x10
c00105a2:	e8 31 fa ff ff       	call   c000ffd8 <findRSDP()>
c00105a7:	a3 4c 8b 02 c0       	mov    ds:0xc0028b4c,eax
c00105ac:	a1 4c 8b 02 c0       	mov    eax,ds:0xc0028b4c
c00105b1:	85 c0                	test   eax,eax
c00105b3:	75 1b                	jne    c00105d0 <scanMADT()+0x88>
c00105b5:	a1 28 63 02 c0       	mov    eax,ds:0xc0026328
c00105ba:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00105c0:	83 e2 fb             	and    edx,0xfffffffb
c00105c3:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00105c9:	e9 4e 04 00 00       	jmp    c0010a1c <scanMADT()+0x4d4>
c00105ce:	66 90                	xchg   ax,ax
c00105d0:	83 ec 0c             	sub    esp,0xc
c00105d3:	68 9a 3b 02 c0       	push   0xc0023b9a
c00105d8:	e8 14 92 ff ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c00105dd:	83 c4 10             	add    esp,0x10
c00105e0:	a1 4c 8b 02 c0       	mov    eax,ds:0xc0028b4c
c00105e5:	83 ec 0c             	sub    esp,0xc
c00105e8:	50                   	push   eax
c00105e9:	e8 22 fd ff ff       	call   c0010310 <findRSDT(unsigned char*)>
c00105ee:	83 c4 10             	add    esp,0x10
c00105f1:	a3 48 8b 02 c0       	mov    ds:0xc0028b48,eax
c00105f6:	a1 48 8b 02 c0       	mov    eax,ds:0xc0028b48
c00105fb:	85 c0                	test   eax,eax
c00105fd:	75 19                	jne    c0010618 <scanMADT()+0xd0>
c00105ff:	a1 28 63 02 c0       	mov    eax,ds:0xc0026328
c0010604:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c001060a:	83 e2 fb             	and    edx,0xfffffffb
c001060d:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0010613:	e9 04 04 00 00       	jmp    c0010a1c <scanMADT()+0x4d4>
c0010618:	83 ec 0c             	sub    esp,0xc
c001061b:	68 aa 3b 02 c0       	push   0xc0023baa
c0010620:	e8 cc 91 ff ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c0010625:	83 c4 10             	add    esp,0x10
c0010628:	a1 48 8b 02 c0       	mov    eax,ds:0xc0028b48
c001062d:	83 ec 0c             	sub    esp,0xc
c0010630:	50                   	push   eax
c0010631:	e8 76 fa ff ff       	call   c00100ac <loadACPITables(unsigned char*)>
c0010636:	83 c4 10             	add    esp,0x10
c0010639:	a1 48 8b 02 c0       	mov    eax,ds:0xc0028b48
c001063e:	83 ec 08             	sub    esp,0x8
c0010641:	68 c2 3b 02 c0       	push   0xc0023bc2
c0010646:	50                   	push   eax
c0010647:	e8 84 fe ff ff       	call   c00104d0 <findDataTable(unsigned char*, char*)>
c001064c:	83 c4 10             	add    esp,0x10
c001064f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0010653:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c0010658:	75 1a                	jne    c0010674 <scanMADT()+0x12c>
c001065a:	a1 28 63 02 c0       	mov    eax,ds:0xc0026328
c001065f:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0010665:	83 e2 fe             	and    edx,0xfffffffe
c0010668:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c001066e:	e9 a9 03 00 00       	jmp    c0010a1c <scanMADT()+0x4d4>
c0010673:	90                   	nop
c0010674:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001067c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0010680:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010683:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c0010687:	0f 87 8f 03 00 00    	ja     c0010a1c <scanMADT()+0x4d4>
c001068d:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c0010695:	0f 87 81 03 00 00    	ja     c0010a1c <scanMADT()+0x4d4>
c001069b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001069f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00106a3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00106a7:	8d 50 01             	lea    edx,[eax+0x1]
c00106aa:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00106ae:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00106b2:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00106b6:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c00106ba:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00106be:	8d 50 01             	lea    edx,[eax+0x1]
c00106c1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00106c5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00106c9:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00106cd:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c00106d1:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c00106d6:	0f 86 3c 03 00 00    	jbe    c0010a18 <scanMADT()+0x4d0>
c00106dc:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c00106e1:	75 59                	jne    c001073c <scanMADT()+0x1f4>
c00106e3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00106e7:	8d 50 01             	lea    edx,[eax+0x1]
c00106ea:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00106ee:	8a 15 40 8d 02 c0    	mov    dl,BYTE PTR ds:0xc0028d40
c00106f4:	0f b6 d2             	movzx  edx,dl
c00106f7:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c00106fb:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c00106ff:	88 82 80 8d 02 c0    	mov    BYTE PTR [edx-0x3ffd7280],al
c0010705:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0010709:	8d 50 01             	lea    edx,[eax+0x1]
c001070c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0010710:	8a 15 40 8d 02 c0    	mov    dl,BYTE PTR ds:0xc0028d40
c0010716:	8d 4a 01             	lea    ecx,[edx+0x1]
c0010719:	88 0d 40 8d 02 c0    	mov    BYTE PTR ds:0xc0028d40,cl
c001071f:	0f b6 d2             	movzx  edx,dl
c0010722:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0010726:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c001072a:	88 82 60 8d 02 c0    	mov    BYTE PTR [edx-0x3ffd72a0],al
c0010730:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0010735:	e9 c6 02 00 00       	jmp    c0010a00 <scanMADT()+0x4b8>
c001073a:	66 90                	xchg   ax,ax
c001073c:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c0010741:	0f 85 15 01 00 00    	jne    c001085c <scanMADT()+0x314>
c0010747:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001074b:	8d 50 01             	lea    edx,[eax+0x1]
c001074e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0010752:	8a 15 00 8c 02 c0    	mov    dl,BYTE PTR ds:0xc0028c00
c0010758:	0f b6 d2             	movzx  edx,dl
c001075b:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001075f:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0010763:	88 82 20 8c 02 c0    	mov    BYTE PTR [edx-0x3ffd73e0],al
c0010769:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c001076d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0010771:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0010775:	01 d0                	add    eax,edx
c0010777:	83 c0 2c             	add    eax,0x2c
c001077a:	8a 00                	mov    al,BYTE PTR [eax]
c001077c:	0f b6 d0             	movzx  edx,al
c001077f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0010783:	8d 48 01             	lea    ecx,[eax+0x1]
c0010786:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001078a:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001078e:	0f b6 c0             	movzx  eax,al
c0010791:	c1 e0 08             	shl    eax,0x8
c0010794:	89 d1                	mov    ecx,edx
c0010796:	09 c1                	or     ecx,eax
c0010798:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001079c:	8d 50 02             	lea    edx,[eax+0x2]
c001079f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00107a3:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00107a7:	0f b6 c0             	movzx  eax,al
c00107aa:	c1 e0 10             	shl    eax,0x10
c00107ad:	09 c1                	or     ecx,eax
c00107af:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00107b3:	8d 50 03             	lea    edx,[eax+0x3]
c00107b6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00107ba:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00107be:	0f b6 c0             	movzx  eax,al
c00107c1:	c1 e0 18             	shl    eax,0x18
c00107c4:	09 c1                	or     ecx,eax
c00107c6:	89 ca                	mov    edx,ecx
c00107c8:	a0 00 8c 02 c0       	mov    al,ds:0xc0028c00
c00107cd:	0f b6 c0             	movzx  eax,al
c00107d0:	89 14 85 40 8c 02 c0 	mov    DWORD PTR [eax*4-0x3ffd73c0],edx
c00107d7:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c00107dc:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00107e0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00107e4:	01 d0                	add    eax,edx
c00107e6:	83 c0 2c             	add    eax,0x2c
c00107e9:	8a 00                	mov    al,BYTE PTR [eax]
c00107eb:	0f b6 d0             	movzx  edx,al
c00107ee:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00107f2:	8d 48 01             	lea    ecx,[eax+0x1]
c00107f5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00107f9:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c00107fd:	0f b6 c0             	movzx  eax,al
c0010800:	c1 e0 08             	shl    eax,0x8
c0010803:	89 d1                	mov    ecx,edx
c0010805:	09 c1                	or     ecx,eax
c0010807:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001080b:	8d 50 02             	lea    edx,[eax+0x2]
c001080e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0010812:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0010816:	0f b6 c0             	movzx  eax,al
c0010819:	c1 e0 10             	shl    eax,0x10
c001081c:	09 c1                	or     ecx,eax
c001081e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0010822:	8d 50 03             	lea    edx,[eax+0x3]
c0010825:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0010829:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001082d:	0f b6 c0             	movzx  eax,al
c0010830:	c1 e0 18             	shl    eax,0x18
c0010833:	09 c1                	or     ecx,eax
c0010835:	89 ca                	mov    edx,ecx
c0010837:	a0 00 8c 02 c0       	mov    al,ds:0xc0028c00
c001083c:	0f b6 c0             	movzx  eax,al
c001083f:	89 14 85 c0 8c 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7340],edx
c0010846:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c001084b:	a0 00 8c 02 c0       	mov    al,ds:0xc0028c00
c0010850:	40                   	inc    eax
c0010851:	a2 00 8c 02 c0       	mov    ds:0xc0028c00,al
c0010856:	e9 a5 01 00 00       	jmp    c0010a00 <scanMADT()+0x4b8>
c001085b:	90                   	nop
c001085c:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c0010861:	0f 85 e9 00 00 00    	jne    c0010950 <scanMADT()+0x408>
c0010867:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001086b:	8d 50 01             	lea    edx,[eax+0x1]
c001086e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0010872:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0010876:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001087a:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c001087e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0010882:	8d 50 01             	lea    edx,[eax+0x1]
c0010885:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0010889:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001088d:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0010891:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0010895:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0010899:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001089d:	01 d0                	add    eax,edx
c001089f:	83 c0 2c             	add    eax,0x2c
c00108a2:	8a 00                	mov    al,BYTE PTR [eax]
c00108a4:	0f b6 d0             	movzx  edx,al
c00108a7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00108ab:	8d 48 01             	lea    ecx,[eax+0x1]
c00108ae:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00108b2:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c00108b6:	0f b6 c0             	movzx  eax,al
c00108b9:	c1 e0 08             	shl    eax,0x8
c00108bc:	89 d1                	mov    ecx,edx
c00108be:	09 c1                	or     ecx,eax
c00108c0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00108c4:	8d 50 02             	lea    edx,[eax+0x2]
c00108c7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00108cb:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00108cf:	0f b6 c0             	movzx  eax,al
c00108d2:	c1 e0 10             	shl    eax,0x10
c00108d5:	09 c1                	or     ecx,eax
c00108d7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00108db:	8d 50 03             	lea    edx,[eax+0x3]
c00108de:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00108e2:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00108e6:	0f b6 c0             	movzx  eax,al
c00108e9:	c1 e0 18             	shl    eax,0x18
c00108ec:	09 c8                	or     eax,ecx
c00108ee:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00108f2:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c00108f7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00108fb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00108ff:	01 d0                	add    eax,edx
c0010901:	83 c0 2c             	add    eax,0x2c
c0010904:	8a 00                	mov    al,BYTE PTR [eax]
c0010906:	0f b6 c0             	movzx  eax,al
c0010909:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001090d:	8d 4a 01             	lea    ecx,[edx+0x1]
c0010910:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0010914:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c0010918:	0f b6 d2             	movzx  edx,dl
c001091b:	c1 e2 08             	shl    edx,0x8
c001091e:	09 d0                	or     eax,edx
c0010920:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c0010925:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c001092a:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c001092f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0010933:	88 90 40 5a 02 c0    	mov    BYTE PTR [eax-0x3ffda5c0],dl
c0010939:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c001093e:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0010943:	66 89 84 12 e0 8b 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffd7420],ax
c001094b:	e9 b0 00 00 00       	jmp    c0010a00 <scanMADT()+0x4b8>
c0010950:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c0010955:	0f 85 99 00 00 00    	jne    c00109f4 <scanMADT()+0x4ac>
c001095b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001095f:	8d 50 01             	lea    edx,[eax+0x1]
c0010962:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0010966:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001096a:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001096e:	0f b6 c0             	movzx  eax,al
c0010971:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0010975:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0010979:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001097d:	01 d0                	add    eax,edx
c001097f:	83 c0 2c             	add    eax,0x2c
c0010982:	8a 00                	mov    al,BYTE PTR [eax]
c0010984:	0f b6 d0             	movzx  edx,al
c0010987:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001098b:	8d 48 01             	lea    ecx,[eax+0x1]
c001098e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0010992:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0010996:	0f b6 c0             	movzx  eax,al
c0010999:	c1 e0 08             	shl    eax,0x8
c001099c:	09 d0                	or     eax,edx
c001099e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00109a2:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c00109a7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00109ab:	8d 50 01             	lea    edx,[eax+0x1]
c00109ae:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00109b2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00109b6:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00109ba:	0f b6 c0             	movzx  eax,al
c00109bd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00109c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109c5:	c1 e0 08             	shl    eax,0x8
c00109c8:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c00109cc:	89 c1                	mov    ecx,eax
c00109ce:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00109d2:	c1 e0 18             	shl    eax,0x18
c00109d5:	89 c3                	mov    ebx,eax
c00109d7:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c00109dc:	8d 50 01             	lea    edx,[eax+0x1]
c00109df:	89 15 50 8b 02 c0    	mov    DWORD PTR ds:0xc0028b50,edx
c00109e5:	09 d9                	or     ecx,ebx
c00109e7:	89 ca                	mov    edx,ecx
c00109e9:	89 14 85 60 8b 02 c0 	mov    DWORD PTR [eax*4-0x3ffd74a0],edx
c00109f0:	eb 0e                	jmp    c0010a00 <scanMADT()+0x4b8>
c00109f2:	66 90                	xchg   ax,ax
c00109f4:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c00109f9:	75 05                	jne    c0010a00 <scanMADT()+0x4b8>
c00109fb:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c0010a00:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c0010a05:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010a09:	01 d0                	add    eax,edx
c0010a0b:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0010a0f:	e9 68 fc ff ff       	jmp    c001067c <scanMADT()+0x134>
c0010a14:	90                   	nop
c0010a15:	eb 05                	jmp    c0010a1c <scanMADT()+0x4d4>
c0010a17:	90                   	nop
c0010a18:	90                   	nop
c0010a19:	8d 76 00             	lea    esi,[esi+0x0]
c0010a1c:	83 c4 38             	add    esp,0x38
c0010a1f:	5b                   	pop    ebx
c0010a20:	c3                   	ret    
c0010a21:	90                   	nop
c0010a22:	66 90                	xchg   ax,ax

c0010a24 <ACPI::ACPI()>:
c0010a24:	83 ec 0c             	sub    esp,0xc
c0010a27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a2b:	83 ec 08             	sub    esp,0x8
c0010a2e:	68 c7 3b 02 c0       	push   0xc0023bc7
c0010a33:	50                   	push   eax
c0010a34:	e8 79 d3 ff ff       	call   c000ddb2 <Device::Device(char const*)>
c0010a39:	83 c4 10             	add    esp,0x10
c0010a3c:	ba 50 3d 02 c0       	mov    edx,0xc0023d50
c0010a41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a45:	89 10                	mov    DWORD PTR [eax],edx
c0010a47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a4b:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0010a52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a56:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0010a60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a64:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c0010a6e:	83 ec 0c             	sub    esp,0xc
c0010a71:	68 cc 3b 02 c0       	push   0xc0023bcc
c0010a76:	e8 76 8d ff ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c0010a7b:	83 c4 10             	add    esp,0x10
c0010a7e:	e8 c5 fa ff ff       	call   c0010548 <scanMADT()>
c0010a83:	90                   	nop
c0010a84:	83 c4 0c             	add    esp,0xc
c0010a87:	c3                   	ret    

c0010a88 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c0010a88:	83 ec 2c             	sub    esp,0x2c
c0010a8b:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0010a8f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0010a93:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0010a97:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0010a9b:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0010aa0:	88 d0                	mov    al,dl
c0010aa2:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0010aa6:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0010aab:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0010ab3:	90                   	nop
c0010ab4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0010ab8:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0010abe:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0010ac2:	0f 8d 9c 00 00 00    	jge    c0010b64 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xdc>
c0010ac8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0010acc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010ad0:	83 c2 2a             	add    edx,0x2a
c0010ad3:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c0010ad7:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c0010adc:	75 7a                	jne    c0010b58 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c0010ade:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0010ae2:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010ae6:	83 c2 2a             	add    edx,0x2a
c0010ae9:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c0010aed:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c0010af1:	75 65                	jne    c0010b58 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c0010af3:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0010af8:	74 3a                	je     c0010b34 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xac>
c0010afa:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0010afe:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010b02:	83 c2 2a             	add    edx,0x2a
c0010b05:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c0010b09:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010b0d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010b10:	39 c2                	cmp    edx,eax
c0010b12:	74 10                	je     c0010b24 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9c>
c0010b14:	83 ec 0c             	sub    esp,0xc
c0010b17:	68 20 3a 02 c0       	push   0xc0023a20
c0010b1c:	e8 7a 1f 00 00       	call   c0012a9b <Krnl::panic(char const*)>
c0010b21:	83 c4 10             	add    esp,0x10
c0010b24:	83 ec 0c             	sub    esp,0xc
c0010b27:	68 da 3b 02 c0       	push   0xc0023bda
c0010b2c:	e8 6a 1f 00 00       	call   c0012a9b <Krnl::panic(char const*)>
c0010b31:	83 c4 10             	add    esp,0x10
c0010b34:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0010b38:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0010b3c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010b40:	83 c2 2a             	add    edx,0x2a
c0010b43:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c0010b47:	8b 02                	mov    eax,DWORD PTR [edx]
c0010b49:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0010b4c:	89 01                	mov    DWORD PTR [ecx],eax
c0010b4e:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0010b51:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0010b56:	66 90                	xchg   ax,ax
c0010b58:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0010b5c:	e9 53 ff ff ff       	jmp    c0010ab4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c0010b61:	8d 76 00             	lea    esi,[esi+0x0]
c0010b64:	90                   	nop
c0010b65:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010b69:	83 c4 2c             	add    esp,0x2c
c0010b6c:	c2 04 00             	ret    0x4
c0010b6f:	90                   	nop

c0010b70 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c0010b70:	83 ec 1c             	sub    esp,0x1c
c0010b73:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0010b77:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0010b7b:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0010b7f:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0010b84:	88 c8                	mov    al,cl
c0010b86:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0010b8a:	88 d0                	mov    al,dl
c0010b8c:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0010b90:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010b94:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0010b9a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010b9e:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0010ba1:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c0010ba5:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c0010ba9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010bad:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0010bb3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0010bb7:	8d 48 2a             	lea    ecx,[eax+0x2a]
c0010bba:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010bbe:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c0010bc3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010bc7:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0010bcd:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0010bd1:	8d 48 01             	lea    ecx,[eax+0x1]
c0010bd4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010bd8:	83 c2 2a             	add    edx,0x2a
c0010bdb:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c0010bdf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010be3:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0010be9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010bed:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0010bf0:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0010bf4:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c0010bf8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010bfc:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0010c02:	8d 50 01             	lea    edx,[eax+0x1]
c0010c05:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010c09:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c0010c0f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010c13:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0010c19:	3d 00 02 00 00       	cmp    eax,0x200
c0010c1e:	75 10                	jne    c0010c30 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c0010c20:	83 ec 0c             	sub    esp,0xc
c0010c23:	68 e9 3b 02 c0       	push   0xc0023be9
c0010c28:	e8 6e 1e 00 00       	call   c0012a9b <Krnl::panic(char const*)>
c0010c2d:	83 c4 10             	add    esp,0x10
c0010c30:	90                   	nop
c0010c31:	83 c4 1c             	add    esp,0x1c
c0010c34:	c3                   	ret    
c0010c35:	90                   	nop
c0010c36:	66 90                	xchg   ax,ax

c0010c38 <ACPI::setScreenBrightnessLevel(void*, int)>:
c0010c38:	b8 00 00 00 00       	mov    eax,0x0
c0010c3d:	c3                   	ret    
c0010c3e:	66 90                	xchg   ax,ax

c0010c40 <ACPI::detectPCI()>:
c0010c40:	53                   	push   ebx
c0010c41:	83 ec 68             	sub    esp,0x68
c0010c44:	c6 44 24 5f 00       	mov    BYTE PTR [esp+0x5f],0x0
c0010c49:	c6 44 24 5e 00       	mov    BYTE PTR [esp+0x5e],0x0
c0010c4e:	a1 28 63 02 c0       	mov    eax,ds:0xc0026328
c0010c53:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0010c59:	83 e0 04             	and    eax,0x4
c0010c5c:	84 c0                	test   al,al
c0010c5e:	74 2c                	je     c0010c8c <ACPI::detectPCI()+0x4c>
c0010c60:	a1 48 8b 02 c0       	mov    eax,ds:0xc0028b48
c0010c65:	83 ec 08             	sub    esp,0x8
c0010c68:	68 06 3c 02 c0       	push   0xc0023c06
c0010c6d:	50                   	push   eax
c0010c6e:	e8 5d f8 ff ff       	call   c00104d0 <findDataTable(unsigned char*, char*)>
c0010c73:	83 c4 10             	add    esp,0x10
c0010c76:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0010c7a:	83 7c 24 58 00       	cmp    DWORD PTR [esp+0x58],0x0
c0010c7f:	74 0b                	je     c0010c8c <ACPI::detectPCI()+0x4c>
c0010c81:	c6 44 24 5f 01       	mov    BYTE PTR [esp+0x5f],0x1
c0010c86:	c6 44 24 5e 01       	mov    BYTE PTR [esp+0x5e],0x1
c0010c8b:	90                   	nop
c0010c8c:	c7 44 24 54 5f 0c 00 00 	mov    DWORD PTR [esp+0x54],0xc5f
c0010c94:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0010c98:	8a 00                	mov    al,BYTE PTR [eax]
c0010c9a:	3c 01                	cmp    al,0x1
c0010c9c:	75 0e                	jne    c0010cac <ACPI::detectPCI()+0x6c>
c0010c9e:	c6 44 24 5f 01       	mov    BYTE PTR [esp+0x5f],0x1
c0010ca3:	c6 44 24 5e 01       	mov    BYTE PTR [esp+0x5e],0x1
c0010ca8:	eb 2a                	jmp    c0010cd4 <ACPI::detectPCI()+0x94>
c0010caa:	66 90                	xchg   ax,ax
c0010cac:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0010cb0:	8a 00                	mov    al,BYTE PTR [eax]
c0010cb2:	3c 02                	cmp    al,0x2
c0010cb4:	75 1e                	jne    c0010cd4 <ACPI::detectPCI()+0x94>
c0010cb6:	c6 44 24 5f 01       	mov    BYTE PTR [esp+0x5f],0x1
c0010cbb:	80 7c 24 5e 00       	cmp    BYTE PTR [esp+0x5e],0x0
c0010cc0:	74 12                	je     c0010cd4 <ACPI::detectPCI()+0x94>
c0010cc2:	83 ec 0c             	sub    esp,0xc
c0010cc5:	68 50 3a 02 c0       	push   0xc0023a50
c0010cca:	e8 cc 1d 00 00       	call   c0012a9b <Krnl::panic(char const*)>
c0010ccf:	83 c4 10             	add    esp,0x10
c0010cd2:	66 90                	xchg   ax,ax
c0010cd4:	8a 44 24 5f          	mov    al,BYTE PTR [esp+0x5f]
c0010cd8:	83 f0 01             	xor    eax,0x1
c0010cdb:	84 c0                	test   al,al
c0010cdd:	74 41                	je     c0010d20 <ACPI::detectPCI()+0xe0>
c0010cdf:	e8 6c f4 fe ff       	call   c0000150 <manualPCIProbe>
c0010ce4:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0010ce8:	83 7c 24 50 01       	cmp    DWORD PTR [esp+0x50],0x1
c0010ced:	75 0d                	jne    c0010cfc <ACPI::detectPCI()+0xbc>
c0010cef:	c6 44 24 5f 01       	mov    BYTE PTR [esp+0x5f],0x1
c0010cf4:	c6 44 24 5e 01       	mov    BYTE PTR [esp+0x5e],0x1
c0010cf9:	eb 25                	jmp    c0010d20 <ACPI::detectPCI()+0xe0>
c0010cfb:	90                   	nop
c0010cfc:	83 7c 24 50 02       	cmp    DWORD PTR [esp+0x50],0x2
c0010d01:	75 1d                	jne    c0010d20 <ACPI::detectPCI()+0xe0>
c0010d03:	c6 44 24 5f 01       	mov    BYTE PTR [esp+0x5f],0x1
c0010d08:	80 7c 24 5e 00       	cmp    BYTE PTR [esp+0x5e],0x0
c0010d0d:	74 11                	je     c0010d20 <ACPI::detectPCI()+0xe0>
c0010d0f:	83 ec 0c             	sub    esp,0xc
c0010d12:	68 50 3a 02 c0       	push   0xc0023a50
c0010d17:	e8 7f 1d 00 00       	call   c0012a9b <Krnl::panic(char const*)>
c0010d1c:	83 c4 10             	add    esp,0x10
c0010d1f:	90                   	nop
c0010d20:	80 7c 24 5f 00       	cmp    BYTE PTR [esp+0x5f],0x0
c0010d25:	0f 84 49 03 00 00    	je     c0011074 <ACPI::detectPCI()+0x434>
c0010d2b:	83 ec 0c             	sub    esp,0xc
c0010d2e:	68 0b 3c 02 c0       	push   0xc0023c0b
c0010d33:	e8 b9 8a ff ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c0010d38:	83 c4 10             	add    esp,0x10
c0010d3b:	80 7c 24 5e 00       	cmp    BYTE PTR [esp+0x5e],0x0
c0010d40:	0f 84 8e 00 00 00    	je     c0010dd4 <ACPI::detectPCI()+0x194>
c0010d46:	a1 40 63 02 c0       	mov    eax,ds:0xc0026340
c0010d4b:	25 00 08 00 00       	and    eax,0x800
c0010d50:	0f 84 16 01 00 00    	je     c0010e6c <ACPI::detectPCI()+0x22c>
c0010d56:	83 ec 0c             	sub    esp,0xc
c0010d59:	68 78 3a 02 c0       	push   0xc0023a78
c0010d5e:	e8 8e 8a ff ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c0010d63:	83 c4 10             	add    esp,0x10
c0010d66:	a1 40 63 02 c0       	mov    eax,ds:0xc0026340
c0010d6b:	25 80 00 00 00       	and    eax,0x80
c0010d70:	0f 85 f6 00 00 00    	jne    c0010e6c <ACPI::detectPCI()+0x22c>
c0010d76:	66 90                	xchg   ax,ax
c0010d78:	66 c7 44 24 3a 60 00 	mov    WORD PTR [esp+0x3a],0x60
c0010d7f:	66 8b 44 24 3a       	mov    ax,WORD PTR [esp+0x3a]
c0010d84:	89 c2                	mov    edx,eax
c0010d86:	ec                   	in     al,dx
c0010d87:	88 44 24 39          	mov    BYTE PTR [esp+0x39],al
c0010d8b:	8a 44 24 39          	mov    al,BYTE PTR [esp+0x39]
c0010d8f:	88 44 24 4f          	mov    BYTE PTR [esp+0x4f],al
c0010d93:	80 7c 24 4f 5a       	cmp    BYTE PTR [esp+0x4f],0x5a
c0010d98:	74 0a                	je     c0010da4 <ACPI::detectPCI()+0x164>
c0010d9a:	80 7c 24 4f 1c       	cmp    BYTE PTR [esp+0x4f],0x1c
c0010d9f:	74 03                	je     c0010da4 <ACPI::detectPCI()+0x164>
c0010da1:	eb d5                	jmp    c0010d78 <ACPI::detectPCI()+0x138>
c0010da3:	90                   	nop
c0010da4:	66 c7 44 24 36 60 00 	mov    WORD PTR [esp+0x36],0x60
c0010dab:	66 8b 44 24 36       	mov    ax,WORD PTR [esp+0x36]
c0010db0:	89 c2                	mov    edx,eax
c0010db2:	ec                   	in     al,dx
c0010db3:	88 44 24 35          	mov    BYTE PTR [esp+0x35],al
c0010db7:	8a 44 24 35          	mov    al,BYTE PTR [esp+0x35]
c0010dbb:	88 44 24 4e          	mov    BYTE PTR [esp+0x4e],al
c0010dbf:	80 7c 24 4e 5a       	cmp    BYTE PTR [esp+0x4e],0x5a
c0010dc4:	74 de                	je     c0010da4 <ACPI::detectPCI()+0x164>
c0010dc6:	80 7c 24 4e 1c       	cmp    BYTE PTR [esp+0x4e],0x1c
c0010dcb:	0f 85 93 00 00 00    	jne    c0010e64 <ACPI::detectPCI()+0x224>
c0010dd1:	eb d1                	jmp    c0010da4 <ACPI::detectPCI()+0x164>
c0010dd3:	90                   	nop
c0010dd4:	8a 44 24 5e          	mov    al,BYTE PTR [esp+0x5e]
c0010dd8:	83 f0 01             	xor    eax,0x1
c0010ddb:	84 c0                	test   al,al
c0010ddd:	0f 84 89 00 00 00    	je     c0010e6c <ACPI::detectPCI()+0x22c>
c0010de3:	a1 40 63 02 c0       	mov    eax,ds:0xc0026340
c0010de8:	25 00 08 00 00       	and    eax,0x800
c0010ded:	74 7d                	je     c0010e6c <ACPI::detectPCI()+0x22c>
c0010def:	83 ec 0c             	sub    esp,0xc
c0010df2:	68 9c 3a 02 c0       	push   0xc0023a9c
c0010df7:	e8 f5 89 ff ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c0010dfc:	83 c4 10             	add    esp,0x10
c0010dff:	a1 40 63 02 c0       	mov    eax,ds:0xc0026340
c0010e04:	25 80 00 00 00       	and    eax,0x80
c0010e09:	75 61                	jne    c0010e6c <ACPI::detectPCI()+0x22c>
c0010e0b:	90                   	nop
c0010e0c:	66 c7 44 24 32 60 00 	mov    WORD PTR [esp+0x32],0x60
c0010e13:	66 8b 44 24 32       	mov    ax,WORD PTR [esp+0x32]
c0010e18:	89 c2                	mov    edx,eax
c0010e1a:	ec                   	in     al,dx
c0010e1b:	88 44 24 31          	mov    BYTE PTR [esp+0x31],al
c0010e1f:	8a 44 24 31          	mov    al,BYTE PTR [esp+0x31]
c0010e23:	88 44 24 4d          	mov    BYTE PTR [esp+0x4d],al
c0010e27:	80 7c 24 4d 5a       	cmp    BYTE PTR [esp+0x4d],0x5a
c0010e2c:	74 0a                	je     c0010e38 <ACPI::detectPCI()+0x1f8>
c0010e2e:	80 7c 24 4d 1c       	cmp    BYTE PTR [esp+0x4d],0x1c
c0010e33:	74 03                	je     c0010e38 <ACPI::detectPCI()+0x1f8>
c0010e35:	eb d5                	jmp    c0010e0c <ACPI::detectPCI()+0x1cc>
c0010e37:	90                   	nop
c0010e38:	66 c7 44 24 2e 60 00 	mov    WORD PTR [esp+0x2e],0x60
c0010e3f:	66 8b 44 24 2e       	mov    ax,WORD PTR [esp+0x2e]
c0010e44:	89 c2                	mov    edx,eax
c0010e46:	ec                   	in     al,dx
c0010e47:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c0010e4b:	8a 44 24 2d          	mov    al,BYTE PTR [esp+0x2d]
c0010e4f:	88 44 24 4c          	mov    BYTE PTR [esp+0x4c],al
c0010e53:	80 7c 24 4c 5a       	cmp    BYTE PTR [esp+0x4c],0x5a
c0010e58:	74 de                	je     c0010e38 <ACPI::detectPCI()+0x1f8>
c0010e5a:	80 7c 24 4c 1c       	cmp    BYTE PTR [esp+0x4c],0x1c
c0010e5f:	75 07                	jne    c0010e68 <ACPI::detectPCI()+0x228>
c0010e61:	eb d5                	jmp    c0010e38 <ACPI::detectPCI()+0x1f8>
c0010e63:	90                   	nop
c0010e64:	90                   	nop
c0010e65:	eb 05                	jmp    c0010e6c <ACPI::detectPCI()+0x22c>
c0010e67:	90                   	nop
c0010e68:	90                   	nop
c0010e69:	8d 76 00             	lea    esi,[esi+0x0]
c0010e6c:	c7 44 24 28 5c 01 00 00 	mov    DWORD PTR [esp+0x28],0x15c
c0010e74:	83 ec 0c             	sub    esp,0xc
c0010e77:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0010e7b:	e8 17 89 ff ff       	call   c0009797 <malloc>
c0010e80:	83 c4 10             	add    esp,0x10
c0010e83:	89 c3                	mov    ebx,eax
c0010e85:	83 ec 0c             	sub    esp,0xc
c0010e88:	53                   	push   ebx
c0010e89:	e8 84 ba 00 00       	call   c001c912 <PCI::PCI()>
c0010e8e:	83 c4 10             	add    esp,0x10
c0010e91:	89 5c 24 48          	mov    DWORD PTR [esp+0x48],ebx
c0010e95:	a1 40 63 02 c0       	mov    eax,ds:0xc0026340
c0010e9a:	25 00 08 00 00       	and    eax,0x800
c0010e9f:	74 7b                	je     c0010f1c <ACPI::detectPCI()+0x2dc>
c0010ea1:	83 ec 0c             	sub    esp,0xc
c0010ea4:	68 23 3c 02 c0       	push   0xc0023c23
c0010ea9:	e8 43 89 ff ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c0010eae:	83 c4 10             	add    esp,0x10
c0010eb1:	a1 40 63 02 c0       	mov    eax,ds:0xc0026340
c0010eb6:	25 80 00 00 00       	and    eax,0x80
c0010ebb:	75 5f                	jne    c0010f1c <ACPI::detectPCI()+0x2dc>
c0010ebd:	8d 76 00             	lea    esi,[esi+0x0]
c0010ec0:	66 c7 44 24 26 60 00 	mov    WORD PTR [esp+0x26],0x60
c0010ec7:	66 8b 44 24 26       	mov    ax,WORD PTR [esp+0x26]
c0010ecc:	89 c2                	mov    edx,eax
c0010ece:	ec                   	in     al,dx
c0010ecf:	88 44 24 25          	mov    BYTE PTR [esp+0x25],al
c0010ed3:	8a 44 24 25          	mov    al,BYTE PTR [esp+0x25]
c0010ed7:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c0010edb:	80 7c 24 47 5a       	cmp    BYTE PTR [esp+0x47],0x5a
c0010ee0:	74 0a                	je     c0010eec <ACPI::detectPCI()+0x2ac>
c0010ee2:	80 7c 24 47 1c       	cmp    BYTE PTR [esp+0x47],0x1c
c0010ee7:	74 03                	je     c0010eec <ACPI::detectPCI()+0x2ac>
c0010ee9:	eb d5                	jmp    c0010ec0 <ACPI::detectPCI()+0x280>
c0010eeb:	90                   	nop
c0010eec:	66 c7 44 24 22 60 00 	mov    WORD PTR [esp+0x22],0x60
c0010ef3:	66 8b 44 24 22       	mov    ax,WORD PTR [esp+0x22]
c0010ef8:	89 c2                	mov    edx,eax
c0010efa:	ec                   	in     al,dx
c0010efb:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c0010eff:	8a 44 24 21          	mov    al,BYTE PTR [esp+0x21]
c0010f03:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0010f07:	80 7c 24 46 5a       	cmp    BYTE PTR [esp+0x46],0x5a
c0010f0c:	74 de                	je     c0010eec <ACPI::detectPCI()+0x2ac>
c0010f0e:	80 7c 24 46 1c       	cmp    BYTE PTR [esp+0x46],0x1c
c0010f13:	75 03                	jne    c0010f18 <ACPI::detectPCI()+0x2d8>
c0010f15:	eb d5                	jmp    c0010eec <ACPI::detectPCI()+0x2ac>
c0010f17:	90                   	nop
c0010f18:	90                   	nop
c0010f19:	8d 76 00             	lea    esi,[esi+0x0]
c0010f1c:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0010f20:	83 ec 08             	sub    esp,0x8
c0010f23:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0010f27:	50                   	push   eax
c0010f28:	e8 81 cc ff ff       	call   c000dbae <Device::addChild(Device*)>
c0010f2d:	83 c4 10             	add    esp,0x10
c0010f30:	a1 40 63 02 c0       	mov    eax,ds:0xc0026340
c0010f35:	25 00 08 00 00       	and    eax,0x800
c0010f3a:	74 78                	je     c0010fb4 <ACPI::detectPCI()+0x374>
c0010f3c:	83 ec 0c             	sub    esp,0xc
c0010f3f:	68 29 3c 02 c0       	push   0xc0023c29
c0010f44:	e8 a8 88 ff ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c0010f49:	83 c4 10             	add    esp,0x10
c0010f4c:	a1 40 63 02 c0       	mov    eax,ds:0xc0026340
c0010f51:	25 80 00 00 00       	and    eax,0x80
c0010f56:	75 5c                	jne    c0010fb4 <ACPI::detectPCI()+0x374>
c0010f58:	66 c7 44 24 1e 60 00 	mov    WORD PTR [esp+0x1e],0x60
c0010f5f:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0010f64:	89 c2                	mov    edx,eax
c0010f66:	ec                   	in     al,dx
c0010f67:	88 44 24 1d          	mov    BYTE PTR [esp+0x1d],al
c0010f6b:	8a 44 24 1d          	mov    al,BYTE PTR [esp+0x1d]
c0010f6f:	88 44 24 45          	mov    BYTE PTR [esp+0x45],al
c0010f73:	80 7c 24 45 5a       	cmp    BYTE PTR [esp+0x45],0x5a
c0010f78:	74 0a                	je     c0010f84 <ACPI::detectPCI()+0x344>
c0010f7a:	80 7c 24 45 1c       	cmp    BYTE PTR [esp+0x45],0x1c
c0010f7f:	74 03                	je     c0010f84 <ACPI::detectPCI()+0x344>
c0010f81:	eb d5                	jmp    c0010f58 <ACPI::detectPCI()+0x318>
c0010f83:	90                   	nop
c0010f84:	66 c7 44 24 1a 60 00 	mov    WORD PTR [esp+0x1a],0x60
c0010f8b:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0010f90:	89 c2                	mov    edx,eax
c0010f92:	ec                   	in     al,dx
c0010f93:	88 44 24 19          	mov    BYTE PTR [esp+0x19],al
c0010f97:	8a 44 24 19          	mov    al,BYTE PTR [esp+0x19]
c0010f9b:	88 44 24 44          	mov    BYTE PTR [esp+0x44],al
c0010f9f:	80 7c 24 44 5a       	cmp    BYTE PTR [esp+0x44],0x5a
c0010fa4:	74 de                	je     c0010f84 <ACPI::detectPCI()+0x344>
c0010fa6:	80 7c 24 44 1c       	cmp    BYTE PTR [esp+0x44],0x1c
c0010fab:	75 03                	jne    c0010fb0 <ACPI::detectPCI()+0x370>
c0010fad:	eb d5                	jmp    c0010f84 <ACPI::detectPCI()+0x344>
c0010faf:	90                   	nop
c0010fb0:	90                   	nop
c0010fb1:	8d 76 00             	lea    esi,[esi+0x0]
c0010fb4:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0010fb8:	8b 00                	mov    eax,DWORD PTR [eax]
c0010fba:	83 c0 08             	add    eax,0x8
c0010fbd:	8b 00                	mov    eax,DWORD PTR [eax]
c0010fbf:	80 7c 24 5e 00       	cmp    BYTE PTR [esp+0x5e],0x0
c0010fc4:	74 0a                	je     c0010fd0 <ACPI::detectPCI()+0x390>
c0010fc6:	ba 01 00 00 00       	mov    edx,0x1
c0010fcb:	eb 0b                	jmp    c0010fd8 <ACPI::detectPCI()+0x398>
c0010fcd:	8d 76 00             	lea    esi,[esi+0x0]
c0010fd0:	ba 02 00 00 00       	mov    edx,0x2
c0010fd5:	8d 76 00             	lea    esi,[esi+0x0]
c0010fd8:	6a 00                	push   0x0
c0010fda:	6a 00                	push   0x0
c0010fdc:	52                   	push   edx
c0010fdd:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0010fe1:	ff d0                	call   eax
c0010fe3:	83 c4 10             	add    esp,0x10
c0010fe6:	a1 40 63 02 c0       	mov    eax,ds:0xc0026340
c0010feb:	25 00 08 00 00       	and    eax,0x800
c0010ff0:	0f 84 26 01 00 00    	je     c001111c <ACPI::detectPCI()+0x4dc>
c0010ff6:	83 ec 0c             	sub    esp,0xc
c0010ff9:	68 2f 3c 02 c0       	push   0xc0023c2f
c0010ffe:	e8 ee 87 ff ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c0011003:	83 c4 10             	add    esp,0x10
c0011006:	a1 40 63 02 c0       	mov    eax,ds:0xc0026340
c001100b:	25 80 00 00 00       	and    eax,0x80
c0011010:	0f 85 06 01 00 00    	jne    c001111c <ACPI::detectPCI()+0x4dc>
c0011016:	66 90                	xchg   ax,ax
c0011018:	66 c7 44 24 16 60 00 	mov    WORD PTR [esp+0x16],0x60
c001101f:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0011024:	89 c2                	mov    edx,eax
c0011026:	ec                   	in     al,dx
c0011027:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c001102b:	8a 44 24 15          	mov    al,BYTE PTR [esp+0x15]
c001102f:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0011033:	80 7c 24 43 5a       	cmp    BYTE PTR [esp+0x43],0x5a
c0011038:	74 0a                	je     c0011044 <ACPI::detectPCI()+0x404>
c001103a:	80 7c 24 43 1c       	cmp    BYTE PTR [esp+0x43],0x1c
c001103f:	74 03                	je     c0011044 <ACPI::detectPCI()+0x404>
c0011041:	eb d5                	jmp    c0011018 <ACPI::detectPCI()+0x3d8>
c0011043:	90                   	nop
c0011044:	66 c7 44 24 12 60 00 	mov    WORD PTR [esp+0x12],0x60
c001104b:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0011050:	89 c2                	mov    edx,eax
c0011052:	ec                   	in     al,dx
c0011053:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0011057:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001105b:	88 44 24 42          	mov    BYTE PTR [esp+0x42],al
c001105f:	80 7c 24 42 5a       	cmp    BYTE PTR [esp+0x42],0x5a
c0011064:	74 de                	je     c0011044 <ACPI::detectPCI()+0x404>
c0011066:	80 7c 24 42 1c       	cmp    BYTE PTR [esp+0x42],0x1c
c001106b:	0f 85 a7 00 00 00    	jne    c0011118 <ACPI::detectPCI()+0x4d8>
c0011071:	eb d1                	jmp    c0011044 <ACPI::detectPCI()+0x404>
c0011073:	90                   	nop
c0011074:	83 ec 0c             	sub    esp,0xc
c0011077:	68 35 3c 02 c0       	push   0xc0023c35
c001107c:	e8 b0 b6 ff ff       	call   c000c731 <Dbg::kprintf(char const*, ...)>
c0011081:	83 c4 10             	add    esp,0x10
c0011084:	83 ec 0c             	sub    esp,0xc
c0011087:	68 40 3c 02 c0       	push   0xc0023c40
c001108c:	e8 60 87 ff ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c0011091:	83 c4 10             	add    esp,0x10
c0011094:	c7 44 24 0c 70 02 00 00 	mov    DWORD PTR [esp+0xc],0x270
c001109c:	83 ec 0c             	sub    esp,0xc
c001109f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00110a3:	e8 ef 86 ff ff       	call   c0009797 <malloc>
c00110a8:	83 c4 10             	add    esp,0x10
c00110ab:	89 c3                	mov    ebx,eax
c00110ad:	83 ec 0c             	sub    esp,0xc
c00110b0:	53                   	push   ebx
c00110b1:	e8 c6 c9 00 00       	call   c001da7c <IDE::IDE()>
c00110b6:	83 c4 10             	add    esp,0x10
c00110b9:	89 5c 24 3c          	mov    DWORD PTR [esp+0x3c],ebx
c00110bd:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00110c1:	83 ec 08             	sub    esp,0x8
c00110c4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00110c8:	50                   	push   eax
c00110c9:	e8 e0 ca ff ff       	call   c000dbae <Device::addChild(Device*)>
c00110ce:	83 c4 10             	add    esp,0x10
c00110d1:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00110d5:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c00110df:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00110e3:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c00110ec:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00110f0:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c00110f9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00110fd:	8b 00                	mov    eax,DWORD PTR [eax]
c00110ff:	83 c0 08             	add    eax,0x8
c0011102:	8b 00                	mov    eax,DWORD PTR [eax]
c0011104:	6a 00                	push   0x0
c0011106:	6a 00                	push   0x0
c0011108:	6a 00                	push   0x0
c001110a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001110e:	ff d0                	call   eax
c0011110:	83 c4 10             	add    esp,0x10
c0011113:	eb 07                	jmp    c001111c <ACPI::detectPCI()+0x4dc>
c0011115:	8d 76 00             	lea    esi,[esi+0x0]
c0011118:	90                   	nop
c0011119:	8d 76 00             	lea    esi,[esi+0x0]
c001111c:	90                   	nop
c001111d:	83 c4 68             	add    esp,0x68
c0011120:	5b                   	pop    ebx
c0011121:	c3                   	ret    
c0011122:	66 90                	xchg   ax,ax

c0011124 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c0011124:	83 ec 1c             	sub    esp,0x1c
c0011127:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001112b:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c001112e:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0011132:	a1 28 63 02 c0       	mov    eax,ds:0xc0026328
c0011137:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c001113c:	83 ec 08             	sub    esp,0x8
c001113f:	52                   	push   edx
c0011140:	50                   	push   eax
c0011141:	e8 bc 7c ff ff       	call   c0008e02 <Computer::readCMOS(unsigned char)>
c0011146:	83 c4 10             	add    esp,0x10
c0011149:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001114d:	a1 28 63 02 c0       	mov    eax,ds:0xc0026328
c0011152:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0011157:	83 ec 04             	sub    esp,0x4
c001115a:	6a 01                	push   0x1
c001115c:	52                   	push   edx
c001115d:	50                   	push   eax
c001115e:	e8 bd 7d ff ff       	call   c0008f20 <Computer::writeCMOS(unsigned char, unsigned char)>
c0011163:	83 c4 10             	add    esp,0x10
c0011166:	90                   	nop
c0011167:	83 c4 1c             	add    esp,0x1c
c001116a:	c3                   	ret    
c001116b:	90                   	nop

c001116c <ACPI::sleep()>:
c001116c:	83 ec 0c             	sub    esp,0xc
c001116f:	83 ec 0c             	sub    esp,0xc
c0011172:	68 55 3c 02 c0       	push   0xc0023c55
c0011177:	e8 b5 b5 ff ff       	call   c000c731 <Dbg::kprintf(char const*, ...)>
c001117c:	83 c4 10             	add    esp,0x10
c001117f:	a1 20 89 02 c0       	mov    eax,ds:0xc0028920
c0011184:	85 c0                	test   eax,eax
c0011186:	74 18                	je     c00111a0 <ACPI::sleep()+0x34>
c0011188:	83 ec 0c             	sub    esp,0xc
c001118b:	68 62 3c 02 c0       	push   0xc0023c62
c0011190:	e8 9c b5 ff ff       	call   c000c731 <Dbg::kprintf(char const*, ...)>
c0011195:	83 c4 10             	add    esp,0x10
c0011198:	a1 20 89 02 c0       	mov    eax,ds:0xc0028920
c001119d:	ff d0                	call   eax
c001119f:	90                   	nop
c00111a0:	90                   	nop
c00111a1:	83 c4 0c             	add    esp,0xc
c00111a4:	c3                   	ret    
c00111a5:	90                   	nop
c00111a6:	66 90                	xchg   ax,ax

c00111a8 <ACPI::open(int, int, void*)>:
c00111a8:	57                   	push   edi
c00111a9:	56                   	push   esi
c00111aa:	53                   	push   ebx
c00111ab:	81 ec 70 01 00 00    	sub    esp,0x170
c00111b1:	83 ec 0c             	sub    esp,0xc
c00111b4:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c00111bb:	e8 80 fa ff ff       	call   c0010c40 <ACPI::detectPCI()>
c00111c0:	83 c4 10             	add    esp,0x10
c00111c3:	83 ec 0c             	sub    esp,0xc
c00111c6:	68 c0 3a 02 c0       	push   0xc0023ac0
c00111cb:	e8 21 86 ff ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c00111d0:	83 c4 10             	add    esp,0x10
c00111d3:	83 ec 0c             	sub    esp,0xc
c00111d6:	68 7c 3c 02 c0       	push   0xc0023c7c
c00111db:	e8 ab 39 00 00       	call   c0014b8b <Thr::loadKernelSymbolTable(char const*)>
c00111e0:	83 c4 10             	add    esp,0x10
c00111e3:	c6 84 24 6f 01 00 00 00 	mov    BYTE PTR [esp+0x16f],0x0
c00111eb:	c7 84 24 44 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x144],0x114
c00111f6:	83 ec 0c             	sub    esp,0xc
c00111f9:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c0011200:	e8 92 85 ff ff       	call   c0009797 <malloc>
c0011205:	83 c4 10             	add    esp,0x10
c0011208:	89 c3                	mov    ebx,eax
c001120a:	a1 30 98 02 c0       	mov    eax,ds:0xc0029830
c001120f:	83 ec 04             	sub    esp,0x4
c0011212:	50                   	push   eax
c0011213:	68 9a 3c 02 c0       	push   0xc0023c9a
c0011218:	53                   	push   ebx
c0011219:	e8 7e ba ff ff       	call   c000cc9c <File::File(char const*, Process*)>
c001121e:	83 c4 10             	add    esp,0x10
c0011221:	89 9c 24 68 01 00 00 	mov    DWORD PTR [esp+0x168],ebx
c0011228:	83 ec 08             	sub    esp,0x8
c001122b:	6a 01                	push   0x1
c001122d:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c0011234:	e8 3d bb ff ff       	call   c000cd76 <File::open(FileOpenMode)>
c0011239:	83 c4 10             	add    esp,0x10
c001123c:	89 84 24 64 01 00 00 	mov    DWORD PTR [esp+0x164],eax
c0011243:	83 bc 24 64 01 00 00 00 	cmp    DWORD PTR [esp+0x164],0x0
c001124b:	75 17                	jne    c0011264 <ACPI::open(int, int, void*)+0xbc>
c001124d:	83 ec 0c             	sub    esp,0xc
c0011250:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c0011257:	e8 78 bb ff ff       	call   c000cdd4 <File::close()>
c001125c:	83 c4 10             	add    esp,0x10
c001125f:	eb 0b                	jmp    c001126c <ACPI::open(int, int, void*)+0xc4>
c0011261:	8d 76 00             	lea    esi,[esi+0x0]
c0011264:	c6 84 24 6f 01 00 00 01 	mov    BYTE PTR [esp+0x16f],0x1
c001126c:	83 bc 24 68 01 00 00 00 	cmp    DWORD PTR [esp+0x168],0x0
c0011274:	74 1e                	je     c0011294 <ACPI::open(int, int, void*)+0xec>
c0011276:	8b 84 24 68 01 00 00 	mov    eax,DWORD PTR [esp+0x168]
c001127d:	8b 00                	mov    eax,DWORD PTR [eax]
c001127f:	83 c0 08             	add    eax,0x8
c0011282:	8b 00                	mov    eax,DWORD PTR [eax]
c0011284:	83 ec 0c             	sub    esp,0xc
c0011287:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c001128e:	ff d0                	call   eax
c0011290:	83 c4 10             	add    esp,0x10
c0011293:	90                   	nop
c0011294:	8a 84 24 6f 01 00 00 	mov    al,BYTE PTR [esp+0x16f]
c001129b:	83 f0 01             	xor    eax,0x1
c001129e:	84 c0                	test   al,al
c00112a0:	74 42                	je     c00112e4 <ACPI::open(int, int, void*)+0x13c>
c00112a2:	83 ec 0c             	sub    esp,0xc
c00112a5:	68 b8 3c 02 c0       	push   0xc0023cb8
c00112aa:	e8 42 85 ff ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c00112af:	83 c4 10             	add    esp,0x10
c00112b2:	83 ec 04             	sub    esp,0x4
c00112b5:	6a 0c                	push   0xc
c00112b7:	68 d3 3c 02 c0       	push   0xc0023cd3
c00112bc:	68 e4 3c 02 c0       	push   0xc0023ce4
c00112c1:	e8 4d 20 00 00       	call   c0013313 <Reg::readIntWithDefault(char*, char*, int)>
c00112c6:	83 c4 10             	add    esp,0x10
c00112c9:	89 84 24 60 01 00 00 	mov    DWORD PTR [esp+0x160],eax
c00112d0:	83 ec 0c             	sub    esp,0xc
c00112d3:	ff b4 24 6c 01 00 00 	push   DWORD PTR [esp+0x16c]
c00112da:	e8 00 a3 ff ff       	call   c000b5df <Virt::setupPageSwapping(int)>
c00112df:	83 c4 10             	add    esp,0x10
c00112e2:	66 90                	xchg   ax,ax
c00112e4:	83 ec 0c             	sub    esp,0xc
c00112e7:	68 a6 28 02 c0       	push   0xc00228a6
c00112ec:	e8 00 85 ff ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c00112f1:	83 c4 10             	add    esp,0x10
c00112f4:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c00112fb:	83 ec 08             	sub    esp,0x8
c00112fe:	6a 12                	push   0x12
c0011300:	50                   	push   eax
c0011301:	e8 2c cc ff ff       	call   c000df32 <getDevicesOfType(DeviceType)>
c0011306:	83 c4 0c             	add    esp,0xc
c0011309:	8d 76 00             	lea    esi,[esi+0x0]
c001130c:	83 ec 0c             	sub    esp,0xc
c001130f:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0011316:	50                   	push   eax
c0011317:	e8 60 09 01 00       	call   c0021c7c <LinkedList<Device>::isEmpty()>
c001131c:	83 c4 10             	add    esp,0x10
c001131f:	83 f0 01             	xor    eax,0x1
c0011322:	84 c0                	test   al,al
c0011324:	0f 84 46 01 00 00    	je     c0011470 <ACPI::open(int, int, void*)+0x2c8>
c001132a:	83 ec 0c             	sub    esp,0xc
c001132d:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0011334:	50                   	push   eax
c0011335:	e8 5e 09 01 00       	call   c0021c98 <LinkedList<Device>::getFirstElement()>
c001133a:	83 c4 10             	add    esp,0x10
c001133d:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c0011344:	83 ec 0c             	sub    esp,0xc
c0011347:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c001134e:	50                   	push   eax
c001134f:	e8 4c 09 01 00       	call   c0021ca0 <LinkedList<Device>::removeFirst()>
c0011354:	83 c4 10             	add    esp,0x10
c0011357:	8b 84 24 5c 01 00 00 	mov    eax,DWORD PTR [esp+0x15c]
c001135e:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c0011365:	8b 94 24 58 01 00 00 	mov    edx,DWORD PTR [esp+0x158]
c001136c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0011370:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c0011376:	ba 09 00 00 00       	mov    edx,0x9
c001137b:	fc                   	cld    
c001137c:	89 c7                	mov    edi,eax
c001137e:	89 de                	mov    esi,ebx
c0011380:	89 d1                	mov    ecx,edx
c0011382:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0011384:	83 ec 08             	sub    esp,0x8
c0011387:	8d 44 24 38          	lea    eax,[esp+0x38]
c001138b:	50                   	push   eax
c001138c:	83 ec 24             	sub    esp,0x24
c001138f:	89 e0                	mov    eax,esp
c0011391:	89 c3                	mov    ebx,eax
c0011393:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0011397:	ba 09 00 00 00       	mov    edx,0x9
c001139c:	89 df                	mov    edi,ebx
c001139e:	89 c6                	mov    esi,eax
c00113a0:	89 d1                	mov    ecx,edx
c00113a2:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00113a4:	e8 47 ba 00 00       	call   c001cdf0 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c00113a9:	83 c4 30             	add    esp,0x30
c00113ac:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c00113b3:	83 bc 24 54 01 00 00 00 	cmp    DWORD PTR [esp+0x154],0x0
c00113bb:	0f 84 4b ff ff ff    	je     c001130c <ACPI::open(int, int, void*)+0x164>
c00113c1:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c00113cc:	83 ec 0c             	sub    esp,0xc
c00113cf:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c00113d6:	e8 bc 83 ff ff       	call   c0009797 <malloc>
c00113db:	83 c4 10             	add    esp,0x10
c00113de:	89 c3                	mov    ebx,eax
c00113e0:	a1 30 98 02 c0       	mov    eax,ds:0xc0029830
c00113e5:	83 ec 04             	sub    esp,0x4
c00113e8:	50                   	push   eax
c00113e9:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c00113f0:	53                   	push   ebx
c00113f1:	e8 a6 b8 ff ff       	call   c000cc9c <File::File(char const*, Process*)>
c00113f6:	83 c4 10             	add    esp,0x10
c00113f9:	89 9c 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],ebx
c0011400:	83 ec 0c             	sub    esp,0xc
c0011403:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c001140a:	e8 d5 bb ff ff       	call   c000cfe4 <File::exists()>
c001140f:	83 c4 10             	add    esp,0x10
c0011412:	84 c0                	test   al,al
c0011414:	74 2a                	je     c0011440 <ACPI::open(int, int, void*)+0x298>
c0011416:	83 ec 08             	sub    esp,0x8
c0011419:	6a 01                	push   0x1
c001141b:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c0011422:	e8 db 41 00 00       	call   c0015602 <Thr::loadDLL(char const*, bool)>
c0011427:	83 c4 10             	add    esp,0x10
c001142a:	83 ec 08             	sub    esp,0x8
c001142d:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c0011434:	50                   	push   eax
c0011435:	e8 f9 43 00 00       	call   c0015833 <Thr::executeDLL(unsigned long, void*)>
c001143a:	83 c4 10             	add    esp,0x10
c001143d:	8d 76 00             	lea    esi,[esi+0x0]
c0011440:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c0011448:	0f 84 be fe ff ff    	je     c001130c <ACPI::open(int, int, void*)+0x164>
c001144e:	8b 84 24 50 01 00 00 	mov    eax,DWORD PTR [esp+0x150]
c0011455:	8b 00                	mov    eax,DWORD PTR [eax]
c0011457:	83 c0 08             	add    eax,0x8
c001145a:	8b 00                	mov    eax,DWORD PTR [eax]
c001145c:	83 ec 0c             	sub    esp,0xc
c001145f:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c0011466:	ff d0                	call   eax
c0011468:	83 c4 10             	add    esp,0x10
c001146b:	e9 9c fe ff ff       	jmp    c001130c <ACPI::open(int, int, void*)+0x164>
c0011470:	83 ec 0c             	sub    esp,0xc
c0011473:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c001147a:	50                   	push   eax
c001147b:	e8 f8 07 01 00       	call   c0021c78 <LinkedList<Device>::~LinkedList()>
c0011480:	83 c4 10             	add    esp,0x10
c0011483:	8b 1d 28 63 02 c0    	mov    ebx,DWORD PTR ds:0xc0026328
c0011489:	83 ec 08             	sub    esp,0x8
c001148c:	6a 01                	push   0x1
c001148e:	68 eb 3c 02 c0       	push   0xc0023ceb
c0011493:	e8 6a 41 00 00       	call   c0015602 <Thr::loadDLL(char const*, bool)>
c0011498:	83 c4 10             	add    esp,0x10
c001149b:	83 ec 08             	sub    esp,0x8
c001149e:	53                   	push   ebx
c001149f:	50                   	push   eax
c00114a0:	e8 8e 43 00 00       	call   c0015833 <Thr::executeDLL(unsigned long, void*)>
c00114a5:	83 c4 10             	add    esp,0x10
c00114a8:	a1 28 63 02 c0       	mov    eax,ds:0xc0026328
c00114ad:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00114b3:	83 e0 04             	and    eax,0x4
c00114b6:	84 c0                	test   al,al
c00114b8:	0f 84 16 01 00 00    	je     c00115d4 <ACPI::open(int, int, void*)+0x42c>
c00114be:	83 ec 0c             	sub    esp,0xc
c00114c1:	68 08 3d 02 c0       	push   0xc0023d08
c00114c6:	e8 26 83 ff ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c00114cb:	83 c4 10             	add    esp,0x10
c00114ce:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c00114d9:	83 ec 0c             	sub    esp,0xc
c00114dc:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c00114e3:	e8 af 82 ff ff       	call   c0009797 <malloc>
c00114e8:	83 c4 10             	add    esp,0x10
c00114eb:	89 c3                	mov    ebx,eax
c00114ed:	a1 30 98 02 c0       	mov    eax,ds:0xc0029830
c00114f2:	83 ec 04             	sub    esp,0x4
c00114f5:	50                   	push   eax
c00114f6:	68 25 3d 02 c0       	push   0xc0023d25
c00114fb:	53                   	push   ebx
c00114fc:	e8 9b b7 ff ff       	call   c000cc9c <File::File(char const*, Process*)>
c0011501:	83 c4 10             	add    esp,0x10
c0011504:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c001150b:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c0011513:	74 1b                	je     c0011530 <ACPI::open(int, int, void*)+0x388>
c0011515:	83 ec 0c             	sub    esp,0xc
c0011518:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c001151f:	e8 c0 ba ff ff       	call   c000cfe4 <File::exists()>
c0011524:	83 c4 10             	add    esp,0x10
c0011527:	84 c0                	test   al,al
c0011529:	74 05                	je     c0011530 <ACPI::open(int, int, void*)+0x388>
c001152b:	b0 01                	mov    al,0x1
c001152d:	eb 05                	jmp    c0011534 <ACPI::open(int, int, void*)+0x38c>
c001152f:	90                   	nop
c0011530:	b0 00                	mov    al,0x0
c0011532:	66 90                	xchg   ax,ax
c0011534:	84 c0                	test   al,al
c0011536:	74 28                	je     c0011560 <ACPI::open(int, int, void*)+0x3b8>
c0011538:	83 ec 08             	sub    esp,0x8
c001153b:	6a 01                	push   0x1
c001153d:	68 25 3d 02 c0       	push   0xc0023d25
c0011542:	e8 bb 40 00 00       	call   c0015602 <Thr::loadDLL(char const*, bool)>
c0011547:	83 c4 10             	add    esp,0x10
c001154a:	83 ec 08             	sub    esp,0x8
c001154d:	ff b4 24 88 01 00 00 	push   DWORD PTR [esp+0x188]
c0011554:	50                   	push   eax
c0011555:	e8 d9 42 00 00       	call   c0015833 <Thr::executeDLL(unsigned long, void*)>
c001155a:	83 c4 10             	add    esp,0x10
c001155d:	8d 76 00             	lea    esi,[esi+0x0]
c0011560:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c0011568:	74 2a                	je     c0011594 <ACPI::open(int, int, void*)+0x3ec>
c001156a:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c0011572:	74 20                	je     c0011594 <ACPI::open(int, int, void*)+0x3ec>
c0011574:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c001157b:	8b 00                	mov    eax,DWORD PTR [eax]
c001157d:	83 c0 08             	add    eax,0x8
c0011580:	8b 00                	mov    eax,DWORD PTR [eax]
c0011582:	83 ec 0c             	sub    esp,0xc
c0011585:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c001158c:	ff d0                	call   eax
c001158e:	83 c4 10             	add    esp,0x10
c0011591:	8d 76 00             	lea    esi,[esi+0x0]
c0011594:	a1 48 8b 02 c0       	mov    eax,ds:0xc0028b48
c0011599:	83 ec 08             	sub    esp,0x8
c001159c:	68 42 3d 02 c0       	push   0xc0023d42
c00115a1:	50                   	push   eax
c00115a2:	e8 29 ef ff ff       	call   c00104d0 <findDataTable(unsigned char*, char*)>
c00115a7:	83 c4 10             	add    esp,0x10
c00115aa:	89 84 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],eax
c00115b1:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c00115b9:	74 19                	je     c00115d4 <ACPI::open(int, int, void*)+0x42c>
c00115bb:	83 ec 08             	sub    esp,0x8
c00115be:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c00115c5:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c00115cc:	e8 53 fb ff ff       	call   c0011124 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c00115d1:	83 c4 10             	add    esp,0x10
c00115d4:	b8 00 00 00 00       	mov    eax,0x0
c00115d9:	81 c4 70 01 00 00    	add    esp,0x170
c00115df:	5b                   	pop    ebx
c00115e0:	5e                   	pop    esi
c00115e1:	5f                   	pop    edi
c00115e2:	c3                   	ret    
c00115e3:	90                   	nop

c00115e4 <CPU::close(int, int, void*)>:
c00115e4:	31 c0                	xor    eax,eax
c00115e6:	c3                   	ret    
c00115e7:	90                   	nop

c00115e8 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c00115e8:	60                   	pusha  
c00115e9:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00115ed:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00115f1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00115f5:	9c                   	pushf  
c00115f6:	fa                   	cli    
c00115f7:	0f 09                	wbinvd 
c00115f9:	0f 30                	wrmsr  
c00115fb:	9d                   	popf   
c00115fc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011600:	89 02                	mov    DWORD PTR [edx],eax
c0011602:	61                   	popa   
c0011603:	c3                   	ret    

c0011604 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c0011604:	60                   	pusha  
c0011605:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0011609:	9c                   	pushf  
c001160a:	fa                   	cli    
c001160b:	0f 09                	wbinvd 
c001160d:	31 c0                	xor    eax,eax
c001160f:	31 d2                	xor    edx,edx
c0011611:	0f 32                	rdmsr  
c0011613:	9d                   	popf   
c0011614:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011618:	89 02                	mov    DWORD PTR [edx],eax
c001161a:	61                   	popa   
c001161b:	c3                   	ret    

c001161c <CPU::AMD_K6_writeback(int, int, int)>:
c001161c:	56                   	push   esi
c001161d:	53                   	push   ebx
c001161e:	83 ec 10             	sub    esp,0x10
c0011621:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011625:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c001162a:	75 5d                	jne    c0011689 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c001162c:	83 f8 08             	cmp    eax,0x8
c001162f:	75 09                	jne    c001163a <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c0011631:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c0011636:	7e 13                	jle    c001164b <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0011638:	eb 30                	jmp    c001166a <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c001163a:	83 f8 06             	cmp    eax,0x6
c001163d:	7c 4a                	jl     c0011689 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c001163f:	83 f8 07             	cmp    eax,0x7
c0011642:	7e 07                	jle    c001164b <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0011644:	83 f8 09             	cmp    eax,0x9
c0011647:	74 21                	je     c001166a <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0011649:	eb 3e                	jmp    c0011689 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c001164b:	89 e6                	mov    esi,esp
c001164d:	8b 1d 4c 63 02 c0    	mov    ebx,DWORD PTR ds:0xc002634c
c0011653:	56                   	push   esi
c0011654:	c1 eb 15             	shr    ebx,0x15
c0011657:	68 82 00 00 c0       	push   0xc0000082
c001165c:	83 e3 7e             	and    ebx,0x7e
c001165f:	e8 a0 ff ff ff       	call   c0011604 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0011664:	56                   	push   esi
c0011665:	6a 00                	push   0x0
c0011667:	53                   	push   ebx
c0011668:	eb 12                	jmp    c001167c <CPU::AMD_K6_writeback(int, int, int)+0x60>
c001166a:	89 e3                	mov    ebx,esp
c001166c:	53                   	push   ebx
c001166d:	68 82 00 00 c0       	push   0xc0000082
c0011672:	e8 8d ff ff ff       	call   c0011604 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0011677:	53                   	push   ebx
c0011678:	6a 00                	push   0x0
c001167a:	6a 00                	push   0x0
c001167c:	68 82 00 00 c0       	push   0xc0000082
c0011681:	e8 62 ff ff ff       	call   c00115e8 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c0011686:	83 c4 18             	add    esp,0x18
c0011689:	83 c4 10             	add    esp,0x10
c001168c:	5b                   	pop    ebx
c001168d:	5e                   	pop    esi
c001168e:	c3                   	ret    
c001168f:	90                   	nop

c0011690 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0011690:	55                   	push   ebp
c0011691:	57                   	push   edi
c0011692:	56                   	push   esi
c0011693:	53                   	push   ebx
c0011694:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011698:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001169c:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00116a0:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00116a4:	39 05 50 5a 02 c0    	cmp    DWORD PTR ds:0xc0025a50,eax
c00116aa:	75 23                	jne    c00116cf <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c00116ac:	a1 ac 8d 02 c0       	mov    eax,ds:0xc0028dac
c00116b1:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00116b5:	89 06                	mov    DWORD PTR [esi],eax
c00116b7:	a1 a8 8d 02 c0       	mov    eax,ds:0xc0028da8
c00116bc:	89 07                	mov    DWORD PTR [edi],eax
c00116be:	a1 a4 8d 02 c0       	mov    eax,ds:0xc0028da4
c00116c3:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c00116c6:	a1 a0 8d 02 c0       	mov    eax,ds:0xc0028da0
c00116cb:	89 02                	mov    DWORD PTR [edx],eax
c00116cd:	eb 3f                	jmp    c001170e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c00116cf:	31 c9                	xor    ecx,ecx
c00116d1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00116d5:	0f a2                	cpuid  
c00116d7:	89 06                	mov    DWORD PTR [esi],eax
c00116d9:	89 1f                	mov    DWORD PTR [edi],ebx
c00116db:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00116df:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c00116e2:	89 10                	mov    DWORD PTR [eax],edx
c00116e4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00116e8:	a3 50 5a 02 c0       	mov    ds:0xc0025a50,eax
c00116ed:	8b 06                	mov    eax,DWORD PTR [esi]
c00116ef:	a3 ac 8d 02 c0       	mov    ds:0xc0028dac,eax
c00116f4:	8b 07                	mov    eax,DWORD PTR [edi]
c00116f6:	a3 a8 8d 02 c0       	mov    ds:0xc0028da8,eax
c00116fb:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00116fe:	a3 a4 8d 02 c0       	mov    ds:0xc0028da4,eax
c0011703:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0011707:	8b 00                	mov    eax,DWORD PTR [eax]
c0011709:	a3 a0 8d 02 c0       	mov    ds:0xc0028da0,eax
c001170e:	5b                   	pop    ebx
c001170f:	5e                   	pop    esi
c0011710:	5f                   	pop    edi
c0011711:	5d                   	pop    ebp
c0011712:	c3                   	ret    
c0011713:	90                   	nop

c0011714 <CPU::cpuidCheckEDX(unsigned int)>:
c0011714:	83 ec 10             	sub    esp,0x10
c0011717:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001171b:	50                   	push   eax
c001171c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0011720:	50                   	push   eax
c0011721:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0011725:	50                   	push   eax
c0011726:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001172a:	50                   	push   eax
c001172b:	6a 01                	push   0x1
c001172d:	e8 5e ff ff ff       	call   c0011690 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0011732:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011736:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c001173a:	0f 95 c0             	setne  al
c001173d:	83 c4 24             	add    esp,0x24
c0011740:	c3                   	ret    
c0011741:	90                   	nop

c0011742 <CPU::cpuidCheckECX(unsigned int)>:
c0011742:	83 ec 10             	sub    esp,0x10
c0011745:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0011749:	50                   	push   eax
c001174a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001174e:	50                   	push   eax
c001174f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0011753:	50                   	push   eax
c0011754:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0011758:	50                   	push   eax
c0011759:	6a 01                	push   0x1
c001175b:	e8 30 ff ff ff       	call   c0011690 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0011760:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011764:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0011768:	0f 95 c0             	setne  al
c001176b:	83 c4 24             	add    esp,0x24
c001176e:	c3                   	ret    
c001176f:	90                   	nop

c0011770 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c0011770:	83 ec 10             	sub    esp,0x10
c0011773:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0011777:	50                   	push   eax
c0011778:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001177c:	50                   	push   eax
c001177d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0011781:	50                   	push   eax
c0011782:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0011786:	50                   	push   eax
c0011787:	6a 07                	push   0x7
c0011789:	e8 02 ff ff ff       	call   c0011690 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001178e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011792:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c0011796:	0f 95 c0             	setne  al
c0011799:	83 c4 24             	add    esp,0x24
c001179c:	c3                   	ret    
c001179d:	90                   	nop

c001179e <CPU::cpuidCheckExtendedECX(unsigned int)>:
c001179e:	83 ec 10             	sub    esp,0x10
c00117a1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00117a5:	50                   	push   eax
c00117a6:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00117aa:	50                   	push   eax
c00117ab:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00117af:	50                   	push   eax
c00117b0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00117b4:	50                   	push   eax
c00117b5:	6a 07                	push   0x7
c00117b7:	e8 d4 fe ff ff       	call   c0011690 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00117bc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00117c0:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c00117c4:	0f 95 c0             	setne  al
c00117c7:	83 c4 24             	add    esp,0x24
c00117ca:	c3                   	ret    
c00117cb:	90                   	nop

c00117cc <CPU::CPU()>:
c00117cc:	83 ec 0c             	sub    esp,0xc
c00117cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00117d3:	83 ec 08             	sub    esp,0x8
c00117d6:	68 65 3e 02 c0       	push   0xc0023e65
c00117db:	50                   	push   eax
c00117dc:	e8 d1 c5 ff ff       	call   c000ddb2 <Device::Device(char const*)>
c00117e1:	83 c4 10             	add    esp,0x10
c00117e4:	ba 3c 3f 02 c0       	mov    edx,0xc0023f3c
c00117e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00117ed:	89 10                	mov    DWORD PTR [eax],edx
c00117ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00117f3:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c00117fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011801:	05 78 01 00 00       	add    eax,0x178
c0011806:	83 ec 0c             	sub    esp,0xc
c0011809:	50                   	push   eax
c001180a:	e8 fb 77 ff ff       	call   c000900a <GDT::GDT()>
c001180f:	83 c4 10             	add    esp,0x10
c0011812:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011816:	05 7c 09 00 00       	add    eax,0x97c
c001181b:	83 ec 0c             	sub    esp,0xc
c001181e:	50                   	push   eax
c001181f:	e8 60 7a ff ff       	call   c0009284 <IDT::IDT()>
c0011824:	83 c4 10             	add    esp,0x10
c0011827:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001182b:	05 7c 11 00 00       	add    eax,0x117c
c0011830:	83 ec 0c             	sub    esp,0xc
c0011833:	50                   	push   eax
c0011834:	e8 df 94 ff ff       	call   c000ad18 <TSS::TSS()>
c0011839:	83 c4 10             	add    esp,0x10
c001183c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011840:	c6 80 90 11 00 00 00 	mov    BYTE PTR [eax+0x1190],0x0
c0011847:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001184b:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c0011855:	90                   	nop
c0011856:	83 c4 0c             	add    esp,0xc
c0011859:	c3                   	ret    

c001185a <CPU::displayFeatures()>:
c001185a:	c3                   	ret    
c001185b:	90                   	nop

c001185c <CPU::detectFeatures()>:
c001185c:	55                   	push   ebp
c001185d:	57                   	push   edi
c001185e:	56                   	push   esi
c001185f:	53                   	push   ebx
c0011860:	83 ec 30             	sub    esp,0x30
c0011863:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0011867:	81 a3 8c 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x118c],0xfff80700
c0011871:	c6 83 90 11 00 00 01 	mov    BYTE PTR [ebx+0x1190],0x1
c0011878:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c001187e:	6a 0d                	push   0xd
c0011880:	6a 00                	push   0x0
c0011882:	55                   	push   ebp
c0011883:	e8 20 ec fe ff       	call   c00004a8 <memset>
c0011888:	83 c4 10             	add    esp,0x10
c001188b:	a1 28 63 02 c0       	mov    eax,ds:0xc0026328
c0011890:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c0011897:	0f 84 e8 05 00 00    	je     c0011e85 <CPU::detectFeatures()+0x629>
c001189d:	83 ec 0c             	sub    esp,0xc
c00118a0:	89 ef                	mov    edi,ebp
c00118a2:	6a 10                	push   0x10
c00118a4:	e8 6b fe ff ff       	call   c0011714 <CPU::cpuidCheckEDX(unsigned int)>
c00118a9:	83 e0 01             	and    eax,0x1
c00118ac:	8d 14 00             	lea    edx,[eax+eax*1]
c00118af:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c00118b5:	83 e0 fd             	and    eax,0xfffffffd
c00118b8:	09 d0                	or     eax,edx
c00118ba:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c00118c0:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c00118c7:	e8 48 fe ff ff       	call   c0011714 <CPU::cpuidCheckEDX(unsigned int)>
c00118cc:	83 e0 01             	and    eax,0x1
c00118cf:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00118d6:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c00118dc:	83 e0 fb             	and    eax,0xfffffffb
c00118df:	09 d0                	or     eax,edx
c00118e1:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c00118e7:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c00118ee:	e8 21 fe ff ff       	call   c0011714 <CPU::cpuidCheckEDX(unsigned int)>
c00118f3:	83 e0 01             	and    eax,0x1
c00118f6:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c00118fd:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c0011903:	83 e0 f7             	and    eax,0xfffffff7
c0011906:	09 d0                	or     eax,edx
c0011908:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001190e:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c0011915:	e8 fa fd ff ff       	call   c0011714 <CPU::cpuidCheckEDX(unsigned int)>
c001191a:	83 e0 01             	and    eax,0x1
c001191d:	c1 e0 04             	shl    eax,0x4
c0011920:	88 c2                	mov    dl,al
c0011922:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c0011928:	83 e0 ef             	and    eax,0xffffffef
c001192b:	09 d0                	or     eax,edx
c001192d:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c0011933:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c001193a:	e8 d5 fd ff ff       	call   c0011714 <CPU::cpuidCheckEDX(unsigned int)>
c001193f:	83 e0 01             	and    eax,0x1
c0011942:	c1 e0 05             	shl    eax,0x5
c0011945:	88 c2                	mov    dl,al
c0011947:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001194d:	83 e0 df             	and    eax,0xffffffdf
c0011950:	09 d0                	or     eax,edx
c0011952:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c0011958:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c001195f:	e8 b0 fd ff ff       	call   c0011714 <CPU::cpuidCheckEDX(unsigned int)>
c0011964:	83 e0 01             	and    eax,0x1
c0011967:	8d 14 00             	lea    edx,[eax+eax*1]
c001196a:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c0011970:	83 e0 fd             	and    eax,0xfffffffd
c0011973:	09 d0                	or     eax,edx
c0011975:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c001197b:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c0011982:	e8 8d fd ff ff       	call   c0011714 <CPU::cpuidCheckEDX(unsigned int)>
c0011987:	83 e0 01             	and    eax,0x1
c001198a:	c1 e0 06             	shl    eax,0x6
c001198d:	88 c2                	mov    dl,al
c001198f:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c0011995:	83 e0 bf             	and    eax,0xffffffbf
c0011998:	09 d0                	or     eax,edx
c001199a:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c00119a0:	58                   	pop    eax
c00119a1:	8d 44 24 28          	lea    eax,[esp+0x28]
c00119a5:	50                   	push   eax
c00119a6:	8d 44 24 28          	lea    eax,[esp+0x28]
c00119aa:	50                   	push   eax
c00119ab:	8d 74 24 28          	lea    esi,[esp+0x28]
c00119af:	56                   	push   esi
c00119b0:	8d 44 24 28          	lea    eax,[esp+0x28]
c00119b4:	50                   	push   eax
c00119b5:	6a 00                	push   0x0
c00119b7:	e8 d4 fc ff ff       	call   c0011690 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00119bc:	b8 04 00 00 00       	mov    eax,0x4
c00119c1:	89 c1                	mov    ecx,eax
c00119c3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00119c5:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c00119cb:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c00119cf:	89 c1                	mov    ecx,eax
c00119d1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00119d3:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c00119d9:	8d 74 24 38          	lea    esi,[esp+0x38]
c00119dd:	89 c1                	mov    ecx,eax
c00119df:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00119e1:	83 c4 18             	add    esp,0x18
c00119e4:	68 74 3d 02 c0       	push   0xc0023d74
c00119e9:	55                   	push   ebp
c00119ea:	e8 01 ec fe ff       	call   c00005f0 <strcmp>
c00119ef:	83 c4 10             	add    esp,0x10
c00119f2:	85 c0                	test   eax,eax
c00119f4:	75 0f                	jne    c0011a05 <CPU::detectFeatures()+0x1a9>
c00119f6:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c0011a00:	e9 22 02 00 00       	jmp    c0011c27 <CPU::detectFeatures()+0x3cb>
c0011a05:	50                   	push   eax
c0011a06:	50                   	push   eax
c0011a07:	68 81 3d 02 c0       	push   0xc0023d81
c0011a0c:	55                   	push   ebp
c0011a0d:	e8 de eb fe ff       	call   c00005f0 <strcmp>
c0011a12:	83 c4 10             	add    esp,0x10
c0011a15:	85 c0                	test   eax,eax
c0011a17:	74 dd                	je     c00119f6 <CPU::detectFeatures()+0x19a>
c0011a19:	50                   	push   eax
c0011a1a:	50                   	push   eax
c0011a1b:	68 8e 3d 02 c0       	push   0xc0023d8e
c0011a20:	55                   	push   ebp
c0011a21:	e8 ca eb fe ff       	call   c00005f0 <strcmp>
c0011a26:	83 c4 10             	add    esp,0x10
c0011a29:	85 c0                	test   eax,eax
c0011a2b:	74 2a                	je     c0011a57 <CPU::detectFeatures()+0x1fb>
c0011a2d:	50                   	push   eax
c0011a2e:	50                   	push   eax
c0011a2f:	68 9b 3d 02 c0       	push   0xc0023d9b
c0011a34:	55                   	push   ebp
c0011a35:	e8 b6 eb fe ff       	call   c00005f0 <strcmp>
c0011a3a:	83 c4 10             	add    esp,0x10
c0011a3d:	85 c0                	test   eax,eax
c0011a3f:	74 16                	je     c0011a57 <CPU::detectFeatures()+0x1fb>
c0011a41:	50                   	push   eax
c0011a42:	50                   	push   eax
c0011a43:	68 a8 3d 02 c0       	push   0xc0023da8
c0011a48:	55                   	push   ebp
c0011a49:	e8 a2 eb fe ff       	call   c00005f0 <strcmp>
c0011a4e:	83 c4 10             	add    esp,0x10
c0011a51:	85 c0                	test   eax,eax
c0011a53:	74 48                	je     c0011a9d <CPU::detectFeatures()+0x241>
c0011a55:	eb 0f                	jmp    c0011a66 <CPU::detectFeatures()+0x20a>
c0011a57:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c0011a61:	e9 c1 01 00 00       	jmp    c0011c27 <CPU::detectFeatures()+0x3cb>
c0011a66:	50                   	push   eax
c0011a67:	50                   	push   eax
c0011a68:	68 b5 3d 02 c0       	push   0xc0023db5
c0011a6d:	55                   	push   ebp
c0011a6e:	e8 7d eb fe ff       	call   c00005f0 <strcmp>
c0011a73:	83 c4 10             	add    esp,0x10
c0011a76:	85 c0                	test   eax,eax
c0011a78:	74 23                	je     c0011a9d <CPU::detectFeatures()+0x241>
c0011a7a:	57                   	push   edi
c0011a7b:	57                   	push   edi
c0011a7c:	68 c2 3d 02 c0       	push   0xc0023dc2
c0011a81:	55                   	push   ebp
c0011a82:	e8 69 eb fe ff       	call   c00005f0 <strcmp>
c0011a87:	83 c4 10             	add    esp,0x10
c0011a8a:	85 c0                	test   eax,eax
c0011a8c:	75 1e                	jne    c0011aac <CPU::detectFeatures()+0x250>
c0011a8e:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0011a98:	e9 8a 01 00 00       	jmp    c0011c27 <CPU::detectFeatures()+0x3cb>
c0011a9d:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c0011aa7:	e9 7b 01 00 00       	jmp    c0011c27 <CPU::detectFeatures()+0x3cb>
c0011aac:	56                   	push   esi
c0011aad:	56                   	push   esi
c0011aae:	68 cf 3d 02 c0       	push   0xc0023dcf
c0011ab3:	55                   	push   ebp
c0011ab4:	e8 37 eb fe ff       	call   c00005f0 <strcmp>
c0011ab9:	83 c4 10             	add    esp,0x10
c0011abc:	85 c0                	test   eax,eax
c0011abe:	75 0f                	jne    c0011acf <CPU::detectFeatures()+0x273>
c0011ac0:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c0011aca:	e9 58 01 00 00       	jmp    c0011c27 <CPU::detectFeatures()+0x3cb>
c0011acf:	51                   	push   ecx
c0011ad0:	51                   	push   ecx
c0011ad1:	68 8e 3d 02 c0       	push   0xc0023d8e
c0011ad6:	55                   	push   ebp
c0011ad7:	e8 14 eb fe ff       	call   c00005f0 <strcmp>
c0011adc:	83 c4 10             	add    esp,0x10
c0011adf:	85 c0                	test   eax,eax
c0011ae1:	75 0f                	jne    c0011af2 <CPU::detectFeatures()+0x296>
c0011ae3:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c0011aed:	e9 35 01 00 00       	jmp    c0011c27 <CPU::detectFeatures()+0x3cb>
c0011af2:	52                   	push   edx
c0011af3:	52                   	push   edx
c0011af4:	68 dc 3d 02 c0       	push   0xc0023ddc
c0011af9:	55                   	push   ebp
c0011afa:	e8 f1 ea fe ff       	call   c00005f0 <strcmp>
c0011aff:	83 c4 10             	add    esp,0x10
c0011b02:	85 c0                	test   eax,eax
c0011b04:	75 0f                	jne    c0011b15 <CPU::detectFeatures()+0x2b9>
c0011b06:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c0011b10:	e9 12 01 00 00       	jmp    c0011c27 <CPU::detectFeatures()+0x3cb>
c0011b15:	50                   	push   eax
c0011b16:	50                   	push   eax
c0011b17:	68 e9 3d 02 c0       	push   0xc0023de9
c0011b1c:	55                   	push   ebp
c0011b1d:	e8 ce ea fe ff       	call   c00005f0 <strcmp>
c0011b22:	83 c4 10             	add    esp,0x10
c0011b25:	85 c0                	test   eax,eax
c0011b27:	75 0f                	jne    c0011b38 <CPU::detectFeatures()+0x2dc>
c0011b29:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c0011b33:	e9 ef 00 00 00       	jmp    c0011c27 <CPU::detectFeatures()+0x3cb>
c0011b38:	50                   	push   eax
c0011b39:	50                   	push   eax
c0011b3a:	68 f6 3d 02 c0       	push   0xc0023df6
c0011b3f:	55                   	push   ebp
c0011b40:	e8 ab ea fe ff       	call   c00005f0 <strcmp>
c0011b45:	83 c4 10             	add    esp,0x10
c0011b48:	85 c0                	test   eax,eax
c0011b4a:	75 0f                	jne    c0011b5b <CPU::detectFeatures()+0x2ff>
c0011b4c:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c0011b56:	e9 cc 00 00 00       	jmp    c0011c27 <CPU::detectFeatures()+0x3cb>
c0011b5b:	50                   	push   eax
c0011b5c:	50                   	push   eax
c0011b5d:	68 03 3e 02 c0       	push   0xc0023e03
c0011b62:	55                   	push   ebp
c0011b63:	e8 88 ea fe ff       	call   c00005f0 <strcmp>
c0011b68:	83 c4 10             	add    esp,0x10
c0011b6b:	85 c0                	test   eax,eax
c0011b6d:	75 0f                	jne    c0011b7e <CPU::detectFeatures()+0x322>
c0011b6f:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c0011b79:	e9 a9 00 00 00       	jmp    c0011c27 <CPU::detectFeatures()+0x3cb>
c0011b7e:	50                   	push   eax
c0011b7f:	50                   	push   eax
c0011b80:	68 10 3e 02 c0       	push   0xc0023e10
c0011b85:	55                   	push   ebp
c0011b86:	e8 65 ea fe ff       	call   c00005f0 <strcmp>
c0011b8b:	83 c4 10             	add    esp,0x10
c0011b8e:	85 c0                	test   eax,eax
c0011b90:	75 0f                	jne    c0011ba1 <CPU::detectFeatures()+0x345>
c0011b92:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c0011b9c:	e9 86 00 00 00       	jmp    c0011c27 <CPU::detectFeatures()+0x3cb>
c0011ba1:	50                   	push   eax
c0011ba2:	50                   	push   eax
c0011ba3:	68 1d 3e 02 c0       	push   0xc0023e1d
c0011ba8:	55                   	push   ebp
c0011ba9:	e8 42 ea fe ff       	call   c00005f0 <strcmp>
c0011bae:	83 c4 10             	add    esp,0x10
c0011bb1:	85 c0                	test   eax,eax
c0011bb3:	75 0c                	jne    c0011bc1 <CPU::detectFeatures()+0x365>
c0011bb5:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c0011bbf:	eb 66                	jmp    c0011c27 <CPU::detectFeatures()+0x3cb>
c0011bc1:	50                   	push   eax
c0011bc2:	50                   	push   eax
c0011bc3:	68 2a 3e 02 c0       	push   0xc0023e2a
c0011bc8:	55                   	push   ebp
c0011bc9:	e8 22 ea fe ff       	call   c00005f0 <strcmp>
c0011bce:	83 c4 10             	add    esp,0x10
c0011bd1:	85 c0                	test   eax,eax
c0011bd3:	75 0c                	jne    c0011be1 <CPU::detectFeatures()+0x385>
c0011bd5:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c0011bdf:	eb 46                	jmp    c0011c27 <CPU::detectFeatures()+0x3cb>
c0011be1:	57                   	push   edi
c0011be2:	57                   	push   edi
c0011be3:	68 37 3e 02 c0       	push   0xc0023e37
c0011be8:	55                   	push   ebp
c0011be9:	e8 02 ea fe ff       	call   c00005f0 <strcmp>
c0011bee:	83 c4 10             	add    esp,0x10
c0011bf1:	85 c0                	test   eax,eax
c0011bf3:	74 e0                	je     c0011bd5 <CPU::detectFeatures()+0x379>
c0011bf5:	56                   	push   esi
c0011bf6:	56                   	push   esi
c0011bf7:	68 44 3e 02 c0       	push   0xc0023e44
c0011bfc:	55                   	push   ebp
c0011bfd:	e8 ee e9 fe ff       	call   c00005f0 <strcmp>
c0011c02:	83 c4 10             	add    esp,0x10
c0011c05:	85 c0                	test   eax,eax
c0011c07:	74 cc                	je     c0011bd5 <CPU::detectFeatures()+0x379>
c0011c09:	51                   	push   ecx
c0011c0a:	51                   	push   ecx
c0011c0b:	68 51 3e 02 c0       	push   0xc0023e51
c0011c10:	55                   	push   ebp
c0011c11:	e8 da e9 fe ff       	call   c00005f0 <strcmp>
c0011c16:	83 c4 10             	add    esp,0x10
c0011c19:	85 c0                	test   eax,eax
c0011c1b:	74 b8                	je     c0011bd5 <CPU::detectFeatures()+0x379>
c0011c1d:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c0011c27:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c0011c2c:	0f 86 be 00 00 00    	jbe    c0011cf0 <CPU::detectFeatures()+0x494>
c0011c32:	83 ec 0c             	sub    esp,0xc
c0011c35:	68 80 00 00 00       	push   0x80
c0011c3a:	e8 31 fb ff ff       	call   c0011770 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0011c3f:	83 e0 01             	and    eax,0x1
c0011c42:	c1 e0 06             	shl    eax,0x6
c0011c45:	88 c2                	mov    dl,al
c0011c47:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c0011c4d:	83 e0 bf             	and    eax,0xffffffbf
c0011c50:	09 d0                	or     eax,edx
c0011c52:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c0011c58:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c0011c5f:	e8 0c fb ff ff       	call   c0011770 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0011c64:	83 e0 01             	and    eax,0x1
c0011c67:	c1 e0 04             	shl    eax,0x4
c0011c6a:	88 c2                	mov    dl,al
c0011c6c:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c0011c72:	83 e0 ef             	and    eax,0xffffffef
c0011c75:	09 d0                	or     eax,edx
c0011c77:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c0011c7d:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c0011c84:	e8 e7 fa ff ff       	call   c0011770 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0011c89:	c1 e0 07             	shl    eax,0x7
c0011c8c:	88 c2                	mov    dl,al
c0011c8e:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c0011c94:	83 e0 7f             	and    eax,0x7f
c0011c97:	09 d0                	or     eax,edx
c0011c99:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c0011c9f:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0011ca6:	e8 f3 fa ff ff       	call   c001179e <CPU::cpuidCheckExtendedECX(unsigned int)>
c0011cab:	83 e0 01             	and    eax,0x1
c0011cae:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0011cb5:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c0011cbb:	83 e0 f7             	and    eax,0xfffffff7
c0011cbe:	09 d0                	or     eax,edx
c0011cc0:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c0011cc6:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c0011ccd:	e8 cc fa ff ff       	call   c001179e <CPU::cpuidCheckExtendedECX(unsigned int)>
c0011cd2:	83 c4 10             	add    esp,0x10
c0011cd5:	83 e0 01             	and    eax,0x1
c0011cd8:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0011cdf:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c0011ce5:	83 e0 fb             	and    eax,0xfffffffb
c0011ce8:	09 d0                	or     eax,edx
c0011cea:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c0011cf0:	83 ec 0c             	sub    esp,0xc
c0011cf3:	8d 44 24 28          	lea    eax,[esp+0x28]
c0011cf7:	50                   	push   eax
c0011cf8:	8d 44 24 28          	lea    eax,[esp+0x28]
c0011cfc:	50                   	push   eax
c0011cfd:	8d 74 24 28          	lea    esi,[esp+0x28]
c0011d01:	56                   	push   esi
c0011d02:	8d 44 24 28          	lea    eax,[esp+0x28]
c0011d06:	50                   	push   eax
c0011d07:	6a 01                	push   0x1
c0011d09:	e8 82 f9 ff ff       	call   c0011690 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0011d0e:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0011d12:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0011d18:	88 ca                	mov    dl,cl
c0011d1a:	83 e0 f0             	and    eax,0xfffffff0
c0011d1d:	83 e2 0f             	and    edx,0xf
c0011d20:	09 d0                	or     eax,edx
c0011d22:	88 ca                	mov    dl,cl
c0011d24:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c0011d2a:	c0 ea 04             	shr    dl,0x4
c0011d2d:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c0011d31:	0f b6 c2             	movzx  eax,dl
c0011d34:	83 c4 20             	add    esp,0x20
c0011d37:	c1 e0 06             	shl    eax,0x6
c0011d3a:	89 c7                	mov    edi,eax
c0011d3c:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0011d42:	66 25 3f c0          	and    ax,0xc03f
c0011d46:	09 f8                	or     eax,edi
c0011d48:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0011d4f:	89 c8                	mov    eax,ecx
c0011d51:	0f b6 ab 5d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15d]
c0011d58:	c1 e8 08             	shr    eax,0x8
c0011d5b:	83 e5 3f             	and    ebp,0x3f
c0011d5e:	83 e0 0f             	and    eax,0xf
c0011d61:	89 c7                	mov    edi,eax
c0011d63:	c1 e7 06             	shl    edi,0x6
c0011d66:	09 ef                	or     edi,ebp
c0011d68:	0f b6 ab 5e 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15e]
c0011d6f:	89 fa                	mov    edx,edi
c0011d71:	83 e5 c0             	and    ebp,0xffffffc0
c0011d74:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c0011d7a:	88 c2                	mov    dl,al
c0011d7c:	c0 ea 02             	shr    dl,0x2
c0011d7f:	89 d7                	mov    edi,edx
c0011d81:	09 ef                	or     edi,ebp
c0011d83:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c0011d89:	89 fa                	mov    edx,edi
c0011d8b:	83 e5 cf             	and    ebp,0xffffffcf
c0011d8e:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c0011d94:	89 cf                	mov    edi,ecx
c0011d96:	c1 ef 0c             	shr    edi,0xc
c0011d99:	83 e7 03             	and    edi,0x3
c0011d9c:	c1 e7 04             	shl    edi,0x4
c0011d9f:	09 ef                	or     edi,ebp
c0011da1:	3c 06                	cmp    al,0x6
c0011da3:	89 fa                	mov    edx,edi
c0011da5:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c0011dab:	74 04                	je     c0011db1 <CPU::detectFeatures()+0x555>
c0011dad:	3c 0f                	cmp    al,0xf
c0011daf:	75 5c                	jne    c0011e0d <CPU::detectFeatures()+0x5b1>
c0011db1:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011db5:	89 cf                	mov    edi,ecx
c0011db7:	c1 ef 10             	shr    edi,0x10
c0011dba:	c1 e7 04             	shl    edi,0x4
c0011dbd:	09 fa                	or     edx,edi
c0011dbf:	8b bb 5c 01 00 00    	mov    edi,DWORD PTR [ebx+0x15c]
c0011dc5:	0f b6 d2             	movzx  edx,dl
c0011dc8:	66 81 e7 3f c0       	and    di,0xc03f
c0011dcd:	c1 e2 06             	shl    edx,0x6
c0011dd0:	09 fa                	or     edx,edi
c0011dd2:	3c 0f                	cmp    al,0xf
c0011dd4:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c0011ddb:	75 30                	jne    c0011e0d <CPU::detectFeatures()+0x5b1>
c0011ddd:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c0011de3:	c1 e9 14             	shr    ecx,0x14
c0011de6:	83 e0 3f             	and    eax,0x3f
c0011de9:	83 c1 0f             	add    ecx,0xf
c0011dec:	88 ca                	mov    dl,cl
c0011dee:	c0 e9 02             	shr    cl,0x2
c0011df1:	c1 e2 06             	shl    edx,0x6
c0011df4:	09 d0                	or     eax,edx
c0011df6:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c0011dfc:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c0011e02:	83 e0 c0             	and    eax,0xffffffc0
c0011e05:	09 c1                	or     ecx,eax
c0011e07:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c0011e0d:	83 ec 0c             	sub    esp,0xc
c0011e10:	80 8b 8d 11 00 00 07 	or     BYTE PTR [ebx+0x118d],0x7
c0011e17:	8d 44 24 28          	lea    eax,[esp+0x28]
c0011e1b:	50                   	push   eax
c0011e1c:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0011e20:	55                   	push   ebp
c0011e21:	56                   	push   esi
c0011e22:	8d 7c 24 28          	lea    edi,[esp+0x28]
c0011e26:	57                   	push   edi
c0011e27:	68 00 00 00 80       	push   0x80000000
c0011e2c:	e8 5f f8 ff ff       	call   c0011690 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0011e31:	83 c4 20             	add    esp,0x20
c0011e34:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c0011e3c:	76 22                	jbe    c0011e60 <CPU::detectFeatures()+0x604>
c0011e3e:	83 ec 0c             	sub    esp,0xc
c0011e41:	8d 44 24 28          	lea    eax,[esp+0x28]
c0011e45:	50                   	push   eax
c0011e46:	55                   	push   ebp
c0011e47:	56                   	push   esi
c0011e48:	57                   	push   edi
c0011e49:	68 01 00 00 80       	push   0x80000001
c0011e4e:	e8 3d f8 ff ff       	call   c0011690 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0011e53:	81 a3 8c 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x118c],0xfffe5fff
c0011e5d:	83 c4 20             	add    esp,0x20
c0011e60:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c0011e66:	8d 50 ff             	lea    edx,[eax-0x1]
c0011e69:	83 fa 03             	cmp    edx,0x3
c0011e6c:	76 7e                	jbe    c0011eec <CPU::detectFeatures()+0x690>
c0011e6e:	83 f8 06             	cmp    eax,0x6
c0011e71:	74 79                	je     c0011eec <CPU::detectFeatures()+0x690>
c0011e73:	52                   	push   edx
c0011e74:	52                   	push   edx
c0011e75:	68 5d 3e 02 c0       	push   0xc0023e5d
c0011e7a:	53                   	push   ebx
c0011e7b:	e8 24 bf ff ff       	call   c000dda4 <Device::setName(char const*)>
c0011e80:	83 c4 10             	add    esp,0x10
c0011e83:	eb 67                	jmp    c0011eec <CPU::detectFeatures()+0x690>
c0011e85:	50                   	push   eax
c0011e86:	50                   	push   eax
c0011e87:	68 c2 3d 02 c0       	push   0xc0023dc2
c0011e8c:	55                   	push   ebp
c0011e8d:	e8 d2 e6 fe ff       	call   c0000564 <strcpy>
c0011e92:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0011e9c:	e8 42 e3 fe ff       	call   c00001e3 <is486>
c0011ea1:	83 c4 10             	add    esp,0x10
c0011ea4:	85 c0                	test   eax,eax
c0011ea6:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c0011eac:	74 1d                	je     c0011ecb <CPU::detectFeatures()+0x66f>
c0011eae:	83 c8 07             	or     eax,0x7
c0011eb1:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c0011eb7:	0f 20 c0             	mov    eax,cr0
c0011eba:	83 e0 14             	and    eax,0x14
c0011ebd:	83 f8 04             	cmp    eax,0x4
c0011ec0:	75 0e                	jne    c0011ed0 <CPU::detectFeatures()+0x674>
c0011ec2:	80 a3 8e 11 00 00 fd 	and    BYTE PTR [ebx+0x118e],0xfd
c0011ec9:	eb 21                	jmp    c0011eec <CPU::detectFeatures()+0x690>
c0011ecb:	83 e0 f8             	and    eax,0xfffffff8
c0011ece:	eb e1                	jmp    c0011eb1 <CPU::detectFeatures()+0x655>
c0011ed0:	e8 e9 e2 fe ff       	call   c00001be <hasLegacyFPU>
c0011ed5:	83 e0 01             	and    eax,0x1
c0011ed8:	8d 14 00             	lea    edx,[eax+eax*1]
c0011edb:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c0011ee1:	83 e0 fd             	and    eax,0xfffffffd
c0011ee4:	09 d0                	or     eax,edx
c0011ee6:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c0011eec:	f6 83 8e 11 00 00 02 	test   BYTE PTR [ebx+0x118e],0x2
c0011ef3:	74 0e                	je     c0011f03 <CPU::detectFeatures()+0x6a7>
c0011ef5:	a1 28 63 02 c0       	mov    eax,ds:0xc0026328
c0011efa:	80 88 e8 01 00 00 10 	or     BYTE PTR [eax+0x1e8],0x10
c0011f01:	eb 20                	jmp    c0011f23 <CPU::detectFeatures()+0x6c7>
c0011f03:	e8 b6 e2 fe ff       	call   c00001be <hasLegacyFPU>
c0011f08:	83 e0 01             	and    eax,0x1
c0011f0b:	8d 14 00             	lea    edx,[eax+eax*1]
c0011f0e:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c0011f14:	83 e0 fd             	and    eax,0xfffffffd
c0011f17:	09 d0                	or     eax,edx
c0011f19:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c0011f1f:	a8 02                	test   al,0x2
c0011f21:	75 d2                	jne    c0011ef5 <CPU::detectFeatures()+0x699>
c0011f23:	c6 83 90 11 00 00 00 	mov    BYTE PTR [ebx+0x1190],0x0
c0011f2a:	83 c4 2c             	add    esp,0x2c
c0011f2d:	5b                   	pop    ebx
c0011f2e:	5e                   	pop    esi
c0011f2f:	5f                   	pop    edi
c0011f30:	5d                   	pop    ebp
c0011f31:	c3                   	ret    

c0011f32 <CPU::setupSMEP()>:
c0011f32:	0f 20 e0             	mov    eax,cr4
c0011f35:	0d 00 00 10 00       	or     eax,0x100000
c0011f3a:	0f 22 e0             	mov    cr4,eax
c0011f3d:	c3                   	ret    

c0011f3e <CPU::setupUMIP()>:
c0011f3e:	0f 20 e0             	mov    eax,cr4
c0011f41:	80 cc 08             	or     ah,0x8
c0011f44:	0f 22 e0             	mov    cr4,eax
c0011f47:	c3                   	ret    

c0011f48 <CPU::setupTSC()>:
c0011f48:	0f 20 e0             	mov    eax,cr4
c0011f4b:	83 c8 04             	or     eax,0x4
c0011f4e:	0f 22 e0             	mov    cr4,eax
c0011f51:	c3                   	ret    

c0011f52 <CPU::setupLargePages()>:
c0011f52:	0f 20 e0             	mov    eax,cr4
c0011f55:	83 c8 10             	or     eax,0x10
c0011f58:	0f 22 e0             	mov    cr4,eax
c0011f5b:	c3                   	ret    

c0011f5c <CPU::setupPAT()>:
c0011f5c:	a1 28 63 02 c0       	mov    eax,ds:0xc0026328
c0011f61:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0011f68:	74 2c                	je     c0011f96 <CPU::setupPAT()+0x3a>
c0011f6a:	53                   	push   ebx
c0011f6b:	83 ec 10             	sub    esp,0x10
c0011f6e:	68 77 02 00 00       	push   0x277
c0011f73:	50                   	push   eax
c0011f74:	e8 d5 6d ff ff       	call   c0008d4e <Computer::rdmsr(unsigned int)>
c0011f79:	83 e2 f8             	and    edx,0xfffffff8
c0011f7c:	83 ca 01             	or     edx,0x1
c0011f7f:	52                   	push   edx
c0011f80:	50                   	push   eax
c0011f81:	68 77 02 00 00       	push   0x277
c0011f86:	ff 35 28 63 02 c0    	push   DWORD PTR ds:0xc0026328
c0011f8c:	e8 e9 6d ff ff       	call   c0008d7a <Computer::wrmsr(unsigned int, unsigned long long)>
c0011f91:	83 c4 28             	add    esp,0x28
c0011f94:	5b                   	pop    ebx
c0011f95:	c3                   	ret    
c0011f96:	c3                   	ret    
c0011f97:	90                   	nop

c0011f98 <CPU::setupMTRR()>:
c0011f98:	c3                   	ret    
c0011f99:	90                   	nop

c0011f9a <CPU::setupGlobalPages()>:
c0011f9a:	0f 20 e0             	mov    eax,cr4
c0011f9d:	0c 80                	or     al,0x80
c0011f9f:	0f 22 e0             	mov    cr4,eax
c0011fa2:	c3                   	ret    
c0011fa3:	90                   	nop

c0011fa4 <CPU::allowUsermodeDataAccess()>:
c0011fa4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011fa8:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c0011faf:	74 03                	je     c0011fb4 <CPU::allowUsermodeDataAccess()+0x10>
c0011fb1:	0f 01 cb             	stac   
c0011fb4:	c3                   	ret    
c0011fb5:	90                   	nop

c0011fb6 <CPU::prohibitUsermodeDataAccess()>:
c0011fb6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011fba:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c0011fc1:	74 03                	je     c0011fc6 <CPU::prohibitUsermodeDataAccess()+0x10>
c0011fc3:	0f 01 ca             	clac   
c0011fc6:	c3                   	ret    
c0011fc7:	90                   	nop

c0011fc8 <CPU::setupSMAP()>:
c0011fc8:	0f 20 e0             	mov    eax,cr4
c0011fcb:	0d 00 00 20 00       	or     eax,0x200000
c0011fd0:	0f 22 e0             	mov    cr4,eax
c0011fd3:	eb e1                	jmp    c0011fb6 <CPU::prohibitUsermodeDataAccess()>
c0011fd5:	90                   	nop

c0011fd6 <CPU::setupFeatures()>:
c0011fd6:	53                   	push   ebx
c0011fd7:	83 ec 08             	sub    esp,0x8
c0011fda:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011fde:	f6 83 8d 11 00 00 08 	test   BYTE PTR [ebx+0x118d],0x8
c0011fe5:	74 18                	je     c0011fff <CPU::setupFeatures()+0x29>
c0011fe7:	83 ec 0c             	sub    esp,0xc
c0011fea:	68 69 3e 02 c0       	push   0xc0023e69
c0011fef:	e8 3d a7 ff ff       	call   c000c731 <Dbg::kprintf(char const*, ...)>
c0011ff4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011ff7:	e8 42 ff ff ff       	call   c0011f3e <CPU::setupUMIP()>
c0011ffc:	83 c4 10             	add    esp,0x10
c0011fff:	f6 83 8c 11 00 00 02 	test   BYTE PTR [ebx+0x118c],0x2
c0012006:	74 18                	je     c0012020 <CPU::setupFeatures()+0x4a>
c0012008:	83 ec 0c             	sub    esp,0xc
c001200b:	68 73 3e 02 c0       	push   0xc0023e73
c0012010:	e8 1c a7 ff ff       	call   c000c731 <Dbg::kprintf(char const*, ...)>
c0012015:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012018:	e8 2b ff ff ff       	call   c0011f48 <CPU::setupTSC()>
c001201d:	83 c4 10             	add    esp,0x10
c0012020:	f6 83 8c 11 00 00 08 	test   BYTE PTR [ebx+0x118c],0x8
c0012027:	74 18                	je     c0012041 <CPU::setupFeatures()+0x6b>
c0012029:	83 ec 0c             	sub    esp,0xc
c001202c:	68 7c 3e 02 c0       	push   0xc0023e7c
c0012031:	e8 fb a6 ff ff       	call   c000c731 <Dbg::kprintf(char const*, ...)>
c0012036:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012039:	e8 14 ff ff ff       	call   c0011f52 <CPU::setupLargePages()>
c001203e:	83 c4 10             	add    esp,0x10
c0012041:	f6 83 8c 11 00 00 10 	test   BYTE PTR [ebx+0x118c],0x10
c0012048:	74 18                	je     c0012062 <CPU::setupFeatures()+0x8c>
c001204a:	83 ec 0c             	sub    esp,0xc
c001204d:	68 85 3e 02 c0       	push   0xc0023e85
c0012052:	e8 da a6 ff ff       	call   c000c731 <Dbg::kprintf(char const*, ...)>
c0012057:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001205a:	e8 3b ff ff ff       	call   c0011f9a <CPU::setupGlobalPages()>
c001205f:	83 c4 10             	add    esp,0x10
c0012062:	f6 83 8c 11 00 00 20 	test   BYTE PTR [ebx+0x118c],0x20
c0012069:	74 18                	je     c0012083 <CPU::setupFeatures()+0xad>
c001206b:	83 ec 0c             	sub    esp,0xc
c001206e:	68 97 3e 02 c0       	push   0xc0023e97
c0012073:	e8 b9 a6 ff ff       	call   c000c731 <Dbg::kprintf(char const*, ...)>
c0012078:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001207b:	e8 dc fe ff ff       	call   c0011f5c <CPU::setupPAT()>
c0012080:	83 c4 10             	add    esp,0x10
c0012083:	f6 83 8e 11 00 00 01 	test   BYTE PTR [ebx+0x118e],0x1
c001208a:	74 11                	je     c001209d <CPU::setupFeatures()+0xc7>
c001208c:	c7 44 24 10 a0 3e 02 c0 	mov    DWORD PTR [esp+0x10],0xc0023ea0
c0012094:	83 c4 08             	add    esp,0x8
c0012097:	5b                   	pop    ebx
c0012098:	e9 94 a6 ff ff       	jmp    c000c731 <Dbg::kprintf(char const*, ...)>
c001209d:	83 c4 08             	add    esp,0x8
c00120a0:	5b                   	pop    ebx
c00120a1:	c3                   	ret    

c00120a2 <CPU::open(int, int, void*)>:
c00120a2:	57                   	push   edi
c00120a3:	56                   	push   esi
c00120a4:	53                   	push   ebx
c00120a5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00120a9:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00120ad:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c00120b3:	83 ec 0c             	sub    esp,0xc
c00120b6:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c00120bc:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c00120c2:	50                   	push   eax
c00120c3:	e8 a4 6f ff ff       	call   c000906c <GDT::setup()>
c00120c8:	83 c4 0c             	add    esp,0xc
c00120cb:	6a 00                	push   0x0
c00120cd:	68 ef be ad de       	push   0xdeadbeef
c00120d2:	57                   	push   edi
c00120d3:	e8 84 8c ff ff       	call   c000ad5c <TSS::setup(unsigned long, unsigned long)>
c00120d8:	89 3c 24             	mov    DWORD PTR [esp],edi
c00120db:	e8 5c 8c ff ff       	call   c000ad3c <TSS::flush()>
c00120e0:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c00120e6:	89 04 24             	mov    DWORD PTR [esp],eax
c00120e9:	e8 0c 72 ff ff       	call   c00092fa <IDT::setup()>
c00120ee:	b8 00 04 00 00       	mov    eax,0x400
c00120f3:	0f 23 f8             	mov    db7,eax
c00120f6:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0012100:	e8 d1 7a ff ff       	call   c0009bd6 <Phys::allocatePage()>
c0012105:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001210b:	89 30                	mov    DWORD PTR [eax],esi
c001210d:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0012113:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0012116:	58                   	pop    eax
c0012117:	5a                   	pop    edx
c0012118:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001211e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0012122:	e8 f5 9b ff ff       	call   c000bd1c <VAS::setCPUSpecific(unsigned long)>
c0012127:	c7 04 24 aa 3e 02 c0 	mov    DWORD PTR [esp],0xc0023eaa
c001212e:	e8 be 76 ff ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c0012133:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012136:	e8 21 f7 ff ff       	call   c001185c <CPU::detectFeatures()>
c001213b:	c7 04 24 cd 3e 02 c0 	mov    DWORD PTR [esp],0xc0023ecd
c0012142:	e8 aa 76 ff ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c0012147:	e8 09 73 00 00       	call   c0019455 <Hal::initialise()>
c001214c:	c7 04 24 e1 3e 02 c0 	mov    DWORD PTR [esp],0xc0023ee1
c0012153:	e8 99 76 ff ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c0012158:	a1 40 63 02 c0       	mov    eax,ds:0xc0026340
c001215d:	83 e0 10             	and    eax,0x10
c0012160:	83 f8 01             	cmp    eax,0x1
c0012163:	19 c0                	sbb    eax,eax
c0012165:	83 e0 46             	and    eax,0x46
c0012168:	83 c0 1e             	add    eax,0x1e
c001216b:	89 04 24             	mov    DWORD PTR [esp],eax
c001216e:	e8 1a d3 ff ff       	call   c000f48d <setupTimer(int)>
c0012173:	83 c4 10             	add    esp,0x10
c0012176:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c001217c:	f6 05 40 63 02 c0 20 	test   BYTE PTR ds:0xc0026340,0x20
c0012183:	74 18                	je     c001219d <CPU::open(int, int, void*)+0xfb>
c0012185:	83 ec 0c             	sub    esp,0xc
c0012188:	68 fc 3e 02 c0       	push   0xc0023efc
c001218d:	e8 5f 76 ff ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c0012192:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012195:	e8 3c fe ff ff       	call   c0011fd6 <CPU::setupFeatures()>
c001219a:	83 c4 10             	add    esp,0x10
c001219d:	83 ec 0c             	sub    esp,0xc
c00121a0:	68 17 3f 02 c0       	push   0xc0023f17
c00121a5:	e8 47 76 ff ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c00121aa:	83 c4 10             	add    esp,0x10
c00121ad:	31 c0                	xor    eax,eax
c00121af:	5b                   	pop    ebx
c00121b0:	5e                   	pop    esi
c00121b1:	5f                   	pop    edi
c00121b2:	c3                   	ret    
c00121b3:	90                   	nop

c00121b4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c00121b4:	57                   	push   edi
c00121b5:	56                   	push   esi
c00121b6:	53                   	push   ebx
c00121b7:	51                   	push   ecx
c00121b8:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00121bc:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c00121bf:	0f 02 c0             	lar    eax,ax
c00121c2:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c00121c5:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00121c9:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c00121cc:	88 ca                	mov    dl,cl
c00121ce:	c0 ea 06             	shr    dl,0x6
c00121d1:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c00121d5:	89 ca                	mov    edx,ecx
c00121d7:	66 c1 ea 03          	shr    dx,0x3
c00121db:	83 e2 07             	and    edx,0x7
c00121de:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c00121e3:	88 17                	mov    BYTE PTR [edi],dl
c00121e5:	0f 84 a6 01 00 00    	je     c0012391 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c00121eb:	83 e1 07             	and    ecx,0x7
c00121ee:	80 f9 04             	cmp    cl,0x4
c00121f1:	0f 84 98 00 00 00    	je     c001228f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c00121f7:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c00121fc:	0f 95 c0             	setne  al
c00121ff:	80 f9 05             	cmp    cl,0x5
c0012202:	0f 95 c2             	setne  dl
c0012205:	08 c2                	or     dl,al
c0012207:	74 79                	je     c0012282 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c0012209:	84 c9                	test   cl,cl
c001220b:	75 05                	jne    c0012212 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c001220d:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0012210:	eb 3c                	jmp    c001224e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0012212:	80 f9 01             	cmp    cl,0x1
c0012215:	75 05                	jne    c001221c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c0012217:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001221a:	eb 32                	jmp    c001224e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001221c:	80 f9 02             	cmp    cl,0x2
c001221f:	75 05                	jne    c0012226 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c0012221:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0012224:	eb 28                	jmp    c001224e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0012226:	31 c0                	xor    eax,eax
c0012228:	80 f9 03             	cmp    cl,0x3
c001222b:	75 05                	jne    c0012232 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c001222d:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0012230:	eb 1c                	jmp    c001224e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0012232:	80 f9 05             	cmp    cl,0x5
c0012235:	75 05                	jne    c001223c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c0012237:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c001223a:	eb 12                	jmp    c001224e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001223c:	80 f9 06             	cmp    cl,0x6
c001223f:	75 05                	jne    c0012246 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c0012241:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0012244:	eb 08                	jmp    c001224e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0012246:	80 f9 07             	cmp    cl,0x7
c0012249:	75 03                	jne    c001224e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001224b:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001224e:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0012253:	75 10                	jne    c0012265 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c0012255:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0012259:	b9 03 00 00 00       	mov    ecx,0x3
c001225e:	01 d0                	add    eax,edx
c0012260:	e9 37 01 00 00       	jmp    c001239c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0012265:	b9 02 00 00 00       	mov    ecx,0x2
c001226a:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c001226f:	0f 85 27 01 00 00    	jne    c001239c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0012275:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c0012278:	b9 06 00 00 00       	mov    ecx,0x6
c001227d:	e9 1a 01 00 00       	jmp    c001239c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0012282:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c0012285:	b9 06 00 00 00       	mov    ecx,0x6
c001228a:	e9 0f 01 00 00       	jmp    c001239e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c001228f:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0012292:	88 ca                	mov    dl,cl
c0012294:	c0 ea 06             	shr    dl,0x6
c0012297:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c001229b:	89 ca                	mov    edx,ecx
c001229d:	66 c1 ea 03          	shr    dx,0x3
c00122a1:	83 e2 07             	and    edx,0x7
c00122a4:	80 e1 07             	and    cl,0x7
c00122a7:	75 05                	jne    c00122ae <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c00122a9:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c00122ac:	eb 4c                	jmp    c00122fa <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00122ae:	80 f9 01             	cmp    cl,0x1
c00122b1:	75 05                	jne    c00122b8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c00122b3:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c00122b6:	eb 42                	jmp    c00122fa <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00122b8:	80 f9 02             	cmp    cl,0x2
c00122bb:	75 05                	jne    c00122c2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c00122bd:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c00122c0:	eb 38                	jmp    c00122fa <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00122c2:	80 f9 03             	cmp    cl,0x3
c00122c5:	75 05                	jne    c00122cc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c00122c7:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c00122ca:	eb 2e                	jmp    c00122fa <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00122cc:	80 f9 04             	cmp    cl,0x4
c00122cf:	75 12                	jne    c00122e3 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c00122d1:	f6 c4 60             	test   ah,0x60
c00122d4:	75 08                	jne    c00122de <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c00122d6:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00122d9:	8d 78 14             	lea    edi,[eax+0x14]
c00122dc:	eb 1c                	jmp    c00122fa <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00122de:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c00122e1:	eb 17                	jmp    c00122fa <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00122e3:	80 f9 05             	cmp    cl,0x5
c00122e6:	75 05                	jne    c00122ed <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c00122e8:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c00122eb:	eb 0d                	jmp    c00122fa <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00122ed:	80 f9 06             	cmp    cl,0x6
c00122f0:	75 05                	jne    c00122f7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c00122f2:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c00122f5:	eb 03                	jmp    c00122fa <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00122f7:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c00122fa:	84 d2                	test   dl,dl
c00122fc:	75 05                	jne    c0012303 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c00122fe:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0012301:	eb 3c                	jmp    c001233f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0012303:	80 fa 01             	cmp    dl,0x1
c0012306:	75 05                	jne    c001230d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c0012308:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001230b:	eb 32                	jmp    c001233f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001230d:	80 fa 02             	cmp    dl,0x2
c0012310:	75 05                	jne    c0012317 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c0012312:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0012315:	eb 28                	jmp    c001233f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0012317:	80 fa 03             	cmp    dl,0x3
c001231a:	75 05                	jne    c0012321 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c001231c:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001231f:	eb 1e                	jmp    c001233f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0012321:	31 c0                	xor    eax,eax
c0012323:	80 fa 04             	cmp    dl,0x4
c0012326:	74 17                	je     c001233f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0012328:	80 fa 05             	cmp    dl,0x5
c001232b:	75 05                	jne    c0012332 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c001232d:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0012330:	eb 0d                	jmp    c001233f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0012332:	80 fa 06             	cmp    dl,0x6
c0012335:	75 05                	jne    c001233c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c0012337:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001233a:	eb 03                	jmp    c001233f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001233c:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001233f:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0012344:	0f 94 c2             	sete   dl
c0012347:	80 f9 05             	cmp    cl,0x5
c001234a:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c001234e:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c0012353:	d3 e0                	shl    eax,cl
c0012355:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c0012359:	74 0a                	je     c0012365 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c001235b:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c001235e:	b9 07 00 00 00       	mov    ecx,0x7
c0012363:	eb 37                	jmp    c001239c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0012365:	01 f8                	add    eax,edi
c0012367:	b9 03 00 00 00       	mov    ecx,0x3
c001236c:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0012371:	74 2b                	je     c001239e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0012373:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0012378:	75 0d                	jne    c0012387 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c001237a:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c001237e:	01 c8                	add    eax,ecx
c0012380:	b9 04 00 00 00       	mov    ecx,0x4
c0012385:	eb 17                	jmp    c001239e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0012387:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c001238a:	b9 07 00 00 00       	mov    ecx,0x7
c001238f:	eb 0d                	jmp    c001239e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0012391:	b9 02 00 00 00       	mov    ecx,0x2
c0012396:	b2 01                	mov    dl,0x1
c0012398:	31 c0                	xor    eax,eax
c001239a:	eb 02                	jmp    c001239e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c001239c:	31 d2                	xor    edx,edx
c001239e:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00123a2:	89 0b                	mov    DWORD PTR [ebx],ecx
c00123a4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00123a8:	88 11                	mov    BYTE PTR [ecx],dl
c00123aa:	5a                   	pop    edx
c00123ab:	5b                   	pop    ebx
c00123ac:	5e                   	pop    esi
c00123ad:	5f                   	pop    edi
c00123ae:	c3                   	ret    

c00123af <Krnl::smpEntry()>:
c00123af:	eb fe                	jmp    c00123af <Krnl::smpEntry()>

c00123b1 <Krnl::startCPU(int)>:
c00123b1:	a1 28 63 02 c0       	mov    eax,ds:0xc0026328
c00123b6:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c00123bd:	0f 84 36 01 00 00    	je     c00124f9 <Krnl::startCPU(int)+0x148>
c00123c3:	53                   	push   ebx
c00123c4:	83 ec 10             	sub    esp,0x10
c00123c7:	fa                   	cli    
c00123c8:	ff 05 08 98 02 c0    	inc    DWORD PTR ds:0xc0029808
c00123ce:	6a 1b                	push   0x1b
c00123d0:	ff 35 28 63 02 c0    	push   DWORD PTR ds:0xc0026328
c00123d6:	e8 73 69 ff ff       	call   c0008d4e <Computer::rdmsr(unsigned int)>
c00123db:	25 00 f0 ff ff       	and    eax,0xfffff000
c00123e0:	89 c3                	mov    ebx,eax
c00123e2:	58                   	pop    eax
c00123e3:	5a                   	pop    edx
c00123e4:	53                   	push   ebx
c00123e5:	68 60 3f 02 c0       	push   0xc0023f60
c00123ea:	e8 42 a3 ff ff       	call   c000c731 <Dbg::kprintf(char const*, ...)>
c00123ef:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c00123f9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00123fd:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0012407:	c1 e0 18             	shl    eax,0x18
c001240a:	8b 93 10 03 00 00    	mov    edx,DWORD PTR [ebx+0x310]
c0012410:	83 c4 10             	add    esp,0x10
c0012413:	81 e2 ff ff ff 00    	and    edx,0xffffff
c0012419:	09 c2                	or     edx,eax
c001241b:	89 93 10 03 00 00    	mov    DWORD PTR [ebx+0x310],edx
c0012421:	8d 93 00 03 00 00    	lea    edx,[ebx+0x300]
c0012427:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c001242d:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0012433:	80 cd c5             	or     ch,0xc5
c0012436:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c001243c:	f3 90                	pause  
c001243e:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0012440:	0f ba e1 0c          	bt     ecx,0xc
c0012444:	72 f6                	jb     c001243c <Krnl::startCPU(int)+0x8b>
c0012446:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c001244c:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0012452:	09 c1                	or     ecx,eax
c0012454:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c001245a:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0012460:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0012466:	80 cd 85             	or     ch,0x85
c0012469:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c001246f:	f3 90                	pause  
c0012471:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0012473:	0f ba e1 0c          	bt     ecx,0xc
c0012477:	72 f6                	jb     c001246f <Krnl::startCPU(int)+0xbe>
c0012479:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0012483:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0012489:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c001248f:	09 c1                	or     ecx,eax
c0012491:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0012497:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c001249d:	81 e1 00 f8 f0 ff    	and    ecx,0xfff0f800
c00124a3:	81 c9 02 06 00 00    	or     ecx,0x602
c00124a9:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c00124af:	f3 90                	pause  
c00124b1:	8b 0a                	mov    ecx,DWORD PTR [edx]
c00124b3:	0f ba e1 0c          	bt     ecx,0xc
c00124b7:	72 f6                	jb     c00124af <Krnl::startCPU(int)+0xfe>
c00124b9:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c00124c3:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c00124c9:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c00124cf:	09 c8                	or     eax,ecx
c00124d1:	89 83 10 03 00 00    	mov    DWORD PTR [ebx+0x310],eax
c00124d7:	8b 83 00 03 00 00    	mov    eax,DWORD PTR [ebx+0x300]
c00124dd:	25 00 f8 f0 ff       	and    eax,0xfff0f800
c00124e2:	0d 02 06 00 00       	or     eax,0x602
c00124e7:	89 83 00 03 00 00    	mov    DWORD PTR [ebx+0x300],eax
c00124ed:	f3 90                	pause  
c00124ef:	8b 02                	mov    eax,DWORD PTR [edx]
c00124f1:	0f ba e0 0c          	bt     eax,0xc
c00124f5:	72 f6                	jb     c00124ed <Krnl::startCPU(int)+0x13c>
c00124f7:	eb fe                	jmp    c00124f7 <Krnl::startCPU(int)+0x146>
c00124f9:	c3                   	ret    

c00124fa <Krnl::startCPUs()>:
c00124fa:	a1 28 63 02 c0       	mov    eax,ds:0xc0026328
c00124ff:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0012505:	88 c2                	mov    dl,al
c0012507:	83 e2 0a             	and    edx,0xa
c001250a:	80 fa 0a             	cmp    dl,0xa
c001250d:	75 09                	jne    c0012518 <Krnl::startCPUs()+0x1e>
c001250f:	a8 01                	test   al,0x1
c0012511:	74 05                	je     c0012518 <Krnl::startCPUs()+0x1e>
c0012513:	e9 83 dc fe ff       	jmp    c000019b <prepareTramp>
c0012518:	c3                   	ret    
c0012519:	90                   	nop

c001251a <EnvVarContainer::getEnv(char const*)>:
c001251a:	57                   	push   edi
c001251b:	56                   	push   esi
c001251c:	53                   	push   ebx
c001251d:	31 db                	xor    ebx,ebx
c001251f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012523:	39 1e                	cmp    DWORD PTR [esi],ebx
c0012525:	7e 2b                	jle    c0012552 <EnvVarContainer::getEnv(char const*)+0x38>
c0012527:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c001252e:	50                   	push   eax
c001252f:	50                   	push   eax
c0012530:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0012533:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c0012536:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001253a:	e8 b1 e0 fe ff       	call   c00005f0 <strcmp>
c001253f:	83 c4 10             	add    esp,0x10
c0012542:	85 c0                	test   eax,eax
c0012544:	75 09                	jne    c001254f <EnvVarContainer::getEnv(char const*)+0x35>
c0012546:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0012549:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c001254d:	eb 05                	jmp    c0012554 <EnvVarContainer::getEnv(char const*)+0x3a>
c001254f:	43                   	inc    ebx
c0012550:	eb d1                	jmp    c0012523 <EnvVarContainer::getEnv(char const*)+0x9>
c0012552:	31 c0                	xor    eax,eax
c0012554:	5b                   	pop    ebx
c0012555:	5e                   	pop    esi
c0012556:	5f                   	pop    edi
c0012557:	c3                   	ret    

c0012558 <EnvVarContainer::setEnv(char const*, char const*)>:
c0012558:	55                   	push   ebp
c0012559:	57                   	push   edi
c001255a:	56                   	push   esi
c001255b:	53                   	push   ebx
c001255c:	83 ec 28             	sub    esp,0x28
c001255f:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0012563:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0012567:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001256b:	56                   	push   esi
c001256c:	e8 53 df fe ff       	call   c00004c4 <strlen>
c0012571:	40                   	inc    eax
c0012572:	89 04 24             	mov    DWORD PTR [esp],eax
c0012575:	e8 1d 72 ff ff       	call   c0009797 <malloc>
c001257a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001257d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012581:	e8 3e df fe ff       	call   c00004c4 <strlen>
c0012586:	40                   	inc    eax
c0012587:	89 04 24             	mov    DWORD PTR [esp],eax
c001258a:	e8 08 72 ff ff       	call   c0009797 <malloc>
c001258f:	89 34 24             	mov    DWORD PTR [esp],esi
c0012592:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012596:	e8 29 df fe ff       	call   c00004c4 <strlen>
c001259b:	83 c4 0c             	add    esp,0xc
c001259e:	40                   	inc    eax
c001259f:	50                   	push   eax
c00125a0:	6a 00                	push   0x0
c00125a2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00125a6:	e8 fd de fe ff       	call   c00004a8 <memset>
c00125ab:	89 34 24             	mov    DWORD PTR [esp],esi
c00125ae:	e8 11 df fe ff       	call   c00004c4 <strlen>
c00125b3:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00125b7:	8d 48 01             	lea    ecx,[eax+0x1]
c00125ba:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00125bc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00125bf:	89 de                	mov    esi,ebx
c00125c1:	e8 fe de fe ff       	call   c00004c4 <strlen>
c00125c6:	83 c4 0c             	add    esp,0xc
c00125c9:	40                   	inc    eax
c00125ca:	50                   	push   eax
c00125cb:	6a 00                	push   0x0
c00125cd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00125d1:	e8 d2 de fe ff       	call   c00004a8 <memset>
c00125d6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00125d9:	e8 e6 de fe ff       	call   c00004c4 <strlen>
c00125de:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00125e2:	8d 48 01             	lea    ecx,[eax+0x1]
c00125e5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00125e7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00125ea:	40                   	inc    eax
c00125eb:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c00125ee:	c1 e0 03             	shl    eax,0x3
c00125f1:	5a                   	pop    edx
c00125f2:	59                   	pop    ecx
c00125f3:	50                   	push   eax
c00125f4:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00125f7:	e8 87 71 ff ff       	call   c0009783 <realloc>
c00125fc:	8d 74 24 18          	lea    esi,[esp+0x18]
c0012600:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0012603:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0012606:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c001260a:	b9 08 00 00 00       	mov    ecx,0x8
c001260f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012611:	83 c4 2c             	add    esp,0x2c
c0012614:	5b                   	pop    ebx
c0012615:	5e                   	pop    esi
c0012616:	5f                   	pop    edi
c0012617:	5d                   	pop    ebp
c0012618:	c3                   	ret    
c0012619:	90                   	nop

c001261a <EnvVarContainer::deleteEnv(char const*)>:
c001261a:	c3                   	ret    
c001261b:	90                   	nop

c001261c <EnvVarContainer::loadFrom(char const*, char const*)>:
c001261c:	55                   	push   ebp
c001261d:	57                   	push   edi
c001261e:	56                   	push   esi
c001261f:	53                   	push   ebx
c0012620:	81 ec 38 01 00 00    	sub    esp,0x138
c0012626:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c001262d:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c0012634:	68 14 01 00 00       	push   0x114
c0012639:	e8 59 71 ff ff       	call   c0009797 <malloc>
c001263e:	83 c4 0c             	add    esp,0xc
c0012641:	89 c3                	mov    ebx,eax
c0012643:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0012646:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001264d:	50                   	push   eax
c001264e:	e8 49 a6 ff ff       	call   c000cc9c <File::File(char const*, Process*)>
c0012653:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012656:	e8 89 a9 ff ff       	call   c000cfe4 <File::exists()>
c001265b:	83 c4 10             	add    esp,0x10
c001265e:	84 c0                	test   al,al
c0012660:	75 31                	jne    c0012693 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c0012662:	50                   	push   eax
c0012663:	50                   	push   eax
c0012664:	6a 12                	push   0x12
c0012666:	53                   	push   ebx
c0012667:	e8 0a a7 ff ff       	call   c000cd76 <File::open(FileOpenMode)>
c001266c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001266e:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0012671:	89 34 24             	mov    DWORD PTR [esp],esi
c0012674:	e8 4b de fe ff       	call   c00004c4 <strlen>
c0012679:	5a                   	pop    edx
c001267a:	31 d2                	xor    edx,edx
c001267c:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0012680:	51                   	push   ecx
c0012681:	56                   	push   esi
c0012682:	52                   	push   edx
c0012683:	50                   	push   eax
c0012684:	53                   	push   ebx
c0012685:	ff d7                	call   edi
c0012687:	83 c4 14             	add    esp,0x14
c001268a:	53                   	push   ebx
c001268b:	e8 44 a7 ff ff       	call   c000cdd4 <File::close()>
c0012690:	83 c4 10             	add    esp,0x10
c0012693:	56                   	push   esi
c0012694:	31 f6                	xor    esi,esi
c0012696:	68 00 01 00 00       	push   0x100
c001269b:	6a 00                	push   0x0
c001269d:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00126a1:	50                   	push   eax
c00126a2:	e8 01 de fe ff       	call   c00004a8 <memset>
c00126a7:	5f                   	pop    edi
c00126a8:	58                   	pop    eax
c00126a9:	6a 01                	push   0x1
c00126ab:	53                   	push   ebx
c00126ac:	e8 c5 a6 ff ff       	call   c000cd76 <File::open(FileOpenMode)>
c00126b1:	83 c4 10             	add    esp,0x10
c00126b4:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00126bc:	83 ec 0c             	sub    esp,0xc
c00126bf:	8b 03                	mov    eax,DWORD PTR [ebx]
c00126c1:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c00126c5:	51                   	push   ecx
c00126c6:	8d 54 24 23          	lea    edx,[esp+0x23]
c00126ca:	52                   	push   edx
c00126cb:	6a 00                	push   0x0
c00126cd:	6a 01                	push   0x1
c00126cf:	53                   	push   ebx
c00126d0:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00126d3:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c00126d7:	83 c4 20             	add    esp,0x20
c00126da:	3c 0d                	cmp    al,0xd
c00126dc:	0f 84 09 01 00 00    	je     c00127eb <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c00126e2:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00126e7:	0f 84 ef 00 00 00    	je     c00127dc <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c00126ed:	3c 0a                	cmp    al,0xa
c00126ef:	74 13                	je     c0012704 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c00126f1:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00126f6:	74 0c                	je     c0012704 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c00126f8:	81 fe fe 00 00 00    	cmp    esi,0xfe
c00126fe:	0f 8e d8 00 00 00    	jle    c00127dc <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c0012704:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012708:	83 ec 0c             	sub    esp,0xc
c001270b:	8d 78 01             	lea    edi,[eax+0x1]
c001270e:	57                   	push   edi
c001270f:	e8 83 70 ff ff       	call   c0009797 <malloc>
c0012714:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c0012718:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001271c:	8d 56 04             	lea    edx,[esi+0x4]
c001271f:	89 14 24             	mov    DWORD PTR [esp],edx
c0012722:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0012726:	e8 6c 70 ff ff       	call   c0009797 <malloc>
c001272b:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001272f:	83 c4 0c             	add    esp,0xc
c0012732:	57                   	push   edi
c0012733:	6a 00                	push   0x0
c0012735:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0012739:	e8 6a dd fe ff       	call   c00004a8 <memset>
c001273e:	8d 74 24 30          	lea    esi,[esp+0x30]
c0012742:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0012746:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001274a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001274c:	83 c4 0c             	add    esp,0xc
c001274f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012753:	52                   	push   edx
c0012754:	6a 00                	push   0x0
c0012756:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001275a:	e8 49 dd fe ff       	call   c00004a8 <memset>
c001275f:	8d 74 24 30          	lea    esi,[esp+0x30]
c0012763:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0012767:	89 34 24             	mov    DWORD PTR [esp],esi
c001276a:	e8 55 dd fe ff       	call   c00004c4 <strlen>
c001276f:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0012773:	89 c1                	mov    ecx,eax
c0012775:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012777:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001277a:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c001277d:	40                   	inc    eax
c001277e:	83 c4 10             	add    esp,0x10
c0012781:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0012784:	85 d2                	test   edx,edx
c0012786:	75 0c                	jne    c0012794 <EnvVarContainer::loadFrom(char const*, char const*)+0x178>
c0012788:	83 ec 0c             	sub    esp,0xc
c001278b:	6a 08                	push   0x8
c001278d:	e8 05 70 ff ff       	call   c0009797 <malloc>
c0012792:	eb 0c                	jmp    c00127a0 <EnvVarContainer::loadFrom(char const*, char const*)+0x184>
c0012794:	c1 e0 03             	shl    eax,0x3
c0012797:	51                   	push   ecx
c0012798:	51                   	push   ecx
c0012799:	50                   	push   eax
c001279a:	52                   	push   edx
c001279b:	e8 e3 6f ff ff       	call   c0009783 <realloc>
c00127a0:	83 c4 10             	add    esp,0x10
c00127a3:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c00127a6:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c00127a9:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c00127ac:	8d 74 24 18          	lea    esi,[esp+0x18]
c00127b0:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c00127b4:	b9 08 00 00 00       	mov    ecx,0x8
c00127b9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00127bb:	31 f6                	xor    esi,esi
c00127bd:	50                   	push   eax
c00127be:	68 00 01 00 00       	push   0x100
c00127c3:	6a 00                	push   0x0
c00127c5:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00127c9:	50                   	push   eax
c00127ca:	e8 d9 dc fe ff       	call   c00004a8 <memset>
c00127cf:	83 c4 10             	add    esp,0x10
c00127d2:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00127da:	eb 0f                	jmp    c00127eb <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c00127dc:	3c 3d                	cmp    al,0x3d
c00127de:	74 07                	je     c00127e7 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cb>
c00127e0:	88 44 34 20          	mov    BYTE PTR [esp+esi*1+0x20],al
c00127e4:	46                   	inc    esi
c00127e5:	eb 04                	jmp    c00127eb <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c00127e7:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00127eb:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00127f0:	0f 85 c6 fe ff ff    	jne    c00126bc <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c00127f6:	81 c4 2c 01 00 00    	add    esp,0x12c
c00127fc:	5b                   	pop    ebx
c00127fd:	5e                   	pop    esi
c00127fe:	5f                   	pop    edi
c00127ff:	5d                   	pop    ebp
c0012800:	c3                   	ret    
c0012801:	90                   	nop

c0012802 <EnvVarContainer::__loadSystem()>:
c0012802:	83 ec 10             	sub    esp,0x10
c0012805:	68 60 5a 02 c0       	push   0xc0025a60
c001280a:	68 71 3f 02 c0       	push   0xc0023f71
c001280f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012813:	e8 04 fe ff ff       	call   c001261c <EnvVarContainer::loadFrom(char const*, char const*)>
c0012818:	83 c4 1c             	add    esp,0x1c
c001281b:	c3                   	ret    

c001281c <EnvVarContainer::__loadUser()>:
c001281c:	c3                   	ret    
c001281d:	90                   	nop

c001281e <EnvVarContainer::EnvVarContainer(Process*)>:
c001281e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012822:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0012828:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001282c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012830:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0012833:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012837:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001283e:	90                   	nop
c001283f:	c3                   	ret    

c0012840 <EnvVarContainer::~EnvVarContainer()>:
c0012840:	83 ec 0c             	sub    esp,0xc
c0012843:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012847:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001284a:	85 c0                	test   eax,eax
c001284c:	74 1d                	je     c001286b <EnvVarContainer::~EnvVarContainer()+0x2b>
c001284e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012852:	8b 00                	mov    eax,DWORD PTR [eax]
c0012854:	85 c0                	test   eax,eax
c0012856:	74 13                	je     c001286b <EnvVarContainer::~EnvVarContainer()+0x2b>
c0012858:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001285c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001285f:	83 ec 0c             	sub    esp,0xc
c0012862:	50                   	push   eax
c0012863:	e8 3f 6f ff ff       	call   c00097a7 <free>
c0012868:	83 c4 10             	add    esp,0x10
c001286b:	90                   	nop
c001286c:	83 c4 0c             	add    esp,0xc
c001286f:	c3                   	ret    

c0012870 <Krnl::getEnv(Process*, char const*)>:
c0012870:	53                   	push   ebx
c0012871:	83 ec 08             	sub    esp,0x8
c0012874:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012878:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001287c:	39 05 30 98 02 c0    	cmp    DWORD PTR ds:0xc0029830,eax
c0012882:	74 04                	je     c0012888 <Krnl::getEnv(Process*, char const*)+0x18>
c0012884:	85 c0                	test   eax,eax
c0012886:	75 0b                	jne    c0012893 <Krnl::getEnv(Process*, char const*)+0x23>
c0012888:	a1 b4 8d 02 c0       	mov    eax,ds:0xc0028db4
c001288d:	85 c0                	test   eax,eax
c001288f:	75 19                	jne    c00128aa <Krnl::getEnv(Process*, char const*)+0x3a>
c0012891:	eb 27                	jmp    c00128ba <Krnl::getEnv(Process*, char const*)+0x4a>
c0012893:	52                   	push   edx
c0012894:	52                   	push   edx
c0012895:	53                   	push   ebx
c0012896:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c001289c:	e8 79 fc ff ff       	call   c001251a <EnvVarContainer::getEnv(char const*)>
c00128a1:	83 c4 10             	add    esp,0x10
c00128a4:	85 c0                	test   eax,eax
c00128a6:	75 28                	jne    c00128d0 <Krnl::getEnv(Process*, char const*)+0x60>
c00128a8:	eb de                	jmp    c0012888 <Krnl::getEnv(Process*, char const*)+0x18>
c00128aa:	52                   	push   edx
c00128ab:	52                   	push   edx
c00128ac:	53                   	push   ebx
c00128ad:	50                   	push   eax
c00128ae:	e8 67 fc ff ff       	call   c001251a <EnvVarContainer::getEnv(char const*)>
c00128b3:	83 c4 10             	add    esp,0x10
c00128b6:	85 c0                	test   eax,eax
c00128b8:	75 16                	jne    c00128d0 <Krnl::getEnv(Process*, char const*)+0x60>
c00128ba:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c00128be:	a1 b8 8d 02 c0       	mov    eax,ds:0xc0028db8
c00128c3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00128c7:	83 c4 08             	add    esp,0x8
c00128ca:	5b                   	pop    ebx
c00128cb:	e9 4a fc ff ff       	jmp    c001251a <EnvVarContainer::getEnv(char const*)>
c00128d0:	83 c4 08             	add    esp,0x8
c00128d3:	5b                   	pop    ebx
c00128d4:	c3                   	ret    

c00128d5 <Krnl::setEnvSystem(char const*, char const*)>:
c00128d5:	83 ec 10             	sub    esp,0x10
c00128d8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00128dc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00128e0:	ff 35 b8 8d 02 c0    	push   DWORD PTR ds:0xc0028db8
c00128e6:	e8 6d fc ff ff       	call   c0012558 <EnvVarContainer::setEnv(char const*, char const*)>
c00128eb:	83 c4 1c             	add    esp,0x1c
c00128ee:	c3                   	ret    

c00128ef <Krnl::setEnvUser(char const*, char const*)>:
c00128ef:	a1 b4 8d 02 c0       	mov    eax,ds:0xc0028db4
c00128f4:	85 c0                	test   eax,eax
c00128f6:	74 15                	je     c001290d <Krnl::setEnvUser(char const*, char const*)+0x1e>
c00128f8:	83 ec 10             	sub    esp,0x10
c00128fb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00128ff:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012903:	50                   	push   eax
c0012904:	e8 4f fc ff ff       	call   c0012558 <EnvVarContainer::setEnv(char const*, char const*)>
c0012909:	83 c4 1c             	add    esp,0x1c
c001290c:	c3                   	ret    
c001290d:	c3                   	ret    

c001290e <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c001290e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012912:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c0012918:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001291c:	e9 37 fc ff ff       	jmp    c0012558 <EnvVarContainer::setEnv(char const*, char const*)>

c0012921 <Krnl::deleteEnvSystem(char const*)>:
c0012921:	c3                   	ret    

c0012922 <Krnl::deleteEnvUser(char const*)>:
c0012922:	c3                   	ret    

c0012923 <Krnl::deleteEnvProcess(Process*, char const*)>:
c0012923:	c3                   	ret    

c0012924 <Krnl::newProcessEnv(Process*)>:
c0012924:	83 ec 28             	sub    esp,0x28
c0012927:	6a 0c                	push   0xc
c0012929:	e8 69 6e ff ff       	call   c0009797 <malloc>
c001292e:	5a                   	pop    edx
c001292f:	59                   	pop    ecx
c0012930:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0012934:	50                   	push   eax
c0012935:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012939:	e8 e0 fe ff ff       	call   c001281e <EnvVarContainer::EnvVarContainer(Process*)>
c001293e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012942:	83 c4 2c             	add    esp,0x2c
c0012945:	c3                   	ret    

c0012946 <Krnl::copyProcessEnv(Process*, Process*)>:
c0012946:	57                   	push   edi
c0012947:	56                   	push   esi
c0012948:	53                   	push   ebx
c0012949:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001294d:	83 ec 0c             	sub    esp,0xc
c0012950:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c0012956:	6a 0c                	push   0xc
c0012958:	e8 3a 6e ff ff       	call   c0009797 <malloc>
c001295d:	89 c3                	mov    ebx,eax
c001295f:	58                   	pop    eax
c0012960:	5a                   	pop    edx
c0012961:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012965:	53                   	push   ebx
c0012966:	e8 b3 fe ff ff       	call   c001281e <EnvVarContainer::EnvVarContainer(Process*)>
c001296b:	8b 07                	mov    eax,DWORD PTR [edi]
c001296d:	89 03                	mov    DWORD PTR [ebx],eax
c001296f:	c1 e0 03             	shl    eax,0x3
c0012972:	89 04 24             	mov    DWORD PTR [esp],eax
c0012975:	e8 1d 6e ff ff       	call   c0009797 <malloc>
c001297a:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001297d:	8b 0f                	mov    ecx,DWORD PTR [edi]
c001297f:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c0012982:	c1 e1 03             	shl    ecx,0x3
c0012985:	89 c7                	mov    edi,eax
c0012987:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012989:	83 c4 10             	add    esp,0x10
c001298c:	89 d8                	mov    eax,ebx
c001298e:	5b                   	pop    ebx
c001298f:	5e                   	pop    esi
c0012990:	5f                   	pop    edi
c0012991:	c3                   	ret    

c0012992 <Krnl::loadSystemEnv()>:
c0012992:	53                   	push   ebx
c0012993:	83 ec 14             	sub    esp,0x14
c0012996:	6a 0c                	push   0xc
c0012998:	e8 fa 6d ff ff       	call   c0009797 <malloc>
c001299d:	89 c3                	mov    ebx,eax
c001299f:	58                   	pop    eax
c00129a0:	5a                   	pop    edx
c00129a1:	ff 35 30 98 02 c0    	push   DWORD PTR ds:0xc0029830
c00129a7:	53                   	push   ebx
c00129a8:	e8 71 fe ff ff       	call   c001281e <EnvVarContainer::EnvVarContainer(Process*)>
c00129ad:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00129b0:	89 1d b8 8d 02 c0    	mov    DWORD PTR ds:0xc0028db8,ebx
c00129b6:	e8 47 fe ff ff       	call   c0012802 <EnvVarContainer::__loadSystem()>
c00129bb:	83 c4 18             	add    esp,0x18
c00129be:	5b                   	pop    ebx
c00129bf:	c3                   	ret    

c00129c0 <Krnl::loadUserEnv()>:
c00129c0:	53                   	push   ebx
c00129c1:	83 ec 14             	sub    esp,0x14
c00129c4:	6a 0c                	push   0xc
c00129c6:	e8 cc 6d ff ff       	call   c0009797 <malloc>
c00129cb:	89 c3                	mov    ebx,eax
c00129cd:	58                   	pop    eax
c00129ce:	5a                   	pop    edx
c00129cf:	ff 35 30 98 02 c0    	push   DWORD PTR ds:0xc0029830
c00129d5:	53                   	push   ebx
c00129d6:	e8 43 fe ff ff       	call   c001281e <EnvVarContainer::EnvVarContainer(Process*)>
c00129db:	89 1d b4 8d 02 c0    	mov    DWORD PTR ds:0xc0028db4,ebx
c00129e1:	83 c4 18             	add    esp,0x18
c00129e4:	5b                   	pop    ebx
c00129e5:	c3                   	ret    

c00129e6 <Krnl::flushEnv()>:
c00129e6:	c3                   	ret    

c00129e7 <Krnl::getProcessTotalEnvCount(Process*)>:
c00129e7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00129eb:	8b 15 b4 8d 02 c0    	mov    edx,DWORD PTR ds:0xc0028db4
c00129f1:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c00129f7:	a1 b8 8d 02 c0       	mov    eax,ds:0xc0028db8
c00129fc:	8b 00                	mov    eax,DWORD PTR [eax]
c00129fe:	03 01                	add    eax,DWORD PTR [ecx]
c0012a00:	85 d2                	test   edx,edx
c0012a02:	74 02                	je     c0012a06 <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c0012a04:	03 02                	add    eax,DWORD PTR [edx]
c0012a06:	c3                   	ret    

c0012a07 <Krnl::getProcessEnvPair(Process*, int)>:
c0012a07:	57                   	push   edi
c0012a08:	56                   	push   esi
c0012a09:	8b 35 b4 8d 02 c0    	mov    esi,DWORD PTR ds:0xc0028db4
c0012a0f:	53                   	push   ebx
c0012a10:	85 f6                	test   esi,esi
c0012a12:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012a16:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012a1a:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c0012a20:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012a24:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012a26:	75 16                	jne    c0012a3e <Krnl::getProcessEnvPair(Process*, int)+0x37>
c0012a28:	39 c2                	cmp    edx,eax
c0012a2a:	7c 16                	jl     c0012a42 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c0012a2c:	8b 0d b8 8d 02 c0    	mov    ecx,DWORD PTR ds:0xc0028db8
c0012a32:	8b 31                	mov    esi,DWORD PTR [ecx]
c0012a34:	01 c6                	add    esi,eax
c0012a36:	39 d6                	cmp    esi,edx
c0012a38:	7e 3c                	jle    c0012a76 <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c0012a3a:	29 c2                	sub    edx,eax
c0012a3c:	eb 04                	jmp    c0012a42 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c0012a3e:	39 c2                	cmp    edx,eax
c0012a40:	7d 05                	jge    c0012a47 <Krnl::getProcessEnvPair(Process*, int)+0x40>
c0012a42:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0012a45:	eb 20                	jmp    c0012a67 <Krnl::getProcessEnvPair(Process*, int)+0x60>
c0012a47:	8b 3e                	mov    edi,DWORD PTR [esi]
c0012a49:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0012a4c:	39 d1                	cmp    ecx,edx
c0012a4e:	7e 04                	jle    c0012a54 <Krnl::getProcessEnvPair(Process*, int)+0x4d>
c0012a50:	29 c2                	sub    edx,eax
c0012a52:	eb 10                	jmp    c0012a64 <Krnl::getProcessEnvPair(Process*, int)+0x5d>
c0012a54:	8b 35 b8 8d 02 c0    	mov    esi,DWORD PTR ds:0xc0028db8
c0012a5a:	03 0e                	add    ecx,DWORD PTR [esi]
c0012a5c:	39 d1                	cmp    ecx,edx
c0012a5e:	7e 16                	jle    c0012a76 <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c0012a60:	29 c2                	sub    edx,eax
c0012a62:	29 fa                	sub    edx,edi
c0012a64:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0012a67:	8d 14 d0             	lea    edx,[eax+edx*8]
c0012a6a:	8b 02                	mov    eax,DWORD PTR [edx]
c0012a6c:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0012a6f:	89 03                	mov    DWORD PTR [ebx],eax
c0012a71:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0012a74:	eb 1d                	jmp    c0012a93 <Krnl::getProcessEnvPair(Process*, int)+0x8c>
c0012a76:	83 ec 0c             	sub    esp,0xc
c0012a79:	68 93 3f 02 c0       	push   0xc0023f93
c0012a7e:	e8 18 00 00 00       	call   c0012a9b <Krnl::panic(char const*)>
c0012a83:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0012a89:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0012a90:	83 c4 10             	add    esp,0x10
c0012a93:	89 d8                	mov    eax,ebx
c0012a95:	5b                   	pop    ebx
c0012a96:	5e                   	pop    esi
c0012a97:	5f                   	pop    edi
c0012a98:	c2 04 00             	ret    0x4

c0012a9b <Krnl::panic(char const*)>:
c0012a9b:	53                   	push   ebx
c0012a9c:	83 ec 10             	sub    esp,0x10
c0012a9f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012aa3:	fa                   	cli    
c0012aa4:	c6 05 c4 8d 02 c0 01 	mov    BYTE PTR ds:0xc0028dc4,0x1
c0012aab:	53                   	push   ebx
c0012aac:	68 ad 3f 02 c0       	push   0xc0023fad
c0012ab1:	e8 7b 9c ff ff       	call   c000c731 <Dbg::kprintf(char const*, ...)>
c0012ab6:	83 c4 0c             	add    esp,0xc
c0012ab9:	6a 01                	push   0x1
c0012abb:	6a 0f                	push   0xf
c0012abd:	ff 35 74 63 02 c0    	push   DWORD PTR ds:0xc0026374
c0012ac3:	e8 08 79 ff ff       	call   c000a3d0 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0012ac8:	59                   	pop    ecx
c0012ac9:	ff 35 74 63 02 c0    	push   DWORD PTR ds:0xc0026374
c0012acf:	e8 2a 7b ff ff       	call   c000a5fe <VgaText::clearScreen()>
c0012ad4:	58                   	pop    eax
c0012ad5:	5a                   	pop    edx
c0012ad6:	68 04 40 02 c0       	push   0xc0024004
c0012adb:	ff 35 74 63 02 c0    	push   DWORD PTR ds:0xc0026374
c0012ae1:	e8 22 79 ff ff       	call   c000a408 <VgaText::setTitle(char*)>
c0012ae6:	83 c4 0c             	add    esp,0xc
c0012ae9:	6a 01                	push   0x1
c0012aeb:	6a 0f                	push   0xf
c0012aed:	ff 35 74 63 02 c0    	push   DWORD PTR ds:0xc0026374
c0012af3:	e8 d8 78 ff ff       	call   c000a3d0 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0012af8:	59                   	pop    ecx
c0012af9:	58                   	pop    eax
c0012afa:	68 c6 3f 02 c0       	push   0xc0023fc6
c0012aff:	ff 35 74 63 02 c0    	push   DWORD PTR ds:0xc0026374
c0012b05:	e8 e8 7d ff ff       	call   c000a8f2 <VgaText::puts(char const*)>
c0012b0a:	58                   	pop    eax
c0012b0b:	5a                   	pop    edx
c0012b0c:	68 50 40 02 c0       	push   0xc0024050
c0012b11:	ff 35 74 63 02 c0    	push   DWORD PTR ds:0xc0026374
c0012b17:	e8 d6 7d ff ff       	call   c000a8f2 <VgaText::puts(char const*)>
c0012b1c:	59                   	pop    ecx
c0012b1d:	58                   	pop    eax
c0012b1e:	68 e2 3f 02 c0       	push   0xc0023fe2
c0012b23:	ff 35 74 63 02 c0    	push   DWORD PTR ds:0xc0026374
c0012b29:	e8 c4 7d ff ff       	call   c000a8f2 <VgaText::puts(char const*)>
c0012b2e:	58                   	pop    eax
c0012b2f:	5a                   	pop    edx
c0012b30:	53                   	push   ebx
c0012b31:	ff 35 74 63 02 c0    	push   DWORD PTR ds:0xc0026374
c0012b37:	e8 b6 7d ff ff       	call   c000a8f2 <VgaText::puts(char const*)>
c0012b3c:	59                   	pop    ecx
c0012b3d:	5b                   	pop    ebx
c0012b3e:	68 02 40 02 c0       	push   0xc0024002
c0012b43:	ff 35 74 63 02 c0    	push   DWORD PTR ds:0xc0026374
c0012b49:	e8 a4 7d ff ff       	call   c000a8f2 <VgaText::puts(char const*)>
c0012b4e:	58                   	pop    eax
c0012b4f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012b53:	e8 59 2a 00 00       	call   c00155b1 <Thr::getDriverNameFromAddress(unsigned long)>
c0012b58:	83 c4 10             	add    esp,0x10
c0012b5b:	85 c0                	test   eax,eax
c0012b5d:	0f 84 36 01 00 00    	je     c0012c99 <Krnl::panic(char const*)+0x1fe>
c0012b63:	83 ec 08             	sub    esp,0x8
c0012b66:	89 c3                	mov    ebx,eax
c0012b68:	68 8c 40 02 c0       	push   0xc002408c
c0012b6d:	ff 35 74 63 02 c0    	push   DWORD PTR ds:0xc0026374
c0012b73:	e8 7a 7d ff ff       	call   c000a8f2 <VgaText::puts(char const*)>
c0012b78:	59                   	pop    ecx
c0012b79:	58                   	pop    eax
c0012b7a:	68 e2 3f 02 c0       	push   0xc0023fe2
c0012b7f:	ff 35 74 63 02 c0    	push   DWORD PTR ds:0xc0026374
c0012b85:	e8 68 7d ff ff       	call   c000a8f2 <VgaText::puts(char const*)>
c0012b8a:	58                   	pop    eax
c0012b8b:	5a                   	pop    edx
c0012b8c:	53                   	push   ebx
c0012b8d:	ff 35 74 63 02 c0    	push   DWORD PTR ds:0xc0026374
c0012b93:	e8 5a 7d ff ff       	call   c000a8f2 <VgaText::puts(char const*)>
c0012b98:	83 c4 10             	add    esp,0x10
c0012b9b:	83 ec 08             	sub    esp,0x8
c0012b9e:	68 01 40 02 c0       	push   0xc0024001
c0012ba3:	ff 35 74 63 02 c0    	push   DWORD PTR ds:0xc0026374
c0012ba9:	e8 44 7d ff ff       	call   c000a8f2 <VgaText::puts(char const*)>
c0012bae:	58                   	pop    eax
c0012baf:	5a                   	pop    edx
c0012bb0:	68 e4 40 02 c0       	push   0xc00240e4
c0012bb5:	ff 35 74 63 02 c0    	push   DWORD PTR ds:0xc0026374
c0012bbb:	e8 32 7d ff ff       	call   c000a8f2 <VgaText::puts(char const*)>
c0012bc0:	59                   	pop    ecx
c0012bc1:	5b                   	pop    ebx
c0012bc2:	68 24 41 02 c0       	push   0xc0024124
c0012bc7:	ff 35 74 63 02 c0    	push   DWORD PTR ds:0xc0026374
c0012bcd:	e8 20 7d ff ff       	call   c000a8f2 <VgaText::puts(char const*)>
c0012bd2:	58                   	pop    eax
c0012bd3:	5a                   	pop    edx
c0012bd4:	68 ed 3f 02 c0       	push   0xc0023fed
c0012bd9:	ff 35 74 63 02 c0    	push   DWORD PTR ds:0xc0026374
c0012bdf:	e8 0e 7d ff ff       	call   c000a8f2 <VgaText::puts(char const*)>
c0012be4:	59                   	pop    ecx
c0012be5:	5b                   	pop    ebx
c0012be6:	68 68 41 02 c0       	push   0xc0024168
c0012beb:	ff 35 74 63 02 c0    	push   DWORD PTR ds:0xc0026374
c0012bf1:	e8 fc 7c ff ff       	call   c000a8f2 <VgaText::puts(char const*)>
c0012bf6:	58                   	pop    eax
c0012bf7:	5a                   	pop    edx
c0012bf8:	68 05 40 02 c0       	push   0xc0024005
c0012bfd:	ff 35 74 63 02 c0    	push   DWORD PTR ds:0xc0026374
c0012c03:	e8 ea 7c ff ff       	call   c000a8f2 <VgaText::puts(char const*)>
c0012c08:	0f 20 c0             	mov    eax,cr0
c0012c0b:	59                   	pop    ecx
c0012c0c:	5b                   	pop    ebx
c0012c0d:	50                   	push   eax
c0012c0e:	ff 35 74 63 02 c0    	push   DWORD PTR ds:0xc0026374
c0012c14:	e8 93 7c ff ff       	call   c000a8ac <VgaText::putx(unsigned int)>
c0012c19:	58                   	pop    eax
c0012c1a:	5a                   	pop    edx
c0012c1b:	68 0f 40 02 c0       	push   0xc002400f
c0012c20:	ff 35 74 63 02 c0    	push   DWORD PTR ds:0xc0026374
c0012c26:	e8 c7 7c ff ff       	call   c000a8f2 <VgaText::puts(char const*)>
c0012c2b:	0f 20 d0             	mov    eax,cr2
c0012c2e:	59                   	pop    ecx
c0012c2f:	5b                   	pop    ebx
c0012c30:	50                   	push   eax
c0012c31:	ff 35 74 63 02 c0    	push   DWORD PTR ds:0xc0026374
c0012c37:	e8 70 7c ff ff       	call   c000a8ac <VgaText::putx(unsigned int)>
c0012c3c:	58                   	pop    eax
c0012c3d:	5a                   	pop    edx
c0012c3e:	68 19 40 02 c0       	push   0xc0024019
c0012c43:	ff 35 74 63 02 c0    	push   DWORD PTR ds:0xc0026374
c0012c49:	e8 a4 7c ff ff       	call   c000a8f2 <VgaText::puts(char const*)>
c0012c4e:	0f 20 d8             	mov    eax,cr3
c0012c51:	59                   	pop    ecx
c0012c52:	5b                   	pop    ebx
c0012c53:	50                   	push   eax
c0012c54:	ff 35 74 63 02 c0    	push   DWORD PTR ds:0xc0026374
c0012c5a:	e8 4d 7c ff ff       	call   c000a8ac <VgaText::putx(unsigned int)>
c0012c5f:	58                   	pop    eax
c0012c60:	5a                   	pop    edx
c0012c61:	68 2c 40 02 c0       	push   0xc002402c
c0012c66:	ff 35 74 63 02 c0    	push   DWORD PTR ds:0xc0026374
c0012c6c:	e8 81 7c ff ff       	call   c000a8f2 <VgaText::puts(char const*)>
c0012c71:	0f 20 e0             	mov    eax,cr4
c0012c74:	59                   	pop    ecx
c0012c75:	5b                   	pop    ebx
c0012c76:	50                   	push   eax
c0012c77:	ff 35 74 63 02 c0    	push   DWORD PTR ds:0xc0026374
c0012c7d:	e8 2a 7c ff ff       	call   c000a8ac <VgaText::putx(unsigned int)>
c0012c82:	58                   	pop    eax
c0012c83:	5a                   	pop    edx
c0012c84:	68 36 40 02 c0       	push   0xc0024036
c0012c89:	ff 35 74 63 02 c0    	push   DWORD PTR ds:0xc0026374
c0012c8f:	e8 5e 7c ff ff       	call   c000a8f2 <VgaText::puts(char const*)>
c0012c94:	83 c4 10             	add    esp,0x10
c0012c97:	eb fe                	jmp    c0012c97 <Krnl::panic(char const*)+0x1fc>
c0012c99:	51                   	push   ecx
c0012c9a:	51                   	push   ecx
c0012c9b:	68 b8 40 02 c0       	push   0xc00240b8
c0012ca0:	ff 35 74 63 02 c0    	push   DWORD PTR ds:0xc0026374
c0012ca6:	e8 47 7c ff ff       	call   c000a8f2 <VgaText::puts(char const*)>
c0012cab:	5b                   	pop    ebx
c0012cac:	58                   	pop    eax
c0012cad:	68 e2 3f 02 c0       	push   0xc0023fe2
c0012cb2:	ff 35 74 63 02 c0    	push   DWORD PTR ds:0xc0026374
c0012cb8:	e8 35 7c ff ff       	call   c000a8f2 <VgaText::puts(char const*)>
c0012cbd:	58                   	pop    eax
c0012cbe:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012cc3:	5a                   	pop    edx
c0012cc4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012cc7:	83 c0 0c             	add    eax,0xc
c0012cca:	50                   	push   eax
c0012ccb:	ff 35 74 63 02 c0    	push   DWORD PTR ds:0xc0026374
c0012cd1:	e8 1c 7c ff ff       	call   c000a8f2 <VgaText::puts(char const*)>
c0012cd6:	83 c4 10             	add    esp,0x10
c0012cd9:	e9 bd fe ff ff       	jmp    c0012b9b <Krnl::panic(char const*)+0x100>

c0012cde <Krnl::powerThread(void*)>:
c0012cde:	53                   	push   ebx
c0012cdf:	83 ec 08             	sub    esp,0x8
c0012ce2:	a1 08 98 02 c0       	mov    eax,ds:0xc0029808
c0012ce7:	48                   	dec    eax
c0012ce8:	a3 08 98 02 c0       	mov    ds:0xc0029808,eax
c0012ced:	75 01                	jne    c0012cf0 <Krnl::powerThread(void*)+0x12>
c0012cef:	fb                   	sti    
c0012cf0:	52                   	push   edx
c0012cf1:	52                   	push   edx
c0012cf2:	ff 35 24 8e 02 c0    	push   DWORD PTR ds:0xc0028e24
c0012cf8:	68 8e 41 02 c0       	push   0xc002418e
c0012cfd:	e8 2f 9a ff ff       	call   c000c731 <Dbg::kprintf(char const*, ...)>
c0012d02:	59                   	pop    ecx
c0012d03:	8b 1d 14 8e 02 c0    	mov    ebx,DWORD PTR ds:0xc0028e14
c0012d09:	58                   	pop    eax
c0012d0a:	c6 05 e0 8d 02 c0 00 	mov    BYTE PTR ds:0xc0028de0,0x0
c0012d11:	53                   	push   ebx
c0012d12:	68 98 41 02 c0       	push   0xc0024198
c0012d17:	e8 15 9a ff ff       	call   c000c731 <Dbg::kprintf(char const*, ...)>
c0012d1c:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c0012d23:	e8 c0 35 00 00       	call   c00162e8 <sleep(unsigned int)>
c0012d28:	a1 24 8e 02 c0       	mov    eax,ds:0xc0028e24
c0012d2d:	83 c4 10             	add    esp,0x10
c0012d30:	83 c0 0a             	add    eax,0xa
c0012d33:	85 db                	test   ebx,ebx
c0012d35:	a3 24 8e 02 c0       	mov    ds:0xc0028e24,eax
c0012d3a:	74 b4                	je     c0012cf0 <Krnl::powerThread(void*)+0x12>
c0012d3c:	39 d8                	cmp    eax,ebx
c0012d3e:	7e b0                	jle    c0012cf0 <Krnl::powerThread(void*)+0x12>
c0012d40:	83 ec 0c             	sub    esp,0xc
c0012d43:	68 b0 41 02 c0       	push   0xc00241b0
c0012d48:	e8 e4 99 ff ff       	call   c000c731 <Dbg::kprintf(char const*, ...)>
c0012d4d:	58                   	pop    eax
c0012d4e:	ff 35 28 63 02 c0    	push   DWORD PTR ds:0xc0026328
c0012d54:	e8 89 60 ff ff       	call   c0008de2 <Computer::sleep()>
c0012d59:	83 c4 10             	add    esp,0x10
c0012d5c:	eb 92                	jmp    c0012cf0 <Krnl::powerThread(void*)+0x12>

c0012d5e <Krnl::changePowerSettings(Krnl::PowerSettings)>:
c0012d5e:	57                   	push   edi
c0012d5f:	b9 09 00 00 00       	mov    ecx,0x9
c0012d64:	56                   	push   esi
c0012d65:	bf 00 8e 02 c0       	mov    edi,0xc0028e00
c0012d6a:	fc                   	cld    
c0012d6b:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0012d6f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0012d71:	5e                   	pop    esi
c0012d72:	5f                   	pop    edi
c0012d73:	c3                   	ret    

c0012d74 <Krnl::userIOReceived()>:
c0012d74:	c7 05 24 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028e24,0x0
c0012d7e:	c3                   	ret    

c0012d7f <Krnl::handlePowerButton()>:
c0012d7f:	83 ec 0c             	sub    esp,0xc
c0012d82:	a1 00 8e 02 c0       	mov    eax,ds:0xc0028e00
c0012d87:	83 f8 02             	cmp    eax,0x2
c0012d8a:	75 10                	jne    c0012d9c <Krnl::handlePowerButton()+0x1d>
c0012d8c:	83 ec 0c             	sub    esp,0xc
c0012d8f:	ff 35 28 63 02 c0    	push   DWORD PTR ds:0xc0026328
c0012d95:	e8 18 60 ff ff       	call   c0008db2 <Computer::shutdown()>
c0012d9a:	eb 11                	jmp    c0012dad <Krnl::handlePowerButton()+0x2e>
c0012d9c:	48                   	dec    eax
c0012d9d:	75 11                	jne    c0012db0 <Krnl::handlePowerButton()+0x31>
c0012d9f:	83 ec 0c             	sub    esp,0xc
c0012da2:	ff 35 28 63 02 c0    	push   DWORD PTR ds:0xc0026328
c0012da8:	e8 35 60 ff ff       	call   c0008de2 <Computer::sleep()>
c0012dad:	83 c4 10             	add    esp,0x10
c0012db0:	83 c4 0c             	add    esp,0xc
c0012db3:	c3                   	ret    

c0012db4 <Krnl::handleSleepButton()>:
c0012db4:	83 ec 0c             	sub    esp,0xc
c0012db7:	a1 04 8e 02 c0       	mov    eax,ds:0xc0028e04
c0012dbc:	83 f8 02             	cmp    eax,0x2
c0012dbf:	75 10                	jne    c0012dd1 <Krnl::handleSleepButton()+0x1d>
c0012dc1:	83 ec 0c             	sub    esp,0xc
c0012dc4:	ff 35 28 63 02 c0    	push   DWORD PTR ds:0xc0026328
c0012dca:	e8 e3 5f ff ff       	call   c0008db2 <Computer::shutdown()>
c0012dcf:	eb 11                	jmp    c0012de2 <Krnl::handleSleepButton()+0x2e>
c0012dd1:	48                   	dec    eax
c0012dd2:	75 11                	jne    c0012de5 <Krnl::handleSleepButton()+0x31>
c0012dd4:	83 ec 0c             	sub    esp,0xc
c0012dd7:	ff 35 28 63 02 c0    	push   DWORD PTR ds:0xc0026328
c0012ddd:	e8 00 60 ff ff       	call   c0008de2 <Computer::sleep()>
c0012de2:	83 c4 10             	add    esp,0x10
c0012de5:	83 c4 0c             	add    esp,0xc
c0012de8:	c3                   	ret    

c0012de9 <Krnl::setupPowerManager()>:
c0012de9:	83 ec 0c             	sub    esp,0xc
c0012dec:	c7 05 24 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028e24,0x0
c0012df6:	68 f0 00 00 00       	push   0xf0
c0012dfb:	c6 05 e0 8d 02 c0 00 	mov    BYTE PTR ds:0xc0028de0,0x0
c0012e02:	6a 00                	push   0x0
c0012e04:	68 de 2c 01 c0       	push   0xc0012cde
c0012e09:	ff 35 30 98 02 c0    	push   DWORD PTR ds:0xc0029830
c0012e0f:	e8 b0 2f 00 00       	call   c0015dc4 <Process::createThread(void (*)(void*), void*, int)>
c0012e14:	c7 05 00 8e 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc0028e00,0x2
c0012e1e:	c7 05 04 8e 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0028e04,0x1
c0012e28:	c7 05 08 8e 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc0028e08,0x3
c0012e32:	c7 05 0c 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028e0c,0x0
c0012e3c:	c7 05 18 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028e18,0x0
c0012e46:	c7 05 10 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028e10,0x0
c0012e50:	c7 05 1c 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028e1c,0x0
c0012e5a:	c7 05 14 8e 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0028e14,0x3c
c0012e64:	c7 05 20 8e 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0028e20,0x3c
c0012e6e:	83 c4 1c             	add    esp,0x1c
c0012e71:	c3                   	ret    

c0012e72 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c0012e72:	55                   	push   ebp
c0012e73:	57                   	push   edi
c0012e74:	56                   	push   esi
c0012e75:	53                   	push   ebx
c0012e76:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0012e7c:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0012e83:	8a 1e                	mov    bl,BYTE PTR [esi]
c0012e85:	8d 6e 01             	lea    ebp,[esi+0x1]
c0012e88:	80 fb 40             	cmp    bl,0x40
c0012e8b:	75 1b                	jne    c0012ea8 <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c0012e8d:	8a 16                	mov    dl,BYTE PTR [esi]
c0012e8f:	84 d2                	test   dl,dl
c0012e91:	0f 84 f1 00 00 00    	je     c0012f88 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0012e97:	8d 46 01             	lea    eax,[esi+0x1]
c0012e9a:	80 fa 3a             	cmp    dl,0x3a
c0012e9d:	74 04                	je     c0012ea3 <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c0012e9f:	89 c6                	mov    esi,eax
c0012ea1:	eb ea                	jmp    c0012e8d <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c0012ea3:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012ea6:	89 c6                	mov    esi,eax
c0012ea8:	50                   	push   eax
c0012ea9:	6a 40                	push   0x40
c0012eab:	6a 00                	push   0x0
c0012ead:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012eb1:	50                   	push   eax
c0012eb2:	e8 f1 d5 fe ff       	call   c00004a8 <memset>
c0012eb7:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c0012ebe:	31 c0                	xor    eax,eax
c0012ec0:	83 c4 10             	add    esp,0x10
c0012ec3:	8a 0f                	mov    cl,BYTE PTR [edi]
c0012ec5:	84 c9                	test   cl,cl
c0012ec7:	0f 84 bb 00 00 00    	je     c0012f88 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0012ecd:	3d c7 00 00 00       	cmp    eax,0xc7
c0012ed2:	0f 8f b0 00 00 00    	jg     c0012f88 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0012ed8:	80 f9 0a             	cmp    cl,0xa
c0012edb:	0f 85 98 00 00 00    	jne    c0012f79 <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c0012ee1:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c0012ee6:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c0012eea:	a8 df                	test   al,0xdf
c0012eec:	0f 94 c1             	sete   cl
c0012eef:	3c 23                	cmp    al,0x23
c0012ef1:	0f 94 c2             	sete   dl
c0012ef4:	08 d1                	or     cl,dl
c0012ef6:	75 4a                	jne    c0012f42 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0012ef8:	8d 50 f7             	lea    edx,[eax-0x9]
c0012efb:	80 fa 01             	cmp    dl,0x1
c0012efe:	76 42                	jbe    c0012f42 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0012f00:	3c 5b                	cmp    al,0x5b
c0012f02:	75 42                	jne    c0012f46 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c0012f04:	80 fb 40             	cmp    bl,0x40
c0012f07:	75 39                	jne    c0012f42 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0012f09:	83 ec 0c             	sub    esp,0xc
c0012f0c:	8d 54 24 65          	lea    edx,[esp+0x65]
c0012f10:	52                   	push   edx
c0012f11:	e8 ae d5 fe ff       	call   c00004c4 <strlen>
c0012f16:	83 c4 10             	add    esp,0x10
c0012f19:	83 f8 3f             	cmp    eax,0x3f
c0012f1c:	77 6a                	ja     c0012f88 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0012f1e:	50                   	push   eax
c0012f1f:	50                   	push   eax
c0012f20:	8d 54 24 61          	lea    edx,[esp+0x61]
c0012f24:	52                   	push   edx
c0012f25:	8d 54 24 24          	lea    edx,[esp+0x24]
c0012f29:	52                   	push   edx
c0012f2a:	e8 35 d6 fe ff       	call   c0000564 <strcpy>
c0012f2f:	58                   	pop    eax
c0012f30:	8d 54 24 24          	lea    edx,[esp+0x24]
c0012f34:	52                   	push   edx
c0012f35:	e8 8a d5 fe ff       	call   c00004c4 <strlen>
c0012f3a:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c0012f3f:	83 c4 10             	add    esp,0x10
c0012f42:	31 d2                	xor    edx,edx
c0012f44:	eb 3a                	jmp    c0012f80 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c0012f46:	80 fb 40             	cmp    bl,0x40
c0012f49:	74 06                	je     c0012f51 <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c0012f4b:	8d 44 24 58          	lea    eax,[esp+0x58]
c0012f4f:	eb 20                	jmp    c0012f71 <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c0012f51:	50                   	push   eax
c0012f52:	50                   	push   eax
c0012f53:	55                   	push   ebp
c0012f54:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012f58:	50                   	push   eax
c0012f59:	e8 92 d6 fe ff       	call   c00005f0 <strcmp>
c0012f5e:	83 c4 10             	add    esp,0x10
c0012f61:	85 c0                	test   eax,eax
c0012f63:	75 dd                	jne    c0012f42 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0012f65:	eb e4                	jmp    c0012f4b <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c0012f67:	8d 50 01             	lea    edx,[eax+0x1]
c0012f6a:	80 f9 3d             	cmp    cl,0x3d
c0012f6d:	74 1d                	je     c0012f8c <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c0012f6f:	89 d0                	mov    eax,edx
c0012f71:	8a 08                	mov    cl,BYTE PTR [eax]
c0012f73:	84 c9                	test   cl,cl
c0012f75:	75 f0                	jne    c0012f67 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c0012f77:	eb 0f                	jmp    c0012f88 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0012f79:	8d 50 01             	lea    edx,[eax+0x1]
c0012f7c:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c0012f80:	47                   	inc    edi
c0012f81:	89 d0                	mov    eax,edx
c0012f83:	e9 3b ff ff ff       	jmp    c0012ec3 <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c0012f88:	31 c0                	xor    eax,eax
c0012f8a:	eb 33                	jmp    c0012fbf <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c0012f8c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012f90:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0012f93:	50                   	push   eax
c0012f94:	50                   	push   eax
c0012f95:	8d 44 24 60          	lea    eax,[esp+0x60]
c0012f99:	50                   	push   eax
c0012f9a:	56                   	push   esi
c0012f9b:	e8 50 d6 fe ff       	call   c00005f0 <strcmp>
c0012fa0:	83 c4 10             	add    esp,0x10
c0012fa3:	85 c0                	test   eax,eax
c0012fa5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012fa9:	75 97                	jne    c0012f42 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0012fab:	51                   	push   ecx
c0012fac:	51                   	push   ecx
c0012fad:	52                   	push   edx
c0012fae:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0012fb5:	e8 aa d5 fe ff       	call   c0000564 <strcpy>
c0012fba:	83 c4 10             	add    esp,0x10
c0012fbd:	b0 01                	mov    al,0x1
c0012fbf:	81 c4 2c 01 00 00    	add    esp,0x12c
c0012fc5:	5b                   	pop    ebx
c0012fc6:	5e                   	pop    esi
c0012fc7:	5f                   	pop    edi
c0012fc8:	5d                   	pop    ebp
c0012fc9:	c3                   	ret    

c0012fca <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c0012fca:	57                   	push   edi
c0012fcb:	56                   	push   esi
c0012fcc:	53                   	push   ebx
c0012fcd:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0012fd3:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c0012fda:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0012fe1:	53                   	push   ebx
c0012fe2:	e8 dd d4 fe ff       	call   c00004c4 <strlen>
c0012fe7:	89 34 24             	mov    DWORD PTR [esp],esi
c0012fea:	89 c7                	mov    edi,eax
c0012fec:	e8 d3 d4 fe ff       	call   c00004c4 <strlen>
c0012ff1:	83 c4 10             	add    esp,0x10
c0012ff4:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c0012ff8:	3d ff 00 00 00       	cmp    eax,0xff
c0012ffd:	0f 87 d3 00 00 00    	ja     c00130d6 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0013003:	57                   	push   edi
c0013004:	57                   	push   edi
c0013005:	56                   	push   esi
c0013006:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001300a:	56                   	push   esi
c001300b:	e8 54 d5 fe ff       	call   c0000564 <strcpy>
c0013010:	58                   	pop    eax
c0013011:	5a                   	pop    edx
c0013012:	68 13 45 02 c0       	push   0xc0024513
c0013017:	56                   	push   esi
c0013018:	e8 87 d6 fe ff       	call   c00006a4 <strcat>
c001301d:	59                   	pop    ecx
c001301e:	5f                   	pop    edi
c001301f:	53                   	push   ebx
c0013020:	56                   	push   esi
c0013021:	e8 7e d6 fe ff       	call   c00006a4 <strcat>
c0013026:	58                   	pop    eax
c0013027:	5a                   	pop    edx
c0013028:	68 bd 41 02 c0       	push   0xc00241bd
c001302d:	56                   	push   esi
c001302e:	e8 71 d6 fe ff       	call   c00006a4 <strcat>
c0013033:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001303a:	e8 58 67 ff ff       	call   c0009797 <malloc>
c001303f:	83 c4 0c             	add    esp,0xc
c0013042:	89 c3                	mov    ebx,eax
c0013044:	ff 35 30 98 02 c0    	push   DWORD PTR ds:0xc0029830
c001304a:	56                   	push   esi
c001304b:	50                   	push   eax
c001304c:	e8 4b 9c ff ff       	call   c000cc9c <File::File(char const*, Process*)>
c0013051:	83 c4 10             	add    esp,0x10
c0013054:	85 db                	test   ebx,ebx
c0013056:	74 7e                	je     c00130d6 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0013058:	51                   	push   ecx
c0013059:	51                   	push   ecx
c001305a:	6a 01                	push   0x1
c001305c:	53                   	push   ebx
c001305d:	e8 14 9d ff ff       	call   c000cd76 <File::open(FileOpenMode)>
c0013062:	83 c4 10             	add    esp,0x10
c0013065:	85 c0                	test   eax,eax
c0013067:	74 08                	je     c0013071 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c0013069:	83 ec 0c             	sub    esp,0xc
c001306c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001306e:	53                   	push   ebx
c001306f:	eb 5f                	jmp    c00130d0 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c0013071:	52                   	push   edx
c0013072:	8d 44 24 17          	lea    eax,[esp+0x17]
c0013076:	50                   	push   eax
c0013077:	8d 44 24 20          	lea    eax,[esp+0x20]
c001307b:	50                   	push   eax
c001307c:	53                   	push   ebx
c001307d:	e8 a0 9f ff ff       	call   c000d022 <File::stat(unsigned long long*, bool*)>
c0013082:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013086:	83 c4 10             	add    esp,0x10
c0013089:	89 c1                	mov    ecx,eax
c001308b:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c001308f:	74 31                	je     c00130c2 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0013091:	83 ec 0c             	sub    esp,0xc
c0013094:	50                   	push   eax
c0013095:	e8 fd 66 ff ff       	call   c0009797 <malloc>
c001309a:	89 c6                	mov    esi,eax
c001309c:	58                   	pop    eax
c001309d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001309f:	8d 54 24 20          	lea    edx,[esp+0x20]
c00130a3:	52                   	push   edx
c00130a4:	56                   	push   esi
c00130a5:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00130a9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00130ad:	53                   	push   ebx
c00130ae:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00130b1:	83 c4 20             	add    esp,0x20
c00130b4:	85 c0                	test   eax,eax
c00130b6:	75 0a                	jne    c00130c2 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c00130b8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00130bc:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c00130c0:	74 18                	je     c00130da <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c00130c2:	83 ec 0c             	sub    esp,0xc
c00130c5:	53                   	push   ebx
c00130c6:	e8 09 9d ff ff       	call   c000cdd4 <File::close()>
c00130cb:	8b 03                	mov    eax,DWORD PTR [ebx]
c00130cd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00130d0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00130d3:	83 c4 10             	add    esp,0x10
c00130d6:	31 c0                	xor    eax,eax
c00130d8:	eb 3b                	jmp    c0013115 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c00130da:	83 ec 0c             	sub    esp,0xc
c00130dd:	53                   	push   ebx
c00130de:	e8 f1 9c ff ff       	call   c000cdd4 <File::close()>
c00130e3:	8b 03                	mov    eax,DWORD PTR [ebx]
c00130e5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00130e8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00130eb:	83 c4 0c             	add    esp,0xc
c00130ee:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c00130f5:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c00130fc:	56                   	push   esi
c00130fd:	e8 70 fd ff ff       	call   c0012e72 <Reg::findLineFromLoadedData(char*, char*, char*)>
c0013102:	89 34 24             	mov    DWORD PTR [esp],esi
c0013105:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0013109:	e8 99 66 ff ff       	call   c00097a7 <free>
c001310e:	83 c4 10             	add    esp,0x10
c0013111:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0013115:	81 c4 20 01 00 00    	add    esp,0x120
c001311b:	5b                   	pop    ebx
c001311c:	5e                   	pop    esi
c001311d:	5f                   	pop    edi
c001311e:	c3                   	ret    

c001311f <Reg::getLine(char*, char*, char*)>:
c001311f:	57                   	push   edi
c0013120:	56                   	push   esi
c0013121:	53                   	push   ebx
c0013122:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013126:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001312a:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001312e:	57                   	push   edi
c001312f:	56                   	push   esi
c0013130:	53                   	push   ebx
c0013131:	68 c2 41 02 c0       	push   0xc00241c2
c0013136:	e8 8f fe ff ff       	call   c0012fca <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001313b:	83 c4 10             	add    esp,0x10
c001313e:	84 c0                	test   al,al
c0013140:	75 10                	jne    c0013152 <Reg::getLine(char*, char*, char*)+0x33>
c0013142:	57                   	push   edi
c0013143:	56                   	push   esi
c0013144:	53                   	push   ebx
c0013145:	68 e7 41 02 c0       	push   0xc00241e7
c001314a:	e8 7b fe ff ff       	call   c0012fca <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001314f:	83 c4 10             	add    esp,0x10
c0013152:	5b                   	pop    ebx
c0013153:	5e                   	pop    esi
c0013154:	5f                   	pop    edi
c0013155:	c3                   	ret    

c0013156 <Reg::readInt(char*, char*, int*)>:
c0013156:	55                   	push   ebp
c0013157:	57                   	push   edi
c0013158:	56                   	push   esi
c0013159:	53                   	push   ebx
c001315a:	81 ec f0 00 00 00    	sub    esp,0xf0
c0013160:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0013164:	57                   	push   edi
c0013165:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001316c:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0013173:	e8 a7 ff ff ff       	call   c001311f <Reg::getLine(char*, char*, char*)>
c0013178:	83 c4 10             	add    esp,0x10
c001317b:	84 c0                	test   al,al
c001317d:	0f 84 b3 00 00 00    	je     c0013236 <Reg::readInt(char*, char*, int*)+0xe0>
c0013183:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0013187:	80 fa 2b             	cmp    dl,0x2b
c001318a:	74 0c                	je     c0013198 <Reg::readInt(char*, char*, int*)+0x42>
c001318c:	80 fa 2d             	cmp    dl,0x2d
c001318f:	75 0e                	jne    c001319f <Reg::readInt(char*, char*, int*)+0x49>
c0013191:	ba 01 00 00 00       	mov    edx,0x1
c0013196:	eb 0b                	jmp    c00131a3 <Reg::readInt(char*, char*, int*)+0x4d>
c0013198:	ba 01 00 00 00       	mov    edx,0x1
c001319d:	eb 02                	jmp    c00131a1 <Reg::readInt(char*, char*, int*)+0x4b>
c001319f:	31 d2                	xor    edx,edx
c00131a1:	31 c0                	xor    eax,eax
c00131a3:	be 0a 00 00 00       	mov    esi,0xa
c00131a8:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c00131ad:	75 20                	jne    c00131cf <Reg::readInt(char*, char*, int*)+0x79>
c00131af:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c00131b3:	80 f9 78             	cmp    cl,0x78
c00131b6:	75 0a                	jne    c00131c2 <Reg::readInt(char*, char*, int*)+0x6c>
c00131b8:	83 c2 02             	add    edx,0x2
c00131bb:	be 10 00 00 00       	mov    esi,0x10
c00131c0:	eb 0d                	jmp    c00131cf <Reg::readInt(char*, char*, int*)+0x79>
c00131c2:	80 f9 62             	cmp    cl,0x62
c00131c5:	75 08                	jne    c00131cf <Reg::readInt(char*, char*, int*)+0x79>
c00131c7:	83 c2 02             	add    edx,0x2
c00131ca:	be 02 00 00 00       	mov    esi,0x2
c00131cf:	01 d7                	add    edi,edx
c00131d1:	31 d2                	xor    edx,edx
c00131d3:	8a 1f                	mov    bl,BYTE PTR [edi]
c00131d5:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c00131d9:	80 fb 0d             	cmp    bl,0xd
c00131dc:	0f 94 c3             	sete   bl
c00131df:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00131e4:	0f 94 c1             	sete   cl
c00131e7:	08 cb                	or     bl,cl
c00131e9:	75 3a                	jne    c0013225 <Reg::readInt(char*, char*, int*)+0xcf>
c00131eb:	0f af d6             	imul   edx,esi
c00131ee:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c00131f3:	83 fe 10             	cmp    esi,0x10
c00131f6:	75 26                	jne    c001321e <Reg::readInt(char*, char*, int*)+0xc8>
c00131f8:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00131fc:	8d 69 bf             	lea    ebp,[ecx-0x41]
c00131ff:	89 e9                	mov    ecx,ebp
c0013201:	80 f9 05             	cmp    cl,0x5
c0013204:	77 06                	ja     c001320c <Reg::readInt(char*, char*, int*)+0xb6>
c0013206:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c001320a:	eb 16                	jmp    c0013222 <Reg::readInt(char*, char*, int*)+0xcc>
c001320c:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0013210:	83 e9 61             	sub    ecx,0x61
c0013213:	80 f9 05             	cmp    cl,0x5
c0013216:	77 06                	ja     c001321e <Reg::readInt(char*, char*, int*)+0xc8>
c0013218:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c001321c:	eb 04                	jmp    c0013222 <Reg::readInt(char*, char*, int*)+0xcc>
c001321e:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c0013222:	47                   	inc    edi
c0013223:	eb ae                	jmp    c00131d3 <Reg::readInt(char*, char*, int*)+0x7d>
c0013225:	84 c0                	test   al,al
c0013227:	74 02                	je     c001322b <Reg::readInt(char*, char*, int*)+0xd5>
c0013229:	f7 da                	neg    edx
c001322b:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c0013232:	89 10                	mov    DWORD PTR [eax],edx
c0013234:	88 d8                	mov    al,bl
c0013236:	81 c4 ec 00 00 00    	add    esp,0xec
c001323c:	5b                   	pop    ebx
c001323d:	5e                   	pop    esi
c001323e:	5f                   	pop    edi
c001323f:	5d                   	pop    ebp
c0013240:	c3                   	ret    

c0013241 <Reg::readString(char*, char*, char*, int)>:
c0013241:	57                   	push   edi
c0013242:	56                   	push   esi
c0013243:	53                   	push   ebx
c0013244:	81 ec d4 00 00 00    	sub    esp,0xd4
c001324a:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c0013251:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c0013255:	57                   	push   edi
c0013256:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001325d:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0013264:	e8 b6 fe ff ff       	call   c001311f <Reg::getLine(char*, char*, char*)>
c0013269:	83 c4 10             	add    esp,0x10
c001326c:	89 c6                	mov    esi,eax
c001326e:	84 c0                	test   al,al
c0013270:	74 44                	je     c00132b6 <Reg::readString(char*, char*, char*, int)+0x75>
c0013272:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c0013279:	31 c0                	xor    eax,eax
c001327b:	4a                   	dec    edx
c001327c:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c001327f:	84 c9                	test   cl,cl
c0013281:	74 0f                	je     c0013292 <Reg::readString(char*, char*, char*, int)+0x51>
c0013283:	39 c2                	cmp    edx,eax
c0013285:	7e 0b                	jle    c0013292 <Reg::readString(char*, char*, char*, int)+0x51>
c0013287:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c001328a:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c001328f:	40                   	inc    eax
c0013290:	eb ea                	jmp    c001327c <Reg::readString(char*, char*, char*, int)+0x3b>
c0013292:	83 ec 0c             	sub    esp,0xc
c0013295:	53                   	push   ebx
c0013296:	e8 29 d2 fe ff       	call   c00004c4 <strlen>
c001329b:	83 c4 10             	add    esp,0x10
c001329e:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c00132a3:	75 11                	jne    c00132b6 <Reg::readString(char*, char*, char*, int)+0x75>
c00132a5:	83 ec 0c             	sub    esp,0xc
c00132a8:	53                   	push   ebx
c00132a9:	e8 16 d2 fe ff       	call   c00004c4 <strlen>
c00132ae:	83 c4 10             	add    esp,0x10
c00132b1:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c00132b6:	81 c4 d0 00 00 00    	add    esp,0xd0
c00132bc:	89 f0                	mov    eax,esi
c00132be:	5b                   	pop    ebx
c00132bf:	5e                   	pop    esi
c00132c0:	5f                   	pop    edi
c00132c1:	c3                   	ret    

c00132c2 <Reg::readBool(char*, char*, bool*)>:
c00132c2:	83 ec 20             	sub    esp,0x20
c00132c5:	8d 44 24 10          	lea    eax,[esp+0x10]
c00132c9:	50                   	push   eax
c00132ca:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00132ce:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00132d2:	e8 7f fe ff ff       	call   c0013156 <Reg::readInt(char*, char*, int*)>
c00132d7:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00132dc:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00132e0:	0f 95 02             	setne  BYTE PTR [edx]
c00132e3:	83 c4 2c             	add    esp,0x2c
c00132e6:	c3                   	ret    

c00132e7 <Reg::readBoolWithDefault(char*, char*, bool)>:
c00132e7:	53                   	push   ebx
c00132e8:	83 ec 1c             	sub    esp,0x1c
c00132eb:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c00132ef:	8d 44 24 13          	lea    eax,[esp+0x13]
c00132f3:	50                   	push   eax
c00132f4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00132f8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00132fc:	e8 c1 ff ff ff       	call   c00132c2 <Reg::readBool(char*, char*, bool*)>
c0013301:	83 c4 10             	add    esp,0x10
c0013304:	84 c0                	test   al,al
c0013306:	74 04                	je     c001330c <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c0013308:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c001330c:	88 d8                	mov    al,bl
c001330e:	83 c4 18             	add    esp,0x18
c0013311:	5b                   	pop    ebx
c0013312:	c3                   	ret    

c0013313 <Reg::readIntWithDefault(char*, char*, int)>:
c0013313:	53                   	push   ebx
c0013314:	83 ec 1c             	sub    esp,0x1c
c0013317:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001331b:	8d 44 24 10          	lea    eax,[esp+0x10]
c001331f:	50                   	push   eax
c0013320:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013324:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013328:	e8 29 fe ff ff       	call   c0013156 <Reg::readInt(char*, char*, int*)>
c001332d:	83 c4 10             	add    esp,0x10
c0013330:	84 c0                	test   al,al
c0013332:	74 04                	je     c0013338 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c0013334:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0013338:	89 d8                	mov    eax,ebx
c001333a:	83 c4 18             	add    esp,0x18
c001333d:	5b                   	pop    ebx
c001333e:	c3                   	ret    

c001333f <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c001333f:	57                   	push   edi
c0013340:	56                   	push   esi
c0013341:	56                   	push   esi
c0013342:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013346:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001334a:	56                   	push   esi
c001334b:	57                   	push   edi
c001334c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013350:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013354:	e8 e8 fe ff ff       	call   c0013241 <Reg::readString(char*, char*, char*, int)>
c0013359:	83 c4 10             	add    esp,0x10
c001335c:	84 c0                	test   al,al
c001335e:	75 1a                	jne    c001337a <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c0013360:	51                   	push   ecx
c0013361:	56                   	push   esi
c0013362:	6a 00                	push   0x0
c0013364:	57                   	push   edi
c0013365:	e8 3e d1 fe ff       	call   c00004a8 <memset>
c001336a:	8d 4e ff             	lea    ecx,[esi-0x1]
c001336d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0013371:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013373:	83 c4 10             	add    esp,0x10
c0013376:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001337a:	89 f8                	mov    eax,edi
c001337c:	5a                   	pop    edx
c001337d:	5e                   	pop    esi
c001337e:	5f                   	pop    edi
c001337f:	c3                   	ret    

c0013380 <Sys::eject(regs*)>:
c0013380:	83 ec 0c             	sub    esp,0xc
c0013383:	83 ca ff             	or     edx,0xffffffff
c0013386:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001338a:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c001338d:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0013392:	83 e9 41             	sub    ecx,0x41
c0013395:	83 f9 19             	cmp    ecx,0x19
c0013398:	77 18                	ja     c00133b2 <Sys::eject(regs*)+0x32>
c001339a:	8b 0c 8d a0 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7760]
c00133a1:	85 c9                	test   ecx,ecx
c00133a3:	74 0d                	je     c00133b2 <Sys::eject(regs*)+0x32>
c00133a5:	83 ec 0c             	sub    esp,0xc
c00133a8:	51                   	push   ecx
c00133a9:	e8 c2 ba ff ff       	call   c000ee70 <LogicalDisk::eject()>
c00133ae:	83 c4 10             	add    esp,0x10
c00133b1:	99                   	cdq    
c00133b2:	83 c4 0c             	add    esp,0xc
c00133b5:	c3                   	ret    

c00133b6 <Sys::exit(regs*)>:
c00133b6:	83 ec 18             	sub    esp,0x18
c00133b9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00133bd:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00133c0:	e8 33 35 00 00       	call   c00168f8 <terminateTask(int)>
c00133c5:	83 c8 ff             	or     eax,0xffffffff
c00133c8:	83 c4 1c             	add    esp,0x1c
c00133cb:	89 c2                	mov    edx,eax
c00133cd:	c3                   	ret    

c00133ce <Sys::getCwd(regs*)>:
c00133ce:	83 ec 10             	sub    esp,0x10
c00133d1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00133d5:	ff 70 28             	push   DWORD PTR [eax+0x28]
c00133d8:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00133db:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00133e0:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00133e3:	e8 b6 96 ff ff       	call   c000ca9e <Fs::getcwd(Process*, char*, int)>
c00133e8:	83 c4 1c             	add    esp,0x1c
c00133eb:	99                   	cdq    
c00133ec:	c3                   	ret    

c00133ed <Sys::getPID(regs*)>:
c00133ed:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00133f2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00133f5:	8b 00                	mov    eax,DWORD PTR [eax]
c00133f7:	99                   	cdq    
c00133f8:	c3                   	ret    

c00133f9 <Sys::getRAMData(regs*)>:
c00133f9:	8b 0d 58 63 02 c0    	mov    ecx,DWORD PTR ds:0xc0026358
c00133ff:	69 05 54 63 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc0026354,0xc8
c0013409:	99                   	cdq    
c001340a:	f7 f9                	idiv   ecx
c001340c:	c1 e0 18             	shl    eax,0x18
c001340f:	09 c8                	or     eax,ecx
c0013411:	99                   	cdq    
c0013412:	c3                   	ret    

c0013413 <Sys::getVGAPtr(regs*)>:
c0013413:	55                   	push   ebp
c0013414:	57                   	push   edi
c0013415:	56                   	push   esi
c0013416:	53                   	push   ebx
c0013417:	83 ec 18             	sub    esp,0x18
c001341a:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001341e:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c0013421:	e8 d6 2f 00 00       	call   c00163fc <Thr::processFromPID(int)>
c0013426:	83 c4 10             	add    esp,0x10
c0013429:	89 c1                	mov    ecx,eax
c001342b:	b8 01 00 00 00       	mov    eax,0x1
c0013430:	85 c9                	test   ecx,ecx
c0013432:	74 59                	je     c001348d <Sys::getVGAPtr(regs*)+0x7a>
c0013434:	8b 99 06 05 00 00    	mov    ebx,DWORD PTR [ecx+0x506]
c001343a:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c001343e:	74 0c                	je     c001344c <Sys::getVGAPtr(regs*)+0x39>
c0013440:	83 ec 0c             	sub    esp,0xc
c0013443:	53                   	push   ebx
c0013444:	e8 40 71 ff ff       	call   c000a589 <setActiveTerminal(VgaText*)>
c0013449:	83 c4 10             	add    esp,0x10
c001344c:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c001344f:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c0013452:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c0013457:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013459:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c001345c:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001345f:	81 c3 82 00 00 00    	add    ebx,0x82
c0013465:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c001346b:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001346e:	8b 53 96             	mov    edx,DWORD PTR [ebx-0x6a]
c0013471:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c0013477:	50                   	push   eax
c0013478:	50                   	push   eax
c0013479:	53                   	push   ebx
c001347a:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001347d:	05 a8 0f 00 00       	add    eax,0xfa8
c0013482:	50                   	push   eax
c0013483:	e8 dc d0 fe ff       	call   c0000564 <strcpy>
c0013488:	83 c4 10             	add    esp,0x10
c001348b:	31 c0                	xor    eax,eax
c001348d:	83 c4 0c             	add    esp,0xc
c0013490:	31 d2                	xor    edx,edx
c0013492:	5b                   	pop    ebx
c0013493:	5e                   	pop    esi
c0013494:	5f                   	pop    edi
c0013495:	5d                   	pop    ebp
c0013496:	c3                   	ret    

c0013497 <Sys::loadDLL(regs*)>:
c0013497:	56                   	push   esi
c0013498:	53                   	push   ebx
c0013499:	31 d2                	xor    edx,edx
c001349b:	51                   	push   ecx
c001349c:	b8 01 00 00 00       	mov    eax,0x1
c00134a1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00134a5:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c00134a9:	0f 84 8c 00 00 00    	je     c001353b <Sys::loadDLL(regs*)+0xa4>
c00134af:	83 ec 0c             	sub    esp,0xc
c00134b2:	68 14 01 00 00       	push   0x114
c00134b7:	e8 db 62 ff ff       	call   c0009797 <malloc>
c00134bc:	83 c4 0c             	add    esp,0xc
c00134bf:	89 c3                	mov    ebx,eax
c00134c1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00134c6:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00134c9:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00134cc:	53                   	push   ebx
c00134cd:	e8 ca 97 ff ff       	call   c000cc9c <File::File(char const*, Process*)>
c00134d2:	83 c4 10             	add    esp,0x10
c00134d5:	31 d2                	xor    edx,edx
c00134d7:	b8 02 00 00 00       	mov    eax,0x2
c00134dc:	85 db                	test   ebx,ebx
c00134de:	74 5b                	je     c001353b <Sys::loadDLL(regs*)+0xa4>
c00134e0:	83 ec 0c             	sub    esp,0xc
c00134e3:	53                   	push   ebx
c00134e4:	e8 fb 9a ff ff       	call   c000cfe4 <File::exists()>
c00134e9:	83 c4 10             	add    esp,0x10
c00134ec:	84 c0                	test   al,al
c00134ee:	8b 03                	mov    eax,DWORD PTR [ebx]
c00134f0:	75 11                	jne    c0013503 <Sys::loadDLL(regs*)+0x6c>
c00134f2:	83 ec 0c             	sub    esp,0xc
c00134f5:	53                   	push   ebx
c00134f6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00134f9:	83 c4 10             	add    esp,0x10
c00134fc:	b8 03 00 00 00       	mov    eax,0x3
c0013501:	eb 36                	jmp    c0013539 <Sys::loadDLL(regs*)+0xa2>
c0013503:	83 ec 0c             	sub    esp,0xc
c0013506:	53                   	push   ebx
c0013507:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001350a:	58                   	pop    eax
c001350b:	5a                   	pop    edx
c001350c:	6a 00                	push   0x0
c001350e:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0013511:	e8 ec 20 00 00       	call   c0015602 <Thr::loadDLL(char const*, bool)>
c0013516:	83 c4 10             	add    esp,0x10
c0013519:	89 c1                	mov    ecx,eax
c001351b:	31 d2                	xor    edx,edx
c001351d:	b8 04 00 00 00       	mov    eax,0x4
c0013522:	85 c9                	test   ecx,ecx
c0013524:	74 15                	je     c001353b <Sys::loadDLL(regs*)+0xa4>
c0013526:	53                   	push   ebx
c0013527:	53                   	push   ebx
c0013528:	ff 35 28 63 02 c0    	push   DWORD PTR ds:0xc0026328
c001352e:	51                   	push   ecx
c001352f:	e8 ff 22 00 00       	call   c0015833 <Thr::executeDLL(unsigned long, void*)>
c0013534:	83 c4 10             	add    esp,0x10
c0013537:	31 c0                	xor    eax,eax
c0013539:	31 d2                	xor    edx,edx
c001353b:	59                   	pop    ecx
c001353c:	5b                   	pop    ebx
c001353d:	5e                   	pop    esi
c001353e:	c3                   	ret    

c001353f <Sys::read(regs*)>:
c001353f:	57                   	push   edi
c0013540:	56                   	push   esi
c0013541:	53                   	push   ebx
c0013542:	83 ec 10             	sub    esp,0x10
c0013545:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0013549:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001354c:	83 f8 02             	cmp    eax,0x2
c001354f:	77 10                	ja     c0013561 <Sys::read(regs*)+0x22>
c0013551:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013556:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013559:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c001355f:	eb 0e                	jmp    c001356f <Sys::read(regs*)+0x30>
c0013561:	83 ec 0c             	sub    esp,0xc
c0013564:	50                   	push   eax
c0013565:	e8 15 7d ff ff       	call   c000b27f <getFromFileDescriptor(int)>
c001356a:	83 c4 10             	add    esp,0x10
c001356d:	89 c1                	mov    ecx,eax
c001356f:	83 c8 ff             	or     eax,0xffffffff
c0013572:	85 c9                	test   ecx,ecx
c0013574:	89 c2                	mov    edx,eax
c0013576:	74 28                	je     c00135a0 <Sys::read(regs*)+0x61>
c0013578:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0013580:	31 ff                	xor    edi,edi
c0013582:	83 ec 0c             	sub    esp,0xc
c0013585:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013587:	8d 54 24 18          	lea    edx,[esp+0x18]
c001358b:	52                   	push   edx
c001358c:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001358f:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0013592:	57                   	push   edi
c0013593:	56                   	push   esi
c0013594:	51                   	push   ecx
c0013595:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013598:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001359c:	83 c4 20             	add    esp,0x20
c001359f:	99                   	cdq    
c00135a0:	83 c4 10             	add    esp,0x10
c00135a3:	5b                   	pop    ebx
c00135a4:	5e                   	pop    esi
c00135a5:	5f                   	pop    edi
c00135a6:	c3                   	ret    

c00135a7 <Sys::sbrk(regs*)>:
c00135a7:	56                   	push   esi
c00135a8:	53                   	push   ebx
c00135a9:	50                   	push   eax
c00135aa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00135af:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00135b3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00135b6:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c00135b9:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c00135bf:	85 db                	test   ebx,ebx
c00135c1:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c00135c4:	74 02                	je     c00135c8 <Sys::sbrk(regs*)+0x21>
c00135c6:	79 06                	jns    c00135ce <Sys::sbrk(regs*)+0x27>
c00135c8:	89 f0                	mov    eax,esi
c00135ca:	31 d2                	xor    edx,edx
c00135cc:	eb 2a                	jmp    c00135f8 <Sys::sbrk(regs*)+0x51>
c00135ce:	83 c8 ff             	or     eax,0xffffffff
c00135d1:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c00135d7:	89 c2                	mov    edx,eax
c00135d9:	77 1d                	ja     c00135f8 <Sys::sbrk(regs*)+0x51>
c00135db:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c00135e1:	50                   	push   eax
c00135e2:	c1 ea 0c             	shr    edx,0xc
c00135e5:	68 07 0c 00 00       	push   0xc07
c00135ea:	52                   	push   edx
c00135eb:	51                   	push   ecx
c00135ec:	e8 53 85 ff ff       	call   c000bb44 <VAS::allocatePages(int, int)>
c00135f1:	89 f0                	mov    eax,esi
c00135f3:	31 d2                	xor    edx,edx
c00135f5:	83 c4 10             	add    esp,0x10
c00135f8:	59                   	pop    ecx
c00135f9:	5b                   	pop    ebx
c00135fa:	5e                   	pop    esi
c00135fb:	c3                   	ret    

c00135fc <Sys::setCwd(regs*)>:
c00135fc:	83 ec 14             	sub    esp,0x14
c00135ff:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013603:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013606:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001360b:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c001360e:	e8 70 9a ff ff       	call   c000d083 <Fs::setcwd(Process*, char*)>
c0013613:	83 c4 1c             	add    esp,0x1c
c0013616:	99                   	cdq    
c0013617:	c3                   	ret    

c0013618 <Sys::setTime(regs*)>:
c0013618:	55                   	push   ebp
c0013619:	31 c9                	xor    ecx,ecx
c001361b:	57                   	push   edi
c001361c:	bd 0c 00 00 00       	mov    ebp,0xc
c0013621:	56                   	push   esi
c0013622:	53                   	push   ebx
c0013623:	31 db                	xor    ebx,ebx
c0013625:	83 ec 10             	sub    esp,0x10
c0013628:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001362c:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c001362f:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0013632:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c0013635:	89 c2                	mov    edx,eax
c0013637:	66 81 ef 6c 07       	sub    di,0x76c
c001363c:	83 e2 1f             	and    edx,0x1f
c001363f:	c1 e7 10             	shl    edi,0x10
c0013642:	42                   	inc    edx
c0013643:	c1 e8 05             	shr    eax,0x5
c0013646:	88 d1                	mov    cl,dl
c0013648:	31 d2                	xor    edx,edx
c001364a:	f7 f5                	div    ebp
c001364c:	89 dd                	mov    ebp,ebx
c001364e:	88 d5                	mov    ch,dl
c0013650:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c0013656:	0f b7 c1             	movzx  eax,cx
c0013659:	31 d2                	xor    edx,edx
c001365b:	09 f8                	or     eax,edi
c001365d:	bf 3c 00 00 00       	mov    edi,0x3c
c0013662:	89 c1                	mov    ecx,eax
c0013664:	89 f0                	mov    eax,esi
c0013666:	f7 f7                	div    edi
c0013668:	c1 e2 10             	shl    edx,0x10
c001366b:	09 d5                	or     ebp,edx
c001366d:	31 d2                	xor    edx,edx
c001366f:	89 eb                	mov    ebx,ebp
c0013671:	f7 f7                	div    edi
c0013673:	bf 10 0e 00 00       	mov    edi,0xe10
c0013678:	88 d7                	mov    bh,dl
c001367a:	89 f0                	mov    eax,esi
c001367c:	31 d2                	xor    edx,edx
c001367e:	f7 f7                	div    edi
c0013680:	bf 18 00 00 00       	mov    edi,0x18
c0013685:	31 d2                	xor    edx,edx
c0013687:	f7 f7                	div    edi
c0013689:	a1 28 63 02 c0       	mov    eax,ds:0xc0026328
c001368e:	88 d3                	mov    bl,dl
c0013690:	53                   	push   ebx
c0013691:	51                   	push   ecx
c0013692:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0013698:	e8 25 a2 ff ff       	call   c000d8c2 <Clock::setTimeInDatetimeLocal(datetime_t)>
c001369d:	83 c4 1c             	add    esp,0x1c
c00136a0:	83 f0 01             	xor    eax,0x1
c00136a3:	5b                   	pop    ebx
c00136a4:	0f b6 c0             	movzx  eax,al
c00136a7:	5e                   	pop    esi
c00136a8:	31 d2                	xor    edx,edx
c00136aa:	5f                   	pop    edi
c00136ab:	5d                   	pop    ebp
c00136ac:	c3                   	ret    

c00136ad <Sys::timezone(regs*)>:
c00136ad:	53                   	push   ebx
c00136ae:	83 ec 08             	sub    esp,0x8
c00136b1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00136b5:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c00136b9:	75 17                	jne    c00136d2 <Sys::timezone(regs*)+0x25>
c00136bb:	83 ec 0c             	sub    esp,0xc
c00136be:	68 02 42 02 c0       	push   0xc0024202
c00136c3:	e8 69 90 ff ff       	call   c000c731 <Dbg::kprintf(char const*, ...)>
c00136c8:	83 c8 ff             	or     eax,0xffffffff
c00136cb:	83 c4 10             	add    esp,0x10
c00136ce:	89 c2                	mov    edx,eax
c00136d0:	eb 20                	jmp    c00136f2 <Sys::timezone(regs*)+0x45>
c00136d2:	83 ec 0c             	sub    esp,0xc
c00136d5:	68 17 42 02 c0       	push   0xc0024217
c00136da:	e8 52 90 ff ff       	call   c000c731 <Dbg::kprintf(char const*, ...)>
c00136df:	58                   	pop    eax
c00136e0:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00136e3:	e8 3c 9f ff ff       	call   c000d624 <User::loadClockSettings(int)>
c00136e8:	83 c4 10             	add    esp,0x10
c00136eb:	b8 01 00 00 00       	mov    eax,0x1
c00136f0:	31 d2                	xor    edx,edx
c00136f2:	83 c4 08             	add    esp,0x8
c00136f5:	5b                   	pop    ebx
c00136f6:	c3                   	ret    

c00136f7 <Sys::write(regs*)>:
c00136f7:	57                   	push   edi
c00136f8:	56                   	push   esi
c00136f9:	53                   	push   ebx
c00136fa:	83 ec 10             	sub    esp,0x10
c00136fd:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0013701:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013704:	83 f8 02             	cmp    eax,0x2
c0013707:	77 10                	ja     c0013719 <Sys::write(regs*)+0x22>
c0013709:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001370e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013711:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0013717:	eb 0e                	jmp    c0013727 <Sys::write(regs*)+0x30>
c0013719:	83 ec 0c             	sub    esp,0xc
c001371c:	50                   	push   eax
c001371d:	e8 5d 7b ff ff       	call   c000b27f <getFromFileDescriptor(int)>
c0013722:	83 c4 10             	add    esp,0x10
c0013725:	89 c1                	mov    ecx,eax
c0013727:	83 c8 ff             	or     eax,0xffffffff
c001372a:	85 c9                	test   ecx,ecx
c001372c:	89 c2                	mov    edx,eax
c001372e:	74 28                	je     c0013758 <Sys::write(regs*)+0x61>
c0013730:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0013738:	31 ff                	xor    edi,edi
c001373a:	83 ec 0c             	sub    esp,0xc
c001373d:	8b 01                	mov    eax,DWORD PTR [ecx]
c001373f:	8d 54 24 18          	lea    edx,[esp+0x18]
c0013743:	52                   	push   edx
c0013744:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013747:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001374a:	57                   	push   edi
c001374b:	56                   	push   esi
c001374c:	51                   	push   ecx
c001374d:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0013750:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0013754:	83 c4 20             	add    esp,0x20
c0013757:	99                   	cdq    
c0013758:	83 c4 10             	add    esp,0x10
c001375b:	5b                   	pop    ebx
c001375c:	5e                   	pop    esi
c001375d:	5f                   	pop    edi
c001375e:	c3                   	ret    

c001375f <Sys::wsbe(regs*)>:
c001375f:	57                   	push   edi
c0013760:	b9 0b 00 00 00       	mov    ecx,0xb
c0013765:	56                   	push   esi
c0013766:	be 56 42 02 c0       	mov    esi,0xc0024256
c001376b:	53                   	push   ebx
c001376c:	83 ec 30             	sub    esp,0x30
c001376f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0013773:	fc                   	cld    
c0013774:	83 ec 0c             	sub    esp,0xc
c0013777:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0013779:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001377d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013782:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013785:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c001378b:	8b 06                	mov    eax,DWORD PTR [esi]
c001378d:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c0013790:	57                   	push   edi
c0013791:	e8 2e cd fe ff       	call   c00004c4 <strlen>
c0013796:	5a                   	pop    edx
c0013797:	8d 54 24 0c          	lea    edx,[esp+0xc]
c001379b:	52                   	push   edx
c001379c:	31 d2                	xor    edx,edx
c001379e:	57                   	push   edi
c001379f:	52                   	push   edx
c00137a0:	50                   	push   eax
c00137a1:	56                   	push   esi
c00137a2:	ff d3                	call   ebx
c00137a4:	83 c4 14             	add    esp,0x14
c00137a7:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00137ab:	ff 70 24             	push   DWORD PTR [eax+0x24]
c00137ae:	e8 45 31 00 00       	call   c00168f8 <terminateTask(int)>
c00137b3:	83 c4 40             	add    esp,0x40
c00137b6:	b8 ef be ad de       	mov    eax,0xdeadbeef
c00137bb:	5b                   	pop    ebx
c00137bc:	31 d2                	xor    edx,edx
c00137be:	5e                   	pop    esi
c00137bf:	5f                   	pop    edi
c00137c0:	c3                   	ret    

c00137c1 <Sys::yield(regs*)>:
c00137c1:	83 ec 0c             	sub    esp,0xc
c00137c4:	fa                   	cli    
c00137c5:	ff 05 08 98 02 c0    	inc    DWORD PTR ds:0xc0029808
c00137cb:	e8 10 28 00 00       	call   c0015fe0 <schedule()>
c00137d0:	a1 08 98 02 c0       	mov    eax,ds:0xc0029808
c00137d5:	48                   	dec    eax
c00137d6:	a3 08 98 02 c0       	mov    ds:0xc0029808,eax
c00137db:	75 01                	jne    c00137de <Sys::yield(regs*)+0x1d>
c00137dd:	fb                   	sti    
c00137de:	8b 15 0c 89 02 c0    	mov    edx,DWORD PTR ds:0xc002890c
c00137e4:	83 c4 0c             	add    esp,0xc
c00137e7:	89 d0                	mov    eax,edx
c00137e9:	c1 ea 11             	shr    edx,0x11
c00137ec:	c1 e0 07             	shl    eax,0x7
c00137ef:	25 80 30 0f 00       	and    eax,0xf3080
c00137f4:	31 d0                	xor    eax,edx
c00137f6:	31 d2                	xor    edx,edx
c00137f8:	c3                   	ret    

c00137f9 <sysCallSeekDir(regs*)>:
c00137f9:	31 c0                	xor    eax,eax
c00137fb:	31 d2                	xor    edx,edx
c00137fd:	c3                   	ret    

c00137fe <sysCallTellDir(regs*)>:
c00137fe:	31 c0                	xor    eax,eax
c0013800:	31 d2                	xor    edx,edx
c0013802:	c3                   	ret    

c0013803 <sysCallVerify(regs*)>:
c0013803:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013807:	31 d2                	xor    edx,edx
c0013809:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001380c:	c3                   	ret    

c001380d <sysCallGetArgc(regs*)>:
c001380d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013812:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013815:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c001381b:	99                   	cdq    
c001381c:	c3                   	ret    

c001381d <sysFormatDisk(regs*)>:
c001381d:	56                   	push   esi
c001381e:	53                   	push   ebx
c001381f:	53                   	push   ebx
c0013820:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013824:	8b 1d 18 64 02 c0    	mov    ebx,DWORD PTR ds:0xc0026418
c001382a:	eb 25                	jmp    c0013851 <sysFormatDisk(regs*)+0x34>
c001382c:	83 ec 0c             	sub    esp,0xc
c001382f:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0013832:	8b 13                	mov    edx,DWORD PTR [ebx]
c0013834:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0013837:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001383a:	50                   	push   eax
c001383b:	ff 34 85 a0 88 02 c0 	push   DWORD PTR [eax*4-0x3ffd7760]
c0013842:	53                   	push   ebx
c0013843:	ff 52 48             	call   DWORD PTR [edx+0x48]
c0013846:	83 c4 20             	add    esp,0x20
c0013849:	83 f8 08             	cmp    eax,0x8
c001384c:	75 12                	jne    c0013860 <sysFormatDisk(regs*)+0x43>
c001384e:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0013851:	85 db                	test   ebx,ebx
c0013853:	75 d7                	jne    c001382c <sysFormatDisk(regs*)+0xf>
c0013855:	59                   	pop    ecx
c0013856:	b8 03 00 00 00       	mov    eax,0x3
c001385b:	31 d2                	xor    edx,edx
c001385d:	5b                   	pop    ebx
c001385e:	5e                   	pop    esi
c001385f:	c3                   	ret    
c0013860:	85 c0                	test   eax,eax
c0013862:	74 1b                	je     c001387f <sysFormatDisk(regs*)+0x62>
c0013864:	83 f8 09             	cmp    eax,0x9
c0013867:	74 0b                	je     c0013874 <sysFormatDisk(regs*)+0x57>
c0013869:	59                   	pop    ecx
c001386a:	b8 02 00 00 00       	mov    eax,0x2
c001386f:	31 d2                	xor    edx,edx
c0013871:	5b                   	pop    ebx
c0013872:	5e                   	pop    esi
c0013873:	c3                   	ret    
c0013874:	59                   	pop    ecx
c0013875:	b8 01 00 00 00       	mov    eax,0x1
c001387a:	31 d2                	xor    edx,edx
c001387c:	5b                   	pop    ebx
c001387d:	5e                   	pop    esi
c001387e:	c3                   	ret    
c001387f:	59                   	pop    ecx
c0013880:	31 c0                	xor    eax,eax
c0013882:	31 d2                	xor    edx,edx
c0013884:	5b                   	pop    ebx
c0013885:	5e                   	pop    esi
c0013886:	c3                   	ret    

c0013887 <sysSetDiskVolumeLabel(regs*)>:
c0013887:	56                   	push   esi
c0013888:	53                   	push   ebx
c0013889:	53                   	push   ebx
c001388a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001388e:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0013891:	83 f8 19             	cmp    eax,0x19
c0013894:	77 2d                	ja     c00138c3 <sysSetDiskVolumeLabel(regs*)+0x3c>
c0013896:	8b 0c 85 a0 88 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd7760]
c001389d:	85 c9                	test   ecx,ecx
c001389f:	74 22                	je     c00138c3 <sysSetDiskVolumeLabel(regs*)+0x3c>
c00138a1:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c00138a4:	85 db                	test   ebx,ebx
c00138a6:	74 1b                	je     c00138c3 <sysSetDiskVolumeLabel(regs*)+0x3c>
c00138a8:	8b 91 70 01 00 00    	mov    edx,DWORD PTR [ecx+0x170]
c00138ae:	85 d2                	test   edx,edx
c00138b0:	74 11                	je     c00138c3 <sysSetDiskVolumeLabel(regs*)+0x3c>
c00138b2:	8b 32                	mov    esi,DWORD PTR [edx]
c00138b4:	53                   	push   ebx
c00138b5:	50                   	push   eax
c00138b6:	51                   	push   ecx
c00138b7:	52                   	push   edx
c00138b8:	ff 56 58             	call   DWORD PTR [esi+0x58]
c00138bb:	83 c4 10             	add    esp,0x10
c00138be:	99                   	cdq    
c00138bf:	59                   	pop    ecx
c00138c0:	5b                   	pop    ebx
c00138c1:	5e                   	pop    esi
c00138c2:	c3                   	ret    
c00138c3:	59                   	pop    ecx
c00138c4:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00138c9:	ba ff ff ff ff       	mov    edx,0xffffffff
c00138ce:	5b                   	pop    ebx
c00138cf:	5e                   	pop    esi
c00138d0:	c3                   	ret    

c00138d1 <sysGetDiskVolumeLabel(regs*)>:
c00138d1:	57                   	push   edi
c00138d2:	56                   	push   esi
c00138d3:	53                   	push   ebx
c00138d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138d8:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00138db:	83 fa 19             	cmp    edx,0x19
c00138de:	77 38                	ja     c0013918 <sysGetDiskVolumeLabel(regs*)+0x47>
c00138e0:	8b 0c 95 a0 88 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd7760]
c00138e7:	85 c9                	test   ecx,ecx
c00138e9:	74 2d                	je     c0013918 <sysGetDiskVolumeLabel(regs*)+0x47>
c00138eb:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c00138ee:	85 db                	test   ebx,ebx
c00138f0:	74 26                	je     c0013918 <sysGetDiskVolumeLabel(regs*)+0x47>
c00138f2:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c00138f5:	85 f6                	test   esi,esi
c00138f7:	74 1f                	je     c0013918 <sysGetDiskVolumeLabel(regs*)+0x47>
c00138f9:	8b 81 70 01 00 00    	mov    eax,DWORD PTR [ecx+0x170]
c00138ff:	85 c0                	test   eax,eax
c0013901:	74 15                	je     c0013918 <sysGetDiskVolumeLabel(regs*)+0x47>
c0013903:	83 ec 0c             	sub    esp,0xc
c0013906:	8b 38                	mov    edi,DWORD PTR [eax]
c0013908:	56                   	push   esi
c0013909:	53                   	push   ebx
c001390a:	52                   	push   edx
c001390b:	51                   	push   ecx
c001390c:	50                   	push   eax
c001390d:	ff 57 54             	call   DWORD PTR [edi+0x54]
c0013910:	83 c4 20             	add    esp,0x20
c0013913:	99                   	cdq    
c0013914:	5b                   	pop    ebx
c0013915:	5e                   	pop    esi
c0013916:	5f                   	pop    edi
c0013917:	c3                   	ret    
c0013918:	5b                   	pop    ebx
c0013919:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001391e:	ba ff ff ff ff       	mov    edx,0xffffffff
c0013923:	5e                   	pop    esi
c0013924:	5f                   	pop    edi
c0013925:	c3                   	ret    

c0013926 <sysShutdown(regs*)>:
c0013926:	83 ec 0c             	sub    esp,0xc
c0013929:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001392d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0013930:	85 c0                	test   eax,eax
c0013932:	74 18                	je     c001394c <sysShutdown(regs*)+0x26>
c0013934:	83 f8 01             	cmp    eax,0x1
c0013937:	74 38                	je     c0013971 <sysShutdown(regs*)+0x4b>
c0013939:	83 f8 02             	cmp    eax,0x2
c001393c:	74 24                	je     c0013962 <sysShutdown(regs*)+0x3c>
c001393e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0013943:	ba ff ff ff ff       	mov    edx,0xffffffff
c0013948:	83 c4 0c             	add    esp,0xc
c001394b:	c3                   	ret    
c001394c:	a1 28 63 02 c0       	mov    eax,ds:0xc0026328
c0013951:	8b 10                	mov    edx,DWORD PTR [eax]
c0013953:	6a 00                	push   0x0
c0013955:	6a 00                	push   0x0
c0013957:	6a 00                	push   0x0
c0013959:	50                   	push   eax
c001395a:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001395d:	83 c4 10             	add    esp,0x10
c0013960:	eb dc                	jmp    c001393e <sysShutdown(regs*)+0x18>
c0013962:	a1 28 63 02 c0       	mov    eax,ds:0xc0026328
c0013967:	8b 10                	mov    edx,DWORD PTR [eax]
c0013969:	6a 00                	push   0x0
c001396b:	6a 00                	push   0x0
c001396d:	6a 01                	push   0x1
c001396f:	eb e8                	jmp    c0013959 <sysShutdown(regs*)+0x33>
c0013971:	a1 20 89 02 c0       	mov    eax,ds:0xc0028920
c0013976:	85 c0                	test   eax,eax
c0013978:	74 02                	je     c001397c <sysShutdown(regs*)+0x56>
c001397a:	ff d0                	call   eax
c001397c:	31 c0                	xor    eax,eax
c001397e:	31 d2                	xor    edx,edx
c0013980:	83 c4 0c             	add    esp,0xc
c0013983:	c3                   	ret    

c0013984 <sysCallRealpath(regs*)>:
c0013984:	83 ec 0c             	sub    esp,0xc
c0013987:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001398b:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001398e:	85 d2                	test   edx,edx
c0013990:	74 07                	je     c0013999 <sysCallRealpath(regs*)+0x15>
c0013992:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0013995:	85 c0                	test   eax,eax
c0013997:	75 0b                	jne    c00139a4 <sysCallRealpath(regs*)+0x20>
c0013999:	b8 01 00 00 00       	mov    eax,0x1
c001399e:	31 d2                	xor    edx,edx
c00139a0:	83 c4 0c             	add    esp,0xc
c00139a3:	c3                   	ret    
c00139a4:	51                   	push   ecx
c00139a5:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00139ab:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c00139ae:	81 c1 0c 01 00 00    	add    ecx,0x10c
c00139b4:	51                   	push   ecx
c00139b5:	52                   	push   edx
c00139b6:	50                   	push   eax
c00139b7:	e8 36 91 ff ff       	call   c000caf2 <Fs::standardiseFiles(char*, char const*, char const*)>
c00139bc:	83 c4 10             	add    esp,0x10
c00139bf:	31 c0                	xor    eax,eax
c00139c1:	31 d2                	xor    edx,edx
c00139c3:	83 c4 0c             	add    esp,0xc
c00139c6:	c3                   	ret    

c00139c7 <sysCallReadDir(regs*)>:
c00139c7:	53                   	push   ebx
c00139c8:	83 ec 18             	sub    esp,0x18
c00139cb:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00139cf:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00139d2:	83 f8 02             	cmp    eax,0x2
c00139d5:	76 60                	jbe    c0013a37 <sysCallReadDir(regs*)+0x70>
c00139d7:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c00139de:	77 48                	ja     c0013a28 <sysCallReadDir(regs*)+0x61>
c00139e0:	83 ec 0c             	sub    esp,0xc
c00139e3:	50                   	push   eax
c00139e4:	e8 96 78 ff ff       	call   c000b27f <getFromFileDescriptor(int)>
c00139e9:	83 c4 10             	add    esp,0x10
c00139ec:	85 c0                	test   eax,eax
c00139ee:	74 38                	je     c0013a28 <sysCallReadDir(regs*)+0x61>
c00139f0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00139f8:	83 ec 0c             	sub    esp,0xc
c00139fb:	8b 10                	mov    edx,DWORD PTR [eax]
c00139fd:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0013a01:	51                   	push   ecx
c0013a02:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013a05:	6a 00                	push   0x0
c0013a07:	68 10 01 00 00       	push   0x110
c0013a0c:	50                   	push   eax
c0013a0d:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0013a10:	83 c4 20             	add    esp,0x20
c0013a13:	85 c0                	test   eax,eax
c0013a15:	74 29                	je     c0013a40 <sysCallReadDir(regs*)+0x79>
c0013a17:	83 f8 07             	cmp    eax,0x7
c0013a1a:	74 1b                	je     c0013a37 <sysCallReadDir(regs*)+0x70>
c0013a1c:	b8 02 00 00 00       	mov    eax,0x2
c0013a21:	31 d2                	xor    edx,edx
c0013a23:	83 c4 18             	add    esp,0x18
c0013a26:	5b                   	pop    ebx
c0013a27:	c3                   	ret    
c0013a28:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0013a2d:	ba ff ff ff ff       	mov    edx,0xffffffff
c0013a32:	83 c4 18             	add    esp,0x18
c0013a35:	5b                   	pop    ebx
c0013a36:	c3                   	ret    
c0013a37:	b8 01 00 00 00       	mov    eax,0x1
c0013a3c:	31 d2                	xor    edx,edx
c0013a3e:	eb e3                	jmp    c0013a23 <sysCallReadDir(regs*)+0x5c>
c0013a40:	31 c0                	xor    eax,eax
c0013a42:	31 d2                	xor    edx,edx
c0013a44:	eb dd                	jmp    c0013a23 <sysCallReadDir(regs*)+0x5c>

c0013a46 <sysCallIsATTY(regs*)>:
c0013a46:	83 ec 0c             	sub    esp,0xc
c0013a49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a4d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0013a50:	83 f8 02             	cmp    eax,0x2
c0013a53:	76 07                	jbe    c0013a5c <sysCallIsATTY(regs*)+0x16>
c0013a55:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0013a5a:	75 26                	jne    c0013a82 <sysCallIsATTY(regs*)+0x3c>
c0013a5c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013a61:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013a64:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0013a6a:	85 c0                	test   eax,eax
c0013a6c:	74 24                	je     c0013a92 <sysCallIsATTY(regs*)+0x4c>
c0013a6e:	83 ec 0c             	sub    esp,0xc
c0013a71:	8b 10                	mov    edx,DWORD PTR [eax]
c0013a73:	50                   	push   eax
c0013a74:	ff 12                	call   DWORD PTR [edx]
c0013a76:	31 d2                	xor    edx,edx
c0013a78:	0f b6 c0             	movzx  eax,al
c0013a7b:	83 c4 10             	add    esp,0x10
c0013a7e:	83 c4 0c             	add    esp,0xc
c0013a81:	c3                   	ret    
c0013a82:	83 ec 0c             	sub    esp,0xc
c0013a85:	50                   	push   eax
c0013a86:	e8 f4 77 ff ff       	call   c000b27f <getFromFileDescriptor(int)>
c0013a8b:	83 c4 10             	add    esp,0x10
c0013a8e:	85 c0                	test   eax,eax
c0013a90:	75 dc                	jne    c0013a6e <sysCallIsATTY(regs*)+0x28>
c0013a92:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0013a97:	ba ff ff ff ff       	mov    edx,0xffffffff
c0013a9c:	83 c4 0c             	add    esp,0xc
c0013a9f:	c3                   	ret    

c0013aa0 <sysCallSeek(regs*)>:
c0013aa0:	53                   	push   ebx
c0013aa1:	83 ec 08             	sub    esp,0x8
c0013aa4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013aa8:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013aab:	8d 50 fd             	lea    edx,[eax-0x3]
c0013aae:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0013ab4:	77 32                	ja     c0013ae8 <sysCallSeek(regs*)+0x48>
c0013ab6:	83 ec 0c             	sub    esp,0xc
c0013ab9:	50                   	push   eax
c0013aba:	e8 c0 77 ff ff       	call   c000b27f <getFromFileDescriptor(int)>
c0013abf:	83 c4 0c             	add    esp,0xc
c0013ac2:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0013ac5:	31 db                	xor    ebx,ebx
c0013ac7:	53                   	push   ebx
c0013ac8:	51                   	push   ecx
c0013ac9:	50                   	push   eax
c0013aca:	e8 65 93 ff ff       	call   c000ce34 <File::seek(unsigned long long)>
c0013acf:	83 c4 10             	add    esp,0x10
c0013ad2:	85 c0                	test   eax,eax
c0013ad4:	0f 95 c0             	setne  al
c0013ad7:	31 d2                	xor    edx,edx
c0013ad9:	0f b6 c0             	movzx  eax,al
c0013adc:	f7 d8                	neg    eax
c0013ade:	83 d2 00             	adc    edx,0x0
c0013ae1:	83 c4 08             	add    esp,0x8
c0013ae4:	f7 da                	neg    edx
c0013ae6:	5b                   	pop    ebx
c0013ae7:	c3                   	ret    
c0013ae8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0013aed:	ba ff ff ff ff       	mov    edx,0xffffffff
c0013af2:	83 c4 08             	add    esp,0x8
c0013af5:	5b                   	pop    ebx
c0013af6:	c3                   	ret    

c0013af7 <sysCallTell(regs*)>:
c0013af7:	53                   	push   ebx
c0013af8:	83 ec 08             	sub    esp,0x8
c0013afb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013aff:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013b02:	83 f8 02             	cmp    eax,0x2
c0013b05:	76 4d                	jbe    c0013b54 <sysCallTell(regs*)+0x5d>
c0013b07:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0013b0c:	76 19                	jbe    c0013b27 <sysCallTell(regs*)+0x30>
c0013b0e:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0013b11:	31 d2                	xor    edx,edx
c0013b13:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013b19:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013b20:	31 c0                	xor    eax,eax
c0013b22:	83 c4 08             	add    esp,0x8
c0013b25:	5b                   	pop    ebx
c0013b26:	c3                   	ret    
c0013b27:	83 ec 0c             	sub    esp,0xc
c0013b2a:	50                   	push   eax
c0013b2b:	e8 4f 77 ff ff       	call   c000b27f <getFromFileDescriptor(int)>
c0013b30:	5a                   	pop    edx
c0013b31:	59                   	pop    ecx
c0013b32:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013b35:	50                   	push   eax
c0013b36:	e8 4f 93 ff ff       	call   c000ce8a <File::tell(unsigned long long*)>
c0013b3b:	83 c4 10             	add    esp,0x10
c0013b3e:	85 c0                	test   eax,eax
c0013b40:	0f 95 c0             	setne  al
c0013b43:	31 d2                	xor    edx,edx
c0013b45:	0f b6 c0             	movzx  eax,al
c0013b48:	f7 d8                	neg    eax
c0013b4a:	83 d2 00             	adc    edx,0x0
c0013b4d:	83 c4 08             	add    esp,0x8
c0013b50:	f7 da                	neg    edx
c0013b52:	5b                   	pop    ebx
c0013b53:	c3                   	ret    
c0013b54:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0013b59:	ba ff ff ff ff       	mov    edx,0xffffffff
c0013b5e:	83 c4 08             	add    esp,0x8
c0013b61:	5b                   	pop    ebx
c0013b62:	c3                   	ret    

c0013b63 <sysCallSize(regs*)>:
c0013b63:	53                   	push   ebx
c0013b64:	83 ec 18             	sub    esp,0x18
c0013b67:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0013b6b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013b6e:	83 f8 02             	cmp    eax,0x2
c0013b71:	76 53                	jbe    c0013bc6 <sysCallSize(regs*)+0x63>
c0013b73:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0013b78:	76 19                	jbe    c0013b93 <sysCallSize(regs*)+0x30>
c0013b7a:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0013b7d:	31 d2                	xor    edx,edx
c0013b7f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013b85:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013b8c:	31 c0                	xor    eax,eax
c0013b8e:	83 c4 18             	add    esp,0x18
c0013b91:	5b                   	pop    ebx
c0013b92:	c3                   	ret    
c0013b93:	83 ec 0c             	sub    esp,0xc
c0013b96:	50                   	push   eax
c0013b97:	e8 e3 76 ff ff       	call   c000b27f <getFromFileDescriptor(int)>
c0013b9c:	83 c4 0c             	add    esp,0xc
c0013b9f:	8d 54 24 13          	lea    edx,[esp+0x13]
c0013ba3:	52                   	push   edx
c0013ba4:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013ba7:	50                   	push   eax
c0013ba8:	e8 75 94 ff ff       	call   c000d022 <File::stat(unsigned long long*, bool*)>
c0013bad:	83 c4 10             	add    esp,0x10
c0013bb0:	85 c0                	test   eax,eax
c0013bb2:	0f 95 c0             	setne  al
c0013bb5:	31 d2                	xor    edx,edx
c0013bb7:	0f b6 c0             	movzx  eax,al
c0013bba:	f7 d8                	neg    eax
c0013bbc:	83 d2 00             	adc    edx,0x0
c0013bbf:	83 c4 18             	add    esp,0x18
c0013bc2:	f7 da                	neg    edx
c0013bc4:	5b                   	pop    ebx
c0013bc5:	c3                   	ret    
c0013bc6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0013bcb:	ba ff ff ff ff       	mov    edx,0xffffffff
c0013bd0:	83 c4 18             	add    esp,0x18
c0013bd3:	5b                   	pop    ebx
c0013bd4:	c3                   	ret    

c0013bd5 <sysCallSizeFromFilename(regs*)>:
c0013bd5:	57                   	push   edi
c0013bd6:	56                   	push   esi
c0013bd7:	53                   	push   ebx
c0013bd8:	83 ec 20             	sub    esp,0x20
c0013bdb:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0013bdf:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c0013be2:	83 fb 02             	cmp    ebx,0x2
c0013be5:	0f 86 88 00 00 00    	jbe    c0013c73 <sysCallSizeFromFilename(regs*)+0x9e>
c0013beb:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0013bf1:	76 1b                	jbe    c0013c0e <sysCallSizeFromFilename(regs*)+0x39>
c0013bf3:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0013bf6:	31 d2                	xor    edx,edx
c0013bf8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013bfe:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013c05:	83 c4 20             	add    esp,0x20
c0013c08:	31 c0                	xor    eax,eax
c0013c0a:	5b                   	pop    ebx
c0013c0b:	5e                   	pop    esi
c0013c0c:	5f                   	pop    edi
c0013c0d:	c3                   	ret    
c0013c0e:	83 ec 0c             	sub    esp,0xc
c0013c11:	68 14 01 00 00       	push   0x114
c0013c16:	e8 7c 5b ff ff       	call   c0009797 <malloc>
c0013c1b:	83 c4 0c             	add    esp,0xc
c0013c1e:	89 c7                	mov    edi,eax
c0013c20:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013c25:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013c28:	53                   	push   ebx
c0013c29:	57                   	push   edi
c0013c2a:	e8 6d 90 ff ff       	call   c000cc9c <File::File(char const*, Process*)>
c0013c2f:	83 c4 0c             	add    esp,0xc
c0013c32:	8d 44 24 23          	lea    eax,[esp+0x23]
c0013c36:	50                   	push   eax
c0013c37:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0013c3a:	57                   	push   edi
c0013c3b:	e8 e2 93 ff ff       	call   c000d022 <File::stat(unsigned long long*, bool*)>
c0013c40:	83 c4 10             	add    esp,0x10
c0013c43:	85 ff                	test   edi,edi
c0013c45:	74 14                	je     c0013c5b <sysCallSizeFromFilename(regs*)+0x86>
c0013c47:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013c4b:	8b 17                	mov    edx,DWORD PTR [edi]
c0013c4d:	83 ec 0c             	sub    esp,0xc
c0013c50:	57                   	push   edi
c0013c51:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0013c54:	83 c4 10             	add    esp,0x10
c0013c57:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013c5b:	85 c0                	test   eax,eax
c0013c5d:	0f 95 c0             	setne  al
c0013c60:	31 d2                	xor    edx,edx
c0013c62:	0f b6 c0             	movzx  eax,al
c0013c65:	f7 d8                	neg    eax
c0013c67:	83 d2 00             	adc    edx,0x0
c0013c6a:	83 c4 20             	add    esp,0x20
c0013c6d:	f7 da                	neg    edx
c0013c6f:	5b                   	pop    ebx
c0013c70:	5e                   	pop    esi
c0013c71:	5f                   	pop    edi
c0013c72:	c3                   	ret    
c0013c73:	83 c4 20             	add    esp,0x20
c0013c76:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0013c7b:	5b                   	pop    ebx
c0013c7c:	ba ff ff ff ff       	mov    edx,0xffffffff
c0013c81:	5e                   	pop    esi
c0013c82:	5f                   	pop    edi
c0013c83:	c3                   	ret    

c0013c84 <sysCallClose(regs*)>:
c0013c84:	53                   	push   ebx
c0013c85:	83 ec 08             	sub    esp,0x8
c0013c88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c8c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0013c8f:	83 f8 02             	cmp    eax,0x2
c0013c92:	76 41                	jbe    c0013cd5 <sysCallClose(regs*)+0x51>
c0013c94:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c0013c9a:	83 fa 01             	cmp    edx,0x1
c0013c9d:	76 2d                	jbe    c0013ccc <sysCallClose(regs*)+0x48>
c0013c9f:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0013ca4:	77 2f                	ja     c0013cd5 <sysCallClose(regs*)+0x51>
c0013ca6:	83 ec 0c             	sub    esp,0xc
c0013ca9:	50                   	push   eax
c0013caa:	e8 d0 75 ff ff       	call   c000b27f <getFromFileDescriptor(int)>
c0013caf:	89 c3                	mov    ebx,eax
c0013cb1:	89 04 24             	mov    DWORD PTR [esp],eax
c0013cb4:	e8 1b 91 ff ff       	call   c000cdd4 <File::close()>
c0013cb9:	83 c4 10             	add    esp,0x10
c0013cbc:	85 db                	test   ebx,ebx
c0013cbe:	74 0c                	je     c0013ccc <sysCallClose(regs*)+0x48>
c0013cc0:	83 ec 0c             	sub    esp,0xc
c0013cc3:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013cc5:	53                   	push   ebx
c0013cc6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013cc9:	83 c4 10             	add    esp,0x10
c0013ccc:	31 c0                	xor    eax,eax
c0013cce:	31 d2                	xor    edx,edx
c0013cd0:	83 c4 08             	add    esp,0x8
c0013cd3:	5b                   	pop    ebx
c0013cd4:	c3                   	ret    
c0013cd5:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0013cda:	ba ff ff ff ff       	mov    edx,0xffffffff
c0013cdf:	83 c4 08             	add    esp,0x8
c0013ce2:	5b                   	pop    ebx
c0013ce3:	c3                   	ret    

c0013ce4 <sysCallOpenDir(regs*)>:
c0013ce4:	56                   	push   esi
c0013ce5:	53                   	push   ebx
c0013ce6:	53                   	push   ebx
c0013ce7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013ceb:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c0013cee:	85 f6                	test   esi,esi
c0013cf0:	74 59                	je     c0013d4b <sysCallOpenDir(regs*)+0x67>
c0013cf2:	83 ec 0c             	sub    esp,0xc
c0013cf5:	68 14 01 00 00       	push   0x114
c0013cfa:	e8 98 5a ff ff       	call   c0009797 <malloc>
c0013cff:	83 c4 0c             	add    esp,0xc
c0013d02:	89 c6                	mov    esi,eax
c0013d04:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013d09:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013d0c:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013d0f:	56                   	push   esi
c0013d10:	e8 e7 94 ff ff       	call   c000d1fc <Directory::Directory(char const*, Process*)>
c0013d15:	83 c4 10             	add    esp,0x10
c0013d18:	85 f6                	test   esi,esi
c0013d1a:	74 2f                	je     c0013d4b <sysCallOpenDir(regs*)+0x67>
c0013d1c:	83 ec 0c             	sub    esp,0xc
c0013d1f:	56                   	push   esi
c0013d20:	e8 b1 95 ff ff       	call   c000d2d6 <Directory::open()>
c0013d25:	83 c4 10             	add    esp,0x10
c0013d28:	85 c0                	test   eax,eax
c0013d2a:	75 1f                	jne    c0013d4b <sysCallOpenDir(regs*)+0x67>
c0013d2c:	83 ec 0c             	sub    esp,0xc
c0013d2f:	56                   	push   esi
c0013d30:	e8 55 72 ff ff       	call   c000af8a <UnixFile::getFileDescriptor()>
c0013d35:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0013d38:	83 c4 10             	add    esp,0x10
c0013d3b:	89 02                	mov    DWORD PTR [edx],eax
c0013d3d:	c1 f8 1f             	sar    eax,0x1f
c0013d40:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0013d43:	31 c0                	xor    eax,eax
c0013d45:	59                   	pop    ecx
c0013d46:	31 d2                	xor    edx,edx
c0013d48:	5b                   	pop    ebx
c0013d49:	5e                   	pop    esi
c0013d4a:	c3                   	ret    
c0013d4b:	59                   	pop    ecx
c0013d4c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0013d51:	ba ff ff ff ff       	mov    edx,0xffffffff
c0013d56:	5b                   	pop    ebx
c0013d57:	5e                   	pop    esi
c0013d58:	c3                   	ret    

c0013d59 <sysCallCloseDir(regs*)>:
c0013d59:	53                   	push   ebx
c0013d5a:	83 ec 08             	sub    esp,0x8
c0013d5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d61:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0013d64:	8d 50 fd             	lea    edx,[eax-0x3]
c0013d67:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0013d6d:	77 2f                	ja     c0013d9e <sysCallCloseDir(regs*)+0x45>
c0013d6f:	83 ec 0c             	sub    esp,0xc
c0013d72:	50                   	push   eax
c0013d73:	e8 07 75 ff ff       	call   c000b27f <getFromFileDescriptor(int)>
c0013d78:	89 c3                	mov    ebx,eax
c0013d7a:	89 04 24             	mov    DWORD PTR [esp],eax
c0013d7d:	e8 b0 95 ff ff       	call   c000d332 <Directory::close()>
c0013d82:	83 c4 10             	add    esp,0x10
c0013d85:	85 db                	test   ebx,ebx
c0013d87:	74 0c                	je     c0013d95 <sysCallCloseDir(regs*)+0x3c>
c0013d89:	83 ec 0c             	sub    esp,0xc
c0013d8c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013d8e:	53                   	push   ebx
c0013d8f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013d92:	83 c4 10             	add    esp,0x10
c0013d95:	31 c0                	xor    eax,eax
c0013d97:	31 d2                	xor    edx,edx
c0013d99:	83 c4 08             	add    esp,0x8
c0013d9c:	5b                   	pop    ebx
c0013d9d:	c3                   	ret    
c0013d9e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0013da3:	ba ff ff ff ff       	mov    edx,0xffffffff
c0013da8:	83 c4 08             	add    esp,0x8
c0013dab:	5b                   	pop    ebx
c0013dac:	c3                   	ret    

c0013dad <sysCallMakeDir(regs*)>:
c0013dad:	56                   	push   esi
c0013dae:	53                   	push   ebx
c0013daf:	83 ec 10             	sub    esp,0x10
c0013db2:	68 14 01 00 00       	push   0x114
c0013db7:	e8 db 59 ff ff       	call   c0009797 <malloc>
c0013dbc:	83 c4 0c             	add    esp,0xc
c0013dbf:	89 c3                	mov    ebx,eax
c0013dc1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013dc6:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013dc9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013dcd:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0013dd0:	53                   	push   ebx
c0013dd1:	e8 26 94 ff ff       	call   c000d1fc <Directory::Directory(char const*, Process*)>
c0013dd6:	83 c4 10             	add    esp,0x10
c0013dd9:	85 db                	test   ebx,ebx
c0013ddb:	74 32                	je     c0013e0f <sysCallMakeDir(regs*)+0x62>
c0013ddd:	83 ec 0c             	sub    esp,0xc
c0013de0:	53                   	push   ebx
c0013de1:	e8 d0 96 ff ff       	call   c000d4b6 <Directory::create()>
c0013de6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013de9:	89 c6                	mov    esi,eax
c0013deb:	e8 42 95 ff ff       	call   c000d332 <Directory::close()>
c0013df0:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013df2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013df5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013df8:	83 c4 10             	add    esp,0x10
c0013dfb:	31 c0                	xor    eax,eax
c0013dfd:	59                   	pop    ecx
c0013dfe:	85 f6                	test   esi,esi
c0013e00:	5b                   	pop    ebx
c0013e01:	0f 95 c0             	setne  al
c0013e04:	5e                   	pop    esi
c0013e05:	31 d2                	xor    edx,edx
c0013e07:	f7 d8                	neg    eax
c0013e09:	83 d2 00             	adc    edx,0x0
c0013e0c:	f7 da                	neg    edx
c0013e0e:	c3                   	ret    
c0013e0f:	59                   	pop    ecx
c0013e10:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0013e15:	ba ff ff ff ff       	mov    edx,0xffffffff
c0013e1a:	5b                   	pop    ebx
c0013e1b:	5e                   	pop    esi
c0013e1c:	c3                   	ret    

c0013e1d <sysCallWait(regs*)>:
c0013e1d:	83 ec 10             	sub    esp,0x10
c0013e20:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013e24:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0013e27:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0013e2a:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013e2d:	e8 d6 23 00 00       	call   c0016208 <waitTask(int, int*, int)>
c0013e32:	83 c4 1c             	add    esp,0x1c
c0013e35:	99                   	cdq    
c0013e36:	c3                   	ret    

c0013e37 <sysCallNotImpl(regs*)>:
c0013e37:	83 ec 18             	sub    esp,0x18
c0013e3a:	68 82 42 02 c0       	push   0xc0024282
c0013e3f:	e8 57 ec ff ff       	call   c0012a9b <Krnl::panic(char const*)>
c0013e44:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0013e49:	ba ff ff ff ff       	mov    edx,0xffffffff
c0013e4e:	83 c4 1c             	add    esp,0x1c
c0013e51:	c3                   	ret    

c0013e52 <sysPanic(regs*)>:
c0013e52:	83 ec 18             	sub    esp,0x18
c0013e55:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013e59:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0013e5c:	e8 3a ec ff ff       	call   c0012a9b <Krnl::panic(char const*)>
c0013e61:	b8 01 00 00 00       	mov    eax,0x1
c0013e66:	31 d2                	xor    edx,edx
c0013e68:	83 c4 1c             	add    esp,0x1c
c0013e6b:	c3                   	ret    

c0013e6c <sysCallRmdir(regs*)>:
c0013e6c:	56                   	push   esi
c0013e6d:	53                   	push   ebx
c0013e6e:	83 ec 20             	sub    esp,0x20
c0013e71:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0013e75:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0013e78:	68 14 01 00 00       	push   0x114
c0013e7d:	e8 15 59 ff ff       	call   c0009797 <malloc>
c0013e82:	83 c4 0c             	add    esp,0xc
c0013e85:	89 c3                	mov    ebx,eax
c0013e87:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013e8c:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013e8f:	56                   	push   esi
c0013e90:	53                   	push   ebx
c0013e91:	e8 06 8e ff ff       	call   c000cc9c <File::File(char const*, Process*)>
c0013e96:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013e99:	e8 50 90 ff ff       	call   c000ceee <File::unlink()>
c0013e9e:	83 c4 10             	add    esp,0x10
c0013ea1:	85 db                	test   ebx,ebx
c0013ea3:	74 14                	je     c0013eb9 <sysCallRmdir(regs*)+0x4d>
c0013ea5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013ea9:	8b 13                	mov    edx,DWORD PTR [ebx]
c0013eab:	83 ec 0c             	sub    esp,0xc
c0013eae:	53                   	push   ebx
c0013eaf:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0013eb2:	83 c4 10             	add    esp,0x10
c0013eb5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013eb9:	85 c0                	test   eax,eax
c0013ebb:	0f 95 c0             	setne  al
c0013ebe:	31 d2                	xor    edx,edx
c0013ec0:	0f b6 c0             	movzx  eax,al
c0013ec3:	f7 d8                	neg    eax
c0013ec5:	83 d2 00             	adc    edx,0x0
c0013ec8:	83 c4 14             	add    esp,0x14
c0013ecb:	f7 da                	neg    edx
c0013ecd:	5b                   	pop    ebx
c0013ece:	5e                   	pop    esi
c0013ecf:	c3                   	ret    

c0013ed0 <sysCallUnlink(regs*)>:
c0013ed0:	56                   	push   esi
c0013ed1:	53                   	push   ebx
c0013ed2:	83 ec 20             	sub    esp,0x20
c0013ed5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0013ed9:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0013edc:	68 14 01 00 00       	push   0x114
c0013ee1:	e8 b1 58 ff ff       	call   c0009797 <malloc>
c0013ee6:	83 c4 0c             	add    esp,0xc
c0013ee9:	89 c3                	mov    ebx,eax
c0013eeb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013ef0:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013ef3:	56                   	push   esi
c0013ef4:	53                   	push   ebx
c0013ef5:	e8 a2 8d ff ff       	call   c000cc9c <File::File(char const*, Process*)>
c0013efa:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013efd:	e8 ec 8f ff ff       	call   c000ceee <File::unlink()>
c0013f02:	83 c4 10             	add    esp,0x10
c0013f05:	85 db                	test   ebx,ebx
c0013f07:	74 14                	je     c0013f1d <sysCallUnlink(regs*)+0x4d>
c0013f09:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013f0d:	8b 13                	mov    edx,DWORD PTR [ebx]
c0013f0f:	83 ec 0c             	sub    esp,0xc
c0013f12:	53                   	push   ebx
c0013f13:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0013f16:	83 c4 10             	add    esp,0x10
c0013f19:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013f1d:	85 c0                	test   eax,eax
c0013f1f:	0f 95 c0             	setne  al
c0013f22:	31 d2                	xor    edx,edx
c0013f24:	0f b6 c0             	movzx  eax,al
c0013f27:	f7 d8                	neg    eax
c0013f29:	83 d2 00             	adc    edx,0x0
c0013f2c:	83 c4 14             	add    esp,0x14
c0013f2f:	f7 da                	neg    edx
c0013f31:	5b                   	pop    ebx
c0013f32:	5e                   	pop    esi
c0013f33:	c3                   	ret    

c0013f34 <sysCallGetArgv(regs*)>:
c0013f34:	83 ec 0c             	sub    esp,0xc
c0013f37:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013f3b:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0013f3e:	85 c0                	test   eax,eax
c0013f40:	78 2b                	js     c0013f6d <sysCallGetArgv(regs*)+0x39>
c0013f42:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0013f48:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0013f4b:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c0013f51:	7d 1a                	jge    c0013f6d <sysCallGetArgv(regs*)+0x39>
c0013f53:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c0013f5a:	85 c0                	test   eax,eax
c0013f5c:	74 17                	je     c0013f75 <sysCallGetArgv(regs*)+0x41>
c0013f5e:	83 ec 08             	sub    esp,0x8
c0013f61:	50                   	push   eax
c0013f62:	ff 72 24             	push   DWORD PTR [edx+0x24]
c0013f65:	e8 fa c5 fe ff       	call   c0000564 <strcpy>
c0013f6a:	83 c4 10             	add    esp,0x10
c0013f6d:	31 c0                	xor    eax,eax
c0013f6f:	31 d2                	xor    edx,edx
c0013f71:	83 c4 0c             	add    esp,0xc
c0013f74:	c3                   	ret    
c0013f75:	b8 01 00 00 00       	mov    eax,0x1
c0013f7a:	31 d2                	xor    edx,edx
c0013f7c:	83 c4 0c             	add    esp,0xc
c0013f7f:	c3                   	ret    

c0013f80 <sysCallTTYName(regs*)>:
c0013f80:	56                   	push   esi
c0013f81:	53                   	push   ebx
c0013f82:	53                   	push   ebx
c0013f83:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013f87:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0013f8a:	85 c0                	test   eax,eax
c0013f8c:	74 5f                	je     c0013fed <sysCallTTYName(regs*)+0x6d>
c0013f8e:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0013f91:	83 f8 02             	cmp    eax,0x2
c0013f94:	77 3e                	ja     c0013fd4 <sysCallTTYName(regs*)+0x54>
c0013f96:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013f9b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013f9e:	8b 98 06 05 00 00    	mov    ebx,DWORD PTR [eax+0x506]
c0013fa4:	85 db                	test   ebx,ebx
c0013fa6:	74 45                	je     c0013fed <sysCallTTYName(regs*)+0x6d>
c0013fa8:	83 ec 0c             	sub    esp,0xc
c0013fab:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013fad:	53                   	push   ebx
c0013fae:	ff 10                	call   DWORD PTR [eax]
c0013fb0:	83 c4 10             	add    esp,0x10
c0013fb3:	84 c0                	test   al,al
c0013fb5:	74 41                	je     c0013ff8 <sysCallTTYName(regs*)+0x78>
c0013fb7:	83 ec 08             	sub    esp,0x8
c0013fba:	81 c3 82 00 00 00    	add    ebx,0x82
c0013fc0:	53                   	push   ebx
c0013fc1:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0013fc4:	e8 9b c5 fe ff       	call   c0000564 <strcpy>
c0013fc9:	83 c4 10             	add    esp,0x10
c0013fcc:	31 c0                	xor    eax,eax
c0013fce:	59                   	pop    ecx
c0013fcf:	31 d2                	xor    edx,edx
c0013fd1:	5b                   	pop    ebx
c0013fd2:	5e                   	pop    esi
c0013fd3:	c3                   	ret    
c0013fd4:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0013fd9:	74 bb                	je     c0013f96 <sysCallTTYName(regs*)+0x16>
c0013fdb:	83 ec 0c             	sub    esp,0xc
c0013fde:	50                   	push   eax
c0013fdf:	e8 9b 72 ff ff       	call   c000b27f <getFromFileDescriptor(int)>
c0013fe4:	83 c4 10             	add    esp,0x10
c0013fe7:	89 c3                	mov    ebx,eax
c0013fe9:	85 db                	test   ebx,ebx
c0013feb:	75 bb                	jne    c0013fa8 <sysCallTTYName(regs*)+0x28>
c0013fed:	59                   	pop    ecx
c0013fee:	b8 01 00 00 00       	mov    eax,0x1
c0013ff3:	31 d2                	xor    edx,edx
c0013ff5:	5b                   	pop    ebx
c0013ff6:	5e                   	pop    esi
c0013ff7:	c3                   	ret    
c0013ff8:	59                   	pop    ecx
c0013ff9:	b8 02 00 00 00       	mov    eax,0x2
c0013ffe:	31 d2                	xor    edx,edx
c0014000:	5b                   	pop    ebx
c0014001:	5e                   	pop    esi
c0014002:	c3                   	ret    

c0014003 <sysCallUSleep(regs*)>:
c0014003:	83 ec 1c             	sub    esp,0x1c
c0014006:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001400a:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001400d:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c0014010:	6a 00                	push   0x0
c0014012:	6a 64                	push   0x64
c0014014:	52                   	push   edx
c0014015:	50                   	push   eax
c0014016:	e8 85 d4 00 00       	call   c00214a0 <__udivdi3>
c001401b:	83 c4 14             	add    esp,0x14
c001401e:	50                   	push   eax
c001401f:	e8 b4 22 00 00       	call   c00162d8 <milliTenthSleep(unsigned int)>
c0014024:	31 c0                	xor    eax,eax
c0014026:	31 d2                	xor    edx,edx
c0014028:	83 c4 1c             	add    esp,0x1c
c001402b:	c3                   	ret    

c001402c <sysCallSpawn(regs*)>:
c001402c:	56                   	push   esi
c001402d:	53                   	push   ebx
c001402e:	50                   	push   eax
c001402f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014033:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0014036:	85 c0                	test   eax,eax
c0014038:	75 08                	jne    c0014042 <sysCallSpawn(regs*)+0x16>
c001403a:	59                   	pop    ecx
c001403b:	31 c0                	xor    eax,eax
c001403d:	31 d2                	xor    edx,edx
c001403f:	5b                   	pop    ebx
c0014040:	5e                   	pop    esi
c0014041:	c3                   	ret    
c0014042:	83 ec 0c             	sub    esp,0xc
c0014045:	68 1f 07 00 00       	push   0x71f
c001404a:	e8 48 57 ff ff       	call   c0009797 <malloc>
c001404f:	83 c4 10             	add    esp,0x10
c0014052:	89 c6                	mov    esi,eax
c0014054:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0014057:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001405a:	85 c0                	test   eax,eax
c001405c:	75 32                	jne    c0014090 <sysCallSpawn(regs*)+0x64>
c001405e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014063:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014066:	52                   	push   edx
c0014067:	50                   	push   eax
c0014068:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001406b:	56                   	push   esi
c001406c:	e8 5f 19 00 00       	call   c00159d0 <Process::Process(char const*, Process*, char**)>
c0014071:	83 c4 10             	add    esp,0x10
c0014074:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c001407b:	75 bd                	jne    c001403a <sysCallSpawn(regs*)+0xe>
c001407d:	83 ec 0c             	sub    esp,0xc
c0014080:	56                   	push   esi
c0014081:	e8 36 1e 00 00       	call   c0015ebc <Process::createUserThread()>
c0014086:	8b 06                	mov    eax,DWORD PTR [esi]
c0014088:	83 c4 10             	add    esp,0x10
c001408b:	99                   	cdq    
c001408c:	59                   	pop    ecx
c001408d:	5b                   	pop    ebx
c001408e:	5e                   	pop    esi
c001408f:	c3                   	ret    
c0014090:	31 c0                	xor    eax,eax
c0014092:	eb d2                	jmp    c0014066 <sysCallSpawn(regs*)+0x3a>

c0014094 <sysCallGetEnv(regs*)>:
c0014094:	57                   	push   edi
c0014095:	56                   	push   esi
c0014096:	53                   	push   ebx
c0014097:	83 ec 1c             	sub    esp,0x1c
c001409a:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001409e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00140a3:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c00140a6:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00140a9:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00140ac:	e8 36 e9 ff ff       	call   c00129e7 <Krnl::getProcessTotalEnvCount(Process*)>
c00140b1:	83 c4 10             	add    esp,0x10
c00140b4:	39 c7                	cmp    edi,eax
c00140b6:	7c 14                	jl     c00140cc <sysCallGetEnv(regs*)+0x38>
c00140b8:	85 f6                	test   esi,esi
c00140ba:	75 0b                	jne    c00140c7 <sysCallGetEnv(regs*)+0x33>
c00140bc:	83 c4 10             	add    esp,0x10
c00140bf:	31 c0                	xor    eax,eax
c00140c1:	5b                   	pop    ebx
c00140c2:	31 d2                	xor    edx,edx
c00140c4:	5e                   	pop    esi
c00140c5:	5f                   	pop    edi
c00140c6:	c3                   	ret    
c00140c7:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00140ca:	eb f0                	jmp    c00140bc <sysCallGetEnv(regs*)+0x28>
c00140cc:	8d 44 24 08          	lea    eax,[esp+0x8]
c00140d0:	52                   	push   edx
c00140d1:	57                   	push   edi
c00140d2:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00140d8:	ff 72 3c             	push   DWORD PTR [edx+0x3c]
c00140db:	50                   	push   eax
c00140dc:	e8 26 e9 ff ff       	call   c0012a07 <Krnl::getProcessEnvPair(Process*, int)>
c00140e1:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00140e4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00140e8:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00140ec:	83 c4 0c             	add    esp,0xc
c00140ef:	85 c9                	test   ecx,ecx
c00140f1:	75 23                	jne    c0014116 <sysCallGetEnv(regs*)+0x82>
c00140f3:	83 ec 0c             	sub    esp,0xc
c00140f6:	50                   	push   eax
c00140f7:	e8 c8 c3 fe ff       	call   c00004c4 <strlen>
c00140fc:	89 3c 24             	mov    DWORD PTR [esp],edi
c00140ff:	89 c3                	mov    ebx,eax
c0014101:	e8 be c3 fe ff       	call   c00004c4 <strlen>
c0014106:	83 c4 10             	add    esp,0x10
c0014109:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001410d:	83 c4 10             	add    esp,0x10
c0014110:	31 d2                	xor    edx,edx
c0014112:	5b                   	pop    ebx
c0014113:	5e                   	pop    esi
c0014114:	5f                   	pop    edi
c0014115:	c3                   	ret    
c0014116:	83 ec 08             	sub    esp,0x8
c0014119:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001411c:	50                   	push   eax
c001411d:	56                   	push   esi
c001411e:	e8 41 c4 fe ff       	call   c0000564 <strcpy>
c0014123:	58                   	pop    eax
c0014124:	5a                   	pop    edx
c0014125:	68 9c 42 02 c0       	push   0xc002429c
c001412a:	56                   	push   esi
c001412b:	e8 74 c5 fe ff       	call   c00006a4 <strcat>
c0014130:	59                   	pop    ecx
c0014131:	5b                   	pop    ebx
c0014132:	57                   	push   edi
c0014133:	56                   	push   esi
c0014134:	e8 6b c5 fe ff       	call   c00006a4 <strcat>
c0014139:	83 c4 10             	add    esp,0x10
c001413c:	e9 7b ff ff ff       	jmp    c00140bc <sysCallGetEnv(regs*)+0x28>

c0014141 <sysSetFatAttrib(regs*)>:
c0014141:	57                   	push   edi
c0014142:	56                   	push   esi
c0014143:	53                   	push   ebx
c0014144:	83 ec 1c             	sub    esp,0x1c
c0014147:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001414b:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001414e:	68 14 01 00 00       	push   0x114
c0014153:	e8 3f 56 ff ff       	call   c0009797 <malloc>
c0014158:	83 c4 0c             	add    esp,0xc
c001415b:	89 c3                	mov    ebx,eax
c001415d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014162:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0014165:	57                   	push   edi
c0014166:	53                   	push   ebx
c0014167:	e8 30 8b ff ff       	call   c000cc9c <File::File(char const*, Process*)>
c001416c:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001416f:	83 c4 0c             	add    esp,0xc
c0014172:	0f b6 d4             	movzx  edx,ah
c0014175:	0f b6 c0             	movzx  eax,al
c0014178:	52                   	push   edx
c0014179:	50                   	push   eax
c001417a:	53                   	push   ebx
c001417b:	e8 08 8e ff ff       	call   c000cf88 <File::chfatattr(unsigned char, unsigned char)>
c0014180:	83 c4 10             	add    esp,0x10
c0014183:	85 db                	test   ebx,ebx
c0014185:	74 14                	je     c001419b <sysSetFatAttrib(regs*)+0x5a>
c0014187:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001418b:	8b 13                	mov    edx,DWORD PTR [ebx]
c001418d:	83 ec 0c             	sub    esp,0xc
c0014190:	53                   	push   ebx
c0014191:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0014194:	83 c4 10             	add    esp,0x10
c0014197:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001419b:	85 c0                	test   eax,eax
c001419d:	0f 95 c0             	setne  al
c00141a0:	31 d2                	xor    edx,edx
c00141a2:	0f b6 c0             	movzx  eax,al
c00141a5:	f7 d8                	neg    eax
c00141a7:	83 d2 00             	adc    edx,0x0
c00141aa:	83 c4 10             	add    esp,0x10
c00141ad:	f7 da                	neg    edx
c00141af:	5b                   	pop    ebx
c00141b0:	5e                   	pop    esi
c00141b1:	5f                   	pop    edi
c00141b2:	c3                   	ret    

c00141b3 <sysPipe(regs*)>:
c00141b3:	57                   	push   edi
c00141b4:	56                   	push   esi
c00141b5:	53                   	push   ebx
c00141b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00141ba:	83 ec 0c             	sub    esp,0xc
c00141bd:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c00141c0:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c00141c3:	6a 20                	push   0x20
c00141c5:	e8 cd 55 ff ff       	call   c0009797 <malloc>
c00141ca:	89 c3                	mov    ebx,eax
c00141cc:	58                   	pop    eax
c00141cd:	5a                   	pop    edx
c00141ce:	68 00 50 00 00       	push   0x5000
c00141d3:	53                   	push   ebx
c00141d4:	e8 4b 60 ff ff       	call   c000a224 <Pipe::Pipe(int)>
c00141d9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00141dc:	e8 a9 6d ff ff       	call   c000af8a <UnixFile::getFileDescriptor()>
c00141e1:	89 07                	mov    DWORD PTR [edi],eax
c00141e3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00141e6:	e8 9f 6d ff ff       	call   c000af8a <UnixFile::getFileDescriptor()>
c00141eb:	83 c4 10             	add    esp,0x10
c00141ee:	89 06                	mov    DWORD PTR [esi],eax
c00141f0:	31 d2                	xor    edx,edx
c00141f2:	5b                   	pop    ebx
c00141f3:	31 c0                	xor    eax,eax
c00141f5:	5e                   	pop    esi
c00141f6:	5f                   	pop    edi
c00141f7:	c3                   	ret    

c00141f8 <sysGetUnixTime(regs*)>:
c00141f8:	a1 28 63 02 c0       	mov    eax,ds:0xc0026328
c00141fd:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0014203:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014207:	e9 ee 94 ff ff       	jmp    c000d6fa <Clock::timeInSecondsLocal()>

c001420c <string_ends_with(char const*, char const*)>:
c001420c:	57                   	push   edi
c001420d:	56                   	push   esi
c001420e:	53                   	push   ebx
c001420f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014213:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0014217:	83 ec 0c             	sub    esp,0xc
c001421a:	53                   	push   ebx
c001421b:	e8 a4 c2 fe ff       	call   c00004c4 <strlen>
c0014220:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014223:	89 c6                	mov    esi,eax
c0014225:	e8 9a c2 fe ff       	call   c00004c4 <strlen>
c001422a:	83 c4 10             	add    esp,0x10
c001422d:	39 c6                	cmp    esi,eax
c001422f:	7d 06                	jge    c0014237 <string_ends_with(char const*, char const*)+0x2b>
c0014231:	5b                   	pop    ebx
c0014232:	31 c0                	xor    eax,eax
c0014234:	5e                   	pop    esi
c0014235:	5f                   	pop    edi
c0014236:	c3                   	ret    
c0014237:	83 ec 08             	sub    esp,0x8
c001423a:	29 c6                	sub    esi,eax
c001423c:	57                   	push   edi
c001423d:	01 f3                	add    ebx,esi
c001423f:	53                   	push   ebx
c0014240:	e8 ab c3 fe ff       	call   c00005f0 <strcmp>
c0014245:	83 c4 10             	add    esp,0x10
c0014248:	85 c0                	test   eax,eax
c001424a:	5b                   	pop    ebx
c001424b:	0f 94 c0             	sete   al
c001424e:	5e                   	pop    esi
c001424f:	0f b6 c0             	movzx  eax,al
c0014252:	5f                   	pop    edi
c0014253:	c3                   	ret    

c0014254 <sysCallOpen(regs*)>:
c0014254:	56                   	push   esi
c0014255:	53                   	push   ebx
c0014256:	81 ec 04 01 00 00    	sub    esp,0x104
c001425c:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c0014263:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0014266:	85 c9                	test   ecx,ecx
c0014268:	0f 84 ad 01 00 00    	je     c001441b <sysCallOpen(regs*)+0x1c7>
c001426e:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0014271:	85 c0                	test   eax,eax
c0014273:	0f 84 a2 01 00 00    	je     c001441b <sysCallOpen(regs*)+0x1c7>
c0014279:	52                   	push   edx
c001427a:	68 9e 42 02 c0       	push   0xc002429e
c001427f:	50                   	push   eax
c0014280:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0014284:	56                   	push   esi
c0014285:	e8 68 88 ff ff       	call   c000caf2 <Fs::standardiseFiles(char*, char const*, char const*)>
c001428a:	89 34 24             	mov    DWORD PTR [esp],esi
c001428d:	e8 32 c2 fe ff       	call   c00004c4 <strlen>
c0014292:	83 c4 10             	add    esp,0x10
c0014295:	48                   	dec    eax
c0014296:	74 1d                	je     c00142b5 <sysCallOpen(regs*)+0x61>
c0014298:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c001429b:	eb 0f                	jmp    c00142ac <sysCallOpen(regs*)+0x58>
c001429d:	80 fa 3a             	cmp    dl,0x3a
c00142a0:	74 0f                	je     c00142b1 <sysCallOpen(regs*)+0x5d>
c00142a2:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c00142a6:	48                   	dec    eax
c00142a7:	74 0c                	je     c00142b5 <sysCallOpen(regs*)+0x61>
c00142a9:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c00142ac:	80 fa 2e             	cmp    dl,0x2e
c00142af:	75 ec                	jne    c001429d <sysCallOpen(regs*)+0x49>
c00142b1:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c00142b5:	83 ec 08             	sub    esp,0x8
c00142b8:	68 a2 42 02 c0       	push   0xc00242a2
c00142bd:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00142c0:	e8 47 ff ff ff       	call   c001420c <string_ends_with(char const*, char const*)>
c00142c5:	83 c4 10             	add    esp,0x10
c00142c8:	85 c0                	test   eax,eax
c00142ca:	74 1d                	je     c00142e9 <sysCallOpen(regs*)+0x95>
c00142cc:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00142cf:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c00142d5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00142dc:	81 c4 04 01 00 00    	add    esp,0x104
c00142e2:	31 c0                	xor    eax,eax
c00142e4:	31 d2                	xor    edx,edx
c00142e6:	5b                   	pop    ebx
c00142e7:	5e                   	pop    esi
c00142e8:	c3                   	ret    
c00142e9:	83 ec 08             	sub    esp,0x8
c00142ec:	68 a7 42 02 c0       	push   0xc00242a7
c00142f1:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00142f4:	e8 13 ff ff ff       	call   c001420c <string_ends_with(char const*, char const*)>
c00142f9:	83 c4 10             	add    esp,0x10
c00142fc:	85 c0                	test   eax,eax
c00142fe:	75 cc                	jne    c00142cc <sysCallOpen(regs*)+0x78>
c0014300:	83 ec 08             	sub    esp,0x8
c0014303:	68 a3 42 02 c0       	push   0xc00242a3
c0014308:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001430b:	e8 e0 c2 fe ff       	call   c00005f0 <strcmp>
c0014310:	83 c4 10             	add    esp,0x10
c0014313:	85 c0                	test   eax,eax
c0014315:	74 b5                	je     c00142cc <sysCallOpen(regs*)+0x78>
c0014317:	83 ec 08             	sub    esp,0x8
c001431a:	68 a2 42 02 c0       	push   0xc00242a2
c001431f:	56                   	push   esi
c0014320:	e8 e7 fe ff ff       	call   c001420c <string_ends_with(char const*, char const*)>
c0014325:	83 c4 10             	add    esp,0x10
c0014328:	85 c0                	test   eax,eax
c001432a:	75 a0                	jne    c00142cc <sysCallOpen(regs*)+0x78>
c001432c:	83 ec 08             	sub    esp,0x8
c001432f:	68 ac 42 02 c0       	push   0xc00242ac
c0014334:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014337:	e8 d0 fe ff ff       	call   c001420c <string_ends_with(char const*, char const*)>
c001433c:	83 c4 10             	add    esp,0x10
c001433f:	85 c0                	test   eax,eax
c0014341:	0f 85 e7 00 00 00    	jne    c001442e <sysCallOpen(regs*)+0x1da>
c0014347:	83 ec 08             	sub    esp,0x8
c001434a:	68 b1 42 02 c0       	push   0xc00242b1
c001434f:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014352:	e8 b5 fe ff ff       	call   c001420c <string_ends_with(char const*, char const*)>
c0014357:	83 c4 10             	add    esp,0x10
c001435a:	85 c0                	test   eax,eax
c001435c:	0f 85 cc 00 00 00    	jne    c001442e <sysCallOpen(regs*)+0x1da>
c0014362:	83 ec 08             	sub    esp,0x8
c0014365:	68 ad 42 02 c0       	push   0xc00242ad
c001436a:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001436d:	e8 7e c2 fe ff       	call   c00005f0 <strcmp>
c0014372:	83 c4 10             	add    esp,0x10
c0014375:	85 c0                	test   eax,eax
c0014377:	0f 84 b1 00 00 00    	je     c001442e <sysCallOpen(regs*)+0x1da>
c001437d:	83 ec 08             	sub    esp,0x8
c0014380:	68 ac 42 02 c0       	push   0xc00242ac
c0014385:	56                   	push   esi
c0014386:	e8 81 fe ff ff       	call   c001420c <string_ends_with(char const*, char const*)>
c001438b:	83 c4 10             	add    esp,0x10
c001438e:	85 c0                	test   eax,eax
c0014390:	0f 85 98 00 00 00    	jne    c001442e <sysCallOpen(regs*)+0x1da>
c0014396:	83 ec 0c             	sub    esp,0xc
c0014399:	68 14 01 00 00       	push   0x114
c001439e:	e8 f4 53 ff ff       	call   c0009797 <malloc>
c00143a3:	83 c4 0c             	add    esp,0xc
c00143a6:	89 c6                	mov    esi,eax
c00143a8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00143ad:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00143b0:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00143b3:	56                   	push   esi
c00143b4:	e8 e3 88 ff ff       	call   c000cc9c <File::File(char const*, Process*)>
c00143b9:	83 c4 10             	add    esp,0x10
c00143bc:	85 f6                	test   esi,esi
c00143be:	74 5b                	je     c001441b <sysCallOpen(regs*)+0x1c7>
c00143c0:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00143c3:	0f b6 c2             	movzx  eax,dl
c00143c6:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c00143c9:	89 d0                	mov    eax,edx
c00143cb:	83 e0 01             	and    eax,0x1
c00143ce:	f6 c2 02             	test   dl,0x2
c00143d1:	74 03                	je     c00143d6 <sysCallOpen(regs*)+0x182>
c00143d3:	83 c8 02             	or     eax,0x2
c00143d6:	f6 c2 04             	test   dl,0x4
c00143d9:	74 03                	je     c00143de <sysCallOpen(regs*)+0x18a>
c00143db:	83 c8 04             	or     eax,0x4
c00143de:	f6 c2 08             	test   dl,0x8
c00143e1:	74 03                	je     c00143e6 <sysCallOpen(regs*)+0x192>
c00143e3:	83 c8 0a             	or     eax,0xa
c00143e6:	83 e2 10             	and    edx,0x10
c00143e9:	74 03                	je     c00143ee <sysCallOpen(regs*)+0x19a>
c00143eb:	83 c8 12             	or     eax,0x12
c00143ee:	83 ec 08             	sub    esp,0x8
c00143f1:	50                   	push   eax
c00143f2:	56                   	push   esi
c00143f3:	e8 7e 89 ff ff       	call   c000cd76 <File::open(FileOpenMode)>
c00143f8:	83 c4 10             	add    esp,0x10
c00143fb:	85 c0                	test   eax,eax
c00143fd:	75 1c                	jne    c001441b <sysCallOpen(regs*)+0x1c7>
c00143ff:	83 ec 0c             	sub    esp,0xc
c0014402:	56                   	push   esi
c0014403:	e8 82 6b ff ff       	call   c000af8a <UnixFile::getFileDescriptor()>
c0014408:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001440b:	83 c4 10             	add    esp,0x10
c001440e:	89 02                	mov    DWORD PTR [edx],eax
c0014410:	c1 f8 1f             	sar    eax,0x1f
c0014413:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0014416:	e9 c1 fe ff ff       	jmp    c00142dc <sysCallOpen(regs*)+0x88>
c001441b:	81 c4 04 01 00 00    	add    esp,0x104
c0014421:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0014426:	ba ff ff ff ff       	mov    edx,0xffffffff
c001442b:	5b                   	pop    ebx
c001442c:	5e                   	pop    esi
c001442d:	c3                   	ret    
c001442e:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014431:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c0014437:	e9 99 fe ff ff       	jmp    c00142d5 <sysCallOpen(regs*)+0x81>

c001443c <Sys::loadSyscalls()>:
c001443c:	c7 05 40 8e 02 c0 c1 37 01 c0 	mov    DWORD PTR ds:0xc0028e40,0xc00137c1
c0014446:	c7 05 44 8e 02 c0 b6 33 01 c0 	mov    DWORD PTR ds:0xc0028e44,0xc00133b6
c0014450:	c7 05 48 8e 02 c0 a7 35 01 c0 	mov    DWORD PTR ds:0xc0028e48,0xc00135a7
c001445a:	c7 05 4c 8e 02 c0 f7 36 01 c0 	mov    DWORD PTR ds:0xc0028e4c,0xc00136f7
c0014464:	c7 05 50 8e 02 c0 3f 35 01 c0 	mov    DWORD PTR ds:0xc0028e50,0xc001353f
c001446e:	c7 05 54 8e 02 c0 ed 33 01 c0 	mov    DWORD PTR ds:0xc0028e54,0xc00133ed
c0014478:	c7 05 58 8e 02 c0 ce 33 01 c0 	mov    DWORD PTR ds:0xc0028e58,0xc00133ce
c0014482:	c7 05 5c 8e 02 c0 fc 35 01 c0 	mov    DWORD PTR ds:0xc0028e5c,0xc00135fc
c001448c:	c7 05 64 8e 02 c0 84 3c 01 c0 	mov    DWORD PTR ds:0xc0028e64,0xc0013c84
c0014496:	c7 05 60 8e 02 c0 54 42 01 c0 	mov    DWORD PTR ds:0xc0028e60,0xc0014254
c00144a0:	c7 05 68 8e 02 c0 e4 3c 01 c0 	mov    DWORD PTR ds:0xc0028e68,0xc0013ce4
c00144aa:	c7 05 6c 8e 02 c0 c7 39 01 c0 	mov    DWORD PTR ds:0xc0028e6c,0xc00139c7
c00144b4:	c7 05 70 8e 02 c0 f9 37 01 c0 	mov    DWORD PTR ds:0xc0028e70,0xc00137f9
c00144be:	c7 05 74 8e 02 c0 fe 37 01 c0 	mov    DWORD PTR ds:0xc0028e74,0xc00137fe
c00144c8:	c7 05 78 8e 02 c0 ad 3d 01 c0 	mov    DWORD PTR ds:0xc0028e78,0xc0013dad
c00144d2:	c7 05 7c 8e 02 c0 59 3d 01 c0 	mov    DWORD PTR ds:0xc0028e7c,0xc0013d59
c00144dc:	c7 05 80 8e 02 c0 a0 3a 01 c0 	mov    DWORD PTR ds:0xc0028e80,0xc0013aa0
c00144e6:	c7 05 84 8e 02 c0 f7 3a 01 c0 	mov    DWORD PTR ds:0xc0028e84,0xc0013af7
c00144f0:	c7 05 88 8e 02 c0 63 3b 01 c0 	mov    DWORD PTR ds:0xc0028e88,0xc0013b63
c00144fa:	c7 05 8c 8e 02 c0 03 38 01 c0 	mov    DWORD PTR ds:0xc0028e8c,0xc0013803
c0014504:	c7 05 90 8e 02 c0 1d 3e 01 c0 	mov    DWORD PTR ds:0xc0028e90,0xc0013e1d
c001450e:	c7 05 94 8e 02 c0 37 3e 01 c0 	mov    DWORD PTR ds:0xc0028e94,0xc0013e37
c0014518:	c7 05 98 8e 02 c0 37 3e 01 c0 	mov    DWORD PTR ds:0xc0028e98,0xc0013e37
c0014522:	c7 05 9c 8e 02 c0 6c 3e 01 c0 	mov    DWORD PTR ds:0xc0028e9c,0xc0013e6c
c001452c:	c7 05 a0 8e 02 c0 d0 3e 01 c0 	mov    DWORD PTR ds:0xc0028ea0,0xc0013ed0
c0014536:	c7 05 a4 8e 02 c0 0d 38 01 c0 	mov    DWORD PTR ds:0xc0028ea4,0xc001380d
c0014540:	c7 05 a8 8e 02 c0 34 3f 01 c0 	mov    DWORD PTR ds:0xc0028ea8,0xc0013f34
c001454a:	c7 05 ac 8e 02 c0 84 39 01 c0 	mov    DWORD PTR ds:0xc0028eac,0xc0013984
c0014554:	c7 05 b0 8e 02 c0 80 3f 01 c0 	mov    DWORD PTR ds:0xc0028eb0,0xc0013f80
c001455e:	c7 05 b4 8e 02 c0 46 3a 01 c0 	mov    DWORD PTR ds:0xc0028eb4,0xc0013a46
c0014568:	c7 05 b8 8e 02 c0 03 40 01 c0 	mov    DWORD PTR ds:0xc0028eb8,0xc0014003
c0014572:	c7 05 bc 8e 02 c0 d5 3b 01 c0 	mov    DWORD PTR ds:0xc0028ebc,0xc0013bd5
c001457c:	c7 05 c0 8e 02 c0 2c 40 01 c0 	mov    DWORD PTR ds:0xc0028ec0,0xc001402c
c0014586:	c7 05 c4 8e 02 c0 94 40 01 c0 	mov    DWORD PTR ds:0xc0028ec4,0xc0014094
c0014590:	c7 05 cc 8e 02 c0 1d 38 01 c0 	mov    DWORD PTR ds:0xc0028ecc,0xc001381d
c001459a:	c7 05 d0 8e 02 c0 87 38 01 c0 	mov    DWORD PTR ds:0xc0028ed0,0xc0013887
c00145a4:	c7 05 d4 8e 02 c0 d1 38 01 c0 	mov    DWORD PTR ds:0xc0028ed4,0xc00138d1
c00145ae:	c7 05 d8 8e 02 c0 41 41 01 c0 	mov    DWORD PTR ds:0xc0028ed8,0xc0014141
c00145b8:	c7 05 dc 8e 02 c0 52 3e 01 c0 	mov    DWORD PTR ds:0xc0028edc,0xc0013e52
c00145c2:	c7 05 e0 8e 02 c0 26 39 01 c0 	mov    DWORD PTR ds:0xc0028ee0,0xc0013926
c00145cc:	c7 05 e4 8e 02 c0 b3 41 01 c0 	mov    DWORD PTR ds:0xc0028ee4,0xc00141b3
c00145d6:	c7 05 e8 8e 02 c0 f8 41 01 c0 	mov    DWORD PTR ds:0xc0028ee8,0xc00141f8
c00145e0:	c7 05 ec 8e 02 c0 97 34 01 c0 	mov    DWORD PTR ds:0xc0028eec,0xc0013497
c00145ea:	c7 05 f0 8e 02 c0 18 36 01 c0 	mov    DWORD PTR ds:0xc0028ef0,0xc0013618
c00145f4:	c7 05 f4 8e 02 c0 ad 36 01 c0 	mov    DWORD PTR ds:0xc0028ef4,0xc00136ad
c00145fe:	c7 05 f8 8e 02 c0 80 33 01 c0 	mov    DWORD PTR ds:0xc0028ef8,0xc0013380
c0014608:	c7 05 fc 8e 02 c0 5f 37 01 c0 	mov    DWORD PTR ds:0xc0028efc,0xc001375f
c0014612:	c7 05 00 8f 02 c0 f9 33 01 c0 	mov    DWORD PTR ds:0xc0028f00,0xc00133f9
c001461c:	c7 05 04 8f 02 c0 13 34 01 c0 	mov    DWORD PTR ds:0xc0028f04,0xc0013413
c0014626:	c3                   	ret    

c0014627 <Sys::systemCall(regs*, void*)>:
c0014627:	53                   	push   ebx
c0014628:	83 ec 08             	sub    esp,0x8
c001462b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001462f:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0014632:	83 f8 7f             	cmp    eax,0x7f
c0014635:	77 16                	ja     c001464d <Sys::systemCall(regs*, void*)+0x26>
c0014637:	8b 14 85 40 8e 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd71c0]
c001463e:	85 d2                	test   edx,edx
c0014640:	74 0b                	je     c001464d <Sys::systemCall(regs*, void*)+0x26>
c0014642:	83 ec 0c             	sub    esp,0xc
c0014645:	53                   	push   ebx
c0014646:	ff d2                	call   edx
c0014648:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001464b:	eb 0d                	jmp    c001465a <Sys::systemCall(regs*, void*)+0x33>
c001464d:	52                   	push   edx
c001464e:	52                   	push   edx
c001464f:	50                   	push   eax
c0014650:	68 b6 42 02 c0       	push   0xc00242b6
c0014655:	e8 d7 80 ff ff       	call   c000c731 <Dbg::kprintf(char const*, ...)>
c001465a:	83 c4 10             	add    esp,0x10
c001465d:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0014662:	31 d2                	xor    edx,edx
c0014664:	83 c4 08             	add    esp,0x8
c0014667:	5b                   	pop    ebx
c0014668:	c3                   	ret    

c0014669 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c0014669:	55                   	push   ebp
c001466a:	57                   	push   edi
c001466b:	56                   	push   esi
c001466c:	53                   	push   ebx
c001466d:	81 ec 2c 10 00 00    	sub    esp,0x102c
c0014673:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001467a:	8b 9c 24 4c 10 00 00 	mov    ebx,DWORD PTR [esp+0x104c]
c0014681:	85 c0                	test   eax,eax
c0014683:	0f 95 c1             	setne  cl
c0014686:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c001468e:	0f 94 c2             	sete   dl
c0014691:	84 d1                	test   cl,dl
c0014693:	74 23                	je     c00146b8 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c0014695:	f7 c3 ff 0f 00 00    	test   ebx,0xfff
c001469b:	74 1b                	je     c00146b8 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001469d:	81 c3 00 10 00 00    	add    ebx,0x1000
c00146a3:	89 da                	mov    edx,ebx
c00146a5:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c00146ab:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c00146b1:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c00146b8:	8b 94 24 48 10 00 00 	mov    edx,DWORD PTR [esp+0x1048]
c00146bf:	05 ff 0f 00 00       	add    eax,0xfff
c00146c4:	83 ec 0c             	sub    esp,0xc
c00146c7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00146cb:	8d ba ff 0f 00 00    	lea    edi,[edx+0xfff]
c00146d1:	c1 e8 0c             	shr    eax,0xc
c00146d4:	89 fe                	mov    esi,edi
c00146d6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00146da:	c1 ee 0c             	shr    esi,0xc
c00146dd:	6a 01                	push   0x1
c00146df:	e8 f1 6c ff ff       	call   c000b3d5 <Virt::allocateKernelVirtualPages(int)>
c00146e4:	89 c5                	mov    ebp,eax
c00146e6:	58                   	pop    eax
c00146e7:	5a                   	pop    edx
c00146e8:	56                   	push   esi
c00146e9:	68 ca 42 02 c0       	push   0xc00242ca
c00146ee:	e8 3e 80 ff ff       	call   c000c731 <Dbg::kprintf(char const*, ...)>
c00146f3:	59                   	pop    ecx
c00146f4:	58                   	pop    eax
c00146f5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00146f9:	68 dc 42 02 c0       	push   0xc00242dc
c00146fe:	e8 2e 80 ff ff       	call   c000c731 <Dbg::kprintf(char const*, ...)>
c0014703:	83 c4 10             	add    esp,0x10
c0014706:	81 ff ff 0f 00 00    	cmp    edi,0xfff
c001470c:	0f 86 31 01 00 00    	jbe    c0014843 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1da>
c0014712:	c1 e6 0c             	shl    esi,0xc
c0014715:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014718:	8d 04 1e             	lea    eax,[esi+ebx*1]
c001471b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001471f:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c0014726:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0014729:	01 df                	add    edi,ebx
c001472b:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c001472e:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0014732:	0f 84 08 01 00 00    	je     c0014840 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1d7>
c0014738:	81 ff 00 10 00 00    	cmp    edi,0x1000
c001473e:	76 05                	jbe    c0014745 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xdc>
c0014740:	bf 00 10 00 00       	mov    edi,0x1000
c0014745:	83 ec 0c             	sub    esp,0xc
c0014748:	31 d2                	xor    edx,edx
c001474a:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0014751:	8b 08                	mov    ecx,DWORD PTR [eax]
c0014753:	8d 44 24 28          	lea    eax,[esp+0x28]
c0014757:	50                   	push   eax
c0014758:	8d 74 24 30          	lea    esi,[esp+0x30]
c001475c:	56                   	push   esi
c001475d:	52                   	push   edx
c001475e:	57                   	push   edi
c001475f:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c0014766:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014769:	83 c4 20             	add    esp,0x20
c001476c:	85 c0                	test   eax,eax
c001476e:	74 0a                	je     c001477a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x111>
c0014770:	53                   	push   ebx
c0014771:	53                   	push   ebx
c0014772:	50                   	push   eax
c0014773:	68 ee 42 02 c0       	push   0xc00242ee
c0014778:	eb 0f                	jmp    c0014789 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x120>
c001477a:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c001477e:	74 20                	je     c00147a0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x137>
c0014780:	51                   	push   ecx
c0014781:	51                   	push   ecx
c0014782:	6a 00                	push   0x0
c0014784:	68 19 43 02 c0       	push   0xc0024319
c0014789:	e8 a3 7f ff ff       	call   c000c731 <Dbg::kprintf(char const*, ...)>
c001478e:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014791:	e8 33 6f ff ff       	call   c000b6c9 <Virt::freeKernelVirtualPages(unsigned long)>
c0014796:	83 c4 10             	add    esp,0x10
c0014799:	31 c0                	xor    eax,eax
c001479b:	e9 68 01 00 00       	jmp    c0014908 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x29f>
c00147a0:	fa                   	cli    
c00147a1:	ff 05 08 98 02 c0    	inc    DWORD PTR ds:0xc0029808
c00147a7:	e8 2a 54 ff ff       	call   c0009bd6 <Phys::allocatePage()>
c00147ac:	6a 07                	push   0x7
c00147ae:	89 c7                	mov    edi,eax
c00147b0:	55                   	push   ebp
c00147b1:	50                   	push   eax
c00147b2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00147b7:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00147ba:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00147c0:	e8 7b 72 ff ff       	call   c000ba40 <VAS::mapPage(unsigned long, unsigned long, int)>
c00147c5:	83 c4 0c             	add    esp,0xc
c00147c8:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c00147cf:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00147d5:	6a 00                	push   0x0
c00147d7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00147dc:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00147df:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00147e5:	e8 b0 70 ff ff       	call   c000b89a <VAS::mapOtherVASIn(bool, VAS*)>
c00147ea:	58                   	pop    eax
c00147eb:	5a                   	pop    edx
c00147ec:	68 07 0c 00 00       	push   0xc07
c00147f1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00147f5:	57                   	push   edi
c00147f6:	89 ef                	mov    edi,ebp
c00147f8:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c00147ff:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014805:	6a 00                	push   0x0
c0014807:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001480c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001480f:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014815:	e8 e4 75 ff ff       	call   c000bdfe <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001481a:	b9 00 10 00 00       	mov    ecx,0x1000
c001481f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014821:	a1 08 98 02 c0       	mov    eax,ds:0xc0029808
c0014826:	83 c4 20             	add    esp,0x20
c0014829:	48                   	dec    eax
c001482a:	a3 08 98 02 c0       	mov    ds:0xc0029808,eax
c001482f:	85 c0                	test   eax,eax
c0014831:	75 01                	jne    c0014834 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cb>
c0014833:	fb                   	sti    
c0014834:	81 04 24 00 10 00 00 	add    DWORD PTR [esp],0x1000
c001483b:	e9 df fe ff ff       	jmp    c001471f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xb6>
c0014840:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0014843:	81 7c 24 04 ff 0f 00 00 	cmp    DWORD PTR [esp+0x4],0xfff
c001484b:	0f 86 a9 00 00 00    	jbe    c00148fa <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c0014851:	fa                   	cli    
c0014852:	ff 05 08 98 02 c0    	inc    DWORD PTR ds:0xc0029808
c0014858:	51                   	push   ecx
c0014859:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0014860:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014866:	6a 00                	push   0x0
c0014868:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001486d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014870:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014876:	e8 1f 70 ff ff       	call   c000b89a <VAS::mapOtherVASIn(bool, VAS*)>
c001487b:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001487f:	c1 e6 0c             	shl    esi,0xc
c0014882:	01 de                	add    esi,ebx
c0014884:	83 c4 10             	add    esp,0x10
c0014887:	39 de                	cmp    esi,ebx
c0014889:	74 61                	je     c00148ec <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x283>
c001488b:	e8 46 53 ff ff       	call   c0009bd6 <Phys::allocatePage()>
c0014890:	6a 07                	push   0x7
c0014892:	89 c7                	mov    edi,eax
c0014894:	55                   	push   ebp
c0014895:	50                   	push   eax
c0014896:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001489b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001489e:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00148a4:	e8 97 71 ff ff       	call   c000ba40 <VAS::mapPage(unsigned long, unsigned long, int)>
c00148a9:	58                   	pop    eax
c00148aa:	5a                   	pop    edx
c00148ab:	68 07 0c 00 00       	push   0xc07
c00148b0:	53                   	push   ebx
c00148b1:	81 c3 00 10 00 00    	add    ebx,0x1000
c00148b7:	57                   	push   edi
c00148b8:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c00148bf:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00148c5:	6a 00                	push   0x0
c00148c7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00148cc:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00148cf:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00148d5:	e8 24 75 ff ff       	call   c000bdfe <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c00148da:	83 c4 1c             	add    esp,0x1c
c00148dd:	68 00 10 00 00       	push   0x1000
c00148e2:	6a 00                	push   0x0
c00148e4:	55                   	push   ebp
c00148e5:	e8 be bb fe ff       	call   c00004a8 <memset>
c00148ea:	eb 98                	jmp    c0014884 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x21b>
c00148ec:	a1 08 98 02 c0       	mov    eax,ds:0xc0029808
c00148f1:	48                   	dec    eax
c00148f2:	a3 08 98 02 c0       	mov    ds:0xc0029808,eax
c00148f7:	75 01                	jne    c00148fa <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c00148f9:	fb                   	sti    
c00148fa:	83 ec 0c             	sub    esp,0xc
c00148fd:	55                   	push   ebp
c00148fe:	e8 c6 6d ff ff       	call   c000b6c9 <Virt::freeKernelVirtualPages(unsigned long)>
c0014903:	83 c4 10             	add    esp,0x10
c0014906:	b0 01                	mov    al,0x1
c0014908:	81 c4 2c 10 00 00    	add    esp,0x102c
c001490e:	5b                   	pop    ebx
c001490f:	5e                   	pop    esi
c0014910:	5f                   	pop    edi
c0014911:	5d                   	pop    ebp
c0014912:	c3                   	ret    

c0014913 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c0014913:	55                   	push   ebp
c0014914:	57                   	push   edi
c0014915:	56                   	push   esi
c0014916:	53                   	push   ebx
c0014917:	83 ec 48             	sub    esp,0x48
c001491a:	68 14 01 00 00       	push   0x114
c001491f:	e8 73 4e ff ff       	call   c0009797 <malloc>
c0014924:	83 c4 0c             	add    esp,0xc
c0014927:	89 c6                	mov    esi,eax
c0014929:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001492d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0014931:	50                   	push   eax
c0014932:	e8 65 83 ff ff       	call   c000cc9c <File::File(char const*, Process*)>
c0014937:	58                   	pop    eax
c0014938:	5a                   	pop    edx
c0014939:	6a 01                	push   0x1
c001493b:	56                   	push   esi
c001493c:	e8 35 84 ff ff       	call   c000cd76 <File::open(FileOpenMode)>
c0014941:	83 c4 10             	add    esp,0x10
c0014944:	85 c0                	test   eax,eax
c0014946:	0f 85 47 01 00 00    	jne    c0014a93 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001494c:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0014954:	83 ec 0c             	sub    esp,0xc
c0014957:	6a 34                	push   0x34
c0014959:	e8 39 4e ff ff       	call   c0009797 <malloc>
c001495e:	89 c3                	mov    ebx,eax
c0014960:	58                   	pop    eax
c0014961:	8b 06                	mov    eax,DWORD PTR [esi]
c0014963:	8d 7c 24 38          	lea    edi,[esp+0x38]
c0014967:	57                   	push   edi
c0014968:	53                   	push   ebx
c0014969:	6a 00                	push   0x0
c001496b:	6a 34                	push   0x34
c001496d:	56                   	push   esi
c001496e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014971:	83 c4 20             	add    esp,0x20
c0014974:	85 c0                	test   eax,eax
c0014976:	0f 85 17 01 00 00    	jne    c0014a93 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001497c:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c0014982:	0f 85 0b 01 00 00    	jne    c0014a93 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0014988:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001498b:	85 c0                	test   eax,eax
c001498d:	0f 84 00 01 00 00    	je     c0014a93 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0014993:	31 d2                	xor    edx,edx
c0014995:	55                   	push   ebp
c0014996:	52                   	push   edx
c0014997:	50                   	push   eax
c0014998:	56                   	push   esi
c0014999:	e8 96 84 ff ff       	call   c000ce34 <File::seek(unsigned long long)>
c001499e:	83 c4 10             	add    esp,0x10
c00149a1:	85 c0                	test   eax,eax
c00149a3:	0f 85 ea 00 00 00    	jne    c0014a93 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00149a9:	83 ec 0c             	sub    esp,0xc
c00149ac:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00149af:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c00149b3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00149b7:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c00149bb:	0f af c2             	imul   eax,edx
c00149be:	50                   	push   eax
c00149bf:	e8 d3 4d ff ff       	call   c0009797 <malloc>
c00149c4:	8b 0e                	mov    ecx,DWORD PTR [esi]
c00149c6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00149ca:	89 3c 24             	mov    DWORD PTR [esp],edi
c00149cd:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00149d1:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c00149d5:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c00149d9:	0f af c2             	imul   eax,edx
c00149dc:	99                   	cdq    
c00149dd:	52                   	push   edx
c00149de:	50                   	push   eax
c00149df:	56                   	push   esi
c00149e0:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00149e3:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00149e6:	83 c4 20             	add    esp,0x20
c00149e9:	85 c0                	test   eax,eax
c00149eb:	0f 84 a2 00 00 00    	je     c0014a93 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00149f1:	31 d2                	xor    edx,edx
c00149f3:	51                   	push   ecx
c00149f4:	52                   	push   edx
c00149f5:	50                   	push   eax
c00149f6:	56                   	push   esi
c00149f7:	e8 38 84 ff ff       	call   c000ce34 <File::seek(unsigned long long)>
c00149fc:	83 c4 10             	add    esp,0x10
c00149ff:	85 c0                	test   eax,eax
c0014a01:	0f 85 8c 00 00 00    	jne    c0014a93 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0014a07:	83 ec 0c             	sub    esp,0xc
c0014a0a:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0014a0e:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0014a12:	31 ed                	xor    ebp,ebp
c0014a14:	0f af c2             	imul   eax,edx
c0014a17:	50                   	push   eax
c0014a18:	e8 7a 4d ff ff       	call   c0009797 <malloc>
c0014a1d:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0014a1f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014a23:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014a26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014a2a:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0014a2e:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0014a32:	0f af c2             	imul   eax,edx
c0014a35:	99                   	cdq    
c0014a36:	52                   	push   edx
c0014a37:	50                   	push   eax
c0014a38:	56                   	push   esi
c0014a39:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014a3c:	83 c4 20             	add    esp,0x20
c0014a3f:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014a47:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c0014a4b:	0f 86 80 00 00 00    	jbe    c0014ad1 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c0014a51:	0f b7 fd             	movzx  edi,bp
c0014a54:	c1 e7 05             	shl    edi,0x5
c0014a57:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c0014a5b:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c0014a5e:	75 6b                	jne    c0014acb <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c0014a60:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0014a63:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014a67:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0014a6a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014a6e:	52                   	push   edx
c0014a6f:	31 d2                	xor    edx,edx
c0014a71:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0014a74:	52                   	push   edx
c0014a75:	50                   	push   eax
c0014a76:	56                   	push   esi
c0014a77:	e8 b8 83 ff ff       	call   c000ce34 <File::seek(unsigned long long)>
c0014a7c:	83 c4 10             	add    esp,0x10
c0014a7f:	85 c0                	test   eax,eax
c0014a81:	74 17                	je     c0014a9a <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c0014a83:	83 ec 0c             	sub    esp,0xc
c0014a86:	68 45 43 02 c0       	push   0xc0024345
c0014a8b:	e8 a1 7c ff ff       	call   c000c731 <Dbg::kprintf(char const*, ...)>
c0014a90:	83 c4 10             	add    esp,0x10
c0014a93:	31 c0                	xor    eax,eax
c0014a95:	e9 87 00 00 00       	jmp    c0014b21 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c0014a9a:	83 ec 0c             	sub    esp,0xc
c0014a9d:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0014aa0:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c0014aa3:	50                   	push   eax
c0014aa4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0014aa8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014aac:	56                   	push   esi
c0014aad:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0014ab1:	e8 b3 fb ff ff       	call   c0014669 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c0014ab6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0014aba:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c0014abe:	83 c4 20             	add    esp,0x20
c0014ac1:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0014ac5:	73 04                	jae    c0014acb <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c0014ac7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014acb:	45                   	inc    ebp
c0014acc:	e9 76 ff ff ff       	jmp    c0014a47 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c0014ad1:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0014ad5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0014ad9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014add:	89 91 0e 05 00 00    	mov    DWORD PTR [ecx+0x50e],edx
c0014ae3:	83 ec 0c             	sub    esp,0xc
c0014ae6:	8b 91 12 05 00 00    	mov    edx,DWORD PTR [ecx+0x512]
c0014aec:	25 00 f0 ff ff       	and    eax,0xfffff000
c0014af1:	05 00 10 00 00       	add    eax,0x1000
c0014af6:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0014af9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014afd:	e8 a5 4c ff ff       	call   c00097a7 <free>
c0014b02:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014b05:	e8 9d 4c ff ff       	call   c00097a7 <free>
c0014b0a:	58                   	pop    eax
c0014b0b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014b0f:	e8 93 4c ff ff       	call   c00097a7 <free>
c0014b14:	89 34 24             	mov    DWORD PTR [esp],esi
c0014b17:	e8 b8 82 ff ff       	call   c000cdd4 <File::close()>
c0014b1c:	83 c4 10             	add    esp,0x10
c0014b1f:	b0 01                	mov    al,0x1
c0014b21:	83 c4 3c             	add    esp,0x3c
c0014b24:	5b                   	pop    ebx
c0014b25:	5e                   	pop    esi
c0014b26:	5f                   	pop    edi
c0014b27:	5d                   	pop    ebp
c0014b28:	c3                   	ret    

c0014b29 <Thr::runtimeReferenceHelper()>:
c0014b29:	83 ec 18             	sub    esp,0x18
c0014b2c:	68 4d 43 02 c0       	push   0xc002434d
c0014b31:	e8 fb 7b ff ff       	call   c000c731 <Dbg::kprintf(char const*, ...)>
c0014b36:	fa                   	cli    
c0014b37:	83 c4 10             	add    esp,0x10
c0014b3a:	eb fe                	jmp    c0014b3a <Thr::runtimeReferenceHelper()+0x11>

c0014b3c <Thr::getAddressOfKernelSymbol(char const*)>:
c0014b3c:	57                   	push   edi
c0014b3d:	56                   	push   esi
c0014b3e:	53                   	push   ebx
c0014b3f:	31 db                	xor    ebx,ebx
c0014b41:	39 1d e0 97 02 c0    	cmp    DWORD PTR ds:0xc00297e0,ebx
c0014b47:	7e 3c                	jle    c0014b85 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c0014b49:	8b 34 9d 60 97 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd68a0]
c0014b50:	31 ff                	xor    edi,edi
c0014b52:	39 3c 9d 60 96 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd69a0],edi
c0014b59:	7e 27                	jle    c0014b82 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c0014b5b:	50                   	push   eax
c0014b5c:	50                   	push   eax
c0014b5d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014b61:	8b 06                	mov    eax,DWORD PTR [esi]
c0014b63:	03 04 9d e0 96 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd6920]
c0014b6a:	50                   	push   eax
c0014b6b:	e8 80 ba fe ff       	call   c00005f0 <strcmp>
c0014b70:	83 c4 10             	add    esp,0x10
c0014b73:	85 c0                	test   eax,eax
c0014b75:	75 05                	jne    c0014b7c <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c0014b77:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0014b7a:	eb 0b                	jmp    c0014b87 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0014b7c:	83 c6 10             	add    esi,0x10
c0014b7f:	47                   	inc    edi
c0014b80:	eb d0                	jmp    c0014b52 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c0014b82:	43                   	inc    ebx
c0014b83:	eb bc                	jmp    c0014b41 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c0014b85:	31 c0                	xor    eax,eax
c0014b87:	5b                   	pop    ebx
c0014b88:	5e                   	pop    esi
c0014b89:	5f                   	pop    edi
c0014b8a:	c3                   	ret    

c0014b8b <Thr::loadKernelSymbolTable(char const*)>:
c0014b8b:	55                   	push   ebp
c0014b8c:	57                   	push   edi
c0014b8d:	56                   	push   esi
c0014b8e:	53                   	push   ebx
c0014b8f:	83 ec 68             	sub    esp,0x68
c0014b92:	8b 35 30 98 02 c0    	mov    esi,DWORD PTR ds:0xc0029830
c0014b98:	68 14 01 00 00       	push   0x114
c0014b9d:	e8 f5 4b ff ff       	call   c0009797 <malloc>
c0014ba2:	83 c4 0c             	add    esp,0xc
c0014ba5:	89 c3                	mov    ebx,eax
c0014ba7:	56                   	push   esi
c0014ba8:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0014bac:	50                   	push   eax
c0014bad:	e8 ea 80 ff ff       	call   c000cc9c <File::File(char const*, Process*)>
c0014bb2:	5e                   	pop    esi
c0014bb3:	5f                   	pop    edi
c0014bb4:	6a 01                	push   0x1
c0014bb6:	53                   	push   ebx
c0014bb7:	e8 ba 81 ff ff       	call   c000cd76 <File::open(FileOpenMode)>
c0014bbc:	83 c4 10             	add    esp,0x10
c0014bbf:	85 c0                	test   eax,eax
c0014bc1:	74 0a                	je     c0014bcd <Thr::loadKernelSymbolTable(char const*)+0x42>
c0014bc3:	83 ec 0c             	sub    esp,0xc
c0014bc6:	68 6f 43 02 c0       	push   0xc002436f
c0014bcb:	eb 34                	jmp    c0014c01 <Thr::loadKernelSymbolTable(char const*)+0x76>
c0014bcd:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0014bd5:	83 ec 0c             	sub    esp,0xc
c0014bd8:	6a 34                	push   0x34
c0014bda:	e8 b8 4b ff ff       	call   c0009797 <malloc>
c0014bdf:	59                   	pop    ecx
c0014be0:	89 c7                	mov    edi,eax
c0014be2:	8d 74 24 34          	lea    esi,[esp+0x34]
c0014be6:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014be8:	56                   	push   esi
c0014be9:	57                   	push   edi
c0014bea:	6a 00                	push   0x0
c0014bec:	6a 34                	push   0x34
c0014bee:	53                   	push   ebx
c0014bef:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014bf2:	83 c4 20             	add    esp,0x20
c0014bf5:	85 c0                	test   eax,eax
c0014bf7:	74 17                	je     c0014c10 <Thr::loadKernelSymbolTable(char const*)+0x85>
c0014bf9:	83 ec 0c             	sub    esp,0xc
c0014bfc:	68 86 43 02 c0       	push   0xc0024386
c0014c01:	e8 95 de ff ff       	call   c0012a9b <Krnl::panic(char const*)>
c0014c06:	83 c4 10             	add    esp,0x10
c0014c09:	31 c0                	xor    eax,eax
c0014c0b:	e9 31 02 00 00       	jmp    c0014e41 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c0014c10:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0014c16:	75 e1                	jne    c0014bf9 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0014c18:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0014c1b:	85 c0                	test   eax,eax
c0014c1d:	74 da                	je     c0014bf9 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0014c1f:	52                   	push   edx
c0014c20:	31 d2                	xor    edx,edx
c0014c22:	52                   	push   edx
c0014c23:	50                   	push   eax
c0014c24:	53                   	push   ebx
c0014c25:	e8 0a 82 ff ff       	call   c000ce34 <File::seek(unsigned long long)>
c0014c2a:	83 c4 10             	add    esp,0x10
c0014c2d:	85 c0                	test   eax,eax
c0014c2f:	75 c8                	jne    c0014bf9 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0014c31:	83 ec 0c             	sub    esp,0xc
c0014c34:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0014c38:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014c3c:	31 ed                	xor    ebp,ebp
c0014c3e:	0f af c2             	imul   eax,edx
c0014c41:	50                   	push   eax
c0014c42:	e8 50 4b ff ff       	call   c0009797 <malloc>
c0014c47:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014c49:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014c4d:	89 34 24             	mov    DWORD PTR [esp],esi
c0014c50:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014c54:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0014c58:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014c5c:	0f af c2             	imul   eax,edx
c0014c5f:	99                   	cdq    
c0014c60:	52                   	push   edx
c0014c61:	50                   	push   eax
c0014c62:	53                   	push   ebx
c0014c63:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014c66:	83 c4 20             	add    esp,0x20
c0014c69:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0014c71:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0014c79:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0014c81:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014c89:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c0014c8d:	0f 86 aa 00 00 00    	jbe    c0014d3d <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c0014c93:	0f b7 f5             	movzx  esi,bp
c0014c96:	6b f6 28             	imul   esi,esi,0x28
c0014c99:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0014c9d:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0014ca0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014ca4:	50                   	push   eax
c0014ca5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014ca9:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0014cad:	8b 16                	mov    edx,DWORD PTR [esi]
c0014caf:	6b c0 28             	imul   eax,eax,0x28
c0014cb2:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c0014cb6:	89 d0                	mov    eax,edx
c0014cb8:	31 d2                	xor    edx,edx
c0014cba:	52                   	push   edx
c0014cbb:	50                   	push   eax
c0014cbc:	53                   	push   ebx
c0014cbd:	e8 72 81 ff ff       	call   c000ce34 <File::seek(unsigned long long)>
c0014cc2:	83 c4 0c             	add    esp,0xc
c0014cc5:	6a 20                	push   0x20
c0014cc7:	6a 00                	push   0x0
c0014cc9:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0014ccd:	52                   	push   edx
c0014cce:	e8 d5 b7 fe ff       	call   c00004a8 <memset>
c0014cd3:	58                   	pop    eax
c0014cd4:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014cd6:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0014cda:	51                   	push   ecx
c0014cdb:	8d 54 24 40          	lea    edx,[esp+0x40]
c0014cdf:	52                   	push   edx
c0014ce0:	6a 00                	push   0x0
c0014ce2:	6a 1f                	push   0x1f
c0014ce4:	53                   	push   ebx
c0014ce5:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014ce8:	83 c4 18             	add    esp,0x18
c0014ceb:	68 9d 43 02 c0       	push   0xc002439d
c0014cf0:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0014cf4:	52                   	push   edx
c0014cf5:	e8 f6 b8 fe ff       	call   c00005f0 <strcmp>
c0014cfa:	83 c4 10             	add    esp,0x10
c0014cfd:	85 c0                	test   eax,eax
c0014cff:	75 0f                	jne    c0014d10 <Thr::loadKernelSymbolTable(char const*)+0x185>
c0014d01:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014d04:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014d08:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014d0c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014d10:	50                   	push   eax
c0014d11:	50                   	push   eax
c0014d12:	68 a5 43 02 c0       	push   0xc00243a5
c0014d17:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0014d1b:	50                   	push   eax
c0014d1c:	e8 cf b8 fe ff       	call   c00005f0 <strcmp>
c0014d21:	83 c4 10             	add    esp,0x10
c0014d24:	85 c0                	test   eax,eax
c0014d26:	75 0f                	jne    c0014d37 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c0014d28:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014d2b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014d2f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014d33:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014d37:	45                   	inc    ebp
c0014d38:	e9 4c ff ff ff       	jmp    c0014c89 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c0014d3d:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0014d42:	75 10                	jne    c0014d54 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c0014d44:	83 ec 0c             	sub    esp,0xc
c0014d47:	68 ad 43 02 c0       	push   0xc00243ad
c0014d4c:	e8 4a dd ff ff       	call   c0012a9b <Krnl::panic(char const*)>
c0014d51:	83 c4 10             	add    esp,0x10
c0014d54:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0014d59:	75 10                	jne    c0014d6b <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c0014d5b:	83 ec 0c             	sub    esp,0xc
c0014d5e:	68 ad 43 02 c0       	push   0xc00243ad
c0014d63:	e8 33 dd ff ff       	call   c0012a9b <Krnl::panic(char const*)>
c0014d68:	83 c4 10             	add    esp,0x10
c0014d6b:	31 d2                	xor    edx,edx
c0014d6d:	50                   	push   eax
c0014d6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014d72:	52                   	push   edx
c0014d73:	50                   	push   eax
c0014d74:	53                   	push   ebx
c0014d75:	e8 ba 80 ff ff       	call   c000ce34 <File::seek(unsigned long long)>
c0014d7a:	5a                   	pop    edx
c0014d7b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014d7f:	e8 13 4a ff ff       	call   c0009797 <malloc>
c0014d84:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0014d88:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014d8c:	31 c9                	xor    ecx,ecx
c0014d8e:	5e                   	pop    esi
c0014d8f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014d91:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c0014d95:	55                   	push   ebp
c0014d96:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014d9a:	51                   	push   ecx
c0014d9b:	52                   	push   edx
c0014d9c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0014da0:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0014da4:	53                   	push   ebx
c0014da5:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014da8:	83 c4 14             	add    esp,0x14
c0014dab:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014daf:	e8 e3 49 ff ff       	call   c0009797 <malloc>
c0014db4:	89 c6                	mov    esi,eax
c0014db6:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014db8:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014dbb:	56                   	push   esi
c0014dbc:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0014dc0:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0014dc4:	51                   	push   ecx
c0014dc5:	52                   	push   edx
c0014dc6:	53                   	push   ebx
c0014dc7:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014dca:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014dce:	8b 15 e0 97 02 c0    	mov    edx,DWORD PTR ds:0xc00297e0
c0014dd4:	83 c4 1c             	add    esp,0x1c
c0014dd7:	c1 e8 04             	shr    eax,0x4
c0014dda:	89 04 95 60 96 02 c0 	mov    DWORD PTR [edx*4-0x3ffd69a0],eax
c0014de1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014de5:	31 d2                	xor    edx,edx
c0014de7:	52                   	push   edx
c0014de8:	50                   	push   eax
c0014de9:	53                   	push   ebx
c0014dea:	e8 45 80 ff ff       	call   c000ce34 <File::seek(unsigned long long)>
c0014def:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014df1:	31 d2                	xor    edx,edx
c0014df3:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014df6:	56                   	push   esi
c0014df7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014dfb:	52                   	push   edx
c0014dfc:	50                   	push   eax
c0014dfd:	53                   	push   ebx
c0014dfe:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014e01:	83 c4 14             	add    esp,0x14
c0014e04:	53                   	push   ebx
c0014e05:	e8 ca 7f ff ff       	call   c000cdd4 <File::close()>
c0014e0a:	5d                   	pop    ebp
c0014e0b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014e0f:	e8 93 49 ff ff       	call   c00097a7 <free>
c0014e14:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014e17:	e8 8b 49 ff ff       	call   c00097a7 <free>
c0014e1c:	a1 e0 97 02 c0       	mov    eax,ds:0xc00297e0
c0014e21:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0014e25:	8d 50 01             	lea    edx,[eax+0x1]
c0014e28:	89 0c 85 60 97 02 c0 	mov    DWORD PTR [eax*4-0x3ffd68a0],ecx
c0014e2f:	89 34 85 e0 96 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6920],esi
c0014e36:	89 15 e0 97 02 c0    	mov    DWORD PTR ds:0xc00297e0,edx
c0014e3c:	83 c4 10             	add    esp,0x10
c0014e3f:	b0 01                	mov    al,0x1
c0014e41:	83 c4 5c             	add    esp,0x5c
c0014e44:	5b                   	pop    ebx
c0014e45:	5e                   	pop    esi
c0014e46:	5f                   	pop    edi
c0014e47:	5d                   	pop    ebp
c0014e48:	c3                   	ret    

c0014e49 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c0014e49:	55                   	push   ebp
c0014e4a:	57                   	push   edi
c0014e4b:	56                   	push   esi
c0014e4c:	53                   	push   ebx
c0014e4d:	81 ec 68 03 00 00    	sub    esp,0x368
c0014e53:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c0014e5a:	8b 1d 30 98 02 c0    	mov    ebx,DWORD PTR ds:0xc0029830
c0014e60:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0014e64:	68 14 01 00 00       	push   0x114
c0014e69:	e8 29 49 ff ff       	call   c0009797 <malloc>
c0014e6e:	83 c4 0c             	add    esp,0xc
c0014e71:	89 c5                	mov    ebp,eax
c0014e73:	53                   	push   ebx
c0014e74:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c0014e7b:	50                   	push   eax
c0014e7c:	e8 1b 7e ff ff       	call   c000cc9c <File::File(char const*, Process*)>
c0014e81:	5e                   	pop    esi
c0014e82:	5f                   	pop    edi
c0014e83:	6a 01                	push   0x1
c0014e85:	55                   	push   ebp
c0014e86:	e8 eb 7e ff ff       	call   c000cd76 <File::open(FileOpenMode)>
c0014e8b:	83 c4 10             	add    esp,0x10
c0014e8e:	85 c0                	test   eax,eax
c0014e90:	0f 85 a7 06 00 00    	jne    c001553d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0014e96:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0014e9e:	83 ec 0c             	sub    esp,0xc
c0014ea1:	6a 34                	push   0x34
c0014ea3:	e8 ef 48 ff ff       	call   c0009797 <malloc>
c0014ea8:	5b                   	pop    ebx
c0014ea9:	89 c7                	mov    edi,eax
c0014eab:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0014eaf:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0014eb2:	53                   	push   ebx
c0014eb3:	57                   	push   edi
c0014eb4:	6a 00                	push   0x0
c0014eb6:	6a 34                	push   0x34
c0014eb8:	55                   	push   ebp
c0014eb9:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014ebc:	83 c4 20             	add    esp,0x20
c0014ebf:	85 c0                	test   eax,eax
c0014ec1:	0f 85 76 06 00 00    	jne    c001553d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0014ec7:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0014ecd:	0f 85 6a 06 00 00    	jne    c001553d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0014ed3:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0014ed6:	85 c0                	test   eax,eax
c0014ed8:	0f 84 5f 06 00 00    	je     c001553d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0014ede:	31 d2                	xor    edx,edx
c0014ee0:	51                   	push   ecx
c0014ee1:	52                   	push   edx
c0014ee2:	50                   	push   eax
c0014ee3:	55                   	push   ebp
c0014ee4:	e8 4b 7f ff ff       	call   c000ce34 <File::seek(unsigned long long)>
c0014ee9:	83 c4 10             	add    esp,0x10
c0014eec:	85 c0                	test   eax,eax
c0014eee:	0f 85 49 06 00 00    	jne    c001553d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0014ef4:	83 ec 0c             	sub    esp,0xc
c0014ef7:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c0014efa:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0014efe:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0014f02:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014f06:	0f af c2             	imul   eax,edx
c0014f09:	50                   	push   eax
c0014f0a:	e8 88 48 ff ff       	call   c0009797 <malloc>
c0014f0f:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0014f12:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014f16:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014f19:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014f1d:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0014f21:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014f25:	0f af c2             	imul   eax,edx
c0014f28:	99                   	cdq    
c0014f29:	52                   	push   edx
c0014f2a:	50                   	push   eax
c0014f2b:	55                   	push   ebp
c0014f2c:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014f2f:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c0014f32:	83 c4 20             	add    esp,0x20
c0014f35:	85 c0                	test   eax,eax
c0014f37:	0f 84 00 06 00 00    	je     c001553d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0014f3d:	52                   	push   edx
c0014f3e:	31 d2                	xor    edx,edx
c0014f40:	52                   	push   edx
c0014f41:	50                   	push   eax
c0014f42:	55                   	push   ebp
c0014f43:	e8 ec 7e ff ff       	call   c000ce34 <File::seek(unsigned long long)>
c0014f48:	83 c4 10             	add    esp,0x10
c0014f4b:	85 c0                	test   eax,eax
c0014f4d:	0f 85 ea 05 00 00    	jne    c001553d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0014f53:	83 ec 0c             	sub    esp,0xc
c0014f56:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0014f5a:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0014f5e:	31 f6                	xor    esi,esi
c0014f60:	0f af c2             	imul   eax,edx
c0014f63:	50                   	push   eax
c0014f64:	e8 2e 48 ff ff       	call   c0009797 <malloc>
c0014f69:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0014f6c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0014f70:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014f73:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014f77:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0014f7b:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0014f7f:	0f af c2             	imul   eax,edx
c0014f82:	99                   	cdq    
c0014f83:	52                   	push   edx
c0014f84:	50                   	push   eax
c0014f85:	55                   	push   ebp
c0014f86:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014f89:	83 c4 20             	add    esp,0x20
c0014f8c:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c0014f90:	0f 86 8a 00 00 00    	jbe    c0015020 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c0014f96:	0f b7 de             	movzx  ebx,si
c0014f99:	c1 e3 05             	shl    ebx,0x5
c0014f9c:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c0014fa0:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c0014fa3:	75 75                	jne    c001501a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c0014fa5:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0014fa8:	31 d2                	xor    edx,edx
c0014faa:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014fae:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0014fb1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014fb5:	50                   	push   eax
c0014fb6:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0014fb9:	52                   	push   edx
c0014fba:	50                   	push   eax
c0014fbb:	55                   	push   ebp
c0014fbc:	e8 73 7e ff ff       	call   c000ce34 <File::seek(unsigned long long)>
c0014fc1:	83 c4 10             	add    esp,0x10
c0014fc4:	85 c0                	test   eax,eax
c0014fc6:	0f 85 71 05 00 00    	jne    c001553d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0014fcc:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0014fd3:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0014fd6:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0014fda:	31 d2                	xor    edx,edx
c0014fdc:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0014fe0:	83 ec 0c             	sub    esp,0xc
c0014fe3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014fe7:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014fee:	50                   	push   eax
c0014fef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014ff3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014ff7:	52                   	push   edx
c0014ff8:	50                   	push   eax
c0014ff9:	55                   	push   ebp
c0014ffa:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014ffd:	83 c4 1c             	add    esp,0x1c
c0015000:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0015003:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c0015006:	50                   	push   eax
c0015007:	6a 00                	push   0x0
c0015009:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001500d:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0015011:	50                   	push   eax
c0015012:	e8 91 b4 fe ff       	call   c00004a8 <memset>
c0015017:	83 c4 10             	add    esp,0x10
c001501a:	46                   	inc    esi
c001501b:	e9 6c ff ff ff       	jmp    c0014f8c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c0015020:	53                   	push   ebx
c0015021:	31 db                	xor    ebx,ebx
c0015023:	68 00 01 00 00       	push   0x100
c0015028:	6a 00                	push   0x0
c001502a:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001502e:	50                   	push   eax
c001502f:	e8 74 b4 fe ff       	call   c00004a8 <memset>
c0015034:	83 c4 0c             	add    esp,0xc
c0015037:	68 00 01 00 00       	push   0x100
c001503c:	6a 00                	push   0x0
c001503e:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c0015045:	50                   	push   eax
c0015046:	e8 5d b4 fe ff       	call   c00004a8 <memset>
c001504b:	83 c4 10             	add    esp,0x10
c001504e:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0015056:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001505e:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0015066:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001506e:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0015076:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c001507a:	0f 86 30 01 00 00    	jbe    c00151b0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c0015080:	0f b7 f3             	movzx  esi,bx
c0015083:	6b f6 28             	imul   esi,esi,0x28
c0015086:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001508a:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001508d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015091:	52                   	push   edx
c0015092:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015096:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c001509a:	8b 06                	mov    eax,DWORD PTR [esi]
c001509c:	6b d2 28             	imul   edx,edx,0x28
c001509f:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c00150a3:	31 d2                	xor    edx,edx
c00150a5:	52                   	push   edx
c00150a6:	50                   	push   eax
c00150a7:	55                   	push   ebp
c00150a8:	e8 87 7d ff ff       	call   c000ce34 <File::seek(unsigned long long)>
c00150ad:	83 c4 0c             	add    esp,0xc
c00150b0:	6a 20                	push   0x20
c00150b2:	6a 00                	push   0x0
c00150b4:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c00150bb:	51                   	push   ecx
c00150bc:	e8 e7 b3 fe ff       	call   c00004a8 <memset>
c00150c1:	59                   	pop    ecx
c00150c2:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00150c5:	8d 54 24 58          	lea    edx,[esp+0x58]
c00150c9:	52                   	push   edx
c00150ca:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c00150d1:	51                   	push   ecx
c00150d2:	6a 00                	push   0x0
c00150d4:	6a 1f                	push   0x1f
c00150d6:	55                   	push   ebp
c00150d7:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00150da:	83 c4 1c             	add    esp,0x1c
c00150dd:	6a 09                	push   0x9
c00150df:	68 c7 43 02 c0       	push   0xc00243c7
c00150e4:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c00150eb:	51                   	push   ecx
c00150ec:	e8 b3 b2 fe ff       	call   c00003a4 <memcmp>
c00150f1:	83 c4 10             	add    esp,0x10
c00150f4:	85 c0                	test   eax,eax
c00150f6:	75 21                	jne    c0015119 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c00150f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00150fc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015100:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0015104:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015108:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001510b:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0015112:	89 d0                	mov    eax,edx
c0015114:	40                   	inc    eax
c0015115:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015119:	50                   	push   eax
c001511a:	6a 09                	push   0x9
c001511c:	68 d1 43 02 c0       	push   0xc00243d1
c0015121:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0015128:	50                   	push   eax
c0015129:	e8 76 b2 fe ff       	call   c00003a4 <memcmp>
c001512e:	83 c4 10             	add    esp,0x10
c0015131:	85 c0                	test   eax,eax
c0015133:	75 21                	jne    c0015156 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c0015135:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015139:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001513d:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0015141:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015145:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0015148:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001514f:	89 d0                	mov    eax,edx
c0015151:	40                   	inc    eax
c0015152:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015156:	50                   	push   eax
c0015157:	50                   	push   eax
c0015158:	68 9d 43 02 c0       	push   0xc002439d
c001515d:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0015164:	50                   	push   eax
c0015165:	e8 86 b4 fe ff       	call   c00005f0 <strcmp>
c001516a:	83 c4 10             	add    esp,0x10
c001516d:	85 c0                	test   eax,eax
c001516f:	75 0f                	jne    c0015180 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c0015171:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0015174:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0015178:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001517c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0015180:	50                   	push   eax
c0015181:	50                   	push   eax
c0015182:	68 a5 43 02 c0       	push   0xc00243a5
c0015187:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001518e:	50                   	push   eax
c001518f:	e8 5c b4 fe ff       	call   c00005f0 <strcmp>
c0015194:	83 c4 10             	add    esp,0x10
c0015197:	85 c0                	test   eax,eax
c0015199:	75 0f                	jne    c00151aa <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c001519b:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001519e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00151a2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00151a6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00151aa:	43                   	inc    ebx
c00151ab:	e9 c6 fe ff ff       	jmp    c0015076 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c00151b0:	31 d2                	xor    edx,edx
c00151b2:	50                   	push   eax
c00151b3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00151b7:	52                   	push   edx
c00151b8:	50                   	push   eax
c00151b9:	55                   	push   ebp
c00151ba:	e8 75 7c ff ff       	call   c000ce34 <File::seek(unsigned long long)>
c00151bf:	58                   	pop    eax
c00151c0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00151c4:	e8 ce 45 ff ff       	call   c0009797 <malloc>
c00151c9:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00151cc:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00151d0:	31 d2                	xor    edx,edx
c00151d2:	58                   	pop    eax
c00151d3:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c00151d7:	53                   	push   ebx
c00151d8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00151dc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00151e0:	52                   	push   edx
c00151e1:	50                   	push   eax
c00151e2:	55                   	push   ebp
c00151e3:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00151e6:	83 c4 14             	add    esp,0x14
c00151e9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00151ed:	e8 a5 45 ff ff       	call   c0009797 <malloc>
c00151f2:	31 d2                	xor    edx,edx
c00151f4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00151f8:	83 c4 0c             	add    esp,0xc
c00151fb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00151ff:	52                   	push   edx
c0015200:	50                   	push   eax
c0015201:	55                   	push   ebp
c0015202:	e8 2d 7c ff ff       	call   c000ce34 <File::seek(unsigned long long)>
c0015207:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001520a:	31 d2                	xor    edx,edx
c001520c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001520f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0015213:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0015217:	52                   	push   edx
c0015218:	50                   	push   eax
c0015219:	55                   	push   ebp
c001521a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001521d:	83 c4 20             	add    esp,0x20
c0015220:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0015228:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001522c:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c0015230:	0f 84 0b 03 00 00    	je     c0015541 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f8>
c0015236:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c001523d:	31 d2                	xor    edx,edx
c001523f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015243:	c1 e8 03             	shr    eax,0x3
c0015246:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001524a:	51                   	push   ecx
c001524b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001524f:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c0015253:	52                   	push   edx
c0015254:	50                   	push   eax
c0015255:	55                   	push   ebp
c0015256:	e8 d9 7b ff ff       	call   c000ce34 <File::seek(unsigned long long)>
c001525b:	5b                   	pop    ebx
c001525c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015260:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c0015267:	e8 2b 45 ff ff       	call   c0009797 <malloc>
c001526c:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001526f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0015273:	31 d2                	xor    edx,edx
c0015275:	5e                   	pop    esi
c0015276:	8d 44 24 58          	lea    eax,[esp+0x58]
c001527a:	50                   	push   eax
c001527b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001527f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0015283:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001528a:	52                   	push   edx
c001528b:	50                   	push   eax
c001528c:	55                   	push   ebp
c001528d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015290:	83 c4 20             	add    esp,0x20
c0015293:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001529b:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001529f:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c00152a3:	0f 8d 7c 02 00 00    	jge    c0015525 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6dc>
c00152a9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00152ad:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00152b1:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c00152b6:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c00152b9:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00152bd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00152c1:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c00152c5:	89 d8                	mov    eax,ebx
c00152c7:	c1 e8 08             	shr    eax,0x8
c00152ca:	89 c6                	mov    esi,eax
c00152cc:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00152d0:	c1 e6 04             	shl    esi,0x4
c00152d3:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c00152d7:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c00152da:	85 d2                	test   edx,edx
c00152dc:	0f 85 bf 00 00 00    	jne    c00153a1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c00152e2:	83 ec 0c             	sub    esp,0xc
c00152e5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00152e9:	03 06                	add    eax,DWORD PTR [esi]
c00152eb:	50                   	push   eax
c00152ec:	e8 4b f8 ff ff       	call   c0014b3c <Thr::getAddressOfKernelSymbol(char const*)>
c00152f1:	83 c4 10             	add    esp,0x10
c00152f4:	89 c2                	mov    edx,eax
c00152f6:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c00152fb:	85 c0                	test   eax,eax
c00152fd:	0f 85 9e 00 00 00    	jne    c00153a1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0015303:	83 ec 0c             	sub    esp,0xc
c0015306:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001530a:	03 06                	add    eax,DWORD PTR [esi]
c001530c:	50                   	push   eax
c001530d:	e8 22 34 ff ff       	call   c0008734 <Krnl::resolveCompatibilitySymbol(char*)>
c0015312:	83 c4 10             	add    esp,0x10
c0015315:	89 c2                	mov    edx,eax
c0015317:	85 c0                	test   eax,eax
c0015319:	0f 85 82 00 00 00    	jne    c00153a1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001531f:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0015323:	50                   	push   eax
c0015324:	50                   	push   eax
c0015325:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015329:	03 06                	add    eax,DWORD PTR [esi]
c001532b:	50                   	push   eax
c001532c:	68 db 43 02 c0       	push   0xc00243db
c0015331:	e8 fb 73 ff ff       	call   c000c731 <Dbg::kprintf(char const*, ...)>
c0015336:	58                   	pop    eax
c0015337:	5a                   	pop    edx
c0015338:	68 f5 43 02 c0       	push   0xc00243f5
c001533d:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0015344:	50                   	push   eax
c0015345:	e8 1a b2 fe ff       	call   c0000564 <strcpy>
c001534a:	59                   	pop    ecx
c001534b:	58                   	pop    eax
c001534c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015350:	03 06                	add    eax,DWORD PTR [esi]
c0015352:	50                   	push   eax
c0015353:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001535a:	50                   	push   eax
c001535b:	e8 44 b3 fe ff       	call   c00006a4 <strcat>
c0015360:	58                   	pop    eax
c0015361:	5a                   	pop    edx
c0015362:	68 8b 44 02 c0       	push   0xc002448b
c0015367:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001536e:	50                   	push   eax
c001536f:	e8 30 b3 fe ff       	call   c00006a4 <strcat>
c0015374:	83 c4 10             	add    esp,0x10
c0015377:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001537c:	0f 84 5d 01 00 00    	je     c00154df <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0015382:	83 ec 0c             	sub    esp,0xc
c0015385:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001538c:	50                   	push   eax
c001538d:	e8 09 d7 ff ff       	call   c0012a9b <Krnl::panic(char const*)>
c0015392:	83 c4 10             	add    esp,0x10
c0015395:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0015399:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001539d:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c00153a1:	80 fb 01             	cmp    bl,0x1
c00153a4:	0f 85 88 00 00 00    	jne    c0015432 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e9>
c00153aa:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c00153b1:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00153b5:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c00153b9:	01 ce                	add    esi,ecx
c00153bb:	81 fb 01 04 00 00    	cmp    ebx,0x401
c00153c1:	0f 94 c0             	sete   al
c00153c4:	81 fb 01 01 00 00    	cmp    ebx,0x101
c00153ca:	0f 94 c3             	sete   bl
c00153cd:	09 c3                	or     ebx,eax
c00153cf:	8b 06                	mov    eax,DWORD PTR [esi]
c00153d1:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c00153d6:	74 41                	je     c0015419 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d0>
c00153d8:	8d 0c 02             	lea    ecx,[edx+eax*1]
c00153db:	84 db                	test   bl,bl
c00153dd:	75 15                	jne    c00153f4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ab>
c00153df:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00153e3:	66 83 f8 0c          	cmp    ax,0xc
c00153e7:	76 05                	jbe    c00153ee <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a5>
c00153e9:	b8 0c 00 00 00       	mov    eax,0xc
c00153ee:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c00153f2:	76 37                	jbe    c001542b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c00153f4:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c00153f8:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c00153fd:	0f 84 dc 00 00 00    	je     c00154df <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0015403:	83 ec 0c             	sub    esp,0xc
c0015406:	68 0c 44 02 c0       	push   0xc002440c
c001540b:	e8 8b d6 ff ff       	call   c0012a9b <Krnl::panic(char const*)>
c0015410:	83 c4 10             	add    esp,0x10
c0015413:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0015417:	eb 12                	jmp    c001542b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0015419:	01 c1                	add    ecx,eax
c001541b:	84 db                	test   bl,bl
c001541d:	75 0c                	jne    c001542b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001541f:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0015423:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c0015427:	77 02                	ja     c001542b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0015429:	01 d1                	add    ecx,edx
c001542b:	89 0e                	mov    DWORD PTR [esi],ecx
c001542d:	e9 ea 00 00 00       	jmp    c001551c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0015432:	80 fb 02             	cmp    bl,0x2
c0015435:	75 7c                	jne    c00154b3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c0015437:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c001543e:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c0015442:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c0015446:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001544c:	74 20                	je     c001546e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c001544e:	81 fb 01 01 00 00    	cmp    ebx,0x101
c0015454:	74 18                	je     c001546e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c0015456:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001545a:	b9 0a 00 00 00       	mov    ecx,0xa
c001545f:	66 83 f8 0e          	cmp    ax,0xe
c0015463:	77 03                	ja     c0015468 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x61f>
c0015465:	8d 48 fc             	lea    ecx,[eax-0x4]
c0015468:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
c001546c:	76 1f                	jbe    c001548d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x644>
c001546e:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0015472:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0015477:	74 66                	je     c00154df <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0015479:	83 ec 0c             	sub    esp,0xc
c001547c:	68 28 44 02 c0       	push   0xc0024428
c0015481:	e8 15 d6 ff ff       	call   c0012a9b <Krnl::panic(char const*)>
c0015486:	83 c4 10             	add    esp,0x10
c0015489:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001548d:	8b 06                	mov    eax,DWORD PTR [esi]
c001548f:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c0015494:	74 13                	je     c00154a9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x660>
c0015496:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001549a:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c00154a1:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c00154a5:	01 c8                	add    eax,ecx
c00154a7:	eb 04                	jmp    c00154ad <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x664>
c00154a9:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c00154ad:	01 c2                	add    edx,eax
c00154af:	89 16                	mov    DWORD PTR [esi],edx
c00154b1:	eb 69                	jmp    c001551c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c00154b3:	0f b6 db             	movzx  ebx,bl
c00154b6:	50                   	push   eax
c00154b7:	50                   	push   eax
c00154b8:	53                   	push   ebx
c00154b9:	68 44 44 02 c0       	push   0xc0024444
c00154be:	e8 6e 72 ff ff       	call   c000c731 <Dbg::kprintf(char const*, ...)>
c00154c3:	83 c4 10             	add    esp,0x10
c00154c6:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c00154cb:	74 12                	je     c00154df <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c00154cd:	83 ec 0c             	sub    esp,0xc
c00154d0:	68 4f 44 02 c0       	push   0xc002444f
c00154d5:	e8 c1 d5 ff ff       	call   c0012a9b <Krnl::panic(char const*)>
c00154da:	83 c4 10             	add    esp,0x10
c00154dd:	eb 3d                	jmp    c001551c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c00154df:	83 ec 0c             	sub    esp,0xc
c00154e2:	55                   	push   ebp
c00154e3:	e8 ec 78 ff ff       	call   c000cdd4 <File::close()>
c00154e8:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00154eb:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00154ee:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00154f1:	59                   	pop    ecx
c00154f2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00154f6:	e8 ac 42 ff ff       	call   c00097a7 <free>
c00154fb:	5b                   	pop    ebx
c00154fc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015500:	e8 a2 42 ff ff       	call   c00097a7 <free>
c0015505:	89 3c 24             	mov    DWORD PTR [esp],edi
c0015508:	e8 9a 42 ff ff       	call   c00097a7 <free>
c001550d:	5e                   	pop    esi
c001550e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015512:	e8 90 42 ff ff       	call   c00097a7 <free>
c0015517:	83 c4 10             	add    esp,0x10
c001551a:	eb 21                	jmp    c001553d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001551c:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c0015520:	e9 76 fd ff ff       	jmp    c001529b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c0015525:	83 ec 0c             	sub    esp,0xc
c0015528:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001552c:	e8 76 42 ff ff       	call   c00097a7 <free>
c0015531:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c0015535:	83 c4 10             	add    esp,0x10
c0015538:	e9 eb fc ff ff       	jmp    c0015228 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c001553d:	31 c0                	xor    eax,eax
c001553f:	eb 33                	jmp    c0015574 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72b>
c0015541:	83 ec 0c             	sub    esp,0xc
c0015544:	55                   	push   ebp
c0015545:	e8 8a 78 ff ff       	call   c000cdd4 <File::close()>
c001554a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001554d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0015550:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015553:	58                   	pop    eax
c0015554:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015558:	e8 4a 42 ff ff       	call   c00097a7 <free>
c001555d:	89 3c 24             	mov    DWORD PTR [esp],edi
c0015560:	e8 42 42 ff ff       	call   c00097a7 <free>
c0015565:	5a                   	pop    edx
c0015566:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001556a:	e8 38 42 ff ff       	call   c00097a7 <free>
c001556f:	83 c4 10             	add    esp,0x10
c0015572:	b0 01                	mov    al,0x1
c0015574:	81 c4 5c 03 00 00    	add    esp,0x35c
c001557a:	5b                   	pop    ebx
c001557b:	5e                   	pop    esi
c001557c:	5f                   	pop    edi
c001557d:	5d                   	pop    ebp
c001557e:	c3                   	ret    

c001557f <Thr::getDriverBaseFromAddress(unsigned long)>:
c001557f:	56                   	push   esi
c0015580:	31 d2                	xor    edx,edx
c0015582:	53                   	push   ebx
c0015583:	8b 1d 40 90 02 c0    	mov    ebx,DWORD PTR ds:0xc0029040
c0015589:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001558d:	39 d3                	cmp    ebx,edx
c001558f:	7e 1b                	jle    c00155ac <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c0015591:	8b 04 95 60 92 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd6da0]
c0015598:	39 c8                	cmp    eax,ecx
c001559a:	77 0d                	ja     c00155a9 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001559c:	8b 34 95 60 90 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd6fa0]
c00155a3:	01 c6                	add    esi,eax
c00155a5:	39 ce                	cmp    esi,ecx
c00155a7:	77 05                	ja     c00155ae <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c00155a9:	42                   	inc    edx
c00155aa:	eb e1                	jmp    c001558d <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c00155ac:	31 c0                	xor    eax,eax
c00155ae:	5b                   	pop    ebx
c00155af:	5e                   	pop    esi
c00155b0:	c3                   	ret    

c00155b1 <Thr::getDriverNameFromAddress(unsigned long)>:
c00155b1:	53                   	push   ebx
c00155b2:	31 c0                	xor    eax,eax
c00155b4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00155b8:	8b 1d 40 90 02 c0    	mov    ebx,DWORD PTR ds:0xc0029040
c00155be:	39 c3                	cmp    ebx,eax
c00155c0:	7e 22                	jle    c00155e4 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c00155c2:	8b 14 85 60 92 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd6da0]
c00155c9:	39 ca                	cmp    edx,ecx
c00155cb:	77 14                	ja     c00155e1 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c00155cd:	03 14 85 60 90 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd6fa0]
c00155d4:	39 ca                	cmp    edx,ecx
c00155d6:	76 09                	jbe    c00155e1 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c00155d8:	8b 04 85 60 94 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6ba0]
c00155df:	eb 05                	jmp    c00155e6 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c00155e1:	40                   	inc    eax
c00155e2:	eb da                	jmp    c00155be <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c00155e4:	31 c0                	xor    eax,eax
c00155e6:	5b                   	pop    ebx
c00155e7:	c3                   	ret    

c00155e8 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c00155e8:	53                   	push   ebx
c00155e9:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00155ed:	53                   	push   ebx
c00155ee:	e8 8c ff ff ff       	call   c001557f <Thr::getDriverBaseFromAddress(unsigned long)>
c00155f3:	5a                   	pop    edx
c00155f4:	31 d2                	xor    edx,edx
c00155f6:	85 c0                	test   eax,eax
c00155f8:	74 04                	je     c00155fe <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c00155fa:	89 da                	mov    edx,ebx
c00155fc:	29 c2                	sub    edx,eax
c00155fe:	89 d0                	mov    eax,edx
c0015600:	5b                   	pop    ebx
c0015601:	c3                   	ret    

c0015602 <Thr::loadDLL(char const*, bool)>:
c0015602:	55                   	push   ebp
c0015603:	57                   	push   edi
c0015604:	56                   	push   esi
c0015605:	53                   	push   ebx
c0015606:	81 ec 34 01 00 00    	sub    esp,0x134
c001560c:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0015613:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c001561a:	56                   	push   esi
c001561b:	68 67 44 02 c0       	push   0xc0024467
c0015620:	e8 0c 71 ff ff       	call   c000c731 <Dbg::kprintf(char const*, ...)>
c0015625:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001562c:	e8 66 41 ff ff       	call   c0009797 <malloc>
c0015631:	83 c4 0c             	add    esp,0xc
c0015634:	89 c3                	mov    ebx,eax
c0015636:	ff 35 30 98 02 c0    	push   DWORD PTR ds:0xc0029830
c001563c:	56                   	push   esi
c001563d:	50                   	push   eax
c001563e:	e8 59 76 ff ff       	call   c000cc9c <File::File(char const*, Process*)>
c0015643:	83 c4 10             	add    esp,0x10
c0015646:	85 db                	test   ebx,ebx
c0015648:	75 3c                	jne    c0015686 <Thr::loadDLL(char const*, bool)+0x84>
c001564a:	89 f8                	mov    eax,edi
c001564c:	84 c0                	test   al,al
c001564e:	0f 84 d2 01 00 00    	je     c0015826 <Thr::loadDLL(char const*, bool)+0x224>
c0015654:	55                   	push   ebp
c0015655:	55                   	push   ebp
c0015656:	68 78 44 02 c0       	push   0xc0024478
c001565b:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c001565f:	55                   	push   ebp
c0015660:	e8 ff ae fe ff       	call   c0000564 <strcpy>
c0015665:	58                   	pop    eax
c0015666:	5a                   	pop    edx
c0015667:	56                   	push   esi
c0015668:	55                   	push   ebp
c0015669:	e8 36 b0 fe ff       	call   c00006a4 <strcat>
c001566e:	59                   	pop    ecx
c001566f:	58                   	pop    eax
c0015670:	68 8b 44 02 c0       	push   0xc002448b
c0015675:	55                   	push   ebp
c0015676:	e8 29 b0 fe ff       	call   c00006a4 <strcat>
c001567b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001567e:	e8 18 d4 ff ff       	call   c0012a9b <Krnl::panic(char const*)>
c0015683:	83 c4 10             	add    esp,0x10
c0015686:	51                   	push   ecx
c0015687:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c001568b:	50                   	push   eax
c001568c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0015690:	50                   	push   eax
c0015691:	53                   	push   ebx
c0015692:	e8 8b 79 ff ff       	call   c000d022 <File::stat(unsigned long long*, bool*)>
c0015697:	83 c4 10             	add    esp,0x10
c001569a:	85 db                	test   ebx,ebx
c001569c:	74 0c                	je     c00156aa <Thr::loadDLL(char const*, bool)+0xa8>
c001569e:	83 ec 0c             	sub    esp,0xc
c00156a1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00156a3:	53                   	push   ebx
c00156a4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00156a7:	83 c4 10             	add    esp,0x10
c00156aa:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c00156af:	75 0a                	jne    c00156bb <Thr::loadDLL(char const*, bool)+0xb9>
c00156b1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00156b5:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c00156b9:	75 3c                	jne    c00156f7 <Thr::loadDLL(char const*, bool)+0xf5>
c00156bb:	89 f8                	mov    eax,edi
c00156bd:	84 c0                	test   al,al
c00156bf:	0f 84 49 01 00 00    	je     c001580e <Thr::loadDLL(char const*, bool)+0x20c>
c00156c5:	51                   	push   ecx
c00156c6:	51                   	push   ecx
c00156c7:	68 78 44 02 c0       	push   0xc0024478
c00156cc:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c00156d0:	53                   	push   ebx
c00156d1:	e8 8e ae fe ff       	call   c0000564 <strcpy>
c00156d6:	5d                   	pop    ebp
c00156d7:	58                   	pop    eax
c00156d8:	56                   	push   esi
c00156d9:	53                   	push   ebx
c00156da:	e8 c5 af fe ff       	call   c00006a4 <strcat>
c00156df:	58                   	pop    eax
c00156e0:	5a                   	pop    edx
c00156e1:	68 8b 44 02 c0       	push   0xc002448b
c00156e6:	53                   	push   ebx
c00156e7:	e8 b8 af fe ff       	call   c00006a4 <strcat>
c00156ec:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00156ef:	e8 a7 d3 ff ff       	call   c0012a9b <Krnl::panic(char const*)>
c00156f4:	83 c4 10             	add    esp,0x10
c00156f7:	52                   	push   edx
c00156f8:	6a 03                	push   0x3
c00156fa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00156fe:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0015702:	05 ff 0f 00 00       	add    eax,0xfff
c0015707:	83 d2 00             	adc    edx,0x0
c001570a:	0f ac d0 0c          	shrd   eax,edx,0xc
c001570e:	50                   	push   eax
c001570f:	ff 35 14 64 02 c0    	push   DWORD PTR ds:0xc0026414
c0015715:	e8 2a 64 ff ff       	call   c000bb44 <VAS::allocatePages(int, int)>
c001571a:	59                   	pop    ecx
c001571b:	89 c3                	mov    ebx,eax
c001571d:	5d                   	pop    ebp
c001571e:	50                   	push   eax
c001571f:	68 96 2b 02 c0       	push   0xc0022b96
c0015724:	e8 08 70 ff ff       	call   c000c731 <Dbg::kprintf(char const*, ...)>
c0015729:	89 34 24             	mov    DWORD PTR [esp],esi
c001572c:	e8 93 ad fe ff       	call   c00004c4 <strlen>
c0015731:	8b 2d 40 90 02 c0    	mov    ebp,DWORD PTR ds:0xc0029040
c0015737:	40                   	inc    eax
c0015738:	89 04 24             	mov    DWORD PTR [esp],eax
c001573b:	e8 57 40 ff ff       	call   c0009797 <malloc>
c0015740:	89 04 ad 60 94 02 c0 	mov    DWORD PTR [ebp*4-0x3ffd6ba0],eax
c0015747:	58                   	pop    eax
c0015748:	a1 40 90 02 c0       	mov    eax,ds:0xc0029040
c001574d:	5a                   	pop    edx
c001574e:	56                   	push   esi
c001574f:	ff 34 85 60 94 02 c0 	push   DWORD PTR [eax*4-0x3ffd6ba0]
c0015756:	e8 09 ae fe ff       	call   c0000564 <strcpy>
c001575b:	a1 40 90 02 c0       	mov    eax,ds:0xc0029040
c0015760:	8d 50 01             	lea    edx,[eax+0x1]
c0015763:	89 1c 85 60 92 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6da0],ebx
c001576a:	89 15 40 90 02 c0    	mov    DWORD PTR ds:0xc0029040,edx
c0015770:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015774:	83 c4 0c             	add    esp,0xc
c0015777:	89 14 85 60 90 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6fa0],edx
c001577e:	6a 01                	push   0x1
c0015780:	53                   	push   ebx
c0015781:	56                   	push   esi
c0015782:	e8 c2 f6 ff ff       	call   c0014e49 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c0015787:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001578b:	83 c4 10             	add    esp,0x10
c001578e:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0015793:	0f 85 89 00 00 00    	jne    c0015822 <Thr::loadDLL(char const*, bool)+0x220>
c0015799:	89 f8                	mov    eax,edi
c001579b:	84 c0                	test   al,al
c001579d:	74 73                	je     c0015812 <Thr::loadDLL(char const*, bool)+0x210>
c001579f:	83 ec 0c             	sub    esp,0xc
c00157a2:	68 8d 44 02 c0       	push   0xc002448d
c00157a7:	e8 ef d2 ff ff       	call   c0012a9b <Krnl::panic(char const*)>
c00157ac:	83 c4 10             	add    esp,0x10
c00157af:	eb 61                	jmp    c0015812 <Thr::loadDLL(char const*, bool)+0x210>
c00157b1:	50                   	push   eax
c00157b2:	50                   	push   eax
c00157b3:	89 e8                	mov    eax,ebp
c00157b5:	c1 e0 0c             	shl    eax,0xc
c00157b8:	01 d8                	add    eax,ebx
c00157ba:	50                   	push   eax
c00157bb:	ff 35 14 64 02 c0    	push   DWORD PTR ds:0xc0026414
c00157c1:	e8 e4 5e ff ff       	call   c000b6aa <VAS::getPageTableEntry(unsigned long)>
c00157c6:	83 c4 10             	add    esp,0x10
c00157c9:	8b 00                	mov    eax,DWORD PTR [eax]
c00157cb:	a8 60                	test   al,0x60
c00157cd:	75 11                	jne    c00157e0 <Thr::loadDLL(char const*, bool)+0x1de>
c00157cf:	83 ec 0c             	sub    esp,0xc
c00157d2:	25 00 f0 ff ff       	and    eax,0xfffff000
c00157d7:	50                   	push   eax
c00157d8:	e8 76 43 ff ff       	call   c0009b53 <Phys::freePage(unsigned long)>
c00157dd:	83 c4 10             	add    esp,0x10
c00157e0:	45                   	inc    ebp
c00157e1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00157e5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00157e9:	05 ff 0f 00 00       	add    eax,0xfff
c00157ee:	bf 00 00 00 00       	mov    edi,0x0
c00157f3:	83 d2 00             	adc    edx,0x0
c00157f6:	0f ac d0 0c          	shrd   eax,edx,0xc
c00157fa:	c1 ea 0c             	shr    edx,0xc
c00157fd:	39 c5                	cmp    ebp,eax
c00157ff:	89 d1                	mov    ecx,edx
c0015801:	89 f8                	mov    eax,edi
c0015803:	19 c8                	sbb    eax,ecx
c0015805:	72 aa                	jb     c00157b1 <Thr::loadDLL(char const*, bool)+0x1af>
c0015807:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001580c:	75 18                	jne    c0015826 <Thr::loadDLL(char const*, bool)+0x224>
c001580e:	31 db                	xor    ebx,ebx
c0015810:	eb 14                	jmp    c0015826 <Thr::loadDLL(char const*, bool)+0x224>
c0015812:	83 ec 0c             	sub    esp,0xc
c0015815:	68 ac 44 02 c0       	push   0xc00244ac
c001581a:	e8 7c d2 ff ff       	call   c0012a9b <Krnl::panic(char const*)>
c001581f:	83 c4 10             	add    esp,0x10
c0015822:	31 ed                	xor    ebp,ebp
c0015824:	eb bb                	jmp    c00157e1 <Thr::loadDLL(char const*, bool)+0x1df>
c0015826:	81 c4 2c 01 00 00    	add    esp,0x12c
c001582c:	89 d8                	mov    eax,ebx
c001582e:	5b                   	pop    ebx
c001582f:	5e                   	pop    esi
c0015830:	5f                   	pop    edi
c0015831:	5d                   	pop    ebp
c0015832:	c3                   	ret    

c0015833 <Thr::executeDLL(unsigned long, void*)>:
c0015833:	56                   	push   esi
c0015834:	53                   	push   ebx
c0015835:	52                   	push   edx
c0015836:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001583a:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001583e:	85 db                	test   ebx,ebx
c0015840:	75 10                	jne    c0015852 <Thr::executeDLL(unsigned long, void*)+0x1f>
c0015842:	83 ec 0c             	sub    esp,0xc
c0015845:	68 c8 44 02 c0       	push   0xc00244c8
c001584a:	e8 4c d2 ff ff       	call   c0012a9b <Krnl::panic(char const*)>
c001584f:	83 c4 10             	add    esp,0x10
c0015852:	50                   	push   eax
c0015853:	50                   	push   eax
c0015854:	53                   	push   ebx
c0015855:	68 f2 44 02 c0       	push   0xc00244f2
c001585a:	e8 d2 6e ff ff       	call   c000c731 <Dbg::kprintf(char const*, ...)>
c001585f:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0015863:	89 d8                	mov    eax,ebx
c0015865:	83 c4 14             	add    esp,0x14
c0015868:	5b                   	pop    ebx
c0015869:	5e                   	pop    esi
c001586a:	ff e0                	jmp    eax

c001586c <userModeEntryPoint(void*)>:
c001586c:	a1 08 98 02 c0       	mov    eax,ds:0xc0029808
c0015871:	48                   	dec    eax
c0015872:	a3 08 98 02 c0       	mov    ds:0xc0029808,eax
c0015877:	75 03                	jne    c001587c <userModeEntryPoint(void*)+0x10>
c0015879:	fb                   	sti    
c001587a:	66 90                	xchg   ax,ax
c001587c:	fb                   	sti    
c001587d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015882:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015885:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c001588b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001588f:	e9 cb a9 fe ff       	jmp    c000025f <goToUsermode>

c0015894 <changeTSS>:
c0015894:	83 ec 14             	sub    esp,0x14
c0015897:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001589c:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c001589f:	b8 00 00 e8 01       	mov    eax,0x1e80000
c00158a4:	c1 e2 15             	shl    edx,0x15
c00158a7:	29 d0                	sub    eax,edx
c00158a9:	50                   	push   eax
c00158aa:	a1 28 63 02 c0       	mov    eax,ds:0xc0026328
c00158af:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00158b5:	05 7c 11 00 00       	add    eax,0x117c
c00158ba:	50                   	push   eax
c00158bb:	e8 68 54 ff ff       	call   c000ad28 <TSS::setESP(unsigned long)>
c00158c0:	83 c4 1c             	add    esp,0x1c
c00158c3:	c3                   	ret    

c00158c4 <switchToThread(ThreadControlBlock*)>:
c00158c4:	57                   	push   edi
c00158c5:	a1 04 98 02 c0       	mov    eax,ds:0xc0029804
c00158ca:	56                   	push   esi
c00158cb:	85 c0                	test   eax,eax
c00158cd:	53                   	push   ebx
c00158ce:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00158d2:	0f 85 88 00 00 00    	jne    c0015960 <switchToThread(ThreadControlBlock*)+0x9c>
c00158d8:	8a 43 40             	mov    al,BYTE PTR [ebx+0x40]
c00158db:	3c ff                	cmp    al,0xff
c00158dd:	74 7d                	je     c001595c <switchToThread(ThreadControlBlock*)+0x98>
c00158df:	0f b6 d0             	movzx  edx,al
c00158e2:	b8 00 04 00 00       	mov    eax,0x400
c00158e7:	29 d0                	sub    eax,edx
c00158e9:	d1 f8                	sar    eax,1
c00158eb:	03 43 34             	add    eax,DWORD PTR [ebx+0x34]
c00158ee:	66 90                	xchg   ax,ax
c00158f0:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00158f3:	ff 15 f8 98 02 c0    	call   DWORD PTR ds:0xc00298f8
c00158f9:	a3 48 98 02 c0       	mov    ds:0xc0029848,eax
c00158fe:	89 15 4c 98 02 c0    	mov    DWORD PTR ds:0xc002984c,edx
c0015904:	89 c6                	mov    esi,eax
c0015906:	89 d7                	mov    edi,edx
c0015908:	2b 35 38 98 02 c0    	sub    esi,DWORD PTR ds:0xc0029838
c001590e:	a3 38 98 02 c0       	mov    ds:0xc0029838,eax
c0015913:	1b 3d 3c 98 02 c0    	sbb    edi,DWORD PTR ds:0xc002983c
c0015919:	89 35 40 98 02 c0    	mov    DWORD PTR ds:0xc0029840,esi
c001591f:	89 3d 44 98 02 c0    	mov    DWORD PTR ds:0xc0029844,edi
c0015925:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001592b:	89 15 3c 98 02 c0    	mov    DWORD PTR ds:0xc002983c,edx
c0015931:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c0015934:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c0015937:	01 c6                	add    esi,eax
c0015939:	11 d7                	adc    edi,edx
c001593b:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c001593e:	83 ec 0c             	sub    esp,0xc
c0015941:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c0015944:	53                   	push   ebx
c0015945:	e8 4d a9 fe ff       	call   c0000297 <switchToThreadASM>
c001594a:	0f 20 c0             	mov    eax,cr0
c001594d:	83 c8 08             	or     eax,0x8
c0015950:	0f 22 c0             	mov    cr0,eax
c0015953:	83 c4 10             	add    esp,0x10
c0015956:	5b                   	pop    ebx
c0015957:	5e                   	pop    esi
c0015958:	5f                   	pop    edi
c0015959:	c3                   	ret    
c001595a:	66 90                	xchg   ax,ax
c001595c:	31 c0                	xor    eax,eax
c001595e:	eb 90                	jmp    c00158f0 <switchToThread(ThreadControlBlock*)+0x2c>
c0015960:	5b                   	pop    ebx
c0015961:	c7 05 00 98 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0029800,0x1
c001596b:	5e                   	pop    esi
c001596c:	5f                   	pop    edi
c001596d:	c3                   	ret    
c001596e:	66 90                	xchg   ax,ax

c0015970 <Process::addArgs(char**)>:
c0015970:	57                   	push   edi
c0015971:	56                   	push   esi
c0015972:	53                   	push   ebx
c0015973:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015977:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001597b:	c7 86 16 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x516],0x0
c0015985:	85 ff                	test   edi,edi
c0015987:	74 43                	je     c00159cc <Process::addArgs(char**)+0x5c>
c0015989:	8b 07                	mov    eax,DWORD PTR [edi]
c001598b:	85 c0                	test   eax,eax
c001598d:	74 3d                	je     c00159cc <Process::addArgs(char**)+0x5c>
c001598f:	31 db                	xor    ebx,ebx
c0015991:	8d 76 00             	lea    esi,[esi+0x0]
c0015994:	83 ec 0c             	sub    esp,0xc
c0015997:	50                   	push   eax
c0015998:	e8 27 ab fe ff       	call   c00004c4 <strlen>
c001599d:	40                   	inc    eax
c001599e:	89 04 24             	mov    DWORD PTR [esp],eax
c00159a1:	e8 f1 3d ff ff       	call   c0009797 <malloc>
c00159a6:	89 84 9e 1a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x51a],eax
c00159ad:	5a                   	pop    edx
c00159ae:	59                   	pop    ecx
c00159af:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c00159b2:	43                   	inc    ebx
c00159b3:	50                   	push   eax
c00159b4:	e8 ab ab fe ff       	call   c0000564 <strcpy>
c00159b9:	ff 86 16 05 00 00    	inc    DWORD PTR [esi+0x516]
c00159bf:	83 c4 10             	add    esp,0x10
c00159c2:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c00159c5:	85 c0                	test   eax,eax
c00159c7:	75 cb                	jne    c0015994 <Process::addArgs(char**)+0x24>
c00159c9:	8d 76 00             	lea    esi,[esi+0x0]
c00159cc:	5b                   	pop    ebx
c00159cd:	5e                   	pop    esi
c00159ce:	5f                   	pop    edi
c00159cf:	c3                   	ret    

c00159d0 <Process::Process(char const*, Process*, char**)>:
c00159d0:	56                   	push   esi
c00159d1:	53                   	push   ebx
c00159d2:	83 ec 14             	sub    esp,0x14
c00159d5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00159d9:	05 0c 02 00 00       	add    eax,0x20c
c00159de:	bb 07 00 00 00       	mov    ebx,0x7
c00159e3:	89 c6                	mov    esi,eax
c00159e5:	8d 76 00             	lea    esi,[esi+0x0]
c00159e8:	85 db                	test   ebx,ebx
c00159ea:	78 14                	js     c0015a00 <Process::Process(char const*, Process*, char**)+0x30>
c00159ec:	83 ec 0c             	sub    esp,0xc
c00159ef:	56                   	push   esi
c00159f0:	e8 b7 c3 00 00       	call   c0021dac <ThreadControlBlock::ThreadControlBlock()>
c00159f5:	83 c4 10             	add    esp,0x10
c00159f8:	83 c6 5f             	add    esi,0x5f
c00159fb:	4b                   	dec    ebx
c00159fc:	eb ea                	jmp    c00159e8 <Process::Process(char const*, Process*, char**)+0x18>
c00159fe:	66 90                	xchg   ax,ax
c0015a00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015a04:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0015a0b:	83 ec 0c             	sub    esp,0xc
c0015a0e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015a12:	e8 0d cf ff ff       	call   c0012924 <Krnl::newProcessEnv(Process*)>
c0015a17:	83 c4 10             	add    esp,0x10
c0015a1a:	89 c2                	mov    edx,eax
c0015a1c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015a20:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0015a26:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015a2a:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0015a33:	a1 b0 5a 02 c0       	mov    eax,ds:0xc0025ab0
c0015a38:	8d 50 01             	lea    edx,[eax+0x1]
c0015a3b:	89 15 b0 5a 02 c0    	mov    DWORD PTR ds:0xc0025ab0,edx
c0015a41:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015a45:	89 02                	mov    DWORD PTR [edx],eax
c0015a47:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c0015a4f:	83 ec 0c             	sub    esp,0xc
c0015a52:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015a56:	e8 3c 3d ff ff       	call   c0009797 <malloc>
c0015a5b:	83 c4 10             	add    esp,0x10
c0015a5e:	89 c3                	mov    ebx,eax
c0015a60:	83 ec 08             	sub    esp,0x8
c0015a63:	6a 00                	push   0x0
c0015a65:	53                   	push   ebx
c0015a66:	e8 81 64 ff ff       	call   c000beec <VAS::VAS(bool)>
c0015a6b:	83 c4 10             	add    esp,0x10
c0015a6e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015a72:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0015a78:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015a7c:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0015a86:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015a8a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015a8e:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0015a94:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015a98:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015a9e:	85 c0                	test   eax,eax
c0015aa0:	74 42                	je     c0015ae4 <Process::Process(char const*, Process*, char**)+0x114>
c0015aa2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015aa6:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015aac:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0015ab2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015ab6:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0015abc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015ac0:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015ac6:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0015acc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015ad0:	05 0c 01 00 00       	add    eax,0x10c
c0015ad5:	83 ec 08             	sub    esp,0x8
c0015ad8:	52                   	push   edx
c0015ad9:	50                   	push   eax
c0015ada:	e8 85 aa fe ff       	call   c0000564 <strcpy>
c0015adf:	83 c4 10             	add    esp,0x10
c0015ae2:	eb 64                	jmp    c0015b48 <Process::Process(char const*, Process*, char**)+0x178>
c0015ae4:	c7 44 24 04 b4 01 00 00 	mov    DWORD PTR [esp+0x4],0x1b4
c0015aec:	83 ec 0c             	sub    esp,0xc
c0015aef:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0015af3:	e8 9f 3c ff ff       	call   c0009797 <malloc>
c0015af8:	83 c4 10             	add    esp,0x10
c0015afb:	89 c3                	mov    ebx,eax
c0015afd:	83 ec 08             	sub    esp,0x8
c0015b00:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015b04:	53                   	push   ebx
c0015b05:	e8 a8 4f ff ff       	call   c000aab2 <VgaText::VgaText(char const*)>
c0015b0a:	83 c4 10             	add    esp,0x10
c0015b0d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b11:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0015b17:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b1b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015b21:	83 ec 0c             	sub    esp,0xc
c0015b24:	50                   	push   eax
c0015b25:	e8 d5 47 ff ff       	call   c000a2ff <addToTerminalCycle(VgaText*)>
c0015b2a:	83 c4 10             	add    esp,0x10
c0015b2d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b31:	05 0c 01 00 00       	add    eax,0x10c
c0015b36:	83 ec 08             	sub    esp,0x8
c0015b39:	68 11 45 02 c0       	push   0xc0024511
c0015b3e:	50                   	push   eax
c0015b3f:	e8 20 aa fe ff       	call   c0000564 <strcpy>
c0015b44:	83 c4 10             	add    esp,0x10
c0015b47:	90                   	nop
c0015b48:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b4c:	83 c0 0c             	add    eax,0xc
c0015b4f:	83 ec 08             	sub    esp,0x8
c0015b52:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015b56:	50                   	push   eax
c0015b57:	e8 08 aa fe ff       	call   c0000564 <strcpy>
c0015b5c:	83 c4 10             	add    esp,0x10
c0015b5f:	83 ec 08             	sub    esp,0x8
c0015b62:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0015b66:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015b6a:	e8 01 fe ff ff       	call   c0015970 <Process::addArgs(char**)>
c0015b6f:	83 c4 10             	add    esp,0x10
c0015b72:	83 ec 08             	sub    esp,0x8
c0015b75:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015b79:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015b7d:	e8 91 ed ff ff       	call   c0014913 <Thr::loadProgramIntoMemory(Process*, char const*)>
c0015b82:	83 c4 10             	add    esp,0x10
c0015b85:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0015b89:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0015b8d:	83 f0 01             	xor    eax,0x1
c0015b90:	88 c2                	mov    dl,al
c0015b92:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b96:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c0015b9c:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0015ba1:	83 ec 08             	sub    esp,0x8
c0015ba4:	50                   	push   eax
c0015ba5:	68 68 45 02 c0       	push   0xc0024568
c0015baa:	e8 82 6b ff ff       	call   c000c731 <Dbg::kprintf(char const*, ...)>
c0015baf:	83 c4 10             	add    esp,0x10
c0015bb2:	90                   	nop
c0015bb3:	83 c4 14             	add    esp,0x14
c0015bb6:	5b                   	pop    ebx
c0015bb7:	5e                   	pop    esi
c0015bb8:	c3                   	ret    
c0015bb9:	90                   	nop
c0015bba:	66 90                	xchg   ax,ax

c0015bbc <Process::Process(bool, char const*, Process*, char**)>:
c0015bbc:	56                   	push   esi
c0015bbd:	53                   	push   ebx
c0015bbe:	83 ec 24             	sub    esp,0x24
c0015bc1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0015bc5:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0015bc9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015bcd:	05 0c 02 00 00       	add    eax,0x20c
c0015bd2:	bb 07 00 00 00       	mov    ebx,0x7
c0015bd7:	89 c6                	mov    esi,eax
c0015bd9:	8d 76 00             	lea    esi,[esi+0x0]
c0015bdc:	85 db                	test   ebx,ebx
c0015bde:	78 14                	js     c0015bf4 <Process::Process(bool, char const*, Process*, char**)+0x38>
c0015be0:	83 ec 0c             	sub    esp,0xc
c0015be3:	56                   	push   esi
c0015be4:	e8 c3 c1 00 00       	call   c0021dac <ThreadControlBlock::ThreadControlBlock()>
c0015be9:	83 c4 10             	add    esp,0x10
c0015bec:	83 c6 5f             	add    esi,0x5f
c0015bef:	4b                   	dec    ebx
c0015bf0:	eb ea                	jmp    c0015bdc <Process::Process(bool, char const*, Process*, char**)+0x20>
c0015bf2:	66 90                	xchg   ax,ax
c0015bf4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015bf8:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0015bff:	83 ec 0c             	sub    esp,0xc
c0015c02:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0015c06:	e8 19 cd ff ff       	call   c0012924 <Krnl::newProcessEnv(Process*)>
c0015c0b:	83 c4 10             	add    esp,0x10
c0015c0e:	89 c2                	mov    edx,eax
c0015c10:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015c14:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0015c1a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015c1e:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0015c27:	a1 b0 5a 02 c0       	mov    eax,ds:0xc0025ab0
c0015c2c:	8d 50 01             	lea    edx,[eax+0x1]
c0015c2f:	89 15 b0 5a 02 c0    	mov    DWORD PTR ds:0xc0025ab0,edx
c0015c35:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0015c39:	89 02                	mov    DWORD PTR [edx],eax
c0015c3b:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c0015c43:	83 ec 0c             	sub    esp,0xc
c0015c46:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0015c4a:	e8 48 3b ff ff       	call   c0009797 <malloc>
c0015c4f:	83 c4 10             	add    esp,0x10
c0015c52:	89 c3                	mov    ebx,eax
c0015c54:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0015c59:	83 ec 08             	sub    esp,0x8
c0015c5c:	50                   	push   eax
c0015c5d:	53                   	push   ebx
c0015c5e:	e8 89 62 ff ff       	call   c000beec <VAS::VAS(bool)>
c0015c63:	83 c4 10             	add    esp,0x10
c0015c66:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015c6a:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0015c70:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015c74:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0015c7e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015c82:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0015c86:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0015c8c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015c90:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015c96:	85 c0                	test   eax,eax
c0015c98:	74 42                	je     c0015cdc <Process::Process(bool, char const*, Process*, char**)+0x120>
c0015c9a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015c9e:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015ca4:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0015caa:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015cae:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0015cb4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015cb8:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015cbe:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0015cc4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015cc8:	05 0c 01 00 00       	add    eax,0x10c
c0015ccd:	83 ec 08             	sub    esp,0x8
c0015cd0:	52                   	push   edx
c0015cd1:	50                   	push   eax
c0015cd2:	e8 8d a8 fe ff       	call   c0000564 <strcpy>
c0015cd7:	83 c4 10             	add    esp,0x10
c0015cda:	eb 64                	jmp    c0015d40 <Process::Process(bool, char const*, Process*, char**)+0x184>
c0015cdc:	c7 44 24 18 b4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1b4
c0015ce4:	83 ec 0c             	sub    esp,0xc
c0015ce7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0015ceb:	e8 a7 3a ff ff       	call   c0009797 <malloc>
c0015cf0:	83 c4 10             	add    esp,0x10
c0015cf3:	89 c3                	mov    ebx,eax
c0015cf5:	83 ec 08             	sub    esp,0x8
c0015cf8:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0015cfc:	53                   	push   ebx
c0015cfd:	e8 b0 4d ff ff       	call   c000aab2 <VgaText::VgaText(char const*)>
c0015d02:	83 c4 10             	add    esp,0x10
c0015d05:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015d09:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0015d0f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015d13:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015d19:	83 ec 0c             	sub    esp,0xc
c0015d1c:	50                   	push   eax
c0015d1d:	e8 dd 45 ff ff       	call   c000a2ff <addToTerminalCycle(VgaText*)>
c0015d22:	83 c4 10             	add    esp,0x10
c0015d25:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015d29:	05 0c 01 00 00       	add    eax,0x10c
c0015d2e:	83 ec 08             	sub    esp,0x8
c0015d31:	68 11 45 02 c0       	push   0xc0024511
c0015d36:	50                   	push   eax
c0015d37:	e8 28 a8 fe ff       	call   c0000564 <strcpy>
c0015d3c:	83 c4 10             	add    esp,0x10
c0015d3f:	90                   	nop
c0015d40:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015d44:	83 c0 0c             	add    eax,0xc
c0015d47:	83 ec 08             	sub    esp,0x8
c0015d4a:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0015d4e:	50                   	push   eax
c0015d4f:	e8 10 a8 fe ff       	call   c0000564 <strcpy>
c0015d54:	83 c4 10             	add    esp,0x10
c0015d57:	83 ec 08             	sub    esp,0x8
c0015d5a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0015d5e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0015d62:	e8 09 fc ff ff       	call   c0015970 <Process::addArgs(char**)>
c0015d67:	83 c4 10             	add    esp,0x10
c0015d6a:	90                   	nop
c0015d6b:	83 c4 24             	add    esp,0x24
c0015d6e:	5b                   	pop    ebx
c0015d6f:	5e                   	pop    esi
c0015d70:	c3                   	ret    
c0015d71:	8d 76 00             	lea    esi,[esi+0x0]

c0015d74 <taskStartupFunction>:
c0015d74:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015d79:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c0015d7c:	c3                   	ret    
c0015d7d:	90                   	nop
c0015d7e:	66 90                	xchg   ax,ax

c0015d80 <Semaphore::Semaphore(int)>:
c0015d80:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015d84:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0015d88:	89 10                	mov    DWORD PTR [eax],edx
c0015d8a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015d8e:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0015d95:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015d99:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0015da0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015da4:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0015dab:	90                   	nop
c0015dac:	c3                   	ret    
c0015dad:	90                   	nop
c0015dae:	66 90                	xchg   ax,ax

c0015db0 <Mutex::Mutex()>:
c0015db0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015db4:	6a 01                	push   0x1
c0015db6:	50                   	push   eax
c0015db7:	e8 c4 ff ff ff       	call   c0015d80 <Semaphore::Semaphore(int)>
c0015dbc:	83 c4 08             	add    esp,0x8
c0015dbf:	90                   	nop
c0015dc0:	c3                   	ret    
c0015dc1:	90                   	nop
c0015dc2:	66 90                	xchg   ax,ax

c0015dc4 <Process::createThread(void (*)(void*), void*, int)>:
c0015dc4:	57                   	push   edi
c0015dc5:	31 c9                	xor    ecx,ecx
c0015dc7:	56                   	push   esi
c0015dc8:	53                   	push   ebx
c0015dc9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015dcd:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c0015dd4:	89 f2                	mov    edx,esi
c0015dd6:	66 90                	xchg   ax,ax
c0015dd8:	0f b7 c2             	movzx  eax,dx
c0015ddb:	83 e2 01             	and    edx,0x1
c0015dde:	74 14                	je     c0015df4 <Process::createThread(void (*)(void*), void*, int)+0x30>
c0015de0:	d1 f8                	sar    eax,1
c0015de2:	41                   	inc    ecx
c0015de3:	89 c2                	mov    edx,eax
c0015de5:	83 f9 10             	cmp    ecx,0x10
c0015de8:	75 ee                	jne    c0015dd8 <Process::createThread(void (*)(void*), void*, int)+0x14>
c0015dea:	31 db                	xor    ebx,ebx
c0015dec:	89 d8                	mov    eax,ebx
c0015dee:	5b                   	pop    ebx
c0015def:	5e                   	pop    esi
c0015df0:	5f                   	pop    edi
c0015df1:	c3                   	ret    
c0015df2:	66 90                	xchg   ax,ax
c0015df4:	b8 01 00 00 00       	mov    eax,0x1
c0015df9:	d3 e0                	shl    eax,cl
c0015dfb:	09 c6                	or     esi,eax
c0015dfd:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c0015e00:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c0015e07:	01 c0                	add    eax,eax
c0015e09:	01 c8                	add    eax,ecx
c0015e0b:	8d 04 80             	lea    eax,[eax+eax*4]
c0015e0e:	01 d8                	add    eax,ebx
c0015e10:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c0015e17:	75 0b                	jne    c0015e24 <Process::createThread(void (*)(void*), void*, int)+0x60>
c0015e19:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c0015e23:	90                   	nop
c0015e24:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0015e2a:	83 ec 08             	sub    esp,0x8
c0015e2d:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0015e30:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c0015e33:	01 c0                	add    eax,eax
c0015e35:	01 c8                	add    eax,ecx
c0015e37:	8d 3c 80             	lea    edi,[eax+eax*4]
c0015e3a:	8d 04 3b             	lea    eax,[ebx+edi*1]
c0015e3d:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c0015e43:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c0015e49:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015e4d:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c0015e53:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c0015e59:	8d 9c 3b 0c 02 00 00 	lea    ebx,[ebx+edi*1+0x20c]
c0015e60:	89 ca                	mov    edx,ecx
c0015e62:	f7 da                	neg    edx
c0015e64:	c1 e2 15             	shl    edx,0x15
c0015e67:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c0015e6d:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c0015e73:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0015e77:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c0015e81:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c0015e87:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0015e8b:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c0015e91:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c0015e9b:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c0015ea5:	53                   	push   ebx
c0015ea6:	68 24 98 02 c0       	push   0xc0029824
c0015eab:	e8 9c bc 00 00       	call   c0021b4c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015eb0:	83 c4 10             	add    esp,0x10
c0015eb3:	89 d8                	mov    eax,ebx
c0015eb5:	5b                   	pop    ebx
c0015eb6:	5e                   	pop    esi
c0015eb7:	5f                   	pop    edi
c0015eb8:	c3                   	ret    
c0015eb9:	90                   	nop
c0015eba:	66 90                	xchg   ax,ax

c0015ebc <Process::createUserThread()>:
c0015ebc:	83 ec 0c             	sub    esp,0xc
c0015ebf:	68 80 00 00 00       	push   0x80
c0015ec4:	6a 00                	push   0x0
c0015ec6:	68 6c 58 01 c0       	push   0xc001586c
c0015ecb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015ecf:	e8 f0 fe ff ff       	call   c0015dc4 <Process::createThread(void (*)(void*), void*, int)>
c0015ed4:	83 c4 1c             	add    esp,0x1c
c0015ed7:	c3                   	ret    

c0015ed8 <setupMultitasking(void (*)())>:
c0015ed8:	56                   	push   esi
c0015ed9:	53                   	push   ebx
c0015eda:	51                   	push   ecx
c0015edb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015edf:	eb 13                	jmp    c0015ef4 <setupMultitasking(void (*)())+0x1c>
c0015ee1:	8d 76 00             	lea    esi,[esi+0x0]
c0015ee4:	83 ec 0c             	sub    esp,0xc
c0015ee7:	68 24 98 02 c0       	push   0xc0029824
c0015eec:	e8 a3 bb 00 00       	call   c0021a94 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015ef1:	83 c4 10             	add    esp,0x10
c0015ef4:	83 ec 0c             	sub    esp,0xc
c0015ef7:	68 24 98 02 c0       	push   0xc0029824
c0015efc:	e8 6f bb 00 00       	call   c0021a70 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0015f01:	83 c4 10             	add    esp,0x10
c0015f04:	84 c0                	test   al,al
c0015f06:	74 dc                	je     c0015ee4 <setupMultitasking(void (*)())+0xc>
c0015f08:	83 ec 0c             	sub    esp,0xc
c0015f0b:	68 1f 07 00 00       	push   0x71f
c0015f10:	e8 82 38 ff ff       	call   c0009797 <malloc>
c0015f15:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0015f1c:	89 c3                	mov    ebx,eax
c0015f1e:	6a 00                	push   0x0
c0015f20:	68 15 45 02 c0       	push   0xc0024515
c0015f25:	6a 01                	push   0x1
c0015f27:	50                   	push   eax
c0015f28:	e8 8f fc ff ff       	call   c0015bbc <Process::Process(bool, char const*, Process*, char**)>
c0015f2d:	83 c4 14             	add    esp,0x14
c0015f30:	89 1d 30 98 02 c0    	mov    DWORD PTR ds:0xc0029830,ebx
c0015f36:	ff b3 06 05 00 00    	push   DWORD PTR [ebx+0x506]
c0015f3c:	e8 48 46 ff ff       	call   c000a589 <setActiveTerminal(VgaText*)>
c0015f41:	66 83 8b 04 05 00 00 01 	or     WORD PTR [ebx+0x504],0x1
c0015f49:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c0015f53:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0015f59:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0015f5c:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c0015f66:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0015f6c:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c0015f72:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0015f7c:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c0015f86:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c0015f90:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0015f96:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c0015fa0:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c0015fa6:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c0015fb0:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0015fb6:	58                   	pop    eax
c0015fb7:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c0015fbd:	5a                   	pop    edx
c0015fbe:	68 11 45 02 c0       	push   0xc0024511
c0015fc3:	50                   	push   eax
c0015fc4:	e8 9b a5 fe ff       	call   c0000564 <strcpy>
c0015fc9:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c0015fd0:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0015fd4:	83 c4 14             	add    esp,0x14
c0015fd7:	5b                   	pop    ebx
c0015fd8:	5e                   	pop    esi
c0015fd9:	e9 ab a2 fe ff       	jmp    c0000289 <switchToThreadASMFirstTime>
c0015fde:	66 90                	xchg   ax,ax

c0015fe0 <schedule()>:
c0015fe0:	a1 04 98 02 c0       	mov    eax,ds:0xc0029804
c0015fe5:	85 c0                	test   eax,eax
c0015fe7:	74 0b                	je     c0015ff4 <schedule()+0x14>
c0015fe9:	c7 05 00 98 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0029800,0x1
c0015ff3:	c3                   	ret    
c0015ff4:	53                   	push   ebx
c0015ff5:	83 ec 14             	sub    esp,0x14
c0015ff8:	68 24 98 02 c0       	push   0xc0029824
c0015ffd:	e8 6e ba 00 00       	call   c0021a70 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016002:	83 c4 10             	add    esp,0x10
c0016005:	84 c0                	test   al,al
c0016007:	75 3b                	jne    c0016044 <schedule()+0x64>
c0016009:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001600e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0016011:	4a                   	dec    edx
c0016012:	74 38                	je     c001604c <schedule()+0x6c>
c0016014:	83 ec 0c             	sub    esp,0xc
c0016017:	68 24 98 02 c0       	push   0xc0029824
c001601c:	e8 6b ba 00 00       	call   c0021a8c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016021:	c7 04 24 24 98 02 c0 	mov    DWORD PTR [esp],0xc0029824
c0016028:	89 c3                	mov    ebx,eax
c001602a:	e8 65 ba 00 00       	call   c0021a94 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001602f:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c0016036:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016039:	e8 86 f8 ff ff       	call   c00158c4 <switchToThread(ThreadControlBlock*)>
c001603e:	83 c4 10             	add    esp,0x10
c0016041:	8d 76 00             	lea    esi,[esi+0x0]
c0016044:	83 c4 08             	add    esp,0x8
c0016047:	5b                   	pop    ebx
c0016048:	c3                   	ret    
c0016049:	8d 76 00             	lea    esi,[esi+0x0]
c001604c:	83 ec 08             	sub    esp,0x8
c001604f:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0016056:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001605c:	68 24 98 02 c0       	push   0xc0029824
c0016061:	e8 e6 ba 00 00       	call   c0021b4c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016066:	83 c4 10             	add    esp,0x10
c0016069:	eb a9                	jmp    c0016014 <schedule()+0x34>
c001606b:	90                   	nop

c001606c <Semaphore::tryAcquire()>:
c001606c:	53                   	push   ebx
c001606d:	83 ec 08             	sub    esp,0x8
c0016070:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0016074:	fa                   	cli    
c0016075:	a1 08 98 02 c0       	mov    eax,ds:0xc0029808
c001607a:	8d 50 01             	lea    edx,[eax+0x1]
c001607d:	89 15 08 98 02 c0    	mov    DWORD PTR ds:0xc0029808,edx
c0016083:	8b 15 04 98 02 c0    	mov    edx,DWORD PTR ds:0xc0029804
c0016089:	8d 5a 01             	lea    ebx,[edx+0x1]
c001608c:	89 1d 04 98 02 c0    	mov    DWORD PTR ds:0xc0029804,ebx
c0016092:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c0016095:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c0016097:	7c 33                	jl     c00160cc <Semaphore::tryAcquire()+0x60>
c0016099:	89 15 04 98 02 c0    	mov    DWORD PTR ds:0xc0029804,edx
c001609f:	85 d2                	test   edx,edx
c00160a1:	75 0d                	jne    c00160b0 <Semaphore::tryAcquire()+0x44>
c00160a3:	8b 15 00 98 02 c0    	mov    edx,DWORD PTR ds:0xc0029800
c00160a9:	85 d2                	test   edx,edx
c00160ab:	75 6b                	jne    c0016118 <Semaphore::tryAcquire()+0xac>
c00160ad:	8d 76 00             	lea    esi,[esi+0x0]
c00160b0:	a3 08 98 02 c0       	mov    ds:0xc0029808,eax
c00160b5:	85 c0                	test   eax,eax
c00160b7:	74 0b                	je     c00160c4 <Semaphore::tryAcquire()+0x58>
c00160b9:	8d 76 00             	lea    esi,[esi+0x0]
c00160bc:	31 c0                	xor    eax,eax
c00160be:	83 c4 08             	add    esp,0x8
c00160c1:	5b                   	pop    ebx
c00160c2:	c3                   	ret    
c00160c3:	90                   	nop
c00160c4:	fb                   	sti    
c00160c5:	83 c4 08             	add    esp,0x8
c00160c8:	5b                   	pop    ebx
c00160c9:	c3                   	ret    
c00160ca:	66 90                	xchg   ax,ax
c00160cc:	43                   	inc    ebx
c00160cd:	89 15 04 98 02 c0    	mov    DWORD PTR ds:0xc0029804,edx
c00160d3:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c00160d6:	85 d2                	test   edx,edx
c00160d8:	75 22                	jne    c00160fc <Semaphore::tryAcquire()+0x90>
c00160da:	8b 0d 00 98 02 c0    	mov    ecx,DWORD PTR ds:0xc0029800
c00160e0:	85 c9                	test   ecx,ecx
c00160e2:	74 18                	je     c00160fc <Semaphore::tryAcquire()+0x90>
c00160e4:	c7 05 00 98 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029800,0x0
c00160ee:	e8 ed fe ff ff       	call   c0015fe0 <schedule()>
c00160f3:	a1 08 98 02 c0       	mov    eax,ds:0xc0029808
c00160f8:	48                   	dec    eax
c00160f9:	8d 76 00             	lea    esi,[esi+0x0]
c00160fc:	a3 08 98 02 c0       	mov    ds:0xc0029808,eax
c0016101:	85 c0                	test   eax,eax
c0016103:	75 0b                	jne    c0016110 <Semaphore::tryAcquire()+0xa4>
c0016105:	fb                   	sti    
c0016106:	b0 01                	mov    al,0x1
c0016108:	83 c4 08             	add    esp,0x8
c001610b:	5b                   	pop    ebx
c001610c:	c3                   	ret    
c001610d:	8d 76 00             	lea    esi,[esi+0x0]
c0016110:	b0 01                	mov    al,0x1
c0016112:	83 c4 08             	add    esp,0x8
c0016115:	5b                   	pop    ebx
c0016116:	c3                   	ret    
c0016117:	90                   	nop
c0016118:	c7 05 00 98 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029800,0x0
c0016122:	e8 b9 fe ff ff       	call   c0015fe0 <schedule()>
c0016127:	a1 08 98 02 c0       	mov    eax,ds:0xc0029808
c001612c:	48                   	dec    eax
c001612d:	a3 08 98 02 c0       	mov    ds:0xc0029808,eax
c0016132:	85 c0                	test   eax,eax
c0016134:	75 86                	jne    c00160bc <Semaphore::tryAcquire()+0x50>
c0016136:	eb 8c                	jmp    c00160c4 <Semaphore::tryAcquire()+0x58>

c0016138 <Semaphore::assertLocked(char const*)>:
c0016138:	83 ec 0c             	sub    esp,0xc
c001613b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001613f:	fa                   	cli    
c0016140:	ff 05 08 98 02 c0    	inc    DWORD PTR ds:0xc0029808
c0016146:	a1 04 98 02 c0       	mov    eax,ds:0xc0029804
c001614b:	8d 48 01             	lea    ecx,[eax+0x1]
c001614e:	89 0d 04 98 02 c0    	mov    DWORD PTR ds:0xc0029804,ecx
c0016154:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0016156:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c0016159:	7c 29                	jl     c0016184 <Semaphore::assertLocked(char const*)+0x4c>
c001615b:	90                   	nop
c001615c:	a3 04 98 02 c0       	mov    ds:0xc0029804,eax
c0016161:	85 c0                	test   eax,eax
c0016163:	75 0b                	jne    c0016170 <Semaphore::assertLocked(char const*)+0x38>
c0016165:	a1 00 98 02 c0       	mov    eax,ds:0xc0029800
c001616a:	85 c0                	test   eax,eax
c001616c:	75 2e                	jne    c001619c <Semaphore::assertLocked(char const*)+0x64>
c001616e:	66 90                	xchg   ax,ax
c0016170:	a1 08 98 02 c0       	mov    eax,ds:0xc0029808
c0016175:	48                   	dec    eax
c0016176:	a3 08 98 02 c0       	mov    ds:0xc0029808,eax
c001617b:	75 03                	jne    c0016180 <Semaphore::assertLocked(char const*)+0x48>
c001617d:	fb                   	sti    
c001617e:	66 90                	xchg   ax,ax
c0016180:	83 c4 0c             	add    esp,0xc
c0016183:	c3                   	ret    
c0016184:	83 ec 0c             	sub    esp,0xc
c0016187:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001618b:	e8 0b c9 ff ff       	call   c0012a9b <Krnl::panic(char const*)>
c0016190:	a1 04 98 02 c0       	mov    eax,ds:0xc0029804
c0016195:	83 c4 10             	add    esp,0x10
c0016198:	48                   	dec    eax
c0016199:	eb c1                	jmp    c001615c <Semaphore::assertLocked(char const*)+0x24>
c001619b:	90                   	nop
c001619c:	c7 05 00 98 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029800,0x0
c00161a6:	e8 35 fe ff ff       	call   c0015fe0 <schedule()>
c00161ab:	eb c3                	jmp    c0016170 <Semaphore::assertLocked(char const*)+0x38>
c00161ad:	8d 76 00             	lea    esi,[esi+0x0]

c00161b0 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c00161b0:	83 ec 0c             	sub    esp,0xc
c00161b3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00161b8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00161bc:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00161bf:	e8 1c fe ff ff       	call   c0015fe0 <schedule()>
c00161c4:	a1 08 98 02 c0       	mov    eax,ds:0xc0029808
c00161c9:	48                   	dec    eax
c00161ca:	a3 08 98 02 c0       	mov    ds:0xc0029808,eax
c00161cf:	75 03                	jne    c00161d4 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c00161d1:	fb                   	sti    
c00161d2:	66 90                	xchg   ax,ax
c00161d4:	83 c4 0c             	add    esp,0xc
c00161d7:	c3                   	ret    

c00161d8 <blockTask(TaskState)>:
c00161d8:	83 ec 0c             	sub    esp,0xc
c00161db:	fa                   	cli    
c00161dc:	ff 05 08 98 02 c0    	inc    DWORD PTR ds:0xc0029808
c00161e2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00161e6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00161eb:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00161ee:	e8 ed fd ff ff       	call   c0015fe0 <schedule()>
c00161f3:	a1 08 98 02 c0       	mov    eax,ds:0xc0029808
c00161f8:	48                   	dec    eax
c00161f9:	a3 08 98 02 c0       	mov    ds:0xc0029808,eax
c00161fe:	75 04                	jne    c0016204 <blockTask(TaskState)+0x2c>
c0016200:	fb                   	sti    
c0016201:	8d 76 00             	lea    esi,[esi+0x0]
c0016204:	83 c4 0c             	add    esp,0xc
c0016207:	c3                   	ret    

c0016208 <waitTask(int, int*, int)>:
c0016208:	83 ec 18             	sub    esp,0x18
c001620b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016210:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0016214:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c0016217:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001621b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016220:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c0016223:	6a 07                	push   0x7
c0016225:	e8 ae ff ff ff       	call   c00161d8 <blockTask(TaskState)>
c001622a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001622f:	83 c4 10             	add    esp,0x10
c0016232:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c0016235:	85 d2                	test   edx,edx
c0016237:	74 0b                	je     c0016244 <waitTask(int, int*, int)+0x3c>
c0016239:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c001623c:	89 02                	mov    DWORD PTR [edx],eax
c001623e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016243:	90                   	nop
c0016244:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c0016247:	83 c4 0c             	add    esp,0xc
c001624a:	c3                   	ret    
c001624b:	90                   	nop

c001624c <milliTenthSleepUntil(unsigned int)>:
c001624c:	83 ec 0c             	sub    esp,0xc
c001624f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016253:	39 05 0c 89 02 c0    	cmp    DWORD PTR ds:0xc002890c,eax
c0016259:	76 05                	jbe    c0016260 <milliTenthSleepUntil(unsigned int)+0x14>
c001625b:	90                   	nop
c001625c:	83 c4 0c             	add    esp,0xc
c001625f:	c3                   	ret    
c0016260:	fa                   	cli    
c0016261:	ff 05 08 98 02 c0    	inc    DWORD PTR ds:0xc0029808
c0016267:	83 ec 08             	sub    esp,0x8
c001626a:	ff 05 04 98 02 c0    	inc    DWORD PTR ds:0xc0029804
c0016270:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016276:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c0016279:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001627f:	68 18 98 02 c0       	push   0xc0029818
c0016284:	e8 c3 b8 00 00       	call   c0021b4c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016289:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0016290:	e8 43 ff ff ff       	call   c00161d8 <blockTask(TaskState)>
c0016295:	a1 04 98 02 c0       	mov    eax,ds:0xc0029804
c001629a:	83 c4 10             	add    esp,0x10
c001629d:	48                   	dec    eax
c001629e:	a3 04 98 02 c0       	mov    ds:0xc0029804,eax
c00162a3:	85 c0                	test   eax,eax
c00162a5:	75 09                	jne    c00162b0 <milliTenthSleepUntil(unsigned int)+0x64>
c00162a7:	a1 00 98 02 c0       	mov    eax,ds:0xc0029800
c00162ac:	85 c0                	test   eax,eax
c00162ae:	75 14                	jne    c00162c4 <milliTenthSleepUntil(unsigned int)+0x78>
c00162b0:	a1 08 98 02 c0       	mov    eax,ds:0xc0029808
c00162b5:	48                   	dec    eax
c00162b6:	a3 08 98 02 c0       	mov    ds:0xc0029808,eax
c00162bb:	75 9f                	jne    c001625c <milliTenthSleepUntil(unsigned int)+0x10>
c00162bd:	fb                   	sti    
c00162be:	83 c4 0c             	add    esp,0xc
c00162c1:	c3                   	ret    
c00162c2:	66 90                	xchg   ax,ax
c00162c4:	c7 05 00 98 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029800,0x0
c00162ce:	e8 0d fd ff ff       	call   c0015fe0 <schedule()>
c00162d3:	eb db                	jmp    c00162b0 <milliTenthSleepUntil(unsigned int)+0x64>
c00162d5:	8d 76 00             	lea    esi,[esi+0x0]

c00162d8 <milliTenthSleep(unsigned int)>:
c00162d8:	a1 0c 89 02 c0       	mov    eax,ds:0xc002890c
c00162dd:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c00162e1:	e9 66 ff ff ff       	jmp    c001624c <milliTenthSleepUntil(unsigned int)>
c00162e6:	66 90                	xchg   ax,ax

c00162e8 <sleep(unsigned int)>:
c00162e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00162ec:	8d 04 80             	lea    eax,[eax+eax*4]
c00162ef:	8d 04 80             	lea    eax,[eax+eax*4]
c00162f2:	8d 04 80             	lea    eax,[eax+eax*4]
c00162f5:	8d 04 80             	lea    eax,[eax+eax*4]
c00162f8:	c1 e0 04             	shl    eax,0x4
c00162fb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00162ff:	eb d7                	jmp    c00162d8 <milliTenthSleep(unsigned int)>
c0016301:	90                   	nop
c0016302:	66 90                	xchg   ax,ax

c0016304 <Semaphore::acquire()>:
c0016304:	83 ec 0c             	sub    esp,0xc
c0016307:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001630b:	fa                   	cli    
c001630c:	a1 04 98 02 c0       	mov    eax,ds:0xc0029804
c0016311:	ff 05 08 98 02 c0    	inc    DWORD PTR ds:0xc0029808
c0016317:	8d 48 01             	lea    ecx,[eax+0x1]
c001631a:	89 0d 04 98 02 c0    	mov    DWORD PTR ds:0xc0029804,ecx
c0016320:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0016323:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c0016325:	7d 2d                	jge    c0016354 <Semaphore::acquire()+0x50>
c0016327:	41                   	inc    ecx
c0016328:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c001632b:	90                   	nop
c001632c:	a3 04 98 02 c0       	mov    ds:0xc0029804,eax
c0016331:	85 c0                	test   eax,eax
c0016333:	75 0b                	jne    c0016340 <Semaphore::acquire()+0x3c>
c0016335:	a1 00 98 02 c0       	mov    eax,ds:0xc0029800
c001633a:	85 c0                	test   eax,eax
c001633c:	75 62                	jne    c00163a0 <Semaphore::acquire()+0x9c>
c001633e:	66 90                	xchg   ax,ax
c0016340:	a1 08 98 02 c0       	mov    eax,ds:0xc0029808
c0016345:	48                   	dec    eax
c0016346:	a3 08 98 02 c0       	mov    ds:0xc0029808,eax
c001634b:	75 03                	jne    c0016350 <Semaphore::acquire()+0x4c>
c001634d:	fb                   	sti    
c001634e:	66 90                	xchg   ax,ax
c0016350:	83 c4 0c             	add    esp,0xc
c0016353:	c3                   	ret    
c0016354:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016359:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0016360:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0016363:	85 c9                	test   ecx,ecx
c0016365:	74 4d                	je     c00163b4 <Semaphore::acquire()+0xb0>
c0016367:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c001636a:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0016370:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c0016373:	90                   	nop
c0016374:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016379:	83 ec 0c             	sub    esp,0xc
c001637c:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c001637f:	68 90 45 02 c0       	push   0xc0024590
c0016384:	e8 a8 63 ff ff       	call   c000c731 <Dbg::kprintf(char const*, ...)>
c0016389:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c0016390:	e8 43 fe ff ff       	call   c00161d8 <blockTask(TaskState)>
c0016395:	a1 04 98 02 c0       	mov    eax,ds:0xc0029804
c001639a:	83 c4 10             	add    esp,0x10
c001639d:	48                   	dec    eax
c001639e:	eb 8c                	jmp    c001632c <Semaphore::acquire()+0x28>
c00163a0:	c7 05 00 98 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029800,0x0
c00163aa:	e8 31 fc ff ff       	call   c0015fe0 <schedule()>
c00163af:	eb 8f                	jmp    c0016340 <Semaphore::acquire()+0x3c>
c00163b1:	8d 76 00             	lea    esi,[esi+0x0]
c00163b4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00163b9:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00163bc:	eb b6                	jmp    c0016374 <Semaphore::acquire()+0x70>
c00163be:	66 90                	xchg   ax,ax

c00163c0 <taskReturned>:
c00163c0:	83 ec 18             	sub    esp,0x18
c00163c3:	68 b0 45 02 c0       	push   0xc00245b0
c00163c8:	e8 ce c6 ff ff       	call   c0012a9b <Krnl::panic(char const*)>
c00163cd:	83 c4 10             	add    esp,0x10
c00163d0:	83 ec 0c             	sub    esp,0xc
c00163d3:	6a 02                	push   0x2
c00163d5:	e8 fe fd ff ff       	call   c00161d8 <blockTask(TaskState)>
c00163da:	fa                   	cli    
c00163db:	ff 05 08 98 02 c0    	inc    DWORD PTR ds:0xc0029808
c00163e1:	e8 fa fb ff ff       	call   c0015fe0 <schedule()>
c00163e6:	a1 08 98 02 c0       	mov    eax,ds:0xc0029808
c00163eb:	83 c4 10             	add    esp,0x10
c00163ee:	48                   	dec    eax
c00163ef:	a3 08 98 02 c0       	mov    ds:0xc0029808,eax
c00163f4:	85 c0                	test   eax,eax
c00163f6:	75 d8                	jne    c00163d0 <taskReturned+0x10>
c00163f8:	fb                   	sti    
c00163f9:	eb d5                	jmp    c00163d0 <taskReturned+0x10>
c00163fb:	90                   	nop

c00163fc <Thr::processFromPID(int)>:
c00163fc:	57                   	push   edi
c00163fd:	56                   	push   esi
c00163fe:	53                   	push   ebx
c00163ff:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016403:	fa                   	cli    
c0016404:	ff 05 08 98 02 c0    	inc    DWORD PTR ds:0xc0029808
c001640a:	83 ec 0c             	sub    esp,0xc
c001640d:	68 24 98 02 c0       	push   0xc0029824
c0016412:	e8 75 b6 00 00       	call   c0021a8c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016417:	83 c4 10             	add    esp,0x10
c001641a:	89 c7                	mov    edi,eax
c001641c:	eb 16                	jmp    c0016434 <Thr::processFromPID(int)+0x38>
c001641e:	66 90                	xchg   ax,ax
c0016420:	83 ec 0c             	sub    esp,0xc
c0016423:	68 24 98 02 c0       	push   0xc0029824
c0016428:	e8 5f b6 00 00       	call   c0021a8c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001642d:	83 c4 10             	add    esp,0x10
c0016430:	39 f8                	cmp    eax,edi
c0016432:	74 4c                	je     c0016480 <Thr::processFromPID(int)+0x84>
c0016434:	83 ec 0c             	sub    esp,0xc
c0016437:	68 24 98 02 c0       	push   0xc0029824
c001643c:	e8 4b b6 00 00       	call   c0021a8c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016441:	c7 04 24 24 98 02 c0 	mov    DWORD PTR [esp],0xc0029824
c0016448:	89 c3                	mov    ebx,eax
c001644a:	e8 45 b6 00 00       	call   c0021a94 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001644f:	58                   	pop    eax
c0016450:	5a                   	pop    edx
c0016451:	53                   	push   ebx
c0016452:	68 24 98 02 c0       	push   0xc0029824
c0016457:	e8 f0 b6 00 00       	call   c0021b4c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001645c:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001645f:	83 c4 10             	add    esp,0x10
c0016462:	39 30                	cmp    DWORD PTR [eax],esi
c0016464:	75 ba                	jne    c0016420 <Thr::processFromPID(int)+0x24>
c0016466:	a1 08 98 02 c0       	mov    eax,ds:0xc0029808
c001646b:	48                   	dec    eax
c001646c:	a3 08 98 02 c0       	mov    ds:0xc0029808,eax
c0016471:	74 09                	je     c001647c <Thr::processFromPID(int)+0x80>
c0016473:	90                   	nop
c0016474:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016477:	5b                   	pop    ebx
c0016478:	5e                   	pop    esi
c0016479:	5f                   	pop    edi
c001647a:	c3                   	ret    
c001647b:	90                   	nop
c001647c:	fb                   	sti    
c001647d:	eb f5                	jmp    c0016474 <Thr::processFromPID(int)+0x78>
c001647f:	90                   	nop
c0016480:	a1 08 98 02 c0       	mov    eax,ds:0xc0029808
c0016485:	48                   	dec    eax
c0016486:	a3 08 98 02 c0       	mov    ds:0xc0029808,eax
c001648b:	75 07                	jne    c0016494 <Thr::processFromPID(int)+0x98>
c001648d:	fb                   	sti    
c001648e:	5b                   	pop    ebx
c001648f:	5e                   	pop    esi
c0016490:	5f                   	pop    edi
c0016491:	c3                   	ret    
c0016492:	66 90                	xchg   ax,ax
c0016494:	5b                   	pop    ebx
c0016495:	31 c0                	xor    eax,eax
c0016497:	5e                   	pop    esi
c0016498:	5f                   	pop    edi
c0016499:	c3                   	ret    
c001649a:	66 90                	xchg   ax,ax

c001649c <unblockTask(ThreadControlBlock*)>:
c001649c:	53                   	push   ebx
c001649d:	83 ec 08             	sub    esp,0x8
c00164a0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00164a4:	fa                   	cli    
c00164a5:	ff 05 08 98 02 c0    	inc    DWORD PTR ds:0xc0029808
c00164ab:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00164ae:	85 c0                	test   eax,eax
c00164b0:	74 66                	je     c0016518 <unblockTask(ThreadControlBlock*)+0x7c>
c00164b2:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00164b5:	48                   	dec    eax
c00164b6:	74 38                	je     c00164f0 <unblockTask(ThreadControlBlock*)+0x54>
c00164b8:	83 ec 0c             	sub    esp,0xc
c00164bb:	68 24 98 02 c0       	push   0xc0029824
c00164c0:	e8 c7 b5 00 00       	call   c0021a8c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00164c5:	83 c4 10             	add    esp,0x10
c00164c8:	85 c0                	test   eax,eax
c00164ca:	75 1c                	jne    c00164e8 <unblockTask(ThreadControlBlock*)+0x4c>
c00164cc:	eb 5e                	jmp    c001652c <unblockTask(ThreadControlBlock*)+0x90>
c00164ce:	66 90                	xchg   ax,ax
c00164d0:	83 ec 08             	sub    esp,0x8
c00164d3:	50                   	push   eax
c00164d4:	68 24 98 02 c0       	push   0xc0029824
c00164d9:	e8 5e b9 00 00       	call   c0021e3c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c00164de:	83 c4 10             	add    esp,0x10
c00164e1:	85 c0                	test   eax,eax
c00164e3:	74 47                	je     c001652c <unblockTask(ThreadControlBlock*)+0x90>
c00164e5:	8d 76 00             	lea    esi,[esi+0x0]
c00164e8:	39 c3                	cmp    ebx,eax
c00164ea:	75 e4                	jne    c00164d0 <unblockTask(ThreadControlBlock*)+0x34>
c00164ec:	eb 12                	jmp    c0016500 <unblockTask(ThreadControlBlock*)+0x64>
c00164ee:	66 90                	xchg   ax,ax
c00164f0:	83 ec 0c             	sub    esp,0xc
c00164f3:	68 33 45 02 c0       	push   0xc0024533
c00164f8:	e8 34 62 ff ff       	call   c000c731 <Dbg::kprintf(char const*, ...)>
c00164fd:	83 c4 10             	add    esp,0x10
c0016500:	a1 08 98 02 c0       	mov    eax,ds:0xc0029808
c0016505:	48                   	dec    eax
c0016506:	a3 08 98 02 c0       	mov    ds:0xc0029808,eax
c001650b:	75 03                	jne    c0016510 <unblockTask(ThreadControlBlock*)+0x74>
c001650d:	fb                   	sti    
c001650e:	66 90                	xchg   ax,ax
c0016510:	83 c4 08             	add    esp,0x8
c0016513:	5b                   	pop    ebx
c0016514:	c3                   	ret    
c0016515:	8d 76 00             	lea    esi,[esi+0x0]
c0016518:	83 ec 0c             	sub    esp,0xc
c001651b:	68 1c 45 02 c0       	push   0xc002451c
c0016520:	e8 0c 62 ff ff       	call   c000c731 <Dbg::kprintf(char const*, ...)>
c0016525:	83 c4 10             	add    esp,0x10
c0016528:	eb d6                	jmp    c0016500 <unblockTask(ThreadControlBlock*)+0x64>
c001652a:	66 90                	xchg   ax,ax
c001652c:	83 ec 08             	sub    esp,0x8
c001652f:	53                   	push   ebx
c0016530:	68 24 98 02 c0       	push   0xc0029824
c0016535:	e8 12 b6 00 00       	call   c0021b4c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001653a:	83 c4 10             	add    esp,0x10
c001653d:	eb c1                	jmp    c0016500 <unblockTask(ThreadControlBlock*)+0x64>
c001653f:	90                   	nop

c0016540 <cleanupTerminatedTask(ThreadControlBlock*)>:
c0016540:	55                   	push   ebp
c0016541:	57                   	push   edi
c0016542:	56                   	push   esi
c0016543:	53                   	push   ebx
c0016544:	83 ec 1c             	sub    esp,0x1c
c0016547:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001654b:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001654e:	8b b8 16 05 00 00    	mov    edi,DWORD PTR [eax+0x516]
c0016554:	85 ff                	test   edi,edi
c0016556:	7e 24                	jle    c001657c <cleanupTerminatedTask(ThreadControlBlock*)+0x3c>
c0016558:	31 f6                	xor    esi,esi
c001655a:	66 90                	xchg   ax,ax
c001655c:	83 ec 0c             	sub    esp,0xc
c001655f:	ff b4 b0 1a 05 00 00 	push   DWORD PTR [eax+esi*4+0x51a]
c0016566:	46                   	inc    esi
c0016567:	e8 3b 32 ff ff       	call   c00097a7 <free>
c001656c:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001656f:	83 c4 10             	add    esp,0x10
c0016572:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c0016578:	7f e2                	jg     c001655c <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c001657a:	66 90                	xchg   ax,ax
c001657c:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0016586:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001658b:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c001658e:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0016591:	d3 c0                	rol    eax,cl
c0016593:	66 21 82 04 05 00 00 	and    WORD PTR [edx+0x504],ax
c001659a:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c001659d:	89 f7                	mov    edi,esi
c001659f:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c00165a7:	0f 85 73 01 00 00    	jne    c0016720 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e0>
c00165ad:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c00165b3:	85 ed                	test   ebp,ebp
c00165b5:	74 1d                	je     c00165d4 <cleanupTerminatedTask(ThreadControlBlock*)+0x94>
c00165b7:	83 ec 0c             	sub    esp,0xc
c00165ba:	55                   	push   ebp
c00165bb:	e8 80 c2 ff ff       	call   c0012840 <EnvVarContainer::~EnvVarContainer()>
c00165c0:	59                   	pop    ecx
c00165c1:	5e                   	pop    esi
c00165c2:	6a 0c                	push   0xc
c00165c4:	55                   	push   ebp
c00165c5:	e8 86 60 ff ff       	call   c000c650 <operator delete(void*, unsigned long)>
c00165ca:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00165cd:	83 c4 10             	add    esp,0x10
c00165d0:	89 f7                	mov    edi,esi
c00165d2:	66 90                	xchg   ax,ax
c00165d4:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c00165da:	85 c0                	test   eax,eax
c00165dc:	0f 84 b2 00 00 00    	je     c0016694 <cleanupTerminatedTask(ThreadControlBlock*)+0x154>
c00165e2:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c00165e5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00165e9:	31 c9                	xor    ecx,ecx
c00165eb:	eb 17                	jmp    c0016604 <cleanupTerminatedTask(ThreadControlBlock*)+0xc4>
c00165ed:	8d 76 00             	lea    esi,[esi+0x0]
c00165f0:	41                   	inc    ecx
c00165f1:	83 f9 10             	cmp    ecx,0x10
c00165f4:	0f 84 9a 00 00 00    	je     c0016694 <cleanupTerminatedTask(ThreadControlBlock*)+0x154>
c00165fa:	66 90                	xchg   ax,ax
c00165fc:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0016602:	66 90                	xchg   ax,ax
c0016604:	0f b7 90 04 05 00 00 	movzx  edx,WORD PTR [eax+0x504]
c001660b:	d3 fa                	sar    edx,cl
c001660d:	83 e2 01             	and    edx,0x1
c0016610:	74 de                	je     c00165f0 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0016612:	8d 14 c9             	lea    edx,[ecx+ecx*8]
c0016615:	01 d2                	add    edx,edx
c0016617:	01 ca                	add    edx,ecx
c0016619:	8d 14 92             	lea    edx,[edx+edx*4]
c001661c:	01 d0                	add    eax,edx
c001661e:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c0016624:	83 fd 07             	cmp    ebp,0x7
c0016627:	75 c7                	jne    c00165f0 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0016629:	05 40 02 00 00       	add    eax,0x240
c001662e:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c0016631:	83 fd ff             	cmp    ebp,0xffffffff
c0016634:	0f 8c ee 00 00 00    	jl     c0016728 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e8>
c001663a:	0f 84 ac 01 00 00    	je     c00167ec <cleanupTerminatedTask(ThreadControlBlock*)+0x2ac>
c0016640:	85 ed                	test   ebp,ebp
c0016642:	0f 84 90 01 00 00    	je     c00167d8 <cleanupTerminatedTask(ThreadControlBlock*)+0x298>
c0016648:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001664a:	75 a4                	jne    c00165f0 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c001664c:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0016652:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0016656:	01 d0                	add    eax,edx
c0016658:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001665c:	83 ec 0c             	sub    esp,0xc
c001665f:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c0016665:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016668:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001666e:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c0016675:	50                   	push   eax
c0016676:	e8 21 fe ff ff       	call   c001649c <unblockTask(ThreadControlBlock*)>
c001667b:	83 c4 10             	add    esp,0x10
c001667e:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0016681:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016685:	89 f7                	mov    edi,esi
c0016687:	41                   	inc    ecx
c0016688:	83 f9 10             	cmp    ecx,0x10
c001668b:	0f 85 6b ff ff ff    	jne    c00165fc <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0016691:	8d 76 00             	lea    esi,[esi+0x0]
c0016694:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c001669a:	85 c0                	test   eax,eax
c001669c:	74 62                	je     c0016700 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c0>
c001669e:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c00166a4:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c00166aa:	74 54                	je     c0016700 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c0>
c00166ac:	83 ec 0c             	sub    esp,0xc
c00166af:	68 24 98 02 c0       	push   0xc0029824
c00166b4:	e8 d3 b3 00 00       	call   c0021a8c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00166b9:	c7 04 24 24 98 02 c0 	mov    DWORD PTR [esp],0xc0029824
c00166c0:	89 c7                	mov    edi,eax
c00166c2:	e8 a9 b3 00 00       	call   c0021a70 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00166c7:	83 c4 10             	add    esp,0x10
c00166ca:	84 c0                	test   al,al
c00166cc:	0f 84 ce 00 00 00    	je     c00167a0 <cleanupTerminatedTask(ThreadControlBlock*)+0x260>
c00166d2:	66 90                	xchg   ax,ax
c00166d4:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00166d7:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c00166dd:	85 d2                	test   edx,edx
c00166df:	74 0f                	je     c00166f0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1b0>
c00166e1:	83 ec 0c             	sub    esp,0xc
c00166e4:	8b 02                	mov    eax,DWORD PTR [edx]
c00166e6:	52                   	push   edx
c00166e7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00166ea:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00166ed:	83 c4 10             	add    esp,0x10
c00166f0:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c00166fa:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c00166fd:	8d 76 00             	lea    esi,[esi+0x0]
c0016700:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c0016706:	85 db                	test   ebx,ebx
c0016708:	74 16                	je     c0016720 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e0>
c001670a:	83 ec 0c             	sub    esp,0xc
c001670d:	53                   	push   ebx
c001670e:	e8 b1 51 ff ff       	call   c000b8c4 <VAS::~VAS()>
c0016713:	58                   	pop    eax
c0016714:	5a                   	pop    edx
c0016715:	6a 14                	push   0x14
c0016717:	53                   	push   ebx
c0016718:	e8 33 5f ff ff       	call   c000c650 <operator delete(void*, unsigned long)>
c001671d:	83 c4 10             	add    esp,0x10
c0016720:	83 c4 1c             	add    esp,0x1c
c0016723:	5b                   	pop    ebx
c0016724:	5e                   	pop    esi
c0016725:	5f                   	pop    edi
c0016726:	5d                   	pop    ebp
c0016727:	c3                   	ret    
c0016728:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001672c:	83 ec 0c             	sub    esp,0xc
c001672f:	68 e4 45 02 c0       	push   0xc00245e4
c0016734:	e8 62 c3 ff ff       	call   c0012a9b <Krnl::panic(char const*)>
c0016739:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c001673c:	83 c4 10             	add    esp,0x10
c001673f:	89 f7                	mov    edi,esi
c0016741:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016745:	e9 a6 fe ff ff       	jmp    c00165f0 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c001674a:	66 90                	xchg   ax,ax
c001674c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016752:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c0016758:	75 1e                	jne    c0016778 <cleanupTerminatedTask(ThreadControlBlock*)+0x238>
c001675a:	83 ec 0c             	sub    esp,0xc
c001675d:	68 4c 46 02 c0       	push   0xc002464c
c0016762:	e8 ca 5f ff ff       	call   c000c731 <Dbg::kprintf(char const*, ...)>
c0016767:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001676e:	e8 65 fa ff ff       	call   c00161d8 <blockTask(TaskState)>
c0016773:	83 c4 10             	add    esp,0x10
c0016776:	66 90                	xchg   ax,ax
c0016778:	83 ec 08             	sub    esp,0x8
c001677b:	56                   	push   esi
c001677c:	68 24 98 02 c0       	push   0xc0029824
c0016781:	e8 c6 b3 00 00       	call   c0021b4c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016786:	c7 04 24 24 98 02 c0 	mov    DWORD PTR [esp],0xc0029824
c001678d:	e8 fa b2 00 00       	call   c0021a8c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016792:	83 c4 10             	add    esp,0x10
c0016795:	39 f8                	cmp    eax,edi
c0016797:	0f 84 37 ff ff ff    	je     c00166d4 <cleanupTerminatedTask(ThreadControlBlock*)+0x194>
c001679d:	8d 76 00             	lea    esi,[esi+0x0]
c00167a0:	83 ec 0c             	sub    esp,0xc
c00167a3:	68 24 98 02 c0       	push   0xc0029824
c00167a8:	e8 df b2 00 00       	call   c0021a8c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00167ad:	c7 04 24 24 98 02 c0 	mov    DWORD PTR [esp],0xc0029824
c00167b4:	89 c6                	mov    esi,eax
c00167b6:	e8 d9 b2 00 00       	call   c0021a94 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00167bb:	83 c4 10             	add    esp,0x10
c00167be:	39 f3                	cmp    ebx,esi
c00167c0:	74 b6                	je     c0016778 <cleanupTerminatedTask(ThreadControlBlock*)+0x238>
c00167c2:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c00167c5:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00167c8:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c00167ce:	75 a8                	jne    c0016778 <cleanupTerminatedTask(ThreadControlBlock*)+0x238>
c00167d0:	e9 77 ff ff ff       	jmp    c001674c <cleanupTerminatedTask(ThreadControlBlock*)+0x20c>
c00167d5:	8d 76 00             	lea    esi,[esi+0x0]
c00167d8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00167dc:	83 ec 0c             	sub    esp,0xc
c00167df:	68 18 46 02 c0       	push   0xc0024618
c00167e4:	e9 4b ff ff ff       	jmp    c0016734 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f4>
c00167e9:	8d 76 00             	lea    esi,[esi+0x0]
c00167ec:	8b 36                	mov    esi,DWORD PTR [esi]
c00167ee:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00167f2:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c00167f5:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00167f8:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c00167fe:	01 d7                	add    edi,edx
c0016800:	89 f8                	mov    eax,edi
c0016802:	e9 51 fe ff ff       	jmp    c0016658 <cleanupTerminatedTask(ThreadControlBlock*)+0x118>
c0016807:	90                   	nop

c0016808 <cleanerTaskFunction(void*)>:
c0016808:	53                   	push   ebx
c0016809:	83 ec 08             	sub    esp,0x8
c001680c:	a1 08 98 02 c0       	mov    eax,ds:0xc0029808
c0016811:	48                   	dec    eax
c0016812:	a3 08 98 02 c0       	mov    ds:0xc0029808,eax
c0016817:	75 03                	jne    c001681c <cleanerTaskFunction(void*)+0x14>
c0016819:	fb                   	sti    
c001681a:	66 90                	xchg   ax,ax
c001681c:	fa                   	cli    
c001681d:	a1 08 98 02 c0       	mov    eax,ds:0xc0029808
c0016822:	80 3d ec 97 02 c0 00 	cmp    BYTE PTR ds:0xc00297ec,0x0
c0016829:	8d 50 01             	lea    edx,[eax+0x1]
c001682c:	89 15 08 98 02 c0    	mov    DWORD PTR ds:0xc0029808,edx
c0016832:	0f 84 ac 00 00 00    	je     c00168e4 <cleanerTaskFunction(void*)+0xdc>
c0016838:	a3 08 98 02 c0       	mov    ds:0xc0029808,eax
c001683d:	85 c0                	test   eax,eax
c001683f:	75 03                	jne    c0016844 <cleanerTaskFunction(void*)+0x3c>
c0016841:	fb                   	sti    
c0016842:	66 90                	xchg   ax,ax
c0016844:	c6 05 ec 97 02 c0 00 	mov    BYTE PTR ds:0xc00297ec,0x0
c001684b:	fa                   	cli    
c001684c:	ff 05 08 98 02 c0    	inc    DWORD PTR ds:0xc0029808
c0016852:	ff 05 04 98 02 c0    	inc    DWORD PTR ds:0xc0029804
c0016858:	fa                   	cli    
c0016859:	ff 05 08 98 02 c0    	inc    DWORD PTR ds:0xc0029808
c001685f:	eb 2b                	jmp    c001688c <cleanerTaskFunction(void*)+0x84>
c0016861:	8d 76 00             	lea    esi,[esi+0x0]
c0016864:	83 ec 0c             	sub    esp,0xc
c0016867:	68 0c 98 02 c0       	push   0xc002980c
c001686c:	e8 1b b2 00 00       	call   c0021a8c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016871:	c7 04 24 0c 98 02 c0 	mov    DWORD PTR [esp],0xc002980c
c0016878:	89 c3                	mov    ebx,eax
c001687a:	e8 15 b2 00 00       	call   c0021a94 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001687f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016882:	e8 b9 fc ff ff       	call   c0016540 <cleanupTerminatedTask(ThreadControlBlock*)>
c0016887:	83 c4 10             	add    esp,0x10
c001688a:	66 90                	xchg   ax,ax
c001688c:	83 ec 0c             	sub    esp,0xc
c001688f:	68 0c 98 02 c0       	push   0xc002980c
c0016894:	e8 d7 b1 00 00       	call   c0021a70 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016899:	83 c4 10             	add    esp,0x10
c001689c:	84 c0                	test   al,al
c001689e:	74 c4                	je     c0016864 <cleanerTaskFunction(void*)+0x5c>
c00168a0:	a1 08 98 02 c0       	mov    eax,ds:0xc0029808
c00168a5:	48                   	dec    eax
c00168a6:	a3 08 98 02 c0       	mov    ds:0xc0029808,eax
c00168ab:	75 03                	jne    c00168b0 <cleanerTaskFunction(void*)+0xa8>
c00168ad:	fb                   	sti    
c00168ae:	66 90                	xchg   ax,ax
c00168b0:	a1 04 98 02 c0       	mov    eax,ds:0xc0029804
c00168b5:	48                   	dec    eax
c00168b6:	a3 04 98 02 c0       	mov    ds:0xc0029804,eax
c00168bb:	0f 85 4b ff ff ff    	jne    c001680c <cleanerTaskFunction(void*)+0x4>
c00168c1:	a1 00 98 02 c0       	mov    eax,ds:0xc0029800
c00168c6:	85 c0                	test   eax,eax
c00168c8:	0f 84 3e ff ff ff    	je     c001680c <cleanerTaskFunction(void*)+0x4>
c00168ce:	c7 05 00 98 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029800,0x0
c00168d8:	e8 03 f7 ff ff       	call   c0015fe0 <schedule()>
c00168dd:	e9 2a ff ff ff       	jmp    c001680c <cleanerTaskFunction(void*)+0x4>
c00168e2:	66 90                	xchg   ax,ax
c00168e4:	83 ec 0c             	sub    esp,0xc
c00168e7:	6a 02                	push   0x2
c00168e9:	e8 c2 f8 ff ff       	call   c00161b0 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c00168ee:	83 c4 10             	add    esp,0x10
c00168f1:	e9 4e ff ff ff       	jmp    c0016844 <cleanerTaskFunction(void*)+0x3c>
c00168f6:	66 90                	xchg   ax,ax

c00168f8 <terminateTask(int)>:
c00168f8:	83 ec 14             	sub    esp,0x14
c00168fb:	fa                   	cli    
c00168fc:	ff 05 08 98 02 c0    	inc    DWORD PTR ds:0xc0029808
c0016902:	ff 05 04 98 02 c0    	inc    DWORD PTR ds:0xc0029804
c0016908:	fa                   	cli    
c0016909:	ff 05 08 98 02 c0    	inc    DWORD PTR ds:0xc0029808
c001690f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016913:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016918:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c001691b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016920:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0016923:	50                   	push   eax
c0016924:	68 0c 98 02 c0       	push   0xc002980c
c0016929:	e8 1e b2 00 00       	call   c0021b4c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001692e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016933:	83 c4 10             	add    esp,0x10
c0016936:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001693d:	a1 e8 97 02 c0       	mov    eax,ds:0xc00297e8
c0016942:	85 c0                	test   eax,eax
c0016944:	74 5e                	je     c00169a4 <terminateTask(int)+0xac>
c0016946:	83 ec 0c             	sub    esp,0xc
c0016949:	c6 05 ec 97 02 c0 01 	mov    BYTE PTR ds:0xc00297ec,0x1
c0016950:	50                   	push   eax
c0016951:	e8 46 fb ff ff       	call   c001649c <unblockTask(ThreadControlBlock*)>
c0016956:	83 c4 10             	add    esp,0x10
c0016959:	8d 76 00             	lea    esi,[esi+0x0]
c001695c:	a1 08 98 02 c0       	mov    eax,ds:0xc0029808
c0016961:	48                   	dec    eax
c0016962:	a3 08 98 02 c0       	mov    ds:0xc0029808,eax
c0016967:	75 03                	jne    c001696c <terminateTask(int)+0x74>
c0016969:	fb                   	sti    
c001696a:	66 90                	xchg   ax,ax
c001696c:	a1 04 98 02 c0       	mov    eax,ds:0xc0029804
c0016971:	48                   	dec    eax
c0016972:	a3 04 98 02 c0       	mov    ds:0xc0029804,eax
c0016977:	75 0b                	jne    c0016984 <terminateTask(int)+0x8c>
c0016979:	83 3d 00 98 02 c0 00 	cmp    DWORD PTR ds:0xc0029800,0x0
c0016980:	75 36                	jne    c00169b8 <terminateTask(int)+0xc0>
c0016982:	66 90                	xchg   ax,ax
c0016984:	a1 08 98 02 c0       	mov    eax,ds:0xc0029808
c0016989:	48                   	dec    eax
c001698a:	a3 08 98 02 c0       	mov    ds:0xc0029808,eax
c001698f:	75 03                	jne    c0016994 <terminateTask(int)+0x9c>
c0016991:	fb                   	sti    
c0016992:	66 90                	xchg   ax,ax
c0016994:	fa                   	cli    
c0016995:	ff 05 08 98 02 c0    	inc    DWORD PTR ds:0xc0029808
c001699b:	90                   	nop
c001699c:	e8 3f f6 ff ff       	call   c0015fe0 <schedule()>
c00169a1:	eb e1                	jmp    c0016984 <terminateTask(int)+0x8c>
c00169a3:	90                   	nop
c00169a4:	83 ec 0c             	sub    esp,0xc
c00169a7:	68 4a 45 02 c0       	push   0xc002454a
c00169ac:	e8 80 5d ff ff       	call   c000c731 <Dbg::kprintf(char const*, ...)>
c00169b1:	83 c4 10             	add    esp,0x10
c00169b4:	eb a6                	jmp    c001695c <terminateTask(int)+0x64>
c00169b6:	66 90                	xchg   ax,ax
c00169b8:	c7 05 00 98 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029800,0x0
c00169c2:	eb d8                	jmp    c001699c <terminateTask(int)+0xa4>

c00169c4 <Thr::terminateFromIRQ(int)>:
c00169c4:	83 ec 18             	sub    esp,0x18
c00169c7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00169cb:	e8 28 ff ff ff       	call   c00168f8 <terminateTask(int)>

c00169d0 <Semaphore::release()>:
c00169d0:	83 ec 0c             	sub    esp,0xc
c00169d3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00169d7:	fa                   	cli    
c00169d8:	a1 04 98 02 c0       	mov    eax,ds:0xc0029804
c00169dd:	ff 05 08 98 02 c0    	inc    DWORD PTR ds:0xc0029808
c00169e3:	8d 48 01             	lea    ecx,[eax+0x1]
c00169e6:	89 0d 04 98 02 c0    	mov    DWORD PTR ds:0xc0029804,ecx
c00169ec:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00169ef:	85 c9                	test   ecx,ecx
c00169f1:	74 41                	je     c0016a34 <Semaphore::release()+0x64>
c00169f3:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c00169f6:	83 ec 0c             	sub    esp,0xc
c00169f9:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00169fc:	51                   	push   ecx
c00169fd:	e8 9a fa ff ff       	call   c001649c <unblockTask(ThreadControlBlock*)>
c0016a02:	a1 04 98 02 c0       	mov    eax,ds:0xc0029804
c0016a07:	83 c4 10             	add    esp,0x10
c0016a0a:	48                   	dec    eax
c0016a0b:	90                   	nop
c0016a0c:	a3 04 98 02 c0       	mov    ds:0xc0029804,eax
c0016a11:	85 c0                	test   eax,eax
c0016a13:	75 0b                	jne    c0016a20 <Semaphore::release()+0x50>
c0016a15:	a1 00 98 02 c0       	mov    eax,ds:0xc0029800
c0016a1a:	85 c0                	test   eax,eax
c0016a1c:	75 1e                	jne    c0016a3c <Semaphore::release()+0x6c>
c0016a1e:	66 90                	xchg   ax,ax
c0016a20:	a1 08 98 02 c0       	mov    eax,ds:0xc0029808
c0016a25:	48                   	dec    eax
c0016a26:	a3 08 98 02 c0       	mov    ds:0xc0029808,eax
c0016a2b:	75 03                	jne    c0016a30 <Semaphore::release()+0x60>
c0016a2d:	fb                   	sti    
c0016a2e:	66 90                	xchg   ax,ax
c0016a30:	83 c4 0c             	add    esp,0xc
c0016a33:	c3                   	ret    
c0016a34:	ff 4a 0c             	dec    DWORD PTR [edx+0xc]
c0016a37:	eb d3                	jmp    c0016a0c <Semaphore::release()+0x3c>
c0016a39:	8d 76 00             	lea    esi,[esi+0x0]
c0016a3c:	c7 05 00 98 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029800,0x0
c0016a46:	e8 95 f5 ff ff       	call   c0015fe0 <schedule()>
c0016a4b:	eb d3                	jmp    c0016a20 <Semaphore::release()+0x50>
c0016a4d:	8d 76 00             	lea    esi,[esi+0x0]

c0016a50 <__static_initialization_and_destruction_0(int, int)>:
c0016a50:	83 ec 0c             	sub    esp,0xc
c0016a53:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0016a58:	0f 85 8e 00 00 00    	jne    c0016aec <__static_initialization_and_destruction_0(int, int)+0x9c>
c0016a5e:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0016a66:	0f 85 80 00 00 00    	jne    c0016aec <__static_initialization_and_destruction_0(int, int)+0x9c>
c0016a6c:	83 ec 0c             	sub    esp,0xc
c0016a6f:	68 24 98 02 c0       	push   0xc0029824
c0016a74:	e8 7f b3 00 00       	call   c0021df8 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0016a79:	83 c4 10             	add    esp,0x10
c0016a7c:	83 ec 04             	sub    esp,0x4
c0016a7f:	68 3c 58 02 c0       	push   0xc002583c
c0016a84:	68 24 98 02 c0       	push   0xc0029824
c0016a89:	68 a8 1d 02 c0       	push   0xc0021da8
c0016a8e:	e8 37 5b ff ff       	call   c000c5ca <__cxa_atexit>
c0016a93:	83 c4 10             	add    esp,0x10
c0016a96:	83 ec 0c             	sub    esp,0xc
c0016a99:	68 18 98 02 c0       	push   0xc0029818
c0016a9e:	e8 55 b3 00 00       	call   c0021df8 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0016aa3:	83 c4 10             	add    esp,0x10
c0016aa6:	83 ec 04             	sub    esp,0x4
c0016aa9:	68 3c 58 02 c0       	push   0xc002583c
c0016aae:	68 18 98 02 c0       	push   0xc0029818
c0016ab3:	68 a8 1d 02 c0       	push   0xc0021da8
c0016ab8:	e8 0d 5b ff ff       	call   c000c5ca <__cxa_atexit>
c0016abd:	83 c4 10             	add    esp,0x10
c0016ac0:	83 ec 0c             	sub    esp,0xc
c0016ac3:	68 0c 98 02 c0       	push   0xc002980c
c0016ac8:	e8 2b b3 00 00       	call   c0021df8 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0016acd:	83 c4 10             	add    esp,0x10
c0016ad0:	83 ec 04             	sub    esp,0x4
c0016ad3:	68 3c 58 02 c0       	push   0xc002583c
c0016ad8:	68 0c 98 02 c0       	push   0xc002980c
c0016add:	68 a8 1d 02 c0       	push   0xc0021da8
c0016ae2:	e8 e3 5a ff ff       	call   c000c5ca <__cxa_atexit>
c0016ae7:	83 c4 10             	add    esp,0x10
c0016aea:	66 90                	xchg   ax,ax
c0016aec:	90                   	nop
c0016aed:	83 c4 0c             	add    esp,0xc
c0016af0:	c3                   	ret    
c0016af1:	8d 76 00             	lea    esi,[esi+0x0]

c0016af4 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c0016af4:	83 ec 0c             	sub    esp,0xc
c0016af7:	83 ec 08             	sub    esp,0x8
c0016afa:	68 ff ff 00 00       	push   0xffff
c0016aff:	6a 01                	push   0x1
c0016b01:	e8 4a ff ff ff       	call   c0016a50 <__static_initialization_and_destruction_0(int, int)>
c0016b06:	83 c4 10             	add    esp,0x10
c0016b09:	83 c4 0c             	add    esp,0xc
c0016b0c:	c3                   	ret    

c0016b0d <Vm::inbv(unsigned short)>:
c0016b0d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0016b11:	66 81 fa fe fe       	cmp    dx,0xfefe
c0016b16:	75 06                	jne    c0016b1e <Vm::inbv(unsigned short)+0x11>
c0016b18:	a0 6c 98 02 c0       	mov    al,ds:0xc002986c
c0016b1d:	c3                   	ret    
c0016b1e:	ec                   	in     al,dx
c0016b1f:	c3                   	ret    

c0016b20 <Vm::outbv(unsigned short, unsigned char)>:
c0016b20:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0016b24:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016b28:	66 81 fa fe fe       	cmp    dx,0xfefe
c0016b2d:	75 25                	jne    c0016b54 <Vm::outbv(unsigned short, unsigned char)+0x34>
c0016b2f:	8b 0d 6c 98 02 c0    	mov    ecx,DWORD PTR ds:0xc002986c
c0016b35:	8d 51 01             	lea    edx,[ecx+0x1]
c0016b38:	88 81 80 98 02 c0    	mov    BYTE PTR [ecx-0x3ffd6780],al
c0016b3e:	89 15 6c 98 02 c0    	mov    DWORD PTR ds:0xc002986c,edx
c0016b44:	83 fa 20             	cmp    edx,0x20
c0016b47:	75 0c                	jne    c0016b55 <Vm::outbv(unsigned short, unsigned char)+0x35>
c0016b49:	c7 05 6c 98 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc002986c,0x1f
c0016b53:	c3                   	ret    
c0016b54:	ee                   	out    dx,al
c0016b55:	c3                   	ret    

c0016b56 <Vm::realToLinear(unsigned short, unsigned short)>:
c0016b56:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016b5b:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016b60:	c1 e0 04             	shl    eax,0x4
c0016b63:	01 d0                	add    eax,edx
c0016b65:	c3                   	ret    

c0016b66 <Vm::getSegment(unsigned int)>:
c0016b66:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016b6a:	c1 e8 10             	shr    eax,0x10
c0016b6d:	c3                   	ret    

c0016b6e <Vm::getOffset(unsigned int)>:
c0016b6e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016b72:	c3                   	ret    

c0016b73 <Vm::mainloop2()>:
c0016b73:	83 ec 18             	sub    esp,0x18
c0016b76:	fa                   	cli    
c0016b77:	ff 05 08 98 02 c0    	inc    DWORD PTR ds:0xc0029808
c0016b7d:	6a 02                	push   0x2
c0016b7f:	c6 05 65 98 02 c0 01 	mov    BYTE PTR ds:0xc0029865,0x1
c0016b86:	e8 25 f6 ff ff       	call   c00161b0 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0016b8b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016b90:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0016b94:	52                   	push   edx
c0016b95:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c0016b99:	52                   	push   edx
c0016b9a:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c0016b9e:	52                   	push   edx
c0016b9f:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c0016ba3:	50                   	push   eax
c0016ba4:	e8 86 96 fe ff       	call   c000022f <goToVM86>
c0016ba9:	83 c4 2c             	add    esp,0x2c
c0016bac:	c3                   	ret    

c0016bad <Vm::mainVm8086Loop(void*)>:
c0016bad:	a1 08 98 02 c0       	mov    eax,ds:0xc0029808
c0016bb2:	48                   	dec    eax
c0016bb3:	a3 08 98 02 c0       	mov    ds:0xc0029808,eax
c0016bb8:	75 01                	jne    c0016bbb <Vm::mainVm8086Loop(void*)+0xe>
c0016bba:	fb                   	sti    
c0016bbb:	eb b6                	jmp    c0016b73 <Vm::mainloop2()>

c0016bbd <Vm::mainloop3(unsigned long)>:
c0016bbd:	83 ec 18             	sub    esp,0x18
c0016bc0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016bc4:	fa                   	cli    
c0016bc5:	ff 05 08 98 02 c0    	inc    DWORD PTR ds:0xc0029808
c0016bcb:	6a 02                	push   0x2
c0016bcd:	c6 05 64 98 02 c0 01 	mov    BYTE PTR ds:0xc0029864,0x1
c0016bd4:	a3 60 98 02 c0       	mov    ds:0xc0029860,eax
c0016bd9:	e8 d2 f5 ff ff       	call   c00161b0 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0016bde:	83 c4 1c             	add    esp,0x1c
c0016be1:	eb 90                	jmp    c0016b73 <Vm::mainloop2()>

c0016be3 <Vm::initialise8086()>:
c0016be3:	83 ec 0c             	sub    esp,0xc
c0016be6:	68 80 00 00 00       	push   0x80
c0016beb:	6a 00                	push   0x0
c0016bed:	68 ad 6b 01 c0       	push   0xc0016bad
c0016bf2:	ff 35 30 98 02 c0    	push   DWORD PTR ds:0xc0029830
c0016bf8:	e8 c7 f1 ff ff       	call   c0015dc4 <Process::createThread(void (*)(void*), void*, int)>
c0016bfd:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0016c04:	a3 68 98 02 c0       	mov    ds:0xc0029868,eax
c0016c09:	68 00 01 00 00       	push   0x100
c0016c0e:	a1 30 98 02 c0       	mov    eax,ds:0xc0029830
c0016c13:	6a 00                	push   0x0
c0016c15:	6a 00                	push   0x0
c0016c17:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016c1d:	e8 16 51 ff ff       	call   c000bd38 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0016c22:	83 c4 2c             	add    esp,0x2c
c0016c25:	c3                   	ret    

c0016c26 <Vm::finish8086()>:
c0016c26:	53                   	push   ebx
c0016c27:	83 ec 08             	sub    esp,0x8
c0016c2a:	fa                   	cli    
c0016c2b:	ff 05 08 98 02 c0    	inc    DWORD PTR ds:0xc0029808
c0016c31:	80 3d 64 98 02 c0 00 	cmp    BYTE PTR ds:0xc0029864,0x0
c0016c38:	75 15                	jne    c0016c4f <Vm::finish8086()+0x29>
c0016c3a:	e8 a1 f3 ff ff       	call   c0015fe0 <schedule()>
c0016c3f:	a1 08 98 02 c0       	mov    eax,ds:0xc0029808
c0016c44:	48                   	dec    eax
c0016c45:	a3 08 98 02 c0       	mov    ds:0xc0029808,eax
c0016c4a:	75 de                	jne    c0016c2a <Vm::finish8086()+0x4>
c0016c4c:	fb                   	sti    
c0016c4d:	eb db                	jmp    c0016c2a <Vm::finish8086()+0x4>
c0016c4f:	83 ec 0c             	sub    esp,0xc
c0016c52:	8b 1d 60 98 02 c0    	mov    ebx,DWORD PTR ds:0xc0029860
c0016c58:	ff 35 68 98 02 c0    	push   DWORD PTR ds:0xc0029868
c0016c5e:	c6 05 64 98 02 c0 00 	mov    BYTE PTR ds:0xc0029864,0x0
c0016c65:	e8 32 f8 ff ff       	call   c001649c <unblockTask(ThreadControlBlock*)>
c0016c6a:	a1 08 98 02 c0       	mov    eax,ds:0xc0029808
c0016c6f:	83 c4 10             	add    esp,0x10
c0016c72:	8d 50 ff             	lea    edx,[eax-0x1]
c0016c75:	89 15 08 98 02 c0    	mov    DWORD PTR ds:0xc0029808,edx
c0016c7b:	85 d2                	test   edx,edx
c0016c7d:	75 01                	jne    c0016c80 <Vm::finish8086()+0x5a>
c0016c7f:	fb                   	sti    
c0016c80:	89 d8                	mov    eax,ebx
c0016c82:	83 c4 08             	add    esp,0x8
c0016c85:	5b                   	pop    ebx
c0016c86:	c3                   	ret    

c0016c87 <Vm::getOutput8086(unsigned char*)>:
c0016c87:	57                   	push   edi
c0016c88:	8b 0d 6c 98 02 c0    	mov    ecx,DWORD PTR ds:0xc002986c
c0016c8e:	56                   	push   esi
c0016c8f:	be 80 98 02 c0       	mov    esi,0xc0029880
c0016c94:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0016c98:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016c9a:	a1 6c 98 02 c0       	mov    eax,ds:0xc002986c
c0016c9f:	5e                   	pop    esi
c0016ca0:	c7 05 6c 98 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002986c,0x0
c0016caa:	5f                   	pop    edi
c0016cab:	c3                   	ret    

c0016cac <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0016cac:	55                   	push   ebp
c0016cad:	57                   	push   edi
c0016cae:	56                   	push   esi
c0016caf:	53                   	push   ebx
c0016cb0:	83 ec 0c             	sub    esp,0xc
c0016cb3:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0016cb7:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0016cbb:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0016cbf:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0016cc3:	fa                   	cli    
c0016cc4:	ff 05 08 98 02 c0    	inc    DWORD PTR ds:0xc0029808
c0016cca:	80 3d 65 98 02 c0 00 	cmp    BYTE PTR ds:0xc0029865,0x0
c0016cd1:	75 15                	jne    c0016ce8 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3c>
c0016cd3:	e8 08 f3 ff ff       	call   c0015fe0 <schedule()>
c0016cd8:	a1 08 98 02 c0       	mov    eax,ds:0xc0029808
c0016cdd:	48                   	dec    eax
c0016cde:	a3 08 98 02 c0       	mov    ds:0xc0029808,eax
c0016ce3:	75 de                	jne    c0016cc3 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0016ce5:	fb                   	sti    
c0016ce6:	eb db                	jmp    c0016cc3 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0016ce8:	a1 68 98 02 c0       	mov    eax,ds:0xc0029868
c0016ced:	c7 05 6c 98 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002986c,0x0
c0016cf7:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c0016cfb:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c0016cff:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0016d03:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0016d07:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0016d0b:	0f b7 ff             	movzx  edi,di
c0016d0e:	0f b7 f6             	movzx  esi,si
c0016d11:	50                   	push   eax
c0016d12:	6a 20                	push   0x20
c0016d14:	6a 00                	push   0x0
c0016d16:	68 80 98 02 c0       	push   0xc0029880
c0016d1b:	e8 88 97 fe ff       	call   c00004a8 <memset>
c0016d20:	5a                   	pop    edx
c0016d21:	59                   	pop    ecx
c0016d22:	57                   	push   edi
c0016d23:	56                   	push   esi
c0016d24:	e8 2d fe ff ff       	call   c0016b56 <Vm::realToLinear(unsigned short, unsigned short)>
c0016d29:	83 c4 10             	add    esp,0x10
c0016d2c:	89 c7                	mov    edi,eax
c0016d2e:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0016d32:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0016d36:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016d38:	a1 08 98 02 c0       	mov    eax,ds:0xc0029808
c0016d3d:	c6 05 65 98 02 c0 00 	mov    BYTE PTR ds:0xc0029865,0x0
c0016d44:	48                   	dec    eax
c0016d45:	a3 08 98 02 c0       	mov    ds:0xc0029808,eax
c0016d4a:	75 01                	jne    c0016d4d <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa1>
c0016d4c:	fb                   	sti    
c0016d4d:	83 ec 0c             	sub    esp,0xc
c0016d50:	ff 35 68 98 02 c0    	push   DWORD PTR ds:0xc0029868
c0016d56:	e8 41 f7 ff ff       	call   c001649c <unblockTask(ThreadControlBlock*)>
c0016d5b:	83 c4 1c             	add    esp,0x1c
c0016d5e:	b0 01                	mov    al,0x1
c0016d60:	5b                   	pop    ebx
c0016d61:	5e                   	pop    esi
c0016d62:	5f                   	pop    edi
c0016d63:	5d                   	pop    ebp
c0016d64:	c3                   	ret    

c0016d65 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0016d65:	55                   	push   ebp
c0016d66:	57                   	push   edi
c0016d67:	56                   	push   esi
c0016d68:	53                   	push   ebx
c0016d69:	83 ec 2c             	sub    esp,0x2c
c0016d6c:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0016d70:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0016d74:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0016d78:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0016d7c:	fa                   	cli    
c0016d7d:	ff 05 08 98 02 c0    	inc    DWORD PTR ds:0xc0029808
c0016d83:	0f b6 35 65 98 02 c0 	movzx  esi,BYTE PTR ds:0xc0029865
c0016d8a:	89 f0                	mov    eax,esi
c0016d8c:	84 c0                	test   al,al
c0016d8e:	75 1d                	jne    c0016dad <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x48>
c0016d90:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0016d94:	e8 47 f2 ff ff       	call   c0015fe0 <schedule()>
c0016d99:	a1 08 98 02 c0       	mov    eax,ds:0xc0029808
c0016d9e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016da2:	48                   	dec    eax
c0016da3:	a3 08 98 02 c0       	mov    ds:0xc0029808,eax
c0016da8:	75 d2                	jne    c0016d7c <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0016daa:	fb                   	sti    
c0016dab:	eb cf                	jmp    c0016d7c <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0016dad:	a1 68 98 02 c0       	mov    eax,ds:0xc0029868
c0016db2:	c7 05 6c 98 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002986c,0x0
c0016dbc:	66 89 50 59          	mov    WORD PTR [eax+0x59],dx
c0016dc0:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0016dc4:	66 89 68 55          	mov    WORD PTR [eax+0x55],bp
c0016dc8:	66 89 78 57          	mov    WORD PTR [eax+0x57],di
c0016dcc:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0016dd0:	50                   	push   eax
c0016dd1:	6a 20                	push   0x20
c0016dd3:	6a 00                	push   0x0
c0016dd5:	68 80 98 02 c0       	push   0xc0029880
c0016dda:	e8 c9 96 fe ff       	call   c00004a8 <memset>
c0016ddf:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0016de6:	e8 ac 29 ff ff       	call   c0009797 <malloc>
c0016deb:	83 c4 0c             	add    esp,0xc
c0016dee:	89 c3                	mov    ebx,eax
c0016df0:	ff 35 30 98 02 c0    	push   DWORD PTR ds:0xc0029830
c0016df6:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016dfa:	50                   	push   eax
c0016dfb:	e8 9c 5e ff ff       	call   c000cc9c <File::File(char const*, Process*)>
c0016e00:	83 c4 10             	add    esp,0x10
c0016e03:	85 db                	test   ebx,ebx
c0016e05:	75 0a                	jne    c0016e11 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xac>
c0016e07:	83 ec 0c             	sub    esp,0xc
c0016e0a:	68 74 46 02 c0       	push   0xc0024674
c0016e0f:	eb 3e                	jmp    c0016e4f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c0016e11:	50                   	push   eax
c0016e12:	8d 44 24 17          	lea    eax,[esp+0x17]
c0016e16:	50                   	push   eax
c0016e17:	8d 44 24 20          	lea    eax,[esp+0x20]
c0016e1b:	50                   	push   eax
c0016e1c:	53                   	push   ebx
c0016e1d:	e8 00 62 ff ff       	call   c000d022 <File::stat(unsigned long long*, bool*)>
c0016e22:	83 c4 10             	add    esp,0x10
c0016e25:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c0016e2a:	74 0a                	je     c0016e36 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c0016e2c:	83 ec 0c             	sub    esp,0xc
c0016e2f:	68 88 46 02 c0       	push   0xc0024688
c0016e34:	eb 19                	jmp    c0016e4f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c0016e36:	51                   	push   ecx
c0016e37:	51                   	push   ecx
c0016e38:	6a 01                	push   0x1
c0016e3a:	53                   	push   ebx
c0016e3b:	e8 36 5f ff ff       	call   c000cd76 <File::open(FileOpenMode)>
c0016e40:	83 c4 10             	add    esp,0x10
c0016e43:	85 c0                	test   eax,eax
c0016e45:	74 24                	je     c0016e6b <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x106>
c0016e47:	83 ec 0c             	sub    esp,0xc
c0016e4a:	68 a1 46 02 c0       	push   0xc00246a1
c0016e4f:	e8 47 bc ff ff       	call   c0012a9b <Krnl::panic(char const*)>
c0016e54:	a1 08 98 02 c0       	mov    eax,ds:0xc0029808
c0016e59:	83 c4 10             	add    esp,0x10
c0016e5c:	48                   	dec    eax
c0016e5d:	a3 08 98 02 c0       	mov    ds:0xc0029808,eax
c0016e62:	85 c0                	test   eax,eax
c0016e64:	75 01                	jne    c0016e67 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x102>
c0016e66:	fb                   	sti    
c0016e67:	31 f6                	xor    esi,esi
c0016e69:	eb 58                	jmp    c0016ec3 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x15e>
c0016e6b:	0f b7 ed             	movzx  ebp,bp
c0016e6e:	50                   	push   eax
c0016e6f:	0f b7 ff             	movzx  edi,di
c0016e72:	50                   	push   eax
c0016e73:	55                   	push   ebp
c0016e74:	57                   	push   edi
c0016e75:	e8 dc fc ff ff       	call   c0016b56 <Vm::realToLinear(unsigned short, unsigned short)>
c0016e7a:	5a                   	pop    edx
c0016e7b:	8b 13                	mov    edx,DWORD PTR [ebx]
c0016e7d:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0016e81:	51                   	push   ecx
c0016e82:	50                   	push   eax
c0016e83:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016e87:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016e8b:	53                   	push   ebx
c0016e8c:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0016e8f:	83 c4 14             	add    esp,0x14
c0016e92:	53                   	push   ebx
c0016e93:	e8 3c 5f ff ff       	call   c000cdd4 <File::close()>
c0016e98:	a1 08 98 02 c0       	mov    eax,ds:0xc0029808
c0016e9d:	83 c4 10             	add    esp,0x10
c0016ea0:	48                   	dec    eax
c0016ea1:	c6 05 65 98 02 c0 00 	mov    BYTE PTR ds:0xc0029865,0x0
c0016ea8:	a3 08 98 02 c0       	mov    ds:0xc0029808,eax
c0016ead:	85 c0                	test   eax,eax
c0016eaf:	75 01                	jne    c0016eb2 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x14d>
c0016eb1:	fb                   	sti    
c0016eb2:	83 ec 0c             	sub    esp,0xc
c0016eb5:	ff 35 68 98 02 c0    	push   DWORD PTR ds:0xc0029868
c0016ebb:	e8 dc f5 ff ff       	call   c001649c <unblockTask(ThreadControlBlock*)>
c0016ec0:	83 c4 10             	add    esp,0x10
c0016ec3:	83 c4 2c             	add    esp,0x2c
c0016ec6:	89 f0                	mov    eax,esi
c0016ec8:	5b                   	pop    ebx
c0016ec9:	5e                   	pop    esi
c0016eca:	5f                   	pop    edi
c0016ecb:	5d                   	pop    ebp
c0016ecc:	c3                   	ret    

c0016ecd <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c0016ecd:	57                   	push   edi
c0016ece:	56                   	push   esi
c0016ecf:	53                   	push   ebx
c0016ed0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0016ed4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ed8:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0016edc:	83 e8 06             	sub    eax,0x6
c0016edf:	0f b7 c0             	movzx  eax,ax
c0016ee2:	50                   	push   eax
c0016ee3:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c0016ee8:	50                   	push   eax
c0016ee9:	e8 68 fc ff ff       	call   c0016b56 <Vm::realToLinear(unsigned short, unsigned short)>
c0016eee:	5a                   	pop    edx
c0016eef:	5e                   	pop    esi
c0016ef0:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c0016ef3:	8d 56 fa             	lea    edx,[esi-0x6]
c0016ef6:	81 e2 ff ff 00 00    	and    edx,0xffff
c0016efc:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c0016eff:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c0016f02:	83 c2 02             	add    edx,0x2
c0016f05:	66 89 10             	mov    WORD PTR [eax],dx
c0016f08:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c0016f0b:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0016f0f:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c0016f12:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0016f16:	89 d6                	mov    esi,edx
c0016f18:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0016f1e:	66 81 e6 ff fd       	and    si,0xfdff
c0016f23:	80 7f 5d 00          	cmp    BYTE PTR [edi+0x5d],0x0
c0016f27:	74 07                	je     c0016f30 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c0016f29:	89 d6                	mov    esi,edx
c0016f2b:	66 81 ce 00 02       	or     si,0x200
c0016f30:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c0016f34:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016f39:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0016f3d:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c0016f45:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c0016f48:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c0016f50:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c0016f53:	5b                   	pop    ebx
c0016f54:	5e                   	pop    esi
c0016f55:	5f                   	pop    edi
c0016f56:	c3                   	ret    

c0016f57 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c0016f57:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016f5c:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016f61:	c1 e0 04             	shl    eax,0x4
c0016f64:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c0016f67:	c3                   	ret    

c0016f68 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c0016f68:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016f6d:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016f72:	c1 e0 04             	shl    eax,0x4
c0016f75:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c0016f79:	c3                   	ret    

c0016f7a <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c0016f7a:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016f7f:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016f84:	c1 e0 04             	shl    eax,0x4
c0016f87:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c0016f8a:	c3                   	ret    

c0016f8b <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c0016f8b:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016f90:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016f95:	c1 e0 04             	shl    eax,0x4
c0016f98:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016f9c:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0016f9f:	c3                   	ret    

c0016fa0 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c0016fa0:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016fa5:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016faa:	c1 e0 04             	shl    eax,0x4
c0016fad:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016fb1:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c0016fb5:	c3                   	ret    

c0016fb6 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c0016fb6:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016fbb:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016fc0:	c1 e0 04             	shl    eax,0x4
c0016fc3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016fc7:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c0016fca:	c3                   	ret    

c0016fcb <Vm::faultHandler(regs*)>:
c0016fcb:	55                   	push   ebp
c0016fcc:	57                   	push   edi
c0016fcd:	56                   	push   esi
c0016fce:	53                   	push   ebx
c0016fcf:	83 ec 1c             	sub    esp,0x1c
c0016fd2:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0016fd6:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016fd9:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c0016fdd:	0f b7 f8             	movzx  edi,ax
c0016fe0:	52                   	push   edx
c0016fe1:	0f b7 c0             	movzx  eax,ax
c0016fe4:	50                   	push   eax
c0016fe5:	e8 6c fb ff ff       	call   c0016b56 <Vm::realToLinear(unsigned short, unsigned short)>
c0016fea:	5a                   	pop    edx
c0016feb:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c0016fee:	59                   	pop    ecx
c0016fef:	89 c1                	mov    ecx,eax
c0016ff1:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0016ff4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016ff8:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016ffd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017001:	0f b7 c5             	movzx  eax,bp
c0017004:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017008:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001700c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017010:	e8 41 fb ff ff       	call   c0016b56 <Vm::realToLinear(unsigned short, unsigned short)>
c0017015:	5e                   	pop    esi
c0017016:	be 06 00 00 00       	mov    esi,0x6
c001701b:	5a                   	pop    edx
c001701c:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c0017021:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c0017026:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0017029:	80 fa 9d             	cmp    dl,0x9d
c001702c:	0f 84 2c 02 00 00    	je     c001725e <Vm::faultHandler(regs*)+0x293>
c0017032:	0f 87 91 00 00 00    	ja     c00170c9 <Vm::faultHandler(regs*)+0xfe>
c0017038:	80 fa 66             	cmp    dl,0x66
c001703b:	0f 84 98 01 00 00    	je     c00171d9 <Vm::faultHandler(regs*)+0x20e>
c0017041:	77 47                	ja     c001708a <Vm::faultHandler(regs*)+0xbf>
c0017043:	80 fa 36             	cmp    dl,0x36
c0017046:	0f 84 80 01 00 00    	je     c00171cc <Vm::faultHandler(regs*)+0x201>
c001704c:	77 1a                	ja     c0017068 <Vm::faultHandler(regs*)+0x9d>
c001704e:	80 fa 26             	cmp    dl,0x26
c0017051:	0f 84 4e 01 00 00    	je     c00171a5 <Vm::faultHandler(regs*)+0x1da>
c0017057:	80 fa 2e             	cmp    dl,0x2e
c001705a:	0f 85 e2 05 00 00    	jne    c0017642 <Vm::faultHandler(regs*)+0x677>
c0017060:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017063:	31 f6                	xor    esi,esi
c0017065:	41                   	inc    ecx
c0017066:	eb be                	jmp    c0017026 <Vm::faultHandler(regs*)+0x5b>
c0017068:	80 fa 64             	cmp    dl,0x64
c001706b:	0f 84 41 01 00 00    	je     c00171b2 <Vm::faultHandler(regs*)+0x1e7>
c0017071:	0f 87 48 01 00 00    	ja     c00171bf <Vm::faultHandler(regs*)+0x1f4>
c0017077:	80 fa 3e             	cmp    dl,0x3e
c001707a:	0f 85 c2 05 00 00    	jne    c0017642 <Vm::faultHandler(regs*)+0x677>
c0017080:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017083:	be 01 00 00 00       	mov    esi,0x1
c0017088:	eb db                	jmp    c0017065 <Vm::faultHandler(regs*)+0x9a>
c001708a:	80 fa 6d             	cmp    dl,0x6d
c001708d:	0f 84 ec 02 00 00    	je     c001737f <Vm::faultHandler(regs*)+0x3b4>
c0017093:	77 17                	ja     c00170ac <Vm::faultHandler(regs*)+0xe1>
c0017095:	80 fa 67             	cmp    dl,0x67
c0017098:	0f 84 48 01 00 00    	je     c00171e6 <Vm::faultHandler(regs*)+0x21b>
c001709e:	80 fa 6c             	cmp    dl,0x6c
c00170a1:	0f 84 69 02 00 00    	je     c0017310 <Vm::faultHandler(regs*)+0x345>
c00170a7:	e9 96 05 00 00       	jmp    c0017642 <Vm::faultHandler(regs*)+0x677>
c00170ac:	80 fa 6f             	cmp    dl,0x6f
c00170af:	0f 84 f4 03 00 00    	je     c00174a9 <Vm::faultHandler(regs*)+0x4de>
c00170b5:	0f 82 59 03 00 00    	jb     c0017414 <Vm::faultHandler(regs*)+0x449>
c00170bb:	80 fa 9c             	cmp    dl,0x9c
c00170be:	0f 84 2f 01 00 00    	je     c00171f3 <Vm::faultHandler(regs*)+0x228>
c00170c4:	e9 79 05 00 00       	jmp    c0017642 <Vm::faultHandler(regs*)+0x677>
c00170c9:	80 fa ec             	cmp    dl,0xec
c00170cc:	0f 84 14 05 00 00    	je     c00175e6 <Vm::faultHandler(regs*)+0x61b>
c00170d2:	77 7b                	ja     c001714f <Vm::faultHandler(regs*)+0x184>
c00170d4:	80 fa e4             	cmp    dl,0xe4
c00170d7:	0f 84 93 04 00 00    	je     c0017570 <Vm::faultHandler(regs*)+0x5a5>
c00170dd:	77 53                	ja     c0017132 <Vm::faultHandler(regs*)+0x167>
c00170df:	80 fa cd             	cmp    dl,0xcd
c00170e2:	0f 84 d9 01 00 00    	je     c00172c1 <Vm::faultHandler(regs*)+0x2f6>
c00170e8:	80 fa cf             	cmp    dl,0xcf
c00170eb:	0f 85 51 05 00 00    	jne    c0017642 <Vm::faultHandler(regs*)+0x677>
c00170f1:	0f b7 10             	movzx  edx,WORD PTR [eax]
c00170f4:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c00170f7:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c00170fb:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c00170fe:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c0017102:	81 ca 00 02 02 00    	or     edx,0x20200
c0017108:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001710b:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c001710f:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0017115:	66 c1 e8 09          	shr    ax,0x9
c0017119:	83 e0 01             	and    eax,0x1
c001711c:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c001711f:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0017122:	83 c0 06             	add    eax,0x6
c0017125:	25 ff ff 00 00       	and    eax,0xffff
c001712a:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001712d:	e9 0c 05 00 00       	jmp    c001763e <Vm::faultHandler(regs*)+0x673>
c0017132:	80 fa e6             	cmp    dl,0xe6
c0017135:	0f 84 7f 04 00 00    	je     c00175ba <Vm::faultHandler(regs*)+0x5ef>
c001713b:	0f 82 4b 04 00 00    	jb     c001758c <Vm::faultHandler(regs*)+0x5c1>
c0017141:	80 fa e7             	cmp    dl,0xe7
c0017144:	0f 84 87 04 00 00    	je     c00175d1 <Vm::faultHandler(regs*)+0x606>
c001714a:	e9 f3 04 00 00       	jmp    c0017642 <Vm::faultHandler(regs*)+0x677>
c001714f:	80 fa ef             	cmp    dl,0xef
c0017152:	0f 84 d1 04 00 00    	je     c0017629 <Vm::faultHandler(regs*)+0x65e>
c0017158:	77 28                	ja     c0017182 <Vm::faultHandler(regs*)+0x1b7>
c001715a:	80 fa ed             	cmp    dl,0xed
c001715d:	0f 84 9f 04 00 00    	je     c0017602 <Vm::faultHandler(regs*)+0x637>
c0017163:	80 fa ee             	cmp    dl,0xee
c0017166:	0f 85 d6 04 00 00    	jne    c0017642 <Vm::faultHandler(regs*)+0x677>
c001716c:	50                   	push   eax
c001716d:	50                   	push   eax
c001716e:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0017172:	50                   	push   eax
c0017173:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0017177:	50                   	push   eax
c0017178:	e8 a3 f9 ff ff       	call   c0016b20 <Vm::outbv(unsigned short, unsigned char)>
c001717d:	e9 9f 04 00 00       	jmp    c0017621 <Vm::faultHandler(regs*)+0x656>
c0017182:	80 fa fa             	cmp    dl,0xfa
c0017185:	0f 84 69 01 00 00    	je     c00172f4 <Vm::faultHandler(regs*)+0x329>
c001718b:	80 fa fb             	cmp    dl,0xfb
c001718e:	0f 84 6e 01 00 00    	je     c0017302 <Vm::faultHandler(regs*)+0x337>
c0017194:	80 fa f3             	cmp    dl,0xf3
c0017197:	0f 85 a5 04 00 00    	jne    c0017642 <Vm::faultHandler(regs*)+0x677>
c001719d:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00171a0:	e9 c0 fe ff ff       	jmp    c0017065 <Vm::faultHandler(regs*)+0x9a>
c00171a5:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00171a8:	be 02 00 00 00       	mov    esi,0x2
c00171ad:	e9 b3 fe ff ff       	jmp    c0017065 <Vm::faultHandler(regs*)+0x9a>
c00171b2:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00171b5:	be 03 00 00 00       	mov    esi,0x3
c00171ba:	e9 a6 fe ff ff       	jmp    c0017065 <Vm::faultHandler(regs*)+0x9a>
c00171bf:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00171c2:	be 04 00 00 00       	mov    esi,0x4
c00171c7:	e9 99 fe ff ff       	jmp    c0017065 <Vm::faultHandler(regs*)+0x9a>
c00171cc:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00171cf:	be 05 00 00 00       	mov    esi,0x5
c00171d4:	e9 8c fe ff ff       	jmp    c0017065 <Vm::faultHandler(regs*)+0x9a>
c00171d9:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00171dc:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c00171e1:	e9 7f fe ff ff       	jmp    c0017065 <Vm::faultHandler(regs*)+0x9a>
c00171e6:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00171e9:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c00171ee:	e9 72 fe ff ff       	jmp    c0017065 <Vm::faultHandler(regs*)+0x9a>
c00171f3:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c00171f6:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00171fa:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c00171ff:	74 30                	je     c0017231 <Vm::faultHandler(regs*)+0x266>
c0017201:	83 e9 04             	sub    ecx,0x4
c0017204:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001720a:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0017210:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0017213:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0017216:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001721c:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0017220:	0f 84 15 04 00 00    	je     c001763b <Vm::faultHandler(regs*)+0x670>
c0017226:	80 ce 02             	or     dh,0x2
c0017229:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001722c:	e9 0a 04 00 00       	jmp    c001763b <Vm::faultHandler(regs*)+0x670>
c0017231:	83 e9 02             	sub    ecx,0x2
c0017234:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001723a:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001723d:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0017241:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0017247:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c001724b:	74 05                	je     c0017252 <Vm::faultHandler(regs*)+0x287>
c001724d:	80 ce 02             	or     dh,0x2
c0017250:	eb 03                	jmp    c0017255 <Vm::faultHandler(regs*)+0x28a>
c0017252:	80 e6 fd             	and    dh,0xfd
c0017255:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0017259:	e9 dd 03 00 00       	jmp    c001763b <Vm::faultHandler(regs*)+0x670>
c001725e:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0017263:	74 2a                	je     c001728f <Vm::faultHandler(regs*)+0x2c4>
c0017265:	8b 10                	mov    edx,DWORD PTR [eax]
c0017267:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001726d:	81 ca 00 02 02 00    	or     edx,0x20200
c0017273:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0017276:	8b 00                	mov    eax,DWORD PTR [eax]
c0017278:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001727e:	c1 e8 09             	shr    eax,0x9
c0017281:	83 e0 01             	and    eax,0x1
c0017284:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0017287:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001728a:	83 c0 04             	add    eax,0x4
c001728d:	eb 25                	jmp    c00172b4 <Vm::faultHandler(regs*)+0x2e9>
c001728f:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0017292:	81 ca 00 02 02 00    	or     edx,0x20200
c0017298:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001729b:	66 8b 00             	mov    ax,WORD PTR [eax]
c001729e:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00172a4:	66 c1 e8 09          	shr    ax,0x9
c00172a8:	83 e0 01             	and    eax,0x1
c00172ab:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c00172ae:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00172b1:	83 c0 02             	add    eax,0x2
c00172b4:	25 ff ff 00 00       	and    eax,0xffff
c00172b9:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c00172bc:	e9 7a 03 00 00       	jmp    c001763b <Vm::faultHandler(regs*)+0x670>
c00172c1:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00172c5:	3c ee                	cmp    al,0xee
c00172c7:	75 10                	jne    c00172d9 <Vm::faultHandler(regs*)+0x30e>
c00172c9:	83 ec 0c             	sub    esp,0xc
c00172cc:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c00172cf:	e8 e9 f8 ff ff       	call   c0016bbd <Vm::mainloop3(unsigned long)>
c00172d4:	e9 4b 03 00 00       	jmp    c0017624 <Vm::faultHandler(regs*)+0x659>
c00172d9:	83 ec 0c             	sub    esp,0xc
c00172dc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00172e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00172e4:	51                   	push   ecx
c00172e5:	50                   	push   eax
c00172e6:	53                   	push   ebx
c00172e7:	e8 e1 fb ff ff       	call   c0016ecd <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c00172ec:	83 c4 20             	add    esp,0x20
c00172ef:	e9 4a 03 00 00       	jmp    c001763e <Vm::faultHandler(regs*)+0x673>
c00172f4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00172f9:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c00172fd:	e9 39 03 00 00       	jmp    c001763b <Vm::faultHandler(regs*)+0x670>
c0017302:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017307:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c001730b:	e9 2b 03 00 00       	jmp    c001763b <Vm::faultHandler(regs*)+0x670>
c0017310:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0017313:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0017318:	74 2b                	je     c0017345 <Vm::faultHandler(regs*)+0x37a>
c001731a:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c0017321:	76 22                	jbe    c0017345 <Vm::faultHandler(regs*)+0x37a>
c0017323:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0017327:	50                   	push   eax
c0017328:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001732c:	50                   	push   eax
c001732d:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0017331:	50                   	push   eax
c0017332:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0017336:	50                   	push   eax
c0017337:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001733b:	50                   	push   eax
c001733c:	6a 6c                	push   0x6c
c001733e:	6a 6c                	push   0x6c
c0017340:	e9 b9 01 00 00       	jmp    c00174fe <Vm::faultHandler(regs*)+0x533>
c0017345:	83 ec 0c             	sub    esp,0xc
c0017348:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001734c:	0f b7 f6             	movzx  esi,si
c001734f:	50                   	push   eax
c0017350:	e8 b8 f7 ff ff       	call   c0016b0d <Vm::inbv(unsigned short)>
c0017355:	83 c4 0c             	add    esp,0xc
c0017358:	0f b6 c0             	movzx  eax,al
c001735b:	50                   	push   eax
c001735c:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c0017360:	50                   	push   eax
c0017361:	56                   	push   esi
c0017362:	e8 24 fc ff ff       	call   c0016f8b <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c0017367:	83 c4 10             	add    esp,0x10
c001736a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001736d:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0017371:	74 03                	je     c0017376 <Vm::faultHandler(regs*)+0x3ab>
c0017373:	48                   	dec    eax
c0017374:	eb 01                	jmp    c0017377 <Vm::faultHandler(regs*)+0x3ac>
c0017376:	40                   	inc    eax
c0017377:	0f b7 c0             	movzx  eax,ax
c001737a:	e9 8d 00 00 00       	jmp    c001740c <Vm::faultHandler(regs*)+0x441>
c001737f:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0017382:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0017385:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001738a:	74 29                	je     c00173b5 <Vm::faultHandler(regs*)+0x3ea>
c001738c:	3d ff ff 00 00       	cmp    eax,0xffff
c0017391:	76 22                	jbe    c00173b5 <Vm::faultHandler(regs*)+0x3ea>
c0017393:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0017397:	50                   	push   eax
c0017398:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001739c:	50                   	push   eax
c001739d:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00173a1:	50                   	push   eax
c00173a2:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00173a6:	50                   	push   eax
c00173a7:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00173ab:	50                   	push   eax
c00173ac:	6a 6d                	push   0x6d
c00173ae:	6a 6d                	push   0x6d
c00173b0:	e9 49 01 00 00       	jmp    c00174fe <Vm::faultHandler(regs*)+0x533>
c00173b5:	0f b7 c8             	movzx  ecx,ax
c00173b8:	0f b7 f6             	movzx  esi,si
c00173bb:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00173be:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c00173c3:	74 20                	je     c00173e5 <Vm::faultHandler(regs*)+0x41a>
c00173c5:	ed                   	in     eax,dx
c00173c6:	55                   	push   ebp
c00173c7:	50                   	push   eax
c00173c8:	51                   	push   ecx
c00173c9:	56                   	push   esi
c00173ca:	e8 e7 fb ff ff       	call   c0016fb6 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c00173cf:	83 c4 10             	add    esp,0x10
c00173d2:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00173d5:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00173d9:	74 05                	je     c00173e0 <Vm::faultHandler(regs*)+0x415>
c00173db:	83 e8 04             	sub    eax,0x4
c00173de:	eb 27                	jmp    c0017407 <Vm::faultHandler(regs*)+0x43c>
c00173e0:	83 c0 04             	add    eax,0x4
c00173e3:	eb 22                	jmp    c0017407 <Vm::faultHandler(regs*)+0x43c>
c00173e5:	66 ed                	in     ax,dx
c00173e7:	0f b7 c0             	movzx  eax,ax
c00173ea:	57                   	push   edi
c00173eb:	50                   	push   eax
c00173ec:	51                   	push   ecx
c00173ed:	56                   	push   esi
c00173ee:	e8 ad fb ff ff       	call   c0016fa0 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c00173f3:	83 c4 10             	add    esp,0x10
c00173f6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00173f9:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00173fd:	74 05                	je     c0017404 <Vm::faultHandler(regs*)+0x439>
c00173ff:	83 e8 02             	sub    eax,0x2
c0017402:	eb 03                	jmp    c0017407 <Vm::faultHandler(regs*)+0x43c>
c0017404:	83 c0 02             	add    eax,0x2
c0017407:	25 ff ff 00 00       	and    eax,0xffff
c001740c:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c001740f:	e9 27 02 00 00       	jmp    c001763b <Vm::faultHandler(regs*)+0x670>
c0017414:	8d 46 ff             	lea    eax,[esi-0x1]
c0017417:	3c 05                	cmp    al,0x5
c0017419:	77 24                	ja     c001743f <Vm::faultHandler(regs*)+0x474>
c001741b:	0f b6 c0             	movzx  eax,al
c001741e:	ff 24 85 14 47 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdb8ec]
c0017425:	0f b7 fd             	movzx  edi,bp
c0017428:	eb 15                	jmp    c001743f <Vm::faultHandler(regs*)+0x474>
c001742a:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c001742e:	eb 0f                	jmp    c001743f <Vm::faultHandler(regs*)+0x474>
c0017430:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c0017434:	eb 09                	jmp    c001743f <Vm::faultHandler(regs*)+0x474>
c0017436:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c001743a:	eb 03                	jmp    c001743f <Vm::faultHandler(regs*)+0x474>
c001743c:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c001743f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0017442:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0017447:	74 29                	je     c0017472 <Vm::faultHandler(regs*)+0x4a7>
c0017449:	3d ff ff 00 00       	cmp    eax,0xffff
c001744e:	76 22                	jbe    c0017472 <Vm::faultHandler(regs*)+0x4a7>
c0017450:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0017454:	50                   	push   eax
c0017455:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0017459:	50                   	push   eax
c001745a:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001745e:	50                   	push   eax
c001745f:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0017463:	50                   	push   eax
c0017464:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0017468:	50                   	push   eax
c0017469:	6a 6e                	push   0x6e
c001746b:	6a 6e                	push   0x6e
c001746d:	e9 8c 00 00 00       	jmp    c00174fe <Vm::faultHandler(regs*)+0x533>
c0017472:	0f b7 c0             	movzx  eax,ax
c0017475:	52                   	push   edx
c0017476:	52                   	push   edx
c0017477:	50                   	push   eax
c0017478:	57                   	push   edi
c0017479:	e8 d9 fa ff ff       	call   c0016f57 <Vm::readByteFromReal(unsigned short, unsigned short)>
c001747e:	59                   	pop    ecx
c001747f:	0f b6 c0             	movzx  eax,al
c0017482:	5e                   	pop    esi
c0017483:	50                   	push   eax
c0017484:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0017488:	50                   	push   eax
c0017489:	e8 92 f6 ff ff       	call   c0016b20 <Vm::outbv(unsigned short, unsigned char)>
c001748e:	83 c4 10             	add    esp,0x10
c0017491:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0017494:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0017498:	74 03                	je     c001749d <Vm::faultHandler(regs*)+0x4d2>
c001749a:	48                   	dec    eax
c001749b:	eb 01                	jmp    c001749e <Vm::faultHandler(regs*)+0x4d3>
c001749d:	40                   	inc    eax
c001749e:	0f b7 c0             	movzx  eax,ax
c00174a1:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00174a4:	e9 92 01 00 00       	jmp    c001763b <Vm::faultHandler(regs*)+0x670>
c00174a9:	8d 46 ff             	lea    eax,[esi-0x1]
c00174ac:	3c 05                	cmp    al,0x5
c00174ae:	77 1f                	ja     c00174cf <Vm::faultHandler(regs*)+0x504>
c00174b0:	0f b6 c0             	movzx  eax,al
c00174b3:	ff 24 85 2c 47 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdb8d4]
c00174ba:	89 ef                	mov    edi,ebp
c00174bc:	eb 11                	jmp    c00174cf <Vm::faultHandler(regs*)+0x504>
c00174be:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c00174c1:	eb 0c                	jmp    c00174cf <Vm::faultHandler(regs*)+0x504>
c00174c3:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c00174c6:	eb 07                	jmp    c00174cf <Vm::faultHandler(regs*)+0x504>
c00174c8:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00174cb:	eb 02                	jmp    c00174cf <Vm::faultHandler(regs*)+0x504>
c00174cd:	8b 3b                	mov    edi,DWORD PTR [ebx]
c00174cf:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c00174d2:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c00174d7:	74 37                	je     c0017510 <Vm::faultHandler(regs*)+0x545>
c00174d9:	81 fe ff ff 00 00    	cmp    esi,0xffff
c00174df:	76 2f                	jbe    c0017510 <Vm::faultHandler(regs*)+0x545>
c00174e1:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00174e5:	50                   	push   eax
c00174e6:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00174ea:	50                   	push   eax
c00174eb:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00174ef:	50                   	push   eax
c00174f0:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00174f4:	50                   	push   eax
c00174f5:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00174f9:	50                   	push   eax
c00174fa:	6a 6f                	push   0x6f
c00174fc:	6a 6f                	push   0x6f
c00174fe:	68 ba 46 02 c0       	push   0xc00246ba
c0017503:	e8 29 52 ff ff       	call   c000c731 <Dbg::kprintf(char const*, ...)>
c0017508:	83 c4 20             	add    esp,0x20
c001750b:	e9 86 01 00 00       	jmp    c0017696 <Vm::faultHandler(regs*)+0x6cb>
c0017510:	0f b7 d7             	movzx  edx,di
c0017513:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0017516:	0f b7 c6             	movzx  eax,si
c0017519:	81 e1 00 04 00 00    	and    ecx,0x400
c001751f:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c0017522:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0017527:	74 1d                	je     c0017546 <Vm::faultHandler(regs*)+0x57b>
c0017529:	55                   	push   ebp
c001752a:	55                   	push   ebp
c001752b:	50                   	push   eax
c001752c:	52                   	push   edx
c001752d:	e8 48 fa ff ff       	call   c0016f7a <Vm::readDwordFromReal(unsigned short, unsigned short)>
c0017532:	83 c4 10             	add    esp,0x10
c0017535:	89 fa                	mov    edx,edi
c0017537:	ef                   	out    dx,eax
c0017538:	85 c9                	test   ecx,ecx
c001753a:	74 05                	je     c0017541 <Vm::faultHandler(regs*)+0x576>
c001753c:	83 ee 04             	sub    esi,0x4
c001753f:	eb 21                	jmp    c0017562 <Vm::faultHandler(regs*)+0x597>
c0017541:	83 c6 04             	add    esi,0x4
c0017544:	eb 1c                	jmp    c0017562 <Vm::faultHandler(regs*)+0x597>
c0017546:	55                   	push   ebp
c0017547:	55                   	push   ebp
c0017548:	50                   	push   eax
c0017549:	52                   	push   edx
c001754a:	e8 19 fa ff ff       	call   c0016f68 <Vm::readWordFromReal(unsigned short, unsigned short)>
c001754f:	83 c4 10             	add    esp,0x10
c0017552:	89 fa                	mov    edx,edi
c0017554:	66 ef                	out    dx,ax
c0017556:	85 c9                	test   ecx,ecx
c0017558:	74 05                	je     c001755f <Vm::faultHandler(regs*)+0x594>
c001755a:	83 ee 02             	sub    esi,0x2
c001755d:	eb 03                	jmp    c0017562 <Vm::faultHandler(regs*)+0x597>
c001755f:	83 c6 02             	add    esi,0x2
c0017562:	81 e6 ff ff 00 00    	and    esi,0xffff
c0017568:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c001756b:	e9 cb 00 00 00       	jmp    c001763b <Vm::faultHandler(regs*)+0x670>
c0017570:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0017577:	83 ec 0c             	sub    esp,0xc
c001757a:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001757e:	50                   	push   eax
c001757f:	e8 89 f5 ff ff       	call   c0016b0d <Vm::inbv(unsigned short)>
c0017584:	0f b6 c0             	movzx  eax,al
c0017587:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001758a:	eb 3f                	jmp    c00175cb <Vm::faultHandler(regs*)+0x600>
c001758c:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0017591:	74 07                	je     c001759a <Vm::faultHandler(regs*)+0x5cf>
c0017593:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0017597:	ed                   	in     eax,dx
c0017598:	eb 14                	jmp    c00175ae <Vm::faultHandler(regs*)+0x5e3>
c001759a:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c001759d:	66 31 f6             	xor    si,si
c00175a0:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00175a3:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c00175a7:	66 ed                	in     ax,dx
c00175a9:	0f b7 c0             	movzx  eax,ax
c00175ac:	09 f0                	or     eax,esi
c00175ae:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00175b1:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00175b5:	e9 84 00 00 00       	jmp    c001763e <Vm::faultHandler(regs*)+0x673>
c00175ba:	52                   	push   edx
c00175bb:	52                   	push   edx
c00175bc:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c00175c0:	50                   	push   eax
c00175c1:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00175c5:	50                   	push   eax
c00175c6:	e8 55 f5 ff ff       	call   c0016b20 <Vm::outbv(unsigned short, unsigned char)>
c00175cb:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00175cf:	eb 53                	jmp    c0017624 <Vm::faultHandler(regs*)+0x659>
c00175d1:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00175d4:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c00175d8:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c00175dd:	74 03                	je     c00175e2 <Vm::faultHandler(regs*)+0x617>
c00175df:	ef                   	out    dx,eax
c00175e0:	eb cf                	jmp    c00175b1 <Vm::faultHandler(regs*)+0x5e6>
c00175e2:	66 ef                	out    dx,ax
c00175e4:	eb cb                	jmp    c00175b1 <Vm::faultHandler(regs*)+0x5e6>
c00175e6:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c00175ed:	83 ec 0c             	sub    esp,0xc
c00175f0:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00175f4:	50                   	push   eax
c00175f5:	e8 13 f5 ff ff       	call   c0016b0d <Vm::inbv(unsigned short)>
c00175fa:	0f b6 c0             	movzx  eax,al
c00175fd:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0017600:	eb 1f                	jmp    c0017621 <Vm::faultHandler(regs*)+0x656>
c0017602:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0017605:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001760a:	74 03                	je     c001760f <Vm::faultHandler(regs*)+0x644>
c001760c:	ed                   	in     eax,dx
c001760d:	eb 0d                	jmp    c001761c <Vm::faultHandler(regs*)+0x651>
c001760f:	66 ed                	in     ax,dx
c0017611:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0017614:	0f b7 c0             	movzx  eax,ax
c0017617:	66 31 d2             	xor    dx,dx
c001761a:	09 d0                	or     eax,edx
c001761c:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001761f:	eb 1a                	jmp    c001763b <Vm::faultHandler(regs*)+0x670>
c0017621:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017624:	83 c4 10             	add    esp,0x10
c0017627:	eb 15                	jmp    c001763e <Vm::faultHandler(regs*)+0x673>
c0017629:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001762c:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001762f:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0017634:	74 03                	je     c0017639 <Vm::faultHandler(regs*)+0x66e>
c0017636:	ef                   	out    dx,eax
c0017637:	eb 02                	jmp    c001763b <Vm::faultHandler(regs*)+0x670>
c0017639:	66 ef                	out    dx,ax
c001763b:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001763e:	b0 01                	mov    al,0x1
c0017640:	eb 56                	jmp    c0017698 <Vm::faultHandler(regs*)+0x6cd>
c0017642:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0017646:	50                   	push   eax
c0017647:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001764b:	50                   	push   eax
c001764c:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0017650:	50                   	push   eax
c0017651:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0017655:	50                   	push   eax
c0017656:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001765a:	50                   	push   eax
c001765b:	52                   	push   edx
c001765c:	52                   	push   edx
c001765d:	68 e7 46 02 c0       	push   0xc00246e7
c0017662:	e8 ca 50 ff ff       	call   c000c731 <Dbg::kprintf(char const*, ...)>
c0017667:	83 c4 20             	add    esp,0x20
c001766a:	83 ec 0c             	sub    esp,0xc
c001766d:	6a 60                	push   0x60
c001766f:	e8 99 f4 ff ff       	call   c0016b0d <Vm::inbv(unsigned short)>
c0017674:	83 c4 10             	add    esp,0x10
c0017677:	3c 1c                	cmp    al,0x1c
c0017679:	74 04                	je     c001767f <Vm::faultHandler(regs*)+0x6b4>
c001767b:	3c 5a                	cmp    al,0x5a
c001767d:	75 eb                	jne    c001766a <Vm::faultHandler(regs*)+0x69f>
c001767f:	3c 5a                	cmp    al,0x5a
c0017681:	74 04                	je     c0017687 <Vm::faultHandler(regs*)+0x6bc>
c0017683:	3c 1c                	cmp    al,0x1c
c0017685:	75 0f                	jne    c0017696 <Vm::faultHandler(regs*)+0x6cb>
c0017687:	83 ec 0c             	sub    esp,0xc
c001768a:	6a 60                	push   0x60
c001768c:	e8 7c f4 ff ff       	call   c0016b0d <Vm::inbv(unsigned short)>
c0017691:	83 c4 10             	add    esp,0x10
c0017694:	eb e9                	jmp    c001767f <Vm::faultHandler(regs*)+0x6b4>
c0017696:	31 c0                	xor    eax,eax
c0017698:	83 c4 1c             	add    esp,0x1c
c001769b:	5b                   	pop    ebx
c001769c:	5e                   	pop    esi
c001769d:	5f                   	pop    edi
c001769e:	5d                   	pop    ebp
c001769f:	c3                   	ret    

c00176a0 <Vm::fpuInternalTo32(unsigned long long)>:
c00176a0:	57                   	push   edi
c00176a1:	56                   	push   esi
c00176a2:	53                   	push   ebx
c00176a3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00176a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00176ab:	89 d6                	mov    esi,edx
c00176ad:	89 d7                	mov    edi,edx
c00176af:	89 c1                	mov    ecx,eax
c00176b1:	c1 ef 14             	shr    edi,0x14
c00176b4:	89 d3                	mov    ebx,edx
c00176b6:	81 e7 ff 07 00 00    	and    edi,0x7ff
c00176bc:	31 d2                	xor    edx,edx
c00176be:	89 f8                	mov    eax,edi
c00176c0:	81 e6 00 00 00 80    	and    esi,0x80000000
c00176c6:	bf ff 00 00 00       	mov    edi,0xff
c00176cb:	05 80 fc ff ff       	add    eax,0xfffffc80
c00176d0:	83 d2 ff             	adc    edx,0xffffffff
c00176d3:	39 c7                	cmp    edi,eax
c00176d5:	bf 00 00 00 00       	mov    edi,0x0
c00176da:	19 d7                	sbb    edi,edx
c00176dc:	72 16                	jb     c00176f4 <Vm::fpuInternalTo32(unsigned long long)+0x54>
c00176de:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c00176e2:	c1 e0 17             	shl    eax,0x17
c00176e5:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c00176eb:	09 f1                	or     ecx,esi
c00176ed:	09 c1                	or     ecx,eax
c00176ef:	89 cf                	mov    edi,ecx
c00176f1:	eb 05                	jmp    c00176f8 <Vm::fpuInternalTo32(unsigned long long)+0x58>
c00176f3:	90                   	nop
c00176f4:	31 ff                	xor    edi,edi
c00176f6:	66 90                	xchg   ax,ax
c00176f8:	89 f8                	mov    eax,edi
c00176fa:	5b                   	pop    ebx
c00176fb:	5e                   	pop    esi
c00176fc:	5f                   	pop    edi
c00176fd:	c3                   	ret    

c00176fe <Vm::fpuInternalTo64(unsigned long long)>:
c00176fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017702:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017706:	c3                   	ret    

c0017707 <Vm::fpu32ToInternal(unsigned int)>:
c0017707:	57                   	push   edi
c0017708:	31 ff                	xor    edi,edi
c001770a:	56                   	push   esi
c001770b:	53                   	push   ebx
c001770c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0017710:	89 cb                	mov    ebx,ecx
c0017712:	89 ce                	mov    esi,ecx
c0017714:	81 e3 00 00 00 80    	and    ebx,0x80000000
c001771a:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c0017720:	c1 e9 17             	shr    ecx,0x17
c0017723:	89 f0                	mov    eax,esi
c0017725:	0f b6 d1             	movzx  edx,cl
c0017728:	81 c2 80 03 00 00    	add    edx,0x380
c001772e:	89 d1                	mov    ecx,edx
c0017730:	89 fa                	mov    edx,edi
c0017732:	c1 e1 14             	shl    ecx,0x14
c0017735:	0f a4 c2 1d          	shld   edx,eax,0x1d
c0017739:	c1 e0 1d             	shl    eax,0x1d
c001773c:	89 d7                	mov    edi,edx
c001773e:	89 c6                	mov    esi,eax
c0017740:	89 ca                	mov    edx,ecx
c0017742:	89 f0                	mov    eax,esi
c0017744:	09 fa                	or     edx,edi
c0017746:	09 da                	or     edx,ebx
c0017748:	5b                   	pop    ebx
c0017749:	5e                   	pop    esi
c001774a:	5f                   	pop    edi
c001774b:	c3                   	ret    

c001774c <Vm::fpu64ToInternal(unsigned long long)>:
c001774c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017750:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017754:	c3                   	ret    

c0017755 <Vm::fpuFloatToLong(unsigned long long)>:
c0017755:	57                   	push   edi
c0017756:	31 c0                	xor    eax,eax
c0017758:	56                   	push   esi
c0017759:	31 d2                	xor    edx,edx
c001775b:	53                   	push   ebx
c001775c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0017760:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0017764:	89 d9                	mov    ecx,ebx
c0017766:	c1 e9 14             	shr    ecx,0x14
c0017769:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001776f:	89 cf                	mov    edi,ecx
c0017771:	81 ef ff 03 00 00    	sub    edi,0x3ff
c0017777:	78 37                	js     c00177b0 <Vm::fpuFloatToLong(unsigned long long)+0x5b>
c0017779:	89 d9                	mov    ecx,ebx
c001777b:	89 f0                	mov    eax,esi
c001777d:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c0017783:	81 c9 00 00 10 00    	or     ecx,0x100000
c0017789:	89 ca                	mov    edx,ecx
c001778b:	b9 34 00 00 00       	mov    ecx,0x34
c0017790:	29 f9                	sub    ecx,edi
c0017792:	0f ad d0             	shrd   eax,edx,cl
c0017795:	d3 fa                	sar    edx,cl
c0017797:	f6 c1 20             	test   cl,0x20
c001779a:	74 08                	je     c00177a4 <Vm::fpuFloatToLong(unsigned long long)+0x4f>
c001779c:	89 d0                	mov    eax,edx
c001779e:	c1 fa 1f             	sar    edx,0x1f
c00177a1:	8d 76 00             	lea    esi,[esi+0x0]
c00177a4:	85 db                	test   ebx,ebx
c00177a6:	79 08                	jns    c00177b0 <Vm::fpuFloatToLong(unsigned long long)+0x5b>
c00177a8:	f7 d8                	neg    eax
c00177aa:	83 d2 00             	adc    edx,0x0
c00177ad:	f7 da                	neg    edx
c00177af:	90                   	nop
c00177b0:	5b                   	pop    ebx
c00177b1:	5e                   	pop    esi
c00177b2:	5f                   	pop    edi
c00177b3:	c3                   	ret    

c00177b4 <Vm::fpuULongToFloat(unsigned long long)>:
c00177b4:	57                   	push   edi
c00177b5:	31 c9                	xor    ecx,ecx
c00177b7:	56                   	push   esi
c00177b8:	53                   	push   ebx
c00177b9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00177bd:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00177c1:	8d 76 00             	lea    esi,[esi+0x0]
c00177c4:	0f ba e7 14          	bt     edi,0x14
c00177c8:	72 0a                	jb     c00177d4 <Vm::fpuULongToFloat(unsigned long long)+0x20>
c00177ca:	01 f6                	add    esi,esi
c00177cc:	11 ff                	adc    edi,edi
c00177ce:	41                   	inc    ecx
c00177cf:	eb f3                	jmp    c00177c4 <Vm::fpuULongToFloat(unsigned long long)+0x10>
c00177d1:	8d 76 00             	lea    esi,[esi+0x0]
c00177d4:	89 fa                	mov    edx,edi
c00177d6:	89 f0                	mov    eax,esi
c00177d8:	bb 33 04 00 00       	mov    ebx,0x433
c00177dd:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c00177e3:	29 cb                	sub    ebx,ecx
c00177e5:	89 d9                	mov    ecx,ebx
c00177e7:	5b                   	pop    ebx
c00177e8:	c1 e1 14             	shl    ecx,0x14
c00177eb:	5e                   	pop    esi
c00177ec:	09 ca                	or     edx,ecx
c00177ee:	5f                   	pop    edi
c00177ef:	c3                   	ret    

c00177f0 <Vm::fpuLongToFloat(long long)>:
c00177f0:	56                   	push   esi
c00177f1:	31 c0                	xor    eax,eax
c00177f3:	53                   	push   ebx
c00177f4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00177f8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00177fc:	39 c8                	cmp    eax,ecx
c00177fe:	19 d8                	sbb    eax,ebx
c0017800:	7d 06                	jge    c0017808 <Vm::fpuLongToFloat(long long)+0x18>
c0017802:	31 f6                	xor    esi,esi
c0017804:	eb 0e                	jmp    c0017814 <Vm::fpuLongToFloat(long long)+0x24>
c0017806:	66 90                	xchg   ax,ax
c0017808:	f7 d9                	neg    ecx
c001780a:	be 01 00 00 00       	mov    esi,0x1
c001780f:	83 d3 00             	adc    ebx,0x0
c0017812:	f7 db                	neg    ebx
c0017814:	31 c0                	xor    eax,eax
c0017816:	66 90                	xchg   ax,ax
c0017818:	0f ba e3 14          	bt     ebx,0x14
c001781c:	72 0a                	jb     c0017828 <Vm::fpuLongToFloat(long long)+0x38>
c001781e:	01 c9                	add    ecx,ecx
c0017820:	11 db                	adc    ebx,ebx
c0017822:	40                   	inc    eax
c0017823:	eb f3                	jmp    c0017818 <Vm::fpuLongToFloat(long long)+0x28>
c0017825:	8d 76 00             	lea    esi,[esi+0x0]
c0017828:	ba 33 04 00 00       	mov    edx,0x433
c001782d:	29 c2                	sub    edx,eax
c001782f:	89 c8                	mov    eax,ecx
c0017831:	c1 e2 14             	shl    edx,0x14
c0017834:	89 d9                	mov    ecx,ebx
c0017836:	89 f3                	mov    ebx,esi
c0017838:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001783e:	09 ca                	or     edx,ecx
c0017840:	84 db                	test   bl,bl
c0017842:	74 08                	je     c001784c <Vm::fpuLongToFloat(long long)+0x5c>
c0017844:	81 ca 00 00 00 80    	or     edx,0x80000000
c001784a:	66 90                	xchg   ax,ax
c001784c:	5b                   	pop    ebx
c001784d:	5e                   	pop    esi
c001784e:	c3                   	ret    

c001784f <Vm::fpuGet0()>:
c001784f:	31 c0                	xor    eax,eax
c0017851:	31 d2                	xor    edx,edx
c0017853:	c3                   	ret    

c0017854 <Vm::fpuGet1()>:
c0017854:	b8 01 00 00 00       	mov    eax,0x1
c0017859:	31 d2                	xor    edx,edx
c001785b:	c3                   	ret    

c001785c <Vm::fpuGetPi()>:
c001785c:	b8 03 00 00 00       	mov    eax,0x3
c0017861:	31 d2                	xor    edx,edx
c0017863:	c3                   	ret    

c0017864 <Vm::fpuGetLog2E()>:
c0017864:	83 ec 18             	sub    esp,0x18
c0017867:	68 44 47 02 c0       	push   0xc0024744
c001786c:	e8 2a b2 ff ff       	call   c0012a9b <Krnl::panic(char const*)>
c0017871:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0017876:	31 d2                	xor    edx,edx
c0017878:	83 c4 1c             	add    esp,0x1c
c001787b:	c3                   	ret    

c001787c <Vm::fpuGetLogE2()>:
c001787c:	83 ec 18             	sub    esp,0x18
c001787f:	68 50 47 02 c0       	push   0xc0024750
c0017884:	e8 12 b2 ff ff       	call   c0012a9b <Krnl::panic(char const*)>
c0017889:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001788e:	31 d2                	xor    edx,edx
c0017890:	83 c4 1c             	add    esp,0x1c
c0017893:	c3                   	ret    

c0017894 <Vm::fpuGetLog210()>:
c0017894:	83 ec 18             	sub    esp,0x18
c0017897:	68 5c 47 02 c0       	push   0xc002475c
c001789c:	e8 fa b1 ff ff       	call   c0012a9b <Krnl::panic(char const*)>
c00178a1:	b8 ef be ad de       	mov    eax,0xdeadbeef
c00178a6:	31 d2                	xor    edx,edx
c00178a8:	83 c4 1c             	add    esp,0x1c
c00178ab:	c3                   	ret    

c00178ac <Vm::fpuGetLog102()>:
c00178ac:	83 ec 18             	sub    esp,0x18
c00178af:	68 69 47 02 c0       	push   0xc0024769
c00178b4:	e8 e2 b1 ff ff       	call   c0012a9b <Krnl::panic(char const*)>
c00178b9:	b8 ef be ad de       	mov    eax,0xdeadbeef
c00178be:	31 d2                	xor    edx,edx
c00178c0:	83 c4 1c             	add    esp,0x1c
c00178c3:	c3                   	ret    

c00178c4 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c00178c4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00178c8:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c00178cc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00178d0:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c00178d4:	0f 92 c0             	setb   al
c00178d7:	c3                   	ret    

c00178d8 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c00178d8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00178dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00178e0:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c00178e4:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c00178e8:	09 c2                	or     edx,eax
c00178ea:	0f 94 c0             	sete   al
c00178ed:	c3                   	ret    

c00178ee <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c00178ee:	57                   	push   edi
c00178ef:	56                   	push   esi
c00178f0:	53                   	push   ebx
c00178f1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00178f5:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00178f9:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00178fd:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0017901:	57                   	push   edi
c0017902:	56                   	push   esi
c0017903:	53                   	push   ebx
c0017904:	51                   	push   ecx
c0017905:	e8 ce ff ff ff       	call   c00178d8 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c001790a:	83 c4 10             	add    esp,0x10
c001790d:	88 c2                	mov    dl,al
c001790f:	31 c0                	xor    eax,eax
c0017911:	84 d2                	test   dl,dl
c0017913:	75 0f                	jne    c0017924 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x36>
c0017915:	57                   	push   edi
c0017916:	56                   	push   esi
c0017917:	53                   	push   ebx
c0017918:	51                   	push   ecx
c0017919:	e8 a6 ff ff ff       	call   c00178c4 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c001791e:	83 c4 10             	add    esp,0x10
c0017921:	8d 76 00             	lea    esi,[esi+0x0]
c0017924:	83 e0 01             	and    eax,0x1
c0017927:	5b                   	pop    ebx
c0017928:	88 c1                	mov    cl,al
c001792a:	83 e2 01             	and    edx,0x1
c001792d:	a0 a1 98 02 c0       	mov    al,ds:0xc00298a1
c0017932:	c1 e2 06             	shl    edx,0x6
c0017935:	83 e0 ba             	and    eax,0xffffffba
c0017938:	5e                   	pop    esi
c0017939:	09 c8                	or     eax,ecx
c001793b:	5f                   	pop    edi
c001793c:	09 d0                	or     eax,edx
c001793e:	a2 a1 98 02 c0       	mov    ds:0xc00298a1,al
c0017943:	c3                   	ret    

c0017944 <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c0017944:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017948:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001794c:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0017950:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c0017954:	c3                   	ret    

c0017955 <Vm::fpuAbs(unsigned long long)>:
c0017955:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017959:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001795d:	c3                   	ret    

c001795e <Vm::fpuChs(unsigned long long)>:
c001795e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017962:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017966:	f7 d8                	neg    eax
c0017968:	83 d2 00             	adc    edx,0x0
c001796b:	f7 da                	neg    edx
c001796d:	c3                   	ret    

c001796e <Vm::fpuSub(unsigned long long, unsigned long long)>:
c001796e:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c0017972:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c0017977:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c001797b:	eb c7                	jmp    c0017944 <Vm::fpuAdd(unsigned long long, unsigned long long)>

c001797d <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c001797d:	53                   	push   ebx
c001797e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017982:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0017986:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001798a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001798e:	0f af ca             	imul   ecx,edx
c0017991:	0f af d8             	imul   ebx,eax
c0017994:	f7 e2                	mul    edx
c0017996:	01 d9                	add    ecx,ebx
c0017998:	5b                   	pop    ebx
c0017999:	01 ca                	add    edx,ecx
c001799b:	c3                   	ret    

c001799c <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c001799c:	83 ec 0c             	sub    esp,0xc
c001799f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00179a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00179a7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00179ab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00179af:	e8 ec 9a 00 00       	call   c00214a0 <__udivdi3>
c00179b4:	83 c4 1c             	add    esp,0x1c
c00179b7:	c3                   	ret    

c00179b8 <Vm::fpuSquare(unsigned long long)>:
c00179b8:	50                   	push   eax
c00179b9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00179bd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00179c1:	52                   	push   edx
c00179c2:	50                   	push   eax
c00179c3:	52                   	push   edx
c00179c4:	50                   	push   eax
c00179c5:	e8 b3 ff ff ff       	call   c001797d <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c00179ca:	83 c4 14             	add    esp,0x14
c00179cd:	c3                   	ret    

c00179ce <Vm::fpuGetReg(int)>:
c00179ce:	83 ec 0c             	sub    esp,0xc
c00179d1:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c00179d6:	76 10                	jbe    c00179e8 <Vm::fpuGetReg(int)+0x1a>
c00179d8:	83 ec 0c             	sub    esp,0xc
c00179db:	68 76 47 02 c0       	push   0xc0024776
c00179e0:	e8 b6 b0 ff ff       	call   c0012a9b <Krnl::panic(char const*)>
c00179e5:	83 c4 10             	add    esp,0x10
c00179e8:	a0 a1 98 02 c0       	mov    al,ds:0xc00298a1
c00179ed:	b9 08 00 00 00       	mov    ecx,0x8
c00179f2:	c0 e8 03             	shr    al,0x3
c00179f5:	83 e0 07             	and    eax,0x7
c00179f8:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c00179fc:	99                   	cdq    
c00179fd:	f7 f9                	idiv   ecx
c00179ff:	8b 04 d5 a4 98 02 c0 	mov    eax,DWORD PTR [edx*8-0x3ffd675c]
c0017a06:	8b 14 d5 a8 98 02 c0 	mov    edx,DWORD PTR [edx*8-0x3ffd6758]
c0017a0d:	83 c4 0c             	add    esp,0xc
c0017a10:	c3                   	ret    

c0017a11 <Vm::fpuSetReg(int, unsigned long long)>:
c0017a11:	57                   	push   edi
c0017a12:	56                   	push   esi
c0017a13:	52                   	push   edx
c0017a14:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0017a18:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0017a1c:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c0017a21:	76 11                	jbe    c0017a34 <Vm::fpuSetReg(int, unsigned long long)+0x23>
c0017a23:	83 ec 0c             	sub    esp,0xc
c0017a26:	68 89 47 02 c0       	push   0xc0024789
c0017a2b:	e8 6b b0 ff ff       	call   c0012a9b <Krnl::panic(char const*)>
c0017a30:	83 c4 10             	add    esp,0x10
c0017a33:	90                   	nop
c0017a34:	a0 a1 98 02 c0       	mov    al,ds:0xc00298a1
c0017a39:	b9 08 00 00 00       	mov    ecx,0x8
c0017a3e:	c0 e8 03             	shr    al,0x3
c0017a41:	83 e0 07             	and    eax,0x7
c0017a44:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0017a48:	99                   	cdq    
c0017a49:	f7 f9                	idiv   ecx
c0017a4b:	89 34 d5 a4 98 02 c0 	mov    DWORD PTR [edx*8-0x3ffd675c],esi
c0017a52:	89 3c d5 a8 98 02 c0 	mov    DWORD PTR [edx*8-0x3ffd6758],edi
c0017a59:	58                   	pop    eax
c0017a5a:	5e                   	pop    esi
c0017a5b:	5f                   	pop    edi
c0017a5c:	c3                   	ret    

c0017a5d <Vm::fpuPush(unsigned long long)>:
c0017a5d:	a0 a1 98 02 c0       	mov    al,ds:0xc00298a1
c0017a62:	c0 e8 03             	shr    al,0x3
c0017a65:	83 e0 07             	and    eax,0x7
c0017a68:	83 c0 07             	add    eax,0x7
c0017a6b:	88 c2                	mov    dl,al
c0017a6d:	83 e0 07             	and    eax,0x7
c0017a70:	83 e2 07             	and    edx,0x7
c0017a73:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c0017a7a:	8a 15 a1 98 02 c0    	mov    dl,BYTE PTR ds:0xc00298a1
c0017a80:	83 e2 c7             	and    edx,0xffffffc7
c0017a83:	09 ca                	or     edx,ecx
c0017a85:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0017a89:	88 15 a1 98 02 c0    	mov    BYTE PTR ds:0xc00298a1,dl
c0017a8f:	89 0c c5 a8 98 02 c0 	mov    DWORD PTR [eax*8-0x3ffd6758],ecx
c0017a96:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0017a9a:	89 14 c5 a4 98 02 c0 	mov    DWORD PTR [eax*8-0x3ffd675c],edx
c0017aa1:	a1 e4 98 02 c0       	mov    eax,ds:0xc00298e4
c0017aa6:	83 f8 08             	cmp    eax,0x8
c0017aa9:	75 09                	jne    c0017ab4 <Vm::fpuPush(unsigned long long)+0x57>
c0017aab:	80 0d a0 98 02 c0 40 	or     BYTE PTR ds:0xc00298a0,0x40
c0017ab2:	c3                   	ret    
c0017ab3:	90                   	nop
c0017ab4:	40                   	inc    eax
c0017ab5:	a3 e4 98 02 c0       	mov    ds:0xc00298e4,eax
c0017aba:	c3                   	ret    

c0017abb <Vm::fpuPop()>:
c0017abb:	8a 0d a1 98 02 c0    	mov    cl,BYTE PTR ds:0xc00298a1
c0017ac1:	53                   	push   ebx
c0017ac2:	c0 e9 03             	shr    cl,0x3
c0017ac5:	8a 1d a1 98 02 c0    	mov    bl,BYTE PTR ds:0xc00298a1
c0017acb:	83 e1 07             	and    ecx,0x7
c0017ace:	83 e3 c7             	and    ebx,0xffffffc7
c0017ad1:	8b 04 cd a4 98 02 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffd675c]
c0017ad8:	8b 14 cd a8 98 02 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffd6758]
c0017adf:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c0017ae6:	83 e1 38             	and    ecx,0x38
c0017ae9:	09 d9                	or     ecx,ebx
c0017aeb:	88 0d a1 98 02 c0    	mov    BYTE PTR ds:0xc00298a1,cl
c0017af1:	8b 0d e4 98 02 c0    	mov    ecx,DWORD PTR ds:0xc00298e4
c0017af7:	85 c9                	test   ecx,ecx
c0017af9:	74 09                	je     c0017b04 <Vm::fpuPop()+0x49>
c0017afb:	49                   	dec    ecx
c0017afc:	89 0d e4 98 02 c0    	mov    DWORD PTR ds:0xc00298e4,ecx
c0017b02:	eb 08                	jmp    c0017b0c <Vm::fpuPop()+0x51>
c0017b04:	80 0d a0 98 02 c0 40 	or     BYTE PTR ds:0xc00298a0,0x40
c0017b0b:	90                   	nop
c0017b0c:	5b                   	pop    ebx
c0017b0d:	c3                   	ret    

c0017b0e <Vm::x87Handler(regs*)>:
c0017b0e:	55                   	push   ebp
c0017b0f:	57                   	push   edi
c0017b10:	56                   	push   esi
c0017b11:	53                   	push   ebx
c0017b12:	83 ec 1c             	sub    esp,0x1c
c0017b15:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0017b19:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c0017b1e:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c0017b21:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c0017b29:	8d 44 24 0b          	lea    eax,[esp+0xb]
c0017b2d:	50                   	push   eax
c0017b2e:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0017b32:	50                   	push   eax
c0017b33:	8d 44 24 14          	lea    eax,[esp+0x14]
c0017b37:	50                   	push   eax
c0017b38:	53                   	push   ebx
c0017b39:	e8 76 a6 ff ff       	call   c00121b4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0017b3e:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0017b41:	83 c4 10             	add    esp,0x10
c0017b44:	89 c6                	mov    esi,eax
c0017b46:	80 fa d9             	cmp    dl,0xd9
c0017b49:	0f 85 79 01 00 00    	jne    c0017cc8 <Vm::x87Handler(regs*)+0x1ba>
c0017b4f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0017b53:	8d 50 20             	lea    edx,[eax+0x20]
c0017b56:	80 fa 0e             	cmp    dl,0xe
c0017b59:	0f 87 a5 00 00 00    	ja     c0017c04 <Vm::x87Handler(regs*)+0xf6>
c0017b5f:	0f b6 d2             	movzx  edx,dl
c0017b62:	ff 24 95 9c 47 02 c0 	jmp    DWORD PTR [edx*4-0x3ffdb864]
c0017b69:	8d 76 00             	lea    esi,[esi+0x0]
c0017b6c:	e8 de fc ff ff       	call   c001784f <Vm::fpuGet0()>
c0017b71:	eb 09                	jmp    c0017b7c <Vm::x87Handler(regs*)+0x6e>
c0017b73:	90                   	nop
c0017b74:	e8 db fc ff ff       	call   c0017854 <Vm::fpuGet1()>
c0017b79:	8d 76 00             	lea    esi,[esi+0x0]
c0017b7c:	57                   	push   edi
c0017b7d:	57                   	push   edi
c0017b7e:	66 90                	xchg   ax,ax
c0017b80:	52                   	push   edx
c0017b81:	50                   	push   eax
c0017b82:	e8 d6 fe ff ff       	call   c0017a5d <Vm::fpuPush(unsigned long long)>
c0017b87:	90                   	nop
c0017b88:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0017b8c:	83 c4 10             	add    esp,0x10
c0017b8f:	90                   	nop
c0017b90:	b0 01                	mov    al,0x1
c0017b92:	e9 89 0a 00 00       	jmp    c0018620 <Vm::x87Handler(regs*)+0xb12>
c0017b97:	90                   	nop
c0017b98:	83 ec 0c             	sub    esp,0xc
c0017b9b:	6a 00                	push   0x0
c0017b9d:	e8 2c fe ff ff       	call   c00179ce <Vm::fpuGetReg(int)>
c0017ba2:	59                   	pop    ecx
c0017ba3:	5e                   	pop    esi
c0017ba4:	52                   	push   edx
c0017ba5:	50                   	push   eax
c0017ba6:	e8 b3 fd ff ff       	call   c001795e <Vm::fpuChs(unsigned long long)>
c0017bab:	eb 17                	jmp    c0017bc4 <Vm::x87Handler(regs*)+0xb6>
c0017bad:	8d 76 00             	lea    esi,[esi+0x0]
c0017bb0:	83 ec 0c             	sub    esp,0xc
c0017bb3:	6a 00                	push   0x0
c0017bb5:	e8 14 fe ff ff       	call   c00179ce <Vm::fpuGetReg(int)>
c0017bba:	5f                   	pop    edi
c0017bbb:	5d                   	pop    ebp
c0017bbc:	52                   	push   edx
c0017bbd:	50                   	push   eax
c0017bbe:	e8 92 fd ff ff       	call   c0017955 <Vm::fpuAbs(unsigned long long)>
c0017bc3:	90                   	nop
c0017bc4:	83 c4 0c             	add    esp,0xc
c0017bc7:	90                   	nop
c0017bc8:	52                   	push   edx
c0017bc9:	50                   	push   eax
c0017bca:	66 90                	xchg   ax,ax
c0017bcc:	6a 00                	push   0x0
c0017bce:	66 90                	xchg   ax,ax
c0017bd0:	e8 3c fe ff ff       	call   c0017a11 <Vm::fpuSetReg(int, unsigned long long)>
c0017bd5:	eb b1                	jmp    c0017b88 <Vm::x87Handler(regs*)+0x7a>
c0017bd7:	90                   	nop
c0017bd8:	e8 b7 fc ff ff       	call   c0017894 <Vm::fpuGetLog210()>
c0017bdd:	eb 9d                	jmp    c0017b7c <Vm::x87Handler(regs*)+0x6e>
c0017bdf:	90                   	nop
c0017be0:	e8 7f fc ff ff       	call   c0017864 <Vm::fpuGetLog2E()>
c0017be5:	eb 95                	jmp    c0017b7c <Vm::x87Handler(regs*)+0x6e>
c0017be7:	90                   	nop
c0017be8:	e8 6f fc ff ff       	call   c001785c <Vm::fpuGetPi()>
c0017bed:	eb 8d                	jmp    c0017b7c <Vm::x87Handler(regs*)+0x6e>
c0017bef:	90                   	nop
c0017bf0:	e8 b7 fc ff ff       	call   c00178ac <Vm::fpuGetLog102()>
c0017bf5:	eb 85                	jmp    c0017b7c <Vm::x87Handler(regs*)+0x6e>
c0017bf7:	90                   	nop
c0017bf8:	e8 7f fc ff ff       	call   c001787c <Vm::fpuGetLogE2()>
c0017bfd:	e9 7a ff ff ff       	jmp    c0017b7c <Vm::x87Handler(regs*)+0x6e>
c0017c02:	66 90                	xchg   ax,ax
c0017c04:	8d 50 40             	lea    edx,[eax+0x40]
c0017c07:	80 fa 07             	cmp    dl,0x7
c0017c0a:	77 18                	ja     c0017c24 <Vm::x87Handler(regs*)+0x116>
c0017c0c:	83 ec 0c             	sub    esp,0xc
c0017c0f:	2d c0 00 00 00       	sub    eax,0xc0
c0017c14:	50                   	push   eax
c0017c15:	e8 b4 fd ff ff       	call   c00179ce <Vm::fpuGetReg(int)>
c0017c1a:	59                   	pop    ecx
c0017c1b:	5e                   	pop    esi
c0017c1c:	e9 5f ff ff ff       	jmp    c0017b80 <Vm::x87Handler(regs*)+0x72>
c0017c21:	8d 76 00             	lea    esi,[esi+0x0]
c0017c24:	8d 50 38             	lea    edx,[eax+0x38]
c0017c27:	80 fa 07             	cmp    dl,0x7
c0017c2a:	77 3c                	ja     c0017c68 <Vm::x87Handler(regs*)+0x15a>
c0017c2c:	83 ec 0c             	sub    esp,0xc
c0017c2f:	2d c8 00 00 00       	sub    eax,0xc8
c0017c34:	50                   	push   eax
c0017c35:	e8 94 fd ff ff       	call   c00179ce <Vm::fpuGetReg(int)>
c0017c3a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0017c41:	89 c6                	mov    esi,eax
c0017c43:	89 d7                	mov    edi,edx
c0017c45:	e8 84 fd ff ff       	call   c00179ce <Vm::fpuGetReg(int)>
c0017c4a:	83 c4 0c             	add    esp,0xc
c0017c4d:	52                   	push   edx
c0017c4e:	50                   	push   eax
c0017c4f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0017c53:	2d c8 00 00 00       	sub    eax,0xc8
c0017c58:	50                   	push   eax
c0017c59:	e8 b3 fd ff ff       	call   c0017a11 <Vm::fpuSetReg(int, unsigned long long)>
c0017c5e:	83 c4 0c             	add    esp,0xc
c0017c61:	57                   	push   edi
c0017c62:	56                   	push   esi
c0017c63:	e9 64 ff ff ff       	jmp    c0017bcc <Vm::x87Handler(regs*)+0xbe>
c0017c68:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0017c6c:	84 d2                	test   dl,dl
c0017c6e:	75 10                	jne    c0017c80 <Vm::x87Handler(regs*)+0x172>
c0017c70:	83 ec 0c             	sub    esp,0xc
c0017c73:	ff 36                	push   DWORD PTR [esi]
c0017c75:	e8 8d fa ff ff       	call   c0017707 <Vm::fpu32ToInternal(unsigned int)>
c0017c7a:	e9 c9 00 00 00       	jmp    c0017d48 <Vm::x87Handler(regs*)+0x23a>
c0017c7f:	90                   	nop
c0017c80:	80 fa 03             	cmp    dl,0x3
c0017c83:	75 13                	jne    c0017c98 <Vm::x87Handler(regs*)+0x18a>
c0017c85:	e8 31 fe ff ff       	call   c0017abb <Vm::fpuPop()>
c0017c8a:	55                   	push   ebp
c0017c8b:	55                   	push   ebp
c0017c8c:	52                   	push   edx
c0017c8d:	50                   	push   eax
c0017c8e:	e8 0d fa ff ff       	call   c00176a0 <Vm::fpuInternalTo32(unsigned long long)>
c0017c93:	e9 90 00 00 00       	jmp    c0017d28 <Vm::x87Handler(regs*)+0x21a>
c0017c98:	80 fa 05             	cmp    dl,0x5
c0017c9b:	75 0f                	jne    c0017cac <Vm::x87Handler(regs*)+0x19e>
c0017c9d:	66 8b 06             	mov    ax,WORD PTR [esi]
c0017ca0:	66 a3 a2 98 02 c0    	mov    ds:0xc00298a2,ax
c0017ca6:	e9 ed 00 00 00       	jmp    c0017d98 <Vm::x87Handler(regs*)+0x28a>
c0017cab:	90                   	nop
c0017cac:	31 c0                	xor    eax,eax
c0017cae:	80 fa 07             	cmp    dl,0x7
c0017cb1:	0f 85 69 09 00 00    	jne    c0018620 <Vm::x87Handler(regs*)+0xb12>
c0017cb7:	66 a1 a2 98 02 c0    	mov    ax,ds:0xc00298a2
c0017cbd:	66 89 06             	mov    WORD PTR [esi],ax
c0017cc0:	e9 d3 00 00 00       	jmp    c0017d98 <Vm::x87Handler(regs*)+0x28a>
c0017cc5:	8d 76 00             	lea    esi,[esi+0x0]
c0017cc8:	80 fa d8             	cmp    dl,0xd8
c0017ccb:	0f 84 d3 00 00 00    	je     c0017da4 <Vm::x87Handler(regs*)+0x296>
c0017cd1:	80 fa dc             	cmp    dl,0xdc
c0017cd4:	0f 84 2a 02 00 00    	je     c0017f04 <Vm::x87Handler(regs*)+0x3f6>
c0017cda:	80 fa de             	cmp    dl,0xde
c0017cdd:	0f 84 f1 02 00 00    	je     c0017fd4 <Vm::x87Handler(regs*)+0x4c6>
c0017ce3:	80 fa dd             	cmp    dl,0xdd
c0017ce6:	0f 84 94 04 00 00    	je     c0018180 <Vm::x87Handler(regs*)+0x672>
c0017cec:	80 fa da             	cmp    dl,0xda
c0017cef:	0f 84 5f 05 00 00    	je     c0018254 <Vm::x87Handler(regs*)+0x746>
c0017cf5:	80 fa df             	cmp    dl,0xdf
c0017cf8:	0f 84 aa 05 00 00    	je     c00182a8 <Vm::x87Handler(regs*)+0x79a>
c0017cfe:	31 c0                	xor    eax,eax
c0017d00:	80 fa db             	cmp    dl,0xdb
c0017d03:	0f 85 17 09 00 00    	jne    c0018620 <Vm::x87Handler(regs*)+0xb12>
c0017d09:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0017d0d:	80 fa 03             	cmp    dl,0x3
c0017d10:	0f 85 c2 06 00 00    	jne    c00183d8 <Vm::x87Handler(regs*)+0x8ca>
c0017d16:	e8 a0 fd ff ff       	call   c0017abb <Vm::fpuPop()>
c0017d1b:	55                   	push   ebp
c0017d1c:	55                   	push   ebp
c0017d1d:	8d 76 00             	lea    esi,[esi+0x0]
c0017d20:	52                   	push   edx
c0017d21:	50                   	push   eax
c0017d22:	e8 2e fa ff ff       	call   c0017755 <Vm::fpuFloatToLong(unsigned long long)>
c0017d27:	90                   	nop
c0017d28:	83 c4 10             	add    esp,0x10
c0017d2b:	89 06                	mov    DWORD PTR [esi],eax
c0017d2d:	eb 69                	jmp    c0017d98 <Vm::x87Handler(regs*)+0x28a>
c0017d2f:	90                   	nop
c0017d30:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0017d34:	84 d2                	test   dl,dl
c0017d36:	0f 85 2c 06 00 00    	jne    c0018368 <Vm::x87Handler(regs*)+0x85a>
c0017d3c:	57                   	push   edi
c0017d3d:	57                   	push   edi
c0017d3e:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0017d41:	ff 36                	push   DWORD PTR [esi]
c0017d43:	e8 04 fa ff ff       	call   c001774c <Vm::fpu64ToInternal(unsigned long long)>
c0017d48:	5e                   	pop    esi
c0017d49:	5f                   	pop    edi
c0017d4a:	52                   	push   edx
c0017d4b:	50                   	push   eax
c0017d4c:	e8 0c fd ff ff       	call   c0017a5d <Vm::fpuPush(unsigned long long)>
c0017d51:	8d 76 00             	lea    esi,[esi+0x0]
c0017d54:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017d58:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c0017d5b:	e9 2c fe ff ff       	jmp    c0017b8c <Vm::x87Handler(regs*)+0x7e>
c0017d60:	80 fa 03             	cmp    dl,0x3
c0017d63:	0f 85 2b 07 00 00    	jne    c0018494 <Vm::x87Handler(regs*)+0x986>
c0017d69:	57                   	push   edi
c0017d6a:	57                   	push   edi
c0017d6b:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0017d6e:	ff 36                	push   DWORD PTR [esi]
c0017d70:	e8 d7 f9 ff ff       	call   c001774c <Vm::fpu64ToInternal(unsigned long long)>
c0017d75:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0017d7c:	89 c6                	mov    esi,eax
c0017d7e:	89 d7                	mov    edi,edx
c0017d80:	e8 49 fc ff ff       	call   c00179ce <Vm::fpuGetReg(int)>
c0017d85:	57                   	push   edi
c0017d86:	56                   	push   esi
c0017d87:	52                   	push   edx
c0017d88:	50                   	push   eax
c0017d89:	e8 60 fb ff ff       	call   c00178ee <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0017d8e:	83 c4 20             	add    esp,0x20
c0017d91:	e8 25 fd ff ff       	call   c0017abb <Vm::fpuPop()>
c0017d96:	66 90                	xchg   ax,ax
c0017d98:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017d9c:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c0017d9f:	e9 ec fd ff ff       	jmp    c0017b90 <Vm::x87Handler(regs*)+0x82>
c0017da4:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0017da8:	8d 50 40             	lea    edx,[eax+0x40]
c0017dab:	80 fa 07             	cmp    dl,0x7
c0017dae:	77 2c                	ja     c0017ddc <Vm::x87Handler(regs*)+0x2ce>
c0017db0:	83 ec 0c             	sub    esp,0xc
c0017db3:	2d c0 00 00 00       	sub    eax,0xc0
c0017db8:	50                   	push   eax
c0017db9:	e8 10 fc ff ff       	call   c00179ce <Vm::fpuGetReg(int)>
c0017dbe:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0017dc5:	89 c6                	mov    esi,eax
c0017dc7:	89 d7                	mov    edi,edx
c0017dc9:	e8 00 fc ff ff       	call   c00179ce <Vm::fpuGetReg(int)>
c0017dce:	57                   	push   edi
c0017dcf:	56                   	push   esi
c0017dd0:	52                   	push   edx
c0017dd1:	50                   	push   eax
c0017dd2:	e8 6d fb ff ff       	call   c0017944 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c0017dd7:	eb 33                	jmp    c0017e0c <Vm::x87Handler(regs*)+0x2fe>
c0017dd9:	8d 76 00             	lea    esi,[esi+0x0]
c0017ddc:	8d 50 38             	lea    edx,[eax+0x38]
c0017ddf:	80 fa 07             	cmp    dl,0x7
c0017de2:	77 30                	ja     c0017e14 <Vm::x87Handler(regs*)+0x306>
c0017de4:	83 ec 0c             	sub    esp,0xc
c0017de7:	2d c8 00 00 00       	sub    eax,0xc8
c0017dec:	50                   	push   eax
c0017ded:	e8 dc fb ff ff       	call   c00179ce <Vm::fpuGetReg(int)>
c0017df2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0017df9:	89 c6                	mov    esi,eax
c0017dfb:	89 d7                	mov    edi,edx
c0017dfd:	e8 cc fb ff ff       	call   c00179ce <Vm::fpuGetReg(int)>
c0017e02:	57                   	push   edi
c0017e03:	56                   	push   esi
c0017e04:	52                   	push   edx
c0017e05:	50                   	push   eax
c0017e06:	e8 72 fb ff ff       	call   c001797d <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c0017e0b:	90                   	nop
c0017e0c:	83 c4 1c             	add    esp,0x1c
c0017e0f:	e9 b4 fd ff ff       	jmp    c0017bc8 <Vm::x87Handler(regs*)+0xba>
c0017e14:	8d 50 30             	lea    edx,[eax+0x30]
c0017e17:	80 fa 07             	cmp    dl,0x7
c0017e1a:	77 10                	ja     c0017e2c <Vm::x87Handler(regs*)+0x31e>
c0017e1c:	83 ec 0c             	sub    esp,0xc
c0017e1f:	2d d0 00 00 00       	sub    eax,0xd0
c0017e24:	e9 c3 03 00 00       	jmp    c00181ec <Vm::x87Handler(regs*)+0x6de>
c0017e29:	8d 76 00             	lea    esi,[esi+0x0]
c0017e2c:	8d 50 28             	lea    edx,[eax+0x28]
c0017e2f:	80 fa 07             	cmp    dl,0x7
c0017e32:	77 10                	ja     c0017e44 <Vm::x87Handler(regs*)+0x336>
c0017e34:	83 ec 0c             	sub    esp,0xc
c0017e37:	2d d8 00 00 00       	sub    eax,0xd8
c0017e3c:	e9 e7 03 00 00       	jmp    c0018228 <Vm::x87Handler(regs*)+0x71a>
c0017e41:	8d 76 00             	lea    esi,[esi+0x0]
c0017e44:	8d 50 20             	lea    edx,[eax+0x20]
c0017e47:	80 fa 07             	cmp    dl,0x7
c0017e4a:	77 1c                	ja     c0017e68 <Vm::x87Handler(regs*)+0x35a>
c0017e4c:	83 ec 0c             	sub    esp,0xc
c0017e4f:	2d e0 00 00 00       	sub    eax,0xe0
c0017e54:	50                   	push   eax
c0017e55:	e8 74 fb ff ff       	call   c00179ce <Vm::fpuGetReg(int)>
c0017e5a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0017e61:	89 c6                	mov    esi,eax
c0017e63:	89 d7                	mov    edi,edx
c0017e65:	eb 25                	jmp    c0017e8c <Vm::x87Handler(regs*)+0x37e>
c0017e67:	90                   	nop
c0017e68:	8d 50 18             	lea    edx,[eax+0x18]
c0017e6b:	80 fa 07             	cmp    dl,0x7
c0017e6e:	77 30                	ja     c0017ea0 <Vm::x87Handler(regs*)+0x392>
c0017e70:	83 ec 0c             	sub    esp,0xc
c0017e73:	6a 00                	push   0x0
c0017e75:	e8 54 fb ff ff       	call   c00179ce <Vm::fpuGetReg(int)>
c0017e7a:	89 c6                	mov    esi,eax
c0017e7c:	89 d7                	mov    edi,edx
c0017e7e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0017e82:	2d e8 00 00 00       	sub    eax,0xe8
c0017e87:	89 04 24             	mov    DWORD PTR [esp],eax
c0017e8a:	66 90                	xchg   ax,ax
c0017e8c:	e8 3d fb ff ff       	call   c00179ce <Vm::fpuGetReg(int)>
c0017e91:	57                   	push   edi
c0017e92:	56                   	push   esi
c0017e93:	52                   	push   edx
c0017e94:	50                   	push   eax
c0017e95:	e8 d4 fa ff ff       	call   c001796e <Vm::fpuSub(unsigned long long, unsigned long long)>
c0017e9a:	e9 6d ff ff ff       	jmp    c0017e0c <Vm::x87Handler(regs*)+0x2fe>
c0017e9f:	90                   	nop
c0017ea0:	8d 50 10             	lea    edx,[eax+0x10]
c0017ea3:	80 fa 07             	cmp    dl,0x7
c0017ea6:	77 1c                	ja     c0017ec4 <Vm::x87Handler(regs*)+0x3b6>
c0017ea8:	83 ec 0c             	sub    esp,0xc
c0017eab:	2d f0 00 00 00       	sub    eax,0xf0
c0017eb0:	50                   	push   eax
c0017eb1:	e8 18 fb ff ff       	call   c00179ce <Vm::fpuGetReg(int)>
c0017eb6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0017ebd:	89 c6                	mov    esi,eax
c0017ebf:	89 d7                	mov    edi,edx
c0017ec1:	eb 25                	jmp    c0017ee8 <Vm::x87Handler(regs*)+0x3da>
c0017ec3:	90                   	nop
c0017ec4:	3c f7                	cmp    al,0xf7
c0017ec6:	0f 86 00 04 00 00    	jbe    c00182cc <Vm::x87Handler(regs*)+0x7be>
c0017ecc:	83 ec 0c             	sub    esp,0xc
c0017ecf:	6a 00                	push   0x0
c0017ed1:	e8 f8 fa ff ff       	call   c00179ce <Vm::fpuGetReg(int)>
c0017ed6:	89 c6                	mov    esi,eax
c0017ed8:	89 d7                	mov    edi,edx
c0017eda:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0017ede:	2d f8 00 00 00       	sub    eax,0xf8
c0017ee3:	89 04 24             	mov    DWORD PTR [esp],eax
c0017ee6:	66 90                	xchg   ax,ax
c0017ee8:	e8 e1 fa ff ff       	call   c00179ce <Vm::fpuGetReg(int)>
c0017eed:	57                   	push   edi
c0017eee:	56                   	push   esi
c0017eef:	52                   	push   edx
c0017ef0:	50                   	push   eax
c0017ef1:	e8 a6 fa ff ff       	call   c001799c <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0017ef6:	83 c4 1c             	add    esp,0x1c
c0017ef9:	52                   	push   edx
c0017efa:	50                   	push   eax
c0017efb:	6a 00                	push   0x0
c0017efd:	e9 6a 02 00 00       	jmp    c001816c <Vm::x87Handler(regs*)+0x65e>
c0017f02:	66 90                	xchg   ax,ax
c0017f04:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0017f08:	8d 50 40             	lea    edx,[eax+0x40]
c0017f0b:	80 fa 07             	cmp    dl,0x7
c0017f0e:	77 38                	ja     c0017f48 <Vm::x87Handler(regs*)+0x43a>
c0017f10:	83 ec 0c             	sub    esp,0xc
c0017f13:	2d c0 00 00 00       	sub    eax,0xc0
c0017f18:	50                   	push   eax
c0017f19:	e8 b0 fa ff ff       	call   c00179ce <Vm::fpuGetReg(int)>
c0017f1e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0017f25:	89 c6                	mov    esi,eax
c0017f27:	89 d7                	mov    edi,edx
c0017f29:	e8 a0 fa ff ff       	call   c00179ce <Vm::fpuGetReg(int)>
c0017f2e:	57                   	push   edi
c0017f2f:	56                   	push   esi
c0017f30:	52                   	push   edx
c0017f31:	50                   	push   eax
c0017f32:	e8 0d fa ff ff       	call   c0017944 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c0017f37:	83 c4 1c             	add    esp,0x1c
c0017f3a:	52                   	push   edx
c0017f3b:	50                   	push   eax
c0017f3c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0017f40:	2d c0 00 00 00       	sub    eax,0xc0
c0017f45:	eb 41                	jmp    c0017f88 <Vm::x87Handler(regs*)+0x47a>
c0017f47:	90                   	nop
c0017f48:	8d 50 38             	lea    edx,[eax+0x38]
c0017f4b:	80 fa 07             	cmp    dl,0x7
c0017f4e:	77 40                	ja     c0017f90 <Vm::x87Handler(regs*)+0x482>
c0017f50:	83 ec 0c             	sub    esp,0xc
c0017f53:	2d c8 00 00 00       	sub    eax,0xc8
c0017f58:	50                   	push   eax
c0017f59:	e8 70 fa ff ff       	call   c00179ce <Vm::fpuGetReg(int)>
c0017f5e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0017f65:	89 c6                	mov    esi,eax
c0017f67:	89 d7                	mov    edi,edx
c0017f69:	e8 60 fa ff ff       	call   c00179ce <Vm::fpuGetReg(int)>
c0017f6e:	57                   	push   edi
c0017f6f:	56                   	push   esi
c0017f70:	52                   	push   edx
c0017f71:	50                   	push   eax
c0017f72:	e8 06 fa ff ff       	call   c001797d <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c0017f77:	83 c4 1c             	add    esp,0x1c
c0017f7a:	52                   	push   edx
c0017f7b:	50                   	push   eax
c0017f7c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0017f80:	2d c8 00 00 00       	sub    eax,0xc8
c0017f85:	8d 76 00             	lea    esi,[esi+0x0]
c0017f88:	50                   	push   eax
c0017f89:	e9 42 fc ff ff       	jmp    c0017bd0 <Vm::x87Handler(regs*)+0xc2>
c0017f8e:	66 90                	xchg   ax,ax
c0017f90:	83 c0 18             	add    eax,0x18
c0017f93:	3c 07                	cmp    al,0x7
c0017f95:	0f 87 6d 04 00 00    	ja     c0018408 <Vm::x87Handler(regs*)+0x8fa>
c0017f9b:	83 ec 0c             	sub    esp,0xc
c0017f9e:	6a 00                	push   0x0
c0017fa0:	e8 29 fa ff ff       	call   c00179ce <Vm::fpuGetReg(int)>
c0017fa5:	89 c6                	mov    esi,eax
c0017fa7:	89 d7                	mov    edi,edx
c0017fa9:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0017fad:	2d e8 00 00 00       	sub    eax,0xe8
c0017fb2:	89 04 24             	mov    DWORD PTR [esp],eax
c0017fb5:	e8 14 fa ff ff       	call   c00179ce <Vm::fpuGetReg(int)>
c0017fba:	57                   	push   edi
c0017fbb:	56                   	push   esi
c0017fbc:	52                   	push   edx
c0017fbd:	50                   	push   eax
c0017fbe:	e8 ab f9 ff ff       	call   c001796e <Vm::fpuSub(unsigned long long, unsigned long long)>
c0017fc3:	83 c4 1c             	add    esp,0x1c
c0017fc6:	52                   	push   edx
c0017fc7:	50                   	push   eax
c0017fc8:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0017fcc:	2d e8 00 00 00       	sub    eax,0xe8
c0017fd1:	eb b5                	jmp    c0017f88 <Vm::x87Handler(regs*)+0x47a>
c0017fd3:	90                   	nop
c0017fd4:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0017fd8:	8d 50 40             	lea    edx,[eax+0x40]
c0017fdb:	80 fa 07             	cmp    dl,0x7
c0017fde:	77 3c                	ja     c001801c <Vm::x87Handler(regs*)+0x50e>
c0017fe0:	83 ec 0c             	sub    esp,0xc
c0017fe3:	2d c0 00 00 00       	sub    eax,0xc0
c0017fe8:	50                   	push   eax
c0017fe9:	e8 e0 f9 ff ff       	call   c00179ce <Vm::fpuGetReg(int)>
c0017fee:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0017ff5:	89 c6                	mov    esi,eax
c0017ff7:	89 d7                	mov    edi,edx
c0017ff9:	e8 d0 f9 ff ff       	call   c00179ce <Vm::fpuGetReg(int)>
c0017ffe:	57                   	push   edi
c0017fff:	56                   	push   esi
c0018000:	52                   	push   edx
c0018001:	50                   	push   eax
c0018002:	e8 3d f9 ff ff       	call   c0017944 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c0018007:	83 c4 1c             	add    esp,0x1c
c001800a:	52                   	push   edx
c001800b:	50                   	push   eax
c001800c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0018010:	2d c0 00 00 00       	sub    eax,0xc0
c0018015:	e9 b2 01 00 00       	jmp    c00181cc <Vm::x87Handler(regs*)+0x6be>
c001801a:	66 90                	xchg   ax,ax
c001801c:	8d 50 20             	lea    edx,[eax+0x20]
c001801f:	80 fa 07             	cmp    dl,0x7
c0018022:	77 3c                	ja     c0018060 <Vm::x87Handler(regs*)+0x552>
c0018024:	83 ec 0c             	sub    esp,0xc
c0018027:	2d e0 00 00 00       	sub    eax,0xe0
c001802c:	50                   	push   eax
c001802d:	e8 9c f9 ff ff       	call   c00179ce <Vm::fpuGetReg(int)>
c0018032:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0018039:	89 c6                	mov    esi,eax
c001803b:	89 d7                	mov    edi,edx
c001803d:	e8 8c f9 ff ff       	call   c00179ce <Vm::fpuGetReg(int)>
c0018042:	57                   	push   edi
c0018043:	56                   	push   esi
c0018044:	52                   	push   edx
c0018045:	50                   	push   eax
c0018046:	e8 23 f9 ff ff       	call   c001796e <Vm::fpuSub(unsigned long long, unsigned long long)>
c001804b:	83 c4 1c             	add    esp,0x1c
c001804e:	52                   	push   edx
c001804f:	50                   	push   eax
c0018050:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0018054:	2d e0 00 00 00       	sub    eax,0xe0
c0018059:	e9 6e 01 00 00       	jmp    c00181cc <Vm::x87Handler(regs*)+0x6be>
c001805e:	66 90                	xchg   ax,ax
c0018060:	8d 50 18             	lea    edx,[eax+0x18]
c0018063:	80 fa 07             	cmp    dl,0x7
c0018066:	77 3c                	ja     c00180a4 <Vm::x87Handler(regs*)+0x596>
c0018068:	83 ec 0c             	sub    esp,0xc
c001806b:	6a 00                	push   0x0
c001806d:	e8 5c f9 ff ff       	call   c00179ce <Vm::fpuGetReg(int)>
c0018072:	89 c6                	mov    esi,eax
c0018074:	89 d7                	mov    edi,edx
c0018076:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001807a:	2d e8 00 00 00       	sub    eax,0xe8
c001807f:	89 04 24             	mov    DWORD PTR [esp],eax
c0018082:	e8 47 f9 ff ff       	call   c00179ce <Vm::fpuGetReg(int)>
c0018087:	57                   	push   edi
c0018088:	56                   	push   esi
c0018089:	52                   	push   edx
c001808a:	50                   	push   eax
c001808b:	e8 de f8 ff ff       	call   c001796e <Vm::fpuSub(unsigned long long, unsigned long long)>
c0018090:	83 c4 1c             	add    esp,0x1c
c0018093:	52                   	push   edx
c0018094:	50                   	push   eax
c0018095:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0018099:	2d e8 00 00 00       	sub    eax,0xe8
c001809e:	e9 29 01 00 00       	jmp    c00181cc <Vm::x87Handler(regs*)+0x6be>
c00180a3:	90                   	nop
c00180a4:	8d 50 38             	lea    edx,[eax+0x38]
c00180a7:	80 fa 07             	cmp    dl,0x7
c00180aa:	77 3c                	ja     c00180e8 <Vm::x87Handler(regs*)+0x5da>
c00180ac:	83 ec 0c             	sub    esp,0xc
c00180af:	2d c8 00 00 00       	sub    eax,0xc8
c00180b4:	50                   	push   eax
c00180b5:	e8 14 f9 ff ff       	call   c00179ce <Vm::fpuGetReg(int)>
c00180ba:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00180c1:	89 c6                	mov    esi,eax
c00180c3:	89 d7                	mov    edi,edx
c00180c5:	e8 04 f9 ff ff       	call   c00179ce <Vm::fpuGetReg(int)>
c00180ca:	57                   	push   edi
c00180cb:	56                   	push   esi
c00180cc:	52                   	push   edx
c00180cd:	50                   	push   eax
c00180ce:	e8 aa f8 ff ff       	call   c001797d <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c00180d3:	83 c4 1c             	add    esp,0x1c
c00180d6:	52                   	push   edx
c00180d7:	50                   	push   eax
c00180d8:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00180dc:	2d c8 00 00 00       	sub    eax,0xc8
c00180e1:	e9 82 00 00 00       	jmp    c0018168 <Vm::x87Handler(regs*)+0x65a>
c00180e6:	66 90                	xchg   ax,ax
c00180e8:	3c f7                	cmp    al,0xf7
c00180ea:	76 38                	jbe    c0018124 <Vm::x87Handler(regs*)+0x616>
c00180ec:	83 ec 0c             	sub    esp,0xc
c00180ef:	6a 00                	push   0x0
c00180f1:	e8 d8 f8 ff ff       	call   c00179ce <Vm::fpuGetReg(int)>
c00180f6:	89 c6                	mov    esi,eax
c00180f8:	89 d7                	mov    edi,edx
c00180fa:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00180fe:	2d f8 00 00 00       	sub    eax,0xf8
c0018103:	89 04 24             	mov    DWORD PTR [esp],eax
c0018106:	e8 c3 f8 ff ff       	call   c00179ce <Vm::fpuGetReg(int)>
c001810b:	57                   	push   edi
c001810c:	56                   	push   esi
c001810d:	52                   	push   edx
c001810e:	50                   	push   eax
c001810f:	e8 88 f8 ff ff       	call   c001799c <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0018114:	83 c4 1c             	add    esp,0x1c
c0018117:	52                   	push   edx
c0018118:	50                   	push   eax
c0018119:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001811d:	2d f8 00 00 00       	sub    eax,0xf8
c0018122:	eb 44                	jmp    c0018168 <Vm::x87Handler(regs*)+0x65a>
c0018124:	8d 50 10             	lea    edx,[eax+0x10]
c0018127:	80 fa 07             	cmp    dl,0x7
c001812a:	0f 87 6c 01 00 00    	ja     c001829c <Vm::x87Handler(regs*)+0x78e>
c0018130:	83 ec 0c             	sub    esp,0xc
c0018133:	2d f0 00 00 00       	sub    eax,0xf0
c0018138:	50                   	push   eax
c0018139:	e8 90 f8 ff ff       	call   c00179ce <Vm::fpuGetReg(int)>
c001813e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0018145:	89 c6                	mov    esi,eax
c0018147:	89 d7                	mov    edi,edx
c0018149:	e8 80 f8 ff ff       	call   c00179ce <Vm::fpuGetReg(int)>
c001814e:	57                   	push   edi
c001814f:	56                   	push   esi
c0018150:	52                   	push   edx
c0018151:	50                   	push   eax
c0018152:	e8 45 f8 ff ff       	call   c001799c <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0018157:	83 c4 1c             	add    esp,0x1c
c001815a:	52                   	push   edx
c001815b:	50                   	push   eax
c001815c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0018160:	2d f0 00 00 00       	sub    eax,0xf0
c0018165:	8d 76 00             	lea    esi,[esi+0x0]
c0018168:	50                   	push   eax
c0018169:	8d 76 00             	lea    esi,[esi+0x0]
c001816c:	e8 a0 f8 ff ff       	call   c0017a11 <Vm::fpuSetReg(int, unsigned long long)>
c0018171:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0018175:	e8 41 f9 ff ff       	call   c0017abb <Vm::fpuPop()>
c001817a:	e9 0d fa ff ff       	jmp    c0017b8c <Vm::x87Handler(regs*)+0x7e>
c001817f:	90                   	nop
c0018180:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0018184:	8d 50 30             	lea    edx,[eax+0x30]
c0018187:	80 fa 07             	cmp    dl,0x7
c001818a:	77 20                	ja     c00181ac <Vm::x87Handler(regs*)+0x69e>
c001818c:	83 ec 0c             	sub    esp,0xc
c001818f:	6a 00                	push   0x0
c0018191:	e8 38 f8 ff ff       	call   c00179ce <Vm::fpuGetReg(int)>
c0018196:	83 c4 0c             	add    esp,0xc
c0018199:	52                   	push   edx
c001819a:	50                   	push   eax
c001819b:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001819f:	2d d0 00 00 00       	sub    eax,0xd0
c00181a4:	e9 df fd ff ff       	jmp    c0017f88 <Vm::x87Handler(regs*)+0x47a>
c00181a9:	8d 76 00             	lea    esi,[esi+0x0]
c00181ac:	8d 50 28             	lea    edx,[eax+0x28]
c00181af:	80 fa 07             	cmp    dl,0x7
c00181b2:	77 28                	ja     c00181dc <Vm::x87Handler(regs*)+0x6ce>
c00181b4:	83 ec 0c             	sub    esp,0xc
c00181b7:	6a 00                	push   0x0
c00181b9:	e8 10 f8 ff ff       	call   c00179ce <Vm::fpuGetReg(int)>
c00181be:	83 c4 0c             	add    esp,0xc
c00181c1:	52                   	push   edx
c00181c2:	50                   	push   eax
c00181c3:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00181c7:	2d d8 00 00 00       	sub    eax,0xd8
c00181cc:	50                   	push   eax
c00181cd:	e8 3f f8 ff ff       	call   c0017a11 <Vm::fpuSetReg(int, unsigned long long)>
c00181d2:	e8 e4 f8 ff ff       	call   c0017abb <Vm::fpuPop()>
c00181d7:	e9 ac f9 ff ff       	jmp    c0017b88 <Vm::x87Handler(regs*)+0x7a>
c00181dc:	8d 50 20             	lea    edx,[eax+0x20]
c00181df:	80 fa 07             	cmp    dl,0x7
c00181e2:	77 30                	ja     c0018214 <Vm::x87Handler(regs*)+0x706>
c00181e4:	83 ec 0c             	sub    esp,0xc
c00181e7:	2d e0 00 00 00       	sub    eax,0xe0
c00181ec:	50                   	push   eax
c00181ed:	e8 dc f7 ff ff       	call   c00179ce <Vm::fpuGetReg(int)>
c00181f2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00181f9:	89 c6                	mov    esi,eax
c00181fb:	89 d7                	mov    edi,edx
c00181fd:	e8 cc f7 ff ff       	call   c00179ce <Vm::fpuGetReg(int)>
c0018202:	57                   	push   edi
c0018203:	56                   	push   esi
c0018204:	52                   	push   edx
c0018205:	50                   	push   eax
c0018206:	e8 e3 f6 ff ff       	call   c00178ee <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001820b:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001820f:	e9 78 02 00 00       	jmp    c001848c <Vm::x87Handler(regs*)+0x97e>
c0018214:	8d 50 18             	lea    edx,[eax+0x18]
c0018217:	80 fa 07             	cmp    dl,0x7
c001821a:	0f 87 10 fb ff ff    	ja     c0017d30 <Vm::x87Handler(regs*)+0x222>
c0018220:	83 ec 0c             	sub    esp,0xc
c0018223:	2d e8 00 00 00       	sub    eax,0xe8
c0018228:	50                   	push   eax
c0018229:	e8 a0 f7 ff ff       	call   c00179ce <Vm::fpuGetReg(int)>
c001822e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0018235:	89 c6                	mov    esi,eax
c0018237:	89 d7                	mov    edi,edx
c0018239:	e8 90 f7 ff ff       	call   c00179ce <Vm::fpuGetReg(int)>
c001823e:	57                   	push   edi
c001823f:	56                   	push   esi
c0018240:	52                   	push   edx
c0018241:	50                   	push   eax
c0018242:	e8 a7 f6 ff ff       	call   c00178ee <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0018247:	83 c4 20             	add    esp,0x20
c001824a:	e8 6c f8 ff ff       	call   c0017abb <Vm::fpuPop()>
c001824f:	eb 6f                	jmp    c00182c0 <Vm::x87Handler(regs*)+0x7b2>
c0018251:	8d 76 00             	lea    esi,[esi+0x0]
c0018254:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c0018258:	0f 85 22 01 00 00    	jne    c0018380 <Vm::x87Handler(regs*)+0x872>
c001825e:	66 90                	xchg   ax,ax
c0018260:	83 ec 0c             	sub    esp,0xc
c0018263:	6a 01                	push   0x1
c0018265:	e8 64 f7 ff ff       	call   c00179ce <Vm::fpuGetReg(int)>
c001826a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0018271:	89 c6                	mov    esi,eax
c0018273:	89 d7                	mov    edi,edx
c0018275:	e8 54 f7 ff ff       	call   c00179ce <Vm::fpuGetReg(int)>
c001827a:	57                   	push   edi
c001827b:	56                   	push   esi
c001827c:	52                   	push   edx
c001827d:	50                   	push   eax
c001827e:	e8 6b f6 ff ff       	call   c00178ee <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0018283:	83 c4 20             	add    esp,0x20
c0018286:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001828a:	e8 2c f8 ff ff       	call   c0017abb <Vm::fpuPop()>
c001828f:	e8 27 f8 ff ff       	call   c0017abb <Vm::fpuPop()>
c0018294:	e9 f7 f8 ff ff       	jmp    c0017b90 <Vm::x87Handler(regs*)+0x82>
c0018299:	8d 76 00             	lea    esi,[esi+0x0]
c001829c:	3c d9                	cmp    al,0xd9
c001829e:	0f 85 e8 02 00 00    	jne    c001858c <Vm::x87Handler(regs*)+0xa7e>
c00182a4:	eb ba                	jmp    c0018260 <Vm::x87Handler(regs*)+0x752>
c00182a6:	66 90                	xchg   ax,ax
c00182a8:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c00182ac:	0f 85 2a 03 00 00    	jne    c00185dc <Vm::x87Handler(regs*)+0xace>
c00182b2:	0f b7 05 a0 98 02 c0 	movzx  eax,WORD PTR ds:0xc00298a0
c00182b9:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c00182bd:	8d 76 00             	lea    esi,[esi+0x0]
c00182c0:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00182c4:	e9 c7 f8 ff ff       	jmp    c0017b90 <Vm::x87Handler(regs*)+0x82>
c00182c9:	8d 76 00             	lea    esi,[esi+0x0]
c00182cc:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c00182d0:	84 d2                	test   dl,dl
c00182d2:	75 10                	jne    c00182e4 <Vm::x87Handler(regs*)+0x7d6>
c00182d4:	83 ec 0c             	sub    esp,0xc
c00182d7:	ff 36                	push   DWORD PTR [esi]
c00182d9:	e8 29 f4 ff ff       	call   c0017707 <Vm::fpu32ToInternal(unsigned int)>
c00182de:	e9 39 01 00 00       	jmp    c001841c <Vm::x87Handler(regs*)+0x90e>
c00182e3:	90                   	nop
c00182e4:	80 fa 01             	cmp    dl,0x1
c00182e7:	75 0f                	jne    c00182f8 <Vm::x87Handler(regs*)+0x7ea>
c00182e9:	83 ec 0c             	sub    esp,0xc
c00182ec:	ff 36                	push   DWORD PTR [esi]
c00182ee:	e8 14 f4 ff ff       	call   c0017707 <Vm::fpu32ToInternal(unsigned int)>
c00182f3:	e9 b4 02 00 00       	jmp    c00185ac <Vm::x87Handler(regs*)+0xa9e>
c00182f8:	80 fa 04             	cmp    dl,0x4
c00182fb:	75 0f                	jne    c001830c <Vm::x87Handler(regs*)+0x7fe>
c00182fd:	83 ec 0c             	sub    esp,0xc
c0018300:	ff 36                	push   DWORD PTR [esi]
c0018302:	e8 00 f4 ff ff       	call   c0017707 <Vm::fpu32ToInternal(unsigned int)>
c0018307:	e9 9c 01 00 00       	jmp    c00184a8 <Vm::x87Handler(regs*)+0x99a>
c001830c:	80 fa 05             	cmp    dl,0x5
c001830f:	75 1b                	jne    c001832c <Vm::x87Handler(regs*)+0x81e>
c0018311:	83 ec 0c             	sub    esp,0xc
c0018314:	6a 00                	push   0x0
c0018316:	e8 b3 f6 ff ff       	call   c00179ce <Vm::fpuGetReg(int)>
c001831b:	89 c7                	mov    edi,eax
c001831d:	89 d5                	mov    ebp,edx
c001831f:	58                   	pop    eax
c0018320:	ff 36                	push   DWORD PTR [esi]
c0018322:	e8 e0 f3 ff ff       	call   c0017707 <Vm::fpu32ToInternal(unsigned int)>
c0018327:	e9 bc 01 00 00       	jmp    c00184e8 <Vm::x87Handler(regs*)+0x9da>
c001832c:	80 fa 06             	cmp    dl,0x6
c001832f:	75 0f                	jne    c0018340 <Vm::x87Handler(regs*)+0x832>
c0018331:	83 ec 0c             	sub    esp,0xc
c0018334:	ff 36                	push   DWORD PTR [esi]
c0018336:	e8 cc f3 ff ff       	call   c0017707 <Vm::fpu32ToInternal(unsigned int)>
c001833b:	e9 cc 01 00 00       	jmp    c001850c <Vm::x87Handler(regs*)+0x9fe>
c0018340:	31 c0                	xor    eax,eax
c0018342:	80 fa 07             	cmp    dl,0x7
c0018345:	0f 85 d5 02 00 00    	jne    c0018620 <Vm::x87Handler(regs*)+0xb12>
c001834b:	83 ec 0c             	sub    esp,0xc
c001834e:	6a 00                	push   0x0
c0018350:	e8 79 f6 ff ff       	call   c00179ce <Vm::fpuGetReg(int)>
c0018355:	89 c7                	mov    edi,eax
c0018357:	89 d5                	mov    ebp,edx
c0018359:	58                   	pop    eax
c001835a:	ff 36                	push   DWORD PTR [esi]
c001835c:	e8 a6 f3 ff ff       	call   c0017707 <Vm::fpu32ToInternal(unsigned int)>
c0018361:	e9 ee 01 00 00       	jmp    c0018554 <Vm::x87Handler(regs*)+0xa46>
c0018366:	66 90                	xchg   ax,ax
c0018368:	80 fa 03             	cmp    dl,0x3
c001836b:	0f 85 f7 01 00 00    	jne    c0018568 <Vm::x87Handler(regs*)+0xa5a>
c0018371:	e8 45 f7 ff ff       	call   c0017abb <Vm::fpuPop()>
c0018376:	51                   	push   ecx
c0018377:	51                   	push   ecx
c0018378:	e9 03 02 00 00       	jmp    c0018580 <Vm::x87Handler(regs*)+0xa72>
c001837d:	8d 76 00             	lea    esi,[esi+0x0]
c0018380:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0018384:	80 fa 01             	cmp    dl,0x1
c0018387:	75 0b                	jne    c0018394 <Vm::x87Handler(regs*)+0x886>
c0018389:	57                   	push   edi
c001838a:	57                   	push   edi
c001838b:	8b 06                	mov    eax,DWORD PTR [esi]
c001838d:	e9 0e 02 00 00       	jmp    c00185a0 <Vm::x87Handler(regs*)+0xa92>
c0018392:	66 90                	xchg   ax,ax
c0018394:	80 fa 04             	cmp    dl,0x4
c0018397:	75 13                	jne    c00183ac <Vm::x87Handler(regs*)+0x89e>
c0018399:	31 d2                	xor    edx,edx
c001839b:	51                   	push   ecx
c001839c:	51                   	push   ecx
c001839d:	8b 06                	mov    eax,DWORD PTR [esi]
c001839f:	52                   	push   edx
c00183a0:	50                   	push   eax
c00183a1:	e8 4a f4 ff ff       	call   c00177f0 <Vm::fpuLongToFloat(long long)>
c00183a6:	e9 fd 00 00 00       	jmp    c00184a8 <Vm::x87Handler(regs*)+0x99a>
c00183ab:	90                   	nop
c00183ac:	31 c0                	xor    eax,eax
c00183ae:	80 fa 07             	cmp    dl,0x7
c00183b1:	0f 85 69 02 00 00    	jne    c0018620 <Vm::x87Handler(regs*)+0xb12>
c00183b7:	83 ec 0c             	sub    esp,0xc
c00183ba:	6a 00                	push   0x0
c00183bc:	e8 0d f6 ff ff       	call   c00179ce <Vm::fpuGetReg(int)>
c00183c1:	89 c7                	mov    edi,eax
c00183c3:	89 d5                	mov    ebp,edx
c00183c5:	58                   	pop    eax
c00183c6:	8b 06                	mov    eax,DWORD PTR [esi]
c00183c8:	5a                   	pop    edx
c00183c9:	31 d2                	xor    edx,edx
c00183cb:	52                   	push   edx
c00183cc:	50                   	push   eax
c00183cd:	e8 1e f4 ff ff       	call   c00177f0 <Vm::fpuLongToFloat(long long)>
c00183d2:	e9 7d 01 00 00       	jmp    c0018554 <Vm::x87Handler(regs*)+0xa46>
c00183d7:	90                   	nop
c00183d8:	84 d2                	test   dl,dl
c00183da:	75 10                	jne    c00183ec <Vm::x87Handler(regs*)+0x8de>
c00183dc:	31 d2                	xor    edx,edx
c00183de:	55                   	push   ebp
c00183df:	55                   	push   ebp
c00183e0:	8b 06                	mov    eax,DWORD PTR [esi]
c00183e2:	52                   	push   edx
c00183e3:	50                   	push   eax
c00183e4:	e9 03 02 00 00       	jmp    c00185ec <Vm::x87Handler(regs*)+0xade>
c00183e9:	8d 76 00             	lea    esi,[esi+0x0]
c00183ec:	31 c0                	xor    eax,eax
c00183ee:	80 fa 02             	cmp    dl,0x2
c00183f1:	0f 85 29 02 00 00    	jne    c0018620 <Vm::x87Handler(regs*)+0xb12>
c00183f7:	83 ec 0c             	sub    esp,0xc
c00183fa:	6a 00                	push   0x0
c00183fc:	e8 cd f5 ff ff       	call   c00179ce <Vm::fpuGetReg(int)>
c0018401:	59                   	pop    ecx
c0018402:	5f                   	pop    edi
c0018403:	e9 18 f9 ff ff       	jmp    c0017d20 <Vm::x87Handler(regs*)+0x212>
c0018408:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001840c:	84 d2                	test   dl,dl
c001840e:	75 2c                	jne    c001843c <Vm::x87Handler(regs*)+0x92e>
c0018410:	50                   	push   eax
c0018411:	50                   	push   eax
c0018412:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0018415:	ff 36                	push   DWORD PTR [esi]
c0018417:	e8 30 f3 ff ff       	call   c001774c <Vm::fpu64ToInternal(unsigned long long)>
c001841c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0018423:	89 c6                	mov    esi,eax
c0018425:	89 d7                	mov    edi,edx
c0018427:	e8 a2 f5 ff ff       	call   c00179ce <Vm::fpuGetReg(int)>
c001842c:	57                   	push   edi
c001842d:	56                   	push   esi
c001842e:	52                   	push   edx
c001842f:	50                   	push   eax
c0018430:	e8 0f f5 ff ff       	call   c0017944 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c0018435:	e9 8e 01 00 00       	jmp    c00185c8 <Vm::x87Handler(regs*)+0xaba>
c001843a:	66 90                	xchg   ax,ax
c001843c:	80 fa 01             	cmp    dl,0x1
c001843f:	75 13                	jne    c0018454 <Vm::x87Handler(regs*)+0x946>
c0018441:	50                   	push   eax
c0018442:	50                   	push   eax
c0018443:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0018446:	ff 36                	push   DWORD PTR [esi]
c0018448:	e8 ff f2 ff ff       	call   c001774c <Vm::fpu64ToInternal(unsigned long long)>
c001844d:	e9 5a 01 00 00       	jmp    c00185ac <Vm::x87Handler(regs*)+0xa9e>
c0018452:	66 90                	xchg   ax,ax
c0018454:	80 fa 02             	cmp    dl,0x2
c0018457:	0f 85 03 f9 ff ff    	jne    c0017d60 <Vm::x87Handler(regs*)+0x252>
c001845d:	55                   	push   ebp
c001845e:	55                   	push   ebp
c001845f:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0018462:	ff 36                	push   DWORD PTR [esi]
c0018464:	e8 e3 f2 ff ff       	call   c001774c <Vm::fpu64ToInternal(unsigned long long)>
c0018469:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0018470:	89 c6                	mov    esi,eax
c0018472:	89 d7                	mov    edi,edx
c0018474:	e8 55 f5 ff ff       	call   c00179ce <Vm::fpuGetReg(int)>
c0018479:	57                   	push   edi
c001847a:	56                   	push   esi
c001847b:	52                   	push   edx
c001847c:	50                   	push   eax
c001847d:	e8 6c f4 ff ff       	call   c00178ee <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0018482:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018486:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c0018489:	8d 76 00             	lea    esi,[esi+0x0]
c001848c:	83 c4 20             	add    esp,0x20
c001848f:	e9 fc f6 ff ff       	jmp    c0017b90 <Vm::x87Handler(regs*)+0x82>
c0018494:	80 fa 04             	cmp    dl,0x4
c0018497:	75 2f                	jne    c00184c8 <Vm::x87Handler(regs*)+0x9ba>
c0018499:	51                   	push   ecx
c001849a:	51                   	push   ecx
c001849b:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001849e:	ff 36                	push   DWORD PTR [esi]
c00184a0:	e8 a7 f2 ff ff       	call   c001774c <Vm::fpu64ToInternal(unsigned long long)>
c00184a5:	8d 76 00             	lea    esi,[esi+0x0]
c00184a8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00184af:	89 c6                	mov    esi,eax
c00184b1:	89 d7                	mov    edi,edx
c00184b3:	e8 16 f5 ff ff       	call   c00179ce <Vm::fpuGetReg(int)>
c00184b8:	57                   	push   edi
c00184b9:	56                   	push   esi
c00184ba:	52                   	push   edx
c00184bb:	50                   	push   eax
c00184bc:	e8 ad f4 ff ff       	call   c001796e <Vm::fpuSub(unsigned long long, unsigned long long)>
c00184c1:	e9 02 01 00 00       	jmp    c00185c8 <Vm::x87Handler(regs*)+0xaba>
c00184c6:	66 90                	xchg   ax,ax
c00184c8:	80 fa 05             	cmp    dl,0x5
c00184cb:	75 2b                	jne    c00184f8 <Vm::x87Handler(regs*)+0x9ea>
c00184cd:	83 ec 0c             	sub    esp,0xc
c00184d0:	6a 00                	push   0x0
c00184d2:	e8 f7 f4 ff ff       	call   c00179ce <Vm::fpuGetReg(int)>
c00184d7:	89 c7                	mov    edi,eax
c00184d9:	89 d5                	mov    ebp,edx
c00184db:	58                   	pop    eax
c00184dc:	5a                   	pop    edx
c00184dd:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00184e0:	ff 36                	push   DWORD PTR [esi]
c00184e2:	e8 65 f2 ff ff       	call   c001774c <Vm::fpu64ToInternal(unsigned long long)>
c00184e7:	90                   	nop
c00184e8:	83 c4 10             	add    esp,0x10
c00184eb:	55                   	push   ebp
c00184ec:	57                   	push   edi
c00184ed:	52                   	push   edx
c00184ee:	50                   	push   eax
c00184ef:	e8 7a f4 ff ff       	call   c001796e <Vm::fpuSub(unsigned long long, unsigned long long)>
c00184f4:	eb 6a                	jmp    c0018560 <Vm::x87Handler(regs*)+0xa52>
c00184f6:	66 90                	xchg   ax,ax
c00184f8:	80 fa 06             	cmp    dl,0x6
c00184fb:	75 2f                	jne    c001852c <Vm::x87Handler(regs*)+0xa1e>
c00184fd:	51                   	push   ecx
c00184fe:	51                   	push   ecx
c00184ff:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0018502:	ff 36                	push   DWORD PTR [esi]
c0018504:	e8 43 f2 ff ff       	call   c001774c <Vm::fpu64ToInternal(unsigned long long)>
c0018509:	8d 76 00             	lea    esi,[esi+0x0]
c001850c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0018513:	89 c6                	mov    esi,eax
c0018515:	89 d7                	mov    edi,edx
c0018517:	e8 b2 f4 ff ff       	call   c00179ce <Vm::fpuGetReg(int)>
c001851c:	57                   	push   edi
c001851d:	56                   	push   esi
c001851e:	52                   	push   edx
c001851f:	50                   	push   eax
c0018520:	e8 77 f4 ff ff       	call   c001799c <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0018525:	e9 9e 00 00 00       	jmp    c00185c8 <Vm::x87Handler(regs*)+0xaba>
c001852a:	66 90                	xchg   ax,ax
c001852c:	31 c0                	xor    eax,eax
c001852e:	80 fa 07             	cmp    dl,0x7
c0018531:	0f 85 e9 00 00 00    	jne    c0018620 <Vm::x87Handler(regs*)+0xb12>
c0018537:	83 ec 0c             	sub    esp,0xc
c001853a:	6a 00                	push   0x0
c001853c:	e8 8d f4 ff ff       	call   c00179ce <Vm::fpuGetReg(int)>
c0018541:	89 c7                	mov    edi,eax
c0018543:	89 d5                	mov    ebp,edx
c0018545:	58                   	pop    eax
c0018546:	5a                   	pop    edx
c0018547:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001854a:	ff 36                	push   DWORD PTR [esi]
c001854c:	e8 fb f1 ff ff       	call   c001774c <Vm::fpu64ToInternal(unsigned long long)>
c0018551:	8d 76 00             	lea    esi,[esi+0x0]
c0018554:	83 c4 10             	add    esp,0x10
c0018557:	55                   	push   ebp
c0018558:	57                   	push   edi
c0018559:	52                   	push   edx
c001855a:	50                   	push   eax
c001855b:	e8 3c f4 ff ff       	call   c001799c <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0018560:	83 c4 0c             	add    esp,0xc
c0018563:	eb 67                	jmp    c00185cc <Vm::x87Handler(regs*)+0xabe>
c0018565:	8d 76 00             	lea    esi,[esi+0x0]
c0018568:	31 c0                	xor    eax,eax
c001856a:	80 fa 02             	cmp    dl,0x2
c001856d:	0f 85 ad 00 00 00    	jne    c0018620 <Vm::x87Handler(regs*)+0xb12>
c0018573:	83 ec 0c             	sub    esp,0xc
c0018576:	6a 00                	push   0x0
c0018578:	e8 51 f4 ff ff       	call   c00179ce <Vm::fpuGetReg(int)>
c001857d:	59                   	pop    ecx
c001857e:	5f                   	pop    edi
c001857f:	90                   	nop
c0018580:	52                   	push   edx
c0018581:	50                   	push   eax
c0018582:	e8 77 f1 ff ff       	call   c00176fe <Vm::fpuInternalTo64(unsigned long long)>
c0018587:	e9 84 00 00 00       	jmp    c0018610 <Vm::x87Handler(regs*)+0xb02>
c001858c:	31 c0                	xor    eax,eax
c001858e:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c0018593:	0f 85 87 00 00 00    	jne    c0018620 <Vm::x87Handler(regs*)+0xb12>
c0018599:	50                   	push   eax
c001859a:	50                   	push   eax
c001859b:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001859e:	66 90                	xchg   ax,ax
c00185a0:	31 d2                	xor    edx,edx
c00185a2:	52                   	push   edx
c00185a3:	50                   	push   eax
c00185a4:	e8 47 f2 ff ff       	call   c00177f0 <Vm::fpuLongToFloat(long long)>
c00185a9:	8d 76 00             	lea    esi,[esi+0x0]
c00185ac:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00185b3:	89 c6                	mov    esi,eax
c00185b5:	89 d7                	mov    edi,edx
c00185b7:	e8 12 f4 ff ff       	call   c00179ce <Vm::fpuGetReg(int)>
c00185bc:	57                   	push   edi
c00185bd:	56                   	push   esi
c00185be:	52                   	push   edx
c00185bf:	50                   	push   eax
c00185c0:	e8 b8 f3 ff ff       	call   c001797d <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c00185c5:	8d 76 00             	lea    esi,[esi+0x0]
c00185c8:	83 c4 1c             	add    esp,0x1c
c00185cb:	90                   	nop
c00185cc:	52                   	push   edx
c00185cd:	50                   	push   eax
c00185ce:	6a 00                	push   0x0
c00185d0:	e8 3c f4 ff ff       	call   c0017a11 <Vm::fpuSetReg(int, unsigned long long)>
c00185d5:	e9 7a f7 ff ff       	jmp    c0017d54 <Vm::x87Handler(regs*)+0x246>
c00185da:	66 90                	xchg   ax,ax
c00185dc:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c00185e0:	80 fa 05             	cmp    dl,0x5
c00185e3:	75 13                	jne    c00185f8 <Vm::x87Handler(regs*)+0xaea>
c00185e5:	55                   	push   ebp
c00185e6:	55                   	push   ebp
c00185e7:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00185ea:	ff 36                	push   DWORD PTR [esi]
c00185ec:	e8 c3 f1 ff ff       	call   c00177b4 <Vm::fpuULongToFloat(unsigned long long)>
c00185f1:	e9 52 f7 ff ff       	jmp    c0017d48 <Vm::x87Handler(regs*)+0x23a>
c00185f6:	66 90                	xchg   ax,ax
c00185f8:	31 c0                	xor    eax,eax
c00185fa:	80 fa 07             	cmp    dl,0x7
c00185fd:	75 21                	jne    c0018620 <Vm::x87Handler(regs*)+0xb12>
c00185ff:	e8 b7 f4 ff ff       	call   c0017abb <Vm::fpuPop()>
c0018604:	51                   	push   ecx
c0018605:	51                   	push   ecx
c0018606:	52                   	push   edx
c0018607:	50                   	push   eax
c0018608:	e8 48 f1 ff ff       	call   c0017755 <Vm::fpuFloatToLong(unsigned long long)>
c001860d:	8d 76 00             	lea    esi,[esi+0x0]
c0018610:	83 c4 10             	add    esp,0x10
c0018613:	89 06                	mov    DWORD PTR [esi],eax
c0018615:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c0018618:	e9 7b f7 ff ff       	jmp    c0017d98 <Vm::x87Handler(regs*)+0x28a>
c001861d:	8d 76 00             	lea    esi,[esi+0x0]
c0018620:	83 c4 1c             	add    esp,0x1c
c0018623:	5b                   	pop    ebx
c0018624:	5e                   	pop    esi
c0018625:	5f                   	pop    edi
c0018626:	5d                   	pop    ebp
c0018627:	c3                   	ret    

c0018628 <__static_initialization_and_destruction_0(int, int)>:
c0018628:	83 ec 0c             	sub    esp,0xc
c001862b:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0018630:	75 1a                	jne    c001864c <__static_initialization_and_destruction_0(int, int)+0x24>
c0018632:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001863a:	75 10                	jne    c001864c <__static_initialization_and_destruction_0(int, int)+0x24>
c001863c:	83 ec 0c             	sub    esp,0xc
c001863f:	68 a0 98 02 c0       	push   0xc00298a0
c0018644:	e8 fb 97 00 00       	call   c0021e44 <Vm::_FPUState::_FPUState()>
c0018649:	83 c4 10             	add    esp,0x10
c001864c:	90                   	nop
c001864d:	83 c4 0c             	add    esp,0xc
c0018650:	c3                   	ret    
c0018651:	8d 76 00             	lea    esi,[esi+0x0]

c0018654 <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c0018654:	83 ec 0c             	sub    esp,0xc
c0018657:	83 ec 08             	sub    esp,0x8
c001865a:	68 ff ff 00 00       	push   0xffff
c001865f:	6a 01                	push   0x1
c0018661:	e8 c2 ff ff ff       	call   c0018628 <__static_initialization_and_destruction_0(int, int)>
c0018666:	83 c4 10             	add    esp,0x10
c0018669:	83 c4 0c             	add    esp,0xc
c001866c:	c3                   	ret    

c001866d <Hal::noCopro(unsigned long)>:
c001866d:	c3                   	ret    

c001866e <Hal::noTSC()>:
c001866e:	31 c0                	xor    eax,eax
c0018670:	31 d2                	xor    edx,edx
c0018672:	c3                   	ret    

c0018673 <Hal::readTSC()>:
c0018673:	0f 31                	rdtsc  
c0018675:	c3                   	ret    

c0018676 <nmiHandler(regs*, void*)>:
c0018676:	83 ec 0c             	sub    esp,0xc
c0018679:	a1 28 63 02 c0       	mov    eax,ds:0xc0026328
c001867e:	83 ec 0c             	sub    esp,0xc
c0018681:	50                   	push   eax
c0018682:	e8 b7 08 ff ff       	call   c0008f3e <Computer::handleNMI()>
c0018687:	83 c4 10             	add    esp,0x10
c001868a:	90                   	nop
c001868b:	83 c4 0c             	add    esp,0xc
c001868e:	c3                   	ret    

c001868f <doubleFault(regs*, void*)>:
c001868f:	55                   	push   ebp
c0018690:	89 e5                	mov    ebp,esp
c0018692:	83 ec 08             	sub    esp,0x8
c0018695:	83 ec 0c             	sub    esp,0xc
c0018698:	68 d8 47 02 c0       	push   0xc00247d8
c001869d:	e8 f9 a3 ff ff       	call   c0012a9b <Krnl::panic(char const*)>
c00186a2:	83 c4 10             	add    esp,0x10
c00186a5:	90                   	nop
c00186a6:	c9                   	leave  
c00186a7:	c3                   	ret    

c00186a8 <displayDebugInfo(regs*)>:
c00186a8:	53                   	push   ebx
c00186a9:	83 ec 38             	sub    esp,0x38
c00186ac:	0f 20 c0             	mov    eax,cr0
c00186af:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00186b3:	0f 20 d0             	mov    eax,cr2
c00186b6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00186ba:	0f 20 d8             	mov    eax,cr3
c00186bd:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00186c1:	0f 20 e0             	mov    eax,cr4
c00186c4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00186c8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00186cc:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c00186cf:	83 ec 08             	sub    esp,0x8
c00186d2:	50                   	push   eax
c00186d3:	68 e5 47 02 c0       	push   0xc00247e5
c00186d8:	e8 54 40 ff ff       	call   c000c731 <Dbg::kprintf(char const*, ...)>
c00186dd:	83 c4 10             	add    esp,0x10
c00186e0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00186e4:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00186e7:	83 ec 08             	sub    esp,0x8
c00186ea:	50                   	push   eax
c00186eb:	68 f0 47 02 c0       	push   0xc00247f0
c00186f0:	e8 3c 40 ff ff       	call   c000c731 <Dbg::kprintf(char const*, ...)>
c00186f5:	83 c4 10             	add    esp,0x10
c00186f8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00186fc:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00186ff:	83 ec 08             	sub    esp,0x8
c0018702:	50                   	push   eax
c0018703:	68 fb 47 02 c0       	push   0xc00247fb
c0018708:	e8 24 40 ff ff       	call   c000c731 <Dbg::kprintf(char const*, ...)>
c001870d:	83 c4 10             	add    esp,0x10
c0018710:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0018714:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0018717:	83 ec 08             	sub    esp,0x8
c001871a:	50                   	push   eax
c001871b:	68 06 48 02 c0       	push   0xc0024806
c0018720:	e8 0c 40 ff ff       	call   c000c731 <Dbg::kprintf(char const*, ...)>
c0018725:	83 c4 10             	add    esp,0x10
c0018728:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001872c:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001872f:	83 ec 08             	sub    esp,0x8
c0018732:	50                   	push   eax
c0018733:	68 11 48 02 c0       	push   0xc0024811
c0018738:	e8 f4 3f ff ff       	call   c000c731 <Dbg::kprintf(char const*, ...)>
c001873d:	83 c4 10             	add    esp,0x10
c0018740:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0018744:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0018747:	83 ec 08             	sub    esp,0x8
c001874a:	50                   	push   eax
c001874b:	68 1c 48 02 c0       	push   0xc002481c
c0018750:	e8 dc 3f ff ff       	call   c000c731 <Dbg::kprintf(char const*, ...)>
c0018755:	83 c4 10             	add    esp,0x10
c0018758:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001875c:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c001875f:	83 ec 08             	sub    esp,0x8
c0018762:	50                   	push   eax
c0018763:	68 36 48 02 c0       	push   0xc0024836
c0018768:	e8 c4 3f ff ff       	call   c000c731 <Dbg::kprintf(char const*, ...)>
c001876d:	83 c4 10             	add    esp,0x10
c0018770:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0018774:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0018777:	83 ec 08             	sub    esp,0x8
c001877a:	50                   	push   eax
c001877b:	68 27 48 02 c0       	push   0xc0024827
c0018780:	e8 ac 3f ff ff       	call   c000c731 <Dbg::kprintf(char const*, ...)>
c0018785:	83 c4 10             	add    esp,0x10
c0018788:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001878c:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c001878f:	83 ec 08             	sub    esp,0x8
c0018792:	50                   	push   eax
c0018793:	68 32 48 02 c0       	push   0xc0024832
c0018798:	e8 94 3f ff ff       	call   c000c731 <Dbg::kprintf(char const*, ...)>
c001879d:	83 c4 10             	add    esp,0x10
c00187a0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00187a4:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00187a7:	83 ec 08             	sub    esp,0x8
c00187aa:	50                   	push   eax
c00187ab:	68 41 48 02 c0       	push   0xc0024841
c00187b0:	e8 7c 3f ff ff       	call   c000c731 <Dbg::kprintf(char const*, ...)>
c00187b5:	83 c4 10             	add    esp,0x10
c00187b8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00187bc:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c00187bf:	83 ec 08             	sub    esp,0x8
c00187c2:	50                   	push   eax
c00187c3:	68 4c 48 02 c0       	push   0xc002484c
c00187c8:	e8 64 3f ff ff       	call   c000c731 <Dbg::kprintf(char const*, ...)>
c00187cd:	83 c4 10             	add    esp,0x10
c00187d0:	83 ec 08             	sub    esp,0x8
c00187d3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00187d7:	68 57 48 02 c0       	push   0xc0024857
c00187dc:	e8 50 3f ff ff       	call   c000c731 <Dbg::kprintf(char const*, ...)>
c00187e1:	83 c4 10             	add    esp,0x10
c00187e4:	83 ec 08             	sub    esp,0x8
c00187e7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00187eb:	68 62 48 02 c0       	push   0xc0024862
c00187f0:	e8 3c 3f ff ff       	call   c000c731 <Dbg::kprintf(char const*, ...)>
c00187f5:	83 c4 10             	add    esp,0x10
c00187f8:	a1 30 98 02 c0       	mov    eax,ds:0xc0029830
c00187fd:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018803:	83 ec 0c             	sub    esp,0xc
c0018806:	50                   	push   eax
c0018807:	e8 7d 1d ff ff       	call   c000a589 <setActiveTerminal(VgaText*)>
c001880c:	83 c4 10             	add    esp,0x10
c001880f:	a1 30 98 02 c0       	mov    eax,ds:0xc0029830
c0018814:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001881a:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001881e:	8b 52 30             	mov    edx,DWORD PTR [edx+0x30]
c0018821:	c1 e2 05             	shl    edx,0x5
c0018824:	81 c2 c0 5a 02 c0    	add    edx,0xc0025ac0
c001882a:	83 ec 08             	sub    esp,0x8
c001882d:	52                   	push   edx
c001882e:	50                   	push   eax
c001882f:	e8 be 20 ff ff       	call   c000a8f2 <VgaText::puts(char const*)>
c0018834:	83 c4 10             	add    esp,0x10
c0018837:	a1 30 98 02 c0       	mov    eax,ds:0xc0029830
c001883c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018842:	83 ec 08             	sub    esp,0x8
c0018845:	68 6d 48 02 c0       	push   0xc002486d
c001884a:	50                   	push   eax
c001884b:	e8 a2 20 ff ff       	call   c000a8f2 <VgaText::puts(char const*)>
c0018850:	83 c4 10             	add    esp,0x10
c0018853:	a1 30 98 02 c0       	mov    eax,ds:0xc0029830
c0018858:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001885e:	ba 00 20 00 c2       	mov    edx,0xc2002000
c0018863:	8b 12                	mov    edx,DWORD PTR [edx]
c0018865:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0018868:	83 c2 0c             	add    edx,0xc
c001886b:	83 ec 08             	sub    esp,0x8
c001886e:	52                   	push   edx
c001886f:	50                   	push   eax
c0018870:	e8 7d 20 ff ff       	call   c000a8f2 <VgaText::puts(char const*)>
c0018875:	83 c4 10             	add    esp,0x10
c0018878:	a1 30 98 02 c0       	mov    eax,ds:0xc0029830
c001887d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018883:	83 ec 08             	sub    esp,0x8
c0018886:	68 76 48 02 c0       	push   0xc0024876
c001888b:	50                   	push   eax
c001888c:	e8 61 20 ff ff       	call   c000a8f2 <VgaText::puts(char const*)>
c0018891:	83 c4 10             	add    esp,0x10
c0018894:	a1 30 98 02 c0       	mov    eax,ds:0xc0029830
c0018899:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001889f:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00188a3:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c00188a6:	83 ec 08             	sub    esp,0x8
c00188a9:	52                   	push   edx
c00188aa:	50                   	push   eax
c00188ab:	e8 fc 1f ff ff       	call   c000a8ac <VgaText::putx(unsigned int)>
c00188b0:	83 c4 10             	add    esp,0x10
c00188b3:	a1 30 98 02 c0       	mov    eax,ds:0xc0029830
c00188b8:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00188be:	83 ec 08             	sub    esp,0x8
c00188c1:	68 7e 48 02 c0       	push   0xc002487e
c00188c6:	50                   	push   eax
c00188c7:	e8 26 20 ff ff       	call   c000a8f2 <VgaText::puts(char const*)>
c00188cc:	83 c4 10             	add    esp,0x10
c00188cf:	a1 30 98 02 c0       	mov    eax,ds:0xc0029830
c00188d4:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00188da:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00188de:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c00188e1:	83 ec 08             	sub    esp,0x8
c00188e4:	52                   	push   edx
c00188e5:	50                   	push   eax
c00188e6:	e8 c1 1f ff ff       	call   c000a8ac <VgaText::putx(unsigned int)>
c00188eb:	83 c4 10             	add    esp,0x10
c00188ee:	a1 30 98 02 c0       	mov    eax,ds:0xc0029830
c00188f3:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00188f9:	83 ec 08             	sub    esp,0x8
c00188fc:	68 86 48 02 c0       	push   0xc0024886
c0018901:	50                   	push   eax
c0018902:	e8 eb 1f ff ff       	call   c000a8f2 <VgaText::puts(char const*)>
c0018907:	83 c4 10             	add    esp,0x10
c001890a:	a1 30 98 02 c0       	mov    eax,ds:0xc0029830
c001890f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018915:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0018919:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c001891c:	83 ec 08             	sub    esp,0x8
c001891f:	52                   	push   edx
c0018920:	50                   	push   eax
c0018921:	e8 86 1f ff ff       	call   c000a8ac <VgaText::putx(unsigned int)>
c0018926:	83 c4 10             	add    esp,0x10
c0018929:	a1 30 98 02 c0       	mov    eax,ds:0xc0029830
c001892e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018934:	83 ec 08             	sub    esp,0x8
c0018937:	68 8e 48 02 c0       	push   0xc002488e
c001893c:	50                   	push   eax
c001893d:	e8 b0 1f ff ff       	call   c000a8f2 <VgaText::puts(char const*)>
c0018942:	83 c4 10             	add    esp,0x10
c0018945:	a1 30 98 02 c0       	mov    eax,ds:0xc0029830
c001894a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018950:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0018954:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0018957:	83 ec 08             	sub    esp,0x8
c001895a:	52                   	push   edx
c001895b:	50                   	push   eax
c001895c:	e8 4b 1f ff ff       	call   c000a8ac <VgaText::putx(unsigned int)>
c0018961:	83 c4 10             	add    esp,0x10
c0018964:	a1 30 98 02 c0       	mov    eax,ds:0xc0029830
c0018969:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001896f:	83 ec 08             	sub    esp,0x8
c0018972:	68 96 48 02 c0       	push   0xc0024896
c0018977:	50                   	push   eax
c0018978:	e8 75 1f ff ff       	call   c000a8f2 <VgaText::puts(char const*)>
c001897d:	83 c4 10             	add    esp,0x10
c0018980:	a1 30 98 02 c0       	mov    eax,ds:0xc0029830
c0018985:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001898b:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001898f:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c0018992:	83 ec 08             	sub    esp,0x8
c0018995:	52                   	push   edx
c0018996:	50                   	push   eax
c0018997:	e8 10 1f ff ff       	call   c000a8ac <VgaText::putx(unsigned int)>
c001899c:	83 c4 10             	add    esp,0x10
c001899f:	a1 30 98 02 c0       	mov    eax,ds:0xc0029830
c00189a4:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00189aa:	83 ec 08             	sub    esp,0x8
c00189ad:	68 9e 48 02 c0       	push   0xc002489e
c00189b2:	50                   	push   eax
c00189b3:	e8 3a 1f ff ff       	call   c000a8f2 <VgaText::puts(char const*)>
c00189b8:	83 c4 10             	add    esp,0x10
c00189bb:	a1 30 98 02 c0       	mov    eax,ds:0xc0029830
c00189c0:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00189c6:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00189ca:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c00189cd:	83 ec 08             	sub    esp,0x8
c00189d0:	52                   	push   edx
c00189d1:	50                   	push   eax
c00189d2:	e8 d5 1e ff ff       	call   c000a8ac <VgaText::putx(unsigned int)>
c00189d7:	83 c4 10             	add    esp,0x10
c00189da:	a1 30 98 02 c0       	mov    eax,ds:0xc0029830
c00189df:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00189e5:	83 ec 08             	sub    esp,0x8
c00189e8:	68 a6 48 02 c0       	push   0xc00248a6
c00189ed:	50                   	push   eax
c00189ee:	e8 ff 1e ff ff       	call   c000a8f2 <VgaText::puts(char const*)>
c00189f3:	83 c4 10             	add    esp,0x10
c00189f6:	a1 30 98 02 c0       	mov    eax,ds:0xc0029830
c00189fb:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018a01:	83 ec 08             	sub    esp,0x8
c0018a04:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0018a08:	50                   	push   eax
c0018a09:	e8 9e 1e ff ff       	call   c000a8ac <VgaText::putx(unsigned int)>
c0018a0e:	83 c4 10             	add    esp,0x10
c0018a11:	a1 30 98 02 c0       	mov    eax,ds:0xc0029830
c0018a16:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018a1c:	83 ec 08             	sub    esp,0x8
c0018a1f:	68 af 48 02 c0       	push   0xc00248af
c0018a24:	50                   	push   eax
c0018a25:	e8 c8 1e ff ff       	call   c000a8f2 <VgaText::puts(char const*)>
c0018a2a:	83 c4 10             	add    esp,0x10
c0018a2d:	a1 30 98 02 c0       	mov    eax,ds:0xc0029830
c0018a32:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018a38:	83 ec 08             	sub    esp,0x8
c0018a3b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0018a3f:	50                   	push   eax
c0018a40:	e8 67 1e ff ff       	call   c000a8ac <VgaText::putx(unsigned int)>
c0018a45:	83 c4 10             	add    esp,0x10
c0018a48:	a1 30 98 02 c0       	mov    eax,ds:0xc0029830
c0018a4d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018a53:	83 ec 08             	sub    esp,0x8
c0018a56:	68 b7 48 02 c0       	push   0xc00248b7
c0018a5b:	50                   	push   eax
c0018a5c:	e8 91 1e ff ff       	call   c000a8f2 <VgaText::puts(char const*)>
c0018a61:	83 c4 10             	add    esp,0x10
c0018a64:	a1 30 98 02 c0       	mov    eax,ds:0xc0029830
c0018a69:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018a6f:	83 ec 08             	sub    esp,0x8
c0018a72:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018a76:	50                   	push   eax
c0018a77:	e8 30 1e ff ff       	call   c000a8ac <VgaText::putx(unsigned int)>
c0018a7c:	83 c4 10             	add    esp,0x10
c0018a7f:	a1 30 98 02 c0       	mov    eax,ds:0xc0029830
c0018a84:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018a8a:	83 ec 08             	sub    esp,0x8
c0018a8d:	68 bf 48 02 c0       	push   0xc00248bf
c0018a92:	50                   	push   eax
c0018a93:	e8 5a 1e ff ff       	call   c000a8f2 <VgaText::puts(char const*)>
c0018a98:	83 c4 10             	add    esp,0x10
c0018a9b:	a1 30 98 02 c0       	mov    eax,ds:0xc0029830
c0018aa0:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018aa6:	83 ec 08             	sub    esp,0x8
c0018aa9:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0018aad:	50                   	push   eax
c0018aae:	e8 f9 1d ff ff       	call   c000a8ac <VgaText::putx(unsigned int)>
c0018ab3:	83 c4 10             	add    esp,0x10
c0018ab6:	a1 30 98 02 c0       	mov    eax,ds:0xc0029830
c0018abb:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018ac1:	83 ec 08             	sub    esp,0x8
c0018ac4:	68 c7 48 02 c0       	push   0xc00248c7
c0018ac9:	50                   	push   eax
c0018aca:	e8 23 1e ff ff       	call   c000a8f2 <VgaText::puts(char const*)>
c0018acf:	83 c4 10             	add    esp,0x10
c0018ad2:	a1 30 98 02 c0       	mov    eax,ds:0xc0029830
c0018ad7:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018add:	0f 21 c2             	mov    edx,db0
c0018ae0:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0018ae4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0018ae8:	83 ec 08             	sub    esp,0x8
c0018aeb:	52                   	push   edx
c0018aec:	50                   	push   eax
c0018aed:	e8 ba 1d ff ff       	call   c000a8ac <VgaText::putx(unsigned int)>
c0018af2:	83 c4 10             	add    esp,0x10
c0018af5:	a1 30 98 02 c0       	mov    eax,ds:0xc0029830
c0018afa:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018b00:	83 ec 08             	sub    esp,0x8
c0018b03:	68 d0 48 02 c0       	push   0xc00248d0
c0018b08:	50                   	push   eax
c0018b09:	e8 e4 1d ff ff       	call   c000a8f2 <VgaText::puts(char const*)>
c0018b0e:	83 c4 10             	add    esp,0x10
c0018b11:	a1 30 98 02 c0       	mov    eax,ds:0xc0029830
c0018b16:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018b1c:	0f 21 ca             	mov    edx,db1
c0018b1f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0018b23:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018b27:	83 ec 08             	sub    esp,0x8
c0018b2a:	52                   	push   edx
c0018b2b:	50                   	push   eax
c0018b2c:	e8 7b 1d ff ff       	call   c000a8ac <VgaText::putx(unsigned int)>
c0018b31:	83 c4 10             	add    esp,0x10
c0018b34:	a1 30 98 02 c0       	mov    eax,ds:0xc0029830
c0018b39:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018b3f:	83 ec 08             	sub    esp,0x8
c0018b42:	68 d8 48 02 c0       	push   0xc00248d8
c0018b47:	50                   	push   eax
c0018b48:	e8 a5 1d ff ff       	call   c000a8f2 <VgaText::puts(char const*)>
c0018b4d:	83 c4 10             	add    esp,0x10
c0018b50:	a1 30 98 02 c0       	mov    eax,ds:0xc0029830
c0018b55:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018b5b:	0f 21 d2             	mov    edx,db2
c0018b5e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0018b62:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018b66:	83 ec 08             	sub    esp,0x8
c0018b69:	52                   	push   edx
c0018b6a:	50                   	push   eax
c0018b6b:	e8 3c 1d ff ff       	call   c000a8ac <VgaText::putx(unsigned int)>
c0018b70:	83 c4 10             	add    esp,0x10
c0018b73:	a1 30 98 02 c0       	mov    eax,ds:0xc0029830
c0018b78:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018b7e:	83 ec 08             	sub    esp,0x8
c0018b81:	68 e0 48 02 c0       	push   0xc00248e0
c0018b86:	50                   	push   eax
c0018b87:	e8 66 1d ff ff       	call   c000a8f2 <VgaText::puts(char const*)>
c0018b8c:	83 c4 10             	add    esp,0x10
c0018b8f:	a1 30 98 02 c0       	mov    eax,ds:0xc0029830
c0018b94:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018b9a:	0f 21 da             	mov    edx,db3
c0018b9d:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0018ba1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018ba5:	83 ec 08             	sub    esp,0x8
c0018ba8:	52                   	push   edx
c0018ba9:	50                   	push   eax
c0018baa:	e8 fd 1c ff ff       	call   c000a8ac <VgaText::putx(unsigned int)>
c0018baf:	83 c4 10             	add    esp,0x10
c0018bb2:	a1 30 98 02 c0       	mov    eax,ds:0xc0029830
c0018bb7:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018bbd:	83 ec 08             	sub    esp,0x8
c0018bc0:	68 e8 48 02 c0       	push   0xc00248e8
c0018bc5:	50                   	push   eax
c0018bc6:	e8 27 1d ff ff       	call   c000a8f2 <VgaText::puts(char const*)>
c0018bcb:	83 c4 10             	add    esp,0x10
c0018bce:	a1 30 98 02 c0       	mov    eax,ds:0xc0029830
c0018bd3:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018bd9:	0f 21 f2             	mov    edx,db6
c0018bdc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0018be0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0018be4:	83 ec 08             	sub    esp,0x8
c0018be7:	52                   	push   edx
c0018be8:	50                   	push   eax
c0018be9:	e8 be 1c ff ff       	call   c000a8ac <VgaText::putx(unsigned int)>
c0018bee:	83 c4 10             	add    esp,0x10
c0018bf1:	a1 30 98 02 c0       	mov    eax,ds:0xc0029830
c0018bf6:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018bfc:	83 ec 08             	sub    esp,0x8
c0018bff:	68 f0 48 02 c0       	push   0xc00248f0
c0018c04:	50                   	push   eax
c0018c05:	e8 e8 1c ff ff       	call   c000a8f2 <VgaText::puts(char const*)>
c0018c0a:	83 c4 10             	add    esp,0x10
c0018c0d:	a1 30 98 02 c0       	mov    eax,ds:0xc0029830
c0018c12:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018c18:	0f 21 fa             	mov    edx,db7
c0018c1b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0018c1f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018c23:	83 ec 08             	sub    esp,0x8
c0018c26:	52                   	push   edx
c0018c27:	50                   	push   eax
c0018c28:	e8 7f 1c ff ff       	call   c000a8ac <VgaText::putx(unsigned int)>
c0018c2d:	83 c4 10             	add    esp,0x10
c0018c30:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0018c34:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0018c37:	83 ec 0c             	sub    esp,0xc
c0018c3a:	50                   	push   eax
c0018c3b:	e8 71 c9 ff ff       	call   c00155b1 <Thr::getDriverNameFromAddress(unsigned long)>
c0018c40:	83 c4 10             	add    esp,0x10
c0018c43:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0018c47:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0018c4c:	0f 84 a6 00 00 00    	je     c0018cf8 <displayDebugInfo(regs*)+0x650>
c0018c52:	83 ec 08             	sub    esp,0x8
c0018c55:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0018c59:	68 f8 48 02 c0       	push   0xc00248f8
c0018c5e:	e8 ce 3a ff ff       	call   c000c731 <Dbg::kprintf(char const*, ...)>
c0018c63:	83 c4 10             	add    esp,0x10
c0018c66:	a1 30 98 02 c0       	mov    eax,ds:0xc0029830
c0018c6b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018c71:	83 ec 08             	sub    esp,0x8
c0018c74:	68 06 49 02 c0       	push   0xc0024906
c0018c79:	50                   	push   eax
c0018c7a:	e8 73 1c ff ff       	call   c000a8f2 <VgaText::puts(char const*)>
c0018c7f:	83 c4 10             	add    esp,0x10
c0018c82:	a1 30 98 02 c0       	mov    eax,ds:0xc0029830
c0018c87:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018c8d:	83 ec 08             	sub    esp,0x8
c0018c90:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0018c94:	50                   	push   eax
c0018c95:	e8 58 1c ff ff       	call   c000a8f2 <VgaText::puts(char const*)>
c0018c9a:	83 c4 10             	add    esp,0x10
c0018c9d:	a1 30 98 02 c0       	mov    eax,ds:0xc0029830
c0018ca2:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018ca8:	83 ec 08             	sub    esp,0x8
c0018cab:	68 12 49 02 c0       	push   0xc0024912
c0018cb0:	50                   	push   eax
c0018cb1:	e8 3c 1c ff ff       	call   c000a8f2 <VgaText::puts(char const*)>
c0018cb6:	83 c4 10             	add    esp,0x10
c0018cb9:	a1 30 98 02 c0       	mov    eax,ds:0xc0029830
c0018cbe:	8b 98 06 05 00 00    	mov    ebx,DWORD PTR [eax+0x506]
c0018cc4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0018cc8:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0018ccb:	83 ec 0c             	sub    esp,0xc
c0018cce:	50                   	push   eax
c0018ccf:	e8 14 c9 ff ff       	call   c00155e8 <Thr::getDriverOffsetFromAddress(unsigned long)>
c0018cd4:	83 c4 10             	add    esp,0x10
c0018cd7:	83 ec 08             	sub    esp,0x8
c0018cda:	50                   	push   eax
c0018cdb:	53                   	push   ebx
c0018cdc:	e8 cb 1b ff ff       	call   c000a8ac <VgaText::putx(unsigned int)>
c0018ce1:	83 c4 10             	add    esp,0x10
c0018ce4:	83 ec 08             	sub    esp,0x8
c0018ce7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0018ceb:	68 1e 49 02 c0       	push   0xc002491e
c0018cf0:	e8 3c 3a ff ff       	call   c000c731 <Dbg::kprintf(char const*, ...)>
c0018cf5:	83 c4 10             	add    esp,0x10
c0018cf8:	fa                   	cli    
c0018cf9:	f4                   	hlt    
c0018cfa:	eb fe                	jmp    c0018cfa <displayDebugInfo(regs*)+0x652>

c0018cfc <displayProgramFault(char const*)>:
c0018cfc:	83 ec 0c             	sub    esp,0xc
c0018cff:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0018d04:	8b 00                	mov    eax,DWORD PTR [eax]
c0018d06:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0018d09:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018d0f:	85 c0                	test   eax,eax
c0018d11:	74 21                	je     c0018d34 <displayProgramFault(char const*)+0x38>
c0018d13:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0018d18:	8b 00                	mov    eax,DWORD PTR [eax]
c0018d1a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0018d1d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018d23:	6a 04                	push   0x4
c0018d25:	6a 0f                	push   0xf
c0018d27:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0018d2b:	50                   	push   eax
c0018d2c:	e8 33 1c ff ff       	call   c000a964 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0018d31:	83 c4 10             	add    esp,0x10
c0018d34:	90                   	nop
c0018d35:	83 c4 0c             	add    esp,0xc
c0018d38:	c3                   	ret    

c0018d39 <gpFault(regs*, void*)>:
c0018d39:	83 ec 1c             	sub    esp,0x1c
c0018d3c:	c7 05 fc 98 02 c0 cb 6f 01 c0 	mov    DWORD PTR ds:0xc00298fc,0xc0016fcb
c0018d46:	a1 fc 98 02 c0       	mov    eax,ds:0xc00298fc
c0018d4b:	85 c0                	test   eax,eax
c0018d4d:	74 1c                	je     c0018d6b <gpFault(regs*, void*)+0x32>
c0018d4f:	a1 fc 98 02 c0       	mov    eax,ds:0xc00298fc
c0018d54:	83 ec 0c             	sub    esp,0xc
c0018d57:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018d5b:	ff d0                	call   eax
c0018d5d:	83 c4 10             	add    esp,0x10
c0018d60:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0018d64:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0018d69:	75 3e                	jne    c0018da9 <gpFault(regs*, void*)+0x70>
c0018d6b:	83 ec 0c             	sub    esp,0xc
c0018d6e:	68 2e 49 02 c0       	push   0xc002492e
c0018d73:	e8 b9 39 ff ff       	call   c000c731 <Dbg::kprintf(char const*, ...)>
c0018d78:	83 c4 10             	add    esp,0x10
c0018d7b:	83 ec 0c             	sub    esp,0xc
c0018d7e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018d82:	e8 21 f9 ff ff       	call   c00186a8 <displayDebugInfo(regs*)>
c0018d87:	83 c4 10             	add    esp,0x10
c0018d8a:	83 ec 0c             	sub    esp,0xc
c0018d8d:	68 49 49 02 c0       	push   0xc0024949
c0018d92:	e8 65 ff ff ff       	call   c0018cfc <displayProgramFault(char const*)>
c0018d97:	83 c4 10             	add    esp,0x10
c0018d9a:	83 ec 0c             	sub    esp,0xc
c0018d9d:	6a 00                	push   0x0
c0018d9f:	e8 20 dc ff ff       	call   c00169c4 <Thr::terminateFromIRQ(int)>
c0018da4:	83 c4 10             	add    esp,0x10
c0018da7:	eb 01                	jmp    c0018daa <gpFault(regs*, void*)+0x71>
c0018da9:	90                   	nop
c0018daa:	83 c4 1c             	add    esp,0x1c
c0018dad:	c3                   	ret    

c0018dae <pgFault(regs*, void*)>:
c0018dae:	83 ec 1c             	sub    esp,0x1c
c0018db1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018db5:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0018db8:	83 ec 08             	sub    esp,0x8
c0018dbb:	50                   	push   eax
c0018dbc:	68 62 49 02 c0       	push   0xc0024962
c0018dc1:	e8 6b 39 ff ff       	call   c000c731 <Dbg::kprintf(char const*, ...)>
c0018dc6:	83 c4 10             	add    esp,0x10
c0018dc9:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0018dce:	8b 00                	mov    eax,DWORD PTR [eax]
c0018dd0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0018dd3:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0018dd9:	0f 20 d2             	mov    edx,cr2
c0018ddc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0018de0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018de4:	83 ec 08             	sub    esp,0x8
c0018de7:	52                   	push   edx
c0018de8:	50                   	push   eax
c0018de9:	e8 be 34 ff ff       	call   c000c2ac <VAS::tryLoadBackOffDisk(unsigned long)>
c0018dee:	83 c4 10             	add    esp,0x10
c0018df1:	84 c0                	test   al,al
c0018df3:	75 3e                	jne    c0018e33 <pgFault(regs*, void*)+0x85>
c0018df5:	83 ec 0c             	sub    esp,0xc
c0018df8:	68 77 49 02 c0       	push   0xc0024977
c0018dfd:	e8 2f 39 ff ff       	call   c000c731 <Dbg::kprintf(char const*, ...)>
c0018e02:	83 c4 10             	add    esp,0x10
c0018e05:	83 ec 0c             	sub    esp,0xc
c0018e08:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018e0c:	e8 97 f8 ff ff       	call   c00186a8 <displayDebugInfo(regs*)>
c0018e11:	83 c4 10             	add    esp,0x10
c0018e14:	83 ec 0c             	sub    esp,0xc
c0018e17:	68 84 49 02 c0       	push   0xc0024984
c0018e1c:	e8 db fe ff ff       	call   c0018cfc <displayProgramFault(char const*)>
c0018e21:	83 c4 10             	add    esp,0x10
c0018e24:	83 ec 0c             	sub    esp,0xc
c0018e27:	6a 00                	push   0x0
c0018e29:	e8 96 db ff ff       	call   c00169c4 <Thr::terminateFromIRQ(int)>
c0018e2e:	83 c4 10             	add    esp,0x10
c0018e31:	eb 01                	jmp    c0018e34 <pgFault(regs*, void*)+0x86>
c0018e33:	90                   	nop
c0018e34:	83 c4 1c             	add    esp,0x1c
c0018e37:	c3                   	ret    

c0018e38 <otherISRHandler(regs*, void*)>:
c0018e38:	83 ec 0c             	sub    esp,0xc
c0018e3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018e3f:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c0018e42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018e46:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0018e49:	83 ec 04             	sub    esp,0x4
c0018e4c:	52                   	push   edx
c0018e4d:	50                   	push   eax
c0018e4e:	68 8f 49 02 c0       	push   0xc002498f
c0018e53:	e8 d9 38 ff ff       	call   c000c731 <Dbg::kprintf(char const*, ...)>
c0018e58:	83 c4 10             	add    esp,0x10
c0018e5b:	83 ec 0c             	sub    esp,0xc
c0018e5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018e62:	e8 41 f8 ff ff       	call   c00186a8 <displayDebugInfo(regs*)>
c0018e67:	83 c4 10             	add    esp,0x10
c0018e6a:	83 ec 0c             	sub    esp,0xc
c0018e6d:	68 58 4a 02 c0       	push   0xc0024a58
c0018e72:	e8 85 fe ff ff       	call   c0018cfc <displayProgramFault(char const*)>
c0018e77:	83 c4 10             	add    esp,0x10
c0018e7a:	83 ec 0c             	sub    esp,0xc
c0018e7d:	6a 00                	push   0x0
c0018e7f:	e8 40 db ff ff       	call   c00169c4 <Thr::terminateFromIRQ(int)>
c0018e84:	83 c4 10             	add    esp,0x10
c0018e87:	90                   	nop
c0018e88:	83 c4 0c             	add    esp,0xc
c0018e8b:	c3                   	ret    

c0018e8c <opcodeFault(regs*, void*)>:
c0018e8c:	55                   	push   ebp
c0018e8d:	89 e5                	mov    ebp,esp
c0018e8f:	56                   	push   esi
c0018e90:	53                   	push   ebx
c0018e91:	83 ec 30             	sub    esp,0x30
c0018e94:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018e97:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0018e9a:	83 ec 08             	sub    esp,0x8
c0018e9d:	50                   	push   eax
c0018e9e:	68 ac 49 02 c0       	push   0xc00249ac
c0018ea3:	e8 89 38 ff ff       	call   c000c731 <Dbg::kprintf(char const*, ...)>
c0018ea8:	83 c4 10             	add    esp,0x10
c0018eab:	a1 28 63 02 c0       	mov    eax,ds:0xc0026328
c0018eb0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0018eb6:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0018ebc:	84 c0                	test   al,al
c0018ebe:	74 24                	je     c0018ee4 <opcodeFault(regs*, void*)+0x58>
c0018ec0:	83 ec 0c             	sub    esp,0xc
c0018ec3:	68 80 4a 02 c0       	push   0xc0024a80
c0018ec8:	e8 64 38 ff ff       	call   c000c731 <Dbg::kprintf(char const*, ...)>
c0018ecd:	83 c4 10             	add    esp,0x10
c0018ed0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018ed3:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0018ed6:	8d 50 19             	lea    edx,[eax+0x19]
c0018ed9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018edc:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0018edf:	e9 9b 03 00 00       	jmp    c001927f <opcodeFault(regs*, void*)+0x3f3>
c0018ee4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018ee7:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0018eea:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0018eed:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c0018ef1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018ef4:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0018ef7:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0018efa:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0018efd:	8a 00                	mov    al,BYTE PTR [eax]
c0018eff:	3c f0                	cmp    al,0xf0
c0018f01:	75 17                	jne    c0018f1a <opcodeFault(regs*, void*)+0x8e>
c0018f03:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0018f06:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018f09:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0018f0c:	8d 50 01             	lea    edx,[eax+0x1]
c0018f0f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018f12:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0018f15:	e9 d6 00 00 00       	jmp    c0018ff0 <opcodeFault(regs*, void*)+0x164>
c0018f1a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0018f1d:	8a 00                	mov    al,BYTE PTR [eax]
c0018f1f:	3c f2                	cmp    al,0xf2
c0018f21:	74 09                	je     c0018f2c <opcodeFault(regs*, void*)+0xa0>
c0018f23:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0018f26:	8a 00                	mov    al,BYTE PTR [eax]
c0018f28:	3c f3                	cmp    al,0xf3
c0018f2a:	75 1b                	jne    c0018f47 <opcodeFault(regs*, void*)+0xbb>
c0018f2c:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0018f30:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0018f33:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018f36:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0018f39:	8d 50 01             	lea    edx,[eax+0x1]
c0018f3c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018f3f:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0018f42:	e9 a9 00 00 00       	jmp    c0018ff0 <opcodeFault(regs*, void*)+0x164>
c0018f47:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0018f4a:	8a 00                	mov    al,BYTE PTR [eax]
c0018f4c:	3c 66                	cmp    al,0x66
c0018f4e:	75 1b                	jne    c0018f6b <opcodeFault(regs*, void*)+0xdf>
c0018f50:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0018f54:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0018f57:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018f5a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0018f5d:	8d 50 01             	lea    edx,[eax+0x1]
c0018f60:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018f63:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0018f66:	e9 85 00 00 00       	jmp    c0018ff0 <opcodeFault(regs*, void*)+0x164>
c0018f6b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0018f6e:	8a 00                	mov    al,BYTE PTR [eax]
c0018f70:	3c 67                	cmp    al,0x67
c0018f72:	75 18                	jne    c0018f8c <opcodeFault(regs*, void*)+0x100>
c0018f74:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0018f78:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0018f7b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018f7e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0018f81:	8d 50 01             	lea    edx,[eax+0x1]
c0018f84:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018f87:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0018f8a:	eb 64                	jmp    c0018ff0 <opcodeFault(regs*, void*)+0x164>
c0018f8c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0018f8f:	8a 00                	mov    al,BYTE PTR [eax]
c0018f91:	3c 2e                	cmp    al,0x2e
c0018f93:	74 09                	je     c0018f9e <opcodeFault(regs*, void*)+0x112>
c0018f95:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0018f98:	8a 00                	mov    al,BYTE PTR [eax]
c0018f9a:	3c 3e                	cmp    al,0x3e
c0018f9c:	75 18                	jne    c0018fb6 <opcodeFault(regs*, void*)+0x12a>
c0018f9e:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0018fa2:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0018fa5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018fa8:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0018fab:	8d 50 01             	lea    edx,[eax+0x1]
c0018fae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018fb1:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0018fb4:	eb 3a                	jmp    c0018ff0 <opcodeFault(regs*, void*)+0x164>
c0018fb6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0018fb9:	8a 00                	mov    al,BYTE PTR [eax]
c0018fbb:	3c 36                	cmp    al,0x36
c0018fbd:	74 1b                	je     c0018fda <opcodeFault(regs*, void*)+0x14e>
c0018fbf:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0018fc2:	8a 00                	mov    al,BYTE PTR [eax]
c0018fc4:	3c 26                	cmp    al,0x26
c0018fc6:	74 12                	je     c0018fda <opcodeFault(regs*, void*)+0x14e>
c0018fc8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0018fcb:	8a 00                	mov    al,BYTE PTR [eax]
c0018fcd:	3c 64                	cmp    al,0x64
c0018fcf:	74 09                	je     c0018fda <opcodeFault(regs*, void*)+0x14e>
c0018fd1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0018fd4:	8a 00                	mov    al,BYTE PTR [eax]
c0018fd6:	3c 65                	cmp    al,0x65
c0018fd8:	75 16                	jne    c0018ff0 <opcodeFault(regs*, void*)+0x164>
c0018fda:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0018fde:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0018fe1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018fe4:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0018fe7:	8d 50 01             	lea    edx,[eax+0x1]
c0018fea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018fed:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0018ff0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0018ff3:	8a 00                	mov    al,BYTE PTR [eax]
c0018ff5:	3c 0f                	cmp    al,0xf
c0018ff7:	0f 85 8d 01 00 00    	jne    c001918a <opcodeFault(regs*, void*)+0x2fe>
c0018ffd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0019000:	40                   	inc    eax
c0019001:	8a 00                	mov    al,BYTE PTR [eax]
c0019003:	3c c7                	cmp    al,0xc7
c0019005:	0f 85 7f 01 00 00    	jne    c001918a <opcodeFault(regs*, void*)+0x2fe>
c001900b:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001900e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019011:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0019014:	8d 50 01             	lea    edx,[eax+0x1]
c0019017:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001901a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001901d:	8d 45 d2             	lea    eax,[ebp-0x2e]
c0019020:	50                   	push   eax
c0019021:	8d 45 d3             	lea    eax,[ebp-0x2d]
c0019024:	50                   	push   eax
c0019025:	8d 45 d4             	lea    eax,[ebp-0x2c]
c0019028:	50                   	push   eax
c0019029:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001902c:	e8 83 91 ff ff       	call   c00121b4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0019031:	83 c4 10             	add    esp,0x10
c0019034:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0019037:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c001903a:	83 f0 01             	xor    eax,0x1
c001903d:	84 c0                	test   al,al
c001903f:	0f 84 45 01 00 00    	je     c001918a <opcodeFault(regs*, void*)+0x2fe>
c0019045:	8a 45 d2             	mov    al,BYTE PTR [ebp-0x2e]
c0019048:	3c 01                	cmp    al,0x1
c001904a:	0f 85 3a 01 00 00    	jne    c001918a <opcodeFault(regs*, void*)+0x2fe>
c0019050:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c0019053:	83 f0 01             	xor    eax,0x1
c0019056:	84 c0                	test   al,al
c0019058:	0f 84 2c 01 00 00    	je     c001918a <opcodeFault(regs*, void*)+0x2fe>
c001905e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019061:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0019064:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0019067:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c001906e:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0019071:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0019074:	89 c2                	mov    edx,eax
c0019076:	b8 00 00 00 00       	mov    eax,0x0
c001907b:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c001907e:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0019081:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019084:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0019087:	ba 00 00 00 00       	mov    edx,0x0
c001908c:	09 45 e0             	or     DWORD PTR [ebp-0x20],eax
c001908f:	09 55 e4             	or     DWORD PTR [ebp-0x1c],edx
c0019092:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019095:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0019098:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001909b:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c00190a2:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00190a5:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00190a8:	89 c2                	mov    edx,eax
c00190aa:	b8 00 00 00 00       	mov    eax,0x0
c00190af:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c00190b2:	89 55 dc             	mov    DWORD PTR [ebp-0x24],edx
c00190b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00190b8:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00190bb:	ba 00 00 00 00       	mov    edx,0x0
c00190c0:	09 45 d8             	or     DWORD PTR [ebp-0x28],eax
c00190c3:	09 55 dc             	or     DWORD PTR [ebp-0x24],edx
c00190c6:	fa                   	cli    
c00190c7:	a1 08 98 02 c0       	mov    eax,ds:0xc0029808
c00190cc:	40                   	inc    eax
c00190cd:	a3 08 98 02 c0       	mov    ds:0xc0029808,eax
c00190d2:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00190d5:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00190d8:	8b 00                	mov    eax,DWORD PTR [eax]
c00190da:	89 c1                	mov    ecx,eax
c00190dc:	33 4d e0             	xor    ecx,DWORD PTR [ebp-0x20]
c00190df:	89 cb                	mov    ebx,ecx
c00190e1:	89 d0                	mov    eax,edx
c00190e3:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c00190e6:	89 c6                	mov    esi,eax
c00190e8:	89 f0                	mov    eax,esi
c00190ea:	09 d8                	or     eax,ebx
c00190ec:	85 c0                	test   eax,eax
c00190ee:	75 21                	jne    c0019111 <opcodeFault(regs*, void*)+0x285>
c00190f0:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c00190f3:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00190f6:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00190f9:	89 01                	mov    DWORD PTR [ecx],eax
c00190fb:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00190fe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019101:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0019104:	83 c8 40             	or     eax,0x40
c0019107:	89 c2                	mov    edx,eax
c0019109:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001910c:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c001910f:	eb 3e                	jmp    c001914f <opcodeFault(regs*, void*)+0x2c3>
c0019111:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0019114:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0019117:	8b 00                	mov    eax,DWORD PTR [eax]
c0019119:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c001911c:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c001911f:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0019122:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019125:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0019128:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c001912b:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001912e:	89 d0                	mov    eax,edx
c0019130:	31 d2                	xor    edx,edx
c0019132:	89 c3                	mov    ebx,eax
c0019134:	89 d6                	mov    esi,edx
c0019136:	89 da                	mov    edx,ebx
c0019138:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001913b:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c001913e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019141:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0019144:	83 e0 bf             	and    eax,0xffffffbf
c0019147:	89 c2                	mov    edx,eax
c0019149:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001914c:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c001914f:	a1 08 98 02 c0       	mov    eax,ds:0xc0029808
c0019154:	48                   	dec    eax
c0019155:	a3 08 98 02 c0       	mov    ds:0xc0029808,eax
c001915a:	a1 08 98 02 c0       	mov    eax,ds:0xc0029808
c001915f:	85 c0                	test   eax,eax
c0019161:	75 01                	jne    c0019164 <opcodeFault(regs*, void*)+0x2d8>
c0019163:	fb                   	sti    
c0019164:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019167:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001916a:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001916d:	01 c2                	add    edx,eax
c001916f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019172:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0019175:	83 ec 0c             	sub    esp,0xc
c0019178:	68 ba 49 02 c0       	push   0xc00249ba
c001917d:	e8 af 35 ff ff       	call   c000c731 <Dbg::kprintf(char const*, ...)>
c0019182:	83 c4 10             	add    esp,0x10
c0019185:	e9 f5 00 00 00       	jmp    c001927f <opcodeFault(regs*, void*)+0x3f3>
c001918a:	83 ec 0c             	sub    esp,0xc
c001918d:	68 cd 49 02 c0       	push   0xc00249cd
c0019192:	e8 9a 35 ff ff       	call   c000c731 <Dbg::kprintf(char const*, ...)>
c0019197:	83 c4 10             	add    esp,0x10
c001919a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001919d:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00191a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00191a3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00191a6:	c1 e0 04             	shl    eax,0x4
c00191a9:	01 d0                	add    eax,edx
c00191ab:	83 c0 03             	add    eax,0x3
c00191ae:	8a 00                	mov    al,BYTE PTR [eax]
c00191b0:	0f b6 d8             	movzx  ebx,al
c00191b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00191b6:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00191b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00191bc:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00191bf:	c1 e0 04             	shl    eax,0x4
c00191c2:	01 d0                	add    eax,edx
c00191c4:	83 c0 02             	add    eax,0x2
c00191c7:	8a 00                	mov    al,BYTE PTR [eax]
c00191c9:	0f b6 c8             	movzx  ecx,al
c00191cc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00191cf:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00191d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00191d5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00191d8:	c1 e0 04             	shl    eax,0x4
c00191db:	01 d0                	add    eax,edx
c00191dd:	40                   	inc    eax
c00191de:	8a 00                	mov    al,BYTE PTR [eax]
c00191e0:	0f b6 d0             	movzx  edx,al
c00191e3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00191e6:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c00191e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00191ec:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00191ef:	c1 e0 04             	shl    eax,0x4
c00191f2:	01 f0                	add    eax,esi
c00191f4:	8a 00                	mov    al,BYTE PTR [eax]
c00191f6:	0f b6 c0             	movzx  eax,al
c00191f9:	83 ec 0c             	sub    esp,0xc
c00191fc:	53                   	push   ebx
c00191fd:	51                   	push   ecx
c00191fe:	52                   	push   edx
c00191ff:	50                   	push   eax
c0019200:	68 a4 4a 02 c0       	push   0xc0024aa4
c0019205:	e8 27 35 ff ff       	call   c000c731 <Dbg::kprintf(char const*, ...)>
c001920a:	83 c4 20             	add    esp,0x20
c001920d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019210:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0019213:	83 c0 03             	add    eax,0x3
c0019216:	8a 00                	mov    al,BYTE PTR [eax]
c0019218:	0f b6 d8             	movzx  ebx,al
c001921b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001921e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0019221:	83 c0 02             	add    eax,0x2
c0019224:	8a 00                	mov    al,BYTE PTR [eax]
c0019226:	0f b6 c8             	movzx  ecx,al
c0019229:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001922c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001922f:	40                   	inc    eax
c0019230:	8a 00                	mov    al,BYTE PTR [eax]
c0019232:	0f b6 d0             	movzx  edx,al
c0019235:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019238:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001923b:	8a 00                	mov    al,BYTE PTR [eax]
c001923d:	0f b6 c0             	movzx  eax,al
c0019240:	83 ec 0c             	sub    esp,0xc
c0019243:	53                   	push   ebx
c0019244:	51                   	push   ecx
c0019245:	52                   	push   edx
c0019246:	50                   	push   eax
c0019247:	68 cc 4a 02 c0       	push   0xc0024acc
c001924c:	e8 e0 34 ff ff       	call   c000c731 <Dbg::kprintf(char const*, ...)>
c0019251:	83 c4 20             	add    esp,0x20
c0019254:	83 ec 0c             	sub    esp,0xc
c0019257:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001925a:	e8 49 f4 ff ff       	call   c00186a8 <displayDebugInfo(regs*)>
c001925f:	83 c4 10             	add    esp,0x10
c0019262:	83 ec 0c             	sub    esp,0xc
c0019265:	68 de 49 02 c0       	push   0xc00249de
c001926a:	e8 8d fa ff ff       	call   c0018cfc <displayProgramFault(char const*)>
c001926f:	83 c4 10             	add    esp,0x10
c0019272:	83 ec 0c             	sub    esp,0xc
c0019275:	6a 00                	push   0x0
c0019277:	e8 48 d7 ff ff       	call   c00169c4 <Thr::terminateFromIRQ(int)>
c001927c:	83 c4 10             	add    esp,0x10
c001927f:	8d 65 f8             	lea    esp,[ebp-0x8]
c0019282:	5b                   	pop    ebx
c0019283:	5e                   	pop    esi
c0019284:	5d                   	pop    ebp
c0019285:	c3                   	ret    

c0019286 <i386SaveCoprocessor(void*)>:
c0019286:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001928a:	83 c0 3f             	add    eax,0x3f
c001928d:	83 e0 c0             	and    eax,0xffffffc0
c0019290:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019294:	ff 25 f4 98 02 c0    	jmp    DWORD PTR ds:0xc00298f4

c001929a <i386LoadCoprocessor(void*)>:
c001929a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001929e:	83 c0 3f             	add    eax,0x3f
c00192a1:	83 e0 c0             	and    eax,0xffffffc0
c00192a4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00192a8:	ff 25 f0 98 02 c0    	jmp    DWORD PTR ds:0xc00298f0

c00192ae <x87EmulHandler(regs*, void*)>:
c00192ae:	53                   	push   ebx
c00192af:	83 ec 14             	sub    esp,0x14
c00192b2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00192b6:	68 eb 49 02 c0       	push   0xc00249eb
c00192bb:	e8 71 34 ff ff       	call   c000c731 <Dbg::kprintf(char const*, ...)>
c00192c0:	83 c4 10             	add    esp,0x10
c00192c3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00192c8:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c00192cc:	74 10                	je     c00192de <x87EmulHandler(regs*, void*)+0x30>
c00192ce:	83 ec 0c             	sub    esp,0xc
c00192d1:	68 fb 49 02 c0       	push   0xc00249fb
c00192d6:	e8 c0 97 ff ff       	call   c0012a9b <Krnl::panic(char const*)>
c00192db:	83 c4 10             	add    esp,0x10
c00192de:	0f 20 c0             	mov    eax,cr0
c00192e1:	a8 08                	test   al,0x8
c00192e3:	74 56                	je     c001933b <x87EmulHandler(regs*, void*)+0x8d>
c00192e5:	0f 06                	clts   
c00192e7:	a1 ec 98 02 c0       	mov    eax,ds:0xc00298ec
c00192ec:	85 c0                	test   eax,eax
c00192ee:	74 0e                	je     c00192fe <x87EmulHandler(regs*, void*)+0x50>
c00192f0:	83 ec 0c             	sub    esp,0xc
c00192f3:	ff 70 55             	push   DWORD PTR [eax+0x55]
c00192f6:	e8 8b ff ff ff       	call   c0019286 <i386SaveCoprocessor(void*)>
c00192fb:	83 c4 10             	add    esp,0x10
c00192fe:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c0019304:	83 7b 55 00          	cmp    DWORD PTR [ebx+0x55],0x0
c0019308:	75 12                	jne    c001931c <x87EmulHandler(regs*, void*)+0x6e>
c001930a:	83 ec 0c             	sub    esp,0xc
c001930d:	68 40 02 00 00       	push   0x240
c0019312:	e8 80 04 ff ff       	call   c0009797 <malloc>
c0019317:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c001931a:	eb 10                	jmp    c001932c <x87EmulHandler(regs*, void*)+0x7e>
c001931c:	83 ec 0c             	sub    esp,0xc
c001931f:	a1 ec 98 02 c0       	mov    eax,ds:0xc00298ec
c0019324:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0019327:	e8 6e ff ff ff       	call   c001929a <i386LoadCoprocessor(void*)>
c001932c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019331:	83 c4 10             	add    esp,0x10
c0019334:	a3 ec 98 02 c0       	mov    ds:0xc00298ec,eax
c0019339:	eb 2e                	jmp    c0019369 <x87EmulHandler(regs*, void*)+0xbb>
c001933b:	83 ec 0c             	sub    esp,0xc
c001933e:	53                   	push   ebx
c001933f:	e8 ca e7 ff ff       	call   c0017b0e <Vm::x87Handler(regs*)>
c0019344:	83 c4 10             	add    esp,0x10
c0019347:	84 c0                	test   al,al
c0019349:	75 1e                	jne    c0019369 <x87EmulHandler(regs*, void*)+0xbb>
c001934b:	83 ec 0c             	sub    esp,0xc
c001934e:	68 0f 4a 02 c0       	push   0xc0024a0f
c0019353:	e8 d9 33 ff ff       	call   c000c731 <Dbg::kprintf(char const*, ...)>
c0019358:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0019360:	83 c4 18             	add    esp,0x18
c0019363:	5b                   	pop    ebx
c0019364:	e9 5b d6 ff ff       	jmp    c00169c4 <Thr::terminateFromIRQ(int)>
c0019369:	83 c4 08             	add    esp,0x8
c001936c:	5b                   	pop    ebx
c001936d:	c3                   	ret    

c001936e <Hal::initialiseCoprocessor()>:
c001936e:	83 ec 10             	sub    esp,0x10
c0019371:	c7 05 ec 98 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00298ec,0x0
c001937b:	6a 00                	push   0x0
c001937d:	68 ae 92 01 c0       	push   0xc00192ae
c0019382:	6a 07                	push   0x7
c0019384:	e8 c3 4d ff ff       	call   c000e14c <installISRHandler(int, void (*)(regs*, void*), void*)>
c0019389:	e8 12 7b 00 00       	call   c0020ea0 <avxDetect>
c001938e:	83 c4 10             	add    esp,0x10
c0019391:	85 c0                	test   eax,eax
c0019393:	74 29                	je     c00193be <Hal::initialiseCoprocessor()+0x50>
c0019395:	83 ec 0c             	sub    esp,0xc
c0019398:	68 25 4a 02 c0       	push   0xc0024a25
c001939d:	e8 8f 33 ff ff       	call   c000c731 <Dbg::kprintf(char const*, ...)>
c00193a2:	c7 05 f4 98 02 c0 ca 0e 02 c0 	mov    DWORD PTR ds:0xc00298f4,0xc0020eca
c00193ac:	c7 05 f0 98 02 c0 db 0e 02 c0 	mov    DWORD PTR ds:0xc00298f0,0xc0020edb
c00193b6:	83 c4 1c             	add    esp,0x1c
c00193b9:	e9 2e 7b 00 00       	jmp    c0020eec <avxInit>
c00193be:	e8 5d 7d 00 00       	call   c0021120 <absolutelyNoChanceInHell>
c00193c3:	85 c0                	test   eax,eax
c00193c5:	74 29                	je     c00193f0 <Hal::initialiseCoprocessor()+0x82>
c00193c7:	83 ec 0c             	sub    esp,0xc
c00193ca:	68 2b 4a 02 c0       	push   0xc0024a2b
c00193cf:	e8 5d 33 ff ff       	call   c000c731 <Dbg::kprintf(char const*, ...)>
c00193d4:	c7 05 f4 98 02 c0 38 11 02 c0 	mov    DWORD PTR ds:0xc00298f4,0xc0021138
c00193de:	c7 05 f0 98 02 c0 40 11 02 c0 	mov    DWORD PTR ds:0xc00298f0,0xc0021140
c00193e8:	83 c4 1c             	add    esp,0x1c
c00193eb:	e9 58 7d 00 00       	jmp    c0021148 <sseInit>
c00193f0:	e8 71 7d 00 00       	call   c0021166 <x87Detect>
c00193f5:	85 c0                	test   eax,eax
c00193f7:	74 29                	je     c0019422 <Hal::initialiseCoprocessor()+0xb4>
c00193f9:	83 ec 0c             	sub    esp,0xc
c00193fc:	68 31 4a 02 c0       	push   0xc0024a31
c0019401:	e8 2b 33 ff ff       	call   c000c731 <Dbg::kprintf(char const*, ...)>
c0019406:	c7 05 f4 98 02 c0 81 11 02 c0 	mov    DWORD PTR ds:0xc00298f4,0xc0021181
c0019410:	c7 05 f0 98 02 c0 88 11 02 c0 	mov    DWORD PTR ds:0xc00298f0,0xc0021188
c001941a:	83 c4 1c             	add    esp,0x1c
c001941d:	e9 6d 7d 00 00       	jmp    c002118f <x87Init>
c0019422:	83 ec 0c             	sub    esp,0xc
c0019425:	68 37 4a 02 c0       	push   0xc0024a37
c001942a:	e8 02 33 ff ff       	call   c000c731 <Dbg::kprintf(char const*, ...)>
c001942f:	c7 05 f4 98 02 c0 6d 86 01 c0 	mov    DWORD PTR ds:0xc00298f4,0xc001866d
c0019439:	c7 05 f0 98 02 c0 6d 86 01 c0 	mov    DWORD PTR ds:0xc00298f0,0xc001866d
c0019443:	0f 20 c0             	mov    eax,cr0
c0019446:	83 c8 04             	or     eax,0x4
c0019449:	0f 22 c0             	mov    cr0,eax
c001944c:	83 c4 1c             	add    esp,0x1c
c001944f:	c3                   	ret    

c0019450 <Hal::panic(char const*)>:
c0019450:	e9 46 96 ff ff       	jmp    c0012a9b <Krnl::panic(char const*)>

c0019455 <Hal::initialise()>:
c0019455:	53                   	push   ebx
c0019456:	83 ec 08             	sub    esp,0x8
c0019459:	a1 28 63 02 c0       	mov    eax,ds:0xc0026328
c001945e:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c0019464:	b8 6e 86 01 c0       	mov    eax,0xc001866e
c0019469:	f6 82 8c 11 00 00 02 	test   BYTE PTR [edx+0x118c],0x2
c0019470:	74 05                	je     c0019477 <Hal::initialise()+0x22>
c0019472:	b8 73 86 01 c0       	mov    eax,0xc0018673
c0019477:	a3 f8 98 02 c0       	mov    ds:0xc00298f8,eax
c001947c:	e8 f0 4e ff ff       	call   c000e371 <setupINTS()>
c0019481:	80 3d 00 8c 02 c0 00 	cmp    BYTE PTR ds:0xc0028c00,0x0
c0019488:	a1 28 63 02 c0       	mov    eax,ds:0xc0026328
c001948d:	75 07                	jne    c0019496 <Hal::initialise()+0x41>
c001948f:	80 a0 e8 01 00 00 fe 	and    BYTE PTR [eax+0x1e8],0xfe
c0019496:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001949c:	83 e0 01             	and    eax,0x1
c001949f:	a2 e8 98 02 c0       	mov    ds:0xc00298e8,al
c00194a4:	e8 13 03 00 00       	call   c00197bc <picOpen()>
c00194a9:	80 3d e8 98 02 c0 00 	cmp    BYTE PTR ds:0xc00298e8,0x0
c00194b0:	74 0a                	je     c00194bc <Hal::initialise()+0x67>
c00194b2:	e8 55 02 00 00       	call   c001970c <picDisable()>
c00194b7:	e8 72 73 00 00       	call   c002082e <apicOpen()>
c00194bc:	50                   	push   eax
c00194bd:	6a 00                	push   0x0
c00194bf:	68 38 8e 01 c0       	push   0xc0018e38
c00194c4:	6a 00                	push   0x0
c00194c6:	e8 81 4c ff ff       	call   c000e14c <installISRHandler(int, void (*)(regs*, void*), void*)>
c00194cb:	83 c4 0c             	add    esp,0xc
c00194ce:	6a 00                	push   0x0
c00194d0:	68 38 8e 01 c0       	push   0xc0018e38
c00194d5:	6a 01                	push   0x1
c00194d7:	e8 70 4c ff ff       	call   c000e14c <installISRHandler(int, void (*)(regs*, void*), void*)>
c00194dc:	83 c4 0c             	add    esp,0xc
c00194df:	6a 00                	push   0x0
c00194e1:	68 76 86 01 c0       	push   0xc0018676
c00194e6:	6a 02                	push   0x2
c00194e8:	e8 5f 4c ff ff       	call   c000e14c <installISRHandler(int, void (*)(regs*, void*), void*)>
c00194ed:	83 c4 0c             	add    esp,0xc
c00194f0:	6a 00                	push   0x0
c00194f2:	68 38 8e 01 c0       	push   0xc0018e38
c00194f7:	6a 03                	push   0x3
c00194f9:	e8 4e 4c ff ff       	call   c000e14c <installISRHandler(int, void (*)(regs*, void*), void*)>
c00194fe:	83 c4 0c             	add    esp,0xc
c0019501:	6a 00                	push   0x0
c0019503:	68 38 8e 01 c0       	push   0xc0018e38
c0019508:	6a 04                	push   0x4
c001950a:	e8 3d 4c ff ff       	call   c000e14c <installISRHandler(int, void (*)(regs*, void*), void*)>
c001950f:	83 c4 0c             	add    esp,0xc
c0019512:	6a 00                	push   0x0
c0019514:	68 38 8e 01 c0       	push   0xc0018e38
c0019519:	6a 05                	push   0x5
c001951b:	e8 2c 4c ff ff       	call   c000e14c <installISRHandler(int, void (*)(regs*, void*), void*)>
c0019520:	83 c4 0c             	add    esp,0xc
c0019523:	6a 00                	push   0x0
c0019525:	68 8c 8e 01 c0       	push   0xc0018e8c
c001952a:	6a 06                	push   0x6
c001952c:	e8 1b 4c ff ff       	call   c000e14c <installISRHandler(int, void (*)(regs*, void*), void*)>
c0019531:	83 c4 0c             	add    esp,0xc
c0019534:	6a 00                	push   0x0
c0019536:	68 8f 86 01 c0       	push   0xc001868f
c001953b:	6a 08                	push   0x8
c001953d:	e8 0a 4c ff ff       	call   c000e14c <installISRHandler(int, void (*)(regs*, void*), void*)>
c0019542:	83 c4 0c             	add    esp,0xc
c0019545:	6a 00                	push   0x0
c0019547:	68 38 8e 01 c0       	push   0xc0018e38
c001954c:	6a 09                	push   0x9
c001954e:	e8 f9 4b ff ff       	call   c000e14c <installISRHandler(int, void (*)(regs*, void*), void*)>
c0019553:	83 c4 0c             	add    esp,0xc
c0019556:	6a 00                	push   0x0
c0019558:	68 38 8e 01 c0       	push   0xc0018e38
c001955d:	6a 0a                	push   0xa
c001955f:	e8 e8 4b ff ff       	call   c000e14c <installISRHandler(int, void (*)(regs*, void*), void*)>
c0019564:	83 c4 0c             	add    esp,0xc
c0019567:	6a 00                	push   0x0
c0019569:	68 38 8e 01 c0       	push   0xc0018e38
c001956e:	6a 0b                	push   0xb
c0019570:	e8 d7 4b ff ff       	call   c000e14c <installISRHandler(int, void (*)(regs*, void*), void*)>
c0019575:	83 c4 0c             	add    esp,0xc
c0019578:	6a 00                	push   0x0
c001957a:	68 38 8e 01 c0       	push   0xc0018e38
c001957f:	6a 0c                	push   0xc
c0019581:	e8 c6 4b ff ff       	call   c000e14c <installISRHandler(int, void (*)(regs*, void*), void*)>
c0019586:	83 c4 0c             	add    esp,0xc
c0019589:	6a 00                	push   0x0
c001958b:	68 39 8d 01 c0       	push   0xc0018d39
c0019590:	6a 0d                	push   0xd
c0019592:	e8 b5 4b ff ff       	call   c000e14c <installISRHandler(int, void (*)(regs*, void*), void*)>
c0019597:	83 c4 0c             	add    esp,0xc
c001959a:	6a 00                	push   0x0
c001959c:	68 ae 8d 01 c0       	push   0xc0018dae
c00195a1:	6a 0e                	push   0xe
c00195a3:	e8 a4 4b ff ff       	call   c000e14c <installISRHandler(int, void (*)(regs*, void*), void*)>
c00195a8:	83 c4 0c             	add    esp,0xc
c00195ab:	6a 00                	push   0x0
c00195ad:	68 38 8e 01 c0       	push   0xc0018e38
c00195b2:	6a 0f                	push   0xf
c00195b4:	e8 93 4b ff ff       	call   c000e14c <installISRHandler(int, void (*)(regs*, void*), void*)>
c00195b9:	83 c4 0c             	add    esp,0xc
c00195bc:	6a 00                	push   0x0
c00195be:	68 38 8e 01 c0       	push   0xc0018e38
c00195c3:	6a 10                	push   0x10
c00195c5:	e8 82 4b ff ff       	call   c000e14c <installISRHandler(int, void (*)(regs*, void*), void*)>
c00195ca:	83 c4 0c             	add    esp,0xc
c00195cd:	6a 00                	push   0x0
c00195cf:	68 38 8e 01 c0       	push   0xc0018e38
c00195d4:	6a 11                	push   0x11
c00195d6:	e8 71 4b ff ff       	call   c000e14c <installISRHandler(int, void (*)(regs*, void*), void*)>
c00195db:	83 c4 0c             	add    esp,0xc
c00195de:	6a 00                	push   0x0
c00195e0:	68 38 8e 01 c0       	push   0xc0018e38
c00195e5:	6a 12                	push   0x12
c00195e7:	e8 60 4b ff ff       	call   c000e14c <installISRHandler(int, void (*)(regs*, void*), void*)>
c00195ec:	83 c4 0c             	add    esp,0xc
c00195ef:	6a 00                	push   0x0
c00195f1:	68 38 8e 01 c0       	push   0xc0018e38
c00195f6:	6a 13                	push   0x13
c00195f8:	e8 4f 4b ff ff       	call   c000e14c <installISRHandler(int, void (*)(regs*, void*), void*)>
c00195fd:	83 c4 0c             	add    esp,0xc
c0019600:	6a 00                	push   0x0
c0019602:	68 38 8e 01 c0       	push   0xc0018e38
c0019607:	6a 14                	push   0x14
c0019609:	e8 3e 4b ff ff       	call   c000e14c <installISRHandler(int, void (*)(regs*, void*), void*)>
c001960e:	83 c4 0c             	add    esp,0xc
c0019611:	6a 00                	push   0x0
c0019613:	68 38 8e 01 c0       	push   0xc0018e38
c0019618:	6a 1e                	push   0x1e
c001961a:	e8 2d 4b ff ff       	call   c000e14c <installISRHandler(int, void (*)(regs*, void*), void*)>
c001961f:	83 c4 0c             	add    esp,0xc
c0019622:	6a 00                	push   0x0
c0019624:	68 27 46 01 c0       	push   0xc0014627
c0019629:	6a 60                	push   0x60
c001962b:	e8 1c 4b ff ff       	call   c000e14c <installISRHandler(int, void (*)(regs*, void*), void*)>
c0019630:	a1 28 63 02 c0       	mov    eax,ds:0xc0026328
c0019635:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c001963f:	c7 04 24 40 4a 02 c0 	mov    DWORD PTR [esp],0xc0024a40
c0019646:	e8 a6 01 ff ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c001964b:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c0019652:	e8 40 01 ff ff       	call   c0009797 <malloc>
c0019657:	89 04 24             	mov    DWORD PTR [esp],eax
c001965a:	89 c3                	mov    ebx,eax
c001965c:	e8 ed 09 00 00       	call   c001a04e <RTC::RTC()>
c0019661:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c001966b:	5a                   	pop    edx
c001966c:	59                   	pop    ecx
c001966d:	53                   	push   ebx
c001966e:	ff 35 28 63 02 c0    	push   DWORD PTR ds:0xc0026328
c0019674:	e8 35 45 ff ff       	call   c000dbae <Device::addChild(Device*)>
c0019679:	8b 03                	mov    eax,DWORD PTR [ebx]
c001967b:	6a 00                	push   0x0
c001967d:	6a 00                	push   0x0
c001967f:	6a 00                	push   0x0
c0019681:	53                   	push   ebx
c0019682:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019685:	a1 28 63 02 c0       	mov    eax,ds:0xc0026328
c001968a:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
c0019690:	83 c4 28             	add    esp,0x28
c0019693:	5b                   	pop    ebx
c0019694:	c3                   	ret    

c0019695 <Hal::makeBeep(int)>:
c0019695:	53                   	push   ebx
c0019696:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001969a:	85 db                	test   ebx,ebx
c001969c:	75 07                	jne    c00196a5 <Hal::makeBeep(int)+0x10>
c001969e:	e4 61                	in     al,0x61
c00196a0:	83 e0 fc             	and    eax,0xfffffffc
c00196a3:	eb 26                	jmp    c00196cb <Hal::makeBeep(int)+0x36>
c00196a5:	b8 dc 34 12 00       	mov    eax,0x1234dc
c00196aa:	99                   	cdq    
c00196ab:	f7 fb                	idiv   ebx
c00196ad:	89 c1                	mov    ecx,eax
c00196af:	b0 b6                	mov    al,0xb6
c00196b1:	e6 43                	out    0x43,al
c00196b3:	88 c8                	mov    al,cl
c00196b5:	e6 42                	out    0x42,al
c00196b7:	89 c8                	mov    eax,ecx
c00196b9:	c1 e8 08             	shr    eax,0x8
c00196bc:	e6 42                	out    0x42,al
c00196be:	e4 61                	in     al,0x61
c00196c0:	88 c2                	mov    dl,al
c00196c2:	83 ca 03             	or     edx,0x3
c00196c5:	38 c2                	cmp    dl,al
c00196c7:	74 04                	je     c00196cd <Hal::makeBeep(int)+0x38>
c00196c9:	88 d0                	mov    al,dl
c00196cb:	e6 61                	out    0x61,al
c00196cd:	5b                   	pop    ebx
c00196ce:	c3                   	ret    

c00196cf <Hal::getRand()>:
c00196cf:	31 c0                	xor    eax,eax
c00196d1:	c3                   	ret    

c00196d2 <Hal::endOfInterrupt(int)>:
c00196d2:	80 3d e8 98 02 c0 00 	cmp    BYTE PTR ds:0xc00298e8,0x0
c00196d9:	74 23                	je     c00196fe <Hal::endOfInterrupt(int)+0x2c>
c00196db:	83 ec 14             	sub    esp,0x14
c00196de:	6a 1b                	push   0x1b
c00196e0:	ff 35 28 63 02 c0    	push   DWORD PTR ds:0xc0026328
c00196e6:	e8 63 f6 fe ff       	call   c0008d4e <Computer::rdmsr(unsigned int)>
c00196eb:	25 00 f0 ff ff       	and    eax,0xfffff000
c00196f0:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c00196fa:	83 c4 1c             	add    esp,0x1c
c00196fd:	c3                   	ret    
c00196fe:	e9 3d 02 00 00       	jmp    c0019940 <picEOI(int)>
c0019703:	90                   	nop

c0019704 <picIoWait()>:
c0019704:	eb 00                	jmp    c0019706 <picIoWait()+0x2>
c0019706:	eb 00                	jmp    c0019708 <picIoWait()+0x4>
c0019708:	90                   	nop
c0019709:	c3                   	ret    
c001970a:	66 90                	xchg   ax,ax

c001970c <picDisable()>:
c001970c:	83 ec 10             	sub    esp,0x10
c001970f:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c0019716:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c001971b:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001971f:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0019724:	ee                   	out    dx,al
c0019725:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c001972c:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c0019731:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0019735:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c001973a:	ee                   	out    dx,al
c001973b:	90                   	nop
c001973c:	83 c4 10             	add    esp,0x10
c001973f:	c3                   	ret    

c0019740 <picGetIRQReg(int)>:
c0019740:	83 ec 10             	sub    esp,0x10
c0019743:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019747:	0f b6 c0             	movzx  eax,al
c001974a:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0019751:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c0019755:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0019759:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001975e:	ee                   	out    dx,al
c001975f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019763:	0f b6 c0             	movzx  eax,al
c0019766:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c001976d:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0019771:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0019775:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001977a:	ee                   	out    dx,al
c001977b:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c0019782:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0019787:	89 c2                	mov    edx,eax
c0019789:	ec                   	in     al,dx
c001978a:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001978e:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0019792:	0f b6 c0             	movzx  eax,al
c0019795:	c1 e0 08             	shl    eax,0x8
c0019798:	89 c1                	mov    ecx,eax
c001979a:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c00197a1:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c00197a6:	89 c2                	mov    edx,eax
c00197a8:	ec                   	in     al,dx
c00197a9:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c00197ad:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c00197b1:	0f b6 c0             	movzx  eax,al
c00197b4:	09 c8                	or     eax,ecx
c00197b6:	83 c4 10             	add    esp,0x10
c00197b9:	c3                   	ret    
c00197ba:	66 90                	xchg   ax,ax

c00197bc <picOpen()>:
c00197bc:	83 ec 50             	sub    esp,0x50
c00197bf:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c00197c6:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00197cb:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00197cf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00197d3:	ee                   	out    dx,al
c00197d4:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c00197db:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c00197e0:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c00197e4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00197e8:	ee                   	out    dx,al
c00197e9:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c00197f1:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c00197f9:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c0019800:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019804:	89 c2                	mov    edx,eax
c0019806:	ec                   	in     al,dx
c0019807:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c001980b:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c001980f:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c0019813:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c001981a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001981e:	89 c2                	mov    edx,eax
c0019820:	ec                   	in     al,dx
c0019821:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0019825:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0019829:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c001982d:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c0019834:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c0019839:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001983d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0019841:	ee                   	out    dx,al
c0019842:	e8 bd fe ff ff       	call   c0019704 <picIoWait()>
c0019847:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c001984e:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c0019853:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0019857:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001985b:	ee                   	out    dx,al
c001985c:	e8 a3 fe ff ff       	call   c0019704 <picIoWait()>
c0019861:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0019865:	0f b6 c0             	movzx  eax,al
c0019868:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c001986f:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c0019873:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c0019877:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001987b:	ee                   	out    dx,al
c001987c:	e8 83 fe ff ff       	call   c0019704 <picIoWait()>
c0019881:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0019885:	0f b6 c0             	movzx  eax,al
c0019888:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c001988f:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0019893:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0019897:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001989b:	ee                   	out    dx,al
c001989c:	e8 63 fe ff ff       	call   c0019704 <picIoWait()>
c00198a1:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c00198a8:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c00198ad:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c00198b1:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00198b5:	ee                   	out    dx,al
c00198b6:	e8 49 fe ff ff       	call   c0019704 <picIoWait()>
c00198bb:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c00198c2:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c00198c7:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c00198cb:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00198cf:	ee                   	out    dx,al
c00198d0:	e8 2f fe ff ff       	call   c0019704 <picIoWait()>
c00198d5:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c00198dc:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c00198e1:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c00198e5:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00198e9:	ee                   	out    dx,al
c00198ea:	e8 15 fe ff ff       	call   c0019704 <picIoWait()>
c00198ef:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c00198f6:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c00198fb:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c00198ff:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0019903:	ee                   	out    dx,al
c0019904:	e8 fb fd ff ff       	call   c0019704 <picIoWait()>
c0019909:	0f b6 44 24 47       	movzx  eax,BYTE PTR [esp+0x47]
c001990e:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c0019915:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c0019919:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c001991d:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0019921:	ee                   	out    dx,al
c0019922:	0f b6 44 24 46       	movzx  eax,BYTE PTR [esp+0x46]
c0019927:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c001992e:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0019932:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c0019936:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001993a:	ee                   	out    dx,al
c001993b:	90                   	nop
c001993c:	83 c4 50             	add    esp,0x50
c001993f:	c3                   	ret    

c0019940 <picEOI(int)>:
c0019940:	83 ec 10             	sub    esp,0x10
c0019943:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0019948:	75 1e                	jne    c0019968 <picEOI(int)+0x28>
c001994a:	6a 0b                	push   0xb
c001994c:	e8 ef fd ff ff       	call   c0019740 <picGetIRQReg(int)>
c0019951:	83 c4 04             	add    esp,0x4
c0019954:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c0019959:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c001995e:	25 80 00 00 00       	and    eax,0x80
c0019963:	74 73                	je     c00199d8 <picEOI(int)+0x98>
c0019965:	8d 76 00             	lea    esi,[esi+0x0]
c0019968:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c001996d:	75 31                	jne    c00199a0 <picEOI(int)+0x60>
c001996f:	6a 0b                	push   0xb
c0019971:	e8 ca fd ff ff       	call   c0019740 <picGetIRQReg(int)>
c0019976:	83 c4 04             	add    esp,0x4
c0019979:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c001997e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019982:	66 85 c0             	test   ax,ax
c0019985:	78 19                	js     c00199a0 <picEOI(int)+0x60>
c0019987:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c001998e:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c0019993:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0019997:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001999c:	ee                   	out    dx,al
c001999d:	eb 3d                	jmp    c00199dc <picEOI(int)+0x9c>
c001999f:	90                   	nop
c00199a0:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c00199a5:	7e 19                	jle    c00199c0 <picEOI(int)+0x80>
c00199a7:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c00199ae:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c00199b3:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c00199b7:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c00199bc:	ee                   	out    dx,al
c00199bd:	8d 76 00             	lea    esi,[esi+0x0]
c00199c0:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c00199c7:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c00199cc:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c00199d0:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c00199d5:	ee                   	out    dx,al
c00199d6:	eb 04                	jmp    c00199dc <picEOI(int)+0x9c>
c00199d8:	90                   	nop
c00199d9:	8d 76 00             	lea    esi,[esi+0x0]
c00199dc:	83 c4 10             	add    esp,0x10
c00199df:	c3                   	ret    

c00199e0 <RTC::open(int, int, void*)>:
c00199e0:	31 c0                	xor    eax,eax
c00199e2:	c3                   	ret    
c00199e3:	90                   	nop

c00199e4 <RTC::close(int, int, void*)>:
c00199e4:	31 c0                	xor    eax,eax
c00199e6:	c3                   	ret    
c00199e7:	90                   	nop

c00199e8 <RTC::timeInSecondsUTC()>:
c00199e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00199ec:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c00199f2:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00199f8:	c3                   	ret    
c00199f9:	90                   	nop

c00199fa <RTC::timeInDatetimeUTC()>:
c00199fa:	53                   	push   ebx
c00199fb:	83 ec 14             	sub    esp,0x14
c00199fe:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0019a02:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019a06:	8b 10                	mov    edx,DWORD PTR [eax]
c0019a08:	50                   	push   eax
c0019a09:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0019a0c:	83 c4 0c             	add    esp,0xc
c0019a0f:	52                   	push   edx
c0019a10:	50                   	push   eax
c0019a11:	53                   	push   ebx
c0019a12:	e8 0b 3f ff ff       	call   c000d922 <secondsToDatetime(unsigned long long)>
c0019a17:	89 d8                	mov    eax,ebx
c0019a19:	83 c4 14             	add    esp,0x14
c0019a1c:	5b                   	pop    ebx
c0019a1d:	c2 04 00             	ret    0x4

c0019a20 <RTC::setTimeInSecondsUTC(unsigned long long)>:
c0019a20:	56                   	push   esi
c0019a21:	53                   	push   ebx
c0019a22:	83 ec 14             	sub    esp,0x14
c0019a25:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0019a29:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019a2b:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c0019a2e:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019a32:	52                   	push   edx
c0019a33:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019a37:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019a3b:	50                   	push   eax
c0019a3c:	e8 e1 3e ff ff       	call   c000d922 <secondsToDatetime(unsigned long long)>
c0019a41:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019a45:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0019a49:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0019a4d:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0019a51:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0019a55:	89 f0                	mov    eax,esi
c0019a57:	83 c4 20             	add    esp,0x20
c0019a5a:	5b                   	pop    ebx
c0019a5b:	5e                   	pop    esi
c0019a5c:	ff e0                	jmp    eax

c0019a5e <RTC::~RTC()>:
c0019a5e:	83 ec 0c             	sub    esp,0xc
c0019a61:	ba c0 4b 02 c0       	mov    edx,0xc0024bc0
c0019a66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019a6a:	89 10                	mov    DWORD PTR [eax],edx
c0019a6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019a70:	83 ec 0c             	sub    esp,0xc
c0019a73:	50                   	push   eax
c0019a74:	e8 33 3c ff ff       	call   c000d6ac <Clock::~Clock()>
c0019a79:	83 c4 10             	add    esp,0x10
c0019a7c:	90                   	nop
c0019a7d:	83 c4 0c             	add    esp,0xc
c0019a80:	c3                   	ret    
c0019a81:	90                   	nop

c0019a82 <RTC::~RTC()>:
c0019a82:	83 ec 0c             	sub    esp,0xc
c0019a85:	83 ec 0c             	sub    esp,0xc
c0019a88:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019a8c:	e8 cd ff ff ff       	call   c0019a5e <RTC::~RTC()>
c0019a91:	83 c4 10             	add    esp,0x10
c0019a94:	83 ec 08             	sub    esp,0x8
c0019a97:	68 60 01 00 00       	push   0x160
c0019a9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019aa0:	e8 ab 2b ff ff       	call   c000c650 <operator delete(void*, unsigned long)>
c0019aa5:	83 c4 10             	add    esp,0x10
c0019aa8:	83 c4 0c             	add    esp,0xc
c0019aab:	c3                   	ret    

c0019aac <RTC::get_update_in_progress_flag()>:
c0019aac:	83 ec 14             	sub    esp,0x14
c0019aaf:	6a 0a                	push   0xa
c0019ab1:	ff 35 28 63 02 c0    	push   DWORD PTR ds:0xc0026328
c0019ab7:	e8 46 f3 fe ff       	call   c0008e02 <Computer::readCMOS(unsigned char)>
c0019abc:	83 c4 1c             	add    esp,0x1c
c0019abf:	c0 e8 07             	shr    al,0x7
c0019ac2:	c3                   	ret    
c0019ac3:	90                   	nop

c0019ac4 <RTC::completeRTCRefresh()>:
c0019ac4:	55                   	push   ebp
c0019ac5:	57                   	push   edi
c0019ac6:	56                   	push   esi
c0019ac7:	53                   	push   ebx
c0019ac8:	83 ec 2c             	sub    esp,0x2c
c0019acb:	8b 1d 0c 89 02 c0    	mov    ebx,DWORD PTR ds:0xc002890c
c0019ad1:	83 ec 0c             	sub    esp,0xc
c0019ad4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0019ad8:	e8 cf ff ff ff       	call   c0019aac <RTC::get_update_in_progress_flag()>
c0019add:	83 c4 10             	add    esp,0x10
c0019ae0:	84 c0                	test   al,al
c0019ae2:	74 0e                	je     c0019af2 <RTC::completeRTCRefresh()+0x2e>
c0019ae4:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0019aea:	3b 05 0c 89 02 c0    	cmp    eax,DWORD PTR ds:0xc002890c
c0019af0:	73 df                	jae    c0019ad1 <RTC::completeRTCRefresh()+0xd>
c0019af2:	55                   	push   ebp
c0019af3:	55                   	push   ebp
c0019af4:	6a 00                	push   0x0
c0019af6:	ff 35 28 63 02 c0    	push   DWORD PTR ds:0xc0026328
c0019afc:	e8 01 f3 fe ff       	call   c0008e02 <Computer::readCMOS(unsigned char)>
c0019b01:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0019b05:	58                   	pop    eax
c0019b06:	5a                   	pop    edx
c0019b07:	6a 02                	push   0x2
c0019b09:	ff 35 28 63 02 c0    	push   DWORD PTR ds:0xc0026328
c0019b0f:	e8 ee f2 fe ff       	call   c0008e02 <Computer::readCMOS(unsigned char)>
c0019b14:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c0019b18:	59                   	pop    ecx
c0019b19:	5b                   	pop    ebx
c0019b1a:	6a 04                	push   0x4
c0019b1c:	ff 35 28 63 02 c0    	push   DWORD PTR ds:0xc0026328
c0019b22:	e8 db f2 fe ff       	call   c0008e02 <Computer::readCMOS(unsigned char)>
c0019b27:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c0019b2b:	5e                   	pop    esi
c0019b2c:	5f                   	pop    edi
c0019b2d:	6a 07                	push   0x7
c0019b2f:	ff 35 28 63 02 c0    	push   DWORD PTR ds:0xc0026328
c0019b35:	e8 c8 f2 fe ff       	call   c0008e02 <Computer::readCMOS(unsigned char)>
c0019b3a:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c0019b3e:	5d                   	pop    ebp
c0019b3f:	58                   	pop    eax
c0019b40:	6a 08                	push   0x8
c0019b42:	ff 35 28 63 02 c0    	push   DWORD PTR ds:0xc0026328
c0019b48:	e8 b5 f2 fe ff       	call   c0008e02 <Computer::readCMOS(unsigned char)>
c0019b4d:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c0019b51:	58                   	pop    eax
c0019b52:	5a                   	pop    edx
c0019b53:	6a 09                	push   0x9
c0019b55:	ff 35 28 63 02 c0    	push   DWORD PTR ds:0xc0026328
c0019b5b:	e8 a2 f2 fe ff       	call   c0008e02 <Computer::readCMOS(unsigned char)>
c0019b60:	83 c4 10             	add    esp,0x10
c0019b63:	0f b6 e8             	movzx  ebp,al
c0019b66:	8b 1d 0c 89 02 c0    	mov    ebx,DWORD PTR ds:0xc002890c
c0019b6c:	83 ec 0c             	sub    esp,0xc
c0019b6f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0019b73:	e8 34 ff ff ff       	call   c0019aac <RTC::get_update_in_progress_flag()>
c0019b78:	83 c4 10             	add    esp,0x10
c0019b7b:	84 c0                	test   al,al
c0019b7d:	74 0e                	je     c0019b8d <RTC::completeRTCRefresh()+0xc9>
c0019b7f:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0019b85:	3b 05 0c 89 02 c0    	cmp    eax,DWORD PTR ds:0xc002890c
c0019b8b:	73 df                	jae    c0019b6c <RTC::completeRTCRefresh()+0xa8>
c0019b8d:	50                   	push   eax
c0019b8e:	50                   	push   eax
c0019b8f:	6a 00                	push   0x0
c0019b91:	ff 35 28 63 02 c0    	push   DWORD PTR ds:0xc0026328
c0019b97:	e8 66 f2 fe ff       	call   c0008e02 <Computer::readCMOS(unsigned char)>
c0019b9c:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c0019ba0:	58                   	pop    eax
c0019ba1:	5a                   	pop    edx
c0019ba2:	6a 02                	push   0x2
c0019ba4:	ff 35 28 63 02 c0    	push   DWORD PTR ds:0xc0026328
c0019baa:	e8 53 f2 fe ff       	call   c0008e02 <Computer::readCMOS(unsigned char)>
c0019baf:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0019bb3:	59                   	pop    ecx
c0019bb4:	5b                   	pop    ebx
c0019bb5:	6a 04                	push   0x4
c0019bb7:	ff 35 28 63 02 c0    	push   DWORD PTR ds:0xc0026328
c0019bbd:	e8 40 f2 fe ff       	call   c0008e02 <Computer::readCMOS(unsigned char)>
c0019bc2:	5e                   	pop    esi
c0019bc3:	88 c3                	mov    bl,al
c0019bc5:	5f                   	pop    edi
c0019bc6:	6a 07                	push   0x7
c0019bc8:	ff 35 28 63 02 c0    	push   DWORD PTR ds:0xc0026328
c0019bce:	e8 2f f2 fe ff       	call   c0008e02 <Computer::readCMOS(unsigned char)>
c0019bd3:	89 c6                	mov    esi,eax
c0019bd5:	58                   	pop    eax
c0019bd6:	5a                   	pop    edx
c0019bd7:	6a 08                	push   0x8
c0019bd9:	ff 35 28 63 02 c0    	push   DWORD PTR ds:0xc0026328
c0019bdf:	e8 1e f2 fe ff       	call   c0008e02 <Computer::readCMOS(unsigned char)>
c0019be4:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0019be8:	59                   	pop    ecx
c0019be9:	5f                   	pop    edi
c0019bea:	6a 09                	push   0x9
c0019bec:	ff 35 28 63 02 c0    	push   DWORD PTR ds:0xc0026328
c0019bf2:	e8 0b f2 fe ff       	call   c0008e02 <Computer::readCMOS(unsigned char)>
c0019bf7:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0019bfb:	0f b6 f8             	movzx  edi,al
c0019bfe:	83 c4 10             	add    esp,0x10
c0019c01:	8a 0c 24             	mov    cl,BYTE PTR [esp]
c0019c04:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0019c08:	38 4c 24 1b          	cmp    BYTE PTR [esp+0x1b],cl
c0019c0c:	89 f1                	mov    ecx,esi
c0019c0e:	0f 94 c0             	sete   al
c0019c11:	38 54 24 1c          	cmp    BYTE PTR [esp+0x1c],dl
c0019c15:	0f 94 c2             	sete   dl
c0019c18:	21 d0                	and    eax,edx
c0019c1a:	38 5c 24 1d          	cmp    BYTE PTR [esp+0x1d],bl
c0019c1e:	0f 94 c2             	sete   dl
c0019c21:	21 c2                	and    edx,eax
c0019c23:	38 4c 24 1e          	cmp    BYTE PTR [esp+0x1e],cl
c0019c27:	0f 94 c0             	sete   al
c0019c2a:	21 d0                	and    eax,edx
c0019c2c:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c0019c30:	38 54 24 1f          	cmp    BYTE PTR [esp+0x1f],dl
c0019c34:	0f 94 c1             	sete   cl
c0019c37:	84 c8                	test   al,cl
c0019c39:	75 28                	jne    c0019c63 <RTC::completeRTCRefresh()+0x19f>
c0019c3b:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0019c3f:	89 fd                	mov    ebp,edi
c0019c41:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0019c45:	88 5c 24 1d          	mov    BYTE PTR [esp+0x1d],bl
c0019c49:	89 f0                	mov    eax,esi
c0019c4b:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c0019c4f:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0019c53:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0019c57:	8a 04 24             	mov    al,BYTE PTR [esp]
c0019c5a:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0019c5e:	e9 03 ff ff ff       	jmp    c0019b66 <RTC::completeRTCRefresh()+0xa2>
c0019c63:	39 fd                	cmp    ebp,edi
c0019c65:	75 d4                	jne    c0019c3b <RTC::completeRTCRefresh()+0x177>
c0019c67:	55                   	push   ebp
c0019c68:	55                   	push   ebp
c0019c69:	6a 0b                	push   0xb
c0019c6b:	ff 35 28 63 02 c0    	push   DWORD PTR ds:0xc0026328
c0019c71:	e8 8c f1 fe ff       	call   c0008e02 <Computer::readCMOS(unsigned char)>
c0019c76:	83 c4 10             	add    esp,0x10
c0019c79:	89 c5                	mov    ebp,eax
c0019c7b:	a8 04                	test   al,0x4
c0019c7d:	75 75                	jne    c0019cf4 <RTC::completeRTCRefresh()+0x230>
c0019c7f:	b1 0a                	mov    cl,0xa
c0019c81:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0019c84:	8a 04 24             	mov    al,BYTE PTR [esp]
c0019c87:	83 e2 0f             	and    edx,0xf
c0019c8a:	c0 e8 04             	shr    al,0x4
c0019c8d:	c1 ef 04             	shr    edi,0x4
c0019c90:	f6 e1                	mul    cl
c0019c92:	6b ff 0a             	imul   edi,edi,0xa
c0019c95:	01 d0                	add    eax,edx
c0019c97:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0019c9b:	88 04 24             	mov    BYTE PTR [esp],al
c0019c9e:	83 e2 0f             	and    edx,0xf
c0019ca1:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0019ca5:	c0 e8 04             	shr    al,0x4
c0019ca8:	f6 e1                	mul    cl
c0019caa:	01 d0                	add    eax,edx
c0019cac:	88 da                	mov    dl,bl
c0019cae:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019cb2:	83 e2 0f             	and    edx,0xf
c0019cb5:	88 d8                	mov    al,bl
c0019cb7:	83 e3 80             	and    ebx,0xffffff80
c0019cba:	c0 e8 04             	shr    al,0x4
c0019cbd:	83 e0 07             	and    eax,0x7
c0019cc0:	f6 e1                	mul    cl
c0019cc2:	01 d0                	add    eax,edx
c0019cc4:	89 f2                	mov    edx,esi
c0019cc6:	09 c3                	or     ebx,eax
c0019cc8:	83 e2 0f             	and    edx,0xf
c0019ccb:	89 f0                	mov    eax,esi
c0019ccd:	c0 e8 04             	shr    al,0x4
c0019cd0:	f6 e1                	mul    cl
c0019cd2:	8d 34 02             	lea    esi,[edx+eax*1]
c0019cd5:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c0019cd9:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0019cdd:	83 e2 0f             	and    edx,0xf
c0019ce0:	c0 e8 04             	shr    al,0x4
c0019ce3:	f6 e1                	mul    cl
c0019ce5:	01 d0                	add    eax,edx
c0019ce7:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c0019ceb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019cef:	83 e0 0f             	and    eax,0xf
c0019cf2:	01 c7                	add    edi,eax
c0019cf4:	83 e5 02             	and    ebp,0x2
c0019cf7:	75 14                	jne    c0019d0d <RTC::completeRTCRefresh()+0x249>
c0019cf9:	84 db                	test   bl,bl
c0019cfb:	79 10                	jns    c0019d0d <RTC::completeRTCRefresh()+0x249>
c0019cfd:	83 e3 7f             	and    ebx,0x7f
c0019d00:	b9 18 00 00 00       	mov    ecx,0x18
c0019d05:	8d 43 0c             	lea    eax,[ebx+0xc]
c0019d08:	99                   	cdq    
c0019d09:	f7 f9                	idiv   ecx
c0019d0b:	88 d3                	mov    bl,dl
c0019d0d:	8d af d0 07 00 00    	lea    ebp,[edi+0x7d0]
c0019d13:	81 fd e3 07 00 00    	cmp    ebp,0x7e3
c0019d19:	77 06                	ja     c0019d21 <RTC::completeRTCRefresh()+0x25d>
c0019d1b:	8d af 34 08 00 00    	lea    ebp,[edi+0x834]
c0019d21:	0f b6 0c 24          	movzx  ecx,BYTE PTR [esp]
c0019d25:	31 d2                	xor    edx,edx
c0019d27:	c1 e1 10             	shl    ecx,0x10
c0019d2a:	89 d7                	mov    edi,edx
c0019d2c:	c1 e5 10             	shl    ebp,0x10
c0019d2f:	31 c0                	xor    eax,eax
c0019d31:	81 e7 ff ff 00 ff    	and    edi,0xff00ffff
c0019d37:	09 cf                	or     edi,ecx
c0019d39:	89 f1                	mov    ecx,esi
c0019d3b:	89 fa                	mov    edx,edi
c0019d3d:	88 c8                	mov    al,cl
c0019d3f:	8a 74 24 0c          	mov    dh,BYTE PTR [esp+0xc]
c0019d43:	8a 64 24 10          	mov    ah,BYTE PTR [esp+0x10]
c0019d47:	88 da                	mov    dl,bl
c0019d49:	0f b7 c8             	movzx  ecx,ax
c0019d4c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0019d50:	09 e9                	or     ecx,ebp
c0019d52:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0019d55:	0f b6 db             	movzx  ebx,bl
c0019d58:	50                   	push   eax
c0019d59:	50                   	push   eax
c0019d5a:	53                   	push   ebx
c0019d5b:	68 f1 4a 02 c0       	push   0xc0024af1
c0019d60:	e8 cc 29 ff ff       	call   c000c731 <Dbg::kprintf(char const*, ...)>
c0019d65:	5a                   	pop    edx
c0019d66:	59                   	pop    ecx
c0019d67:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019d6b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0019d6f:	52                   	push   edx
c0019d70:	50                   	push   eax
c0019d71:	e8 25 3a ff ff       	call   c000d79b <datetimeToSeconds(datetime_t)>
c0019d76:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0019d7a:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c0019d80:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c0019d86:	83 c4 3c             	add    esp,0x3c
c0019d89:	5b                   	pop    ebx
c0019d8a:	5e                   	pop    esi
c0019d8b:	5f                   	pop    edi
c0019d8c:	5d                   	pop    ebp
c0019d8d:	c3                   	ret    

c0019d8e <RTC::setTimeInDatetimeUTC(datetime_t)>:
c0019d8e:	55                   	push   ebp
c0019d8f:	57                   	push   edi
c0019d90:	56                   	push   esi
c0019d91:	53                   	push   ebx
c0019d92:	83 ec 40             	sub    esp,0x40
c0019d95:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0019d99:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0019d9d:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0019da1:	0f b6 6c 24 10       	movzx  ebp,BYTE PTR [esp+0x10]
c0019da6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019daa:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0019dae:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0019db2:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c0019db6:	8a 5c 24 14          	mov    bl,BYTE PTR [esp+0x14]
c0019dba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019dbe:	0f b6 fe             	movzx  edi,dh
c0019dc1:	0f b6 c4             	movzx  eax,ah
c0019dc4:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0019dc8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019dcc:	89 d7                	mov    edi,edx
c0019dce:	0f b6 4c 24 1c       	movzx  ecx,BYTE PTR [esp+0x1c]
c0019dd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019dd7:	c1 ef 10             	shr    edi,0x10
c0019dda:	c1 e8 10             	shr    eax,0x10
c0019ddd:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0019de1:	89 c6                	mov    esi,eax
c0019de3:	0f b6 7c 24 20       	movzx  edi,BYTE PTR [esp+0x20]
c0019de8:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0019dec:	89 fa                	mov    edx,edi
c0019dee:	0f b6 7c 24 18       	movzx  edi,BYTE PTR [esp+0x18]
c0019df3:	88 54 24 2c          	mov    BYTE PTR [esp+0x2c],dl
c0019df7:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c0019dfb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0019dff:	0f b6 fb             	movzx  edi,bl
c0019e02:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019e06:	57                   	push   edi
c0019e07:	50                   	push   eax
c0019e08:	51                   	push   ecx
c0019e09:	89 4c 24 44          	mov    DWORD PTR [esp+0x44],ecx
c0019e0d:	55                   	push   ebp
c0019e0e:	68 07 4b 02 c0       	push   0xc0024b07
c0019e13:	e8 19 29 ff ff       	call   c000c731 <Dbg::kprintf(char const*, ...)>
c0019e18:	83 c4 1c             	add    esp,0x1c
c0019e1b:	6a 00                	push   0x0
c0019e1d:	6a 00                	push   0x0
c0019e1f:	ff 35 28 63 02 c0    	push   DWORD PTR ds:0xc0026328
c0019e25:	e8 f6 f0 fe ff       	call   c0008f20 <Computer::writeCMOS(unsigned char, unsigned char)>
c0019e2a:	83 c4 0c             	add    esp,0xc
c0019e2d:	6a 00                	push   0x0
c0019e2f:	6a 02                	push   0x2
c0019e31:	ff 35 28 63 02 c0    	push   DWORD PTR ds:0xc0026328
c0019e37:	e8 e4 f0 fe ff       	call   c0008f20 <Computer::writeCMOS(unsigned char, unsigned char)>
c0019e3c:	b9 64 00 00 00       	mov    ecx,0x64
c0019e41:	89 f0                	mov    eax,esi
c0019e43:	31 d2                	xor    edx,edx
c0019e45:	66 f7 f1             	div    cx
c0019e48:	88 54 24 3a          	mov    BYTE PTR [esp+0x3a],dl
c0019e4c:	89 d6                	mov    esi,edx
c0019e4e:	58                   	pop    eax
c0019e4f:	5a                   	pop    edx
c0019e50:	6a 0b                	push   0xb
c0019e52:	ff 35 28 63 02 c0    	push   DWORD PTR ds:0xc0026328
c0019e58:	e8 a5 ef fe ff       	call   c0008e02 <Computer::readCMOS(unsigned char)>
c0019e5d:	c7 04 24 22 4b 02 c0 	mov    DWORD PTR [esp],0xc0024b22
c0019e64:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c0019e68:	e8 c4 28 ff ff       	call   c000c731 <Dbg::kprintf(char const*, ...)>
c0019e6d:	83 c4 0c             	add    esp,0xc
c0019e70:	0f b7 c6             	movzx  eax,si
c0019e73:	50                   	push   eax
c0019e74:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0019e78:	51                   	push   ecx
c0019e79:	55                   	push   ebp
c0019e7a:	57                   	push   edi
c0019e7b:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0019e7f:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0019e83:	68 38 4b 02 c0       	push   0xc0024b38
c0019e88:	e8 a4 28 ff ff       	call   c000c731 <Dbg::kprintf(char const*, ...)>
c0019e8d:	83 c4 20             	add    esp,0x20
c0019e90:	f6 44 24 2b 04       	test   BYTE PTR [esp+0x2b],0x4
c0019e95:	0f 85 88 00 00 00    	jne    c0019f23 <RTC::setTimeInDatetimeUTC(datetime_t)+0x195>
c0019e9b:	83 ec 0c             	sub    esp,0xc
c0019e9e:	68 78 4b 02 c0       	push   0xc0024b78
c0019ea3:	e8 89 28 ff ff       	call   c000c731 <Dbg::kprintf(char const*, ...)>
c0019ea8:	b2 0a                	mov    dl,0xa
c0019eaa:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0019eaf:	f6 f2                	div    dl
c0019eb1:	88 c1                	mov    cl,al
c0019eb3:	88 e0                	mov    al,ah
c0019eb5:	c1 e1 04             	shl    ecx,0x4
c0019eb8:	09 c1                	or     ecx,eax
c0019eba:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c0019ebf:	88 4c 24 38          	mov    BYTE PTR [esp+0x38],cl
c0019ec3:	f6 f2                	div    dl
c0019ec5:	88 c1                	mov    cl,al
c0019ec7:	88 e0                	mov    al,ah
c0019ec9:	c1 e1 04             	shl    ecx,0x4
c0019ecc:	09 c1                	or     ecx,eax
c0019ece:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c0019ed3:	88 4c 24 24          	mov    BYTE PTR [esp+0x24],cl
c0019ed7:	f6 f2                	div    dl
c0019ed9:	88 c3                	mov    bl,al
c0019edb:	88 e0                	mov    al,ah
c0019edd:	c1 e3 04             	shl    ebx,0x4
c0019ee0:	09 c3                	or     ebx,eax
c0019ee2:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0019ee7:	f6 f2                	div    dl
c0019ee9:	88 c1                	mov    cl,al
c0019eeb:	88 e0                	mov    al,ah
c0019eed:	c1 e1 04             	shl    ecx,0x4
c0019ef0:	09 c1                	or     ecx,eax
c0019ef2:	0f b6 44 24 28       	movzx  eax,BYTE PTR [esp+0x28]
c0019ef7:	88 4c 24 39          	mov    BYTE PTR [esp+0x39],cl
c0019efb:	f6 f2                	div    dl
c0019efd:	88 c1                	mov    cl,al
c0019eff:	88 e0                	mov    al,ah
c0019f01:	c1 e1 04             	shl    ecx,0x4
c0019f04:	09 c1                	or     ecx,eax
c0019f06:	89 f0                	mov    eax,esi
c0019f08:	88 4c 24 28          	mov    BYTE PTR [esp+0x28],cl
c0019f0c:	0f b6 c0             	movzx  eax,al
c0019f0f:	83 c4 10             	add    esp,0x10
c0019f12:	f6 f2                	div    dl
c0019f14:	89 c6                	mov    esi,eax
c0019f16:	88 e0                	mov    al,ah
c0019f18:	c1 e6 04             	shl    esi,0x4
c0019f1b:	09 c6                	or     esi,eax
c0019f1d:	89 f0                	mov    eax,esi
c0019f1f:	88 44 24 2a          	mov    BYTE PTR [esp+0x2a],al
c0019f23:	f6 44 24 2b 02       	test   BYTE PTR [esp+0x2b],0x2
c0019f28:	75 27                	jne    c0019f51 <RTC::setTimeInDatetimeUTC(datetime_t)+0x1c3>
c0019f2a:	83 ec 0c             	sub    esp,0xc
c0019f2d:	68 89 4b 02 c0       	push   0xc0024b89
c0019f32:	e8 fa 27 ff ff       	call   c000c731 <Dbg::kprintf(char const*, ...)>
c0019f37:	83 c4 10             	add    esp,0x10
c0019f3a:	80 fb 0b             	cmp    bl,0xb
c0019f3d:	76 0c                	jbe    c0019f4b <RTC::setTimeInDatetimeUTC(datetime_t)+0x1bd>
c0019f3f:	80 eb 0c             	sub    bl,0xc
c0019f42:	75 02                	jne    c0019f46 <RTC::setTimeInDatetimeUTC(datetime_t)+0x1b8>
c0019f44:	b3 0c                	mov    bl,0xc
c0019f46:	83 cb 80             	or     ebx,0xffffff80
c0019f49:	eb 06                	jmp    c0019f51 <RTC::setTimeInDatetimeUTC(datetime_t)+0x1c3>
c0019f4b:	84 db                	test   bl,bl
c0019f4d:	75 02                	jne    c0019f51 <RTC::setTimeInDatetimeUTC(datetime_t)+0x1c3>
c0019f4f:	b3 0c                	mov    bl,0xc
c0019f51:	0f b6 54 24 29       	movzx  edx,BYTE PTR [esp+0x29]
c0019f56:	0f b6 74 24 2a       	movzx  esi,BYTE PTR [esp+0x2a]
c0019f5b:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c0019f60:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c0019f65:	0f b6 44 24 28       	movzx  eax,BYTE PTR [esp+0x28]
c0019f6a:	0f b6 db             	movzx  ebx,bl
c0019f6d:	51                   	push   ecx
c0019f6e:	56                   	push   esi
c0019f6f:	55                   	push   ebp
c0019f70:	52                   	push   edx
c0019f71:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0019f75:	53                   	push   ebx
c0019f76:	57                   	push   edi
c0019f77:	50                   	push   eax
c0019f78:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0019f7c:	68 38 4b 02 c0       	push   0xc0024b38
c0019f81:	e8 ab 27 ff ff       	call   c000c731 <Dbg::kprintf(char const*, ...)>
c0019f86:	83 c4 1c             	add    esp,0x1c
c0019f89:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019f8d:	50                   	push   eax
c0019f8e:	6a 00                	push   0x0
c0019f90:	ff 35 28 63 02 c0    	push   DWORD PTR ds:0xc0026328
c0019f96:	e8 85 ef fe ff       	call   c0008f20 <Computer::writeCMOS(unsigned char, unsigned char)>
c0019f9b:	83 c4 0c             	add    esp,0xc
c0019f9e:	57                   	push   edi
c0019f9f:	6a 02                	push   0x2
c0019fa1:	ff 35 28 63 02 c0    	push   DWORD PTR ds:0xc0026328
c0019fa7:	e8 74 ef fe ff       	call   c0008f20 <Computer::writeCMOS(unsigned char, unsigned char)>
c0019fac:	83 c4 0c             	add    esp,0xc
c0019faf:	53                   	push   ebx
c0019fb0:	6a 04                	push   0x4
c0019fb2:	ff 35 28 63 02 c0    	push   DWORD PTR ds:0xc0026328
c0019fb8:	e8 63 ef fe ff       	call   c0008f20 <Computer::writeCMOS(unsigned char, unsigned char)>
c0019fbd:	83 c4 0c             	add    esp,0xc
c0019fc0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0019fc4:	52                   	push   edx
c0019fc5:	6a 07                	push   0x7
c0019fc7:	ff 35 28 63 02 c0    	push   DWORD PTR ds:0xc0026328
c0019fcd:	e8 4e ef fe ff       	call   c0008f20 <Computer::writeCMOS(unsigned char, unsigned char)>
c0019fd2:	83 c4 0c             	add    esp,0xc
c0019fd5:	55                   	push   ebp
c0019fd6:	6a 08                	push   0x8
c0019fd8:	ff 35 28 63 02 c0    	push   DWORD PTR ds:0xc0026328
c0019fde:	e8 3d ef fe ff       	call   c0008f20 <Computer::writeCMOS(unsigned char, unsigned char)>
c0019fe3:	83 c4 0c             	add    esp,0xc
c0019fe6:	56                   	push   esi
c0019fe7:	6a 09                	push   0x9
c0019fe9:	ff 35 28 63 02 c0    	push   DWORD PTR ds:0xc0026328
c0019fef:	e8 2c ef fe ff       	call   c0008f20 <Computer::writeCMOS(unsigned char, unsigned char)>
c0019ff4:	5b                   	pop    ebx
c0019ff5:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0019ff9:	e8 c6 fa ff ff       	call   c0019ac4 <RTC::completeRTCRefresh()>
c0019ffe:	83 c4 4c             	add    esp,0x4c
c001a001:	b0 01                	mov    al,0x1
c001a003:	5b                   	pop    ebx
c001a004:	5e                   	pop    esi
c001a005:	5f                   	pop    edi
c001a006:	5d                   	pop    ebp
c001a007:	c3                   	ret    

c001a008 <rtcIRQHandler(regs*, void*)>:
c001a008:	53                   	push   ebx
c001a009:	83 ec 10             	sub    esp,0x10
c001a00c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001a010:	6a 0c                	push   0xc
c001a012:	ff 35 28 63 02 c0    	push   DWORD PTR ds:0xc0026328
c001a018:	e8 e5 ed fe ff       	call   c0008e02 <Computer::readCMOS(unsigned char)>
c001a01d:	83 c4 10             	add    esp,0x10
c001a020:	84 c0                	test   al,al
c001a022:	79 24                	jns    c001a048 <rtcIRQHandler(regs*, void*)+0x40>
c001a024:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c001a02b:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c001a032:	66 ff 05 00 99 02 c0 	inc    WORD PTR ds:0xc0029900
c001a039:	75 0d                	jne    c001a048 <rtcIRQHandler(regs*, void*)+0x40>
c001a03b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001a03f:	83 c4 08             	add    esp,0x8
c001a042:	5b                   	pop    ebx
c001a043:	e9 7c fa ff ff       	jmp    c0019ac4 <RTC::completeRTCRefresh()>
c001a048:	83 c4 08             	add    esp,0x8
c001a04b:	5b                   	pop    ebx
c001a04c:	c3                   	ret    
c001a04d:	90                   	nop

c001a04e <RTC::RTC()>:
c001a04e:	83 ec 1c             	sub    esp,0x1c
c001a051:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a055:	83 ec 08             	sub    esp,0x8
c001a058:	68 a1 4b 02 c0       	push   0xc0024ba1
c001a05d:	50                   	push   eax
c001a05e:	e8 13 36 ff ff       	call   c000d676 <Clock::Clock(char const*)>
c001a063:	83 c4 10             	add    esp,0x10
c001a066:	ba c0 4b 02 c0       	mov    edx,0xc0024bc0
c001a06b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a06f:	89 10                	mov    DWORD PTR [eax],edx
c001a071:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a075:	83 ec 0c             	sub    esp,0xc
c001a078:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a07c:	6a 01                	push   0x1
c001a07e:	68 08 a0 01 c0       	push   0xc001a008
c001a083:	6a 08                	push   0x8
c001a085:	50                   	push   eax
c001a086:	e8 cf 3a ff ff       	call   c000db5a <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001a08b:	83 c4 20             	add    esp,0x20
c001a08e:	89 c2                	mov    edx,eax
c001a090:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a094:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001a09a:	fa                   	cli    
c001a09b:	a1 08 98 02 c0       	mov    eax,ds:0xc0029808
c001a0a0:	40                   	inc    eax
c001a0a1:	a3 08 98 02 c0       	mov    ds:0xc0029808,eax
c001a0a6:	a1 28 63 02 c0       	mov    eax,ds:0xc0026328
c001a0ab:	83 ec 08             	sub    esp,0x8
c001a0ae:	6a 0b                	push   0xb
c001a0b0:	50                   	push   eax
c001a0b1:	e8 4c ed fe ff       	call   c0008e02 <Computer::readCMOS(unsigned char)>
c001a0b6:	83 c4 10             	add    esp,0x10
c001a0b9:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001a0bd:	a1 28 63 02 c0       	mov    eax,ds:0xc0026328
c001a0c2:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001a0c6:	83 ca 10             	or     edx,0x10
c001a0c9:	0f b6 d2             	movzx  edx,dl
c001a0cc:	83 ec 04             	sub    esp,0x4
c001a0cf:	52                   	push   edx
c001a0d0:	6a 0b                	push   0xb
c001a0d2:	50                   	push   eax
c001a0d3:	e8 48 ee fe ff       	call   c0008f20 <Computer::writeCMOS(unsigned char, unsigned char)>
c001a0d8:	83 c4 10             	add    esp,0x10
c001a0db:	83 ec 0c             	sub    esp,0xc
c001a0de:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a0e2:	e8 dd f9 ff ff       	call   c0019ac4 <RTC::completeRTCRefresh()>
c001a0e7:	83 c4 10             	add    esp,0x10
c001a0ea:	a1 08 98 02 c0       	mov    eax,ds:0xc0029808
c001a0ef:	48                   	dec    eax
c001a0f0:	a3 08 98 02 c0       	mov    ds:0xc0029808,eax
c001a0f5:	a1 08 98 02 c0       	mov    eax,ds:0xc0029808
c001a0fa:	85 c0                	test   eax,eax
c001a0fc:	75 01                	jne    c001a0ff <RTC::RTC()+0xb1>
c001a0fe:	fb                   	sti    
c001a0ff:	90                   	nop
c001a100:	83 c4 1c             	add    esp,0x1c
c001a103:	c3                   	ret    

c001a104 <Hal::consoleScroll(int, int)>:
c001a104:	83 ec 10             	sub    esp,0x10
c001a107:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c001a10f:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c001a117:	90                   	nop
c001a118:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c001a11d:	0f 8f e1 00 00 00    	jg     c001a204 <Hal::consoleScroll(int, int)+0x100>
c001a123:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001a12b:	90                   	nop
c001a12c:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c001a134:	0f 8f be 00 00 00    	jg     c001a1f8 <Hal::consoleScroll(int, int)+0xf4>
c001a13a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a13e:	89 d0                	mov    eax,edx
c001a140:	c1 e0 02             	shl    eax,0x2
c001a143:	01 d0                	add    eax,edx
c001a145:	c1 e0 05             	shl    eax,0x5
c001a148:	89 c2                	mov    edx,eax
c001a14a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a14e:	01 d0                	add    eax,edx
c001a150:	89 c2                	mov    edx,eax
c001a152:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a156:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001a159:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a15d:	89 d0                	mov    eax,edx
c001a15f:	c1 e0 02             	shl    eax,0x2
c001a162:	01 d0                	add    eax,edx
c001a164:	c1 e0 05             	shl    eax,0x5
c001a167:	89 c2                	mov    edx,eax
c001a169:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a16d:	01 d0                	add    eax,edx
c001a16f:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c001a175:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a179:	01 c2                	add    edx,eax
c001a17b:	8a 01                	mov    al,BYTE PTR [ecx]
c001a17d:	88 02                	mov    BYTE PTR [edx],al
c001a17f:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c001a184:	75 66                	jne    c001a1ec <Hal::consoleScroll(int, int)+0xe8>
c001a186:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a18a:	83 e0 01             	and    eax,0x1
c001a18d:	74 39                	je     c001a1c8 <Hal::consoleScroll(int, int)+0xc4>
c001a18f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a193:	83 e0 0f             	and    eax,0xf
c001a196:	88 c2                	mov    dl,al
c001a198:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a19c:	c1 e0 04             	shl    eax,0x4
c001a19f:	88 d1                	mov    cl,dl
c001a1a1:	09 c1                	or     ecx,eax
c001a1a3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a1a7:	89 d0                	mov    eax,edx
c001a1a9:	c1 e0 02             	shl    eax,0x2
c001a1ac:	01 d0                	add    eax,edx
c001a1ae:	c1 e0 05             	shl    eax,0x5
c001a1b1:	89 c2                	mov    edx,eax
c001a1b3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a1b7:	01 d0                	add    eax,edx
c001a1b9:	89 c2                	mov    edx,eax
c001a1bb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a1bf:	01 d0                	add    eax,edx
c001a1c1:	88 ca                	mov    dl,cl
c001a1c3:	88 10                	mov    BYTE PTR [eax],dl
c001a1c5:	eb 25                	jmp    c001a1ec <Hal::consoleScroll(int, int)+0xe8>
c001a1c7:	90                   	nop
c001a1c8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a1cc:	89 d0                	mov    eax,edx
c001a1ce:	c1 e0 02             	shl    eax,0x2
c001a1d1:	01 d0                	add    eax,edx
c001a1d3:	c1 e0 05             	shl    eax,0x5
c001a1d6:	89 c2                	mov    edx,eax
c001a1d8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a1dc:	01 d0                	add    eax,edx
c001a1de:	89 c2                	mov    edx,eax
c001a1e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a1e4:	01 d0                	add    eax,edx
c001a1e6:	c6 00 20             	mov    BYTE PTR [eax],0x20
c001a1e9:	8d 76 00             	lea    esi,[esi+0x0]
c001a1ec:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c001a1f0:	e9 37 ff ff ff       	jmp    c001a12c <Hal::consoleScroll(int, int)+0x28>
c001a1f5:	8d 76 00             	lea    esi,[esi+0x0]
c001a1f8:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001a1fc:	e9 17 ff ff ff       	jmp    c001a118 <Hal::consoleScroll(int, int)+0x14>
c001a201:	8d 76 00             	lea    esi,[esi+0x0]
c001a204:	90                   	nop
c001a205:	83 c4 10             	add    esp,0x10
c001a208:	c3                   	ret    
c001a209:	8d 76 00             	lea    esi,[esi+0x0]

c001a20c <Hal::consoleWriteCharacter(char, int, int, int, int)>:
c001a20c:	83 ec 14             	sub    esp,0x14
c001a20f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a213:	88 04 24             	mov    BYTE PTR [esp],al
c001a216:	8a 04 24             	mov    al,BYTE PTR [esp]
c001a219:	0f b6 c0             	movzx  eax,al
c001a21c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a220:	89 d1                	mov    ecx,edx
c001a222:	83 e1 0f             	and    ecx,0xf
c001a225:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001a229:	c1 e2 04             	shl    edx,0x4
c001a22c:	0f b6 d2             	movzx  edx,dl
c001a22f:	09 ca                	or     edx,ecx
c001a231:	c1 e2 08             	shl    edx,0x8
c001a234:	09 d0                	or     eax,edx
c001a236:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c001a23b:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c001a243:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001a247:	89 d0                	mov    eax,edx
c001a249:	c1 e0 02             	shl    eax,0x2
c001a24c:	01 d0                	add    eax,edx
c001a24e:	c1 e0 04             	shl    eax,0x4
c001a251:	89 c2                	mov    edx,eax
c001a253:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001a257:	01 d0                	add    eax,edx
c001a259:	01 c0                	add    eax,eax
c001a25b:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c001a25f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a263:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c001a268:	66 89 02             	mov    WORD PTR [edx],ax
c001a26b:	90                   	nop
c001a26c:	83 c4 14             	add    esp,0x14
c001a26f:	c3                   	ret    

c001a270 <Hal::consoleCursorUpdate(int, int)>:
c001a270:	83 ec 20             	sub    esp,0x20
c001a273:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a277:	89 c2                	mov    edx,eax
c001a279:	89 d0                	mov    eax,edx
c001a27b:	c1 e0 02             	shl    eax,0x2
c001a27e:	01 d0                	add    eax,edx
c001a280:	c1 e0 04             	shl    eax,0x4
c001a283:	89 c2                	mov    edx,eax
c001a285:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001a289:	01 d0                	add    eax,edx
c001a28b:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c001a290:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c001a297:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c001a29c:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001a2a0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a2a4:	ee                   	out    dx,al
c001a2a5:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001a2aa:	0f b6 c0             	movzx  eax,al
c001a2ad:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c001a2b4:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c001a2b8:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c001a2bc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a2c0:	ee                   	out    dx,al
c001a2c1:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c001a2c8:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c001a2cd:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c001a2d1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001a2d5:	ee                   	out    dx,al
c001a2d6:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001a2db:	66 c1 e8 08          	shr    ax,0x8
c001a2df:	0f b6 c0             	movzx  eax,al
c001a2e2:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c001a2e9:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c001a2ed:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c001a2f1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a2f5:	ee                   	out    dx,al
c001a2f6:	90                   	nop
c001a2f7:	83 c4 20             	add    esp,0x20
c001a2fa:	c3                   	ret    
c001a2fb:	90                   	nop

c001a2fc <FAT::getName()>:
c001a2fc:	b8 f4 4b 02 c0       	mov    eax,0xc0024bf4
c001a301:	c3                   	ret    
c001a302:	66 90                	xchg   ax,ax

c001a304 <FAT::tell(void*, unsigned long long*)>:
c001a304:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001a309:	75 09                	jne    c001a314 <FAT::tell(void*, unsigned long long*)+0x10>
c001a30b:	b8 04 00 00 00       	mov    eax,0x4
c001a310:	c3                   	ret    
c001a311:	8d 76 00             	lea    esi,[esi+0x0]
c001a314:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001a319:	75 09                	jne    c001a324 <FAT::tell(void*, unsigned long long*)+0x20>
c001a31b:	b8 04 00 00 00       	mov    eax,0x4
c001a320:	c3                   	ret    
c001a321:	8d 76 00             	lea    esi,[esi+0x0]
c001a324:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a328:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c001a32b:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c001a32e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001a332:	89 01                	mov    DWORD PTR [ecx],eax
c001a334:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001a337:	b8 00 00 00 00       	mov    eax,0x0
c001a33c:	c3                   	ret    
c001a33d:	90                   	nop
c001a33e:	66 90                	xchg   ax,ax

c001a340 <FAT::stat(void*, unsigned long long*)>:
c001a340:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001a345:	75 09                	jne    c001a350 <FAT::stat(void*, unsigned long long*)+0x10>
c001a347:	b8 04 00 00 00       	mov    eax,0x4
c001a34c:	c3                   	ret    
c001a34d:	8d 76 00             	lea    esi,[esi+0x0]
c001a350:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001a355:	75 09                	jne    c001a360 <FAT::stat(void*, unsigned long long*)+0x20>
c001a357:	b8 04 00 00 00       	mov    eax,0x4
c001a35c:	c3                   	ret    
c001a35d:	8d 76 00             	lea    esi,[esi+0x0]
c001a360:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a364:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001a367:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001a36a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001a36e:	89 01                	mov    DWORD PTR [ecx],eax
c001a370:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001a373:	b8 00 00 00 00       	mov    eax,0x0
c001a378:	c3                   	ret    
c001a379:	90                   	nop
c001a37a:	66 90                	xchg   ax,ax

c001a37c <FAT::~FAT()>:
c001a37c:	83 ec 0c             	sub    esp,0xc
c001a37f:	ba 40 4c 02 c0       	mov    edx,0xc0024c40
c001a384:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a388:	89 10                	mov    DWORD PTR [eax],edx
c001a38a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a38e:	83 ec 0c             	sub    esp,0xc
c001a391:	50                   	push   eax
c001a392:	e8 d5 26 ff ff       	call   c000ca6c <Filesystem::~Filesystem()>
c001a397:	83 c4 10             	add    esp,0x10
c001a39a:	90                   	nop
c001a39b:	83 c4 0c             	add    esp,0xc
c001a39e:	c3                   	ret    
c001a39f:	90                   	nop

c001a3a0 <FAT::~FAT()>:
c001a3a0:	83 ec 0c             	sub    esp,0xc
c001a3a3:	83 ec 0c             	sub    esp,0xc
c001a3a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a3aa:	e8 cd ff ff ff       	call   c001a37c <FAT::~FAT()>
c001a3af:	83 c4 10             	add    esp,0x10
c001a3b2:	83 ec 08             	sub    esp,0x8
c001a3b5:	6a 08                	push   0x8
c001a3b7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a3bb:	e8 90 22 ff ff       	call   c000c650 <operator delete(void*, unsigned long)>
c001a3c0:	83 c4 10             	add    esp,0x10
c001a3c3:	83 c4 0c             	add    esp,0xc
c001a3c6:	c3                   	ret    
c001a3c7:	90                   	nop

c001a3c8 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c001a3c8:	83 ec 1c             	sub    esp,0x1c
c001a3cb:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c001a3d2:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c001a3d7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a3db:	8b 04 85 40 99 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd66c0]
c001a3e2:	83 f8 ff             	cmp    eax,0xffffffff
c001a3e5:	75 35                	jne    c001a41c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c001a3e7:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001a3eb:	88 c2                	mov    dl,al
c001a3ed:	a1 20 99 02 c0       	mov    eax,ds:0xc0029920
c001a3f2:	01 d0                	add    eax,edx
c001a3f4:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001a3f8:	8b 15 20 99 02 c0    	mov    edx,DWORD PTR ds:0xc0029920
c001a3fe:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a402:	89 14 85 40 99 02 c0 	mov    DWORD PTR [eax*4-0x3ffd66c0],edx
c001a409:	a1 20 99 02 c0       	mov    eax,ds:0xc0029920
c001a40e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001a412:	89 14 85 c0 99 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6640],edx
c001a419:	eb 19                	jmp    c001a434 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c001a41b:	90                   	nop
c001a41c:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001a420:	88 c2                	mov    dl,al
c001a422:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a426:	8b 04 85 40 99 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd66c0]
c001a42d:	01 d0                	add    eax,edx
c001a42f:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001a433:	90                   	nop
c001a434:	83 ec 04             	sub    esp,0x4
c001a437:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001a43b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001a43f:	8d 44 24 15          	lea    eax,[esp+0x15]
c001a443:	50                   	push   eax
c001a444:	e8 0d c6 fe ff       	call   c0006a56 <f_getlabel>
c001a449:	83 c4 10             	add    esp,0x10
c001a44c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a450:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001a455:	75 09                	jne    c001a460 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c001a457:	b8 00 00 00 00       	mov    eax,0x0
c001a45c:	eb 0a                	jmp    c001a468 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c001a45e:	66 90                	xchg   ax,ax
c001a460:	b8 01 00 00 00       	mov    eax,0x1
c001a465:	8d 76 00             	lea    esi,[esi+0x0]
c001a468:	83 c4 1c             	add    esp,0x1c
c001a46b:	c3                   	ret    

c001a46c <FAT::setlabel(LogicalDisk*, int, char*)>:
c001a46c:	57                   	push   edi
c001a46d:	83 ec 58             	sub    esp,0x58
c001a470:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c001a478:	8d 54 24 10          	lea    edx,[esp+0x10]
c001a47c:	b9 0f 00 00 00       	mov    ecx,0xf
c001a481:	b8 00 00 00 00       	mov    eax,0x0
c001a486:	fc                   	cld    
c001a487:	89 d7                	mov    edi,edx
c001a489:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001a48b:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001a48f:	8b 04 85 40 99 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd66c0]
c001a496:	83 f8 ff             	cmp    eax,0xffffffff
c001a499:	75 35                	jne    c001a4d0 <FAT::setlabel(LogicalDisk*, int, char*)+0x64>
c001a49b:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001a49f:	88 c2                	mov    dl,al
c001a4a1:	a1 20 99 02 c0       	mov    eax,ds:0xc0029920
c001a4a6:	01 d0                	add    eax,edx
c001a4a8:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a4ac:	8b 15 20 99 02 c0    	mov    edx,DWORD PTR ds:0xc0029920
c001a4b2:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001a4b6:	89 14 85 40 99 02 c0 	mov    DWORD PTR [eax*4-0x3ffd66c0],edx
c001a4bd:	a1 20 99 02 c0       	mov    eax,ds:0xc0029920
c001a4c2:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c001a4c6:	89 14 85 c0 99 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6640],edx
c001a4cd:	eb 19                	jmp    c001a4e8 <FAT::setlabel(LogicalDisk*, int, char*)+0x7c>
c001a4cf:	90                   	nop
c001a4d0:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001a4d4:	88 c2                	mov    dl,al
c001a4d6:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001a4da:	8b 04 85 40 99 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd66c0]
c001a4e1:	01 d0                	add    eax,edx
c001a4e3:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a4e7:	90                   	nop
c001a4e8:	83 ec 08             	sub    esp,0x8
c001a4eb:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c001a4ef:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a4f3:	50                   	push   eax
c001a4f4:	e8 ab 61 fe ff       	call   c00006a4 <strcat>
c001a4f9:	83 c4 10             	add    esp,0x10
c001a4fc:	83 ec 0c             	sub    esp,0xc
c001a4ff:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a503:	50                   	push   eax
c001a504:	e8 3b c7 fe ff       	call   c0006c44 <f_setlabel>
c001a509:	83 c4 10             	add    esp,0x10
c001a50c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001a510:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c001a515:	75 09                	jne    c001a520 <FAT::setlabel(LogicalDisk*, int, char*)+0xb4>
c001a517:	b8 00 00 00 00       	mov    eax,0x0
c001a51c:	eb 0a                	jmp    c001a528 <FAT::setlabel(LogicalDisk*, int, char*)+0xbc>
c001a51e:	66 90                	xchg   ax,ax
c001a520:	b8 01 00 00 00       	mov    eax,0x1
c001a525:	8d 76 00             	lea    esi,[esi+0x0]
c001a528:	83 c4 58             	add    esp,0x58
c001a52b:	5f                   	pop    edi
c001a52c:	c3                   	ret    
c001a52d:	90                   	nop
c001a52e:	66 90                	xchg   ax,ax

c001a530 <FAT::format(LogicalDisk*, int, char const*, int)>:
c001a530:	83 ec 2c             	sub    esp,0x2c
c001a533:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001a53b:	83 ec 08             	sub    esp,0x8
c001a53e:	68 18 4c 02 c0       	push   0xc0024c18
c001a543:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a547:	e8 a4 60 fe ff       	call   c00005f0 <strcmp>
c001a54c:	83 c4 10             	add    esp,0x10
c001a54f:	85 c0                	test   eax,eax
c001a551:	0f 94 c0             	sete   al
c001a554:	84 c0                	test   al,al
c001a556:	74 10                	je     c001a568 <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c001a558:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001a560:	e9 b3 00 00 00       	jmp    c001a618 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001a565:	8d 76 00             	lea    esi,[esi+0x0]
c001a568:	83 ec 08             	sub    esp,0x8
c001a56b:	68 0a 4c 02 c0       	push   0xc0024c0a
c001a570:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a574:	e8 77 60 fe ff       	call   c00005f0 <strcmp>
c001a579:	83 c4 10             	add    esp,0x10
c001a57c:	85 c0                	test   eax,eax
c001a57e:	0f 94 c0             	sete   al
c001a581:	84 c0                	test   al,al
c001a583:	74 0f                	je     c001a594 <FAT::format(LogicalDisk*, int, char const*, int)+0x64>
c001a585:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001a58d:	e9 86 00 00 00       	jmp    c001a618 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001a592:	66 90                	xchg   ax,ax
c001a594:	83 ec 08             	sub    esp,0x8
c001a597:	68 10 4c 02 c0       	push   0xc0024c10
c001a59c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a5a0:	e8 4b 60 fe ff       	call   c00005f0 <strcmp>
c001a5a5:	83 c4 10             	add    esp,0x10
c001a5a8:	85 c0                	test   eax,eax
c001a5aa:	0f 94 c0             	sete   al
c001a5ad:	84 c0                	test   al,al
c001a5af:	74 0b                	je     c001a5bc <FAT::format(LogicalDisk*, int, char const*, int)+0x8c>
c001a5b1:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001a5b9:	eb 5d                	jmp    c001a618 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001a5bb:	90                   	nop
c001a5bc:	83 ec 08             	sub    esp,0x8
c001a5bf:	68 cc 23 02 c0       	push   0xc00223cc
c001a5c4:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a5c8:	e8 23 60 fe ff       	call   c00005f0 <strcmp>
c001a5cd:	83 c4 10             	add    esp,0x10
c001a5d0:	85 c0                	test   eax,eax
c001a5d2:	0f 94 c0             	sete   al
c001a5d5:	84 c0                	test   al,al
c001a5d7:	74 0b                	je     c001a5e4 <FAT::format(LogicalDisk*, int, char const*, int)+0xb4>
c001a5d9:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c001a5e1:	eb 35                	jmp    c001a618 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001a5e3:	90                   	nop
c001a5e4:	83 ec 08             	sub    esp,0x8
c001a5e7:	68 16 4c 02 c0       	push   0xc0024c16
c001a5ec:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a5f0:	e8 fb 5f fe ff       	call   c00005f0 <strcmp>
c001a5f5:	83 c4 10             	add    esp,0x10
c001a5f8:	85 c0                	test   eax,eax
c001a5fa:	0f 94 c0             	sete   al
c001a5fd:	84 c0                	test   al,al
c001a5ff:	74 0b                	je     c001a60c <FAT::format(LogicalDisk*, int, char const*, int)+0xdc>
c001a601:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c001a609:	eb 0d                	jmp    c001a618 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001a60b:	90                   	nop
c001a60c:	b8 08 00 00 00       	mov    eax,0x8
c001a611:	e9 ea 00 00 00       	jmp    c001a700 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c001a616:	66 90                	xchg   ax,ax
c001a618:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c001a61f:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001a624:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a628:	8b 04 85 40 99 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd66c0]
c001a62f:	83 f8 ff             	cmp    eax,0xffffffff
c001a632:	75 34                	jne    c001a668 <FAT::format(LogicalDisk*, int, char const*, int)+0x138>
c001a634:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001a638:	88 c2                	mov    dl,al
c001a63a:	a1 20 99 02 c0       	mov    eax,ds:0xc0029920
c001a63f:	01 d0                	add    eax,edx
c001a641:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001a645:	8b 15 20 99 02 c0    	mov    edx,DWORD PTR ds:0xc0029920
c001a64b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a64f:	89 14 85 40 99 02 c0 	mov    DWORD PTR [eax*4-0x3ffd66c0],edx
c001a656:	a1 20 99 02 c0       	mov    eax,ds:0xc0029920
c001a65b:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001a65f:	89 14 85 c0 99 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6640],edx
c001a666:	eb 18                	jmp    c001a680 <FAT::format(LogicalDisk*, int, char const*, int)+0x150>
c001a668:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001a66c:	88 c2                	mov    dl,al
c001a66e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a672:	8b 04 85 40 99 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd66c0]
c001a679:	01 d0                	add    eax,edx
c001a67b:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001a67f:	90                   	nop
c001a680:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a684:	88 04 24             	mov    BYTE PTR [esp],al
c001a687:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001a68b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a68f:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001a697:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c001a69c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001a6a4:	83 ec 0c             	sub    esp,0xc
c001a6a7:	68 00 20 00 00       	push   0x2000
c001a6ac:	e8 e6 f0 fe ff       	call   c0009797 <malloc>
c001a6b1:	83 c4 10             	add    esp,0x10
c001a6b4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a6b8:	68 00 20 00 00       	push   0x2000
c001a6bd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a6c1:	8d 44 24 08          	lea    eax,[esp+0x8]
c001a6c5:	50                   	push   eax
c001a6c6:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c001a6ca:	50                   	push   eax
c001a6cb:	e8 f5 cb fe ff       	call   c00072c5 <f_mkfs>
c001a6d0:	83 c4 10             	add    esp,0x10
c001a6d3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a6d7:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a6dc:	75 0a                	jne    c001a6e8 <FAT::format(LogicalDisk*, int, char const*, int)+0x1b8>
c001a6de:	b8 00 00 00 00       	mov    eax,0x0
c001a6e3:	eb 1b                	jmp    c001a700 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c001a6e5:	8d 76 00             	lea    esi,[esi+0x0]
c001a6e8:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c001a6ed:	75 09                	jne    c001a6f8 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c001a6ef:	b8 09 00 00 00       	mov    eax,0x9
c001a6f4:	eb 0a                	jmp    c001a700 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c001a6f6:	66 90                	xchg   ax,ax
c001a6f8:	b8 01 00 00 00       	mov    eax,0x1
c001a6fd:	8d 76 00             	lea    esi,[esi+0x0]
c001a700:	83 c4 2c             	add    esp,0x2c
c001a703:	c3                   	ret    

c001a704 <FAT::tryMount(LogicalDisk*, int)>:
c001a704:	81 ec 6c 03 00 00    	sub    esp,0x36c
c001a70a:	a1 20 99 02 c0       	mov    eax,ds:0xc0029920
c001a70f:	83 f8 14             	cmp    eax,0x14
c001a712:	75 18                	jne    c001a72c <FAT::tryMount(LogicalDisk*, int)+0x28>
c001a714:	83 ec 0c             	sub    esp,0xc
c001a717:	68 1c 4c 02 c0       	push   0xc0024c1c
c001a71c:	e8 7a 83 ff ff       	call   c0012a9b <Krnl::panic(char const*)>
c001a721:	83 c4 10             	add    esp,0x10
c001a724:	b0 00                	mov    al,0x0
c001a726:	e9 e9 01 00 00       	jmp    c001a914 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001a72b:	90                   	nop
c001a72c:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001a733:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001a739:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001a73f:	3d 00 02 00 00       	cmp    eax,0x200
c001a744:	74 0a                	je     c001a750 <FAT::tryMount(LogicalDisk*, int)+0x4c>
c001a746:	b0 00                	mov    al,0x0
c001a748:	e9 c7 01 00 00       	jmp    c001a914 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001a74d:	8d 76 00             	lea    esi,[esi+0x0]
c001a750:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c001a758:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001a75f:	8b 04 85 40 99 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd66c0]
c001a766:	83 f8 ff             	cmp    eax,0xffffffff
c001a769:	74 09                	je     c001a774 <FAT::tryMount(LogicalDisk*, int)+0x70>
c001a76b:	b0 01                	mov    al,0x1
c001a76d:	e9 a2 01 00 00       	jmp    c001a914 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001a772:	66 90                	xchg   ax,ax
c001a774:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c001a77e:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c001a786:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c001a78d:	88 c2                	mov    dl,al
c001a78f:	a1 20 99 02 c0       	mov    eax,ds:0xc0029920
c001a794:	01 d0                	add    eax,edx
c001a796:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c001a79d:	8b 15 20 99 02 c0    	mov    edx,DWORD PTR ds:0xc0029920
c001a7a3:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001a7aa:	89 14 85 40 99 02 c0 	mov    DWORD PTR [eax*4-0x3ffd66c0],edx
c001a7b1:	a1 20 99 02 c0       	mov    eax,ds:0xc0029920
c001a7b6:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c001a7bd:	89 14 85 c0 99 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6640],edx
c001a7c4:	83 ec 0c             	sub    esp,0xc
c001a7c7:	68 54 02 00 00       	push   0x254
c001a7cc:	e8 c6 ef fe ff       	call   c0009797 <malloc>
c001a7d1:	83 c4 10             	add    esp,0x10
c001a7d4:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c001a7db:	83 ec 04             	sub    esp,0x4
c001a7de:	6a 00                	push   0x0
c001a7e0:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001a7e7:	50                   	push   eax
c001a7e8:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001a7ef:	e8 59 a4 fe ff       	call   c0004c4d <f_mount>
c001a7f4:	83 c4 10             	add    esp,0x10
c001a7f7:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001a7fe:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c001a806:	74 1c                	je     c001a824 <FAT::tryMount(LogicalDisk*, int)+0x120>
c001a808:	83 ec 0c             	sub    esp,0xc
c001a80b:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001a812:	e8 a0 ef fe ff       	call   c00097b7 <rfree>
c001a817:	83 c4 10             	add    esp,0x10
c001a81a:	b0 00                	mov    al,0x0
c001a81c:	e9 f3 00 00 00       	jmp    c001a914 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001a821:	8d 76 00             	lea    esi,[esi+0x0]
c001a824:	83 ec 04             	sub    esp,0x4
c001a827:	68 00 01 00 00       	push   0x100
c001a82c:	6a 00                	push   0x0
c001a82e:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001a835:	50                   	push   eax
c001a836:	e8 6d 5c fe ff       	call   c00004a8 <memset>
c001a83b:	83 c4 10             	add    esp,0x10
c001a83e:	83 ec 08             	sub    esp,0x8
c001a841:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001a848:	50                   	push   eax
c001a849:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001a850:	50                   	push   eax
c001a851:	e8 4e 5e fe ff       	call   c00006a4 <strcat>
c001a856:	83 c4 10             	add    esp,0x10
c001a859:	83 ec 08             	sub    esp,0x8
c001a85c:	68 2a 4c 02 c0       	push   0xc0024c2a
c001a861:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001a868:	50                   	push   eax
c001a869:	e8 36 5e fe ff       	call   c00006a4 <strcat>
c001a86e:	83 c4 10             	add    esp,0x10
c001a871:	83 ec 04             	sub    esp,0x4
c001a874:	6a 01                	push   0x1
c001a876:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c001a87d:	50                   	push   eax
c001a87e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001a882:	50                   	push   eax
c001a883:	e8 27 a4 fe ff       	call   c0004caf <f_open>
c001a888:	83 c4 10             	add    esp,0x10
c001a88b:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001a892:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c001a899:	85 c0                	test   eax,eax
c001a89b:	74 0b                	je     c001a8a8 <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c001a89d:	78 31                	js     c001a8d0 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001a89f:	83 e8 04             	sub    eax,0x4
c001a8a2:	83 f8 01             	cmp    eax,0x1
c001a8a5:	77 29                	ja     c001a8d0 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001a8a7:	90                   	nop
c001a8a8:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c001a8b0:	83 ec 0c             	sub    esp,0xc
c001a8b3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001a8b7:	50                   	push   eax
c001a8b8:	e8 44 af fe ff       	call   c0005801 <f_close>
c001a8bd:	83 c4 10             	add    esp,0x10
c001a8c0:	90                   	nop
c001a8c1:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c001a8c9:	74 41                	je     c001a90c <FAT::tryMount(LogicalDisk*, int)+0x208>
c001a8cb:	eb 33                	jmp    c001a900 <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c001a8cd:	8d 76 00             	lea    esi,[esi+0x0]
c001a8d0:	83 ec 0c             	sub    esp,0xc
c001a8d3:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001a8da:	e8 d8 ee fe ff       	call   c00097b7 <rfree>
c001a8df:	83 c4 10             	add    esp,0x10
c001a8e2:	83 ec 04             	sub    esp,0x4
c001a8e5:	6a 00                	push   0x0
c001a8e7:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001a8ee:	50                   	push   eax
c001a8ef:	6a 00                	push   0x0
c001a8f1:	e8 57 a3 fe ff       	call   c0004c4d <f_mount>
c001a8f6:	83 c4 10             	add    esp,0x10
c001a8f9:	b0 00                	mov    al,0x0
c001a8fb:	eb 17                	jmp    c001a914 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001a8fd:	8d 76 00             	lea    esi,[esi+0x0]
c001a900:	a1 20 99 02 c0       	mov    eax,ds:0xc0029920
c001a905:	40                   	inc    eax
c001a906:	a3 20 99 02 c0       	mov    ds:0xc0029920,eax
c001a90b:	90                   	nop
c001a90c:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c001a913:	90                   	nop
c001a914:	81 c4 6c 03 00 00    	add    esp,0x36c
c001a91a:	c3                   	ret    
c001a91b:	90                   	nop

c001a91c <FAT::allocateSwapfile(char const*, int)>:
c001a91c:	55                   	push   ebp
c001a91d:	57                   	push   edi
c001a91e:	56                   	push   esi
c001a91f:	53                   	push   ebx
c001a920:	81 ec 3c 04 00 00    	sub    esp,0x43c
c001a926:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c001a931:	83 ec 0c             	sub    esp,0xc
c001a934:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c001a93b:	e8 57 ee fe ff       	call   c0009797 <malloc>
c001a940:	83 c4 10             	add    esp,0x10
c001a943:	89 c7                	mov    edi,eax
c001a945:	a1 30 98 02 c0       	mov    eax,ds:0xc0029830
c001a94a:	83 ec 04             	sub    esp,0x4
c001a94d:	50                   	push   eax
c001a94e:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c001a955:	57                   	push   edi
c001a956:	e8 41 23 ff ff       	call   c000cc9c <File::File(char const*, Process*)>
c001a95b:	83 c4 10             	add    esp,0x10
c001a95e:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c001a965:	83 ec 04             	sub    esp,0x4
c001a968:	8d 44 24 13          	lea    eax,[esp+0x13]
c001a96c:	50                   	push   eax
c001a96d:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a971:	50                   	push   eax
c001a972:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001a979:	e8 a4 26 ff ff       	call   c000d022 <File::stat(unsigned long long*, bool*)>
c001a97e:	83 c4 10             	add    esp,0x10
c001a981:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001a988:	c1 e0 14             	shl    eax,0x14
c001a98b:	89 c7                	mov    edi,eax
c001a98d:	89 c5                	mov    ebp,eax
c001a98f:	c1 fd 1f             	sar    ebp,0x1f
c001a992:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a996:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a99a:	89 f9                	mov    ecx,edi
c001a99c:	31 c1                	xor    ecx,eax
c001a99e:	89 cb                	mov    ebx,ecx
c001a9a0:	89 e9                	mov    ecx,ebp
c001a9a2:	31 d1                	xor    ecx,edx
c001a9a4:	89 ce                	mov    esi,ecx
c001a9a6:	89 f0                	mov    eax,esi
c001a9a8:	09 d8                	or     eax,ebx
c001a9aa:	0f 84 98 00 00 00    	je     c001aa48 <FAT::allocateSwapfile(char const*, int)+0x12c>
c001a9b0:	83 ec 0c             	sub    esp,0xc
c001a9b3:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001a9ba:	e8 2f 25 ff ff       	call   c000ceee <File::unlink()>
c001a9bf:	83 c4 10             	add    esp,0x10
c001a9c2:	83 ec 08             	sub    esp,0x8
c001a9c5:	6a 12                	push   0x12
c001a9c7:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001a9ce:	e8 a3 23 ff ff       	call   c000cd76 <File::open(FileOpenMode)>
c001a9d3:	83 c4 10             	add    esp,0x10
c001a9d6:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001a9dd:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001a9e3:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001a9ea:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001a9f1:	c1 e0 14             	shl    eax,0x14
c001a9f4:	99                   	cdq    
c001a9f5:	6a 01                	push   0x1
c001a9f7:	52                   	push   edx
c001a9f8:	50                   	push   eax
c001a9f9:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c001aa00:	e8 ac c4 fe ff       	call   c0006eb1 <f_expand>
c001aa05:	83 c4 10             	add    esp,0x10
c001aa08:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001aa0f:	8b 00                	mov    eax,DWORD PTR [eax]
c001aa11:	83 c0 10             	add    eax,0x10
c001aa14:	8b 00                	mov    eax,DWORD PTR [eax]
c001aa16:	83 ec 0c             	sub    esp,0xc
c001aa19:	8d 54 24 24          	lea    edx,[esp+0x24]
c001aa1d:	52                   	push   edx
c001aa1e:	8d 54 24 30          	lea    edx,[esp+0x30]
c001aa22:	52                   	push   edx
c001aa23:	6a 00                	push   0x0
c001aa25:	68 00 04 00 00       	push   0x400
c001aa2a:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001aa31:	ff d0                	call   eax
c001aa33:	83 c4 20             	add    esp,0x20
c001aa36:	83 ec 0c             	sub    esp,0xc
c001aa39:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001aa40:	e8 8f 23 ff ff       	call   c000cdd4 <File::close()>
c001aa45:	83 c4 10             	add    esp,0x10
c001aa48:	83 ec 08             	sub    esp,0x8
c001aa4b:	6a 01                	push   0x1
c001aa4d:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001aa54:	e8 1d 23 ff ff       	call   c000cd76 <File::open(FileOpenMode)>
c001aa59:	83 c4 10             	add    esp,0x10
c001aa5c:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001aa63:	8b 00                	mov    eax,DWORD PTR [eax]
c001aa65:	83 c0 0c             	add    eax,0xc
c001aa68:	8b 00                	mov    eax,DWORD PTR [eax]
c001aa6a:	83 ec 0c             	sub    esp,0xc
c001aa6d:	8d 54 24 24          	lea    edx,[esp+0x24]
c001aa71:	52                   	push   edx
c001aa72:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c001aa76:	52                   	push   edx
c001aa77:	6a 00                	push   0x0
c001aa79:	6a 04                	push   0x4
c001aa7b:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001aa82:	ff d0                	call   eax
c001aa84:	83 c4 20             	add    esp,0x20
c001aa87:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001aa8e:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001aa94:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001aa9b:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c001aaa2:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001aaa5:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001aaa8:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c001aaaf:	83 ec 0c             	sub    esp,0xc
c001aab2:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001aab9:	e8 16 23 ff ff       	call   c000cdd4 <File::close()>
c001aabe:	83 c4 10             	add    esp,0x10
c001aac1:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c001aac8:	ba 00 00 00 00       	mov    edx,0x0
c001aacd:	81 c4 3c 04 00 00    	add    esp,0x43c
c001aad3:	5b                   	pop    ebx
c001aad4:	5e                   	pop    esi
c001aad5:	5f                   	pop    edi
c001aad6:	5d                   	pop    ebp
c001aad7:	c3                   	ret    

c001aad8 <FAT::readDir(void*, unsigned long, void*, int*)>:
c001aad8:	57                   	push   edi
c001aad9:	56                   	push   esi
c001aada:	53                   	push   ebx
c001aadb:	81 ec 50 02 00 00    	sub    esp,0x250
c001aae1:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c001aae9:	74 0d                	je     c001aaf8 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c001aaeb:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c001aaf3:	75 0f                	jne    c001ab04 <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c001aaf5:	8d 76 00             	lea    esi,[esi+0x0]
c001aaf8:	b8 04 00 00 00       	mov    eax,0x4
c001aafd:	e9 36 01 00 00       	jmp    c001ac38 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c001ab02:	66 90                	xchg   ax,ax
c001ab04:	83 ec 08             	sub    esp,0x8
c001ab07:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c001ab0e:	50                   	push   eax
c001ab0f:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c001ab16:	e8 f0 b2 fe ff       	call   c0005e0b <f_readdir>
c001ab1b:	83 c4 10             	add    esp,0x10
c001ab1e:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c001ab25:	66 c7 44 24 04 00 00 	mov    WORD PTR [esp+0x4],0x0
c001ab2c:	83 ec 0c             	sub    esp,0xc
c001ab2f:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c001ab36:	83 c0 1a             	add    eax,0x1a
c001ab39:	50                   	push   eax
c001ab3a:	e8 85 59 fe ff       	call   c00004c4 <strlen>
c001ab3f:	83 c4 10             	add    esp,0x10
c001ab42:	ba 00 00 00 00       	mov    edx,0x0
c001ab47:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ab4b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001ab4f:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c001ab56:	0f b6 c0             	movzx  eax,al
c001ab59:	83 e0 10             	and    eax,0x10
c001ab5c:	74 0a                	je     c001ab68 <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c001ab5e:	b8 02 00 00 00       	mov    eax,0x2
c001ab63:	eb 0b                	jmp    c001ab70 <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c001ab65:	8d 76 00             	lea    esi,[esi+0x0]
c001ab68:	b8 01 00 00 00       	mov    eax,0x1
c001ab6d:	8d 76 00             	lea    esi,[esi+0x0]
c001ab70:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001ab74:	83 ec 08             	sub    esp,0x8
c001ab77:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c001ab7e:	83 c0 1a             	add    eax,0x1a
c001ab81:	50                   	push   eax
c001ab82:	8d 44 24 10          	lea    eax,[esp+0x10]
c001ab86:	83 c0 10             	add    eax,0x10
c001ab89:	50                   	push   eax
c001ab8a:	e8 d5 59 fe ff       	call   c0000564 <strcpy>
c001ab8f:	83 c4 10             	add    esp,0x10
c001ab92:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c001ab99:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c001aba0:	8d 44 24 04          	lea    eax,[esp+0x4]
c001aba4:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c001abab:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c001abb2:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c001abb9:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c001abc0:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c001abc7:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c001abce:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c001abd5:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c001abdc:	89 c6                	mov    esi,eax
c001abde:	89 d7                	mov    edi,edx
c001abe0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001abe2:	89 c8                	mov    eax,ecx
c001abe4:	89 fa                	mov    edx,edi
c001abe6:	89 f3                	mov    ebx,esi
c001abe8:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c001abef:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c001abf6:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c001abfd:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c001ac04:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001ac0a:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c001ac11:	84 c0                	test   al,al
c001ac13:	75 07                	jne    c001ac1c <FAT::readDir(void*, unsigned long, void*, int*)+0x144>
c001ac15:	b8 07 00 00 00       	mov    eax,0x7
c001ac1a:	eb 1c                	jmp    c001ac38 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c001ac1c:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c001ac23:	85 c0                	test   eax,eax
c001ac25:	75 09                	jne    c001ac30 <FAT::readDir(void*, unsigned long, void*, int*)+0x158>
c001ac27:	b8 00 00 00 00       	mov    eax,0x0
c001ac2c:	eb 0a                	jmp    c001ac38 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c001ac2e:	66 90                	xchg   ax,ax
c001ac30:	b8 01 00 00 00       	mov    eax,0x1
c001ac35:	8d 76 00             	lea    esi,[esi+0x0]
c001ac38:	81 c4 50 02 00 00    	add    esp,0x250
c001ac3e:	5b                   	pop    ebx
c001ac3f:	5e                   	pop    esi
c001ac40:	5f                   	pop    edi
c001ac41:	c3                   	ret    
c001ac42:	66 90                	xchg   ax,ax

c001ac44 <FAT::read(void*, unsigned long, void*, int*)>:
c001ac44:	83 ec 1c             	sub    esp,0x1c
c001ac47:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001ac4c:	74 0a                	je     c001ac58 <FAT::read(void*, unsigned long, void*, int*)+0x14>
c001ac4e:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001ac53:	75 0b                	jne    c001ac60 <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c001ac55:	8d 76 00             	lea    esi,[esi+0x0]
c001ac58:	b8 04 00 00 00       	mov    eax,0x4
c001ac5d:	eb 41                	jmp    c001aca0 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001ac5f:	90                   	nop
c001ac60:	8d 44 24 08          	lea    eax,[esp+0x8]
c001ac64:	50                   	push   eax
c001ac65:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ac69:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001ac6d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ac71:	e8 75 a4 fe ff       	call   c00050eb <f_read>
c001ac76:	83 c4 10             	add    esp,0x10
c001ac79:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ac7d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ac81:	89 c2                	mov    edx,eax
c001ac83:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ac87:	89 10                	mov    DWORD PTR [eax],edx
c001ac89:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ac8d:	85 c0                	test   eax,eax
c001ac8f:	75 07                	jne    c001ac98 <FAT::read(void*, unsigned long, void*, int*)+0x54>
c001ac91:	b8 00 00 00 00       	mov    eax,0x0
c001ac96:	eb 08                	jmp    c001aca0 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001ac98:	b8 01 00 00 00       	mov    eax,0x1
c001ac9d:	8d 76 00             	lea    esi,[esi+0x0]
c001aca0:	83 c4 1c             	add    esp,0x1c
c001aca3:	c3                   	ret    

c001aca4 <FAT::write(void*, unsigned long, void*, int*)>:
c001aca4:	83 ec 1c             	sub    esp,0x1c
c001aca7:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001acac:	74 0a                	je     c001acb8 <FAT::write(void*, unsigned long, void*, int*)+0x14>
c001acae:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001acb3:	75 0b                	jne    c001acc0 <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c001acb5:	8d 76 00             	lea    esi,[esi+0x0]
c001acb8:	b8 04 00 00 00       	mov    eax,0x4
c001acbd:	eb 41                	jmp    c001ad00 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001acbf:	90                   	nop
c001acc0:	8d 44 24 08          	lea    eax,[esp+0x8]
c001acc4:	50                   	push   eax
c001acc5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001acc9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001accd:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001acd1:	e8 95 a6 fe ff       	call   c000536b <f_write>
c001acd6:	83 c4 10             	add    esp,0x10
c001acd9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001acdd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ace1:	89 c2                	mov    edx,eax
c001ace3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ace7:	89 10                	mov    DWORD PTR [eax],edx
c001ace9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001aced:	85 c0                	test   eax,eax
c001acef:	75 07                	jne    c001acf8 <FAT::write(void*, unsigned long, void*, int*)+0x54>
c001acf1:	b8 00 00 00 00       	mov    eax,0x0
c001acf6:	eb 08                	jmp    c001ad00 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001acf8:	b8 01 00 00 00       	mov    eax,0x1
c001acfd:	8d 76 00             	lea    esi,[esi+0x0]
c001ad00:	83 c4 1c             	add    esp,0x1c
c001ad03:	c3                   	ret    

c001ad04 <FAT::close(void*)>:
c001ad04:	83 ec 1c             	sub    esp,0x1c
c001ad07:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001ad0c:	75 0a                	jne    c001ad18 <FAT::close(void*)+0x14>
c001ad0e:	b8 04 00 00 00       	mov    eax,0x4
c001ad13:	eb 3f                	jmp    c001ad54 <FAT::close(void*)+0x50>
c001ad15:	8d 76 00             	lea    esi,[esi+0x0]
c001ad18:	83 ec 0c             	sub    esp,0xc
c001ad1b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ad1f:	e8 dd aa fe ff       	call   c0005801 <f_close>
c001ad24:	83 c4 10             	add    esp,0x10
c001ad27:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ad2b:	83 ec 0c             	sub    esp,0xc
c001ad2e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ad32:	e8 70 ea fe ff       	call   c00097a7 <free>
c001ad37:	83 c4 10             	add    esp,0x10
c001ad3a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ad3e:	85 c0                	test   eax,eax
c001ad40:	75 0a                	jne    c001ad4c <FAT::close(void*)+0x48>
c001ad42:	b8 00 00 00 00       	mov    eax,0x0
c001ad47:	eb 0b                	jmp    c001ad54 <FAT::close(void*)+0x50>
c001ad49:	8d 76 00             	lea    esi,[esi+0x0]
c001ad4c:	b8 01 00 00 00       	mov    eax,0x1
c001ad51:	8d 76 00             	lea    esi,[esi+0x0]
c001ad54:	83 c4 1c             	add    esp,0x1c
c001ad57:	c3                   	ret    

c001ad58 <FAT::closeDir(void*)>:
c001ad58:	83 ec 1c             	sub    esp,0x1c
c001ad5b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001ad60:	75 0a                	jne    c001ad6c <FAT::closeDir(void*)+0x14>
c001ad62:	b8 04 00 00 00       	mov    eax,0x4
c001ad67:	eb 3f                	jmp    c001ada8 <FAT::closeDir(void*)+0x50>
c001ad69:	8d 76 00             	lea    esi,[esi+0x0]
c001ad6c:	83 ec 0c             	sub    esp,0xc
c001ad6f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ad73:	e8 71 b0 fe ff       	call   c0005de9 <f_closedir>
c001ad78:	83 c4 10             	add    esp,0x10
c001ad7b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ad7f:	83 ec 0c             	sub    esp,0xc
c001ad82:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ad86:	e8 1c ea fe ff       	call   c00097a7 <free>
c001ad8b:	83 c4 10             	add    esp,0x10
c001ad8e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ad92:	85 c0                	test   eax,eax
c001ad94:	75 0a                	jne    c001ada0 <FAT::closeDir(void*)+0x48>
c001ad96:	b8 00 00 00 00       	mov    eax,0x0
c001ad9b:	eb 0b                	jmp    c001ada8 <FAT::closeDir(void*)+0x50>
c001ad9d:	8d 76 00             	lea    esi,[esi+0x0]
c001ada0:	b8 01 00 00 00       	mov    eax,0x1
c001ada5:	8d 76 00             	lea    esi,[esi+0x0]
c001ada8:	83 c4 1c             	add    esp,0x1c
c001adab:	c3                   	ret    

c001adac <FAT::seek(void*, unsigned long long)>:
c001adac:	83 ec 2c             	sub    esp,0x2c
c001adaf:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001adb3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001adb7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001adbb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001adbf:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001adc4:	75 0a                	jne    c001add0 <FAT::seek(void*, unsigned long long)+0x24>
c001adc6:	b8 04 00 00 00       	mov    eax,0x4
c001adcb:	eb 37                	jmp    c001ae04 <FAT::seek(void*, unsigned long long)+0x58>
c001adcd:	8d 76 00             	lea    esi,[esi+0x0]
c001add0:	83 ec 04             	sub    esp,0x4
c001add3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001add7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001addb:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001addf:	e8 4c aa fe ff       	call   c0005830 <f_lseek>
c001ade4:	83 c4 10             	add    esp,0x10
c001ade7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001adeb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001adef:	85 c0                	test   eax,eax
c001adf1:	75 09                	jne    c001adfc <FAT::seek(void*, unsigned long long)+0x50>
c001adf3:	b8 00 00 00 00       	mov    eax,0x0
c001adf8:	eb 0a                	jmp    c001ae04 <FAT::seek(void*, unsigned long long)+0x58>
c001adfa:	66 90                	xchg   ax,ax
c001adfc:	b8 01 00 00 00       	mov    eax,0x1
c001ae01:	8d 76 00             	lea    esi,[esi+0x0]
c001ae04:	83 c4 2c             	add    esp,0x2c
c001ae07:	c3                   	ret    

c001ae08 <fatWrapperReadDisk>:
c001ae08:	83 ec 1c             	sub    esp,0x1c
c001ae0b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ae0f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001ae13:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ae17:	89 04 24             	mov    DWORD PTR [esp],eax
c001ae1a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001ae1e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ae22:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001ae27:	8b 04 85 a0 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7760]
c001ae2e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001ae32:	83 ec 0c             	sub    esp,0xc
c001ae35:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ae39:	52                   	push   edx
c001ae3a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ae3e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ae42:	50                   	push   eax
c001ae43:	e8 92 40 ff ff       	call   c000eeda <LogicalDisk::read(unsigned long long, int, void*)>
c001ae48:	83 c4 20             	add    esp,0x20
c001ae4b:	83 c4 1c             	add    esp,0x1c
c001ae4e:	c3                   	ret    
c001ae4f:	90                   	nop

c001ae50 <fatWrapperWriteDisk>:
c001ae50:	83 ec 1c             	sub    esp,0x1c
c001ae53:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ae57:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001ae5b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ae5f:	89 04 24             	mov    DWORD PTR [esp],eax
c001ae62:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001ae66:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ae6a:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001ae6f:	8b 04 85 a0 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7760]
c001ae76:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001ae7a:	83 ec 0c             	sub    esp,0xc
c001ae7d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ae81:	52                   	push   edx
c001ae82:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ae86:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ae8a:	50                   	push   eax
c001ae8b:	e8 b6 40 ff ff       	call   c000ef46 <LogicalDisk::write(unsigned long long, int, void*)>
c001ae90:	83 c4 20             	add    esp,0x20
c001ae93:	83 c4 1c             	add    esp,0x1c
c001ae96:	c3                   	ret    
c001ae97:	90                   	nop

c001ae98 <fatWrapperIoctl>:
c001ae98:	53                   	push   ebx
c001ae99:	83 ec 28             	sub    esp,0x28
c001ae9c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001aea0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001aea4:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001aea8:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001aeac:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c001aeb1:	75 31                	jne    c001aee4 <fatWrapperIoctl+0x4c>
c001aeb3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001aeb7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001aebb:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001aec0:	8b 04 85 a0 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7760]
c001aec7:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001aecd:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001aed3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001aed7:	66 89 02             	mov    WORD PTR [edx],ax
c001aeda:	b8 00 00 00 00       	mov    eax,0x0
c001aedf:	e9 bc 00 00 00       	jmp    c001afa0 <fatWrapperIoctl+0x108>
c001aee4:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c001aee9:	75 6d                	jne    c001af58 <fatWrapperIoctl+0xc0>
c001aeeb:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001aeef:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001aef3:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001aef8:	8b 04 85 a0 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7760]
c001aeff:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001af05:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c001af0b:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c001af11:	89 c8                	mov    eax,ecx
c001af13:	89 da                	mov    edx,ebx
c001af15:	0f a4 c2 0a          	shld   edx,eax,0xa
c001af19:	c1 e0 0a             	shl    eax,0xa
c001af1c:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001af21:	8b 0c 8d a0 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7760]
c001af28:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c001af2e:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c001af34:	89 cb                	mov    ebx,ecx
c001af36:	c1 fb 1f             	sar    ebx,0x1f
c001af39:	53                   	push   ebx
c001af3a:	51                   	push   ecx
c001af3b:	52                   	push   edx
c001af3c:	50                   	push   eax
c001af3d:	e8 5e 65 00 00       	call   c00214a0 <__udivdi3>
c001af42:	83 c4 10             	add    esp,0x10
c001af45:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001af49:	89 01                	mov    DWORD PTR [ecx],eax
c001af4b:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001af4e:	b8 00 00 00 00       	mov    eax,0x0
c001af53:	eb 4b                	jmp    c001afa0 <fatWrapperIoctl+0x108>
c001af55:	8d 76 00             	lea    esi,[esi+0x0]
c001af58:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001af5d:	75 09                	jne    c001af68 <fatWrapperIoctl+0xd0>
c001af5f:	b8 00 00 00 00       	mov    eax,0x0
c001af64:	eb 3a                	jmp    c001afa0 <fatWrapperIoctl+0x108>
c001af66:	66 90                	xchg   ax,ax
c001af68:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c001af6d:	75 19                	jne    c001af88 <fatWrapperIoctl+0xf0>
c001af6f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001af73:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001af77:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001af7b:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001af81:	b8 00 00 00 00       	mov    eax,0x0
c001af86:	eb 18                	jmp    c001afa0 <fatWrapperIoctl+0x108>
c001af88:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c001af8d:	75 09                	jne    c001af98 <fatWrapperIoctl+0x100>
c001af8f:	b8 00 00 00 00       	mov    eax,0x0
c001af94:	eb 0a                	jmp    c001afa0 <fatWrapperIoctl+0x108>
c001af96:	66 90                	xchg   ax,ax
c001af98:	b8 04 00 00 00       	mov    eax,0x4
c001af9d:	8d 76 00             	lea    esi,[esi+0x0]
c001afa0:	83 c4 28             	add    esp,0x28
c001afa3:	5b                   	pop    ebx
c001afa4:	c3                   	ret    
c001afa5:	90                   	nop
c001afa6:	66 90                	xchg   ax,ax

c001afa8 <FAT::FAT()>:
c001afa8:	83 ec 1c             	sub    esp,0x1c
c001afab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001afaf:	83 ec 0c             	sub    esp,0xc
c001afb2:	50                   	push   eax
c001afb3:	e8 90 1a ff ff       	call   c000ca48 <Filesystem::Filesystem()>
c001afb8:	83 c4 10             	add    esp,0x10
c001afbb:	ba 40 4c 02 c0       	mov    edx,0xc0024c40
c001afc0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001afc4:	89 10                	mov    DWORD PTR [eax],edx
c001afc6:	c7 05 20 99 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029920,0x0
c001afd0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001afd8:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c001afdd:	7f 15                	jg     c001aff4 <FAT::FAT()+0x4c>
c001afdf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001afe3:	c7 04 85 40 99 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd66c0],0xffffffff
c001afee:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001aff2:	eb e4                	jmp    c001afd8 <FAT::FAT()+0x30>
c001aff4:	90                   	nop
c001aff5:	83 c4 1c             	add    esp,0x1c
c001aff8:	c3                   	ret    
c001aff9:	90                   	nop
c001affa:	66 90                	xchg   ax,ax

c001affc <FAT::fixFilepath(char*)>:
c001affc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b000:	8a 00                	mov    al,BYTE PTR [eax]
c001b002:	3c 40                	cmp    al,0x40
c001b004:	7e 2e                	jle    c001b034 <FAT::fixFilepath(char*)+0x38>
c001b006:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b00a:	8a 00                	mov    al,BYTE PTR [eax]
c001b00c:	83 e8 41             	sub    eax,0x41
c001b00f:	88 c2                	mov    dl,al
c001b011:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b015:	88 10                	mov    BYTE PTR [eax],dl
c001b017:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b01b:	8a 00                	mov    al,BYTE PTR [eax]
c001b01d:	0f be c0             	movsx  eax,al
c001b020:	8b 04 85 40 99 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd66c0]
c001b027:	83 c0 30             	add    eax,0x30
c001b02a:	88 c2                	mov    dl,al
c001b02c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b030:	88 10                	mov    BYTE PTR [eax],dl
c001b032:	66 90                	xchg   ax,ax
c001b034:	90                   	nop
c001b035:	c3                   	ret    
c001b036:	66 90                	xchg   ax,ax

c001b038 <FAT::open(char const*, void**, FileOpenMode)>:
c001b038:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001b03e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001b046:	74 0c                	je     c001b054 <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c001b048:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001b050:	75 0e                	jne    c001b060 <FAT::open(char const*, void**, FileOpenMode)+0x28>
c001b052:	66 90                	xchg   ax,ax
c001b054:	b8 04 00 00 00       	mov    eax,0x4
c001b059:	e9 06 01 00 00       	jmp    c001b164 <FAT::open(char const*, void**, FileOpenMode)+0x12c>
c001b05e:	66 90                	xchg   ax,ax
c001b060:	83 ec 08             	sub    esp,0x8
c001b063:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001b06a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b06e:	50                   	push   eax
c001b06f:	e8 f0 54 fe ff       	call   c0000564 <strcpy>
c001b074:	83 c4 10             	add    esp,0x10
c001b077:	83 ec 08             	sub    esp,0x8
c001b07a:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b07e:	50                   	push   eax
c001b07f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001b086:	e8 71 ff ff ff       	call   c001affc <FAT::fixFilepath(char*)>
c001b08b:	83 c4 10             	add    esp,0x10
c001b08e:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c001b096:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001b09d:	83 e0 01             	and    eax,0x1
c001b0a0:	74 0a                	je     c001b0ac <FAT::open(char const*, void**, FileOpenMode)+0x74>
c001b0a2:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c001b0aa:	66 90                	xchg   ax,ax
c001b0ac:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001b0b3:	83 e0 04             	and    eax,0x4
c001b0b6:	74 10                	je     c001b0c8 <FAT::open(char const*, void**, FileOpenMode)+0x90>
c001b0b8:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c001b0c0:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001b0c8:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001b0cf:	83 e0 02             	and    eax,0x2
c001b0d2:	74 08                	je     c001b0dc <FAT::open(char const*, void**, FileOpenMode)+0xa4>
c001b0d4:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001b0dc:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001b0e3:	83 e0 08             	and    eax,0x8
c001b0e6:	74 08                	je     c001b0f0 <FAT::open(char const*, void**, FileOpenMode)+0xb8>
c001b0e8:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c001b0f0:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001b0f7:	83 e0 10             	and    eax,0x10
c001b0fa:	74 08                	je     c001b104 <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c001b0fc:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c001b104:	83 ec 0c             	sub    esp,0xc
c001b107:	68 50 02 00 00       	push   0x250
c001b10c:	e8 86 e6 fe ff       	call   c0009797 <malloc>
c001b111:	83 c4 10             	add    esp,0x10
c001b114:	89 c2                	mov    edx,eax
c001b116:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001b11d:	89 10                	mov    DWORD PTR [eax],edx
c001b11f:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c001b127:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001b12e:	8b 00                	mov    eax,DWORD PTR [eax]
c001b130:	83 ec 04             	sub    esp,0x4
c001b133:	52                   	push   edx
c001b134:	8d 54 24 10          	lea    edx,[esp+0x10]
c001b138:	52                   	push   edx
c001b139:	50                   	push   eax
c001b13a:	e8 70 9b fe ff       	call   c0004caf <f_open>
c001b13f:	83 c4 10             	add    esp,0x10
c001b142:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c001b149:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c001b151:	74 09                	je     c001b15c <FAT::open(char const*, void**, FileOpenMode)+0x124>
c001b153:	b8 01 00 00 00       	mov    eax,0x1
c001b158:	eb 0a                	jmp    c001b164 <FAT::open(char const*, void**, FileOpenMode)+0x12c>
c001b15a:	66 90                	xchg   ax,ax
c001b15c:	b8 00 00 00 00       	mov    eax,0x0
c001b161:	8d 76 00             	lea    esi,[esi+0x0]
c001b164:	81 c4 1c 01 00 00    	add    esp,0x11c
c001b16a:	c3                   	ret    
c001b16b:	90                   	nop

c001b16c <FAT::openDir(char const*, void**)>:
c001b16c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001b172:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001b17a:	74 0c                	je     c001b188 <FAT::openDir(char const*, void**)+0x1c>
c001b17c:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001b184:	75 0e                	jne    c001b194 <FAT::openDir(char const*, void**)+0x28>
c001b186:	66 90                	xchg   ax,ax
c001b188:	b8 04 00 00 00       	mov    eax,0x4
c001b18d:	e9 82 00 00 00       	jmp    c001b214 <FAT::openDir(char const*, void**)+0xa8>
c001b192:	66 90                	xchg   ax,ax
c001b194:	83 ec 08             	sub    esp,0x8
c001b197:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001b19e:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b1a2:	50                   	push   eax
c001b1a3:	e8 bc 53 fe ff       	call   c0000564 <strcpy>
c001b1a8:	83 c4 10             	add    esp,0x10
c001b1ab:	83 ec 08             	sub    esp,0x8
c001b1ae:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b1b2:	50                   	push   eax
c001b1b3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001b1ba:	e8 3d fe ff ff       	call   c001affc <FAT::fixFilepath(char*)>
c001b1bf:	83 c4 10             	add    esp,0x10
c001b1c2:	83 ec 0c             	sub    esp,0xc
c001b1c5:	6a 4c                	push   0x4c
c001b1c7:	e8 cb e5 fe ff       	call   c0009797 <malloc>
c001b1cc:	83 c4 10             	add    esp,0x10
c001b1cf:	89 c2                	mov    edx,eax
c001b1d1:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001b1d8:	89 10                	mov    DWORD PTR [eax],edx
c001b1da:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001b1e1:	8b 00                	mov    eax,DWORD PTR [eax]
c001b1e3:	83 ec 08             	sub    esp,0x8
c001b1e6:	8d 54 24 14          	lea    edx,[esp+0x14]
c001b1ea:	52                   	push   edx
c001b1eb:	50                   	push   eax
c001b1ec:	e8 f6 aa fe ff       	call   c0005ce7 <f_opendir>
c001b1f1:	83 c4 10             	add    esp,0x10
c001b1f4:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001b1fb:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c001b203:	74 07                	je     c001b20c <FAT::openDir(char const*, void**)+0xa0>
c001b205:	b8 01 00 00 00       	mov    eax,0x1
c001b20a:	eb 08                	jmp    c001b214 <FAT::openDir(char const*, void**)+0xa8>
c001b20c:	b8 00 00 00 00       	mov    eax,0x0
c001b211:	8d 76 00             	lea    esi,[esi+0x0]
c001b214:	81 c4 1c 01 00 00    	add    esp,0x11c
c001b21a:	c3                   	ret    
c001b21b:	90                   	nop

c001b21c <FAT::stat(char const*, unsigned long long*, bool*)>:
c001b21c:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001b222:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c001b22a:	75 0c                	jne    c001b238 <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c001b22c:	b8 04 00 00 00       	mov    eax,0x4
c001b231:	e9 d2 00 00 00       	jmp    c001b308 <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001b236:	66 90                	xchg   ax,ax
c001b238:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c001b240:	75 0a                	jne    c001b24c <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c001b242:	b8 04 00 00 00       	mov    eax,0x4
c001b247:	e9 bc 00 00 00       	jmp    c001b308 <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001b24c:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c001b254:	75 0a                	jne    c001b260 <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c001b256:	b8 04 00 00 00       	mov    eax,0x4
c001b25b:	e9 a8 00 00 00       	jmp    c001b308 <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001b260:	83 ec 08             	sub    esp,0x8
c001b263:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001b26a:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001b271:	50                   	push   eax
c001b272:	e8 ed 52 fe ff       	call   c0000564 <strcpy>
c001b277:	83 c4 10             	add    esp,0x10
c001b27a:	83 ec 08             	sub    esp,0x8
c001b27d:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001b284:	50                   	push   eax
c001b285:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001b28c:	e8 6b fd ff ff       	call   c001affc <FAT::fixFilepath(char*)>
c001b291:	83 c4 10             	add    esp,0x10
c001b294:	83 ec 08             	sub    esp,0x8
c001b297:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b29b:	50                   	push   eax
c001b29c:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001b2a3:	50                   	push   eax
c001b2a4:	e8 fd ab fe ff       	call   c0005ea6 <f_stat>
c001b2a9:	83 c4 10             	add    esp,0x10
c001b2ac:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001b2b3:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001b2ba:	85 c0                	test   eax,eax
c001b2bc:	74 0a                	je     c001b2c8 <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c001b2be:	83 f8 04             	cmp    eax,0x4
c001b2c1:	74 35                	je     c001b2f8 <FAT::stat(char const*, unsigned long long*, bool*)+0xdc>
c001b2c3:	eb 3b                	jmp    c001b300 <FAT::stat(char const*, unsigned long long*, bool*)+0xe4>
c001b2c5:	8d 76 00             	lea    esi,[esi+0x0]
c001b2c8:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001b2cc:	0f b6 c0             	movzx  eax,al
c001b2cf:	83 e0 10             	and    eax,0x10
c001b2d2:	0f 95 c2             	setne  dl
c001b2d5:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c001b2dc:	88 10                	mov    BYTE PTR [eax],dl
c001b2de:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001b2e1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001b2e5:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c001b2ec:	89 01                	mov    DWORD PTR [ecx],eax
c001b2ee:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001b2f1:	b8 00 00 00 00       	mov    eax,0x0
c001b2f6:	eb 10                	jmp    c001b308 <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001b2f8:	b8 02 00 00 00       	mov    eax,0x2
c001b2fd:	eb 09                	jmp    c001b308 <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001b2ff:	90                   	nop
c001b300:	b8 01 00 00 00       	mov    eax,0x1
c001b305:	8d 76 00             	lea    esi,[esi+0x0]
c001b308:	81 c4 2c 02 00 00    	add    esp,0x22c
c001b30e:	c3                   	ret    
c001b30f:	90                   	nop

c001b310 <FAT::unlink(char const*)>:
c001b310:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001b316:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001b31e:	75 08                	jne    c001b328 <FAT::unlink(char const*)+0x18>
c001b320:	b8 04 00 00 00       	mov    eax,0x4
c001b325:	eb 61                	jmp    c001b388 <FAT::unlink(char const*)+0x78>
c001b327:	90                   	nop
c001b328:	83 ec 08             	sub    esp,0x8
c001b32b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001b332:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b336:	50                   	push   eax
c001b337:	e8 28 52 fe ff       	call   c0000564 <strcpy>
c001b33c:	83 c4 10             	add    esp,0x10
c001b33f:	83 ec 08             	sub    esp,0x8
c001b342:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b346:	50                   	push   eax
c001b347:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001b34e:	e8 a9 fc ff ff       	call   c001affc <FAT::fixFilepath(char*)>
c001b353:	83 c4 10             	add    esp,0x10
c001b356:	83 ec 0c             	sub    esp,0xc
c001b359:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b35d:	50                   	push   eax
c001b35e:	e8 95 ae fe ff       	call   c00061f8 <f_unlink>
c001b363:	83 c4 10             	add    esp,0x10
c001b366:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001b36d:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001b374:	85 c0                	test   eax,eax
c001b376:	75 08                	jne    c001b380 <FAT::unlink(char const*)+0x70>
c001b378:	b8 00 00 00 00       	mov    eax,0x0
c001b37d:	eb 09                	jmp    c001b388 <FAT::unlink(char const*)+0x78>
c001b37f:	90                   	nop
c001b380:	b8 01 00 00 00       	mov    eax,0x1
c001b385:	8d 76 00             	lea    esi,[esi+0x0]
c001b388:	81 c4 1c 01 00 00    	add    esp,0x11c
c001b38e:	c3                   	ret    
c001b38f:	90                   	nop

c001b390 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c001b390:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001b396:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c001b39d:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c001b3a4:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001b3a8:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001b3ac:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001b3b4:	75 0a                	jne    c001b3c0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c001b3b6:	b8 04 00 00 00       	mov    eax,0x4
c001b3bb:	e9 30 01 00 00       	jmp    c001b4f0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x160>
c001b3c0:	83 ec 08             	sub    esp,0x8
c001b3c3:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001b3ca:	8d 44 24 24          	lea    eax,[esp+0x24]
c001b3ce:	50                   	push   eax
c001b3cf:	e8 90 51 fe ff       	call   c0000564 <strcpy>
c001b3d4:	83 c4 10             	add    esp,0x10
c001b3d7:	83 ec 08             	sub    esp,0x8
c001b3da:	8d 44 24 20          	lea    eax,[esp+0x20]
c001b3de:	50                   	push   eax
c001b3df:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001b3e6:	e8 11 fc ff ff       	call   c001affc <FAT::fixFilepath(char*)>
c001b3eb:	83 c4 10             	add    esp,0x10
c001b3ee:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001b3f6:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c001b3fe:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b403:	83 e0 01             	and    eax,0x1
c001b406:	74 08                	je     c001b410 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c001b408:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c001b410:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b415:	83 e0 02             	and    eax,0x2
c001b418:	74 0a                	je     c001b424 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x94>
c001b41a:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c001b422:	66 90                	xchg   ax,ax
c001b424:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b429:	83 e0 04             	and    eax,0x4
c001b42c:	74 0a                	je     c001b438 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa8>
c001b42e:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c001b436:	66 90                	xchg   ax,ax
c001b438:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b43d:	83 e0 08             	and    eax,0x8
c001b440:	74 0a                	je     c001b44c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xbc>
c001b442:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c001b44a:	66 90                	xchg   ax,ax
c001b44c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b451:	83 e0 01             	and    eax,0x1
c001b454:	74 0a                	je     c001b460 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xd0>
c001b456:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c001b45e:	66 90                	xchg   ax,ax
c001b460:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b465:	83 e0 02             	and    eax,0x2
c001b468:	74 0a                	je     c001b474 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe4>
c001b46a:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c001b472:	66 90                	xchg   ax,ax
c001b474:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b479:	83 e0 04             	and    eax,0x4
c001b47c:	74 0a                	je     c001b488 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xf8>
c001b47e:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c001b486:	66 90                	xchg   ax,ax
c001b488:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b48d:	83 e0 08             	and    eax,0x8
c001b490:	74 0a                	je     c001b49c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x10c>
c001b492:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c001b49a:	66 90                	xchg   ax,ax
c001b49c:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001b4a3:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c001b4aa:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c001b4b2:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c001b4ba:	83 ec 04             	sub    esp,0x4
c001b4bd:	52                   	push   edx
c001b4be:	50                   	push   eax
c001b4bf:	8d 44 24 24          	lea    eax,[esp+0x24]
c001b4c3:	50                   	push   eax
c001b4c4:	e8 d1 b3 fe ff       	call   c000689a <f_chmod>
c001b4c9:	83 c4 10             	add    esp,0x10
c001b4cc:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c001b4d3:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c001b4da:	85 c0                	test   eax,eax
c001b4dc:	75 0a                	jne    c001b4e8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x158>
c001b4de:	b8 00 00 00 00       	mov    eax,0x0
c001b4e3:	eb 0b                	jmp    c001b4f0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x160>
c001b4e5:	8d 76 00             	lea    esi,[esi+0x0]
c001b4e8:	b8 01 00 00 00       	mov    eax,0x1
c001b4ed:	8d 76 00             	lea    esi,[esi+0x0]
c001b4f0:	81 c4 2c 01 00 00    	add    esp,0x12c
c001b4f6:	c3                   	ret    
c001b4f7:	90                   	nop

c001b4f8 <FAT::rename(char const*, char const*)>:
c001b4f8:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001b4fe:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c001b506:	74 0c                	je     c001b514 <FAT::rename(char const*, char const*)+0x1c>
c001b508:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c001b510:	75 0e                	jne    c001b520 <FAT::rename(char const*, char const*)+0x28>
c001b512:	66 90                	xchg   ax,ax
c001b514:	b8 04 00 00 00       	mov    eax,0x4
c001b519:	e9 9e 00 00 00       	jmp    c001b5bc <FAT::rename(char const*, char const*)+0xc4>
c001b51e:	66 90                	xchg   ax,ax
c001b520:	83 ec 08             	sub    esp,0x8
c001b523:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001b52a:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001b531:	50                   	push   eax
c001b532:	e8 2d 50 fe ff       	call   c0000564 <strcpy>
c001b537:	83 c4 10             	add    esp,0x10
c001b53a:	83 ec 08             	sub    esp,0x8
c001b53d:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c001b544:	50                   	push   eax
c001b545:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001b54c:	e8 ab fa ff ff       	call   c001affc <FAT::fixFilepath(char*)>
c001b551:	83 c4 10             	add    esp,0x10
c001b554:	83 ec 08             	sub    esp,0x8
c001b557:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c001b55e:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b562:	50                   	push   eax
c001b563:	e8 fc 4f fe ff       	call   c0000564 <strcpy>
c001b568:	83 c4 10             	add    esp,0x10
c001b56b:	83 ec 08             	sub    esp,0x8
c001b56e:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b572:	50                   	push   eax
c001b573:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001b57a:	e8 7d fa ff ff       	call   c001affc <FAT::fixFilepath(char*)>
c001b57f:	83 c4 10             	add    esp,0x10
c001b582:	83 ec 08             	sub    esp,0x8
c001b585:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b589:	50                   	push   eax
c001b58a:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001b591:	50                   	push   eax
c001b592:	e8 10 b0 fe ff       	call   c00065a7 <f_rename>
c001b597:	83 c4 10             	add    esp,0x10
c001b59a:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c001b5a1:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c001b5a8:	85 c0                	test   eax,eax
c001b5aa:	75 08                	jne    c001b5b4 <FAT::rename(char const*, char const*)+0xbc>
c001b5ac:	b8 00 00 00 00       	mov    eax,0x0
c001b5b1:	eb 09                	jmp    c001b5bc <FAT::rename(char const*, char const*)+0xc4>
c001b5b3:	90                   	nop
c001b5b4:	b8 01 00 00 00       	mov    eax,0x1
c001b5b9:	8d 76 00             	lea    esi,[esi+0x0]
c001b5bc:	81 c4 1c 02 00 00    	add    esp,0x21c
c001b5c2:	c3                   	ret    
c001b5c3:	90                   	nop

c001b5c4 <FAT::mkdir(char const*)>:
c001b5c4:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001b5ca:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001b5d2:	75 08                	jne    c001b5dc <FAT::mkdir(char const*)+0x18>
c001b5d4:	b8 04 00 00 00       	mov    eax,0x4
c001b5d9:	eb 61                	jmp    c001b63c <FAT::mkdir(char const*)+0x78>
c001b5db:	90                   	nop
c001b5dc:	83 ec 08             	sub    esp,0x8
c001b5df:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001b5e6:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b5ea:	50                   	push   eax
c001b5eb:	e8 74 4f fe ff       	call   c0000564 <strcpy>
c001b5f0:	83 c4 10             	add    esp,0x10
c001b5f3:	83 ec 08             	sub    esp,0x8
c001b5f6:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b5fa:	50                   	push   eax
c001b5fb:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001b602:	e8 f5 f9 ff ff       	call   c001affc <FAT::fixFilepath(char*)>
c001b607:	83 c4 10             	add    esp,0x10
c001b60a:	83 ec 0c             	sub    esp,0xc
c001b60d:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b611:	50                   	push   eax
c001b612:	e8 64 ad fe ff       	call   c000637b <f_mkdir>
c001b617:	83 c4 10             	add    esp,0x10
c001b61a:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001b621:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001b628:	85 c0                	test   eax,eax
c001b62a:	75 08                	jne    c001b634 <FAT::mkdir(char const*)+0x70>
c001b62c:	b8 00 00 00 00       	mov    eax,0x0
c001b631:	eb 09                	jmp    c001b63c <FAT::mkdir(char const*)+0x78>
c001b633:	90                   	nop
c001b634:	b8 01 00 00 00       	mov    eax,0x1
c001b639:	8d 76 00             	lea    esi,[esi+0x0]
c001b63c:	81 c4 1c 01 00 00    	add    esp,0x11c
c001b642:	c3                   	ret    
c001b643:	90                   	nop

c001b644 <FAT::exists(char const*)>:
c001b644:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001b64a:	83 ec 08             	sub    esp,0x8
c001b64d:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001b654:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001b658:	50                   	push   eax
c001b659:	e8 06 4f fe ff       	call   c0000564 <strcpy>
c001b65e:	83 c4 10             	add    esp,0x10
c001b661:	83 ec 08             	sub    esp,0x8
c001b664:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b668:	50                   	push   eax
c001b669:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001b670:	e8 87 f9 ff ff       	call   c001affc <FAT::fixFilepath(char*)>
c001b675:	83 c4 10             	add    esp,0x10
c001b678:	83 ec 08             	sub    esp,0x8
c001b67b:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c001b682:	50                   	push   eax
c001b683:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001b687:	50                   	push   eax
c001b688:	e8 19 a8 fe ff       	call   c0005ea6 <f_stat>
c001b68d:	83 c4 10             	add    esp,0x10
c001b690:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001b697:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001b69e:	85 c0                	test   eax,eax
c001b6a0:	75 06                	jne    c001b6a8 <FAT::exists(char const*)+0x64>
c001b6a2:	b0 01                	mov    al,0x1
c001b6a4:	eb 06                	jmp    c001b6ac <FAT::exists(char const*)+0x68>
c001b6a6:	66 90                	xchg   ax,ax
c001b6a8:	b0 00                	mov    al,0x0
c001b6aa:	66 90                	xchg   ax,ax
c001b6ac:	81 c4 2c 02 00 00    	add    esp,0x22c
c001b6b2:	c3                   	ret    
c001b6b3:	90                   	nop

c001b6b4 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c001b6b4:	b8 08 00 00 00       	mov    eax,0x8
c001b6b9:	c3                   	ret    

c001b6ba <ISO9660::seek(void*, unsigned long long)>:
c001b6ba:	53                   	push   ebx
c001b6bb:	b8 04 00 00 00       	mov    eax,0x4
c001b6c0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b6c4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b6c8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001b6cc:	85 d2                	test   edx,edx
c001b6ce:	74 17                	je     c001b6e7 <ISO9660::seek(void*, unsigned long long)+0x2d>
c001b6d0:	89 c8                	mov    eax,ecx
c001b6d2:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c001b6d5:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c001b6d8:	b8 01 00 00 00       	mov    eax,0x1
c001b6dd:	73 08                	jae    c001b6e7 <ISO9660::seek(void*, unsigned long long)+0x2d>
c001b6df:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c001b6e2:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c001b6e5:	31 c0                	xor    eax,eax
c001b6e7:	5b                   	pop    ebx
c001b6e8:	c3                   	ret    
c001b6e9:	90                   	nop

c001b6ea <ISO9660::tell(void*, unsigned long long*)>:
c001b6ea:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b6ee:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b6f2:	85 d2                	test   edx,edx
c001b6f4:	74 12                	je     c001b708 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c001b6f6:	85 c0                	test   eax,eax
c001b6f8:	74 0e                	je     c001b708 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c001b6fa:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001b6fd:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c001b700:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001b703:	89 10                	mov    DWORD PTR [eax],edx
c001b705:	31 c0                	xor    eax,eax
c001b707:	c3                   	ret    
c001b708:	b8 04 00 00 00       	mov    eax,0x4
c001b70d:	c3                   	ret    

c001b70e <ISO9660::getName()>:
c001b70e:	b8 a0 4c 02 c0       	mov    eax,0xc0024ca0
c001b713:	c3                   	ret    

c001b714 <ISO9660::stat(void*, unsigned long long*)>:
c001b714:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b718:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b71c:	85 d2                	test   edx,edx
c001b71e:	74 12                	je     c001b732 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c001b720:	85 c0                	test   eax,eax
c001b722:	74 0e                	je     c001b732 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c001b724:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001b727:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c001b72a:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001b72d:	89 10                	mov    DWORD PTR [eax],edx
c001b72f:	31 c0                	xor    eax,eax
c001b731:	c3                   	ret    
c001b732:	b8 04 00 00 00       	mov    eax,0x4
c001b737:	c3                   	ret    

c001b738 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c001b738:	b8 01 00 00 00       	mov    eax,0x1
c001b73d:	c3                   	ret    

c001b73e <ISO9660::unlink(char const*)>:
c001b73e:	b8 01 00 00 00       	mov    eax,0x1
c001b743:	c3                   	ret    

c001b744 <ISO9660::write(void*, unsigned long, void*, int*)>:
c001b744:	b8 01 00 00 00       	mov    eax,0x1
c001b749:	c3                   	ret    

c001b74a <ISO9660::rename(char const*, char const*)>:
c001b74a:	b8 01 00 00 00       	mov    eax,0x1
c001b74f:	c3                   	ret    

c001b750 <ISO9660::mkdir(char const*)>:
c001b750:	b8 01 00 00 00       	mov    eax,0x1
c001b755:	c3                   	ret    

c001b756 <ISO9660::close(void*)>:
c001b756:	83 ec 0c             	sub    esp,0xc
c001b759:	b8 04 00 00 00       	mov    eax,0x4
c001b75e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b762:	85 d2                	test   edx,edx
c001b764:	74 0e                	je     c001b774 <ISO9660::close(void*)+0x1e>
c001b766:	83 ec 0c             	sub    esp,0xc
c001b769:	52                   	push   edx
c001b76a:	e8 38 e0 fe ff       	call   c00097a7 <free>
c001b76f:	83 c4 10             	add    esp,0x10
c001b772:	31 c0                	xor    eax,eax
c001b774:	83 c4 0c             	add    esp,0xc
c001b777:	c3                   	ret    

c001b778 <ISO9660::closeDir(void*)>:
c001b778:	83 ec 0c             	sub    esp,0xc
c001b77b:	b8 04 00 00 00       	mov    eax,0x4
c001b780:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b784:	85 d2                	test   edx,edx
c001b786:	74 0e                	je     c001b796 <ISO9660::closeDir(void*)+0x1e>
c001b788:	83 ec 0c             	sub    esp,0xc
c001b78b:	52                   	push   edx
c001b78c:	e8 16 e0 fe ff       	call   c00097a7 <free>
c001b791:	83 c4 10             	add    esp,0x10
c001b794:	31 c0                	xor    eax,eax
c001b796:	83 c4 0c             	add    esp,0xc
c001b799:	c3                   	ret    

c001b79a <ISO9660::~ISO9660()>:
c001b79a:	83 ec 0c             	sub    esp,0xc
c001b79d:	ba c4 4c 02 c0       	mov    edx,0xc0024cc4
c001b7a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b7a6:	89 10                	mov    DWORD PTR [eax],edx
c001b7a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b7ac:	83 ec 0c             	sub    esp,0xc
c001b7af:	50                   	push   eax
c001b7b0:	e8 b7 12 ff ff       	call   c000ca6c <Filesystem::~Filesystem()>
c001b7b5:	83 c4 10             	add    esp,0x10
c001b7b8:	90                   	nop
c001b7b9:	83 c4 0c             	add    esp,0xc
c001b7bc:	c3                   	ret    
c001b7bd:	90                   	nop

c001b7be <ISO9660::~ISO9660()>:
c001b7be:	83 ec 0c             	sub    esp,0xc
c001b7c1:	83 ec 0c             	sub    esp,0xc
c001b7c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b7c8:	e8 cd ff ff ff       	call   c001b79a <ISO9660::~ISO9660()>
c001b7cd:	83 c4 10             	add    esp,0x10
c001b7d0:	83 ec 08             	sub    esp,0x8
c001b7d3:	6a 08                	push   0x8
c001b7d5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b7d9:	e8 72 0e ff ff       	call   c000c650 <operator delete(void*, unsigned long)>
c001b7de:	83 c4 10             	add    esp,0x10
c001b7e1:	83 c4 0c             	add    esp,0xc
c001b7e4:	c3                   	ret    

c001b7e5 <__memmem(unsigned char*, int, unsigned char*, int)>:
c001b7e5:	55                   	push   ebp
c001b7e6:	31 c9                	xor    ecx,ecx
c001b7e8:	57                   	push   edi
c001b7e9:	56                   	push   esi
c001b7ea:	53                   	push   ebx
c001b7eb:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001b7ef:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001b7f3:	89 eb                	mov    ebx,ebp
c001b7f5:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c001b7f9:	39 ce                	cmp    esi,ecx
c001b7fb:	7e 17                	jle    c001b814 <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c001b7fd:	31 d2                	xor    edx,edx
c001b7ff:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c001b803:	7d 13                	jge    c001b818 <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c001b805:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001b809:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001b80c:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c001b80f:	75 0d                	jne    c001b81e <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c001b811:	42                   	inc    edx
c001b812:	eb eb                	jmp    c001b7ff <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c001b814:	31 c0                	xor    eax,eax
c001b816:	eb 0a                	jmp    c001b822 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c001b818:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c001b81c:	eb 04                	jmp    c001b822 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c001b81e:	41                   	inc    ecx
c001b81f:	43                   	inc    ebx
c001b820:	eb d7                	jmp    c001b7f9 <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c001b822:	5b                   	pop    ebx
c001b823:	5e                   	pop    esi
c001b824:	5f                   	pop    edi
c001b825:	5d                   	pop    ebp
c001b826:	c3                   	ret    

c001b827 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001b827:	57                   	push   edi
c001b828:	56                   	push   esi
c001b829:	53                   	push   ebx
c001b82a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b82e:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001b832:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001b836:	39 35 20 9a 02 c0    	cmp    DWORD PTR ds:0xc0029a20,esi
c001b83c:	75 08                	jne    c001b846 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c001b83e:	38 1d 60 5d 02 c0    	cmp    BYTE PTR ds:0xc0025d60,bl
c001b844:	74 4a                	je     c001b890 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x69>
c001b846:	83 ec 0c             	sub    esp,0xc
c001b849:	31 d2                	xor    edx,edx
c001b84b:	68 40 9a 02 c0       	push   0xc0029a40
c001b850:	0f be c3             	movsx  eax,bl
c001b853:	6a 01                	push   0x1
c001b855:	52                   	push   edx
c001b856:	56                   	push   esi
c001b857:	ff 34 85 9c 87 02 c0 	push   DWORD PTR [eax*4-0x3ffd7864]
c001b85e:	e8 77 36 ff ff       	call   c000eeda <LogicalDisk::read(unsigned long long, int, void*)>
c001b863:	83 c4 20             	add    esp,0x20
c001b866:	85 c0                	test   eax,eax
c001b868:	75 0e                	jne    c001b878 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x51>
c001b86a:	89 35 20 9a 02 c0    	mov    DWORD PTR ds:0xc0029a20,esi
c001b870:	88 1d 60 5d 02 c0    	mov    BYTE PTR ds:0xc0025d60,bl
c001b876:	eb 18                	jmp    c001b890 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x69>
c001b878:	50                   	push   eax
c001b879:	68 00 08 00 00       	push   0x800
c001b87e:	6a 00                	push   0x0
c001b880:	57                   	push   edi
c001b881:	e8 22 4c fe ff       	call   c00004a8 <memset>
c001b886:	83 c4 10             	add    esp,0x10
c001b889:	b8 01 00 00 00       	mov    eax,0x1
c001b88e:	eb 0e                	jmp    c001b89e <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x77>
c001b890:	be 40 9a 02 c0       	mov    esi,0xc0029a40
c001b895:	b9 00 08 00 00       	mov    ecx,0x800
c001b89a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b89c:	31 c0                	xor    eax,eax
c001b89e:	5b                   	pop    ebx
c001b89f:	5e                   	pop    esi
c001b8a0:	5f                   	pop    edi
c001b8a1:	c3                   	ret    

c001b8a2 <ISO9660::tryMount(LogicalDisk*, int)>:
c001b8a2:	81 ec 10 08 00 00    	sub    esp,0x810
c001b8a8:	c7 05 20 9a 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc0029a20,0xdeadbeef
c001b8b2:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c001b8b9:	83 c0 41             	add    eax,0x41
c001b8bc:	0f be c0             	movsx  eax,al
c001b8bf:	50                   	push   eax
c001b8c0:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b8c4:	50                   	push   eax
c001b8c5:	6a 10                	push   0x10
c001b8c7:	e8 5b ff ff ff       	call   c001b827 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001b8cc:	83 c4 10             	add    esp,0x10
c001b8cf:	31 d2                	xor    edx,edx
c001b8d1:	85 c0                	test   eax,eax
c001b8d3:	75 24                	jne    c001b8f9 <ISO9660::tryMount(LogicalDisk*, int)+0x57>
c001b8d5:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001b8da:	75 1d                	jne    c001b8f9 <ISO9660::tryMount(LogicalDisk*, int)+0x57>
c001b8dc:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001b8e1:	75 16                	jne    c001b8f9 <ISO9660::tryMount(LogicalDisk*, int)+0x57>
c001b8e3:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001b8e8:	75 0f                	jne    c001b8f9 <ISO9660::tryMount(LogicalDisk*, int)+0x57>
c001b8ea:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001b8ef:	75 08                	jne    c001b8f9 <ISO9660::tryMount(LogicalDisk*, int)+0x57>
c001b8f1:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001b8f6:	0f 94 c2             	sete   dl
c001b8f9:	88 d0                	mov    al,dl
c001b8fb:	81 c4 0c 08 00 00    	add    esp,0x80c
c001b901:	c3                   	ret    

c001b902 <ISO9660::read(void*, unsigned long, void*, int*)>:
c001b902:	55                   	push   ebp
c001b903:	57                   	push   edi
c001b904:	56                   	push   esi
c001b905:	53                   	push   ebx
c001b906:	81 ec 2c 08 00 00    	sub    esp,0x82c
c001b90c:	8b ac 24 44 08 00 00 	mov    ebp,DWORD PTR [esp+0x844]
c001b913:	85 ed                	test   ebp,ebp
c001b915:	0f 84 da 01 00 00    	je     c001baf5 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c001b91b:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c001b923:	0f 84 cc 01 00 00    	je     c001baf5 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c001b929:	b8 01 00 00 00       	mov    eax,0x1
c001b92e:	80 7d 18 00          	cmp    BYTE PTR [ebp+0x18],0x0
c001b932:	0f 85 c2 01 00 00    	jne    c001bafa <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c001b938:	31 d2                	xor    edx,edx
c001b93a:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001b941:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c001b944:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c001b947:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c001b94a:	89 04 24             	mov    DWORD PTR [esp],eax
c001b94d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001b951:	01 c8                	add    eax,ecx
c001b953:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c001b956:	11 da                	adc    edx,ebx
c001b958:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c001b95c:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001b960:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001b964:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001b968:	19 d7                	sbb    edi,edx
c001b96a:	72 11                	jb     c001b97d <ISO9660::read(void*, unsigned long, void*, int*)+0x7b>
c001b96c:	8b 34 24             	mov    esi,DWORD PTR [esp]
c001b96f:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c001b973:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b977:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001b97b:	eb 0c                	jmp    c001b989 <ISO9660::read(void*, unsigned long, void*, int*)+0x87>
c001b97d:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c001b981:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001b985:	29 ce                	sub    esi,ecx
c001b987:	19 df                	sbb    edi,ebx
c001b989:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001b98c:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c001b98f:	0f a4 c2 0b          	shld   edx,eax,0xb
c001b993:	c1 e0 0b             	shl    eax,0xb
c001b996:	01 c8                	add    eax,ecx
c001b998:	11 da                	adc    edx,ebx
c001b99a:	89 04 24             	mov    DWORD PTR [esp],eax
c001b99d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001b9a1:	51                   	push   ecx
c001b9a2:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001b9a6:	50                   	push   eax
c001b9a7:	8d 5c 24 28          	lea    ebx,[esp+0x28]
c001b9ab:	53                   	push   ebx
c001b9ac:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b9b0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b9b4:	0f ac d0 0b          	shrd   eax,edx,0xb
c001b9b8:	50                   	push   eax
c001b9b9:	e8 69 fe ff ff       	call   c001b827 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001b9be:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c001b9c1:	b8 00 08 00 00       	mov    eax,0x800
c001b9c6:	81 e2 ff 07 00 00    	and    edx,0x7ff
c001b9cc:	89 74 24 2c          	mov    DWORD PTR [esp+0x2c],esi
c001b9d0:	29 d0                	sub    eax,edx
c001b9d2:	83 c4 10             	add    esp,0x10
c001b9d5:	89 f9                	mov    ecx,edi
c001b9d7:	39 c6                	cmp    esi,eax
c001b9d9:	83 d9 00             	sbb    ecx,0x0
c001b9dc:	7d 1b                	jge    c001b9f9 <ISO9660::read(void*, unsigned long, void*, int*)+0xf7>
c001b9de:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001b9e3:	75 12                	jne    c001b9f7 <ISO9660::read(void*, unsigned long, void*, int*)+0xf5>
c001b9e5:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001b9ec:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b9f2:	e9 fa 00 00 00       	jmp    c001baf1 <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c001b9f7:	89 f0                	mov    eax,esi
c001b9f9:	01 d3                	add    ebx,edx
c001b9fb:	31 d2                	xor    edx,edx
c001b9fd:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c001ba01:	39 c2                	cmp    edx,eax
c001ba03:	7d 14                	jge    c001ba19 <ISO9660::read(void*, unsigned long, void*, int*)+0x117>
c001ba05:	8b 9c 24 4c 08 00 00 	mov    ebx,DWORD PTR [esp+0x84c]
c001ba0c:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001ba10:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c001ba13:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c001ba16:	42                   	inc    edx
c001ba17:	eb e8                	jmp    c001ba01 <ISO9660::read(void*, unsigned long, void*, int*)+0xff>
c001ba19:	89 c2                	mov    edx,eax
c001ba1b:	85 c0                	test   eax,eax
c001ba1d:	79 02                	jns    c001ba21 <ISO9660::read(void*, unsigned long, void*, int*)+0x11f>
c001ba1f:	31 d2                	xor    edx,edx
c001ba21:	01 c2                	add    edx,eax
c001ba23:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c001ba26:	03 94 24 4c 08 00 00 	add    edx,DWORD PTR [esp+0x84c]
c001ba2d:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c001ba31:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001ba35:	99                   	cdq    
c001ba36:	01 c1                	add    ecx,eax
c001ba38:	11 d3                	adc    ebx,edx
c001ba3a:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001ba3e:	29 c6                	sub    esi,eax
c001ba40:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001ba44:	19 d7                	sbb    edi,edx
c001ba46:	89 34 24             	mov    DWORD PTR [esp],esi
c001ba49:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c001ba4d:	b8 ff 07 00 00       	mov    eax,0x7ff
c001ba52:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c001ba55:	b8 00 00 00 00       	mov    eax,0x0
c001ba5a:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c001ba5e:	7d 43                	jge    c001baa3 <ISO9660::read(void*, unsigned long, void*, int*)+0x1a1>
c001ba60:	52                   	push   edx
c001ba61:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001ba65:	50                   	push   eax
c001ba66:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001ba6a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ba6e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001ba72:	0f ac d0 0b          	shrd   eax,edx,0xb
c001ba76:	50                   	push   eax
c001ba77:	e8 ab fd ff ff       	call   c001b827 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001ba7c:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c001ba84:	83 54 24 24 00       	adc    DWORD PTR [esp+0x24],0x0
c001ba89:	81 44 24 28 00 08 00 00 	add    DWORD PTR [esp+0x28],0x800
c001ba91:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c001ba99:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c001ba9e:	83 c4 10             	add    esp,0x10
c001baa1:	eb aa                	jmp    c001ba4d <ISO9660::read(void*, unsigned long, void*, int*)+0x14b>
c001baa3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001baa7:	0b 04 24             	or     eax,DWORD PTR [esp]
c001baaa:	74 2a                	je     c001bad6 <ISO9660::read(void*, unsigned long, void*, int*)+0x1d4>
c001baac:	50                   	push   eax
c001baad:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001bab1:	50                   	push   eax
c001bab2:	8d 74 24 28          	lea    esi,[esp+0x28]
c001bab6:	56                   	push   esi
c001bab7:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001babb:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001babf:	0f ac d9 0b          	shrd   ecx,ebx,0xb
c001bac3:	51                   	push   ecx
c001bac4:	e8 5e fd ff ff       	call   c001b827 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001bac9:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001bacd:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001bad1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001bad3:	83 c4 10             	add    esp,0x10
c001bad6:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001badd:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001bae1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001bae5:	89 18                	mov    DWORD PTR [eax],ebx
c001bae7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001baeb:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c001baee:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c001baf1:	31 c0                	xor    eax,eax
c001baf3:	eb 05                	jmp    c001bafa <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c001baf5:	b8 04 00 00 00       	mov    eax,0x4
c001bafa:	81 c4 2c 08 00 00    	add    esp,0x82c
c001bb00:	5b                   	pop    ebx
c001bb01:	5e                   	pop    esi
c001bb02:	5f                   	pop    edi
c001bb03:	5d                   	pop    ebp
c001bb04:	c3                   	ret    
c001bb05:	90                   	nop

c001bb06 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001bb06:	55                   	push   ebp
c001bb07:	57                   	push   edi
c001bb08:	56                   	push   esi
c001bb09:	53                   	push   ebx
c001bb0a:	81 ec 5c 09 00 00    	sub    esp,0x95c
c001bb10:	8b ac 24 74 09 00 00 	mov    ebp,DWORD PTR [esp+0x974]
c001bb17:	85 ed                	test   ebp,ebp
c001bb19:	0f 84 51 02 00 00    	je     c001bd70 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c001bb1f:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c001bb27:	0f 84 43 02 00 00    	je     c001bd70 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c001bb2d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001bb30:	0b 45 08             	or     eax,DWORD PTR [ebp+0x8]
c001bb33:	75 0a                	jne    c001bb3f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c001bb35:	b8 07 00 00 00       	mov    eax,0x7
c001bb3a:	e9 36 02 00 00       	jmp    c001bd75 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c001bb3f:	50                   	push   eax
c001bb40:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001bb44:	50                   	push   eax
c001bb45:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001bb4c:	53                   	push   ebx
c001bb4d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001bb50:	c1 e0 0b             	shl    eax,0xb
c001bb53:	03 45 10             	add    eax,DWORD PTR [ebp+0x10]
c001bb56:	c1 e8 0b             	shr    eax,0xb
c001bb59:	50                   	push   eax
c001bb5a:	e8 c8 fc ff ff       	call   c001b827 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001bb5f:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001bb62:	83 c4 10             	add    esp,0x10
c001bb65:	89 c1                	mov    ecx,eax
c001bb67:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c001bb6a:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001bb70:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c001bb73:	84 db                	test   bl,bl
c001bb75:	0f 85 8b 00 00 00    	jne    c001bc06 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x100>
c001bb7b:	8d b0 ff 07 00 00    	lea    esi,[eax+0x7ff]
c001bb81:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c001bb84:	81 e6 ff 07 00 00    	and    esi,0x7ff
c001bb8a:	29 c6                	sub    esi,eax
c001bb8c:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c001bb90:	89 f3                	mov    ebx,esi
c001bb92:	89 f1                	mov    ecx,esi
c001bb94:	c1 fb 1f             	sar    ebx,0x1f
c001bb97:	01 f0                	add    eax,esi
c001bb99:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c001bb9c:	11 da                	adc    edx,ebx
c001bb9e:	89 04 24             	mov    DWORD PTR [esp],eax
c001bba1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001bba5:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c001bba8:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c001bbab:	89 d8                	mov    eax,ebx
c001bbad:	39 74 24 0c          	cmp    DWORD PTR [esp+0xc],esi
c001bbb1:	ba 00 00 00 00       	mov    edx,0x0
c001bbb6:	19 f8                	sbb    eax,edi
c001bbb8:	b8 00 00 00 00       	mov    eax,0x0
c001bbbd:	73 08                	jae    c001bbc7 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc1>
c001bbbf:	89 f0                	mov    eax,esi
c001bbc1:	89 fa                	mov    edx,edi
c001bbc3:	29 c8                	sub    eax,ecx
c001bbc5:	19 da                	sbb    edx,ebx
c001bbc7:	89 d7                	mov    edi,edx
c001bbc9:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c001bbcc:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c001bbcf:	09 c7                	or     edi,eax
c001bbd1:	0f 84 5e ff ff ff    	je     c001bb35 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c001bbd7:	57                   	push   edi
c001bbd8:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001bbdc:	50                   	push   eax
c001bbdd:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001bbe4:	53                   	push   ebx
c001bbe5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001bbe8:	c1 e0 0b             	shl    eax,0xb
c001bbeb:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c001bbef:	c1 e8 0b             	shr    eax,0xb
c001bbf2:	50                   	push   eax
c001bbf3:	e8 2f fc ff ff       	call   c001b827 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001bbf8:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001bbfb:	83 c4 10             	add    esp,0x10
c001bbfe:	25 ff 07 00 00       	and    eax,0x7ff
c001bc03:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c001bc06:	31 ff                	xor    edi,edi
c001bc08:	56                   	push   esi
c001bc09:	6a 28                	push   0x28
c001bc0b:	6a 00                	push   0x0
c001bc0d:	8d 44 24 24          	lea    eax,[esp+0x24]
c001bc11:	50                   	push   eax
c001bc12:	e8 91 48 fe ff       	call   c00004a8 <memset>
c001bc17:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001bc1a:	25 ff 07 00 00       	and    eax,0x7ff
c001bc1f:	89 c6                	mov    esi,eax
c001bc21:	83 c6 21             	add    esi,0x21
c001bc24:	83 d7 00             	adc    edi,0x0
c001bc27:	83 c4 10             	add    esp,0x10
c001bc2a:	31 c9                	xor    ecx,ecx
c001bc2c:	8a 84 34 50 01 00 00 	mov    al,BYTE PTR [esp+esi*1+0x150]
c001bc33:	83 f9 28             	cmp    ecx,0x28
c001bc36:	88 04 24             	mov    BYTE PTR [esp],al
c001bc39:	0f 94 c2             	sete   dl
c001bc3c:	88 d0                	mov    al,dl
c001bc3e:	ba ff 07 00 00       	mov    edx,0x7ff
c001bc43:	39 f2                	cmp    edx,esi
c001bc45:	ba 00 00 00 00       	mov    edx,0x0
c001bc4a:	19 fa                	sbb    edx,edi
c001bc4c:	0f 92 c2             	setb   dl
c001bc4f:	09 c2                	or     edx,eax
c001bc51:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c001bc55:	0f 94 c0             	sete   al
c001bc58:	08 d0                	or     al,dl
c001bc5a:	75 16                	jne    c001bc72 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c001bc5c:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c001bc60:	74 10                	je     c001bc72 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c001bc62:	8a 04 24             	mov    al,BYTE PTR [esp]
c001bc65:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c001bc69:	41                   	inc    ecx
c001bc6a:	83 c6 01             	add    esi,0x1
c001bc6d:	83 d7 00             	adc    edi,0x0
c001bc70:	eb ba                	jmp    c001bc2c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x126>
c001bc72:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c001bc79:	83 ec 0c             	sub    esp,0xc
c001bc7c:	8d 74 24 24          	lea    esi,[esp+0x24]
c001bc80:	56                   	push   esi
c001bc81:	e8 3e 48 fe ff       	call   c00004c4 <strlen>
c001bc86:	8d bc 24 60 09 00 00 	lea    edi,[esp+0x960]
c001bc8d:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001bc91:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c001bc99:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001bc9c:	5a                   	pop    edx
c001bc9d:	25 ff 07 00 00       	and    eax,0x7ff
c001bca2:	59                   	pop    ecx
c001bca3:	01 f8                	add    eax,edi
c001bca5:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c001bcab:	83 e0 02             	and    eax,0x2
c001bcae:	3c 01                	cmp    al,0x1
c001bcb0:	19 c0                	sbb    eax,eax
c001bcb2:	83 c0 02             	add    eax,0x2
c001bcb5:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001bcb9:	56                   	push   esi
c001bcba:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001bcbe:	50                   	push   eax
c001bcbf:	e8 a0 48 fe ff       	call   c0000564 <strcpy>
c001bcc4:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c001bcc8:	83 c4 10             	add    esp,0x10
c001bccb:	84 c0                	test   al,al
c001bccd:	75 21                	jne    c001bcf0 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1ea>
c001bccf:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c001bcd7:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001bcdf:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001bce7:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c001bcee:	eb 28                	jmp    c001bd18 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c001bcf0:	fe c8                	dec    al
c001bcf2:	75 24                	jne    c001bd18 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c001bcf4:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c001bcfc:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001bd04:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001bd0c:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c001bd13:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c001bd18:	8d 74 24 40          	lea    esi,[esp+0x40]
c001bd1c:	8b 8c 24 78 09 00 00 	mov    ecx,DWORD PTR [esp+0x978]
c001bd23:	8b bc 24 7c 09 00 00 	mov    edi,DWORD PTR [esp+0x97c]
c001bd2a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001bd2c:	0f b6 f3             	movzx  esi,bl
c001bd2f:	8b 84 24 80 09 00 00 	mov    eax,DWORD PTR [esp+0x980]
c001bd36:	31 db                	xor    ebx,ebx
c001bd38:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001bd3e:	89 df                	mov    edi,ebx
c001bd40:	01 75 10             	add    DWORD PTR [ebp+0x10],esi
c001bd43:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bd46:	11 5d 14             	adc    DWORD PTR [ebp+0x14],ebx
c001bd49:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001bd4c:	39 c6                	cmp    esi,eax
c001bd4e:	19 d7                	sbb    edi,edx
c001bd50:	72 10                	jb     c001bd62 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x25c>
c001bd52:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c001bd59:	c7 45 0c 00 00 00 00 	mov    DWORD PTR [ebp+0xc],0x0
c001bd60:	eb 0a                	jmp    c001bd6c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x266>
c001bd62:	29 f0                	sub    eax,esi
c001bd64:	19 da                	sbb    edx,ebx
c001bd66:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c001bd69:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c001bd6c:	31 c0                	xor    eax,eax
c001bd6e:	eb 05                	jmp    c001bd75 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c001bd70:	b8 04 00 00 00       	mov    eax,0x4
c001bd75:	81 c4 5c 09 00 00    	add    esp,0x95c
c001bd7b:	5b                   	pop    ebx
c001bd7c:	5e                   	pop    esi
c001bd7d:	5f                   	pop    edi
c001bd7e:	5d                   	pop    ebp
c001bd7f:	c3                   	ret    

c001bd80 <readRoot(unsigned int*, unsigned int*, char)>:
c001bd80:	57                   	push   edi
c001bd81:	56                   	push   esi
c001bd82:	81 ec 38 08 00 00    	sub    esp,0x838
c001bd88:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c001bd90:	50                   	push   eax
c001bd91:	8d 44 24 38          	lea    eax,[esp+0x38]
c001bd95:	50                   	push   eax
c001bd96:	6a 10                	push   0x10
c001bd98:	e8 8a fa ff ff       	call   c001b827 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001bd9d:	8d b4 24 dc 00 00 00 	lea    esi,[esp+0xdc]
c001bda4:	8d 7c 24 1e          	lea    edi,[esp+0x1e]
c001bda8:	b9 22 00 00 00       	mov    ecx,0x22
c001bdad:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001bdaf:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001bdb6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001bdba:	89 10                	mov    DWORD PTR [eax],edx
c001bdbc:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c001bdc3:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001bdc7:	89 10                	mov    DWORD PTR [eax],edx
c001bdc9:	81 c4 44 08 00 00    	add    esp,0x844
c001bdcf:	b0 01                	mov    al,0x1
c001bdd1:	5e                   	pop    esi
c001bdd2:	5f                   	pop    edi
c001bdd3:	c3                   	ret    

c001bdd4 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c001bdd4:	55                   	push   ebp
c001bdd5:	57                   	push   edi
c001bdd6:	56                   	push   esi
c001bdd7:	53                   	push   ebx
c001bdd8:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001bdde:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c001bde5:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c001bdec:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001bdf0:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c001bdf4:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001bdf8:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001bdfc:	75 03                	jne    c001be01 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001bdfe:	83 c3 02             	add    ebx,0x2
c001be01:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c001be04:	75 03                	jne    c001be09 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c001be06:	43                   	inc    ebx
c001be07:	eb f8                	jmp    c001be01 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001be09:	52                   	push   edx
c001be0a:	68 00 01 00 00       	push   0x100
c001be0f:	6a 00                	push   0x0
c001be11:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001be15:	50                   	push   eax
c001be16:	e8 8d 46 fe ff       	call   c00004a8 <memset>
c001be1b:	83 c4 10             	add    esp,0x10
c001be1e:	31 d2                	xor    edx,edx
c001be20:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001be23:	84 c0                	test   al,al
c001be25:	74 21                	je     c001be48 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c001be27:	3c 2f                	cmp    al,0x2f
c001be29:	75 0b                	jne    c001be36 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c001be2b:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c001be2f:	bd 01 00 00 00       	mov    ebp,0x1
c001be34:	eb 14                	jmp    c001be4a <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c001be36:	8d 48 9f             	lea    ecx,[eax-0x61]
c001be39:	80 f9 19             	cmp    cl,0x19
c001be3c:	77 03                	ja     c001be41 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c001be3e:	83 e8 20             	sub    eax,0x20
c001be41:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c001be45:	42                   	inc    edx
c001be46:	eb d8                	jmp    c001be20 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c001be48:	31 ed                	xor    ebp,ebp
c001be4a:	83 ec 0c             	sub    esp,0xc
c001be4d:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c001be54:	e8 3e d9 fe ff       	call   c0009797 <malloc>
c001be59:	89 c6                	mov    esi,eax
c001be5b:	89 c2                	mov    edx,eax
c001be5d:	8b 84 24 48 01 00 00 	mov    eax,DWORD PTR [esp+0x148]
c001be64:	8d b8 ff 07 00 00    	lea    edi,[eax+0x7ff]
c001be6a:	c1 ef 0b             	shr    edi,0xb
c001be6d:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c001be74:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c001be78:	83 c4 10             	add    esp,0x10
c001be7b:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c001be80:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001be84:	3b 84 24 34 01 00 00 	cmp    eax,DWORD PTR [esp+0x134]
c001be8b:	74 29                	je     c001beb6 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xe2>
c001be8d:	50                   	push   eax
c001be8e:	57                   	push   edi
c001be8f:	52                   	push   edx
c001be90:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001be94:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001be9b:	e8 87 f9 ff ff       	call   c001b827 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001bea0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001bea4:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c001beab:	81 c2 00 08 00 00    	add    edx,0x800
c001beb1:	83 c4 10             	add    esp,0x10
c001beb4:	eb ca                	jmp    c001be80 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xac>
c001beb6:	83 ec 0c             	sub    esp,0xc
c001beb9:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001bebd:	57                   	push   edi
c001bebe:	e8 01 46 fe ff       	call   c00004c4 <strlen>
c001bec3:	50                   	push   eax
c001bec4:	57                   	push   edi
c001bec5:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c001becc:	56                   	push   esi
c001becd:	e8 13 f9 ff ff       	call   c001b7e5 <__memmem(unsigned char*, int, unsigned char*, int)>
c001bed2:	83 c4 20             	add    esp,0x20
c001bed5:	85 c0                	test   eax,eax
c001bed7:	75 13                	jne    c001beec <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x118>
c001bed9:	83 ec 0c             	sub    esp,0xc
c001bedc:	56                   	push   esi
c001bedd:	e8 c5 d8 fe ff       	call   c00097a7 <free>
c001bee2:	83 c4 10             	add    esp,0x10
c001bee5:	31 c0                	xor    eax,eax
c001bee7:	e9 b3 00 00 00       	jmp    c001bf9f <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1cb>
c001beec:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c001bef0:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c001bef4:	c1 e7 08             	shl    edi,0x8
c001bef7:	c1 e2 10             	shl    edx,0x10
c001befa:	09 d7                	or     edi,edx
c001befc:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c001bf00:	09 d7                	or     edi,edx
c001bf02:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c001bf06:	c1 e2 18             	shl    edx,0x18
c001bf09:	09 d7                	or     edi,edx
c001bf0b:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c001bf0f:	89 d1                	mov    ecx,edx
c001bf11:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c001bf15:	c1 e1 08             	shl    ecx,0x8
c001bf18:	c1 e2 10             	shl    edx,0x10
c001bf1b:	09 ca                	or     edx,ecx
c001bf1d:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c001bf21:	09 ca                	or     edx,ecx
c001bf23:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c001bf27:	c1 e1 18             	shl    ecx,0x18
c001bf2a:	09 ca                	or     edx,ecx
c001bf2c:	89 e9                	mov    ecx,ebp
c001bf2e:	84 c9                	test   cl,cl
c001bf30:	74 3c                	je     c001bf6e <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x19a>
c001bf32:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001bf36:	83 ec 0c             	sub    esp,0xc
c001bf39:	56                   	push   esi
c001bf3a:	e8 68 d8 fe ff       	call   c00097a7 <free>
c001bf3f:	83 c4 0c             	add    esp,0xc
c001bf42:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001bf49:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c001bf4e:	50                   	push   eax
c001bf4f:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001bf56:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001bf5d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001bf61:	52                   	push   edx
c001bf62:	57                   	push   edi
c001bf63:	53                   	push   ebx
c001bf64:	e8 6b fe ff ff       	call   c001bdd4 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001bf69:	83 c4 20             	add    esp,0x20
c001bf6c:	eb 31                	jmp    c001bf9f <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1cb>
c001bf6e:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c001bf71:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c001bf78:	d0 e8                	shr    al,1
c001bf7a:	89 3b                	mov    DWORD PTR [ebx],edi
c001bf7c:	83 e0 01             	and    eax,0x1
c001bf7f:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001bf86:	83 ec 0c             	sub    esp,0xc
c001bf89:	89 13                	mov    DWORD PTR [ebx],edx
c001bf8b:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c001bf92:	89 03                	mov    DWORD PTR [ebx],eax
c001bf94:	56                   	push   esi
c001bf95:	e8 0d d8 fe ff       	call   c00097a7 <free>
c001bf9a:	83 c4 10             	add    esp,0x10
c001bf9d:	b0 01                	mov    al,0x1
c001bf9f:	81 c4 1c 01 00 00    	add    esp,0x11c
c001bfa5:	5b                   	pop    ebx
c001bfa6:	5e                   	pop    esi
c001bfa7:	5f                   	pop    edi
c001bfa8:	5d                   	pop    ebp
c001bfa9:	c3                   	ret    

c001bfaa <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c001bfaa:	55                   	push   ebp
c001bfab:	57                   	push   edi
c001bfac:	56                   	push   esi
c001bfad:	53                   	push   ebx
c001bfae:	83 ec 20             	sub    esp,0x20
c001bfb1:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001bfb5:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001bfb9:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001bfbd:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001bfc5:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001bfcd:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c001bfd2:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c001bfd8:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c001bfde:	57                   	push   edi
c001bfdf:	8d 44 24 14          	lea    eax,[esp+0x14]
c001bfe3:	50                   	push   eax
c001bfe4:	8d 44 24 14          	lea    eax,[esp+0x14]
c001bfe8:	50                   	push   eax
c001bfe9:	e8 92 fd ff ff       	call   c001bd80 <readRoot(unsigned int*, unsigned int*, char)>
c001bfee:	5a                   	pop    edx
c001bfef:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001bff3:	e8 cc 44 fe ff       	call   c00004c4 <strlen>
c001bff8:	83 c4 10             	add    esp,0x10
c001bffb:	83 f8 03             	cmp    eax,0x3
c001bffe:	77 17                	ja     c001c017 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c001c000:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c004:	89 03                	mov    DWORD PTR [ebx],eax
c001c006:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c00a:	89 06                	mov    DWORD PTR [esi],eax
c001c00c:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c001c013:	b0 01                	mov    al,0x1
c001c015:	eb 19                	jmp    c001c030 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c001c017:	50                   	push   eax
c001c018:	55                   	push   ebp
c001c019:	57                   	push   edi
c001c01a:	56                   	push   esi
c001c01b:	53                   	push   ebx
c001c01c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c020:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c024:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001c028:	e8 a7 fd ff ff       	call   c001bdd4 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001c02d:	83 c4 20             	add    esp,0x20
c001c030:	83 c4 1c             	add    esp,0x1c
c001c033:	5b                   	pop    ebx
c001c034:	5e                   	pop    esi
c001c035:	5f                   	pop    edi
c001c036:	5d                   	pop    ebp
c001c037:	c3                   	ret    

c001c038 <ISO9660::open(char const*, void**, FileOpenMode)>:
c001c038:	57                   	push   edi
c001c039:	56                   	push   esi
c001c03a:	53                   	push   ebx
c001c03b:	83 ec 10             	sub    esp,0x10
c001c03e:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001c042:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001c046:	85 ff                	test   edi,edi
c001c048:	0f 84 8b 00 00 00    	je     c001c0d9 <ISO9660::open(char const*, void**, FileOpenMode)+0xa1>
c001c04e:	85 f6                	test   esi,esi
c001c050:	0f 84 83 00 00 00    	je     c001c0d9 <ISO9660::open(char const*, void**, FileOpenMode)+0xa1>
c001c056:	b8 03 00 00 00       	mov    eax,0x3
c001c05b:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c001c060:	75 7c                	jne    c001c0de <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c001c062:	83 ec 0c             	sub    esp,0xc
c001c065:	6a 1c                	push   0x1c
c001c067:	e8 2b d7 fe ff       	call   c0009797 <malloc>
c001c06c:	89 07                	mov    DWORD PTR [edi],eax
c001c06e:	89 c3                	mov    ebx,eax
c001c070:	58                   	pop    eax
c001c071:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c075:	50                   	push   eax
c001c076:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001c079:	50                   	push   eax
c001c07a:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c07e:	50                   	push   eax
c001c07f:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c083:	50                   	push   eax
c001c084:	56                   	push   esi
c001c085:	e8 20 ff ff ff       	call   c001bfaa <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001c08a:	83 c4 20             	add    esp,0x20
c001c08d:	84 c0                	test   al,al
c001c08f:	74 07                	je     c001c098 <ISO9660::open(char const*, void**, FileOpenMode)+0x60>
c001c091:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001c096:	74 0b                	je     c001c0a3 <ISO9660::open(char const*, void**, FileOpenMode)+0x6b>
c001c098:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001c09c:	b8 01 00 00 00       	mov    eax,0x1
c001c0a1:	eb 3b                	jmp    c001c0de <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c001c0a3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c0a7:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001c0ab:	89 03                	mov    DWORD PTR [ebx],eax
c001c0ad:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001c0b4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c0b8:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001c0bf:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001c0c6:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001c0c9:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001c0d0:	8a 06                	mov    al,BYTE PTR [esi]
c001c0d2:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001c0d5:	31 c0                	xor    eax,eax
c001c0d7:	eb 05                	jmp    c001c0de <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c001c0d9:	b8 04 00 00 00       	mov    eax,0x4
c001c0de:	83 c4 10             	add    esp,0x10
c001c0e1:	5b                   	pop    ebx
c001c0e2:	5e                   	pop    esi
c001c0e3:	5f                   	pop    edi
c001c0e4:	c3                   	ret    
c001c0e5:	90                   	nop

c001c0e6 <ISO9660::exists(char const*)>:
c001c0e6:	83 ec 28             	sub    esp,0x28
c001c0e9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001c0ed:	8d 54 24 18          	lea    edx,[esp+0x18]
c001c0f1:	52                   	push   edx
c001c0f2:	0f be 10             	movsx  edx,BYTE PTR [eax]
c001c0f5:	52                   	push   edx
c001c0f6:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001c0fa:	52                   	push   edx
c001c0fb:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001c0ff:	52                   	push   edx
c001c100:	50                   	push   eax
c001c101:	e8 a4 fe ff ff       	call   c001bfaa <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001c106:	83 c4 3c             	add    esp,0x3c
c001c109:	c3                   	ret    

c001c10a <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001c10a:	56                   	push   esi
c001c10b:	53                   	push   ebx
c001c10c:	83 ec 14             	sub    esp,0x14
c001c10f:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001c113:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001c117:	85 db                	test   ebx,ebx
c001c119:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001c11d:	0f 94 c2             	sete   dl
c001c120:	85 f6                	test   esi,esi
c001c122:	0f 94 c0             	sete   al
c001c125:	08 c2                	or     dl,al
c001c127:	75 68                	jne    c001c191 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001c129:	85 c9                	test   ecx,ecx
c001c12b:	74 64                	je     c001c191 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001c12d:	83 ec 0c             	sub    esp,0xc
c001c130:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001c133:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c137:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001c13d:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001c144:	50                   	push   eax
c001c145:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c001c148:	50                   	push   eax
c001c149:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c14d:	50                   	push   eax
c001c14e:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c152:	50                   	push   eax
c001c153:	51                   	push   ecx
c001c154:	e8 51 fe ff ff       	call   c001bfaa <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001c159:	83 c4 20             	add    esp,0x20
c001c15c:	ba 01 00 00 00       	mov    edx,0x1
c001c161:	84 c0                	test   al,al
c001c163:	74 31                	je     c001c196 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001c165:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c169:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001c170:	89 03                	mov    DWORD PTR [ebx],eax
c001c172:	ba 00 00 00 00       	mov    edx,0x0
c001c177:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c17b:	85 c0                	test   eax,eax
c001c17d:	0f 95 06             	setne  BYTE PTR [esi]
c001c180:	74 14                	je     c001c196 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001c182:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001c188:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001c18f:	eb 05                	jmp    c001c196 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001c191:	ba 04 00 00 00       	mov    edx,0x4
c001c196:	83 c4 14             	add    esp,0x14
c001c199:	89 d0                	mov    eax,edx
c001c19b:	5b                   	pop    ebx
c001c19c:	5e                   	pop    esi
c001c19d:	c3                   	ret    

c001c19e <ISO9660::openDir(char const*, void**)>:
c001c19e:	57                   	push   edi
c001c19f:	56                   	push   esi
c001c1a0:	53                   	push   ebx
c001c1a1:	83 ec 10             	sub    esp,0x10
c001c1a4:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001c1a8:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001c1ac:	85 ff                	test   edi,edi
c001c1ae:	74 7b                	je     c001c22b <ISO9660::openDir(char const*, void**)+0x8d>
c001c1b0:	85 f6                	test   esi,esi
c001c1b2:	74 77                	je     c001c22b <ISO9660::openDir(char const*, void**)+0x8d>
c001c1b4:	83 ec 0c             	sub    esp,0xc
c001c1b7:	6a 1c                	push   0x1c
c001c1b9:	e8 d9 d5 fe ff       	call   c0009797 <malloc>
c001c1be:	89 07                	mov    DWORD PTR [edi],eax
c001c1c0:	89 c3                	mov    ebx,eax
c001c1c2:	58                   	pop    eax
c001c1c3:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c1c7:	50                   	push   eax
c001c1c8:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001c1cb:	50                   	push   eax
c001c1cc:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c1d0:	50                   	push   eax
c001c1d1:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c1d5:	50                   	push   eax
c001c1d6:	56                   	push   esi
c001c1d7:	e8 ce fd ff ff       	call   c001bfaa <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001c1dc:	83 c4 20             	add    esp,0x20
c001c1df:	84 c0                	test   al,al
c001c1e1:	74 07                	je     c001c1ea <ISO9660::openDir(char const*, void**)+0x4c>
c001c1e3:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001c1e8:	75 0b                	jne    c001c1f5 <ISO9660::openDir(char const*, void**)+0x57>
c001c1ea:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001c1ee:	b8 01 00 00 00       	mov    eax,0x1
c001c1f3:	eb 3b                	jmp    c001c230 <ISO9660::openDir(char const*, void**)+0x92>
c001c1f5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c1f9:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001c1fd:	89 03                	mov    DWORD PTR [ebx],eax
c001c1ff:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001c206:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c20a:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001c211:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001c218:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001c21b:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001c222:	8a 06                	mov    al,BYTE PTR [esi]
c001c224:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001c227:	31 c0                	xor    eax,eax
c001c229:	eb 05                	jmp    c001c230 <ISO9660::openDir(char const*, void**)+0x92>
c001c22b:	b8 04 00 00 00       	mov    eax,0x4
c001c230:	83 c4 10             	add    esp,0x10
c001c233:	5b                   	pop    ebx
c001c234:	5e                   	pop    esi
c001c235:	5f                   	pop    edi
c001c236:	c3                   	ret    
c001c237:	90                   	nop

c001c238 <ISO9660::ISO9660()>:
c001c238:	83 ec 0c             	sub    esp,0xc
c001c23b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c23f:	83 ec 0c             	sub    esp,0xc
c001c242:	50                   	push   eax
c001c243:	e8 00 08 ff ff       	call   c000ca48 <Filesystem::Filesystem()>
c001c248:	83 c4 10             	add    esp,0x10
c001c24b:	ba c4 4c 02 c0       	mov    edx,0xc0024cc4
c001c250:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c254:	89 10                	mov    DWORD PTR [eax],edx
c001c256:	90                   	nop
c001c257:	83 c4 0c             	add    esp,0xc
c001c25a:	c3                   	ret    
c001c25b:	90                   	nop

c001c25c <SoundCard::beginPlayback()>:
c001c25c:	c7 44 24 04 24 4d 02 c0 	mov    DWORD PTR [esp+0x4],0xc0024d24
c001c264:	e9 32 68 ff ff       	jmp    c0012a9b <Krnl::panic(char const*)>
c001c269:	90                   	nop

c001c26a <SoundCard::stopPlayback()>:
c001c26a:	c7 44 24 04 58 4d 02 c0 	mov    DWORD PTR [esp+0x4],0xc0024d58
c001c272:	e9 24 68 ff ff       	jmp    c0012a9b <Krnl::panic(char const*)>
c001c277:	90                   	nop

c001c278 <SoundCard::SoundCard(char const*)>:
c001c278:	83 ec 1c             	sub    esp,0x1c
c001c27b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c27f:	83 ec 08             	sub    esp,0x8
c001c282:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c286:	50                   	push   eax
c001c287:	e8 26 1b ff ff       	call   c000ddb2 <Device::Device(char const*)>
c001c28c:	83 c4 10             	add    esp,0x10
c001c28f:	ba f0 4d 02 c0       	mov    edx,0xc0024df0
c001c294:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c298:	89 10                	mov    DWORD PTR [eax],edx
c001c29a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c29e:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001c2a5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c2a9:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c001c2b3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c2b7:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c001c2c1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c2c5:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c001c2cf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c2d3:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001c2dd:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001c2e5:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001c2ea:	7f 19                	jg     c001c305 <SoundCard::SoundCard(char const*)+0x8d>
c001c2ec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c2f0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001c2f4:	83 c2 54             	add    edx,0x54
c001c2f7:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001c2ff:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001c303:	eb e0                	jmp    c001c2e5 <SoundCard::SoundCard(char const*)+0x6d>
c001c305:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c309:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001c310:	90                   	nop
c001c311:	83 c4 1c             	add    esp,0x1c
c001c314:	c3                   	ret    
c001c315:	90                   	nop

c001c316 <SoundCard::~SoundCard()>:
c001c316:	83 ec 0c             	sub    esp,0xc
c001c319:	ba f0 4d 02 c0       	mov    edx,0xc0024df0
c001c31e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c322:	89 10                	mov    DWORD PTR [eax],edx
c001c324:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c328:	83 ec 0c             	sub    esp,0xc
c001c32b:	50                   	push   eax
c001c32c:	e8 7f 17 ff ff       	call   c000dab0 <Device::~Device()>
c001c331:	83 c4 10             	add    esp,0x10
c001c334:	90                   	nop
c001c335:	83 c4 0c             	add    esp,0xc
c001c338:	c3                   	ret    
c001c339:	90                   	nop

c001c33a <SoundCard::~SoundCard()>:
c001c33a:	83 ec 0c             	sub    esp,0xc
c001c33d:	83 ec 0c             	sub    esp,0xc
c001c340:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c344:	e8 cd ff ff ff       	call   c001c316 <SoundCard::~SoundCard()>
c001c349:	83 c4 10             	add    esp,0x10
c001c34c:	83 ec 08             	sub    esp,0x8
c001c34f:	68 e8 01 00 00       	push   0x1e8
c001c354:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c358:	e8 f3 02 ff ff       	call   c000c650 <operator delete(void*, unsigned long)>
c001c35d:	83 c4 10             	add    esp,0x10
c001c360:	83 c4 0c             	add    esp,0xc
c001c363:	c3                   	ret    

c001c364 <SoundCard::configureRates(int, int, int)>:
c001c364:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c368:	31 c0                	xor    eax,eax
c001c36a:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c001c371:	75 20                	jne    c001c393 <SoundCard::configureRates(int, int, int)+0x2f>
c001c373:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c377:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c001c37d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c381:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c001c387:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c38b:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c001c391:	b0 01                	mov    al,0x1
c001c393:	c3                   	ret    

c001c394 <SoundCard::getSamples16(int, short*)>:
c001c394:	55                   	push   ebp
c001c395:	57                   	push   edi
c001c396:	31 ff                	xor    edi,edi
c001c398:	56                   	push   esi
c001c399:	53                   	push   ebx
c001c39a:	31 db                	xor    ebx,ebx
c001c39c:	83 ec 18             	sub    esp,0x18
c001c39f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001c3a3:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001c3a7:	68 8b 4d 02 c0       	push   0xc0024d8b
c001c3ac:	e8 80 03 ff ff       	call   c000c731 <Dbg::kprintf(char const*, ...)>
c001c3b1:	83 c4 0c             	add    esp,0xc
c001c3b4:	8d 04 36             	lea    eax,[esi+esi*1]
c001c3b7:	50                   	push   eax
c001c3b8:	6a 00                	push   0x0
c001c3ba:	55                   	push   ebp
c001c3bb:	e8 e8 40 fe ff       	call   c00004a8 <memset>
c001c3c0:	83 c4 10             	add    esp,0x10
c001c3c3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c3c7:	8b 84 98 58 01 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x158]
c001c3ce:	85 c0                	test   eax,eax
c001c3d0:	74 1b                	je     c001c3ed <SoundCard::getSamples16(int, short*)+0x59>
c001c3d2:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001c3d6:	75 15                	jne    c001c3ed <SoundCard::getSamples16(int, short*)+0x59>
c001c3d8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c3dc:	55                   	push   ebp
c001c3dd:	56                   	push   esi
c001c3de:	50                   	push   eax
c001c3df:	e8 58 03 00 00       	call   c001c73c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c001c3e4:	83 c4 10             	add    esp,0x10
c001c3e7:	39 c7                	cmp    edi,eax
c001c3e9:	7d 02                	jge    c001c3ed <SoundCard::getSamples16(int, short*)+0x59>
c001c3eb:	89 c7                	mov    edi,eax
c001c3ed:	43                   	inc    ebx
c001c3ee:	83 fb 20             	cmp    ebx,0x20
c001c3f1:	75 d0                	jne    c001c3c3 <SoundCard::getSamples16(int, short*)+0x2f>
c001c3f3:	83 c4 0c             	add    esp,0xc
c001c3f6:	89 f8                	mov    eax,edi
c001c3f8:	5b                   	pop    ebx
c001c3f9:	5e                   	pop    esi
c001c3fa:	5f                   	pop    edi
c001c3fb:	5d                   	pop    ebp
c001c3fc:	c3                   	ret    
c001c3fd:	90                   	nop

c001c3fe <SoundCard::getSamples32(int, int*)>:
c001c3fe:	55                   	push   ebp
c001c3ff:	57                   	push   edi
c001c400:	31 ff                	xor    edi,edi
c001c402:	56                   	push   esi
c001c403:	31 f6                	xor    esi,esi
c001c405:	53                   	push   ebx
c001c406:	83 ec 10             	sub    esp,0x10
c001c409:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001c40d:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001c411:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001c415:	c1 e0 02             	shl    eax,0x2
c001c418:	50                   	push   eax
c001c419:	6a 00                	push   0x0
c001c41b:	55                   	push   ebp
c001c41c:	e8 87 40 fe ff       	call   c00004a8 <memset>
c001c421:	83 c4 10             	add    esp,0x10
c001c424:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c001c42b:	85 c0                	test   eax,eax
c001c42d:	74 1b                	je     c001c44a <SoundCard::getSamples32(int, int*)+0x4c>
c001c42f:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001c433:	75 15                	jne    c001c44a <SoundCard::getSamples32(int, int*)+0x4c>
c001c435:	53                   	push   ebx
c001c436:	55                   	push   ebp
c001c437:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c43b:	50                   	push   eax
c001c43c:	e8 f7 03 00 00       	call   c001c838 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c001c441:	83 c4 10             	add    esp,0x10
c001c444:	39 c6                	cmp    esi,eax
c001c446:	7d 02                	jge    c001c44a <SoundCard::getSamples32(int, int*)+0x4c>
c001c448:	89 c6                	mov    esi,eax
c001c44a:	47                   	inc    edi
c001c44b:	83 ff 20             	cmp    edi,0x20
c001c44e:	75 d4                	jne    c001c424 <SoundCard::getSamples32(int, int*)+0x26>
c001c450:	8a 83 d8 01 00 00    	mov    al,BYTE PTR [ebx+0x1d8]
c001c456:	85 f6                	test   esi,esi
c001c458:	75 0f                	jne    c001c469 <SoundCard::getSamples32(int, int*)+0x6b>
c001c45a:	84 c0                	test   al,al
c001c45c:	74 1b                	je     c001c479 <SoundCard::getSamples32(int, int*)+0x7b>
c001c45e:	83 ec 0c             	sub    esp,0xc
c001c461:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c463:	53                   	push   ebx
c001c464:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001c467:	eb 0d                	jmp    c001c476 <SoundCard::getSamples32(int, int*)+0x78>
c001c469:	84 c0                	test   al,al
c001c46b:	75 0c                	jne    c001c479 <SoundCard::getSamples32(int, int*)+0x7b>
c001c46d:	83 ec 0c             	sub    esp,0xc
c001c470:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c472:	53                   	push   ebx
c001c473:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001c476:	83 c4 10             	add    esp,0x10
c001c479:	83 c4 0c             	add    esp,0xc
c001c47c:	89 f0                	mov    eax,esi
c001c47e:	5b                   	pop    ebx
c001c47f:	5e                   	pop    esi
c001c480:	5f                   	pop    edi
c001c481:	5d                   	pop    ebp
c001c482:	c3                   	ret    
c001c483:	90                   	nop

c001c484 <SoundCard::addChannel(SoundPort*)>:
c001c484:	56                   	push   esi
c001c485:	53                   	push   ebx
c001c486:	53                   	push   ebx
c001c487:	31 db                	xor    ebx,ebx
c001c489:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c48d:	83 bc 9e 58 01 00 00 00 	cmp    DWORD PTR [esi+ebx*4+0x158],0x0
c001c495:	74 27                	je     c001c4be <SoundCard::addChannel(SoundPort*)+0x3a>
c001c497:	43                   	inc    ebx
c001c498:	83 fb 20             	cmp    ebx,0x20
c001c49b:	75 f0                	jne    c001c48d <SoundCard::addChannel(SoundPort*)+0x9>
c001c49d:	83 ec 0c             	sub    esp,0xc
c001c4a0:	83 cb ff             	or     ebx,0xffffffff
c001c4a3:	68 b1 4d 02 c0       	push   0xc0024db1
c001c4a8:	e8 84 02 ff ff       	call   c000c731 <Dbg::kprintf(char const*, ...)>
c001c4ad:	c7 04 24 aa 4d 02 c0 	mov    DWORD PTR [esp],0xc0024daa
c001c4b4:	e8 e2 65 ff ff       	call   c0012a9b <Krnl::panic(char const*)>
c001c4b9:	83 c4 10             	add    esp,0x10
c001c4bc:	eb 1b                	jmp    c001c4d9 <SoundCard::addChannel(SoundPort*)+0x55>
c001c4be:	51                   	push   ecx
c001c4bf:	51                   	push   ecx
c001c4c0:	53                   	push   ebx
c001c4c1:	68 c9 4d 02 c0       	push   0xc0024dc9
c001c4c6:	e8 66 02 ff ff       	call   c000c731 <Dbg::kprintf(char const*, ...)>
c001c4cb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c4cf:	83 c4 10             	add    esp,0x10
c001c4d2:	89 84 9e 58 01 00 00 	mov    DWORD PTR [esi+ebx*4+0x158],eax
c001c4d9:	89 d8                	mov    eax,ebx
c001c4db:	5a                   	pop    edx
c001c4dc:	5b                   	pop    ebx
c001c4dd:	5e                   	pop    esi
c001c4de:	c3                   	ret    
c001c4df:	90                   	nop

c001c4e0 <SoundCard::removeChannel(int)>:
c001c4e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c4e4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001c4e8:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c001c4f3:	c3                   	ret    

c001c4f4 <SoundPort::SoundPort(int, int, int, int)>:
c001c4f4:	83 ec 0c             	sub    esp,0xc
c001c4f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c4fb:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001c502:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c506:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001c50a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c50e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c512:	89 10                	mov    DWORD PTR [eax],edx
c001c514:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c518:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001c51c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c51f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c523:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c527:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c52a:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c001c52f:	75 13                	jne    c001c544 <SoundPort::SoundPort(int, int, int, int)+0x50>
c001c531:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c535:	8b 00                	mov    eax,DWORD PTR [eax]
c001c537:	05 a0 0f 00 00       	add    eax,0xfa0
c001c53c:	01 c0                	add    eax,eax
c001c53e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c542:	66 90                	xchg   ax,ax
c001c544:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c548:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001c54c:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001c54f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c553:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001c55a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c55e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001c561:	c1 e0 02             	shl    eax,0x2
c001c564:	83 ec 0c             	sub    esp,0xc
c001c567:	50                   	push   eax
c001c568:	e8 2a d2 fe ff       	call   c0009797 <malloc>
c001c56d:	83 c4 10             	add    esp,0x10
c001c570:	89 c2                	mov    edx,eax
c001c572:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c576:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001c579:	90                   	nop
c001c57a:	83 c4 0c             	add    esp,0xc
c001c57d:	c3                   	ret    
c001c57e:	66 90                	xchg   ax,ax

c001c580 <SoundPort::~SoundPort()>:
c001c580:	83 ec 0c             	sub    esp,0xc
c001c583:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c587:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001c58a:	85 c0                	test   eax,eax
c001c58c:	74 1e                	je     c001c5ac <SoundPort::~SoundPort()+0x2c>
c001c58e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c592:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001c595:	83 ec 0c             	sub    esp,0xc
c001c598:	50                   	push   eax
c001c599:	e8 09 d2 fe ff       	call   c00097a7 <free>
c001c59e:	83 c4 10             	add    esp,0x10
c001c5a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c5a5:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001c5ac:	90                   	nop
c001c5ad:	83 c4 0c             	add    esp,0xc
c001c5b0:	c3                   	ret    
c001c5b1:	90                   	nop
c001c5b2:	66 90                	xchg   ax,ax

c001c5b4 <SoundPort::unpause()>:
c001c5b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c5b8:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c001c5bc:	c3                   	ret    
c001c5bd:	90                   	nop
c001c5be:	66 90                	xchg   ax,ax

c001c5c0 <SoundPort::pause()>:
c001c5c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c5c4:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001c5c8:	c3                   	ret    
c001c5c9:	90                   	nop
c001c5ca:	66 90                	xchg   ax,ax

c001c5cc <SoundPort::getBufferUsed()>:
c001c5cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c5d0:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001c5d3:	c3                   	ret    

c001c5d4 <SoundPort::getBufferSize()>:
c001c5d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c5d8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001c5db:	c3                   	ret    

c001c5dc <SoundPort::buffer16(short*, int)>:
c001c5dc:	55                   	push   ebp
c001c5dd:	57                   	push   edi
c001c5de:	56                   	push   esi
c001c5df:	53                   	push   ebx
c001c5e0:	83 ec 1c             	sub    esp,0x1c
c001c5e3:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001c5e7:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001c5eb:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001c5ee:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001c5f1:	0f 84 85 00 00 00    	je     c001c67c <SoundPort::buffer16(short*, int)+0xa0>
c001c5f7:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001c5fb:	85 c9                	test   ecx,ecx
c001c5fd:	7e 7d                	jle    c001c67c <SoundPort::buffer16(short*, int)+0xa0>
c001c5ff:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c001c603:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001c606:	c1 e1 0f             	shl    ecx,0xf
c001c609:	8d 70 01             	lea    esi,[eax+0x1]
c001c60c:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001c60f:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001c612:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001c615:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001c618:	74 6e                	je     c001c688 <SoundPort::buffer16(short*, int)+0xac>
c001c61a:	31 f6                	xor    esi,esi
c001c61c:	eb 22                	jmp    c001c640 <SoundPort::buffer16(short*, int)+0x64>
c001c61e:	66 90                	xchg   ax,ax
c001c620:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c001c625:	8d 79 01             	lea    edi,[ecx+0x1]
c001c628:	c1 e3 0f             	shl    ebx,0xf
c001c62b:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c001c62e:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c001c631:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c001c634:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001c637:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001c63a:	74 1c                	je     c001c658 <SoundPort::buffer16(short*, int)+0x7c>
c001c63c:	89 c6                	mov    esi,eax
c001c63e:	66 90                	xchg   ax,ax
c001c640:	8d 46 01             	lea    eax,[esi+0x1]
c001c643:	39 44 24 38          	cmp    DWORD PTR [esp+0x38],eax
c001c647:	75 d7                	jne    c001c620 <SoundPort::buffer16(short*, int)+0x44>
c001c649:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c64d:	83 c4 1c             	add    esp,0x1c
c001c650:	5b                   	pop    ebx
c001c651:	5e                   	pop    esi
c001c652:	5f                   	pop    edi
c001c653:	5d                   	pop    ebp
c001c654:	c3                   	ret    
c001c655:	8d 76 00             	lea    esi,[esi+0x0]
c001c658:	8d 46 02             	lea    eax,[esi+0x2]
c001c65b:	90                   	nop
c001c65c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c660:	83 ec 0c             	sub    esp,0xc
c001c663:	68 1c 4e 02 c0       	push   0xc0024e1c
c001c668:	e8 c4 00 ff ff       	call   c000c731 <Dbg::kprintf(char const*, ...)>
c001c66d:	83 c4 10             	add    esp,0x10
c001c670:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c674:	83 c4 1c             	add    esp,0x1c
c001c677:	5b                   	pop    ebx
c001c678:	5e                   	pop    esi
c001c679:	5f                   	pop    edi
c001c67a:	5d                   	pop    ebp
c001c67b:	c3                   	ret    
c001c67c:	83 c4 1c             	add    esp,0x1c
c001c67f:	31 c0                	xor    eax,eax
c001c681:	5b                   	pop    ebx
c001c682:	5e                   	pop    esi
c001c683:	5f                   	pop    edi
c001c684:	5d                   	pop    ebp
c001c685:	c3                   	ret    
c001c686:	66 90                	xchg   ax,ax
c001c688:	b8 01 00 00 00       	mov    eax,0x1
c001c68d:	eb cd                	jmp    c001c65c <SoundPort::buffer16(short*, int)+0x80>
c001c68f:	90                   	nop

c001c690 <SoundPort::buffer32(int*, int)>:
c001c690:	55                   	push   ebp
c001c691:	57                   	push   edi
c001c692:	56                   	push   esi
c001c693:	53                   	push   ebx
c001c694:	83 ec 1c             	sub    esp,0x1c
c001c697:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001c69b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c69f:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001c6a2:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001c6a6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c6aa:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001c6ad:	74 79                	je     c001c728 <SoundPort::buffer32(int*, int)+0x98>
c001c6af:	85 c0                	test   eax,eax
c001c6b1:	7e 75                	jle    c001c728 <SoundPort::buffer32(int*, int)+0x98>
c001c6b3:	8d 71 01             	lea    esi,[ecx+0x1]
c001c6b6:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001c6b9:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001c6bc:	8b 37                	mov    esi,DWORD PTR [edi]
c001c6be:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c001c6c1:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001c6c4:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001c6c7:	74 6b                	je     c001c734 <SoundPort::buffer32(int*, int)+0xa4>
c001c6c9:	31 f6                	xor    esi,esi
c001c6cb:	eb 1f                	jmp    c001c6ec <SoundPort::buffer32(int*, int)+0x5c>
c001c6cd:	8d 76 00             	lea    esi,[esi+0x0]
c001c6d0:	8d 69 01             	lea    ebp,[ecx+0x1]
c001c6d3:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c001c6d6:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c001c6d9:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001c6dc:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c001c6e0:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001c6e3:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001c6e6:	74 1c                	je     c001c704 <SoundPort::buffer32(int*, int)+0x74>
c001c6e8:	89 de                	mov    esi,ebx
c001c6ea:	66 90                	xchg   ax,ax
c001c6ec:	8d 5e 01             	lea    ebx,[esi+0x1]
c001c6ef:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c001c6f3:	75 db                	jne    c001c6d0 <SoundPort::buffer32(int*, int)+0x40>
c001c6f5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c6f9:	83 c4 1c             	add    esp,0x1c
c001c6fc:	5b                   	pop    ebx
c001c6fd:	5e                   	pop    esi
c001c6fe:	5f                   	pop    edi
c001c6ff:	5d                   	pop    ebp
c001c700:	c3                   	ret    
c001c701:	8d 76 00             	lea    esi,[esi+0x0]
c001c704:	8d 46 02             	lea    eax,[esi+0x2]
c001c707:	90                   	nop
c001c708:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c70c:	83 ec 0c             	sub    esp,0xc
c001c70f:	68 37 4e 02 c0       	push   0xc0024e37
c001c714:	e8 18 00 ff ff       	call   c000c731 <Dbg::kprintf(char const*, ...)>
c001c719:	83 c4 10             	add    esp,0x10
c001c71c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c720:	83 c4 1c             	add    esp,0x1c
c001c723:	5b                   	pop    ebx
c001c724:	5e                   	pop    esi
c001c725:	5f                   	pop    edi
c001c726:	5d                   	pop    ebp
c001c727:	c3                   	ret    
c001c728:	83 c4 1c             	add    esp,0x1c
c001c72b:	31 c0                	xor    eax,eax
c001c72d:	5b                   	pop    ebx
c001c72e:	5e                   	pop    esi
c001c72f:	5f                   	pop    edi
c001c730:	5d                   	pop    ebp
c001c731:	c3                   	ret    
c001c732:	66 90                	xchg   ax,ax
c001c734:	b8 01 00 00 00       	mov    eax,0x1
c001c739:	eb cd                	jmp    c001c708 <SoundPort::buffer32(int*, int)+0x78>
c001c73b:	90                   	nop

c001c73c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c001c73c:	57                   	push   edi
c001c73d:	56                   	push   esi
c001c73e:	53                   	push   ebx
c001c73f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c743:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001c747:	8b 86 e0 01 00 00    	mov    eax,DWORD PTR [esi+0x1e0]
c001c74d:	39 03                	cmp    DWORD PTR [ebx],eax
c001c74f:	74 13                	je     c001c764 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x28>
c001c751:	83 ec 0c             	sub    esp,0xc
c001c754:	68 8c 4e 02 c0       	push   0xc0024e8c
c001c759:	e8 3d 63 ff ff       	call   c0012a9b <Krnl::panic(char const*)>
c001c75e:	83 c4 10             	add    esp,0x10
c001c761:	8d 76 00             	lea    esi,[esi+0x0]
c001c764:	8b 86 dc 01 00 00    	mov    eax,DWORD PTR [esi+0x1dc]
c001c76a:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001c76d:	74 11                	je     c001c780 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x44>
c001c76f:	83 ec 0c             	sub    esp,0xc
c001c772:	68 52 4e 02 c0       	push   0xc0024e52
c001c777:	e8 1f 63 ff ff       	call   c0012a9b <Krnl::panic(char const*)>
c001c77c:	83 c4 10             	add    esp,0x10
c001c77f:	90                   	nop
c001c780:	8b 86 e4 01 00 00    	mov    eax,DWORD PTR [esi+0x1e4]
c001c786:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001c789:	74 11                	je     c001c79c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x60>
c001c78b:	83 ec 0c             	sub    esp,0xc
c001c78e:	68 52 4e 02 c0       	push   0xc0024e52
c001c793:	e8 03 63 ff ff       	call   c0012a9b <Krnl::panic(char const*)>
c001c798:	83 c4 10             	add    esp,0x10
c001c79b:	90                   	nop
c001c79c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001c79f:	89 c6                	mov    esi,eax
c001c7a1:	3b 44 24 14          	cmp    eax,DWORD PTR [esp+0x14]
c001c7a5:	7e 05                	jle    c001c7ac <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x70>
c001c7a7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001c7ab:	90                   	nop
c001c7ac:	85 f6                	test   esi,esi
c001c7ae:	7e 30                	jle    c001c7e0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa4>
c001c7b0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001c7b4:	8d 3c 36             	lea    edi,[esi+esi*1]
c001c7b7:	31 c9                	xor    ecx,ecx
c001c7b9:	01 d7                	add    edi,edx
c001c7bb:	90                   	nop
c001c7bc:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c001c7bf:	8b 04 08             	mov    eax,DWORD PTR [eax+ecx*1]
c001c7c2:	85 c0                	test   eax,eax
c001c7c4:	79 06                	jns    c001c7cc <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x90>
c001c7c6:	05 ff 7f 00 00       	add    eax,0x7fff
c001c7cb:	90                   	nop
c001c7cc:	c1 f8 0f             	sar    eax,0xf
c001c7cf:	83 c1 04             	add    ecx,0x4
c001c7d2:	66 01 02             	add    WORD PTR [edx],ax
c001c7d5:	83 c2 02             	add    edx,0x2
c001c7d8:	39 d7                	cmp    edi,edx
c001c7da:	75 e0                	jne    c001c7bc <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x80>
c001c7dc:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001c7df:	90                   	nop
c001c7e0:	56                   	push   esi
c001c7e1:	89 c2                	mov    edx,eax
c001c7e3:	8d 3c b5 00 00 00 00 	lea    edi,[esi*4+0x0]
c001c7ea:	29 f2                	sub    edx,esi
c001c7ec:	52                   	push   edx
c001c7ed:	50                   	push   eax
c001c7ee:	68 ac 4e 02 c0       	push   0xc0024eac
c001c7f3:	e8 39 ff fe ff       	call   c000c731 <Dbg::kprintf(char const*, ...)>
c001c7f8:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c001c7fb:	50                   	push   eax
c001c7fc:	01 f8                	add    eax,edi
c001c7fe:	50                   	push   eax
c001c7ff:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001c802:	29 f0                	sub    eax,esi
c001c804:	c1 e0 02             	shl    eax,0x2
c001c807:	50                   	push   eax
c001c808:	68 dc 4e 02 c0       	push   0xc0024edc
c001c80d:	e8 1f ff fe ff       	call   c000c731 <Dbg::kprintf(char const*, ...)>
c001c812:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001c815:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001c818:	83 c4 1c             	add    esp,0x1c
c001c81b:	01 d7                	add    edi,edx
c001c81d:	29 f0                	sub    eax,esi
c001c81f:	c1 e0 02             	shl    eax,0x2
c001c822:	50                   	push   eax
c001c823:	57                   	push   edi
c001c824:	52                   	push   edx
c001c825:	e8 b6 3b fe ff       	call   c00003e0 <memmove>
c001c82a:	29 73 14             	sub    DWORD PTR [ebx+0x14],esi
c001c82d:	83 c4 10             	add    esp,0x10
c001c830:	89 f0                	mov    eax,esi
c001c832:	5b                   	pop    ebx
c001c833:	5e                   	pop    esi
c001c834:	5f                   	pop    edi
c001c835:	c3                   	ret    
c001c836:	66 90                	xchg   ax,ax

c001c838 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c001c838:	57                   	push   edi
c001c839:	56                   	push   esi
c001c83a:	53                   	push   ebx
c001c83b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c83f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001c843:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001c847:	8b 87 e0 01 00 00    	mov    eax,DWORD PTR [edi+0x1e0]
c001c84d:	39 06                	cmp    DWORD PTR [esi],eax
c001c84f:	74 13                	je     c001c864 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x2c>
c001c851:	83 ec 0c             	sub    esp,0xc
c001c854:	68 00 4f 02 c0       	push   0xc0024f00
c001c859:	e8 3d 62 ff ff       	call   c0012a9b <Krnl::panic(char const*)>
c001c85e:	83 c4 10             	add    esp,0x10
c001c861:	8d 76 00             	lea    esi,[esi+0x0]
c001c864:	8b 87 dc 01 00 00    	mov    eax,DWORD PTR [edi+0x1dc]
c001c86a:	39 46 04             	cmp    DWORD PTR [esi+0x4],eax
c001c86d:	74 11                	je     c001c880 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x48>
c001c86f:	83 ec 0c             	sub    esp,0xc
c001c872:	68 6e 4e 02 c0       	push   0xc0024e6e
c001c877:	e8 1f 62 ff ff       	call   c0012a9b <Krnl::panic(char const*)>
c001c87c:	83 c4 10             	add    esp,0x10
c001c87f:	90                   	nop
c001c880:	8b 87 e4 01 00 00    	mov    eax,DWORD PTR [edi+0x1e4]
c001c886:	39 46 08             	cmp    DWORD PTR [esi+0x8],eax
c001c889:	74 11                	je     c001c89c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x64>
c001c88b:	83 ec 0c             	sub    esp,0xc
c001c88e:	68 6e 4e 02 c0       	push   0xc0024e6e
c001c893:	e8 03 62 ff ff       	call   c0012a9b <Krnl::panic(char const*)>
c001c898:	83 c4 10             	add    esp,0x10
c001c89b:	90                   	nop
c001c89c:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c001c89f:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
c001c8a3:	7e 07                	jle    c001c8ac <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x74>
c001c8a5:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001c8a9:	8d 76 00             	lea    esi,[esi+0x0]
c001c8ac:	85 ff                	test   edi,edi
c001c8ae:	7e 1c                	jle    c001c8cc <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x94>
c001c8b0:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c001c8b7:	31 c0                	xor    eax,eax
c001c8b9:	8d 76 00             	lea    esi,[esi+0x0]
c001c8bc:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001c8bf:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c001c8c2:	01 14 03             	add    DWORD PTR [ebx+eax*1],edx
c001c8c5:	83 c0 04             	add    eax,0x4
c001c8c8:	39 c1                	cmp    ecx,eax
c001c8ca:	75 f0                	jne    c001c8bc <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x84>
c001c8cc:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001c8cf:	50                   	push   eax
c001c8d0:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001c8d3:	29 f8                	sub    eax,edi
c001c8d5:	c1 e0 02             	shl    eax,0x2
c001c8d8:	50                   	push   eax
c001c8d9:	8d 04 ba             	lea    eax,[edx+edi*4]
c001c8dc:	50                   	push   eax
c001c8dd:	52                   	push   edx
c001c8de:	e8 fd 3a fe ff       	call   c00003e0 <memmove>
c001c8e3:	29 7e 14             	sub    DWORD PTR [esi+0x14],edi
c001c8e6:	83 c4 10             	add    esp,0x10
c001c8e9:	89 f8                	mov    eax,edi
c001c8eb:	5b                   	pop    ebx
c001c8ec:	5e                   	pop    esi
c001c8ed:	5f                   	pop    edi
c001c8ee:	c3                   	ret    
c001c8ef:	90                   	nop

c001c8f0 <PCI::open(int, int, void*)>:
c001c8f0:	83 ec 18             	sub    esp,0x18
c001c8f3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c8f7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001c8fb:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001c901:	8b 10                	mov    edx,DWORD PTR [eax]
c001c903:	50                   	push   eax
c001c904:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001c907:	31 c0                	xor    eax,eax
c001c909:	83 c4 1c             	add    esp,0x1c
c001c90c:	c3                   	ret    
c001c90d:	90                   	nop

c001c90e <PCI::close(int, int, void*)>:
c001c90e:	31 c0                	xor    eax,eax
c001c910:	c3                   	ret    
c001c911:	90                   	nop

c001c912 <PCI::PCI()>:
c001c912:	83 ec 0c             	sub    esp,0xc
c001c915:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c919:	83 ec 08             	sub    esp,0x8
c001c91c:	68 1f 4f 02 c0       	push   0xc0024f1f
c001c921:	50                   	push   eax
c001c922:	e8 e1 0b ff ff       	call   c000d508 <Bus::Bus(char const*)>
c001c927:	83 c4 10             	add    esp,0x10
c001c92a:	ba f4 50 02 c0       	mov    edx,0xc00250f4
c001c92f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c933:	89 10                	mov    DWORD PTR [eax],edx
c001c935:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c939:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c001c943:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c947:	a3 40 a2 02 c0       	mov    ds:0xc002a240,eax
c001c94c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c950:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001c956:	0f b6 d0             	movzx  edx,al
c001c959:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c95d:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001c964:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c968:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001c96e:	0f b6 d0             	movzx  edx,al
c001c971:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c975:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001c97a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c97e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001c984:	8d 50 01             	lea    edx,[eax+0x1]
c001c987:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001c98b:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001c991:	0f b6 d0             	movzx  edx,al
c001c994:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c998:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001c99c:	83 c9 c0             	or     ecx,0xffffffc0
c001c99f:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001c9a3:	90                   	nop
c001c9a4:	83 c4 0c             	add    esp,0xc
c001c9a7:	c3                   	ret    

c001c9a8 <PCI::readBAR8(unsigned int, int)>:
c001c9a8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001c9ac:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c9b0:	f6 c2 01             	test   dl,0x1
c001c9b3:	74 07                	je     c001c9bc <PCI::readBAR8(unsigned int, int)+0x14>
c001c9b5:	83 e2 fc             	and    edx,0xfffffffc
c001c9b8:	01 c2                	add    edx,eax
c001c9ba:	ec                   	in     al,dx
c001c9bb:	c3                   	ret    
c001c9bc:	83 e2 f0             	and    edx,0xfffffff0
c001c9bf:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c001c9c2:	c3                   	ret    
c001c9c3:	90                   	nop

c001c9c4 <PCI::readBAR16(unsigned int, int)>:
c001c9c4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001c9c8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c9cc:	f6 c2 01             	test   dl,0x1
c001c9cf:	74 08                	je     c001c9d9 <PCI::readBAR16(unsigned int, int)+0x15>
c001c9d1:	83 e2 fc             	and    edx,0xfffffffc
c001c9d4:	01 c2                	add    edx,eax
c001c9d6:	66 ed                	in     ax,dx
c001c9d8:	c3                   	ret    
c001c9d9:	83 e2 f0             	and    edx,0xfffffff0
c001c9dc:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c001c9e0:	c3                   	ret    
c001c9e1:	90                   	nop

c001c9e2 <PCI::readBAR32(unsigned int, int)>:
c001c9e2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001c9e6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c9ea:	f6 c2 01             	test   dl,0x1
c001c9ed:	74 07                	je     c001c9f6 <PCI::readBAR32(unsigned int, int)+0x14>
c001c9ef:	83 e2 fc             	and    edx,0xfffffffc
c001c9f2:	01 c2                	add    edx,eax
c001c9f4:	ed                   	in     eax,dx
c001c9f5:	c3                   	ret    
c001c9f6:	83 e2 f0             	and    edx,0xfffffff0
c001c9f9:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c001c9fc:	c3                   	ret    
c001c9fd:	90                   	nop

c001c9fe <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c001c9fe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ca02:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ca06:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ca0a:	f6 c2 01             	test   dl,0x1
c001ca0d:	74 07                	je     c001ca16 <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c001ca0f:	83 e2 fc             	and    edx,0xfffffffc
c001ca12:	01 ca                	add    edx,ecx
c001ca14:	ee                   	out    dx,al
c001ca15:	c3                   	ret    
c001ca16:	83 e2 f0             	and    edx,0xfffffff0
c001ca19:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c001ca1c:	c3                   	ret    
c001ca1d:	90                   	nop

c001ca1e <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c001ca1e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ca22:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ca26:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ca2a:	f6 c2 01             	test   dl,0x1
c001ca2d:	74 08                	je     c001ca37 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c001ca2f:	83 e2 fc             	and    edx,0xfffffffc
c001ca32:	01 ca                	add    edx,ecx
c001ca34:	66 ef                	out    dx,ax
c001ca36:	c3                   	ret    
c001ca37:	83 e2 f0             	and    edx,0xfffffff0
c001ca3a:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c001ca3e:	c3                   	ret    
c001ca3f:	90                   	nop

c001ca40 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c001ca40:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ca44:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ca48:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ca4c:	f6 c2 01             	test   dl,0x1
c001ca4f:	74 07                	je     c001ca58 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c001ca51:	83 e2 fc             	and    edx,0xfffffffc
c001ca54:	01 ca                	add    edx,ecx
c001ca56:	ef                   	out    dx,eax
c001ca57:	c3                   	ret    
c001ca58:	83 e2 f0             	and    edx,0xfffffff0
c001ca5b:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c001ca5e:	c3                   	ret    
c001ca5f:	90                   	nop

c001ca60 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001ca60:	55                   	push   ebp
c001ca61:	57                   	push   edi
c001ca62:	56                   	push   esi
c001ca63:	53                   	push   ebx
c001ca64:	83 ec 0c             	sub    esp,0xc
c001ca67:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001ca6b:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001ca6f:	89 f0                	mov    eax,esi
c001ca71:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001ca75:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001ca79:	3c 07                	cmp    al,0x7
c001ca7b:	76 10                	jbe    c001ca8d <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c001ca7d:	83 ec 0c             	sub    esp,0xc
c001ca80:	68 27 4f 02 c0       	push   0xc0024f27
c001ca85:	e8 11 60 ff ff       	call   c0012a9b <Krnl::panic(char const*)>
c001ca8a:	83 c4 10             	add    esp,0x10
c001ca8d:	80 fb 0f             	cmp    bl,0xf
c001ca90:	76 10                	jbe    c001caa2 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x42>
c001ca92:	83 ec 0c             	sub    esp,0xc
c001ca95:	68 57 4f 02 c0       	push   0xc0024f57
c001ca9a:	e8 fc 5f ff ff       	call   c0012a9b <Krnl::panic(char const*)>
c001ca9f:	83 c4 10             	add    esp,0x10
c001caa2:	8d 04 36             	lea    eax,[esi+esi*1]
c001caa5:	ba f8 0c 00 00       	mov    edx,0xcf8
c001caaa:	83 c8 f0             	or     eax,0xfffffff0
c001caad:	ee                   	out    dx,al
c001caae:	ba fa 0c 00 00       	mov    edx,0xcfa
c001cab3:	89 e8                	mov    eax,ebp
c001cab5:	ee                   	out    dx,al
c001cab6:	83 c4 0c             	add    esp,0xc
c001cab9:	89 d8                	mov    eax,ebx
c001cabb:	66 81 e7 fc 00       	and    di,0xfc
c001cac0:	5b                   	pop    ebx
c001cac1:	c1 e0 08             	shl    eax,0x8
c001cac4:	5e                   	pop    esi
c001cac5:	09 f8                	or     eax,edi
c001cac7:	5f                   	pop    edi
c001cac8:	66 0d 00 c0          	or     ax,0xc000
c001cacc:	5d                   	pop    ebp
c001cacd:	c3                   	ret    

c001cace <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001cace:	57                   	push   edi
c001cacf:	56                   	push   esi
c001cad0:	53                   	push   ebx
c001cad1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001cad5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001cad9:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c001cadf:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001cae3:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001cae7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001caeb:	83 ff 01             	cmp    edi,0x1
c001caee:	75 3e                	jne    c001cb2e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x60>
c001caf0:	89 de                	mov    esi,ebx
c001caf2:	0f b6 c0             	movzx  eax,al
c001caf5:	81 e6 fc 00 00 00    	and    esi,0xfc
c001cafb:	c1 e0 10             	shl    eax,0x10
c001cafe:	0f b6 c9             	movzx  ecx,cl
c001cb01:	09 f0                	or     eax,esi
c001cb03:	c1 e1 08             	shl    ecx,0x8
c001cb06:	0f b6 d2             	movzx  edx,dl
c001cb09:	09 c8                	or     eax,ecx
c001cb0b:	c1 e2 0b             	shl    edx,0xb
c001cb0e:	09 d0                	or     eax,edx
c001cb10:	ba f8 0c 00 00       	mov    edx,0xcf8
c001cb15:	0d 00 00 00 80       	or     eax,0x80000000
c001cb1a:	ef                   	out    dx,eax
c001cb1b:	ba fc 0c 00 00       	mov    edx,0xcfc
c001cb20:	ed                   	in     eax,dx
c001cb21:	83 e3 02             	and    ebx,0x2
c001cb24:	0f b6 cb             	movzx  ecx,bl
c001cb27:	c1 e1 03             	shl    ecx,0x3
c001cb2a:	d3 e8                	shr    eax,cl
c001cb2c:	eb 43                	jmp    c001cb71 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c001cb2e:	83 ff 02             	cmp    edi,0x2
c001cb31:	75 2c                	jne    c001cb5f <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x91>
c001cb33:	83 ec 0c             	sub    esp,0xc
c001cb36:	0f b6 c9             	movzx  ecx,cl
c001cb39:	0f b6 d2             	movzx  edx,dl
c001cb3c:	0f b6 fb             	movzx  edi,bl
c001cb3f:	0f b6 c0             	movzx  eax,al
c001cb42:	57                   	push   edi
c001cb43:	51                   	push   ecx
c001cb44:	52                   	push   edx
c001cb45:	50                   	push   eax
c001cb46:	56                   	push   esi
c001cb47:	e8 14 ff ff ff       	call   c001ca60 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001cb4c:	89 c2                	mov    edx,eax
c001cb4e:	ed                   	in     eax,dx
c001cb4f:	83 e3 02             	and    ebx,0x2
c001cb52:	83 c4 20             	add    esp,0x20
c001cb55:	0f b6 cb             	movzx  ecx,bl
c001cb58:	c1 e1 03             	shl    ecx,0x3
c001cb5b:	d3 e8                	shr    eax,cl
c001cb5d:	eb 12                	jmp    c001cb71 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c001cb5f:	83 ec 0c             	sub    esp,0xc
c001cb62:	68 87 4f 02 c0       	push   0xc0024f87
c001cb67:	e8 2f 5f ff ff       	call   c0012a9b <Krnl::panic(char const*)>
c001cb6c:	83 c4 10             	add    esp,0x10
c001cb6f:	31 c0                	xor    eax,eax
c001cb71:	5b                   	pop    ebx
c001cb72:	5e                   	pop    esi
c001cb73:	5f                   	pop    edi
c001cb74:	c3                   	ret    
c001cb75:	90                   	nop

c001cb76 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001cb76:	83 ec 18             	sub    esp,0x18
c001cb79:	6a 00                	push   0x0
c001cb7b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cb80:	50                   	push   eax
c001cb81:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cb86:	50                   	push   eax
c001cb87:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cb8c:	50                   	push   eax
c001cb8d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cb91:	e8 38 ff ff ff       	call   c001cace <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001cb96:	83 c4 2c             	add    esp,0x2c
c001cb99:	c3                   	ret    

c001cb9a <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001cb9a:	83 ec 18             	sub    esp,0x18
c001cb9d:	6a 0e                	push   0xe
c001cb9f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cba4:	50                   	push   eax
c001cba5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cbaa:	50                   	push   eax
c001cbab:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cbb0:	50                   	push   eax
c001cbb1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cbb5:	e8 14 ff ff ff       	call   c001cace <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001cbba:	83 c4 2c             	add    esp,0x2c
c001cbbd:	0f b6 c0             	movzx  eax,al
c001cbc0:	c3                   	ret    
c001cbc1:	90                   	nop

c001cbc2 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001cbc2:	55                   	push   ebp
c001cbc3:	57                   	push   edi
c001cbc4:	56                   	push   esi
c001cbc5:	53                   	push   ebx
c001cbc6:	83 ec 18             	sub    esp,0x18
c001cbc9:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c001cbce:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c001cbd3:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c001cbd8:	6a 0a                	push   0xa
c001cbda:	56                   	push   esi
c001cbdb:	55                   	push   ebp
c001cbdc:	57                   	push   edi
c001cbdd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001cbe1:	e8 e8 fe ff ff       	call   c001cace <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001cbe6:	83 c4 14             	add    esp,0x14
c001cbe9:	89 c3                	mov    ebx,eax
c001cbeb:	6a 0a                	push   0xa
c001cbed:	0f b6 db             	movzx  ebx,bl
c001cbf0:	56                   	push   esi
c001cbf1:	55                   	push   ebp
c001cbf2:	57                   	push   edi
c001cbf3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001cbf7:	e8 d2 fe ff ff       	call   c001cace <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001cbfc:	83 c4 2c             	add    esp,0x2c
c001cbff:	25 00 ff 00 00       	and    eax,0xff00
c001cc04:	09 d8                	or     eax,ebx
c001cc06:	5b                   	pop    ebx
c001cc07:	5e                   	pop    esi
c001cc08:	5f                   	pop    edi
c001cc09:	5d                   	pop    ebp
c001cc0a:	c3                   	ret    
c001cc0b:	90                   	nop

c001cc0c <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001cc0c:	83 ec 18             	sub    esp,0x18
c001cc0f:	6a 08                	push   0x8
c001cc11:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cc16:	50                   	push   eax
c001cc17:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cc1c:	50                   	push   eax
c001cc1d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cc22:	50                   	push   eax
c001cc23:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cc27:	e8 a2 fe ff ff       	call   c001cace <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001cc2c:	83 c4 2c             	add    esp,0x2c
c001cc2f:	0f b6 c4             	movzx  eax,ah
c001cc32:	c3                   	ret    
c001cc33:	90                   	nop

c001cc34 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001cc34:	83 ec 18             	sub    esp,0x18
c001cc37:	6a 08                	push   0x8
c001cc39:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cc3e:	50                   	push   eax
c001cc3f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cc44:	50                   	push   eax
c001cc45:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cc4a:	50                   	push   eax
c001cc4b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cc4f:	e8 7a fe ff ff       	call   c001cace <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001cc54:	83 c4 2c             	add    esp,0x2c
c001cc57:	c3                   	ret    

c001cc58 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001cc58:	83 ec 18             	sub    esp,0x18
c001cc5b:	6a 3c                	push   0x3c
c001cc5d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cc62:	50                   	push   eax
c001cc63:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cc68:	50                   	push   eax
c001cc69:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cc6e:	50                   	push   eax
c001cc6f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cc73:	e8 56 fe ff ff       	call   c001cace <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001cc78:	83 c4 2c             	add    esp,0x2c
c001cc7b:	c3                   	ret    

c001cc7c <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001cc7c:	83 ec 18             	sub    esp,0x18
c001cc7f:	6a 18                	push   0x18
c001cc81:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cc86:	50                   	push   eax
c001cc87:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cc8c:	50                   	push   eax
c001cc8d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cc92:	50                   	push   eax
c001cc93:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cc97:	e8 32 fe ff ff       	call   c001cace <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001cc9c:	83 c4 2c             	add    esp,0x2c
c001cc9f:	0f b6 c4             	movzx  eax,ah
c001cca2:	c3                   	ret    
c001cca3:	90                   	nop

c001cca4 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001cca4:	55                   	push   ebp
c001cca5:	57                   	push   edi
c001cca6:	56                   	push   esi
c001cca7:	53                   	push   ebx
c001cca8:	83 ec 28             	sub    esp,0x28
c001ccab:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001ccaf:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c001ccb4:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c001ccb9:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c001ccbe:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001ccc5:	8d 43 12             	lea    eax,[ebx+0x12]
c001ccc8:	83 c3 10             	add    ebx,0x10
c001cccb:	0f b6 c0             	movzx  eax,al
c001ccce:	0f b6 db             	movzx  ebx,bl
c001ccd1:	50                   	push   eax
c001ccd2:	51                   	push   ecx
c001ccd3:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c001ccd7:	57                   	push   edi
c001ccd8:	55                   	push   ebp
c001ccd9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001ccdd:	e8 ec fd ff ff       	call   c001cace <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001cce2:	83 c4 14             	add    esp,0x14
c001cce5:	89 c6                	mov    esi,eax
c001cce7:	53                   	push   ebx
c001cce8:	c1 e6 10             	shl    esi,0x10
c001cceb:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001ccef:	51                   	push   ecx
c001ccf0:	57                   	push   edi
c001ccf1:	55                   	push   ebp
c001ccf2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001ccf6:	e8 d3 fd ff ff       	call   c001cace <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ccfb:	83 c4 3c             	add    esp,0x3c
c001ccfe:	0f b7 c0             	movzx  eax,ax
c001cd01:	5b                   	pop    ebx
c001cd02:	09 f0                	or     eax,esi
c001cd04:	5e                   	pop    esi
c001cd05:	5f                   	pop    edi
c001cd06:	5d                   	pop    ebp
c001cd07:	c3                   	ret    

c001cd08 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001cd08:	55                   	push   ebp
c001cd09:	57                   	push   edi
c001cd0a:	56                   	push   esi
c001cd0b:	53                   	push   ebx
c001cd0c:	83 ec 0c             	sub    esp,0xc
c001cd0f:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001cd13:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001cd17:	89 f5                	mov    ebp,esi
c001cd19:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c001cd1f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cd23:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001cd27:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001cd2b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001cd2f:	83 f9 01             	cmp    ecx,0x1
c001cd32:	75 5d                	jne    c001cd91 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c001cd34:	0f b6 c8             	movzx  ecx,al
c001cd37:	0f b6 d2             	movzx  edx,dl
c001cd3a:	c1 e1 10             	shl    ecx,0x10
c001cd3d:	c1 e2 0b             	shl    edx,0xb
c001cd40:	89 f0                	mov    eax,esi
c001cd42:	25 fc 00 00 00       	and    eax,0xfc
c001cd47:	09 c1                	or     ecx,eax
c001cd49:	89 e8                	mov    eax,ebp
c001cd4b:	0f b6 c0             	movzx  eax,al
c001cd4e:	c1 e0 08             	shl    eax,0x8
c001cd51:	09 c1                	or     ecx,eax
c001cd53:	09 d1                	or     ecx,edx
c001cd55:	ba f8 0c 00 00       	mov    edx,0xcf8
c001cd5a:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001cd60:	89 c8                	mov    eax,ecx
c001cd62:	ef                   	out    dx,eax
c001cd63:	ba fc 0c 00 00       	mov    edx,0xcfc
c001cd68:	ed                   	in     eax,dx
c001cd69:	0f b7 db             	movzx  ebx,bx
c001cd6c:	83 e6 02             	and    esi,0x2
c001cd6f:	74 0a                	je     c001cd7b <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c001cd71:	0f b7 d0             	movzx  edx,ax
c001cd74:	c1 e3 10             	shl    ebx,0x10
c001cd77:	09 d3                	or     ebx,edx
c001cd79:	eb 05                	jmp    c001cd80 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c001cd7b:	66 31 c0             	xor    ax,ax
c001cd7e:	09 c3                	or     ebx,eax
c001cd80:	ba f8 0c 00 00       	mov    edx,0xcf8
c001cd85:	89 c8                	mov    eax,ecx
c001cd87:	ef                   	out    dx,eax
c001cd88:	ba fc 0c 00 00       	mov    edx,0xcfc
c001cd8d:	89 d8                	mov    eax,ebx
c001cd8f:	eb 41                	jmp    c001cdd2 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001cd91:	83 f9 02             	cmp    ecx,0x2
c001cd94:	75 45                	jne    c001cddb <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c001cd96:	83 ec 0c             	sub    esp,0xc
c001cd99:	0f b6 d2             	movzx  edx,dl
c001cd9c:	89 f1                	mov    ecx,esi
c001cd9e:	0f b6 c0             	movzx  eax,al
c001cda1:	0f b6 f1             	movzx  esi,cl
c001cda4:	89 e9                	mov    ecx,ebp
c001cda6:	56                   	push   esi
c001cda7:	0f b6 c9             	movzx  ecx,cl
c001cdaa:	51                   	push   ecx
c001cdab:	52                   	push   edx
c001cdac:	50                   	push   eax
c001cdad:	57                   	push   edi
c001cdae:	e8 ad fc ff ff       	call   c001ca60 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001cdb3:	89 c2                	mov    edx,eax
c001cdb5:	ed                   	in     eax,dx
c001cdb6:	83 c4 20             	add    esp,0x20
c001cdb9:	0f b7 db             	movzx  ebx,bx
c001cdbc:	f6 c2 02             	test   dl,0x2
c001cdbf:	74 0c                	je     c001cdcd <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c001cdc1:	0f b7 c8             	movzx  ecx,ax
c001cdc4:	89 d8                	mov    eax,ebx
c001cdc6:	c1 e0 10             	shl    eax,0x10
c001cdc9:	09 c8                	or     eax,ecx
c001cdcb:	eb 05                	jmp    c001cdd2 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001cdcd:	66 31 c0             	xor    ax,ax
c001cdd0:	09 d8                	or     eax,ebx
c001cdd2:	ef                   	out    dx,eax
c001cdd3:	83 c4 0c             	add    esp,0xc
c001cdd6:	5b                   	pop    ebx
c001cdd7:	5e                   	pop    esi
c001cdd8:	5f                   	pop    edi
c001cdd9:	5d                   	pop    ebp
c001cdda:	c3                   	ret    
c001cddb:	c7 44 24 20 87 4f 02 c0 	mov    DWORD PTR [esp+0x20],0xc0024f87
c001cde3:	83 c4 0c             	add    esp,0xc
c001cde6:	5b                   	pop    ebx
c001cde7:	5e                   	pop    esi
c001cde8:	5f                   	pop    edi
c001cde9:	5d                   	pop    ebp
c001cdea:	e9 ac 5c ff ff       	jmp    c0012a9b <Krnl::panic(char const*)>
c001cdef:	90                   	nop

c001cdf0 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c001cdf0:	55                   	push   ebp
c001cdf1:	57                   	push   edi
c001cdf2:	56                   	push   esi
c001cdf3:	53                   	push   ebx
c001cdf4:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001cdfa:	f6 05 41 63 02 c0 08 	test   BYTE PTR ds:0xc0026341,0x8
c001ce01:	75 0f                	jne    c001ce12 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x22>
c001ce03:	80 3d 4c a2 02 c0 00 	cmp    BYTE PTR ds:0xc002a24c,0x0
c001ce0a:	0f 85 fa 00 00 00    	jne    c001cf0a <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x11a>
c001ce10:	eb 2f                	jmp    c001ce41 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x51>
c001ce12:	83 ec 0c             	sub    esp,0xc
c001ce15:	68 8d 4f 02 c0       	push   0xc0024f8d
c001ce1a:	e8 d2 c9 fe ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c001ce1f:	83 c4 10             	add    esp,0x10
c001ce22:	f6 05 40 63 02 c0 80 	test   BYTE PTR ds:0xc0026340,0x80
c001ce29:	75 d8                	jne    c001ce03 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x13>
c001ce2b:	e4 60                	in     al,0x60
c001ce2d:	3c 1c                	cmp    al,0x1c
c001ce2f:	74 04                	je     c001ce35 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x45>
c001ce31:	3c 5a                	cmp    al,0x5a
c001ce33:	75 f6                	jne    c001ce2b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x3b>
c001ce35:	e4 60                	in     al,0x60
c001ce37:	3c 5a                	cmp    al,0x5a
c001ce39:	74 fa                	je     c001ce35 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x45>
c001ce3b:	3c 1c                	cmp    al,0x1c
c001ce3d:	74 f6                	je     c001ce35 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x45>
c001ce3f:	eb c2                	jmp    c001ce03 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x13>
c001ce41:	f6 05 41 63 02 c0 08 	test   BYTE PTR ds:0xc0026341,0x8
c001ce48:	0f 85 86 00 00 00    	jne    c001ced4 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xe4>
c001ce4e:	83 ec 0c             	sub    esp,0xc
c001ce51:	68 14 01 00 00       	push   0x114
c001ce56:	e8 3c c9 fe ff       	call   c0009797 <malloc>
c001ce5b:	83 c4 0c             	add    esp,0xc
c001ce5e:	89 c3                	mov    ebx,eax
c001ce60:	ff 35 30 98 02 c0    	push   DWORD PTR ds:0xc0029830
c001ce66:	68 a7 4f 02 c0       	push   0xc0024fa7
c001ce6b:	50                   	push   eax
c001ce6c:	e8 2b fe fe ff       	call   c000cc9c <File::File(char const*, Process*)>
c001ce71:	5a                   	pop    edx
c001ce72:	59                   	pop    ecx
c001ce73:	6a 01                	push   0x1
c001ce75:	53                   	push   ebx
c001ce76:	e8 fb fe fe ff       	call   c000cd76 <File::open(FileOpenMode)>
c001ce7b:	83 c4 0c             	add    esp,0xc
c001ce7e:	8d 44 24 1f          	lea    eax,[esp+0x1f]
c001ce82:	50                   	push   eax
c001ce83:	8d 44 24 28          	lea    eax,[esp+0x28]
c001ce87:	50                   	push   eax
c001ce88:	53                   	push   ebx
c001ce89:	e8 94 01 ff ff       	call   c000d022 <File::stat(unsigned long long*, bool*)>
c001ce8e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ce92:	40                   	inc    eax
c001ce93:	89 04 24             	mov    DWORD PTR [esp],eax
c001ce96:	e8 fc c8 fe ff       	call   c0009797 <malloc>
c001ce9b:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001ce9f:	a3 48 a2 02 c0       	mov    ds:0xc002a248,eax
c001cea4:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c001cea8:	5e                   	pop    esi
c001cea9:	8b 13                	mov    edx,DWORD PTR [ebx]
c001ceab:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c001ceaf:	51                   	push   ecx
c001ceb0:	50                   	push   eax
c001ceb1:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001ceb5:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001ceb9:	53                   	push   ebx
c001ceba:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001cebd:	83 c4 14             	add    esp,0x14
c001cec0:	53                   	push   ebx
c001cec1:	e8 0e ff fe ff       	call   c000cdd4 <File::close()>
c001cec6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ceca:	83 c4 10             	add    esp,0x10
c001cecd:	a3 44 a2 02 c0       	mov    ds:0xc002a244,eax
c001ced2:	eb 36                	jmp    c001cf0a <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x11a>
c001ced4:	83 ec 0c             	sub    esp,0xc
c001ced7:	68 c0 4f 02 c0       	push   0xc0024fc0
c001cedc:	e8 10 c9 fe ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c001cee1:	83 c4 10             	add    esp,0x10
c001cee4:	f6 05 40 63 02 c0 80 	test   BYTE PTR ds:0xc0026340,0x80
c001ceeb:	0f 85 5d ff ff ff    	jne    c001ce4e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x5e>
c001cef1:	e4 60                	in     al,0x60
c001cef3:	3c 1c                	cmp    al,0x1c
c001cef5:	74 04                	je     c001cefb <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x10b>
c001cef7:	3c 5a                	cmp    al,0x5a
c001cef9:	75 f6                	jne    c001cef1 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x101>
c001cefb:	e4 60                	in     al,0x60
c001cefd:	3c 5a                	cmp    al,0x5a
c001ceff:	74 fa                	je     c001cefb <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x10b>
c001cf01:	3c 1c                	cmp    al,0x1c
c001cf03:	74 f6                	je     c001cefb <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x10b>
c001cf05:	e9 44 ff ff ff       	jmp    c001ce4e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x5e>
c001cf0a:	f6 05 41 63 02 c0 08 	test   BYTE PTR ds:0xc0026341,0x8
c001cf11:	75 0b                	jne    c001cf1e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x12e>
c001cf13:	31 f6                	xor    esi,esi
c001cf15:	31 db                	xor    ebx,ebx
c001cf17:	31 ed                	xor    ebp,ebp
c001cf19:	e9 a3 01 00 00       	jmp    c001d0c1 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2d1>
c001cf1e:	83 ec 0c             	sub    esp,0xc
c001cf21:	68 d2 4f 02 c0       	push   0xc0024fd2
c001cf26:	e8 c6 c8 fe ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c001cf2b:	8b 15 40 63 02 c0    	mov    edx,DWORD PTR ds:0xc0026340
c001cf31:	83 c4 10             	add    esp,0x10
c001cf34:	f6 c2 80             	test   dl,0x80
c001cf37:	74 0c                	je     c001cf45 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x155>
c001cf39:	0f ba e2 0b          	bt     edx,0xb
c001cf3d:	72 1a                	jb     c001cf59 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x169>
c001cf3f:	eb d2                	jmp    c001cf13 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x123>
c001cf41:	3c 5a                	cmp    al,0x5a
c001cf43:	74 0c                	je     c001cf51 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x161>
c001cf45:	e4 60                	in     al,0x60
c001cf47:	3c 1c                	cmp    al,0x1c
c001cf49:	75 f6                	jne    c001cf41 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x151>
c001cf4b:	eb 04                	jmp    c001cf51 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x161>
c001cf4d:	3c 1c                	cmp    al,0x1c
c001cf4f:	75 e8                	jne    c001cf39 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x149>
c001cf51:	e4 60                	in     al,0x60
c001cf53:	3c 5a                	cmp    al,0x5a
c001cf55:	74 fa                	je     c001cf51 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x161>
c001cf57:	eb f4                	jmp    c001cf4d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x15d>
c001cf59:	83 ec 0c             	sub    esp,0xc
c001cf5c:	68 d7 4f 02 c0       	push   0xc0024fd7
c001cf61:	e8 8b c8 fe ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c001cf66:	83 c4 10             	add    esp,0x10
c001cf69:	f6 05 40 63 02 c0 80 	test   BYTE PTR ds:0xc0026340,0x80
c001cf70:	75 a1                	jne    c001cf13 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x123>
c001cf72:	e4 60                	in     al,0x60
c001cf74:	3c 5a                	cmp    al,0x5a
c001cf76:	74 04                	je     c001cf7c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x18c>
c001cf78:	3c 1c                	cmp    al,0x1c
c001cf7a:	75 f6                	jne    c001cf72 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x182>
c001cf7c:	e4 60                	in     al,0x60
c001cf7e:	3c 5a                	cmp    al,0x5a
c001cf80:	74 fa                	je     c001cf7c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x18c>
c001cf82:	3c 1c                	cmp    al,0x1c
c001cf84:	74 f6                	je     c001cf7c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x18c>
c001cf86:	eb 8b                	jmp    c001cf13 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x123>
c001cf88:	f6 05 41 63 02 c0 08 	test   BYTE PTR ds:0xc0026341,0x8
c001cf8f:	0f 85 3d 01 00 00    	jne    c001d0d2 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2e2>
c001cf95:	a1 48 a2 02 c0       	mov    eax,ds:0xc002a248
c001cf9a:	8d 7e 01             	lea    edi,[esi+0x1]
c001cf9d:	8a 04 30             	mov    al,BYTE PTR [eax+esi*1]
c001cfa0:	d4 40                	aam    0x40
c001cfa2:	d5 39                	aad    0x39
c001cfa4:	f6 05 41 63 02 c0 08 	test   BYTE PTR ds:0xc0026341,0x8
c001cfab:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001cfaf:	0f 85 53 01 00 00    	jne    c001d108 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x318>
c001cfb5:	8b 15 48 a2 02 c0    	mov    edx,DWORD PTR ds:0xc002a248
c001cfbb:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c001cfbe:	d4 40                	aam    0x40
c001cfc0:	d5 39                	aad    0x39
c001cfc2:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001cfc6:	8a 44 32 03          	mov    al,BYTE PTR [edx+esi*1+0x3]
c001cfca:	d4 40                	aam    0x40
c001cfcc:	d5 39                	aad    0x39
c001cfce:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001cfd2:	8a 44 32 04          	mov    al,BYTE PTR [edx+esi*1+0x4]
c001cfd6:	d4 40                	aam    0x40
c001cfd8:	d5 39                	aad    0x39
c001cfda:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001cfde:	8a 44 32 06          	mov    al,BYTE PTR [edx+esi*1+0x6]
c001cfe2:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c001cfe6:	3c 56                	cmp    al,0x56
c001cfe8:	74 49                	je     c001d033 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x243>
c001cfea:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c001cfee:	d4 40                	aam    0x40
c001cff0:	d5 39                	aad    0x39
c001cff2:	8d 48 d0             	lea    ecx,[eax-0x30]
c001cff5:	8a 44 32 07          	mov    al,BYTE PTR [edx+esi*1+0x7]
c001cff9:	0f b6 c9             	movzx  ecx,cl
c001cffc:	c1 e1 04             	shl    ecx,0x4
c001cfff:	d4 40                	aam    0x40
c001d001:	d5 39                	aad    0x39
c001d003:	83 e8 30             	sub    eax,0x30
c001d006:	0f b6 c0             	movzx  eax,al
c001d009:	09 c1                	or     ecx,eax
c001d00b:	8a 44 32 08          	mov    al,BYTE PTR [edx+esi*1+0x8]
c001d00f:	c1 e1 04             	shl    ecx,0x4
c001d012:	d4 40                	aam    0x40
c001d014:	d5 39                	aad    0x39
c001d016:	83 e8 30             	sub    eax,0x30
c001d019:	0f b6 c0             	movzx  eax,al
c001d01c:	09 c1                	or     ecx,eax
c001d01e:	8a 44 32 09          	mov    al,BYTE PTR [edx+esi*1+0x9]
c001d022:	c1 e1 04             	shl    ecx,0x4
c001d025:	d4 40                	aam    0x40
c001d027:	d5 39                	aad    0x39
c001d029:	83 e8 30             	sub    eax,0x30
c001d02c:	0f b6 c0             	movzx  eax,al
c001d02f:	09 c8                	or     eax,ecx
c001d031:	89 c5                	mov    ebp,eax
c001d033:	8a 4c 32 0b          	mov    cl,BYTE PTR [edx+esi*1+0xb]
c001d037:	80 f9 44             	cmp    cl,0x44
c001d03a:	74 47                	je     c001d083 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x293>
c001d03c:	88 c8                	mov    al,cl
c001d03e:	d4 40                	aam    0x40
c001d040:	d5 39                	aad    0x39
c001d042:	83 e8 30             	sub    eax,0x30
c001d045:	0f b6 f8             	movzx  edi,al
c001d048:	8a 44 32 0c          	mov    al,BYTE PTR [edx+esi*1+0xc]
c001d04c:	c1 e7 04             	shl    edi,0x4
c001d04f:	d4 40                	aam    0x40
c001d051:	d5 39                	aad    0x39
c001d053:	8d 58 d0             	lea    ebx,[eax-0x30]
c001d056:	8a 44 32 0d          	mov    al,BYTE PTR [edx+esi*1+0xd]
c001d05a:	0f b6 db             	movzx  ebx,bl
c001d05d:	09 fb                	or     ebx,edi
c001d05f:	c1 e3 04             	shl    ebx,0x4
c001d062:	d4 40                	aam    0x40
c001d064:	d5 39                	aad    0x39
c001d066:	83 e8 30             	sub    eax,0x30
c001d069:	0f b6 f8             	movzx  edi,al
c001d06c:	8a 44 32 0e          	mov    al,BYTE PTR [edx+esi*1+0xe]
c001d070:	09 fb                	or     ebx,edi
c001d072:	89 df                	mov    edi,ebx
c001d074:	c1 e7 04             	shl    edi,0x4
c001d077:	d4 40                	aam    0x40
c001d079:	d5 39                	aad    0x39
c001d07b:	8d 58 d0             	lea    ebx,[eax-0x30]
c001d07e:	0f b6 db             	movzx  ebx,bl
c001d081:	09 fb                	or     ebx,edi
c001d083:	a1 44 a2 02 c0       	mov    eax,ds:0xc002a244
c001d088:	83 c6 10             	add    esi,0x10
c001d08b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d08f:	8d 7c 24 20          	lea    edi,[esp+0x20]
c001d093:	8a 04 32             	mov    al,BYTE PTR [edx+esi*1]
c001d096:	3c 0a                	cmp    al,0xa
c001d098:	0f 85 a0 00 00 00    	jne    c001d13e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x34e>
c001d09e:	3c 0a                	cmp    al,0xa
c001d0a0:	0f 94 c0             	sete   al
c001d0a3:	0f b6 c0             	movzx  eax,al
c001d0a6:	01 c6                	add    esi,eax
c001d0a8:	80 7c 24 07 56       	cmp    BYTE PTR [esp+0x7],0x56
c001d0ad:	0f 84 a2 00 00 00    	je     c001d155 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x365>
c001d0b3:	66 39 ac 24 42 01 00 00 	cmp    WORD PTR [esp+0x142],bp
c001d0bb:	0f 84 94 00 00 00    	je     c001d155 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x365>
c001d0c1:	39 35 44 a2 02 c0    	cmp    DWORD PTR ds:0xc002a244,esi
c001d0c7:	0f 8f bb fe ff ff    	jg     c001cf88 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x198>
c001d0cd:	e9 e8 00 00 00       	jmp    c001d1ba <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x3ca>
c001d0d2:	83 ec 0c             	sub    esp,0xc
c001d0d5:	68 de 4f 02 c0       	push   0xc0024fde
c001d0da:	e8 12 c7 fe ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c001d0df:	83 c4 10             	add    esp,0x10
c001d0e2:	f6 05 40 63 02 c0 80 	test   BYTE PTR ds:0xc0026340,0x80
c001d0e9:	0f 85 a6 fe ff ff    	jne    c001cf95 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1a5>
c001d0ef:	e4 60                	in     al,0x60
c001d0f1:	3c 5a                	cmp    al,0x5a
c001d0f3:	74 04                	je     c001d0f9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x309>
c001d0f5:	3c 1c                	cmp    al,0x1c
c001d0f7:	75 f6                	jne    c001d0ef <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2ff>
c001d0f9:	e4 60                	in     al,0x60
c001d0fb:	3c 5a                	cmp    al,0x5a
c001d0fd:	74 fa                	je     c001d0f9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x309>
c001d0ff:	3c 1c                	cmp    al,0x1c
c001d101:	74 f6                	je     c001d0f9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x309>
c001d103:	e9 8d fe ff ff       	jmp    c001cf95 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1a5>
c001d108:	83 ec 0c             	sub    esp,0xc
c001d10b:	68 e6 4f 02 c0       	push   0xc0024fe6
c001d110:	e8 dc c6 fe ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c001d115:	83 c4 10             	add    esp,0x10
c001d118:	f6 05 40 63 02 c0 80 	test   BYTE PTR ds:0xc0026340,0x80
c001d11f:	0f 85 90 fe ff ff    	jne    c001cfb5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1c5>
c001d125:	e4 60                	in     al,0x60
c001d127:	3c 5a                	cmp    al,0x5a
c001d129:	74 04                	je     c001d12f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x33f>
c001d12b:	3c 1c                	cmp    al,0x1c
c001d12d:	75 f6                	jne    c001d125 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x335>
c001d12f:	e4 60                	in     al,0x60
c001d131:	3c 5a                	cmp    al,0x5a
c001d133:	74 fa                	je     c001d12f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x33f>
c001d135:	3c 1c                	cmp    al,0x1c
c001d137:	74 f6                	je     c001d12f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x33f>
c001d139:	e9 77 fe ff ff       	jmp    c001cfb5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1c5>
c001d13e:	47                   	inc    edi
c001d13f:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c001d143:	0f 84 55 ff ff ff    	je     c001d09e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2ae>
c001d149:	46                   	inc    esi
c001d14a:	88 47 ff             	mov    BYTE PTR [edi-0x1],al
c001d14d:	c6 07 00             	mov    BYTE PTR [edi],0x0
c001d150:	e9 3e ff ff ff       	jmp    c001d093 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2a3>
c001d155:	80 f9 44             	cmp    cl,0x44
c001d158:	74 0e                	je     c001d168 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x378>
c001d15a:	66 39 9c 24 62 01 00 00 	cmp    WORD PTR [esp+0x162],bx
c001d162:	0f 85 59 ff ff ff    	jne    c001d0c1 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2d1>
c001d168:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001d16c:	8a 54 24 0d          	mov    dl,BYTE PTR [esp+0xd]
c001d170:	c1 e0 04             	shl    eax,0x4
c001d173:	83 ea 30             	sub    edx,0x30
c001d176:	09 d0                	or     eax,edx
c001d178:	38 84 24 40 01 00 00 	cmp    BYTE PTR [esp+0x140],al
c001d17f:	0f 85 3c ff ff ff    	jne    c001d0c1 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2d1>
c001d185:	8a 54 24 0e          	mov    dl,BYTE PTR [esp+0xe]
c001d189:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001d18d:	c1 e2 04             	shl    edx,0x4
c001d190:	83 e8 30             	sub    eax,0x30
c001d193:	09 d0                	or     eax,edx
c001d195:	38 84 24 41 01 00 00 	cmp    BYTE PTR [esp+0x141],al
c001d19c:	0f 85 1f ff ff ff    	jne    c001d0c1 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2d1>
c001d1a2:	50                   	push   eax
c001d1a3:	50                   	push   eax
c001d1a4:	8d 44 24 28          	lea    eax,[esp+0x28]
c001d1a8:	50                   	push   eax
c001d1a9:	ff b4 24 70 01 00 00 	push   DWORD PTR [esp+0x170]
c001d1b0:	e8 af 33 fe ff       	call   c0000564 <strcpy>
c001d1b5:	83 c4 10             	add    esp,0x10
c001d1b8:	eb 15                	jmp    c001d1cf <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x3df>
c001d1ba:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c001d1c1:	c7 84 24 64 01 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x164],0x0
c001d1cc:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001d1cf:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c001d1d6:	81 c4 2c 01 00 00    	add    esp,0x12c
c001d1dc:	5b                   	pop    ebx
c001d1dd:	5e                   	pop    esi
c001d1de:	5f                   	pop    edi
c001d1df:	5d                   	pop    ebp
c001d1e0:	c3                   	ret    
c001d1e1:	90                   	nop

c001d1e2 <PCI::checkBus(unsigned char)>:
c001d1e2:	56                   	push   esi
c001d1e3:	53                   	push   ebx
c001d1e4:	31 db                	xor    ebx,ebx
c001d1e6:	51                   	push   ecx
c001d1e7:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001d1ec:	52                   	push   edx
c001d1ed:	53                   	push   ebx
c001d1ee:	43                   	inc    ebx
c001d1ef:	56                   	push   esi
c001d1f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d1f4:	e8 bf 07 00 00       	call   c001d9b8 <PCI::checkDevice(unsigned char, unsigned char)>
c001d1f9:	83 c4 10             	add    esp,0x10
c001d1fc:	83 fb 20             	cmp    ebx,0x20
c001d1ff:	75 eb                	jne    c001d1ec <PCI::checkBus(unsigned char)+0xa>
c001d201:	58                   	pop    eax
c001d202:	5b                   	pop    ebx
c001d203:	5e                   	pop    esi
c001d204:	c3                   	ret    
c001d205:	90                   	nop

c001d206 <PCI::foundDevice(PCIDeviceInfo)>:
c001d206:	55                   	push   ebp
c001d207:	57                   	push   edi
c001d208:	56                   	push   esi
c001d209:	53                   	push   ebx
c001d20a:	83 ec 1c             	sub    esp,0x1c
c001d20d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001d211:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c001d217:	0f 84 20 04 00 00    	je     c001d63d <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001d21d:	f6 05 41 63 02 c0 08 	test   BYTE PTR ds:0xc0026341,0x8
c001d224:	75 37                	jne    c001d25d <PCI::foundDevice(PCIDeviceInfo)+0x57>
c001d226:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001d22a:	66 81 f9 06 04       	cmp    cx,0x406
c001d22f:	75 5b                	jne    c001d28c <PCI::foundDevice(PCIDeviceInfo)+0x86>
c001d231:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c001d236:	50                   	push   eax
c001d237:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c001d23c:	50                   	push   eax
c001d23d:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c001d242:	50                   	push   eax
c001d243:	53                   	push   ebx
c001d244:	e8 33 fa ff ff       	call   c001cc7c <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001d249:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001d24d:	0f b6 c0             	movzx  eax,al
c001d250:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001d254:	83 c4 2c             	add    esp,0x2c
c001d257:	5b                   	pop    ebx
c001d258:	5e                   	pop    esi
c001d259:	5f                   	pop    edi
c001d25a:	5d                   	pop    ebp
c001d25b:	eb 85                	jmp    c001d1e2 <PCI::checkBus(unsigned char)>
c001d25d:	83 ec 0c             	sub    esp,0xc
c001d260:	68 ef 4f 02 c0       	push   0xc0024fef
c001d265:	e8 87 c5 fe ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c001d26a:	83 c4 10             	add    esp,0x10
c001d26d:	f6 05 40 63 02 c0 80 	test   BYTE PTR ds:0xc0026340,0x80
c001d274:	75 b0                	jne    c001d226 <PCI::foundDevice(PCIDeviceInfo)+0x20>
c001d276:	e4 60                	in     al,0x60
c001d278:	3c 5a                	cmp    al,0x5a
c001d27a:	74 04                	je     c001d280 <PCI::foundDevice(PCIDeviceInfo)+0x7a>
c001d27c:	3c 1c                	cmp    al,0x1c
c001d27e:	75 f6                	jne    c001d276 <PCI::foundDevice(PCIDeviceInfo)+0x70>
c001d280:	e4 60                	in     al,0x60
c001d282:	3c 5a                	cmp    al,0x5a
c001d284:	74 fa                	je     c001d280 <PCI::foundDevice(PCIDeviceInfo)+0x7a>
c001d286:	3c 1c                	cmp    al,0x1c
c001d288:	74 f6                	je     c001d280 <PCI::foundDevice(PCIDeviceInfo)+0x7a>
c001d28a:	eb 9a                	jmp    c001d226 <PCI::foundDevice(PCIDeviceInfo)+0x20>
c001d28c:	8b 83 cc 00 00 00    	mov    eax,DWORD PTR [ebx+0xcc]
c001d292:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c001d296:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d29a:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001d29e:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001d2a2:	88 d0                	mov    al,dl
c001d2a4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001d2a9:	74 3b                	je     c001d2e6 <PCI::foundDevice(PCIDeviceInfo)+0xe0>
c001d2ab:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d2af:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c001d2b2:	85 d2                	test   edx,edx
c001d2b4:	74 24                	je     c001d2da <PCI::foundDevice(PCIDeviceInfo)+0xd4>
c001d2b6:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c001d2bc:	31 ef                	xor    edi,ebp
c001d2be:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c001d2c4:	75 14                	jne    c001d2da <PCI::foundDevice(PCIDeviceInfo)+0xd4>
c001d2c6:	39 b2 20 01 00 00    	cmp    DWORD PTR [edx+0x120],esi
c001d2cc:	75 0c                	jne    c001d2da <PCI::foundDevice(PCIDeviceInfo)+0xd4>
c001d2ce:	38 82 38 01 00 00    	cmp    BYTE PTR [edx+0x138],al
c001d2d4:	0f 84 63 03 00 00    	je     c001d63d <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001d2da:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d2de:	8b 12                	mov    edx,DWORD PTR [edx]
c001d2e0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001d2e4:	eb be                	jmp    c001d2a4 <PCI::foundDevice(PCIDeviceInfo)+0x9e>
c001d2e6:	66 81 f9 01 06       	cmp    cx,0x601
c001d2eb:	0f 85 81 01 00 00    	jne    c001d472 <PCI::foundDevice(PCIDeviceInfo)+0x26c>
c001d2f1:	f6 05 41 63 02 c0 08 	test   BYTE PTR ds:0xc0026341,0x8
c001d2f8:	75 25                	jne    c001d31f <PCI::foundDevice(PCIDeviceInfo)+0x119>
c001d2fa:	83 ec 0c             	sub    esp,0xc
c001d2fd:	68 64 01 00 00       	push   0x164
c001d302:	e8 90 c4 fe ff       	call   c0009797 <malloc>
c001d307:	89 04 24             	mov    DWORD PTR [esp],eax
c001d30a:	89 c5                	mov    ebp,eax
c001d30c:	e8 d3 12 00 00       	call   c001e5e4 <SATABus::SATABus()>
c001d311:	83 c4 10             	add    esp,0x10
c001d314:	f6 05 41 63 02 c0 08 	test   BYTE PTR ds:0xc0026341,0x8
c001d31b:	74 4a                	je     c001d367 <PCI::foundDevice(PCIDeviceInfo)+0x161>
c001d31d:	eb 2f                	jmp    c001d34e <PCI::foundDevice(PCIDeviceInfo)+0x148>
c001d31f:	83 ec 0c             	sub    esp,0xc
c001d322:	68 ff 4f 02 c0       	push   0xc0024fff
c001d327:	e8 c5 c4 fe ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c001d32c:	83 c4 10             	add    esp,0x10
c001d32f:	f6 05 40 63 02 c0 80 	test   BYTE PTR ds:0xc0026340,0x80
c001d336:	75 c2                	jne    c001d2fa <PCI::foundDevice(PCIDeviceInfo)+0xf4>
c001d338:	e4 60                	in     al,0x60
c001d33a:	3c 1c                	cmp    al,0x1c
c001d33c:	74 04                	je     c001d342 <PCI::foundDevice(PCIDeviceInfo)+0x13c>
c001d33e:	3c 5a                	cmp    al,0x5a
c001d340:	75 f6                	jne    c001d338 <PCI::foundDevice(PCIDeviceInfo)+0x132>
c001d342:	e4 60                	in     al,0x60
c001d344:	3c 5a                	cmp    al,0x5a
c001d346:	74 fa                	je     c001d342 <PCI::foundDevice(PCIDeviceInfo)+0x13c>
c001d348:	3c 1c                	cmp    al,0x1c
c001d34a:	74 f6                	je     c001d342 <PCI::foundDevice(PCIDeviceInfo)+0x13c>
c001d34c:	eb ac                	jmp    c001d2fa <PCI::foundDevice(PCIDeviceInfo)+0xf4>
c001d34e:	83 ec 0c             	sub    esp,0xc
c001d351:	68 05 50 02 c0       	push   0xc0025005
c001d356:	e8 96 c4 fe ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c001d35b:	83 c4 10             	add    esp,0x10
c001d35e:	f6 05 40 63 02 c0 80 	test   BYTE PTR ds:0xc0026340,0x80
c001d365:	74 1b                	je     c001d382 <PCI::foundDevice(PCIDeviceInfo)+0x17c>
c001d367:	50                   	push   eax
c001d368:	50                   	push   eax
c001d369:	55                   	push   ebp
c001d36a:	53                   	push   ebx
c001d36b:	e8 3e 08 ff ff       	call   c000dbae <Device::addChild(Device*)>
c001d370:	83 c4 10             	add    esp,0x10
c001d373:	f6 05 41 63 02 c0 08 	test   BYTE PTR ds:0xc0026341,0x8
c001d37a:	74 33                	je     c001d3af <PCI::foundDevice(PCIDeviceInfo)+0x1a9>
c001d37c:	eb 18                	jmp    c001d396 <PCI::foundDevice(PCIDeviceInfo)+0x190>
c001d37e:	3c 1c                	cmp    al,0x1c
c001d380:	74 0c                	je     c001d38e <PCI::foundDevice(PCIDeviceInfo)+0x188>
c001d382:	e4 60                	in     al,0x60
c001d384:	3c 5a                	cmp    al,0x5a
c001d386:	75 f6                	jne    c001d37e <PCI::foundDevice(PCIDeviceInfo)+0x178>
c001d388:	eb 04                	jmp    c001d38e <PCI::foundDevice(PCIDeviceInfo)+0x188>
c001d38a:	3c 1c                	cmp    al,0x1c
c001d38c:	75 d9                	jne    c001d367 <PCI::foundDevice(PCIDeviceInfo)+0x161>
c001d38e:	e4 60                	in     al,0x60
c001d390:	3c 5a                	cmp    al,0x5a
c001d392:	74 fa                	je     c001d38e <PCI::foundDevice(PCIDeviceInfo)+0x188>
c001d394:	eb f4                	jmp    c001d38a <PCI::foundDevice(PCIDeviceInfo)+0x184>
c001d396:	83 ec 0c             	sub    esp,0xc
c001d399:	68 0d 50 02 c0       	push   0xc002500d
c001d39e:	e8 4e c4 fe ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c001d3a3:	83 c4 10             	add    esp,0x10
c001d3a6:	f6 05 40 63 02 c0 80 	test   BYTE PTR ds:0xc0026340,0x80
c001d3ad:	74 29                	je     c001d3d8 <PCI::foundDevice(PCIDeviceInfo)+0x1d2>
c001d3af:	83 ec 2c             	sub    esp,0x2c
c001d3b2:	b9 09 00 00 00       	mov    ecx,0x9
c001d3b7:	8d 74 24 60          	lea    esi,[esp+0x60]
c001d3bb:	fc                   	cld    
c001d3bc:	89 e7                	mov    edi,esp
c001d3be:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001d3c0:	55                   	push   ebp
c001d3c1:	e8 2e 07 ff ff       	call   c000daf4 <Device::preOpenPCI(PCIDeviceInfo)>
c001d3c6:	83 c4 30             	add    esp,0x30
c001d3c9:	f6 05 41 63 02 c0 08 	test   BYTE PTR ds:0xc0026341,0x8
c001d3d0:	74 33                	je     c001d405 <PCI::foundDevice(PCIDeviceInfo)+0x1ff>
c001d3d2:	eb 18                	jmp    c001d3ec <PCI::foundDevice(PCIDeviceInfo)+0x1e6>
c001d3d4:	3c 1c                	cmp    al,0x1c
c001d3d6:	74 0c                	je     c001d3e4 <PCI::foundDevice(PCIDeviceInfo)+0x1de>
c001d3d8:	e4 60                	in     al,0x60
c001d3da:	3c 5a                	cmp    al,0x5a
c001d3dc:	75 f6                	jne    c001d3d4 <PCI::foundDevice(PCIDeviceInfo)+0x1ce>
c001d3de:	eb 04                	jmp    c001d3e4 <PCI::foundDevice(PCIDeviceInfo)+0x1de>
c001d3e0:	3c 1c                	cmp    al,0x1c
c001d3e2:	75 cb                	jne    c001d3af <PCI::foundDevice(PCIDeviceInfo)+0x1a9>
c001d3e4:	e4 60                	in     al,0x60
c001d3e6:	3c 5a                	cmp    al,0x5a
c001d3e8:	74 fa                	je     c001d3e4 <PCI::foundDevice(PCIDeviceInfo)+0x1de>
c001d3ea:	eb f4                	jmp    c001d3e0 <PCI::foundDevice(PCIDeviceInfo)+0x1da>
c001d3ec:	83 ec 0c             	sub    esp,0xc
c001d3ef:	68 15 50 02 c0       	push   0xc0025015
c001d3f4:	e8 f8 c3 fe ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c001d3f9:	83 c4 10             	add    esp,0x10
c001d3fc:	f6 05 40 63 02 c0 80 	test   BYTE PTR ds:0xc0026340,0x80
c001d403:	74 23                	je     c001d428 <PCI::foundDevice(PCIDeviceInfo)+0x222>
c001d405:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d408:	6a 00                	push   0x0
c001d40a:	6a 00                	push   0x0
c001d40c:	6a 00                	push   0x0
c001d40e:	55                   	push   ebp
c001d40f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d412:	83 c4 10             	add    esp,0x10
c001d415:	f6 05 41 63 02 c0 08 	test   BYTE PTR ds:0xc0026341,0x8
c001d41c:	0f 84 1b 02 00 00    	je     c001d63d <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001d422:	eb 18                	jmp    c001d43c <PCI::foundDevice(PCIDeviceInfo)+0x236>
c001d424:	3c 1c                	cmp    al,0x1c
c001d426:	74 0c                	je     c001d434 <PCI::foundDevice(PCIDeviceInfo)+0x22e>
c001d428:	e4 60                	in     al,0x60
c001d42a:	3c 5a                	cmp    al,0x5a
c001d42c:	75 f6                	jne    c001d424 <PCI::foundDevice(PCIDeviceInfo)+0x21e>
c001d42e:	eb 04                	jmp    c001d434 <PCI::foundDevice(PCIDeviceInfo)+0x22e>
c001d430:	3c 1c                	cmp    al,0x1c
c001d432:	75 d1                	jne    c001d405 <PCI::foundDevice(PCIDeviceInfo)+0x1ff>
c001d434:	e4 60                	in     al,0x60
c001d436:	3c 5a                	cmp    al,0x5a
c001d438:	74 fa                	je     c001d434 <PCI::foundDevice(PCIDeviceInfo)+0x22e>
c001d43a:	eb f4                	jmp    c001d430 <PCI::foundDevice(PCIDeviceInfo)+0x22a>
c001d43c:	83 ec 0c             	sub    esp,0xc
c001d43f:	68 1d 50 02 c0       	push   0xc002501d
c001d444:	e8 a8 c3 fe ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c001d449:	83 c4 10             	add    esp,0x10
c001d44c:	f6 05 40 63 02 c0 80 	test   BYTE PTR ds:0xc0026340,0x80
c001d453:	0f 85 e4 01 00 00    	jne    c001d63d <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001d459:	e4 60                	in     al,0x60
c001d45b:	3c 5a                	cmp    al,0x5a
c001d45d:	74 04                	je     c001d463 <PCI::foundDevice(PCIDeviceInfo)+0x25d>
c001d45f:	3c 1c                	cmp    al,0x1c
c001d461:	75 f6                	jne    c001d459 <PCI::foundDevice(PCIDeviceInfo)+0x253>
c001d463:	e4 60                	in     al,0x60
c001d465:	3c 5a                	cmp    al,0x5a
c001d467:	74 fa                	je     c001d463 <PCI::foundDevice(PCIDeviceInfo)+0x25d>
c001d469:	3c 1c                	cmp    al,0x1c
c001d46b:	74 f6                	je     c001d463 <PCI::foundDevice(PCIDeviceInfo)+0x25d>
c001d46d:	e9 cb 01 00 00       	jmp    c001d63d <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001d472:	66 81 f9 01 01       	cmp    cx,0x101
c001d477:	0f 85 7a 01 00 00    	jne    c001d5f7 <PCI::foundDevice(PCIDeviceInfo)+0x3f1>
c001d47d:	f6 05 41 63 02 c0 08 	test   BYTE PTR ds:0xc0026341,0x8
c001d484:	75 25                	jne    c001d4ab <PCI::foundDevice(PCIDeviceInfo)+0x2a5>
c001d486:	83 ec 0c             	sub    esp,0xc
c001d489:	68 70 02 00 00       	push   0x270
c001d48e:	e8 04 c3 fe ff       	call   c0009797 <malloc>
c001d493:	89 04 24             	mov    DWORD PTR [esp],eax
c001d496:	89 c5                	mov    ebp,eax
c001d498:	e8 df 05 00 00       	call   c001da7c <IDE::IDE()>
c001d49d:	83 c4 10             	add    esp,0x10
c001d4a0:	f6 05 41 63 02 c0 08 	test   BYTE PTR ds:0xc0026341,0x8
c001d4a7:	74 4a                	je     c001d4f3 <PCI::foundDevice(PCIDeviceInfo)+0x2ed>
c001d4a9:	eb 2f                	jmp    c001d4da <PCI::foundDevice(PCIDeviceInfo)+0x2d4>
c001d4ab:	83 ec 0c             	sub    esp,0xc
c001d4ae:	68 25 50 02 c0       	push   0xc0025025
c001d4b3:	e8 39 c3 fe ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c001d4b8:	83 c4 10             	add    esp,0x10
c001d4bb:	f6 05 40 63 02 c0 80 	test   BYTE PTR ds:0xc0026340,0x80
c001d4c2:	75 c2                	jne    c001d486 <PCI::foundDevice(PCIDeviceInfo)+0x280>
c001d4c4:	e4 60                	in     al,0x60
c001d4c6:	3c 5a                	cmp    al,0x5a
c001d4c8:	74 04                	je     c001d4ce <PCI::foundDevice(PCIDeviceInfo)+0x2c8>
c001d4ca:	3c 1c                	cmp    al,0x1c
c001d4cc:	75 f6                	jne    c001d4c4 <PCI::foundDevice(PCIDeviceInfo)+0x2be>
c001d4ce:	e4 60                	in     al,0x60
c001d4d0:	3c 5a                	cmp    al,0x5a
c001d4d2:	74 fa                	je     c001d4ce <PCI::foundDevice(PCIDeviceInfo)+0x2c8>
c001d4d4:	3c 1c                	cmp    al,0x1c
c001d4d6:	74 f6                	je     c001d4ce <PCI::foundDevice(PCIDeviceInfo)+0x2c8>
c001d4d8:	eb ac                	jmp    c001d486 <PCI::foundDevice(PCIDeviceInfo)+0x280>
c001d4da:	83 ec 0c             	sub    esp,0xc
c001d4dd:	68 2c 50 02 c0       	push   0xc002502c
c001d4e2:	e8 0a c3 fe ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c001d4e7:	83 c4 10             	add    esp,0x10
c001d4ea:	f6 05 40 63 02 c0 80 	test   BYTE PTR ds:0xc0026340,0x80
c001d4f1:	74 1b                	je     c001d50e <PCI::foundDevice(PCIDeviceInfo)+0x308>
c001d4f3:	57                   	push   edi
c001d4f4:	57                   	push   edi
c001d4f5:	55                   	push   ebp
c001d4f6:	53                   	push   ebx
c001d4f7:	e8 b2 06 ff ff       	call   c000dbae <Device::addChild(Device*)>
c001d4fc:	83 c4 10             	add    esp,0x10
c001d4ff:	f6 05 41 63 02 c0 08 	test   BYTE PTR ds:0xc0026341,0x8
c001d506:	74 33                	je     c001d53b <PCI::foundDevice(PCIDeviceInfo)+0x335>
c001d508:	eb 18                	jmp    c001d522 <PCI::foundDevice(PCIDeviceInfo)+0x31c>
c001d50a:	3c 1c                	cmp    al,0x1c
c001d50c:	74 0c                	je     c001d51a <PCI::foundDevice(PCIDeviceInfo)+0x314>
c001d50e:	e4 60                	in     al,0x60
c001d510:	3c 5a                	cmp    al,0x5a
c001d512:	75 f6                	jne    c001d50a <PCI::foundDevice(PCIDeviceInfo)+0x304>
c001d514:	eb 04                	jmp    c001d51a <PCI::foundDevice(PCIDeviceInfo)+0x314>
c001d516:	3c 1c                	cmp    al,0x1c
c001d518:	75 d9                	jne    c001d4f3 <PCI::foundDevice(PCIDeviceInfo)+0x2ed>
c001d51a:	e4 60                	in     al,0x60
c001d51c:	3c 5a                	cmp    al,0x5a
c001d51e:	74 fa                	je     c001d51a <PCI::foundDevice(PCIDeviceInfo)+0x314>
c001d520:	eb f4                	jmp    c001d516 <PCI::foundDevice(PCIDeviceInfo)+0x310>
c001d522:	83 ec 0c             	sub    esp,0xc
c001d525:	68 33 50 02 c0       	push   0xc0025033
c001d52a:	e8 c2 c2 fe ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c001d52f:	83 c4 10             	add    esp,0x10
c001d532:	f6 05 40 63 02 c0 80 	test   BYTE PTR ds:0xc0026340,0x80
c001d539:	74 29                	je     c001d564 <PCI::foundDevice(PCIDeviceInfo)+0x35e>
c001d53b:	83 ec 2c             	sub    esp,0x2c
c001d53e:	b9 09 00 00 00       	mov    ecx,0x9
c001d543:	8d 74 24 60          	lea    esi,[esp+0x60]
c001d547:	fc                   	cld    
c001d548:	89 e7                	mov    edi,esp
c001d54a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001d54c:	55                   	push   ebp
c001d54d:	e8 a2 05 ff ff       	call   c000daf4 <Device::preOpenPCI(PCIDeviceInfo)>
c001d552:	83 c4 30             	add    esp,0x30
c001d555:	f6 05 41 63 02 c0 08 	test   BYTE PTR ds:0xc0026341,0x8
c001d55c:	74 33                	je     c001d591 <PCI::foundDevice(PCIDeviceInfo)+0x38b>
c001d55e:	eb 18                	jmp    c001d578 <PCI::foundDevice(PCIDeviceInfo)+0x372>
c001d560:	3c 1c                	cmp    al,0x1c
c001d562:	74 0c                	je     c001d570 <PCI::foundDevice(PCIDeviceInfo)+0x36a>
c001d564:	e4 60                	in     al,0x60
c001d566:	3c 5a                	cmp    al,0x5a
c001d568:	75 f6                	jne    c001d560 <PCI::foundDevice(PCIDeviceInfo)+0x35a>
c001d56a:	eb 04                	jmp    c001d570 <PCI::foundDevice(PCIDeviceInfo)+0x36a>
c001d56c:	3c 1c                	cmp    al,0x1c
c001d56e:	75 cb                	jne    c001d53b <PCI::foundDevice(PCIDeviceInfo)+0x335>
c001d570:	e4 60                	in     al,0x60
c001d572:	3c 5a                	cmp    al,0x5a
c001d574:	74 fa                	je     c001d570 <PCI::foundDevice(PCIDeviceInfo)+0x36a>
c001d576:	eb f4                	jmp    c001d56c <PCI::foundDevice(PCIDeviceInfo)+0x366>
c001d578:	83 ec 0c             	sub    esp,0xc
c001d57b:	68 3a 50 02 c0       	push   0xc002503a
c001d580:	e8 6c c2 fe ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c001d585:	83 c4 10             	add    esp,0x10
c001d588:	f6 05 40 63 02 c0 80 	test   BYTE PTR ds:0xc0026340,0x80
c001d58f:	74 23                	je     c001d5b4 <PCI::foundDevice(PCIDeviceInfo)+0x3ae>
c001d591:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d594:	6a 00                	push   0x0
c001d596:	6a 00                	push   0x0
c001d598:	6a 00                	push   0x0
c001d59a:	55                   	push   ebp
c001d59b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d59e:	83 c4 10             	add    esp,0x10
c001d5a1:	f6 05 41 63 02 c0 08 	test   BYTE PTR ds:0xc0026341,0x8
c001d5a8:	0f 84 8f 00 00 00    	je     c001d63d <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001d5ae:	eb 18                	jmp    c001d5c8 <PCI::foundDevice(PCIDeviceInfo)+0x3c2>
c001d5b0:	3c 1c                	cmp    al,0x1c
c001d5b2:	74 0c                	je     c001d5c0 <PCI::foundDevice(PCIDeviceInfo)+0x3ba>
c001d5b4:	e4 60                	in     al,0x60
c001d5b6:	3c 5a                	cmp    al,0x5a
c001d5b8:	75 f6                	jne    c001d5b0 <PCI::foundDevice(PCIDeviceInfo)+0x3aa>
c001d5ba:	eb 04                	jmp    c001d5c0 <PCI::foundDevice(PCIDeviceInfo)+0x3ba>
c001d5bc:	3c 1c                	cmp    al,0x1c
c001d5be:	75 d1                	jne    c001d591 <PCI::foundDevice(PCIDeviceInfo)+0x38b>
c001d5c0:	e4 60                	in     al,0x60
c001d5c2:	3c 5a                	cmp    al,0x5a
c001d5c4:	74 fa                	je     c001d5c0 <PCI::foundDevice(PCIDeviceInfo)+0x3ba>
c001d5c6:	eb f4                	jmp    c001d5bc <PCI::foundDevice(PCIDeviceInfo)+0x3b6>
c001d5c8:	83 ec 0c             	sub    esp,0xc
c001d5cb:	68 41 50 02 c0       	push   0xc0025041
c001d5d0:	e8 1c c2 fe ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c001d5d5:	83 c4 10             	add    esp,0x10
c001d5d8:	f6 05 40 63 02 c0 80 	test   BYTE PTR ds:0xc0026340,0x80
c001d5df:	75 5c                	jne    c001d63d <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001d5e1:	e4 60                	in     al,0x60
c001d5e3:	3c 5a                	cmp    al,0x5a
c001d5e5:	74 04                	je     c001d5eb <PCI::foundDevice(PCIDeviceInfo)+0x3e5>
c001d5e7:	3c 1c                	cmp    al,0x1c
c001d5e9:	75 f6                	jne    c001d5e1 <PCI::foundDevice(PCIDeviceInfo)+0x3db>
c001d5eb:	e4 60                	in     al,0x60
c001d5ed:	3c 5a                	cmp    al,0x5a
c001d5ef:	74 fa                	je     c001d5eb <PCI::foundDevice(PCIDeviceInfo)+0x3e5>
c001d5f1:	3c 1c                	cmp    al,0x1c
c001d5f3:	74 f6                	je     c001d5eb <PCI::foundDevice(PCIDeviceInfo)+0x3e5>
c001d5f5:	eb 46                	jmp    c001d63d <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001d5f7:	83 ec 0c             	sub    esp,0xc
c001d5fa:	68 58 01 00 00       	push   0x158
c001d5ff:	e8 93 c1 fe ff       	call   c0009797 <malloc>
c001d604:	89 c5                	mov    ebp,eax
c001d606:	58                   	pop    eax
c001d607:	5a                   	pop    edx
c001d608:	68 48 50 02 c0       	push   0xc0025048
c001d60d:	55                   	push   ebp
c001d60e:	e8 a5 08 ff ff       	call   c000deb8 <DriverlessDevice::DriverlessDevice(char const*)>
c001d613:	59                   	pop    ecx
c001d614:	5e                   	pop    esi
c001d615:	55                   	push   ebp
c001d616:	53                   	push   ebx
c001d617:	e8 92 05 ff ff       	call   c000dbae <Device::addChild(Device*)>
c001d61c:	83 c4 10             	add    esp,0x10
c001d61f:	b9 09 00 00 00       	mov    ecx,0x9
c001d624:	8d 7c 24 34          	lea    edi,[esp+0x34]
c001d628:	fc                   	cld    
c001d629:	89 fe                	mov    esi,edi
c001d62b:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001d62d:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c001d631:	83 c4 1c             	add    esp,0x1c
c001d634:	5b                   	pop    ebx
c001d635:	5e                   	pop    esi
c001d636:	5f                   	pop    edi
c001d637:	5d                   	pop    ebp
c001d638:	e9 b7 04 ff ff       	jmp    c000daf4 <Device::preOpenPCI(PCIDeviceInfo)>
c001d63d:	83 c4 1c             	add    esp,0x1c
c001d640:	5b                   	pop    ebx
c001d641:	5e                   	pop    esi
c001d642:	5f                   	pop    edi
c001d643:	5d                   	pop    ebp
c001d644:	c3                   	ret    
c001d645:	90                   	nop

c001d646 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001d646:	55                   	push   ebp
c001d647:	57                   	push   edi
c001d648:	56                   	push   esi
c001d649:	53                   	push   ebx
c001d64a:	81 ec b4 00 00 00    	sub    esp,0xb4
c001d650:	8b 84 24 cc 00 00 00 	mov    eax,DWORD PTR [esp+0xcc]
c001d657:	8b ac 24 c8 00 00 00 	mov    ebp,DWORD PTR [esp+0xc8]
c001d65e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d662:	8b 84 24 d0 00 00 00 	mov    eax,DWORD PTR [esp+0xd0]
c001d669:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d66d:	8b 84 24 d4 00 00 00 	mov    eax,DWORD PTR [esp+0xd4]
c001d674:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001d678:	68 62 50 02 c0       	push   0xc0025062
c001d67d:	8d 5c 24 48          	lea    ebx,[esp+0x48]
c001d681:	53                   	push   ebx
c001d682:	e8 dd 2e fe ff       	call   c0000564 <strcpy>
c001d687:	0f b6 4c 24 24       	movzx  ecx,BYTE PTR [esp+0x24]
c001d68c:	b2 64                	mov    dl,0x64
c001d68e:	89 c8                	mov    eax,ecx
c001d690:	f6 f2                	div    dl
c001d692:	b2 0a                	mov    dl,0xa
c001d694:	83 c0 30             	add    eax,0x30
c001d697:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001d69b:	88 44 24 4c          	mov    BYTE PTR [esp+0x4c],al
c001d69f:	83 c4 10             	add    esp,0x10
c001d6a2:	89 c8                	mov    eax,ecx
c001d6a4:	f6 f2                	div    dl
c001d6a6:	89 c1                	mov    ecx,eax
c001d6a8:	0f b6 c0             	movzx  eax,al
c001d6ab:	88 e9                	mov    cl,ch
c001d6ad:	f6 f2                	div    dl
c001d6af:	88 e0                	mov    al,ah
c001d6b1:	83 c0 30             	add    eax,0x30
c001d6b4:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001d6b8:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c001d6bc:	8d 41 30             	lea    eax,[ecx+0x30]
c001d6bf:	88 44 24 25          	mov    BYTE PTR [esp+0x25],al
c001d6c3:	88 44 24 3e          	mov    BYTE PTR [esp+0x3e],al
c001d6c7:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c001d6cc:	f6 f2                	div    dl
c001d6ce:	89 c1                	mov    ecx,eax
c001d6d0:	0f b6 c0             	movzx  eax,al
c001d6d3:	88 e9                	mov    cl,ch
c001d6d5:	f6 f2                	div    dl
c001d6d7:	88 e0                	mov    al,ah
c001d6d9:	83 c0 30             	add    eax,0x30
c001d6dc:	88 44 24 26          	mov    BYTE PTR [esp+0x26],al
c001d6e0:	88 44 24 40          	mov    BYTE PTR [esp+0x40],al
c001d6e4:	8d 41 30             	lea    eax,[ecx+0x30]
c001d6e7:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c001d6eb:	88 44 24 41          	mov    BYTE PTR [esp+0x41],al
c001d6ef:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c001d6f4:	f6 f2                	div    dl
c001d6f6:	89 c1                	mov    ecx,eax
c001d6f8:	0f b6 c0             	movzx  eax,al
c001d6fb:	88 e9                	mov    cl,ch
c001d6fd:	f6 f2                	div    dl
c001d6ff:	88 e0                	mov    al,ah
c001d701:	83 c0 30             	add    eax,0x30
c001d704:	f6 05 41 63 02 c0 08 	test   BYTE PTR ds:0xc0026341,0x8
c001d70b:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c001d70f:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001d713:	8d 41 30             	lea    eax,[ecx+0x30]
c001d716:	88 44 24 29          	mov    BYTE PTR [esp+0x29],al
c001d71a:	88 44 24 44          	mov    BYTE PTR [esp+0x44],al
c001d71e:	74 29                	je     c001d749 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x103>
c001d720:	83 ec 0c             	sub    esp,0xc
c001d723:	53                   	push   ebx
c001d724:	e8 c8 c0 fe ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c001d729:	83 c4 10             	add    esp,0x10
c001d72c:	f6 05 40 63 02 c0 80 	test   BYTE PTR ds:0xc0026340,0x80
c001d733:	75 14                	jne    c001d749 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x103>
c001d735:	e4 60                	in     al,0x60
c001d737:	3c 1c                	cmp    al,0x1c
c001d739:	74 04                	je     c001d73f <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xf9>
c001d73b:	3c 5a                	cmp    al,0x5a
c001d73d:	75 f6                	jne    c001d735 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xef>
c001d73f:	e4 60                	in     al,0x60
c001d741:	3c 5a                	cmp    al,0x5a
c001d743:	74 fa                	je     c001d73f <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xf9>
c001d745:	3c 1c                	cmp    al,0x1c
c001d747:	74 f6                	je     c001d73f <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xf9>
c001d749:	0f b6 74 24 1c       	movzx  esi,BYTE PTR [esp+0x1c]
c001d74e:	0f b6 5c 24 18       	movzx  ebx,BYTE PTR [esp+0x18]
c001d753:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c001d758:	83 ec 0c             	sub    esp,0xc
c001d75b:	6a 0c                	push   0xc
c001d75d:	56                   	push   esi
c001d75e:	53                   	push   ebx
c001d75f:	57                   	push   edi
c001d760:	55                   	push   ebp
c001d761:	e8 68 f3 ff ff       	call   c001cace <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d766:	83 c4 20             	add    esp,0x20
c001d769:	56                   	push   esi
c001d76a:	53                   	push   ebx
c001d76b:	57                   	push   edi
c001d76c:	55                   	push   ebp
c001d76d:	e8 50 f4 ff ff       	call   c001cbc2 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001d772:	66 89 44 24 3a       	mov    WORD PTR [esp+0x3a],ax
c001d777:	56                   	push   esi
c001d778:	53                   	push   ebx
c001d779:	57                   	push   edi
c001d77a:	55                   	push   ebp
c001d77b:	e8 d8 f4 ff ff       	call   c001cc58 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001d780:	88 44 24 42          	mov    BYTE PTR [esp+0x42],al
c001d784:	83 c4 14             	add    esp,0x14
c001d787:	6a 3c                	push   0x3c
c001d789:	56                   	push   esi
c001d78a:	53                   	push   ebx
c001d78b:	57                   	push   edi
c001d78c:	55                   	push   ebp
c001d78d:	e8 3c f3 ff ff       	call   c001cace <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d792:	0f b6 c4             	movzx  eax,ah
c001d795:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001d799:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c001d79d:	88 84 24 bd 00 00 00 	mov    BYTE PTR [esp+0xbd],al
c001d7a4:	a1 28 63 02 c0       	mov    eax,ds:0xc0026328
c001d7a9:	83 c4 20             	add    esp,0x20
c001d7ac:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001d7b2:	83 b8 5c 11 00 00 00 	cmp    DWORD PTR [eax+0x115c],0x0
c001d7b9:	0f 84 38 01 00 00    	je     c001d8f7 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x2b1>
c001d7bf:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001d7c7:	a1 28 63 02 c0       	mov    eax,ds:0xc0026328
c001d7cc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d7d0:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001d7d6:	39 88 5c 11 00 00    	cmp    DWORD PTR [eax+0x115c],ecx
c001d7dc:	0f 8e 15 01 00 00    	jle    c001d8f7 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x2b1>
c001d7e2:	50                   	push   eax
c001d7e3:	50                   	push   eax
c001d7e4:	68 7d 50 02 c0       	push   0xc002507d
c001d7e9:	8d 44 24 68          	lea    eax,[esp+0x68]
c001d7ed:	50                   	push   eax
c001d7ee:	e8 71 2d fe ff       	call   c0000564 <strcpy>
c001d7f3:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c001d7f7:	b9 0a 00 00 00       	mov    ecx,0xa
c001d7fc:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c001d800:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001d804:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c001d808:	8a 44 24 35          	mov    al,BYTE PTR [esp+0x35]
c001d80c:	88 44 24 6e          	mov    BYTE PTR [esp+0x6e],al
c001d810:	8a 44 24 36          	mov    al,BYTE PTR [esp+0x36]
c001d814:	88 44 24 70          	mov    BYTE PTR [esp+0x70],al
c001d818:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c001d81c:	88 44 24 71          	mov    BYTE PTR [esp+0x71],al
c001d820:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c001d824:	88 44 24 73          	mov    BYTE PTR [esp+0x73],al
c001d828:	8a 44 24 39          	mov    al,BYTE PTR [esp+0x39]
c001d82c:	88 44 24 74          	mov    BYTE PTR [esp+0x74],al
c001d830:	83 c4 10             	add    esp,0x10
c001d833:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d837:	99                   	cdq    
c001d838:	f7 f9                	idiv   ecx
c001d83a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001d83e:	99                   	cdq    
c001d83f:	f7 f9                	idiv   ecx
c001d841:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c001d845:	83 c2 30             	add    edx,0x30
c001d848:	83 c0 30             	add    eax,0x30
c001d84b:	88 54 24 66          	mov    BYTE PTR [esp+0x66],dl
c001d84f:	88 44 24 67          	mov    BYTE PTR [esp+0x67],al
c001d853:	f6 05 41 63 02 c0 08 	test   BYTE PTR ds:0xc0026341,0x8
c001d85a:	74 2d                	je     c001d889 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x243>
c001d85c:	83 ec 0c             	sub    esp,0xc
c001d85f:	8d 44 24 68          	lea    eax,[esp+0x68]
c001d863:	50                   	push   eax
c001d864:	e8 88 bf fe ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c001d869:	83 c4 10             	add    esp,0x10
c001d86c:	f6 05 40 63 02 c0 80 	test   BYTE PTR ds:0xc0026340,0x80
c001d873:	75 14                	jne    c001d889 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x243>
c001d875:	e4 60                	in     al,0x60
c001d877:	3c 5a                	cmp    al,0x5a
c001d879:	74 04                	je     c001d87f <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x239>
c001d87b:	3c 1c                	cmp    al,0x1c
c001d87d:	75 f6                	jne    c001d875 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x22f>
c001d87f:	e4 60                	in     al,0x60
c001d881:	3c 5a                	cmp    al,0x5a
c001d883:	74 fa                	je     c001d87f <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x239>
c001d885:	3c 1c                	cmp    al,0x1c
c001d887:	74 f6                	je     c001d87f <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x239>
c001d889:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d88d:	a1 28 63 02 c0       	mov    eax,ds:0xc0026328
c001d892:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001d898:	8d 04 d0             	lea    eax,[eax+edx*8]
c001d89b:	0f b7 90 5c 01 00 00 	movzx  edx,WORD PTR [eax+0x15c]
c001d8a2:	39 d3                	cmp    ebx,edx
c001d8a4:	75 48                	jne    c001d8ee <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x2a8>
c001d8a6:	0f b6 80 5e 01 00 00 	movzx  eax,BYTE PTR [eax+0x15e]
c001d8ad:	3b 44 24 10          	cmp    eax,DWORD PTR [esp+0x10]
c001d8b1:	75 3b                	jne    c001d8ee <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x2a8>
c001d8b3:	83 ec 0c             	sub    esp,0xc
c001d8b6:	68 ac 50 02 c0       	push   0xc00250ac
c001d8bb:	e8 71 ee fe ff       	call   c000c731 <Dbg::kprintf(char const*, ...)>
c001d8c0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d8c4:	a1 28 63 02 c0       	mov    eax,ds:0xc0026328
c001d8c9:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001d8cf:	0f b6 84 d0 5f 01 00 00 	movzx  eax,BYTE PTR [eax+edx*8+0x15f]
c001d8d7:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c001d8db:	50                   	push   eax
c001d8dc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001d8e0:	53                   	push   ebx
c001d8e1:	68 d1 50 02 c0       	push   0xc00250d1
c001d8e6:	e8 46 ee fe ff       	call   c000c731 <Dbg::kprintf(char const*, ...)>
c001d8eb:	83 c4 20             	add    esp,0x20
c001d8ee:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001d8f2:	e9 d0 fe ff ff       	jmp    c001d7c7 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x181>
c001d8f7:	31 d2                	xor    edx,edx
c001d8f9:	83 ec 0c             	sub    esp,0xc
c001d8fc:	56                   	push   esi
c001d8fd:	53                   	push   ebx
c001d8fe:	57                   	push   edi
c001d8ff:	52                   	push   edx
c001d900:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001d904:	55                   	push   ebp
c001d905:	e8 9a f3 ff ff       	call   c001cca4 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d90a:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001d90e:	89 84 94 a4 00 00 00 	mov    DWORD PTR [esp+edx*4+0xa4],eax
c001d915:	42                   	inc    edx
c001d916:	83 c4 20             	add    esp,0x20
c001d919:	83 fa 06             	cmp    edx,0x6
c001d91c:	75 db                	jne    c001d8f9 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x2b3>
c001d91e:	66 8b 44 24 2a       	mov    ax,WORD PTR [esp+0x2a]
c001d923:	83 ec 0c             	sub    esp,0xc
c001d926:	86 e0                	xchg   al,ah
c001d928:	66 89 84 24 88 00 00 00 	mov    WORD PTR [esp+0x88],ax
c001d930:	6a 02                	push   0x2
c001d932:	56                   	push   esi
c001d933:	53                   	push   ebx
c001d934:	57                   	push   edi
c001d935:	55                   	push   ebp
c001d936:	e8 93 f1 ff ff       	call   c001cace <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d93b:	66 89 84 24 be 00 00 00 	mov    WORD PTR [esp+0xbe],ax
c001d943:	83 c4 20             	add    esp,0x20
c001d946:	56                   	push   esi
c001d947:	53                   	push   ebx
c001d948:	57                   	push   edi
c001d949:	55                   	push   ebp
c001d94a:	e8 bd f2 ff ff       	call   c001cc0c <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001d94f:	88 84 24 93 00 00 00 	mov    BYTE PTR [esp+0x93],al
c001d956:	56                   	push   esi
c001d957:	53                   	push   ebx
c001d958:	57                   	push   edi
c001d959:	55                   	push   ebp
c001d95a:	e8 17 f2 ff ff       	call   c001cb76 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001d95f:	b9 09 00 00 00       	mov    ecx,0x9
c001d964:	66 89 84 24 9e 00 00 00 	mov    WORD PTR [esp+0x9e],ax
c001d96c:	8a 44 24 42          	mov    al,BYTE PTR [esp+0x42]
c001d970:	88 84 24 bc 00 00 00 	mov    BYTE PTR [esp+0xbc],al
c001d977:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001d97b:	88 84 24 a0 00 00 00 	mov    BYTE PTR [esp+0xa0],al
c001d982:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c001d986:	88 84 24 a1 00 00 00 	mov    BYTE PTR [esp+0xa1],al
c001d98d:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c001d991:	88 84 24 a2 00 00 00 	mov    BYTE PTR [esp+0xa2],al
c001d998:	83 ec 0c             	sub    esp,0xc
c001d99b:	fc                   	cld    
c001d99c:	89 e7                	mov    edi,esp
c001d99e:	8d b4 24 a8 00 00 00 	lea    esi,[esp+0xa8]
c001d9a5:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001d9a7:	55                   	push   ebp
c001d9a8:	e8 59 f8 ff ff       	call   c001d206 <PCI::foundDevice(PCIDeviceInfo)>
c001d9ad:	81 c4 dc 00 00 00    	add    esp,0xdc
c001d9b3:	5b                   	pop    ebx
c001d9b4:	5e                   	pop    esi
c001d9b5:	5f                   	pop    edi
c001d9b6:	5d                   	pop    ebp
c001d9b7:	c3                   	ret    

c001d9b8 <PCI::checkDevice(unsigned char, unsigned char)>:
c001d9b8:	55                   	push   ebp
c001d9b9:	57                   	push   edi
c001d9ba:	56                   	push   esi
c001d9bb:	53                   	push   ebx
c001d9bc:	83 ec 0c             	sub    esp,0xc
c001d9bf:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001d9c3:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001d9c8:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001d9cd:	6a 00                	push   0x0
c001d9cf:	56                   	push   esi
c001d9d0:	57                   	push   edi
c001d9d1:	55                   	push   ebp
c001d9d2:	e8 9f f1 ff ff       	call   c001cb76 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001d9d7:	6a 00                	push   0x0
c001d9d9:	56                   	push   esi
c001d9da:	57                   	push   edi
c001d9db:	55                   	push   ebp
c001d9dc:	e8 65 fc ff ff       	call   c001d646 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001d9e1:	83 c4 20             	add    esp,0x20
c001d9e4:	6a 00                	push   0x0
c001d9e6:	56                   	push   esi
c001d9e7:	57                   	push   edi
c001d9e8:	55                   	push   ebp
c001d9e9:	e8 ac f1 ff ff       	call   c001cb9a <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001d9ee:	83 c4 10             	add    esp,0x10
c001d9f1:	84 c0                	test   al,al
c001d9f3:	79 27                	jns    c001da1c <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001d9f5:	bb 01 00 00 00       	mov    ebx,0x1
c001d9fa:	53                   	push   ebx
c001d9fb:	56                   	push   esi
c001d9fc:	57                   	push   edi
c001d9fd:	55                   	push   ebp
c001d9fe:	e8 73 f1 ff ff       	call   c001cb76 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001da03:	83 c4 10             	add    esp,0x10
c001da06:	66 40                	inc    ax
c001da08:	74 0c                	je     c001da16 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c001da0a:	53                   	push   ebx
c001da0b:	56                   	push   esi
c001da0c:	57                   	push   edi
c001da0d:	55                   	push   ebp
c001da0e:	e8 33 fc ff ff       	call   c001d646 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001da13:	83 c4 10             	add    esp,0x10
c001da16:	43                   	inc    ebx
c001da17:	83 fb 08             	cmp    ebx,0x8
c001da1a:	75 de                	jne    c001d9fa <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001da1c:	83 c4 0c             	add    esp,0xc
c001da1f:	5b                   	pop    ebx
c001da20:	5e                   	pop    esi
c001da21:	5f                   	pop    edi
c001da22:	5d                   	pop    ebp
c001da23:	c3                   	ret    

c001da24 <PCI::detect()>:
c001da24:	56                   	push   esi
c001da25:	53                   	push   ebx
c001da26:	53                   	push   ebx
c001da27:	31 db                	xor    ebx,ebx
c001da29:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001da2d:	6a 00                	push   0x0
c001da2f:	6a 00                	push   0x0
c001da31:	6a 00                	push   0x0
c001da33:	56                   	push   esi
c001da34:	e8 61 f1 ff ff       	call   c001cb9a <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001da39:	83 c4 10             	add    esp,0x10
c001da3c:	a8 80                	test   al,0x80
c001da3e:	75 21                	jne    c001da61 <PCI::detect()+0x3d>
c001da40:	51                   	push   ecx
c001da41:	51                   	push   ecx
c001da42:	6a 00                	push   0x0
c001da44:	56                   	push   esi
c001da45:	e8 98 f7 ff ff       	call   c001d1e2 <PCI::checkBus(unsigned char)>
c001da4a:	83 c4 10             	add    esp,0x10
c001da4d:	eb 24                	jmp    c001da73 <PCI::detect()+0x4f>
c001da4f:	52                   	push   edx
c001da50:	52                   	push   edx
c001da51:	53                   	push   ebx
c001da52:	43                   	inc    ebx
c001da53:	56                   	push   esi
c001da54:	e8 89 f7 ff ff       	call   c001d1e2 <PCI::checkBus(unsigned char)>
c001da59:	83 c4 10             	add    esp,0x10
c001da5c:	83 fb 08             	cmp    ebx,0x8
c001da5f:	74 12                	je     c001da73 <PCI::detect()+0x4f>
c001da61:	53                   	push   ebx
c001da62:	6a 00                	push   0x0
c001da64:	6a 00                	push   0x0
c001da66:	56                   	push   esi
c001da67:	e8 0a f1 ff ff       	call   c001cb76 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001da6c:	83 c4 10             	add    esp,0x10
c001da6f:	66 40                	inc    ax
c001da71:	74 dc                	je     c001da4f <PCI::detect()+0x2b>
c001da73:	58                   	pop    eax
c001da74:	5b                   	pop    ebx
c001da75:	5e                   	pop    esi
c001da76:	c3                   	ret    
c001da77:	90                   	nop

c001da78 <IDE::close(int, int, void*)>:
c001da78:	83 c8 ff             	or     eax,0xffffffff
c001da7b:	c3                   	ret    

c001da7c <IDE::IDE()>:
c001da7c:	83 ec 0c             	sub    esp,0xc
c001da7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001da83:	83 ec 08             	sub    esp,0x8
c001da86:	68 18 51 02 c0       	push   0xc0025118
c001da8b:	50                   	push   eax
c001da8c:	e8 cb 04 ff ff       	call   c000df5c <HardDiskController::HardDiskController(char const*)>
c001da91:	83 c4 10             	add    esp,0x10
c001da94:	ba c4 51 02 c0       	mov    edx,0xc00251c4
c001da99:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001da9d:	89 10                	mov    DWORD PTR [eax],edx
c001da9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001daa3:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001daaa:	90                   	nop
c001daab:	83 c4 0c             	add    esp,0xc
c001daae:	c3                   	ret    
c001daaf:	90                   	nop

c001dab0 <IDE::prepareInterrupt(unsigned char)>:
c001dab0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001dab5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001dab9:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001dac1:	c3                   	ret    

c001dac2 <selectDrive(unsigned char, unsigned char)>:
c001dac2:	c3                   	ret    
c001dac3:	90                   	nop

c001dac4 <IDE::getBase(unsigned char)>:
c001dac4:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001dac9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dacd:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001dad5:	c3                   	ret    

c001dad6 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001dad6:	55                   	push   ebp
c001dad7:	57                   	push   edi
c001dad8:	56                   	push   esi
c001dad9:	53                   	push   ebx
c001dada:	83 ec 1c             	sub    esp,0x1c
c001dadd:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001dae1:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001dae5:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001dae8:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001daec:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001daf0:	80 f9 03             	cmp    cl,0x3
c001daf3:	77 51                	ja     c001db46 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c001daf5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001daf9:	0f b6 f2             	movzx  esi,dl
c001dafc:	0f b6 db             	movzx  ebx,bl
c001daff:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001db02:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c001db06:	83 ca 80             	or     edx,0xffffff80
c001db09:	0f b6 d2             	movzx  edx,dl
c001db0c:	52                   	push   edx
c001db0d:	6a 0c                	push   0xc
c001db0f:	56                   	push   esi
c001db10:	57                   	push   edi
c001db11:	e8 c0 ff ff ff       	call   c001dad6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001db16:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c001db1b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001db1f:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001db23:	ee                   	out    dx,al
c001db24:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c001db29:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c001db2d:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c001db31:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001db35:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001db3d:	83 c4 2c             	add    esp,0x2c
c001db40:	5b                   	pop    ebx
c001db41:	5e                   	pop    esi
c001db42:	5f                   	pop    edi
c001db43:	5d                   	pop    ebp
c001db44:	eb 90                	jmp    c001dad6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001db46:	80 fb 07             	cmp    bl,0x7
c001db49:	77 12                	ja     c001db5d <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c001db4b:	0f b6 d2             	movzx  edx,dl
c001db4e:	0f b6 db             	movzx  ebx,bl
c001db51:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c001db59:	89 da                	mov    edx,ebx
c001db5b:	eb 2f                	jmp    c001db8c <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001db5d:	80 fb 0d             	cmp    bl,0xd
c001db60:	77 13                	ja     c001db75 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c001db62:	0f b6 d2             	movzx  edx,dl
c001db65:	0f b6 db             	movzx  ebx,bl
c001db68:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c001db6f:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001db73:	eb 17                	jmp    c001db8c <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001db75:	80 fb 15             	cmp    bl,0x15
c001db78:	77 13                	ja     c001db8d <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001db7a:	0f b6 d2             	movzx  edx,dl
c001db7d:	0f b6 db             	movzx  ebx,bl
c001db80:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c001db88:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001db8c:	ee                   	out    dx,al
c001db8d:	83 c4 1c             	add    esp,0x1c
c001db90:	5b                   	pop    ebx
c001db91:	5e                   	pop    esi
c001db92:	5f                   	pop    edi
c001db93:	5d                   	pop    ebp
c001db94:	c3                   	ret    
c001db95:	90                   	nop

c001db96 <IDE::read(unsigned char, unsigned char)>:
c001db96:	55                   	push   ebp
c001db97:	57                   	push   edi
c001db98:	56                   	push   esi
c001db99:	53                   	push   ebx
c001db9a:	83 ec 1c             	sub    esp,0x1c
c001db9d:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001dba1:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001dba5:	8d 43 f8             	lea    eax,[ebx-0x8]
c001dba8:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001dbac:	3c 03                	cmp    al,0x3
c001dbae:	77 43                	ja     c001dbf3 <IDE::read(unsigned char, unsigned char)+0x5d>
c001dbb0:	0f b6 f2             	movzx  esi,dl
c001dbb3:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001dbb6:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c001dbba:	83 c8 80             	or     eax,0xffffff80
c001dbbd:	0f b6 c0             	movzx  eax,al
c001dbc0:	50                   	push   eax
c001dbc1:	6a 0c                	push   0xc
c001dbc3:	56                   	push   esi
c001dbc4:	57                   	push   edi
c001dbc5:	e8 0c ff ff ff       	call   c001dad6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001dbca:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c001dbcf:	0f b6 c3             	movzx  eax,bl
c001dbd2:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c001dbd6:	ec                   	in     al,dx
c001dbd7:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001dbdb:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c001dbe0:	52                   	push   edx
c001dbe1:	6a 0c                	push   0xc
c001dbe3:	56                   	push   esi
c001dbe4:	57                   	push   edi
c001dbe5:	e8 ec fe ff ff       	call   c001dad6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001dbea:	83 c4 20             	add    esp,0x20
c001dbed:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001dbf1:	eb 49                	jmp    c001dc3c <IDE::read(unsigned char, unsigned char)+0xa6>
c001dbf3:	80 fb 07             	cmp    bl,0x7
c001dbf6:	77 12                	ja     c001dc0a <IDE::read(unsigned char, unsigned char)+0x74>
c001dbf8:	0f b6 d2             	movzx  edx,dl
c001dbfb:	0f b6 c3             	movzx  eax,bl
c001dbfe:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c001dc06:	89 c2                	mov    edx,eax
c001dc08:	eb 31                	jmp    c001dc3b <IDE::read(unsigned char, unsigned char)+0xa5>
c001dc0a:	80 fb 0d             	cmp    bl,0xd
c001dc0d:	77 13                	ja     c001dc22 <IDE::read(unsigned char, unsigned char)+0x8c>
c001dc0f:	0f b6 d2             	movzx  edx,dl
c001dc12:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c001dc19:	0f b6 d3             	movzx  edx,bl
c001dc1c:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001dc20:	eb 19                	jmp    c001dc3b <IDE::read(unsigned char, unsigned char)+0xa5>
c001dc22:	31 c0                	xor    eax,eax
c001dc24:	80 fb 15             	cmp    bl,0x15
c001dc27:	77 13                	ja     c001dc3c <IDE::read(unsigned char, unsigned char)+0xa6>
c001dc29:	0f b6 d2             	movzx  edx,dl
c001dc2c:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c001dc34:	0f b6 d3             	movzx  edx,bl
c001dc37:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001dc3b:	ec                   	in     al,dx
c001dc3c:	83 c4 1c             	add    esp,0x1c
c001dc3f:	5b                   	pop    ebx
c001dc40:	5e                   	pop    esi
c001dc41:	5f                   	pop    edi
c001dc42:	5d                   	pop    ebp
c001dc43:	c3                   	ret    

c001dc44 <IDE::waitInterrupt(unsigned char)>:
c001dc44:	55                   	push   ebp
c001dc45:	57                   	push   edi
c001dc46:	56                   	push   esi
c001dc47:	53                   	push   ebx
c001dc48:	31 db                	xor    ebx,ebx
c001dc4a:	83 ec 0c             	sub    esp,0xc
c001dc4d:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001dc51:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001dc56:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c001dc5e:	89 e8                	mov    eax,ebp
c001dc60:	84 c0                	test   al,al
c001dc62:	75 30                	jne    c001dc94 <IDE::waitInterrupt(unsigned char)+0x50>
c001dc64:	50                   	push   eax
c001dc65:	6a 0c                	push   0xc
c001dc67:	56                   	push   esi
c001dc68:	57                   	push   edi
c001dc69:	e8 28 ff ff ff       	call   c001db96 <IDE::read(unsigned char, unsigned char)>
c001dc6e:	83 c4 10             	add    esp,0x10
c001dc71:	a8 01                	test   al,0x1
c001dc73:	75 27                	jne    c001dc9c <IDE::waitInterrupt(unsigned char)+0x58>
c001dc75:	f6 c3 04             	test   bl,0x4
c001dc78:	75 12                	jne    c001dc8c <IDE::waitInterrupt(unsigned char)+0x48>
c001dc7a:	83 fb 32             	cmp    ebx,0x32
c001dc7d:	7e 0d                	jle    c001dc8c <IDE::waitInterrupt(unsigned char)+0x48>
c001dc7f:	83 ec 0c             	sub    esp,0xc
c001dc82:	6a 64                	push   0x64
c001dc84:	e8 4f 86 ff ff       	call   c00162d8 <milliTenthSleep(unsigned int)>
c001dc89:	83 c4 10             	add    esp,0x10
c001dc8c:	83 fb 3c             	cmp    ebx,0x3c
c001dc8f:	74 0b                	je     c001dc9c <IDE::waitInterrupt(unsigned char)+0x58>
c001dc91:	43                   	inc    ebx
c001dc92:	eb c2                	jmp    c001dc56 <IDE::waitInterrupt(unsigned char)+0x12>
c001dc94:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001dc9c:	83 c4 0c             	add    esp,0xc
c001dc9f:	89 e8                	mov    eax,ebp
c001dca1:	5b                   	pop    ebx
c001dca2:	5e                   	pop    esi
c001dca3:	5f                   	pop    edi
c001dca4:	5d                   	pop    ebp
c001dca5:	c3                   	ret    

c001dca6 <ideChannel0IRQHandler(regs*, void*)>:
c001dca6:	83 ec 10             	sub    esp,0x10
c001dca9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001dcad:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001dcb4:	6a 07                	push   0x7
c001dcb6:	6a 00                	push   0x0
c001dcb8:	50                   	push   eax
c001dcb9:	e8 d8 fe ff ff       	call   c001db96 <IDE::read(unsigned char, unsigned char)>
c001dcbe:	83 c4 1c             	add    esp,0x1c
c001dcc1:	c3                   	ret    

c001dcc2 <ideChannel1IRQHandler(regs*, void*)>:
c001dcc2:	83 ec 10             	sub    esp,0x10
c001dcc5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001dcc9:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001dcd0:	6a 07                	push   0x7
c001dcd2:	6a 01                	push   0x1
c001dcd4:	50                   	push   eax
c001dcd5:	e8 bc fe ff ff       	call   c001db96 <IDE::read(unsigned char, unsigned char)>
c001dcda:	83 c4 1c             	add    esp,0x1c
c001dcdd:	c3                   	ret    

c001dcde <IDE::enableIRQs(unsigned char, bool)>:
c001dcde:	57                   	push   edi
c001dcdf:	56                   	push   esi
c001dce0:	be 04 00 00 00       	mov    esi,0x4
c001dce5:	53                   	push   ebx
c001dce6:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001dceb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001dcef:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c001dcf4:	0f 94 c0             	sete   al
c001dcf7:	d1 e0                	shl    eax,1
c001dcf9:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c001dd00:	0f b6 c0             	movzx  eax,al
c001dd03:	50                   	push   eax
c001dd04:	6a 0c                	push   0xc
c001dd06:	57                   	push   edi
c001dd07:	53                   	push   ebx
c001dd08:	e8 c9 fd ff ff       	call   c001dad6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001dd0d:	83 c4 10             	add    esp,0x10
c001dd10:	50                   	push   eax
c001dd11:	6a 0c                	push   0xc
c001dd13:	57                   	push   edi
c001dd14:	53                   	push   ebx
c001dd15:	e8 7c fe ff ff       	call   c001db96 <IDE::read(unsigned char, unsigned char)>
c001dd1a:	83 c4 10             	add    esp,0x10
c001dd1d:	4e                   	dec    esi
c001dd1e:	75 f0                	jne    c001dd10 <IDE::enableIRQs(unsigned char, bool)+0x32>
c001dd20:	5b                   	pop    ebx
c001dd21:	5e                   	pop    esi
c001dd22:	5f                   	pop    edi
c001dd23:	c3                   	ret    

c001dd24 <IDE::open(int, int, void*)>:
c001dd24:	55                   	push   ebp
c001dd25:	57                   	push   edi
c001dd26:	56                   	push   esi
c001dd27:	53                   	push   ebx
c001dd28:	83 ec 1c             	sub    esp,0x1c
c001dd2b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001dd2f:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001dd38:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001dd41:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001dd48:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001dd4f:	0f 85 cb 02 00 00    	jne    c001e020 <IDE::open(int, int, void*)+0x2fc>
c001dd55:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001dd5b:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c001dd5f:	83 e0 7f             	and    eax,0x7f
c001dd62:	3c 05                	cmp    al,0x5
c001dd64:	74 04                	je     c001dd6a <IDE::open(int, int, void*)+0x46>
c001dd66:	3c 0f                	cmp    al,0xf
c001dd68:	75 32                	jne    c001dd9c <IDE::open(int, int, void*)+0x78>
c001dd6a:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001dd70:	83 e0 fc             	and    eax,0xfffffffc
c001dd73:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001dd7a:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001dd80:	83 e0 fc             	and    eax,0xfffffffc
c001dd83:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001dd8a:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001dd90:	83 e0 fc             	and    eax,0xfffffffc
c001dd93:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001dd9a:	eb 14                	jmp    c001ddb0 <IDE::open(int, int, void*)+0x8c>
c001dd9c:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001dda6:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001ddb0:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001ddb7:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c001ddbe:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ddc2:	89 c6                	mov    esi,eax
c001ddc4:	bf f8 0c 00 00       	mov    edi,0xcf8
c001ddc9:	c1 e6 10             	shl    esi,0x10
c001ddcc:	89 e8                	mov    eax,ebp
c001ddce:	89 fa                	mov    edx,edi
c001ddd0:	c1 e0 0b             	shl    eax,0xb
c001ddd3:	09 f0                	or     eax,esi
c001ddd5:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c001dddc:	c1 e6 08             	shl    esi,0x8
c001dddf:	09 c6                	or     esi,eax
c001dde1:	89 f0                	mov    eax,esi
c001dde3:	0d 08 00 00 80       	or     eax,0x80000008
c001dde8:	ef                   	out    dx,eax
c001dde9:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c001ddee:	89 ca                	mov    edx,ecx
c001ddf0:	ed                   	in     eax,dx
c001ddf1:	c1 e8 10             	shr    eax,0x10
c001ddf4:	3d ff ff 00 00       	cmp    eax,0xffff
c001ddf9:	0f 84 f5 00 00 00    	je     c001def4 <IDE::open(int, int, void*)+0x1d0>
c001ddff:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c001de05:	89 fa                	mov    edx,edi
c001de07:	89 f0                	mov    eax,esi
c001de09:	ef                   	out    dx,eax
c001de0a:	b0 fe                	mov    al,0xfe
c001de0c:	89 ca                	mov    edx,ecx
c001de0e:	ee                   	out    dx,al
c001de0f:	89 f0                	mov    eax,esi
c001de11:	89 fa                	mov    edx,edi
c001de13:	ef                   	out    dx,eax
c001de14:	89 ca                	mov    edx,ecx
c001de16:	ed                   	in     eax,dx
c001de17:	3c fe                	cmp    al,0xfe
c001de19:	0f 85 a9 00 00 00    	jne    c001dec8 <IDE::open(int, int, void*)+0x1a4>
c001de1f:	8b 15 28 63 02 c0    	mov    edx,DWORD PTR ds:0xc0026328
c001de25:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c001de2c:	74 33                	je     c001de61 <IDE::open(int, int, void*)+0x13d>
c001de2e:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c001de34:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c001de38:	40                   	inc    eax
c001de39:	83 ec 0c             	sub    esp,0xc
c001de3c:	0f b6 c0             	movzx  eax,al
c001de3f:	50                   	push   eax
c001de40:	55                   	push   ebp
c001de41:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001de45:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c001de4b:	51                   	push   ecx
c001de4c:	e8 37 2c ff ff       	call   c0010a88 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c001de51:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001de56:	83 c4 1c             	add    esp,0x1c
c001de59:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001de5f:	eb 0a                	jmp    c001de6b <IDE::open(int, int, void*)+0x147>
c001de61:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001de6b:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001de72:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001de79:	c1 e1 10             	shl    ecx,0x10
c001de7c:	c1 e0 08             	shl    eax,0x8
c001de7f:	bf f8 0c 00 00       	mov    edi,0xcf8
c001de84:	09 c1                	or     ecx,eax
c001de86:	89 fa                	mov    edx,edi
c001de88:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001de8f:	c1 e0 0b             	shl    eax,0xb
c001de92:	09 c1                	or     ecx,eax
c001de94:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001de9a:	89 c8                	mov    eax,ecx
c001de9c:	ef                   	out    dx,eax
c001de9d:	be fc 0c 00 00       	mov    esi,0xcfc
c001dea2:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c001dea8:	89 f2                	mov    edx,esi
c001deaa:	ee                   	out    dx,al
c001deab:	89 c8                	mov    eax,ecx
c001dead:	89 fa                	mov    edx,edi
c001deaf:	ef                   	out    dx,eax
c001deb0:	89 f2                	mov    edx,esi
c001deb2:	ed                   	in     eax,dx
c001deb3:	0f b6 c0             	movzx  eax,al
c001deb6:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c001debc:	74 46                	je     c001df04 <IDE::open(int, int, void*)+0x1e0>
c001debe:	83 ec 0c             	sub    esp,0xc
c001dec1:	68 30 51 02 c0       	push   0xc0025130
c001dec6:	eb 34                	jmp    c001defc <IDE::open(int, int, void*)+0x1d8>
c001dec8:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001ded1:	75 17                	jne    c001deea <IDE::open(int, int, void*)+0x1c6>
c001ded3:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c001ded8:	74 07                	je     c001dee1 <IDE::open(int, int, void*)+0x1bd>
c001deda:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c001dedf:	75 09                	jne    c001deea <IDE::open(int, int, void*)+0x1c6>
c001dee1:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001dee8:	eb 1a                	jmp    c001df04 <IDE::open(int, int, void*)+0x1e0>
c001deea:	83 ec 0c             	sub    esp,0xc
c001deed:	68 38 51 02 c0       	push   0xc0025138
c001def2:	eb 08                	jmp    c001defc <IDE::open(int, int, void*)+0x1d8>
c001def4:	83 ec 0c             	sub    esp,0xc
c001def7:	68 69 51 02 c0       	push   0xc0025169
c001defc:	e8 9a 4b ff ff       	call   c0012a9b <Krnl::panic(char const*)>
c001df01:	83 c4 10             	add    esp,0x10
c001df04:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c001df0b:	79 1a                	jns    c001df27 <IDE::open(int, int, void*)+0x203>
c001df0d:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001df13:	83 e0 fc             	and    eax,0xfffffffc
c001df16:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001df1d:	83 c0 08             	add    eax,0x8
c001df20:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001df27:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001df2d:	89 c2                	mov    edx,eax
c001df2f:	83 e2 0f             	and    edx,0xf
c001df32:	66 83 fa 08          	cmp    dx,0x8
c001df36:	75 0a                	jne    c001df42 <IDE::open(int, int, void*)+0x21e>
c001df38:	83 e8 02             	sub    eax,0x2
c001df3b:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001df42:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001df48:	89 c2                	mov    edx,eax
c001df4a:	83 e2 0f             	and    edx,0xf
c001df4d:	66 83 fa 08          	cmp    dx,0x8
c001df51:	75 0a                	jne    c001df5d <IDE::open(int, int, void*)+0x239>
c001df53:	83 e8 02             	sub    eax,0x2
c001df56:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001df5d:	0f b6 8b c4 00 00 00 	movzx  ecx,BYTE PTR [ebx+0xc4]
c001df64:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001df6b:	89 c8                	mov    eax,ecx
c001df6d:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001df70:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001df74:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001df78:	8d 51 01             	lea    edx,[ecx+0x1]
c001df7b:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001df80:	0f b6 d2             	movzx  edx,dl
c001df83:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001df8a:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001df8d:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001df91:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001df95:	8d 48 02             	lea    ecx,[eax+0x2]
c001df98:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001df9d:	0f b6 c9             	movzx  ecx,cl
c001dfa0:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001dfa6:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001dfa9:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001dfad:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001dfb1:	8d 50 03             	lea    edx,[eax+0x3]
c001dfb4:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001dfb9:	0f b6 d2             	movzx  edx,dl
c001dfbc:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001dfc2:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001dfc5:	83 c0 04             	add    eax,0x4
c001dfc8:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001dfcc:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001dfd0:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001dfd6:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001dfdb:	56                   	push   esi
c001dfdc:	56                   	push   esi
c001dfdd:	0f b7 83 5e 01 00 00 	movzx  eax,WORD PTR [ebx+0x15e]
c001dfe4:	50                   	push   eax
c001dfe5:	68 93 51 02 c0       	push   0xc0025193
c001dfea:	e8 42 e7 fe ff       	call   c000c731 <Dbg::kprintf(char const*, ...)>
c001dfef:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001dff6:	83 c4 10             	add    esp,0x10
c001dff9:	66 85 f6             	test   si,si
c001dffc:	74 5f                	je     c001e05d <IDE::open(int, int, void*)+0x339>
c001dffe:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001e005:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001e008:	89 d0                	mov    eax,edx
c001e00a:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001e00e:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001e012:	40                   	inc    eax
c001e013:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001e019:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001e01e:	eb 3d                	jmp    c001e05d <IDE::open(int, int, void*)+0x339>
c001e020:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c001e026:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001e02d:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001e034:	66 05 06 02          	add    ax,0x206
c001e038:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001e03f:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c001e046:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001e04d:	66 05 06 02          	add    ax,0x206
c001e051:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001e058:	e9 ca fe ff ff       	jmp    c001df27 <IDE::open(int, int, void*)+0x203>
c001e05d:	50                   	push   eax
c001e05e:	50                   	push   eax
c001e05f:	6a 00                	push   0x0
c001e061:	53                   	push   ebx
c001e062:	e8 49 fa ff ff       	call   c001dab0 <IDE::prepareInterrupt(unsigned char)>
c001e067:	5a                   	pop    edx
c001e068:	59                   	pop    ecx
c001e069:	6a 01                	push   0x1
c001e06b:	53                   	push   ebx
c001e06c:	e8 3f fa ff ff       	call   c001dab0 <IDE::prepareInterrupt(unsigned char)>
c001e071:	83 c4 0c             	add    esp,0xc
c001e074:	6a 00                	push   0x0
c001e076:	6a 00                	push   0x0
c001e078:	53                   	push   ebx
c001e079:	e8 60 fc ff ff       	call   c001dcde <IDE::enableIRQs(unsigned char, bool)>
c001e07e:	83 c4 0c             	add    esp,0xc
c001e081:	6a 00                	push   0x0
c001e083:	6a 01                	push   0x1
c001e085:	53                   	push   ebx
c001e086:	e8 53 fc ff ff       	call   c001dcde <IDE::enableIRQs(unsigned char, bool)>
c001e08b:	83 c4 10             	add    esp,0x10
c001e08e:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001e095:	74 34                	je     c001e0cb <IDE::open(int, int, void*)+0x3a7>
c001e097:	83 ec 0c             	sub    esp,0xc
c001e09a:	53                   	push   ebx
c001e09b:	6a 01                	push   0x1
c001e09d:	68 a6 dc 01 c0       	push   0xc001dca6
c001e0a2:	6a 0e                	push   0xe
c001e0a4:	53                   	push   ebx
c001e0a5:	e8 b0 fa fe ff       	call   c000db5a <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001e0aa:	83 c4 14             	add    esp,0x14
c001e0ad:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001e0b3:	53                   	push   ebx
c001e0b4:	6a 01                	push   0x1
c001e0b6:	68 c2 dc 01 c0       	push   0xc001dcc2
c001e0bb:	6a 0f                	push   0xf
c001e0bd:	53                   	push   ebx
c001e0be:	e8 97 fa fe ff       	call   c000db5a <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001e0c3:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001e0c9:	eb 38                	jmp    c001e103 <IDE::open(int, int, void*)+0x3df>
c001e0cb:	83 ec 0c             	sub    esp,0xc
c001e0ce:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001e0d8:	53                   	push   ebx
c001e0d9:	6a 00                	push   0x0
c001e0db:	68 a6 dc 01 c0       	push   0xc001dca6
c001e0e0:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001e0e6:	53                   	push   ebx
c001e0e7:	e8 6e fa fe ff       	call   c000db5a <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001e0ec:	83 c4 14             	add    esp,0x14
c001e0ef:	53                   	push   ebx
c001e0f0:	6a 00                	push   0x0
c001e0f2:	68 c2 dc 01 c0       	push   0xc001dcc2
c001e0f7:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001e0fd:	53                   	push   ebx
c001e0fe:	e8 57 fa fe ff       	call   c000db5a <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001e103:	8b 03                	mov    eax,DWORD PTR [ebx]
c001e105:	83 c4 20             	add    esp,0x20
c001e108:	83 ec 0c             	sub    esp,0xc
c001e10b:	53                   	push   ebx
c001e10c:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001e10f:	83 c4 0c             	add    esp,0xc
c001e112:	6a 07                	push   0x7
c001e114:	6a 00                	push   0x0
c001e116:	53                   	push   ebx
c001e117:	e8 7a fa ff ff       	call   c001db96 <IDE::read(unsigned char, unsigned char)>
c001e11c:	83 c4 0c             	add    esp,0xc
c001e11f:	6a 07                	push   0x7
c001e121:	6a 01                	push   0x1
c001e123:	53                   	push   ebx
c001e124:	e8 6d fa ff ff       	call   c001db96 <IDE::read(unsigned char, unsigned char)>
c001e129:	83 c4 0c             	add    esp,0xc
c001e12c:	6a 01                	push   0x1
c001e12e:	6a 00                	push   0x0
c001e130:	53                   	push   ebx
c001e131:	e8 a8 fb ff ff       	call   c001dcde <IDE::enableIRQs(unsigned char, bool)>
c001e136:	83 c4 0c             	add    esp,0xc
c001e139:	6a 01                	push   0x1
c001e13b:	6a 01                	push   0x1
c001e13d:	53                   	push   ebx
c001e13e:	e8 9b fb ff ff       	call   c001dcde <IDE::enableIRQs(unsigned char, bool)>
c001e143:	83 c4 2c             	add    esp,0x2c
c001e146:	31 c0                	xor    eax,eax
c001e148:	5b                   	pop    ebx
c001e149:	5e                   	pop    esi
c001e14a:	5f                   	pop    edi
c001e14b:	5d                   	pop    ebp
c001e14c:	c3                   	ret    
c001e14d:	90                   	nop

c001e14e <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001e14e:	55                   	push   ebp
c001e14f:	57                   	push   edi
c001e150:	56                   	push   esi
c001e151:	53                   	push   ebx
c001e152:	83 ec 1c             	sub    esp,0x1c
c001e155:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001e159:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001e15d:	8d 50 f8             	lea    edx,[eax-0x8]
c001e160:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001e164:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001e168:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001e16c:	80 fa 03             	cmp    dl,0x3
c001e16f:	77 5d                	ja     c001e1ce <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c001e171:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e175:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e179:	0f b6 db             	movzx  ebx,bl
c001e17c:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001e17f:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c001e183:	83 ca 80             	or     edx,0xffffff80
c001e186:	0f b6 d2             	movzx  edx,dl
c001e189:	52                   	push   edx
c001e18a:	6a 0c                	push   0xc
c001e18c:	53                   	push   ebx
c001e18d:	56                   	push   esi
c001e18e:	e8 43 f9 ff ff       	call   c001dad6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e193:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c001e198:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001e19c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001e1a0:	0f b6 c0             	movzx  eax,al
c001e1a3:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c001e1a7:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001e1a9:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001e1ae:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001e1b2:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001e1b6:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001e1ba:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001e1c2:	83 c4 2c             	add    esp,0x2c
c001e1c5:	5b                   	pop    ebx
c001e1c6:	5e                   	pop    esi
c001e1c7:	5f                   	pop    edi
c001e1c8:	5d                   	pop    ebp
c001e1c9:	e9 08 f9 ff ff       	jmp    c001dad6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e1ce:	3c 07                	cmp    al,0x7
c001e1d0:	77 10                	ja     c001e1e2 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c001e1d2:	0f b6 db             	movzx  ebx,bl
c001e1d5:	0f b6 d0             	movzx  edx,al
c001e1d8:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c001e1e0:	eb 2d                	jmp    c001e20f <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001e1e2:	3c 0d                	cmp    al,0xd
c001e1e4:	77 13                	ja     c001e1f9 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c001e1e6:	0f b6 db             	movzx  ebx,bl
c001e1e9:	0f b6 c0             	movzx  eax,al
c001e1ec:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c001e1f3:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c001e1f7:	eb 16                	jmp    c001e20f <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001e1f9:	3c 15                	cmp    al,0x15
c001e1fb:	77 14                	ja     c001e211 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c001e1fd:	0f b6 db             	movzx  ebx,bl
c001e200:	0f b6 c0             	movzx  eax,al
c001e203:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c001e20b:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c001e20f:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001e211:	83 c4 1c             	add    esp,0x1c
c001e214:	5b                   	pop    ebx
c001e215:	5e                   	pop    esi
c001e216:	5f                   	pop    edi
c001e217:	5d                   	pop    ebp
c001e218:	c3                   	ret    
c001e219:	90                   	nop

c001e21a <IDE::detect()>:
c001e21a:	55                   	push   ebp
c001e21b:	57                   	push   edi
c001e21c:	56                   	push   esi
c001e21d:	53                   	push   ebx
c001e21e:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001e224:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c001e22b:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001e232:	0f 85 97 02 00 00    	jne    c001e4cf <IDE::detect()+0x2b5>
c001e238:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001e23f:	31 f6                	xor    esi,esi
c001e241:	31 ed                	xor    ebp,ebp
c001e243:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001e24b:	89 e8                	mov    eax,ebp
c001e24d:	c1 e0 06             	shl    eax,0x6
c001e250:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001e258:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001e25c:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001e260:	c1 e0 04             	shl    eax,0x4
c001e263:	83 c8 a0             	or     eax,0xffffffa0
c001e266:	0f b6 c0             	movzx  eax,al
c001e269:	50                   	push   eax
c001e26a:	6a 06                	push   0x6
c001e26c:	56                   	push   esi
c001e26d:	53                   	push   ebx
c001e26e:	e8 63 f8 ff ff       	call   c001dad6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e273:	83 c4 0c             	add    esp,0xc
c001e276:	6a 0c                	push   0xc
c001e278:	56                   	push   esi
c001e279:	53                   	push   ebx
c001e27a:	e8 17 f9 ff ff       	call   c001db96 <IDE::read(unsigned char, unsigned char)>
c001e27f:	83 c4 0c             	add    esp,0xc
c001e282:	6a 0c                	push   0xc
c001e284:	56                   	push   esi
c001e285:	53                   	push   ebx
c001e286:	e8 0b f9 ff ff       	call   c001db96 <IDE::read(unsigned char, unsigned char)>
c001e28b:	83 c4 0c             	add    esp,0xc
c001e28e:	6a 0c                	push   0xc
c001e290:	56                   	push   esi
c001e291:	53                   	push   ebx
c001e292:	e8 ff f8 ff ff       	call   c001db96 <IDE::read(unsigned char, unsigned char)>
c001e297:	83 c4 0c             	add    esp,0xc
c001e29a:	6a 0c                	push   0xc
c001e29c:	56                   	push   esi
c001e29d:	53                   	push   ebx
c001e29e:	e8 f3 f8 ff ff       	call   c001db96 <IDE::read(unsigned char, unsigned char)>
c001e2a3:	68 ec 00 00 00       	push   0xec
c001e2a8:	6a 07                	push   0x7
c001e2aa:	56                   	push   esi
c001e2ab:	53                   	push   ebx
c001e2ac:	e8 25 f8 ff ff       	call   c001dad6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e2b1:	83 c4 1c             	add    esp,0x1c
c001e2b4:	6a 0c                	push   0xc
c001e2b6:	56                   	push   esi
c001e2b7:	53                   	push   ebx
c001e2b8:	e8 d9 f8 ff ff       	call   c001db96 <IDE::read(unsigned char, unsigned char)>
c001e2bd:	83 c4 0c             	add    esp,0xc
c001e2c0:	6a 0c                	push   0xc
c001e2c2:	56                   	push   esi
c001e2c3:	53                   	push   ebx
c001e2c4:	e8 cd f8 ff ff       	call   c001db96 <IDE::read(unsigned char, unsigned char)>
c001e2c9:	83 c4 0c             	add    esp,0xc
c001e2cc:	6a 0c                	push   0xc
c001e2ce:	56                   	push   esi
c001e2cf:	53                   	push   ebx
c001e2d0:	e8 c1 f8 ff ff       	call   c001db96 <IDE::read(unsigned char, unsigned char)>
c001e2d5:	83 c4 0c             	add    esp,0xc
c001e2d8:	6a 0c                	push   0xc
c001e2da:	56                   	push   esi
c001e2db:	53                   	push   ebx
c001e2dc:	e8 b5 f8 ff ff       	call   c001db96 <IDE::read(unsigned char, unsigned char)>
c001e2e1:	83 c4 0c             	add    esp,0xc
c001e2e4:	6a 0c                	push   0xc
c001e2e6:	56                   	push   esi
c001e2e7:	53                   	push   ebx
c001e2e8:	e8 a9 f8 ff ff       	call   c001db96 <IDE::read(unsigned char, unsigned char)>
c001e2ed:	83 c4 10             	add    esp,0x10
c001e2f0:	84 c0                	test   al,al
c001e2f2:	0f 84 5f 01 00 00    	je     c001e457 <IDE::detect()+0x23d>
c001e2f8:	31 ff                	xor    edi,edi
c001e2fa:	50                   	push   eax
c001e2fb:	6a 0c                	push   0xc
c001e2fd:	56                   	push   esi
c001e2fe:	53                   	push   ebx
c001e2ff:	e8 92 f8 ff ff       	call   c001db96 <IDE::read(unsigned char, unsigned char)>
c001e304:	83 c4 10             	add    esp,0x10
c001e307:	a8 01                	test   al,0x1
c001e309:	0f 85 69 01 00 00    	jne    c001e478 <IDE::detect()+0x25e>
c001e30f:	84 c0                	test   al,al
c001e311:	78 04                	js     c001e317 <IDE::detect()+0xfd>
c001e313:	a8 08                	test   al,0x8
c001e315:	75 23                	jne    c001e33a <IDE::detect()+0x120>
c001e317:	47                   	inc    edi
c001e318:	81 ff 17 01 00 00    	cmp    edi,0x117
c001e31e:	7e da                	jle    c001e2fa <IDE::detect()+0xe0>
c001e320:	83 ec 0c             	sub    esp,0xc
c001e323:	6a 32                	push   0x32
c001e325:	e8 ae 7f ff ff       	call   c00162d8 <milliTenthSleep(unsigned int)>
c001e32a:	83 c4 10             	add    esp,0x10
c001e32d:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c001e333:	75 c5                	jne    c001e2fa <IDE::detect()+0xe0>
c001e335:	e9 3e 01 00 00       	jmp    c001e478 <IDE::detect()+0x25e>
c001e33a:	31 c9                	xor    ecx,ecx
c001e33c:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001e340:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001e344:	83 ec 0c             	sub    esp,0xc
c001e347:	68 80 00 00 00       	push   0x80
c001e34c:	57                   	push   edi
c001e34d:	6a 00                	push   0x0
c001e34f:	56                   	push   esi
c001e350:	53                   	push   ebx
c001e351:	e8 f8 fd ff ff       	call   c001e14e <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001e356:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c001e35b:	89 e8                	mov    eax,ebp
c001e35d:	89 d1                	mov    ecx,edx
c001e35f:	c1 e0 06             	shl    eax,0x6
c001e362:	01 d8                	add    eax,ebx
c001e364:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c001e36b:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c001e372:	89 f2                	mov    edx,esi
c001e374:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c001e37a:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c001e37e:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c001e384:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001e388:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c001e38f:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c001e397:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c001e39e:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c001e3a6:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c001e3ac:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c001e3b3:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c001e3b9:	8d 54 24 58          	lea    edx,[esp+0x58]
c001e3bd:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001e3c1:	83 c4 20             	add    esp,0x20
c001e3c4:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c001e3c7:	83 c0 02             	add    eax,0x2
c001e3ca:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c001e3d0:	83 c7 02             	add    edi,0x2
c001e3d3:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c001e3d6:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c001e3dc:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c001e3e0:	75 e2                	jne    c001e3c4 <IDE::detect()+0x1aa>
c001e3e2:	89 e8                	mov    eax,ebp
c001e3e4:	c1 e0 06             	shl    eax,0x6
c001e3e7:	01 d8                	add    eax,ebx
c001e3e9:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c001e3ef:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001e3f6:	66 c1 ea 09          	shr    dx,0x9
c001e3fa:	83 e2 01             	and    edx,0x1
c001e3fd:	84 c9                	test   cl,cl
c001e3ff:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001e405:	75 22                	jne    c001e429 <IDE::detect()+0x20f>
c001e407:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c001e40e:	74 46                	je     c001e456 <IDE::detect()+0x23c>
c001e410:	83 ec 0c             	sub    esp,0xc
c001e413:	68 7c 01 00 00       	push   0x17c
c001e418:	e8 7a b3 fe ff       	call   c0009797 <malloc>
c001e41d:	89 c7                	mov    edi,eax
c001e41f:	89 04 24             	mov    DWORD PTR [esp],eax
c001e422:	e8 49 06 00 00       	call   c001ea70 <ATA::ATA()>
c001e427:	eb 17                	jmp    c001e440 <IDE::detect()+0x226>
c001e429:	83 ec 0c             	sub    esp,0xc
c001e42c:	68 84 01 00 00       	push   0x184
c001e431:	e8 61 b3 fe ff       	call   c0009797 <malloc>
c001e436:	89 c7                	mov    edi,eax
c001e438:	89 04 24             	mov    DWORD PTR [esp],eax
c001e43b:	e8 b8 0c 00 00       	call   c001f0f8 <ATAPI::ATAPI()>
c001e440:	5a                   	pop    edx
c001e441:	59                   	pop    ecx
c001e442:	57                   	push   edi
c001e443:	53                   	push   ebx
c001e444:	e8 65 f7 fe ff       	call   c000dbae <Device::addChild(Device*)>
c001e449:	8b 07                	mov    eax,DWORD PTR [edi]
c001e44b:	53                   	push   ebx
c001e44c:	55                   	push   ebp
c001e44d:	6a 00                	push   0x0
c001e44f:	57                   	push   edi
c001e450:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001e453:	83 c4 20             	add    esp,0x20
c001e456:	45                   	inc    ebp
c001e457:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c001e45c:	74 0d                	je     c001e46b <IDE::detect()+0x251>
c001e45e:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c001e466:	e9 e0 fd ff ff       	jmp    c001e24b <IDE::detect()+0x31>
c001e46b:	4e                   	dec    esi
c001e46c:	74 61                	je     c001e4cf <IDE::detect()+0x2b5>
c001e46e:	be 01 00 00 00       	mov    esi,0x1
c001e473:	e9 cb fd ff ff       	jmp    c001e243 <IDE::detect()+0x29>
c001e478:	50                   	push   eax
c001e479:	6a 04                	push   0x4
c001e47b:	56                   	push   esi
c001e47c:	53                   	push   ebx
c001e47d:	e8 14 f7 ff ff       	call   c001db96 <IDE::read(unsigned char, unsigned char)>
c001e482:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001e486:	83 c4 0c             	add    esp,0xc
c001e489:	6a 05                	push   0x5
c001e48b:	56                   	push   esi
c001e48c:	53                   	push   ebx
c001e48d:	e8 04 f7 ff ff       	call   c001db96 <IDE::read(unsigned char, unsigned char)>
c001e492:	83 c4 10             	add    esp,0x10
c001e495:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001e499:	80 fa 14             	cmp    dl,0x14
c001e49c:	75 04                	jne    c001e4a2 <IDE::detect()+0x288>
c001e49e:	3c eb                	cmp    al,0xeb
c001e4a0:	eb 07                	jmp    c001e4a9 <IDE::detect()+0x28f>
c001e4a2:	3c 96                	cmp    al,0x96
c001e4a4:	75 b1                	jne    c001e457 <IDE::detect()+0x23d>
c001e4a6:	80 fa 69             	cmp    dl,0x69
c001e4a9:	75 ac                	jne    c001e457 <IDE::detect()+0x23d>
c001e4ab:	68 a1 00 00 00       	push   0xa1
c001e4b0:	6a 07                	push   0x7
c001e4b2:	56                   	push   esi
c001e4b3:	53                   	push   ebx
c001e4b4:	e8 1d f6 ff ff       	call   c001dad6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e4b9:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c001e4c0:	e8 13 7e ff ff       	call   c00162d8 <milliTenthSleep(unsigned int)>
c001e4c5:	83 c4 10             	add    esp,0x10
c001e4c8:	b1 01                	mov    cl,0x1
c001e4ca:	e9 6d fe ff ff       	jmp    c001e33c <IDE::detect()+0x122>
c001e4cf:	81 c4 1c 02 00 00    	add    esp,0x21c
c001e4d5:	5b                   	pop    ebx
c001e4d6:	5e                   	pop    esi
c001e4d7:	5f                   	pop    edi
c001e4d8:	5d                   	pop    ebp
c001e4d9:	c3                   	ret    

c001e4da <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001e4da:	55                   	push   ebp
c001e4db:	57                   	push   edi
c001e4dc:	56                   	push   esi
c001e4dd:	53                   	push   ebx
c001e4de:	83 ec 1c             	sub    esp,0x1c
c001e4e1:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001e4e5:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001e4e9:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001e4ed:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001e4f1:	88 c3                	mov    bl,al
c001e4f3:	84 c0                	test   al,al
c001e4f5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e4f9:	0f 84 81 00 00 00    	je     c001e580 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001e4ff:	83 ec 0c             	sub    esp,0xc
c001e502:	68 af 51 02 c0       	push   0xc00251af
c001e507:	e8 25 e2 fe ff       	call   c000c731 <Dbg::kprintf(char const*, ...)>
c001e50c:	83 c4 10             	add    esp,0x10
c001e50f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e513:	3c 01                	cmp    al,0x1
c001e515:	74 63                	je     c001e57a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa0>
c001e517:	3c 02                	cmp    al,0x2
c001e519:	75 53                	jne    c001e56e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c001e51b:	d1 e6                	shl    esi,1
c001e51d:	09 ee                	or     esi,ebp
c001e51f:	50                   	push   eax
c001e520:	89 f0                	mov    eax,esi
c001e522:	6a 01                	push   0x1
c001e524:	0f b6 f0             	movzx  esi,al
c001e527:	c1 e6 06             	shl    esi,0x6
c001e52a:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c001e532:	50                   	push   eax
c001e533:	57                   	push   edi
c001e534:	e8 5d f6 ff ff       	call   c001db96 <IDE::read(unsigned char, unsigned char)>
c001e539:	83 c4 10             	add    esp,0x10
c001e53c:	a8 01                	test   al,0x1
c001e53e:	74 02                	je     c001e542 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x68>
c001e540:	b3 07                	mov    bl,0x7
c001e542:	a8 02                	test   al,0x2
c001e544:	74 02                	je     c001e548 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x6e>
c001e546:	b3 03                	mov    bl,0x3
c001e548:	a8 04                	test   al,0x4
c001e54a:	74 02                	je     c001e54e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x74>
c001e54c:	b3 14                	mov    bl,0x14
c001e54e:	a8 08                	test   al,0x8
c001e550:	74 02                	je     c001e554 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7a>
c001e552:	b3 03                	mov    bl,0x3
c001e554:	a8 10                	test   al,0x10
c001e556:	74 02                	je     c001e55a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x80>
c001e558:	b3 15                	mov    bl,0x15
c001e55a:	a8 20                	test   al,0x20
c001e55c:	74 02                	je     c001e560 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x86>
c001e55e:	b3 03                	mov    bl,0x3
c001e560:	a8 40                	test   al,0x40
c001e562:	74 02                	je     c001e566 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8c>
c001e564:	b3 16                	mov    bl,0x16
c001e566:	84 c0                	test   al,al
c001e568:	79 16                	jns    c001e580 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001e56a:	b3 0d                	mov    bl,0xd
c001e56c:	eb 12                	jmp    c001e580 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001e56e:	3c 03                	cmp    al,0x3
c001e570:	74 0c                	je     c001e57e <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa4>
c001e572:	3c 04                	cmp    al,0x4
c001e574:	75 0a                	jne    c001e580 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001e576:	b3 08                	mov    bl,0x8
c001e578:	eb 06                	jmp    c001e580 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001e57a:	b3 13                	mov    bl,0x13
c001e57c:	eb 02                	jmp    c001e580 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001e57e:	b3 17                	mov    bl,0x17
c001e580:	83 c4 1c             	add    esp,0x1c
c001e583:	88 d8                	mov    al,bl
c001e585:	5b                   	pop    ebx
c001e586:	5e                   	pop    esi
c001e587:	5f                   	pop    edi
c001e588:	5d                   	pop    ebp
c001e589:	c3                   	ret    

c001e58a <IDE::polling(unsigned char, unsigned int)>:
c001e58a:	57                   	push   edi
c001e58b:	56                   	push   esi
c001e58c:	53                   	push   ebx
c001e58d:	bb 04 00 00 00       	mov    ebx,0x4
c001e592:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001e596:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001e59b:	52                   	push   edx
c001e59c:	6a 0c                	push   0xc
c001e59e:	56                   	push   esi
c001e59f:	57                   	push   edi
c001e5a0:	e8 f1 f5 ff ff       	call   c001db96 <IDE::read(unsigned char, unsigned char)>
c001e5a5:	83 c4 10             	add    esp,0x10
c001e5a8:	4b                   	dec    ebx
c001e5a9:	75 f0                	jne    c001e59b <IDE::polling(unsigned char, unsigned int)+0x11>
c001e5ab:	bb a0 86 01 00       	mov    ebx,0x186a0
c001e5b0:	50                   	push   eax
c001e5b1:	6a 0c                	push   0xc
c001e5b3:	56                   	push   esi
c001e5b4:	57                   	push   edi
c001e5b5:	e8 dc f5 ff ff       	call   c001db96 <IDE::read(unsigned char, unsigned char)>
c001e5ba:	83 c4 10             	add    esp,0x10
c001e5bd:	a8 01                	test   al,0x1
c001e5bf:	75 17                	jne    c001e5d8 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001e5c1:	a8 20                	test   al,0x20
c001e5c3:	75 0f                	jne    c001e5d4 <IDE::polling(unsigned char, unsigned int)+0x4a>
c001e5c5:	4b                   	dec    ebx
c001e5c6:	74 10                	je     c001e5d8 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001e5c8:	84 c0                	test   al,al
c001e5ca:	78 e4                	js     c001e5b0 <IDE::polling(unsigned char, unsigned int)+0x26>
c001e5cc:	a8 08                	test   al,0x8
c001e5ce:	74 e0                	je     c001e5b0 <IDE::polling(unsigned char, unsigned int)+0x26>
c001e5d0:	31 c0                	xor    eax,eax
c001e5d2:	eb 06                	jmp    c001e5da <IDE::polling(unsigned char, unsigned int)+0x50>
c001e5d4:	b0 01                	mov    al,0x1
c001e5d6:	eb 02                	jmp    c001e5da <IDE::polling(unsigned char, unsigned int)+0x50>
c001e5d8:	b0 02                	mov    al,0x2
c001e5da:	5b                   	pop    ebx
c001e5db:	5e                   	pop    esi
c001e5dc:	5f                   	pop    edi
c001e5dd:	c3                   	ret    

c001e5de <SATABus::close(int, int, void*)>:
c001e5de:	31 c0                	xor    eax,eax
c001e5e0:	c3                   	ret    
c001e5e1:	90                   	nop

c001e5e2 <SATABus::detect()>:
c001e5e2:	c3                   	ret    
c001e5e3:	90                   	nop

c001e5e4 <SATABus::SATABus()>:
c001e5e4:	83 ec 0c             	sub    esp,0xc
c001e5e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e5eb:	83 ec 08             	sub    esp,0x8
c001e5ee:	68 e8 51 02 c0       	push   0xc00251e8
c001e5f3:	50                   	push   eax
c001e5f4:	e8 63 f9 fe ff       	call   c000df5c <HardDiskController::HardDiskController(char const*)>
c001e5f9:	83 c4 10             	add    esp,0x10
c001e5fc:	ba 90 52 02 c0       	mov    edx,0xc0025290
c001e601:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e605:	89 10                	mov    DWORD PTR [eax],edx
c001e607:	83 ec 0c             	sub    esp,0xc
c001e60a:	6a 50                	push   0x50
c001e60c:	e8 b0 b6 fe ff       	call   c0009cc1 <Phys::allocateContiguousPages(int)>
c001e611:	83 c4 10             	add    esp,0x10
c001e614:	89 c2                	mov    edx,eax
c001e616:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e61a:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001e620:	83 ec 0c             	sub    esp,0xc
c001e623:	6a 50                	push   0x50
c001e625:	e8 ab cd fe ff       	call   c000b3d5 <Virt::allocateKernelVirtualPages(int)>
c001e62a:	83 c4 10             	add    esp,0x10
c001e62d:	89 c2                	mov    edx,eax
c001e62f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e633:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001e639:	a1 14 64 02 c0       	mov    eax,ds:0xc0026414
c001e63e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e642:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c001e648:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e64c:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001e652:	83 ec 0c             	sub    esp,0xc
c001e655:	6a 03                	push   0x3
c001e657:	6a 50                	push   0x50
c001e659:	51                   	push   ecx
c001e65a:	52                   	push   edx
c001e65b:	50                   	push   eax
c001e65c:	e8 d7 d6 fe ff       	call   c000bd38 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001e661:	83 c4 20             	add    esp,0x20
c001e664:	90                   	nop
c001e665:	83 c4 0c             	add    esp,0xc
c001e668:	c3                   	ret    
c001e669:	90                   	nop

c001e66a <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c001e66a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e66e:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001e671:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001e674:	09 c2                	or     edx,eax
c001e676:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e67a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001e680:	8b 08                	mov    ecx,DWORD PTR [eax]
c001e682:	31 c0                	xor    eax,eax
c001e684:	c1 e9 08             	shr    ecx,0x8
c001e687:	83 e1 0f             	and    ecx,0xf
c001e68a:	39 c8                	cmp    eax,ecx
c001e68c:	74 0a                	je     c001e698 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c001e68e:	f6 c2 01             	test   dl,0x1
c001e691:	74 08                	je     c001e69b <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c001e693:	d1 ea                	shr    edx,1
c001e695:	40                   	inc    eax
c001e696:	eb f2                	jmp    c001e68a <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c001e698:	83 c8 ff             	or     eax,0xffffffff
c001e69b:	c3                   	ret    

c001e69c <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c001e69c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001e6a0:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001e6a3:	89 c2                	mov    edx,eax
c001e6a5:	c1 ea 08             	shr    edx,0x8
c001e6a8:	83 e2 0f             	and    edx,0xf
c001e6ab:	fe ca                	dec    dl
c001e6ad:	75 31                	jne    c001e6e0 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001e6af:	83 e0 0f             	and    eax,0xf
c001e6b2:	3c 03                	cmp    al,0x3
c001e6b4:	75 2a                	jne    c001e6e0 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001e6b6:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c001e6b9:	b8 02 00 00 00       	mov    eax,0x2
c001e6be:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c001e6c4:	74 1c                	je     c001e6e2 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001e6c6:	b8 04 00 00 00       	mov    eax,0x4
c001e6cb:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c001e6d1:	74 0f                	je     c001e6e2 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001e6d3:	31 c0                	xor    eax,eax
c001e6d5:	83 fa 03             	cmp    edx,0x3
c001e6d8:	0f 94 c0             	sete   al
c001e6db:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c001e6df:	c3                   	ret    
c001e6e0:	31 c0                	xor    eax,eax
c001e6e2:	c3                   	ret    
c001e6e3:	90                   	nop

c001e6e4 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c001e6e4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e6e8:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e6eb:	0f ba e2 0f          	bt     edx,0xf
c001e6ef:	72 f7                	jb     c001e6e8 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c001e6f1:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e6f4:	83 ca 10             	or     edx,0x10
c001e6f7:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e6fa:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e6fd:	83 ca 01             	or     edx,0x1
c001e700:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e703:	c3                   	ret    

c001e704 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c001e704:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e708:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e70b:	83 e2 fe             	and    edx,0xfffffffe
c001e70e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e711:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e714:	83 e2 ef             	and    edx,0xffffffef
c001e717:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e71a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e71d:	0f ba e2 0e          	bt     edx,0xe
c001e721:	72 f7                	jb     c001e71a <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001e723:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e726:	0f ba e2 0f          	bt     edx,0xf
c001e72a:	72 ee                	jb     c001e71a <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001e72c:	c3                   	ret    
c001e72d:	90                   	nop

c001e72e <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c001e72e:	55                   	push   ebp
c001e72f:	57                   	push   edi
c001e730:	56                   	push   esi
c001e731:	53                   	push   ebx
c001e732:	83 ec 1c             	sub    esp,0x1c
c001e735:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001e739:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001e73d:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001e741:	53                   	push   ebx
c001e742:	89 fd                	mov    ebp,edi
c001e744:	56                   	push   esi
c001e745:	c1 e5 0a             	shl    ebp,0xa
c001e748:	e8 b7 ff ff ff       	call   c001e704 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001e74d:	83 ec 0c             	sub    esp,0xc
c001e750:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c001e756:	01 e8                	add    eax,ebp
c001e758:	89 03                	mov    DWORD PTR [ebx],eax
c001e75a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001e75c:	68 00 04 00 00       	push   0x400
c001e761:	6a 00                	push   0x0
c001e763:	50                   	push   eax
c001e764:	e8 3f 1d fe ff       	call   c00004a8 <memset>
c001e769:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c001e76f:	89 fa                	mov    edx,edi
c001e771:	01 e8                	add    eax,ebp
c001e773:	c1 e7 0d             	shl    edi,0xd
c001e776:	89 03                	mov    DWORD PTR [ebx],eax
c001e778:	c1 e2 08             	shl    edx,0x8
c001e77b:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001e782:	81 c2 00 80 00 00    	add    edx,0x8000
c001e788:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001e78c:	89 d0                	mov    eax,edx
c001e78e:	83 c4 1c             	add    esp,0x1c
c001e791:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001e797:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001e79a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001e79d:	68 00 01 00 00       	push   0x100
c001e7a2:	6a 00                	push   0x0
c001e7a4:	50                   	push   eax
c001e7a5:	e8 fe 1c fe ff       	call   c00004a8 <memset>
c001e7aa:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e7ae:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c001e7b4:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c001e7ba:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001e7be:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c001e7c1:	83 c4 10             	add    esp,0x10
c001e7c4:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001e7cb:	31 ff                	xor    edi,edi
c001e7cd:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c001e7d3:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c001e7d9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e7dd:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001e7e3:	83 c5 20             	add    ebp,0x20
c001e7e6:	01 f8                	add    eax,edi
c001e7e8:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001e7eb:	52                   	push   edx
c001e7ec:	68 00 01 00 00       	push   0x100
c001e7f1:	6a 00                	push   0x0
c001e7f3:	50                   	push   eax
c001e7f4:	e8 af 1c fe ff       	call   c00004a8 <memset>
c001e7f9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e7fd:	83 c4 10             	add    esp,0x10
c001e800:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c001e806:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c001e80d:	01 f8                	add    eax,edi
c001e80f:	81 c7 00 01 00 00    	add    edi,0x100
c001e815:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001e818:	81 ff 00 20 00 00    	cmp    edi,0x2000
c001e81e:	75 b3                	jne    c001e7d3 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c001e820:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c001e824:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c001e828:	83 c4 1c             	add    esp,0x1c
c001e82b:	5b                   	pop    ebx
c001e82c:	5e                   	pop    esi
c001e82d:	5f                   	pop    edi
c001e82e:	5d                   	pop    ebp
c001e82f:	e9 b0 fe ff ff       	jmp    c001e6e4 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c001e834 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c001e834:	55                   	push   ebp
c001e835:	57                   	push   edi
c001e836:	56                   	push   esi
c001e837:	53                   	push   ebx
c001e838:	83 ec 0c             	sub    esp,0xc
c001e83b:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001e83f:	f6 05 41 63 02 c0 08 	test   BYTE PTR ds:0xc0026341,0x8
c001e846:	74 2d                	je     c001e875 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x41>
c001e848:	83 ec 0c             	sub    esp,0xc
c001e84b:	68 0c 52 02 c0       	push   0xc002520c
c001e850:	e8 9c af fe ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c001e855:	83 c4 10             	add    esp,0x10
c001e858:	f6 05 40 63 02 c0 80 	test   BYTE PTR ds:0xc0026340,0x80
c001e85f:	75 14                	jne    c001e875 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x41>
c001e861:	e4 60                	in     al,0x60
c001e863:	3c 1c                	cmp    al,0x1c
c001e865:	74 04                	je     c001e86b <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x37>
c001e867:	3c 5a                	cmp    al,0x5a
c001e869:	75 f6                	jne    c001e861 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x2d>
c001e86b:	e4 60                	in     al,0x60
c001e86d:	3c 5a                	cmp    al,0x5a
c001e86f:	74 fa                	je     c001e86b <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x37>
c001e871:	3c 1c                	cmp    al,0x1c
c001e873:	74 f6                	je     c001e86b <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x37>
c001e875:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001e879:	31 db                	xor    ebx,ebx
c001e87b:	8b 68 0c             	mov    ebp,DWORD PTR [eax+0xc]
c001e87e:	f7 c5 01 00 00 00    	test   ebp,0x1
c001e884:	0f 84 78 01 00 00    	je     c001ea02 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x1ce>
c001e88a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001e88e:	89 d8                	mov    eax,ebx
c001e890:	c1 e0 07             	shl    eax,0x7
c001e893:	8d bc 02 00 01 00 00 	lea    edi,[edx+eax*1+0x100]
c001e89a:	50                   	push   eax
c001e89b:	50                   	push   eax
c001e89c:	57                   	push   edi
c001e89d:	56                   	push   esi
c001e89e:	e8 f9 fd ff ff       	call   c001e69c <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c001e8a3:	83 c4 10             	add    esp,0x10
c001e8a6:	83 f8 01             	cmp    eax,0x1
c001e8a9:	0f 85 19 01 00 00    	jne    c001e9c8 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x194>
c001e8af:	50                   	push   eax
c001e8b0:	53                   	push   ebx
c001e8b1:	57                   	push   edi
c001e8b2:	56                   	push   esi
c001e8b3:	e8 76 fe ff ff       	call   c001e72e <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001e8b8:	83 c4 10             	add    esp,0x10
c001e8bb:	f6 05 41 63 02 c0 08 	test   BYTE PTR ds:0xc0026341,0x8
c001e8c2:	74 2d                	je     c001e8f1 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xbd>
c001e8c4:	83 ec 0c             	sub    esp,0xc
c001e8c7:	68 21 52 02 c0       	push   0xc0025221
c001e8cc:	e8 20 af fe ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c001e8d1:	83 c4 10             	add    esp,0x10
c001e8d4:	f6 05 40 63 02 c0 80 	test   BYTE PTR ds:0xc0026340,0x80
c001e8db:	75 14                	jne    c001e8f1 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xbd>
c001e8dd:	e4 60                	in     al,0x60
c001e8df:	3c 1c                	cmp    al,0x1c
c001e8e1:	74 04                	je     c001e8e7 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xb3>
c001e8e3:	3c 5a                	cmp    al,0x5a
c001e8e5:	75 f6                	jne    c001e8dd <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xa9>
c001e8e7:	e4 60                	in     al,0x60
c001e8e9:	3c 5a                	cmp    al,0x5a
c001e8eb:	74 fa                	je     c001e8e7 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xb3>
c001e8ed:	3c 1c                	cmp    al,0x1c
c001e8ef:	74 f6                	je     c001e8e7 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xb3>
c001e8f1:	83 ec 0c             	sub    esp,0xc
c001e8f4:	68 7c 01 00 00       	push   0x17c
c001e8f9:	e8 99 ae fe ff       	call   c0009797 <malloc>
c001e8fe:	89 04 24             	mov    DWORD PTR [esp],eax
c001e901:	89 c7                	mov    edi,eax
c001e903:	e8 28 10 00 00       	call   c001f930 <SATA::SATA()>
c001e908:	83 c4 10             	add    esp,0x10
c001e90b:	f6 05 41 63 02 c0 08 	test   BYTE PTR ds:0xc0026341,0x8
c001e912:	74 2d                	je     c001e941 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x10d>
c001e914:	83 ec 0c             	sub    esp,0xc
c001e917:	68 36 52 02 c0       	push   0xc0025236
c001e91c:	e8 d0 ae fe ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c001e921:	83 c4 10             	add    esp,0x10
c001e924:	f6 05 40 63 02 c0 80 	test   BYTE PTR ds:0xc0026340,0x80
c001e92b:	75 14                	jne    c001e941 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x10d>
c001e92d:	e4 60                	in     al,0x60
c001e92f:	3c 5a                	cmp    al,0x5a
c001e931:	74 04                	je     c001e937 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x103>
c001e933:	3c 1c                	cmp    al,0x1c
c001e935:	75 f6                	jne    c001e92d <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xf9>
c001e937:	e4 60                	in     al,0x60
c001e939:	3c 5a                	cmp    al,0x5a
c001e93b:	74 fa                	je     c001e937 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x103>
c001e93d:	3c 1c                	cmp    al,0x1c
c001e93f:	74 f6                	je     c001e937 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x103>
c001e941:	50                   	push   eax
c001e942:	50                   	push   eax
c001e943:	57                   	push   edi
c001e944:	56                   	push   esi
c001e945:	e8 64 f2 fe ff       	call   c000dbae <Device::addChild(Device*)>
c001e94a:	83 c4 10             	add    esp,0x10
c001e94d:	f6 05 41 63 02 c0 08 	test   BYTE PTR ds:0xc0026341,0x8
c001e954:	74 2d                	je     c001e983 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14f>
c001e956:	83 ec 0c             	sub    esp,0xc
c001e959:	68 4b 52 02 c0       	push   0xc002524b
c001e95e:	e8 8e ae fe ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c001e963:	83 c4 10             	add    esp,0x10
c001e966:	f6 05 40 63 02 c0 80 	test   BYTE PTR ds:0xc0026340,0x80
c001e96d:	75 14                	jne    c001e983 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14f>
c001e96f:	e4 60                	in     al,0x60
c001e971:	3c 1c                	cmp    al,0x1c
c001e973:	74 04                	je     c001e979 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x145>
c001e975:	3c 5a                	cmp    al,0x5a
c001e977:	75 f6                	jne    c001e96f <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x13b>
c001e979:	e4 60                	in     al,0x60
c001e97b:	3c 5a                	cmp    al,0x5a
c001e97d:	74 fa                	je     c001e979 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x145>
c001e97f:	3c 1c                	cmp    al,0x1c
c001e981:	74 f6                	je     c001e979 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x145>
c001e983:	8b 07                	mov    eax,DWORD PTR [edi]
c001e985:	56                   	push   esi
c001e986:	6a 00                	push   0x0
c001e988:	53                   	push   ebx
c001e989:	57                   	push   edi
c001e98a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001e98d:	83 c4 10             	add    esp,0x10
c001e990:	f6 05 41 63 02 c0 08 	test   BYTE PTR ds:0xc0026341,0x8
c001e997:	74 69                	je     c001ea02 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x1ce>
c001e999:	83 ec 0c             	sub    esp,0xc
c001e99c:	68 60 52 02 c0       	push   0xc0025260
c001e9a1:	e8 4b ae fe ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c001e9a6:	83 c4 10             	add    esp,0x10
c001e9a9:	f6 05 40 63 02 c0 80 	test   BYTE PTR ds:0xc0026340,0x80
c001e9b0:	75 50                	jne    c001ea02 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x1ce>
c001e9b2:	e4 60                	in     al,0x60
c001e9b4:	3c 1c                	cmp    al,0x1c
c001e9b6:	74 04                	je     c001e9bc <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x188>
c001e9b8:	3c 5a                	cmp    al,0x5a
c001e9ba:	75 f6                	jne    c001e9b2 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x17e>
c001e9bc:	e4 60                	in     al,0x60
c001e9be:	3c 5a                	cmp    al,0x5a
c001e9c0:	74 fa                	je     c001e9bc <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x188>
c001e9c2:	3c 1c                	cmp    al,0x1c
c001e9c4:	74 f6                	je     c001e9bc <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x188>
c001e9c6:	eb 3a                	jmp    c001ea02 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x1ce>
c001e9c8:	83 f8 04             	cmp    eax,0x4
c001e9cb:	75 35                	jne    c001ea02 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x1ce>
c001e9cd:	50                   	push   eax
c001e9ce:	53                   	push   ebx
c001e9cf:	57                   	push   edi
c001e9d0:	56                   	push   esi
c001e9d1:	e8 58 fd ff ff       	call   c001e72e <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001e9d6:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001e9dd:	e8 b5 ad fe ff       	call   c0009797 <malloc>
c001e9e2:	89 04 24             	mov    DWORD PTR [esp],eax
c001e9e5:	89 c7                	mov    edi,eax
c001e9e7:	e8 ba 17 00 00       	call   c00201a6 <SATAPI::SATAPI()>
c001e9ec:	5a                   	pop    edx
c001e9ed:	59                   	pop    ecx
c001e9ee:	57                   	push   edi
c001e9ef:	56                   	push   esi
c001e9f0:	e8 b9 f1 fe ff       	call   c000dbae <Device::addChild(Device*)>
c001e9f5:	8b 07                	mov    eax,DWORD PTR [edi]
c001e9f7:	56                   	push   esi
c001e9f8:	6a 00                	push   0x0
c001e9fa:	53                   	push   ebx
c001e9fb:	57                   	push   edi
c001e9fc:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001e9ff:	83 c4 20             	add    esp,0x20
c001ea02:	d1 ed                	shr    ebp,1
c001ea04:	43                   	inc    ebx
c001ea05:	83 fb 20             	cmp    ebx,0x20
c001ea08:	0f 85 70 fe ff ff    	jne    c001e87e <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x4a>
c001ea0e:	83 c4 0c             	add    esp,0xc
c001ea11:	5b                   	pop    ebx
c001ea12:	5e                   	pop    esi
c001ea13:	5f                   	pop    edi
c001ea14:	5d                   	pop    ebp
c001ea15:	c3                   	ret    

c001ea16 <SATABus::open(int, int, void*)>:
c001ea16:	53                   	push   ebx
c001ea17:	83 ec 10             	sub    esp,0x10
c001ea1a:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001ea1e:	8b 83 34 01 00 00    	mov    eax,DWORD PTR [ebx+0x134]
c001ea24:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001ea2a:	50                   	push   eax
c001ea2b:	68 75 52 02 c0       	push   0xc0025275
c001ea30:	e8 fc dc fe ff       	call   c000c731 <Dbg::kprintf(char const*, ...)>
c001ea35:	58                   	pop    eax
c001ea36:	5a                   	pop    edx
c001ea37:	ff b3 60 01 00 00    	push   DWORD PTR [ebx+0x160]
c001ea3d:	53                   	push   ebx
c001ea3e:	e8 f1 fd ff ff       	call   c001e834 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c001ea43:	31 c0                	xor    eax,eax
c001ea45:	83 c4 18             	add    esp,0x18
c001ea48:	5b                   	pop    ebx
c001ea49:	c3                   	ret    

c001ea4a <ATA::close(int, int, void*)>:
c001ea4a:	83 ec 0c             	sub    esp,0xc
c001ea4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea51:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001ea57:	85 c0                	test   eax,eax
c001ea59:	74 0c                	je     c001ea67 <ATA::close(int, int, void*)+0x1d>
c001ea5b:	83 ec 0c             	sub    esp,0xc
c001ea5e:	8b 10                	mov    edx,DWORD PTR [eax]
c001ea60:	50                   	push   eax
c001ea61:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001ea64:	83 c4 10             	add    esp,0x10
c001ea67:	31 c0                	xor    eax,eax
c001ea69:	83 c4 0c             	add    esp,0xc
c001ea6c:	c3                   	ret    
c001ea6d:	90                   	nop

c001ea6e <ATA::powerSaving(PowerSavingLevel)>:
c001ea6e:	c3                   	ret    
c001ea6f:	90                   	nop

c001ea70 <ATA::ATA()>:
c001ea70:	83 ec 0c             	sub    esp,0xc
c001ea73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea77:	83 ec 04             	sub    esp,0x4
c001ea7a:	68 00 02 00 00       	push   0x200
c001ea7f:	68 13 54 02 c0       	push   0xc0025413
c001ea84:	50                   	push   eax
c001ea85:	e8 5c f5 fe ff       	call   c000dfe6 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001ea8a:	83 c4 10             	add    esp,0x10
c001ea8d:	ba 08 53 02 c0       	mov    edx,0xc0025308
c001ea92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea96:	89 10                	mov    DWORD PTR [eax],edx
c001ea98:	90                   	nop
c001ea99:	83 c4 0c             	add    esp,0xc
c001ea9c:	c3                   	ret    
c001ea9d:	90                   	nop

c001ea9e <ATA::flush(bool)>:
c001ea9e:	53                   	push   ebx
c001ea9f:	83 ec 08             	sub    esp,0x8
c001eaa2:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c001eaa7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001eaab:	19 c0                	sbb    eax,eax
c001eaad:	83 e0 fd             	and    eax,0xfffffffd
c001eab0:	05 ea 00 00 00       	add    eax,0xea
c001eab5:	50                   	push   eax
c001eab6:	6a 07                	push   0x7
c001eab8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001eabf:	50                   	push   eax
c001eac0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001eac6:	e8 0b f0 ff ff       	call   c001dad6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001eacb:	83 c4 0c             	add    esp,0xc
c001eace:	6a 00                	push   0x0
c001ead0:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ead7:	50                   	push   eax
c001ead8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001eade:	e8 a7 fa ff ff       	call   c001e58a <IDE::polling(unsigned char, unsigned int)>
c001eae3:	83 c4 18             	add    esp,0x18
c001eae6:	5b                   	pop    ebx
c001eae7:	c3                   	ret    

c001eae8 <ATA::readyForCommand()>:
c001eae8:	56                   	push   esi
c001eae9:	53                   	push   ebx
c001eaea:	53                   	push   ebx
c001eaeb:	31 db                	xor    ebx,ebx
c001eaed:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001eaf1:	51                   	push   ecx
c001eaf2:	6a 0c                	push   0xc
c001eaf4:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001eafb:	50                   	push   eax
c001eafc:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001eb02:	e8 8f f0 ff ff       	call   c001db96 <IDE::read(unsigned char, unsigned char)>
c001eb07:	83 c4 10             	add    esp,0x10
c001eb0a:	a8 88                	test   al,0x88
c001eb0c:	74 1f                	je     c001eb2d <ATA::readyForCommand()+0x45>
c001eb0e:	43                   	inc    ebx
c001eb0f:	83 fb 63             	cmp    ebx,0x63
c001eb12:	7e dd                	jle    c001eaf1 <ATA::readyForCommand()+0x9>
c001eb14:	83 ec 0c             	sub    esp,0xc
c001eb17:	6a 0a                	push   0xa
c001eb19:	e8 ba 77 ff ff       	call   c00162d8 <milliTenthSleep(unsigned int)>
c001eb1e:	83 c4 10             	add    esp,0x10
c001eb21:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001eb27:	75 c8                	jne    c001eaf1 <ATA::readyForCommand()+0x9>
c001eb29:	31 c0                	xor    eax,eax
c001eb2b:	eb 02                	jmp    c001eb2f <ATA::readyForCommand()+0x47>
c001eb2d:	b0 01                	mov    al,0x1
c001eb2f:	5a                   	pop    edx
c001eb30:	5b                   	pop    ebx
c001eb31:	5e                   	pop    esi
c001eb32:	c3                   	ret    
c001eb33:	90                   	nop

c001eb34 <ATA::access(unsigned long long, int, void*, bool)>:
c001eb34:	55                   	push   ebp
c001eb35:	57                   	push   edi
c001eb36:	56                   	push   esi
c001eb37:	53                   	push   ebx
c001eb38:	83 ec 38             	sub    esp,0x38
c001eb3b:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c001eb3f:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001eb43:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001eb47:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001eb4b:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001eb4f:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001eb53:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c001eb57:	68 b4 52 02 c0       	push   0xc00252b4
c001eb5c:	e8 d0 db fe ff       	call   c000c731 <Dbg::kprintf(char const*, ...)>
c001eb61:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001eb67:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001eb6b:	83 c4 10             	add    esp,0x10
c001eb6e:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001eb74:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001eb78:	c1 e0 06             	shl    eax,0x6
c001eb7b:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001eb83:	74 5d                	je     c001ebe2 <ATA::access(unsigned long long, int, void*, bool)+0xae>
c001eb85:	89 fa                	mov    edx,edi
c001eb87:	89 f0                	mov    eax,esi
c001eb89:	0f ac d0 1c          	shrd   eax,edx,0x1c
c001eb8d:	c1 ea 1c             	shr    edx,0x1c
c001eb90:	89 d1                	mov    ecx,edx
c001eb92:	09 c1                	or     ecx,eax
c001eb94:	74 25                	je     c001ebbb <ATA::access(unsigned long long, int, void*, bool)+0x87>
c001eb96:	31 ed                	xor    ebp,ebp
c001eb98:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001eb9f:	89 fa                	mov    edx,edi
c001eba1:	89 f0                	mov    eax,esi
c001eba3:	0f ad d0             	shrd   eax,edx,cl
c001eba6:	d3 ea                	shr    edx,cl
c001eba8:	f6 c1 20             	test   cl,0x20
c001ebab:	74 02                	je     c001ebaf <ATA::access(unsigned long long, int, void*, bool)+0x7b>
c001ebad:	89 d0                	mov    eax,edx
c001ebaf:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001ebb3:	45                   	inc    ebp
c001ebb4:	83 fd 06             	cmp    ebp,0x6
c001ebb7:	75 df                	jne    c001eb98 <ATA::access(unsigned long long, int, void*, bool)+0x64>
c001ebb9:	eb 76                	jmp    c001ec31 <ATA::access(unsigned long long, int, void*, bool)+0xfd>
c001ebbb:	89 f0                	mov    eax,esi
c001ebbd:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001ebc2:	89 fa                	mov    edx,edi
c001ebc4:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001ebcb:	0f ac d0 10          	shrd   eax,edx,0x10
c001ebcf:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001ebd4:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001ebd8:	c1 ee 18             	shr    esi,0x18
c001ebdb:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001ebe0:	eb 56                	jmp    c001ec38 <ATA::access(unsigned long long, int, void*, bool)+0x104>
c001ebe2:	6a 00                	push   0x0
c001ebe4:	6a 3f                	push   0x3f
c001ebe6:	57                   	push   edi
c001ebe7:	56                   	push   esi
c001ebe8:	e8 b3 29 00 00       	call   c00215a0 <__umoddi3>
c001ebed:	83 c4 10             	add    esp,0x10
c001ebf0:	40                   	inc    eax
c001ebf1:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001ebf5:	6a 00                	push   0x0
c001ebf7:	68 f0 03 00 00       	push   0x3f0
c001ebfc:	57                   	push   edi
c001ebfd:	56                   	push   esi
c001ebfe:	e8 9d 28 00 00       	call   c00214a0 <__udivdi3>
c001ec03:	83 c4 10             	add    esp,0x10
c001ec06:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001ec0b:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001ec12:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001ec17:	6a 00                	push   0x0
c001ec19:	6a 3f                	push   0x3f
c001ec1b:	57                   	push   edi
c001ec1c:	56                   	push   esi
c001ec1d:	e8 7e 28 00 00       	call   c00214a0 <__udivdi3>
c001ec22:	83 c4 10             	add    esp,0x10
c001ec25:	89 c6                	mov    esi,eax
c001ec27:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001ec2c:	83 e6 0f             	and    esi,0xf
c001ec2f:	eb 07                	jmp    c001ec38 <ATA::access(unsigned long long, int, void*, bool)+0x104>
c001ec31:	31 f6                	xor    esi,esi
c001ec33:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c001ec38:	bf 01 00 00 00       	mov    edi,0x1
c001ec3d:	50                   	push   eax
c001ec3e:	6a 00                	push   0x0
c001ec40:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ec47:	50                   	push   eax
c001ec48:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001ec4c:	e8 8d f0 ff ff       	call   c001dcde <IDE::enableIRQs(unsigned char, bool)>
c001ec51:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ec54:	e8 8f fe ff ff       	call   c001eae8 <ATA::readyForCommand()>
c001ec59:	83 c4 10             	add    esp,0x10
c001ec5c:	84 c0                	test   al,al
c001ec5e:	0f 84 bc 02 00 00    	je     c001ef20 <ATA::access(unsigned long long, int, void*, bool)+0x3ec>
c001ec64:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001ec6a:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001ec70:	c1 e0 04             	shl    eax,0x4
c001ec73:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001ec7a:	09 c6                	or     esi,eax
c001ec7c:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001ec81:	75 05                	jne    c001ec88 <ATA::access(unsigned long long, int, void*, bool)+0x154>
c001ec83:	83 ce a0             	or     esi,0xffffffa0
c001ec86:	eb 03                	jmp    c001ec8b <ATA::access(unsigned long long, int, void*, bool)+0x157>
c001ec88:	83 ce e0             	or     esi,0xffffffe0
c001ec8b:	89 f0                	mov    eax,esi
c001ec8d:	0f b6 f0             	movzx  esi,al
c001ec90:	56                   	push   esi
c001ec91:	6a 06                	push   0x6
c001ec93:	51                   	push   ecx
c001ec94:	52                   	push   edx
c001ec95:	e8 3c ee ff ff       	call   c001dad6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ec9a:	83 c4 10             	add    esp,0x10
c001ec9d:	6a 00                	push   0x0
c001ec9f:	6a 01                	push   0x1
c001eca1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001eca8:	50                   	push   eax
c001eca9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ecaf:	e8 22 ee ff ff       	call   c001dad6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ecb4:	83 c4 10             	add    esp,0x10
c001ecb7:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001ecbc:	75 6e                	jne    c001ed2c <ATA::access(unsigned long long, int, void*, bool)+0x1f8>
c001ecbe:	6a 00                	push   0x0
c001ecc0:	6a 08                	push   0x8
c001ecc2:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ecc9:	50                   	push   eax
c001ecca:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ecd0:	e8 01 ee ff ff       	call   c001dad6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ecd5:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001ecda:	50                   	push   eax
c001ecdb:	6a 09                	push   0x9
c001ecdd:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ece4:	50                   	push   eax
c001ece5:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001eceb:	e8 e6 ed ff ff       	call   c001dad6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ecf0:	83 c4 20             	add    esp,0x20
c001ecf3:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001ecf8:	50                   	push   eax
c001ecf9:	6a 0a                	push   0xa
c001ecfb:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ed02:	50                   	push   eax
c001ed03:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ed09:	e8 c8 ed ff ff       	call   c001dad6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ed0e:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001ed13:	50                   	push   eax
c001ed14:	6a 0b                	push   0xb
c001ed16:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ed1d:	50                   	push   eax
c001ed1e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ed24:	e8 ad ed ff ff       	call   c001dad6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ed29:	83 c4 20             	add    esp,0x20
c001ed2c:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001ed31:	50                   	push   eax
c001ed32:	6a 02                	push   0x2
c001ed34:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ed3b:	50                   	push   eax
c001ed3c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ed42:	e8 8f ed ff ff       	call   c001dad6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ed47:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001ed4c:	50                   	push   eax
c001ed4d:	6a 03                	push   0x3
c001ed4f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ed56:	50                   	push   eax
c001ed57:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ed5d:	e8 74 ed ff ff       	call   c001dad6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ed62:	83 c4 20             	add    esp,0x20
c001ed65:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001ed6a:	50                   	push   eax
c001ed6b:	6a 04                	push   0x4
c001ed6d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ed74:	50                   	push   eax
c001ed75:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ed7b:	e8 56 ed ff ff       	call   c001dad6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ed80:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ed85:	50                   	push   eax
c001ed86:	6a 05                	push   0x5
c001ed88:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ed8f:	50                   	push   eax
c001ed90:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ed96:	e8 3b ed ff ff       	call   c001dad6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ed9b:	83 c4 20             	add    esp,0x20
c001ed9e:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001eda3:	0f 94 c0             	sete   al
c001eda6:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001edab:	74 09                	je     c001edb6 <ATA::access(unsigned long long, int, void*, bool)+0x282>
c001edad:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c001edb4:	eb 07                	jmp    c001edbd <ATA::access(unsigned long long, int, void*, bool)+0x289>
c001edb6:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c001edbd:	0f b6 c0             	movzx  eax,al
c001edc0:	50                   	push   eax
c001edc1:	6a 07                	push   0x7
c001edc3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001edca:	50                   	push   eax
c001edcb:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001edd1:	e8 00 ed ff ff       	call   c001dad6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001edd6:	c7 04 24 c1 52 02 c0 	mov    DWORD PTR [esp],0xc00252c1
c001eddd:	e8 4f d9 fe ff       	call   c000c731 <Dbg::kprintf(char const*, ...)>
c001ede2:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001ede6:	83 c4 10             	add    esp,0x10
c001ede9:	85 f6                	test   esi,esi
c001edeb:	0f 84 f7 00 00 00    	je     c001eee8 <ATA::access(unsigned long long, int, void*, bool)+0x3b4>
c001edf1:	83 ec 0c             	sub    esp,0xc
c001edf4:	68 c4 52 02 c0       	push   0xc00252c4
c001edf9:	e8 33 d9 fe ff       	call   c000c731 <Dbg::kprintf(char const*, ...)>
c001edfe:	83 c4 0c             	add    esp,0xc
c001ee01:	6a 01                	push   0x1
c001ee03:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ee0a:	50                   	push   eax
c001ee0b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ee11:	e8 74 f7 ff ff       	call   c001e58a <IDE::polling(unsigned char, unsigned int)>
c001ee16:	c7 04 24 c7 52 02 c0 	mov    DWORD PTR [esp],0xc00252c7
c001ee1d:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001ee21:	e8 0b d9 fe ff       	call   c000c731 <Dbg::kprintf(char const*, ...)>
c001ee26:	83 c4 10             	add    esp,0x10
c001ee29:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c001ee2d:	84 c0                	test   al,al
c001ee2f:	74 2b                	je     c001ee5c <ATA::access(unsigned long long, int, void*, bool)+0x328>
c001ee31:	0f b6 f8             	movzx  edi,al
c001ee34:	57                   	push   edi
c001ee35:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001ee3c:	50                   	push   eax
c001ee3d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ee44:	50                   	push   eax
c001ee45:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ee4b:	e8 8a f6 ff ff       	call   c001e4da <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001ee50:	c7 04 24 ca 52 02 c0 	mov    DWORD PTR [esp],0xc00252ca
c001ee57:	e9 bc 00 00 00       	jmp    c001ef18 <ATA::access(unsigned long long, int, void*, bool)+0x3e4>
c001ee5c:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001ee61:	74 50                	je     c001eeb3 <ATA::access(unsigned long long, int, void*, bool)+0x37f>
c001ee63:	83 ec 0c             	sub    esp,0xc
c001ee66:	31 ed                	xor    ebp,ebp
c001ee68:	68 d5 52 02 c0       	push   0xc00252d5
c001ee6d:	e8 bf d8 fe ff       	call   c000c731 <Dbg::kprintf(char const*, ...)>
c001ee72:	83 c4 10             	add    esp,0x10
c001ee75:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001ee79:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c001ee7d:	50                   	push   eax
c001ee7e:	50                   	push   eax
c001ee7f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ee86:	50                   	push   eax
c001ee87:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ee8d:	e8 32 ec ff ff       	call   c001dac4 <IDE::getBase(unsigned char)>
c001ee92:	89 c2                	mov    edx,eax
c001ee94:	89 f8                	mov    eax,edi
c001ee96:	66 ef                	out    dx,ax
c001ee98:	45                   	inc    ebp
c001ee99:	83 c4 10             	add    esp,0x10
c001ee9c:	81 fd 00 01 00 00    	cmp    ebp,0x100
c001eea2:	75 d1                	jne    c001ee75 <ATA::access(unsigned long long, int, void*, bool)+0x341>
c001eea4:	83 ec 0c             	sub    esp,0xc
c001eea7:	68 d8 52 02 c0       	push   0xc00252d8
c001eeac:	e8 80 d8 fe ff       	call   c000c731 <Dbg::kprintf(char const*, ...)>
c001eeb1:	eb 24                	jmp    c001eed7 <ATA::access(unsigned long long, int, void*, bool)+0x3a3>
c001eeb3:	51                   	push   ecx
c001eeb4:	51                   	push   ecx
c001eeb5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001eebc:	50                   	push   eax
c001eebd:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001eec3:	e8 fc eb ff ff       	call   c001dac4 <IDE::getBase(unsigned char)>
c001eec8:	b9 00 01 00 00       	mov    ecx,0x100
c001eecd:	89 c2                	mov    edx,eax
c001eecf:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001eed3:	fc                   	cld    
c001eed4:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001eed7:	83 c4 10             	add    esp,0x10
c001eeda:	4e                   	dec    esi
c001eedb:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001eee3:	e9 01 ff ff ff       	jmp    c001ede9 <ATA::access(unsigned long long, int, void*, bool)+0x2b5>
c001eee8:	31 ff                	xor    edi,edi
c001eeea:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001eeef:	74 2f                	je     c001ef20 <ATA::access(unsigned long long, int, void*, bool)+0x3ec>
c001eef1:	83 ec 0c             	sub    esp,0xc
c001eef4:	68 db 52 02 c0       	push   0xc00252db
c001eef9:	e8 33 d8 fe ff       	call   c000c731 <Dbg::kprintf(char const*, ...)>
c001eefe:	58                   	pop    eax
c001eeff:	31 c0                	xor    eax,eax
c001ef01:	5a                   	pop    edx
c001ef02:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c001ef07:	0f 94 c0             	sete   al
c001ef0a:	50                   	push   eax
c001ef0b:	53                   	push   ebx
c001ef0c:	e8 8d fb ff ff       	call   c001ea9e <ATA::flush(bool)>
c001ef11:	c7 04 24 de 52 02 c0 	mov    DWORD PTR [esp],0xc00252de
c001ef18:	e8 14 d8 fe ff       	call   c000c731 <Dbg::kprintf(char const*, ...)>
c001ef1d:	83 c4 10             	add    esp,0x10
c001ef20:	83 c4 2c             	add    esp,0x2c
c001ef23:	89 f8                	mov    eax,edi
c001ef25:	5b                   	pop    ebx
c001ef26:	5e                   	pop    esi
c001ef27:	5f                   	pop    edi
c001ef28:	5d                   	pop    ebp
c001ef29:	c3                   	ret    

c001ef2a <ATA::read(unsigned long long, int, void*)>:
c001ef2a:	57                   	push   edi
c001ef2b:	b8 04 00 00 00       	mov    eax,0x4
c001ef30:	56                   	push   esi
c001ef31:	53                   	push   ebx
c001ef32:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ef36:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001ef3a:	8d 7a ff             	lea    edi,[edx-0x1]
c001ef3d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001ef41:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001ef45:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001ef4b:	77 25                	ja     c001ef72 <ATA::read(unsigned long long, int, void*)+0x48>
c001ef4d:	b8 06 00 00 00       	mov    eax,0x6
c001ef52:	85 f6                	test   esi,esi
c001ef54:	74 1c                	je     c001ef72 <ATA::read(unsigned long long, int, void*)+0x48>
c001ef56:	50                   	push   eax
c001ef57:	50                   	push   eax
c001ef58:	6a 00                	push   0x0
c001ef5a:	56                   	push   esi
c001ef5b:	52                   	push   edx
c001ef5c:	53                   	push   ebx
c001ef5d:	51                   	push   ecx
c001ef5e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ef62:	e8 cd fb ff ff       	call   c001eb34 <ATA::access(unsigned long long, int, void*, bool)>
c001ef67:	83 c4 20             	add    esp,0x20
c001ef6a:	85 c0                	test   eax,eax
c001ef6c:	0f 95 c0             	setne  al
c001ef6f:	0f b6 c0             	movzx  eax,al
c001ef72:	5b                   	pop    ebx
c001ef73:	5e                   	pop    esi
c001ef74:	5f                   	pop    edi
c001ef75:	c3                   	ret    

c001ef76 <ATA::write(unsigned long long, int, void*)>:
c001ef76:	55                   	push   ebp
c001ef77:	57                   	push   edi
c001ef78:	56                   	push   esi
c001ef79:	53                   	push   ebx
c001ef7a:	83 ec 18             	sub    esp,0x18
c001ef7d:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001ef81:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001ef85:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001ef89:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001ef8d:	68 e1 52 02 c0       	push   0xc00252e1
c001ef92:	e8 9a d7 fe ff       	call   c000c731 <Dbg::kprintf(char const*, ...)>
c001ef97:	8d 53 ff             	lea    edx,[ebx-0x1]
c001ef9a:	83 c4 10             	add    esp,0x10
c001ef9d:	b8 04 00 00 00       	mov    eax,0x4
c001efa2:	81 fa fe 00 00 00    	cmp    edx,0xfe
c001efa8:	77 25                	ja     c001efcf <ATA::write(unsigned long long, int, void*)+0x59>
c001efaa:	b8 06 00 00 00       	mov    eax,0x6
c001efaf:	85 f6                	test   esi,esi
c001efb1:	74 1c                	je     c001efcf <ATA::write(unsigned long long, int, void*)+0x59>
c001efb3:	50                   	push   eax
c001efb4:	50                   	push   eax
c001efb5:	6a 01                	push   0x1
c001efb7:	56                   	push   esi
c001efb8:	53                   	push   ebx
c001efb9:	55                   	push   ebp
c001efba:	57                   	push   edi
c001efbb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001efbf:	e8 70 fb ff ff       	call   c001eb34 <ATA::access(unsigned long long, int, void*, bool)>
c001efc4:	83 c4 20             	add    esp,0x20
c001efc7:	85 c0                	test   eax,eax
c001efc9:	0f 95 c0             	setne  al
c001efcc:	0f b6 c0             	movzx  eax,al
c001efcf:	83 c4 0c             	add    esp,0xc
c001efd2:	5b                   	pop    ebx
c001efd3:	5e                   	pop    esi
c001efd4:	5f                   	pop    edi
c001efd5:	5d                   	pop    ebp
c001efd6:	c3                   	ret    
c001efd7:	90                   	nop

c001efd8 <ATA::detectCHS()>:
c001efd8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001efdc:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001efe2:	c1 e0 06             	shl    eax,0x6
c001efe5:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001efeb:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001eff5:	c7 44 24 04 ed 52 02 c0 	mov    DWORD PTR [esp+0x4],0xc00252ed
c001effd:	e9 99 3a ff ff       	jmp    c0012a9b <Krnl::panic(char const*)>

c001f002 <ATA::open(int, int, void*)>:
c001f002:	53                   	push   ebx
c001f003:	83 ec 08             	sub    esp,0x8
c001f006:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f00a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001f00e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001f012:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001f018:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001f01e:	c1 e0 06             	shl    eax,0x6
c001f021:	01 d0                	add    eax,edx
c001f023:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001f02a:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001f030:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001f037:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001f041:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001f047:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001f04e:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001f055:	75 0c                	jne    c001f063 <ATA::open(int, int, void*)+0x61>
c001f057:	83 ec 0c             	sub    esp,0xc
c001f05a:	53                   	push   ebx
c001f05b:	e8 78 ff ff ff       	call   c001efd8 <ATA::detectCHS()>
c001f060:	83 c4 10             	add    esp,0x10
c001f063:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001f069:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001f06f:	c1 e0 06             	shl    eax,0x6
c001f072:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001f079:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001f083:	d1 e8                	shr    eax,1
c001f085:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001f08b:	6a 04                	push   0x4
c001f08d:	6a 0c                	push   0xc
c001f08f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f096:	50                   	push   eax
c001f097:	52                   	push   edx
c001f098:	e8 39 ea ff ff       	call   c001dad6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f09d:	90                   	nop
c001f09e:	90                   	nop
c001f09f:	6a 00                	push   0x0
c001f0a1:	6a 0c                	push   0xc
c001f0a3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f0aa:	50                   	push   eax
c001f0ab:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f0b1:	e8 20 ea ff ff       	call   c001dad6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f0b6:	83 c4 14             	add    esp,0x14
c001f0b9:	53                   	push   ebx
c001f0ba:	e8 8f ef fe ff       	call   c000e04e <PhysicalDisk::startCache()>
c001f0bf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001f0c2:	e8 1b 00 ff ff       	call   c000f0e2 <createPartitionsForDisk(PhysicalDisk*)>
c001f0c7:	31 c0                	xor    eax,eax
c001f0c9:	83 c4 18             	add    esp,0x18
c001f0cc:	5b                   	pop    ebx
c001f0cd:	c3                   	ret    

c001f0ce <ATAPI::write(unsigned long long, int, void*)>:
c001f0ce:	b8 03 00 00 00       	mov    eax,0x3
c001f0d3:	c3                   	ret    

c001f0d4 <ATAPI::close(int, int, void*)>:
c001f0d4:	83 ec 0c             	sub    esp,0xc
c001f0d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0db:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001f0e1:	85 c0                	test   eax,eax
c001f0e3:	74 0c                	je     c001f0f1 <ATAPI::close(int, int, void*)+0x1d>
c001f0e5:	83 ec 0c             	sub    esp,0xc
c001f0e8:	8b 10                	mov    edx,DWORD PTR [eax]
c001f0ea:	50                   	push   eax
c001f0eb:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001f0ee:	83 c4 10             	add    esp,0x10
c001f0f1:	31 c0                	xor    eax,eax
c001f0f3:	83 c4 0c             	add    esp,0xc
c001f0f6:	c3                   	ret    
c001f0f7:	90                   	nop

c001f0f8 <ATAPI::ATAPI()>:
c001f0f8:	83 ec 0c             	sub    esp,0xc
c001f0fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0ff:	83 ec 04             	sub    esp,0x4
c001f102:	68 00 08 00 00       	push   0x800
c001f107:	68 ed 55 02 c0       	push   0xc00255ed
c001f10c:	50                   	push   eax
c001f10d:	e8 d4 ee fe ff       	call   c000dfe6 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001f112:	83 c4 10             	add    esp,0x10
c001f115:	ba 80 53 02 c0       	mov    edx,0xc0025380
c001f11a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f11e:	89 10                	mov    DWORD PTR [eax],edx
c001f120:	90                   	nop
c001f121:	83 c4 0c             	add    esp,0xc
c001f124:	c3                   	ret    
c001f125:	90                   	nop

c001f126 <ATAPI::readyForCommand()>:
c001f126:	56                   	push   esi
c001f127:	53                   	push   ebx
c001f128:	53                   	push   ebx
c001f129:	31 db                	xor    ebx,ebx
c001f12b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f12f:	51                   	push   ecx
c001f130:	6a 0c                	push   0xc
c001f132:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001f139:	50                   	push   eax
c001f13a:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001f140:	e8 51 ea ff ff       	call   c001db96 <IDE::read(unsigned char, unsigned char)>
c001f145:	83 c4 10             	add    esp,0x10
c001f148:	a8 88                	test   al,0x88
c001f14a:	74 25                	je     c001f171 <ATAPI::readyForCommand()+0x4b>
c001f14c:	43                   	inc    ebx
c001f14d:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c001f153:	7e da                	jle    c001f12f <ATAPI::readyForCommand()+0x9>
c001f155:	83 ec 0c             	sub    esp,0xc
c001f158:	68 5e 01 00 00       	push   0x15e
c001f15d:	e8 76 71 ff ff       	call   c00162d8 <milliTenthSleep(unsigned int)>
c001f162:	83 c4 10             	add    esp,0x10
c001f165:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c001f16b:	75 c2                	jne    c001f12f <ATAPI::readyForCommand()+0x9>
c001f16d:	31 c0                	xor    eax,eax
c001f16f:	eb 02                	jmp    c001f173 <ATAPI::readyForCommand()+0x4d>
c001f171:	b0 01                	mov    al,0x1
c001f173:	5a                   	pop    edx
c001f174:	5b                   	pop    ebx
c001f175:	5e                   	pop    esi
c001f176:	c3                   	ret    
c001f177:	90                   	nop

c001f178 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001f178:	55                   	push   ebp
c001f179:	57                   	push   edi
c001f17a:	56                   	push   esi
c001f17b:	53                   	push   ebx
c001f17c:	83 ec 20             	sub    esp,0x20
c001f17f:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001f183:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001f187:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001f18b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001f18f:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001f193:	6a 01                	push   0x1
c001f195:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001f19c:	50                   	push   eax
c001f19d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001f1a3:	e8 36 eb ff ff       	call   c001dcde <IDE::enableIRQs(unsigned char, bool)>
c001f1a8:	5e                   	pop    esi
c001f1a9:	58                   	pop    eax
c001f1aa:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001f1b1:	50                   	push   eax
c001f1b2:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001f1b8:	e8 f3 e8 ff ff       	call   c001dab0 <IDE::prepareInterrupt(unsigned char)>
c001f1bd:	89 3c 24             	mov    DWORD PTR [esp],edi
c001f1c0:	e8 61 ff ff ff       	call   c001f126 <ATAPI::readyForCommand()>
c001f1c5:	83 c4 10             	add    esp,0x10
c001f1c8:	84 c0                	test   al,al
c001f1ca:	75 0a                	jne    c001f1d6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c001f1cc:	bb 01 00 00 00       	mov    ebx,0x1
c001f1d1:	e9 57 02 00 00       	jmp    c001f42d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001f1d6:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c001f1dc:	c1 e0 04             	shl    eax,0x4
c001f1df:	0f b6 c0             	movzx  eax,al
c001f1e2:	50                   	push   eax
c001f1e3:	6a 06                	push   0x6
c001f1e5:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001f1ec:	50                   	push   eax
c001f1ed:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001f1f3:	e8 de e8 ff ff       	call   c001dad6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f1f8:	6a 00                	push   0x0
c001f1fa:	6a 01                	push   0x1
c001f1fc:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001f203:	50                   	push   eax
c001f204:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001f20a:	e8 c7 e8 ff ff       	call   c001dad6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f20f:	83 c4 20             	add    esp,0x20
c001f212:	0f b6 c3             	movzx  eax,bl
c001f215:	0f b6 df             	movzx  ebx,bh
c001f218:	50                   	push   eax
c001f219:	6a 04                	push   0x4
c001f21b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001f222:	50                   	push   eax
c001f223:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001f229:	e8 a8 e8 ff ff       	call   c001dad6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f22e:	53                   	push   ebx
c001f22f:	6a 05                	push   0x5
c001f231:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001f238:	50                   	push   eax
c001f239:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001f23f:	e8 92 e8 ff ff       	call   c001dad6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f244:	83 c4 20             	add    esp,0x20
c001f247:	68 a0 00 00 00       	push   0xa0
c001f24c:	6a 07                	push   0x7
c001f24e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001f255:	50                   	push   eax
c001f256:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001f25c:	e8 75 e8 ff ff       	call   c001dad6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f261:	83 c4 0c             	add    esp,0xc
c001f264:	6a 01                	push   0x1
c001f266:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001f26d:	50                   	push   eax
c001f26e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001f274:	e8 11 f3 ff ff       	call   c001e58a <IDE::polling(unsigned char, unsigned int)>
c001f279:	83 c4 10             	add    esp,0x10
c001f27c:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c001f282:	84 c0                	test   al,al
c001f284:	74 23                	je     c001f2a9 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c001f286:	0f b6 d8             	movzx  ebx,al
c001f289:	0f b6 d2             	movzx  edx,dl
c001f28c:	53                   	push   ebx
c001f28d:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c001f294:	50                   	push   eax
c001f295:	52                   	push   edx
c001f296:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001f29c:	e8 39 f2 ff ff       	call   c001e4da <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001f2a1:	83 c4 10             	add    esp,0x10
c001f2a4:	e9 84 01 00 00       	jmp    c001f42d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001f2a9:	0f b6 d2             	movzx  edx,dl
c001f2ac:	53                   	push   ebx
c001f2ad:	53                   	push   ebx
c001f2ae:	52                   	push   edx
c001f2af:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001f2b5:	e8 0a e8 ff ff       	call   c001dac4 <IDE::getBase(unsigned char)>
c001f2ba:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001f2be:	b9 06 00 00 00       	mov    ecx,0x6
c001f2c3:	89 c2                	mov    edx,eax
c001f2c5:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001f2c8:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001f2cc:	83 c4 10             	add    esp,0x10
c001f2cf:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001f2d5:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001f2dc:	85 db                	test   ebx,ebx
c001f2de:	0f 84 ec 00 00 00    	je     c001f3d0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c001f2e4:	51                   	push   ecx
c001f2e5:	51                   	push   ecx
c001f2e6:	52                   	push   edx
c001f2e7:	50                   	push   eax
c001f2e8:	e8 57 e9 ff ff       	call   c001dc44 <IDE::waitInterrupt(unsigned char)>
c001f2ed:	83 c4 10             	add    esp,0x10
c001f2f0:	84 c0                	test   al,al
c001f2f2:	0f 84 d4 fe ff ff    	je     c001f1cc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001f2f8:	56                   	push   esi
c001f2f9:	56                   	push   esi
c001f2fa:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001f301:	50                   	push   eax
c001f302:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001f308:	e8 a3 e7 ff ff       	call   c001dab0 <IDE::prepareInterrupt(unsigned char)>
c001f30d:	83 c4 0c             	add    esp,0xc
c001f310:	6a 04                	push   0x4
c001f312:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001f319:	50                   	push   eax
c001f31a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001f320:	e8 71 e8 ff ff       	call   c001db96 <IDE::read(unsigned char, unsigned char)>
c001f325:	83 c4 0c             	add    esp,0xc
c001f328:	89 c6                	mov    esi,eax
c001f32a:	6a 05                	push   0x5
c001f32c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001f333:	50                   	push   eax
c001f334:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001f33a:	e8 57 e8 ff ff       	call   c001db96 <IDE::read(unsigned char, unsigned char)>
c001f33f:	89 f1                	mov    ecx,esi
c001f341:	0f b6 c0             	movzx  eax,al
c001f344:	0f b6 f1             	movzx  esi,cl
c001f347:	c1 e0 08             	shl    eax,0x8
c001f34a:	09 c6                	or     esi,eax
c001f34c:	d1 fe                	sar    esi,1
c001f34e:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001f352:	83 c4 10             	add    esp,0x10
c001f355:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001f35a:	74 41                	je     c001f39d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c001f35c:	31 c9                	xor    ecx,ecx
c001f35e:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001f364:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001f36b:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c001f36f:	75 0a                	jne    c001f37b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c001f371:	01 c9                	add    ecx,ecx
c001f373:	01 cd                	add    ebp,ecx
c001f375:	4b                   	dec    ebx
c001f376:	e9 54 ff ff ff       	jmp    c001f2cf <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c001f37b:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c001f380:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001f384:	51                   	push   ecx
c001f385:	51                   	push   ecx
c001f386:	52                   	push   edx
c001f387:	50                   	push   eax
c001f388:	e8 37 e7 ff ff       	call   c001dac4 <IDE::getBase(unsigned char)>
c001f38d:	89 c2                	mov    edx,eax
c001f38f:	89 f0                	mov    eax,esi
c001f391:	66 ef                	out    dx,ax
c001f393:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001f397:	83 c4 10             	add    esp,0x10
c001f39a:	41                   	inc    ecx
c001f39b:	eb c1                	jmp    c001f35e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c001f39d:	31 f6                	xor    esi,esi
c001f39f:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001f3a5:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001f3ac:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c001f3b0:	75 06                	jne    c001f3b8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c001f3b2:	01 f6                	add    esi,esi
c001f3b4:	01 f5                	add    ebp,esi
c001f3b6:	eb bd                	jmp    c001f375 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c001f3b8:	51                   	push   ecx
c001f3b9:	51                   	push   ecx
c001f3ba:	52                   	push   edx
c001f3bb:	50                   	push   eax
c001f3bc:	e8 03 e7 ff ff       	call   c001dac4 <IDE::getBase(unsigned char)>
c001f3c1:	89 c2                	mov    edx,eax
c001f3c3:	66 ed                	in     ax,dx
c001f3c5:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c001f3ca:	83 c4 10             	add    esp,0x10
c001f3cd:	46                   	inc    esi
c001f3ce:	eb cf                	jmp    c001f39f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c001f3d0:	51                   	push   ecx
c001f3d1:	51                   	push   ecx
c001f3d2:	52                   	push   edx
c001f3d3:	50                   	push   eax
c001f3d4:	e8 6b e8 ff ff       	call   c001dc44 <IDE::waitInterrupt(unsigned char)>
c001f3d9:	83 c4 10             	add    esp,0x10
c001f3dc:	84 c0                	test   al,al
c001f3de:	0f 84 e8 fd ff ff    	je     c001f1cc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001f3e4:	bb a0 86 01 00       	mov    ebx,0x186a0
c001f3e9:	52                   	push   edx
c001f3ea:	52                   	push   edx
c001f3eb:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001f3f2:	50                   	push   eax
c001f3f3:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001f3f9:	e8 b2 e6 ff ff       	call   c001dab0 <IDE::prepareInterrupt(unsigned char)>
c001f3fe:	83 c4 10             	add    esp,0x10
c001f401:	50                   	push   eax
c001f402:	50                   	push   eax
c001f403:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001f40a:	50                   	push   eax
c001f40b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001f411:	e8 ae e6 ff ff       	call   c001dac4 <IDE::getBase(unsigned char)>
c001f416:	8d 50 07             	lea    edx,[eax+0x7]
c001f419:	ec                   	in     al,dx
c001f41a:	83 c4 10             	add    esp,0x10
c001f41d:	a8 88                	test   al,0x88
c001f41f:	74 0a                	je     c001f42b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c001f421:	4b                   	dec    ebx
c001f422:	75 dd                	jne    c001f401 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c001f424:	bb 02 00 00 00       	mov    ebx,0x2
c001f429:	eb 02                	jmp    c001f42d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001f42b:	31 db                	xor    ebx,ebx
c001f42d:	83 c4 1c             	add    esp,0x1c
c001f430:	89 d8                	mov    eax,ebx
c001f432:	5b                   	pop    ebx
c001f433:	5e                   	pop    esi
c001f434:	5f                   	pop    edi
c001f435:	5d                   	pop    ebp
c001f436:	c3                   	ret    
c001f437:	90                   	nop

c001f438 <ATAPI::diskRemoved()>:
c001f438:	53                   	push   ebx
c001f439:	83 ec 14             	sub    esp,0x14
c001f43c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001f440:	68 38 53 02 c0       	push   0xc0025338
c001f445:	e8 e7 d2 fe ff       	call   c000c731 <Dbg::kprintf(char const*, ...)>
c001f44a:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001f451:	c7 04 24 4e 53 02 c0 	mov    DWORD PTR [esp],0xc002534e
c001f458:	e8 d4 d2 fe ff       	call   c000c731 <Dbg::kprintf(char const*, ...)>
c001f45d:	58                   	pop    eax
c001f45e:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c001f464:	e8 f7 f9 fe ff       	call   c000ee60 <LogicalDisk::unmount()>
c001f469:	c7 04 24 5d 53 02 c0 	mov    DWORD PTR [esp],0xc002535d
c001f470:	e8 bc d2 fe ff       	call   c000c731 <Dbg::kprintf(char const*, ...)>
c001f475:	5a                   	pop    edx
c001f476:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001f47c:	e8 27 03 ff ff       	call   c000f7a8 <VCache::writeWriteBuffer()>
c001f481:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001f487:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001f48b:	83 c4 18             	add    esp,0x18
c001f48e:	5b                   	pop    ebx
c001f48f:	e9 04 03 ff ff       	jmp    c000f798 <VCache::invalidateReadBuffer()>

c001f494 <ATAPI::eject()>:
c001f494:	57                   	push   edi
c001f495:	b9 03 00 00 00       	mov    ecx,0x3
c001f49a:	53                   	push   ebx
c001f49b:	83 ec 14             	sub    esp,0x14
c001f49e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001f4a2:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001f4a6:	fc                   	cld    
c001f4a7:	31 c0                	xor    eax,eax
c001f4a9:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001f4ab:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001f4b0:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001f4b5:	50                   	push   eax
c001f4b6:	50                   	push   eax
c001f4b7:	6a 00                	push   0x0
c001f4b9:	6a 00                	push   0x0
c001f4bb:	6a 00                	push   0x0
c001f4bd:	6a 02                	push   0x2
c001f4bf:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001f4c3:	50                   	push   eax
c001f4c4:	53                   	push   ebx
c001f4c5:	e8 ae fc ff ff       	call   c001f178 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001f4ca:	83 c4 14             	add    esp,0x14
c001f4cd:	53                   	push   ebx
c001f4ce:	e8 65 ff ff ff       	call   c001f438 <ATAPI::diskRemoved()>
c001f4d3:	83 c4 24             	add    esp,0x24
c001f4d6:	31 c0                	xor    eax,eax
c001f4d8:	5b                   	pop    ebx
c001f4d9:	5f                   	pop    edi
c001f4da:	c3                   	ret    
c001f4db:	90                   	nop

c001f4dc <ATAPI::diskInserted()>:
c001f4dc:	83 ec 18             	sub    esp,0x18
c001f4df:	68 f9 55 02 c0       	push   0xc00255f9
c001f4e4:	e8 48 d2 fe ff       	call   c000c731 <Dbg::kprintf(char const*, ...)>
c001f4e9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001f4ed:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c001f4f4:	83 c4 1c             	add    esp,0x1c
c001f4f7:	c3                   	ret    

c001f4f8 <ATAPI::detectMedia()>:
c001f4f8:	56                   	push   esi
c001f4f9:	53                   	push   ebx
c001f4fa:	83 ec 28             	sub    esp,0x28
c001f4fd:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f501:	6a 0c                	push   0xc
c001f503:	6a 00                	push   0x0
c001f505:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001f509:	56                   	push   esi
c001f50a:	e8 99 0f fe ff       	call   c00004a8 <memset>
c001f50f:	58                   	pop    eax
c001f510:	5a                   	pop    edx
c001f511:	6a 00                	push   0x0
c001f513:	6a 00                	push   0x0
c001f515:	6a 00                	push   0x0
c001f517:	6a 00                	push   0x0
c001f519:	56                   	push   esi
c001f51a:	53                   	push   ebx
c001f51b:	e8 58 fc ff ff       	call   c001f178 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001f520:	83 c4 1c             	add    esp,0x1c
c001f523:	6a 0c                	push   0xc
c001f525:	6a 00                	push   0x0
c001f527:	56                   	push   esi
c001f528:	e8 7b 0f fe ff       	call   c00004a8 <memset>
c001f52d:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001f532:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001f537:	59                   	pop    ecx
c001f538:	58                   	pop    eax
c001f539:	6a 01                	push   0x1
c001f53b:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001f53f:	50                   	push   eax
c001f540:	6a 00                	push   0x0
c001f542:	6a 12                	push   0x12
c001f544:	56                   	push   esi
c001f545:	53                   	push   ebx
c001f546:	e8 2d fc ff ff       	call   c001f178 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001f54b:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001f54f:	83 c4 20             	add    esp,0x20
c001f552:	83 e0 7f             	and    eax,0x7f
c001f555:	3c 70                	cmp    al,0x70
c001f557:	74 15                	je     c001f56e <ATAPI::detectMedia()+0x76>
c001f559:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001f560:	75 0c                	jne    c001f56e <ATAPI::detectMedia()+0x76>
c001f562:	83 ec 0c             	sub    esp,0xc
c001f565:	53                   	push   ebx
c001f566:	e8 71 ff ff ff       	call   c001f4dc <ATAPI::diskInserted()>
c001f56b:	83 c4 10             	add    esp,0x10
c001f56e:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001f572:	83 e0 0f             	and    eax,0xf
c001f575:	3c 02                	cmp    al,0x2
c001f577:	75 1b                	jne    c001f594 <ATAPI::detectMedia()+0x9c>
c001f579:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001f57e:	75 2d                	jne    c001f5ad <ATAPI::detectMedia()+0xb5>
c001f580:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001f587:	74 24                	je     c001f5ad <ATAPI::detectMedia()+0xb5>
c001f589:	83 ec 0c             	sub    esp,0xc
c001f58c:	53                   	push   ebx
c001f58d:	e8 a6 fe ff ff       	call   c001f438 <ATAPI::diskRemoved()>
c001f592:	eb 16                	jmp    c001f5aa <ATAPI::detectMedia()+0xb2>
c001f594:	84 c0                	test   al,al
c001f596:	75 15                	jne    c001f5ad <ATAPI::detectMedia()+0xb5>
c001f598:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001f59f:	75 0c                	jne    c001f5ad <ATAPI::detectMedia()+0xb5>
c001f5a1:	83 ec 0c             	sub    esp,0xc
c001f5a4:	53                   	push   ebx
c001f5a5:	e8 32 ff ff ff       	call   c001f4dc <ATAPI::diskInserted()>
c001f5aa:	83 c4 10             	add    esp,0x10
c001f5ad:	83 c4 24             	add    esp,0x24
c001f5b0:	5b                   	pop    ebx
c001f5b1:	5e                   	pop    esi
c001f5b2:	c3                   	ret    
c001f5b3:	90                   	nop

c001f5b4 <ATAPI::open(int, int, void*)>:
c001f5b4:	56                   	push   esi
c001f5b5:	53                   	push   ebx
c001f5b6:	50                   	push   eax
c001f5b7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f5bb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001f5bf:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001f5c3:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001f5c9:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001f5cf:	c1 e0 06             	shl    eax,0x6
c001f5d2:	01 d0                	add    eax,edx
c001f5d4:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001f5db:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001f5e1:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001f5e8:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001f5f2:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001f5f8:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001f5ff:	6a 04                	push   0x4
c001f601:	6a 0c                	push   0xc
c001f603:	51                   	push   ecx
c001f604:	52                   	push   edx
c001f605:	e8 cc e4 ff ff       	call   c001dad6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f60a:	90                   	nop
c001f60b:	90                   	nop
c001f60c:	6a 00                	push   0x0
c001f60e:	6a 0c                	push   0xc
c001f610:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f617:	50                   	push   eax
c001f618:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f61e:	e8 b3 e4 ff ff       	call   c001dad6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f623:	83 c4 14             	add    esp,0x14
c001f626:	68 74 01 00 00       	push   0x174
c001f62b:	e8 67 a1 fe ff       	call   c0009797 <malloc>
c001f630:	83 c4 0c             	add    esp,0xc
c001f633:	89 c6                	mov    esi,eax
c001f635:	6a 00                	push   0x0
c001f637:	68 ff ff ff 7f       	push   0x7fffffff
c001f63c:	6a 00                	push   0x0
c001f63e:	6a 00                	push   0x0
c001f640:	53                   	push   ebx
c001f641:	68 d6 56 02 c0       	push   0xc00256d6
c001f646:	50                   	push   eax
c001f647:	e8 20 f6 fe ff       	call   c000ec6c <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001f64c:	83 c4 14             	add    esp,0x14
c001f64f:	56                   	push   esi
c001f650:	e8 cd f6 fe ff       	call   c000ed22 <LogicalDisk::assignDriveLetter()>
c001f655:	5a                   	pop    edx
c001f656:	0f be c0             	movsx  eax,al
c001f659:	59                   	pop    ecx
c001f65a:	50                   	push   eax
c001f65b:	68 6b 53 02 c0       	push   0xc002536b
c001f660:	e8 cc d0 fe ff       	call   c000c731 <Dbg::kprintf(char const*, ...)>
c001f665:	58                   	pop    eax
c001f666:	5a                   	pop    edx
c001f667:	56                   	push   esi
c001f668:	53                   	push   ebx
c001f669:	e8 40 e5 fe ff       	call   c000dbae <Device::addChild(Device*)>
c001f66e:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c001f674:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001f677:	e8 d2 e9 fe ff       	call   c000e04e <PhysicalDisk::startCache()>
c001f67c:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001f683:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001f686:	e8 6d fe ff ff       	call   c001f4f8 <ATAPI::detectMedia()>
c001f68b:	83 c4 14             	add    esp,0x14
c001f68e:	31 c0                	xor    eax,eax
c001f690:	5b                   	pop    ebx
c001f691:	5e                   	pop    esi
c001f692:	c3                   	ret    
c001f693:	90                   	nop

c001f694 <ATAPI::read(unsigned long long, int, void*)>:
c001f694:	55                   	push   ebp
c001f695:	57                   	push   edi
c001f696:	56                   	push   esi
c001f697:	53                   	push   ebx
c001f698:	83 ec 1c             	sub    esp,0x1c
c001f69b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001f69f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f6a3:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001f6a7:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c001f6ae:	74 41                	je     c001f6f1 <ATAPI::read(unsigned long long, int, void*)+0x5d>
c001f6b0:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001f6b4:	b9 03 00 00 00       	mov    ecx,0x3
c001f6b9:	fc                   	cld    
c001f6ba:	31 c0                	xor    eax,eax
c001f6bc:	86 fb                	xchg   bl,bh
c001f6be:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001f6c0:	c1 c3 10             	rol    ebx,0x10
c001f6c3:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001f6c8:	89 e8                	mov    eax,ebp
c001f6ca:	86 fb                	xchg   bl,bh
c001f6cc:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001f6d0:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c001f6d4:	50                   	push   eax
c001f6d5:	50                   	push   eax
c001f6d6:	55                   	push   ebp
c001f6d7:	c1 e5 0b             	shl    ebp,0xb
c001f6da:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001f6de:	6a 00                	push   0x0
c001f6e0:	55                   	push   ebp
c001f6e1:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001f6e5:	50                   	push   eax
c001f6e6:	56                   	push   esi
c001f6e7:	e8 8c fa ff ff       	call   c001f178 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001f6ec:	83 c4 20             	add    esp,0x20
c001f6ef:	eb 1a                	jmp    c001f70b <ATAPI::read(unsigned long long, int, void*)+0x77>
c001f6f1:	83 ec 0c             	sub    esp,0xc
c001f6f4:	56                   	push   esi
c001f6f5:	e8 fe fd ff ff       	call   c001f4f8 <ATAPI::detectMedia()>
c001f6fa:	83 c4 10             	add    esp,0x10
c001f6fd:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c001f704:	75 aa                	jne    c001f6b0 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001f706:	b8 02 00 00 00       	mov    eax,0x2
c001f70b:	83 c4 1c             	add    esp,0x1c
c001f70e:	5b                   	pop    ebx
c001f70f:	5e                   	pop    esi
c001f710:	5f                   	pop    edi
c001f711:	5d                   	pop    ebp
c001f712:	c3                   	ret    
c001f713:	90                   	nop

c001f714 <SATA::close(int, int, void*)>:
c001f714:	83 ec 0c             	sub    esp,0xc
c001f717:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f71b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001f721:	85 c0                	test   eax,eax
c001f723:	74 0c                	je     c001f731 <SATA::close(int, int, void*)+0x1d>
c001f725:	83 ec 0c             	sub    esp,0xc
c001f728:	8b 10                	mov    edx,DWORD PTR [eax]
c001f72a:	50                   	push   eax
c001f72b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001f72e:	83 c4 10             	add    esp,0x10
c001f731:	31 c0                	xor    eax,eax
c001f733:	83 c4 0c             	add    esp,0xc
c001f736:	c3                   	ret    
c001f737:	90                   	nop

c001f738 <SATA::powerSaving(PowerSavingLevel)>:
c001f738:	c3                   	ret    
c001f739:	90                   	nop

c001f73a <SATA::open(int, int, void*)>:
c001f73a:	56                   	push   esi
c001f73b:	53                   	push   ebx
c001f73c:	51                   	push   ecx
c001f73d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f741:	f6 05 41 63 02 c0 08 	test   BYTE PTR ds:0xc0026341,0x8
c001f748:	74 2d                	je     c001f777 <SATA::open(int, int, void*)+0x3d>
c001f74a:	83 ec 0c             	sub    esp,0xc
c001f74d:	68 b0 53 02 c0       	push   0xc00253b0
c001f752:	e8 9a a0 fe ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c001f757:	83 c4 10             	add    esp,0x10
c001f75a:	f6 05 40 63 02 c0 80 	test   BYTE PTR ds:0xc0026340,0x80
c001f761:	75 14                	jne    c001f777 <SATA::open(int, int, void*)+0x3d>
c001f763:	e4 60                	in     al,0x60
c001f765:	3c 5a                	cmp    al,0x5a
c001f767:	74 04                	je     c001f76d <SATA::open(int, int, void*)+0x33>
c001f769:	3c 1c                	cmp    al,0x1c
c001f76b:	75 f6                	jne    c001f763 <SATA::open(int, int, void*)+0x29>
c001f76d:	e4 60                	in     al,0x60
c001f76f:	3c 5a                	cmp    al,0x5a
c001f771:	74 fa                	je     c001f76d <SATA::open(int, int, void*)+0x33>
c001f773:	3c 1c                	cmp    al,0x1c
c001f775:	74 f6                	je     c001f76d <SATA::open(int, int, void*)+0x33>
c001f777:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001f77b:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001f785:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001f78b:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001f795:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f799:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001f7a3:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001f7a9:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001f7b0:	f6 05 41 63 02 c0 08 	test   BYTE PTR ds:0xc0026341,0x8
c001f7b7:	74 2d                	je     c001f7e6 <SATA::open(int, int, void*)+0xac>
c001f7b9:	83 ec 0c             	sub    esp,0xc
c001f7bc:	68 bd 53 02 c0       	push   0xc00253bd
c001f7c1:	e8 2b a0 fe ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c001f7c6:	83 c4 10             	add    esp,0x10
c001f7c9:	f6 05 40 63 02 c0 80 	test   BYTE PTR ds:0xc0026340,0x80
c001f7d0:	75 14                	jne    c001f7e6 <SATA::open(int, int, void*)+0xac>
c001f7d2:	e4 60                	in     al,0x60
c001f7d4:	3c 1c                	cmp    al,0x1c
c001f7d6:	74 04                	je     c001f7dc <SATA::open(int, int, void*)+0xa2>
c001f7d8:	3c 5a                	cmp    al,0x5a
c001f7da:	75 f6                	jne    c001f7d2 <SATA::open(int, int, void*)+0x98>
c001f7dc:	e4 60                	in     al,0x60
c001f7de:	3c 5a                	cmp    al,0x5a
c001f7e0:	74 fa                	je     c001f7dc <SATA::open(int, int, void*)+0xa2>
c001f7e2:	3c 1c                	cmp    al,0x1c
c001f7e4:	74 f6                	je     c001f7dc <SATA::open(int, int, void*)+0xa2>
c001f7e6:	e8 eb a3 fe ff       	call   c0009bd6 <Phys::allocatePage()>
c001f7eb:	89 c6                	mov    esi,eax
c001f7ed:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001f7f3:	81 c6 00 10 00 00    	add    esi,0x1000
c001f7f9:	e8 d8 a3 fe ff       	call   c0009bd6 <Phys::allocatePage()>
c001f7fe:	39 c6                	cmp    esi,eax
c001f800:	74 10                	je     c001f812 <SATA::open(int, int, void*)+0xd8>
c001f802:	83 ec 0c             	sub    esp,0xc
c001f805:	68 ca 53 02 c0       	push   0xc00253ca
c001f80a:	e8 8c 32 ff ff       	call   c0012a9b <Krnl::panic(char const*)>
c001f80f:	83 c4 10             	add    esp,0x10
c001f812:	f6 05 41 63 02 c0 08 	test   BYTE PTR ds:0xc0026341,0x8
c001f819:	74 2d                	je     c001f848 <SATA::open(int, int, void*)+0x10e>
c001f81b:	83 ec 0c             	sub    esp,0xc
c001f81e:	68 de 53 02 c0       	push   0xc00253de
c001f823:	e8 c9 9f fe ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c001f828:	83 c4 10             	add    esp,0x10
c001f82b:	f6 05 40 63 02 c0 80 	test   BYTE PTR ds:0xc0026340,0x80
c001f832:	75 14                	jne    c001f848 <SATA::open(int, int, void*)+0x10e>
c001f834:	e4 60                	in     al,0x60
c001f836:	3c 1c                	cmp    al,0x1c
c001f838:	74 04                	je     c001f83e <SATA::open(int, int, void*)+0x104>
c001f83a:	3c 5a                	cmp    al,0x5a
c001f83c:	75 f6                	jne    c001f834 <SATA::open(int, int, void*)+0xfa>
c001f83e:	e4 60                	in     al,0x60
c001f840:	3c 5a                	cmp    al,0x5a
c001f842:	74 fa                	je     c001f83e <SATA::open(int, int, void*)+0x104>
c001f844:	3c 1c                	cmp    al,0x1c
c001f846:	74 f6                	je     c001f83e <SATA::open(int, int, void*)+0x104>
c001f848:	83 ec 0c             	sub    esp,0xc
c001f84b:	6a 02                	push   0x2
c001f84d:	e8 83 bb fe ff       	call   c000b3d5 <Virt::allocateKernelVirtualPages(int)>
c001f852:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001f858:	6a 03                	push   0x3
c001f85a:	50                   	push   eax
c001f85b:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001f861:	ff 35 14 64 02 c0    	push   DWORD PTR ds:0xc0026414
c001f867:	e8 d4 c1 fe ff       	call   c000ba40 <VAS::mapPage(unsigned long, unsigned long, int)>
c001f86c:	83 c4 20             	add    esp,0x20
c001f86f:	f6 05 41 63 02 c0 08 	test   BYTE PTR ds:0xc0026341,0x8
c001f876:	74 2d                	je     c001f8a5 <SATA::open(int, int, void*)+0x16b>
c001f878:	83 ec 0c             	sub    esp,0xc
c001f87b:	68 eb 53 02 c0       	push   0xc00253eb
c001f880:	e8 6c 9f fe ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c001f885:	83 c4 10             	add    esp,0x10
c001f888:	f6 05 40 63 02 c0 80 	test   BYTE PTR ds:0xc0026340,0x80
c001f88f:	75 14                	jne    c001f8a5 <SATA::open(int, int, void*)+0x16b>
c001f891:	e4 60                	in     al,0x60
c001f893:	3c 1c                	cmp    al,0x1c
c001f895:	74 04                	je     c001f89b <SATA::open(int, int, void*)+0x161>
c001f897:	3c 5a                	cmp    al,0x5a
c001f899:	75 f6                	jne    c001f891 <SATA::open(int, int, void*)+0x157>
c001f89b:	e4 60                	in     al,0x60
c001f89d:	3c 5a                	cmp    al,0x5a
c001f89f:	74 fa                	je     c001f89b <SATA::open(int, int, void*)+0x161>
c001f8a1:	3c 1c                	cmp    al,0x1c
c001f8a3:	74 f6                	je     c001f89b <SATA::open(int, int, void*)+0x161>
c001f8a5:	83 ec 0c             	sub    esp,0xc
c001f8a8:	53                   	push   ebx
c001f8a9:	e8 a0 e7 fe ff       	call   c000e04e <PhysicalDisk::startCache()>
c001f8ae:	83 c4 10             	add    esp,0x10
c001f8b1:	f6 05 41 63 02 c0 08 	test   BYTE PTR ds:0xc0026341,0x8
c001f8b8:	74 2d                	je     c001f8e7 <SATA::open(int, int, void*)+0x1ad>
c001f8ba:	83 ec 0c             	sub    esp,0xc
c001f8bd:	68 f8 53 02 c0       	push   0xc00253f8
c001f8c2:	e8 2a 9f fe ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c001f8c7:	83 c4 10             	add    esp,0x10
c001f8ca:	f6 05 40 63 02 c0 80 	test   BYTE PTR ds:0xc0026340,0x80
c001f8d1:	75 14                	jne    c001f8e7 <SATA::open(int, int, void*)+0x1ad>
c001f8d3:	e4 60                	in     al,0x60
c001f8d5:	3c 1c                	cmp    al,0x1c
c001f8d7:	74 04                	je     c001f8dd <SATA::open(int, int, void*)+0x1a3>
c001f8d9:	3c 5a                	cmp    al,0x5a
c001f8db:	75 f6                	jne    c001f8d3 <SATA::open(int, int, void*)+0x199>
c001f8dd:	e4 60                	in     al,0x60
c001f8df:	3c 5a                	cmp    al,0x5a
c001f8e1:	74 fa                	je     c001f8dd <SATA::open(int, int, void*)+0x1a3>
c001f8e3:	3c 1c                	cmp    al,0x1c
c001f8e5:	74 f6                	je     c001f8dd <SATA::open(int, int, void*)+0x1a3>
c001f8e7:	83 ec 0c             	sub    esp,0xc
c001f8ea:	53                   	push   ebx
c001f8eb:	e8 f2 f7 fe ff       	call   c000f0e2 <createPartitionsForDisk(PhysicalDisk*)>
c001f8f0:	83 c4 10             	add    esp,0x10
c001f8f3:	f6 05 41 63 02 c0 08 	test   BYTE PTR ds:0xc0026341,0x8
c001f8fa:	74 2d                	je     c001f929 <SATA::open(int, int, void*)+0x1ef>
c001f8fc:	83 ec 0c             	sub    esp,0xc
c001f8ff:	68 05 54 02 c0       	push   0xc0025405
c001f904:	e8 e8 9e fe ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c001f909:	83 c4 10             	add    esp,0x10
c001f90c:	f6 05 40 63 02 c0 80 	test   BYTE PTR ds:0xc0026340,0x80
c001f913:	75 14                	jne    c001f929 <SATA::open(int, int, void*)+0x1ef>
c001f915:	e4 60                	in     al,0x60
c001f917:	3c 1c                	cmp    al,0x1c
c001f919:	74 04                	je     c001f91f <SATA::open(int, int, void*)+0x1e5>
c001f91b:	3c 5a                	cmp    al,0x5a
c001f91d:	75 f6                	jne    c001f915 <SATA::open(int, int, void*)+0x1db>
c001f91f:	e4 60                	in     al,0x60
c001f921:	3c 5a                	cmp    al,0x5a
c001f923:	74 fa                	je     c001f91f <SATA::open(int, int, void*)+0x1e5>
c001f925:	3c 1c                	cmp    al,0x1c
c001f927:	74 f6                	je     c001f91f <SATA::open(int, int, void*)+0x1e5>
c001f929:	5a                   	pop    edx
c001f92a:	31 c0                	xor    eax,eax
c001f92c:	5b                   	pop    ebx
c001f92d:	5e                   	pop    esi
c001f92e:	c3                   	ret    
c001f92f:	90                   	nop

c001f930 <SATA::SATA()>:
c001f930:	83 ec 0c             	sub    esp,0xc
c001f933:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f937:	83 ec 04             	sub    esp,0x4
c001f93a:	68 00 02 00 00       	push   0x200
c001f93f:	68 12 54 02 c0       	push   0xc0025412
c001f944:	50                   	push   eax
c001f945:	e8 9c e6 fe ff       	call   c000dfe6 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001f94a:	83 c4 10             	add    esp,0x10
c001f94d:	ba bc 55 02 c0       	mov    edx,0xc00255bc
c001f952:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f956:	89 10                	mov    DWORD PTR [eax],edx
c001f958:	90                   	nop
c001f959:	83 c4 0c             	add    esp,0xc
c001f95c:	c3                   	ret    
c001f95d:	90                   	nop

c001f95e <SATA::access(unsigned long long, int, void*, bool)>:
c001f95e:	55                   	push   ebp
c001f95f:	57                   	push   edi
c001f960:	56                   	push   esi
c001f961:	53                   	push   ebx
c001f962:	83 ec 2c             	sub    esp,0x2c
c001f965:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001f969:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001f96d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001f971:	f6 05 41 63 02 c0 08 	test   BYTE PTR ds:0xc0026341,0x8
c001f978:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001f97c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001f980:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001f984:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f988:	75 19                	jne    c001f9a3 <SATA::access(unsigned long long, int, void*, bool)+0x45>
c001f98a:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c001f98f:	7e 41                	jle    c001f9d2 <SATA::access(unsigned long long, int, void*, bool)+0x74>
c001f991:	83 ec 0c             	sub    esp,0xc
c001f994:	68 31 54 02 c0       	push   0xc0025431
c001f999:	e8 fd 30 ff ff       	call   c0012a9b <Krnl::panic(char const*)>
c001f99e:	83 c4 10             	add    esp,0x10
c001f9a1:	eb 2f                	jmp    c001f9d2 <SATA::access(unsigned long long, int, void*, bool)+0x74>
c001f9a3:	83 ec 0c             	sub    esp,0xc
c001f9a6:	68 22 54 02 c0       	push   0xc0025422
c001f9ab:	e8 41 9e fe ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c001f9b0:	83 c4 10             	add    esp,0x10
c001f9b3:	f6 05 40 63 02 c0 80 	test   BYTE PTR ds:0xc0026340,0x80
c001f9ba:	75 ce                	jne    c001f98a <SATA::access(unsigned long long, int, void*, bool)+0x2c>
c001f9bc:	e4 60                	in     al,0x60
c001f9be:	3c 1c                	cmp    al,0x1c
c001f9c0:	74 04                	je     c001f9c6 <SATA::access(unsigned long long, int, void*, bool)+0x68>
c001f9c2:	3c 5a                	cmp    al,0x5a
c001f9c4:	75 f6                	jne    c001f9bc <SATA::access(unsigned long long, int, void*, bool)+0x5e>
c001f9c6:	e4 60                	in     al,0x60
c001f9c8:	3c 5a                	cmp    al,0x5a
c001f9ca:	74 fa                	je     c001f9c6 <SATA::access(unsigned long long, int, void*, bool)+0x68>
c001f9cc:	3c 1c                	cmp    al,0x1c
c001f9ce:	74 f6                	je     c001f9c6 <SATA::access(unsigned long long, int, void*, bool)+0x68>
c001f9d0:	eb b8                	jmp    c001f98a <SATA::access(unsigned long long, int, void*, bool)+0x2c>
c001f9d2:	f6 05 41 63 02 c0 08 	test   BYTE PTR ds:0xc0026341,0x8
c001f9d9:	75 29                	jne    c001fa04 <SATA::access(unsigned long long, int, void*, bool)+0xa6>
c001f9db:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001f9e1:	8b ab 6c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x16c]
c001f9e7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001f9ed:	8d 75 02             	lea    esi,[ebp+0x2]
c001f9f0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001f9f4:	c1 e6 07             	shl    esi,0x7
c001f9f7:	01 c6                	add    esi,eax
c001f9f9:	f6 05 41 63 02 c0 08 	test   BYTE PTR ds:0xc0026341,0x8
c001fa00:	74 4a                	je     c001fa4c <SATA::access(unsigned long long, int, void*, bool)+0xee>
c001fa02:	eb 2f                	jmp    c001fa33 <SATA::access(unsigned long long, int, void*, bool)+0xd5>
c001fa04:	83 ec 0c             	sub    esp,0xc
c001fa07:	68 6a 54 02 c0       	push   0xc002546a
c001fa0c:	e8 e0 9d fe ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c001fa11:	83 c4 10             	add    esp,0x10
c001fa14:	f6 05 40 63 02 c0 80 	test   BYTE PTR ds:0xc0026340,0x80
c001fa1b:	75 be                	jne    c001f9db <SATA::access(unsigned long long, int, void*, bool)+0x7d>
c001fa1d:	e4 60                	in     al,0x60
c001fa1f:	3c 1c                	cmp    al,0x1c
c001fa21:	74 04                	je     c001fa27 <SATA::access(unsigned long long, int, void*, bool)+0xc9>
c001fa23:	3c 5a                	cmp    al,0x5a
c001fa25:	75 f6                	jne    c001fa1d <SATA::access(unsigned long long, int, void*, bool)+0xbf>
c001fa27:	e4 60                	in     al,0x60
c001fa29:	3c 5a                	cmp    al,0x5a
c001fa2b:	74 fa                	je     c001fa27 <SATA::access(unsigned long long, int, void*, bool)+0xc9>
c001fa2d:	3c 1c                	cmp    al,0x1c
c001fa2f:	74 f6                	je     c001fa27 <SATA::access(unsigned long long, int, void*, bool)+0xc9>
c001fa31:	eb a8                	jmp    c001f9db <SATA::access(unsigned long long, int, void*, bool)+0x7d>
c001fa33:	83 ec 0c             	sub    esp,0xc
c001fa36:	68 79 54 02 c0       	push   0xc0025479
c001fa3b:	e8 b1 9d fe ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c001fa40:	83 c4 10             	add    esp,0x10
c001fa43:	f6 05 40 63 02 c0 80 	test   BYTE PTR ds:0xc0026340,0x80
c001fa4a:	74 3d                	je     c001fa89 <SATA::access(unsigned long long, int, void*, bool)+0x12b>
c001fa4c:	89 e8                	mov    eax,ebp
c001fa4e:	c1 e0 07             	shl    eax,0x7
c001fa51:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001fa55:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001fa5f:	52                   	push   edx
c001fa60:	52                   	push   edx
c001fa61:	56                   	push   esi
c001fa62:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c001fa68:	e8 fd eb ff ff       	call   c001e66a <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001fa6d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001fa71:	83 c4 10             	add    esp,0x10
c001fa74:	b8 01 00 00 00       	mov    eax,0x1
c001fa79:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001fa7e:	75 1d                	jne    c001fa9d <SATA::access(unsigned long long, int, void*, bool)+0x13f>
c001fa80:	e9 c8 04 00 00       	jmp    c001ff4d <SATA::access(unsigned long long, int, void*, bool)+0x5ef>
c001fa85:	3c 5a                	cmp    al,0x5a
c001fa87:	74 0c                	je     c001fa95 <SATA::access(unsigned long long, int, void*, bool)+0x137>
c001fa89:	e4 60                	in     al,0x60
c001fa8b:	3c 1c                	cmp    al,0x1c
c001fa8d:	75 f6                	jne    c001fa85 <SATA::access(unsigned long long, int, void*, bool)+0x127>
c001fa8f:	eb 04                	jmp    c001fa95 <SATA::access(unsigned long long, int, void*, bool)+0x137>
c001fa91:	3c 1c                	cmp    al,0x1c
c001fa93:	75 b7                	jne    c001fa4c <SATA::access(unsigned long long, int, void*, bool)+0xee>
c001fa95:	e4 60                	in     al,0x60
c001fa97:	3c 5a                	cmp    al,0x5a
c001fa99:	74 fa                	je     c001fa95 <SATA::access(unsigned long long, int, void*, bool)+0x137>
c001fa9b:	eb f4                	jmp    c001fa91 <SATA::access(unsigned long long, int, void*, bool)+0x133>
c001fa9d:	f6 05 41 63 02 c0 08 	test   BYTE PTR ds:0xc0026341,0x8
c001faa4:	74 3a                	je     c001fae0 <SATA::access(unsigned long long, int, void*, bool)+0x182>
c001faa6:	83 ec 0c             	sub    esp,0xc
c001faa9:	68 88 54 02 c0       	push   0xc0025488
c001faae:	e8 3e 9d fe ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c001fab3:	83 c4 10             	add    esp,0x10
c001fab6:	f6 05 40 63 02 c0 80 	test   BYTE PTR ds:0xc0026340,0x80
c001fabd:	74 0d                	je     c001facc <SATA::access(unsigned long long, int, void*, bool)+0x16e>
c001fabf:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001fac4:	74 34                	je     c001fafa <SATA::access(unsigned long long, int, void*, bool)+0x19c>
c001fac6:	eb 1f                	jmp    c001fae7 <SATA::access(unsigned long long, int, void*, bool)+0x189>
c001fac8:	3c 1c                	cmp    al,0x1c
c001faca:	74 0c                	je     c001fad8 <SATA::access(unsigned long long, int, void*, bool)+0x17a>
c001facc:	e4 60                	in     al,0x60
c001face:	3c 5a                	cmp    al,0x5a
c001fad0:	75 f6                	jne    c001fac8 <SATA::access(unsigned long long, int, void*, bool)+0x16a>
c001fad2:	eb 04                	jmp    c001fad8 <SATA::access(unsigned long long, int, void*, bool)+0x17a>
c001fad4:	3c 1c                	cmp    al,0x1c
c001fad6:	75 e7                	jne    c001fabf <SATA::access(unsigned long long, int, void*, bool)+0x161>
c001fad8:	e4 60                	in     al,0x60
c001fada:	3c 5a                	cmp    al,0x5a
c001fadc:	74 fa                	je     c001fad8 <SATA::access(unsigned long long, int, void*, bool)+0x17a>
c001fade:	eb f4                	jmp    c001fad4 <SATA::access(unsigned long long, int, void*, bool)+0x176>
c001fae0:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001fae5:	74 1c                	je     c001fb03 <SATA::access(unsigned long long, int, void*, bool)+0x1a5>
c001fae7:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c001faeb:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c001faf1:	c1 e1 09             	shl    ecx,0x9
c001faf4:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001faf8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001fafa:	f6 05 41 63 02 c0 08 	test   BYTE PTR ds:0xc0026341,0x8
c001fb01:	75 55                	jne    c001fb58 <SATA::access(unsigned long long, int, void*, bool)+0x1fa>
c001fb03:	8d 45 02             	lea    eax,[ebp+0x2]
c001fb06:	c1 e0 07             	shl    eax,0x7
c001fb09:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001fb0d:	8b 38                	mov    edi,DWORD PTR [eax]
c001fb0f:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001fb15:	2b b8 5c 01 00 00    	sub    edi,DWORD PTR [eax+0x15c]
c001fb1b:	03 b8 58 01 00 00    	add    edi,DWORD PTR [eax+0x158]
c001fb21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb25:	c1 e0 05             	shl    eax,0x5
c001fb28:	01 c7                	add    edi,eax
c001fb2a:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001fb2e:	83 e0 01             	and    eax,0x1
c001fb31:	c1 e0 06             	shl    eax,0x6
c001fb34:	88 c2                	mov    dl,al
c001fb36:	8a 07                	mov    al,BYTE PTR [edi]
c001fb38:	83 e0 bf             	and    eax,0xffffffbf
c001fb3b:	09 d0                	or     eax,edx
c001fb3d:	88 07                	mov    BYTE PTR [edi],al
c001fb3f:	8b 07                	mov    eax,DWORD PTR [edi]
c001fb41:	25 e0 ff 00 00       	and    eax,0xffe0
c001fb46:	0d 05 00 01 00       	or     eax,0x10005
c001fb4b:	89 07                	mov    DWORD PTR [edi],eax
c001fb4d:	f6 05 41 63 02 c0 08 	test   BYTE PTR ds:0xc0026341,0x8
c001fb54:	74 4d                	je     c001fba3 <SATA::access(unsigned long long, int, void*, bool)+0x245>
c001fb56:	eb 32                	jmp    c001fb8a <SATA::access(unsigned long long, int, void*, bool)+0x22c>
c001fb58:	83 ec 0c             	sub    esp,0xc
c001fb5b:	68 97 54 02 c0       	push   0xc0025497
c001fb60:	e8 8c 9c fe ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c001fb65:	83 c4 10             	add    esp,0x10
c001fb68:	f6 05 40 63 02 c0 80 	test   BYTE PTR ds:0xc0026340,0x80
c001fb6f:	75 92                	jne    c001fb03 <SATA::access(unsigned long long, int, void*, bool)+0x1a5>
c001fb71:	e4 60                	in     al,0x60
c001fb73:	3c 1c                	cmp    al,0x1c
c001fb75:	74 04                	je     c001fb7b <SATA::access(unsigned long long, int, void*, bool)+0x21d>
c001fb77:	3c 5a                	cmp    al,0x5a
c001fb79:	75 f6                	jne    c001fb71 <SATA::access(unsigned long long, int, void*, bool)+0x213>
c001fb7b:	e4 60                	in     al,0x60
c001fb7d:	3c 5a                	cmp    al,0x5a
c001fb7f:	74 fa                	je     c001fb7b <SATA::access(unsigned long long, int, void*, bool)+0x21d>
c001fb81:	3c 1c                	cmp    al,0x1c
c001fb83:	74 f6                	je     c001fb7b <SATA::access(unsigned long long, int, void*, bool)+0x21d>
c001fb85:	e9 79 ff ff ff       	jmp    c001fb03 <SATA::access(unsigned long long, int, void*, bool)+0x1a5>
c001fb8a:	83 ec 0c             	sub    esp,0xc
c001fb8d:	68 a6 54 02 c0       	push   0xc00254a6
c001fb92:	e8 5a 9c fe ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c001fb97:	83 c4 10             	add    esp,0x10
c001fb9a:	f6 05 40 63 02 c0 80 	test   BYTE PTR ds:0xc0026340,0x80
c001fba1:	74 3b                	je     c001fbde <SATA::access(unsigned long long, int, void*, bool)+0x280>
c001fba3:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001fba9:	8b b0 58 01 00 00    	mov    esi,DWORD PTR [eax+0x158]
c001fbaf:	2b b0 5c 01 00 00    	sub    esi,DWORD PTR [eax+0x15c]
c001fbb5:	03 77 08             	add    esi,DWORD PTR [edi+0x8]
c001fbb8:	50                   	push   eax
c001fbb9:	0f b7 47 02          	movzx  eax,WORD PTR [edi+0x2]
c001fbbd:	83 c0 08             	add    eax,0x8
c001fbc0:	c1 e0 04             	shl    eax,0x4
c001fbc3:	50                   	push   eax
c001fbc4:	6a 00                	push   0x0
c001fbc6:	56                   	push   esi
c001fbc7:	e8 dc 08 fe ff       	call   c00004a8 <memset>
c001fbcc:	83 c4 10             	add    esp,0x10
c001fbcf:	f6 05 41 63 02 c0 08 	test   BYTE PTR ds:0xc0026341,0x8
c001fbd6:	74 33                	je     c001fc0b <SATA::access(unsigned long long, int, void*, bool)+0x2ad>
c001fbd8:	eb 18                	jmp    c001fbf2 <SATA::access(unsigned long long, int, void*, bool)+0x294>
c001fbda:	3c 1c                	cmp    al,0x1c
c001fbdc:	74 0c                	je     c001fbea <SATA::access(unsigned long long, int, void*, bool)+0x28c>
c001fbde:	e4 60                	in     al,0x60
c001fbe0:	3c 5a                	cmp    al,0x5a
c001fbe2:	75 f6                	jne    c001fbda <SATA::access(unsigned long long, int, void*, bool)+0x27c>
c001fbe4:	eb 04                	jmp    c001fbea <SATA::access(unsigned long long, int, void*, bool)+0x28c>
c001fbe6:	3c 1c                	cmp    al,0x1c
c001fbe8:	75 b9                	jne    c001fba3 <SATA::access(unsigned long long, int, void*, bool)+0x245>
c001fbea:	e4 60                	in     al,0x60
c001fbec:	3c 5a                	cmp    al,0x5a
c001fbee:	74 fa                	je     c001fbea <SATA::access(unsigned long long, int, void*, bool)+0x28c>
c001fbf0:	eb f4                	jmp    c001fbe6 <SATA::access(unsigned long long, int, void*, bool)+0x288>
c001fbf2:	83 ec 0c             	sub    esp,0xc
c001fbf5:	68 b5 54 02 c0       	push   0xc00254b5
c001fbfa:	e8 f2 9b fe ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c001fbff:	83 c4 10             	add    esp,0x10
c001fc02:	f6 05 40 63 02 c0 80 	test   BYTE PTR ds:0xc0026340,0x80
c001fc09:	74 48                	je     c001fc53 <SATA::access(unsigned long long, int, void*, bool)+0x2f5>
c001fc0b:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001fc11:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c001fc17:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001fc1b:	c1 e0 09             	shl    eax,0x9
c001fc1e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001fc22:	48                   	dec    eax
c001fc23:	25 ff ff 3f 00       	and    eax,0x3fffff
c001fc28:	89 c2                	mov    edx,eax
c001fc2a:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c001fc30:	25 00 00 c0 ff       	and    eax,0xffc00000
c001fc35:	09 d0                	or     eax,edx
c001fc37:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c001fc3d:	80 8e 8f 00 00 00 80 	or     BYTE PTR [esi+0x8f],0x80
c001fc44:	f6 05 41 63 02 c0 08 	test   BYTE PTR ds:0xc0026341,0x8
c001fc4b:	74 33                	je     c001fc80 <SATA::access(unsigned long long, int, void*, bool)+0x322>
c001fc4d:	eb 18                	jmp    c001fc67 <SATA::access(unsigned long long, int, void*, bool)+0x309>
c001fc4f:	3c 1c                	cmp    al,0x1c
c001fc51:	74 0c                	je     c001fc5f <SATA::access(unsigned long long, int, void*, bool)+0x301>
c001fc53:	e4 60                	in     al,0x60
c001fc55:	3c 5a                	cmp    al,0x5a
c001fc57:	75 f6                	jne    c001fc4f <SATA::access(unsigned long long, int, void*, bool)+0x2f1>
c001fc59:	eb 04                	jmp    c001fc5f <SATA::access(unsigned long long, int, void*, bool)+0x301>
c001fc5b:	3c 1c                	cmp    al,0x1c
c001fc5d:	75 ac                	jne    c001fc0b <SATA::access(unsigned long long, int, void*, bool)+0x2ad>
c001fc5f:	e4 60                	in     al,0x60
c001fc61:	3c 5a                	cmp    al,0x5a
c001fc63:	74 fa                	je     c001fc5f <SATA::access(unsigned long long, int, void*, bool)+0x301>
c001fc65:	eb f4                	jmp    c001fc5b <SATA::access(unsigned long long, int, void*, bool)+0x2fd>
c001fc67:	83 ec 0c             	sub    esp,0xc
c001fc6a:	68 c4 54 02 c0       	push   0xc00254c4
c001fc6f:	e8 7d 9b fe ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c001fc74:	83 c4 10             	add    esp,0x10
c001fc77:	f6 05 40 63 02 c0 80 	test   BYTE PTR ds:0xc0026340,0x80
c001fc7e:	74 63                	je     c001fce3 <SATA::access(unsigned long long, int, void*, bool)+0x385>
c001fc80:	66 8b 06             	mov    ax,WORD PTR [esi]
c001fc83:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c001fc87:	66 25 00 7f          	and    ax,0x7f00
c001fc8b:	66 0d 27 80          	or     ax,0x8027
c001fc8f:	80 7c 24 0c 01       	cmp    BYTE PTR [esp+0xc],0x1
c001fc94:	66 89 06             	mov    WORD PTR [esi],ax
c001fc97:	19 c0                	sbb    eax,eax
c001fc99:	83 e0 f0             	and    eax,0xfffffff0
c001fc9c:	83 c0 35             	add    eax,0x35
c001fc9f:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c001fca2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001fca6:	66 89 46 04          	mov    WORD PTR [esi+0x4],ax
c001fcaa:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001fcae:	c1 e8 10             	shr    eax,0x10
c001fcb1:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c001fcb4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001fcb8:	c1 e8 18             	shr    eax,0x18
c001fcbb:	f6 05 41 63 02 c0 08 	test   BYTE PTR ds:0xc0026341,0x8
c001fcc2:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c001fcc5:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c001fcc9:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c001fccc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001fcd0:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c001fcd3:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001fcd7:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c001fcdb:	74 33                	je     c001fd10 <SATA::access(unsigned long long, int, void*, bool)+0x3b2>
c001fcdd:	eb 18                	jmp    c001fcf7 <SATA::access(unsigned long long, int, void*, bool)+0x399>
c001fcdf:	3c 1c                	cmp    al,0x1c
c001fce1:	74 0c                	je     c001fcef <SATA::access(unsigned long long, int, void*, bool)+0x391>
c001fce3:	e4 60                	in     al,0x60
c001fce5:	3c 5a                	cmp    al,0x5a
c001fce7:	75 f6                	jne    c001fcdf <SATA::access(unsigned long long, int, void*, bool)+0x381>
c001fce9:	eb 04                	jmp    c001fcef <SATA::access(unsigned long long, int, void*, bool)+0x391>
c001fceb:	3c 1c                	cmp    al,0x1c
c001fced:	75 91                	jne    c001fc80 <SATA::access(unsigned long long, int, void*, bool)+0x322>
c001fcef:	e4 60                	in     al,0x60
c001fcf1:	3c 5a                	cmp    al,0x5a
c001fcf3:	74 fa                	je     c001fcef <SATA::access(unsigned long long, int, void*, bool)+0x391>
c001fcf5:	eb f4                	jmp    c001fceb <SATA::access(unsigned long long, int, void*, bool)+0x38d>
c001fcf7:	83 ec 0c             	sub    esp,0xc
c001fcfa:	68 d3 54 02 c0       	push   0xc00254d3
c001fcff:	e8 ed 9a fe ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c001fd04:	83 c4 10             	add    esp,0x10
c001fd07:	f6 05 40 63 02 c0 80 	test   BYTE PTR ds:0xc0026340,0x80
c001fd0e:	74 11                	je     c001fd21 <SATA::access(unsigned long long, int, void*, bool)+0x3c3>
c001fd10:	89 e8                	mov    eax,ebp
c001fd12:	31 f6                	xor    esi,esi
c001fd14:	c1 e0 07             	shl    eax,0x7
c001fd17:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001fd1b:	eb 21                	jmp    c001fd3e <SATA::access(unsigned long long, int, void*, bool)+0x3e0>
c001fd1d:	3c 1c                	cmp    al,0x1c
c001fd1f:	74 0c                	je     c001fd2d <SATA::access(unsigned long long, int, void*, bool)+0x3cf>
c001fd21:	e4 60                	in     al,0x60
c001fd23:	3c 5a                	cmp    al,0x5a
c001fd25:	75 f6                	jne    c001fd1d <SATA::access(unsigned long long, int, void*, bool)+0x3bf>
c001fd27:	eb 04                	jmp    c001fd2d <SATA::access(unsigned long long, int, void*, bool)+0x3cf>
c001fd29:	3c 1c                	cmp    al,0x1c
c001fd2b:	75 e3                	jne    c001fd10 <SATA::access(unsigned long long, int, void*, bool)+0x3b2>
c001fd2d:	e4 60                	in     al,0x60
c001fd2f:	3c 5a                	cmp    al,0x5a
c001fd31:	74 fa                	je     c001fd2d <SATA::access(unsigned long long, int, void*, bool)+0x3cf>
c001fd33:	eb f4                	jmp    c001fd29 <SATA::access(unsigned long long, int, void*, bool)+0x3cb>
c001fd35:	81 fe 40 42 0f 00    	cmp    esi,0xf4240
c001fd3b:	74 0c                	je     c001fd49 <SATA::access(unsigned long long, int, void*, bool)+0x3eb>
c001fd3d:	46                   	inc    esi
c001fd3e:	8b 90 20 01 00 00    	mov    edx,DWORD PTR [eax+0x120]
c001fd44:	80 e2 88             	and    dl,0x88
c001fd47:	75 ec                	jne    c001fd35 <SATA::access(unsigned long long, int, void*, bool)+0x3d7>
c001fd49:	f6 05 41 63 02 c0 08 	test   BYTE PTR ds:0xc0026341,0x8
c001fd50:	74 3d                	je     c001fd8f <SATA::access(unsigned long long, int, void*, bool)+0x431>
c001fd52:	83 ec 0c             	sub    esp,0xc
c001fd55:	68 e2 54 02 c0       	push   0xc00254e2
c001fd5a:	e8 92 9a fe ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c001fd5f:	8b 15 40 63 02 c0    	mov    edx,DWORD PTR ds:0xc0026340
c001fd65:	83 c4 10             	add    esp,0x10
c001fd68:	f6 c2 80             	test   dl,0x80
c001fd6b:	74 0e                	je     c001fd7b <SATA::access(unsigned long long, int, void*, bool)+0x41d>
c001fd6d:	81 fe 40 42 0f 00    	cmp    esi,0xf4240
c001fd73:	75 2f                	jne    c001fda4 <SATA::access(unsigned long long, int, void*, bool)+0x446>
c001fd75:	eb 20                	jmp    c001fd97 <SATA::access(unsigned long long, int, void*, bool)+0x439>
c001fd77:	3c 1c                	cmp    al,0x1c
c001fd79:	74 0c                	je     c001fd87 <SATA::access(unsigned long long, int, void*, bool)+0x429>
c001fd7b:	e4 60                	in     al,0x60
c001fd7d:	3c 5a                	cmp    al,0x5a
c001fd7f:	75 f6                	jne    c001fd77 <SATA::access(unsigned long long, int, void*, bool)+0x419>
c001fd81:	eb 04                	jmp    c001fd87 <SATA::access(unsigned long long, int, void*, bool)+0x429>
c001fd83:	3c 1c                	cmp    al,0x1c
c001fd85:	75 e6                	jne    c001fd6d <SATA::access(unsigned long long, int, void*, bool)+0x40f>
c001fd87:	e4 60                	in     al,0x60
c001fd89:	3c 5a                	cmp    al,0x5a
c001fd8b:	74 fa                	je     c001fd87 <SATA::access(unsigned long long, int, void*, bool)+0x429>
c001fd8d:	eb f4                	jmp    c001fd83 <SATA::access(unsigned long long, int, void*, bool)+0x425>
c001fd8f:	81 fe 40 42 0f 00    	cmp    esi,0xf4240
c001fd95:	75 13                	jne    c001fdaa <SATA::access(unsigned long long, int, void*, bool)+0x44c>
c001fd97:	83 ec 0c             	sub    esp,0xc
c001fd9a:	68 f2 54 02 c0       	push   0xc00254f2
c001fd9f:	e9 d2 00 00 00       	jmp    c001fe76 <SATA::access(unsigned long long, int, void*, bool)+0x518>
c001fda4:	0f ba e2 0b          	bt     edx,0xb
c001fda8:	72 25                	jb     c001fdcf <SATA::access(unsigned long long, int, void*, bool)+0x471>
c001fdaa:	be 01 00 00 00       	mov    esi,0x1
c001fdaf:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001fdb3:	89 e8                	mov    eax,ebp
c001fdb5:	d3 e6                	shl    esi,cl
c001fdb7:	c1 e0 07             	shl    eax,0x7
c001fdba:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001fdbe:	f6 05 41 63 02 c0 08 	test   BYTE PTR ds:0xc0026341,0x8
c001fdc5:	89 b0 38 01 00 00    	mov    DWORD PTR [eax+0x138],esi
c001fdcb:	74 4a                	je     c001fe17 <SATA::access(unsigned long long, int, void*, bool)+0x4b9>
c001fdcd:	eb 2f                	jmp    c001fdfe <SATA::access(unsigned long long, int, void*, bool)+0x4a0>
c001fdcf:	83 ec 0c             	sub    esp,0xc
c001fdd2:	68 00 55 02 c0       	push   0xc0025500
c001fdd7:	e8 15 9a fe ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c001fddc:	83 c4 10             	add    esp,0x10
c001fddf:	f6 05 40 63 02 c0 80 	test   BYTE PTR ds:0xc0026340,0x80
c001fde6:	75 c2                	jne    c001fdaa <SATA::access(unsigned long long, int, void*, bool)+0x44c>
c001fde8:	e4 60                	in     al,0x60
c001fdea:	3c 5a                	cmp    al,0x5a
c001fdec:	74 04                	je     c001fdf2 <SATA::access(unsigned long long, int, void*, bool)+0x494>
c001fdee:	3c 1c                	cmp    al,0x1c
c001fdf0:	75 f6                	jne    c001fde8 <SATA::access(unsigned long long, int, void*, bool)+0x48a>
c001fdf2:	e4 60                	in     al,0x60
c001fdf4:	3c 5a                	cmp    al,0x5a
c001fdf6:	74 fa                	je     c001fdf2 <SATA::access(unsigned long long, int, void*, bool)+0x494>
c001fdf8:	3c 1c                	cmp    al,0x1c
c001fdfa:	74 f6                	je     c001fdf2 <SATA::access(unsigned long long, int, void*, bool)+0x494>
c001fdfc:	eb ac                	jmp    c001fdaa <SATA::access(unsigned long long, int, void*, bool)+0x44c>
c001fdfe:	83 ec 0c             	sub    esp,0xc
c001fe01:	68 10 55 02 c0       	push   0xc0025510
c001fe06:	e8 e6 99 fe ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c001fe0b:	83 c4 10             	add    esp,0x10
c001fe0e:	f6 05 40 63 02 c0 80 	test   BYTE PTR ds:0xc0026340,0x80
c001fe15:	74 0f                	je     c001fe26 <SATA::access(unsigned long long, int, void*, bool)+0x4c8>
c001fe17:	89 e8                	mov    eax,ebp
c001fe19:	c1 e0 07             	shl    eax,0x7
c001fe1c:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001fe20:	eb 24                	jmp    c001fe46 <SATA::access(unsigned long long, int, void*, bool)+0x4e8>
c001fe22:	3c 1c                	cmp    al,0x1c
c001fe24:	74 0c                	je     c001fe32 <SATA::access(unsigned long long, int, void*, bool)+0x4d4>
c001fe26:	e4 60                	in     al,0x60
c001fe28:	3c 5a                	cmp    al,0x5a
c001fe2a:	75 f6                	jne    c001fe22 <SATA::access(unsigned long long, int, void*, bool)+0x4c4>
c001fe2c:	eb 04                	jmp    c001fe32 <SATA::access(unsigned long long, int, void*, bool)+0x4d4>
c001fe2e:	3c 1c                	cmp    al,0x1c
c001fe30:	75 e5                	jne    c001fe17 <SATA::access(unsigned long long, int, void*, bool)+0x4b9>
c001fe32:	e4 60                	in     al,0x60
c001fe34:	3c 5a                	cmp    al,0x5a
c001fe36:	74 fa                	je     c001fe32 <SATA::access(unsigned long long, int, void*, bool)+0x4d4>
c001fe38:	eb f4                	jmp    c001fe2e <SATA::access(unsigned long long, int, void*, bool)+0x4d0>
c001fe3a:	8b 90 10 01 00 00    	mov    edx,DWORD PTR [eax+0x110]
c001fe40:	0f ba e2 1e          	bt     edx,0x1e
c001fe44:	72 28                	jb     c001fe6e <SATA::access(unsigned long long, int, void*, bool)+0x510>
c001fe46:	8b 90 38 01 00 00    	mov    edx,DWORD PTR [eax+0x138]
c001fe4c:	85 d6                	test   esi,edx
c001fe4e:	75 ea                	jne    c001fe3a <SATA::access(unsigned long long, int, void*, bool)+0x4dc>
c001fe50:	f6 05 41 63 02 c0 08 	test   BYTE PTR ds:0xc0026341,0x8
c001fe57:	75 2f                	jne    c001fe88 <SATA::access(unsigned long long, int, void*, bool)+0x52a>
c001fe59:	89 e8                	mov    eax,ebp
c001fe5b:	c1 e0 07             	shl    eax,0x7
c001fe5e:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001fe62:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001fe68:	0f ba e0 1e          	bt     eax,0x1e
c001fe6c:	73 49                	jae    c001feb7 <SATA::access(unsigned long long, int, void*, bool)+0x559>
c001fe6e:	83 ec 0c             	sub    esp,0xc
c001fe71:	68 20 55 02 c0       	push   0xc0025520
c001fe76:	e8 b6 c8 fe ff       	call   c000c731 <Dbg::kprintf(char const*, ...)>
c001fe7b:	83 c4 10             	add    esp,0x10
c001fe7e:	b8 01 00 00 00       	mov    eax,0x1
c001fe83:	e9 c5 00 00 00       	jmp    c001ff4d <SATA::access(unsigned long long, int, void*, bool)+0x5ef>
c001fe88:	83 ec 0c             	sub    esp,0xc
c001fe8b:	68 31 55 02 c0       	push   0xc0025531
c001fe90:	e8 5c 99 fe ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c001fe95:	83 c4 10             	add    esp,0x10
c001fe98:	f6 05 40 63 02 c0 80 	test   BYTE PTR ds:0xc0026340,0x80
c001fe9f:	75 b8                	jne    c001fe59 <SATA::access(unsigned long long, int, void*, bool)+0x4fb>
c001fea1:	e4 60                	in     al,0x60
c001fea3:	3c 5a                	cmp    al,0x5a
c001fea5:	74 04                	je     c001feab <SATA::access(unsigned long long, int, void*, bool)+0x54d>
c001fea7:	3c 1c                	cmp    al,0x1c
c001fea9:	75 f6                	jne    c001fea1 <SATA::access(unsigned long long, int, void*, bool)+0x543>
c001feab:	e4 60                	in     al,0x60
c001fead:	3c 5a                	cmp    al,0x5a
c001feaf:	74 fa                	je     c001feab <SATA::access(unsigned long long, int, void*, bool)+0x54d>
c001feb1:	3c 1c                	cmp    al,0x1c
c001feb3:	74 f6                	je     c001feab <SATA::access(unsigned long long, int, void*, bool)+0x54d>
c001feb5:	eb a2                	jmp    c001fe59 <SATA::access(unsigned long long, int, void*, bool)+0x4fb>
c001feb7:	f6 05 41 63 02 c0 08 	test   BYTE PTR ds:0xc0026341,0x8
c001febe:	74 3a                	je     c001fefa <SATA::access(unsigned long long, int, void*, bool)+0x59c>
c001fec0:	83 ec 0c             	sub    esp,0xc
c001fec3:	68 41 55 02 c0       	push   0xc0025541
c001fec8:	e8 24 99 fe ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c001fecd:	83 c4 10             	add    esp,0x10
c001fed0:	f6 05 40 63 02 c0 80 	test   BYTE PTR ds:0xc0026340,0x80
c001fed7:	74 0d                	je     c001fee6 <SATA::access(unsigned long long, int, void*, bool)+0x588>
c001fed9:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001fede:	75 31                	jne    c001ff11 <SATA::access(unsigned long long, int, void*, bool)+0x5b3>
c001fee0:	eb 1f                	jmp    c001ff01 <SATA::access(unsigned long long, int, void*, bool)+0x5a3>
c001fee2:	3c 1c                	cmp    al,0x1c
c001fee4:	74 0c                	je     c001fef2 <SATA::access(unsigned long long, int, void*, bool)+0x594>
c001fee6:	e4 60                	in     al,0x60
c001fee8:	3c 5a                	cmp    al,0x5a
c001feea:	75 f6                	jne    c001fee2 <SATA::access(unsigned long long, int, void*, bool)+0x584>
c001feec:	eb 04                	jmp    c001fef2 <SATA::access(unsigned long long, int, void*, bool)+0x594>
c001feee:	3c 1c                	cmp    al,0x1c
c001fef0:	75 e7                	jne    c001fed9 <SATA::access(unsigned long long, int, void*, bool)+0x57b>
c001fef2:	e4 60                	in     al,0x60
c001fef4:	3c 5a                	cmp    al,0x5a
c001fef6:	74 fa                	je     c001fef2 <SATA::access(unsigned long long, int, void*, bool)+0x594>
c001fef8:	eb f4                	jmp    c001feee <SATA::access(unsigned long long, int, void*, bool)+0x590>
c001fefa:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001feff:	75 19                	jne    c001ff1a <SATA::access(unsigned long long, int, void*, bool)+0x5bc>
c001ff01:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c001ff07:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001ff0b:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001ff0f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ff11:	f6 05 41 63 02 c0 08 	test   BYTE PTR ds:0xc0026341,0x8
c001ff18:	75 04                	jne    c001ff1e <SATA::access(unsigned long long, int, void*, bool)+0x5c0>
c001ff1a:	31 c0                	xor    eax,eax
c001ff1c:	eb 2f                	jmp    c001ff4d <SATA::access(unsigned long long, int, void*, bool)+0x5ef>
c001ff1e:	83 ec 0c             	sub    esp,0xc
c001ff21:	68 51 55 02 c0       	push   0xc0025551
c001ff26:	e8 c6 98 fe ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c001ff2b:	83 c4 10             	add    esp,0x10
c001ff2e:	f6 05 40 63 02 c0 80 	test   BYTE PTR ds:0xc0026340,0x80
c001ff35:	75 e3                	jne    c001ff1a <SATA::access(unsigned long long, int, void*, bool)+0x5bc>
c001ff37:	e4 60                	in     al,0x60
c001ff39:	3c 1c                	cmp    al,0x1c
c001ff3b:	74 04                	je     c001ff41 <SATA::access(unsigned long long, int, void*, bool)+0x5e3>
c001ff3d:	3c 5a                	cmp    al,0x5a
c001ff3f:	75 f6                	jne    c001ff37 <SATA::access(unsigned long long, int, void*, bool)+0x5d9>
c001ff41:	e4 60                	in     al,0x60
c001ff43:	3c 5a                	cmp    al,0x5a
c001ff45:	74 fa                	je     c001ff41 <SATA::access(unsigned long long, int, void*, bool)+0x5e3>
c001ff47:	3c 1c                	cmp    al,0x1c
c001ff49:	74 f6                	je     c001ff41 <SATA::access(unsigned long long, int, void*, bool)+0x5e3>
c001ff4b:	eb cd                	jmp    c001ff1a <SATA::access(unsigned long long, int, void*, bool)+0x5bc>
c001ff4d:	83 c4 2c             	add    esp,0x2c
c001ff50:	5b                   	pop    ebx
c001ff51:	5e                   	pop    esi
c001ff52:	5f                   	pop    edi
c001ff53:	5d                   	pop    ebp
c001ff54:	c3                   	ret    
c001ff55:	90                   	nop

c001ff56 <SATA::read(unsigned long long, int, void*)>:
c001ff56:	55                   	push   ebp
c001ff57:	57                   	push   edi
c001ff58:	56                   	push   esi
c001ff59:	53                   	push   ebx
c001ff5a:	83 ec 0c             	sub    esp,0xc
c001ff5d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001ff61:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001ff65:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001ff69:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001ff6d:	f6 05 41 63 02 c0 08 	test   BYTE PTR ds:0xc0026341,0x8
c001ff74:	74 2d                	je     c001ffa3 <SATA::read(unsigned long long, int, void*)+0x4d>
c001ff76:	83 ec 0c             	sub    esp,0xc
c001ff79:	68 61 55 02 c0       	push   0xc0025561
c001ff7e:	e8 6e 98 fe ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c001ff83:	83 c4 10             	add    esp,0x10
c001ff86:	f6 05 40 63 02 c0 80 	test   BYTE PTR ds:0xc0026340,0x80
c001ff8d:	75 14                	jne    c001ffa3 <SATA::read(unsigned long long, int, void*)+0x4d>
c001ff8f:	e4 60                	in     al,0x60
c001ff91:	3c 1c                	cmp    al,0x1c
c001ff93:	74 04                	je     c001ff99 <SATA::read(unsigned long long, int, void*)+0x43>
c001ff95:	3c 5a                	cmp    al,0x5a
c001ff97:	75 f6                	jne    c001ff8f <SATA::read(unsigned long long, int, void*)+0x39>
c001ff99:	e4 60                	in     al,0x60
c001ff9b:	3c 5a                	cmp    al,0x5a
c001ff9d:	74 fa                	je     c001ff99 <SATA::read(unsigned long long, int, void*)+0x43>
c001ff9f:	3c 1c                	cmp    al,0x1c
c001ffa1:	74 f6                	je     c001ff99 <SATA::read(unsigned long long, int, void*)+0x43>
c001ffa3:	8d 53 ff             	lea    edx,[ebx-0x1]
c001ffa6:	b8 04 00 00 00       	mov    eax,0x4
c001ffab:	81 fa fe 00 00 00    	cmp    edx,0xfe
c001ffb1:	0f 87 96 00 00 00    	ja     c002004d <SATA::read(unsigned long long, int, void*)+0xf7>
c001ffb7:	b8 06 00 00 00       	mov    eax,0x6
c001ffbc:	85 ed                	test   ebp,ebp
c001ffbe:	0f 84 89 00 00 00    	je     c002004d <SATA::read(unsigned long long, int, void*)+0xf7>
c001ffc4:	f6 05 41 63 02 c0 08 	test   BYTE PTR ds:0xc0026341,0x8
c001ffcb:	74 2d                	je     c001fffa <SATA::read(unsigned long long, int, void*)+0xa4>
c001ffcd:	83 ec 0c             	sub    esp,0xc
c001ffd0:	68 6e 55 02 c0       	push   0xc002556e
c001ffd5:	e8 17 98 fe ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c001ffda:	83 c4 10             	add    esp,0x10
c001ffdd:	f6 05 40 63 02 c0 80 	test   BYTE PTR ds:0xc0026340,0x80
c001ffe4:	75 14                	jne    c001fffa <SATA::read(unsigned long long, int, void*)+0xa4>
c001ffe6:	e4 60                	in     al,0x60
c001ffe8:	3c 5a                	cmp    al,0x5a
c001ffea:	74 04                	je     c001fff0 <SATA::read(unsigned long long, int, void*)+0x9a>
c001ffec:	3c 1c                	cmp    al,0x1c
c001ffee:	75 f6                	jne    c001ffe6 <SATA::read(unsigned long long, int, void*)+0x90>
c001fff0:	e4 60                	in     al,0x60
c001fff2:	3c 5a                	cmp    al,0x5a
c001fff4:	74 fa                	je     c001fff0 <SATA::read(unsigned long long, int, void*)+0x9a>
c001fff6:	3c 1c                	cmp    al,0x1c
c001fff8:	74 f6                	je     c001fff0 <SATA::read(unsigned long long, int, void*)+0x9a>
c001fffa:	50                   	push   eax
c001fffb:	50                   	push   eax
c001fffc:	6a 00                	push   0x0
c001fffe:	55                   	push   ebp
c001ffff:	53                   	push   ebx
c0020000:	57                   	push   edi
c0020001:	56                   	push   esi
c0020002:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0020006:	e8 53 f9 ff ff       	call   c001f95e <SATA::access(unsigned long long, int, void*, bool)>
c002000b:	83 c4 20             	add    esp,0x20
c002000e:	89 c3                	mov    ebx,eax
c0020010:	f6 05 41 63 02 c0 08 	test   BYTE PTR ds:0xc0026341,0x8
c0020017:	74 2d                	je     c0020046 <SATA::read(unsigned long long, int, void*)+0xf0>
c0020019:	83 ec 0c             	sub    esp,0xc
c002001c:	68 7b 55 02 c0       	push   0xc002557b
c0020021:	e8 cb 97 fe ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c0020026:	83 c4 10             	add    esp,0x10
c0020029:	f6 05 40 63 02 c0 80 	test   BYTE PTR ds:0xc0026340,0x80
c0020030:	75 14                	jne    c0020046 <SATA::read(unsigned long long, int, void*)+0xf0>
c0020032:	e4 60                	in     al,0x60
c0020034:	3c 5a                	cmp    al,0x5a
c0020036:	74 04                	je     c002003c <SATA::read(unsigned long long, int, void*)+0xe6>
c0020038:	3c 1c                	cmp    al,0x1c
c002003a:	75 f6                	jne    c0020032 <SATA::read(unsigned long long, int, void*)+0xdc>
c002003c:	e4 60                	in     al,0x60
c002003e:	3c 5a                	cmp    al,0x5a
c0020040:	74 fa                	je     c002003c <SATA::read(unsigned long long, int, void*)+0xe6>
c0020042:	3c 1c                	cmp    al,0x1c
c0020044:	74 f6                	je     c002003c <SATA::read(unsigned long long, int, void*)+0xe6>
c0020046:	31 c0                	xor    eax,eax
c0020048:	85 db                	test   ebx,ebx
c002004a:	0f 95 c0             	setne  al
c002004d:	83 c4 0c             	add    esp,0xc
c0020050:	5b                   	pop    ebx
c0020051:	5e                   	pop    esi
c0020052:	5f                   	pop    edi
c0020053:	5d                   	pop    ebp
c0020054:	c3                   	ret    
c0020055:	90                   	nop

c0020056 <SATA::write(unsigned long long, int, void*)>:
c0020056:	55                   	push   ebp
c0020057:	57                   	push   edi
c0020058:	56                   	push   esi
c0020059:	53                   	push   ebx
c002005a:	83 ec 1c             	sub    esp,0x1c
c002005d:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0020061:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0020065:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0020069:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c002006d:	f6 05 41 63 02 c0 08 	test   BYTE PTR ds:0xc0026341,0x8
c0020074:	74 2d                	je     c00200a3 <SATA::write(unsigned long long, int, void*)+0x4d>
c0020076:	83 ec 0c             	sub    esp,0xc
c0020079:	68 88 55 02 c0       	push   0xc0025588
c002007e:	e8 6e 97 fe ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c0020083:	83 c4 10             	add    esp,0x10
c0020086:	f6 05 40 63 02 c0 80 	test   BYTE PTR ds:0xc0026340,0x80
c002008d:	75 14                	jne    c00200a3 <SATA::write(unsigned long long, int, void*)+0x4d>
c002008f:	e4 60                	in     al,0x60
c0020091:	3c 1c                	cmp    al,0x1c
c0020093:	74 04                	je     c0020099 <SATA::write(unsigned long long, int, void*)+0x43>
c0020095:	3c 5a                	cmp    al,0x5a
c0020097:	75 f6                	jne    c002008f <SATA::write(unsigned long long, int, void*)+0x39>
c0020099:	e4 60                	in     al,0x60
c002009b:	3c 5a                	cmp    al,0x5a
c002009d:	74 fa                	je     c0020099 <SATA::write(unsigned long long, int, void*)+0x43>
c002009f:	3c 1c                	cmp    al,0x1c
c00200a1:	74 f6                	je     c0020099 <SATA::write(unsigned long long, int, void*)+0x43>
c00200a3:	8d 55 ff             	lea    edx,[ebp-0x1]
c00200a6:	b8 04 00 00 00       	mov    eax,0x4
c00200ab:	81 fa fe 00 00 00    	cmp    edx,0xfe
c00200b1:	0f 87 bd 00 00 00    	ja     c0020174 <SATA::write(unsigned long long, int, void*)+0x11e>
c00200b7:	b8 06 00 00 00       	mov    eax,0x6
c00200bc:	85 db                	test   ebx,ebx
c00200be:	0f 84 b0 00 00 00    	je     c0020174 <SATA::write(unsigned long long, int, void*)+0x11e>
c00200c4:	f6 05 41 63 02 c0 08 	test   BYTE PTR ds:0xc0026341,0x8
c00200cb:	74 2d                	je     c00200fa <SATA::write(unsigned long long, int, void*)+0xa4>
c00200cd:	83 ec 0c             	sub    esp,0xc
c00200d0:	68 96 55 02 c0       	push   0xc0025596
c00200d5:	e8 17 97 fe ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c00200da:	83 c4 10             	add    esp,0x10
c00200dd:	f6 05 40 63 02 c0 80 	test   BYTE PTR ds:0xc0026340,0x80
c00200e4:	75 14                	jne    c00200fa <SATA::write(unsigned long long, int, void*)+0xa4>
c00200e6:	e4 60                	in     al,0x60
c00200e8:	3c 1c                	cmp    al,0x1c
c00200ea:	74 04                	je     c00200f0 <SATA::write(unsigned long long, int, void*)+0x9a>
c00200ec:	3c 5a                	cmp    al,0x5a
c00200ee:	75 f6                	jne    c00200e6 <SATA::write(unsigned long long, int, void*)+0x90>
c00200f0:	e4 60                	in     al,0x60
c00200f2:	3c 5a                	cmp    al,0x5a
c00200f4:	74 fa                	je     c00200f0 <SATA::write(unsigned long long, int, void*)+0x9a>
c00200f6:	3c 1c                	cmp    al,0x1c
c00200f8:	74 f6                	je     c00200f0 <SATA::write(unsigned long long, int, void*)+0x9a>
c00200fa:	c1 e5 09             	shl    ebp,0x9
c00200fd:	01 dd                	add    ebp,ebx
c00200ff:	89 f0                	mov    eax,esi
c0020101:	89 fa                	mov    edx,edi
c0020103:	83 c0 01             	add    eax,0x1
c0020106:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002010a:	83 d2 00             	adc    edx,0x0
c002010d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0020111:	50                   	push   eax
c0020112:	50                   	push   eax
c0020113:	6a 01                	push   0x1
c0020115:	53                   	push   ebx
c0020116:	81 c3 00 02 00 00    	add    ebx,0x200
c002011c:	6a 01                	push   0x1
c002011e:	57                   	push   edi
c002011f:	56                   	push   esi
c0020120:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0020124:	e8 35 f8 ff ff       	call   c001f95e <SATA::access(unsigned long long, int, void*, bool)>
c0020129:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c002012d:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0020131:	83 c4 20             	add    esp,0x20
c0020134:	39 dd                	cmp    ebp,ebx
c0020136:	75 c7                	jne    c00200ff <SATA::write(unsigned long long, int, void*)+0xa9>
c0020138:	f6 05 41 63 02 c0 08 	test   BYTE PTR ds:0xc0026341,0x8
c002013f:	75 04                	jne    c0020145 <SATA::write(unsigned long long, int, void*)+0xef>
c0020141:	31 c0                	xor    eax,eax
c0020143:	eb 2f                	jmp    c0020174 <SATA::write(unsigned long long, int, void*)+0x11e>
c0020145:	83 ec 0c             	sub    esp,0xc
c0020148:	68 a4 55 02 c0       	push   0xc00255a4
c002014d:	e8 9f 96 fe ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c0020152:	83 c4 10             	add    esp,0x10
c0020155:	f6 05 40 63 02 c0 80 	test   BYTE PTR ds:0xc0026340,0x80
c002015c:	75 e3                	jne    c0020141 <SATA::write(unsigned long long, int, void*)+0xeb>
c002015e:	e4 60                	in     al,0x60
c0020160:	3c 5a                	cmp    al,0x5a
c0020162:	74 04                	je     c0020168 <SATA::write(unsigned long long, int, void*)+0x112>
c0020164:	3c 1c                	cmp    al,0x1c
c0020166:	75 f6                	jne    c002015e <SATA::write(unsigned long long, int, void*)+0x108>
c0020168:	e4 60                	in     al,0x60
c002016a:	3c 5a                	cmp    al,0x5a
c002016c:	74 fa                	je     c0020168 <SATA::write(unsigned long long, int, void*)+0x112>
c002016e:	3c 1c                	cmp    al,0x1c
c0020170:	74 f6                	je     c0020168 <SATA::write(unsigned long long, int, void*)+0x112>
c0020172:	eb cd                	jmp    c0020141 <SATA::write(unsigned long long, int, void*)+0xeb>
c0020174:	83 c4 1c             	add    esp,0x1c
c0020177:	5b                   	pop    ebx
c0020178:	5e                   	pop    esi
c0020179:	5f                   	pop    edi
c002017a:	5d                   	pop    ebp
c002017b:	c3                   	ret    

c002017c <SATAPI::write(unsigned long long, int, void*)>:
c002017c:	b8 03 00 00 00       	mov    eax,0x3
c0020181:	c3                   	ret    

c0020182 <SATAPI::close(int, int, void*)>:
c0020182:	83 ec 0c             	sub    esp,0xc
c0020185:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020189:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002018f:	85 c0                	test   eax,eax
c0020191:	74 0c                	je     c002019f <SATAPI::close(int, int, void*)+0x1d>
c0020193:	83 ec 0c             	sub    esp,0xc
c0020196:	8b 10                	mov    edx,DWORD PTR [eax]
c0020198:	50                   	push   eax
c0020199:	ff 52 04             	call   DWORD PTR [edx+0x4]
c002019c:	83 c4 10             	add    esp,0x10
c002019f:	31 c0                	xor    eax,eax
c00201a1:	83 c4 0c             	add    esp,0xc
c00201a4:	c3                   	ret    
c00201a5:	90                   	nop

c00201a6 <SATAPI::SATAPI()>:
c00201a6:	83 ec 0c             	sub    esp,0xc
c00201a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00201ad:	83 ec 04             	sub    esp,0x4
c00201b0:	68 00 08 00 00       	push   0x800
c00201b5:	68 ec 55 02 c0       	push   0xc00255ec
c00201ba:	50                   	push   eax
c00201bb:	e8 26 de fe ff       	call   c000dfe6 <PhysicalDisk::PhysicalDisk(char const*, int)>
c00201c0:	83 c4 10             	add    esp,0x10
c00201c3:	ba 28 57 02 c0       	mov    edx,0xc0025728
c00201c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00201cc:	89 10                	mov    DWORD PTR [eax],edx
c00201ce:	90                   	nop
c00201cf:	83 c4 0c             	add    esp,0xc
c00201d2:	c3                   	ret    
c00201d3:	90                   	nop

c00201d4 <SATAPI::diskRemoved()>:
c00201d4:	c3                   	ret    
c00201d5:	90                   	nop

c00201d6 <SATAPI::diskInserted()>:
c00201d6:	83 ec 18             	sub    esp,0x18
c00201d9:	68 f8 55 02 c0       	push   0xc00255f8
c00201de:	e8 4e c5 fe ff       	call   c000c731 <Dbg::kprintf(char const*, ...)>
c00201e3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00201e7:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c00201ee:	83 c4 1c             	add    esp,0x1c
c00201f1:	c3                   	ret    

c00201f2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c00201f2:	55                   	push   ebp
c00201f3:	57                   	push   edi
c00201f4:	56                   	push   esi
c00201f5:	53                   	push   ebx
c00201f6:	83 ec 38             	sub    esp,0x38
c00201f9:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c00201fd:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0020201:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0020205:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0020209:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c002020d:	68 10 56 02 c0       	push   0xc0025610
c0020212:	e8 1a c5 fe ff       	call   c000c731 <Dbg::kprintf(char const*, ...)>
c0020217:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c002021d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0020223:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020227:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c002022d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020231:	c1 e0 07             	shl    eax,0x7
c0020234:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0020238:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c002023c:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0020246:	5a                   	pop    edx
c0020247:	59                   	pop    ecx
c0020248:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002024c:	8d 58 02             	lea    ebx,[eax+0x2]
c002024f:	c1 e3 07             	shl    ebx,0x7
c0020252:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c0020256:	53                   	push   ebx
c0020257:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c002025d:	e8 08 e4 ff ff       	call   c001e66a <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0020262:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0020266:	83 c4 10             	add    esp,0x10
c0020269:	b8 01 00 00 00       	mov    eax,0x1
c002026e:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c0020273:	0f 84 ff 01 00 00    	je     c0020478 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x286>
c0020279:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c002027f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0020281:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0020287:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c002028d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0020291:	c1 e1 05             	shl    ecx,0x5
c0020294:	01 c8                	add    eax,ecx
c0020296:	8b 08                	mov    ecx,DWORD PTR [eax]
c0020298:	81 e1 80 ff 00 00    	and    ecx,0xff80
c002029e:	81 c9 25 00 01 00    	or     ecx,0x10025
c00202a4:	89 08                	mov    DWORD PTR [eax],ecx
c00202a6:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c00202ac:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c00202b2:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c00202b8:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c00202bb:	8d 7b 40             	lea    edi,[ebx+0x40]
c00202be:	50                   	push   eax
c00202bf:	68 90 00 00 00       	push   0x90
c00202c4:	6a 00                	push   0x0
c00202c6:	53                   	push   ebx
c00202c7:	e8 dc 01 fe ff       	call   c00004a8 <memset>
c00202cc:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c00202d0:	b9 0c 00 00 00       	mov    ecx,0xc
c00202d5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00202d7:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c00202dd:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c00202e1:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c00202e7:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c00202eb:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00202ef:	48                   	dec    eax
c00202f0:	25 ff ff 3f 00       	and    eax,0x3fffff
c00202f5:	89 c1                	mov    ecx,eax
c00202f7:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c00202fd:	25 00 00 c0 ff       	and    eax,0xffc00000
c0020302:	09 c8                	or     eax,ecx
c0020304:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c002030a:	66 8b 03             	mov    ax,WORD PTR [ebx]
c002030d:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c0020314:	66 25 00 7f          	and    ax,0x7f00
c0020318:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c002031c:	66 0d 27 80          	or     ax,0x8027
c0020320:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c0020324:	66 89 03             	mov    WORD PTR [ebx],ax
c0020327:	89 d0                	mov    eax,edx
c0020329:	c1 ea 18             	shr    edx,0x18
c002032c:	c1 e8 10             	shr    eax,0x10
c002032f:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c0020332:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0020335:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c0020339:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c002033c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020340:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c0020343:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0020347:	83 c4 10             	add    esp,0x10
c002034a:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c002034e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020352:	31 c0                	xor    eax,eax
c0020354:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c002035a:	80 e1 88             	and    cl,0x88
c002035d:	74 0a                	je     c0020369 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x177>
c002035f:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0020364:	74 0a                	je     c0020370 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x17e>
c0020366:	40                   	inc    eax
c0020367:	eb eb                	jmp    c0020354 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x162>
c0020369:	3d 40 42 0f 00       	cmp    eax,0xf4240
c002036e:	75 0a                	jne    c002037a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x188>
c0020370:	83 ec 0c             	sub    esp,0xc
c0020373:	68 2a 56 02 c0       	push   0xc002562a
c0020378:	eb 43                	jmp    c00203bd <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1cb>
c002037a:	be 01 00 00 00       	mov    esi,0x1
c002037f:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0020383:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0020387:	d3 e6                	shl    esi,cl
c0020389:	c1 e7 07             	shl    edi,0x7
c002038c:	89 b2 38 01 00 00    	mov    DWORD PTR [edx+0x138],esi
c0020392:	bb 18 fc ff ff       	mov    ebx,0xfffffc18
c0020397:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c002039b:	8b 87 38 01 00 00    	mov    eax,DWORD PTR [edi+0x138]
c00203a1:	85 c6                	test   esi,eax
c00203a3:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c00203a9:	0f 84 96 00 00 00    	je     c0020445 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x253>
c00203af:	0f ba e0 1e          	bt     eax,0x1e
c00203b3:	73 1a                	jae    c00203cf <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1dd>
c00203b5:	83 ec 0c             	sub    esp,0xc
c00203b8:	68 3f 56 02 c0       	push   0xc002563f
c00203bd:	e8 6f c3 fe ff       	call   c000c731 <Dbg::kprintf(char const*, ...)>
c00203c2:	83 c4 10             	add    esp,0x10
c00203c5:	b8 01 00 00 00       	mov    eax,0x1
c00203ca:	e9 a9 00 00 00       	jmp    c0020478 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x286>
c00203cf:	83 fb 0d             	cmp    ebx,0xd
c00203d2:	77 12                	ja     c00203e6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f4>
c00203d4:	83 ec 0c             	sub    esp,0xc
c00203d7:	68 c8 00 00 00       	push   0xc8
c00203dc:	e8 f7 5e ff ff       	call   c00162d8 <milliTenthSleep(unsigned int)>
c00203e1:	83 c4 10             	add    esp,0x10
c00203e4:	eb 2a                	jmp    c0020410 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x21e>
c00203e6:	8d 83 18 fc ff ff    	lea    eax,[ebx-0x3e8]
c00203ec:	83 f8 0d             	cmp    eax,0xd
c00203ef:	77 0a                	ja     c00203fb <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x209>
c00203f1:	83 ec 0c             	sub    esp,0xc
c00203f4:	68 58 02 00 00       	push   0x258
c00203f9:	eb 28                	jmp    c0020423 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x231>
c00203fb:	8d 83 30 f8 ff ff    	lea    eax,[ebx-0x7d0]
c0020401:	83 f8 0d             	cmp    eax,0xd
c0020404:	77 0a                	ja     c0020410 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x21e>
c0020406:	83 ec 0c             	sub    esp,0xc
c0020409:	68 dc 05 00 00       	push   0x5dc
c002040e:	eb 13                	jmp    c0020423 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x231>
c0020410:	8d 83 90 e8 ff ff    	lea    eax,[ebx-0x1770]
c0020416:	83 f8 0d             	cmp    eax,0xd
c0020419:	77 10                	ja     c002042b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x239>
c002041b:	83 ec 0c             	sub    esp,0xc
c002041e:	68 c4 09 00 00       	push   0x9c4
c0020423:	e8 b0 5e ff ff       	call   c00162d8 <milliTenthSleep(unsigned int)>
c0020428:	83 c4 10             	add    esp,0x10
c002042b:	43                   	inc    ebx
c002042c:	81 fb 29 23 00 00    	cmp    ebx,0x2329
c0020432:	0f 85 63 ff ff ff    	jne    c002039b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1a9>
c0020438:	83 ec 0c             	sub    esp,0xc
c002043b:	68 52 56 02 c0       	push   0xc0025652
c0020440:	e9 78 ff ff ff       	jmp    c00203bd <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1cb>
c0020445:	0f ba e0 1e          	bt     eax,0x1e
c0020449:	73 0d                	jae    c0020458 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x266>
c002044b:	83 ec 0c             	sub    esp,0xc
c002044e:	68 66 56 02 c0       	push   0xc0025666
c0020453:	e9 65 ff ff ff       	jmp    c00203bd <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1cb>
c0020458:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c002045d:	74 17                	je     c0020476 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x284>
c002045f:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0020464:	74 10                	je     c0020476 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x284>
c0020466:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c002046c:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0020470:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0020474:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0020476:	31 c0                	xor    eax,eax
c0020478:	83 c4 2c             	add    esp,0x2c
c002047b:	5b                   	pop    ebx
c002047c:	5e                   	pop    esi
c002047d:	5f                   	pop    edi
c002047e:	5d                   	pop    ebp
c002047f:	c3                   	ret    

c0020480 <SATAPI::eject()>:
c0020480:	57                   	push   edi
c0020481:	b9 03 00 00 00       	mov    ecx,0x3
c0020486:	83 ec 18             	sub    esp,0x18
c0020489:	8d 7c 24 04          	lea    edi,[esp+0x4]
c002048d:	fc                   	cld    
c002048e:	31 c0                	xor    eax,eax
c0020490:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0020492:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0020497:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c002049c:	50                   	push   eax
c002049d:	6a 00                	push   0x0
c002049f:	6a 00                	push   0x0
c00204a1:	6a 00                	push   0x0
c00204a3:	6a 00                	push   0x0
c00204a5:	6a 02                	push   0x2
c00204a7:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00204ab:	50                   	push   eax
c00204ac:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00204b0:	e8 3d fd ff ff       	call   c00201f2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c00204b5:	31 c0                	xor    eax,eax
c00204b7:	83 c4 38             	add    esp,0x38
c00204ba:	5f                   	pop    edi
c00204bb:	c3                   	ret    

c00204bc <SATAPI::detectMedia()>:
c00204bc:	56                   	push   esi
c00204bd:	53                   	push   ebx
c00204be:	83 ec 30             	sub    esp,0x30
c00204c1:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00204c5:	68 7b 56 02 c0       	push   0xc002567b
c00204ca:	e8 62 c2 fe ff       	call   c000c731 <Dbg::kprintf(char const*, ...)>
c00204cf:	83 c4 0c             	add    esp,0xc
c00204d2:	6a 0c                	push   0xc
c00204d4:	6a 00                	push   0x0
c00204d6:	8d 74 24 0e          	lea    esi,[esp+0xe]
c00204da:	56                   	push   esi
c00204db:	e8 c8 ff fd ff       	call   c00004a8 <memset>
c00204e0:	83 c4 0c             	add    esp,0xc
c00204e3:	6a 00                	push   0x0
c00204e5:	6a 00                	push   0x0
c00204e7:	6a 00                	push   0x0
c00204e9:	6a 00                	push   0x0
c00204eb:	6a 00                	push   0x0
c00204ed:	56                   	push   esi
c00204ee:	53                   	push   ebx
c00204ef:	e8 fe fc ff ff       	call   c00201f2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c00204f4:	83 c4 20             	add    esp,0x20
c00204f7:	48                   	dec    eax
c00204f8:	74 34                	je     c002052e <SATAPI::detectMedia()+0x72>
c00204fa:	50                   	push   eax
c00204fb:	6a 0c                	push   0xc
c00204fd:	6a 00                	push   0x0
c00204ff:	56                   	push   esi
c0020500:	e8 a3 ff fd ff       	call   c00004a8 <memset>
c0020505:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c002050a:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c002050f:	83 c4 0c             	add    esp,0xc
c0020512:	6a 01                	push   0x1
c0020514:	8d 44 24 16          	lea    eax,[esp+0x16]
c0020518:	50                   	push   eax
c0020519:	6a 00                	push   0x0
c002051b:	6a 00                	push   0x0
c002051d:	6a 12                	push   0x12
c002051f:	56                   	push   esi
c0020520:	53                   	push   ebx
c0020521:	e8 cc fc ff ff       	call   c00201f2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0020526:	83 c4 20             	add    esp,0x20
c0020529:	48                   	dec    eax
c002052a:	75 39                	jne    c0020565 <SATAPI::detectMedia()+0xa9>
c002052c:	eb 1e                	jmp    c002054c <SATAPI::detectMedia()+0x90>
c002052e:	83 ec 0c             	sub    esp,0xc
c0020531:	68 8f 56 02 c0       	push   0xc002568f
c0020536:	e8 f6 c1 fe ff       	call   c000c731 <Dbg::kprintf(char const*, ...)>
c002053b:	83 c4 10             	add    esp,0x10
c002053e:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0020545:	74 b3                	je     c00204fa <SATAPI::detectMedia()+0x3e>
c0020547:	e9 93 00 00 00       	jmp    c00205df <SATAPI::detectMedia()+0x123>
c002054c:	83 ec 0c             	sub    esp,0xc
c002054f:	68 99 56 02 c0       	push   0xc0025699
c0020554:	e8 d8 c1 fe ff       	call   c000c731 <Dbg::kprintf(char const*, ...)>
c0020559:	83 c4 10             	add    esp,0x10
c002055c:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0020563:	75 7a                	jne    c00205df <SATAPI::detectMedia()+0x123>
c0020565:	8a 44 24 0e          	mov    al,BYTE PTR [esp+0xe]
c0020569:	83 e0 7f             	and    eax,0x7f
c002056c:	3c 70                	cmp    al,0x70
c002056e:	74 25                	je     c0020595 <SATAPI::detectMedia()+0xd9>
c0020570:	83 ec 0c             	sub    esp,0xc
c0020573:	68 a3 56 02 c0       	push   0xc00256a3
c0020578:	e8 b4 c1 fe ff       	call   c000c731 <Dbg::kprintf(char const*, ...)>
c002057d:	83 c4 10             	add    esp,0x10
c0020580:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0020587:	75 0c                	jne    c0020595 <SATAPI::detectMedia()+0xd9>
c0020589:	83 ec 0c             	sub    esp,0xc
c002058c:	53                   	push   ebx
c002058d:	e8 44 fc ff ff       	call   c00201d6 <SATAPI::diskInserted()>
c0020592:	83 c4 10             	add    esp,0x10
c0020595:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0020599:	83 e0 0f             	and    eax,0xf
c002059c:	3c 02                	cmp    al,0x2
c002059e:	75 16                	jne    c00205b6 <SATAPI::detectMedia()+0xfa>
c00205a0:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c00205a5:	75 38                	jne    c00205df <SATAPI::detectMedia()+0x123>
c00205a7:	83 ec 0c             	sub    esp,0xc
c00205aa:	68 ac 56 02 c0       	push   0xc00256ac
c00205af:	e8 7d c1 fe ff       	call   c000c731 <Dbg::kprintf(char const*, ...)>
c00205b4:	eb 26                	jmp    c00205dc <SATAPI::detectMedia()+0x120>
c00205b6:	84 c0                	test   al,al
c00205b8:	75 25                	jne    c00205df <SATAPI::detectMedia()+0x123>
c00205ba:	83 ec 0c             	sub    esp,0xc
c00205bd:	68 b5 56 02 c0       	push   0xc00256b5
c00205c2:	e8 6a c1 fe ff       	call   c000c731 <Dbg::kprintf(char const*, ...)>
c00205c7:	83 c4 10             	add    esp,0x10
c00205ca:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c00205d1:	75 0c                	jne    c00205df <SATAPI::detectMedia()+0x123>
c00205d3:	83 ec 0c             	sub    esp,0xc
c00205d6:	53                   	push   ebx
c00205d7:	e8 fa fb ff ff       	call   c00201d6 <SATAPI::diskInserted()>
c00205dc:	83 c4 10             	add    esp,0x10
c00205df:	83 c4 24             	add    esp,0x24
c00205e2:	5b                   	pop    ebx
c00205e3:	5e                   	pop    esi
c00205e4:	c3                   	ret    
c00205e5:	90                   	nop

c00205e6 <SATAPI::open(int, int, void*)>:
c00205e6:	56                   	push   esi
c00205e7:	53                   	push   ebx
c00205e8:	51                   	push   ecx
c00205e9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00205ed:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00205f1:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c00205fb:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0020601:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c002060b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002060f:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0020619:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c002061f:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0020626:	e8 ab 95 fe ff       	call   c0009bd6 <Phys::allocatePage()>
c002062b:	89 c6                	mov    esi,eax
c002062d:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c0020633:	81 c6 00 10 00 00    	add    esi,0x1000
c0020639:	e8 98 95 fe ff       	call   c0009bd6 <Phys::allocatePage()>
c002063e:	39 c6                	cmp    esi,eax
c0020640:	74 10                	je     c0020652 <SATAPI::open(int, int, void*)+0x6c>
c0020642:	83 ec 0c             	sub    esp,0xc
c0020645:	68 bf 56 02 c0       	push   0xc00256bf
c002064a:	e8 4c 24 ff ff       	call   c0012a9b <Krnl::panic(char const*)>
c002064f:	83 c4 10             	add    esp,0x10
c0020652:	83 ec 0c             	sub    esp,0xc
c0020655:	6a 02                	push   0x2
c0020657:	e8 79 ad fe ff       	call   c000b3d5 <Virt::allocateKernelVirtualPages(int)>
c002065c:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c0020662:	6a 03                	push   0x3
c0020664:	50                   	push   eax
c0020665:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c002066b:	ff 35 14 64 02 c0    	push   DWORD PTR ds:0xc0026414
c0020671:	e8 ca b3 fe ff       	call   c000ba40 <VAS::mapPage(unsigned long, unsigned long, int)>
c0020676:	83 c4 14             	add    esp,0x14
c0020679:	68 74 01 00 00       	push   0x174
c002067e:	e8 14 91 fe ff       	call   c0009797 <malloc>
c0020683:	83 c4 0c             	add    esp,0xc
c0020686:	89 c6                	mov    esi,eax
c0020688:	6a 00                	push   0x0
c002068a:	68 ff ff ff 7f       	push   0x7fffffff
c002068f:	6a 00                	push   0x0
c0020691:	6a 00                	push   0x0
c0020693:	53                   	push   ebx
c0020694:	68 d5 56 02 c0       	push   0xc00256d5
c0020699:	50                   	push   eax
c002069a:	e8 cd e5 fe ff       	call   c000ec6c <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c002069f:	83 c4 14             	add    esp,0x14
c00206a2:	56                   	push   esi
c00206a3:	e8 7a e6 fe ff       	call   c000ed22 <LogicalDisk::assignDriveLetter()>
c00206a8:	5a                   	pop    edx
c00206a9:	0f be c0             	movsx  eax,al
c00206ac:	59                   	pop    ecx
c00206ad:	50                   	push   eax
c00206ae:	68 6b 53 02 c0       	push   0xc002536b
c00206b3:	e8 79 c0 fe ff       	call   c000c731 <Dbg::kprintf(char const*, ...)>
c00206b8:	58                   	pop    eax
c00206b9:	5a                   	pop    edx
c00206ba:	56                   	push   esi
c00206bb:	53                   	push   ebx
c00206bc:	e8 ed d4 fe ff       	call   c000dbae <Device::addChild(Device*)>
c00206c1:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c00206c7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00206ca:	e8 7f d9 fe ff       	call   c000e04e <PhysicalDisk::startCache()>
c00206cf:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c00206d6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00206d9:	e8 de fd ff ff       	call   c00204bc <SATAPI::detectMedia()>
c00206de:	83 c4 14             	add    esp,0x14
c00206e1:	31 c0                	xor    eax,eax
c00206e3:	5b                   	pop    ebx
c00206e4:	5e                   	pop    esi
c00206e5:	c3                   	ret    

c00206e6 <SATAPI::read(unsigned long long, int, void*)>:
c00206e6:	55                   	push   ebp
c00206e7:	57                   	push   edi
c00206e8:	56                   	push   esi
c00206e9:	53                   	push   ebx
c00206ea:	83 ec 48             	sub    esp,0x48
c00206ed:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00206f1:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c00206f5:	8b 5c 24 68          	mov    ebx,DWORD PTR [esp+0x68]
c00206f9:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c00206fd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020701:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0020705:	68 e3 56 02 c0       	push   0xc00256e3
c002070a:	e8 22 c0 fe ff       	call   c000c731 <Dbg::kprintf(char const*, ...)>
c002070f:	83 c4 10             	add    esp,0x10
c0020712:	83 fb 04             	cmp    ebx,0x4
c0020715:	7e 10                	jle    c0020727 <SATAPI::read(unsigned long long, int, void*)+0x41>
c0020717:	83 ec 0c             	sub    esp,0xc
c002071a:	68 f4 56 02 c0       	push   0xc00256f4
c002071f:	e8 77 23 ff ff       	call   c0012a9b <Krnl::panic(char const*)>
c0020724:	83 c4 10             	add    esp,0x10
c0020727:	8d 7c 24 18          	lea    edi,[esp+0x18]
c002072b:	31 ed                	xor    ebp,ebp
c002072d:	b9 03 00 00 00       	mov    ecx,0x3
c0020732:	fc                   	cld    
c0020733:	89 e8                	mov    eax,ebp
c0020735:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0020737:	c6 44 24 18 1b       	mov    BYTE PTR [esp+0x18],0x1b
c002073c:	c6 44 24 1c 01       	mov    BYTE PTR [esp+0x1c],0x1
c0020741:	50                   	push   eax
c0020742:	6a 00                	push   0x0
c0020744:	6a 00                	push   0x0
c0020746:	6a 00                	push   0x0
c0020748:	6a 00                	push   0x0
c002074a:	6a 02                	push   0x2
c002074c:	8d 44 24 30          	lea    eax,[esp+0x30]
c0020750:	50                   	push   eax
c0020751:	56                   	push   esi
c0020752:	e8 9b fa ff ff       	call   c00201f2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0020757:	8d 7c 24 44          	lea    edi,[esp+0x44]
c002075b:	89 e8                	mov    eax,ebp
c002075d:	b9 03 00 00 00       	mov    ecx,0x3
c0020762:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0020764:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020768:	88 5c 24 4d          	mov    BYTE PTR [esp+0x4d],bl
c002076c:	c6 44 24 44 a8       	mov    BYTE PTR [esp+0x44],0xa8
c0020771:	86 e0                	xchg   al,ah
c0020773:	c1 c0 10             	rol    eax,0x10
c0020776:	86 e0                	xchg   al,ah
c0020778:	89 44 24 46          	mov    DWORD PTR [esp+0x46],eax
c002077c:	83 c4 1c             	add    esp,0x1c
c002077f:	53                   	push   ebx
c0020780:	c1 e3 0b             	shl    ebx,0xb
c0020783:	ff 74 24 68          	push   DWORD PTR [esp+0x68]
c0020787:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002078b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002078f:	53                   	push   ebx
c0020790:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0020794:	50                   	push   eax
c0020795:	56                   	push   esi
c0020796:	e8 57 fa ff ff       	call   c00201f2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c002079b:	83 c4 20             	add    esp,0x20
c002079e:	85 c0                	test   eax,eax
c00207a0:	74 14                	je     c00207b6 <SATAPI::read(unsigned long long, int, void*)+0xd0>
c00207a2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00207a6:	83 ec 0c             	sub    esp,0xc
c00207a9:	56                   	push   esi
c00207aa:	e8 0d fd ff ff       	call   c00204bc <SATAPI::detectMedia()>
c00207af:	83 c4 10             	add    esp,0x10
c00207b2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00207b6:	83 c4 3c             	add    esp,0x3c
c00207b9:	5b                   	pop    ebx
c00207ba:	5e                   	pop    esi
c00207bb:	5f                   	pop    edi
c00207bc:	5d                   	pop    ebp
c00207bd:	c3                   	ret    

c00207be <IOAPIC::close(int, int, void*)>:
c00207be:	b8 00 00 00 00       	mov    eax,0x0
c00207c3:	c3                   	ret    

c00207c4 <apicGetBase()>:
c00207c4:	55                   	push   ebp
c00207c5:	89 e5                	mov    ebp,esp
c00207c7:	83 ec 18             	sub    esp,0x18
c00207ca:	a1 28 63 02 c0       	mov    eax,ds:0xc0026328
c00207cf:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00207d5:	83 e0 08             	and    eax,0x8
c00207d8:	84 c0                	test   al,al
c00207da:	75 07                	jne    c00207e3 <apicGetBase()+0x1f>
c00207dc:	b8 00 00 00 00       	mov    eax,0x0
c00207e1:	eb 21                	jmp    c0020804 <apicGetBase()+0x40>
c00207e3:	a1 28 63 02 c0       	mov    eax,ds:0xc0026328
c00207e8:	83 ec 08             	sub    esp,0x8
c00207eb:	6a 1b                	push   0x1b
c00207ed:	50                   	push   eax
c00207ee:	e8 5b 85 fe ff       	call   c0008d4e <Computer::rdmsr(unsigned int)>
c00207f3:	83 c4 10             	add    esp,0x10
c00207f6:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00207f9:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00207fc:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00207ff:	25 00 f0 ff ff       	and    eax,0xfffff000
c0020804:	c9                   	leave  
c0020805:	c3                   	ret    

c0020806 <IOAPIC::IOAPIC()>:
c0020806:	83 ec 0c             	sub    esp,0xc
c0020809:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002080d:	83 ec 08             	sub    esp,0x8
c0020810:	68 58 57 02 c0       	push   0xc0025758
c0020815:	50                   	push   eax
c0020816:	e8 97 d5 fe ff       	call   c000ddb2 <Device::Device(char const*)>
c002081b:	83 c4 10             	add    esp,0x10
c002081e:	ba 7c 57 02 c0       	mov    edx,0xc002577c
c0020823:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020827:	89 10                	mov    DWORD PTR [eax],edx
c0020829:	90                   	nop
c002082a:	83 c4 0c             	add    esp,0xc
c002082d:	c3                   	ret    

c002082e <apicOpen()>:
c002082e:	55                   	push   ebp
c002082f:	89 e5                	mov    ebp,esp
c0020831:	53                   	push   ebx
c0020832:	83 ec 34             	sub    esp,0x34
c0020835:	a0 a0 a2 02 c0       	mov    al,ds:0xc002a2a0
c002083a:	83 f0 01             	xor    eax,0x1
c002083d:	84 c0                	test   al,al
c002083f:	0f 84 91 00 00 00    	je     c00208d6 <apicOpen()+0xa8>
c0020845:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c0020849:	a0 00 8c 02 c0       	mov    al,ds:0xc0028c00
c002084e:	38 45 f7             	cmp    BYTE PTR [ebp-0x9],al
c0020851:	73 7c                	jae    c00208cf <apicOpen()+0xa1>
c0020853:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c002085a:	83 ec 0c             	sub    esp,0xc
c002085d:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c0020860:	e8 32 8f fe ff       	call   c0009797 <malloc>
c0020865:	83 c4 10             	add    esp,0x10
c0020868:	89 c3                	mov    ebx,eax
c002086a:	83 ec 0c             	sub    esp,0xc
c002086d:	53                   	push   ebx
c002086e:	e8 93 ff ff ff       	call   c0020806 <IOAPIC::IOAPIC()>
c0020873:	83 c4 10             	add    esp,0x10
c0020876:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c0020879:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c002087d:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0020880:	89 14 85 80 a2 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5d80],edx
c0020887:	a1 60 a2 02 c0       	mov    eax,ds:0xc002a260
c002088c:	40                   	inc    eax
c002088d:	a3 60 a2 02 c0       	mov    ds:0xc002a260,eax
c0020892:	a1 28 63 02 c0       	mov    eax,ds:0xc0026328
c0020897:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c002089d:	83 ec 08             	sub    esp,0x8
c00208a0:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c00208a3:	50                   	push   eax
c00208a4:	e8 05 d3 fe ff       	call   c000dbae <Device::addChild(Device*)>
c00208a9:	83 c4 10             	add    esp,0x10
c00208ac:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00208af:	8b 00                	mov    eax,DWORD PTR [eax]
c00208b1:	83 c0 08             	add    eax,0x8
c00208b4:	8b 00                	mov    eax,DWORD PTR [eax]
c00208b6:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c00208ba:	6a 00                	push   0x0
c00208bc:	6a 00                	push   0x0
c00208be:	52                   	push   edx
c00208bf:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c00208c2:	ff d0                	call   eax
c00208c4:	83 c4 10             	add    esp,0x10
c00208c7:	fe 45 f7             	inc    BYTE PTR [ebp-0x9]
c00208ca:	e9 7a ff ff ff       	jmp    c0020849 <apicOpen()+0x1b>
c00208cf:	c6 05 a0 a2 02 c0 01 	mov    BYTE PTR ds:0xc002a2a0,0x1
c00208d6:	e8 e9 fe ff ff       	call   c00207c4 <apicGetBase()>
c00208db:	05 f0 00 00 00       	add    eax,0xf0
c00208e0:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00208e3:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00208e6:	8b 00                	mov    eax,DWORD PTR [eax]
c00208e8:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c00208eb:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c00208f2:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c00208f9:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00208fc:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c00208ff:	89 10                	mov    DWORD PTR [eax],edx
c0020901:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c0020908:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c002090d:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c0020910:	7d 70                	jge    c0020982 <apicOpen()+0x154>
c0020912:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0020915:	8b 04 85 60 8b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd74a0]
c002091c:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c002091f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0020922:	8b 04 85 60 8b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd74a0]
c0020929:	c1 e8 08             	shr    eax,0x8
c002092c:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c0020930:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0020933:	8b 04 85 60 8b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd74a0]
c002093a:	c1 e8 18             	shr    eax,0x18
c002093d:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c0020940:	80 7d e3 ff          	cmp    BYTE PTR [ebp-0x1d],0xff
c0020944:	75 37                	jne    c002097d <apicOpen()+0x14f>
c0020946:	e8 79 fe ff ff       	call   c00207c4 <apicGetBase()>
c002094b:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c002094f:	75 07                	jne    c0020958 <apicOpen()+0x12a>
c0020951:	ba 60 03 00 00       	mov    edx,0x360
c0020956:	eb 05                	jmp    c002095d <apicOpen()+0x12f>
c0020958:	ba 50 03 00 00       	mov    edx,0x350
c002095d:	01 d0                	add    eax,edx
c002095f:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0020962:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0020965:	8b 00                	mov    eax,DWORD PTR [eax]
c0020967:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c002096a:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c0020971:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c0020975:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0020978:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c002097b:	89 10                	mov    DWORD PTR [eax],edx
c002097d:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
c0020980:	eb 86                	jmp    c0020908 <apicOpen()+0xda>
c0020982:	90                   	nop
c0020983:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0020986:	c9                   	leave  
c0020987:	c3                   	ret    

c0020988 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c0020988:	55                   	push   ebp
c0020989:	89 e5                	mov    ebp,esp
c002098b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002098e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0020994:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0020997:	72 1d                	jb     c00209b6 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0020999:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002099c:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c00209a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00209a5:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c00209ab:	01 d0                	add    eax,edx
c00209ad:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c00209b0:	73 04                	jae    c00209b6 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c00209b2:	b0 01                	mov    al,0x1
c00209b4:	eb 02                	jmp    c00209b8 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c00209b6:	b0 00                	mov    al,0x0
c00209b8:	5d                   	pop    ebp
c00209b9:	c3                   	ret    

c00209ba <IOAPIC::read(int)>:
c00209ba:	55                   	push   ebp
c00209bb:	89 e5                	mov    ebp,esp
c00209bd:	83 ec 10             	sub    esp,0x10
c00209c0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00209c3:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00209c9:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c00209cc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00209cf:	0f b6 d0             	movzx  edx,al
c00209d2:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00209d5:	89 10                	mov    DWORD PTR [eax],edx
c00209d7:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00209da:	83 c0 10             	add    eax,0x10
c00209dd:	8b 00                	mov    eax,DWORD PTR [eax]
c00209df:	c9                   	leave  
c00209e0:	c3                   	ret    
c00209e1:	90                   	nop

c00209e2 <IOAPIC::open(int, int, void*)>:
c00209e2:	55                   	push   ebp
c00209e3:	89 e5                	mov    ebp,esp
c00209e5:	57                   	push   edi
c00209e6:	56                   	push   esi
c00209e7:	53                   	push   ebx
c00209e8:	83 ec 0c             	sub    esp,0xc
c00209eb:	83 ec 0c             	sub    esp,0xc
c00209ee:	68 60 57 02 c0       	push   0xc0025760
c00209f3:	e8 39 bd fe ff       	call   c000c731 <Dbg::kprintf(char const*, ...)>
c00209f8:	83 c4 10             	add    esp,0x10
c00209fb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00209fe:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0020a01:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0020a07:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020a0a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0020a10:	8b 14 85 40 8c 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd73c0]
c0020a17:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020a1a:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0020a20:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020a23:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0020a29:	8b 14 85 c0 8c 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd7340]
c0020a30:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020a33:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0020a39:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020a3c:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0020a42:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020a45:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0020a4b:	0f b6 f8             	movzx  edi,al
c0020a4e:	89 d0                	mov    eax,edx
c0020a50:	ba 00 00 00 00       	mov    edx,0x0
c0020a55:	89 c1                	mov    ecx,eax
c0020a57:	80 e5 ff             	and    ch,0xff
c0020a5a:	89 cb                	mov    ebx,ecx
c0020a5c:	0f b6 f2             	movzx  esi,dl
c0020a5f:	89 d8                	mov    eax,ebx
c0020a61:	89 f2                	mov    edx,esi
c0020a63:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0020a66:	8d 5f 08             	lea    ebx,[edi+0x8]
c0020a69:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0020a6d:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0020a71:	83 e0 00             	and    eax,0x0
c0020a74:	09 d0                	or     eax,edx
c0020a76:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0020a7a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020a7d:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0020a83:	8d 50 01             	lea    edx,[eax+0x1]
c0020a86:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0020a89:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0020a8f:	0f b6 d0             	movzx  edx,al
c0020a92:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020a95:	83 c2 08             	add    edx,0x8
c0020a98:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0020a9c:	0f b6 c9             	movzx  ecx,cl
c0020a9f:	81 c9 00 ad de 00    	or     ecx,0xdead00
c0020aa5:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0020aa9:	83 ec 08             	sub    esp,0x8
c0020aac:	6a 01                	push   0x1
c0020aae:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0020ab1:	e8 04 ff ff ff       	call   c00209ba <IOAPIC::read(int)>
c0020ab6:	83 c4 10             	add    esp,0x10
c0020ab9:	c1 f8 10             	sar    eax,0x10
c0020abc:	0f b6 c0             	movzx  eax,al
c0020abf:	8d 50 01             	lea    edx,[eax+0x1]
c0020ac2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020ac5:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c0020acb:	b8 00 00 00 00       	mov    eax,0x0
c0020ad0:	8d 65 f4             	lea    esp,[ebp-0xc]
c0020ad3:	5b                   	pop    ebx
c0020ad4:	5e                   	pop    esi
c0020ad5:	5f                   	pop    edi
c0020ad6:	5d                   	pop    ebp
c0020ad7:	c3                   	ret    

c0020ad8 <IOAPIC::write(int, int)>:
c0020ad8:	55                   	push   ebp
c0020ad9:	89 e5                	mov    ebp,esp
c0020adb:	83 ec 10             	sub    esp,0x10
c0020ade:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020ae1:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0020ae7:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0020aea:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0020aed:	0f b6 d0             	movzx  edx,al
c0020af0:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0020af3:	89 10                	mov    DWORD PTR [eax],edx
c0020af5:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0020af8:	8d 50 10             	lea    edx,[eax+0x10]
c0020afb:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0020afe:	89 02                	mov    DWORD PTR [edx],eax
c0020b00:	90                   	nop
c0020b01:	c9                   	leave  
c0020b02:	c3                   	ret    
c0020b03:	90                   	nop

c0020b04 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c0020b04:	55                   	push   ebp
c0020b05:	89 e5                	mov    ebp,esp
c0020b07:	53                   	push   ebx
c0020b08:	83 ec 2c             	sub    esp,0x2c
c0020b0b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0020b0e:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0020b11:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c0020b14:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c0020b17:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0020b1a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0020b1d:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0020b20:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0020b23:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0020b26:	88 d8                	mov    al,bl
c0020b28:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c0020b2b:	88 c8                	mov    al,cl
c0020b2d:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0020b30:	88 d0                	mov    al,dl
c0020b32:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c0020b35:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0020b39:	83 c0 08             	add    eax,0x8
c0020b3c:	01 c0                	add    eax,eax
c0020b3e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0020b41:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0020b45:	83 c0 08             	add    eax,0x8
c0020b48:	01 c0                	add    eax,eax
c0020b4a:	40                   	inc    eax
c0020b4b:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0020b4e:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0020b51:	50                   	push   eax
c0020b52:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0020b55:	e8 60 fe ff ff       	call   c00209ba <IOAPIC::read(int)>
c0020b5a:	83 c4 08             	add    esp,0x8
c0020b5d:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0020b60:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c0020b67:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0020b6a:	c1 e0 18             	shl    eax,0x18
c0020b6d:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c0020b70:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0020b73:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0020b76:	52                   	push   edx
c0020b77:	50                   	push   eax
c0020b78:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0020b7b:	e8 58 ff ff ff       	call   c0020ad8 <IOAPIC::write(int, int)>
c0020b80:	83 c4 0c             	add    esp,0xc
c0020b83:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0020b86:	50                   	push   eax
c0020b87:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0020b8a:	e8 2b fe ff ff       	call   c00209ba <IOAPIC::read(int)>
c0020b8f:	83 c4 08             	add    esp,0x8
c0020b92:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0020b95:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c0020b9c:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c0020ba3:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c0020baa:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0020bae:	74 09                	je     c0020bb9 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c0020bb0:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c0020bb7:	eb 07                	jmp    c0020bc0 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c0020bb9:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c0020bc0:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c0020bc4:	74 09                	je     c0020bcf <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c0020bc6:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c0020bcd:	eb 07                	jmp    c0020bd6 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c0020bcf:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c0020bd6:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c0020bdd:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c0020be1:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c0020be4:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0020be7:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0020bea:	52                   	push   edx
c0020beb:	50                   	push   eax
c0020bec:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0020bef:	e8 e4 fe ff ff       	call   c0020ad8 <IOAPIC::write(int, int)>
c0020bf4:	83 c4 0c             	add    esp,0xc
c0020bf7:	90                   	nop
c0020bf8:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0020bfb:	c9                   	leave  
c0020bfc:	c3                   	ret    
c0020bfd:	66 90                	xchg   ax,ax
c0020bff:	90                   	nop

c0020c00 <APICTimer::close(int, int, void*)>:
c0020c00:	b8 00 00 00 00       	mov    eax,0x0
c0020c05:	c3                   	ret    
c0020c06:	66 90                	xchg   ax,ax

c0020c08 <apicTimerHandler(regs*, void*)>:
c0020c08:	83 ec 0c             	sub    esp,0xc
c0020c0b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020c0f:	8b 08                	mov    ecx,DWORD PTR [eax]
c0020c11:	b8 10 27 00 00       	mov    eax,0x2710
c0020c16:	ba 00 00 00 00       	mov    edx,0x0
c0020c1b:	f7 f1                	div    ecx
c0020c1d:	83 ec 0c             	sub    esp,0xc
c0020c20:	50                   	push   eax
c0020c21:	e8 a2 e8 fe ff       	call   c000f4c8 <timerHandler(unsigned int)>
c0020c26:	83 c4 10             	add    esp,0x10
c0020c29:	90                   	nop
c0020c2a:	83 c4 0c             	add    esp,0xc
c0020c2d:	c3                   	ret    
c0020c2e:	66 90                	xchg   ax,ax

c0020c30 <APICTimer::open(int, int, void*)>:
c0020c30:	83 ec 0c             	sub    esp,0xc
c0020c33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020c37:	8b 00                	mov    eax,DWORD PTR [eax]
c0020c39:	83 c0 24             	add    eax,0x24
c0020c3c:	8b 00                	mov    eax,DWORD PTR [eax]
c0020c3e:	83 ec 08             	sub    esp,0x8
c0020c41:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020c45:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020c49:	ff d0                	call   eax
c0020c4b:	83 c4 10             	add    esp,0x10
c0020c4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020c52:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0020c56:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0020c5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020c60:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0020c64:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c0020c6a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0020c6e:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0020c74:	83 ec 0c             	sub    esp,0xc
c0020c77:	51                   	push   ecx
c0020c78:	6a 01                	push   0x1
c0020c7a:	68 08 0c 02 c0       	push   0xc0020c08
c0020c7f:	52                   	push   edx
c0020c80:	50                   	push   eax
c0020c81:	e8 d4 ce fe ff       	call   c000db5a <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0020c86:	83 c4 20             	add    esp,0x20
c0020c89:	89 c2                	mov    edx,eax
c0020c8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020c8f:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0020c95:	b8 00 00 00 00       	mov    eax,0x0
c0020c9a:	83 c4 0c             	add    esp,0xc
c0020c9d:	c3                   	ret    
c0020c9e:	66 90                	xchg   ax,ax

c0020ca0 <APICTimer::write(int)>:
c0020ca0:	83 ec 0c             	sub    esp,0xc
c0020ca3:	83 ec 0c             	sub    esp,0xc
c0020ca6:	68 a0 57 02 c0       	push   0xc00257a0
c0020cab:	e8 eb 1d ff ff       	call   c0012a9b <Krnl::panic(char const*)>
c0020cb0:	83 c4 10             	add    esp,0x10
c0020cb3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020cb7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020cbb:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0020cc1:	90                   	nop
c0020cc2:	83 c4 0c             	add    esp,0xc
c0020cc5:	c3                   	ret    
c0020cc6:	66 90                	xchg   ax,ax

c0020cc8 <APICTimer::APICTimer()>:
c0020cc8:	83 ec 0c             	sub    esp,0xc
c0020ccb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020ccf:	83 ec 08             	sub    esp,0x8
c0020cd2:	68 b0 57 02 c0       	push   0xc00257b0
c0020cd7:	50                   	push   eax
c0020cd8:	e8 1f e7 fe ff       	call   c000f3fc <Timer::Timer(char const*)>
c0020cdd:	83 c4 10             	add    esp,0x10
c0020ce0:	ba c4 57 02 c0       	mov    edx,0xc00257c4
c0020ce5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020ce9:	89 10                	mov    DWORD PTR [eax],edx
c0020ceb:	90                   	nop
c0020cec:	83 c4 0c             	add    esp,0xc
c0020cef:	c3                   	ret    

c0020cf0 <PIT::write(int)>:
c0020cf0:	83 ec 10             	sub    esp,0x10
c0020cf3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020cf7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0020cfb:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0020d01:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0020d05:	a3 a4 a2 02 c0       	mov    ds:0xc002a2a4,eax
c0020d0a:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0020d0f:	99                   	cdq    
c0020d10:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c0020d14:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020d18:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c0020d1f:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c0020d24:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0020d28:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0020d2d:	ee                   	out    dx,al
c0020d2e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020d32:	0f b6 c0             	movzx  eax,al
c0020d35:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c0020d3c:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0020d40:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0020d44:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0020d49:	ee                   	out    dx,al
c0020d4a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020d4e:	c1 f8 08             	sar    eax,0x8
c0020d51:	0f b6 c0             	movzx  eax,al
c0020d54:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c0020d5b:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0020d5f:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0020d63:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0020d68:	ee                   	out    dx,al
c0020d69:	90                   	nop
c0020d6a:	83 c4 10             	add    esp,0x10
c0020d6d:	c3                   	ret    
c0020d6e:	66 90                	xchg   ax,ax

c0020d70 <pitHandler(regs*, void*)>:
c0020d70:	83 ec 0c             	sub    esp,0xc
c0020d73:	8b 0d a4 a2 02 c0    	mov    ecx,DWORD PTR ds:0xc002a2a4
c0020d79:	b8 10 27 00 00       	mov    eax,0x2710
c0020d7e:	99                   	cdq    
c0020d7f:	f7 f9                	idiv   ecx
c0020d81:	83 ec 0c             	sub    esp,0xc
c0020d84:	50                   	push   eax
c0020d85:	e8 3e e7 fe ff       	call   c000f4c8 <timerHandler(unsigned int)>
c0020d8a:	83 c4 10             	add    esp,0x10
c0020d8d:	90                   	nop
c0020d8e:	83 c4 0c             	add    esp,0xc
c0020d91:	c3                   	ret    
c0020d92:	66 90                	xchg   ax,ax

c0020d94 <PIT::open(int, int, void*)>:
c0020d94:	83 ec 0c             	sub    esp,0xc
c0020d97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020d9b:	8b 00                	mov    eax,DWORD PTR [eax]
c0020d9d:	83 c0 24             	add    eax,0x24
c0020da0:	8b 00                	mov    eax,DWORD PTR [eax]
c0020da2:	83 ec 08             	sub    esp,0x8
c0020da5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020da9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020dad:	ff d0                	call   eax
c0020daf:	83 c4 10             	add    esp,0x10
c0020db2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020db6:	83 ec 0c             	sub    esp,0xc
c0020db9:	6a 00                	push   0x0
c0020dbb:	6a 01                	push   0x1
c0020dbd:	68 70 0d 02 c0       	push   0xc0020d70
c0020dc2:	6a 00                	push   0x0
c0020dc4:	50                   	push   eax
c0020dc5:	e8 90 cd fe ff       	call   c000db5a <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0020dca:	83 c4 20             	add    esp,0x20
c0020dcd:	89 c2                	mov    edx,eax
c0020dcf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020dd3:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0020dd9:	b8 00 00 00 00       	mov    eax,0x0
c0020dde:	83 c4 0c             	add    esp,0xc
c0020de1:	c3                   	ret    
c0020de2:	66 90                	xchg   ax,ax

c0020de4 <PIT::close(int, int, void*)>:
c0020de4:	83 ec 0c             	sub    esp,0xc
c0020de7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020deb:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0020df5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020df9:	6a 01                	push   0x1
c0020dfb:	68 70 0d 02 c0       	push   0xc0020d70
c0020e00:	6a 00                	push   0x0
c0020e02:	50                   	push   eax
c0020e03:	e8 88 cd fe ff       	call   c000db90 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c0020e08:	83 c4 10             	add    esp,0x10
c0020e0b:	b8 00 00 00 00       	mov    eax,0x0
c0020e10:	83 c4 0c             	add    esp,0xc
c0020e13:	c3                   	ret    

c0020e14 <PIT::PIT()>:
c0020e14:	83 ec 0c             	sub    esp,0xc
c0020e17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020e1b:	83 ec 08             	sub    esp,0x8
c0020e1e:	68 ec 57 02 c0       	push   0xc00257ec
c0020e23:	50                   	push   eax
c0020e24:	e8 d3 e5 fe ff       	call   c000f3fc <Timer::Timer(char const*)>
c0020e29:	83 c4 10             	add    esp,0x10
c0020e2c:	ba 14 58 02 c0       	mov    edx,0xc0025814
c0020e31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020e35:	89 10                	mov    DWORD PTR [eax],edx
c0020e37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020e3b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0020e41:	0f b6 d0             	movzx  edx,al
c0020e44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020e48:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c0020e4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020e53:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0020e59:	0f b6 d0             	movzx  edx,al
c0020e5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020e60:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c0020e65:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020e69:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0020e6f:	8d 50 01             	lea    edx,[eax+0x1]
c0020e72:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0020e76:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0020e7c:	0f b6 d0             	movzx  edx,al
c0020e7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020e83:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0020e87:	83 e1 3f             	and    ecx,0x3f
c0020e8a:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0020e8e:	90                   	nop
c0020e8f:	83 c4 0c             	add    esp,0xc
c0020e92:	c3                   	ret    
c0020e93:	66 90                	xchg   ax,ax
c0020e95:	66 90                	xchg   ax,ax
c0020e97:	66 90                	xchg   ax,ax
c0020e99:	66 90                	xchg   ax,ax
c0020e9b:	66 90                	xchg   ax,ax
c0020e9d:	66 90                	xchg   ax,ax
c0020e9f:	90                   	nop

c0020ea0 <avxDetect>:
c0020ea0:	b8 01 00 00 00       	mov    eax,0x1
c0020ea5:	0f a2                	cpuid  
c0020ea7:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c0020ead:	74 15                	je     c0020ec4 <avxDetect.noAVX>
c0020eaf:	b8 01 00 00 00       	mov    eax,0x1
c0020eb4:	0f a2                	cpuid  
c0020eb6:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c0020ebc:	74 06                	je     c0020ec4 <avxDetect.noAVX>
c0020ebe:	b8 01 00 00 00       	mov    eax,0x1
c0020ec3:	c3                   	ret    

c0020ec4 <avxDetect.noAVX>:
c0020ec4:	b8 00 00 00 00       	mov    eax,0x0
c0020ec9:	c3                   	ret    

c0020eca <avxSave>:
c0020eca:	53                   	push   ebx
c0020ecb:	52                   	push   edx
c0020ecc:	31 c0                	xor    eax,eax
c0020ece:	48                   	dec    eax
c0020ecf:	89 c2                	mov    edx,eax
c0020ed1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0020ed5:	0f ae 23             	xsave  [ebx]
c0020ed8:	5a                   	pop    edx
c0020ed9:	5b                   	pop    ebx
c0020eda:	c3                   	ret    

c0020edb <avxLoad>:
c0020edb:	53                   	push   ebx
c0020edc:	52                   	push   edx
c0020edd:	31 c0                	xor    eax,eax
c0020edf:	48                   	dec    eax
c0020ee0:	89 c2                	mov    edx,eax
c0020ee2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0020ee6:	0f ae 2b             	xrstor [ebx]
c0020ee9:	5a                   	pop    edx
c0020eea:	5b                   	pop    ebx
c0020eeb:	c3                   	ret    

c0020eec <avxInit>:
c0020eec:	e8 57 02 00 00       	call   c0021148 <sseInit>
c0020ef1:	50                   	push   eax
c0020ef2:	51                   	push   ecx
c0020ef3:	0f 20 e0             	mov    eax,cr4
c0020ef6:	0d 00 00 04 00       	or     eax,0x40000
c0020efb:	0f 22 e0             	mov    cr4,eax
c0020efe:	31 c9                	xor    ecx,ecx
c0020f00:	0f 01 d0             	xgetbv 
c0020f03:	0d 07 00 00 00       	or     eax,0x7
c0020f08:	0f 01 d1             	xsetbv 
c0020f0b:	59                   	pop    ecx
c0020f0c:	58                   	pop    eax
c0020f0d:	c3                   	ret    

c0020f0e <avxClose>:
c0020f0e:	c3                   	ret    

c0020f0f <wouldSheSayYes>:
c0020f0f:	c3                   	ret    
c0020f10:	49                   	dec    ecx
c0020f11:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c0020f15:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c0020f19:	75 20                	jne    c0020f3b <isr0+0xb>
c0020f1b:	4e                   	dec    esi
c0020f1c:	79 61                	jns    c0020f7f <isr7+0x3>
c0020f1e:	68 2e 2e 2e 00       	push   0x2e2e2e
c0020f23:	66 90                	xchg   ax,ax
c0020f25:	66 90                	xchg   ax,ax
c0020f27:	66 90                	xchg   ax,ax
c0020f29:	66 90                	xchg   ax,ax
c0020f2b:	66 90                	xchg   ax,ax
c0020f2d:	66 90                	xchg   ax,ax
c0020f2f:	90                   	nop

c0020f30 <isr0>:
c0020f30:	fa                   	cli    
c0020f31:	68 00 00 00 00       	push   0x0
c0020f36:	68 00 00 00 00       	push   0x0
c0020f3b:	e9 44 01 00 00       	jmp    c0021084 <int_common_stub>

c0020f40 <isr1>:
c0020f40:	fa                   	cli    
c0020f41:	6a 00                	push   0x0
c0020f43:	6a 01                	push   0x1
c0020f45:	e9 3a 01 00 00       	jmp    c0021084 <int_common_stub>

c0020f4a <isr2>:
c0020f4a:	fa                   	cli    
c0020f4b:	6a 00                	push   0x0
c0020f4d:	6a 02                	push   0x2
c0020f4f:	e9 30 01 00 00       	jmp    c0021084 <int_common_stub>

c0020f54 <isr3>:
c0020f54:	fa                   	cli    
c0020f55:	6a 00                	push   0x0
c0020f57:	6a 03                	push   0x3
c0020f59:	e9 26 01 00 00       	jmp    c0021084 <int_common_stub>

c0020f5e <isr4>:
c0020f5e:	fa                   	cli    
c0020f5f:	6a 00                	push   0x0
c0020f61:	6a 04                	push   0x4
c0020f63:	e9 1c 01 00 00       	jmp    c0021084 <int_common_stub>

c0020f68 <isr5>:
c0020f68:	fa                   	cli    
c0020f69:	6a 00                	push   0x0
c0020f6b:	6a 05                	push   0x5
c0020f6d:	e9 12 01 00 00       	jmp    c0021084 <int_common_stub>

c0020f72 <isr6>:
c0020f72:	fa                   	cli    
c0020f73:	6a 00                	push   0x0
c0020f75:	6a 06                	push   0x6
c0020f77:	e9 08 01 00 00       	jmp    c0021084 <int_common_stub>

c0020f7c <isr7>:
c0020f7c:	fa                   	cli    
c0020f7d:	6a 00                	push   0x0
c0020f7f:	6a 07                	push   0x7
c0020f81:	e9 fe 00 00 00       	jmp    c0021084 <int_common_stub>

c0020f86 <isr8>:
c0020f86:	fa                   	cli    
c0020f87:	6a 08                	push   0x8
c0020f89:	e9 f6 00 00 00       	jmp    c0021084 <int_common_stub>

c0020f8e <isr9>:
c0020f8e:	fa                   	cli    
c0020f8f:	6a 00                	push   0x0
c0020f91:	6a 09                	push   0x9
c0020f93:	e9 ec 00 00 00       	jmp    c0021084 <int_common_stub>

c0020f98 <isr10>:
c0020f98:	fa                   	cli    
c0020f99:	6a 0a                	push   0xa
c0020f9b:	e9 e4 00 00 00       	jmp    c0021084 <int_common_stub>

c0020fa0 <isr11>:
c0020fa0:	fa                   	cli    
c0020fa1:	6a 0b                	push   0xb
c0020fa3:	e9 dc 00 00 00       	jmp    c0021084 <int_common_stub>

c0020fa8 <isr12>:
c0020fa8:	fa                   	cli    
c0020fa9:	6a 0c                	push   0xc
c0020fab:	e9 d4 00 00 00       	jmp    c0021084 <int_common_stub>

c0020fb0 <isr13>:
c0020fb0:	fa                   	cli    
c0020fb1:	6a 0d                	push   0xd
c0020fb3:	e9 cc 00 00 00       	jmp    c0021084 <int_common_stub>

c0020fb8 <isr14>:
c0020fb8:	fa                   	cli    
c0020fb9:	6a 0e                	push   0xe
c0020fbb:	e9 c4 00 00 00       	jmp    c0021084 <int_common_stub>

c0020fc0 <isr15>:
c0020fc0:	fa                   	cli    
c0020fc1:	6a 00                	push   0x0
c0020fc3:	6a 0f                	push   0xf
c0020fc5:	e9 ba 00 00 00       	jmp    c0021084 <int_common_stub>

c0020fca <isr16>:
c0020fca:	fa                   	cli    
c0020fcb:	6a 00                	push   0x0
c0020fcd:	6a 10                	push   0x10
c0020fcf:	e9 b0 00 00 00       	jmp    c0021084 <int_common_stub>

c0020fd4 <isr17>:
c0020fd4:	fa                   	cli    
c0020fd5:	6a 00                	push   0x0
c0020fd7:	6a 11                	push   0x11
c0020fd9:	e9 a6 00 00 00       	jmp    c0021084 <int_common_stub>

c0020fde <isr18>:
c0020fde:	fa                   	cli    
c0020fdf:	6a 00                	push   0x0
c0020fe1:	6a 12                	push   0x12
c0020fe3:	e9 9c 00 00 00       	jmp    c0021084 <int_common_stub>

c0020fe8 <irq3>:
c0020fe8:	fa                   	cli    
c0020fe9:	6a 00                	push   0x0
c0020feb:	6a 23                	push   0x23
c0020fed:	e9 92 00 00 00       	jmp    c0021084 <int_common_stub>

c0020ff2 <irq4>:
c0020ff2:	fa                   	cli    
c0020ff3:	6a 00                	push   0x0
c0020ff5:	6a 24                	push   0x24
c0020ff7:	e9 88 00 00 00       	jmp    c0021084 <int_common_stub>

c0020ffc <irq5>:
c0020ffc:	fa                   	cli    
c0020ffd:	6a 00                	push   0x0
c0020fff:	6a 25                	push   0x25
c0021001:	e9 7e 00 00 00       	jmp    c0021084 <int_common_stub>

c0021006 <irq6>:
c0021006:	fa                   	cli    
c0021007:	6a 00                	push   0x0
c0021009:	6a 26                	push   0x26
c002100b:	e9 74 00 00 00       	jmp    c0021084 <int_common_stub>

c0021010 <irq7>:
c0021010:	fa                   	cli    
c0021011:	6a 00                	push   0x0
c0021013:	6a 27                	push   0x27
c0021015:	e9 6a 00 00 00       	jmp    c0021084 <int_common_stub>

c002101a <irq8>:
c002101a:	fa                   	cli    
c002101b:	6a 00                	push   0x0
c002101d:	6a 28                	push   0x28
c002101f:	e9 60 00 00 00       	jmp    c0021084 <int_common_stub>

c0021024 <irq9>:
c0021024:	fa                   	cli    
c0021025:	6a 00                	push   0x0
c0021027:	6a 29                	push   0x29
c0021029:	e9 56 00 00 00       	jmp    c0021084 <int_common_stub>

c002102e <irq10>:
c002102e:	fa                   	cli    
c002102f:	6a 00                	push   0x0
c0021031:	6a 2a                	push   0x2a
c0021033:	e9 4c 00 00 00       	jmp    c0021084 <int_common_stub>

c0021038 <irq11>:
c0021038:	fa                   	cli    
c0021039:	6a 00                	push   0x0
c002103b:	6a 2b                	push   0x2b
c002103d:	e9 42 00 00 00       	jmp    c0021084 <int_common_stub>

c0021042 <irq12>:
c0021042:	fa                   	cli    
c0021043:	6a 00                	push   0x0
c0021045:	6a 2c                	push   0x2c
c0021047:	e9 38 00 00 00       	jmp    c0021084 <int_common_stub>

c002104c <irq13>:
c002104c:	fa                   	cli    
c002104d:	6a 00                	push   0x0
c002104f:	6a 2d                	push   0x2d
c0021051:	e9 2e 00 00 00       	jmp    c0021084 <int_common_stub>

c0021056 <irq14>:
c0021056:	fa                   	cli    
c0021057:	6a 00                	push   0x0
c0021059:	6a 2e                	push   0x2e
c002105b:	e9 24 00 00 00       	jmp    c0021084 <int_common_stub>

c0021060 <irq15>:
c0021060:	fa                   	cli    
c0021061:	6a 00                	push   0x0
c0021063:	6a 2f                	push   0x2f
c0021065:	e9 1a 00 00 00       	jmp    c0021084 <int_common_stub>

c002106a <irq1>:
c002106a:	fa                   	cli    
c002106b:	6a 00                	push   0x0
c002106d:	6a 21                	push   0x21
c002106f:	eb 13                	jmp    c0021084 <int_common_stub>

c0021071 <irq2>:
c0021071:	fa                   	cli    
c0021072:	6a 00                	push   0x0
c0021074:	6a 22                	push   0x22
c0021076:	eb 0c                	jmp    c0021084 <int_common_stub>

c0021078 <isr96>:
c0021078:	6a 00                	push   0x0
c002107a:	6a 60                	push   0x60
c002107c:	fb                   	sti    
c002107d:	eb 05                	jmp    c0021084 <int_common_stub>

c002107f <irq0>:
c002107f:	fa                   	cli    
c0021080:	6a 00                	push   0x0
c0021082:	6a 20                	push   0x20

c0021084 <int_common_stub>:
c0021084:	60                   	pusha  
c0021085:	1e                   	push   ds
c0021086:	06                   	push   es
c0021087:	0f a0                	push   fs
c0021089:	0f a8                	push   gs
c002108b:	66 b8 10 00          	mov    ax,0x10
c002108f:	66 8e d8             	mov    ds,ax
c0021092:	66 8e c0             	mov    es,ax
c0021095:	66 8e e0             	mov    fs,ax
c0021098:	66 8e e8             	mov    gs,ax
c002109b:	54                   	push   esp
c002109c:	fc                   	cld    
c002109d:	e8 22 d0 fe ff       	call   c000e0c4 <int_handler>
c00210a2:	81 c4 04 00 00 00    	add    esp,0x4
c00210a8:	0f a9                	pop    gs
c00210aa:	0f a1                	pop    fs
c00210ac:	07                   	pop    es
c00210ad:	1f                   	pop    ds
c00210ae:	61                   	popa   
c00210af:	81 c4 08 00 00 00    	add    esp,0x8
c00210b5:	cf                   	iret   

c00210b6 <irq16>:
c00210b6:	fa                   	cli    
c00210b7:	6a 00                	push   0x0
c00210b9:	6a 30                	push   0x30
c00210bb:	e9 c4 ff ff ff       	jmp    c0021084 <int_common_stub>

c00210c0 <irq17>:
c00210c0:	fa                   	cli    
c00210c1:	6a 00                	push   0x0
c00210c3:	6a 31                	push   0x31
c00210c5:	e9 ba ff ff ff       	jmp    c0021084 <int_common_stub>

c00210ca <irq18>:
c00210ca:	fa                   	cli    
c00210cb:	6a 00                	push   0x0
c00210cd:	6a 32                	push   0x32
c00210cf:	e9 b0 ff ff ff       	jmp    c0021084 <int_common_stub>

c00210d4 <irq19>:
c00210d4:	fa                   	cli    
c00210d5:	6a 00                	push   0x0
c00210d7:	6a 33                	push   0x33
c00210d9:	e9 a6 ff ff ff       	jmp    c0021084 <int_common_stub>

c00210de <irq20>:
c00210de:	fa                   	cli    
c00210df:	6a 00                	push   0x0
c00210e1:	6a 34                	push   0x34
c00210e3:	e9 9c ff ff ff       	jmp    c0021084 <int_common_stub>

c00210e8 <irq21>:
c00210e8:	fa                   	cli    
c00210e9:	6a 00                	push   0x0
c00210eb:	6a 35                	push   0x35
c00210ed:	e9 92 ff ff ff       	jmp    c0021084 <int_common_stub>

c00210f2 <irq22>:
c00210f2:	fa                   	cli    
c00210f3:	6a 00                	push   0x0
c00210f5:	6a 36                	push   0x36
c00210f7:	e9 88 ff ff ff       	jmp    c0021084 <int_common_stub>

c00210fc <irq23>:
c00210fc:	fa                   	cli    
c00210fd:	6a 00                	push   0x0
c00210ff:	6a 37                	push   0x37
c0021101:	e9 7e ff ff ff       	jmp    c0021084 <int_common_stub>
c0021106:	66 90                	xchg   ax,ax
c0021108:	66 90                	xchg   ax,ax
c002110a:	66 90                	xchg   ax,ax
c002110c:	66 90                	xchg   ax,ax
c002110e:	66 90                	xchg   ax,ax

c0021110 <i386GetRDRAND>:
c0021110:	b9 64 00 00 00       	mov    ecx,0x64

c0021115 <retry>:
c0021115:	0f c7 f0             	rdrand eax
c0021118:	72 05                	jb     c002111f <retry.done>
c002111a:	e2 f9                	loop   c0021115 <retry>

c002111c <retry.fail>:
c002111c:	31 c0                	xor    eax,eax
c002111e:	c3                   	ret    

c002111f <retry.done>:
c002111f:	c3                   	ret    

c0021120 <absolutelyNoChanceInHell>:
c0021120:	b8 01 00 00 00       	mov    eax,0x1
c0021125:	0f a2                	cpuid  
c0021127:	f7 c2 00 00 00 02    	test   edx,0x2000000
c002112d:	74 06                	je     c0021135 <sseDetect.noSSE>
c002112f:	b8 01 00 00 00       	mov    eax,0x1
c0021134:	c3                   	ret    

c0021135 <sseDetect.noSSE>:
c0021135:	31 c0                	xor    eax,eax
c0021137:	c3                   	ret    

c0021138 <sseSave>:
c0021138:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002113c:	0f ae 00             	fxsave [eax]
c002113f:	c3                   	ret    

c0021140 <sseLoad>:
c0021140:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021144:	0f ae 08             	fxrstor [eax]
c0021147:	c3                   	ret    

c0021148 <sseInit>:
c0021148:	e8 42 00 00 00       	call   c002118f <x87Init>
c002114d:	0f 20 e0             	mov    eax,cr4
c0021150:	66 0d 00 06          	or     ax,0x600
c0021154:	0f 22 e0             	mov    cr4,eax
c0021157:	c3                   	ret    

c0021158 <sseClose>:
c0021158:	c3                   	ret    
c0021159:	66 90                	xchg   ax,ax
c002115b:	66 90                	xchg   ax,ax
c002115d:	66 90                	xchg   ax,ax
c002115f:	90                   	nop

c0021160 <value_37F>:
c0021160:	7f 03                	jg     c0021165 <value_37A+0x1>

c0021162 <value_37E>:
c0021162:	7e 03                	jle    c0021167 <x87Detect+0x1>

c0021164 <value_37A>:
c0021164:	7a 03                	jp     c0021169 <x87Detect+0x3>

c0021166 <x87Detect>:
c0021166:	b8 01 00 00 00       	mov    eax,0x1
c002116b:	0f a2                	cpuid  
c002116d:	f7 c2 01 00 00 00    	test   edx,0x1
c0021173:	74 06                	je     c002117b <x87Detect.nox87>
c0021175:	b8 01 00 00 00       	mov    eax,0x1
c002117a:	c3                   	ret    

c002117b <x87Detect.nox87>:
c002117b:	b8 00 00 00 00       	mov    eax,0x0
c0021180:	c3                   	ret    

c0021181 <x87Save>:
c0021181:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021185:	dd 30                	fnsave [eax]
c0021187:	c3                   	ret    

c0021188 <x87Load>:
c0021188:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002118c:	dd 20                	frstor [eax]
c002118e:	c3                   	ret    

c002118f <x87Init>:
c002118f:	0f 20 c0             	mov    eax,cr0
c0021192:	66 25 fb ff          	and    ax,0xfffb
c0021196:	66 0d 22 00          	or     ax,0x22
c002119a:	0f 22 c0             	mov    cr0,eax
c002119d:	db e3                	fninit 
c002119f:	0f 06                	clts   
c00211a1:	d9 2d 64 11 02 c0    	fldcw  WORD PTR ds:0xc0021164
c00211a7:	c3                   	ret    

c00211a8 <x87Close>:
c00211a8:	c3                   	ret    
c00211a9:	66 90                	xchg   ax,ax
c00211ab:	90                   	nop

c00211ac <__do_global_ctors_aux>:
c00211ac:	a1 70 21 02 c0       	mov    eax,ds:0xc0022170
c00211b1:	83 f8 ff             	cmp    eax,0xffffffff
c00211b4:	74 1a                	je     c00211d0 <__do_global_ctors_aux+0x24>
c00211b6:	55                   	push   ebp
c00211b7:	89 e5                	mov    ebp,esp
c00211b9:	53                   	push   ebx
c00211ba:	52                   	push   edx
c00211bb:	bb 70 21 02 c0       	mov    ebx,0xc0022170
c00211c0:	ff d0                	call   eax
c00211c2:	83 eb 04             	sub    ebx,0x4
c00211c5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00211c7:	83 f8 ff             	cmp    eax,0xffffffff
c00211ca:	75 f4                	jne    c00211c0 <__do_global_ctors_aux+0x14>
c00211cc:	58                   	pop    eax
c00211cd:	5b                   	pop    ebx
c00211ce:	5d                   	pop    ebp
c00211cf:	c3                   	ret    
c00211d0:	c3                   	ret    
c00211d1:	66 90                	xchg   ax,ax
c00211d3:	90                   	nop

c00211d4 <__divdi3>:
c00211d4:	55                   	push   ebp
c00211d5:	57                   	push   edi
c00211d6:	56                   	push   esi
c00211d7:	53                   	push   ebx
c00211d8:	83 ec 1c             	sub    esp,0x1c
c00211db:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00211df:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00211e3:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00211e6:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c00211ea:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00211ee:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00211f2:	85 db                	test   ebx,ebx
c00211f4:	0f 88 8e 00 00 00    	js     c0021288 <__divdi3+0xb4>
c00211fa:	89 dd                	mov    ebp,ebx
c00211fc:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0021204:	89 d3                	mov    ebx,edx
c0021206:	85 d2                	test   edx,edx
c0021208:	79 0d                	jns    c0021217 <__divdi3+0x43>
c002120a:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c002120e:	f7 d8                	neg    eax
c0021210:	83 d2 00             	adc    edx,0x0
c0021213:	f7 da                	neg    edx
c0021215:	89 d3                	mov    ebx,edx
c0021217:	89 c7                	mov    edi,eax
c0021219:	8b 04 24             	mov    eax,DWORD PTR [esp]
c002121c:	85 db                	test   ebx,ebx
c002121e:	75 48                	jne    c0021268 <__divdi3+0x94>
c0021220:	39 ef                	cmp    edi,ebp
c0021222:	76 24                	jbe    c0021248 <__divdi3+0x74>
c0021224:	89 ea                	mov    edx,ebp
c0021226:	f7 f7                	div    edi
c0021228:	89 c1                	mov    ecx,eax
c002122a:	31 f6                	xor    esi,esi
c002122c:	89 c8                	mov    eax,ecx
c002122e:	89 f2                	mov    edx,esi
c0021230:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0021234:	85 c9                	test   ecx,ecx
c0021236:	74 07                	je     c002123f <__divdi3+0x6b>
c0021238:	f7 d8                	neg    eax
c002123a:	83 d2 00             	adc    edx,0x0
c002123d:	f7 da                	neg    edx
c002123f:	83 c4 1c             	add    esp,0x1c
c0021242:	5b                   	pop    ebx
c0021243:	5e                   	pop    esi
c0021244:	5f                   	pop    edi
c0021245:	5d                   	pop    ebp
c0021246:	c3                   	ret    
c0021247:	90                   	nop
c0021248:	85 ff                	test   edi,edi
c002124a:	75 0b                	jne    c0021257 <__divdi3+0x83>
c002124c:	b8 01 00 00 00       	mov    eax,0x1
c0021251:	31 d2                	xor    edx,edx
c0021253:	f7 f3                	div    ebx
c0021255:	89 c7                	mov    edi,eax
c0021257:	31 d2                	xor    edx,edx
c0021259:	89 e8                	mov    eax,ebp
c002125b:	f7 f7                	div    edi
c002125d:	89 c6                	mov    esi,eax
c002125f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0021262:	f7 f7                	div    edi
c0021264:	89 c1                	mov    ecx,eax
c0021266:	eb c4                	jmp    c002122c <__divdi3+0x58>
c0021268:	39 eb                	cmp    ebx,ebp
c002126a:	77 3c                	ja     c00212a8 <__divdi3+0xd4>
c002126c:	0f bd f3             	bsr    esi,ebx
c002126f:	83 f6 1f             	xor    esi,0x1f
c0021272:	75 40                	jne    c00212b4 <__divdi3+0xe0>
c0021274:	39 eb                	cmp    ebx,ebp
c0021276:	72 09                	jb     c0021281 <__divdi3+0xad>
c0021278:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c002127b:	0f 87 97 00 00 00    	ja     c0021318 <__divdi3+0x144>
c0021281:	b9 01 00 00 00       	mov    ecx,0x1
c0021286:	eb a4                	jmp    c002122c <__divdi3+0x58>
c0021288:	f7 d9                	neg    ecx
c002128a:	83 d3 00             	adc    ebx,0x0
c002128d:	f7 db                	neg    ebx
c002128f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0021292:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0021296:	89 dd                	mov    ebp,ebx
c0021298:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c00212a0:	e9 5f ff ff ff       	jmp    c0021204 <__divdi3+0x30>
c00212a5:	8d 76 00             	lea    esi,[esi+0x0]
c00212a8:	31 f6                	xor    esi,esi
c00212aa:	31 c9                	xor    ecx,ecx
c00212ac:	e9 7b ff ff ff       	jmp    c002122c <__divdi3+0x58>
c00212b1:	8d 76 00             	lea    esi,[esi+0x0]
c00212b4:	b8 20 00 00 00       	mov    eax,0x20
c00212b9:	29 f0                	sub    eax,esi
c00212bb:	89 f1                	mov    ecx,esi
c00212bd:	d3 e3                	shl    ebx,cl
c00212bf:	89 fa                	mov    edx,edi
c00212c1:	88 c1                	mov    cl,al
c00212c3:	d3 ea                	shr    edx,cl
c00212c5:	09 da                	or     edx,ebx
c00212c7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00212cb:	89 f1                	mov    ecx,esi
c00212cd:	d3 e7                	shl    edi,cl
c00212cf:	89 eb                	mov    ebx,ebp
c00212d1:	88 c1                	mov    cl,al
c00212d3:	d3 eb                	shr    ebx,cl
c00212d5:	89 f1                	mov    ecx,esi
c00212d7:	d3 e5                	shl    ebp,cl
c00212d9:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00212dc:	88 c1                	mov    cl,al
c00212de:	d3 ea                	shr    edx,cl
c00212e0:	09 d5                	or     ebp,edx
c00212e2:	89 e8                	mov    eax,ebp
c00212e4:	89 da                	mov    edx,ebx
c00212e6:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c00212ea:	89 d3                	mov    ebx,edx
c00212ec:	89 c5                	mov    ebp,eax
c00212ee:	f7 e7                	mul    edi
c00212f0:	39 d3                	cmp    ebx,edx
c00212f2:	72 18                	jb     c002130c <__divdi3+0x138>
c00212f4:	74 0a                	je     c0021300 <__divdi3+0x12c>
c00212f6:	89 e9                	mov    ecx,ebp
c00212f8:	31 f6                	xor    esi,esi
c00212fa:	e9 2d ff ff ff       	jmp    c002122c <__divdi3+0x58>
c00212ff:	90                   	nop
c0021300:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0021303:	89 f1                	mov    ecx,esi
c0021305:	d3 e7                	shl    edi,cl
c0021307:	39 c7                	cmp    edi,eax
c0021309:	73 eb                	jae    c00212f6 <__divdi3+0x122>
c002130b:	90                   	nop
c002130c:	8d 4d ff             	lea    ecx,[ebp-0x1]
c002130f:	31 f6                	xor    esi,esi
c0021311:	e9 16 ff ff ff       	jmp    c002122c <__divdi3+0x58>
c0021316:	66 90                	xchg   ax,ax
c0021318:	31 c9                	xor    ecx,ecx
c002131a:	e9 0d ff ff ff       	jmp    c002122c <__divdi3+0x58>
c002131f:	90                   	nop

c0021320 <__moddi3>:
c0021320:	55                   	push   ebp
c0021321:	57                   	push   edi
c0021322:	56                   	push   esi
c0021323:	53                   	push   ebx
c0021324:	83 ec 2c             	sub    esp,0x2c
c0021327:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c002132b:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c002132f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0021333:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0021337:	85 db                	test   ebx,ebx
c0021339:	0f 88 85 00 00 00    	js     c00213c4 <__moddi3+0xa4>
c002133f:	89 de                	mov    esi,ebx
c0021341:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0021349:	89 d7                	mov    edi,edx
c002134b:	85 d2                	test   edx,edx
c002134d:	79 09                	jns    c0021358 <__moddi3+0x38>
c002134f:	f7 d8                	neg    eax
c0021351:	83 d2 00             	adc    edx,0x0
c0021354:	f7 da                	neg    edx
c0021356:	89 d7                	mov    edi,edx
c0021358:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002135c:	89 cd                	mov    ebp,ecx
c002135e:	85 ff                	test   edi,edi
c0021360:	75 52                	jne    c00213b4 <__moddi3+0x94>
c0021362:	89 c3                	mov    ebx,eax
c0021364:	39 f0                	cmp    eax,esi
c0021366:	76 24                	jbe    c002138c <__moddi3+0x6c>
c0021368:	89 c8                	mov    eax,ecx
c002136a:	89 f2                	mov    edx,esi
c002136c:	f7 f3                	div    ebx
c002136e:	89 d6                	mov    esi,edx
c0021370:	89 f0                	mov    eax,esi
c0021372:	31 d2                	xor    edx,edx
c0021374:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021378:	85 c9                	test   ecx,ecx
c002137a:	74 07                	je     c0021383 <__moddi3+0x63>
c002137c:	f7 d8                	neg    eax
c002137e:	83 d2 00             	adc    edx,0x0
c0021381:	f7 da                	neg    edx
c0021383:	83 c4 2c             	add    esp,0x2c
c0021386:	5b                   	pop    ebx
c0021387:	5e                   	pop    esi
c0021388:	5f                   	pop    edi
c0021389:	5d                   	pop    ebp
c002138a:	c3                   	ret    
c002138b:	90                   	nop
c002138c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0021390:	85 db                	test   ebx,ebx
c0021392:	75 0d                	jne    c00213a1 <__moddi3+0x81>
c0021394:	b8 01 00 00 00       	mov    eax,0x1
c0021399:	31 d2                	xor    edx,edx
c002139b:	f7 f7                	div    edi
c002139d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00213a1:	89 f0                	mov    eax,esi
c00213a3:	31 d2                	xor    edx,edx
c00213a5:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00213a9:	f7 f7                	div    edi
c00213ab:	89 e8                	mov    eax,ebp
c00213ad:	f7 f7                	div    edi
c00213af:	89 d6                	mov    esi,edx
c00213b1:	eb bd                	jmp    c0021370 <__moddi3+0x50>
c00213b3:	90                   	nop
c00213b4:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00213b8:	39 f7                	cmp    edi,esi
c00213ba:	76 20                	jbe    c00213dc <__moddi3+0xbc>
c00213bc:	89 c8                	mov    eax,ecx
c00213be:	89 f2                	mov    edx,esi
c00213c0:	eb b2                	jmp    c0021374 <__moddi3+0x54>
c00213c2:	66 90                	xchg   ax,ax
c00213c4:	f7 d9                	neg    ecx
c00213c6:	83 d3 00             	adc    ebx,0x0
c00213c9:	f7 db                	neg    ebx
c00213cb:	89 de                	mov    esi,ebx
c00213cd:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c00213d5:	e9 6f ff ff ff       	jmp    c0021349 <__moddi3+0x29>
c00213da:	66 90                	xchg   ax,ax
c00213dc:	0f bd c7             	bsr    eax,edi
c00213df:	83 f0 1f             	xor    eax,0x1f
c00213e2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00213e6:	75 24                	jne    c002140c <__moddi3+0xec>
c00213e8:	39 f7                	cmp    edi,esi
c00213ea:	72 06                	jb     c00213f2 <__moddi3+0xd2>
c00213ec:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00213f0:	77 0c                	ja     c00213fe <__moddi3+0xde>
c00213f2:	89 e9                	mov    ecx,ebp
c00213f4:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c00213f8:	19 fe                	sbb    esi,edi
c00213fa:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00213fe:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021402:	89 f2                	mov    edx,esi
c0021404:	e9 6b ff ff ff       	jmp    c0021374 <__moddi3+0x54>
c0021409:	8d 76 00             	lea    esi,[esi+0x0]
c002140c:	b8 20 00 00 00       	mov    eax,0x20
c0021411:	89 c2                	mov    edx,eax
c0021413:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0021417:	29 da                	sub    edx,ebx
c0021419:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c002141d:	88 d9                	mov    cl,bl
c002141f:	d3 e7                	shl    edi,cl
c0021421:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021425:	88 d1                	mov    cl,dl
c0021427:	d3 e8                	shr    eax,cl
c0021429:	09 c7                	or     edi,eax
c002142b:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c002142f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0021433:	89 d8                	mov    eax,ebx
c0021435:	88 d9                	mov    cl,bl
c0021437:	d3 e7                	shl    edi,cl
c0021439:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c002143d:	89 f3                	mov    ebx,esi
c002143f:	88 d1                	mov    cl,dl
c0021441:	d3 eb                	shr    ebx,cl
c0021443:	89 c7                	mov    edi,eax
c0021445:	88 c1                	mov    cl,al
c0021447:	d3 e6                	shl    esi,cl
c0021449:	89 e8                	mov    eax,ebp
c002144b:	88 d1                	mov    cl,dl
c002144d:	d3 e8                	shr    eax,cl
c002144f:	09 f0                	or     eax,esi
c0021451:	89 f9                	mov    ecx,edi
c0021453:	d3 e5                	shl    ebp,cl
c0021455:	89 da                	mov    edx,ebx
c0021457:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c002145b:	89 d3                	mov    ebx,edx
c002145d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0021461:	89 c6                	mov    esi,eax
c0021463:	89 d1                	mov    ecx,edx
c0021465:	39 d3                	cmp    ebx,edx
c0021467:	72 27                	jb     c0021490 <__moddi3+0x170>
c0021469:	74 21                	je     c002148c <__moddi3+0x16c>
c002146b:	29 f5                	sub    ebp,esi
c002146d:	19 cb                	sbb    ebx,ecx
c002146f:	89 de                	mov    esi,ebx
c0021471:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c0021475:	d3 e6                	shl    esi,cl
c0021477:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c002147b:	89 f9                	mov    ecx,edi
c002147d:	d3 ed                	shr    ebp,cl
c002147f:	09 ee                	or     esi,ebp
c0021481:	89 f0                	mov    eax,esi
c0021483:	d3 eb                	shr    ebx,cl
c0021485:	89 da                	mov    edx,ebx
c0021487:	e9 e8 fe ff ff       	jmp    c0021374 <__moddi3+0x54>
c002148c:	39 c5                	cmp    ebp,eax
c002148e:	73 db                	jae    c002146b <__moddi3+0x14b>
c0021490:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0021494:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0021498:	89 d1                	mov    ecx,edx
c002149a:	89 c6                	mov    esi,eax
c002149c:	eb cd                	jmp    c002146b <__moddi3+0x14b>
c002149e:	66 90                	xchg   ax,ax

c00214a0 <__udivdi3>:
c00214a0:	55                   	push   ebp
c00214a1:	57                   	push   edi
c00214a2:	56                   	push   esi
c00214a3:	53                   	push   ebx
c00214a4:	83 ec 1c             	sub    esp,0x1c
c00214a7:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00214ab:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00214af:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00214b3:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00214b7:	85 d2                	test   edx,edx
c00214b9:	75 41                	jne    c00214fc <__udivdi3+0x5c>
c00214bb:	39 f7                	cmp    edi,esi
c00214bd:	76 15                	jbe    c00214d4 <__udivdi3+0x34>
c00214bf:	89 e8                	mov    eax,ebp
c00214c1:	89 f2                	mov    edx,esi
c00214c3:	f7 f7                	div    edi
c00214c5:	31 db                	xor    ebx,ebx
c00214c7:	89 da                	mov    edx,ebx
c00214c9:	83 c4 1c             	add    esp,0x1c
c00214cc:	5b                   	pop    ebx
c00214cd:	5e                   	pop    esi
c00214ce:	5f                   	pop    edi
c00214cf:	5d                   	pop    ebp
c00214d0:	c3                   	ret    
c00214d1:	8d 76 00             	lea    esi,[esi+0x0]
c00214d4:	89 f9                	mov    ecx,edi
c00214d6:	85 ff                	test   edi,edi
c00214d8:	75 0b                	jne    c00214e5 <__udivdi3+0x45>
c00214da:	b8 01 00 00 00       	mov    eax,0x1
c00214df:	31 d2                	xor    edx,edx
c00214e1:	f7 f7                	div    edi
c00214e3:	89 c1                	mov    ecx,eax
c00214e5:	31 d2                	xor    edx,edx
c00214e7:	89 f0                	mov    eax,esi
c00214e9:	f7 f1                	div    ecx
c00214eb:	89 c3                	mov    ebx,eax
c00214ed:	89 e8                	mov    eax,ebp
c00214ef:	f7 f1                	div    ecx
c00214f1:	89 da                	mov    edx,ebx
c00214f3:	83 c4 1c             	add    esp,0x1c
c00214f6:	5b                   	pop    ebx
c00214f7:	5e                   	pop    esi
c00214f8:	5f                   	pop    edi
c00214f9:	5d                   	pop    ebp
c00214fa:	c3                   	ret    
c00214fb:	90                   	nop
c00214fc:	39 f2                	cmp    edx,esi
c00214fe:	77 1c                	ja     c002151c <__udivdi3+0x7c>
c0021500:	0f bd da             	bsr    ebx,edx
c0021503:	83 f3 1f             	xor    ebx,0x1f
c0021506:	75 24                	jne    c002152c <__udivdi3+0x8c>
c0021508:	39 f2                	cmp    edx,esi
c002150a:	72 08                	jb     c0021514 <__udivdi3+0x74>
c002150c:	39 ef                	cmp    edi,ebp
c002150e:	0f 87 84 00 00 00    	ja     c0021598 <__udivdi3+0xf8>
c0021514:	b8 01 00 00 00       	mov    eax,0x1
c0021519:	eb ac                	jmp    c00214c7 <__udivdi3+0x27>
c002151b:	90                   	nop
c002151c:	31 db                	xor    ebx,ebx
c002151e:	31 c0                	xor    eax,eax
c0021520:	89 da                	mov    edx,ebx
c0021522:	83 c4 1c             	add    esp,0x1c
c0021525:	5b                   	pop    ebx
c0021526:	5e                   	pop    esi
c0021527:	5f                   	pop    edi
c0021528:	5d                   	pop    ebp
c0021529:	c3                   	ret    
c002152a:	66 90                	xchg   ax,ax
c002152c:	b8 20 00 00 00       	mov    eax,0x20
c0021531:	29 d8                	sub    eax,ebx
c0021533:	88 d9                	mov    cl,bl
c0021535:	d3 e2                	shl    edx,cl
c0021537:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c002153b:	89 fa                	mov    edx,edi
c002153d:	88 c1                	mov    cl,al
c002153f:	d3 ea                	shr    edx,cl
c0021541:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0021545:	09 d1                	or     ecx,edx
c0021547:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002154b:	88 d9                	mov    cl,bl
c002154d:	d3 e7                	shl    edi,cl
c002154f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0021553:	89 f7                	mov    edi,esi
c0021555:	88 c1                	mov    cl,al
c0021557:	d3 ef                	shr    edi,cl
c0021559:	88 d9                	mov    cl,bl
c002155b:	d3 e6                	shl    esi,cl
c002155d:	89 ea                	mov    edx,ebp
c002155f:	88 c1                	mov    cl,al
c0021561:	d3 ea                	shr    edx,cl
c0021563:	09 d6                	or     esi,edx
c0021565:	89 f0                	mov    eax,esi
c0021567:	89 fa                	mov    edx,edi
c0021569:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c002156d:	89 d7                	mov    edi,edx
c002156f:	89 c6                	mov    esi,eax
c0021571:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0021575:	39 d7                	cmp    edi,edx
c0021577:	72 13                	jb     c002158c <__udivdi3+0xec>
c0021579:	74 09                	je     c0021584 <__udivdi3+0xe4>
c002157b:	89 f0                	mov    eax,esi
c002157d:	31 db                	xor    ebx,ebx
c002157f:	e9 43 ff ff ff       	jmp    c00214c7 <__udivdi3+0x27>
c0021584:	88 d9                	mov    cl,bl
c0021586:	d3 e5                	shl    ebp,cl
c0021588:	39 c5                	cmp    ebp,eax
c002158a:	73 ef                	jae    c002157b <__udivdi3+0xdb>
c002158c:	8d 46 ff             	lea    eax,[esi-0x1]
c002158f:	31 db                	xor    ebx,ebx
c0021591:	e9 31 ff ff ff       	jmp    c00214c7 <__udivdi3+0x27>
c0021596:	66 90                	xchg   ax,ax
c0021598:	31 c0                	xor    eax,eax
c002159a:	e9 28 ff ff ff       	jmp    c00214c7 <__udivdi3+0x27>
c002159f:	90                   	nop

c00215a0 <__umoddi3>:
c00215a0:	55                   	push   ebp
c00215a1:	57                   	push   edi
c00215a2:	56                   	push   esi
c00215a3:	53                   	push   ebx
c00215a4:	83 ec 1c             	sub    esp,0x1c
c00215a7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00215ab:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00215af:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00215b3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00215b7:	89 da                	mov    edx,ebx
c00215b9:	85 c0                	test   eax,eax
c00215bb:	75 37                	jne    c00215f4 <__umoddi3+0x54>
c00215bd:	39 df                	cmp    edi,ebx
c00215bf:	76 13                	jbe    c00215d4 <__umoddi3+0x34>
c00215c1:	89 f0                	mov    eax,esi
c00215c3:	f7 f7                	div    edi
c00215c5:	89 d0                	mov    eax,edx
c00215c7:	31 d2                	xor    edx,edx
c00215c9:	83 c4 1c             	add    esp,0x1c
c00215cc:	5b                   	pop    ebx
c00215cd:	5e                   	pop    esi
c00215ce:	5f                   	pop    edi
c00215cf:	5d                   	pop    ebp
c00215d0:	c3                   	ret    
c00215d1:	8d 76 00             	lea    esi,[esi+0x0]
c00215d4:	89 fd                	mov    ebp,edi
c00215d6:	85 ff                	test   edi,edi
c00215d8:	75 0b                	jne    c00215e5 <__umoddi3+0x45>
c00215da:	b8 01 00 00 00       	mov    eax,0x1
c00215df:	31 d2                	xor    edx,edx
c00215e1:	f7 f7                	div    edi
c00215e3:	89 c5                	mov    ebp,eax
c00215e5:	89 d8                	mov    eax,ebx
c00215e7:	31 d2                	xor    edx,edx
c00215e9:	f7 f5                	div    ebp
c00215eb:	89 f0                	mov    eax,esi
c00215ed:	f7 f5                	div    ebp
c00215ef:	89 d0                	mov    eax,edx
c00215f1:	eb d4                	jmp    c00215c7 <__umoddi3+0x27>
c00215f3:	90                   	nop
c00215f4:	89 f1                	mov    ecx,esi
c00215f6:	39 d8                	cmp    eax,ebx
c00215f8:	76 0a                	jbe    c0021604 <__umoddi3+0x64>
c00215fa:	89 f0                	mov    eax,esi
c00215fc:	83 c4 1c             	add    esp,0x1c
c00215ff:	5b                   	pop    ebx
c0021600:	5e                   	pop    esi
c0021601:	5f                   	pop    edi
c0021602:	5d                   	pop    ebp
c0021603:	c3                   	ret    
c0021604:	0f bd e8             	bsr    ebp,eax
c0021607:	83 f5 1f             	xor    ebp,0x1f
c002160a:	75 1c                	jne    c0021628 <__umoddi3+0x88>
c002160c:	39 d8                	cmp    eax,ebx
c002160e:	72 04                	jb     c0021614 <__umoddi3+0x74>
c0021610:	39 f7                	cmp    edi,esi
c0021612:	77 08                	ja     c002161c <__umoddi3+0x7c>
c0021614:	89 da                	mov    edx,ebx
c0021616:	29 fe                	sub    esi,edi
c0021618:	19 c2                	sbb    edx,eax
c002161a:	89 f1                	mov    ecx,esi
c002161c:	89 c8                	mov    eax,ecx
c002161e:	83 c4 1c             	add    esp,0x1c
c0021621:	5b                   	pop    ebx
c0021622:	5e                   	pop    esi
c0021623:	5f                   	pop    edi
c0021624:	5d                   	pop    ebp
c0021625:	c3                   	ret    
c0021626:	66 90                	xchg   ax,ax
c0021628:	ba 20 00 00 00       	mov    edx,0x20
c002162d:	29 ea                	sub    edx,ebp
c002162f:	89 e9                	mov    ecx,ebp
c0021631:	d3 e0                	shl    eax,cl
c0021633:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021637:	89 f8                	mov    eax,edi
c0021639:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c002163d:	88 d1                	mov    cl,dl
c002163f:	d3 e8                	shr    eax,cl
c0021641:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0021645:	09 c1                	or     ecx,eax
c0021647:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002164b:	89 e9                	mov    ecx,ebp
c002164d:	d3 e7                	shl    edi,cl
c002164f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0021653:	89 d8                	mov    eax,ebx
c0021655:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0021659:	88 d1                	mov    cl,dl
c002165b:	d3 e8                	shr    eax,cl
c002165d:	89 c7                	mov    edi,eax
c002165f:	89 e9                	mov    ecx,ebp
c0021661:	d3 e3                	shl    ebx,cl
c0021663:	89 f0                	mov    eax,esi
c0021665:	88 d1                	mov    cl,dl
c0021667:	d3 e8                	shr    eax,cl
c0021669:	09 d8                	or     eax,ebx
c002166b:	89 e9                	mov    ecx,ebp
c002166d:	d3 e6                	shl    esi,cl
c002166f:	89 f3                	mov    ebx,esi
c0021671:	89 fa                	mov    edx,edi
c0021673:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0021677:	89 d1                	mov    ecx,edx
c0021679:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c002167d:	89 c6                	mov    esi,eax
c002167f:	89 d7                	mov    edi,edx
c0021681:	39 d1                	cmp    ecx,edx
c0021683:	72 27                	jb     c00216ac <__umoddi3+0x10c>
c0021685:	74 21                	je     c00216a8 <__umoddi3+0x108>
c0021687:	89 ca                	mov    edx,ecx
c0021689:	29 f3                	sub    ebx,esi
c002168b:	19 fa                	sbb    edx,edi
c002168d:	89 d0                	mov    eax,edx
c002168f:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0021693:	d3 e0                	shl    eax,cl
c0021695:	89 e9                	mov    ecx,ebp
c0021697:	d3 eb                	shr    ebx,cl
c0021699:	09 d8                	or     eax,ebx
c002169b:	d3 ea                	shr    edx,cl
c002169d:	83 c4 1c             	add    esp,0x1c
c00216a0:	5b                   	pop    ebx
c00216a1:	5e                   	pop    esi
c00216a2:	5f                   	pop    edi
c00216a3:	5d                   	pop    ebp
c00216a4:	c3                   	ret    
c00216a5:	8d 76 00             	lea    esi,[esi+0x0]
c00216a8:	39 c3                	cmp    ebx,eax
c00216aa:	73 db                	jae    c0021687 <__umoddi3+0xe7>
c00216ac:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00216b0:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c00216b4:	89 d7                	mov    edi,edx
c00216b6:	89 c6                	mov    esi,eax
c00216b8:	eb cd                	jmp    c0021687 <__umoddi3+0xe7>

Disassembly of section .init:

c00216ba <_init>:
c00216ba:	55                   	push   ebp
c00216bb:	89 e5                	mov    ebp,esp
c00216bd:	e8 56 ea fd ff       	call   c0000118 <frame_dummy>
c00216c2:	e8 e5 fa ff ff       	call   c00211ac <__do_global_ctors_aux>
c00216c7:	5d                   	pop    ebp
c00216c8:	c3                   	ret    

Disassembly of section .fini:

c00216c9 <_fini>:
c00216c9:	55                   	push   ebp
c00216ca:	89 e5                	mov    ebp,esp
c00216cc:	e8 d7 e9 fd ff       	call   c00000a8 <__do_global_dtors_aux>
c00216d1:	5d                   	pop    ebp
c00216d2:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c00216d4 <Computer::~Computer()>:
c00216d4:	83 ec 0c             	sub    esp,0xc
c00216d7:	ba 2c 2a 02 c0       	mov    edx,0xc0022a2c
c00216dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00216e0:	89 10                	mov    DWORD PTR [eax],edx
c00216e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00216e6:	83 ec 0c             	sub    esp,0xc
c00216e9:	50                   	push   eax
c00216ea:	e8 c1 c3 fe ff       	call   c000dab0 <Device::~Device()>
c00216ef:	83 c4 10             	add    esp,0x10
c00216f2:	90                   	nop
c00216f3:	83 c4 0c             	add    esp,0xc
c00216f6:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c00216f8 <Computer::~Computer()>:
c00216f8:	83 ec 0c             	sub    esp,0xc
c00216fb:	83 ec 0c             	sub    esp,0xc
c00216fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021702:	e8 cd ff ff ff       	call   c00216d4 <Computer::~Computer()>
c0021707:	83 c4 10             	add    esp,0x10
c002170a:	83 ec 08             	sub    esp,0x8
c002170d:	68 ec 01 00 00       	push   0x1ec
c0021712:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021716:	e8 35 af fe ff       	call   c000c650 <operator delete(void*, unsigned long)>
c002171b:	83 c4 10             	add    esp,0x10
c002171e:	83 c4 0c             	add    esp,0xc
c0021721:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c0021722 <idleCommon()>:
c0021722:	83 ec 0c             	sub    esp,0xc
c0021725:	fa                   	cli    
c0021726:	ff 05 08 98 02 c0    	inc    DWORD PTR ds:0xc0029808
c002172c:	e8 af 48 ff ff       	call   c0015fe0 <schedule()>
c0021731:	a1 08 98 02 c0       	mov    eax,ds:0xc0029808
c0021736:	48                   	dec    eax
c0021737:	a3 08 98 02 c0       	mov    ds:0xc0029808,eax
c002173c:	75 01                	jne    c002173f <idleCommon()+0x1d>
c002173e:	fb                   	sti    
c002173f:	83 c4 0c             	add    esp,0xc
c0021742:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c0021744 <LinkedList<UnixFile>::~LinkedList()>:
c0021744:	90                   	nop
c0021745:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c0021746 <LinkedList<UnixFile>::LinkedList()>:
c0021746:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002174a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021750:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021754:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002175b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002175f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0021766:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002176a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021770:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021774:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002177b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002177f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0021786:	90                   	nop
c0021787:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c0021788 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c0021788:	83 ec 0c             	sub    esp,0xc
c002178b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0021790:	75 10                	jne    c00217a2 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c0021792:	83 ec 0c             	sub    esp,0xc
c0021795:	68 78 2d 02 c0       	push   0xc0022d78
c002179a:	e8 fc 12 ff ff       	call   c0012a9b <Krnl::panic(char const*)>
c002179f:	83 c4 10             	add    esp,0x10
c00217a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00217a6:	8b 00                	mov    eax,DWORD PTR [eax]
c00217a8:	85 c0                	test   eax,eax
c00217aa:	74 34                	je     c00217e0 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c00217ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00217b0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00217b3:	85 c0                	test   eax,eax
c00217b5:	74 29                	je     c00217e0 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c00217b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00217bb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00217be:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00217c2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00217c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00217c9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00217cd:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00217d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00217d4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00217d7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00217de:	eb 65                	jmp    c0021845 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00217e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00217e4:	8b 00                	mov    eax,DWORD PTR [eax]
c00217e6:	85 c0                	test   eax,eax
c00217e8:	75 4b                	jne    c0021835 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c00217ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00217ee:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00217f1:	85 c0                	test   eax,eax
c00217f3:	75 40                	jne    c0021835 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c00217f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00217f9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00217fd:	89 10                	mov    DWORD PTR [eax],edx
c00217ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021803:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021807:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002180a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002180e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021811:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0021818:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002181c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002181f:	85 c0                	test   eax,eax
c0021821:	74 22                	je     c0021845 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0021823:	83 ec 0c             	sub    esp,0xc
c0021826:	68 9a 2d 02 c0       	push   0xc0022d9a
c002182b:	e8 6b 12 ff ff       	call   c0012a9b <Krnl::panic(char const*)>
c0021830:	83 c4 10             	add    esp,0x10
c0021833:	eb 10                	jmp    c0021845 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0021835:	83 ec 0c             	sub    esp,0xc
c0021838:	68 a4 2d 02 c0       	push   0xc0022da4
c002183d:	e8 59 12 ff ff       	call   c0012a9b <Krnl::panic(char const*)>
c0021842:	83 c4 10             	add    esp,0x10
c0021845:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021849:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002184c:	8d 50 01             	lea    edx,[eax+0x1]
c002184f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021853:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0021856:	90                   	nop
c0021857:	83 c4 0c             	add    esp,0xc
c002185a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c002185c <LinkedList<UnixFile>::getFirstElement()>:
c002185c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021860:	8b 00                	mov    eax,DWORD PTR [eax]
c0021862:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c0021864 <LinkedList<UnixFile>::removeFirst()>:
c0021864:	83 ec 0c             	sub    esp,0xc
c0021867:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002186b:	8b 00                	mov    eax,DWORD PTR [eax]
c002186d:	85 c0                	test   eax,eax
c002186f:	75 12                	jne    c0021883 <LinkedList<UnixFile>::removeFirst()+0x1f>
c0021871:	83 ec 0c             	sub    esp,0xc
c0021874:	68 b0 2d 02 c0       	push   0xc0022db0
c0021879:	e8 1d 12 ff ff       	call   c0012a9b <Krnl::panic(char const*)>
c002187e:	83 c4 10             	add    esp,0x10
c0021881:	eb 7e                	jmp    c0021901 <LinkedList<UnixFile>::removeFirst()+0x9d>
c0021883:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021887:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002188a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002188d:	85 c0                	test   eax,eax
c002188f:	74 10                	je     c00218a1 <LinkedList<UnixFile>::removeFirst()+0x3d>
c0021891:	83 ec 0c             	sub    esp,0xc
c0021894:	68 fb 2d 02 c0       	push   0xc0022dfb
c0021899:	e8 fd 11 ff ff       	call   c0012a9b <Krnl::panic(char const*)>
c002189e:	83 c4 10             	add    esp,0x10
c00218a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00218a5:	8b 00                	mov    eax,DWORD PTR [eax]
c00218a7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00218aa:	85 c0                	test   eax,eax
c00218ac:	75 33                	jne    c00218e1 <LinkedList<UnixFile>::removeFirst()+0x7d>
c00218ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00218b2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00218b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00218bc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00218c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00218c7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00218ca:	83 f8 01             	cmp    eax,0x1
c00218cd:	74 21                	je     c00218f0 <LinkedList<UnixFile>::removeFirst()+0x8c>
c00218cf:	83 ec 0c             	sub    esp,0xc
c00218d2:	68 d4 2d 02 c0       	push   0xc0022dd4
c00218d7:	e8 bf 11 ff ff       	call   c0012a9b <Krnl::panic(char const*)>
c00218dc:	83 c4 10             	add    esp,0x10
c00218df:	eb 0f                	jmp    c00218f0 <LinkedList<UnixFile>::removeFirst()+0x8c>
c00218e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00218e5:	8b 00                	mov    eax,DWORD PTR [eax]
c00218e7:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c00218ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00218ee:	89 10                	mov    DWORD PTR [eax],edx
c00218f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00218f4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00218f7:	8d 50 ff             	lea    edx,[eax-0x1]
c00218fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00218fe:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0021901:	83 c4 0c             	add    esp,0xc
c0021904:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c0021906 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c0021906:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002190a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002190d:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c002190e <DriverlessDevice::~DriverlessDevice()>:
c002190e:	ba dc 35 02 c0       	mov    edx,0xc00235dc
c0021913:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021917:	89 10                	mov    DWORD PTR [eax],edx
c0021919:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002191d:	50                   	push   eax
c002191e:	e8 8d c1 fe ff       	call   c000dab0 <Device::~Device()>
c0021923:	83 c4 04             	add    esp,0x4
c0021926:	90                   	nop
c0021927:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c0021928 <DriverlessDevice::~DriverlessDevice()>:
c0021928:	83 ec 0c             	sub    esp,0xc
c002192b:	83 ec 0c             	sub    esp,0xc
c002192e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021932:	e8 d7 ff ff ff       	call   c002190e <DriverlessDevice::~DriverlessDevice()>
c0021937:	83 c4 10             	add    esp,0x10
c002193a:	83 ec 08             	sub    esp,0x8
c002193d:	68 58 01 00 00       	push   0x158
c0021942:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021946:	e8 05 ad fe ff       	call   c000c650 <operator delete(void*, unsigned long)>
c002194b:	83 c4 10             	add    esp,0x10
c002194e:	83 c4 0c             	add    esp,0xc
c0021951:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c0021952 <LinkedList<Device>::addElement(Device*)>:
c0021952:	83 ec 0c             	sub    esp,0xc
c0021955:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c002195a:	75 10                	jne    c002196c <LinkedList<Device>::addElement(Device*)+0x1a>
c002195c:	83 ec 0c             	sub    esp,0xc
c002195f:	68 78 2d 02 c0       	push   0xc0022d78
c0021964:	e8 32 11 ff ff       	call   c0012a9b <Krnl::panic(char const*)>
c0021969:	83 c4 10             	add    esp,0x10
c002196c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021970:	8b 00                	mov    eax,DWORD PTR [eax]
c0021972:	85 c0                	test   eax,eax
c0021974:	74 3a                	je     c00219b0 <LinkedList<Device>::addElement(Device*)+0x5e>
c0021976:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002197a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002197d:	85 c0                	test   eax,eax
c002197f:	74 2f                	je     c00219b0 <LinkedList<Device>::addElement(Device*)+0x5e>
c0021981:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021985:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021988:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002198c:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c0021992:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021996:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002199a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002199d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00219a1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00219a4:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c00219ae:	eb 68                	jmp    c0021a18 <LinkedList<Device>::addElement(Device*)+0xc6>
c00219b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00219b4:	8b 00                	mov    eax,DWORD PTR [eax]
c00219b6:	85 c0                	test   eax,eax
c00219b8:	75 4e                	jne    c0021a08 <LinkedList<Device>::addElement(Device*)+0xb6>
c00219ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00219be:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00219c1:	85 c0                	test   eax,eax
c00219c3:	75 43                	jne    c0021a08 <LinkedList<Device>::addElement(Device*)+0xb6>
c00219c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00219c9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00219cd:	89 10                	mov    DWORD PTR [eax],edx
c00219cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00219d3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00219d7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00219da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00219de:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00219e1:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c00219eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00219ef:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00219f2:	85 c0                	test   eax,eax
c00219f4:	74 22                	je     c0021a18 <LinkedList<Device>::addElement(Device*)+0xc6>
c00219f6:	83 ec 0c             	sub    esp,0xc
c00219f9:	68 9a 2d 02 c0       	push   0xc0022d9a
c00219fe:	e8 98 10 ff ff       	call   c0012a9b <Krnl::panic(char const*)>
c0021a03:	83 c4 10             	add    esp,0x10
c0021a06:	eb 10                	jmp    c0021a18 <LinkedList<Device>::addElement(Device*)+0xc6>
c0021a08:	83 ec 0c             	sub    esp,0xc
c0021a0b:	68 a4 2d 02 c0       	push   0xc0022da4
c0021a10:	e8 86 10 ff ff       	call   c0012a9b <Krnl::panic(char const*)>
c0021a15:	83 c4 10             	add    esp,0x10
c0021a18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021a1c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021a1f:	8d 50 01             	lea    edx,[eax+0x1]
c0021a22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021a26:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0021a29:	90                   	nop
c0021a2a:	83 c4 0c             	add    esp,0xc
c0021a2d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c0021a2e <LinkedList<Device>::LinkedList()>:
c0021a2e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021a32:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021a38:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021a3c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0021a43:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021a47:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0021a4e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021a52:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021a58:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021a5c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0021a63:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021a67:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0021a6e:	90                   	nop
c0021a6f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c0021a70 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c0021a70:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021a74:	8b 00                	mov    eax,DWORD PTR [eax]
c0021a76:	85 c0                	test   eax,eax
c0021a78:	75 0e                	jne    c0021a88 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0021a7a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021a7e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021a81:	85 c0                	test   eax,eax
c0021a83:	75 03                	jne    c0021a88 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0021a85:	b0 01                	mov    al,0x1
c0021a87:	c3                   	ret    
c0021a88:	b0 00                	mov    al,0x0
c0021a8a:	90                   	nop
c0021a8b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c0021a8c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c0021a8c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021a90:	8b 00                	mov    eax,DWORD PTR [eax]
c0021a92:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c0021a94 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c0021a94:	83 ec 0c             	sub    esp,0xc
c0021a97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021a9b:	8b 00                	mov    eax,DWORD PTR [eax]
c0021a9d:	85 c0                	test   eax,eax
c0021a9f:	75 17                	jne    c0021ab8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c0021aa1:	83 ec 0c             	sub    esp,0xc
c0021aa4:	68 b0 2d 02 c0       	push   0xc0022db0
c0021aa9:	e8 ed 0f ff ff       	call   c0012a9b <Krnl::panic(char const*)>
c0021aae:	83 c4 10             	add    esp,0x10
c0021ab1:	e9 92 00 00 00       	jmp    c0021b48 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb4>
c0021ab6:	66 90                	xchg   ax,ax
c0021ab8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021abc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021abf:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0021ac2:	85 c0                	test   eax,eax
c0021ac4:	0f 95 c0             	setne  al
c0021ac7:	84 c0                	test   al,al
c0021ac9:	74 11                	je     c0021adc <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x48>
c0021acb:	83 ec 0c             	sub    esp,0xc
c0021ace:	68 fb 2d 02 c0       	push   0xc0022dfb
c0021ad3:	e8 c3 0f ff ff       	call   c0012a9b <Krnl::panic(char const*)>
c0021ad8:	83 c4 10             	add    esp,0x10
c0021adb:	90                   	nop
c0021adc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ae0:	8b 00                	mov    eax,DWORD PTR [eax]
c0021ae2:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0021ae5:	85 c0                	test   eax,eax
c0021ae7:	0f 94 c0             	sete   al
c0021aea:	84 c0                	test   al,al
c0021aec:	74 36                	je     c0021b24 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x90>
c0021aee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021af2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021af8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021afc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0021b03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b07:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021b0a:	83 f8 01             	cmp    eax,0x1
c0021b0d:	74 25                	je     c0021b34 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c0021b0f:	83 ec 0c             	sub    esp,0xc
c0021b12:	68 d4 2d 02 c0       	push   0xc0022dd4
c0021b17:	e8 7f 0f ff ff       	call   c0012a9b <Krnl::panic(char const*)>
c0021b1c:	83 c4 10             	add    esp,0x10
c0021b1f:	eb 13                	jmp    c0021b34 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c0021b21:	8d 76 00             	lea    esi,[esi+0x0]
c0021b24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b28:	8b 00                	mov    eax,DWORD PTR [eax]
c0021b2a:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0021b2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b31:	89 10                	mov    DWORD PTR [eax],edx
c0021b33:	90                   	nop
c0021b34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b38:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021b3b:	8d 50 ff             	lea    edx,[eax-0x1]
c0021b3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b42:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0021b45:	8d 76 00             	lea    esi,[esi+0x0]
c0021b48:	83 c4 0c             	add    esp,0xc
c0021b4b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c0021b4c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c0021b4c:	83 ec 0c             	sub    esp,0xc
c0021b4f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0021b54:	75 12                	jne    c0021b68 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c0021b56:	83 ec 0c             	sub    esp,0xc
c0021b59:	68 78 2d 02 c0       	push   0xc0022d78
c0021b5e:	e8 38 0f ff ff       	call   c0012a9b <Krnl::panic(char const*)>
c0021b63:	83 c4 10             	add    esp,0x10
c0021b66:	66 90                	xchg   ax,ax
c0021b68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b6c:	8b 00                	mov    eax,DWORD PTR [eax]
c0021b6e:	85 c0                	test   eax,eax
c0021b70:	74 36                	je     c0021ba8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c0021b72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b76:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021b79:	85 c0                	test   eax,eax
c0021b7b:	74 2b                	je     c0021ba8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c0021b7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b81:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021b84:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021b88:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0021b8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b8f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021b93:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0021b96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b9a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021b9d:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0021ba4:	eb 6a                	jmp    c0021c10 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c0021ba6:	66 90                	xchg   ax,ax
c0021ba8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021bac:	8b 00                	mov    eax,DWORD PTR [eax]
c0021bae:	85 c0                	test   eax,eax
c0021bb0:	75 4e                	jne    c0021c00 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c0021bb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021bb6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021bb9:	85 c0                	test   eax,eax
c0021bbb:	75 43                	jne    c0021c00 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c0021bbd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021bc1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021bc5:	89 10                	mov    DWORD PTR [eax],edx
c0021bc7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021bcb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021bcf:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0021bd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021bd6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021bd9:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0021be0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021be4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021be7:	85 c0                	test   eax,eax
c0021be9:	74 25                	je     c0021c10 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c0021beb:	83 ec 0c             	sub    esp,0xc
c0021bee:	68 9a 2d 02 c0       	push   0xc0022d9a
c0021bf3:	e8 a3 0e ff ff       	call   c0012a9b <Krnl::panic(char const*)>
c0021bf8:	83 c4 10             	add    esp,0x10
c0021bfb:	eb 13                	jmp    c0021c10 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c0021bfd:	8d 76 00             	lea    esi,[esi+0x0]
c0021c00:	83 ec 0c             	sub    esp,0xc
c0021c03:	68 a4 2d 02 c0       	push   0xc0022da4
c0021c08:	e8 8e 0e ff ff       	call   c0012a9b <Krnl::panic(char const*)>
c0021c0d:	83 c4 10             	add    esp,0x10
c0021c10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c14:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021c17:	8d 50 01             	lea    edx,[eax+0x1]
c0021c1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c1e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0021c21:	90                   	nop
c0021c22:	83 c4 0c             	add    esp,0xc
c0021c25:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c0021c28 <ACPI::~ACPI()>:
c0021c28:	83 ec 0c             	sub    esp,0xc
c0021c2b:	ba 50 3d 02 c0       	mov    edx,0xc0023d50
c0021c30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c34:	89 10                	mov    DWORD PTR [eax],edx
c0021c36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c3a:	83 ec 0c             	sub    esp,0xc
c0021c3d:	50                   	push   eax
c0021c3e:	e8 6d be fe ff       	call   c000dab0 <Device::~Device()>
c0021c43:	83 c4 10             	add    esp,0x10
c0021c46:	90                   	nop
c0021c47:	83 c4 0c             	add    esp,0xc
c0021c4a:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c0021c4c <ACPI::~ACPI()>:
c0021c4c:	83 ec 0c             	sub    esp,0xc
c0021c4f:	83 ec 0c             	sub    esp,0xc
c0021c52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021c56:	e8 cd ff ff ff       	call   c0021c28 <ACPI::~ACPI()>
c0021c5b:	83 c4 10             	add    esp,0x10
c0021c5e:	83 ec 08             	sub    esp,0x8
c0021c61:	68 64 12 00 00       	push   0x1264
c0021c66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021c6a:	e8 e1 a9 fe ff       	call   c000c650 <operator delete(void*, unsigned long)>
c0021c6f:	83 c4 10             	add    esp,0x10
c0021c72:	83 c4 0c             	add    esp,0xc
c0021c75:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c0021c78 <LinkedList<Device>::~LinkedList()>:
c0021c78:	90                   	nop
c0021c79:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c0021c7c <LinkedList<Device>::isEmpty()>:
c0021c7c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021c80:	8b 00                	mov    eax,DWORD PTR [eax]
c0021c82:	85 c0                	test   eax,eax
c0021c84:	75 0e                	jne    c0021c94 <LinkedList<Device>::isEmpty()+0x18>
c0021c86:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021c8a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021c8d:	85 c0                	test   eax,eax
c0021c8f:	75 03                	jne    c0021c94 <LinkedList<Device>::isEmpty()+0x18>
c0021c91:	b0 01                	mov    al,0x1
c0021c93:	c3                   	ret    
c0021c94:	b0 00                	mov    al,0x0
c0021c96:	90                   	nop
c0021c97:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c0021c98 <LinkedList<Device>::getFirstElement()>:
c0021c98:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021c9c:	8b 00                	mov    eax,DWORD PTR [eax]
c0021c9e:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c0021ca0 <LinkedList<Device>::removeFirst()>:
c0021ca0:	83 ec 0c             	sub    esp,0xc
c0021ca3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ca7:	8b 00                	mov    eax,DWORD PTR [eax]
c0021ca9:	85 c0                	test   eax,eax
c0021cab:	75 17                	jne    c0021cc4 <LinkedList<Device>::removeFirst()+0x24>
c0021cad:	83 ec 0c             	sub    esp,0xc
c0021cb0:	68 b0 2d 02 c0       	push   0xc0022db0
c0021cb5:	e8 e1 0d ff ff       	call   c0012a9b <Krnl::panic(char const*)>
c0021cba:	83 c4 10             	add    esp,0x10
c0021cbd:	e9 92 00 00 00       	jmp    c0021d54 <LinkedList<Device>::removeFirst()+0xb4>
c0021cc2:	66 90                	xchg   ax,ax
c0021cc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021cc8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021ccb:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0021cd1:	85 c0                	test   eax,eax
c0021cd3:	74 13                	je     c0021ce8 <LinkedList<Device>::removeFirst()+0x48>
c0021cd5:	83 ec 0c             	sub    esp,0xc
c0021cd8:	68 fb 2d 02 c0       	push   0xc0022dfb
c0021cdd:	e8 b9 0d ff ff       	call   c0012a9b <Krnl::panic(char const*)>
c0021ce2:	83 c4 10             	add    esp,0x10
c0021ce5:	8d 76 00             	lea    esi,[esi+0x0]
c0021ce8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021cec:	8b 00                	mov    eax,DWORD PTR [eax]
c0021cee:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0021cf4:	85 c0                	test   eax,eax
c0021cf6:	75 34                	jne    c0021d2c <LinkedList<Device>::removeFirst()+0x8c>
c0021cf8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021cfc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021d02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d06:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0021d0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d11:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021d14:	83 f8 01             	cmp    eax,0x1
c0021d17:	74 27                	je     c0021d40 <LinkedList<Device>::removeFirst()+0xa0>
c0021d19:	83 ec 0c             	sub    esp,0xc
c0021d1c:	68 d4 2d 02 c0       	push   0xc0022dd4
c0021d21:	e8 75 0d ff ff       	call   c0012a9b <Krnl::panic(char const*)>
c0021d26:	83 c4 10             	add    esp,0x10
c0021d29:	eb 15                	jmp    c0021d40 <LinkedList<Device>::removeFirst()+0xa0>
c0021d2b:	90                   	nop
c0021d2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d30:	8b 00                	mov    eax,DWORD PTR [eax]
c0021d32:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c0021d38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d3c:	89 10                	mov    DWORD PTR [eax],edx
c0021d3e:	66 90                	xchg   ax,ax
c0021d40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d44:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021d47:	8d 50 ff             	lea    edx,[eax-0x1]
c0021d4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d4e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0021d51:	8d 76 00             	lea    esi,[esi+0x0]
c0021d54:	83 c4 0c             	add    esp,0xc
c0021d57:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c0021d58 <CPU::~CPU()>:
c0021d58:	83 ec 0c             	sub    esp,0xc
c0021d5b:	ba 3c 3f 02 c0       	mov    edx,0xc0023f3c
c0021d60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d64:	89 10                	mov    DWORD PTR [eax],edx
c0021d66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d6a:	83 ec 0c             	sub    esp,0xc
c0021d6d:	50                   	push   eax
c0021d6e:	e8 3d bd fe ff       	call   c000dab0 <Device::~Device()>
c0021d73:	83 c4 10             	add    esp,0x10
c0021d76:	90                   	nop
c0021d77:	83 c4 0c             	add    esp,0xc
c0021d7a:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c0021d7c <CPU::~CPU()>:
c0021d7c:	83 ec 0c             	sub    esp,0xc
c0021d7f:	83 ec 0c             	sub    esp,0xc
c0021d82:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021d86:	e8 cd ff ff ff       	call   c0021d58 <CPU::~CPU()>
c0021d8b:	83 c4 10             	add    esp,0x10
c0021d8e:	83 ec 08             	sub    esp,0x8
c0021d91:	68 94 11 00 00       	push   0x1194
c0021d96:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021d9a:	e8 b1 a8 fe ff       	call   c000c650 <operator delete(void*, unsigned long)>
c0021d9f:	83 c4 10             	add    esp,0x10
c0021da2:	83 c4 0c             	add    esp,0xc
c0021da5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c0021da8 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c0021da8:	90                   	nop
c0021da9:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0021dac <ThreadControlBlock::ThreadControlBlock()>:
c0021dac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021db0:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0021db7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021dbb:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0021dc2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021dc6:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0021dcd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021dd1:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c0021dd8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021ddc:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c0021de3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021de7:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0021deb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021def:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c0021df3:	90                   	nop
c0021df4:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c0021df8 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c0021df8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021dfc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021e02:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021e06:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0021e0d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021e11:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0021e18:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021e1c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021e22:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021e26:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0021e2d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021e31:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0021e38:	90                   	nop
c0021e39:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c0021e3c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c0021e3c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021e40:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0021e43:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c0021e44 <Vm::_FPUState::_FPUState()>:
c0021e44:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021e48:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c0021e4f:	90                   	nop
c0021e50:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c0021e52 <PCI::~PCI()>:
c0021e52:	83 ec 0c             	sub    esp,0xc
c0021e55:	ba f4 50 02 c0       	mov    edx,0xc00250f4
c0021e5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021e5e:	89 10                	mov    DWORD PTR [eax],edx
c0021e60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021e64:	83 ec 0c             	sub    esp,0xc
c0021e67:	50                   	push   eax
c0021e68:	e8 d3 b6 fe ff       	call   c000d540 <Bus::~Bus()>
c0021e6d:	83 c4 10             	add    esp,0x10
c0021e70:	90                   	nop
c0021e71:	83 c4 0c             	add    esp,0xc
c0021e74:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c0021e76 <PCI::~PCI()>:
c0021e76:	83 ec 0c             	sub    esp,0xc
c0021e79:	83 ec 0c             	sub    esp,0xc
c0021e7c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021e80:	e8 cd ff ff ff       	call   c0021e52 <PCI::~PCI()>
c0021e85:	83 c4 10             	add    esp,0x10
c0021e88:	83 ec 08             	sub    esp,0x8
c0021e8b:	68 5c 01 00 00       	push   0x15c
c0021e90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021e94:	e8 b7 a7 fe ff       	call   c000c650 <operator delete(void*, unsigned long)>
c0021e99:	83 c4 10             	add    esp,0x10
c0021e9c:	83 c4 0c             	add    esp,0xc
c0021e9f:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c0021ea0 <IDE::~IDE()>:
c0021ea0:	83 ec 0c             	sub    esp,0xc
c0021ea3:	ba c4 51 02 c0       	mov    edx,0xc00251c4
c0021ea8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021eac:	89 10                	mov    DWORD PTR [eax],edx
c0021eae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021eb2:	83 ec 0c             	sub    esp,0xc
c0021eb5:	50                   	push   eax
c0021eb6:	e8 d9 c0 fe ff       	call   c000df94 <HardDiskController::~HardDiskController()>
c0021ebb:	83 c4 10             	add    esp,0x10
c0021ebe:	90                   	nop
c0021ebf:	83 c4 0c             	add    esp,0xc
c0021ec2:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c0021ec4 <IDE::~IDE()>:
c0021ec4:	83 ec 0c             	sub    esp,0xc
c0021ec7:	83 ec 0c             	sub    esp,0xc
c0021eca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021ece:	e8 cd ff ff ff       	call   c0021ea0 <IDE::~IDE()>
c0021ed3:	83 c4 10             	add    esp,0x10
c0021ed6:	83 ec 08             	sub    esp,0x8
c0021ed9:	68 70 02 00 00       	push   0x270
c0021ede:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021ee2:	e8 69 a7 fe ff       	call   c000c650 <operator delete(void*, unsigned long)>
c0021ee7:	83 c4 10             	add    esp,0x10
c0021eea:	83 c4 0c             	add    esp,0xc
c0021eed:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c0021eee <SATABus::~SATABus()>:
c0021eee:	83 ec 0c             	sub    esp,0xc
c0021ef1:	ba 90 52 02 c0       	mov    edx,0xc0025290
c0021ef6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021efa:	89 10                	mov    DWORD PTR [eax],edx
c0021efc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021f00:	83 ec 0c             	sub    esp,0xc
c0021f03:	50                   	push   eax
c0021f04:	e8 8b c0 fe ff       	call   c000df94 <HardDiskController::~HardDiskController()>
c0021f09:	83 c4 10             	add    esp,0x10
c0021f0c:	90                   	nop
c0021f0d:	83 c4 0c             	add    esp,0xc
c0021f10:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c0021f12 <SATABus::~SATABus()>:
c0021f12:	83 ec 0c             	sub    esp,0xc
c0021f15:	83 ec 0c             	sub    esp,0xc
c0021f18:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021f1c:	e8 cd ff ff ff       	call   c0021eee <SATABus::~SATABus()>
c0021f21:	83 c4 10             	add    esp,0x10
c0021f24:	83 ec 08             	sub    esp,0x8
c0021f27:	68 64 01 00 00       	push   0x164
c0021f2c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021f30:	e8 1b a7 fe ff       	call   c000c650 <operator delete(void*, unsigned long)>
c0021f35:	83 c4 10             	add    esp,0x10
c0021f38:	83 c4 0c             	add    esp,0xc
c0021f3b:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0021f3c <ATA::~ATA()>:
c0021f3c:	83 ec 0c             	sub    esp,0xc
c0021f3f:	ba 08 53 02 c0       	mov    edx,0xc0025308
c0021f44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021f48:	89 10                	mov    DWORD PTR [eax],edx
c0021f4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021f4e:	83 ec 0c             	sub    esp,0xc
c0021f51:	50                   	push   eax
c0021f52:	e8 1f c1 fe ff       	call   c000e076 <PhysicalDisk::~PhysicalDisk()>
c0021f57:	83 c4 10             	add    esp,0x10
c0021f5a:	90                   	nop
c0021f5b:	83 c4 0c             	add    esp,0xc
c0021f5e:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c0021f60 <ATA::~ATA()>:
c0021f60:	83 ec 0c             	sub    esp,0xc
c0021f63:	83 ec 0c             	sub    esp,0xc
c0021f66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021f6a:	e8 cd ff ff ff       	call   c0021f3c <ATA::~ATA()>
c0021f6f:	83 c4 10             	add    esp,0x10
c0021f72:	83 ec 08             	sub    esp,0x8
c0021f75:	68 7c 01 00 00       	push   0x17c
c0021f7a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021f7e:	e8 cd a6 fe ff       	call   c000c650 <operator delete(void*, unsigned long)>
c0021f83:	83 c4 10             	add    esp,0x10
c0021f86:	83 c4 0c             	add    esp,0xc
c0021f89:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c0021f8a <ATAPI::~ATAPI()>:
c0021f8a:	83 ec 0c             	sub    esp,0xc
c0021f8d:	ba 80 53 02 c0       	mov    edx,0xc0025380
c0021f92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021f96:	89 10                	mov    DWORD PTR [eax],edx
c0021f98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021f9c:	83 ec 0c             	sub    esp,0xc
c0021f9f:	50                   	push   eax
c0021fa0:	e8 d1 c0 fe ff       	call   c000e076 <PhysicalDisk::~PhysicalDisk()>
c0021fa5:	83 c4 10             	add    esp,0x10
c0021fa8:	90                   	nop
c0021fa9:	83 c4 0c             	add    esp,0xc
c0021fac:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c0021fae <ATAPI::~ATAPI()>:
c0021fae:	83 ec 0c             	sub    esp,0xc
c0021fb1:	83 ec 0c             	sub    esp,0xc
c0021fb4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021fb8:	e8 cd ff ff ff       	call   c0021f8a <ATAPI::~ATAPI()>
c0021fbd:	83 c4 10             	add    esp,0x10
c0021fc0:	83 ec 08             	sub    esp,0x8
c0021fc3:	68 84 01 00 00       	push   0x184
c0021fc8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021fcc:	e8 7f a6 fe ff       	call   c000c650 <operator delete(void*, unsigned long)>
c0021fd1:	83 c4 10             	add    esp,0x10
c0021fd4:	83 c4 0c             	add    esp,0xc
c0021fd7:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c0021fd8 <SATA::~SATA()>:
c0021fd8:	83 ec 0c             	sub    esp,0xc
c0021fdb:	ba bc 55 02 c0       	mov    edx,0xc00255bc
c0021fe0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021fe4:	89 10                	mov    DWORD PTR [eax],edx
c0021fe6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021fea:	83 ec 0c             	sub    esp,0xc
c0021fed:	50                   	push   eax
c0021fee:	e8 83 c0 fe ff       	call   c000e076 <PhysicalDisk::~PhysicalDisk()>
c0021ff3:	83 c4 10             	add    esp,0x10
c0021ff6:	90                   	nop
c0021ff7:	83 c4 0c             	add    esp,0xc
c0021ffa:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0021ffc <SATA::~SATA()>:
c0021ffc:	83 ec 0c             	sub    esp,0xc
c0021fff:	83 ec 0c             	sub    esp,0xc
c0022002:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022006:	e8 cd ff ff ff       	call   c0021fd8 <SATA::~SATA()>
c002200b:	83 c4 10             	add    esp,0x10
c002200e:	83 ec 08             	sub    esp,0x8
c0022011:	68 7c 01 00 00       	push   0x17c
c0022016:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002201a:	e8 31 a6 fe ff       	call   c000c650 <operator delete(void*, unsigned long)>
c002201f:	83 c4 10             	add    esp,0x10
c0022022:	83 c4 0c             	add    esp,0xc
c0022025:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c0022026 <SATAPI::~SATAPI()>:
c0022026:	83 ec 0c             	sub    esp,0xc
c0022029:	ba 28 57 02 c0       	mov    edx,0xc0025728
c002202e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022032:	89 10                	mov    DWORD PTR [eax],edx
c0022034:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022038:	83 ec 0c             	sub    esp,0xc
c002203b:	50                   	push   eax
c002203c:	e8 35 c0 fe ff       	call   c000e076 <PhysicalDisk::~PhysicalDisk()>
c0022041:	83 c4 10             	add    esp,0x10
c0022044:	90                   	nop
c0022045:	83 c4 0c             	add    esp,0xc
c0022048:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c002204a <SATAPI::~SATAPI()>:
c002204a:	83 ec 0c             	sub    esp,0xc
c002204d:	83 ec 0c             	sub    esp,0xc
c0022050:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022054:	e8 cd ff ff ff       	call   c0022026 <SATAPI::~SATAPI()>
c0022059:	83 c4 10             	add    esp,0x10
c002205c:	83 ec 08             	sub    esp,0x8
c002205f:	68 84 01 00 00       	push   0x184
c0022064:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022068:	e8 e3 a5 fe ff       	call   c000c650 <operator delete(void*, unsigned long)>
c002206d:	83 c4 10             	add    esp,0x10
c0022070:	83 c4 0c             	add    esp,0xc
c0022073:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0022074 <IOAPIC::~IOAPIC()>:
c0022074:	83 ec 0c             	sub    esp,0xc
c0022077:	ba 7c 57 02 c0       	mov    edx,0xc002577c
c002207c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022080:	89 10                	mov    DWORD PTR [eax],edx
c0022082:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022086:	83 ec 0c             	sub    esp,0xc
c0022089:	50                   	push   eax
c002208a:	e8 21 ba fe ff       	call   c000dab0 <Device::~Device()>
c002208f:	83 c4 10             	add    esp,0x10
c0022092:	90                   	nop
c0022093:	83 c4 0c             	add    esp,0xc
c0022096:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c0022098 <IOAPIC::~IOAPIC()>:
c0022098:	83 ec 0c             	sub    esp,0xc
c002209b:	83 ec 0c             	sub    esp,0xc
c002209e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00220a2:	e8 cd ff ff ff       	call   c0022074 <IOAPIC::~IOAPIC()>
c00220a7:	83 c4 10             	add    esp,0x10
c00220aa:	83 ec 08             	sub    esp,0x8
c00220ad:	68 68 01 00 00       	push   0x168
c00220b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00220b6:	e8 95 a5 fe ff       	call   c000c650 <operator delete(void*, unsigned long)>
c00220bb:	83 c4 10             	add    esp,0x10
c00220be:	83 c4 0c             	add    esp,0xc
c00220c1:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c00220c4 <APICTimer::~APICTimer()>:
c00220c4:	83 ec 0c             	sub    esp,0xc
c00220c7:	ba c4 57 02 c0       	mov    edx,0xc00257c4
c00220cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00220d0:	89 10                	mov    DWORD PTR [eax],edx
c00220d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00220d6:	83 ec 0c             	sub    esp,0xc
c00220d9:	50                   	push   eax
c00220da:	e8 55 d3 fe ff       	call   c000f434 <Timer::~Timer()>
c00220df:	83 c4 10             	add    esp,0x10
c00220e2:	90                   	nop
c00220e3:	83 c4 0c             	add    esp,0xc
c00220e6:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c00220e8 <APICTimer::~APICTimer()>:
c00220e8:	83 ec 0c             	sub    esp,0xc
c00220eb:	83 ec 0c             	sub    esp,0xc
c00220ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00220f2:	e8 cd ff ff ff       	call   c00220c4 <APICTimer::~APICTimer()>
c00220f7:	83 c4 10             	add    esp,0x10
c00220fa:	83 ec 08             	sub    esp,0x8
c00220fd:	68 60 01 00 00       	push   0x160
c0022102:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022106:	e8 45 a5 fe ff       	call   c000c650 <operator delete(void*, unsigned long)>
c002210b:	83 c4 10             	add    esp,0x10
c002210e:	83 c4 0c             	add    esp,0xc
c0022111:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0022114 <PIT::~PIT()>:
c0022114:	83 ec 0c             	sub    esp,0xc
c0022117:	ba 14 58 02 c0       	mov    edx,0xc0025814
c002211c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022120:	89 10                	mov    DWORD PTR [eax],edx
c0022122:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022126:	83 ec 0c             	sub    esp,0xc
c0022129:	50                   	push   eax
c002212a:	e8 05 d3 fe ff       	call   c000f434 <Timer::~Timer()>
c002212f:	83 c4 10             	add    esp,0x10
c0022132:	90                   	nop
c0022133:	83 c4 0c             	add    esp,0xc
c0022136:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c0022138 <PIT::~PIT()>:
c0022138:	83 ec 0c             	sub    esp,0xc
c002213b:	83 ec 0c             	sub    esp,0xc
c002213e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022142:	e8 cd ff ff ff       	call   c0022114 <PIT::~PIT()>
c0022147:	83 c4 10             	add    esp,0x10
c002214a:	83 ec 08             	sub    esp,0x8
c002214d:	68 5c 01 00 00       	push   0x15c
c0022152:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022156:	e8 f5 a4 fe ff       	call   c000c650 <operator delete(void*, unsigned long)>
c002215b:	83 c4 10             	add    esp,0x10
c002215e:	83 c4 0c             	add    esp,0xc
c0022161:	c3                   	ret    
